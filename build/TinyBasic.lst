ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           00008C    27 	STACK_SIZE=140
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000003    29         CELL_SIZE=3
                           00003C    30         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    31         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    32 	FRUN=0 ; flags run code in variable flags
                           000001    33 	FTRAP=1 ; inside trap handler 
                           000002    34 	FLOOP=2 ; FOR loop in preparation 
                           000003    35 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    36 	FBREAK=4 ; break point flag 
                           000005    37 	FCOMP=5  ; compiling flags 
                                     38 
                                     39 
                           000006    40         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     41 
                           007FFF    42 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     43 
                           000008    44 	RX_QUEUE_SIZE=8 
                                     45 
                           00F424    46         TIM2_CLK_FREQ=62500
                                     47 
                           000050    48 	TIB_SIZE=80
                           000080    49         PAD_SIZE=BLOCK_SIZE 
                                     50 
                                     51 ;--------------------------------------
                                     52 ;   constantes related to Arduino 
                                     53 ;   API mapping 
                                     54 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000000    55         INP=0
                           000001    56         OUTP=1 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;       token attribute
                                     60 ;--------------------------------------
                                     61         ; bits 4:5 identify token group 
                                     62         ; 0x0n -> miscelinous 
                                     63         ; 0x1n -> +|- operators 
                                     64         ; 0x2n -> *|/|% operators
                                     65         ; 0x3n -> relational operators 
                           000080    66         TK_CMD=128      ; BASIC command   
                           000081    67         TK_IFUNC=129    ; BASIC integer function
                           000082    68         TK_CFUNC=130    ; BASIC character function
                           000083    69         TK_CONST=131    ; BASIC constant 
                           000084    70         TK_INTGR=132    ; 16 bits integer 
                           000085    71         TK_VAR=133
                           000086    72         TK_FLOAT=134    ; float32 
                           000000    73         TK_NONE=0       ; not a token 
                           000002    74         TK_QSTR=2       ; quoted string  
                           000003    75         TK_LABEL=3      ; used for defined, constants, variables
                           000004    76         TK_CHAR=4       ; ASCII character 
                           000005    77         TK_ARRAY=5     ; array variable '@' 
                           000006    78         TK_LPAREN=6     ; left parenthesis '('
                           000007    79         TK_RPAREN=7     ; right parenthesis ')'
                           000008    80         TK_COMMA=8     ; item separator ',' 
                           000009    81         TK_SHARP=9     ; print colon width '#' 
                           00000A    82         TK_COLON=0xa      ; command separator ':' 
                                     83         
                           000010    84         TK_PLUS=0x10    ; addition operator '+'
                           000011    85         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    86         TK_MULT=0x20    ; multiplication operator '*'
                           000021    87         TK_DIV=0x21     ; division operator '/'
                           000022    88         TK_MOD=0x22     ; modulo operator '%'
                                     89 
                                     90         ; don't change these token values 
                                     91         ; values chosen to be used as a mask.
                                     92         ; bit 7   1 for dictionary words else 0 
                                     93         ; bits 6  always 0 
                                     94         ; bits 5:4 identify group 
                                     95         ; bits 3:0 token identifier inside group  
                           000031    96         TK_GT=0x31      ; relation operator '>'
                           000032    97         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033    98         TK_GE=0x33      ; relation operator '>='
                           000034    99         TK_LT=0x34      ; relation operator '<'
                           000036   100         TK_LE=0x36      ; relation operator '<='
                           000035   101         TK_NE=0x35      ; relation operator '<>' not equal 
                                    102         ; token groups 
                           000030   103         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   104         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   105         TK_GRP_ADD=0x10  ; additive operators
                           000020   106         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   107         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   108         CMD_END=2 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                    110 ;--------------------------------------
                                    111 ;   error codes 
                                    112 ;--------------------------------------
                           000000   113     ERR_NONE=0
                           000001   114     ERR_MEM_FULL=1 
                           000002   115     ERR_SYNTAX=2
                           000003   116     ERR_MATH_OVF=3
                           000004   117     ERR_DIV0=4 
                           000005   118     ERR_NO_LINE=5
                           000006   119     ERR_RUN_ONLY=6
                           000007   120     ERR_CMD_ONLY=7
                           000008   121     ERR_DUPLICATE=8
                           000009   122     ERR_NOT_FILE=9
                           00000A   123     ERR_BAD_VALUE=10
                           00000B   124     ERR_NO_ACCESS=11
                           00000C   125     ERR_NO_DATA=12 
                           00000D   126     ERR_NO_PROG=13
                           00000E   127     ERR_NO_FSPACE=14
                           00000F   128     ERR_BUF_FULL=15
                           000010   129     ERR_OVERFLOW=16 
                                    130 
                                    131 ;--------------------------------------
                                    132 ;   assembler flags 
                                    133 ;-------------------------------------
                                    134 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    135 
                                    136      .macro _usec_dly n 
                                    137     ldw x,#(16*n-2)/4
                                    138     decw x
                                    139     nop 
                                    140     jrne .-4
                                    141     .endm 
                                    142     
                                    143     ; load X register with 
                                    144     ; entry point of dictionary
                                    145     ; before calling 'search_dict'
                                    146     .macro _ldx_dict dict_name
                                    147     ldw x,#dict_name+2
                                    148     .endm 
                                    149 
                                    150     ; reset BASIC pointer
                                    151     ; to beginning of last token
                                    152     ; extracted except if it was end of line 
                                    153     .macro _unget_token 
                                    154      mov in,in.saved  
                                    155     .endm
                                    156 
                                    157 
                                    158 ;---------------------------------------
                                    159 ;    xtack manipulation macros 
                                    160 ;    Y is used as xstack pointer  
                                    161 ;----------------------------------------
                                    162     ; pop in A:X from XSTACK 
                                    163     .macro _xpop 
                                    164     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ldw x,y 
                                    166     ldw x,(1,x)
                                    167     addw y,#CELL_SIZE 
                                    168     .endm 
                                    169 
                                    170     ; push A:X  to XSTACK 
                                    171     .macro _xpush 
                                    172     subw y,#CELL_SIZE
                                    173     ld (y),a 
                                    174     ldw (1,y),x 
                                    175     .endm 
                                    176 
                                    177     ; drop from XSTACK 
                                    178     .macro _xdrop 
                                    179     addw y,#CELL_SIZE 
                                    180     .endm 
                                    181 
                                    182     ; @T fetch top xstack 
                                    183     .macro _at_top
                                    184     ld a,(y)
                                    185     ldw x,y 
                                    186     ldw x,(1,x)
                                    187     .endm 
                                    188 
                                    189     ; @N  fetch next on xstack 
                                    190     .macro _at_next 
                                    191     ld a,(3,y)
                                    192     ldw x,y 
                                    193     ldw x,(4,x)
                                    194     .endm 
                                    195 
                                    196     ; !T put on top of xtack 
                                    197     .macro _store_top 
                                    198     ld (y),a 
                                    199     ldw (1,y),x     
                                    200     .endm 
                                    201 
                                    202     ; !N put next on xstack 
                                    203     .macro _store_next 
                                    204     ld (3,y),a 
                                    205     ldw (4,y),x 
                                    206     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DDR_IDX=DATA_IDX+2
                           000022    42     DEC_IDX=DDR_IDX+2
                           000024    43     DO_IDX=DEC_IDX+2
                           000026    44     DREAD_IDX=DO_IDX+2
                           000028    45     DWRITE_IDX=DREAD_IDX+2
                           00002A    46     EDIT_IDX=DWRITE_IDX+2
                           00002C    47     EEPROM_IDX=EDIT_IDX+2
                           00002E    48     END_IDX=EEPROM_IDX+2
                           000030    49     ERASE_IDX=END_IDX+2
                           000032    50     FCPU_IDX=ERASE_IDX+2
                           000034    51     SAVE_IDX=FCPU_IDX+2
                           000036    52     FOR_IDX=SAVE_IDX+2
                           000038    53     GOSUB_IDX=FOR_IDX+2
                           00003A    54     GOTO_IDX=GOSUB_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GPIO_IDX=GOTO_IDX+2
                           00003E    56     HEX_IDX=GPIO_IDX+2
                           000040    57     IDR_IDX=HEX_IDX+2
                           000042    58     IF_IDX=IDR_IDX+2
                           000044    59     INPUT_IDX=IF_IDX+2
                           000046    60     INVERT_IDX=INPUT_IDX+2
                           000048    61     IWDGEN_IDX=INVERT_IDX+2
                           00004A    62     IWDGREF_IDX=IWDGEN_IDX+2
                           00004C    63     KEY_IDX=IWDGREF_IDX+2
                           00004E    64     LET_IDX=KEY_IDX+2
                           000050    65     LIST_IDX=LET_IDX+2
                           000052    66     LOG_IDX=LIST_IDX+2
                           000054    67     LSHIFT_IDX=LOG_IDX+2
                                     68 ;    MULDIV_IDX=LSHIFT_IDX+2
                           000056    69     NEXT_IDX=LSHIFT_IDX+2
                           000058    70     NEW_IDX=NEXT_IDX+2
                           00005A    71     NOT_IDX=NEW_IDX+2
                           00005C    72     ODR_IDX=NOT_IDX+2
                           00005E    73     OR_IDX=ODR_IDX+2
                           000060    74     PAD_IDX=OR_IDX+2
                           000062    75     PAUSE_IDX=PAD_IDX+2
                           000064    76     PMODE_IDX=PAUSE_IDX+2
                           000066    77     PEEK_IDX=PMODE_IDX+2
                           000068    78     PINP_IDX=PEEK_IDX+2
                           00006A    79     POKE_IDX=PINP_IDX+2
                           00006C    80     POUT_IDX=POKE_IDX+2
                           00006E    81    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000070    82     PRTA_IDX=PRT_IDX+2
                           000072    83     PRTB_IDX=PRTA_IDX+2
                           000074    84     PRTC_IDX=PRTB_IDX+2
                           000076    85     PRTD_IDX=PRTC_IDX+2
                           000078    86     PRTE_IDX=PRTD_IDX+2
                           00007A    87     PRTF_IDX=PRTE_IDX+2
                           00007C    88     PRTG_IDX=PRTF_IDX+2
                           00007E    89     PRTH_IDX=PRTG_IDX+2
                           000080    90     PRTI_IDX=PRTH_IDX+2
                           000082    91     QKEY_IDX=PRTI_IDX+2
                           000084    92     READ_IDX=QKEY_IDX+2
                           000086    93     RBT_IDX=READ_IDX+2  ; REBOOT
                           000088    94 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008A    95     REST_IDX=REM_IDX+2 ; RESTORE
                           00008C    96     RET_IDX=REST_IDX+2  ; RETURN 
                           00008E    97     RND_IDX=RET_IDX+2 ; RANDOM 
                           000090    98     RSHIFT_IDX=RND_IDX+2
                           000092    99     RUN_IDX=RSHIFT_IDX+2
                           000094   100     SHOW_IDX=RUN_IDX+2
                           000096   101     FREE_IDX=SHOW_IDX+2
                           000098   102     SLEEP_IDX=FREE_IDX+2
                           00009A   103     SPIRD_IDX=SLEEP_IDX+2
                           00009C   104     SPIEN_IDX=SPIRD_IDX+2
                           00009E   105     SPISEL_IDX=SPIEN_IDX+2
                           0000A0   106     SPIWR_IDX=SPISEL_IDX+2
                           0000A2   107     STEP_IDX=SPIWR_IDX+2
                           0000A4   108     STOP_IDX=STEP_IDX+2
                           0000A6   109     TICKS_IDX=STOP_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000A8   110     TIMER_IDX=TICKS_IDX+2
                           0000AA   111     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000AC   112     TO_IDX=TMROUT_IDX+2
                           0000AE   113     TONE_IDX=TO_IDX+2
                           0000B0   114     UBOUND_IDX=TONE_IDX+2
                           0000B2   115     UFLASH_IDX=UBOUND_IDX+2
                           0000B4   116     UNTIL_IDX=UFLASH_IDX+2
                           0000B6   117     USR_IDX=UNTIL_IDX+2
                           0000B8   118     WAIT_IDX=USR_IDX+2
                           0000BA   119     WORDS_IDX=WAIT_IDX+2
                           0000BC   120     WRITE_IDX=WORDS_IDX+2
                           0000BE   121     XOR_IDX=WRITE_IDX+2
                           0000C0   122     SIZE_IDX=XOR_IDX+2 
                           0000C2   123     ON_IDX=SIZE_IDX+2 
                           0000C4   124     GET_IDX=ON_IDX+2
                           0000C6   125     CONST_IDX=GET_IDX+2
                           0000C8   126     EEFREE_IDX=CONST_IDX+2 
                                    127      
                                    128         
                                    129 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 B2             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 33             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 8B             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 1E             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 21      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 83         [ 4]  120 	call print_registers
                                    121 ;	call cmd_itf
      000019 72 13 00 21      [ 1]  122 	bres flags,#FTRAP 	
      00001D 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ;--------------------------------
      00001E                        131 Timer4UpdateHandler:
      00001E 72 5F 53 42      [ 1]  132 	clr TIM4_SR 
      000022 CE 00 0F         [ 2]  133 	ldw x,ticks
      000025 5C               [ 1]  134 	incw x
      000026 CF 00 0F         [ 2]  135 	ldw ticks,x 
      000029 CE 00 11         [ 2]  136 	ldw x,timer
                                    137 ;	tnzw x 
      00002C 27 04            [ 1]  138 	jreq 1$
      00002E 5A               [ 2]  139 	decw x 
      00002F CF 00 11         [ 2]  140 	ldw timer,x 
      000032                        141 1$:	
      000032 80               [11]  142 	iret 
                                    143 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                    144 ;------------------------------------
                                    145 ; Triggered by pressing USER UserButton 
                                    146 ; on NUCLEO card.
                                    147 ; This is used to abort a progam lock 
                                    148 ; in infinite loop. 
                                    149 ;------------------------------------
      000033                        150 UserButtonHandler:
                                    151 ; wait button release
      000033 5F               [ 1]  152 	clrw x
      000034 5A               [ 2]  153 1$: decw x 
      000035 26 FD            [ 1]  154 	jrne 1$
      000037 72 09 50 15 F8   [ 2]  155 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    156 ; if MCU suspended by SLEEP resume program
      00003C 72 07 00 21 05   [ 2]  157     btjf flags,#FSLEEP,2$
      000041 72 17 00 21      [ 1]  158 	bres flags,#FSLEEP 
      000045 80               [11]  159 	iret
      000046                        160 2$:	
      000046                        161 user_interrupted:
      000046 72 00 00 21 02   [ 2]  162     btjt flags,#FRUN,4$
      00004B 20 0A            [ 2]  163 	jra UBTN_Handler_exit 
      00004D                        164 4$:	; program interrupted by user 
      00004D 72 11 00 21      [ 1]  165 	bres flags,#FRUN 
      000051 AE 00 5F         [ 2]  166 	ldw x,#USER_ABORT
      000054 CD 09 5A         [ 4]  167 	call puts 
      000057                        168 UBTN_Handler_exit:
      000057 AE 17 FF         [ 2]  169     ldw x,#STACK_EMPTY 
      00005A 94               [ 1]  170     ldw sp,x
      00005B 9A               [ 1]  171 	rim 
      00005C CC 16 D2         [ 2]  172 5$:	jp warm_start
                                    173 
      00005F 0A 50 72 6F 67 72 61   174 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    175 
                                    176 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    177 ;    peripherals initialization
                                    178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    179 
                                    180 ;----------------------------------------
                                    181 ; inialize MCU clock 
                                    182 ; input:
                                    183 ;   A 		source  HSI | 1 HSE 
                                    184 ;   XL      CLK_CKDIVR , clock divisor 
                                    185 ; output:
                                    186 ;   none 
                                    187 ;----------------------------------------
      00007A                        188 clock_init:	
      00007A C1 50 C3         [ 1]  189 	cp a,CLK_CMSR 
      00007D 27 0C            [ 1]  190 	jreq 2$ ; no switching required 
                                    191 ; select clock source 
      00007F 72 12 50 C5      [ 1]  192 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000083 C7 50 C4         [ 1]  193 	ld CLK_SWR,a
      000086 C1 50 C3         [ 1]  194 1$:	cp a,CLK_CMSR
      000089 26 FB            [ 1]  195 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B                        196 2$: 	
                                    197 ; HSI and cpu clock divisor 
      00008B 9F               [ 1]  198 	ld a,xl 
      00008C C7 50 C6         [ 1]  199 	ld CLK_CKDIVR,a  
      00008F 81               [ 4]  200 	ret
                                    201 
                                    202 ;----------------------------------
                                    203 ; TIMER2 used as audio tone output 
                                    204 ; on port D:5.
                                    205 ; channel 1 configured as PWM mode 1 
                                    206 ;-----------------------------------  
                                    207 
      000090                        208 timer2_init:
      000090 72 1A 50 C7      [ 1]  209 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000094 35 60 53 05      [ 1]  210  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      000098 35 08 53 0C      [ 1]  211 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009C 81               [ 4]  212 	ret 
                                    213 
                                    214 ;---------------------------------
                                    215 ; TIM4 is configured to generate an 
                                    216 ; interrupt every millisecond 
                                    217 ;----------------------------------
      00009D                        218 timer4_init:
      00009D 72 18 50 C7      [ 1]  219 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A1 35 07 53 45      [ 1]  220 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A5 35 7D 53 46      [ 1]  221 	mov TIM4_ARR,#125 ; set for 1msec.
      0000A9 35 05 53 40      [ 1]  222 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000AD 72 10 53 41      [ 1]  223 	bset TIM4_IER,#TIM4_IER_UIE
      0000B1 81               [ 4]  224 	ret
                                    225 
                                    226 ;-------------------------------------
                                    227 ;  initialization entry point 
                                    228 ;-------------------------------------
      0000B2                        229 cold_start:
                                    230 ;set stack 
      0000B2 AE 17 FF         [ 2]  231 	ldw x,#STACK_EMPTY
      0000B5 94               [ 1]  232 	ldw sp,x
                                    233 ; clear all ram 
      0000B6 7F               [ 1]  234 0$: clr (x)
      0000B7 5A               [ 2]  235 	decw x 
      0000B8 26 FC            [ 1]  236 	jrne 0$
                                    237 ; activate pull up on all inputs 
      0000BA A6 FF            [ 1]  238 	ld a,#255 
      0000BC C7 50 03         [ 1]  239 	ld PA_CR1,a 
      0000BF C7 50 08         [ 1]  240 	ld PB_CR1,a 
      0000C2 C7 50 0D         [ 1]  241 	ld PC_CR1,a 
      0000C5 C7 50 12         [ 1]  242 	ld PD_CR1,a 
      0000C8 C7 50 17         [ 1]  243 	ld PE_CR1,a 
      0000CB C7 50 1C         [ 1]  244 	ld PF_CR1,a 
      0000CE C7 50 21         [ 1]  245 	ld PG_CR1,a 
      0000D1 C7 50 2B         [ 1]  246 	ld PI_CR1,a
                                    247 ; set LD2 pin as output 
      0000D4 72 1A 50 0D      [ 1]  248     bset PC_CR1,#LED2_BIT
      0000D8 72 1A 50 0E      [ 1]  249     bset PC_CR2,#LED2_BIT
      0000DC 72 1A 50 0C      [ 1]  250     bset PC_DDR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000E0 72 1B 50 0A      [ 1]  251 	bres PC_ODR,#LED2_BIT 
                                    252 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000E4 55 00 3F 54 07   [ 1]  253 	mov ADC_TDRL,0x3f
                                    254 ; disable peripherals clocks
                                    255 ;	clr CLK_PCKENR1 
                                    256 ;	clr CLK_PCKENR2
      0000E9 72 5F 50 F2      [ 1]  257 	clr AWU_TBR 
      0000ED 72 14 50 CA      [ 1]  258 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    259 ; select internal clock no divisor: 16 Mhz 	
      0000F1 A6 E1            [ 1]  260 	ld a,#CLK_SWR_HSI 
      0000F3 5F               [ 1]  261 	clrw x  
      0000F4 CD 00 7A         [ 4]  262     call clock_init 
      0000F7 CD 00 9D         [ 4]  263 	call timer4_init
      0000FA CD 00 90         [ 4]  264 	call timer2_init
                                    265 ; UART1 at 115200 BAUD
      0000FD CD 08 B8         [ 4]  266 	call uart1_init
                                    267 ; activate PE_4 (user button interrupt)
      000100 72 18 50 18      [ 1]  268     bset PE_CR2,#USR_BTN_BIT 
                                    269 ; display system information
      000104 9A               [ 1]  270 	rim ; enable interrupts 
      000105 72 5C 00 16      [ 1]  271 	inc seedy+1 
      000109 72 5C 00 14      [ 1]  272 	inc seedx+1 
      00010D CD 1C 67         [ 4]  273 	call func_eefree 
      000110 CD 1B A3         [ 4]  274 	call ubound 
      000113 CD 14 A4         [ 4]  275 	call clear_basic
      000116 CD 24 8F         [ 4]  276 	call beep_1khz  
      000119 CD 14 51         [ 4]  277 	call system_information
      00011C                        278 2$:	
                                    279 ; check for application in flash memory 
      00011C CE 35 80         [ 2]  280 	ldw x,app_sign 
      00011F C3 27 85         [ 2]  281 	cpw x,SIGNATURE 
      000122 27 03            [ 1]  282 	jreq run_app
      000124 CC 16 D2         [ 2]  283 	jp warm_start 
      000127                        284 run_app:
                                    285 ; run application in FLASH|EEPROM 
      000127 CD 14 82         [ 4]  286 	call warm_init
      00012A AE 35 84         [ 2]  287 	ldw x,#app 
      00012D CF 00 1A         [ 2]  288 	ldw txtbgn,x
      000130 72 BB 35 82      [ 2]  289 	addw x,app_size 
      000134 CF 00 1C         [ 2]  290 	ldw txtend,x 
      000137 AE 01 45         [ 2]  291 	ldw x,#AUTO_RUN 
      00013A CD 09 5A         [ 4]  292 	call puts 
      00013D CD 1D 8B         [ 4]  293 	call program_info 
      000140 CC 24 33         [ 2]  294 	jp run_it_02  
      000143 20 FE            [ 2]  295     jra .  
                                    296 
      000145 20 61 75 74 6F 20 72   297 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    298 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      000158                         35 add24: ; ( i1 i2 -- i1 + i2 )
      000158                         36     _xpop 
      000158 90 F6            [ 1]    1     ld a,(y)
      00015A 93               [ 1]    2     ldw x,y 
      00015B EE 01            [ 2]    3     ldw x,(1,x)
      00015D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000161 89               [ 2]   37     pushw x  
      000162 88               [ 1]   38     push a  
      000163                         39     _xpop 
      000163 90 F6            [ 1]    1     ld a,(y)
      000165 93               [ 1]    2     ldw x,y 
      000166 EE 01            [ 2]    3     ldw x,(1,x)
      000168 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00016C 72 FB 02         [ 2]   40     addw x,(2,sp)
      00016F 19 01            [ 1]   41     adc a, (1,sp)
      000171                         42     _xpush 
      000171 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000175 90 F7            [ 1]    2     ld (y),a 
      000177 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017A                         43     _drop 3 
      00017A 5B 03            [ 2]    1     addw sp,#3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      00017C 81               [ 4]   44     ret 
                                     45 
                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      00017D                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      00017D                         51     _xpop 
      00017D 90 F6            [ 1]    1     ld a,(y)
      00017F 93               [ 1]    2     ldw x,y 
      000180 EE 01            [ 2]    3     ldw x,(1,x)
      000182 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000186 89               [ 2]   52     pushw x 
      000187 88               [ 1]   53     push  a
      000188                         54     _at_top  
      000188 90 F6            [ 1]    1     ld a,(y)
      00018A 93               [ 1]    2     ldw x,y 
      00018B EE 01            [ 2]    3     ldw x,(1,x)
      00018D 72 F0 02         [ 2]   55     subw x,(2,sp) 
      000190 12 01            [ 1]   56     sbc a, (1,sp)
      000192                         57     _store_top  
      000192 90 F7            [ 1]    1     ld (y),a 
      000194 90 EF 01         [ 2]    2     ldw (1,y),x     
      000197                         58     _drop 3 
      000197 5B 03            [ 2]    1     addw sp,#3 
      000199 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24 
                                     63 ; compare acc24 with A:X 
                                     64 ;-------------------------------
      00019A                         65 cp24:
      00019A C1 00 0C         [ 1]   66     cp a,acc24 
      00019D 26 03            [ 1]   67     jrne 9$ 
      00019F C3 00 0D         [ 2]   68     cpw x,acc16
      0001A2                         69 9$: 
      0001A2 81               [ 4]   70     ret 
                                     71 
                                     72 
                                     73 ;-------------------------------
                                     74 ; abs24 
                                     75 ; abolute value of top  
                                     76 ;-------------------------------
      0001A3                         77 abs24: ; ( i -- u )
      0001A3 90 F6            [ 1]   78     ld a,(y)
      0001A5 A1 80            [ 1]   79     cp a,#0x80 
      0001A7 2A 0E            [ 1]   80     jrpl neg24 ; negative integer
      0001A9 81               [ 4]   81     ret  
                                     82 
                                     83 ;----------------------------
                                     84 ;  one's compleement 
                                     85 ;----------------------------
      0001AA                         86 cpl24:  ; i -- ~i 
      0001AA                         87     _at_top 
      0001AA 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      0001AC 93               [ 1]    2     ldw x,y 
      0001AD EE 01            [ 2]    3     ldw x,(1,x)
      0001AF 43               [ 1]   88     cpl a 
      0001B0 53               [ 2]   89     cplw x 
      0001B1                         90     _store_top 
      0001B1 90 F7            [ 1]    1     ld (y),a 
      0001B3 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B6 81               [ 4]   91     ret 
                                     92 
                                     93 ;----------------------------    
                                     94 ; two'2 complement of top  
                                     95 ;---------------------------
      0001B7                         96 neg24: ; (i -- -i )
      0001B7                         97     _at_top
      0001B7 90 F6            [ 1]    1     ld a,(y)
      0001B9 93               [ 1]    2     ldw x,y 
      0001BA EE 01            [ 2]    3     ldw x,(1,x)
      0001BC 43               [ 1]   98     cpl  a  
      0001BD 53               [ 2]   99     cplw x 
      0001BE 1C 00 01         [ 2]  100     addw x,#1
      0001C1 A9 00            [ 1]  101     adc a,#0
      0001C3                        102     _store_top  
      0001C3 90 F7            [ 1]    1     ld (y),a 
      0001C5 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001C8 81               [ 4]  103 9$: ret 
                                    104 
                                    105 ;-----------------------------
                                    106 ; negate integer in A:X 
                                    107 ;----------------------------
      0001C9                        108 neg_ax:
      0001C9 43               [ 1]  109     cpl  a  
      0001CA 53               [ 2]  110     cplw x 
      0001CB 1C 00 01         [ 2]  111     addw x,#1
      0001CE A9 00            [ 1]  112     adc a,#0
      0001D0 81               [ 4]  113     ret 
                                    114 
                                    115 ;------------------------------------
                                    116 ;  two's complement of acc24 
                                    117 ;-------------------------------------
      0001D1                        118 neg_acc24: ; 
      0001D1 72 53 00 0C      [ 1]  119     cpl acc24 
      0001D5 72 53 00 0D      [ 1]  120     cpl acc16 
      0001D9 72 53 00 0E      [ 1]  121     cpl acc8
      0001DD 72 5C 00 0E      [ 1]  122     inc acc8 
      0001E1 26 0A            [ 1]  123     jrne 9$
      0001E3 72 5C 00 0D      [ 1]  124     inc acc16 
      0001E7 26 04            [ 1]  125     jrne 9$
      0001E9 72 5C 00 0C      [ 1]  126     inc acc24 
      0001ED 81               [ 4]  127 9$: ret 
                                    128 
                                    129 
                                    130 ;--------------------------------------
                                    131 ; unsigned multiply uint24_t by uint8_t
                                    132 ; input:
                                    133 ;	acc24	uint24_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                    134 ;   A		uint8_t
                                    135 ; output:
                                    136 ;   acc24   A*acc24
                                    137 ;      A    overflow, bits 31..24 
                                    138 ;-------------------------------------
                                    139 ; local variables offset  on sp
                           000001   140 	U8   = 1   ; A pushed on stack
                           000001   141 	VSIZE = 1 
      0001EE                        142 mulu24_8:
      0001EE 89               [ 2]  143 	pushw x    ; save X
                                    144 	; local variable
      0001EF 88               [ 1]  145 	push a     ; U8
      0001F0 72 5F 00 0B      [ 1]  146 	clr acc32 
                                    147 ; multiply bits 7..0 * U8   	
      0001F4 97               [ 1]  148 	ld xl,a 
      0001F5 C6 00 0E         [ 1]  149 	ld a,acc8 
      0001F8 42               [ 4]  150 	mul x,a 
      0001F9 C6 00 0D         [ 1]  151 	ld a, acc16 
      0001FC CF 00 0D         [ 2]  152 	ldw acc16,x
                                    153 ; multiply middle byte, bits 15..8 * U8  	
      0001FF 97               [ 1]  154 	ld xl,a 
      000200 7B 01            [ 1]  155 	ld a,(U8,sp)
      000202 42               [ 4]  156 	mul x,a 
      000203 C6 00 0C         [ 1]  157 	ld a,acc24
      000206 72 5F 00 0C      [ 1]  158 	clr acc24  
      00020A 72 BB 00 0C      [ 2]  159 	addw x,acc24
      00020E CF 00 0C         [ 2]  160 	ldw acc24,x 
                                    161 ; multiply  MSB, bits 23..16 * U8 
      000211 97               [ 1]  162 	ld xl,a 
      000212 7B 01            [ 1]  163 	ld a,(U8,sp)
      000214 42               [ 4]  164 	mul x,a
      000215 72 BB 00 0B      [ 2]  165 	addw x,acc32  
      000219 CF 00 0B         [ 2]  166 	ldw acc32,x 
      00021C 9E               [ 1]  167 	ld a,xh 
      00021D                        168 	_drop VSIZE  
      00021D 5B 01            [ 2]    1     addw sp,#VSIZE 
      00021F 85               [ 2]  169 	popw x 
      000220 81               [ 4]  170 	ret 
                                    171 
                                    172 
                                    173 ;-------------------------------
                                    174 ; mul24 i1 i2 -- i1*i2  
                                    175 ; multiply 24 bits integers 
                                    176 ;------------------------------
                           000001   177     PROD=1 
                           000004   178     N1=4
                           000007   179     N2=7
                           00000A   180     PROD_SIGN=10
                           00000A   181     VSIZE=10 
      000221                        182 mul24:
      000221                        183     _vars VSIZE
      000221 52 0A            [ 2]    1     sub sp,#VSIZE 
      000223 0F 0A            [ 1]  184     clr (PROD_SIGN,sp)
      000225                        185     _xpop 
      000225 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000227 93               [ 1]    2     ldw x,y 
      000228 EE 01            [ 2]    3     ldw x,(1,x)
      00022A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00022E 4D               [ 1]  186     tnz a 
      00022F 2A 05            [ 1]  187     jrpl 0$
      000231 03 0A            [ 1]  188     cpl (PROD_SIGN,sp)
      000233 CD 01 C9         [ 4]  189     call neg_ax 
      000236                        190 0$:    
      000236 6B 04            [ 1]  191     ld (N1,sp),a 
      000238 1F 05            [ 2]  192     ldw (N1+1,sp),x
      00023A                        193     _at_top 
      00023A 90 F6            [ 1]    1     ld a,(y)
      00023C 93               [ 1]    2     ldw x,y 
      00023D EE 01            [ 2]    3     ldw x,(1,x)
      00023F 4D               [ 1]  194     tnz a 
      000240 2A 09            [ 1]  195     jrpl 2$ 
      000242 03 0A            [ 1]  196     cpl (PROD_SIGN,sp) 
      000244 CD 01 C9         [ 4]  197     call neg_ax
      000247 6B 07            [ 1]  198     ld (N2,sp),a 
      000249 1F 08            [ 2]  199     ldw (N2+1,sp),x   
      00024B                        200 2$: 
      00024B C7 00 0C         [ 1]  201     ld acc24,a 
      00024E CF 00 0D         [ 2]  202     ldw acc16,x 
      000251 7B 06            [ 1]  203     ld a,(N1+2,sp); least byte     
      000253 27 12            [ 1]  204     jreq 4$
      000255 CD 01 EE         [ 4]  205     call mulu24_8
      000258 4D               [ 1]  206     tnz a 
      000259 26 61            [ 1]  207     jrne 8$ ; overflow 
      00025B CE 00 0D         [ 2]  208     ldw x,acc16  
      00025E C6 00 0C         [ 1]  209     ld a,acc24
      000261 2B 59            [ 1]  210     jrmi 8$ ; overflow  
      000263 6B 01            [ 1]  211     ld (PROD,sp),a
      000265 1F 02            [ 2]  212     ldw (PROD+1,sp),x 
      000267                        213 4$:
      000267 7B 07            [ 1]  214     ld a,(N2,sp) 
      000269 1E 08            [ 2]  215     ldw x,(N2+1,sp)
      00026B C7 00 0C         [ 1]  216     ld acc24,a 
      00026E CF 00 0D         [ 2]  217     ldw acc16,x 
      000271 7B 05            [ 1]  218     ld a,(N1+1,sp); middle byte     
      000273 27 1F            [ 1]  219     jreq 5$
      000275 CD 01 EE         [ 4]  220     call mulu24_8
      000278 4D               [ 1]  221     tnz a 
      000279 26 41            [ 1]  222     jrne 8$ ; overflow 
      00027B C6 00 0C         [ 1]  223     ld a,acc24 
      00027E 26 3C            [ 1]  224     jrne 8$  ; overflow 
      000280 CE 00 0D         [ 2]  225     ldw x,acc16  
      000283 72 FB 01         [ 2]  226     addw x,(PROD,sp)
      000286 29 34            [ 1]  227     jrv 8$ ; overflow
      000288 1F 01            [ 2]  228     ldw (PROD,sp),x 
      00028A 7B 07            [ 1]  229     ld a,(N2,sp)
      00028C 1E 08            [ 2]  230     ldw x,(N2+1,sp)
      00028E C7 00 0C         [ 1]  231     ld acc24,a 
      000291 CF 00 0D         [ 2]  232     ldw acc16,x 
      000294                        233 5$:
      000294 7B 04            [ 1]  234     ld a,(N1,sp) ; high byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000296 27 16            [ 1]  235     jreq 6$
      000298 CD 01 EE         [ 4]  236     call mulu24_8
      00029B 4D               [ 1]  237     tnz a 
      00029C 26 1E            [ 1]  238     jrne 8$ ; overflow 
      00029E CE 00 0C         [ 2]  239     ldw x,acc24 
      0002A1 26 19            [ 1]  240     jrne 8$ ; overflow 
      0002A3 C6 00 0E         [ 1]  241     ld a,acc8 
      0002A6 2B 14            [ 1]  242     jrmi 8$ ; overflow 
      0002A8 1B 01            [ 1]  243     add a,(PROD,sp)
      0002AA 6B 01            [ 1]  244     ld (PROD,sp),a 
      0002AC 29 0E            [ 1]  245     jrv 8$ ; overflow 
      0002AE                        246 6$:
      0002AE 7B 01            [ 1]  247     ld a,(PROD,sp)
      0002B0 1E 02            [ 2]  248     ldw x,(PROD+1,sp)
      0002B2 0D 0A            [ 1]  249     tnz (PROD_SIGN,sp)
      0002B4 27 03            [ 1]  250     jreq 7$
      0002B6 CD 01 C9         [ 4]  251     call neg_ax 
      0002B9                        252 7$:
      0002B9 98               [ 1]  253     rcf ; C=0 means no overflow 
      0002BA 20 03            [ 2]  254     jra 9$
      0002BC                        255 8$: ; overflow 
      0002BC 4F               [ 1]  256     clr a 
      0002BD 5F               [ 1]  257     clrw x 
      0002BE 99               [ 1]  258     scf ; C=1 means overflow 
      0002BF                        259 9$:    
      0002BF                        260     _store_top 
      0002BF 90 F7            [ 1]    1     ld (y),a 
      0002C1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002C4                        261     _drop VSIZE 
      0002C4 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0002C6 81               [ 4]  262     ret 
                                    263 
                                    264 ;-------------------------------------
                                    265 ; divide uint24_t by uint8_t
                                    266 ; input:
                                    267 ;	acc24	dividend
                                    268 ;   A 		divisor
                                    269 ; output:
                                    270 ;   acc24	quotient
                                    271 ;   A		remainder
                                    272 ;------------------------------------- 
                                    273 ; offset  on sp of arguments and locals
                           000001   274 	U8   = 1   ; divisor on stack
                           000001   275 	VSIZE =1
      0002C7                        276 divu24_8:
      0002C7 89               [ 2]  277 	pushw x ; save x
      0002C8 88               [ 1]  278 	push a 
                                    279 	; ld dividend UU:MM bytes in X
      0002C9 CE 00 0C         [ 2]  280 	ldw x,acc24
      0002CC 7B 01            [ 1]  281 	ld a,(U8,SP) ; divisor
      0002CE 62               [ 2]  282 	div x,a ; UU:MM/U8
      0002CF 88               [ 1]  283 	push a  ;save remainder
      0002D0 CF 00 0C         [ 2]  284     ldw acc24,x ; quotient 
      0002D3 84               [ 1]  285 	pop a
      0002D4 95               [ 1]  286 	ld xh,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      0002D5 C6 00 0E         [ 1]  287 	ld a,acc8
      0002D8 97               [ 1]  288 	ld xl,a
      0002D9 7B 01            [ 1]  289 	ld a,(U8,sp) ; divisor
      0002DB 62               [ 2]  290 	div x,a  ; R:LL/U8
      0002DC 6B 01            [ 1]  291 	ld (U8,sp),a ; save remainder
      0002DE 9F               [ 1]  292 	ld a,xl
      0002DF C7 00 0E         [ 1]  293 	ld acc8,a
      0002E2 84               [ 1]  294 	pop a
      0002E3 85               [ 2]  295 	popw x
      0002E4 81               [ 4]  296 	ret
                                    297 
                                    298 
                                    299 ;-------------------------------
                                    300 ; div24 N/T   
                                    301 ; divide 24 bits integers
                                    302 ;  i1 i2 -- i1/i2 
                                    303 ;------------------------------
                           000001   304     DIVISOR=1
                           000004   305     CNTR=4
                           000005   306     QSIGN=5
                           000006   307     RSIGN=6 
                           000006   308     VSIZE=6 
      0002E5                        309 div24:
      0002E5                        310     _vars VSIZE 
      0002E5 52 06            [ 2]    1     sub sp,#VSIZE 
      0002E7 0F 06            [ 1]  311     clr (RSIGN,sp)
      0002E9 0F 05            [ 1]  312     clr (QSIGN,sp)
      0002EB                        313     _xpop 
      0002EB 90 F6            [ 1]    1     ld a,(y)
      0002ED 93               [ 1]    2     ldw x,y 
      0002EE EE 01            [ 2]    3     ldw x,(1,x)
      0002F0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0002F4 4D               [ 1]  314     tnz a 
      0002F5 2A 05            [ 1]  315     jrpl 0$ 
      0002F7 03 05            [ 1]  316     cpl (QSIGN,sp)
      0002F9 CD 01 C9         [ 4]  317     call neg_ax
      0002FC                        318 0$:
      0002FC 6B 01            [ 1]  319     ld  (DIVISOR,sp),a
      0002FE 1F 02            [ 2]  320     ldw (DIVISOR+1,sp),x
      000300 1A 02            [ 1]  321     or a,(DIVISOR+1,sp)
      000302 1A 03            [ 1]  322     or a,(DIVISOR+2,sp)
      000304 26 05            [ 1]  323     jrne 1$ 
      000306 A6 04            [ 1]  324     ld a,#ERR_DIV0 
      000308 CC 16 4A         [ 2]  325     jp tb_error 
      00030B                        326 1$: 
      00030B                        327     _at_top
      00030B 90 F6            [ 1]    1     ld a,(y)
      00030D 93               [ 1]    2     ldw x,y 
      00030E EE 01            [ 2]    3     ldw x,(1,x)
      000310 4D               [ 1]  328     tnz a 
      000311 2A 07            [ 1]  329     jrpl 2$
      000313 CD 01 C9         [ 4]  330     call neg_ax
      000316 03 05            [ 1]  331     cpl (QSIGN,sp)
      000318 03 06            [ 1]  332     cpl (RSIGN,sp)
      00031A                        333 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00031A C7 00 0C         [ 1]  334     ld acc24,a 
      00031D CF 00 0D         [ 2]  335     ldw acc16,x 
      000320 A6 18            [ 1]  336     ld a,#24 
      000322 6B 04            [ 1]  337     ld (CNTR,sp),a
      000324 7B 01            [ 1]  338     ld a,(DIVISOR,sp)
      000326 1E 02            [ 2]  339     ldw x,(DIVISOR+1,sp)
      000328 CD 01 9A         [ 4]  340     call cp24 ; A:X-acc24 ?
      00032B 23 14            [ 2]  341     jrule 22$ 
                                    342 ; quotient=0, remainder=divisor      
      00032D C6 00 0C         [ 1]  343     ld a,acc24 
      000330 CE 00 0D         [ 2]  344     ldw x,acc16 
      000333 72 5F 00 0C      [ 1]  345     clr acc24 
      000337 72 5F 00 0D      [ 1]  346     clr acc16 
      00033B 72 5F 00 0E      [ 1]  347     clr acc8 
      00033F 20 2E            [ 2]  348     jra 6$
      000341                        349 22$:     
      000341 4F               [ 1]  350     clr a 
      000342 5F               [ 1]  351     clrw x 
      000343 98               [ 1]  352     rcf  
      000344                        353 3$: 
      000344 72 59 00 0E      [ 1]  354     rlc acc8 
      000348 72 59 00 0D      [ 1]  355     rlc acc16
      00034C 72 59 00 0C      [ 1]  356     rlc acc24 
      000350 59               [ 2]  357     rlcw x  
      000351 49               [ 1]  358     rlc a
      000352 72 F0 02         [ 2]  359 4$: subw x,(DIVISOR+1,sp) 
      000355 12 01            [ 1]  360     sbc a,(DIVISOR,sp)
      000357 24 05            [ 1]  361     jrnc 5$
      000359 72 FB 02         [ 2]  362     addw x,(DIVISOR+1,sp)
      00035C 19 01            [ 1]  363     adc a,(DIVISOR,sp)
      00035E                        364 5$: ; shift carry in QUOTIENT 
      00035E 8C               [ 1]  365     ccf
      00035F 0A 04            [ 1]  366     dec (CNTR,sp)
      000361 26 E1            [ 1]  367     jrne 3$ 
      000363 72 59 00 0E      [ 1]  368     rlc acc8 
      000367 72 59 00 0D      [ 1]  369     rlc acc16 
      00036B 72 59 00 0B      [ 1]  370     rlc acc32 
      00036F                        371 6$:    
      00036F 6B 01            [ 1]  372     ld (DIVISOR,sp),a 
      000371 1F 02            [ 2]  373     ldw (DIVISOR+1,sp),x 
      000373 C6 00 0C         [ 1]  374     ld a,acc24 
      000376 CE 00 0D         [ 2]  375     ldw x,acc16 
      000379 0D 05            [ 1]  376     tnz (QSIGN,sp)
      00037B 27 03            [ 1]  377     jreq 8$
      00037D CD 01 C9         [ 4]  378     call neg_ax 
      000380                        379 8$: 
      000380                        380     _store_top 
      000380 90 F7            [ 1]    1     ld (y),a 
      000382 90 EF 01         [ 2]    2     ldw (1,y),x     
      000385 7B 01            [ 1]  381     ld a,(DIVISOR,sp)
      000387 1E 02            [ 2]  382     ldw x,(DIVSOR+1,sp)
      000389                        383 81$:
      000389 0D 06            [ 1]  384     tnz (RSIGN,sp)
      00038B 27 03            [ 1]  385     jreq 9$
      00038D CD 01 C9         [ 4]  386     call neg_ax       
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000390                        387 9$: _drop VSIZE 
      000390 5B 06            [ 2]    1     addw sp,#VSIZE 
      000392 81               [ 4]  388     ret 
                                    389 
                                    390 
                                    391 ;-------------------------------
                                    392 ; mod24 A:X % acc24 
                                    393 ; remainder 24 bits integers 
                                    394 ; input:
                                    395 ;    acc24   dividend 
                                    396 ;    A:X     divisor 
                                    397 ; output:
                                    398 ;    acc24   acc24 % A:X 
                                    399 ;------------------------------
      000393                        400 mod24:
      000393 CD 02 E5         [ 4]  401     call div24 
      000396                        402     _store_top  ; replace quotient by remainder 
      000396 90 F7            [ 1]    1     ld (y),a 
      000398 90 EF 01         [ 2]    2     ldw (1,y),x     
      00039B 81               [ 4]  403     ret 
                                    404 
                                    405 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      00039C                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      00039C                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      00039C                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      00039C                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      00039C                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      00039C                         37 prt_regs::
      00039C AE 03 DF         [ 2]   38 	ldw x,#regs_state 
      00039F CD 09 5A         [ 4]   39 	call puts
                                     40 ; register PC
      0003A2 16 01            [ 2]   41 	ldw y,(1,sp)
      0003A4 AE 05 13         [ 2]   42 	ldw x,#REG_EPC 
      0003A7 CD 04 64         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003AA 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003AC AE 05 24         [ 2]   46 	ldw x,#REG_CC 
      0003AF CD 04 42         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003B2 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003B4 AE 05 20         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0003B7 CD 04 42         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003BA 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003BC AE 05 1C         [ 2]   54 	ldw x,#REG_X 
      0003BF CD 04 64         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      0003C2 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      0003C4 AE 05 18         [ 2]   58 	ldw x,#REG_Y 
      0003C7 CD 04 64         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      0003CA 90 96            [ 1]   61 	ldw y,sp
      0003CC 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      0003D0 AE 05 29         [ 2]   63 	ldw x,#REG_SP
      0003D3 CD 04 64         [ 4]   64 	call prt_reg16
      0003D6 A6 0D            [ 1]   65 	ld a,#CR 
      0003D8 CD 08 FD         [ 4]   66 	call putc
      0003DB CD 08 FD         [ 4]   67 	call putc   
      0003DE 81               [ 4]   68 	ret 
                                     69 
                                     70 
      0003DF 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000406                         81 prt_peek::
      000406 89               [ 2]   82 	pushw x 
      000407 35 10 00 0A      [ 1]   83 	mov base,#16 
      00040B CD 17 9D         [ 4]   84 	call prt_i16  
      00040E A6 3A            [ 1]   85 	ld a,#': 
      000410 CD 08 FD         [ 4]   86 	call putc 
      000413 A6 20            [ 1]   87 	ld a,#SPACE 
      000415 CD 08 FD         [ 4]   88 	call putc 
      000418 85               [ 2]   89 	popw x 
      000419 F6               [ 1]   90 	ld a,(x)
      00041A 5F               [ 1]   91 	clrw x 
      00041B 97               [ 1]   92 	ld xl,a 
      00041C 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000420 CD 17 9D         [ 4]   94 	call prt_i16 
      000423 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000424                        102 ledon:
      000424 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000428 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000429                        107 ledoff:
      000429 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00042D 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      00042E                        112 ledtoggle:
      00042E A6 20            [ 1]  113     ld a,#LED2_MASK
      000430 C8 50 0A         [ 1]  114     xor a,PC_ODR
      000433 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000436 81               [ 4]  116     ret 
                                    117 
      000437                        118 left_paren:
      000437 A6 20            [ 1]  119 	ld a,#SPACE 
      000439 CD 08 FD         [ 4]  120 	call putc
      00043C A6 28            [ 1]  121 	ld a,#'( 
      00043E CD 08 FD         [ 4]  122 	call putc 	
      000441 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000442                        133 prt_reg8:
      000442 88               [ 1]  134 	push a 
      000443 CD 09 5A         [ 4]  135 	call puts 
      000446 7B 01            [ 1]  136 	ld a,(1,sp) 
      000448 5F               [ 1]  137 	clrw x 
      000449 97               [ 1]  138 	ld xl,a 
      00044A 35 10 00 0A      [ 1]  139 	mov base,#16
      00044E CD 17 9D         [ 4]  140 	call prt_i16  
      000451 CD 04 37         [ 4]  141 	call left_paren 
      000454 84               [ 1]  142 	pop a 
      000455 5F               [ 1]  143 	clrw x 
      000456 97               [ 1]  144 	ld xl,a 
      000457 35 0A 00 0A      [ 1]  145 	mov base,#10 
      00045B CD 17 9D         [ 4]  146 	call prt_i16  
      00045E A6 29            [ 1]  147 	ld a,#') 
      000460 CD 08 FD         [ 4]  148 	call putc
      000463 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      000464                        159 prt_reg16: 
      000464 90 89            [ 2]  160 	pushw y 
      000466 CD 09 5A         [ 4]  161 	call puts 
      000469 1E 01            [ 2]  162 	ldw x,(1,sp) 
      00046B 35 10 00 0A      [ 1]  163 	mov base,#16 
      00046F CD 17 9D         [ 4]  164 	call prt_i16  
      000472 CD 04 37         [ 4]  165 	call left_paren 
      000475 85               [ 2]  166 	popw x 
      000476 35 0A 00 0A      [ 1]  167 	mov base,#10 
      00047A CD 17 9D         [ 4]  168 	call prt_i16  
      00047D A6 29            [ 1]  169 	ld a,#') 
      00047F CD 08 FD         [ 4]  170 	call putc
      000482 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      000483                        177 print_registers:
      000483 AE 04 D6         [ 2]  178 	ldw x,#STATES
      000486 CD 09 5A         [ 4]  179 	call puts
                                    180 ; print EPC 
      000489 AE 05 13         [ 2]  181 	ldw x, #REG_EPC
      00048C CD 09 5A         [ 4]  182 	call puts 
      00048F 7B 0B            [ 1]  183 	ld a, (11,sp)
      000491 C7 00 0E         [ 1]  184 	ld acc8,a 
      000494 7B 0A            [ 1]  185 	ld a, (10,sp) 
      000496 C7 00 0D         [ 1]  186 	ld acc16,a 
      000499 7B 09            [ 1]  187 	ld a,(9,sp) 
      00049B C7 00 0C         [ 1]  188 	ld acc24,a
      00049E 5F               [ 1]  189 	clrw x  
      00049F A6 10            [ 1]  190 	ld a,#16
      0004A1 CD 17 AD         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004A4 AE 05 1C         [ 2]  193 	ldw x,#REG_X
      0004A7 16 05            [ 2]  194 	ldw y,(5,sp)
      0004A9 CD 04 64         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004AC AE 05 18         [ 2]  197 	ldw x,#REG_Y
      0004AF 16 07            [ 2]  198 	ldw y, (7,sp)
      0004B1 CD 04 64         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004B4 AE 05 20         [ 2]  201 	ldw x,#REG_A
      0004B7 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004B9 CD 04 42         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004BC AE 05 24         [ 2]  205 	ldw x,#REG_CC 
      0004BF 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004C1 CD 04 42         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      0004C4 AE 05 29         [ 2]  209 	ldw x,#REG_SP
      0004C7 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0004C9 72 A9 00 0C      [ 2]  211 	addw y,#12
      0004CD CD 04 64         [ 4]  212 	call prt_reg16  
      0004D0 A6 0A            [ 1]  213 	ld a,#'\n' 
      0004D2 CD 08 FD         [ 4]  214 	call putc
      0004D5 81               [ 4]  215 	ret
                                    216 
      0004D6 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000513 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000518 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00051C 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000520 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000524 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000529 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      00052E                        235 cmd_itf:
      00052E 52 01            [ 2]  236 	sub sp,#VSIZE 
      000530 72 5F 00 17      [ 1]  237 	clr farptr 
      000534 72 5F 00 18      [ 1]  238 	clr farptr+1 
      000538 72 5F 00 19      [ 1]  239 	clr farptr+2  
      00053C                        240 repl:
      00053C A6 0D            [ 1]  241 	ld a,#CR 
      00053E CD 08 FD         [ 4]  242 	call putc 
      000541 A6 3F            [ 1]  243 	ld a,#'? 
      000543 CD 08 FD         [ 4]  244 	call putc
      000546 72 5F 00 00      [ 1]  245 	clr in.w 
      00054A 72 5F 00 01      [ 1]  246 	clr in 
      00054E CD 0A 5F         [ 4]  247 	call readln
      000551 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000555 90 F6            [ 1]  249 	ld a,(y)
      000557 27 E3            [ 1]  250 	jreq repl  
      000559 72 5C 00 01      [ 1]  251 	inc in 
      00055D CD 18 2C         [ 4]  252 	call to_upper 
      000560 A1 51            [ 1]  253 	cp a,#'Q 
      000562 26 17            [ 1]  254 	jrne test_p
      000564                        255 repl_exit:
      000564 72 5F 16 68      [ 1]  256 	clr tib 
      000568 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00056C 72 5F 00 01      [ 1]  258 	clr in 
      000570                        259 	_drop #VSIZE 	
      000570 5B 01            [ 2]    1     addw sp,##VSIZE 
      000572 81               [ 4]  260 	ret  
      000573                        261 invalid:
      000573 AE 05 F4         [ 2]  262 	ldw x,#invalid_cmd 
      000576 CD 09 5A         [ 4]  263 	call puts 
      000579 20 C1            [ 2]  264 	jra repl 
      00057B                        265 test_p:	
      00057B A1 50            [ 1]  266     cp a,#'P 
      00057D 27 11            [ 1]  267 	jreq mem_peek
      00057F A1 53            [ 1]  268     cp a,#'S 
      000581 26 F0            [ 1]  269 	jrne invalid 
      000583                        270 print_string:	
      000583 CD 0E C7         [ 4]  271 	call get_token
      000586 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      000588 26 E9            [ 1]  273 	jrne invalid 
      00058A CD 09 5A         [ 4]  274 	call puts
      00058D CC 05 3C         [ 2]  275 	jp repl 	
      000590                        276 mem_peek:
      000590 A6 20            [ 1]  277 	ld a,#SPACE 
      000592 CD 0E B4         [ 4]  278 	call skip  	 
      000595 72 B9 00 00      [ 2]  279 	addw y,in.w 
      000599 AE 16 B8         [ 2]  280 	ldw x,#pad 
      00059C CD 13 A8         [ 4]  281 	call strcpy
      00059F AE 16 B8         [ 2]  282 	ldw x,#pad
      0005A2 CD 18 38         [ 4]  283 	call atoi24 	
      0005A5 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005A8 CA 00 0D         [ 1]  285 	or a,acc16 
      0005AB CA 00 0E         [ 1]  286 	or a,acc8 
      0005AE 26 02            [ 1]  287 	jrne 1$ 
      0005B0 20 0C            [ 2]  288 	jra peek_byte  
      0005B2 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005B5 CF 00 17         [ 2]  290 	ldw farptr,x 
      0005B8 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005BB C7 00 19         [ 1]  292 	ld farptr+2,a 
      0005BE                        293 peek_byte:
      0005BE CD 06 03         [ 4]  294 	call print_farptr 
      0005C1 A6 08            [ 1]  295 	ld a,#8 
      0005C3 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      0005C5 5F               [ 1]  297 	clrw x 
      0005C6 CD 06 1E         [ 4]  298 1$:	call fetchc  
      0005C9 89               [ 2]  299 	pushw x 
      0005CA C7 00 0E         [ 1]  300 	ld acc8,a 
      0005CD 5F               [ 1]  301 	clrw x 
      0005CE CF 00 0C         [ 2]  302 	ldw acc24,x 
      0005D1 A6 90            [ 1]  303 	ld a,#16+128
      0005D3 CD 17 AD         [ 4]  304 	call prt_acc24
      0005D6 85               [ 2]  305 	popw x 
      0005D7 0A 01            [ 1]  306 	dec (PSIZE,sp)
      0005D9 26 EB            [ 1]  307 	jrne 1$ 
      0005DB A6 08            [ 1]  308 	ld a,#8 
      0005DD CB 00 19         [ 1]  309 	add a,farptr+2 
      0005E0 C7 00 19         [ 1]  310 	ld farptr+2,a
      0005E3 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0005E4 C9 00 18         [ 1]  312 	adc a,farptr+1 
      0005E7 C7 00 18         [ 1]  313 	ld farptr+1,a 
      0005EA 4F               [ 1]  314 	clr a 
      0005EB C9 00 17         [ 1]  315 	adc a,farptr 
      0005EE C7 00 17         [ 1]  316 	ld farptr,a 
      0005F1 CC 05 3C         [ 2]  317 	jp repl  
                                    318 
      0005F4 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000603                        324 print_farptr:
      000603 C6 00 19         [ 1]  325 	ld a ,farptr+2 
      000606 C7 00 0E         [ 1]  326 	ld acc8,a 
      000609 CE 00 17         [ 2]  327 	ldw x,farptr 
      00060C CF 00 0C         [ 2]  328 	ldw acc24,x 
      00060F 5F               [ 1]  329 	clrw x 
      000610 A6 10            [ 1]  330 	ld a,#16 
      000612 CD 17 AD         [ 4]  331 	call prt_acc24
      000615 A6 20            [ 1]  332 	ld a,#SPACE 
      000617 CD 08 FD         [ 4]  333 	call putc 
      00061A CD 08 FD         [ 4]  334 	call putc 
      00061D 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      00061E                        346 fetchc: ; @C
      00061E 92 AF 00 17      [ 5]  347 	ldf a,([farptr],x)
      000622 5C               [ 1]  348 	incw x
      000623 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000624                        360 number:
      000624 CD 0E C7         [ 4]  361 	call get_token
      000627 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000629 27 03            [ 1]  363 	jreq 1$
      00062B CC 16 48         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00062E 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      00062F                        380 show_row:
      00062F 4D               [ 1]  381 	tnz a 
      000630 26 01            [ 1]  382 	jrne 1$
      000632 81               [ 4]  383 	ret 
      000633                        384 1$:	
      000633 89               [ 2]  385 	pushw x  
      000634 88               [ 1]  386 	push a 
      000635 35 04 00 22      [ 1]  387 	mov tab_width,#4 
      000639 CD 17 9D         [ 4]  388 	call prt_i16 
      00063C A6 20            [ 1]  389 	ld a,#SPACE  
      00063E CD 08 FD         [ 4]  390 	call putc
      000641                        391 row_loop:
      000641 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000643 F6               [ 1]  393 	ld a,(x)
      000644 5F               [ 1]  394 	clrw x 
      000645 97               [ 1]  395 	ld xl,a 
      000646 CD 17 9D         [ 4]  396 	call prt_i16 
      000649 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      00064B 5C               [ 1]  398 	incw x 
      00064C 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      00064E 0A 01            [ 1]  400 	dec (CNT,sp)
      000650 26 EF            [ 1]  401 	jrne row_loop
      000652                        402 	_drop VSIZE  		
      000652 5B 03            [ 2]    1     addw sp,#VSIZE 
      000654 35 04 00 22      [ 1]  403 	mov tab_width,#4
      000658 A6 0D            [ 1]  404 	ld a,#CR 
      00065A CD 08 FD         [ 4]  405 	call putc 
      00065D 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00065E                        419 hex_dump:
      00065E 88               [ 1]  420 	push a 
      00065F                        421 	_vars VSIZE
      00065F 52 04            [ 2]    1     sub sp,#VSIZE 
      000661 C6 00 0A         [ 1]  422 	ld a,base
      000664 6B 03            [ 1]  423 	ld (BASE,sp),a 
      000666 35 10 00 0A      [ 1]  424 	mov base,#16
      00066A C6 00 22         [ 1]  425 	ld a,tab_width 
      00066D 6B 04            [ 1]  426 	ld (TABW,sp),a
      00066F A6 0D            [ 1]  427 	ld a,#CR 
      000671 CD 08 FD         [ 4]  428 	call putc 
      000674 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      000676 A6 10            [ 1]  430 	ld a,#16
      000678 90 A3 00 10      [ 2]  431 	cpw y,#16
      00067C 2A 02            [ 1]  432 	jrpl 2$
      00067E 90 9F            [ 1]  433 	ld a,yl
      000680                        434 2$: 	
      000680 CD 06 2F         [ 4]  435 	call show_row 
      000683 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      000685 72 A2 00 10      [ 2]  437 	subw y,#16 
      000689 90 A3 00 01      [ 2]  438 	cpw y,#1
      00068D 2A E5            [ 1]  439 	jrpl 1$
      00068F 7B 03            [ 1]  440 	ld a,(BASE,sp)
      000691 C7 00 0A         [ 1]  441 	ld base,a
      000694 7B 04            [ 1]  442 	ld a,(TABW,sp)
      000696 C7 00 22         [ 1]  443 	ld tab_width,a 
      000699                        444 	_drop VSIZE
      000699 5B 04            [ 2]    1     addw sp,#VSIZE 
      00069B 84               [ 1]  445 	pop a 
      00069C 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      00069D                         45 unlock_eeprom:
      00069D 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006A2 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006A6 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006AA 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006AE 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006B2 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006B7 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006B8                         62 unlock_flash:
      0006B8 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006BD 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006C1 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006C5 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006C9 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006CD 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006D2 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006D3                         76 row_erase:
      0006D3 88               [ 1]   77 	push a 
      0006D4 90 89            [ 2]   78 	pushw y 
      0006D6 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006DA 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006DE 4F               [ 1]   81 	clr a 
      0006DF 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0006E1 91 A7 00 17      [ 1]   83 	ldf ([farptr],y),a
      0006E5 90 5C            [ 1]   84     incw y
      0006E7 91 A7 00 17      [ 1]   85 	ldf ([farptr],y),a
      0006EB 90 5C            [ 1]   86     incw y
      0006ED 91 A7 00 17      [ 1]   87 	ldf ([farptr],y),a
      0006F1 90 5C            [ 1]   88     incw y
      0006F3 91 A7 00 17      [ 1]   89 	ldf ([farptr],y),a
      0006F7 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006FC 90 85            [ 2]   91 	popw y 
      0006FE 84               [ 1]   92 	pop a 
      0006FF 81               [ 4]   93 	ret
      000700                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000700                         97 move_erase_to_ram:
      000700 89               [ 2]   98 	pushw x 
      000701 90 89            [ 2]   99 	pushw y 
      000703 AE 07 00         [ 2]  100 	ldw x,#row_erase_end 
      000706 1D 06 D3         [ 2]  101 	subw x,#row_erase
      000709 CF 00 0D         [ 2]  102 	ldw acc16,x 
      00070C AE 16 68         [ 2]  103 	ldw x,#tib 
      00070F 90 AE 06 D3      [ 2]  104 	ldw y,#row_erase 
      000713 CD 13 B8         [ 4]  105 	call move
      000716 90 85            [ 2]  106 	popw y
      000718 85               [ 2]  107 	popw x
      000719 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00071A                        123 program_row:
      00071A 88               [ 1]  124 	push a 
      00071B 90 89            [ 2]  125 	pushw y 
      00071D 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00071F 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000723 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000727 90 5F            [ 1]  130 	clrw y 
      000729 F6               [ 1]  131 1$:	ld a,(x)
      00072A 91 A7 00 17      [ 1]  132 	ldf ([farptr],y),a
      00072E 5C               [ 1]  133 	incw x 
      00072F 90 5C            [ 1]  134 	incw y 
      000731 0A 01            [ 1]  135 	dec (BCNT,sp)
      000733 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000735 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073A                        139 	_drop 1 
      00073A 5B 01            [ 2]    1     addw sp,#1 
      00073C 90 85            [ 2]  140 	popw y 
      00073E 84               [ 1]  141 	pop a 
      00073F 81               [ 4]  142 	ret 
      000740                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000740                        149 move_prg_to_ram:
      000740 89               [ 2]  150 	pushw x 
      000741 90 89            [ 2]  151 	pushw y 
      000743 AE 07 40         [ 2]  152 	ldw x,#program_row_end 
      000746 1D 07 1A         [ 2]  153 	subw x,#program_row 
      000749 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00074C AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00074F 90 AE 07 1A      [ 2]  156 	ldw y,#program_row ; source address 
      000753 CD 13 B8         [ 4]  157 	call move
      000756 90 85            [ 2]  158 	popw y 
      000758 85               [ 2]  159 	popw x  
      000759 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00075A                        169 write_buffer:
      00075A 89               [ 2]  170 	pushw x 
      00075B 72 5D 00 17      [ 1]  171 	tnz farptr 
      00075F 26 0D            [ 1]  172 	jrne to_flash 
      000761 CE 00 18         [ 2]  173 	ldw x,farptr+1 
      000764 A3 35 80         [ 2]  174 	cpw x,#app_space  
      000767 24 05            [ 1]  175 	jruge to_flash 
      000769                        176 to_eeprom:
      000769 CD 06 9D         [ 4]  177 	call unlock_eeprom
      00076C 20 03            [ 2]  178 	jra do_programming
      00076E                        179 to_flash:
      00076E CD 06 B8         [ 4]  180 	call unlock_flash
      000771                        181 do_programming:
      000771 85               [ 2]  182 	popw x 
      000772 CD 16 68         [ 4]  183 	call tib
      000775 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000779 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00077D 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00077E                        197 block_erase:
      00077E 89               [ 2]  198 	pushw x 
      00077F CE 00 18         [ 2]  199 	ldw x,farptr+1
      000782 A3 35 80         [ 2]  200 	cpw x,#app_space 
      000785 24 0C            [ 1]  201 	jruge erase_flash 
                                    202 ; erase eeprom block
      000787 CD 06 9D         [ 4]  203 	call unlock_eeprom 
      00078A CD 16 68         [ 4]  204 	call tib 
      00078D 72 17 50 5F      [ 1]  205 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000791 20 0A            [ 2]  206 	jra erase_exit  
                                    207 ; erase flash block:
      000793                        208 erase_flash:
      000793 CD 06 B8         [ 4]  209 	call unlock_flash 
      000796 CD 16 68         [ 4]  210 	call tib 
      000799 72 13 50 5F      [ 1]  211     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00079D                        212 erase_exit: 
      00079D 85               [ 2]  213 	popw x 
      00079E 81               [ 4]  214 	ret 
                                    215 
                                    216 
                                    217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    218 ; write a byte to FLASH or EEPROM/OPTION  
                                    219 ; input:
                                    220 ;    a  		byte to write
                                    221 ;    farptr  	address
                                    222 ;    x          farptr[x]
                                    223 ; output:
                                    224 ;    none
                                    225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    226 	; variables locales
                           000001   227 	BTW = 1   ; byte to write offset on stack
                           000002   228 	OPT = 2   ; OPTION flag offset on stack
                           000002   229 	VSIZE = 2
      00079F                        230 write_byte:
      00079F 90 89            [ 2]  231 	pushw y
      0007A1                        232 	_vars VSIZE
      0007A1 52 02            [ 2]    1     sub sp,#VSIZE 
      0007A3 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      0007A5 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
                                    235 ; put addr[15:0] in Y, for bounds check.
      0007A7 90 CE 00 18      [ 2]  236 	ldw y,farptr+1   ; Y=addr15:0
                                    237 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007AB 72 5D 00 17      [ 1]  238 	tnz farptr 
      0007AF 26 14            [ 1]  239 	jrne write_flash
      0007B1 90 A3 35 80      [ 2]  240     cpw y,#app_space 	 
      0007B5 24 0E            [ 1]  241     jruge write_flash
      0007B7 90 A3 40 00      [ 2]  242 	cpw y,#EEPROM_BASE  
      0007BB 25 57            [ 1]  243     jrult write_exit
      0007BD 90 A3 48 7F      [ 2]  244 	cpw y,#OPTION_END 
      0007C1 22 51            [ 1]  245 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0007C3 20 16            [ 2]  246 	jra write_eeprom 
                                    247 ; write program memory
      0007C5                        248 write_flash:
      0007C5 CD 06 B8         [ 4]  249 	call unlock_flash 
      0007C8 9B               [ 1]  250 1$:	sim 
      0007C9 7B 01            [ 1]  251 	ld a,(BTW,sp)
      0007CB 92 A7 00 17      [ 4]  252 	ldf ([farptr],x),a ; farptr[x]=A
      0007CF 72 05 50 5F FB   [ 2]  253 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007D4 9A               [ 1]  254     rim 
      0007D5 72 13 50 5F      [ 1]  255     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007D9 20 39            [ 2]  256     jra write_exit
                                    257 ; write eeprom and option
      0007DB                        258 write_eeprom:
      0007DB CD 06 9D         [ 4]  259 	call unlock_eeprom
                                    260 	; check for data eeprom or option eeprom
      0007DE 90 A3 48 00      [ 2]  261 	cpw y,#OPTION_BASE
      0007E2 2B 08            [ 1]  262 	jrmi 1$
      0007E4 90 A3 48 80      [ 2]  263 	cpw y,#OPTION_END+1
      0007E8 2A 02            [ 1]  264 	jrpl 1$
      0007EA 03 02            [ 1]  265 	cpl (OPT,sp)
      0007EC                        266 1$: 
      0007EC 0D 02            [ 1]  267     tnz (OPT,sp)
      0007EE 27 08            [ 1]  268     jreq 2$
                                    269 	; pour modifier une option il faut modifier ces 2 bits
      0007F0 72 1E 50 5B      [ 1]  270     bset FLASH_CR2,#FLASH_CR2_OPT
      0007F4 72 1F 50 5C      [ 1]  271     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007F8                        272 2$: 
      0007F8 7B 01            [ 1]  273     ld a,(BTW,sp)
      0007FA 92 A7 00 17      [ 4]  274     ldf ([farptr],x),a
      0007FE 0D 02            [ 1]  275     tnz (OPT,sp)
      000800 27 08            [ 1]  276     jreq 3$
      000802 5C               [ 1]  277     incw x
      000803 7B 01            [ 1]  278     ld a,(BTW,sp)
      000805 43               [ 1]  279     cpl a
      000806 92 A7 00 17      [ 4]  280     ldf ([farptr],x),a
      00080A 72 05 50 5F FB   [ 2]  281 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00080F 72 0D 50 5F FB   [ 2]  282 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000814                        283 write_exit:
      000814                        284 	_drop VSIZE 
      000814 5B 02            [ 2]    1     addw sp,#VSIZE 
      000816 90 85            [ 2]  285 	popw y
      000818 81               [ 4]  286     ret
                                    287 
                                    288 ;--------------------------------------------
                                    289 ; write a data block to eeprom or flash 
                                    290 ; the block must be erased before 
                                    291 ; using this routine.
                                    292 ; input:
                                    293 ;   Y        source address   
                                    294 ;   X        array index  destination  farptr[x]
                                    295 ;   BSIZE    block size bytes 
                                    296 ;   farptr   write address , byte* 
                                    297 ; output:
                                    298 ;	X 		after last byte written 
                                    299 ;   Y 		after last byte read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    300 ;  farptr   point after block
                                    301 ;---------------------------------------------
      000819                        302 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000819                        303 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    304 	; local var 
                           000001   305 	XSAVE=1 
                           000002   306 	VSIZE=2 
      000819                        307 write_block::
      000819 88               [ 1]  308 	push a 
      00081A                        309 	_vars VSIZE
      00081A 52 02            [ 2]    1     sub sp,#VSIZE 
      00081C 1F 01            [ 2]  310 	ldw (XSAVE,sp),x 
      00081E 1E 06            [ 2]  311 	ldw x,(BSIZE,sp) 
      000820 27 13            [ 1]  312 	jreq 9$
      000822 1E 01            [ 2]  313 1$:	ldw x,(XSAVE,sp)
      000824 90 F6            [ 1]  314 	ld a,(y)
      000826 CD 07 9F         [ 4]  315 	call write_byte 
      000829 5C               [ 1]  316 	incw x 
      00082A 90 5C            [ 1]  317 	incw y 
      00082C 1F 01            [ 2]  318 	ldw (XSAVE,sp),x
      00082E 1E 06            [ 2]  319 	ldw x,(BSIZE,sp)
      000830 5A               [ 2]  320 	decw x
      000831 1F 06            [ 2]  321 	ldw (BSIZE,sp),x 
      000833 26 ED            [ 1]  322 	jrne 1$
      000835                        323 9$:
      000835 1E 01            [ 2]  324 	ldw x,(XSAVE,sp)
      000837 CD 08 6F         [ 4]  325 	call incr_farptr
      00083A                        326 	_drop VSIZE
      00083A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00083C 84               [ 1]  327 	pop a 
      00083D 81               [ 4]  328 	ret 
                                    329 
                                    330 
                                    331 ;------------------------------------
                                    332 ; write n bytes to flash | eeprom 
                                    333 ; if the number of bytes is 
                                    334 ; >=128 it is faster to 
                                    335 ; use write_block
                                    336 ; the bytes are written one by 
                                    337 ; one and auto erased if required. 
                                    338 ; input:
                                    339 ;    farptr    dest address 
                                    340 ;    X         src address 
                                    341 ;    A         count 
                                    342 ; output:
                                    343 ;    none   
                                    344 ;----------------------------------
      00083E                        345 write_nbytes:
      00083E 90 89            [ 2]  346 	pushw y
      000840 88               [ 1]  347 	push a 
      000841 90 93            [ 1]  348 	ldw y,x
      000843 5F               [ 1]  349 	clrw x 
      000844                        350 1$:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      000844 90 F6            [ 1]  351 	ld a,(y)
      000846 90 5C            [ 1]  352 	incw y
      000848 CD 07 9F         [ 4]  353 	call write_byte 
      00084B 5C               [ 1]  354 	incw x 
      00084C 0A 01            [ 1]  355 	dec (1,sp)  
      00084E 26 F4            [ 1]  356 	jrne 1$ 
      000850 84               [ 1]  357 9$: pop a 
      000851 90 85            [ 2]  358 	popw y 
      000853 81               [ 4]  359 	ret 
                                    360 
                                    361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    362 ;;;  flash memory operations
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 
                                    365 ;--------------------------
                                    366 ; align farptr to BLOCK_SIZE 
                                    367 ;---------------------------
      000854                        368 row_align:
      000854 A6 7F            [ 1]  369 	ld a,#0x7f 
      000856 C4 00 19         [ 1]  370 	and a,farptr+2 
      000859 27 13            [ 1]  371 	jreq 1$ 
      00085B CE 00 18         [ 2]  372 	ldw x,farptr+1 
      00085E 1C 00 80         [ 2]  373 	addw x,#BLOCK_SIZE 
      000861 24 04            [ 1]  374 	jrnc 0$
      000863 72 5C 00 17      [ 1]  375 	inc farptr 
      000867 9F               [ 1]  376 0$: ld a,xl 
      000868 A4 80            [ 1]  377 	and a,#0x80
      00086A 97               [ 1]  378 	ld xl,a
      00086B CF 00 18         [ 2]  379 	ldw farptr+1,x  	
      00086E 81               [ 4]  380 1$:	ret
                                    381 
                                    382 ;--------------------
                                    383 ; input:
                                    384 ;   X     increment 
                                    385 ; output:
                                    386 ;   farptr  incremented 
                                    387 ;---------------------
      00086F                        388 incr_farptr:
      00086F 72 BB 00 18      [ 2]  389 	addw x,farptr+1 
      000873 24 04            [ 1]  390 	jrnc 1$
      000875 72 5C 00 17      [ 1]  391 	inc farptr 
      000879 CF 00 18         [ 2]  392 1$:	ldw farptr+1,x  
      00087C 81               [ 4]  393 	ret 
                                    394 
                                    395 ;-----------------------------------
                                    396 ; scan block for non zero byte 
                                    397 ; block are 128 bytes 
                                    398 ; input:
                                    399 ;    farptr     address block  
                                    400 ; output:
                                    401 ;     A     0 cleared, other not cleared  
                                    402 ;-----------------------------------
      00087D                        403 scan_block:
      00087D 5F               [ 1]  404 	clrw x 
      00087E 92 AF 00 17      [ 5]  405 1$: ldf a,([farptr],x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      000882 26 06            [ 1]  406 	jrne 2$
      000884 5C               [ 1]  407 	incw x 
      000885 A3 00 80         [ 2]  408 	cpw x,#BLOCK_SIZE 
      000888 25 F4            [ 1]  409 	jrult 1$ 
      00088A 81               [ 4]  410 2$:	ret 
                                    411 
                                    412 
                                    413 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00088B                         66 Uart1RxHandler: ; console receive char 
      00088B 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000890 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000893 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000895 26 06            [ 1]   70 	jrne 2$
      000897 CD 08 FD         [ 4]   71 	call putc 
      00089A CC 00 46         [ 2]   72 	jp user_interrupted
      00089D                         73 2$:
      00089D A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      00089F 26 03            [ 1]   75 	jrne 3$
      0008A1 CC 00 B2         [ 2]   76 	jp cold_start 	
      0008A4 88               [ 1]   77 3$:	push a 
      0008A5 A6 25            [ 1]   78 	ld a,#rx1_queue 
      0008A7 CB 00 2E         [ 1]   79 	add a,rx1_tail 
      0008AA 5F               [ 1]   80 	clrw x 
      0008AB 97               [ 1]   81 	ld xl,a 
      0008AC 84               [ 1]   82 	pop a 
      0008AD F7               [ 1]   83 	ld (x),a 
      0008AE C6 00 2E         [ 1]   84 	ld a,rx1_tail 
      0008B1 4C               [ 1]   85 	inc a 
      0008B2 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008B4 C7 00 2E         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0008B7 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008B8                         97 uart1_init:
      0008B8 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008BC 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008C0 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008C4 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008C8                        103 uart1_set_baud: 
      0008C8 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008C9 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008CB C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008CE 27 0A            [ 1]  109 	jreq 2$ 
      0008D0                        110 1$: ; 8 Mhz 	
      0008D0 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008D4 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008D8 20 08            [ 2]  113 	jra 3$
      0008DA                        114 2$: ; 16 Mhz 	
      0008DA 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008DE 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008E2                        117 3$:
      0008E2 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008E6 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008EA 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008EE 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0008F3 72 5F 00 2D      [ 1]  122     clr rx1_head 
      0008F7 72 5F 00 2E      [ 1]  123 	clr rx1_tail
      0008FB 84               [ 1]  124 	pop a  
      0008FC 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0008FD                        133 putc:: ; console output always on UART1
      0008FD                        134 uart1_putc:: 
      0008FD 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000902 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000905 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000906                        148 qgetc::
      000906                        149 uart1_qgetc::
      000906 C6 00 2D         [ 1]  150 	ld a,rx1_head 
      000909 C0 00 2E         [ 1]  151 	sub a,rx1_tail 
      00090C 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      00090D                        161 getc:: ;console input
      00090D                        162 uart1_getc::
      00090D CD 09 06         [ 4]  163 	call uart1_qgetc
      000910 27 FB            [ 1]  164 	jreq uart1_getc 
      000912 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000913 A6 25            [ 1]  167 	ld a,#rx1_queue
      000915 CB 00 2D         [ 1]  168 	add a,rx1_head 
      000918 5F               [ 1]  169 	clrw x  
      000919 97               [ 1]  170 	ld xl,a 
      00091A F6               [ 1]  171 	ld a,(x)
      00091B 88               [ 1]  172 	push a
      00091C C6 00 2D         [ 1]  173 	ld a,rx1_head 
      00091F 4C               [ 1]  174 	inc a 
      000920 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000922 C7 00 2D         [ 1]  176 	ld rx1_head,a 
      000925 84               [ 1]  177 	pop a  
      000926 85               [ 2]  178 	popw x
      000927 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000928 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000934                        207 get_escape:
      000934 CD 09 0D         [ 4]  208     call getc 
      000937 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000939 27 02            [ 1]  210     jreq 1$
      00093B 4F               [ 1]  211     clr a
      00093C 81               [ 4]  212     ret
      00093D CD 09 0D         [ 4]  213 1$: call getc 
      000940 AE 09 28         [ 2]  214     ldw x,#convert_table
      000943                        215 2$:
      000943 F1               [ 1]  216     cp a,(x)
      000944 27 08            [ 1]  217     jreq 4$
      000946 1C 00 02         [ 2]  218     addw x,#2
      000949 7D               [ 1]  219     tnz (x)
      00094A 26 F7            [ 1]  220     jrne 2$
      00094C 4F               [ 1]  221     clr a
      00094D 81               [ 4]  222     ret 
      00094E 5C               [ 1]  223 4$: incw x 
      00094F F6               [ 1]  224     ld a,(x)
      000950 A1 84            [ 1]  225     cp a,#SUP
      000952 26 05            [ 1]  226     jrne 5$
      000954 88               [ 1]  227     push a 
      000955 CD 09 0D         [ 4]  228     call getc
      000958 84               [ 1]  229     pop a 
      000959                        230 5$:
      000959 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00095A                        241 puts::
      00095A F6               [ 1]  242     ld a,(x)
      00095B 27 06            [ 1]  243 	jreq 1$
      00095D CD 08 FD         [ 4]  244 	call putc 
      000960 5C               [ 1]  245 	incw x 
      000961 20 F7            [ 2]  246 	jra puts 
      000963 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000964                        258 bksp:
      000964 A6 08            [ 1]  259 	ld a,#BS 
      000966 CD 08 FD         [ 4]  260 	call putc 
      000969 A6 20            [ 1]  261 	ld a,#SPACE 
      00096B CD 08 FD         [ 4]  262 	call putc 
      00096E A6 08            [ 1]  263 	ld a,#BS 
      000970 CD 08 FD         [ 4]  264 	call putc 
      000973 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000974                        274 delete_nchar:
      000974 88               [ 1]  275 	push a 
      000975 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000977 27 07            [ 1]  277 	jreq 1$
      000979 CD 09 64         [ 4]  278 	call bksp 
      00097C 0A 01            [ 1]  279 	dec (1,sp)
      00097E 20 F5            [ 2]  280 	jra 0$
      000980 84               [ 1]  281 1$:	pop a 
      000981 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000982                        290 send_escape:
      000982 A6 1B            [ 1]  291 	ld a,#ESC 
      000984 CD 08 FD         [ 4]  292 	call putc 
      000987 A6 5B            [ 1]  293 	ld a,#'[
      000989 CD 08 FD         [ 4]  294 	call putc 
      00098C 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00098D                        311 send_parameter:
      00098D 89               [ 2]  312 	pushw x 
      00098E 5F               [ 1]  313 	clrw x 
      00098F 97               [ 1]  314 	ld xl,a 
      000990 A6 0A            [ 1]  315 	ld a,#10 
      000992 62               [ 2]  316 	div x,a 
      000993 95               [ 1]  317 	ld xh,a 
      000994 9F               [ 1]  318 	ld a,xl
      000995 4D               [ 1]  319     tnz a 
      000996 27 0B            [ 1]  320     jreq 2$
      000998 A1 09            [ 1]  321 	cp a,#9 
      00099A 23 02            [ 2]  322 	jrule 1$
      00099C A6 39            [ 1]  323 	ld a,#'9
      00099E                        324 1$:
      00099E AB 30            [ 1]  325 	add a,#'0 
      0009A0 CD 08 FD         [ 4]  326 	call putc
      0009A3 9E               [ 1]  327 2$:	ld a,xh 
      0009A4 AB 30            [ 1]  328 	add a,#'0
      0009A6 CD 08 FD         [ 4]  329 	call putc 
      0009A9 85               [ 2]  330 	popw x 
      0009AA 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009AB                        344 move_left:
      0009AB 88               [ 1]  345 	push a 
      0009AC CD 09 82         [ 4]  346 	call send_escape
      0009AF 84               [ 1]  347     pop a
      0009B0 CD 09 8D         [ 4]  348 	call send_parameter 
      0009B3 A6 44            [ 1]  349 	ld a,#'D 
      0009B5 CD 08 FD         [ 4]  350 	call putc 
      0009B8 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0009B9                        362 move_right:
      0009B9 88               [ 1]  363 	push a 
      0009BA CD 09 82         [ 4]  364 	call send_escape
      0009BD 84               [ 1]  365     pop a
      0009BE CD 09 8D         [ 4]  366 	call send_parameter 
      0009C1 A6 43            [ 1]  367 	ld a,#'C 
      0009C3 CD 08 FD         [ 4]  368 	call putc 
      0009C6 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009C7                        379 spaces::
      0009C7 A6 20            [ 1]  380 	ld a,#SPACE 
      0009C9 5D               [ 2]  381 1$:	tnzw x
      0009CA 27 06            [ 1]  382 	jreq 9$
      0009CC CD 08 FD         [ 4]  383 	call putc 
      0009CF 5A               [ 2]  384 	decw x
      0009D0 20 F7            [ 2]  385 	jra 1$
      0009D2                        386 9$: 
      0009D2 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      0009D3                        404 insert_char: 
      0009D3                        405 	_vars VSIZE 
      0009D3 52 02            [ 2]    1     sub sp,#VSIZE 
      0009D5 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      0009D7 9E               [ 1]  407     ld a,xh 
      0009D8 6B 01            [ 1]  408 	ld (IPOS,sp),a
      0009DA 9F               [ 1]  409     ld a,xl 
      0009DB 6B 03            [ 1]  410     ld (LLEN,sp),a  
      0009DD 93               [ 1]  411     ldw x,y
      0009DE 5C               [ 1]  412     incw x 
      0009DF 7B 03            [ 1]  413     ld a,(LLEN,sp)
      0009E1 10 01            [ 1]  414     sub a,(IPOS,sp)
      0009E3 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0009E4 C7 00 0E         [ 1]  416     ld acc8,a 
      0009E7 72 5F 00 0D      [ 1]  417     clr acc16
      0009EB CD 13 B8         [ 4]  418     call move
      0009EE 90 AE 16 68      [ 2]  419     ldw y,#tib 
      0009F2 7B 01            [ 1]  420     ld a,(IPOS,sp)
      0009F4 C7 00 0E         [ 1]  421     ld acc8,a 
      0009F7 72 B9 00 0D      [ 2]  422     addw y,acc16 
      0009FB 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      0009FD 90 F7            [ 1]  424     ld (y),a
      0009FF 90 5C            [ 1]  425     incw y  
      000A01 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000A03 CD 09 AB         [ 4]  427     call move_left
      000A06 AE 16 68         [ 2]  428     ldw x,#tib 
      000A09 CD 09 5A         [ 4]  429     call puts 
      000A0C 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000A0E 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000A10 CD 09 AB         [ 4]  432     call move_left 
      000A13                        433 	_drop VSIZE 
      000A13 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A15 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      000A16                        447 delete_under:
      000A16                        448 	_vars VSIZE 
      000A16 52 02            [ 2]    1     sub sp,#VSIZE 
      000A18 6B 02            [ 1]  449     ld (LLEN,sp),a 
      000A1A 9F               [ 1]  450     ld a,xl 
      000A1B 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000A1D 93               [ 1]  452     ldw x,y ; move destination
      000A1E 90 5C            [ 1]  453     incw y  ; move source 
      000A20 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000A22 10 01            [ 1]  455     sub a,(CPOS,sp)
      000A24 4C               [ 1]  456     inc a ; move including zero at end.
      000A25 C7 00 0E         [ 1]  457     ld acc8,a 
      000A28 72 5F 00 0D      [ 1]  458     clr acc16 
      000A2C CD 13 B8         [ 4]  459 	call move 
      000A2F 90 AE 16 68      [ 2]  460     ldw y,#tib 
      000A33 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000A35 C7 00 0E         [ 1]  462     ld acc8,a 
      000A38 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000A3C 93               [ 1]  464     ldw x,y 
      000A3D CD 09 5A         [ 4]  465     call puts 
      000A40 A6 20            [ 1]  466     ld a,#SPACE  
      000A42 CD 08 FD         [ 4]  467     call putc
      000A45 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A47 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A49 CD 09 AB         [ 4]  470     call move_left 
      000A4C 0A 02            [ 1]  471     dec (LLEN,sp)
      000A4E                        472 	_drop VSIZE 
      000A4E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A50 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000A51                        485 delete_line:
      000A51 CD 09 82         [ 4]  486     call send_escape
      000A54 A6 32            [ 1]  487 	ld a,#'2
      000A56 CD 08 FD         [ 4]  488 	call putc 
      000A59 A6 4B            [ 1]  489 	ld a,#'K 
      000A5B CD 08 FD         [ 4]  490 	call putc 
      000A5E 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A5F                        523 readln::
      000A5F                        524 	_vars VSIZE 
      000A5F 52 04            [ 2]    1     sub sp,#VSIZE 
      000A61 5F               [ 1]  525 	clrw x 
      000A62 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000A64 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      000A66 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A68 90 AE 16 68      [ 2]  529  	ldw y,#tib ; input buffer
      000A6C                        530 readln_loop:
      000A6C CD 09 0D         [ 4]  531 	call getc
      000A6F 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000A71 A1 1B            [ 1]  533     cp a,#ESC 
      000A73 26 05            [ 1]  534     jrne 0$
      000A75 CD 09 34         [ 4]  535     call get_escape 
      000A78 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      000A7A A1 0D            [ 1]  537 0$:	cp a,#CR
      000A7C 26 03            [ 1]  538 	jrne 1$
      000A7E CC 0C 08         [ 2]  539 	jp readln_quit
      000A81 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000A83 26 03            [ 1]  541 	jrne 2$ 
      000A85 CC 0C 08         [ 2]  542 	jp readln_quit
      000A88                        543 2$:
      000A88 A1 08            [ 1]  544 	cp a,#BS
      000A8A 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000A8C 0D 03            [ 1]  547     tnz (CPOS,sp)
      000A8E 27 DC            [ 1]  548     jreq readln_loop 
      000A90 A6 01            [ 1]  549     ld a,#1 
      000A92 CD 09 AB         [ 4]  550     call move_left
      000A95 0A 03            [ 1]  551     dec (CPOS,sp)
      000A97 90 5A            [ 2]  552     decw y 
      000A99 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      000A9B CC 0B B4         [ 2]  554     jp 12$
      000A9E                        555 3$:
      000A9E A1 04            [ 1]  556 	cp a,#CTRL_D
      000AA0 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000AA2 CD 0A 51         [ 4]  559 	call delete_line 
      000AA5 7B 03            [ 1]  560     ld a,(CPOS,sp)
      000AA7 4C               [ 1]  561     inc a 
      000AA8 CD 09 AB         [ 4]  562     call move_left 
      000AAB A6 3E            [ 1]  563 	ld a,#'> 
      000AAD CD 08 FD         [ 4]  564 	call putc 
      000AB0 90 AE 16 68      [ 2]  565 	ldw y,#tib
      000AB4 90 7F            [ 1]  566 	clr (y)
      000AB6 0F 02            [ 1]  567 	clr (LL,sp)
      000AB8 0F 03            [ 1]  568 	clr (CPOS,sp)
      000ABA 20 B0            [ 2]  569 	jra readln_loop
      000ABC                        570 4$:
      000ABC A1 12            [ 1]  571 	cp a,#CTRL_R 
      000ABE 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000AC0 0D 02            [ 1]  574 	tnz (LL,sp)
      000AC2 26 A8            [ 1]  575 	jrne readln_loop
      000AC4 AE 16 68         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000AC7 CD 13 8C         [ 4]  577 	call strlen 
      000ACA 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000ACE 27 9C            [ 1]  579 	jreq readln_loop
      000AD0 6B 02            [ 1]  580 	ld (LL,sp),a 
      000AD2 6B 03            [ 1]  581     ld (CPOS,sp),a
      000AD4 AE 16 68         [ 2]  582 	ldw x,#tib 
      000AD7 CD 09 5A         [ 4]  583 	call puts
      000ADA 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000ADC 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000ADF 20 8B            [ 2]  586 	jra readln_loop 
      000AE1                        587 5$:
      000AE1 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000AE3 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      000AE5 AE 16 68         [ 2]  591 	ldw x,#tib 
      000AE8 CD 18 38         [ 4]  592 	call atoi24
      000AEB CE 00 0D         [ 2]  593 	ldw x,acc16
      000AEE CD 0C 42         [ 4]  594 	call search_lineno
      000AF1 5D               [ 2]  595 	tnzw x 
      000AF2 26 0B            [ 1]  596 	jrne 51$
      000AF4 0F 02            [ 1]  597 	clr (LL,sp)
      000AF6 90 AE 16 68      [ 2]  598 	ldw y,#tib
      000AFA 90 7F            [ 1]  599     clr (y) 	
      000AFC CC 0C 08         [ 2]  600 	jp readln_quit  
      000AFF                        601 51$:
      000AFF CF 00 04         [ 2]  602 	ldw basicptr,x
      000B02 E6 02            [ 1]  603 	ld a,(2,x)
      000B04 C7 00 03         [ 1]  604 	ld count,a 
      000B07 90 AE 16 68      [ 2]  605 	ldw y,#tib 
      000B0B CD 11 B0         [ 4]  606 	call decompile 
      000B0E 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000B10 A6 0D            [ 1]  608 	ld a,#CR 
      000B12 CD 08 FD         [ 4]  609 	call putc 
      000B15 A6 3E            [ 1]  610 	ld a,#'>
      000B17 CD 08 FD         [ 4]  611 	call putc
      000B1A AE 16 68         [ 2]  612     ldw x,#tib  
      000B1D CD 13 8C         [ 4]  613 	call strlen 
      000B20 6B 02            [ 1]  614 	ld (LL,sp),a 
      000B22 CD 09 5A         [ 4]  615 	call puts 
      000B25 90 93            [ 1]  616 	ldw y,x
      000B27 7B 02            [ 1]  617     ld a,(LL,sp)
      000B29 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000B2B CC 0A 6C         [ 2]  619 	jp readln_loop
      000B2E                        620 6$:
      000B2E A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000B30 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000B32 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000B34 11 02            [ 1]  625     cp a,(LL,sp)
      000B36 2B 03            [ 1]  626     jrmi 61$
      000B38 CC 0A 6C         [ 2]  627     jp readln_loop 
      000B3B                        628 61$:
      000B3B A6 01            [ 1]  629     ld a,#1 
      000B3D CD 09 B9         [ 4]  630 	call move_right 
      000B40 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000B42 90 5C            [ 1]  632     incw y 
      000B44 CC 0A 6C         [ 2]  633     jp readln_loop 
      000B47 A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      000B49 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000B4B 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000B4D 26 03            [ 1]  638 	jrne 71$
      000B4F CC 0A 6C         [ 2]  639 	jp readln_loop
      000B52                        640 71$:
      000B52 A6 01            [ 1]  641     ld a,#1 
      000B54 CD 09 AB         [ 4]  642 	call move_left 
      000B57 0A 03            [ 1]  643 	dec (CPOS,sp)
      000B59 90 5A            [ 2]  644     decw y 
      000B5B CC 0A 6C         [ 2]  645 	jp readln_loop 
      000B5E A1 82            [ 1]  646 8$: cp a,#HOME  
      000B60 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000B62 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000B64 CD 09 AB         [ 4]  650     call move_left 
      000B67 0F 03            [ 1]  651 	clr (CPOS,sp)
      000B69 90 AE 16 68      [ 2]  652     ldw y,#tib 
      000B6D CC 0A 6C         [ 2]  653 	jp readln_loop  
      000B70 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000B72 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000B74 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      000B76 11 02            [ 1]  658 	cp a,(LL,sp)
      000B78 26 03            [ 1]  659 	jrne 91$
      000B7A CC 0A 6C         [ 2]  660 	jp readln_loop 
      000B7D                        661 91$:
      000B7D 7B 02            [ 1]  662 	ld a,(LL,sp)
      000B7F 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000B81 CD 09 B9         [ 4]  664 	call move_right 
      000B84 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B86 6B 03            [ 1]  666 	ld (CPOS,sp),a
      000B88 90 AE 16 68      [ 2]  667     ldw y,#tib
      000B8C 72 5F 00 0D      [ 1]  668     clr acc16 
      000B90 C7 00 0E         [ 1]  669     ld acc8,a 
      000B93 72 B9 00 0D      [ 2]  670     addw y,acc16  
      000B97 CC 0A 6C         [ 2]  671 	jp readln_loop 
      000B9A A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000B9C 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000B9E 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000BA0 90 89            [ 2]  676 	pushw y 
      000BA2 CD 24 8F         [ 4]  677 	call beep_1khz
      000BA5 90 85            [ 2]  678 	popw y 
      000BA7 CC 0A 6C         [ 2]  679 	jp readln_loop 
      000BAA A1 84            [ 1]  680 11$: cp a,#SUP 
      000BAC 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000BAE 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000BB0 11 02            [ 1]  684     cp a,(LL,sp)
      000BB2 2A 08            [ 1]  685     jrpl 13$
      000BB4                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000BB4 97               [ 1]  687     ld xl,a    ; cursor position 
      000BB5 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      000BB7 CD 0A 16         [ 4]  689     call delete_under
      000BBA 0A 02            [ 1]  690     dec (LLEN,sp)
      000BBC                        691 13$:
      000BBC CC 0A 6C         [ 2]  692     jp readln_loop 
      000BBF                        693 final_test:
      000BBF A1 20            [ 1]  694 	cp a,#SPACE
      000BC1 2A 03            [ 1]  695 	jrpl accept_char
      000BC3 CC 0A 6C         [ 2]  696 	jp readln_loop
      000BC6                        697 accept_char:
      000BC6 A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      000BC8 11 02            [ 1]  699 	cp a, (LL,sp)
      000BCA 2A 03            [ 1]  700 	jrpl 1$
      000BCC CC 0A 6C         [ 2]  701 	jp readln_loop
      000BCF 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000BD1 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000BD3 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000BD5 11 02            [ 1]  706     cp a,(LL,sp)
      000BD7 27 12            [ 1]  707     jreq overwrite
      000BD9 7B 02            [ 1]  708     ld a,(LL,sp)
      000BDB 97               [ 1]  709     ld xl,a 
      000BDC 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000BDE 95               [ 1]  711     ld xh,a
      000BDF 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000BE1 CD 09 D3         [ 4]  713     call insert_char
      000BE4 0C 02            [ 1]  714     inc (LLEN,sp)
      000BE6 0C 03            [ 1]  715     inc (CPOS,sp)
      000BE8 CC 0A 6C         [ 2]  716     jp readln_loop 
      000BEB                        717 overwrite:
      000BEB 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000BED 90 F7            [ 1]  719 	ld (y),a
      000BEF 90 5C            [ 1]  720     incw y
      000BF1 CD 08 FD         [ 4]  721     call putc 
      000BF4 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      000BF6 11 02            [ 1]  723 	cp a,(LL,sp)
      000BF8 2B 09            [ 1]  724 	jrmi 1$
      000BFA 90 7F            [ 1]  725 	clr (y)
      000BFC 0C 02            [ 1]  726 	inc (LL,sp)
      000BFE 0C 03            [ 1]  727     inc (CPOS,sp)
      000C00 CC 0A 6C         [ 2]  728 	jp readln_loop 
      000C03                        729 1$:	
      000C03 0C 03            [ 1]  730 	inc (CPOS,sp)
      000C05 CC 0A 6C         [ 2]  731 	jp readln_loop 
      000C08                        732 readln_quit:
      000C08 90 AE 16 68      [ 2]  733 	ldw y,#tib
      000C0C 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000C0E 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000C11 90 7F            [ 1]  736     clr (y)
      000C13 7B 02            [ 1]  737 	ld a,(LL,sp)
      000C15 C7 00 03         [ 1]  738 	ld count,a 
      000C18 A6 0D            [ 1]  739 	ld a,#CR
      000C1A CD 08 FD         [ 4]  740 	call putc
      000C1D                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000C1D 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C1F 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000C20                        750 print_hex::
      000C20 88               [ 1]  751 	push a 
      000C21 4E               [ 1]  752 	swap a 
      000C22 CD 0C 37         [ 4]  753 	call to_hex_char 
      000C25 CD 08 FD         [ 4]  754 	call putc 
      000C28 7B 01            [ 1]  755     ld a,(1,sp) 
      000C2A CD 0C 37         [ 4]  756 	call to_hex_char
      000C2D CD 08 FD         [ 4]  757 	call putc
      000C30 A6 20            [ 1]  758 	ld a,#SPACE 
      000C32 CD 08 FD         [ 4]  759 	call putc 
      000C35 84               [ 1]  760 	pop a 
      000C36 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      000C37                        770 to_hex_char::
      000C37 A4 0F            [ 1]  771 	and a,#15 
      000C39 A1 09            [ 1]  772 	cp a,#9 
      000C3B 23 02            [ 2]  773 	jrule 1$ 
      000C3D AB 07            [ 1]  774 	add a,#7
      000C3F AB 30            [ 1]  775 1$: add a,#'0 
      000C41 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C42                         51 search_lineno::
      000C42                         52 	_vars VSIZE
      000C42 52 02            [ 2]    1     sub sp,#VSIZE 
      000C44 0F 01            [ 1]   53 	clr (LL,sp)
      000C46 90 CE 00 1A      [ 2]   54 	ldw y,txtbgn
      000C4A 4D               [ 1]   55 	tnz a 
      000C4B 27 04            [ 1]   56 	jreq search_ln_loop
      000C4D 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C51                         58 search_ln_loop:
      000C51 90 C3 00 1C      [ 2]   59 	cpw y,txtend 
      000C55 2A 10            [ 1]   60 	jrpl 8$
      000C57 90 F3            [ 1]   61 	cpw x,(y)
      000C59 27 0E            [ 1]   62 	jreq 9$
      000C5B 2B 0A            [ 1]   63 	jrmi 8$ 
      000C5D 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C60 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C62 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C65 20 EA            [ 2]   67 	jra search_ln_loop 
      000C67                         68 8$: 
      000C67 5F               [ 1]   69 	clrw x 	
      000C68 51               [ 1]   70 	exgw x,y 
      000C69                         71 9$: _drop VSIZE
      000C69 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6B 51               [ 1]   72 	exgw x,y   
      000C6C 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C6D                         83 del_line: 
      000C6D                         84 	_vars VSIZE 
      000C6D 52 04            [ 2]    1     sub sp,#VSIZE 
      000C6F E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C71 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C73 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C75 90 93            [ 1]   88 	ldw y,x  
      000C77 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7A 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7C 90 CE 00 1C      [ 2]   91 	ldw y,txtend 
      000C80 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C83 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C87 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C89 CD 13 B8         [ 4]   95 	call move
      000C8C 90 CE 00 1C      [ 2]   96 	ldw y,txtend 
      000C90 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C93 90 CF 00 1C      [ 2]   98 	ldw txtend,y  
      000C97                         99 	_drop VSIZE     
      000C97 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C99 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C9A                        115 create_gap:
      000C9A                        116 	_vars VSIZE
      000C9A 52 06            [ 2]    1     sub sp,#VSIZE 
      000C9C 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000C9E 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA0 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CA4 90 93            [ 1]  120 	ldw y,x ; SRC
      000CA6 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CAA 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CAC CE 00 1C         [ 2]  124 	ldw x,txtend 
      000CAF 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CB2 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CB5 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CB7 CD 13 B8         [ 4]  128 	call move
      000CBA CE 00 1C         [ 2]  129 	ldw x,txtend
      000CBD 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC0 CF 00 1C         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000CC3                        132 9$:	_drop VSIZE 
      000CC3 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CC5 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CC6                        150 insert_line:
      000CC6                        151 	_vars VSIZE 
      000CC6 52 08            [ 2]    1     sub sp,#VSIZE 
      000CC8 CE 00 1C         [ 2]  152 	ldw x,txtend  
      000CCB C3 00 1A         [ 2]  153 	cpw x,txtbgn 
      000CCE 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD0 AE 00 02         [ 2]  156 	ldw x,#2 
      000CD3 72 D6 00 18      [ 4]  157 	ld a,([ptr16],x)
      000CD7 A1 03            [ 1]  158 	cp a,#3
      000CD9 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CDB 5F               [ 1]  160 	clrw x 
      000CDC 97               [ 1]  161 	ld xl,a
      000CDD 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CDF CE 00 1A         [ 2]  163 	ldw x,txtbgn
      000CE2 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CE4 CE 00 1C         [ 2]  165 	ldw x,txtend 
      000CE7 20 38            [ 2]  166 	jra 4$
      000CE9 72 CE 00 18      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CED 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CEF AE 00 02         [ 2]  170 	ldw x,#2 
      000CF2 72 D6 00 18      [ 4]  171 	ld a,([ptr16],x)
      000CF6 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CF7 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CF9 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CFB 4F               [ 1]  177 	clr a 
      000CFC CD 0C 42         [ 4]  178 	call search_lineno 
      000CFF 5D               [ 2]  179 	tnzw x 
      000D00 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D02 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D04 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D06 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D08 CD 0C 6D         [ 4]  188 	call del_line
      000D0B                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D0B A6 03            [ 1]  192 	ld a,#3
      000D0D 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D0F 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D11 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D13 C3 00 1C         [ 2]  198 	cpw x,txtend 
      000D16 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D18 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D1A 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D1C CD 0C 9A         [ 4]  204 	call create_gap
      000D1F 20 06            [ 2]  205 	jra 5$
      000D21                        206 4$: 
      000D21 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D24 CF 00 1C         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D27 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D29 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D2C 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D30 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D32 CD 13 B8         [ 4]  214 	call move 
      000D35                        215 insert_ln_exit:	
      000D35                        216 	_drop VSIZE
      000D35 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D37 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D38                        233 parse_quote: 
      000D38                        234 	_vars VSIZE 
      000D38 52 02            [ 2]    1     sub sp,#VSIZE 
      000D3A 4F               [ 1]  235 	clr a
      000D3B 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D3D                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000D3D 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D40 27 24            [ 1]  239 	jreq 6$
      000D42 72 5C 00 01      [ 1]  240 	inc in 
      000D46 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D48 A6 5C            [ 1]  242 	ld a,#'\
      000D4A 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D4C 26 0A            [ 1]  244 	jrne 3$
      000D4E 0F 01            [ 1]  245 	clr (PREV,sp)
      000D50 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D52 AD 1C            [ 4]  247 	callr convert_escape
      000D54 F7               [ 1]  248 	ld (x),a 
      000D55 5C               [ 1]  249 	incw x 
      000D56 20 E5            [ 2]  250 	jra 2$
      000D58                        251 3$:
      000D58 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D5A A1 5C            [ 1]  253 	cp a,#'\'
      000D5C 27 DD            [ 1]  254 	jreq 1$
      000D5E A1 22            [ 1]  255 	cp a,#'"
      000D60 27 04            [ 1]  256 	jreq 6$ 
      000D62 F7               [ 1]  257 	ld (x),a 
      000D63 5C               [ 1]  258 	incw x 
      000D64 20 D7            [ 2]  259 	jra 2$
      000D66                        260 6$:
      000D66 7F               [ 1]  261 	clr (x)
      000D67 5C               [ 1]  262 	incw x 
      000D68 90 93            [ 1]  263 	ldw y,x 
      000D6A 5F               [ 1]  264 	clrw x 
      000D6B A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D6D                        266 	_drop VSIZE
      000D6D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D6F 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D70                        278 convert_escape:
      000D70 89               [ 2]  279 	pushw x 
      000D71 AE 0D 85         [ 2]  280 	ldw x,#escaped 
      000D74 F1               [ 1]  281 1$:	cp a,(x)
      000D75 27 06            [ 1]  282 	jreq 2$
      000D77 7D               [ 1]  283 	tnz (x)
      000D78 27 09            [ 1]  284 	jreq 3$
      000D7A 5C               [ 1]  285 	incw x 
      000D7B 20 F7            [ 2]  286 	jra 1$
      000D7D 1D 0D 85         [ 2]  287 2$: subw x,#escaped 
      000D80 9F               [ 1]  288 	ld a,xl 
      000D81 AB 07            [ 1]  289 	add a,#7
      000D83 85               [ 2]  290 3$:	popw x 
      000D84 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    292 
      000D85 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D8D                        310 parse_integer: ; { -- n }
      000D8D 89               [ 2]  311 	pushw x 	
      000D8E 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D90 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D92 A1 24            [ 1]  314 	cp a,#'$
      000D94 26 04            [ 1]  315 	jrne 2$ 
      000D96                        316     _drop #1
      000D96 5B 01            [ 2]    1     addw sp,##1 
      000D98 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D9A F7               [ 1]  318 2$:	ld (x),a 
      000D9B 5C               [ 1]  319 	incw x 
      000D9C 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000D9F 72 5C 00 01      [ 1]  321 	inc in 
      000DA3 CD 18 2C         [ 4]  322 	call to_upper 
      000DA6 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DA8 CD 0E 2E         [ 4]  324 	call is_digit 
      000DAB 25 ED            [ 1]  325 	jrc 2$
      000DAD A6 10            [ 1]  326 	ld a,#16 
      000DAF 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB1 26 0A            [ 1]  328 	jrne 3$ 
      000DB3 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DB5 A1 41            [ 1]  330 	cp a,#'A 
      000DB7 2B 04            [ 1]  331 	jrmi 3$ 
      000DB9 A1 47            [ 1]  332 	cp a,#'G 
      000DBB 2B DD            [ 1]  333 	jrmi 2$ 
      000DBD 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC1 7F               [ 1]  335     clr (x)
      000DC2 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DC4 CD 18 38         [ 4]  337 	call atoi24
      000DC7 90 93            [ 1]  338 	ldw y,x
      000DC9 C6 00 0C         [ 1]  339 	ld a,acc24 
      000DCC 90 F7            [ 1]  340 	ld (y),a 
      000DCE 72 A9 00 01      [ 2]  341 	addw y,#1  
      000DD2 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DD5 90 FF            [ 2]  343 	ldw (y),x 
      000DD7 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000DDB A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DDD                        346 	_drop VSIZE  
      000DDD 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DDF 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE0                        364 parse_binary: ; { -- n }
      000DE0 4B 00            [ 1]  365 	push #0
      000DE2 4B 00            [ 1]  366 	push #0
      000DE4 4B 00            [ 1]  367 	push #0
      000DE6                        368 2$:	
      000DE6 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DE9 72 5C 00 01      [ 1]  370 	inc in 
      000DED A1 30            [ 1]  371 	cp a,#'0 
      000DEF 27 06            [ 1]  372 	jreq 3$
      000DF1 A1 31            [ 1]  373 	cp a,#'1 
      000DF3 27 02            [ 1]  374 	jreq 3$ 
      000DF5 20 0B            [ 2]  375 	jra bin_exit 
      000DF7 A0 30            [ 1]  376 3$: sub a,#'0 
      000DF9 46               [ 1]  377 	rrc a
      000DFA 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DFC 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DFE 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E00 20 E4            [ 2]  381 	jra 2$  
      000E02                        382 bin_exit:
      000E02 72 5A 00 01      [ 1]  383 	dec in 
      000E06 90 93            [ 1]  384 	ldw y,x
      000E08 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E0A C7 00 0C         [ 1]  386 	ld acc24,a 
      000E0D 1E 02            [ 2]  387 	ldw x,(BINARY+1,sp)
      000E0F CF 00 0D         [ 2]  388 	ldw acc16,x
      000E12 90 FF            [ 2]  389 	ldw (y),x 
      000E14 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E18 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E1A                        392 	_drop VSIZE 
      000E1A 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E1C 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E1D                        402 is_alpha::
      000E1D A1 41            [ 1]  403 	cp a,#'A 
      000E1F 8C               [ 1]  404 	ccf 
      000E20 24 0B            [ 1]  405 	jrnc 9$ 
      000E22 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E24 25 07            [ 1]  407 	jrc 9$ 
      000E26 A1 61            [ 1]  408 	cp a,#'a 
      000E28 8C               [ 1]  409 	ccf 
      000E29 24 02            [ 1]  410 	jrnc 9$
      000E2B A1 7B            [ 1]  411 	cp a,#'z+1
      000E2D 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E2E                        421 is_digit::
      000E2E A1 30            [ 1]  422 	cp a,#'0
      000E30 25 03            [ 1]  423 	jrc 1$
      000E32 A1 3A            [ 1]  424     cp a,#'9+1
      000E34 8C               [ 1]  425 	ccf 
      000E35 8C               [ 1]  426 1$:	ccf 
      000E36 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E37                        438 is_alnum::
      000E37 CD 0E 2E         [ 4]  439 	call is_digit
      000E3A 25 03            [ 1]  440 	jrc 1$ 
      000E3C CD 0E 1D         [ 4]  441 	call is_alpha
      000E3F 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000E40                        453 is_symbol_char: 
      000E40 A1 5F            [ 1]  454 	cp a,#'_ 
      000E42 26 03            [ 1]  455 	jrne 1$
      000E44 99               [ 1]  456 	scf 
      000E45 20 03            [ 2]  457 	jra 9$ 
      000E47 CD 0E 37         [ 4]  458 1$:	call is_alnum 
      000E4A 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4B                        473 parse_symbol:
      000E4B 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E4C                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E4C CD 18 2C         [ 4]  477 	call to_upper  
      000E4F F7               [ 1]  478 	ld (x), a 
      000E50 5C               [ 1]  479 	incw x
      000E51 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E54 72 5C 00 01      [ 1]  481 	inc in 
      000E58 CD 0E 40         [ 4]  482 	call is_symbol_char 
      000E5B 25 EF            [ 1]  483 	jrc symb_loop 
      000E5D 7F               [ 1]  484 	clr (x)
      000E5E 72 5A 00 01      [ 1]  485 	dec in  
      000E62 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E63                        502 parse_keyword: 
      000E63 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E64 CD 0E 4B         [ 4]  504 	call parse_symbol
      000E67 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E69 E6 02            [ 1]  506 	ld a,(2,x)
      000E6B 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E6D E6 01            [ 1]  509 	ld a,(1,x) 
      000E6F A0 41            [ 1]  510 	sub a,#'A 
      000E71 AE 00 03         [ 2]  511 	ldw x,#3 
      000E74 42               [ 4]  512 	mul x,a 
      000E75 1C 00 2F         [ 2]  513 	addw x,#vars 
      000E78 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E7A 20 24            [ 2]  515 	jra 4$ 
      000E7C                        516 2$: ; check for keyword, otherwise syntax error.
      000E7C                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E7C AE 32 F0         [ 2]    1     ldw x,#kword_dict+2
      000E7F 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E81 90 5C            [ 1]  519 	incw y 
      000E83 CD 18 A2         [ 4]  520 	call search_dict
      000E86 4D               [ 1]  521 	tnz a
      000E87 26 17            [ 1]  522 	jrne 4$ 
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E89 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8B A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E8D 90 F7            [ 1]  527 	ld (y),a 
      000E8F 90 5C            [ 1]  528 	incw y
      000E91                        529 24$:	
      000E91 90 F6            [ 1]  530     ld a,(y)
      000E93 27 04            [ 1]  531 	jreq 3$
      000E95 90 5C            [ 1]  532 	incw y 
      000E97 20 F8            [ 2]  533 	jra 24$ 
      000E99 90 5C            [ 1]  534 3$: incw y 
      000E9B A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000E9D 5F               [ 1]  536 	clrw x 	
      000E9E 20 11            [ 2]  537 	jra 5$ 
      000EA0                        538 4$:	
      000EA0 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000EA2 A3 00 4E         [ 2]  540 	cpw x,#LET_IDX 
      000EA5 27 0A            [ 1]  541 	jreq 5$  ; don't compile LET command 
      000EA7 90 F7            [ 1]  542 	ld (y),a 
      000EA9 90 5C            [ 1]  543 	incw y 
      000EAB 90 FF            [ 2]  544 	ldw (y),x
      000EAD 72 A9 00 02      [ 2]  545 	addw y,#2  
      000EB1                        546 5$:	_drop VSIZE 
      000EB1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EB3 81               [ 4]  547 	ret  	
                                    548 
                                    549 ;------------------------------------
                                    550 ; skip character c in text starting from 'in'
                                    551 ; input:
                                    552 ;	 y 		point to text buffer
                                    553 ;    a 		character to skip
                                    554 ; output:  
                                    555 ;	'in' ajusted to new position
                                    556 ;------------------------------------
                           000001   557 	C = 1 ; local var
      000EB4                        558 skip:
      000EB4 88               [ 1]  559 	push a
      000EB5 91 D6 00         [ 4]  560 1$:	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000EB8 27 0A            [ 1]  561 	jreq 2$
      000EBA 11 01            [ 1]  562 	cp a,(C,sp)
      000EBC 26 06            [ 1]  563 	jrne 2$
      000EBE 72 5C 00 01      [ 1]  564 	inc in
      000EC2 20 F1            [ 2]  565 	jra 1$
      000EC4                        566 2$: _drop 1 
      000EC4 5B 01            [ 2]    1     addw sp,#1 
      000EC6 81               [ 4]  567 	ret
                                    568 	
                                    569 
                                    570 ;------------------------------------
                                    571 ; scan text for next token
                                    572 ; input: 
                                    573 ;	X 		pointer to buffer where 
                                    574 ;	        token id and value are copied 
                                    575 ; use:
                                    576 ;	Y   pointer to text in tib 
                                    577 ; output:
                                    578 ;   A       token attribute 
                                    579 ;   X 		token value
                                    580 ;   Y       updated position in output buffer   
                                    581 ;------------------------------------
                                    582 	; use to check special character 
                                    583 	.macro _case c t  
                                    584 	ld a,#c 
                                    585 	cp a,(TCHAR,sp) 
                                    586 	jrne t
                                    587 	.endm 
                                    588 
                           000001   589 	TCHAR=1
                           000002   590 	ATTRIB=2
                           000002   591 	VSIZE=2
      000EC7                        592 get_token:: 
      000EC7                        593 	_vars VSIZE
      000EC7 52 02            [ 2]    1     sub sp,#VSIZE 
                                    594 ;	ld a,in 
                                    595 ;	sub a,count
                                    596 ;   jrmi 0$
                                    597 ;	clr a 
                                    598 ;	ret 
      000EC9                        599 0$: 
      000EC9 90 AE 16 68      [ 2]  600 	ldw y,#tib    	
      000ECD A6 20            [ 1]  601 	ld a,#SPACE
      000ECF CD 0E B4         [ 4]  602 	call skip
      000ED2 55 00 01 00 02   [ 1]  603 	mov in.saved,in 
      000ED7 91 D6 00         [ 4]  604 	ld a,([in.w],y)
      000EDA 26 05            [ 1]  605 	jrne 1$
      000EDC 90 93            [ 1]  606 	ldw y,x 
      000EDE CC 10 83         [ 2]  607 	jp token_exit ; end of line 
      000EE1 72 5C 00 01      [ 1]  608 1$:	inc in 
      000EE5 CD 18 2C         [ 4]  609 	call to_upper 
      000EE8 6B 01            [ 1]  610 	ld (TCHAR,sp),a 
                                    611 ; check for quoted string
      000EEA                        612 str_tst:  	
      000EEA                        613 	_case '"' nbr_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000EEA A6 22            [ 1]    1 	ld a,#'"' 
      000EEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EEE 26 0A            [ 1]    3 	jrne nbr_tst
      000EF0 A6 02            [ 1]  614 	ld a,#TK_QSTR
      000EF2 F7               [ 1]  615 	ld (x),a 
      000EF3 5C               [ 1]  616 	incw x 
      000EF4 CD 0D 38         [ 4]  617 	call parse_quote
      000EF7 CC 10 83         [ 2]  618 	jp token_exit
      000EFA                        619 nbr_tst:
                                    620 ; check for hexadecimal number 
      000EFA A6 24            [ 1]  621 	ld a,#'$'
      000EFC 11 01            [ 1]  622 	cp a,(TCHAR,sp) 
      000EFE 27 17            [ 1]  623 	jreq 1$
                                    624 ;check for binary number 
      000F00 A6 26            [ 1]  625 	ld a,#'&
      000F02 11 01            [ 1]  626 	cp a,(TCHAR,sp)
      000F04 26 0A            [ 1]  627 	jrne 0$
      000F06 A6 84            [ 1]  628 	ld a,#TK_INTGR
      000F08 F7               [ 1]  629 	ld (x),a 
      000F09 5C               [ 1]  630 	incw x 
      000F0A CD 0D E0         [ 4]  631 	call parse_binary ; expect binary integer 
      000F0D CC 10 83         [ 2]  632 	jp token_exit 
                                    633 ; check for decimal number 	
      000F10 7B 01            [ 1]  634 0$:	ld a,(TCHAR,sp)
      000F12 CD 0E 2E         [ 4]  635 	call is_digit
      000F15 24 0C            [ 1]  636 	jrnc 3$
      000F17 A6 84            [ 1]  637 1$:	ld a,#TK_INTGR 
      000F19 F7               [ 1]  638 	ld (x),a 
      000F1A 5C               [ 1]  639 	incw x 
      000F1B 7B 01            [ 1]  640 	ld a,(TCHAR,sp)
      000F1D CD 0D 8D         [ 4]  641 	call parse_integer 
      000F20 CC 10 83         [ 2]  642 	jp token_exit 
      000F23                        643 3$: 
      000F23                        644 	_case '(' bkslsh_tst 
      000F23 A6 28            [ 1]    1 	ld a,#'(' 
      000F25 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F27 26 05            [ 1]    3 	jrne bkslsh_tst
      000F29 A6 06            [ 1]  645 	ld a,#TK_LPAREN
      000F2B CC 10 7F         [ 2]  646 	jp token_char   	
      000F2E                        647 bkslsh_tst: ; character token 
      000F2E                        648 	_case '\',rparnt_tst
      000F2E A6 5C            [ 1]    1 	ld a,#'\' 
      000F30 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F32 26 16            [ 1]    3 	jrne rparnt_tst
      000F34 A6 04            [ 1]  649 	ld a,#TK_CHAR 
      000F36 F7               [ 1]  650 	ld (x),a 
      000F37 5C               [ 1]  651 	incw x 
      000F38 91 D6 00         [ 4]  652 	ld a,([in.w],y)
      000F3B F7               [ 1]  653 	ld (x),a 
      000F3C 5C               [ 1]  654 	incw x
      000F3D 90 93            [ 1]  655 	ldw y,x 	 
      000F3F 72 5C 00 01      [ 1]  656 	inc in  
      000F43 5F               [ 1]  657 	clrw x 
      000F44 97               [ 1]  658 	ld xl,a 
      000F45 A6 04            [ 1]  659 	ld a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F47 CC 10 83         [ 2]  660 	jp token_exit 
      000F4A                        661 rparnt_tst:		
      000F4A                        662 	_case ')' colon_tst 
      000F4A A6 29            [ 1]    1 	ld a,#')' 
      000F4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4E 26 05            [ 1]    3 	jrne colon_tst
      000F50 A6 07            [ 1]  663 	ld a,#TK_RPAREN 
      000F52 CC 10 7F         [ 2]  664 	jp token_char
      000F55                        665 colon_tst:
      000F55                        666 	_case ':' comma_tst 
      000F55 A6 3A            [ 1]    1 	ld a,#':' 
      000F57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F59 26 05            [ 1]    3 	jrne comma_tst
      000F5B A6 0A            [ 1]  667 	ld a,#TK_COLON 
      000F5D CC 10 7F         [ 2]  668 	jp token_char  
      000F60                        669 comma_tst:
      000F60                        670 	_case COMMA sharp_tst 
      000F60 A6 2C            [ 1]    1 	ld a,#COMMA 
      000F62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F64 26 05            [ 1]    3 	jrne sharp_tst
      000F66 A6 08            [ 1]  671 	ld a,#TK_COMMA
      000F68 CC 10 7F         [ 2]  672 	jp token_char
      000F6B                        673 sharp_tst:
      000F6B                        674 	_case SHARP dash_tst 
      000F6B A6 23            [ 1]    1 	ld a,#SHARP 
      000F6D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F6F 26 05            [ 1]    3 	jrne dash_tst
      000F71 A6 09            [ 1]  675 	ld a,#TK_SHARP
      000F73 CC 10 7F         [ 2]  676 	jp token_char  	 	 
      000F76                        677 dash_tst: 	
      000F76                        678 	_case '-' at_tst 
      000F76 A6 2D            [ 1]    1 	ld a,#'-' 
      000F78 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7A 26 05            [ 1]    3 	jrne at_tst
      000F7C A6 11            [ 1]  679 	ld a,#TK_MINUS  
      000F7E CC 10 7F         [ 2]  680 	jp token_char 
      000F81                        681 at_tst:
      000F81                        682 	_case '@' qmark_tst 
      000F81 A6 40            [ 1]    1 	ld a,#'@' 
      000F83 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F85 26 05            [ 1]    3 	jrne qmark_tst
      000F87 A6 05            [ 1]  683 	ld a,#TK_ARRAY 
      000F89 CC 10 7F         [ 2]  684 	jp token_char
      000F8C                        685 qmark_tst:
      000F8C                        686 	_case '?' tick_tst 
      000F8C A6 3F            [ 1]    1 	ld a,#'?' 
      000F8E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F90 26 12            [ 1]    3 	jrne tick_tst
      000F92 A6 80            [ 1]  687 	ld a,#TK_CMD  
      000F94 F7               [ 1]  688 	ld (x),a 
      000F95 5C               [ 1]  689 	incw x 
      000F96 90 93            [ 1]  690 	ldw y,x 
      000F98 AE 00 6E         [ 2]  691 	ldw x,#PRT_IDX 
      000F9B 90 FF            [ 2]  692 	ldw (y),x 
      000F9D 72 A9 00 02      [ 2]  693 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000FA1 CC 10 83         [ 2]  694 	jp token_exit
      000FA4                        695 tick_tst: ; comment 
      000FA4                        696 	_case TICK plus_tst 
      000FA4 A6 27            [ 1]    1 	ld a,#TICK 
      000FA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA8 26 35            [ 1]    3 	jrne plus_tst
      000FAA A6 80            [ 1]  697 	ld a,#TK_CMD
      000FAC F7               [ 1]  698 	ld (x),a 
      000FAD 5C               [ 1]  699 	incw x
      000FAE 90 AE 00 88      [ 2]  700 	ldw y,#REM_IDX
      000FB2 FF               [ 2]  701 	ldw (x),y 
      000FB3 1C 00 02         [ 2]  702 	addw x,#2  
      000FB6                        703 copy_comment:
      000FB6 90 AE 16 68      [ 2]  704 	ldw y,#tib 
      000FBA 72 B9 00 00      [ 2]  705 	addw y,in.w
      000FBE 90 89            [ 2]  706 	pushw y
      000FC0 CD 13 A8         [ 4]  707 	call strcpy
      000FC3 72 F2 01         [ 2]  708     subw y,(1,sp)
      000FC6 90 9F            [ 1]  709 	ld a,yl 
      000FC8 CB 00 01         [ 1]  710 	add a,in
      000FCB C7 00 01         [ 1]  711 	ld in,a 
      000FCE 1F 01            [ 2]  712 	ldw (1,sp),x
      000FD0 72 F9 01         [ 2]  713 	addw y,(1,sp)
      000FD3 90 5C            [ 1]  714 	incw y 
      000FD5                        715 	_drop 2 
      000FD5 5B 02            [ 2]    1     addw sp,#2 
      000FD7 AE 00 88         [ 2]  716 	ldw x,#REM_IDX 
      000FDA A6 80            [ 1]  717 	ld a,#TK_CMD 
      000FDC CC 10 83         [ 2]  718 	jp token_exit 
      000FDF                        719 plus_tst:
      000FDF                        720 	_case '+' star_tst 
      000FDF A6 2B            [ 1]    1 	ld a,#'+' 
      000FE1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE3 26 05            [ 1]    3 	jrne star_tst
      000FE5 A6 10            [ 1]  721 	ld a,#TK_PLUS  
      000FE7 CC 10 7F         [ 2]  722 	jp token_char 
      000FEA                        723 star_tst:
      000FEA                        724 	_case '*' slash_tst 
      000FEA A6 2A            [ 1]    1 	ld a,#'*' 
      000FEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FEE 26 05            [ 1]    3 	jrne slash_tst
      000FF0 A6 20            [ 1]  725 	ld a,#TK_MULT 
      000FF2 CC 10 7F         [ 2]  726 	jp token_char 
      000FF5                        727 slash_tst: 
      000FF5                        728 	_case '/' prcnt_tst 
      000FF5 A6 2F            [ 1]    1 	ld a,#'/' 
      000FF7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF9 26 05            [ 1]    3 	jrne prcnt_tst
      000FFB A6 21            [ 1]  729 	ld a,#TK_DIV 
      000FFD CC 10 7F         [ 2]  730 	jp token_char 
      001000                        731 prcnt_tst:
      001000                        732 	_case '%' eql_tst 
      001000 A6 25            [ 1]    1 	ld a,#'%' 
      001002 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001004 26 05            [ 1]    3 	jrne eql_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001006 A6 22            [ 1]  733 	ld a,#TK_MOD
      001008 CC 10 7F         [ 2]  734 	jp token_char  
                                    735 ; 1 or 2 character tokens 	
      00100B                        736 eql_tst:
      00100B                        737 	_case '=' gt_tst 		
      00100B A6 3D            [ 1]    1 	ld a,#'=' 
      00100D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100F 26 05            [ 1]    3 	jrne gt_tst
      001011 A6 32            [ 1]  738 	ld a,#TK_EQUAL
      001013 CC 10 7F         [ 2]  739 	jp token_char 
      001016                        740 gt_tst:
      001016                        741 	_case '>' lt_tst 
      001016 A6 3E            [ 1]    1 	ld a,#'>' 
      001018 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101A 26 23            [ 1]    3 	jrne lt_tst
      00101C A6 31            [ 1]  742 	ld a,#TK_GT 
      00101E 6B 02            [ 1]  743 	ld (ATTRIB,sp),a 
      001020 91 D6 00         [ 4]  744 	ld a,([in.w],y)
      001023 72 5C 00 01      [ 1]  745 	inc in 
      001027 A1 3D            [ 1]  746 	cp a,#'=
      001029 26 04            [ 1]  747 	jrne 1$
      00102B A6 33            [ 1]  748 	ld a,#TK_GE 
      00102D 20 50            [ 2]  749 	jra token_char  
      00102F A1 3C            [ 1]  750 1$: cp a,#'<
      001031 26 04            [ 1]  751 	jrne 2$
      001033 A6 35            [ 1]  752 	ld a,#TK_NE 
      001035 20 48            [ 2]  753 	jra token_char 
      001037 72 5A 00 01      [ 1]  754 2$: dec in
      00103B 7B 02            [ 1]  755 	ld a,(ATTRIB,sp)
      00103D 20 40            [ 2]  756 	jra token_char 	 
      00103F                        757 lt_tst:
      00103F                        758 	_case '<' other
      00103F A6 3C            [ 1]    1 	ld a,#'<' 
      001041 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001043 26 23            [ 1]    3 	jrne other
      001045 A6 34            [ 1]  759 	ld a,#TK_LT 
      001047 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      001049 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      00104C 72 5C 00 01      [ 1]  762 	inc in 
      001050 A1 3D            [ 1]  763 	cp a,#'=
      001052 26 04            [ 1]  764 	jrne 1$
      001054 A6 36            [ 1]  765 	ld a,#TK_LE 
      001056 20 27            [ 2]  766 	jra token_char 
      001058 A1 3E            [ 1]  767 1$: cp a,#'>
      00105A 26 04            [ 1]  768 	jrne 2$
      00105C A6 35            [ 1]  769 	ld a,#TK_NE 
      00105E 20 1F            [ 2]  770 	jra token_char 
      001060 72 5A 00 01      [ 1]  771 2$: dec in 
      001064 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      001066 20 17            [ 2]  773 	jra token_char 	
      001068                        774 other: ; not a special character 	 
      001068 7B 01            [ 1]  775 	ld a,(TCHAR,sp)
      00106A CD 0E 1D         [ 4]  776 	call is_alpha 
      00106D 25 03            [ 1]  777 	jrc 30$ 
      00106F CC 16 48         [ 2]  778 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001072                        779 30$: 
      001072 CD 0E 63         [ 4]  780 	call parse_keyword
      001075 A3 20 53         [ 2]  781 	cpw x,#remark 
      001078 26 09            [ 1]  782 	jrne token_exit 
      00107A 90 93            [ 1]  783 	ldw y,x 
      00107C CC 0F B6         [ 2]  784 	jp copy_comment 
      00107F                        785 token_char:
      00107F F7               [ 1]  786 	ld (x),a 
      001080 5C               [ 1]  787 	incw x
      001081 90 93            [ 1]  788 	ldw y,x 
      001083                        789 token_exit:
      001083                        790 	_drop VSIZE 
      001083 5B 02            [ 2]    1     addw sp,#VSIZE 
      001085 81               [ 4]  791 	ret
                                    792 
                                    793 
                                    794 ;-----------------------------------
                                    795 ; create token list fromm text line 
                                    796 ; save this list in pad buffer 
                                    797 ;  compiled line format: 
                                    798 ;    line_no  2 bytes {0...32767}
                                    799 ;    count    1 byte  
                                    800 ;    tokens   variable length 
                                    801 ;   
                                    802 ; input:
                                    803 ;   none
                                    804 ; modified variables:
                                    805 ;   basicptr     token list buffer address 
                                    806 ;   in.w  		 3|count, i.e. index in buffer
                                    807 ;   count        length of line | 0  
                                    808 ;-----------------------------------
                           000001   809 	XSAVE=1
                           000002   810 	VSIZE=2
      001086                        811 compile::
      001086 90 89            [ 2]  812 	pushw y 
      001088                        813 	_vars VSIZE 
      001088 52 02            [ 2]    1     sub sp,#VSIZE 
      00108A 55 00 1A 00 04   [ 1]  814 	mov basicptr,txtbgn
      00108F 72 1A 00 21      [ 1]  815 	bset flags,#FCOMP 
      001093 A6 00            [ 1]  816 	ld a,#0
      001095 AE 00 00         [ 2]  817 	ldw x,#0
      001098 CF 16 B8         [ 2]  818 	ldw pad,x ; destination buffer 
      00109B C7 16 BA         [ 1]  819 	ld pad+2,a ; count 
      00109E AE 16 BB         [ 2]  820 	ldw x,#pad+3
      0010A1 72 5F 00 01      [ 1]  821 	clr in 
      0010A5 CD 0E C7         [ 4]  822 	call get_token
      0010A8 A1 84            [ 1]  823 	cp a,#TK_INTGR
      0010AA 26 11            [ 1]  824 	jrne 2$
      0010AC A3 00 01         [ 2]  825 	cpw x,#1 
      0010AF 2A 05            [ 1]  826 	jrpl 1$
      0010B1 A6 0A            [ 1]  827 	ld a,#ERR_BAD_VALUE
      0010B3 CC 16 4A         [ 2]  828 	jp tb_error
      0010B6 CF 16 B8         [ 2]  829 1$:	ldw pad,x 
      0010B9 90 AE 16 BB      [ 2]  830 	ldw y,#pad+3 
      0010BD 90 A3 17 74      [ 2]  831 2$:	cpw y,#stack_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0010C1 25 05            [ 1]  832 	jrult 3$
      0010C3 A6 0F            [ 1]  833 	ld a,#ERR_BUF_FULL 
      0010C5 CC 16 4A         [ 2]  834 	jp tb_error 
      0010C8                        835 3$:	
      0010C8 93               [ 1]  836 	ldw x,y 
      0010C9 CD 0E C7         [ 4]  837 	call get_token 
      0010CC A1 00            [ 1]  838 	cp a,#TK_NONE 
      0010CE 26 ED            [ 1]  839 	jrne 2$ 
                                    840 ; compilation completed  
      0010D0 72 A2 16 B8      [ 2]  841 	subw y,#pad
      0010D4 90 9F            [ 1]  842     ld a,yl
      0010D6 AE 16 B8         [ 2]  843 	ldw x,#pad 
      0010D9 CF 00 18         [ 2]  844 	ldw ptr16,x 
      0010DC E7 02            [ 1]  845 	ld (2,x),a 
      0010DE FE               [ 2]  846 	ldw x,(x)
      0010DF 27 09            [ 1]  847 	jreq 10$
      0010E1 CD 0C C6         [ 4]  848 	call insert_line
      0010E4 72 5F 00 03      [ 1]  849 	clr  count 
      0010E8 20 0F            [ 2]  850 	jra  11$ 
      0010EA                        851 10$: ; line# is zero 
      0010EA CE 00 18         [ 2]  852 	ldw x,ptr16  
      0010ED CF 00 04         [ 2]  853 	ldw basicptr,x 
      0010F0 E6 02            [ 1]  854 	ld a,(2,x)
      0010F2 C7 00 03         [ 1]  855 	ld count,a 
      0010F5 35 03 00 01      [ 1]  856 	mov in,#3 
      0010F9                        857 11$:
      0010F9                        858 	_drop VSIZE 
      0010F9 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010FB 72 1B 00 21      [ 1]  859 	bres flags,#FCOMP 
      0010FF 90 85            [ 2]  860 	popw y 
      001101 81               [ 4]  861 	ret 
                                    862 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001102                         48 cpy_cmd_name:
      001102 F6               [ 1]   49 	ld a,(x)
      001103 5C               [ 1]   50 	incw x
      001104 A4 0F            [ 1]   51 	and a,#15  
      001106 88               [ 1]   52 	push a 
      001107 0D 01            [ 1]   53     tnz (1,sp) 
      001109 27 0A            [ 1]   54 	jreq 9$
      00110B F6               [ 1]   55 1$:	ld a,(x)
      00110C 90 F7            [ 1]   56 	ld (y),a  
      00110E 5C               [ 1]   57 	incw x
      00110F 90 5C            [ 1]   58 	incw y 
      001111 0A 01            [ 1]   59 	dec (1,sp)	 
      001113 26 F6            [ 1]   60 	jrne 1$
      001115 84               [ 1]   61 9$: pop a 
      001116 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      001117                         72 add_space:
      001117 90 5A            [ 2]   73 	decw y 
      001119 90 F6            [ 1]   74 	ld a,(y)
      00111B 90 5C            [ 1]   75 	incw y
      00111D A1 29            [ 1]   76 	cp a,#') 
      00111F 27 05            [ 1]   77 	jreq 0$
      001121 CD 0E 37         [ 4]   78 	call is_alnum 
      001124 24 06            [ 1]   79 	jrnc 1$
      001126                         80 0$: 
      001126 A6 20            [ 1]   81 	ld a,#SPACE 
      001128 90 F7            [ 1]   82 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00112A 90 5C            [ 1]   83 	incw y 
      00112C 81               [ 4]   84 1$: ret 
                                     85 
                                     86 ;--------------------------
                                     87 ;  align text in buffer 
                                     88 ;  to tab_width padding 
                                     89 ;  left with  SPACE 
                                     90 ; input:
                                     91 ;   X      str*
                                     92 ;   A      str_length 
                                     93 ; output:
                                     94 ;   X      ajusted
                                     95 ;--------------------------
      00112D                         96 right_align::
      00112D 88               [ 1]   97 	push a 
      00112E 7B 01            [ 1]   98 0$: ld a,(1,sp)
      001130 C1 00 22         [ 1]   99 	cp a,tab_width 
      001133 2A 08            [ 1]  100 	jrpl 1$
      001135 A6 20            [ 1]  101 	ld a,#SPACE 
      001137 5A               [ 2]  102 	decw x
      001138 F7               [ 1]  103 	ld (x),a  
      001139 0C 01            [ 1]  104 	inc (1,sp)
      00113B 20 F1            [ 2]  105 	jra 0$ 
      00113D 84               [ 1]  106 1$: pop a 	
      00113E 81               [ 4]  107 	ret 
                                    108 
                                    109 ;--------------------------
                                    110 ; print TK_QSTR
                                    111 ; converting control character
                                    112 ; to backslash sequence
                                    113 ; input:
                                    114 ;   X        char *
                                    115 ;   Y        dest. buffer 
                                    116 ; output:
                                    117 ;   X        moved forward 
                                    118 ;   Y        moved forward 
                                    119 ;-----------------------------
      00113F                        120 cpy_quote:
      00113F A6 22            [ 1]  121 	ld a,#'"
      001141 90 F7            [ 1]  122 	ld (y),a 
      001143 90 5C            [ 1]  123 	incw y 
      001145 89               [ 2]  124 	pushw x 
      001146 CD 17 6E         [ 4]  125 	call skip_string 
      001149 85               [ 2]  126 	popw x 
      00114A F6               [ 1]  127 1$:	ld a,(x)
      00114B 27 30            [ 1]  128 	jreq 9$
      00114D 5C               [ 1]  129 	incw x 
      00114E A1 20            [ 1]  130 	cp a,#SPACE 
      001150 25 0E            [ 1]  131 	jrult 3$
      001152 90 F7            [ 1]  132 	ld (y),a
      001154 90 5C            [ 1]  133 	incw y 
      001156 A1 5C            [ 1]  134 	cp a,#'\ 
      001158 26 F0            [ 1]  135 	jrne 1$ 
      00115A                        136 2$:
      00115A 90 F7            [ 1]  137 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00115C 90 5C            [ 1]  138 	incw y  
      00115E 20 EA            [ 2]  139 	jra 1$
      001160 88               [ 1]  140 3$: push a 
      001161 A6 5C            [ 1]  141 	ld a,#'\
      001163 90 F7            [ 1]  142 	ld (y),a 
      001165 90 5C            [ 1]  143 	incw y  
      001167 84               [ 1]  144 	pop a 
      001168 A0 07            [ 1]  145 	sub a,#7
      00116A C7 00 0E         [ 1]  146 	ld acc8,a 
      00116D 72 5F 00 0D      [ 1]  147 	clr acc16
      001171 89               [ 2]  148 	pushw x
      001172 AE 0D 85         [ 2]  149 	ldw x,#escaped 
      001175 72 BB 00 0D      [ 2]  150 	addw x,acc16 
      001179 F6               [ 1]  151 	ld a,(x)
      00117A 85               [ 2]  152 	popw x
      00117B 20 DD            [ 2]  153 	jra 2$
      00117D A6 22            [ 1]  154 9$: ld a,#'"
      00117F 90 F7            [ 1]  155 	ld (y),a 
      001181 90 5C            [ 1]  156 	incw y  
      001183 5C               [ 1]  157 	incw x 
      001184 81               [ 4]  158 	ret
                                    159 
                                    160 ;--------------------------
                                    161 ; return variable name 
                                    162 ; from its address.
                                    163 ; input:
                                    164 ;   X    variable address
                                    165 ; output:
                                    166 ;   A     variable letter
                                    167 ;--------------------------
      001185                        168 var_name::
      001185 1D 00 2F         [ 2]  169 		subw x,#vars 
      001188 A6 03            [ 1]  170 		ld a,#3
      00118A 62               [ 2]  171 		div x,a 
      00118B 9F               [ 1]  172 		ld a,xl 
      00118C AB 41            [ 1]  173 		add a,#'A 
      00118E 81               [ 4]  174 		ret 
                                    175 
                                    176 ;-----------------------------
                                    177 ; return cmd  idx from its 
                                    178 ; code address 
                                    179 ; input:
                                    180 ;   X      code address 
                                    181 ; output:
                                    182 ;   X      cmd_idx
                                    183 ;-----------------------------
      00118F                        184 get_cmd_idx:
      00118F 90 89            [ 2]  185 	pushw y
      001191 90 AE 32 F6      [ 2]  186 	ldw y,#code_addr 
      001195 90 CF 00 18      [ 2]  187 	ldw ptr16,y 
      001199 90 5F            [ 1]  188 	clrw y 
      00119B 91 D3 18         [ 5]  189 1$:	cpw x,([ptr16],y)
      00119E 27 0C            [ 1]  190 	jreq 3$ 
      0011A0 90 5C            [ 1]  191 	incw y 
      0011A2 91 D6 18         [ 4]  192 	ld a,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0011A5 90 5C            [ 1]  193 	incw y
      0011A7 91 DA 18         [ 4]  194 	or a,([ptr16],y)	
      0011AA 26 EF            [ 1]  195 	jrne 1$
      0011AC 93               [ 1]  196 3$: ldw x,y 
      0011AD 90 85            [ 2]  197 	popw y 
      0011AF 81               [ 4]  198 	ret
                                    199 
                                    200 
                                    201 ;-------------------------------------
                                    202 ; decompile tokens list 
                                    203 ; to original text line 
                                    204 ; input:
                                    205 ;   [basicptr]  pointer at line 
                                    206 ;   Y           output buffer
                                    207 ; output:
                                    208 ;   A           length 
                                    209 ;   Y           after string  
                                    210 ;------------------------------------
                           000001   211 	BASE_SAV=1
                           000002   212 	WIDTH_SAV=2
                           000003   213 	STR=3
                           000004   214 	VSIZE=4 
      0011B0                        215 decompile::
      0011B0                        216 	_vars VSIZE
      0011B0 52 04            [ 2]    1     sub sp,#VSIZE 
      0011B2 C6 00 0A         [ 1]  217 	ld a,base
      0011B5 6B 01            [ 1]  218 	ld (BASE_SAV,sp),a  
      0011B7 C6 00 22         [ 1]  219 	ld a,tab_width 
      0011BA 6B 02            [ 1]  220 	ld (WIDTH_SAV,sp),a 
      0011BC 17 03            [ 2]  221 	ldw (STR,sp),y   
      0011BE 72 CE 00 04      [ 5]  222 	ldw x,[basicptr] ; line number 
      0011C2 35 0A 00 0A      [ 1]  223 	mov base,#10
      0011C6 35 05 00 22      [ 1]  224 	mov tab_width,#5
      0011CA 72 5F 00 0C      [ 1]  225 	clr acc24 
      0011CE CF 00 0D         [ 2]  226 	ldw acc16,x
      0011D1 4F               [ 1]  227 	clr a ; unsigned conversion 
      0011D2 CD 17 D3         [ 4]  228 	call itoa  
      0011D5 CD 11 2D         [ 4]  229 	call right_align 
      0011D8 88               [ 1]  230 	push a 
      0011D9 90 93            [ 1]  231 1$:	ldw y,x ; source
      0011DB 1E 04            [ 2]  232 	ldw x,(STR+1,sp) ; destination
      0011DD CD 13 A8         [ 4]  233 	call strcpy 
      0011E0 90 5F            [ 1]  234 	clrw y 
      0011E2 84               [ 1]  235 	pop a 
      0011E3 90 97            [ 1]  236 	ld yl,a 
      0011E5 72 F9 03         [ 2]  237 	addw y,(STR,sp)
      0011E8 A6 20            [ 1]  238 	ld a,#SPACE 
      0011EA 90 F7            [ 1]  239 	ld (y),a 
      0011EC 90 5C            [ 1]  240 	incw y 
      0011EE 72 5F 00 22      [ 1]  241 	clr tab_width
      0011F2 AE 00 03         [ 2]  242 	ldw x,#3
      0011F5 CF 00 00         [ 2]  243 	ldw in.w,x 
      0011F8                        244 decomp_loop:
      0011F8 90 89            [ 2]  245 	pushw y
      0011FA CD 17 47         [ 4]  246 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0011FD 90 85            [ 2]  247 	popw y 
      0011FF 4D               [ 1]  248 	tnz a  
      001200 26 03            [ 1]  249 	jrne 1$
      001202 CC 13 1F         [ 2]  250 	jp 20$
      001205 2B 03            [ 1]  251 1$:	jrmi 2$
      001207 CC 12 90         [ 2]  252 	jp 6$
      00120A                        253 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      00120A A1 85            [ 1]  254 	cp a,#TK_VAR 
      00120C 26 0F            [ 1]  255 	jrne 3$
                                    256 ;; TK_VAR 
      00120E CD 11 17         [ 4]  257 	call add_space
      001211 CD 17 7D         [ 4]  258 	call get_addr   
      001214 CD 11 85         [ 4]  259 	call var_name
      001217 90 F7            [ 1]  260 	ld (y),a 
      001219 90 5C            [ 1]  261 	incw y  
      00121B 20 DB            [ 2]  262 	jra decomp_loop
      00121D                        263 3$:
      00121D A1 84            [ 1]  264 	cp a,#TK_INTGR
      00121F 26 26            [ 1]  265 	jrne 4$
                                    266 ;; TK_INTGR
      001221 CD 17 87         [ 4]  267 	call get_int24 
      001224 C7 00 0C         [ 1]  268 	ld acc24,a 
      001227 CF 00 0D         [ 2]  269 	ldw acc16,x 
      00122A CD 11 17         [ 4]  270 	call add_space
      00122D 90 89            [ 2]  271 	pushw y 
      00122F A6 FF            [ 1]  272 	ld a,#255 ; signed conversion 
      001231 CD 17 D3         [ 4]  273 	call itoa  
      001234 16 01            [ 2]  274 	ldw y,(1,sp) 
      001236 88               [ 1]  275 	push a 
      001237 51               [ 1]  276 	exgw x,y 
      001238 CD 13 A8         [ 4]  277 	call strcpy 
      00123B 90 5F            [ 1]  278 	clrw y
      00123D 84               [ 1]  279 	pop a  
      00123E 90 97            [ 1]  280 	ld yl,a 
      001240 72 F9 01         [ 2]  281 	addw y,(1,sp)
      001243                        282 	_drop 2 
      001243 5B 02            [ 2]    1     addw sp,#2 
      001245 20 B1            [ 2]  283 	jra decomp_loop
      001247                        284 4$: ; dictionary keyword 
      001247 FE               [ 2]  285 	ldw x,(x)
      001248 72 5C 00 01      [ 1]  286 	inc in 
      00124C 72 5C 00 01      [ 1]  287 	inc in 
      001250 A3 00 88         [ 2]  288 	cpw x,#REM_IDX
      001253 26 23            [ 1]  289 	jrne 5$
      001255 CE 00 04         [ 2]  290 	ldw x,basicptr 
                                    291 ; copy comment to buffer 
      001258 CD 11 17         [ 4]  292 	call add_space
      00125B A6 27            [ 1]  293 	ld a,#''
      00125D 90 F7            [ 1]  294 	ld (y),a 
      00125F 90 5C            [ 1]  295 	incw y 
      001261                        296 46$:
      001261 72 D6 00 00      [ 4]  297 	ld a,([in.w],x)
      001265 72 5C 00 01      [ 1]  298 	inc in  
      001269 90 F7            [ 1]  299 	ld (y),a 
      00126B 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00126D C6 00 01         [ 1]  301 	ld a,in 
      001270 C1 00 03         [ 1]  302 	cp a,count 
      001273 2B EC            [ 1]  303 	jrmi 46$
      001275 CC 13 1F         [ 2]  304 	jp 20$  
      001278 A3 00 4E         [ 2]  305 5$: cpw x,#LET_IDX 
      00127B 26 03            [ 1]  306 	jrne 51$
      00127D CC 11 F8         [ 2]  307 	jp decomp_loop ; down display LET 	
      001280                        308 51$: ; insert command name 
      001280 CD 11 17         [ 4]  309 	call add_space  
      001283 90 89            [ 2]  310 	pushw y
      001285 CD 13 5A         [ 4]  311 	call cmd_name
      001288 90 85            [ 2]  312 	popw y 
      00128A CD 11 02         [ 4]  313 	call cpy_cmd_name
      00128D CC 11 F8         [ 2]  314 	jp decomp_loop 
      001290                        315 6$:
                                    316 ; label?
      001290 A1 03            [ 1]  317 	cp a,#TK_LABEL 
      001292 26 1E            [ 1]  318 	jrne 64$
                                    319 ; copy label string to output buffer   	
      001294 A6 20            [ 1]  320 	ld a,#32 
      001296 90 F7            [ 1]  321 	ld (y),a 
      001298 90 5C            [ 1]  322 	incw y 
      00129A                        323 61$:
      00129A 89               [ 2]  324 	pushw x 
      00129B CD 17 6E         [ 4]  325 	call skip_string 
      00129E 85               [ 2]  326 	popw x 
      00129F                        327 62$:	
      00129F F6               [ 1]  328 	ld a,(x)
      0012A0 27 07            [ 1]  329 	jreq 63$ 
      0012A2 5C               [ 1]  330 	incw x  
      0012A3 90 F7            [ 1]  331 	ld (y),a 
      0012A5 90 5C            [ 1]  332 	incw y 
      0012A7 20 F6            [ 2]  333 	jra 62$ 
      0012A9                        334 63$: 
      0012A9 A6 20            [ 1]  335 	ld a,#32 
      0012AB 90 F7            [ 1]  336 	ld (y),a 
      0012AD 90 5C            [ 1]  337 	incw y 
      0012AF CC 11 F8         [ 2]  338 	jp decomp_loop
      0012B2                        339 64$:
      0012B2 A1 02            [ 1]  340 	cp a,#TK_QSTR 
      0012B4 26 09            [ 1]  341 	jrne 7$
                                    342 ;; TK_QSTR
      0012B6 CD 11 17         [ 4]  343 	call add_space
      0012B9 CD 11 3F         [ 4]  344 	call cpy_quote  
      0012BC CC 11 F8         [ 2]  345 	jp decomp_loop
      0012BF                        346 7$:
      0012BF A1 04            [ 1]  347 	cp a,#TK_CHAR 
      0012C1 26 10            [ 1]  348 	jrne 8$
                                    349 ;; TK_CHAR
      0012C3 CD 11 17         [ 4]  350 	call add_space 
      0012C6 A6 5C            [ 1]  351 	ld a,#'\ 
      0012C8 90 F7            [ 1]  352 	ld (y),a 
      0012CA 90 5C            [ 1]  353 	incw y
      0012CC F6               [ 1]  354 	ld a,(x)
      0012CD 72 5C 00 01      [ 1]  355 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0012D1 20 06            [ 2]  356 	jra 81$
      0012D3 A1 0A            [ 1]  357 8$: cp a,#TK_COLON 
      0012D5 26 09            [ 1]  358 	jrne 9$
      0012D7 A6 3A            [ 1]  359 	ld a,#':
      0012D9                        360 81$:
      0012D9 90 F7            [ 1]  361 	ld (y),a 
      0012DB 90 5C            [ 1]  362 	incw y 
      0012DD                        363 82$:
      0012DD CC 11 F8         [ 2]  364 	jp decomp_loop
      0012E0                        365 9$: 
      0012E0 A1 09            [ 1]  366 	cp a,#TK_SHARP
      0012E2 22 0A            [ 1]  367 	jrugt 10$ 
      0012E4 A0 05            [ 1]  368 	sub a,#TK_ARRAY 
      0012E6 5F               [ 1]  369 	clrw x 
      0012E7 97               [ 1]  370 	ld xl,a
      0012E8 1C 13 35         [ 2]  371 	addw x,#single_char 
      0012EB F6               [ 1]  372 	ld a,(x)
      0012EC 20 EB            [ 2]  373 	jra 81$ 
      0012EE                        374 10$: 
      0012EE A1 11            [ 1]  375 	cp a,#TK_MINUS 
      0012F0 22 0A            [ 1]  376 	jrugt 11$
      0012F2 A0 10            [ 1]  377 	sub a,#TK_PLUS 
      0012F4 5F               [ 1]  378 	clrw x 
      0012F5 97               [ 1]  379 	ld xl,a 
      0012F6 1C 13 3A         [ 2]  380 	addw x,#add_char 
      0012F9 F6               [ 1]  381 	ld a,(x)
      0012FA 20 DD            [ 2]  382 	jra 81$
      0012FC                        383 11$:
      0012FC A1 22            [ 1]  384     cp a,#TK_MOD 
      0012FE 22 0A            [ 1]  385 	jrugt 12$
      001300 A0 20            [ 1]  386 	sub a,#TK_MULT
      001302 5F               [ 1]  387 	clrw x 
      001303 97               [ 1]  388 	ld xl,a 
      001304 1C 13 3C         [ 2]  389 	addw x,#mul_char
      001307 F6               [ 1]  390 	ld a,(x)
      001308 20 CF            [ 2]  391 	jra 81$
      00130A                        392 12$:
      00130A A0 31            [ 1]  393 	sub a,#TK_GT  
      00130C 48               [ 1]  394 	sll a 
      00130D 5F               [ 1]  395 	clrw x 
      00130E 97               [ 1]  396 	ld xl,a 
      00130F 1C 13 3F         [ 2]  397 	addw x,#relop_str 
      001312 FE               [ 2]  398 	ldw x,(x)
      001313 F6               [ 1]  399 	ld a,(x)
      001314 5C               [ 1]  400 	incw x 
      001315 90 F7            [ 1]  401 	ld (y),a
      001317 90 5C            [ 1]  402 	incw y 
      001319 F6               [ 1]  403 	ld a,(x)
      00131A 26 BD            [ 1]  404 	jrne 81$
      00131C CC 11 F8         [ 2]  405 	jp decomp_loop 
      00131F                        406 20$: 
      00131F 90 7F            [ 1]  407 	clr (y)
      001321 1E 03            [ 2]  408 	ldw x,(STR,sp)
      001323 7B 01            [ 1]  409 	ld a,(BASE_SAV,sp)
      001325 C7 00 0A         [ 1]  410 	ld base,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001328 7B 02            [ 1]  411 	ld a,(WIDTH_SAV,sp)
      00132A C7 00 22         [ 1]  412 	ld tab_width,a
      00132D 72 F2 03         [ 2]  413 	subw y,(STR,sp) 
      001330 90 9F            [ 1]  414 	ld a,yl 
      001332                        415 	_drop VSIZE 
      001332 5B 04            [ 2]    1     addw sp,#VSIZE 
      001334 81               [ 4]  416 	ret 
                                    417 
      001335 40 28 29 2C 23         418 single_char: .byte '@','(',')',',','#'
      00133A 2B 2D                  419 add_char: .byte '+','-'
      00133C 2A 2F 25               420 mul_char: .byte '*','/','%'
      00133F 13 4B 13 4D 13 4F 13   421 relop_str: .word gt,equal,ge,lt,le,ne 
             52 13 54 13 57
      00134B 3E 00                  422 gt: .asciz ">"
      00134D 3D 00                  423 equal: .asciz "="
      00134F 3E 3D 00               424 ge: .asciz ">="
      001352 3C 00                  425 lt: .asciz "<"
      001354 3C 3D 00               426 le: .asciz "<="
      001357 3C 3E 00               427 ne:  .asciz "<>"
                                    428 
                                    429 ;----------------------------------
                                    430 ; search in kword_dict name
                                    431 ; from its execution address 
                                    432 ; input:
                                    433 ;   X       	cmd_index 
                                    434 ; output:
                                    435 ;   X 			cstr*  | 0 
                                    436 ;--------------------------------
                           000001   437 	CMDX=1 
                           000003   438 	LINK=3 
                           000004   439 	VSIZE=4
      00135A                        440 cmd_name:
      00135A                        441 	_vars VSIZE 
      00135A 52 04            [ 2]    1     sub sp,#VSIZE 
      00135C 72 5F 00 0D      [ 1]  442 	clr acc16 
      001360 1F 01            [ 2]  443 	ldw (CMDX,sp),x  
      001362 AE 32 EE         [ 2]  444 	ldw x,#kword_dict	
      001365 1F 03            [ 2]  445 1$:	ldw (LINK,sp),x
      001367 E6 02            [ 1]  446 	ld a,(2,x)
      001369 A4 0F            [ 1]  447 	and a,#15 
      00136B C7 00 0E         [ 1]  448 	ld acc8,a 
      00136E 1C 00 03         [ 2]  449 	addw x,#3
      001371 72 BB 00 0D      [ 2]  450 	addw x,acc16
      001375 FE               [ 2]  451 	ldw x,(x) ; command index  
      001376 13 01            [ 2]  452 	cpw x,(CMDX,sp)
      001378 27 0A            [ 1]  453 	jreq 2$
      00137A 1E 03            [ 2]  454 	ldw x,(LINK,sp)
      00137C FE               [ 2]  455 	ldw x,(x) 
      00137D 1D 00 02         [ 2]  456 	subw x,#2  
      001380 26 E3            [ 1]  457 	jrne 1$
      001382 20 05            [ 2]  458 	jra 9$
      001384 1E 03            [ 2]  459 2$: ldw x,(LINK,sp)
      001386 1C 00 02         [ 2]  460 	addw x,#2 	
      001389                        461 9$:	_drop VSIZE
      001389 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      00138B 81               [ 4]  462 	ret
                                    463 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000011                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000013                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000015                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000017                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000018                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000019                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001A                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001C                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001E                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001F                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000021                         88 flags:: .blkb 1 ; various boolean flags
      000022                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000023                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000025                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      00002F                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      00138C                        116 strlen::
      00138C 89               [ 2]  117 	pushw x 
      00138D 4F               [ 1]  118 	clr a
      00138E 7D               [ 1]  119 1$:	tnz (x) 
      00138F 27 04            [ 1]  120 	jreq 9$ 
      001391 4C               [ 1]  121 	inc a 
      001392 5C               [ 1]  122 	incw x 
      001393 20 F9            [ 2]  123 	jra 1$ 
      001395 85               [ 2]  124 9$:	popw x 
      001396 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      001397                        135 strcmp:
      001397 F6               [ 1]  136 	ld a,(x)
      001398 27 0B            [ 1]  137 	jreq 5$ 
      00139A 90 F1            [ 1]  138 	cp a,(y) 
      00139C 26 05            [ 1]  139 	jrne 4$ 
      00139E 5C               [ 1]  140 	incw x 
      00139F 90 5C            [ 1]  141 	incw y 
      0013A1 20 F4            [ 2]  142 	jra strcmp 
      0013A3                        143 4$: ; not same  
      0013A3 4F               [ 1]  144 	clr a 
      0013A4 81               [ 4]  145 	ret 
      0013A5                        146 5$: ; same 
      0013A5 A6 01            [ 1]  147 	ld a,#1 
      0013A7 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      0013A8                        159 strcpy::
      0013A8 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0013A9 89               [ 2]  161 	pushw x 
      0013AA 90 F6            [ 1]  162 1$: ld a,(y)
      0013AC 27 06            [ 1]  163 	jreq 9$ 
      0013AE F7               [ 1]  164 	ld (x),a 
      0013AF 5C               [ 1]  165 	incw x 
      0013B0 90 5C            [ 1]  166 	incw y 
      0013B2 20 F6            [ 2]  167 	jra 1$ 
      0013B4 7F               [ 1]  168 9$:	clr (x)
      0013B5 85               [ 2]  169 	popw x 
      0013B6 84               [ 1]  170 	pop a 
      0013B7 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; increament high byte 
                           000002   183 	LB=2 ; increament low byte 
                           000002   184 	VSIZE=2
      0013B8                        185 move::
      0013B8 88               [ 1]  186 	push a 
      0013B9                        187 	_vars VSIZE 
      0013B9 52 02            [ 2]    1     sub sp,#VSIZE 
      0013BB 0F 01            [ 1]  188 	clr (INCR,sp)
      0013BD 0F 02            [ 1]  189 	clr (LB,sp)
      0013BF 90 89            [ 2]  190 	pushw y 
      0013C1 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      0013C3 90 85            [ 2]  192 	popw y 
      0013C5 27 31            [ 1]  193 	jreq move_exit ; x==y 
      0013C7 2B 0E            [ 1]  194 	jrmi move_down
      0013C9                        195 move_up: ; start from top address with incr=-1
      0013C9 72 BB 00 0D      [ 2]  196 	addw x,acc16
      0013CD 72 B9 00 0D      [ 2]  197 	addw y,acc16
      0013D1 03 01            [ 1]  198 	cpl (INCR,sp)
      0013D3 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      0013D5 20 05            [ 2]  200 	jra move_loop  
      0013D7                        201 move_down: ; start from bottom address with incr=1 
      0013D7 5A               [ 2]  202     decw x 
      0013D8 90 5A            [ 2]  203 	decw y
      0013DA 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      0013DC                        205 move_loop:	
      0013DC C6 00 0D         [ 1]  206     ld a, acc16 
      0013DF CA 00 0E         [ 1]  207 	or a, acc8
      0013E2 27 14            [ 1]  208 	jreq move_exit 
      0013E4 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      0013E7 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      0013EA 90 F6            [ 1]  211 	ld a,(y)
      0013EC F7               [ 1]  212 	ld (x),a 
      0013ED 89               [ 2]  213 	pushw x 
      0013EE CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013F1 5A               [ 2]  215 	decw x 
      0013F2 CF 00 0D         [ 2]  216 	ldw acc16,x 
      0013F5 85               [ 2]  217 	popw x 
      0013F6 20 E4            [ 2]  218 	jra move_loop
      0013F8                        219 move_exit:
      0013F8                        220 	_drop VSIZE
      0013F8 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013FA 84               [ 1]  221 	pop a 
      0013FB 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      0013FC                        231 clear_vars:
      0013FC 89               [ 2]  232 	pushw x 
      0013FD 88               [ 1]  233 	push a  
      0013FE AE 00 2F         [ 2]  234 	ldw x,#vars 
      001401 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      001403 7F               [ 1]  236 1$:	clr (x)
      001404 5C               [ 1]  237 	incw x 
      001405 4A               [ 1]  238 	dec a 
      001406 26 FB            [ 1]  239 	jrne 1$
      001408 84               [ 1]  240 	pop a 
      001409 85               [ 2]  241 	popw x 
      00140A 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      00140B 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      001451                        253 system_information:
      001451 AE 14 0B         [ 2]  254 	ldw x,#software 
      001454 CD 09 5A         [ 4]  255 	call puts 
      001457 A6 02            [ 1]  256 	ld a,#MAJOR 
      001459 C7 00 0E         [ 1]  257 	ld acc8,a 
      00145C 5F               [ 1]  258 	clrw x 
      00145D CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      001460 72 5F 00 22      [ 1]  260 	clr tab_width  
      001464 35 0A 00 0A      [ 1]  261 	mov base, #10 
      001468 CD 17 AD         [ 4]  262 	call prt_acc24 
      00146B A6 2E            [ 1]  263 	ld a,#'.
      00146D CD 08 FD         [ 4]  264 	call putc 
      001470 A6 00            [ 1]  265 	ld a,#MINOR 
      001472 C7 00 0E         [ 1]  266 	ld acc8,a 
      001475 5F               [ 1]  267 	clrw x 
      001476 CF 00 0C         [ 2]  268 	ldw acc24,x 
      001479 CD 17 AD         [ 4]  269 	call prt_acc24
      00147C A6 0D            [ 1]  270 	ld a,#CR 
      00147E CD 08 FD         [ 4]  271 	call putc
                                    272 ;call test 
      001481 81               [ 4]  273 	ret
                                    274 
      001482                        275 warm_init:
      001482 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      001486 72 5F 00 21      [ 1]  277 	clr flags 
      00148A 72 5F 00 1E      [ 1]  278 	clr loop_depth 
      00148E 35 04 00 22      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      001492 35 0A 00 0A      [ 1]  280 	mov base,#10 
      001496 AE 00 00         [ 2]  281 	ldw x,#0 
      001499 CF 00 04         [ 2]  282 	ldw basicptr,x 
      00149C CF 00 00         [ 2]  283 	ldw in.w,x 
      00149F 72 5F 00 03      [ 1]  284 	clr count
      0014A3 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014A4                        291 clear_basic:
      0014A4 89               [ 2]  292 	pushw x 
      0014A5 72 5F 00 03      [ 1]  293 	clr count
      0014A9 72 5F 00 01      [ 1]  294 	clr in  
      0014AD AE 00 80         [ 2]  295 	ldw x,#free_ram 
      0014B0 CF 00 1A         [ 2]  296 	ldw txtbgn,x 
      0014B3 CF 00 1C         [ 2]  297 	ldw txtend,x 
      0014B6 CD 13 FC         [ 4]  298 	call clear_vars 
      0014B9 85               [ 2]  299 	popw x
      0014BA 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014BB                        305 err_msg:
      0014BB 00 00 14 DD 14 EA 14   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             F8 15 11 15 20
      0014C7 15 36 15 4C 15 66 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             77 15 88
      0014D1 15 94 15 C7 15 D7 15   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             EB 15 FE
      0014DB 16 0B                  309 	.word err_overflow 
                                    310 
      0014DD 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      0014EA 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014F8 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001511 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001520 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001536 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00154C 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001566 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001577 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001588 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001594 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015C7 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015D7 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015EB 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015FE 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      00160B 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      001615 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      001627 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001638 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      001648                        332 syntax_error::
      001648 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      00164A                        335 tb_error::
      00164A 72 0A 00 21 4A   [ 2]  336 	btjt flags,#FCOMP,1$
      00164F 88               [ 1]  337 	push a 
      001650 AE 16 15         [ 2]  338 	ldw x, #rt_msg 
      001653 CD 09 5A         [ 4]  339 	call puts 
      001656 84               [ 1]  340 	pop a 
      001657 AE 14 BB         [ 2]  341 	ldw x, #err_msg 
      00165A 72 5F 00 0D      [ 1]  342 	clr acc16 
      00165E 48               [ 1]  343 	sll a
      00165F 72 59 00 0D      [ 1]  344 	rlc acc16  
      001663 C7 00 0E         [ 1]  345 	ld acc8, a 
      001666 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      00166A FE               [ 2]  347 	ldw x,(x)
      00166B CD 09 5A         [ 4]  348 	call puts
      00166E CE 00 04         [ 2]  349 	ldw x,basicptr 
      001671 C6 00 03         [ 1]  350 ld a,count 
      001674 90 5F            [ 1]  351 clrw y 
      001676 90 02            [ 1]  352 rlwa y  
      001678 CD 06 5E         [ 4]  353 call hex_dump
      00167B CE 00 04         [ 2]  354 ldw x,basicptr
      00167E C6 00 01         [ 1]  355 	ld a,in 
      001681 CD 1E FD         [ 4]  356 	call prt_basic_line
      001684 AE 16 38         [ 2]  357 	ldw x,#tk_id 
      001687 CD 09 5A         [ 4]  358 	call puts 
      00168A C6 00 02         [ 1]  359 	ld a,in.saved 
      00168D 5F               [ 1]  360 	clrw x 
      00168E 97               [ 1]  361 	ld xl,a 
      00168F 72 BB 00 04      [ 2]  362 	addw x,basicptr 
      001693 F6               [ 1]  363 	ld a,(x)
      001694 5F               [ 1]  364 	clrw x 
      001695 97               [ 1]  365 	ld xl,a 
      001696 CD 17 9D         [ 4]  366 	call prt_i16
      001699                        367 1$:	
      001699 88               [ 1]  368 	push a 
      00169A AE 16 27         [ 2]  369 	ldw x,#comp_msg
      00169D CD 09 5A         [ 4]  370 	call puts 
      0016A0 84               [ 1]  371 	pop a 
      0016A1 AE 14 BB         [ 2]  372 	ldw x, #err_msg 
      0016A4 72 5F 00 0D      [ 1]  373 	clr acc16 
      0016A8 48               [ 1]  374 	sll a
      0016A9 72 59 00 0D      [ 1]  375 	rlc acc16  
      0016AD C7 00 0E         [ 1]  376 	ld acc8, a 
      0016B0 72 BB 00 0D      [ 2]  377 	addw x,acc16 
      0016B4 FE               [ 2]  378 	ldw x,(x)
      0016B5 CD 09 5A         [ 4]  379 	call puts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0016B8 AE 16 68         [ 2]  380 	ldw x,#tib
      0016BB CD 09 5A         [ 4]  381 	call puts 
      0016BE A6 0D            [ 1]  382 	ld a,#CR 
      0016C0 CD 08 FD         [ 4]  383 	call putc
      0016C3 CE 00 00         [ 2]  384 	ldw x,in.w
      0016C6 CD 09 C7         [ 4]  385 	call spaces
      0016C9 A6 5E            [ 1]  386 	ld a,#'^
      0016CB CD 08 FD         [ 4]  387 	call putc 
      0016CE AE 17 FF         [ 2]  388 6$: ldw x,#STACK_EMPTY 
      0016D1 94               [ 1]  389     ldw sp,x
                                    390 
      0016D2                        391 warm_start:
      0016D2 CD 14 82         [ 4]  392 	call warm_init
                                    393 ;----------------------------
                                    394 ;   BASIC interpreter
                                    395 ;----------------------------
      0016D5                        396 cmd_line: ; user interface 
      0016D5 A6 0D            [ 1]  397 	ld a,#CR 
      0016D7 CD 08 FD         [ 4]  398 	call putc 
      0016DA A6 3E            [ 1]  399 	ld a,#'> 
      0016DC CD 08 FD         [ 4]  400 	call putc
      0016DF CD 0A 5F         [ 4]  401 	call readln
      0016E2 72 5D 00 03      [ 1]  402 	tnz count 
      0016E6 27 ED            [ 1]  403 	jreq cmd_line
      0016E8 CD 10 86         [ 4]  404 	call compile
                                    405 ;pushw y 
                                    406 ;ldw x,txtbgn  
                                    407 ;ldw y,txtend
                                    408 ;ldw acc16,x   
                                    409 ;subw y,acc16 
                                    410 ;call hex_dump
                                    411 ;popw y 
                                    412 ; if text begin with a line number
                                    413 ; the compiler set count to zero    
                                    414 ; so code is not interpreted
      0016EB 72 5D 00 03      [ 1]  415 	tnz count 
      0016EF 27 E4            [ 1]  416 	jreq cmd_line
                                    417 	
                                    418 ; if direct command 
                                    419 ; it's ready to interpret 
                                    420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    421 ;; This is the interpreter loop
                                    422 ;; for each BASIC code line. 
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016F1                        424 interpreter: 
      0016F1 C6 00 01         [ 1]  425 	ld a,in 
      0016F4 C1 00 03         [ 1]  426 	cp a,count 
      0016F7 2B 1D            [ 1]  427 	jrmi interp_loop
      0016F9                        428 next_line:
      0016F9 72 01 00 21 D7   [ 2]  429 	btjf flags, #FRUN, cmd_line
      0016FE CE 00 04         [ 2]  430 	ldw x,basicptr
      001701 72 BB 00 00      [ 2]  431 	addw x,in.w 
      001705 C3 00 1C         [ 2]  432 	cpw x,txtend 
      001708 2A C8            [ 1]  433 	jrpl warm_start
      00170A CF 00 04         [ 2]  434 	ldw basicptr,x ; start of next line  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00170D E6 02            [ 1]  435 	ld a,(2,x)
      00170F C7 00 03         [ 1]  436 	ld count,a 
      001712 35 03 00 01      [ 1]  437 	mov in,#3 ; skip first 3 bytes of line 
      001716                        438 interp_loop:
      001716 CD 17 47         [ 4]  439 	call next_token
      001719 A1 00            [ 1]  440 	cp a,#TK_NONE 
      00171B 27 DC            [ 1]  441 	jreq next_line 
      00171D A1 80            [ 1]  442 	cp a,#TK_CMD
      00171F 26 06            [ 1]  443 	jrne 1$
      001721 CD 17 61         [ 4]  444 	call get_code_addr
      001724 FD               [ 4]  445 	call (x) 
      001725 20 EF            [ 2]  446 	jra interp_loop 
      001727                        447 1$:	 
      001727 A1 85            [ 1]  448 	cp a,#TK_VAR
      001729 26 05            [ 1]  449 	jrne 2$
      00172B CD 1B C1         [ 4]  450 	call let_var  
      00172E 20 E6            [ 2]  451 	jra interp_loop 
      001730                        452 2$:	
      001730 A1 05            [ 1]  453 	cp a,#TK_ARRAY 
      001732 26 05            [ 1]  454 	jrne 3$
      001734 CD 1B BC         [ 4]  455 	call let_array 
      001737 20 DD            [ 2]  456 	jra interp_loop
      001739                        457 3$:	
      001739 A1 0A            [ 1]  458 	cp a,#TK_COLON 
      00173B 27 D9            [ 1]  459 	jreq interp_loop
      00173D A1 03            [ 1]  460 4$: cp a,#TK_LABEL
      00173F CD 17 6E         [ 4]  461 	call skip_string 
      001742 20 D2            [ 2]  462 	jra interp_loop 
      001744 CC 16 48         [ 2]  463 5$:	jp syntax_error 
                                    464 
                                    465 ;--------------------------
                                    466 ; extract next token from
                                    467 ; token list 
                                    468 ; basicptr -> base address 
                                    469 ; in  -> offset in list array 
                                    470 ; output:
                                    471 ;   A 		token attribute
                                    472 ;   X 		*token_value 
                                    473 ;----------------------------------------
      001747                        474 next_token::
      001747 5F               [ 1]  475 	clrw x 
      001748 C6 00 01         [ 1]  476 	ld a,in 
      00174B C7 00 02         [ 1]  477 	ld in.saved,a ; in case "_unget_token" needed 
                                    478 ; don't replace sub by "cp a,count" 
                                    479 ; if end of line must return with A=0   	
      00174E C0 00 03         [ 1]  480 	sub a,count 
      001751 27 0D            [ 1]  481 	jreq 9$ ; end of line 
      001753                        482 0$: 
      001753 CE 00 04         [ 2]  483 	ldw x,basicptr 
      001756 72 BB 00 00      [ 2]  484 	addw x,in.w 
      00175A F6               [ 1]  485 	ld a,(x)
      00175B 5C               [ 1]  486 	incw x
      00175C 72 5C 00 01      [ 1]  487 	inc in   
      001760 81               [ 4]  488 9$: ret 
                                    489 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    490 ;------------------------
                                    491 ; get cmd and function 
                                    492 ; code address 
                                    493 ; input:
                                    494 ;    X   * cmd|func index 
                                    495 ;        in code_addr table 
                                    496 ;------------------------
      001761                        497 get_code_addr:
      001761 FE               [ 2]  498 	ldw x,(x)
      001762 DE 32 F6         [ 2]  499 	ldw x,(code_addr,x)
      001765                        500 skip_2_bytes:
      001765 72 5C 00 01      [ 1]  501 	inc in 
      001769 72 5C 00 01      [ 1]  502 	inc in 
      00176D 81               [ 4]  503 	ret
                                    504 
                                    505 ;-------------------------
                                    506 ;  skip .asciz in BASIC line 
                                    507 ;  name 
                                    508 ;  input:
                                    509 ;     x		* string 
                                    510 ;  output:
                                    511 ;     none 
                                    512 ;-------------------------
      00176E                        513 skip_string:
      00176E F6               [ 1]  514 	ld a,(x)
      00176F 27 03            [ 1]  515 	jreq 1$
      001771 5C               [ 1]  516 	incw x 
      001772 20 FA            [ 2]  517 	jra skip_string 
      001774 5C               [ 1]  518 1$: incw x 	
      001775 72 B0 00 04      [ 2]  519 	subw x,basicptr 
      001779 CF 00 00         [ 2]  520 	ldw in.w,x 
      00177C 81               [ 4]  521 	ret 
                                    522 
                                    523 ;---------------------
                                    524 ; extract 16 bits  
                                    525 ; address from BASIC
                                    526 ; code 
                                    527 ; input:
                                    528 ;    X    *address
                                    529 ; output:
                                    530 ;    X    address 
                                    531 ;-------------------- 
      00177D                        532 get_addr:
      00177D FE               [ 2]  533 	ldw x,(x)
      00177E 72 5C 00 01      [ 1]  534 	inc in 
      001782 72 5C 00 01      [ 1]  535 	inc in 
      001786 81               [ 4]  536 	ret 
                                    537 
                                    538 ;--------------------
                                    539 ; extract int24_t  
                                    540 ; value from BASIC 
                                    541 ; code 
                                    542 ; input:
                                    543 ;    X   *integer 
                                    544 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    545 ;    A:X   int24  
                                    546 ;--------------------
      001787                        547 get_int24:
      001787 F6               [ 1]  548 	ld a,(x)
      001788 EE 01            [ 2]  549 	ldw x,(1,x)
                                    550 ; skip 3 bytes 
      00178A 72 5C 00 01      [ 1]  551 	inc in 
      00178E 72 5C 00 01      [ 1]  552 	inc in 
      001792 72 5C 00 01      [ 1]  553 	inc in 
      001796 81               [ 4]  554 	ret 
                                    555 
                                    556 ;-------------------------
                                    557 ; get character from 
                                    558 ; BASIC code 
                                    559 ; input:
                                    560 ;    X   *char 
                                    561 ; output:
                                    562 ;    A    char 
                                    563 ;-------------------------
      001797                        564 get_char:
      001797 F6               [ 1]  565 	ld a,(x)
      001798 72 5C 00 01      [ 1]  566 	inc in  
      00179C 81               [ 4]  567     ret 
                                    568 
                                    569 ;-----------------------------------
                                    570 ; print a 16 bit integer 
                                    571 ; using variable 'base' as conversion
                                    572 ; format.
                                    573 ; input:
                                    574 ;    X       integer to print 
                                    575 ;   'base'    conversion base 
                                    576 ; output:
                                    577 ;   terminal  
                                    578 ;-----------------------------------
      00179D                        579 prt_i16:
      00179D 72 5F 00 0C      [ 1]  580 	clr acc24 
      0017A1 CF 00 0D         [ 2]  581 	ldw acc16,x 
      0017A4 72 0F 00 0D 04   [ 2]  582 	btjf acc16,#7,prt_acc24
      0017A9 72 53 00 0C      [ 1]  583 	cpl acc24 ; sign extend 
                                    584 	
                                    585 ;------------------------------------
                                    586 ; print integer in acc24 
                                    587 ; input:
                                    588 ;	acc24 		integer to print 
                                    589 ;	'base' 		numerical base for conversion 
                                    590 ;   'tab_width' field width 
                                    591 ;    A 			signed||unsigned conversion
                                    592 ;  output:
                                    593 ;    A          string length
                                    594 ;------------------------------------
      0017AD                        595 prt_acc24:
      0017AD A6 FF            [ 1]  596 	ld a,#255  ; signed conversion  
      0017AF CD 17 D3         [ 4]  597     call itoa  ; conversion entier en  .asciz
      0017B2 CD 11 2D         [ 4]  598 	call right_align  
      0017B5 88               [ 1]  599 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0017B6 CD 09 5A         [ 4]  600 	call puts
      0017B9 84               [ 1]  601 	pop a 
      0017BA 81               [ 4]  602     ret	
                                    603 
                                    604 ;---------------------------------------
                                    605 ;  print value at xstack top 
                                    606 ;---------------------------------------
      0017BB                        607 print_top: 
      0017BB                        608 	_xpop 
      0017BB 90 F6            [ 1]    1     ld a,(y)
      0017BD 93               [ 1]    2     ldw x,y 
      0017BE EE 01            [ 2]    3     ldw x,(1,x)
      0017C0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017C4 C7 00 0C         [ 1]  609 	ld acc24,a 
      0017C7 CF 00 0D         [ 2]  610 	ldw acc16,x 
      0017CA CD 17 AD         [ 4]  611 	call prt_acc24 
      0017CD A6 20            [ 1]  612 	ld a,#SPACE
      0017CF CD 08 FD         [ 4]  613 	call putc 
      0017D2 81               [ 4]  614 	ret 
                                    615 
                                    616 ;------------------------------------
                                    617 ; convert integer in acc24 to string
                                    618 ; input:
                                    619 ;   'base'	conversion base 
                                    620 ;	acc24	integer to convert
                                    621 ;   A       0=unsigned, else signed 
                                    622 ; output:
                                    623 ;   X  		pointer to first char of string
                                    624 ;   A       string length
                                    625 ;------------------------------------
                           000001   626 	SIGN=1  ; integer sign 
                           000002   627 	LEN=2 
                           000003   628 	PSTR=3
                           000004   629 	VSIZE=4 ;locals size
      0017D3                        630 itoa::
      0017D3                        631 	_vars VSIZE
      0017D3 52 04            [ 2]    1     sub sp,#VSIZE 
      0017D5 0F 02            [ 1]  632 	clr (LEN,sp) ; string length  
      0017D7 0F 01            [ 1]  633 	clr (SIGN,sp)    ; sign
      0017D9 4D               [ 1]  634 	tnz A
      0017DA 27 11            [ 1]  635 	jreq 1$ ; unsigned conversion  
      0017DC C6 00 0A         [ 1]  636 	ld a,base 
      0017DF A1 0A            [ 1]  637 	cp a,#10
      0017E1 26 0A            [ 1]  638 	jrne 1$
                                    639 	; base 10 string display with negative sign if bit 23==1
      0017E3 72 0F 00 0C 05   [ 2]  640 	btjf acc24,#7,1$
      0017E8 03 01            [ 1]  641 	cpl (SIGN,sp)
      0017EA CD 01 D1         [ 4]  642 	call neg_acc24
      0017ED                        643 1$:
                                    644 ; initialize string pointer 
      0017ED AE 16 68         [ 2]  645 	ldw x,#tib 
      0017F0 1C 00 50         [ 2]  646 	addw x,#TIB_SIZE
      0017F3 5A               [ 2]  647 	decw x 
      0017F4 7F               [ 1]  648 	clr (x)
      0017F5                        649 itoa_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0017F5 C6 00 0A         [ 1]  650     ld a,base
                                    651 ;	ldw (PSTR,sp),x 
      0017F8 CD 02 C7         [ 4]  652     call divu24_8 ; acc24/A 
                                    653 ;	ldw x,(PSTR,sp)
      0017FB AB 30            [ 1]  654     add a,#'0  ; remainder of division
      0017FD A1 3A            [ 1]  655     cp a,#'9+1
      0017FF 2B 02            [ 1]  656     jrmi 2$
      001801 AB 07            [ 1]  657     add a,#7 
      001803                        658 2$:	
      001803 5A               [ 2]  659 	decw x
      001804 F7               [ 1]  660     ld (x),a
      001805 0C 02            [ 1]  661 	inc (LEN,sp)
                                    662 	; if acc24==0 conversion done
      001807 C6 00 0C         [ 1]  663 	ld a,acc24
      00180A CA 00 0D         [ 1]  664 	or a,acc16
      00180D CA 00 0E         [ 1]  665 	or a,acc8
      001810 26 E3            [ 1]  666     jrne itoa_loop
                                    667 	;conversion done, next add '$' or '-' as required
      001812 C6 00 0A         [ 1]  668 	ld a,base 
      001815 A1 10            [ 1]  669 	cp a,#16
      001817 27 08            [ 1]  670 	jreq 8$
      001819 7B 01            [ 1]  671 	ld a,(SIGN,sp)
      00181B 27 0A            [ 1]  672     jreq 10$
      00181D A6 2D            [ 1]  673     ld a,#'-
      00181F 20 02            [ 2]  674 	jra 9$ 
      001821                        675 8$:	
      001821 A6 24            [ 1]  676 	ld a,#'$ 
      001823 5A               [ 2]  677 9$: decw x
      001824 F7               [ 1]  678     ld (x),a
      001825 0C 02            [ 1]  679 	inc (LEN,sp)
      001827                        680 10$:
      001827 7B 02            [ 1]  681 	ld a,(LEN,sp)
      001829                        682 	_drop VSIZE
      001829 5B 04            [ 2]    1     addw sp,#VSIZE 
      00182B 81               [ 4]  683 	ret
                                    684 
                                    685 ;------------------------------------
                                    686 ; convert alpha to uppercase
                                    687 ; input:
                                    688 ;    a  character to convert
                                    689 ; output:
                                    690 ;    a  uppercase character
                                    691 ;------------------------------------
      00182C                        692 to_upper::
      00182C A1 61            [ 1]  693 	cp a,#'a
      00182E 2A 01            [ 1]  694 	jrpl 1$
      001830 81               [ 4]  695 0$:	ret
      001831 A1 7A            [ 1]  696 1$: cp a,#'z	
      001833 22 FB            [ 1]  697 	jrugt 0$
      001835 A0 20            [ 1]  698 	sub a,#32
      001837 81               [ 4]  699 	ret
                                    700 	
                                    701 ;------------------------------------
                                    702 ; convert pad content in integer
                                    703 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    704 ;    x		* .asciz to convert
                                    705 ; output:
                                    706 ;    acc24      int24_t
                                    707 ;------------------------------------
                                    708 	; local variables
                           000001   709 	SIGN=1 ; 1 byte, 
                           000002   710 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   711 	TEMP=3 ; 1 byte, temporary storage
                           000003   712 	VSIZE=3 ; 3 bytes reserved for local storage
      001838                        713 atoi24::
      001838 89               [ 2]  714 	pushw x 
      001839                        715 	_vars VSIZE
      001839 52 03            [ 2]    1     sub sp,#VSIZE 
                                    716 	; acc24=0 
      00183B 72 5F 00 0C      [ 1]  717 	clr acc24    
      00183F 72 5F 00 0D      [ 1]  718 	clr acc16
      001843 72 5F 00 0E      [ 1]  719 	clr acc8 
      001847 0F 01            [ 1]  720 	clr (SIGN,sp)
      001849 A6 0A            [ 1]  721 	ld a,#10
      00184B 6B 02            [ 1]  722 	ld (BASE,sp),a ; default base decimal
      00184D F6               [ 1]  723 	ld a,(x)
      00184E 27 47            [ 1]  724 	jreq 9$  ; completed if 0
      001850 A1 2D            [ 1]  725 	cp a,#'-
      001852 26 04            [ 1]  726 	jrne 1$
      001854 03 01            [ 1]  727 	cpl (SIGN,sp)
      001856 20 08            [ 2]  728 	jra 2$
      001858 A1 24            [ 1]  729 1$: cp a,#'$
      00185A 26 06            [ 1]  730 	jrne 3$
      00185C A6 10            [ 1]  731 	ld a,#16
      00185E 6B 02            [ 1]  732 	ld (BASE,sp),a
      001860 5C               [ 1]  733 2$:	incw x
      001861 F6               [ 1]  734 	ld a,(x)
      001862                        735 3$:	
      001862 A1 61            [ 1]  736 	cp a,#'a
      001864 2B 02            [ 1]  737 	jrmi 4$
      001866 A0 20            [ 1]  738 	sub a,#32
      001868 A1 30            [ 1]  739 4$:	cp a,#'0
      00186A 2B 2B            [ 1]  740 	jrmi 9$
      00186C A0 30            [ 1]  741 	sub a,#'0
      00186E A1 0A            [ 1]  742 	cp a,#10
      001870 2B 06            [ 1]  743 	jrmi 5$
      001872 A0 07            [ 1]  744 	sub a,#7
      001874 11 02            [ 1]  745 	cp a,(BASE,sp)
      001876 2A 1F            [ 1]  746 	jrpl 9$
      001878 6B 03            [ 1]  747 5$:	ld (TEMP,sp),a
      00187A 7B 02            [ 1]  748 	ld a,(BASE,sp)
      00187C CD 01 EE         [ 4]  749 	call mulu24_8
      00187F 7B 03            [ 1]  750 	ld a,(TEMP,sp)
      001881 CB 00 0E         [ 1]  751 	add a,acc24+2
      001884 C7 00 0E         [ 1]  752 	ld acc24+2,a
      001887 4F               [ 1]  753 	clr a
      001888 C9 00 0D         [ 1]  754 	adc a,acc24+1
      00188B C7 00 0D         [ 1]  755 	ld acc24+1,a
      00188E 4F               [ 1]  756 	clr a
      00188F C9 00 0C         [ 1]  757 	adc a,acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      001892 C7 00 0C         [ 1]  758 	ld acc24,a
      001895 20 C9            [ 2]  759 	jra 2$
      001897 0D 01            [ 1]  760 9$:	tnz (SIGN,sp)
      001899 27 03            [ 1]  761     jreq atoi_exit
      00189B CD 01 D1         [ 4]  762     call neg_acc24
      00189E                        763 atoi_exit: 
      00189E                        764 	_drop VSIZE
      00189E 5B 03            [ 2]    1     addw sp,#VSIZE 
      0018A0 85               [ 2]  765 	popw x ; restore x
      0018A1 81               [ 4]  766 	ret
                                    767 
                                    768 
                                    769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    770 ;;   TINY BASIC  operators,
                                    771 ;;   commands and functions 
                                    772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    773 
                                    774 ;---------------------------------
                                    775 ; dictionary search 
                                    776 ; input:
                                    777 ;	X 		dictionary entry point, name field  
                                    778 ;   y		.asciz name to search 
                                    779 ; output:
                                    780 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    781 ;  X		cmd_index
                                    782 ;---------------------------------
                           000001   783 	NLEN=1 ; cmd length 
                           000002   784 	XSAVE=2
                           000004   785 	YSAVE=4
                           000005   786 	VSIZE=5 
      0018A2                        787 search_dict::
      0018A2                        788 	_vars VSIZE 
      0018A2 52 05            [ 2]    1     sub sp,#VSIZE 
      0018A4 17 04            [ 2]  789 	ldw (YSAVE,sp),y 
      0018A6                        790 search_next:
      0018A6 1F 02            [ 2]  791 	ldw (XSAVE,sp),x 
                                    792 ; get name length in dictionary	
      0018A8 F6               [ 1]  793 	ld a,(x)
      0018A9 A4 0F            [ 1]  794 	and a,#0xf 
      0018AB 6B 01            [ 1]  795 	ld (NLEN,sp),a  
      0018AD 16 04            [ 2]  796 	ldw y,(YSAVE,sp) ; name pointer 
      0018AF 5C               [ 1]  797 	incw x 
      0018B0                        798 cp_loop:
      0018B0 90 F6            [ 1]  799 	ld a,(y)
      0018B2 27 1B            [ 1]  800 	jreq str_match 
      0018B4 0D 01            [ 1]  801 	tnz (NLEN,sp)
      0018B6 27 0A            [ 1]  802 	jreq no_match  
      0018B8 F1               [ 1]  803 	cp a,(x)
      0018B9 26 07            [ 1]  804 	jrne no_match 
      0018BB 90 5C            [ 1]  805 	incw y 
      0018BD 5C               [ 1]  806 	incw x
      0018BE 0A 01            [ 1]  807 	dec (NLEN,sp)
      0018C0 20 EE            [ 2]  808 	jra cp_loop 
      0018C2                        809 no_match:
      0018C2 1E 02            [ 2]  810 	ldw x,(XSAVE,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018C4 1D 00 02         [ 2]  811 	subw x,#2 ; move X to link field
      0018C7 4B 00            [ 1]  812 	push #TK_NONE 
      0018C9 FE               [ 2]  813 	ldw x,(x) ; next word link 
      0018CA 84               [ 1]  814 	pop a ; TK_NONE 
      0018CB 27 1F            [ 1]  815 	jreq search_exit  ; not found  
                                    816 ;try next 
      0018CD 20 D7            [ 2]  817 	jra search_next
      0018CF                        818 str_match:
      0018CF 1E 02            [ 2]  819 	ldw x,(XSAVE,sp)
      0018D1 F6               [ 1]  820 	ld a,(X)
      0018D2 6B 01            [ 1]  821 	ld (NLEN,sp),a ; needed to test keyword type  
      0018D4 A4 0F            [ 1]  822 	and a,#0xf 
                                    823 ; move x to procedure address field 	
      0018D6 4C               [ 1]  824 	inc a 
      0018D7 C7 00 0E         [ 1]  825 	ld acc8,a 
      0018DA 72 5F 00 0D      [ 1]  826 	clr acc16 
      0018DE 72 BB 00 0D      [ 2]  827 	addw x,acc16 
      0018E2 FE               [ 2]  828 	ldw x,(x) ; routine index  
                                    829 ;determine keyword type bits 7:6 
      0018E3 7B 01            [ 1]  830 	ld a,(NLEN,sp)
      0018E5 4E               [ 1]  831 	swap a 
      0018E6 A4 0C            [ 1]  832 	and a,#0xc
      0018E8 44               [ 1]  833 	srl a
      0018E9 44               [ 1]  834 	srl a 
      0018EA AB 80            [ 1]  835 	add a,#128
      0018EC                        836 search_exit: 
      0018EC                        837 	_drop VSIZE 
      0018EC 5B 05            [ 2]    1     addw sp,#VSIZE 
      0018EE 81               [ 4]  838 	ret 
                                    839 
                                    840 ;---------------------
                                    841 ; check if next token
                                    842 ;  is of expected type 
                                    843 ; input:
                                    844 ;   A 		 expected token attribute
                                    845 ;  ouput:
                                    846 ;   none     if fail call syntax_error 
                                    847 ;--------------------
      0018EF                        848 expect:
      0018EF 88               [ 1]  849 	push a 
      0018F0 CD 17 47         [ 4]  850 	call next_token 
      0018F3 11 01            [ 1]  851 	cp a,(1,sp)
      0018F5 27 03            [ 1]  852 	jreq 1$
      0018F7 CC 16 48         [ 2]  853 	jp syntax_error
      0018FA 84               [ 1]  854 1$: pop a 
      0018FB 81               [ 4]  855 	ret 
                                    856 
                                    857 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    858 ; parse arguments list 
                                    859 ; between ()
                                    860 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018FC                        861 func_args:
      0018FC A6 06            [ 1]  862 	ld a,#TK_LPAREN 
      0018FE CD 18 EF         [ 4]  863 	call expect 
                                    864 ; expected to continue in arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    865 ; caller must check for TK_RPAREN 
                                    866 
                                    867 ;-------------------------------
                                    868 ; parse embedded BASIC routines 
                                    869 ; arguments list.
                                    870 ; arg_list::=  expr[','expr]*
                                    871 ; all arguments are of int24_t type
                                    872 ; and pushed on stack 
                                    873 ; input:
                                    874 ;   none
                                    875 ; output:
                                    876 ;   xstack{n}   arguments pushed on xstack
                                    877 ;   A 	number of arguments pushed on xstack  
                                    878 ;--------------------------------
      001901                        879 arg_list:
      001901 4B 00            [ 1]  880 	push #0  
      001903 CD 1A 38         [ 4]  881 1$: call expression
      001906 A1 00            [ 1]  882 	cp a,#TK_NONE 
      001908 27 1A            [ 1]  883 	jreq 5$
      00190A A1 84            [ 1]  884 	cp a,#TK_INTGR
      00190C 26 0D            [ 1]  885 	jrne 4$
      00190E                        886 3$: 
      00190E 0C 01            [ 1]  887 	inc (1,sp)
      001910 CD 17 47         [ 4]  888 	call next_token 
      001913 A1 08            [ 1]  889 	cp a,#TK_COMMA 
      001915 27 EC            [ 1]  890 	jreq 1$ 
      001917 A1 00            [ 1]  891 	cp a,#TK_NONE 
      001919 27 09            [ 1]  892 	jreq 5$ 
      00191B A1 07            [ 1]  893 4$:	cp a,#TK_RPAREN 
      00191D 27 05            [ 1]  894 	jreq 5$
      00191F                        895 	_unget_token 
      00191F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001924 84               [ 1]  896 5$:	pop a  
      001925 81               [ 4]  897 	ret 
                                    898 
                                    899 ;--------------------------------
                                    900 ;   BASIC commnands 
                                    901 ;--------------------------------
                                    902 
                                    903 ;--------------------------------
                                    904 ;  arithmetic and relational 
                                    905 ;  routines
                                    906 ;  operators precedence
                                    907 ;  highest to lowest
                                    908 ;  operators on same row have 
                                    909 ;  same precedence and are executed
                                    910 ;  from left to right.
                                    911 ;	'*','/','%'
                                    912 ;   '-','+'
                                    913 ;   '=','>','<','>=','<=','<>','><'
                                    914 ;   '<>' and '><' are equivalent for not equal.
                                    915 ;--------------------------------
                                    916 
                                    917 ;---------------------
                                    918 ; return array element
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                    919 ; address from @(expr)
                                    920 ; input:
                                    921 ;   A 		TK_ARRAY
                                    922 ; output:
                                    923 ;	X 		element address 
                                    924 ;----------------------
      001926                        925 get_array_element:
      001926 CD 18 FC         [ 4]  926 	call func_args 
      001929 A1 01            [ 1]  927 	cp a,#1
      00192B 27 03            [ 1]  928 	jreq 1$
      00192D CC 16 48         [ 2]  929 	jp syntax_error
      001930                        930 1$: _xpop 
      001930 90 F6            [ 1]    1     ld a,(y)
      001932 93               [ 1]    2     ldw x,y 
      001933 EE 01            [ 2]    3     ldw x,(1,x)
      001935 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    931     ; ignore A, index < 65536 in any case 
                                    932 	; check for bounds 
      001939 C3 00 1F         [ 2]  933 	cpw x,array_size 
      00193C 23 05            [ 2]  934 	jrule 3$
                                    935 ; bounds {1..array_size}	
      00193E A6 0A            [ 1]  936 2$: ld a,#ERR_BAD_VALUE 
      001940 CC 16 4A         [ 2]  937 	jp tb_error 
      001943 5D               [ 2]  938 3$: tnzw  x
      001944 27 F8            [ 1]  939 	jreq 2$ 
      001946 89               [ 2]  940 	pushw x 
      001947 58               [ 2]  941 	sllw x 
      001948 72 FB 01         [ 2]  942 	addw x,(1,sp) ; index*size_of(int24)
      00194B 1F 01            [ 2]  943 	ldw (1,sp),x  
      00194D AE 16 68         [ 2]  944 	ldw x,#tib ; array is below tib 
      001950 72 F0 01         [ 2]  945 	subw x,(1,sp)
      001953                        946 	_drop 2   
      001953 5B 02            [ 2]    1     addw sp,#2 
      001955 81               [ 4]  947 	ret 
                                    948 
                                    949 
                                    950 ;***********************************
                                    951 ;   expression parse,execute 
                                    952 ;***********************************
                                    953 ;-----------------------------------
                                    954 ; factor ::= ['+'|'-'|e]  var | @ |
                                    955 ;			 integer | function |
                                    956 ;			 '('relation')' 
                                    957 ; output:
                                    958 ;   A       token attribute 
                                    959 ;   xstack  value  
                                    960 ; ---------------------------------
                           000001   961 	NEG=1
                           000001   962 	VSIZE=1
      001956                        963 factor:
      001956                        964 	_vars VSIZE 
      001956 52 01            [ 2]    1     sub sp,#VSIZE 
      001958 0F 01            [ 1]  965 	clr (NEG,sp)
      00195A CD 17 47         [ 4]  966 	call next_token
      00195D A1 02            [ 1]  967 	cp a,#CMD_END  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00195F 25 6D            [ 1]  968 	jrult 16$
      001961 A1 10            [ 1]  969 1$:	cp a,#TK_PLUS 
      001963 27 06            [ 1]  970 	jreq 2$
      001965 A1 11            [ 1]  971 	cp a,#TK_MINUS 
      001967 26 05            [ 1]  972 	jrne 4$ 
      001969 03 01            [ 1]  973 	cpl (NEG,sp)
      00196B                        974 2$:	
      00196B CD 17 47         [ 4]  975 	call next_token 
      00196E                        976 4$:	
      00196E A1 81            [ 1]  977 	cp a,#TK_IFUNC 
      001970 26 06            [ 1]  978 	jrne 5$ 
      001972 CD 17 61         [ 4]  979 	call get_code_addr 
      001975 FD               [ 4]  980 	call (x); result in A:X  
      001976 20 61            [ 2]  981 	jra 18$ 
      001978                        982 5$:
      001978 A1 84            [ 1]  983 	cp a,#TK_INTGR
      00197A 26 05            [ 1]  984 	jrne 6$
      00197C CD 17 87         [ 4]  985 	call get_int24 
      00197F 20 58            [ 2]  986 	jra 18$
      001981                        987 6$:
      001981 A1 05            [ 1]  988 	cp a,#TK_ARRAY
      001983 26 05            [ 1]  989 	jrne 7$
      001985 CD 19 26         [ 4]  990 	call get_array_element
      001988 20 07            [ 2]  991     jra 71$
      00198A                        992 7$:
      00198A A1 85            [ 1]  993 	cp a,#TK_VAR 
      00198C 26 08            [ 1]  994 	jrne 8$
      00198E CD 17 7D         [ 4]  995 	call get_addr 
      001991                        996 71$:
      001991 F6               [ 1]  997 	ld a,(x)
      001992 EE 01            [ 2]  998 	ldw x,(1,x)
      001994 20 43            [ 2]  999 	jra 18$
      001996                       1000 8$:
      001996 A1 03            [ 1] 1001 	cp a,#TK_LABEL 
      001998 26 11            [ 1] 1002 	jrne 9$ 
      00199A 89               [ 2] 1003 	pushw x 
      00199B CD 17 6E         [ 4] 1004 	call skip_string
      00199E 85               [ 2] 1005 	popw x 
      00199F CD 1C 90         [ 4] 1006 	call search_const 
      0019A2 4F               [ 1] 1007 	clr a 
      0019A3 5D               [ 2] 1008 	tnzw x 
      0019A4 27 28            [ 1] 1009 	jreq 16$
      0019A6 CD 1B F1         [ 4] 1010 	call get_const_value 
      0019A9 20 2E            [ 2] 1011 	jra 18$
      0019AB                       1012 9$: 
      0019AB A1 82            [ 1] 1013 	cp a,#TK_CFUNC 
      0019AD 26 08            [ 1] 1014 	jrne 12$
      0019AF CD 17 61         [ 4] 1015 	call get_code_addr 
      0019B2 FD               [ 4] 1016 	call(x)
      0019B3 5F               [ 1] 1017 	clrw x 
      0019B4 02               [ 1] 1018 	rlwa x 
      0019B5 20 22            [ 2] 1019 	jra 18$ 	 
      0019B7                       1020 12$:			
      0019B7 A1 06            [ 1] 1021 	cp a,#TK_LPAREN
      0019B9 26 13            [ 1] 1022 	jrne 16$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0019BB CD 1A 38         [ 4] 1023 	call expression
      0019BE A6 07            [ 1] 1024 	ld a,#TK_RPAREN 
      0019C0 CD 18 EF         [ 4] 1025 	call expect
      0019C3                       1026 	_xpop 
      0019C3 90 F6            [ 1]    1     ld a,(y)
      0019C5 93               [ 1]    2     ldw x,y 
      0019C6 EE 01            [ 2]    3     ldw x,(1,x)
      0019C8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0019CC 20 0B            [ 2] 1027 	jra 18$	
      0019CE                       1028 16$:
      0019CE 4D               [ 1] 1029 	tnz a 
      0019CF 27 1A            [ 1] 1030 	jreq 20$ 
      0019D1                       1031 	_unget_token
      0019D1 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019D6 4F               [ 1] 1032 	clr a 
      0019D7 20 12            [ 2] 1033 	jra 20$ 
      0019D9                       1034 18$: 
      0019D9 0D 01            [ 1] 1035 	tnz (NEG,sp)
      0019DB 27 03            [ 1] 1036 	jreq 19$
      0019DD CD 01 C9         [ 4] 1037 	call neg_ax   
      0019E0                       1038 19$: _xpush 
      0019E0 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0019E4 90 F7            [ 1]    2     ld (y),a 
      0019E6 90 EF 01         [ 2]    3     ldw (1,y),x 
      0019E9 A6 84            [ 1] 1039      ld a,#TK_INTGR
      0019EB                       1040 20$:
      0019EB                       1041 	_drop VSIZE
      0019EB 5B 01            [ 2]    1     addw sp,#VSIZE 
      0019ED 81               [ 4] 1042 	ret
                                   1043 
                                   1044 
                                   1045 ;-----------------------------------
                                   1046 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1047 ; output:
                                   1048 ;   A    	token attribute 
                                   1049 ;	xstack		value 
                                   1050 ;-----------------------------------
                           000001  1051 	MULOP=1
                           000001  1052 	VSIZE=1
      0019EE                       1053 term:
      0019EE                       1054 	_vars VSIZE
      0019EE 52 01            [ 2]    1     sub sp,#VSIZE 
      0019F0 CD 19 56         [ 4] 1055 	call factor
      0019F3 4D               [ 1] 1056 	tnz a 
      0019F4 27 3F            [ 1] 1057 	jreq term_exit 
      0019F6                       1058 term01:	 ; check for  operator 
      0019F6 CD 17 47         [ 4] 1059 	call next_token
      0019F9 6B 01            [ 1] 1060 	ld (MULOP,sp),a
      0019FB A1 02            [ 1] 1061 	cp a,#CMD_END
      0019FD 25 2B            [ 1] 1062 	jrult 8$
      0019FF A4 30            [ 1] 1063 	and a,#TK_GRP_MASK
      001A01 A1 20            [ 1] 1064 	cp a,#TK_GRP_MULT
      001A03 27 02            [ 1] 1065 	jreq 1$
      001A05 20 23            [ 2] 1066 	jra 8$
      001A07                       1067 1$:	; got *|/|%
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A07 CD 19 56         [ 4] 1068 	call factor
      001A0A A1 84            [ 1] 1069 	cp a,#TK_INTGR
      001A0C 27 03            [ 1] 1070 	jreq 2$
      001A0E CC 16 48         [ 2] 1071 	jp syntax_error
      001A11                       1072 2$:	
      001A11 7B 01            [ 1] 1073 	ld a,(MULOP,sp) 
      001A13 A1 20            [ 1] 1074 	cp a,#TK_MULT 
      001A15 26 05            [ 1] 1075 	jrne 3$
      001A17 CD 02 21         [ 4] 1076 	call mul24 
      001A1A 20 DA            [ 2] 1077 	jra term01
      001A1C A1 21            [ 1] 1078 3$: cp a,#TK_DIV 
      001A1E 26 05            [ 1] 1079 	jrne 4$ 
      001A20 CD 02 E5         [ 4] 1080 	call div24 
      001A23 20 D1            [ 2] 1081 	jra term01 
      001A25 CD 03 93         [ 4] 1082 4$: call mod24
      001A28 20 CC            [ 2] 1083 	jra term01 
      001A2A 7B 01            [ 1] 1084 8$: ld a,(MULOP,sp)
      001A2C 27 05            [ 1] 1085 	jreq 9$ 
      001A2E                       1086 	_unget_token
      001A2E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A33                       1087 9$: 
      001A33 A6 84            [ 1] 1088 	ld a,#TK_INTGR 	
      001A35                       1089 term_exit:
      001A35                       1090 	_drop VSIZE 
      001A35 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A37 81               [ 4] 1091 	ret 
                                   1092 
                                   1093 ;-------------------------------
                                   1094 ;  expr ::= term [['+'|'-'] term]*
                                   1095 ;  result range {-32768..32767}
                                   1096 ;  output:
                                   1097 ;   A    token attribute 
                                   1098 ;   xstack	 result    
                                   1099 ;-------------------------------
                           000001  1100 	OP=1 
                           000001  1101 	VSIZE=1 
      001A38                       1102 expression:
      001A38                       1103 	_vars VSIZE 
      001A38 52 01            [ 2]    1     sub sp,#VSIZE 
      001A3A CD 19 EE         [ 4] 1104 	call term
      001A3D 4D               [ 1] 1105 	tnz a 
      001A3E 27 36            [ 1] 1106 	jreq expr_exit 
      001A40                       1107 1$:	
      001A40 CD 17 47         [ 4] 1108 	call next_token
      001A43 6B 01            [ 1] 1109 	ld (OP,sp),a 
      001A45 A1 02            [ 1] 1110 	cp a,#CMD_END 
      001A47 25 22            [ 1] 1111 	jrult 8$ 
      001A49 A4 30            [ 1] 1112 	and a,#TK_GRP_MASK
      001A4B A1 10            [ 1] 1113 	cp a,#TK_GRP_ADD 
      001A4D 27 02            [ 1] 1114 	jreq 2$ 
      001A4F 20 1A            [ 2] 1115 	jra 8$
      001A51                       1116 2$: 
      001A51 CD 19 EE         [ 4] 1117 	call term
      001A54 A1 84            [ 1] 1118 	cp a,#TK_INTGR
      001A56 27 03            [ 1] 1119 	jreq 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A58 CC 16 48         [ 2] 1120 	jp syntax_error
      001A5B                       1121 3$:	
      001A5B 7B 01            [ 1] 1122 	ld a,(OP,sp)
      001A5D A1 10            [ 1] 1123 	cp a,#TK_PLUS 
      001A5F 26 05            [ 1] 1124 	jrne 4$
      001A61 CD 01 58         [ 4] 1125 	call add24
      001A64 20 DA            [ 2] 1126 	jra 1$ 
      001A66                       1127 4$:	
      001A66 CD 01 7D         [ 4] 1128 	call sub24
      001A69 20 D5            [ 2] 1129 	jra 1$
      001A6B 7B 01            [ 1] 1130 8$: ld a,(OP,sp)
      001A6D 27 05            [ 1] 1131 	jreq 9$ 
      001A6F                       1132 	_unget_token	
      001A6F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A74                       1133 9$: 
      001A74 A6 84            [ 1] 1134 	ld a,#TK_INTGR	
      001A76                       1135 expr_exit:
      001A76                       1136 	_drop VSIZE 
      001A76 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A78 81               [ 4] 1137 	ret 
                                   1138 
                                   1139 ;---------------------------------------------
                                   1140 ; rel ::= expr rel_op expr
                                   1141 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1142 ;  relation return  integer , zero is false 
                                   1143 ;  output:
                                   1144 ;    A 		token attribute  
                                   1145 ;	 xstack		value  
                                   1146 ;---------------------------------------------
                           000001  1147 	RELOP=1
                           000001  1148 	VSIZE=1 
      001A79                       1149 relation: 
      001A79                       1150 	_vars VSIZE
      001A79 52 01            [ 2]    1     sub sp,#VSIZE 
      001A7B CD 1A 38         [ 4] 1151 	call expression
      001A7E 4D               [ 1] 1152 	tnz a 
      001A7F 26 03            [ 1] 1153 	jrne 1$
      001A81 CC 1A CB         [ 2] 1154 	jp rel_exit
      001A84                       1155 1$:	
                                   1156 ; expect rel_op or leave 
      001A84 CD 17 47         [ 4] 1157 	call next_token 
      001A87 6B 01            [ 1] 1158 	ld (RELOP,sp),a 
      001A89 A4 30            [ 1] 1159 	and a,#TK_GRP_MASK
      001A8B A1 30            [ 1] 1160 	cp a,#TK_GRP_RELOP 
      001A8D 26 31            [ 1] 1161 	jrne 8$
      001A8F                       1162 2$:	; expect another expression
      001A8F CD 1A 38         [ 4] 1163 	call expression
      001A92 A1 84            [ 1] 1164 	cp a,#TK_INTGR
      001A94 27 03            [ 1] 1165 	jreq 3$
      001A96 CC 16 48         [ 2] 1166 	jp syntax_error 
      001A99                       1167 3$:	
      001A99 CD 01 7D         [ 4] 1168 	call sub24 
      001A9C 26 06            [ 1] 1169 	jrne 4$
      001A9E 35 02 00 0E      [ 1] 1170 	mov acc8,#2 ; n1==n2
      001AA2 20 0C            [ 2] 1171 	jra 6$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001AA4                       1172 4$: 
      001AA4 2C 06            [ 1] 1173 	jrsgt 5$  
      001AA6 35 04 00 0E      [ 1] 1174 	mov acc8,#4 ; n1<2 
      001AAA 20 04            [ 2] 1175 	jra 6$
      001AAC                       1176 5$:
      001AAC 35 01 00 0E      [ 1] 1177 	mov acc8,#1 ; n1>n2 
      001AB0                       1178 6$:
      001AB0 5F               [ 1] 1179 	clrw x 
      001AB1 C6 00 0E         [ 1] 1180 	ld a, acc8  
      001AB4 14 01            [ 1] 1181 	and a,(RELOP,sp)
      001AB6 27 01            [ 1] 1182 	jreq 7$
      001AB8 5C               [ 1] 1183 	incw x
      001AB9                       1184 7$:	_store_top   
      001AB9 90 F7            [ 1]    1     ld (y),a 
      001ABB 90 EF 01         [ 2]    2     ldw (1,y),x     
      001ABE 20 09            [ 2] 1185 	jra 10$  	
      001AC0 7B 01            [ 1] 1186 8$: ld a,(RELOP,sp)
      001AC2 27 05            [ 1] 1187 	jreq 10$
      001AC4                       1188 	_unget_token
      001AC4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AC9                       1189 10$:
      001AC9 A6 84            [ 1] 1190 	ld a,#TK_INTGR
      001ACB                       1191 rel_exit:
      001ACB                       1192 	_drop VSIZE
      001ACB 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ACD 81               [ 4] 1193 	ret 
                                   1194 
                                   1195 ;--------------------------------
                                   1196 ; BASIC: SHOW 
                                   1197 ; print stack content in hexadecimal bytes 
                                   1198 ; 16 bytes per row 
                                   1199 ;--------------------------------
                           000001  1200 	DEPTH=1
                           000002  1201 	CNTR=2
                           000002  1202 	VSIZE=2
      001ACE                       1203 show:
      001ACE                       1204 	_vars VSIZE 
      001ACE 52 02            [ 2]    1     sub sp,#VSIZE 
      001AD0 0F 02            [ 1] 1205 	clr (CNTR,sp)
      001AD2 AE 1B 1E         [ 2] 1206 	ldw x,#cstk_prompt
      001AD5 CD 09 5A         [ 4] 1207 	call puts 
      001AD8 90 89            [ 2] 1208 	pushw y 
      001ADA AE 17 73         [ 2] 1209 	ldw x,#XSTACK_EMPTY
      001ADD 72 F0 01         [ 2] 1210 	subw x,(1,sp)
      001AE0                       1211 	_drop 2
      001AE0 5B 02            [ 2]    1     addw sp,#2 
      001AE2 A6 03            [ 1] 1212 	ld a,#CELL_SIZE 
      001AE4 62               [ 2] 1213 	div x,a  
      001AE5 9F               [ 1] 1214 	ld a,xl  
      001AE6 6B 01            [ 1] 1215     ld (DEPTH,sp),a 
      001AE8 90 CF 00 18      [ 2] 1216 	ldw ptr16,y 
      001AEC                       1217 1$: 
      001AEC 72 C6 00 18      [ 4] 1218 	ld a,[ptr16]
      001AF0 72 5C 00 19      [ 1] 1219 	inc ptr8 
      001AF4 72 CE 00 18      [ 5] 1220 	ldw x,[ptr16]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001AF8 72 5C 00 19      [ 1] 1221 	inc ptr8 
      001AFC 72 5C 00 19      [ 1] 1222 	inc ptr8 
      001B00 C7 00 0C         [ 1] 1223 	ld acc24,a 
      001B03 CF 00 0D         [ 2] 1224 	ldw acc16,x 
      001B06 CD 17 AD         [ 4] 1225 	call prt_acc24
      001B09 A6 20            [ 1] 1226 	ld a,#SPACE 
      001B0B CD 08 FD         [ 4] 1227 	call putc 
      001B0E 0C 02            [ 1] 1228 	inc (CNTR,sp)
      001B10 7B 02            [ 1] 1229 	ld a,(CNTR,sp)
      001B12 11 01            [ 1] 1230 	cp a,(DEPTH,sp)
      001B14 2B D6            [ 1] 1231 	jrmi 1$
      001B16 A6 0D            [ 1] 1232 	ld a,#CR 
      001B18 CD 08 FD         [ 4] 1233 	call putc  
      001B1B                       1234 	_drop VSIZE 
      001B1B 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B1D 81               [ 4] 1235 	ret
                                   1236 
      001B1E 0A 63 6F 6E 74 65 6E  1237 cstk_prompt: .asciz "\ncontent of expression stack from top to bottom:\n"
             74 20 6F 66 20 65 78
             70 72 65 73 73 69 6F
             6E 20 73 74 61 63 6B
             20 66 72 6F 6D 20 74
             6F 70 20 74 6F 20 62
             6F 74 74 6F 6D 3A 0A
             00
                                   1238 
                                   1239 
                                   1240 ;--------------------------------------------
                                   1241 ; BASIC: HEX 
                                   1242 ; select hexadecimal base for integer print
                                   1243 ;---------------------------------------------
      001B50                       1244 hex_base:
      001B50 35 10 00 0A      [ 1] 1245 	mov base,#16 
      001B54 81               [ 4] 1246 	ret 
                                   1247 
                                   1248 ;--------------------------------------------
                                   1249 ; BASIC: DEC 
                                   1250 ; select decimal base for integer print
                                   1251 ;---------------------------------------------
      001B55                       1252 dec_base:
      001B55 35 0A 00 0A      [ 1] 1253 	mov base,#10
      001B59 81               [ 4] 1254 	ret 
                                   1255 
                                   1256 ;------------------------
                                   1257 ; BASIC: FREE 
                                   1258 ; return free size in RAM 
                                   1259 ; output:
                                   1260 ;   A:x		size 
                                   1261 ;--------------------------
      001B5A                       1262 free:
      001B5A 90 89            [ 2] 1263 	pushw y 
      001B5C 4F               [ 1] 1264 	clr a 
      001B5D AE 16 68         [ 2] 1265 	ldw x,#tib 
      001B60 90 CE 00 1A      [ 2] 1266 	ldw y,txtbgn 
      001B64 90 A3 35 80      [ 2] 1267 	cpw y,#app_space
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001B68 25 05            [ 1] 1268 	jrult 1$
      001B6A 1D 00 80         [ 2] 1269 	subw x,#free_ram 
      001B6D 20 04            [ 2] 1270 	jra 2$ 
      001B6F                       1271 1$:	
      001B6F 72 B0 00 1C      [ 2] 1272 	subw x,txtend
      001B73 90 85            [ 2] 1273 2$:	popw y 
      001B75 81               [ 4] 1274 	ret 
                                   1275 
                                   1276 ;------------------------------
                                   1277 ; BASIC: SIZE 
                                   1278 ; command that print 
                                   1279 ; program start addres and size 
                                   1280 ;------------------------------
      001B76                       1281 cmd_size:
      001B76 3B 00 0A         [ 1] 1282 	push base 
      001B79 AE 1D CA         [ 2] 1283 	ldw x,#PROG_ADDR 
      001B7C CD 09 5A         [ 4] 1284 	call puts 
      001B7F CE 00 1A         [ 2] 1285 	ldw x,txtbgn     
      001B82 35 10 00 0A      [ 1] 1286 	mov base,#16 
      001B86 CD 17 9D         [ 4] 1287 	call prt_i16
      001B89 32 00 0A         [ 1] 1288 	pop base 
      001B8C AE 1D DC         [ 2] 1289 	ldw x,#PROG_SIZE 
      001B8F CD 09 5A         [ 4] 1290 	call puts 
      001B92 CE 00 1C         [ 2] 1291 	ldw x,txtend 
      001B95 72 B0 00 1A      [ 2] 1292 	subw x,txtbgn 
      001B99 CD 17 9D         [ 4] 1293 	call prt_i16
      001B9C AE 1D ED         [ 2] 1294 	ldw x,#STR_BYTES 
      001B9F CD 09 5A         [ 4] 1295 	call puts  
      001BA2 81               [ 4] 1296 	ret 
                                   1297 
                                   1298 
                                   1299 ;------------------------
                                   1300 ; BASIC: UBOUND  
                                   1301 ; return array variable size 
                                   1302 ; and set 'array_size' variable 
                                   1303 ; output:
                                   1304 ;   A:X 	array_size
                                   1305 ;--------------------------
      001BA3                       1306 ubound:
      001BA3 CD 1B 5A         [ 4] 1307 	call free 
      001BA6 A6 03            [ 1] 1308 	ld a,#CELL_SIZE 
      001BA8 42               [ 4] 1309 	mul x,a 
      001BA9 CF 00 1F         [ 2] 1310 	ldw array_size,x
      001BAC 4F               [ 1] 1311 	clr a 
      001BAD 81               [ 4] 1312 	ret 
                                   1313 
                                   1314 ;-----------------------------
                                   1315 ; BASIC: LET var=expr 
                                   1316 ; variable assignement 
                                   1317 ; output:
                                   1318 ;   A 		TK_NONE 
                                   1319 ;-----------------------------
      001BAE                       1320 let::
      001BAE CD 17 47         [ 4] 1321 	call next_token 
      001BB1 A1 85            [ 1] 1322 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001BB3 27 0C            [ 1] 1323 	jreq let_var
      001BB5 A1 05            [ 1] 1324 	cp a,#TK_ARRAY 
      001BB7 27 03            [ 1] 1325 	jreq  let_array
      001BB9 CC 16 48         [ 2] 1326 	jp syntax_error
      001BBC                       1327 let_array:
      001BBC CD 19 26         [ 4] 1328 	call get_array_element
      001BBF 20 03            [ 2] 1329 	jra let_eval 
      001BC1                       1330 let_var:
      001BC1 CD 17 7D         [ 4] 1331 	call get_addr
      001BC4                       1332 let_eval:
      001BC4 CF 00 18         [ 2] 1333 	ldw ptr16,x  ; variable address 
      001BC7 CD 17 47         [ 4] 1334 	call next_token 
      001BCA A1 32            [ 1] 1335 	cp a,#TK_EQUAL
      001BCC 27 03            [ 1] 1336 	jreq 1$
      001BCE CC 16 48         [ 2] 1337 	jp syntax_error
      001BD1                       1338 1$:	
      001BD1 CD 1A 38         [ 4] 1339 	call expression    
      001BD4 A1 84            [ 1] 1340 	cp a,#TK_INTGR 
      001BD6 27 03            [ 1] 1341 	jreq 2$
      001BD8 CC 16 48         [ 2] 1342 	jp syntax_error
      001BDB                       1343 2$:	
      001BDB                       1344 	_xpop ; value 
      001BDB 90 F6            [ 1]    1     ld a,(y)
      001BDD 93               [ 1]    2     ldw x,y 
      001BDE EE 01            [ 2]    3     ldw x,(1,x)
      001BE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BE4                       1345 3$:
      001BE4 72 C7 00 18      [ 4] 1346 	ld [ptr16],a
      001BE8 72 5C 00 19      [ 1] 1347 	inc ptr8  
      001BEC 72 CF 00 18      [ 5] 1348 	ldw [ptr16],x 
      001BF0 81               [ 4] 1349 	ret 
                                   1350 
                                   1351 
                                   1352 ;--------------------------
                                   1353 ; return constant value 
                                   1354 ; from it's record address
                                   1355 ; input:
                                   1356 ;	X	*const record 
                                   1357 ; output:
                                   1358 ;   A:X   const  value
                                   1359 ;--------------------------
      001BF1                       1360 get_const_value: ; -- i 
      001BF1 F6               [ 1] 1361 	ld a,(x) ; record size 
      001BF2 A0 03            [ 1] 1362 	sub a,#3 ; * value 
      001BF4 88               [ 1] 1363 	push a 
      001BF5 4B 00            [ 1] 1364 	push #0 
      001BF7 72 FB 01         [ 2] 1365 	addw x,(1,sp)
      001BFA F6               [ 1] 1366 	ld a,(x)
      001BFB EE 01            [ 2] 1367 	ldw x,(1,x)
      001BFD                       1368 	_drop 2
      001BFD 5B 02            [ 2]    1     addw sp,#2 
      001BFF 81               [ 4] 1369 	ret 
                                   1370 
                                   1371 
                                   1372 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                   1373 ; list constants in EEPROM 
                                   1374 ; call when using LIST \C 
                                   1375 ;-------------------------
                           000001  1376 	COUNT=1
                           000003  1377 	YTEMP=3
                           000004  1378 	VSIZE=4 
      001C00                       1379 list_const:
      001C00 90 89            [ 2] 1380 	pushw y 
      001C02                       1381 	_vars 4 
      001C02 52 04            [ 2]    1     sub sp,#4 
      001C04 5F               [ 1] 1382 	clrw x 
      001C05 1F 01            [ 2] 1383 	ldw (COUNT,sp),x  
      001C07 90 AE 40 00      [ 2] 1384 	ldw Y,#EEPROM_BASE 
      001C0B 90 C3 00 23      [ 2] 1385 1$:	cpw y,free_eeprom 
      001C0F 24 30            [ 1] 1386 	jruge 9$
      001C11 17 03            [ 2] 1387     ldw (YTEMP,sp),y 
      001C13 93               [ 1] 1388 	ldw x,y
      001C14 5C               [ 1] 1389 	incw x 
      001C15 CD 09 5A         [ 4] 1390 	call puts  
      001C18 A6 3D            [ 1] 1391 	ld a,#'= 
      001C1A CD 08 FD         [ 4] 1392 	call putc 
      001C1D 1E 03            [ 2] 1393 	ldw x,(YTEMP,sp)
      001C1F CD 1B F1         [ 4] 1394 	call get_const_value 
      001C22 C7 00 0C         [ 1] 1395 	ld acc24,a 
      001C25 CF 00 0D         [ 2] 1396 	ldw acc16,x 
      001C28 CD 17 AD         [ 4] 1397 	call prt_acc24
      001C2B 1E 01            [ 2] 1398 	ldw x,(COUNT,sp)
      001C2D 5C               [ 1] 1399 	incw x 
      001C2E 1F 01            [ 2] 1400 	ldw (COUNT,sp),x 
      001C30 72 5F 00 0D      [ 1] 1401 	clr acc16 
      001C34 16 03            [ 2] 1402 	ldw y,(YTEMP,sp)
      001C36 90 F6            [ 1] 1403 	ld a,(y)
      001C38 C7 00 0E         [ 1] 1404 	ld acc8,a
      001C3B 72 B9 00 0D      [ 2] 1405 	addw y,acc16 
      001C3F 20 CA            [ 2] 1406 	jra 1$ 
      001C41                       1407 9$:	
      001C41 1E 01            [ 2] 1408 	ldw x,(COUNT,sp)
      001C43 CD 17 9D         [ 4] 1409 	call prt_i16 
      001C46 AE 1C 51         [ 2] 1410 	ldw x,#CONST_COUNT 
      001C49 CD 09 5A         [ 4] 1411 	call puts 
      001C4C                       1412 	_drop VSIZE 
      001C4C 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C4E 90 85            [ 2] 1413 	popw y 
      001C50 81               [ 4] 1414 	ret 
                                   1415 
      001C51 20 63 6F 6E 73 74 61  1416 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1417 
                                   1418 
                                   1419 ;--------------------------
                                   1420 ; BASIC: EEFREE 
                                   1421 ; eeprom_free 
                                   1422 ; search end of data  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1423 ; in EEPROM 
                                   1424 ; input:
                                   1425 ;    none 
                                   1426 ; output:
                                   1427 ;    A:X     address free
                                   1428 ;-------------------------
      001C67                       1429 func_eefree:
      001C67 AE 40 00         [ 2] 1430 	ldw x,#EEPROM_BASE 
      001C6A 35 08 00 0E      [ 1] 1431 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001C6E A3 47 F8         [ 2] 1432     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001C71 24 17            [ 1] 1433 	jruge 8$ ; no free space 
      001C73 F6               [ 1] 1434 2$: ld a,(x)
      001C74 26 0C            [ 1] 1435 	jrne 3$
      001C76 5C               [ 1] 1436 	incw x 
      001C77 72 5A 00 0E      [ 1] 1437 	dec acc8 
      001C7B 26 F6            [ 1] 1438 	jrne 2$
      001C7D 1D 00 08         [ 2] 1439 	subw x,#8 
      001C80 20 09            [ 2] 1440 	jra 9$  
      001C82 F6               [ 1] 1441 3$: ld a,(x)
      001C83 5C               [ 1] 1442 	incw x
      001C84 4D               [ 1] 1443 	tnz a  
      001C85 26 FB            [ 1] 1444 	jrne 3$
      001C87 5A               [ 2] 1445 	decw x   
      001C88 20 E0            [ 2] 1446 	jra 1$ 
      001C8A 5F               [ 1] 1447 8$: clrw x ; no free space 
      001C8B 4F               [ 1] 1448 9$: clr a 
      001C8C CF 00 23         [ 2] 1449 	ldw free_eeprom,x ; save in system variable 
      001C8F 81               [ 4] 1450 	ret 
                                   1451 
                           000005  1452 CONST_REC_XTRA_BYTES=5 
                                   1453 ;--------------------------
                                   1454 ; search constant name 
                                   1455 ; format of constant record  
                                   1456 ;   .byte record length 
                                   1457 ;         = strlen(name)+5 
                                   1458 ;   .asciz name (variable length)
                                   1459 ;   .int24 value (3 bytes )
                                   1460 ; a constant record use 7+ bytes
                                   1461 ; constants are saved in EEPROM  
                                   1462 ; input:
                                   1463 ;    X     *name
                                   1464 ; output:
                                   1465 ;    X     address|0
                                   1466 ; use:
                                   1467 ;   A,Y, acc16 
                                   1468 ;-------------------------
                           000001  1469 	NAMEPTR=1 ; target name pointer 
                           000003  1470 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1471 	RECLEN=5  ; record length of target
                           000005  1472 	VSIZE=5
      001C90                       1473 search_const:
      001C90 90 89            [ 2] 1474 	pushw y 
      001C92                       1475 	_vars VSIZE
      001C92 52 05            [ 2]    1     sub sp,#VSIZE 
      001C94 72 5F 00 0D      [ 1] 1476 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C98 CD 13 8C         [ 4] 1477 	call strlen 
      001C9B AB 05            [ 1] 1478 	add a,#CONST_REC_XTRA_BYTES
      001C9D 6B 05            [ 1] 1479 	ld (RECLEN,sp),a    
      001C9F 1F 01            [ 2] 1480 	ldw (NAMEPTR,sp),x
      001CA1 90 AE 40 00      [ 2] 1481 	ldw y,#EEPROM_BASE 
      001CA5 1E 01            [ 2] 1482 1$:	ldw x,(NAMEPTR,sp)
      001CA7 17 03            [ 2] 1483 	ldw (EEPTR,sp),y
      001CA9 90 C3 00 23      [ 2] 1484 	cpw y, free_eeprom 
      001CAD 24 1A            [ 1] 1485 	jruge 7$ ; no match found 
      001CAF 90 F6            [ 1] 1486 	ld a,(y)
      001CB1 11 05            [ 1] 1487 	cp a,(RECLEN,sp)
      001CB3 26 07            [ 1] 1488 	jrne 2$ 
      001CB5 90 5C            [ 1] 1489 	incw y 
      001CB7 CD 13 97         [ 4] 1490 	call strcmp
      001CBA 26 11            [ 1] 1491 	jrne 8$ ; match found 
      001CBC                       1492 2$: ; skip this one 	
      001CBC 16 03            [ 2] 1493 	ldW Y,(EEPTR,sp)
      001CBE 90 F6            [ 1] 1494 	ld a,(y)
      001CC0 C7 00 0E         [ 1] 1495 	ld acc8,a 
      001CC3 72 B9 00 0D      [ 2] 1496 	addw y,acc16 
      001CC7 20 DC            [ 2] 1497 	jra 1$  
      001CC9                       1498 7$: ; no match found 
      001CC9 0F 03            [ 1] 1499 	clr (EEPTR,sp)
      001CCB 0F 04            [ 1] 1500 	clr (EEPTR+1,sp)
      001CCD                       1501 8$: ; match found 
      001CCD 1E 03            [ 2] 1502 	ldw x,(EEPTR,sp) ; record address 
      001CCF                       1503 9$:	_DROP VSIZE
      001CCF 5B 05            [ 2]    1     addw sp,#VSIZE 
      001CD1 90 85            [ 2] 1504 	 popw y 
      001CD3 81               [ 4] 1505 	 ret 
                                   1506 
                                   1507 
                                   1508 ;--------------------------------------------
                                   1509 ; BASIC: CONST name=value [, name=value]*
                                   1510 ; define constant(s) saved in EEPROM
                                   1511 ;--------------------------------------------
                           000001  1512 	CNAME=1 
                           000003  1513 	BUFPTR=3
                           000005  1514 	RECLEN=5
                           000006  1515 	UPDATE=6
                           000007  1516 	YSAVE=7
                           000008  1517 	VSIZE=8 
      001CD4                       1518 cmd_const:
      001CD4 90 89            [ 2] 1519 	pushw y 
      001CD6                       1520 	_vars VSIZE 
      001CD6 52 08            [ 2]    1     sub sp,#VSIZE 
      001CD8 0F 06            [ 1] 1521 	clr (UPDATE,sp)
      001CDA CD 17 47         [ 4] 1522 	call next_token 
      001CDD A1 04            [ 1] 1523 	cp a,#TK_CHAR 
      001CDF 26 0D            [ 1] 1524 	jrne 0$
      001CE1 CD 17 97         [ 4] 1525 	call get_char 
      001CE4 A4 DF            [ 1] 1526 	and a,#0xDF 
      001CE6 A1 55            [ 1] 1527 	cp a,#'U 
      001CE8 26 08            [ 1] 1528 	jrne 1$
      001CEA 03 06            [ 1] 1529 	cpl (UPDATE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001CEC 20 07            [ 2] 1530 	jra const_loop 
      001CEE A1 03            [ 1] 1531 0$: cp a,#TK_LABEL 
      001CF0 27 08            [ 1] 1532 	jreq cloop_1
      001CF2 CC 16 48         [ 2] 1533 1$: jp syntax_error
      001CF5                       1534 const_loop: 
      001CF5 A6 03            [ 1] 1535 	ld a,#TK_LABEL 
      001CF7 CD 18 EF         [ 4] 1536 	call expect  
      001CFA                       1537 cloop_1: 
      001CFA 1F 01            [ 2] 1538 	ldw (CNAME,sp),x ; *const_name
      001CFC CD 17 6E         [ 4] 1539 	call skip_string
      001CFF 1E 01            [ 2] 1540 	ldw x,(CNAME,sp)
      001D01 CD 13 8C         [ 4] 1541 	call strlen  
      001D04 AB 05            [ 1] 1542 	add a,#CONST_REC_XTRA_BYTES 
      001D06 6B 05            [ 1] 1543 	ld (RECLEN,sp),a 
                                   1544 ; copy name in buffer  
      001D08 16 01            [ 2] 1545 	ldw y,(CNAME,sp) 
      001D0A AE 16 68         [ 2] 1546 	ldw x,#tib  
      001D0D 7B 05            [ 1] 1547 	ld a,(RECLEN,sp)
      001D0F F7               [ 1] 1548 	ld (x),a 
      001D10 5C               [ 1] 1549 	incw x  
      001D11 CD 13 A8         [ 4] 1550 	call strcpy 
      001D14 1F 03            [ 2] 1551 	ldw (BUFPTR,sp),x 
                                   1552 ; x not updated by strcpy 
                                   1553 ; BUFPTR must be incremented 
                                   1554 ; to point after name 
      001D16 5F               [ 1] 1555 	clrw x 
      001D17 7B 05            [ 1] 1556 	ld a,(RECLEN,sp)
      001D19 A0 04            [ 1] 1557 	sub a,#CONST_REC_XTRA_BYTES-1
      001D1B 97               [ 1] 1558 	ld xl,a  
      001D1C 72 FB 03         [ 2] 1559 	addw x,(BUFPTR,sp)
      001D1F 1F 03            [ 2] 1560 	ldw (BUFPTR,sp),x 
      001D21 A6 32            [ 1] 1561 	ld a,#TK_EQUAL 
      001D23 CD 18 EF         [ 4] 1562 	call expect 
      001D26 16 07            [ 2] 1563 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001D28 CD 1A 38         [ 4] 1564 	call expression 
      001D2B A1 84            [ 1] 1565 	cp a,#TK_INTGR 
      001D2D 27 03            [ 1] 1566 	jreq 5$ 
      001D2F CC 16 48         [ 2] 1567 	jp syntax_error 
      001D32                       1568 5$:	_xpop 
      001D32 90 F6            [ 1]    1     ld a,(y)
      001D34 93               [ 1]    2     ldw x,y 
      001D35 EE 01            [ 2]    3     ldw x,(1,x)
      001D37 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D3B 17 07            [ 2] 1569 	ldw (YSAVE,sp),y ; save xtack pointer 
      001D3D 16 03            [ 2] 1570 	ldw y,(BUFPTR,sp)
      001D3F 90 F7            [ 1] 1571 	ld (y),a 
      001D41 90 EF 01         [ 2] 1572 	ldw (1,y),x 
                                   1573 ; record completed in buffer 
                                   1574 ; check if constant already exist 
                                   1575 ; if exist and \U option then update  
      001D44 72 5F 00 17      [ 1] 1576 	clr farptr 
      001D48 1E 01            [ 2] 1577 	ldw x,(CNAME,sp)
      001D4A CD 1C 90         [ 4] 1578 	call search_const 
      001D4D 5D               [ 2] 1579 	tnzw x 
      001D4E 27 06            [ 1] 1580 	jreq 6$ ; new constant  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001D50 0D 06            [ 1] 1581 	tnz (UPDATE,sp)
      001D52 27 1B            [ 1] 1582 	jreq 8$ 
      001D54 20 03            [ 2] 1583 	jra 7$	
      001D56                       1584 6$:	
      001D56 CE 00 23         [ 2] 1585 	ldw x,free_eeprom  
      001D59                       1586 7$:	
      001D59 CF 00 18         [ 2] 1587 	ldw farptr+1,x 
      001D5C AE 16 68         [ 2] 1588 	ldw x,#tib 
      001D5F 7B 05            [ 1] 1589 	ld a,(RECLEN,sp)
      001D61 CD 08 3E         [ 4] 1590 	call write_nbytes
                                   1591 ; update free_eeprom 
      001D64 5F               [ 1] 1592 	clrw x 
      001D65 7B 05            [ 1] 1593 	ld a,(RECLEN,sp)
      001D67 97               [ 1] 1594 	ld xl,a 
      001D68 72 BB 00 23      [ 2] 1595 	addw x,free_eeprom 
      001D6C CF 00 23         [ 2] 1596 	ldw free_eeprom,x
      001D6F                       1597 8$: ; check for next constant 
      001D6F CD 17 47         [ 4] 1598 	call next_token 
      001D72 A1 08            [ 1] 1599 	cp a,#TK_COMMA 
      001D74 26 03            [ 1] 1600 	jrne 9$ ; no other constant 
      001D76 CC 1C F5         [ 2] 1601 	jp const_loop 
      001D79                       1602 9$: 
      001D79                       1603 	_unget_token    
      001D79 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001D7E                       1604 10$: 
      001D7E                       1605 	_drop VSIZE 
      001D7E 5B 08            [ 2]    1     addw sp,#VSIZE 
      001D80 90 85            [ 2] 1606 	popw y ; restore xstack pointer 
      001D82 81               [ 4] 1607 	ret 
                                   1608 
                                   1609 
                                   1610 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1611 ; return program size 
                                   1612 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001D83                       1613 prog_size:
      001D83 CE 00 1C         [ 2] 1614 	ldw x,txtend 
      001D86 72 B0 00 1A      [ 2] 1615 	subw x,txtbgn 
      001D8A 81               [ 4] 1616 	ret 
                                   1617 
                                   1618 ;----------------------------
                                   1619 ; print program information 
                                   1620 ;---------------------------
      001D8B                       1621 program_info: 
      001D8B AE 1D CA         [ 2] 1622 	ldw x,#PROG_ADDR 
      001D8E CD 09 5A         [ 4] 1623 	call puts 
      001D91 CE 00 1A         [ 2] 1624 	ldw x,txtbgn 
      001D94 35 10 00 0A      [ 1] 1625 	mov base,#16 
      001D98 CD 17 9D         [ 4] 1626 	call prt_i16
      001D9B 35 0A 00 0A      [ 1] 1627 	mov base,#10  
      001D9F AE 1D DC         [ 2] 1628 	ldw x,#PROG_SIZE
      001DA2 CD 09 5A         [ 4] 1629 	call puts 
      001DA5 CD 1D 83         [ 4] 1630 	call prog_size 
      001DA8 CD 17 9D         [ 4] 1631 	call prt_i16 
      001DAB AE 1D ED         [ 2] 1632 	ldw x,#STR_BYTES 
      001DAE CD 09 5A         [ 4] 1633 	call puts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001DB1 CE 00 1A         [ 2] 1634 	ldw x,txtbgn
      001DB4 A3 35 84         [ 2] 1635 	cpw x,#app 
      001DB7 25 05            [ 1] 1636 	jrult 2$
      001DB9 AE 1D F4         [ 2] 1637 	ldw x,#FLASH_MEM 
      001DBC 20 03            [ 2] 1638 	jra 3$
      001DBE AE 1E 05         [ 2] 1639 2$: ldw x,#RAM_MEM 	 
      001DC1 CD 09 5A         [ 4] 1640 3$:	call puts 
      001DC4 A6 0D            [ 1] 1641 	ld a,#CR 
      001DC6 CD 08 FD         [ 4] 1642 	call putc
      001DC9 81               [ 4] 1643 	ret 
                                   1644 
      001DCA 70 72 6F 67 72 61 6D  1645 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001DDC 2C 20 70 72 6F 67 72  1646 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001DED 20 62 79 74 65 73 00  1647 STR_BYTES: .asciz " bytes" 
      001DF4 20 69 6E 20 46 4C 41  1648 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001E05 20 69 6E 20 52 41 4D  1649 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1650 
                                   1651 
                                   1652 ;----------------------------
                                   1653 ; BASIC: LIST [[start][,end]]
                                   1654 ; list program lines 
                                   1655 ; form start to end 
                                   1656 ; if empty argument list then 
                                   1657 ; list all.
                                   1658 ;----------------------------
                           000001  1659 	FIRST=1
                           000003  1660 	LAST=3 
                           000005  1661 	LN_PTR=5
                           000006  1662 	VSIZE=6 
      001E14                       1663 list:
      001E14 72 01 00 21 05   [ 2] 1664 	btjf flags,#FRUN,0$
      001E19 A6 07            [ 1] 1665 	ld a,#ERR_CMD_ONLY
      001E1B CC 16 4A         [ 2] 1666 	jp tb_error
      001E1E                       1667 0$:	 
      001E1E CD 17 47         [ 4] 1668 	call next_token 
      001E21 A1 04            [ 1] 1669 	cp a,#TK_CHAR 
      001E23 26 10            [ 1] 1670 	jrne 2$
      001E25 CD 17 97         [ 4] 1671 	call get_char 
      001E28 A4 DF            [ 1] 1672 	and a,#0xDF 
      001E2A A1 43            [ 1] 1673 	cp a,#'C 
      001E2C 26 04            [ 1] 1674 	jrne 1$
      001E2E CD 1C 00         [ 4] 1675 	call list_const
      001E31 81               [ 4] 1676 	ret 
      001E32 CC 16 48         [ 2] 1677 1$: jp syntax_error 
      001E35                       1678 2$:	_unget_token 
      001E35 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E3A CD 1D 83         [ 4] 1679 	call prog_size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001E3D 22 01            [ 1] 1680 	jrugt 3$
      001E3F 81               [ 4] 1681 	ret 
      001E40                       1682 3$: _vars VSIZE
      001E40 52 06            [ 2]    1     sub sp,#VSIZE 
      001E42 CE 00 1A         [ 2] 1683 	ldw x,txtbgn 
      001E45 1F 05            [ 2] 1684 	ldw (LN_PTR,sp),x 
      001E47 FE               [ 2] 1685 	ldw x,(x) 
      001E48 1F 01            [ 2] 1686 	ldw (FIRST,sp),x ; list from first line 
      001E4A AE 7F FF         [ 2] 1687 	ldw x,#MAX_LINENO ; biggest line number 
      001E4D 1F 03            [ 2] 1688 	ldw (LAST,sp),x 
      001E4F CD 19 01         [ 4] 1689 	call arg_list
      001E52 4D               [ 1] 1690 	tnz a
      001E53 27 31            [ 1] 1691 	jreq list_loop 
      001E55 A1 02            [ 1] 1692 	cp a,#2 
      001E57 27 07            [ 1] 1693 	jreq 4$
      001E59 A1 01            [ 1] 1694 	cp a,#1 
      001E5B 27 06            [ 1] 1695 	jreq first_line 
      001E5D CC 16 48         [ 2] 1696 	jp syntax_error 
      001E60 85               [ 2] 1697 4$:	popw x 
      001E61 1F 05            [ 2] 1698 	ldw (LAST+2,sp),x 
      001E63                       1699 first_line:
      001E63 85               [ 2] 1700 	popw x
      001E64 1F 01            [ 2] 1701 	ldw (FIRST,sp),x 
      001E66                       1702 lines_skip:
      001E66 CE 00 1A         [ 2] 1703 	ldw x,txtbgn
      001E69 1F 05            [ 2] 1704 2$:	ldw (LN_PTR,sp),x 
      001E6B C3 00 1C         [ 2] 1705 	cpw x,txtend 
      001E6E 2A 38            [ 1] 1706 	jrpl list_exit 
      001E70 FE               [ 2] 1707 	ldw x,(x) ;line# 
      001E71 13 01            [ 2] 1708 	cpw x,(FIRST,sp)
      001E73 2A 11            [ 1] 1709 	jrpl list_loop 
      001E75 1E 05            [ 2] 1710 	ldw x,(LN_PTR,sp) 
      001E77 E6 02            [ 1] 1711 	ld a,(2,x)
      001E79 C7 00 0E         [ 1] 1712 	ld acc8,a 
      001E7C 72 5F 00 0D      [ 1] 1713 	clr acc16 
      001E80 72 BB 00 0D      [ 2] 1714 	addw x,acc16
      001E84 20 E3            [ 2] 1715 	jra 2$ 
                                   1716 ; print loop
      001E86                       1717 list_loop:
      001E86 1E 05            [ 2] 1718 	ldw x,(LN_PTR,sp)
      001E88 E6 02            [ 1] 1719 	ld a,(2,x) 
      001E8A CD 1E FD         [ 4] 1720 	call prt_basic_line
      001E8D 1E 05            [ 2] 1721 	ldw x,(LN_PTR,sp)
      001E8F E6 02            [ 1] 1722 	ld a,(2,x)
      001E91 C7 00 0E         [ 1] 1723 	ld acc8,a 
      001E94 72 5F 00 0D      [ 1] 1724 	clr acc16 
      001E98 72 BB 00 0D      [ 2] 1725 	addw x,acc16
      001E9C C3 00 1C         [ 2] 1726 	cpw x,txtend 
      001E9F 2A 07            [ 1] 1727 	jrpl list_exit
      001EA1 1F 05            [ 2] 1728 	ldw (LN_PTR,sp),x
      001EA3 FE               [ 2] 1729 	ldw x,(x)
      001EA4 13 03            [ 2] 1730 	cpw x,(LAST,sp)  
      001EA6 2F DE            [ 1] 1731 	jrslt list_loop
      001EA8                       1732 list_exit:
      001EA8 55 00 03 00 01   [ 1] 1733 	mov in,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001EAD AE 16 B8         [ 2] 1734 	ldw x,#pad 
      001EB0 CF 00 04         [ 2] 1735 	ldw basicptr,x 
      001EB3                       1736 	_drop VSIZE 
      001EB3 5B 06            [ 2]    1     addw sp,#VSIZE 
      001EB5 CD 1D 8B         [ 4] 1737 	call program_info 
      001EB8 81               [ 4] 1738 	ret
                                   1739 
                                   1740 
                                   1741 ;--------------------------
                                   1742 ; BASIC: EDIT 
                                   1743 ;  copy program in FLASH 
                                   1744 ;  to RAM for edition 
                                   1745 ;-------------------------
      001EB9                       1746 edit:
      001EB9 CD 26 C5         [ 4] 1747 	call qsign 
      001EBC 27 07            [ 1] 1748 	jreq 1$ 
      001EBE AE 1E E6         [ 2] 1749 	ldw x,#NOT_SAVED 
      001EC1 CD 09 5A         [ 4] 1750 	call puts 
      001EC4 81               [ 4] 1751 	ret 
      001EC5                       1752 1$: 
      001EC5 90 AE 35 80      [ 2] 1753 	ldw y,#app_sign ; source address 
      001EC9 CE 35 82         [ 2] 1754     ldw x,app_size  
      001ECC 1C 00 04         [ 2] 1755 	addw x,#4 
      001ECF CF 00 0D         [ 2] 1756 	ldw acc16,x  ; bytes to copy 
      001ED2 AE 00 7C         [ 2] 1757 	ldw x,#rsign ; destination address 
      001ED5 CD 13 B8         [ 4] 1758 	call move  
      001ED8 AE 00 80         [ 2] 1759 	ldw x,#free_ram 
      001EDB CF 00 1A         [ 2] 1760 	ldw txtbgn,x 
      001EDE 72 BB 00 7E      [ 2] 1761 	addw x,rsize  
      001EE2 CF 00 1C         [ 2] 1762 	ldw txtend,x 
      001EE5 81               [ 4] 1763 	ret 
                                   1764 
      001EE6 4E 6F 20 61 70 70 6C  1765 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1766 
                                   1767 
                                   1768 ;--------------------------
                                   1769 ; decompile line from token list
                                   1770 ; and print it. 
                                   1771 ; input:
                                   1772 ;   A       stop at this position 
                                   1773 ;   X 		pointer at line
                                   1774 ; output:
                                   1775 ;   none 
                                   1776 ;--------------------------	
      001EFD                       1777 prt_basic_line:
      001EFD 90 89            [ 2] 1778 	pushw y 
      001EFF C7 00 03         [ 1] 1779 	ld count,a 
      001F02 E6 02            [ 1] 1780 	ld a,(2,x)
      001F04 C1 00 03         [ 1] 1781 	cp a,count 
      001F07 2A 03            [ 1] 1782 	jrpl 1$ 
      001F09 C7 00 03         [ 1] 1783 	ld count,a 
      001F0C CF 00 04         [ 2] 1784 1$:	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001F0F 90 AE 16 68      [ 2] 1785 	ldw y,#tib  
      001F13 CD 11 B0         [ 4] 1786 	call decompile 
      001F16 CD 09 5A         [ 4] 1787 	call puts 
      001F19 A6 0D            [ 1] 1788 	ld a,#CR 
      001F1B CD 08 FD         [ 4] 1789 	call putc 
      001F1E 90 85            [ 2] 1790 	popw y 
      001F20 81               [ 4] 1791 	ret 
                                   1792 
                                   1793 
                                   1794 
                                   1795 ;---------------------------------
                                   1796 ; BASIC: PRINT|? arg_list 
                                   1797 ; print values from argument list
                                   1798 ;----------------------------------
                           000001  1799 	CCOMMA=1
                           000001  1800 	VSIZE=1
      001F21                       1801 print:
      001F21                       1802 	_vars VSIZE 
      001F21 52 01            [ 2]    1     sub sp,#VSIZE 
      001F23                       1803 reset_comma:
      001F23 0F 01            [ 1] 1804 	clr (CCOMMA,sp)
      001F25                       1805 prt_loop:
      001F25 CD 17 47         [ 4] 1806 	call next_token
      001F28 A1 02            [ 1] 1807 	cp a,#CMD_END 
      001F2A 25 5E            [ 1] 1808 	jrult print_exit ; colon or end of line 
      001F2C A1 02            [ 1] 1809 	cp a,#TK_QSTR
      001F2E 27 12            [ 1] 1810 	jreq 1$
      001F30 A1 04            [ 1] 1811 	cp a,#TK_CHAR 
      001F32 27 1B            [ 1] 1812 	jreq 2$ 
      001F34 A1 82            [ 1] 1813 	cp a,#TK_CFUNC 
      001F36 27 1F            [ 1] 1814 	jreq 3$
      001F38 A1 08            [ 1] 1815 	cp a,#TK_COMMA 
      001F3A 27 24            [ 1] 1816 	jreq 4$
      001F3C A1 09            [ 1] 1817 	cp a,#TK_SHARP 
      001F3E 27 24            [ 1] 1818 	jreq 5$
      001F40 20 37            [ 2] 1819 	jra 7$ 
      001F42                       1820 1$:	; print string 
      001F42 CD 09 5A         [ 4] 1821 	call puts
      001F45 5C               [ 1] 1822 	incw x
      001F46 72 B0 00 04      [ 2] 1823 	subw x,basicptr 
      001F4A CF 00 00         [ 2] 1824 	ldw in.w,x  
      001F4D 20 D4            [ 2] 1825 	jra reset_comma
      001F4F                       1826 2$:	; print character 
      001F4F CD 17 97         [ 4] 1827 	call get_char 
      001F52 CD 08 FD         [ 4] 1828 	call putc 
      001F55 20 CC            [ 2] 1829 	jra reset_comma 
      001F57                       1830 3$: ; print character function value  	
      001F57 CD 17 61         [ 4] 1831 	call get_code_addr 
      001F5A FD               [ 4] 1832 	call (x)
      001F5B CD 08 FD         [ 4] 1833 	call putc
      001F5E 20 C3            [ 2] 1834 	jra reset_comma 
      001F60                       1835 4$: ; set comma state 
      001F60 03 01            [ 1] 1836 	cpl (CCOMMA,sp)
      001F62 20 C1            [ 2] 1837 	jra prt_loop   
      001F64                       1838 5$: ; # character must be followed by an integer   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001F64 CD 17 47         [ 4] 1839 	call next_token
      001F67 A1 84            [ 1] 1840 	cp a,#TK_INTGR 
      001F69 27 03            [ 1] 1841 	jreq 6$
      001F6B CC 16 48         [ 2] 1842 	jp syntax_error 
      001F6E                       1843 6$: ; set tab width
      001F6E CD 17 87         [ 4] 1844 	call get_int24 
      001F71 9F               [ 1] 1845 	ld a,xl 
      001F72 A4 0F            [ 1] 1846 	and a,#15 
      001F74 C7 00 22         [ 1] 1847 	ld tab_width,a 
      001F77 20 AA            [ 2] 1848 	jra reset_comma 
      001F79                       1849 7$:	
      001F79                       1850 	_unget_token 
      001F79 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F7E CD 1A 38         [ 4] 1851 	call expression  
      001F81 A1 84            [ 1] 1852 	cp a,#TK_INTGR 
      001F83 26 05            [ 1] 1853 	jrne print_exit 
      001F85 CD 17 BB         [ 4] 1854     call print_top
      001F88 20 99            [ 2] 1855 	jra reset_comma 
      001F8A                       1856 print_exit:
      001F8A 0D 01            [ 1] 1857 	tnz (CCOMMA,sp)
      001F8C 26 05            [ 1] 1858 	jrne 9$
      001F8E A6 0D            [ 1] 1859 	ld a,#CR 
      001F90 CD 08 FD         [ 4] 1860     call putc 
      001F93                       1861 9$:	_drop VSIZE 
      001F93 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F95 81               [ 4] 1862 	ret 
                                   1863 
                                   1864 ;----------------------
                                   1865 ; 'save_context' and
                                   1866 ; 'rest_context' must be 
                                   1867 ; called at the same 
                                   1868 ; call stack depth 
                                   1869 ; i.e. SP must have the 
                                   1870 ; save value at  
                                   1871 ; entry point of both 
                                   1872 ; routine. 
                                   1873 ;---------------------
                           000004  1874 	CTXT_SIZE=4 ; size of saved data 
                                   1875 ;--------------------
                                   1876 ; save current BASIC
                                   1877 ; interpreter context 
                                   1878 ; on stack 
                                   1879 ;--------------------
      001F96                       1880 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001F96                       1881 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001F96                       1882 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001F96                       1883 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001F96                       1884 save_context:
      001F96 CE 00 04         [ 2] 1885 	ldw x,basicptr 
      001F99 1F 03            [ 2] 1886 	ldw (BPTR,sp),x
      001F9B C6 00 01         [ 1] 1887 	ld a,in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001F9E 6B 05            [ 1] 1888 	ld (IN,sp),a
      001FA0 C6 00 03         [ 1] 1889 	ld a,count 
      001FA3 6B 06            [ 1] 1890 	ld (CNT,sp),a  
      001FA5 81               [ 4] 1891 	ret
                                   1892 
                                   1893 ;-----------------------
                                   1894 ; restore previously saved 
                                   1895 ; BASIC interpreter context 
                                   1896 ; from stack 
                                   1897 ;-------------------------
      001FA6                       1898 rest_context:
      001FA6 1E 03            [ 2] 1899 	ldw x,(BPTR,sp)
      001FA8 CF 00 04         [ 2] 1900 	ldw basicptr,x 
      001FAB 7B 05            [ 1] 1901 	ld a,(IN,sp)
      001FAD C7 00 01         [ 1] 1902 	ld in,a
      001FB0 7B 06            [ 1] 1903 	ld a,(CNT,sp)
      001FB2 C7 00 03         [ 1] 1904 	ld count,a  
      001FB5 81               [ 4] 1905 	ret
                                   1906 
                                   1907 
                                   1908 
                                   1909 ;------------------------------------------
                                   1910 ; BASIC: INPUT [string]var[,[string]var]
                                   1911 ; input value in variables 
                                   1912 ; [string] optionally can be used as prompt 
                                   1913 ;-----------------------------------------
                           000001  1914 	CX_BPTR=1
                           000003  1915 	CX_IN=3
                           000004  1916 	CX_CNT=4
                           000005  1917 	SKIP=5
                           000005  1918 	VSIZE=5
      001FB6                       1919 input_var:
      001FB6 90 89            [ 2] 1920 	pushw y 
      001FB8                       1921 	_vars VSIZE 
      001FB8 52 05            [ 2]    1     sub sp,#VSIZE 
      001FBA                       1922 input_loop:
      001FBA 0F 05            [ 1] 1923 	clr (SKIP,sp)
      001FBC CD 17 47         [ 4] 1924 	call next_token 
      001FBF A1 02            [ 1] 1925 	cp a,#TK_QSTR 
      001FC1 26 10            [ 1] 1926 	jrne 1$ 
      001FC3 CD 09 5A         [ 4] 1927 	call puts 
      001FC6 5C               [ 1] 1928 	incw x 
      001FC7 72 B0 00 04      [ 2] 1929 	subw x,basicptr 
      001FCB CF 00 00         [ 2] 1930 	ldw in.w,x 
      001FCE 03 05            [ 1] 1931 	cpl (SKIP,sp)
      001FD0 CD 17 47         [ 4] 1932 	call next_token 
      001FD3 A1 85            [ 1] 1933 1$: cp a,#TK_VAR  
      001FD5 27 03            [ 1] 1934 	jreq 2$ 
      001FD7 CC 16 48         [ 2] 1935 	jp syntax_error
      001FDA CD 17 7D         [ 4] 1936 2$:	call get_addr
      001FDD CF 00 18         [ 2] 1937 	ldw ptr16,x 
      001FE0 0D 05            [ 1] 1938 	tnz (SKIP,sp)
      001FE2 26 06            [ 1] 1939 	jrne 21$ 
      001FE4 CD 11 85         [ 4] 1940 	call var_name 
      001FE7 CD 08 FD         [ 4] 1941 	call putc   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001FEA                       1942 21$:
      001FEA A6 3A            [ 1] 1943 	ld a,#':
      001FEC CD 08 FD         [ 4] 1944 	call putc 
      001FEF CD 1F 96         [ 4] 1945 	call save_context 
      001FF2 72 5F 00 03      [ 1] 1946 	clr count  
      001FF6 CD 0A 5F         [ 4] 1947 	call readln 
      001FF9 AE 16 68         [ 2] 1948 	ldw x,#tib 
      001FFC 3B 00 03         [ 1] 1949 	push count
      001FFF 4B 00            [ 1] 1950 	push #0 
      002001 72 FB 01         [ 2] 1951 	addw x,(1,sp)
      002004 5C               [ 1] 1952 	incw x 
      002005                       1953 	_drop 2 
      002005 5B 02            [ 2]    1     addw sp,#2 
      002007 72 5F 00 01      [ 1] 1954 	clr in 
      00200B CD 0E C7         [ 4] 1955 	call get_token
      00200E A1 84            [ 1] 1956 	cp a,#TK_INTGR
      002010 27 12            [ 1] 1957 	jreq 3$ 
      002012 A1 11            [ 1] 1958 	cp a,#TK_MINUS
      002014 CD 0E C7         [ 4] 1959 	call get_token 
      002017 A1 84            [ 1] 1960 	cp a,#TK_INTGR 
      002019 27 06            [ 1] 1961 	jreq 22$
      00201B CD 1F A6         [ 4] 1962 	call rest_context 
      00201E CC 16 48         [ 2] 1963 	jp syntax_error
      002021                       1964 22$:
      002021 CD 01 D1         [ 4] 1965 	call neg_acc24	
      002024                       1966 3$: 
      002024 C6 00 0C         [ 1] 1967 	ld a,acc24 
      002027 CE 00 0D         [ 2] 1968 	ldw x,acc16 
      00202A 72 C7 00 18      [ 4] 1969 	ld [ptr16],a
      00202E 72 5C 00 19      [ 1] 1970 	inc ptr8  
      002032 72 CF 00 18      [ 5] 1971 	ldw [ptr16],x 
      002036 CD 1F A6         [ 4] 1972 	call rest_context
      002039 CD 17 47         [ 4] 1973 	call next_token 
      00203C A1 08            [ 1] 1974 	cp a,#TK_COMMA
      00203E 26 03            [ 1] 1975 	jrne 4$ 
      002040 CC 1F BA         [ 2] 1976 	jp input_loop
      002043                       1977 4$:
      002043 A1 00            [ 1] 1978 	cp a,#TK_NONE 
      002045 27 07            [ 1] 1979 	jreq input_exit  
      002047 A1 0A            [ 1] 1980 	cp a,#TK_COLON 
      002049 27 03            [ 1] 1981     jreq input_exit 
      00204B CC 16 48         [ 2] 1982 	jp syntax_error 
      00204E                       1983 input_exit:
      00204E                       1984 	_drop VSIZE 
      00204E 5B 05            [ 2]    1     addw sp,#VSIZE 
      002050 90 85            [ 2] 1985 	popw y 
      002052 81               [ 4] 1986 	ret 
                                   1987 
                                   1988 
                                   1989 ;---------------------
                                   1990 ; BASIC: REM | ' 
                                   1991 ; skip comment to end of line 
                                   1992 ;---------------------- 
      002053                       1993 remark::
      002053 55 00 03 00 01   [ 1] 1994 	mov in,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002058 81               [ 4] 1995  	ret 
                                   1996 
                                   1997 
                                   1998 ;---------------------
                                   1999 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2000 ; read in loop 'addr'  
                                   2001 ; apply & 'mask' to value 
                                   2002 ; loop while result==0.  
                                   2003 ; 'xor_mask' is used to 
                                   2004 ; invert the wait logic.
                                   2005 ; i.e. loop while not 0.
                                   2006 ;---------------------
                           000001  2007 	XMASK=1 
                           000002  2008 	MASK=2
                           000003  2009 	ADDR=3
                           000004  2010 	VSIZE=4
      002059                       2011 wait: 
      002059                       2012 	_vars VSIZE
      002059 52 04            [ 2]    1     sub sp,#VSIZE 
      00205B 0F 01            [ 1] 2013 	clr (XMASK,sp) 
      00205D CD 19 01         [ 4] 2014 	call arg_list 
      002060 A1 02            [ 1] 2015 	cp a,#2
      002062 24 03            [ 1] 2016 	jruge 0$
      002064 CC 16 48         [ 2] 2017 	jp syntax_error 
      002067 A1 03            [ 1] 2018 0$:	cp a,#3
      002069 25 0C            [ 1] 2019 	jrult 1$
      00206B                       2020 	_xpop  ; xor mask 
      00206B 90 F6            [ 1]    1     ld a,(y)
      00206D 93               [ 1]    2     ldw x,y 
      00206E EE 01            [ 2]    3     ldw x,(1,x)
      002070 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002074 9F               [ 1] 2021 	ld a,xl 
      002075 6B 01            [ 1] 2022 	ld (XMASK,sp),a 
      002077                       2023 1$: _xpop ; mask
      002077 90 F6            [ 1]    1     ld a,(y)
      002079 93               [ 1]    2     ldw x,y 
      00207A EE 01            [ 2]    3     ldw x,(1,x)
      00207C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002080 9F               [ 1] 2024     ld a,xl  
      002081 6B 02            [ 1] 2025 	ld (MASK,sp),a 
      002083                       2026 	_xpop ; address 
      002083 90 F6            [ 1]    1     ld a,(y)
      002085 93               [ 1]    2     ldw x,y 
      002086 EE 01            [ 2]    3     ldw x,(1,x)
      002088 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00208C F6               [ 1] 2027 2$:	ld a,(x)
      00208D 14 02            [ 1] 2028 	and a,(MASK,sp)
      00208F 18 01            [ 1] 2029 	xor a,(XMASK,sp)
      002091 27 F9            [ 1] 2030 	jreq 2$ 
      002093                       2031 	_drop VSIZE 
      002093 5B 04            [ 2]    1     addw sp,#VSIZE 
      002095 81               [ 4] 2032 	ret 
                                   2033 
                                   2034 ;---------------------
                                   2035 ; BASIC: BSET addr,mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   2036 ; set bits at 'addr' corresponding 
                                   2037 ; to those of 'mask' that are at 1.
                                   2038 ; arguments:
                                   2039 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2040 ;   mask        mask|addr
                                   2041 ; output:
                                   2042 ;	none 
                                   2043 ;--------------------------
      002096                       2044 bit_set:
      002096 CD 19 01         [ 4] 2045 	call arg_list 
      002099 A1 02            [ 1] 2046 	cp a,#2	 
      00209B 27 03            [ 1] 2047 	jreq 1$ 
      00209D CC 16 48         [ 2] 2048 	jp syntax_error
      0020A0                       2049 1$: 
      0020A0                       2050 	_xpop ; mask 
      0020A0 90 F6            [ 1]    1     ld a,(y)
      0020A2 93               [ 1]    2     ldw x,y 
      0020A3 EE 01            [ 2]    3     ldw x,(1,x)
      0020A5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020A9 9F               [ 1] 2051 	ld a,xl
      0020AA 88               [ 1] 2052 	push a  
      0020AB                       2053 	_xpop ; addr  
      0020AB 90 F6            [ 1]    1     ld a,(y)
      0020AD 93               [ 1]    2     ldw x,y 
      0020AE EE 01            [ 2]    3     ldw x,(1,x)
      0020B0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020B4 84               [ 1] 2054 	pop a 
      0020B5 FA               [ 1] 2055 	or a,(x)
      0020B6 F7               [ 1] 2056 	ld (x),a
      0020B7 81               [ 4] 2057 	ret 
                                   2058 
                                   2059 ;---------------------
                                   2060 ; BASIC: BRES addr,mask
                                   2061 ; reset bits at 'addr' corresponding 
                                   2062 ; to those of 'mask' that are at 1.
                                   2063 ; arguments:
                                   2064 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2065 ;   mask	    ~mask&*addr  
                                   2066 ; output:
                                   2067 ;	none 
                                   2068 ;--------------------------
      0020B8                       2069 bit_reset:
      0020B8 CD 19 01         [ 4] 2070 	call arg_list 
      0020BB A1 02            [ 1] 2071 	cp a,#2  
      0020BD 27 03            [ 1] 2072 	jreq 1$ 
      0020BF CC 16 48         [ 2] 2073 	jp syntax_error
      0020C2                       2074 1$: 
      0020C2                       2075 	_xpop ; mask 
      0020C2 90 F6            [ 1]    1     ld a,(y)
      0020C4 93               [ 1]    2     ldw x,y 
      0020C5 EE 01            [ 2]    3     ldw x,(1,x)
      0020C7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020CB 9F               [ 1] 2076 	ld a,xl 
      0020CC 43               [ 1] 2077 	cpl a
      0020CD 88               [ 1] 2078 	push a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0020CE                       2079 	_xpop ; addr  
      0020CE 90 F6            [ 1]    1     ld a,(y)
      0020D0 93               [ 1]    2     ldw x,y 
      0020D1 EE 01            [ 2]    3     ldw x,(1,x)
      0020D3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020D7 84               [ 1] 2080 	pop a 
      0020D8 F4               [ 1] 2081 	and a,(x)
      0020D9 F7               [ 1] 2082 	ld (x),a 
      0020DA 81               [ 4] 2083 	ret 
                                   2084 
                                   2085 ;---------------------
                                   2086 ; BASIC: BTOGL addr,mask
                                   2087 ; toggle bits at 'addr' corresponding 
                                   2088 ; to those of 'mask' that are at 1.
                                   2089 ; arguments:
                                   2090 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2091 ;   mask	    mask^*addr  
                                   2092 ; output:
                                   2093 ;	none 
                                   2094 ;--------------------------
      0020DB                       2095 bit_toggle:
      0020DB CD 19 01         [ 4] 2096 	call arg_list 
      0020DE A1 02            [ 1] 2097 	cp a,#2 
      0020E0 27 03            [ 1] 2098 	jreq 1$ 
      0020E2 CC 16 48         [ 2] 2099 	jp syntax_error
      0020E5                       2100 1$: _xpop ; mask 
      0020E5 90 F6            [ 1]    1     ld a,(y)
      0020E7 93               [ 1]    2     ldw x,y 
      0020E8 EE 01            [ 2]    3     ldw x,(1,x)
      0020EA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020EE 9F               [ 1] 2101 	ld a,xl
      0020EF 88               [ 1] 2102 	push a 
      0020F0                       2103 	_xpop  ; addr  
      0020F0 90 F6            [ 1]    1     ld a,(y)
      0020F2 93               [ 1]    2     ldw x,y 
      0020F3 EE 01            [ 2]    3     ldw x,(1,x)
      0020F5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020F9 84               [ 1] 2104 	pop a 
      0020FA F8               [ 1] 2105 	xor a,(x)
      0020FB F7               [ 1] 2106 	ld (x),a 
      0020FC 81               [ 4] 2107 	ret 
                                   2108 
                                   2109 
                                   2110 ;---------------------
                                   2111 ; BASIC: BTEST(addr,bit)
                                   2112 ; return bit value at 'addr' 
                                   2113 ; bit is in range {0..7}.
                                   2114 ; arguments:
                                   2115 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2116 ;   bit 	    bit position {0..7}  
                                   2117 ; output:
                                   2118 ;	A:X       bit value  
                                   2119 ;--------------------------
      0020FD                       2120 bit_test:
      0020FD CD 18 FC         [ 4] 2121 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002100 A1 02            [ 1] 2122 	cp a,#2
      002102 27 03            [ 1] 2123 	jreq 0$
      002104 CC 16 48         [ 2] 2124 	jp syntax_error
      002107                       2125 0$:	
      002107                       2126 	_xpop 
      002107 90 F6            [ 1]    1     ld a,(y)
      002109 93               [ 1]    2     ldw x,y 
      00210A EE 01            [ 2]    3     ldw x,(1,x)
      00210C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002110 9F               [ 1] 2127 	ld a,xl 
      002111 A4 07            [ 1] 2128 	and a,#7
      002113 88               [ 1] 2129 	push a   
      002114 A6 01            [ 1] 2130 	ld a,#1 
      002116 0D 01            [ 1] 2131 1$: tnz (1,sp)
      002118 27 05            [ 1] 2132 	jreq 2$
      00211A 48               [ 1] 2133 	sll a 
      00211B 0A 01            [ 1] 2134 	dec (1,sp)
      00211D 20 F7            [ 2] 2135 	jra 1$
      00211F 6B 01            [ 1] 2136 2$: ld (1,sp),a  
      002121                       2137 	_xpop ; address  
      002121 90 F6            [ 1]    1     ld a,(y)
      002123 93               [ 1]    2     ldw x,y 
      002124 EE 01            [ 2]    3     ldw x,(1,x)
      002126 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00212A 84               [ 1] 2138 	pop a 
      00212B F4               [ 1] 2139 	and a,(x)
      00212C 27 02            [ 1] 2140 	jreq 3$
      00212E A6 01            [ 1] 2141 	ld a,#1 
      002130 5F               [ 1] 2142 3$:	clrw x 
      002131 97               [ 1] 2143 	ld xl,a
      002132 4F               [ 1] 2144 	clr a  
      002133 81               [ 4] 2145 	ret
                                   2146 
                                   2147 ;--------------------
                                   2148 ; BASIC: POKE addr,byte
                                   2149 ; put a byte at addr 
                                   2150 ;--------------------
      002134                       2151 poke:
      002134 CD 19 01         [ 4] 2152 	call arg_list 
      002137 A1 02            [ 1] 2153 	cp a,#2
      002139 27 03            [ 1] 2154 	jreq 1$
      00213B CC 16 48         [ 2] 2155 	jp syntax_error
      00213E                       2156 1$:	
      00213E                       2157 	_xpop ; byte   
      00213E 90 F6            [ 1]    1     ld a,(y)
      002140 93               [ 1]    2     ldw x,y 
      002141 EE 01            [ 2]    3     ldw x,(1,x)
      002143 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002147 9F               [ 1] 2158     ld a,xl 
      002148 88               [ 1] 2159 	push a 
      002149                       2160 	_xpop ; address 
      002149 90 F6            [ 1]    1     ld a,(y)
      00214B 93               [ 1]    2     ldw x,y 
      00214C EE 01            [ 2]    3     ldw x,(1,x)
      00214E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002152 84               [ 1] 2161 	pop a 
      002153 F7               [ 1] 2162 	ld (x),a 
      002154 81               [ 4] 2163 	ret 
                                   2164 
                                   2165 ;-----------------------
                                   2166 ; BASIC: PEEK(addr)
                                   2167 ; get the byte at addr 
                                   2168 ; input:
                                   2169 ;	none 
                                   2170 ; output:
                                   2171 ;	X 		value 
                                   2172 ;-----------------------
      002155                       2173 peek:
      002155 CD 18 FC         [ 4] 2174 	call func_args
      002158 A1 01            [ 1] 2175 	cp a,#1 
      00215A 27 03            [ 1] 2176 	jreq 1$
      00215C CC 16 48         [ 2] 2177 	jp syntax_error
      00215F                       2178 1$: _xpop ; address  
      00215F 90 F6            [ 1]    1     ld a,(y)
      002161 93               [ 1]    2     ldw x,y 
      002162 EE 01            [ 2]    3     ldw x,(1,x)
      002164 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002168 F6               [ 1] 2179 	ld a,(x)
      002169 5F               [ 1] 2180 	clrw x 
      00216A 97               [ 1] 2181 	ld xl,a 
      00216B 4F               [ 1] 2182 	clr a 
      00216C 81               [ 4] 2183 	ret 
                                   2184 
                                   2185 ;---------------------------
                                   2186 ; BASIC IF expr : instructions
                                   2187 ; evaluate expr and if true 
                                   2188 ; execute instructions on same line. 
                                   2189 ;----------------------------
      00216D                       2190 if: 
      00216D CD 1A 79         [ 4] 2191 	call relation 
      002170 A1 84            [ 1] 2192 	cp a,#TK_INTGR
      002172 27 03            [ 1] 2193 	jreq 1$ 
      002174 CC 16 48         [ 2] 2194 	jp syntax_error
      002177                       2195 1$:	_xpop 
      002177 90 F6            [ 1]    1     ld a,(y)
      002179 93               [ 1]    2     ldw x,y 
      00217A EE 01            [ 2]    3     ldw x,(1,x)
      00217C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002180 5D               [ 2] 2196 	tnzw x 
      002181 26 0A            [ 1] 2197 	jrne 9$ 
                                   2198 ;skip to next line
      002183 55 00 03 00 01   [ 1] 2199 	mov in,count
      002188                       2200 	_drop 2 
      002188 5B 02            [ 2]    1     addw sp,#2 
      00218A CC 16 F9         [ 2] 2201 	jp next_line
      00218D 81               [ 4] 2202 9$:	ret 
                                   2203 
                                   2204 ;------------------------
                                   2205 ; BASIC: FOR var=expr 
                                   2206 ; set variable to expression 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                                   2207 ; leave variable address 
                                   2208 ; on stack and set
                                   2209 ; FLOOP bit in 'flags'
                                   2210 ;-----------------
                           000001  2211 	RETL1=1 ; return address  
                           000003  2212 	FSTEP=3  ; variable increment, int16
                           000005  2213 	LIMIT=5 ; loop limit, int24  
                           000008  2214 	CVAR=8   ; control variable 
                           00000A  2215 	INW=10   ;  in.w saved
                           00000C  2216 	BPTR=12 ; baseptr saved
                           00000C  2217 	VSIZE=12  
      00218E                       2218 for: ; { -- var_addr }
      00218E 85               [ 2] 2219 	popw x ; call return address 
      00218F                       2220 	_vars VSIZE 
      00218F 52 0C            [ 2]    1     sub sp,#VSIZE 
      002191 89               [ 2] 2221 	pushw x  ; RETL1 
      002192 A6 85            [ 1] 2222 	ld a,#TK_VAR 
      002194 CD 18 EF         [ 4] 2223 	call expect
      002197 CD 17 7D         [ 4] 2224 	call get_addr
      00219A 1F 08            [ 2] 2225 	ldw (CVAR,sp),x  ; control variable 
      00219C CD 1B C4         [ 4] 2226 	call let_eval 
      00219F 72 14 00 21      [ 1] 2227 	bset flags,#FLOOP 
      0021A3 CD 17 47         [ 4] 2228 	call next_token 
      0021A6 A1 80            [ 1] 2229 	cp a,#TK_CMD 
      0021A8 27 03            [ 1] 2230 	jreq 1$
      0021AA CC 16 48         [ 2] 2231 	jp syntax_error
      0021AD                       2232 1$:  
      0021AD CD 17 61         [ 4] 2233 	call get_code_addr
      0021B0 A3 21 B8         [ 2] 2234 	cpw x,#to   
      0021B3 27 03            [ 1] 2235 	jreq to
      0021B5 CC 16 48         [ 2] 2236 	jp syntax_error 
                                   2237 
                                   2238 ;-----------------------------------
                                   2239 ; BASIC: TO expr 
                                   2240 ; second part of FOR loop initilization
                                   2241 ; leave limit on stack and set 
                                   2242 ; FTO bit in 'flags'
                                   2243 ;-----------------------------------
      0021B8                       2244 to: ; { var_addr -- var_addr limit step }
      0021B8 72 04 00 21 03   [ 2] 2245 	btjt flags,#FLOOP,1$
      0021BD CC 16 48         [ 2] 2246 	jp syntax_error
      0021C0 CD 1A 38         [ 4] 2247 1$: call expression   
      0021C3 A1 84            [ 1] 2248 	cp a,#TK_INTGR 
      0021C5 27 03            [ 1] 2249 	jreq 2$ 
      0021C7 CC 16 48         [ 2] 2250 	jp syntax_error
      0021CA                       2251 2$: _xpop
      0021CA 90 F6            [ 1]    1     ld a,(y)
      0021CC 93               [ 1]    2     ldw x,y 
      0021CD EE 01            [ 2]    3     ldw x,(1,x)
      0021CF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D3 6B 05            [ 1] 2252 	ld (LIMIT,sp),a 
      0021D5 1F 06            [ 2] 2253 	ldw (LIMIT+1,sp),x
      0021D7 CD 17 47         [ 4] 2254 	call next_token
      0021DA A1 00            [ 1] 2255 	cp a,#TK_NONE  
      0021DC 27 11            [ 1] 2256 	jreq 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021DE A1 80            [ 1] 2257 	cp a,#TK_CMD
      0021E0 26 08            [ 1] 2258 	jrne 3$
      0021E2 CD 17 61         [ 4] 2259 	call get_code_addr
      0021E5 A3 21 F6         [ 2] 2260 	cpw x,#step 
      0021E8 27 0C            [ 1] 2261 	jreq step
      0021EA                       2262 3$:	
      0021EA                       2263 	_unget_token   	 
      0021EA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0021EF                       2264 4$:	
      0021EF AE 00 01         [ 2] 2265 	ldw x,#1   ; default step  
      0021F2 1F 03            [ 2] 2266 	ldw (FSTEP,sp),x 
      0021F4 20 1D            [ 2] 2267 	jra store_loop_addr 
                                   2268 
                                   2269 
                                   2270 ;----------------------------------
                                   2271 ; BASIC: STEP expr 
                                   2272 ; optional third par of FOR loop
                                   2273 ; initialization. 	
                                   2274 ;------------------------------------
      0021F6                       2275 step: ; {var limit -- var limit step}
      0021F6 72 04 00 21 03   [ 2] 2276 	btjt flags,#FLOOP,1$
      0021FB CC 16 48         [ 2] 2277 	jp syntax_error
      0021FE CD 1A 38         [ 4] 2278 1$: call expression 
      002201 A1 84            [ 1] 2279 	cp a,#TK_INTGR
      002203 27 03            [ 1] 2280 	jreq 2$
      002205 CC 16 48         [ 2] 2281 	jp syntax_error
      002208                       2282 2$:	
      002208                       2283 	_xpop 
      002208 90 F6            [ 1]    1     ld a,(y)
      00220A 93               [ 1]    2     ldw x,y 
      00220B EE 01            [ 2]    3     ldw x,(1,x)
      00220D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002211 1F 03            [ 2] 2284 	ldw (FSTEP,sp),x ; step
                                   2285 ; leave loop back entry point on cstack 
                                   2286 ; cstack is 1 call deep from interpreter
      002213                       2287 store_loop_addr:
      002213 CE 00 04         [ 2] 2288 	ldw x,basicptr
      002216 C6 00 01         [ 1] 2289 	ld a,in 
      002219 C1 00 03         [ 1] 2290 	cp a,count 
      00221C 2B 0C            [ 1] 2291 	jrmi 3$
      00221E 72 BB 00 00      [ 2] 2292 	addw x,in.w 
      002222 1F 0C            [ 2] 2293 	ldw (BPTR,sp),x 
      002224 AE 00 03         [ 2] 2294 	ldw x,#3 
      002227 1F 0A            [ 2] 2295 	ldw (INW,sp),x 
      002229 81               [ 4] 2296 	ret 
      00222A 1F 0C            [ 2] 2297 3$:	ldw (BPTR,sp),x 
      00222C CE 00 00         [ 2] 2298 	ldw x,in.w 
      00222F 1F 0A            [ 2] 2299 	ldw (INW,sp),x   
      002231 72 15 00 21      [ 1] 2300 	bres flags,#FLOOP 
      002235 72 5C 00 1E      [ 1] 2301 	inc loop_depth  
      002239 81               [ 4] 2302 	ret 
                                   2303 
                                   2304 ;--------------------------------
                                   2305 ; BASIC: NEXT var 
                                   2306 ; FOR loop control 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   2307 ; increment variable with step 
                                   2308 ; and compare with limit 
                                   2309 ; loop if threshold not crossed.
                                   2310 ; else stack. 
                                   2311 ; and decrement 'loop_depth' 
                                   2312 ;--------------------------------
      00223A                       2313 next: ; {var limit step retl1 -- [var limit step ] }
      00223A 72 5D 00 1E      [ 1] 2314 	tnz loop_depth 
      00223E 26 03            [ 1] 2315 	jrne 1$ 
      002240 CC 16 48         [ 2] 2316 	jp syntax_error 
      002243                       2317 1$: 
      002243 A6 85            [ 1] 2318 	ld a,#TK_VAR 
      002245 CD 18 EF         [ 4] 2319 	call expect
      002248 CD 17 7D         [ 4] 2320 	call get_addr 
                                   2321 ; check for good variable after NEXT 	 
      00224B 13 08            [ 2] 2322 	cpw x,(CVAR,sp)
      00224D 27 03            [ 1] 2323 	jreq 2$  
      00224F CC 16 48         [ 2] 2324 	jp syntax_error ; not the good one 
      002252                       2325 2$: 
      002252 CF 00 18         [ 2] 2326 	ldw ptr16,x 
                                   2327 	; increment variable 
      002255 F6               [ 1] 2328 	ld a,(x)
      002256 EE 01            [ 2] 2329 	ldw x,(1,x)  ; get var value 
      002258 72 FB 03         [ 2] 2330 	addw x,(FSTEP,sp) ; var+step 
      00225B A9 00            [ 1] 2331 	adc a,#0  
      00225D 72 C7 00 18      [ 4] 2332 	ld [ptr16],a
      002261 72 5C 00 19      [ 1] 2333 	inc ptr8  
      002265 72 CF 00 18      [ 5] 2334 	ldw [ptr16],x 
      002269 C7 00 0C         [ 1] 2335 	ld acc24,a 
      00226C CF 00 0D         [ 2] 2336 	ldw acc16,x 
      00226F 7B 05            [ 1] 2337 	ld a,(LIMIT,sp)
      002271 1E 06            [ 2] 2338 	ldw x,(LIMIT+1,sp)
      002273 72 B0 00 0D      [ 2] 2339 	subw x,acc16 
      002277 C2 00 0C         [ 1] 2340 	sbc a,acc24
      00227A 8A               [ 1] 2341 	push cc  
                                   2342 ; check sign of STEP  
      00227B A6 80            [ 1] 2343 	ld a,#0x80
      00227D 15 03            [ 1] 2344 	bcp a,(FSTEP,sp)
      00227F 2A 05            [ 1] 2345 	jrpl 4$
                                   2346 ;negative step
      002281 86               [ 1] 2347 	pop cc 
      002282 2F 1A            [ 1] 2348 	jrslt loop_done
      002284 20 03            [ 2] 2349 	jra loop_back 
      002286                       2350 4$: ; positive step
      002286 86               [ 1] 2351 	pop cc 
      002287 2C 15            [ 1] 2352 	jrsgt loop_done
      002289                       2353 loop_back:
      002289 1E 0C            [ 2] 2354 	ldw x,(BPTR,sp)
      00228B CF 00 04         [ 2] 2355 	ldw basicptr,x 
      00228E 72 01 00 21 05   [ 2] 2356 	btjf flags,#FRUN,1$ 
      002293 E6 02            [ 1] 2357 	ld a,(2,x)
      002295 C7 00 03         [ 1] 2358 	ld count,a
      002298 1E 0A            [ 2] 2359 1$:	ldw x,(INW,sp)
      00229A CF 00 00         [ 2] 2360 	ldw in.w,x 
      00229D 81               [ 4] 2361 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      00229E                       2362 loop_done:
                                   2363 	; remove loop data from stack  
      00229E 85               [ 2] 2364 	popw x
      00229F                       2365 	_drop VSIZE 
      00229F 5B 0C            [ 2]    1     addw sp,#VSIZE 
      0022A1 72 5A 00 1E      [ 1] 2366 	dec loop_depth 
      0022A5 FC               [ 2] 2367 	jp (x)
                                   2368 
                                   2369 ;----------------------------
                                   2370 ; called by goto/gosub
                                   2371 ; to get target line number 
                                   2372 ; output:
                                   2373 ;    x    line address 
                                   2374 ;---------------------------
      0022A6                       2375 get_target_line:
      0022A6 CD 17 47         [ 4] 2376 	call next_token  
      0022A9 A1 84            [ 1] 2377 	cp a,#TK_INTGR
      0022AB 27 07            [ 1] 2378 	jreq get_target_line_addr 
      0022AD A1 03            [ 1] 2379 	cp a,#TK_LABEL 
      0022AF 27 26            [ 1] 2380 	jreq look_target_symbol 
      0022B1 CC 16 48         [ 2] 2381 	jp syntax_error
                                   2382 ; the target is a line number 
                                   2383 ; search it. 
      0022B4                       2384 get_target_line_addr:
      0022B4 90 89            [ 2] 2385 	pushw y 
      0022B6 CD 17 87         [ 4] 2386 	call get_int24 ; line # 
      0022B9 4F               [ 1] 2387 	clr a
      0022BA 90 CE 00 04      [ 2] 2388 	ldw y,basicptr 
      0022BE 90 FE            [ 2] 2389 	ldw y,(y)
      0022C0 90 89            [ 2] 2390 	pushw y 
      0022C2 13 01            [ 2] 2391 	cpw x,(1,sp)
      0022C4                       2392 	_drop 2  
      0022C4 5B 02            [ 2]    1     addw sp,#2 
      0022C6 25 01            [ 1] 2393 	jrult 11$
      0022C8 4C               [ 1] 2394 	inc a 
      0022C9                       2395 11$: ; scan program for this line# 	
      0022C9 CD 0C 42         [ 4] 2396 	call search_lineno  
      0022CC 5D               [ 2] 2397 	tnzw x ; 0| line# address 
      0022CD 26 05            [ 1] 2398 	jrne 2$ 
      0022CF A6 05            [ 1] 2399 	ld a,#ERR_NO_LINE 
      0022D1 CC 16 4A         [ 2] 2400 	jp tb_error 
      0022D4 90 85            [ 2] 2401 2$:	popw y  
      0022D6 81               [ 4] 2402 	ret 
                                   2403 
                                   2404 ; the GOTO|GOSUB target is a symbol.
      0022D7                       2405 look_target_symbol:
      0022D7 90 89            [ 2] 2406 	pushw y 
      0022D9 89               [ 2] 2407 	pushw x 
      0022DA 72 5F 00 0D      [ 1] 2408 	clr acc16 
      0022DE 90 CE 00 1A      [ 2] 2409 	ldw y,txtbgn 
      0022E2 90 E6 03         [ 1] 2410 1$:	ld a,(3,y) ; first TK_ID on line 
      0022E5 A1 03            [ 1] 2411 	cp a,#TK_LABEL 
      0022E7 27 15            [ 1] 2412 	jreq 3$ 
      0022E9 90 E6 02         [ 1] 2413 2$:	ld a,(2,y); line length 
      0022EC C7 00 0E         [ 1] 2414 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0022EF 72 B9 00 0D      [ 2] 2415 	addw y,acc16 ;point to next line 
      0022F3 90 C3 00 1C      [ 2] 2416 	cpw y,txtend 
      0022F7 25 E9            [ 1] 2417 	jrult 1$
      0022F9 A6 0A            [ 1] 2418 	ld a,#ERR_BAD_VALUE
      0022FB CC 16 4A         [ 2] 2419 	jp tb_error 
      0022FE                       2420 3$: ; found a TK_LABEL 
                                   2421 	; compare with GOTO|GOSUB target 
      0022FE 90 89            [ 2] 2422 	pushw y ; line address 
      002300 72 A9 00 04      [ 2] 2423 	addw y,#4 ; label string 
      002304 1E 03            [ 2] 2424 	ldw x,(3,sp) ; target string 
      002306 CD 13 97         [ 4] 2425 	call strcmp
      002309 26 04            [ 1] 2426 	jrne 4$
      00230B 90 85            [ 2] 2427 	popw y 
      00230D 20 DA            [ 2] 2428 	jra 2$ 
      00230F                       2429 4$: ; target found 
      00230F 85               [ 2] 2430 	popw x ;  address line target  
      002310                       2431 	_drop 2 ; target string 
      002310 5B 02            [ 2]    1     addw sp,#2 
      002312 90 85            [ 2] 2432 	popw y 
      002314 81               [ 4] 2433 	ret
                                   2434 
                                   2435 
                                   2436 ;--------------------------------
                                   2437 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2438 ; selective goto or gosub 
                                   2439 ;--------------------------------
      002315                       2440 cmd_on:
      002315 72 00 00 21 05   [ 2] 2441 	btjt flags,#FRUN,0$ 
      00231A A6 06            [ 1] 2442 	ld a,#ERR_RUN_ONLY
      00231C CC 16 4A         [ 2] 2443 	jp tb_error 
      00231F CD 1A 38         [ 4] 2444 0$:	call expression 
      002322 A1 84            [ 1] 2445 	cp a,#TK_INTGR
      002324 27 03            [ 1] 2446 	jreq 1$
      002326 CC 16 48         [ 2] 2447 	jp syntax_error
      002329                       2448 1$: _xpop
      002329 90 F6            [ 1]    1     ld a,(y)
      00232B 93               [ 1]    2     ldw x,y 
      00232C EE 01            [ 2]    3     ldw x,(1,x)
      00232E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2449 ; the selector is the element indice 
                                   2450 ; in the list of arguments. {1..#elements} 
      002332 9F               [ 1] 2451 	ld a,xl ; keep only bits 7..0
      002333 27 62            [ 1] 2452 	jreq 9$ ; element # begin at 1. 
      002335 88               [ 1] 2453 	push a  ; selector  
      002336 CD 17 47         [ 4] 2454 	call next_token
      002339 A1 80            [ 1] 2455 	cp a,#TK_CMD 
      00233B 27 03            [ 1] 2456 	jreq 2$ 
      00233D CC 16 48         [ 2] 2457 	jp syntax_error 
      002340 CD 17 61         [ 4] 2458 2$: call get_code_addr
                                   2459 ;; must be a GOTO or GOSUB 
      002343 A3 23 A1         [ 2] 2460 	cpw x,#goto 
      002346 27 08            [ 1] 2461 	jreq 4$
      002348 A3 23 BB         [ 2] 2462 	cpw x,#gosub 
      00234B 27 03            [ 1] 2463 	jreq 4$ 
      00234D CC 16 48         [ 2] 2464 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002350                       2465 4$: 
      002350 84               [ 1] 2466 	pop a 
      002351 89               [ 2] 2467 	pushw x ; save routine address 	
      002352 88               [ 1] 2468 	push a  ; selector  
      002353                       2469 5$: ; skip elements in list until selector==0 
      002353 0A 01            [ 1] 2470 	dec (1,sp)
      002355 27 26            [ 1] 2471 	jreq 6$ 
                                   2472 ; can be a line# or a label 
      002357 CD 17 47         [ 4] 2473 	call next_token 
      00235A A1 84            [ 1] 2474 	cp a,#TK_INTGR 
      00235C 27 07            [ 1] 2475 	jreq 52$
      00235E A1 03            [ 1] 2476 	cp a,#TK_LABEL 
      002360 27 0D            [ 1] 2477 	jreq 54$
      002362 CC 16 48         [ 2] 2478 	jp syntax_error 
      002365                       2479 52$: ; got a line number 
      002365 C6 00 01         [ 1] 2480 	ld a,in ; skip over int24 value 
      002368 AB 03            [ 1] 2481 	add a,#CELL_SIZE ; integer size  
      00236A C7 00 01         [ 1] 2482 	ld in,a 
      00236D 20 03            [ 2] 2483 	jra 56$
      00236F CD 17 6E         [ 4] 2484 54$: call skip_string ; skip over label 	
      002372                       2485 56$: ; if another element comma present 
      002372 CD 17 47         [ 4] 2486 	call next_token
      002375 A1 08            [ 1] 2487 	cp a,#TK_COMMA 
      002377 27 DA            [ 1] 2488 	jreq 5$ 
                                   2489 ; arg list exhausted, selector to big 
                                   2490 ; continue execution on next line 
      002379                       2491 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002379 5B 03            [ 2]    1     addw sp,#3 
      00237B 20 1A            [ 2] 2492 	jra 9$
      00237D                       2493 6$: ;at selected position  
      00237D                       2494 	_drop 1 ; discard selector
      00237D 5B 01            [ 2]    1     addw sp,#1 
                                   2495 ; here only the routine address 
                                   2496 ; of GOTO|GOSUB is on stack 
      00237F CD 22 A6         [ 4] 2497     call get_target_line
      002382 CF 00 18         [ 2] 2498 	ldw ptr16,x 	
      002385 55 00 03 00 01   [ 1] 2499 	mov in,count ; move to end of line  
      00238A 85               [ 2] 2500 	popw x ; cmd address, GOTO||GOSUB 
      00238B A3 23 A1         [ 2] 2501 	cpw x,#goto 
      00238E 26 05            [ 1] 2502 	jrne 7$ 
      002390 CE 00 18         [ 2] 2503 	ldw x,ptr16 
      002393 20 19            [ 2] 2504 	jra jp_to_target
      002395                       2505 7$: 
      002395 20 35            [ 2] 2506 	jra gosub_2 ; target in ptr16 
      002397                       2507 9$: ; expr out of range skip to end of line
                                   2508     ; this will force a fall to next line  
      002397 55 00 03 00 01   [ 1] 2509 	mov in,count
      00239C                       2510 	_drop 2
      00239C 5B 02            [ 2]    1     addw sp,#2 
      00239E CC 16 F9         [ 2] 2511 	jp next_line  
                                   2512 
                                   2513 
                                   2514 ;------------------------
                                   2515 ; BASIC: GOTO line# 
                                   2516 ; jump to line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



                                   2517 ; here cstack is 2 call deep from interpreter 
                                   2518 ;------------------------
      0023A1                       2519 goto:
      0023A1 72 00 00 21 05   [ 2] 2520 	btjt flags,#FRUN,goto_1  
      0023A6 A6 06            [ 1] 2521 	ld a,#ERR_RUN_ONLY
      0023A8 CC 16 4A         [ 2] 2522 	jp tb_error 
      0023AB                       2523 goto_1:
      0023AB CD 22 A6         [ 4] 2524 	call get_target_line
      0023AE                       2525 jp_to_target:
      0023AE CF 00 04         [ 2] 2526 	ldw basicptr,x 
      0023B1 E6 02            [ 1] 2527 	ld a,(2,x)
      0023B3 C7 00 03         [ 1] 2528 	ld count,a 
      0023B6 35 03 00 01      [ 1] 2529 	mov in,#3 
      0023BA 81               [ 4] 2530 	ret 
                                   2531 
                                   2532 
                                   2533 ;--------------------
                                   2534 ; BASIC: GOSUB line#
                                   2535 ; basic subroutine call
                                   2536 ; actual line# and basicptr 
                                   2537 ; are saved on cstack
                                   2538 ; here cstack is 2 call deep from interpreter 
                                   2539 ;--------------------
                           000001  2540 	TARGET=1   ; target address 
                           000003  2541 	RET_ADDR=3 ; subroutine return address 
                           000005  2542 	RET_BPTR=5 ; basicptr return point 
                           000007  2543 	RET_INW=7  ; in.w return point 
                           000004  2544 	VSIZE=4  
      0023BB                       2545 gosub:
      0023BB 72 00 00 21 06   [ 2] 2546 	btjt flags,#FRUN,gosub_1 
      0023C0 A6 06            [ 1] 2547 	ld a,#ERR_RUN_ONLY
      0023C2 CC 16 4A         [ 2] 2548 	jp tb_error 
      0023C5 81               [ 4] 2549 	ret 
      0023C6                       2550 gosub_1:
      0023C6 CD 22 A6         [ 4] 2551 	call get_target_line 
      0023C9 CF 00 18         [ 2] 2552 	ldw ptr16,x 
      0023CC                       2553 gosub_2: 
      0023CC 85               [ 2] 2554 	popw x 
      0023CD                       2555 	_vars VSIZE  
      0023CD 52 04            [ 2]    1     sub sp,#VSIZE 
      0023CF 89               [ 2] 2556 	pushw x ; RET_ADDR 
      0023D0 CE 00 18         [ 2] 2557 	ldw x,ptr16 
      0023D3 89               [ 2] 2558 	pushw x ; TARGET
                                   2559 ; save BASIC subroutine return point.   
      0023D4 CE 00 04         [ 2] 2560 	ldw x,basicptr
      0023D7 1F 05            [ 2] 2561 	ldw (RET_BPTR,sp),x 
      0023D9 CE 00 00         [ 2] 2562 	ldw x,in.w 
      0023DC 1F 07            [ 2] 2563 	ldw (RET_INW,sp),x
      0023DE 85               [ 2] 2564 	popw x 
      0023DF 20 CD            [ 2] 2565 	jra jp_to_target
                                   2566 
                                   2567 ;------------------------
                                   2568 ; BASIC: RETURN 
                                   2569 ; exit from BASIC subroutine 
                                   2570 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                           000003  2571 	RET_BPTR=3 ; basicptr return point 
                           000005  2572 	RET_INW=5  ; in.w return point 
                           000004  2573 	VSIZE=4  
      0023E1                       2574 return:
      0023E1 72 00 00 21 05   [ 2] 2575 	btjt flags,#FRUN,0$ 
      0023E6 A6 06            [ 1] 2576 	ld a,#ERR_RUN_ONLY
      0023E8 CC 16 4A         [ 2] 2577 	jp tb_error 
      0023EB                       2578 0$:	
      0023EB 1E 03            [ 2] 2579 	ldw x,(RET_ADDR,sp) 
      0023ED CF 00 04         [ 2] 2580 	ldw basicptr,x
      0023F0 E6 02            [ 1] 2581 	ld a,(2,x)
      0023F2 C7 00 03         [ 1] 2582 	ld count,a  
      0023F5 1E 05            [ 2] 2583 	ldw x,(RET_INW,sp)
      0023F7 CF 00 00         [ 2] 2584 	ldw in.w,x 
      0023FA 85               [ 2] 2585 	popw x 
      0023FB                       2586 	_drop VSIZE 
      0023FB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0023FD 89               [ 2] 2587 	pushw x
      0023FE 81               [ 4] 2588 	ret  
                                   2589 
                                   2590 ;----------------------------------
                                   2591 ; BASIC: RUN
                                   2592 ; run BASIC program in RAM
                                   2593 ;----------------------------------- 
      0023FF                       2594 run: 
      0023FF 72 01 00 21 02   [ 2] 2595 	btjf flags,#FRUN,0$  
      002404 4F               [ 1] 2596 	clr a 
      002405 81               [ 4] 2597 	ret
      002406                       2598 0$: 
      002406 72 09 00 21 12   [ 2] 2599 	btjf flags,#FBREAK,1$
      00240B                       2600 	_drop 2 
      00240B 5B 02            [ 2]    1     addw sp,#2 
      00240D CD 1F A6         [ 4] 2601 	call rest_context
      002410                       2602 	_drop CTXT_SIZE 
      002410 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002412 72 19 00 21      [ 1] 2603 	bres flags,#FBREAK 
      002416 72 10 00 21      [ 1] 2604 	bset flags,#FRUN 
      00241A CC 16 F1         [ 2] 2605 	jp interpreter 
      00241D CE 00 1A         [ 2] 2606 1$:	ldw x,txtbgn
      002420 C3 00 1C         [ 2] 2607 	cpw x,txtend 
      002423 2B 0C            [ 1] 2608 	jrmi run_it 
      002425 AE 15 D7         [ 2] 2609 	ldw x,#err_no_prog
      002428 CD 09 5A         [ 4] 2610 	call puts 
      00242B 55 00 03 00 01   [ 1] 2611 	mov in,count
      002430 81               [ 4] 2612 	ret 
      002431                       2613 run_it:	 
      002431                       2614 	_drop 2 ; drop return address 
      002431 5B 02            [ 2]    1     addw sp,#2 
      002433                       2615 run_it_02: 
      002433 CD 1B A3         [ 4] 2616     call ubound 
      002436 CD 13 FC         [ 4] 2617 	call clear_vars 
                                   2618 ; clear data pointer 
      002439 5F               [ 1] 2619 	clrw x 
      00243A CF 00 06         [ 2] 2620 	ldw data_ptr,x 
      00243D 72 5F 00 08      [ 1] 2621 	clr data_ofs 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002441 72 5F 00 09      [ 1] 2622 	clr data_len 
                                   2623 ; initialize BASIC pointer 
      002445 CE 00 1A         [ 2] 2624 	ldw x,txtbgn 
      002448 CF 00 04         [ 2] 2625 	ldw basicptr,x 
      00244B E6 02            [ 1] 2626 	ld a,(2,x)
      00244D C7 00 03         [ 1] 2627 	ld count,a
      002450 35 03 00 01      [ 1] 2628 	mov in,#3	
      002454 72 10 00 21      [ 1] 2629 	bset flags,#FRUN 
      002458 CC 16 F1         [ 2] 2630 	jp interpreter 
                                   2631 
                                   2632 
                                   2633 ;----------------------
                                   2634 ; BASIC: END
                                   2635 ; end running program
                                   2636 ;---------------------- 
      00245B                       2637 cmd_end: 
                                   2638 ; clean stack 
      00245B AE 17 FF         [ 2] 2639 	ldw x,#STACK_EMPTY
      00245E 94               [ 1] 2640 	ldw sp,x 
      00245F CC 16 D2         [ 2] 2641 	jp warm_start
                                   2642 
                                   2643 ;---------------------------
                                   2644 ; BASIC: GET var 
                                   2645 ; receive a key in variable 
                                   2646 ; don't wait 
                                   2647 ;---------------------------
      002462                       2648 cmd_get:
      002462 CD 17 47         [ 4] 2649 	call next_token 
      002465 A1 85            [ 1] 2650 	cp a,#TK_VAR 
      002467 27 03            [ 1] 2651 	jreq 0$
      002469 CC 16 48         [ 2] 2652 	jp syntax_error 
      00246C CD 17 7D         [ 4] 2653 0$: call get_addr 
      00246F CF 00 18         [ 2] 2654 	ldw ptr16,x 
      002472 CD 09 06         [ 4] 2655 	call qgetc 
      002475 27 03            [ 1] 2656 	jreq 2$
      002477 CD 09 0D         [ 4] 2657 	call getc  
      00247A 72 3F 00 18      [ 4] 2658 2$: clr [ptr16]
      00247E 72 5C 00 19      [ 1] 2659 	inc ptr8 
      002482 72 3F 00 18      [ 4] 2660 	clr [ptr16]
      002486 72 5C 00 19      [ 1] 2661 	inc ptr8 
      00248A 72 C7 00 18      [ 4] 2662 	ld [ptr16],a 
      00248E 81               [ 4] 2663 	ret 
                                   2664 
                                   2665 
                                   2666 ;-----------------
                                   2667 ; 1 Khz beep 
                                   2668 ;-----------------
      00248F                       2669 beep_1khz:: 
      00248F AE 00 64         [ 2] 2670 	ldw x,#100
      002492 90 AE 03 E8      [ 2] 2671 	ldw y,#1000
      002496 20 20            [ 2] 2672 	jra beep
                                   2673 
                                   2674 ;-----------------------
                                   2675 ; BASIC: TONE expr1,expr2
                                   2676 ; used TIMER2 channel 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



                                   2677 ; to produce a tone 
                                   2678 ; arguments:
                                   2679 ;    expr1   frequency 
                                   2680 ;    expr2   duration msec.
                                   2681 ;---------------------------
      002498                       2682 tone:
      002498 CD 19 01         [ 4] 2683 	call arg_list 
      00249B A1 02            [ 1] 2684 	cp a,#2 
      00249D 27 03            [ 1] 2685 	jreq 1$
      00249F CC 16 48         [ 2] 2686 	jp syntax_error 
      0024A2                       2687 1$: 
      0024A2                       2688 	_xpop 
      0024A2 90 F6            [ 1]    1     ld a,(y)
      0024A4 93               [ 1]    2     ldw x,y 
      0024A5 EE 01            [ 2]    3     ldw x,(1,x)
      0024A7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0024AB 89               [ 2] 2689 	pushw x ; duration 
      0024AC                       2690 	_xpop ; frequency
      0024AC 90 F6            [ 1]    1     ld a,(y)
      0024AE 93               [ 1]    2     ldw x,y 
      0024AF EE 01            [ 2]    3     ldw x,(1,x)
      0024B1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0024B5 90 93            [ 1] 2691 	ldw y,x ; frequency 
      0024B7 85               [ 2] 2692 	popw x  ; duration 
      0024B8                       2693 beep:  
      0024B8 89               [ 2] 2694 	pushw x 
      0024B9 AE F4 24         [ 2] 2695 	ldw x,#TIM2_CLK_FREQ
      0024BC 65               [ 2] 2696 	divw x,y ; cntr=Fclk/freq 
                                   2697 ; round to nearest integer 
      0024BD 90 A3 7A 12      [ 2] 2698 	cpw y,#TIM2_CLK_FREQ/2
      0024C1 2B 01            [ 1] 2699 	jrmi 2$
      0024C3 5C               [ 1] 2700 	incw x 
      0024C4                       2701 2$:	 
      0024C4 9E               [ 1] 2702 	ld a,xh 
      0024C5 C7 53 0D         [ 1] 2703 	ld TIM2_ARRH,a 
      0024C8 9F               [ 1] 2704 	ld a,xl 
      0024C9 C7 53 0E         [ 1] 2705 	ld TIM2_ARRL,a 
                                   2706 ; 50% duty cycle 
      0024CC 8C               [ 1] 2707 	ccf 
      0024CD 56               [ 2] 2708 	rrcw x 
      0024CE 9E               [ 1] 2709 	ld a,xh 
      0024CF C7 53 0F         [ 1] 2710 	ld TIM2_CCR1H,a 
      0024D2 9F               [ 1] 2711 	ld a,xl
      0024D3 C7 53 10         [ 1] 2712 	ld TIM2_CCR1L,a
      0024D6 72 10 53 08      [ 1] 2713 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0024DA 72 10 53 00      [ 1] 2714 	bset TIM2_CR1,#TIM2_CR1_CEN
      0024DE 72 10 53 04      [ 1] 2715 	bset TIM2_EGR,#TIM2_EGR_UG
      0024E2 85               [ 2] 2716 	popw x 
      0024E3 CD 29 3F         [ 4] 2717 	call pause02
      0024E6 72 11 53 08      [ 1] 2718 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0024EA 72 11 53 00      [ 1] 2719 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0024EE 81               [ 4] 2720 	ret 
                                   2721 
                                   2722 ;-------------------------------
                                   2723 ; BASIC: ADCON 0|1 [,divisor]  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                   2724 ; disable/enanble ADC 
                                   2725 ;-------------------------------
                           000003  2726 	ONOFF=3 
                           000001  2727 	DIVSOR=1
                           000004  2728 	VSIZE=4 
      0024EF                       2729 power_adc:
      0024EF CD 19 01         [ 4] 2730 	call arg_list 
      0024F2 A1 02            [ 1] 2731 	cp a,#2	
      0024F4 27 12            [ 1] 2732 	jreq 1$
      0024F6 A1 01            [ 1] 2733 	cp a,#1 
      0024F8 27 03            [ 1] 2734 	jreq 0$ 
      0024FA CC 16 48         [ 2] 2735 	jp syntax_error 
      0024FD 4F               [ 1] 2736 0$:	clr a 
      0024FE 5F               [ 1] 2737 	clrw x
      0024FF                       2738 	_xpush   ; divisor  
      0024FF 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002503 90 F7            [ 1]    2     ld (y),a 
      002505 90 EF 01         [ 2]    3     ldw (1,y),x 
      002508                       2739 1$: _at_next 
      002508 90 E6 03         [ 1]    1     ld a,(3,y)
      00250B 93               [ 1]    2     ldw x,y 
      00250C EE 04            [ 2]    3     ldw x,(4,x)
      00250E 5D               [ 2] 2740 	tnzw x 
      00250F 27 25            [ 1] 2741 	jreq 2$ 
      002511                       2742 	_xpop
      002511 90 F6            [ 1]    1     ld a,(y)
      002513 93               [ 1]    2     ldw x,y 
      002514 EE 01            [ 2]    3     ldw x,(1,x)
      002516 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00251A                       2743 	_xdrop  
      00251A 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      00251E 9F               [ 1] 2744 	ld a,xl
      00251F A4 07            [ 1] 2745 	and a,#7
      002521 4E               [ 1] 2746 	swap a 
      002522 C7 54 01         [ 1] 2747 	ld ADC_CR1,a
      002525 72 16 50 CA      [ 1] 2748 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002529 72 10 54 01      [ 1] 2749 	bset ADC_CR1,#ADC_CR1_ADON 
      00252D                       2750 	_usec_dly 7 
      00252D AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002530 5A               [ 2]    2     decw x
      002531 9D               [ 1]    3     nop 
      002532 26 FA            [ 1]    4     jrne .-4
      002534 20 08            [ 2] 2751 	jra 3$
      002536 72 11 54 01      [ 1] 2752 2$: bres ADC_CR1,#ADC_CR1_ADON
      00253A 72 17 50 CA      [ 1] 2753 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00253E                       2754 3$:	
      00253E 81               [ 4] 2755 	ret
                                   2756 
                                   2757 ;-----------------------------
                                   2758 ; BASIC: ADCREAD (channel)
                                   2759 ; read adc channel {0..5}
                                   2760 ; output:
                                   2761 ;   A 		TK_INTGR 
                                   2762 ;   X 		value 
                                   2763 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00253F                       2764 analog_read:
      00253F CD 18 FC         [ 4] 2765 	call func_args 
      002542 A1 01            [ 1] 2766 	cp a,#1 
      002544 27 03            [ 1] 2767 	jreq 1$
      002546 CC 16 48         [ 2] 2768 	jp syntax_error
      002549                       2769 1$: _xpop 
      002549 90 F6            [ 1]    1     ld a,(y)
      00254B 93               [ 1]    2     ldw x,y 
      00254C EE 01            [ 2]    3     ldw x,(1,x)
      00254E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002552 A3 00 05         [ 2] 2770 	cpw x,#5 
      002555 23 05            [ 2] 2771 	jrule 2$
      002557 A6 0A            [ 1] 2772 	ld a,#ERR_BAD_VALUE
      002559 CC 16 4A         [ 2] 2773 	jp tb_error 
      00255C 9F               [ 1] 2774 2$: ld a,xl
      00255D C7 00 0E         [ 1] 2775 	ld acc8,a 
      002560 A6 05            [ 1] 2776 	ld a,#5
      002562 C0 00 0E         [ 1] 2777 	sub a,acc8 
      002565 C7 54 00         [ 1] 2778 	ld ADC_CSR,a
      002568 72 16 54 02      [ 1] 2779 	bset ADC_CR2,#ADC_CR2_ALIGN
      00256C 72 10 54 01      [ 1] 2780 	bset ADC_CR1,#ADC_CR1_ADON
      002570 72 0F 54 00 FB   [ 2] 2781 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002575 CE 54 04         [ 2] 2782 	ldw x,ADC_DRH
      002578 A6 84            [ 1] 2783 	ld a,#TK_INTGR
      00257A 81               [ 4] 2784 	ret 
                                   2785 
                                   2786 ;-----------------------
                                   2787 ; BASIC: DREAD(pin)
                                   2788 ; Arduino pins 
                                   2789 ; read state of a digital pin 
                                   2790 ; pin# {0..15}
                                   2791 ; output:
                                   2792 ;    A 		TK_INTGR
                                   2793 ;    X      0|1 
                                   2794 ;-------------------------
                           000001  2795 	PINNO=1
                           000001  2796 	VSIZE=1
      00257B                       2797 digital_read:
      00257B                       2798 	_vars VSIZE 
      00257B 52 01            [ 2]    1     sub sp,#VSIZE 
      00257D CD 18 FC         [ 4] 2799 	call func_args
      002580 A1 01            [ 1] 2800 	cp a,#1
      002582 27 03            [ 1] 2801 	jreq 1$
      002584 CC 16 48         [ 2] 2802 	jp syntax_error
      002587                       2803 1$: _xpop 
      002587 90 F6            [ 1]    1     ld a,(y)
      002589 93               [ 1]    2     ldw x,y 
      00258A EE 01            [ 2]    3     ldw x,(1,x)
      00258C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002590 A3 00 0F         [ 2] 2804 	cpw x,#15 
      002593 23 05            [ 2] 2805 	jrule 2$
      002595 A6 0A            [ 1] 2806 	ld a,#ERR_BAD_VALUE
      002597 CC 16 4A         [ 2] 2807 	jp tb_error 
      00259A CD 2B 16         [ 4] 2808 2$:	call select_pin 
      00259D 6B 01            [ 1] 2809 	ld (PINNO,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00259F E6 01            [ 1] 2810 	ld a,(GPIO_IDR,x)
      0025A1 0D 01            [ 1] 2811 	tnz (PINNO,sp)
      0025A3 27 05            [ 1] 2812 	jreq 8$
      0025A5 44               [ 1] 2813 3$: srl a 
      0025A6 0A 01            [ 1] 2814 	dec (PINNO,sp)
      0025A8 26 FB            [ 1] 2815 	jrne 3$ 
      0025AA A4 01            [ 1] 2816 8$: and a,#1 
      0025AC 5F               [ 1] 2817 	clrw x 
      0025AD 97               [ 1] 2818 	ld xl,a 
      0025AE A6 84            [ 1] 2819 	ld a,#TK_INTGR
      0025B0                       2820 	_drop VSIZE
      0025B0 5B 01            [ 2]    1     addw sp,#VSIZE 
      0025B2 81               [ 4] 2821 	ret
                                   2822 
                                   2823 
                                   2824 ;-----------------------
                                   2825 ; BASIC: DWRITE pin,0|1
                                   2826 ; Arduino pins 
                                   2827 ; write to a digital pin 
                                   2828 ; pin# {0..15}
                                   2829 ; output:
                                   2830 ;    A 		TK_INTGR
                                   2831 ;    X      0|1 
                                   2832 ;-------------------------
                           000001  2833 	PINNO=1
                           000002  2834 	PINVAL=2
                           000002  2835 	VSIZE=2
      0025B3                       2836 digital_write:
      0025B3                       2837 	_vars VSIZE 
      0025B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0025B5 CD 19 01         [ 4] 2838 	call arg_list  
      0025B8 A1 02            [ 1] 2839 	cp a,#2 
      0025BA 27 03            [ 1] 2840 	jreq 1$
      0025BC CC 16 48         [ 2] 2841 	jp syntax_error
      0025BF                       2842 1$: _xpop 
      0025BF 90 F6            [ 1]    1     ld a,(y)
      0025C1 93               [ 1]    2     ldw x,y 
      0025C2 EE 01            [ 2]    3     ldw x,(1,x)
      0025C4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025C8 9F               [ 1] 2843 	ld a,xl 
      0025C9 6B 02            [ 1] 2844 	ld (PINVAL,sp),a
      0025CB                       2845 	_xpop 
      0025CB 90 F6            [ 1]    1     ld a,(y)
      0025CD 93               [ 1]    2     ldw x,y 
      0025CE EE 01            [ 2]    3     ldw x,(1,x)
      0025D0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025D4 A3 00 0F         [ 2] 2846 	cpw x,#15 
      0025D7 23 05            [ 2] 2847 	jrule 2$
      0025D9 A6 0A            [ 1] 2848 	ld a,#ERR_BAD_VALUE
      0025DB CC 16 4A         [ 2] 2849 	jp tb_error 
      0025DE CD 2B 16         [ 4] 2850 2$:	call select_pin 
      0025E1 6B 01            [ 1] 2851 	ld (PINNO,sp),a 
      0025E3 A6 01            [ 1] 2852 	ld a,#1
      0025E5 0D 01            [ 1] 2853 	tnz (PINNO,sp)
      0025E7 27 05            [ 1] 2854 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0025E9 48               [ 1] 2855 3$: sll a
      0025EA 0A 01            [ 1] 2856 	dec (PINNO,sp)
      0025EC 26 FB            [ 1] 2857 	jrne 3$
      0025EE 0D 02            [ 1] 2858 4$: tnz (PINVAL,sp)
      0025F0 26 05            [ 1] 2859 	jrne 5$
      0025F2 43               [ 1] 2860 	cpl a 
      0025F3 E4 00            [ 1] 2861 	and a,(GPIO_ODR,x)
      0025F5 20 02            [ 2] 2862 	jra 8$
      0025F7 EA 00            [ 1] 2863 5$: or a,(GPIO_ODR,x)
      0025F9 E7 00            [ 1] 2864 8$: ld (GPIO_ODR,x),a 
      0025FB                       2865 	_drop VSIZE 
      0025FB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0025FD 81               [ 4] 2866 	ret
                                   2867 
                                   2868 
                                   2869 ;-----------------------
                                   2870 ; BASIC: STOP
                                   2871 ; stop progam execution  
                                   2872 ; without resetting pointers 
                                   2873 ; the program is resumed
                                   2874 ; with RUN 
                                   2875 ;-------------------------
      0025FE                       2876 stop:
      0025FE 72 00 00 21 02   [ 2] 2877 	btjt flags,#FRUN,2$
      002603 4F               [ 1] 2878 	clr a
      002604 81               [ 4] 2879 	ret 
      002605                       2880 2$:	 
                                   2881 ; create space on cstack to save context 
      002605 AE 26 2C         [ 2] 2882 	ldw x,#break_point 
      002608 CD 09 5A         [ 4] 2883 	call puts 
      00260B                       2884 	_drop 2 ;drop return address 
      00260B 5B 02            [ 2]    1     addw sp,#2 
      00260D                       2885 	_vars CTXT_SIZE ; context size 
      00260D 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00260F CD 1F 96         [ 4] 2886 	call save_context 
      002612 AE 16 68         [ 2] 2887 	ldw x,#tib 
      002615 CF 00 04         [ 2] 2888 	ldw basicptr,x
      002618 7F               [ 1] 2889 	clr (x)
      002619 72 5F 00 03      [ 1] 2890 	clr count  
      00261D 5F               [ 1] 2891 	clrw x 
      00261E CF 00 00         [ 2] 2892 	ldw in.w,x
      002621 72 11 00 21      [ 1] 2893 	bres flags,#FRUN 
      002625 72 18 00 21      [ 1] 2894 	bset flags,#FBREAK
      002629 CC 16 F1         [ 2] 2895 	jp interpreter 
      00262C 0A 62 72 65 61 6B 20  2896 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2897 
                                   2898 ;-----------------------
                                   2899 ; BASIC: NEW
                                   2900 ; from command line only 
                                   2901 ; free program memory
                                   2902 ; and clear variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                   2903 ;------------------------
      00264A                       2904 new: 
      00264A 72 01 00 21 01   [ 2] 2905 	btjf flags,#FRUN,0$ 
      00264F 81               [ 4] 2906 	ret 
      002650                       2907 0$:	
      002650 CD 14 A4         [ 4] 2908 	call clear_basic 
      002653 81               [ 4] 2909 	ret 
                                   2910 
                                   2911 ;-----------------------------------
                                   2912 ; BASIC: ERASE \E | \F 
                                   2913 ; erase all block in range from 
                                   2914 ;  'app_space' to FLASH end (0x20000)
                                   2915 ;  or all EEPROM 
                                   2916 ; that contains a non zero byte.  
                                   2917 ;-----------------------------------
                           000001  2918 	LIMIT=1 
                           000003  2919 	VSIZE = 3 
      002654                       2920 erase:
      002654 72 5F 00 17      [ 1] 2921 	clr farptr 
      002658                       2922 	_vars VSIZE 
      002658 52 03            [ 2]    1     sub sp,#VSIZE 
      00265A CD 17 47         [ 4] 2923 	call next_token 
      00265D A1 04            [ 1] 2924 	cp a,#TK_CHAR 
      00265F 27 03            [ 1] 2925 	jreq 0$ 
      002661 CC 16 48         [ 2] 2926 	jp syntax_error
      002664 CD 17 97         [ 4] 2927 0$: call get_char 
      002667 A4 DF            [ 1] 2928 	and a,#0XDF 
      002669 A1 45            [ 1] 2929 	cp a,#'E
      00266B 26 0C            [ 1] 2930 	jrne 1$
      00266D AE 40 00         [ 2] 2931 	ldw x,#EEPROM_BASE 
      002670 CF 00 18         [ 2] 2932 	ldw farptr+1,x 
      002673 AE 47 FF         [ 2] 2933 	ldw x,#EEPROM_END
      002676 4F               [ 1] 2934 	clr a 
      002677 20 15            [ 2] 2935 	jra 3$ 
      002679 A1 46            [ 1] 2936 1$: cp a,#'F 
      00267B 27 06            [ 1] 2937 	jreq 2$
      00267D AE 15 88         [ 2] 2938 	ldw x,#err_bad_value
      002680 CC 16 4A         [ 2] 2939 	jp tb_error
      002683                       2940 2$:
      002683 AE 35 80         [ 2] 2941 	ldw x,#app_sign 
      002686 CF 00 18         [ 2] 2942 	ldw farptr+1,x 
      002689 A6 02            [ 1] 2943 	ld a,#(FLASH_END>>16)&0XFF 
      00268B AE 7F FF         [ 2] 2944 	ldw x,#FLASH_END&0xffff
      00268E                       2945 3$:
      00268E 6B 01            [ 1] 2946 	ld (LIMIT,sp),a 
      002690 1F 02            [ 2] 2947 	ldw (LIMIT+1,sp),x 
                                   2948  ; operation done from RAM
                                   2949  ; copy code to RAM in tib   
      002692 CD 07 00         [ 4] 2950 	call move_erase_to_ram
      002695                       2951 4$:	 
      002695 CD 08 7D         [ 4] 2952     call scan_block 
      002698 27 08            [ 1] 2953 	jreq 5$  ; block already erased 
      00269A A6 45            [ 1] 2954     ld a,#'E 
      00269C CD 08 FD         [ 4] 2955     call putc 
      00269F CD 07 7E         [ 4] 2956 	call block_erase   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   2957 ; this block is clean, next  
      0026A2 AE 00 80         [ 2] 2958 5$:	ldw x,#BLOCK_SIZE
      0026A5 CD 08 6F         [ 4] 2959 	call incr_farptr
                                   2960 ; check limit, 24 bit substraction  	
      0026A8 7B 01            [ 1] 2961 	ld a,(LIMIT,sp)
      0026AA 1E 02            [ 2] 2962 	ldw x,(LIMIT+1,sp)
      0026AC 72 B0 00 18      [ 2] 2963 	subw x,farptr+1
      0026B0 C2 00 17         [ 1] 2964 	sbc a,farptr 
      0026B3 22 E0            [ 1] 2965 	jrugt 4$ 
      0026B5 CD 14 A4         [ 4] 2966 9$: call clear_basic
      0026B8 1E 02            [ 2] 2967 	ldw x,(LIMIT+1,sp)
      0026BA A3 47 FF         [ 2] 2968 	cpw x,#EEPROM_END
      0026BD 26 03            [ 1] 2969 	jrne 10$
      0026BF CD 1C 67         [ 4] 2970 	call func_eefree 
      0026C2                       2971 10$:
      0026C2                       2972 	_drop VSIZE 
      0026C2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0026C4 81               [ 4] 2973 	ret 
                                   2974 	
                                   2975 
                                   2976 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2977 ;  check for application signature 
                                   2978 ; output:
                                   2979 ;   Carry    0 app present 
                                   2980 ;            1 no app installed  
                                   2981 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C5                       2982 qsign: 
      0026C5 CE 35 80         [ 2] 2983 	ldw x,app_sign 
      0026C8 C3 27 85         [ 2] 2984 	cpw x,SIGNATURE ; "BC" 
      0026CB 81               [ 4] 2985 	ret 
                                   2986 
                                   2987 ;--------------------------------------
                                   2988 ;  fill write buffer 
                                   2989 ;  input:
                                   2990 ;    y  point to output buffer 
                                   2991 ;    x  point to source 
                                   2992 ;    a  bytes to write in buffer 
                                   2993 ;  output:
                                   2994 ;    y   += A 
                                   2995 ;    X   += A 
                                   2996 ;    A   0 
                                   2997 ;---------------------------------------
      0026CC                       2998 fill_write_buffer:
      0026CC 88               [ 1] 2999 	push a 
      0026CD 4D               [ 1] 3000 	tnz a 
      0026CE 27 0A            [ 1] 3001 	jreq 9$ 
      0026D0 F6               [ 1] 3002 1$: ld a,(x)
      0026D1 5C               [ 1] 3003 	incw x 
      0026D2 90 F7            [ 1] 3004 	ld (y),a 
      0026D4 90 5C            [ 1] 3005 	incw y 
      0026D6 0A 01            [ 1] 3006 	dec (1,sp) 
      0026D8 26 F6            [ 1] 3007 	jrne 1$ 
      0026DA 84               [ 1] 3008 9$:	pop a 
      0026DB 81               [ 4] 3009     ret 	
                                   3010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



                                   3011 ;--------------------------------------
                                   3012 ;  fill pad buffer with zero 
                                   3013 ;  input:
                                   3014 ;	none 
                                   3015 ;  output:
                                   3016 ;    y     buffer address  
                                   3017 ;--------------------------------------
      0026DC                       3018 clear_block_buffer:
      0026DC 88               [ 1] 3019 	push a 
      0026DD 90 AE 16 B8      [ 2] 3020 	ldw y,#block_buffer 
      0026E1 90 89            [ 2] 3021 	pushw y
      0026E3 A6 80            [ 1] 3022 	ld a,#BLOCK_SIZE   
      0026E5 90 7F            [ 1] 3023 1$:	clr (y)
      0026E7 90 5C            [ 1] 3024 	incw y
      0026E9 4A               [ 1] 3025 	dec a  
      0026EA 26 F9            [ 1] 3026 	jrne 1$ 	
      0026EC 90 85            [ 2] 3027 9$: popw y 
      0026EE 84               [ 1] 3028 	pop a 			
      0026EF 81               [ 4] 3029 	ret 
                                   3030 
                                   3031 
                                   3032 ;---------------------------------------
                                   3033 ; BASIC: SAVE
                                   3034 ; write application from RAM to FLASH
                                   3035 ;--------------------------------------
                           000001  3036 	XTEMP=1
                           000003  3037 	COUNT=3  ; last count bytes written 
                           000004  3038 	CNT_LO=4 ; count low byte 
                           000005  3039 	TOWRITE=5 ; how bytes left to write  
                           000006  3040 	VSIZE=6 
      0026F0                       3041 save_app:
      0026F0 89               [ 2] 3042 	pushw x 
      0026F1 90 89            [ 2] 3043 	pushw y 
      0026F3                       3044 	_vars VSIZE
      0026F3 52 06            [ 2]    1     sub sp,#VSIZE 
      0026F5 CD 26 C5         [ 4] 3045 	call qsign 
      0026F8 26 09            [ 1] 3046 	jrne 1$
      0026FA AE 27 87         [ 2] 3047 	ldw x,#CANT_DO 
      0026FD CD 09 5A         [ 4] 3048 	call puts 
      002700 CC 27 7F         [ 2] 3049 	jp 9$
      002703                       3050 1$: 
      002703 CE 00 1A         [ 2] 3051 	ldw x,txtbgn
      002706 C3 00 1C         [ 2] 3052 	cpw x,txtend 
      002709 25 09            [ 1] 3053 	jrult 2$ 
      00270B AE 27 C9         [ 2] 3054 	ldw x,#NO_APP
      00270E CD 09 5A         [ 4] 3055 	call puts 
      002711 CC 27 7F         [ 2] 3056 	jp 9$
      002714                       3057 2$: 
                                   3058 ; block programming flash
                                   3059 ; must be done from RAM
                                   3060 ; moved in tib  
      002714 CD 07 40         [ 4] 3061 	call move_prg_to_ram
                                   3062 ; initialize farptr 
                                   3063 ; to app_sign address 
      002717 72 5F 00 17      [ 1] 3064 	clr farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00271B AE 35 80         [ 2] 3065 	ldw x,#app_sign 
      00271E CF 00 18         [ 2] 3066 	ldw farptr+1,x
                                   3067 ; initialize local variables 
      002721 CD 1D 83         [ 4] 3068 	call prog_size
      002724 1F 05            [ 2] 3069 	ldw (TOWRITE,sp),x
      002726 0F 03            [ 1] 3070 	clr (COUNT,sp)
                                   3071 ; first bock 
                                   3072 ; containt signature 2 bytes 
                                   3073 ; and size 	2 bytes 
                                   3074 ; use Y as pointer to block_buffer
      002728 CD 26 DC         [ 4] 3075 	call clear_block_buffer ; -- y=*block_buffer	
                                   3076 ; write signature
      00272B CE 27 85         [ 2] 3077 	ldw x,SIGNATURE ; "BC" 
      00272E 90 FF            [ 2] 3078 	ldw (y),x 
      002730 72 A9 00 02      [ 2] 3079 	addw y,#2
      002734 1E 05            [ 2] 3080 	ldw x,(TOWRITE,sp)
      002736 90 FF            [ 2] 3081 	ldw (y),x
      002738 72 A9 00 02      [ 2] 3082 	addw y,#2   
      00273C A6 7C            [ 1] 3083 	ld a,#(BLOCK_SIZE-4)
      00273E 6B 04            [ 1] 3084 	ld (CNT_LO,sp),a 
      002740 A3 00 7C         [ 2] 3085 	cpw x,#(BLOCK_SIZE-4) 
      002743 22 01            [ 1] 3086 	jrugt 3$
      002745 9F               [ 1] 3087 	ld a,xl 
      002746 6B 04            [ 1] 3088 3$:	ld (CNT_LO,sp),a   
      002748 CE 00 1A         [ 2] 3089 	ldw x,txtbgn 
      00274B 1F 01            [ 2] 3090 	ldw (XTEMP,sp),x 
      00274D                       3091 32$: 
      00274D 1E 01            [ 2] 3092 	ldw x,(XTEMP,sp)
      00274F 7B 04            [ 1] 3093 	ld a,(CNT_LO,sp)
      002751 CD 26 CC         [ 4] 3094 	call fill_write_buffer 
      002754 1F 01            [ 2] 3095 	ldw (XTEMP,sp),x 
      002756 AE 16 B8         [ 2] 3096 	ldw x,#block_buffer
      002759 CD 07 5A         [ 4] 3097 	call write_buffer
      00275C AE 00 80         [ 2] 3098 	ldw x,#BLOCK_SIZE 
      00275F CD 08 6F         [ 4] 3099 	call incr_farptr  
                                   3100 ; following blocks 
      002762 1E 01            [ 2] 3101 	ldw x,(XTEMP,sp)
      002764 C3 00 1C         [ 2] 3102 	cpw x,txtend 
      002767 24 16            [ 1] 3103 	jruge 9$ 
      002769 1E 05            [ 2] 3104 	ldw x,(TOWRITE,sp)
      00276B 72 F0 03         [ 2] 3105 	subw x,(COUNT,sp)
      00276E 1F 05            [ 2] 3106 	ldw (TOWRITE,sp),x 
      002770 A6 80            [ 1] 3107 	ld a,#BLOCK_SIZE 
      002772 A3 00 80         [ 2] 3108 	cpw x,#BLOCK_SIZE 
      002775 24 01            [ 1] 3109 	jruge 4$ 
      002777 9F               [ 1] 3110 	ld a,xl 
      002778 6B 04            [ 1] 3111 4$:	ld (CNT_LO,sp),a 
      00277A CD 26 DC         [ 4] 3112 	call clear_block_buffer 
      00277D 20 CE            [ 2] 3113 	jra 32$ 
      00277F                       3114 9$:	_drop VSIZE 
      00277F 5B 06            [ 2]    1     addw sp,#VSIZE 
      002781 90 85            [ 2] 3115     popw y 
      002783 85               [ 2] 3116 	popw x 
      002784 81               [ 4] 3117 	ret 
                                   3118 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3119 
      002785 42 43                 3120 SIGNATURE: .ascii "BC"
      002787 43 61 6E 27 74 20 66  3121 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0027C9 4E 6F 20 61 70 70 6C  3122 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3123 
                                   3124 ;---------------------
                                   3125 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3126 ; write 1 or more byte to FLASH or EEPROM
                                   3127 ; starting at address  
                                   3128 ; input:
                                   3129 ;   expr1  	is address 
                                   3130 ;   expr2,...,exprn   are bytes to write
                                   3131 ; output:
                                   3132 ;   none 
                                   3133 ;---------------------
      0027DF                       3134 write:
      0027DF CD 1A 38         [ 4] 3135 	call expression
      0027E2 A1 84            [ 1] 3136 	cp a,#TK_INTGR 
      0027E4 27 03            [ 1] 3137 	jreq 0$
      0027E6 CC 16 48         [ 2] 3138 	jp syntax_error
      0027E9                       3139 0$: _xpop 
      0027E9 90 F6            [ 1]    1     ld a,(y)
      0027EB 93               [ 1]    2     ldw x,y 
      0027EC EE 01            [ 2]    3     ldw x,(1,x)
      0027EE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027F2 C7 00 17         [ 1] 3140 	ld farptr,a 
      0027F5 CF 00 18         [ 2] 3141 	ldw ptr16,x 
      0027F8                       3142 1$:	
      0027F8 CD 17 47         [ 4] 3143 	call next_token 
      0027FB A1 08            [ 1] 3144 	cp a,#TK_COMMA 
      0027FD 27 02            [ 1] 3145 	jreq 2$ 
      0027FF 20 20            [ 2] 3146 	jra 9$ ; no more data 
      002801 CD 1A 38         [ 4] 3147 2$:	call expression
      002804 A1 84            [ 1] 3148 	cp a,#TK_INTGR
      002806 27 03            [ 1] 3149 	jreq 3$
      002808 CC 16 48         [ 2] 3150 	jp syntax_error
      00280B                       3151 3$:	_xpop 
      00280B 90 F6            [ 1]    1     ld a,(y)
      00280D 93               [ 1]    2     ldw x,y 
      00280E EE 01            [ 2]    3     ldw x,(1,x)
      002810 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002814 9F               [ 1] 3152 	ld a,xl 
      002815 5F               [ 1] 3153 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      002816 CD 07 9F         [ 4] 3154 	call write_byte
      002819 AE 00 01         [ 2] 3155 	ldw x,#1 
      00281C CD 08 6F         [ 4] 3156 	call incr_farptr 
      00281F 20 D7            [ 2] 3157 	jra 1$ 
      002821                       3158 9$:
      002821 81               [ 4] 3159 	ret 
                                   3160 
                                   3161 
                                   3162 ;---------------------
                                   3163 ;BASIC: CHAR(expr)
                                   3164 ; évaluate expression 
                                   3165 ; and take the 7 least 
                                   3166 ; bits as ASCII character
                                   3167 ; output: 
                                   3168 ; 	A char 
                                   3169 ;---------------------
      002822                       3170 char:
      002822 CD 18 FC         [ 4] 3171 	call func_args 
      002825 A1 01            [ 1] 3172 	cp a,#1
      002827 27 03            [ 1] 3173 	jreq 1$
      002829 CC 16 48         [ 2] 3174 	jp syntax_error
      00282C                       3175 1$:	_xpop
      00282C 90 F6            [ 1]    1     ld a,(y)
      00282E 93               [ 1]    2     ldw x,y 
      00282F EE 01            [ 2]    3     ldw x,(1,x)
      002831 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002835 9F               [ 1] 3176 	ld a,xl
      002836 A4 7F            [ 1] 3177 	and a,#0x7f 
      002838 81               [ 4] 3178 	ret
                                   3179 
                                   3180 ;---------------------
                                   3181 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3182 ; extract first character 
                                   3183 ; of string argument 
                                   3184 ; output:
                                   3185 ;    A:X    int24 
                                   3186 ;---------------------
      002839                       3187 ascii:
      002839 A6 06            [ 1] 3188 	ld a,#TK_LPAREN
      00283B CD 18 EF         [ 4] 3189 	call expect 
      00283E CD 17 47         [ 4] 3190 	call next_token 
      002841 A1 02            [ 1] 3191 	cp a,#TK_QSTR 
      002843 27 0E            [ 1] 3192 	jreq 1$
      002845 A1 04            [ 1] 3193 	cp a,#TK_CHAR 
      002847 27 12            [ 1] 3194 	jreq 2$ 
      002849 A1 82            [ 1] 3195 	cp a,#TK_CFUNC 
      00284B 27 03            [ 1] 3196 	jreq 0$
      00284D CC 16 48         [ 2] 3197 	jp syntax_error
      002850                       3198 0$: ; cfunc 
      002850 FD               [ 4] 3199 	call (x)
      002851 20 0B            [ 2] 3200 	jra 3$
      002853                       3201 1$: ; quoted string 
      002853 F6               [ 1] 3202 	ld a,(x)
      002854 88               [ 1] 3203 	push a  
      002855 CD 17 6E         [ 4] 3204 	call skip_string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      002858 84               [ 1] 3205 	pop a  	
      002859 20 03            [ 2] 3206 	jra 3$ 
      00285B                       3207 2$: ; character 
      00285B CD 17 97         [ 4] 3208 	call get_char 
      00285E 5F               [ 1] 3209 3$:	clrw x 
      00285F 02               [ 1] 3210 	rlwa x   
      002860                       3211 4$:	_xpush  
      002860 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002864 90 F7            [ 1]    2     ld (y),a 
      002866 90 EF 01         [ 2]    3     ldw (1,y),x 
      002869 A6 07            [ 1] 3212 	ld a,#TK_RPAREN 
      00286B CD 18 EF         [ 4] 3213 	call expect
      00286E                       3214 9$:	
      00286E                       3215 	_xpop  
      00286E 90 F6            [ 1]    1     ld a,(y)
      002870 93               [ 1]    2     ldw x,y 
      002871 EE 01            [ 2]    3     ldw x,(1,x)
      002873 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002877 81               [ 4] 3216 	ret 
                                   3217 
                                   3218 ;---------------------
                                   3219 ;BASIC: KEY
                                   3220 ; wait for a character 
                                   3221 ; received from STDIN 
                                   3222 ; input:
                                   3223 ;	none 
                                   3224 ; output:
                                   3225 ;	a	 character 
                                   3226 ;---------------------
      002878                       3227 key:
      002878 CD 09 0D         [ 4] 3228 	call getc 
      00287B 81               [ 4] 3229 	ret
                                   3230 
                                   3231 ;----------------------
                                   3232 ; BASIC: QKEY
                                   3233 ; Return true if there 
                                   3234 ; is a character in 
                                   3235 ; waiting in STDIN 
                                   3236 ; input:
                                   3237 ;  none 
                                   3238 ; output:
                                   3239 ;   A     0|-1
                                   3240 ;-----------------------
      00287C                       3241 qkey:: 
      00287C 5F               [ 1] 3242 	clrw x 
      00287D C6 00 2D         [ 1] 3243 	ld a,rx1_head
      002880 C0 00 2E         [ 1] 3244 	sub a,rx1_tail 
      002883 27 03            [ 1] 3245 	jreq 9$ 
      002885 53               [ 2] 3246 	cplw x
      002886 A6 FF            [ 1] 3247 	ld a,#255    
      002888                       3248 9$: 
      002888 81               [ 4] 3249 	ret 
                                   3250 
                                   3251 ;---------------------
                                   3252 ; BASIC: GPIO(expr,reg)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   3253 ; return gpio address 
                                   3254 ; expr {0..8}
                                   3255 ; input:
                                   3256 ;   none 
                                   3257 ; output:
                                   3258 ;   X 		gpio register address
                                   3259 ;----------------------------
                                   3260 ;	N=PORT
                                   3261 ;	T=REG 
      002889                       3262 gpio:
      002889 CD 18 FC         [ 4] 3263 	call func_args 
      00288C A1 02            [ 1] 3264 	cp a,#2
      00288E 27 03            [ 1] 3265 	jreq 1$
      002890 CC 16 48         [ 2] 3266 	jp syntax_error  
      002893                       3267 1$:	_at_next 
      002893 90 E6 03         [ 1]    1     ld a,(3,y)
      002896 93               [ 1]    2     ldw x,y 
      002897 EE 04            [ 2]    3     ldw x,(4,x)
      002899 5D               [ 2] 3268 	tnzw x 
      00289A 2B 23            [ 1] 3269 	jrmi bad_port
      00289C A3 00 09         [ 2] 3270 	cpw x,#9
      00289F 2A 1E            [ 1] 3271 	jrpl bad_port
      0028A1 A6 05            [ 1] 3272 	ld a,#5
      0028A3 42               [ 4] 3273 	mul x,a
      0028A4 1C 50 00         [ 2] 3274 	addw x,#GPIO_BASE 
      0028A7 89               [ 2] 3275 	pushw x 
      0028A8                       3276 	_xpop
      0028A8 90 F6            [ 1]    1     ld a,(y)
      0028AA 93               [ 1]    2     ldw x,y 
      0028AB EE 01            [ 2]    3     ldw x,(1,x)
      0028AD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028B1 72 FB 01         [ 2] 3277 	addw x,(1,sp)
      0028B4                       3278 	_drop 2 
      0028B4 5B 02            [ 2]    1     addw sp,#2 
      0028B6 4F               [ 1] 3279 	clr a 
      0028B7                       3280 	_store_top 	
      0028B7 90 F7            [ 1]    1     ld (y),a 
      0028B9 90 EF 01         [ 2]    2     ldw (1,y),x     
      0028BC A6 84            [ 1] 3281 	ld a,#TK_INTGR
      0028BE 81               [ 4] 3282 	ret
      0028BF                       3283 bad_port:
      0028BF A6 0A            [ 1] 3284 	ld a,#ERR_BAD_VALUE
      0028C1 CC 16 4A         [ 2] 3285 	jp tb_error
                                   3286 
                                   3287 
                                   3288 ;-------------------------
                                   3289 ; BASIC: UFLASH 
                                   3290 ; return free flash address
                                   3291 ; input:
                                   3292 ;  none 
                                   3293 ; output:
                                   3294 ;	A		TK_INTGR
                                   3295 ;   xstack	free address 
                                   3296 ;---------------------------
      0028C4                       3297 uflash:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0028C4 CE 35 80         [ 2] 3298 	ldw x,app_sign
      0028C7 A3 10 93         [ 2] 3299 	cpw x,#4243 ; signature "BC" 
      0028CA 27 08            [ 1] 3300 	jreq 1$
      0028CC CE 35 82         [ 2] 3301 	ldw x,app_size 
      0028CF 1C 35 84         [ 2] 3302 	addw x,#app
      0028D2 20 03            [ 2] 3303 	jra 2$
      0028D4 AE 35 80         [ 2] 3304 1$:	ldw x,#app_space 
      0028D7 4F               [ 1] 3305 2$:	clr a 
      0028D8 81               [ 4] 3306 	ret 
                                   3307 
                                   3308 
                                   3309 ;---------------------
                                   3310 ; BASIC: USR(addr[,arg])
                                   3311 ; execute a function written 
                                   3312 ; in binary code.
                                   3313 ; binary fonction should 
                                   3314 ; return token attribute in A 
                                   3315 ; and value in YL:X. 
                                   3316 ; input:
                                   3317 ;   addr	routine address 
                                   3318 ;   arg 	is an optional argument 
                                   3319 ; output:
                                   3320 ;   A 		token attribute 
                                   3321 ;   xstack  returned value 
                                   3322 ;---------------------
      0028D9                       3323 usr:
      0028D9 89               [ 2] 3324 	pushw x 
      0028DA 90 89            [ 2] 3325 	pushw y 	
      0028DC CD 18 FC         [ 4] 3326 	call func_args 
      0028DF A1 01            [ 1] 3327 	cp a,#1 
      0028E1 27 07            [ 1] 3328 	jreq 1$
      0028E3 A1 02            [ 1] 3329 	cp a,#2
      0028E5 27 03            [ 1] 3330 	jreq 1$  
      0028E7 CC 16 48         [ 2] 3331 	jp syntax_error 
      0028EA 88               [ 1] 3332 1$: push a 
      0028EB                       3333 	_xpop 
      0028EB 90 F6            [ 1]    1     ld a,(y)
      0028ED 93               [ 1]    2     ldw x,y 
      0028EE EE 01            [ 2]    3     ldw x,(1,x)
      0028F0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028F4 90 93            [ 1] 3334 	ldw y,x  ; arg|addr 
      0028F6 84               [ 1] 3335     pop a 
      0028F7 A1 01            [ 1] 3336 	cp a,#1 
      0028F9 27 0A            [ 1] 3337 	jreq 3$
      0028FB                       3338 	_xpop  ; x=code addr  
      0028FB 90 F6            [ 1]    1     ld a,(y)
      0028FD 93               [ 1]    2     ldw x,y 
      0028FE EE 01            [ 2]    3     ldw x,(1,x)
      002900 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002904 51               [ 1] 3339 	exgw x,y ; y=code addr, x=arg 
      002905 90 FD            [ 4] 3340 3$: call (y)
      002907 88               [ 1] 3341 	push a 
      002908 90 9F            [ 1] 3342 	ld a,yl  
      00290A                       3343 	_xpush 
      00290A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      00290E 90 F7            [ 1]    2     ld (y),a 
      002910 90 EF 01         [ 2]    3     ldw (1,y),x 
      002913 84               [ 1] 3344 	pop a 
      002914 90 85            [ 2] 3345 	popw y 
      002916 85               [ 2] 3346 	popw x 
      002917 81               [ 4] 3347 	ret 
                                   3348 
                                   3349 
                                   3350 ;------------------------------
                                   3351 ; BASIC: BYE 
                                   3352 ; halt mcu in its lowest power mode 
                                   3353 ; wait for reset or external interrupt
                                   3354 ; do a cold start on wakeup.
                                   3355 ;------------------------------
      002918                       3356 bye:
      002918 72 0D 52 30 FB   [ 2] 3357 	btjf UART1_SR,#UART_SR_TC,.
      00291D 8E               [10] 3358 	halt
      00291E CC 00 B2         [ 2] 3359 	jp cold_start  
                                   3360 
                                   3361 ;----------------------------------
                                   3362 ; BASIC: SLEEP 
                                   3363 ; halt mcu until reset or external
                                   3364 ; interrupt.
                                   3365 ; Resume progam after SLEEP command
                                   3366 ;----------------------------------
      002921                       3367 sleep:
      002921 72 0D 52 30 FB   [ 2] 3368 	btjf UART1_SR,#UART_SR_TC,.
      002926 72 16 00 21      [ 1] 3369 	bset flags,#FSLEEP
      00292A 8E               [10] 3370 	halt 
      00292B 81               [ 4] 3371 	ret 
                                   3372 
                                   3373 ;-------------------------------
                                   3374 ; BASIC: PAUSE expr 
                                   3375 ; suspend execution for n msec.
                                   3376 ; input:
                                   3377 ;	none
                                   3378 ; output:
                                   3379 ;	none 
                                   3380 ;------------------------------
      00292C                       3381 pause:
      00292C CD 1A 38         [ 4] 3382 	call expression
      00292F A1 84            [ 1] 3383 	cp a,#TK_INTGR
      002931 27 03            [ 1] 3384 	jreq 1$ 
      002933 CC 16 48         [ 2] 3385 	jp syntax_error
      002936                       3386 1$: _xpop 
      002936 90 F6            [ 1]    1     ld a,(y)
      002938 93               [ 1]    2     ldw x,y 
      002939 EE 01            [ 2]    3     ldw x,(1,x)
      00293B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00293F                       3387 pause02:
      00293F CF 00 11         [ 2] 3388 	ldw timer,x 
      002942 CE 00 11         [ 2] 3389 1$: ldw x,timer 
      002945 5D               [ 2] 3390 	tnzw x 
      002946 27 03            [ 1] 3391 	jreq 2$
      002948 8F               [10] 3392 	wfi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002949 26 F7            [ 1] 3393 	jrne 1$
      00294B 4F               [ 1] 3394 2$:	clr a 
      00294C 81               [ 4] 3395 	ret 
                                   3396 
                                   3397 ;------------------------------
                                   3398 ; BASIC: AWU expr
                                   3399 ; halt mcu for 'expr' milliseconds
                                   3400 ; use Auto wakeup peripheral
                                   3401 ; all oscillators stopped except LSI
                                   3402 ; range: 1ms - 511ms
                                   3403 ; input:
                                   3404 ;  none
                                   3405 ; output:
                                   3406 ;  none:
                                   3407 ;------------------------------
      00294D                       3408 awu:
      00294D CD 1A 38         [ 4] 3409   call expression
      002950 A1 84            [ 1] 3410   cp a,#TK_INTGR
      002952 27 03            [ 1] 3411   jreq 1$
      002954 CC 16 48         [ 2] 3412   jp syntax_error
      002957                       3413 1$: _xpop 
      002957 90 F6            [ 1]    1     ld a,(y)
      002959 93               [ 1]    2     ldw x,y 
      00295A EE 01            [ 2]    3     ldw x,(1,x)
      00295C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002960                       3414 awu02:
      002960 A3 14 00         [ 2] 3415   cpw x,#5120
      002963 2B 0C            [ 1] 3416   jrmi 1$ 
      002965 35 0F 50 F2      [ 1] 3417   mov AWU_TBR,#15 
      002969 A6 1E            [ 1] 3418   ld a,#30
      00296B 62               [ 2] 3419   div x,a
      00296C A6 10            [ 1] 3420   ld a,#16
      00296E 62               [ 2] 3421   div x,a 
      00296F 20 1E            [ 2] 3422   jra 4$
      002971                       3423 1$: 
      002971 A3 08 00         [ 2] 3424   cpw x,#2048
      002974 2B 09            [ 1] 3425   jrmi 2$ 
      002976 35 0E 50 F2      [ 1] 3426   mov AWU_TBR,#14
      00297A A6 50            [ 1] 3427   ld a,#80
      00297C 62               [ 2] 3428   div x,a 
      00297D 20 10            [ 2] 3429   jra 4$   
      00297F                       3430 2$:
      00297F 35 07 50 F2      [ 1] 3431   mov AWU_TBR,#7
      002983                       3432 3$:  
                                   3433 ; while X > 64  divide by 2 and increment AWU_TBR 
      002983 A3 00 40         [ 2] 3434   cpw x,#64 
      002986 23 07            [ 2] 3435   jrule 4$ 
      002988 72 5C 50 F2      [ 1] 3436   inc AWU_TBR 
      00298C 54               [ 2] 3437   srlw x 
      00298D 20 F4            [ 2] 3438   jra 3$ 
      00298F                       3439 4$:
      00298F 9F               [ 1] 3440   ld a, xl
      002990 4A               [ 1] 3441   dec a 
      002991 27 01            [ 1] 3442   jreq 5$
      002993 4A               [ 1] 3443   dec a 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002994                       3444 5$: 
      002994 A4 3E            [ 1] 3445   and a,#0x3e 
      002996 C7 50 F1         [ 1] 3446   ld AWU_APR,a 
      002999 72 18 50 F0      [ 1] 3447   bset AWU_CSR,#AWU_CSR_AWUEN
      00299D 8E               [10] 3448   halt 
                                   3449 
      00299E 81               [ 4] 3450   ret 
                                   3451 
                                   3452 ;------------------------------
                                   3453 ; BASIC: TICKS
                                   3454 ; return msec ticks counter value 
                                   3455 ; input:
                                   3456 ; 	none 
                                   3457 ; output:
                                   3458 ;	X 		TK_INTGR
                                   3459 ;-------------------------------
      00299F                       3460 get_ticks:
      00299F CE 00 0F         [ 2] 3461 	ldw x,ticks 
      0029A2 4F               [ 1] 3462 	clr a 
      0029A3                       3463 	_xpush 
      0029A3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0029A7 90 F7            [ 1]    2     ld (y),a 
      0029A9 90 EF 01         [ 2]    3     ldw (1,y),x 
      0029AC A6 84            [ 1] 3464 	ld a,#TK_INTGR
      0029AE 81               [ 4] 3465 	ret 
                                   3466 
                                   3467 ;------------------------------
                                   3468 ; BASIC: ABS(expr)
                                   3469 ; return absolute value of expr.
                                   3470 ; input:
                                   3471 ;   none
                                   3472 ; output:
                                   3473 ;   xstack    positive int24 
                                   3474 ;-------------------------------
      0029AF                       3475 abs:
      0029AF CD 18 FC         [ 4] 3476 	call func_args 
      0029B2 A1 01            [ 1] 3477 	cp a,#1 
      0029B4 27 03            [ 1] 3478 	jreq 0$ 
      0029B6 CC 16 48         [ 2] 3479 	jp syntax_error
      0029B9                       3480 0$:  
      0029B9 CD 01 A3         [ 4] 3481 	call abs24 
      0029BC A6 84            [ 1] 3482     ld a,#TK_INTGR 
      0029BE 81               [ 4] 3483 	ret 
                                   3484 
                                   3485 ;------------------------------
                                   3486 ; BASIC: AND(expr1,expr2)
                                   3487 ; Apply bit AND relation between
                                   3488 ; the 2 arguments, i.e expr1 & expr2 
                                   3489 ; output:
                                   3490 ; 	A 		TK_INTGR
                                   3491 ;   X 		result 
                                   3492 ;------------------------------
      0029BF                       3493 bit_and: ; i1 i2 -- i1 & i2 
      0029BF CD 18 FC         [ 4] 3494 	call func_args 
      0029C2 A1 02            [ 1] 3495 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029C4 27 03            [ 1] 3496 	jreq 1$
      0029C6 CC 16 48         [ 2] 3497 	jp syntax_error 
      0029C9                       3498 1$:	_xpop 
      0029C9 90 F6            [ 1]    1     ld a,(y)
      0029CB 93               [ 1]    2     ldw x,y 
      0029CC EE 01            [ 2]    3     ldw x,(1,x)
      0029CE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029D2 89               [ 2] 3499     pushw x 
      0029D3 88               [ 1] 3500 	push  a 
      0029D4                       3501 	_at_top 
      0029D4 90 F6            [ 1]    1     ld a,(y)
      0029D6 93               [ 1]    2     ldw x,y 
      0029D7 EE 01            [ 2]    3     ldw x,(1,x)
      0029D9 14 01            [ 1] 3502 	and a,(1,sp)
      0029DB 02               [ 1] 3503 	rlwa x 
      0029DC 14 02            [ 1] 3504 	and a,(2,sp)
      0029DE 02               [ 1] 3505 	rlwa x 
      0029DF 14 03            [ 1] 3506 	and a,(3,sp)
      0029E1 02               [ 1] 3507 	rlwa x 
      0029E2                       3508 	_drop 3 
      0029E2 5B 03            [ 2]    1     addw sp,#3 
      0029E4                       3509 	_store_top 
      0029E4 90 F7            [ 1]    1     ld (y),a 
      0029E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029E9 A6 84            [ 1] 3510 	ld a,#TK_INTGR
      0029EB 81               [ 4] 3511 	ret
                                   3512 
                                   3513 ;------------------------------
                                   3514 ; BASIC: OR(expr1,expr2)
                                   3515 ; Apply bit OR relation between
                                   3516 ; the 2 arguments, i.e expr1 | expr2 
                                   3517 ; output:
                                   3518 ; 	A 		TK_INTGR
                                   3519 ;   X 		result 
                                   3520 ;------------------------------
      0029EC                       3521 bit_or:
      0029EC CD 18 FC         [ 4] 3522 	call func_args 
      0029EF A1 02            [ 1] 3523 	cp a,#2
      0029F1 27 03            [ 1] 3524 	jreq 1$
      0029F3 CC 16 48         [ 2] 3525 	jp syntax_error 
      0029F6                       3526 1$:	_xpop 
      0029F6 90 F6            [ 1]    1     ld a,(y)
      0029F8 93               [ 1]    2     ldw x,y 
      0029F9 EE 01            [ 2]    3     ldw x,(1,x)
      0029FB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029FF 89               [ 2] 3527     pushw x 
      002A00 88               [ 1] 3528 	push  a 
      002A01                       3529 	_at_top 
      002A01 90 F6            [ 1]    1     ld a,(y)
      002A03 93               [ 1]    2     ldw x,y 
      002A04 EE 01            [ 2]    3     ldw x,(1,x)
      002A06 1A 01            [ 1] 3530 	or a,(1,sp)
      002A08 90 97            [ 1] 3531 	ld yl,a 
      002A0A 9E               [ 1] 3532 	ld a,xh 
      002A0B 1A 02            [ 1] 3533 	or a,(2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002A0D 95               [ 1] 3534 	ld xh,a 
      002A0E 9F               [ 1] 3535 	ld a,xl 
      002A0F 1A 03            [ 1] 3536 	or a,(3,sp)
      002A11 97               [ 1] 3537 	ld xl,a 
      002A12 90 9F            [ 1] 3538 	ld a,yl 
      002A14                       3539 	_drop 3 
      002A14 5B 03            [ 2]    1     addw sp,#3 
      002A16                       3540 	_store_top 
      002A16 90 F7            [ 1]    1     ld (y),a 
      002A18 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A1B A6 84            [ 1] 3541 	ld a,#TK_INTGR
      002A1D 81               [ 4] 3542 	ret
                                   3543 
                                   3544 ;------------------------------
                                   3545 ; BASIC: XOR(expr1,expr2)
                                   3546 ; Apply bit XOR relation between
                                   3547 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3548 ; output:
                                   3549 ; 	A 		TK_INTGR
                                   3550 ;   X 		result 
                                   3551 ;------------------------------
      002A1E                       3552 bit_xor:
      002A1E CD 18 FC         [ 4] 3553 	call func_args 
      002A21 A1 02            [ 1] 3554 	cp a,#2
      002A23 27 03            [ 1] 3555 	jreq 1$
      002A25 CC 16 48         [ 2] 3556 	jp syntax_error 
      002A28                       3557 1$:	_xpop 
      002A28 90 F6            [ 1]    1     ld a,(y)
      002A2A 93               [ 1]    2     ldw x,y 
      002A2B EE 01            [ 2]    3     ldw x,(1,x)
      002A2D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A31 89               [ 2] 3558     pushw x 
      002A32 88               [ 1] 3559 	push  a 
      002A33                       3560 	_at_top 
      002A33 90 F6            [ 1]    1     ld a,(y)
      002A35 93               [ 1]    2     ldw x,y 
      002A36 EE 01            [ 2]    3     ldw x,(1,x)
      002A38 18 01            [ 1] 3561 	xor a,(1,sp)
      002A3A 90 97            [ 1] 3562 	ld yl,a 
      002A3C 9E               [ 1] 3563 	ld a,xh 
      002A3D 18 02            [ 1] 3564 	xor a,(2,sp)
      002A3F 95               [ 1] 3565 	ld xh,a 
      002A40 9F               [ 1] 3566 	ld a,xl 
      002A41 18 03            [ 1] 3567 	xor a,(3,sp)
      002A43 97               [ 1] 3568 	ld xl,a 
      002A44 90 9F            [ 1] 3569 	ld a,yl 
      002A46                       3570 	_drop 3 
      002A46 5B 03            [ 2]    1     addw sp,#3 
      002A48                       3571 	_store_top 
      002A48 90 F7            [ 1]    1     ld (y),a 
      002A4A 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A4D A6 84            [ 1] 3572 	ld a,#TK_INTGR
      002A4F 81               [ 4] 3573 	ret
                                   3574 
                                   3575 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                                   3576 ; BASIC: LSHIFT(expr1,expr2)
                                   3577 ; logical shift left expr1 by 
                                   3578 ; expr2 bits 
                                   3579 ; output:
                                   3580 ; 	A 		TK_INTGR
                                   3581 ;   X 		result 
                                   3582 ;------------------------------
      002A50                       3583 lshift:
      002A50 CD 18 FC         [ 4] 3584 	call func_args
      002A53 A1 02            [ 1] 3585 	cp a,#2 
      002A55 27 03            [ 1] 3586 	jreq 1$
      002A57 CC 16 48         [ 2] 3587 	jp syntax_error
      002A5A                       3588 1$: _xpop 
      002A5A 90 F6            [ 1]    1     ld a,(y)
      002A5C 93               [ 1]    2     ldw x,y 
      002A5D EE 01            [ 2]    3     ldw x,(1,x)
      002A5F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A63 90 93            [ 1] 3589     ldw y,x    
      002A65                       3590 	_at_top  ; T@ 
      002A65 90 F6            [ 1]    1     ld a,(y)
      002A67 93               [ 1]    2     ldw x,y 
      002A68 EE 01            [ 2]    3     ldw x,(1,x)
      002A6A 90 5D            [ 2] 3591 	tnzw y 
      002A6C 27 07            [ 1] 3592 	jreq 4$
      002A6E 98               [ 1] 3593 2$:	rcf 
      002A6F 59               [ 2] 3594 	rlcw x 
      002A70 49               [ 1] 3595 	rlc a 
      002A71 90 5A            [ 2] 3596 	decw y 
      002A73 26 F9            [ 1] 3597 	jrne 2$
      002A75                       3598 4$: _store_top  ; T! 
      002A75 90 F7            [ 1]    1     ld (y),a 
      002A77 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A7A A6 84            [ 1] 3599 	ld a,#TK_INTGR
      002A7C 81               [ 4] 3600 	ret
                                   3601 
                                   3602 ;------------------------------
                                   3603 ; BASIC: RSHIFT(expr1,expr2)
                                   3604 ; logical shift right expr1 by 
                                   3605 ; expr2 bits.
                                   3606 ; output:
                                   3607 ; 	A 		TK_INTGR
                                   3608 ;   X 		result 
                                   3609 ;------------------------------
      002A7D                       3610 rshift:
      002A7D CD 18 FC         [ 4] 3611 	call func_args
      002A80 A1 02            [ 1] 3612 	cp a,#2 
      002A82 27 03            [ 1] 3613 	jreq 1$
      002A84 CC 16 48         [ 2] 3614 	jp syntax_error
      002A87                       3615 1$: _xpop 
      002A87 90 F6            [ 1]    1     ld a,(y)
      002A89 93               [ 1]    2     ldw x,y 
      002A8A EE 01            [ 2]    3     ldw x,(1,x)
      002A8C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A90 90 93            [ 1] 3616     ldw y,x   
      002A92                       3617 	_at_top  ; T@  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002A92 90 F6            [ 1]    1     ld a,(y)
      002A94 93               [ 1]    2     ldw x,y 
      002A95 EE 01            [ 2]    3     ldw x,(1,x)
      002A97 90 5D            [ 2] 3618 	tnzw y 
      002A99 27 07            [ 1] 3619 	jreq 4$
      002A9B 98               [ 1] 3620 2$:	rcf 
      002A9C 56               [ 2] 3621 	rrcw x
      002A9D 46               [ 1] 3622 	rrc a  
      002A9E 90 5A            [ 2] 3623 	decw y 
      002AA0 26 F9            [ 1] 3624 	jrne 2$
      002AA2                       3625 4$: _store_top  ; T! 
      002AA2 90 F7            [ 1]    1     ld (y),a 
      002AA4 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AA7 A6 84            [ 1] 3626 	ld a,#TK_INTGR
      002AA9 81               [ 4] 3627 	ret
                                   3628 
                                   3629 ;--------------------------
                                   3630 ; BASIC: FCPU integer
                                   3631 ; set CPU frequency 
                                   3632 ;-------------------------- 
                                   3633 
      002AAA                       3634 fcpu:
      002AAA A6 84            [ 1] 3635 	ld a,#TK_INTGR
      002AAC CD 18 EF         [ 4] 3636 	call expect 
      002AAF CD 17 87         [ 4] 3637 	call get_int24 
      002AB2 9F               [ 1] 3638 	ld a,xl 
      002AB3 A4 07            [ 1] 3639 	and a,#7 
      002AB5 C7 50 C6         [ 1] 3640 	ld CLK_CKDIVR,a 
      002AB8 81               [ 4] 3641 	ret 
                                   3642 
                                   3643 ;------------------------------
                                   3644 ; BASIC: PMODE pin#, mode 
                                   3645 ; Arduino pin. 
                                   3646 ; define pin as input or output
                                   3647 ; pin#: {0..15}
                                   3648 ; mode: INPUT|OUTPUT  
                                   3649 ;------------------------------
                           000001  3650 	PINNO=1
                           000001  3651 	VSIZE=1
      002AB9                       3652 pin_mode:
      002AB9                       3653 	_vars VSIZE 
      002AB9 52 01            [ 2]    1     sub sp,#VSIZE 
      002ABB CD 19 01         [ 4] 3654 	call arg_list 
      002ABE A1 02            [ 1] 3655 	cp a,#2 
      002AC0 27 03            [ 1] 3656 	jreq 1$
      002AC2 CC 16 48         [ 2] 3657 	jp syntax_error 
      002AC5                       3658 1$: _xpop 
      002AC5 90 F6            [ 1]    1     ld a,(y)
      002AC7 93               [ 1]    2     ldw x,y 
      002AC8 EE 01            [ 2]    3     ldw x,(1,x)
      002ACA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ACE 90 93            [ 1] 3659 	ldw y,x ; mode 
      002AD0                       3660 	_xpop ; Dx pin 
      002AD0 90 F6            [ 1]    1     ld a,(y)
      002AD2 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002AD3 EE 01            [ 2]    3     ldw x,(1,x)
      002AD5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AD9 CD 2B 16         [ 4] 3661 	call select_pin 
      002ADC 6B 01            [ 1] 3662 	ld (PINNO,sp),a  
      002ADE A6 01            [ 1] 3663 	ld a,#1 
      002AE0 0D 01            [ 1] 3664 	tnz (PINNO,sp)
      002AE2 27 0D            [ 1] 3665 	jreq 4$
      002AE4 48               [ 1] 3666 2$:	sll a 
      002AE5 0A 01            [ 1] 3667 	dec (PINNO,sp)
      002AE7 26 FB            [ 1] 3668 	jrne 2$ 
      002AE9 6B 01            [ 1] 3669 	ld (PINNO,sp),a
      002AEB 7B 01            [ 1] 3670 	ld a,(PINNO,sp)
      002AED EA 03            [ 1] 3671 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002AEF E7 03            [ 1] 3672 	ld (GPIO_CR1,x),a 
      002AF1 90 A3 00 01      [ 2] 3673 4$:	cpw y,#OUTP 
      002AF5 27 10            [ 1] 3674 	jreq 6$
                                   3675 ; input mode
                                   3676 ; disable external interrupt 
      002AF7 7B 01            [ 1] 3677 	ld a,(PINNO,sp)
      002AF9 43               [ 1] 3678 	cpl a 
      002AFA E4 04            [ 1] 3679 	and a,(GPIO_CR2,x)
      002AFC E7 04            [ 1] 3680 	ld (GPIO_CR2,x),a 
                                   3681 ;clear bit in DDR for input mode 
      002AFE 7B 01            [ 1] 3682 	ld a,(PINNO,sp)
      002B00 43               [ 1] 3683 	cpl a 
      002B01 E4 02            [ 1] 3684 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B03 E7 02            [ 1] 3685 	ld (GPIO_DDR,x),a 
      002B05 20 0C            [ 2] 3686 	jra 9$
      002B07                       3687 6$: ;output mode  
      002B07 7B 01            [ 1] 3688 	ld a,(PINNO,sp)
      002B09 EA 02            [ 1] 3689 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B0B E7 02            [ 1] 3690 	ld (GPIO_DDR,x),a 
      002B0D 7B 01            [ 1] 3691 	ld a,(PINNO,sp)
      002B0F EA 04            [ 1] 3692 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B11 E7 04            [ 1] 3693 	ld (GPIO_CR2,x),a 
      002B13                       3694 9$:	
      002B13                       3695 	_drop VSIZE 
      002B13 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B15 81               [ 4] 3696 	ret
                                   3697 
                                   3698 ;------------------------
                                   3699 ; select Arduino pin 
                                   3700 ; input:
                                   3701 ;   X 	 {0..15} Arduino Dx 
                                   3702 ; output:
                                   3703 ;   A     stm8s208 pin 
                                   3704 ;   X     base address s208 GPIO port 
                                   3705 ;---------------------------
      002B16                       3706 select_pin:
      002B16 58               [ 2] 3707 	sllw x 
      002B17 1C 2B 26         [ 2] 3708 	addw x,#arduino_to_8s208 
      002B1A FE               [ 2] 3709 	ldw x,(x)
      002B1B 9F               [ 1] 3710 	ld a,xl 
      002B1C 88               [ 1] 3711 	push a 
      002B1D 5E               [ 1] 3712 	swapw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002B1E A6 05            [ 1] 3713 	ld a,#5 
      002B20 42               [ 4] 3714 	mul x,a 
      002B21 1C 50 00         [ 2] 3715 	addw x,#GPIO_BASE 
      002B24 84               [ 1] 3716 	pop a 
      002B25 81               [ 4] 3717 	ret 
                                   3718 ; translation from Arduino D0..D15 to stm8s208rb 
      002B26                       3719 arduino_to_8s208:
      002B26 03 06                 3720 .byte 3,6 ; D0 
      002B28 03 05                 3721 .byte 3,5 ; D1 
      002B2A 04 00                 3722 .byte 4,0 ; D2 
      002B2C 02 01                 3723 .byte 2,1 ; D3
      002B2E 06 00                 3724 .byte 6,0 ; D4
      002B30 02 02                 3725 .byte 2,2 ; D5
      002B32 02 03                 3726 .byte 2,3 ; D6
      002B34 03 01                 3727 .byte 3,1 ; D7
      002B36 03 03                 3728 .byte 3,3 ; D8
      002B38 02 04                 3729 .byte 2,4 ; D9
      002B3A 04 05                 3730 .byte 4,5 ; D10
      002B3C 02 06                 3731 .byte 2,6 ; D11
      002B3E 02 07                 3732 .byte 2,7 ; D12
      002B40 02 05                 3733 .byte 2,5 ; D13
      002B42 04 02                 3734 .byte 4,2 ; D14
      002B44 04 01                 3735 .byte 4,1 ; D15
                                   3736 
                                   3737 
                                   3738 ;------------------------------
                                   3739 ; BASIC: RND(expr)
                                   3740 ; return random number 
                                   3741 ; between 1 and expr inclusive
                                   3742 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3743 ; input:
                                   3744 ; 	none 
                                   3745 ; output:
                                   3746 ;	xstack 	random positive integer 
                                   3747 ;------------------------------
      002B46                       3748 random:
      002B46 CD 18 FC         [ 4] 3749 	call func_args 
      002B49 A1 01            [ 1] 3750 	cp a,#1
      002B4B 27 03            [ 1] 3751 	jreq 1$
      002B4D CC 16 48         [ 2] 3752 	jp syntax_error
      002B50                       3753 1$:  
      002B50                       3754 	_xpop   
      002B50 90 F6            [ 1]    1     ld a,(y)
      002B52 93               [ 1]    2     ldw x,y 
      002B53 EE 01            [ 2]    3     ldw x,(1,x)
      002B55 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B59 89               [ 2] 3755 	pushw x 
      002B5A 88               [ 1] 3756 	push a  
      002B5B A6 80            [ 1] 3757 	ld a,#0x80 
      002B5D 15 01            [ 1] 3758 	bcp a,(1,sp)
      002B5F 27 05            [ 1] 3759 	jreq 2$
      002B61 A6 0A            [ 1] 3760 	ld a,#ERR_BAD_VALUE
      002B63 CC 16 4A         [ 2] 3761 	jp tb_error
      002B66                       3762 2$: 
                                   3763 ; acc16=(x<<5)^x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B66 CE 00 13         [ 2] 3764 	ldw x,seedx 
      002B69 58               [ 2] 3765 	sllw x 
      002B6A 58               [ 2] 3766 	sllw x 
      002B6B 58               [ 2] 3767 	sllw x 
      002B6C 58               [ 2] 3768 	sllw x 
      002B6D 58               [ 2] 3769 	sllw x 
      002B6E 9E               [ 1] 3770 	ld a,xh 
      002B6F C8 00 13         [ 1] 3771 	xor a,seedx 
      002B72 C7 00 0D         [ 1] 3772 	ld acc16,a 
      002B75 9F               [ 1] 3773 	ld a,xl 
      002B76 C8 00 14         [ 1] 3774 	xor a,seedx+1 
      002B79 C7 00 0E         [ 1] 3775 	ld acc8,a 
                                   3776 ; seedx=seedy 
      002B7C CE 00 15         [ 2] 3777 	ldw x,seedy 
      002B7F CF 00 13         [ 2] 3778 	ldw seedx,x  
                                   3779 ; seedy=seedy^(seedy>>1)
      002B82 90 54            [ 2] 3780 	srlw y 
      002B84 90 9E            [ 1] 3781 	ld a,yh 
      002B86 C8 00 15         [ 1] 3782 	xor a,seedy 
      002B89 C7 00 15         [ 1] 3783 	ld seedy,a  
      002B8C 90 9F            [ 1] 3784 	ld a,yl 
      002B8E C8 00 16         [ 1] 3785 	xor a,seedy+1 
      002B91 C7 00 16         [ 1] 3786 	ld seedy+1,a 
                                   3787 ; acc16>>3 
      002B94 CE 00 0D         [ 2] 3788 	ldw x,acc16 
      002B97 54               [ 2] 3789 	srlw x 
      002B98 54               [ 2] 3790 	srlw x 
      002B99 54               [ 2] 3791 	srlw x 
                                   3792 ; x=acc16^x 
      002B9A 9E               [ 1] 3793 	ld a,xh 
      002B9B C8 00 0D         [ 1] 3794 	xor a,acc16 
      002B9E 95               [ 1] 3795 	ld xh,a 
      002B9F 9F               [ 1] 3796 	ld a,xl 
      002BA0 C8 00 0E         [ 1] 3797 	xor a,acc8 
      002BA3 97               [ 1] 3798 	ld xl,a 
                                   3799 ; seedy=x^seedy 
      002BA4 C8 00 16         [ 1] 3800 	xor a,seedy+1
      002BA7 97               [ 1] 3801 	ld xl,a 
      002BA8 9E               [ 1] 3802 	ld a,xh 
      002BA9 C8 00 15         [ 1] 3803 	xor a,seedy
      002BAC 95               [ 1] 3804 	ld xh,a 
      002BAD CF 00 15         [ 2] 3805 	ldw seedy,x 
                                   3806 ; return seedy modulo expr + 1 
      002BB0 C6 00 14         [ 1] 3807 	ld a,seedx+1 
      002BB3                       3808 	_xpush 
      002BB3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BB7 90 F7            [ 1]    2     ld (y),a 
      002BB9 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BBC 84               [ 1] 3809 	pop a 
      002BBD 85               [ 2] 3810 	popw x 
      002BBE                       3811 	_xpush 
      002BBE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BC2 90 F7            [ 1]    2     ld (y),a 
      002BC4 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BC7 CD 02 E5         [ 4] 3812 	call div24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002BCA                       3813 10$:
      002BCA A6 84            [ 1] 3814 	ld a,#TK_INTGR
      002BCC 81               [ 4] 3815 	ret 
                                   3816 
                                   3817 ;---------------------------------
                                   3818 ; BASIC: WORDS 
                                   3819 ; affiche la listes des mots du
                                   3820 ; dictionnaire ainsi que le nombre
                                   3821 ; de mots.
                                   3822 ;---------------------------------
                           000001  3823 	WLEN=1 ; word length
                           000002  3824 	LLEN=2 ; character sent to console
                           000003  3825 	WCNT=3 ; count words printed 
                           000003  3826 	VSIZE=3 
      002BCD                       3827 words:
      002BCD                       3828 	_vars VSIZE
      002BCD 52 03            [ 2]    1     sub sp,#VSIZE 
      002BCF 0F 02            [ 1] 3829 	clr (LLEN,sp)
      002BD1 0F 03            [ 1] 3830 	clr (WCNT,sp)
      002BD3 90 AE 32 F0      [ 2] 3831 	ldw y,#kword_dict+2
      002BD7 93               [ 1] 3832 0$:	ldw x,y
      002BD8 F6               [ 1] 3833 	ld a,(x)
      002BD9 A4 0F            [ 1] 3834 	and a,#15 
      002BDB 6B 01            [ 1] 3835 	ld (WLEN,sp),a 
      002BDD 0C 03            [ 1] 3836 	inc (WCNT,sp)
      002BDF 5C               [ 1] 3837 1$:	incw x 
      002BE0 F6               [ 1] 3838 	ld a,(x)
      002BE1 CD 08 FD         [ 4] 3839 	call putc 
      002BE4 0C 02            [ 1] 3840 	inc (LLEN,sp)
      002BE6 0A 01            [ 1] 3841 	dec (WLEN,sp)
      002BE8 26 F5            [ 1] 3842 	jrne 1$
      002BEA A6 46            [ 1] 3843 	ld a,#70
      002BEC 11 02            [ 1] 3844 	cp a,(LLEN,sp)
      002BEE 2B 09            [ 1] 3845 	jrmi 2$   
      002BF0 A6 20            [ 1] 3846 	ld a,#SPACE 
      002BF2 CD 08 FD         [ 4] 3847 	call putc 
      002BF5 0C 02            [ 1] 3848 	inc (LLEN,sp) 
      002BF7 20 07            [ 2] 3849 	jra 3$
      002BF9 A6 0D            [ 1] 3850 2$: ld a,#CR 
      002BFB CD 08 FD         [ 4] 3851 	call putc 
      002BFE 0F 02            [ 1] 3852 	clr (LLEN,sp)
      002C00 72 A2 00 02      [ 2] 3853 3$:	subw y,#2 
      002C04 90 FE            [ 2] 3854 	ldw y,(y)
      002C06 26 CF            [ 1] 3855 	jrne 0$ 
      002C08 A6 0D            [ 1] 3856 	ld a,#CR 
      002C0A CD 08 FD         [ 4] 3857 	call putc  
      002C0D 5F               [ 1] 3858 	clrw x 
      002C0E 7B 03            [ 1] 3859 	ld a,(WCNT,sp)
      002C10 97               [ 1] 3860 	ld xl,a 
      002C11 CD 17 9D         [ 4] 3861 	call prt_i16 
      002C14 AE 2C 1D         [ 2] 3862 	ldw x,#words_count_msg
      002C17 CD 09 5A         [ 4] 3863 	call puts 
      002C1A                       3864 	_drop VSIZE 
      002C1A 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C1C 81               [ 4] 3865 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002C1D 20 77 6F 72 64 73 20  3866 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3867 
                                   3868 
                                   3869 ;-----------------------------
                                   3870 ; BASIC: TIMER expr 
                                   3871 ; initialize count down timer 
                                   3872 ;-----------------------------
      002C33                       3873 set_timer:
      002C33 CD 19 01         [ 4] 3874 	call arg_list
      002C36 A1 01            [ 1] 3875 	cp a,#1 
      002C38 27 03            [ 1] 3876 	jreq 1$
      002C3A CC 16 48         [ 2] 3877 	jp syntax_error
      002C3D                       3878 1$: 
      002C3D                       3879 	_xpop  
      002C3D 90 F6            [ 1]    1     ld a,(y)
      002C3F 93               [ 1]    2     ldw x,y 
      002C40 EE 01            [ 2]    3     ldw x,(1,x)
      002C42 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C46 CF 00 11         [ 2] 3880 	ldw timer,x 
      002C49 81               [ 4] 3881 	ret 
                                   3882 
                                   3883 ;------------------------------
                                   3884 ; BASIC: TIMEOUT 
                                   3885 ; return state of timer 
                                   3886 ;------------------------------
      002C4A                       3887 timeout:
      002C4A CE 00 11         [ 2] 3888 	ldw x,timer 
      002C4D                       3889 logical_complement:
      002C4D A6 FF            [ 1] 3890 	ld a,#255 
      002C4F 53               [ 2] 3891 	cplw x 
      002C50 A3 FF FF         [ 2] 3892 	cpw x,#-1
      002C53 27 02            [ 1] 3893 	jreq 2$
      002C55 5F               [ 1] 3894 	clrw x
      002C56 4F               [ 1] 3895 	clr a 
      002C57                       3896 2$:	_xpush  
      002C57 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C5B 90 F7            [ 1]    2     ld (y),a 
      002C5D 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C60 A6 84            [ 1] 3897 	ld a,#TK_INTGR
      002C62 81               [ 4] 3898 	ret 
                                   3899 
                                   3900 ;--------------------------------
                                   3901 ; BASIC NOT(expr) 
                                   3902 ; return logical complement of expr
                                   3903 ;--------------------------------
      002C63                       3904 func_not:
      002C63 CD 18 FC         [ 4] 3905 	call func_args  
      002C66 A1 01            [ 1] 3906 	cp a,#1
      002C68 27 03            [ 1] 3907 	jreq 1$
      002C6A CC 16 48         [ 2] 3908 	jp syntax_error
      002C6D                       3909 1$:  
      002C6D CD 01 AA         [ 4] 3910 	call cpl24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C70 A6 84            [ 1] 3911 	ld a,#TK_INTGR
      002C72 81               [ 4] 3912 	ret 
                                   3913 
                                   3914 
                                   3915 
                                   3916 ;-----------------------------------
                                   3917 ; BASIC: IWDGEN expr1 
                                   3918 ; enable independant watchdog timer
                                   3919 ; expr1 is delay in multiple of 62.5µsec
                                   3920 ; expr1 -> {1..16383}
                                   3921 ;-----------------------------------
      002C73                       3922 enable_iwdg:
      002C73 CD 19 01         [ 4] 3923 	call arg_list
      002C76 A1 01            [ 1] 3924 	cp a,#1 
      002C78 27 03            [ 1] 3925 	jreq 1$
      002C7A CC 16 48         [ 2] 3926 	jp syntax_error 
      002C7D                       3927 1$: _xpop  
      002C7D 90 F6            [ 1]    1     ld a,(y)
      002C7F 93               [ 1]    2     ldw x,y 
      002C80 EE 01            [ 2]    3     ldw x,(1,x)
      002C82 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C86 4B 00            [ 1] 3928 	push #0
      002C88 35 CC 50 E0      [ 1] 3929 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002C8C 9E               [ 1] 3930 	ld a,xh 
      002C8D A4 3F            [ 1] 3931 	and a,#0x3f
      002C8F 95               [ 1] 3932 	ld xh,a  
      002C90 A3 00 FF         [ 2] 3933 2$:	cpw x,#255
      002C93 23 06            [ 2] 3934 	jrule 3$
      002C95 0C 01            [ 1] 3935 	inc (1,sp)
      002C97 98               [ 1] 3936 	rcf 
      002C98 56               [ 2] 3937 	rrcw x 
      002C99 20 F5            [ 2] 3938 	jra 2$
      002C9B 35 55 50 E0      [ 1] 3939 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002C9F 84               [ 1] 3940 	pop a  
      002CA0 C7 50 E1         [ 1] 3941 	ld IWDG_PR,a 
      002CA3 9F               [ 1] 3942 	ld a,xl
      002CA4 4A               [ 1] 3943 	dec a 
      002CA5 35 55 50 E0      [ 1] 3944 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CA9 C7 50 E2         [ 1] 3945 	ld IWDG_RLR,a 
      002CAC 35 AA 50 E0      [ 1] 3946 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002CB0 81               [ 4] 3947 	ret 
                                   3948 
                                   3949 
                                   3950 ;-----------------------------------
                                   3951 ; BASIC: IWDGREF  
                                   3952 ; refresh independant watchdog count down 
                                   3953 ; timer before it reset MCU. 
                                   3954 ;-----------------------------------
      002CB1                       3955 refresh_iwdg:
      002CB1 35 AA 50 E0      [ 1] 3956 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CB5 81               [ 4] 3957 	ret 
                                   3958 
                                   3959 
                                   3960 ;-------------------------------------
                                   3961 ; BASIC: LOG(expr)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   3962 ; return logarithm base 2 of expr 
                                   3963 ; this is the position of most significant
                                   3964 ; bit set. 
                                   3965 ; input: 
                                   3966 ; output:
                                   3967 ;   A     TK_INTGR 
                                   3968 ;   xstack log2 
                                   3969 ;*********************************
      002CB6                       3970 log2:
      002CB6 CD 18 FC         [ 4] 3971 	call func_args 
      002CB9 A1 01            [ 1] 3972 	cp a,#1 
      002CBB 27 03            [ 1] 3973 	jreq 1$
      002CBD CC 16 48         [ 2] 3974 	jp syntax_error 
      002CC0                       3975 1$: _at_top   
      002CC0 90 F6            [ 1]    1     ld a,(y)
      002CC2 93               [ 1]    2     ldw x,y 
      002CC3 EE 01            [ 2]    3     ldw x,(1,x)
      002CC5                       3976 leading_one:
      002CC5 4D               [ 1] 3977 	tnz a
      002CC6 26 06            [ 1] 3978 	jrne 2$ 
      002CC8 5D               [ 2] 3979 	tnzw x 
      002CC9 26 03            [ 1] 3980 	jrne 2$
      002CCB 4C               [ 1] 3981 	inc a  
      002CCC 20 0E            [ 2] 3982 	jra 9$
      002CCE 4B 18            [ 1] 3983 2$:	push #24  
      002CD0 59               [ 2] 3984 3$: rlcw x 
      002CD1 49               [ 1] 3985     rlc a 
      002CD2 25 04            [ 1] 3986 	jrc 4$
      002CD4 0A 01            [ 1] 3987 	dec (1,sp) 
      002CD6 26 F8            [ 1] 3988 	jrne 3$
      002CD8 5F               [ 1] 3989 4$: clrw x 
      002CD9 84               [ 1] 3990     pop a 
      002CDA 97               [ 1] 3991 	ld xl,a 
      002CDB 4F               [ 1] 3992 	clr a 
      002CDC                       3993 9$:	_store_top 
      002CDC 90 F7            [ 1]    1     ld (y),a 
      002CDE 90 EF 01         [ 2]    2     ldw (1,y),x     
      002CE1 A6 84            [ 1] 3994 	ld a,#TK_INTGR
      002CE3 81               [ 4] 3995 	ret 
                                   3996 
                                   3997 ;-----------------------------------
                                   3998 ; BASIC: BIT(expr) 
                                   3999 ; expr ->{0..15}
                                   4000 ; return 2^expr 
                                   4001 ; output:
                                   4002 ;    x    2^expr 
                                   4003 ;-----------------------------------
      002CE4                       4004 bitmask:
      002CE4 CD 18 FC         [ 4] 4005     call func_args 
      002CE7 A1 01            [ 1] 4006 	cp a,#1
      002CE9 27 03            [ 1] 4007 	jreq 1$
      002CEB CC 16 48         [ 2] 4008 	jp syntax_error 
      002CEE                       4009 1$: _xpop 
      002CEE 90 F6            [ 1]    1     ld a,(y)
      002CF0 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CF1 EE 01            [ 2]    3     ldw x,(1,x)
      002CF3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CF7 9F               [ 1] 4010 	ld a,xl 
      002CF8 A4 0F            [ 1] 4011 	and a,#15
      002CFA 5F               [ 1] 4012 	clrw x 
      002CFB 5C               [ 1] 4013 	incw x 
      002CFC 4D               [ 1] 4014 2$: tnz a 
      002CFD 27 04            [ 1] 4015 	jreq 3$
      002CFF 58               [ 2] 4016 	slaw x 
      002D00 4A               [ 1] 4017 	dec a 
      002D01 26 F9            [ 1] 4018 	jrne 2$ 
      002D03                       4019 3$: 
      002D03 81               [ 4] 4020 	ret 
                                   4021 
                                   4022 ;------------------------------
                                   4023 ; BASIC: INVERT(expr)
                                   4024 ; 1's complement 
                                   4025 ;--------------------------------
      002D04                       4026 invert:
      002D04 CD 18 FC         [ 4] 4027 	call func_args
      002D07 A1 01            [ 1] 4028 	cp a,#1 
      002D09 27 03            [ 1] 4029 	jreq 1$
      002D0B CC 16 48         [ 2] 4030 	jp syntax_error
      002D0E                       4031 1$: _xpop 
      002D0E 90 F6            [ 1]    1     ld a,(y)
      002D10 93               [ 1]    2     ldw x,y 
      002D11 EE 01            [ 2]    3     ldw x,(1,x)
      002D13 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D17 43               [ 1] 4032 	cpl a 
      002D18 53               [ 2] 4033 	cplw x 
      002D19 81               [ 4] 4034 	ret 
                                   4035 
                                   4036 ;------------------------------
                                   4037 ; BASIC: DO 
                                   4038 ; initiate a DO ... UNTIL loop 
                                   4039 ;------------------------------
                           000003  4040 	DOLP_ADR=3 
                           000005  4041 	DOLP_INW=5
                           000004  4042 	VSIZE=4 
      002D1A                       4043 do_loop:
      002D1A 85               [ 2] 4044 	popw x 
      002D1B                       4045 	_vars VSIZE 
      002D1B 52 04            [ 2]    1     sub sp,#VSIZE 
      002D1D 89               [ 2] 4046 	pushw x 
      002D1E 90 CE 00 04      [ 2] 4047 	ldw y,basicptr 
      002D22 17 03            [ 2] 4048 	ldw (DOLP_ADR,sp),y
      002D24 CE 00 00         [ 2] 4049 	ldw x,in.w 
      002D27 1F 05            [ 2] 4050 	ldw (DOLP_INW,sp),x
      002D29 72 5C 00 1E      [ 1] 4051 	inc loop_depth 
      002D2D 81               [ 4] 4052 	ret 
                                   4053 
                                   4054 ;--------------------------------
                                   4055 ; BASIC: UNTIL expr 
                                   4056 ; loop if exprssion is false 
                                   4057 ; else terminate loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4058 ;--------------------------------
      002D2E                       4059 until: 
      002D2E 72 5D 00 1E      [ 1] 4060 	tnz loop_depth 
      002D32 26 03            [ 1] 4061 	jrne 1$ 
      002D34 CC 16 48         [ 2] 4062 	jp syntax_error 
      002D37                       4063 1$: 
      002D37 CD 1A 79         [ 4] 4064 	call relation 
      002D3A A1 84            [ 1] 4065 	cp a,#TK_INTGR
      002D3C 27 03            [ 1] 4066 	jreq 2$
      002D3E CC 16 48         [ 2] 4067 	jp syntax_error
      002D41                       4068 2$: 
      002D41                       4069 	_xpop
      002D41 90 F6            [ 1]    1     ld a,(y)
      002D43 93               [ 1]    2     ldw x,y 
      002D44 EE 01            [ 2]    3     ldw x,(1,x)
      002D46 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D4A 4D               [ 1] 4070 	tnz a 
      002D4B 26 13            [ 1] 4071 	jrne 9$ 
      002D4D 5D               [ 2] 4072 	tnzw x   
      002D4E 26 10            [ 1] 4073 	jrne 9$
      002D50 1E 03            [ 2] 4074 	ldw x,(DOLP_ADR,sp)
      002D52 CF 00 04         [ 2] 4075 	ldw basicptr,x 
      002D55 E6 02            [ 1] 4076 	ld a,(2,x)
      002D57 C7 00 03         [ 1] 4077 	ld count,a 
      002D5A 1E 05            [ 2] 4078 	ldw x,(DOLP_INW,sp)
      002D5C CF 00 00         [ 2] 4079 	ldw in.w,x 
      002D5F 81               [ 4] 4080 	ret 
      002D60                       4081 9$:	; remove loop data from stack  
      002D60 85               [ 2] 4082 	popw x
      002D61                       4083 	_drop VSIZE
      002D61 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D63 72 5A 00 1E      [ 1] 4084 	dec loop_depth 
      002D67 FC               [ 2] 4085 	jp (x)
                                   4086 
                                   4087 ;--------------------------
                                   4088 ; BASIC: PRTA...PRTI  
                                   4089 ;  return constant value 
                                   4090 ;  PORT  offset in GPIO
                                   4091 ;  array
                                   4092 ;---------------------------
      002D68                       4093 const_porta:
      002D68 AE 00 00         [ 2] 4094 	ldw x,#0
      002D6B A6 84            [ 1] 4095 	ld a,#TK_INTGR 
      002D6D 81               [ 4] 4096 	ret 
      002D6E                       4097 const_portb:
      002D6E AE 00 01         [ 2] 4098 	ldw x,#1
      002D71 A6 84            [ 1] 4099 	ld a,#TK_INTGR 
      002D73 81               [ 4] 4100 	ret 
      002D74                       4101 const_portc:
      002D74 AE 00 02         [ 2] 4102 	ldw x,#2
      002D77 A6 84            [ 1] 4103 	ld a,#TK_INTGR 
      002D79 81               [ 4] 4104 	ret 
      002D7A                       4105 const_portd:
      002D7A AE 00 03         [ 2] 4106 	ldw x,#3
      002D7D A6 84            [ 1] 4107 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D7F 81               [ 4] 4108 	ret 
      002D80                       4109 const_porte:
      002D80 AE 00 04         [ 2] 4110 	ldw x,#4
      002D83 A6 84            [ 1] 4111 	ld a,#TK_INTGR 
      002D85 81               [ 4] 4112 	ret 
      002D86                       4113 const_portf:
      002D86 AE 00 05         [ 2] 4114 	ldw x,#5
      002D89 A6 84            [ 1] 4115 	ld a,#TK_INTGR 
      002D8B 81               [ 4] 4116 	ret 
      002D8C                       4117 const_portg:
      002D8C AE 00 06         [ 2] 4118 	ldw x,#6
      002D8F A6 84            [ 1] 4119 	ld a,#TK_INTGR 
      002D91 81               [ 4] 4120 	ret 
      002D92                       4121 const_porth:
      002D92 AE 00 07         [ 2] 4122 	ldw x,#7
      002D95 A6 84            [ 1] 4123 	ld a,#TK_INTGR 
      002D97 81               [ 4] 4124 	ret 
      002D98                       4125 const_porti:
      002D98 AE 00 08         [ 2] 4126 	ldw x,#8
      002D9B A6 84            [ 1] 4127 	ld a,#TK_INTGR 
      002D9D 81               [ 4] 4128 	ret 
                                   4129 
                                   4130 ;-------------------------------
                                   4131 ; following return constant 
                                   4132 ; related to GPIO register offset 
                                   4133 ;---------------------------------
      002D9E                       4134 const_odr:
      002D9E A6 84            [ 1] 4135 	ld a,#TK_INTGR 
      002DA0 AE 00 00         [ 2] 4136 	ldw x,#GPIO_ODR
      002DA3 81               [ 4] 4137 	ret 
      002DA4                       4138 const_idr:
      002DA4 A6 84            [ 1] 4139 	ld a,#TK_INTGR 
      002DA6 AE 00 01         [ 2] 4140 	ldw x,#GPIO_IDR
      002DA9 81               [ 4] 4141 	ret 
      002DAA                       4142 const_ddr:
      002DAA A6 84            [ 1] 4143 	ld a,#TK_INTGR 
      002DAC AE 00 02         [ 2] 4144 	ldw x,#GPIO_DDR
      002DAF 81               [ 4] 4145 	ret 
      002DB0                       4146 const_cr1:
      002DB0 A6 84            [ 1] 4147 	ld a,#TK_INTGR 
      002DB2 AE 00 03         [ 2] 4148 	ldw x,#GPIO_CR1
      002DB5 81               [ 4] 4149 	ret 
      002DB6                       4150 const_cr2:
      002DB6 A6 84            [ 1] 4151 	ld a,#TK_INTGR 
      002DB8 AE 00 04         [ 2] 4152 	ldw x,#GPIO_CR2
      002DBB 81               [ 4] 4153 	ret 
                                   4154 ;-------------------------
                                   4155 ; BASIC: POUT 
                                   4156 ;  constant for port mode
                                   4157 ;  used by PMODE 
                                   4158 ;  to set pin as output
                                   4159 ;------------------------
      002DBC                       4160 const_output:
      002DBC A6 84            [ 1] 4161 	ld a,#TK_INTGR 
      002DBE AE 00 01         [ 2] 4162 	ldw x,#OUTP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002DC1 81               [ 4] 4163 	ret 
                                   4164 
                                   4165 ;-------------------------
                                   4166 ; BASIC: PINP 
                                   4167 ;  constant for port mode
                                   4168 ;  used by PMODE 
                                   4169 ;  to set pin as input
                                   4170 ;------------------------
      002DC2                       4171 const_input:
      002DC2 A6 84            [ 1] 4172 	ld a,#TK_INTGR 
      002DC4 AE 00 00         [ 2] 4173 	ldw x,#INP 
      002DC7 81               [ 4] 4174 	ret 
                                   4175 	
                                   4176 ;-----------------------
                                   4177 ; memory area constants
                                   4178 ;-----------------------
      002DC8                       4179 const_eeprom_base:
      002DC8 A6 84            [ 1] 4180 	ld a,#TK_INTGR 
      002DCA AE 40 00         [ 2] 4181 	ldw x,#EEPROM_BASE 
      002DCD 81               [ 4] 4182 	ret 
                                   4183 
                                   4184 ;---------------------------
                                   4185 ; BASIC: DATA 
                                   4186 ; when the interpreter find 
                                   4187 ; a DATA line it skip it.
                                   4188 ;---------------------------
      002DCE                       4189 data:
      002DCE 55 00 03 00 01   [ 1] 4190 	mov in,count 
      002DD3 81               [ 4] 4191 	ret 
                                   4192 
                                   4193 ;------------------------------
                                   4194 ; check if it is a DATA line 
                                   4195 ; input: 
                                   4196 ;    X    line address 
                                   4197 ; output:
                                   4198 ;    Z    set if DATA line 
                                   4199 ;----------------------------
      002DD4                       4200 is_data_line:
      002DD4 EE 04            [ 2] 4201 	ldw x,(4,x)
      002DD6 DE 32 F6         [ 2] 4202 	ldw x,(code_addr,x)
      002DD9 A3 2D CE         [ 2] 4203 	cpw x,#data 
      002DDC 81               [ 4] 4204 	ret 
                                   4205 
                                   4206 ;---------------------------
                                   4207 ; set DATA pointer at line# 
                                   4208 ; specified by X 
                                   4209 ;---------------------------
      002DDD                       4210 data_line:
      002DDD 4F               [ 1] 4211     clr a 
      002DDE CD 0C 42         [ 4] 4212 	call search_lineno
      002DE1 5D               [ 2] 4213 	tnzw x 
      002DE2 26 05            [ 1] 4214 	jrne 3$
      002DE4 A6 05            [ 1] 4215 2$:	ld a,#ERR_NO_LINE 
      002DE6 CC 16 4A         [ 2] 4216 	jp tb_error
      002DE9                       4217 3$: ; check if valid data line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002DE9 90 93            [ 1] 4218     ldw y,x 
      002DEB CD 2D D4         [ 4] 4219 	call is_data_line 
      002DEE 26 F4            [ 1] 4220 	jrne 2$ 
      002DF0                       4221 set_data_ptr: 	
      002DF0 90 CF 00 06      [ 2] 4222 	ldw data_ptr,y
      002DF4 90 E6 02         [ 1] 4223 	ld a,(2,y)
      002DF7 C7 00 09         [ 1] 4224 	ld data_len,a 
      002DFA 35 06 00 08      [ 1] 4225 	mov data_ofs,#FIRST_DATA_ITEM 
      002DFE 81               [ 4] 4226 	ret
                                   4227 
                                   4228 ;---------------------------------
                                   4229 ; BASIC: RESTORE [line#]
                                   4230 ; set data_ptr to first data line
                                   4231 ; if no DATA found pointer set to
                                   4232 ; zero.
                                   4233 ; if a line# is given as argument 
                                   4234 ; a data line with that number 
                                   4235 ; is searched and the data pointer 
                                   4236 ; is set to it. If there is no 
                                   4237 ; data line with that number 
                                   4238 ; the program is interrupted. 
                                   4239 ;---------------------------------
      002DFF                       4240 restore:
      002DFF 72 5F 00 06      [ 1] 4241 	clr data_ptr 
      002E03 72 5F 00 07      [ 1] 4242 	clr data_ptr+1
      002E07 72 5F 00 08      [ 1] 4243 	clr data_ofs 
      002E0B 72 5F 00 09      [ 1] 4244 	clr data_len
      002E0F CD 17 47         [ 4] 4245 	call next_token 
      002E12 A1 84            [ 1] 4246 	cp a,#TK_INTGR
      002E14 27 C7            [ 1] 4247 	jreq data_line
      002E16                       4248 	_unget_token 
      002E16 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002E1B CE 00 1A         [ 2] 4249 	ldw x,txtbgn
                                   4250 ; search first DATA line 
      002E1E                       4251 data_search_loop: 	
      002E1E C3 00 1C         [ 2] 4252 	cpw x,txtend
      002E21 24 17            [ 1] 4253 	jruge restore_error 
      002E23 90 93            [ 1] 4254 	ldw y,x 
      002E25 CD 2D D4         [ 4] 4255 	call is_data_line 
      002E28 27 C6            [ 1] 4256 	jreq set_data_ptr
      002E2A                       4257 try_next_line: 
      002E2A 93               [ 1] 4258 	ldw x,y 
      002E2B E6 02            [ 1] 4259 	ld a,(2,x)
      002E2D C7 00 0E         [ 1] 4260 	ld acc8,a 
      002E30 72 5F 00 0D      [ 1] 4261 	clr acc16 
      002E34 72 BB 00 0D      [ 2] 4262 	addw x,acc16 
      002E38 20 E4            [ 2] 4263 	jra data_search_loop
      002E3A                       4264 restore_error:	
      002E3A A6 0C            [ 1] 4265     ld a,#ERR_NO_DATA 
      002E3C CC 16 4A         [ 2] 4266 	jp tb_error 
                                   4267 
                                   4268 
                                   4269 ;---------------------------------
                                   4270 ; BASIC: READ 
                                   4271 ; return next data item | 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4272 ;---------------------------------
                           000001  4273 	CTX_BPTR=1 
                           000003  4274 	CTX_IN=3 
                           000004  4275 	CTX_COUNT=4 
                           000005  4276 	XSAVE=5
                           000006  4277 	VSIZE=6
      002E3F                       4278 read:
      002E3F                       4279 	_vars  VSIZE 
      002E3F 52 06            [ 2]    1     sub sp,#VSIZE 
      002E41                       4280 read01:	
      002E41 C6 00 08         [ 1] 4281 	ld a,data_ofs
      002E44 C1 00 09         [ 1] 4282 	cp a,data_len 
      002E47 27 37            [ 1] 4283 	jreq 2$ ; end of line  
      002E49 CD 1F 96         [ 4] 4284 	call save_context
      002E4C CE 00 06         [ 2] 4285 	ldw x,data_ptr 
      002E4F CF 00 04         [ 2] 4286 	ldw basicptr,x 
      002E52 55 00 08 00 01   [ 1] 4287 	mov in,data_ofs 
      002E57 55 00 09 00 03   [ 1] 4288 	mov count,data_len  
      002E5C CD 1A 38         [ 4] 4289 	call expression 
      002E5F A1 84            [ 1] 4290 	cp a,#TK_INTGR 
      002E61 27 03            [ 1] 4291 	jreq 1$ 
      002E63 CC 16 48         [ 2] 4292 	jp syntax_error 
      002E66                       4293 1$:
      002E66 1F 05            [ 2] 4294 	ldw (XSAVE,SP),x
      002E68 CD 17 47         [ 4] 4295 	call next_token ; skip comma
      002E6B CE 00 04         [ 2] 4296 	ldw x,basicptr 
      002E6E CF 00 06         [ 2] 4297 	ldw data_ptr,x 
      002E71 55 00 01 00 08   [ 1] 4298 	mov data_ofs,in 
      002E76 CD 1F A6         [ 4] 4299 	call rest_context
      002E79 1E 05            [ 2] 4300 	ldw x,(XSAVE,sp)
      002E7B A6 84            [ 1] 4301 	ld a,#TK_INTGR
      002E7D                       4302 	_drop VSIZE 
      002E7D 5B 06            [ 2]    1     addw sp,#VSIZE 
      002E7F 81               [ 4] 4303 	ret 
      002E80                       4304 2$: ; end of line reached 
      002E80 90 CE 00 06      [ 2] 4305 	ldw y, data_ptr 
      002E84 72 5F 00 06      [ 1] 4306 	clr data_ptr
      002E88 72 5F 00 07      [ 1] 4307 	clr data_ptr+1   
      002E8C 72 5F 00 08      [ 1] 4308 	clr data_ofs 
      002E90 72 5F 00 09      [ 1] 4309 	clr data_len 
      002E94 CD 2E 2A         [ 4] 4310 	call try_next_line 
      002E97 20 A8            [ 2] 4311 	jra read01
                                   4312 
                                   4313 
                                   4314 ;---------------------------------
                                   4315 ; BASIC: SPIEN clkdiv, 0|1  
                                   4316 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4317 ; if clkdiv==-1 disable SPI
                                   4318 ; 0|1 -> disable|enable  
                                   4319 ;--------------------------------- 
                           000005  4320 SPI_CS_BIT=5
      002E99                       4321 spi_enable:
      002E99 CD 19 01         [ 4] 4322 	call arg_list 
      002E9C A1 02            [ 1] 4323 	cp a,#2
      002E9E 27 03            [ 1] 4324 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002EA0 CC 16 48         [ 2] 4325 	jp syntax_error 
      002EA3                       4326 1$: 
      002EA3 72 12 50 C7      [ 1] 4327 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EA7 85               [ 2] 4328 	popw x  
      002EA8 5D               [ 2] 4329 	tnzw x 
      002EA9 27 21            [ 1] 4330 	jreq spi_disable 
      002EAB 85               [ 2] 4331 	popw x 
      002EAC A6 08            [ 1] 4332 	ld a,#(1<<SPI_CR1_BR)
      002EAE 42               [ 4] 4333 	mul x,a 
      002EAF 9F               [ 1] 4334 	ld a,xl 
      002EB0 C7 52 00         [ 1] 4335 	ld SPI_CR1,a 
                                   4336 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EB3 72 1A 50 14      [ 1] 4337 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EB7 72 1A 50 16      [ 1] 4338 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4339 ; configure SPI as master mode 0.	
      002EBB 72 14 52 00      [ 1] 4340 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4341 ; ~CS line controlled by sofware 	
      002EBF 72 12 52 01      [ 1] 4342 	bset SPI_CR2,#SPI_CR2_SSM 
      002EC3 72 10 52 01      [ 1] 4343     bset SPI_CR2,#SPI_CR2_SSI 
                                   4344 ; enable SPI
      002EC7 72 1C 52 00      [ 1] 4345 	bset SPI_CR1,#SPI_CR1_SPE 	
      002ECB 81               [ 4] 4346 	ret 
      002ECC                       4347 spi_disable:
      002ECC                       4348 	_drop #2; throw first argument.
      002ECC 5B 02            [ 2]    1     addw sp,##2 
                                   4349 ; wait spi idle 
      002ECE A6 82            [ 1] 4350 1$:	ld a,#0x82 
      002ED0 C4 52 03         [ 1] 4351 	and a,SPI_SR
      002ED3 A1 02            [ 1] 4352 	cp a,#2 
      002ED5 26 F7            [ 1] 4353 	jrne 1$
      002ED7 72 1D 52 00      [ 1] 4354 	bres SPI_CR1,#SPI_CR1_SPE
      002EDB 72 13 50 C7      [ 1] 4355 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002EDF 72 1B 50 16      [ 1] 4356 	bres PE_DDR,#SPI_CS_BIT 
      002EE3 81               [ 4] 4357 	ret 
                                   4358 
      002EE4                       4359 spi_clear_error:
      002EE4 A6 78            [ 1] 4360 	ld a,#0x78 
      002EE6 C5 52 03         [ 1] 4361 	bcp a,SPI_SR 
      002EE9 27 04            [ 1] 4362 	jreq 1$
      002EEB 72 5F 52 03      [ 1] 4363 	clr SPI_SR 
      002EEF 81               [ 4] 4364 1$: ret 
                                   4365 
      002EF0                       4366 spi_send_byte:
      002EF0 88               [ 1] 4367 	push a 
      002EF1 CD 2E E4         [ 4] 4368 	call spi_clear_error
      002EF4 84               [ 1] 4369 	pop a 
      002EF5 72 03 52 03 FB   [ 2] 4370 	btjf SPI_SR,#SPI_SR_TXE,.
      002EFA C7 52 04         [ 1] 4371 	ld SPI_DR,a
      002EFD 72 01 52 03 FB   [ 2] 4372 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F02 C6 52 04         [ 1] 4373 	ld a,SPI_DR 
      002F05 81               [ 4] 4374 	ret 
                                   4375 
      002F06                       4376 spi_rcv_byte:
      002F06 A6 FF            [ 1] 4377 	ld a,#255
      002F08 72 01 52 03 E3   [ 2] 4378 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002F0D C6 52 04         [ 1] 4379 	ld a,SPI_DR 
      002F10 81               [ 4] 4380 	ret
                                   4381 
                                   4382 ;------------------------------
                                   4383 ; BASIC: SPIWR byte [,byte]
                                   4384 ; write 1 or more byte
                                   4385 ;------------------------------
      002F11                       4386 spi_write:
      002F11 CD 1A 38         [ 4] 4387 	call expression
      002F14 A1 84            [ 1] 4388 	cp a,#TK_INTGR 
      002F16 27 03            [ 1] 4389 	jreq 1$
      002F18 CC 16 48         [ 2] 4390 	jp syntax_error 
      002F1B                       4391 1$:	
      002F1B 9F               [ 1] 4392 	ld a,xl 
      002F1C CD 2E F0         [ 4] 4393 	call spi_send_byte 
      002F1F CD 17 47         [ 4] 4394 	call next_token 
      002F22 A1 08            [ 1] 4395 	cp a,#TK_COMMA 
      002F24 26 02            [ 1] 4396 	jrne 2$ 
      002F26 20 E9            [ 2] 4397 	jra spi_write 
      002F28 4D               [ 1] 4398 2$:	tnz a 
      002F29 27 05            [ 1] 4399 	jreq 3$
      002F2B                       4400 	_unget_token  
      002F2B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F30 81               [ 4] 4401 3$:	ret 
                                   4402 
                                   4403 
                                   4404 ;-------------------------------
                                   4405 ; BASIC: SPIRD 	
                                   4406 ; read one byte from SPI 
                                   4407 ;-------------------------------
      002F31                       4408 spi_read:
      002F31 CD 2F 06         [ 4] 4409 	call spi_rcv_byte 
      002F34 5F               [ 1] 4410 	clrw x 
      002F35 97               [ 1] 4411 	ld xl,a 
      002F36 A6 84            [ 1] 4412 	ld a,#TK_INTGR 
      002F38 81               [ 4] 4413 	ret 
                                   4414 
                                   4415 ;------------------------------
                                   4416 ; BASIC: SPISEL 0|1 
                                   4417 ; set state of ~CS line
                                   4418 ; 0|1 deselect|select  
                                   4419 ;------------------------------
      002F39                       4420 spi_select:
      002F39 CD 17 47         [ 4] 4421 	call next_token 
      002F3C A1 84            [ 1] 4422 	cp a,#TK_INTGR 
      002F3E 27 03            [ 1] 4423 	jreq 1$
      002F40 CC 16 48         [ 2] 4424 	jp syntax_error 
      002F43 5D               [ 2] 4425 1$: tnzw x  
      002F44 27 05            [ 1] 4426 	jreq cs_high 
      002F46 72 1B 50 14      [ 1] 4427 	bres PE_ODR,#SPI_CS_BIT
      002F4A 81               [ 4] 4428 	ret 
      002F4B                       4429 cs_high: 
      002F4B 72 1A 50 14      [ 1] 4430 	bset PE_ODR,#SPI_CS_BIT
      002F4F 81               [ 4] 4431 	ret 
                                   4432 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4433 ;-------------------------------
                                   4434 ; BASIC: PAD 
                                   4435 ; Return pad buffer address.
                                   4436 ;------------------------------
      002F50                       4437 pad_ref:
      002F50 AE 16 B8         [ 2] 4438 	ldw x,#pad 
      002F53 B6 84            [ 1] 4439 	ld a,TK_INTGR
      002F55 81               [ 4] 4440 	ret 
                                   4441 
                                   4442 
                                   4443 ;------------------------------
                                   4444 ;      dictionary 
                                   4445 ; format:
                                   4446 ;   link:   2 bytes 
                                   4447 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4448 ;   cmd_name: 16 byte max 
                                   4449 ;   cmd_index: 2 bytes 
                                   4450 ;------------------------------
                                   4451 	.macro _dict_entry len,name,cmd_idx 
                                   4452 	.word LINK 
                                   4453 	LINK=.
                                   4454 name:
                                   4455 	.byte len 	
                                   4456 	.ascii "name"
                                   4457 	.word cmd_idx 
                                   4458 	.endm 
                                   4459 
                           000000  4460 	LINK=0
                                   4461 ; respect alphabetic order for BASIC names from Z-A
                                   4462 ; this sort order is for a cleaner WORDS cmd output. 	
      002F56                       4463 kword_end:
      002F56                       4464 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002F56 00 00                    1 	.word LINK 
                           002F58     2 	LINK=.
      002F58                          3 XOR:
      002F58 43                       4 	.byte 3+F_IFUNC 	
      002F59 58 4F 52                 5 	.ascii "XOR"
      002F5C 00 BE                    6 	.word XOR_IDX 
      002F5E                       4465 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002F5E 2F 58                    1 	.word LINK 
                           002F60     2 	LINK=.
      002F60                          3 WRITE:
      002F60 05                       4 	.byte 5 	
      002F61 57 52 49 54 45           5 	.ascii "WRITE"
      002F66 00 BC                    6 	.word WRITE_IDX 
      002F68                       4466 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002F68 2F 60                    1 	.word LINK 
                           002F6A     2 	LINK=.
      002F6A                          3 WORDS:
      002F6A 05                       4 	.byte 5 	
      002F6B 57 4F 52 44 53           5 	.ascii "WORDS"
      002F70 00 BA                    6 	.word WORDS_IDX 
      002F72                       4467 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002F72 2F 6A                    1 	.word LINK 
                           002F74     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      002F74                          3 WAIT:
      002F74 04                       4 	.byte 4 	
      002F75 57 41 49 54              5 	.ascii "WAIT"
      002F79 00 B8                    6 	.word WAIT_IDX 
      002F7B                       4468 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002F7B 2F 74                    1 	.word LINK 
                           002F7D     2 	LINK=.
      002F7D                          3 USR:
      002F7D 43                       4 	.byte 3+F_IFUNC 	
      002F7E 55 53 52                 5 	.ascii "USR"
      002F81 00 B6                    6 	.word USR_IDX 
      002F83                       4469 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      002F83 2F 7D                    1 	.word LINK 
                           002F85     2 	LINK=.
      002F85                          3 UNTIL:
      002F85 05                       4 	.byte 5 	
      002F86 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002F8B 00 B4                    6 	.word UNTIL_IDX 
      002F8D                       4470 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002F8D 2F 85                    1 	.word LINK 
                           002F8F     2 	LINK=.
      002F8F                          3 UFLASH:
      002F8F 46                       4 	.byte 6+F_IFUNC 	
      002F90 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002F96 00 B2                    6 	.word UFLASH_IDX 
      002F98                       4471 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002F98 2F 8F                    1 	.word LINK 
                           002F9A     2 	LINK=.
      002F9A                          3 UBOUND:
      002F9A 46                       4 	.byte 6+F_IFUNC 	
      002F9B 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002FA1 00 B0                    6 	.word UBOUND_IDX 
      002FA3                       4472 	_dict_entry,4,TONE,TONE_IDX;tone  
      002FA3 2F 9A                    1 	.word LINK 
                           002FA5     2 	LINK=.
      002FA5                          3 TONE:
      002FA5 04                       4 	.byte 4 	
      002FA6 54 4F 4E 45              5 	.ascii "TONE"
      002FAA 00 AE                    6 	.word TONE_IDX 
      002FAC                       4473 	_dict_entry,2,TO,TO_IDX;to
      002FAC 2F A5                    1 	.word LINK 
                           002FAE     2 	LINK=.
      002FAE                          3 TO:
      002FAE 02                       4 	.byte 2 	
      002FAF 54 4F                    5 	.ascii "TO"
      002FB1 00 AC                    6 	.word TO_IDX 
      002FB3                       4474 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      002FB3 2F AE                    1 	.word LINK 
                           002FB5     2 	LINK=.
      002FB5                          3 TIMER:
      002FB5 05                       4 	.byte 5 	
      002FB6 54 49 4D 45 52           5 	.ascii "TIMER"
      002FBB 00 A8                    6 	.word TIMER_IDX 
      002FBD                       4475 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      002FBD 2F B5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



                           002FBF     2 	LINK=.
      002FBF                          3 TIMEOUT:
      002FBF 47                       4 	.byte 7+F_IFUNC 	
      002FC0 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002FC7 00 AA                    6 	.word TMROUT_IDX 
      002FC9                       4476 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002FC9 2F BF                    1 	.word LINK 
                           002FCB     2 	LINK=.
      002FCB                          3 TICKS:
      002FCB 45                       4 	.byte 5+F_IFUNC 	
      002FCC 54 49 43 4B 53           5 	.ascii "TICKS"
      002FD1 00 A6                    6 	.word TICKS_IDX 
      002FD3                       4477 	_dict_entry,4,STOP,STOP_IDX;stop 
      002FD3 2F CB                    1 	.word LINK 
                           002FD5     2 	LINK=.
      002FD5                          3 STOP:
      002FD5 04                       4 	.byte 4 	
      002FD6 53 54 4F 50              5 	.ascii "STOP"
      002FDA 00 A4                    6 	.word STOP_IDX 
      002FDC                       4478 	_dict_entry,4,STEP,STEP_IDX;step 
      002FDC 2F D5                    1 	.word LINK 
                           002FDE     2 	LINK=.
      002FDE                          3 STEP:
      002FDE 04                       4 	.byte 4 	
      002FDF 53 54 45 50              5 	.ascii "STEP"
      002FE3 00 A2                    6 	.word STEP_IDX 
      002FE5                       4479 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002FE5 2F DE                    1 	.word LINK 
                           002FE7     2 	LINK=.
      002FE7                          3 SPIWR:
      002FE7 05                       4 	.byte 5 	
      002FE8 53 50 49 57 52           5 	.ascii "SPIWR"
      002FED 00 A0                    6 	.word SPIWR_IDX 
      002FEF                       4480 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      002FEF 2F E7                    1 	.word LINK 
                           002FF1     2 	LINK=.
      002FF1                          3 SPISEL:
      002FF1 06                       4 	.byte 6 	
      002FF2 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002FF8 00 9E                    6 	.word SPISEL_IDX 
      002FFA                       4481 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      002FFA 2F F1                    1 	.word LINK 
                           002FFC     2 	LINK=.
      002FFC                          3 SPIRD:
      002FFC 45                       4 	.byte 5+F_IFUNC 	
      002FFD 53 50 49 52 44           5 	.ascii "SPIRD"
      003002 00 9A                    6 	.word SPIRD_IDX 
      003004                       4482 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      003004 2F FC                    1 	.word LINK 
                           003006     2 	LINK=.
      003006                          3 SPIEN:
      003006 05                       4 	.byte 5 	
      003007 53 50 49 45 4E           5 	.ascii "SPIEN"
      00300C 00 9C                    6 	.word SPIEN_IDX 
      00300E                       4483 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      00300E 30 06                    1 	.word LINK 
                           003010     2 	LINK=.
      003010                          3 SLEEP:
      003010 05                       4 	.byte 5 	
      003011 53 4C 45 45 50           5 	.ascii "SLEEP"
      003016 00 98                    6 	.word SLEEP_IDX 
      003018                       4484     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      003018 30 10                    1 	.word LINK 
                           00301A     2 	LINK=.
      00301A                          3 SIZE:
      00301A 04                       4 	.byte 4 	
      00301B 53 49 5A 45              5 	.ascii "SIZE"
      00301F 00 C0                    6 	.word SIZE_IDX 
      003021                       4485 	_dict_entry,4,SHOW,SHOW_IDX;show 
      003021 30 1A                    1 	.word LINK 
                           003023     2 	LINK=.
      003023                          3 SHOW:
      003023 04                       4 	.byte 4 	
      003024 53 48 4F 57              5 	.ascii "SHOW"
      003028 00 94                    6 	.word SHOW_IDX 
      00302A                       4486 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      00302A 30 23                    1 	.word LINK 
                           00302C     2 	LINK=.
      00302C                          3 SAVE:
      00302C 04                       4 	.byte 4 	
      00302D 53 41 56 45              5 	.ascii "SAVE"
      003031 00 34                    6 	.word SAVE_IDX 
      003033                       4487 	_dict_entry 3,RUN,RUN_IDX;run
      003033 30 2C                    1 	.word LINK 
                           003035     2 	LINK=.
      003035                          3 RUN:
      003035 03                       4 	.byte 3 	
      003036 52 55 4E                 5 	.ascii "RUN"
      003039 00 92                    6 	.word RUN_IDX 
      00303B                       4488 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      00303B 30 35                    1 	.word LINK 
                           00303D     2 	LINK=.
      00303D                          3 RSHIFT:
      00303D 46                       4 	.byte 6+F_IFUNC 	
      00303E 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      003044 00 90                    6 	.word RSHIFT_IDX 
      003046                       4489 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      003046 30 3D                    1 	.word LINK 
                           003048     2 	LINK=.
      003048                          3 RND:
      003048 43                       4 	.byte 3+F_IFUNC 	
      003049 52 4E 44                 5 	.ascii "RND"
      00304C 00 8E                    6 	.word RND_IDX 
      00304E                       4490 	_dict_entry,6,RETURN,RET_IDX;return 
      00304E 30 48                    1 	.word LINK 
                           003050     2 	LINK=.
      003050                          3 RETURN:
      003050 06                       4 	.byte 6 	
      003051 52 45 54 55 52 4E        5 	.ascii "RETURN"
      003057 00 8C                    6 	.word RET_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003059                       4491 	_dict_entry,7,RESTORE,REST_IDX;restore 
      003059 30 50                    1 	.word LINK 
                           00305B     2 	LINK=.
      00305B                          3 RESTORE:
      00305B 07                       4 	.byte 7 	
      00305C 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003063 00 8A                    6 	.word REST_IDX 
      003065                       4492 	_dict_entry 3,REM,REM_IDX;remark 
      003065 30 5B                    1 	.word LINK 
                           003067     2 	LINK=.
      003067                          3 REM:
      003067 03                       4 	.byte 3 	
      003068 52 45 4D                 5 	.ascii "REM"
      00306B 00 88                    6 	.word REM_IDX 
      00306D                       4493 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      00306D 30 67                    1 	.word LINK 
                           00306F     2 	LINK=.
      00306F                          3 REBOOT:
      00306F 06                       4 	.byte 6 	
      003070 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      003076 00 86                    6 	.word RBT_IDX 
      003078                       4494 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      003078 30 6F                    1 	.word LINK 
                           00307A     2 	LINK=.
      00307A                          3 READ:
      00307A 44                       4 	.byte 4+F_IFUNC 	
      00307B 52 45 41 44              5 	.ascii "READ"
      00307F 00 84                    6 	.word READ_IDX 
      003081                       4495 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      003081 30 7A                    1 	.word LINK 
                           003083     2 	LINK=.
      003083                          3 QKEY:
      003083 44                       4 	.byte 4+F_IFUNC 	
      003084 51 4B 45 59              5 	.ascii "QKEY"
      003088 00 82                    6 	.word QKEY_IDX 
      00308A                       4496 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      00308A 30 83                    1 	.word LINK 
                           00308C     2 	LINK=.
      00308C                          3 PRTI:
      00308C 44                       4 	.byte 4+F_IFUNC 	
      00308D 50 52 54 49              5 	.ascii "PRTI"
      003091 00 80                    6 	.word PRTI_IDX 
      003093                       4497 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      003093 30 8C                    1 	.word LINK 
                           003095     2 	LINK=.
      003095                          3 PRTH:
      003095 44                       4 	.byte 4+F_IFUNC 	
      003096 50 52 54 48              5 	.ascii "PRTH"
      00309A 00 7E                    6 	.word PRTH_IDX 
      00309C                       4498 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      00309C 30 95                    1 	.word LINK 
                           00309E     2 	LINK=.
      00309E                          3 PRTG:
      00309E 44                       4 	.byte 4+F_IFUNC 	
      00309F 50 52 54 47              5 	.ascii "PRTG"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      0030A3 00 7C                    6 	.word PRTG_IDX 
      0030A5                       4499 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      0030A5 30 9E                    1 	.word LINK 
                           0030A7     2 	LINK=.
      0030A7                          3 PRTF:
      0030A7 44                       4 	.byte 4+F_IFUNC 	
      0030A8 50 52 54 46              5 	.ascii "PRTF"
      0030AC 00 7A                    6 	.word PRTF_IDX 
      0030AE                       4500 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      0030AE 30 A7                    1 	.word LINK 
                           0030B0     2 	LINK=.
      0030B0                          3 PRTE:
      0030B0 44                       4 	.byte 4+F_IFUNC 	
      0030B1 50 52 54 45              5 	.ascii "PRTE"
      0030B5 00 78                    6 	.word PRTE_IDX 
      0030B7                       4501 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      0030B7 30 B0                    1 	.word LINK 
                           0030B9     2 	LINK=.
      0030B9                          3 PRTD:
      0030B9 44                       4 	.byte 4+F_IFUNC 	
      0030BA 50 52 54 44              5 	.ascii "PRTD"
      0030BE 00 76                    6 	.word PRTD_IDX 
      0030C0                       4502 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      0030C0 30 B9                    1 	.word LINK 
                           0030C2     2 	LINK=.
      0030C2                          3 PRTC:
      0030C2 44                       4 	.byte 4+F_IFUNC 	
      0030C3 50 52 54 43              5 	.ascii "PRTC"
      0030C7 00 74                    6 	.word PRTC_IDX 
      0030C9                       4503 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      0030C9 30 C2                    1 	.word LINK 
                           0030CB     2 	LINK=.
      0030CB                          3 PRTB:
      0030CB 44                       4 	.byte 4+F_IFUNC 	
      0030CC 50 52 54 42              5 	.ascii "PRTB"
      0030D0 00 72                    6 	.word PRTB_IDX 
      0030D2                       4504 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      0030D2 30 CB                    1 	.word LINK 
                           0030D4     2 	LINK=.
      0030D4                          3 PRTA:
      0030D4 44                       4 	.byte 4+F_IFUNC 	
      0030D5 50 52 54 41              5 	.ascii "PRTA"
      0030D9 00 70                    6 	.word PRTA_IDX 
      0030DB                       4505 	_dict_entry 5,PRINT,PRT_IDX;print 
      0030DB 30 D4                    1 	.word LINK 
                           0030DD     2 	LINK=.
      0030DD                          3 PRINT:
      0030DD 05                       4 	.byte 5 	
      0030DE 50 52 49 4E 54           5 	.ascii "PRINT"
      0030E3 00 6E                    6 	.word PRT_IDX 
      0030E5                       4506 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      0030E5 30 DD                    1 	.word LINK 
                           0030E7     2 	LINK=.
      0030E7                          3 POUT:
      0030E7 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0030E8 50 4F 55 54              5 	.ascii "POUT"
      0030EC 00 6C                    6 	.word POUT_IDX 
      0030EE                       4507 	_dict_entry,4,POKE,POKE_IDX;poke 
      0030EE 30 E7                    1 	.word LINK 
                           0030F0     2 	LINK=.
      0030F0                          3 POKE:
      0030F0 04                       4 	.byte 4 	
      0030F1 50 4F 4B 45              5 	.ascii "POKE"
      0030F5 00 6A                    6 	.word POKE_IDX 
      0030F7                       4508 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      0030F7 30 F0                    1 	.word LINK 
                           0030F9     2 	LINK=.
      0030F9                          3 PMODE:
      0030F9 05                       4 	.byte 5 	
      0030FA 50 4D 4F 44 45           5 	.ascii "PMODE"
      0030FF 00 64                    6 	.word PMODE_IDX 
      003101                       4509 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      003101 30 F9                    1 	.word LINK 
                           003103     2 	LINK=.
      003103                          3 PINP:
      003103 44                       4 	.byte 4+F_IFUNC 	
      003104 50 49 4E 50              5 	.ascii "PINP"
      003108 00 68                    6 	.word PINP_IDX 
      00310A                       4510 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      00310A 31 03                    1 	.word LINK 
                           00310C     2 	LINK=.
      00310C                          3 PEEK:
      00310C 44                       4 	.byte 4+F_IFUNC 	
      00310D 50 45 45 4B              5 	.ascii "PEEK"
      003111 00 66                    6 	.word PEEK_IDX 
      003113                       4511 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      003113 31 0C                    1 	.word LINK 
                           003115     2 	LINK=.
      003115                          3 PAUSE:
      003115 05                       4 	.byte 5 	
      003116 50 41 55 53 45           5 	.ascii "PAUSE"
      00311B 00 62                    6 	.word PAUSE_IDX 
      00311D                       4512 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      00311D 31 15                    1 	.word LINK 
                           00311F     2 	LINK=.
      00311F                          3 PAD:
      00311F 43                       4 	.byte 3+F_IFUNC 	
      003120 50 41 44                 5 	.ascii "PAD"
      003123 00 60                    6 	.word PAD_IDX 
      003125                       4513 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      003125 31 1F                    1 	.word LINK 
                           003127     2 	LINK=.
      003127                          3 OR:
      003127 42                       4 	.byte 2+F_IFUNC 	
      003128 4F 52                    5 	.ascii "OR"
      00312A 00 5E                    6 	.word OR_IDX 
      00312C                       4514 	_dict_entry,2,ON,ON_IDX; cmd_on 
      00312C 31 27                    1 	.word LINK 
                           00312E     2 	LINK=.
      00312E                          3 ON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      00312E 02                       4 	.byte 2 	
      00312F 4F 4E                    5 	.ascii "ON"
      003131 00 C2                    6 	.word ON_IDX 
      003133                       4515 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      003133 31 2E                    1 	.word LINK 
                           003135     2 	LINK=.
      003135                          3 ODR:
      003135 43                       4 	.byte 3+F_IFUNC 	
      003136 4F 44 52                 5 	.ascii "ODR"
      003139 00 5C                    6 	.word ODR_IDX 
      00313B                       4516 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      00313B 31 35                    1 	.word LINK 
                           00313D     2 	LINK=.
      00313D                          3 NOT:
      00313D 43                       4 	.byte 3+F_IFUNC 	
      00313E 4E 4F 54                 5 	.ascii "NOT"
      003141 00 5A                    6 	.word NOT_IDX 
      003143                       4517 	_dict_entry,4,NEXT,NEXT_IDX;next 
      003143 31 3D                    1 	.word LINK 
                           003145     2 	LINK=.
      003145                          3 NEXT:
      003145 04                       4 	.byte 4 	
      003146 4E 45 58 54              5 	.ascii "NEXT"
      00314A 00 56                    6 	.word NEXT_IDX 
      00314C                       4518 	_dict_entry,3,NEW,NEW_IDX;new
      00314C 31 45                    1 	.word LINK 
                           00314E     2 	LINK=.
      00314E                          3 NEW:
      00314E 03                       4 	.byte 3 	
      00314F 4E 45 57                 5 	.ascii "NEW"
      003152 00 58                    6 	.word NEW_IDX 
                                   4519 ;	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      003154                       4520 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      003154 31 4E                    1 	.word LINK 
                           003156     2 	LINK=.
      003156                          3 LSHIFT:
      003156 46                       4 	.byte 6+F_IFUNC 	
      003157 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00315D 00 54                    6 	.word LSHIFT_IDX 
      00315F                       4521 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      00315F 31 56                    1 	.word LINK 
                           003161     2 	LINK=.
      003161                          3 LOG:
      003161 43                       4 	.byte 3+F_IFUNC 	
      003162 4C 4F 47                 5 	.ascii "LOG"
      003165 00 52                    6 	.word LOG_IDX 
      003167                       4522 	_dict_entry 4,LIST,LIST_IDX;list
      003167 31 61                    1 	.word LINK 
                           003169     2 	LINK=.
      003169                          3 LIST:
      003169 04                       4 	.byte 4 	
      00316A 4C 49 53 54              5 	.ascii "LIST"
      00316E 00 50                    6 	.word LIST_IDX 
      003170                       4523 	_dict_entry 3,LET,LET_IDX;let 
      003170 31 69                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                           003172     2 	LINK=.
      003172                          3 LET:
      003172 03                       4 	.byte 3 	
      003173 4C 45 54                 5 	.ascii "LET"
      003176 00 4E                    6 	.word LET_IDX 
      003178                       4524 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      003178 31 72                    1 	.word LINK 
                           00317A     2 	LINK=.
      00317A                          3 KEY:
      00317A 83                       4 	.byte 3+F_CFUNC 	
      00317B 4B 45 59                 5 	.ascii "KEY"
      00317E 00 4C                    6 	.word KEY_IDX 
      003180                       4525 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      003180 31 7A                    1 	.word LINK 
                           003182     2 	LINK=.
      003182                          3 IWDGREF:
      003182 07                       4 	.byte 7 	
      003183 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00318A 00 4A                    6 	.word IWDGREF_IDX 
      00318C                       4526 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      00318C 31 82                    1 	.word LINK 
                           00318E     2 	LINK=.
      00318E                          3 IWDGEN:
      00318E 06                       4 	.byte 6 	
      00318F 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003195 00 48                    6 	.word IWDGEN_IDX 
      003197                       4527 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      003197 31 8E                    1 	.word LINK 
                           003199     2 	LINK=.
      003199                          3 INVERT:
      003199 46                       4 	.byte 6+F_IFUNC 	
      00319A 49 4E 56 45 52 54        5 	.ascii "INVERT"
      0031A0 00 46                    6 	.word INVERT_IDX 
      0031A2                       4528 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      0031A2 31 99                    1 	.word LINK 
                           0031A4     2 	LINK=.
      0031A4                          3 INPUT:
      0031A4 05                       4 	.byte 5 	
      0031A5 49 4E 50 55 54           5 	.ascii "INPUT"
      0031AA 00 44                    6 	.word INPUT_IDX 
      0031AC                       4529 	_dict_entry,2,IF,IF_IDX;if 
      0031AC 31 A4                    1 	.word LINK 
                           0031AE     2 	LINK=.
      0031AE                          3 IF:
      0031AE 02                       4 	.byte 2 	
      0031AF 49 46                    5 	.ascii "IF"
      0031B1 00 42                    6 	.word IF_IDX 
      0031B3                       4530 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      0031B3 31 AE                    1 	.word LINK 
                           0031B5     2 	LINK=.
      0031B5                          3 IDR:
      0031B5 43                       4 	.byte 3+F_IFUNC 	
      0031B6 49 44 52                 5 	.ascii "IDR"
      0031B9 00 40                    6 	.word IDR_IDX 
      0031BB                       4531 	_dict_entry,3,HEX,HEX_IDX;hex_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0031BB 31 B5                    1 	.word LINK 
                           0031BD     2 	LINK=.
      0031BD                          3 HEX:
      0031BD 03                       4 	.byte 3 	
      0031BE 48 45 58                 5 	.ascii "HEX"
      0031C1 00 3E                    6 	.word HEX_IDX 
      0031C3                       4532 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      0031C3 31 BD                    1 	.word LINK 
                           0031C5     2 	LINK=.
      0031C5                          3 GPIO:
      0031C5 44                       4 	.byte 4+F_IFUNC 	
      0031C6 47 50 49 4F              5 	.ascii "GPIO"
      0031CA 00 3C                    6 	.word GPIO_IDX 
      0031CC                       4533 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0031CC 31 C5                    1 	.word LINK 
                           0031CE     2 	LINK=.
      0031CE                          3 GOTO:
      0031CE 04                       4 	.byte 4 	
      0031CF 47 4F 54 4F              5 	.ascii "GOTO"
      0031D3 00 3A                    6 	.word GOTO_IDX 
      0031D5                       4534 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0031D5 31 CE                    1 	.word LINK 
                           0031D7     2 	LINK=.
      0031D7                          3 GOSUB:
      0031D7 05                       4 	.byte 5 	
      0031D8 47 4F 53 55 42           5 	.ascii "GOSUB"
      0031DD 00 38                    6 	.word GOSUB_IDX 
      0031DF                       4535 	_dict_entry,3,GET,GET_IDX; cmd_get 
      0031DF 31 D7                    1 	.word LINK 
                           0031E1     2 	LINK=.
      0031E1                          3 GET:
      0031E1 03                       4 	.byte 3 	
      0031E2 47 45 54                 5 	.ascii "GET"
      0031E5 00 C4                    6 	.word GET_IDX 
      0031E7                       4536 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      0031E7 31 E1                    1 	.word LINK 
                           0031E9     2 	LINK=.
      0031E9                          3 FREE:
      0031E9 44                       4 	.byte 4+F_IFUNC 	
      0031EA 46 52 45 45              5 	.ascii "FREE"
      0031EE 00 96                    6 	.word FREE_IDX 
      0031F0                       4537 	_dict_entry,3,FOR,FOR_IDX;for 
      0031F0 31 E9                    1 	.word LINK 
                           0031F2     2 	LINK=.
      0031F2                          3 FOR:
      0031F2 03                       4 	.byte 3 	
      0031F3 46 4F 52                 5 	.ascii "FOR"
      0031F6 00 36                    6 	.word FOR_IDX 
      0031F8                       4538 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      0031F8 31 F2                    1 	.word LINK 
                           0031FA     2 	LINK=.
      0031FA                          3 FCPU:
      0031FA 04                       4 	.byte 4 	
      0031FB 46 43 50 55              5 	.ascii "FCPU"
      0031FF 00 32                    6 	.word FCPU_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      003201                       4539 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      003201 31 FA                    1 	.word LINK 
                           003203     2 	LINK=.
      003203                          3 ERASE:
      003203 05                       4 	.byte 5 	
      003204 45 52 41 53 45           5 	.ascii "ERASE"
      003209 00 30                    6 	.word ERASE_IDX 
      00320B                       4540 	_dict_entry,3,END,END_IDX;cmd_end  
      00320B 32 03                    1 	.word LINK 
                           00320D     2 	LINK=.
      00320D                          3 END:
      00320D 03                       4 	.byte 3 	
      00320E 45 4E 44                 5 	.ascii "END"
      003211 00 2E                    6 	.word END_IDX 
      003213                       4541 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      003213 32 0D                    1 	.word LINK 
                           003215     2 	LINK=.
      003215                          3 EEPROM:
      003215 46                       4 	.byte 6+F_IFUNC 	
      003216 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00321C 00 2C                    6 	.word EEPROM_IDX 
      00321E                       4542 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      00321E 32 15                    1 	.word LINK 
                           003220     2 	LINK=.
      003220                          3 EEFREE:
      003220 46                       4 	.byte 6+F_IFUNC 	
      003221 45 45 46 52 45 45        5 	.ascii "EEFREE"
      003227 00 C8                    6 	.word EEFREE_IDX 
      003229                       4543 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      003229 32 20                    1 	.word LINK 
                           00322B     2 	LINK=.
      00322B                          3 EDIT:
      00322B 04                       4 	.byte 4 	
      00322C 45 44 49 54              5 	.ascii "EDIT"
      003230 00 2A                    6 	.word EDIT_IDX 
      003232                       4544 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      003232 32 2B                    1 	.word LINK 
                           003234     2 	LINK=.
      003234                          3 DWRITE:
      003234 06                       4 	.byte 6+F_CMD 	
      003235 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00323B 00 28                    6 	.word DWRITE_IDX 
      00323D                       4545 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      00323D 32 34                    1 	.word LINK 
                           00323F     2 	LINK=.
      00323F                          3 DREAD:
      00323F 45                       4 	.byte 5+F_IFUNC 	
      003240 44 52 45 41 44           5 	.ascii "DREAD"
      003245 00 26                    6 	.word DREAD_IDX 
      003247                       4546 	_dict_entry,2,DO,DO_IDX;do_loop
      003247 32 3F                    1 	.word LINK 
                           003249     2 	LINK=.
      003249                          3 DO:
      003249 02                       4 	.byte 2 	
      00324A 44 4F                    5 	.ascii "DO"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      00324C 00 24                    6 	.word DO_IDX 
      00324E                       4547 	_dict_entry,3,DEC,DEC_IDX;dec_base
      00324E 32 49                    1 	.word LINK 
                           003250     2 	LINK=.
      003250                          3 DEC:
      003250 03                       4 	.byte 3 	
      003251 44 45 43                 5 	.ascii "DEC"
      003254 00 22                    6 	.word DEC_IDX 
      003256                       4548 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      003256 32 50                    1 	.word LINK 
                           003258     2 	LINK=.
      003258                          3 DDR:
      003258 43                       4 	.byte 3+F_IFUNC 	
      003259 44 44 52                 5 	.ascii "DDR"
      00325C 00 20                    6 	.word DDR_IDX 
      00325E                       4549 	_dict_entry,4,DATA,DATA_IDX;data  
      00325E 32 58                    1 	.word LINK 
                           003260     2 	LINK=.
      003260                          3 DATA:
      003260 04                       4 	.byte 4 	
      003261 44 41 54 41              5 	.ascii "DATA"
      003265 00 1E                    6 	.word DATA_IDX 
      003267                       4550 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      003267 32 60                    1 	.word LINK 
                           003269     2 	LINK=.
      003269                          3 CRL:
      003269 43                       4 	.byte 3+F_IFUNC 	
      00326A 43 52 4C                 5 	.ascii "CRL"
      00326D 00 1C                    6 	.word CRL_IDX 
      00326F                       4551 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      00326F 32 69                    1 	.word LINK 
                           003271     2 	LINK=.
      003271                          3 CRH:
      003271 43                       4 	.byte 3+F_IFUNC 	
      003272 43 52 48                 5 	.ascii "CRH"
      003275 00 1A                    6 	.word CRH_IDX 
      003277                       4552 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      003277 32 71                    1 	.word LINK 
                           003279     2 	LINK=.
      003279                          3 CONST:
      003279 05                       4 	.byte 5 	
      00327A 43 4F 4E 53 54           5 	.ascii "CONST"
      00327F 00 C6                    6 	.word CONST_IDX 
      003281                       4553 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      003281 32 79                    1 	.word LINK 
                           003283     2 	LINK=.
      003283                          3 CHAR:
      003283 84                       4 	.byte 4+F_CFUNC 	
      003284 43 48 41 52              5 	.ascii "CHAR"
      003288 00 18                    6 	.word CHAR_IDX 
      00328A                       4554 	_dict_entry,3,BYE,BYE_IDX;bye 
      00328A 32 83                    1 	.word LINK 
                           00328C     2 	LINK=.
      00328C                          3 BYE:
      00328C 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00328D 42 59 45                 5 	.ascii "BYE"
      003290 00 16                    6 	.word BYE_IDX 
      003292                       4555 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      003292 32 8C                    1 	.word LINK 
                           003294     2 	LINK=.
      003294                          3 BTOGL:
      003294 05                       4 	.byte 5 	
      003295 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00329A 00 14                    6 	.word BTOGL_IDX 
      00329C                       4556 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00329C 32 94                    1 	.word LINK 
                           00329E     2 	LINK=.
      00329E                          3 BTEST:
      00329E 45                       4 	.byte 5+F_IFUNC 	
      00329F 42 54 45 53 54           5 	.ascii "BTEST"
      0032A4 00 12                    6 	.word BTEST_IDX 
      0032A6                       4557 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      0032A6 32 9E                    1 	.word LINK 
                           0032A8     2 	LINK=.
      0032A8                          3 BSET:
      0032A8 04                       4 	.byte 4 	
      0032A9 42 53 45 54              5 	.ascii "BSET"
      0032AD 00 10                    6 	.word BSET_IDX 
      0032AF                       4558 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      0032AF 32 A8                    1 	.word LINK 
                           0032B1     2 	LINK=.
      0032B1                          3 BRES:
      0032B1 04                       4 	.byte 4 	
      0032B2 42 52 45 53              5 	.ascii "BRES"
      0032B6 00 0E                    6 	.word BRES_IDX 
      0032B8                       4559 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0032B8 32 B1                    1 	.word LINK 
                           0032BA     2 	LINK=.
      0032BA                          3 BIT:
      0032BA 43                       4 	.byte 3+F_IFUNC 	
      0032BB 42 49 54                 5 	.ascii "BIT"
      0032BE 00 0C                    6 	.word BIT_IDX 
      0032C0                       4560 	_dict_entry,3,AWU,AWU_IDX;awu 
      0032C0 32 BA                    1 	.word LINK 
                           0032C2     2 	LINK=.
      0032C2                          3 AWU:
      0032C2 03                       4 	.byte 3 	
      0032C3 41 57 55                 5 	.ascii "AWU"
      0032C6 00 0A                    6 	.word AWU_IDX 
      0032C8                       4561 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0032C8 32 C2                    1 	.word LINK 
                           0032CA     2 	LINK=.
      0032CA                          3 ASC:
      0032CA 43                       4 	.byte 3+F_IFUNC 	
      0032CB 41 53 43                 5 	.ascii "ASC"
      0032CE 00 08                    6 	.word ASC_IDX 
      0032D0                       4562 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0032D0 32 CA                    1 	.word LINK 
                           0032D2     2 	LINK=.
      0032D2                          3 AND:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0032D2 43                       4 	.byte 3+F_IFUNC 	
      0032D3 41 4E 44                 5 	.ascii "AND"
      0032D6 00 06                    6 	.word AND_IDX 
      0032D8                       4563 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0032D8 32 D2                    1 	.word LINK 
                           0032DA     2 	LINK=.
      0032DA                          3 ADCREAD:
      0032DA 47                       4 	.byte 7+F_IFUNC 	
      0032DB 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0032E2 00 04                    6 	.word ADCREAD_IDX 
      0032E4                       4564 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      0032E4 32 DA                    1 	.word LINK 
                           0032E6     2 	LINK=.
      0032E6                          3 ADCON:
      0032E6 05                       4 	.byte 5 	
      0032E7 41 44 43 4F 4E           5 	.ascii "ADCON"
      0032EC 00 02                    6 	.word ADCON_IDX 
      0032EE                       4565 kword_dict::
      0032EE                       4566 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      0032EE 32 E6                    1 	.word LINK 
                           0032F0     2 	LINK=.
      0032F0                          3 ABS:
      0032F0 43                       4 	.byte 3+F_IFUNC 	
      0032F1 41 42 53                 5 	.ascii "ABS"
      0032F4 00 00                    6 	.word ABS_IDX 
                                   4567 
                                   4568 ;comands and fonctions address table 	
      0032F6                       4569 code_addr::
      0032F6 29 AF 24 EF 25 3F 29  4570 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             BF 28 39 29 4D 2C E4
      003304 20 B8 20 96 20 FD 20  4571 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             DB 29 18 28 22 2D B6
      003312 2D B0 2D CE 2D AA 1B  4572 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             55 2D 1A 25 7B 25 B3
      003320 1E B9 2D C8 24 5B 26  4573 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             54 2A AA 26 F0 21 8E
             23 BB 23 A1 28 89
      003334 1B 50 2D A4 21 6D 1F  4574 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             B6 2D 04 2C 73 2C B1
             28 78
      003344 1B AE 1E 14 2C B6 2A  4575 	.word let,list,log2,lshift,next,new ; 40..47
             50 22 3A 26 4A
      003350 2C 63 2D 9E 29 EC 2F  4576 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             50 29 2C 2A B9 21 55
             2D C2
      003360 21 34 2D BC 1F 21 2D  4577 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             68 2D 6E 2D 74 2D 7A
             2D 80
      003370 2D 86 2D 8C 2D 92 2D  4578 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             98 28 7C 2E 3F 00 B2
             20 53
      003380 2D FF 23 E1 2B 46 2A  4579 	.word restore,return, random,rshift,run,show,free ; 72..79
             7D 23 FF 1A CE 1B 5A
      00338E 29 21 2F 31 2E 99 2F  4580 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             39 2F 11 21 F6 25 FE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



             29 9F
      00339E 2C 33 2C 4A 21 B8 24  4581 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             98 1B A3 28 C4 2D 2E
             28 D9
      0033AE 20 59 2B CD 27 DF 2A  4582 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             1E 1B 76 23 15 24 62
             1C D4
      0033BE 1C 67 00 00           4583 	.word func_eefree,0 
                                   4584 
                                   4585 
                                   4586 
                                   4587 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0033C2                         30 test:
      0033C2                         31     _vars VSIZE 
      0033C2 52 08            [ 2]    1     sub sp,#VSIZE 
      0033C4 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0033C7 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0033C9 CE 00 0F         [ 2]   34     ldw x,ticks 
      0033CC 1F 01            [ 2]   35     ldw (T,sp),x
      0033CE                         36 1$: ; test add24 
      0033CE A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0033D0 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0033D3 C7 00 0C         [ 1]   39     ld acc24,a 
      0033D6 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0033D9 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0033DB AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0033DE CD 01 58         [ 4]   43     call add24 
      0033E1 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0033E3 1D 00 01         [ 2]   45     subw x,#1
      0033E6 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0033E8 26 E4            [ 1]   47     jrne 1$
      0033EA CD 17 AD         [ 4]   48     call prt_acc24
      0033ED A6 20            [ 1]   49     ld a,#SPACE 
      0033EF CD 08 FD         [ 4]   50     call putc 
      0033F2 CE 00 0F         [ 2]   51     ldw x,ticks 
      0033F5 72 F0 01         [ 2]   52     subw x,(T,sp)
      0033F8 CD 17 9D         [ 4]   53     call prt_i16  
      0033FB A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      0033FD CD 08 FD         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003400 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003403 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003405 CE 00 0F         [ 2]   60     ldw x,ticks 
      003408 1F 01            [ 2]   61     ldw (T,sp),x 
      00340A                         62 2$: 
      00340A A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00340C AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      00340F C7 00 0C         [ 1]   65     ld acc24,a 
      003412 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003415 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003417 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00341A CD 02 21         [ 4]   69     call mul24 
      00341D 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      00341F 1D 00 01         [ 2]   71     subw x,#1
      003422 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003424 26 E4            [ 1]   73     jrne 2$ 
      003426 CD 17 AD         [ 4]   74    call prt_acc24 
      003429 A6 20            [ 1]   75    ld a,#SPACE 
      00342B CD 08 FD         [ 4]   76    call putc 
      00342E CE 00 0F         [ 2]   77     ldw x,ticks 
      003431 72 F0 01         [ 2]   78     subw x,(T,sp)
      003434 CD 17 9D         [ 4]   79     call prt_i16 
      003437 A6 0D            [ 1]   80     ld a,#CR 
      003439 CD 08 FD         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00343C CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00343F 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003441 CE 00 0F         [ 2]   85     ldw x,ticks 
      003444 1F 01            [ 2]   86     ldw (T,sp),x 
      003446                         87 3$: 
      003446 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003448 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      00344B C7 00 0C         [ 1]   90     ld acc24,a 
      00344E CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003451 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003453 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003456 CD 02 21         [ 4]   94     call mul24 
      003459 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      00345B 1D 00 01         [ 2]   96     subw x,#1
      00345E 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      003460 26 E4            [ 1]   98     jrne 3$ 
      003462 CD 17 AD         [ 4]   99     call prt_acc24    
      003465 A6 20            [ 1]  100     ld a,#SPACE 
      003467 CD 08 FD         [ 4]  101     call putc 
      00346A CE 00 0F         [ 2]  102     ldw x,ticks 
      00346D 72 F0 01         [ 2]  103     subw x,(T,sp)
      003470 CD 17 9D         [ 4]  104     call prt_i16 
      003473 A6 0D            [ 1]  105     ld a,#CR 
      003475 CD 08 FD         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003478 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00347B 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      00347D CE 00 0F         [ 2]  110     ldw x,ticks 
      003480 1F 01            [ 2]  111     ldw (T,sp),x 
      003482                        112 4$:
      003482 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003484 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003487 C7 00 0C         [ 1]  115     ld acc24,a 
      00348A CF 00 0D         [ 2]  116     ldw acc24+1,x  
      00348D A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      00348F AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      003492 CD 02 21         [ 4]  119     call mul24 
      003495 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003497 1D 00 01         [ 2]  121     subw x,#1
      00349A 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      00349C 26 E4            [ 1]  123     jrne 4$ 
      00349E CD 17 AD         [ 4]  124     call prt_acc24 
      0034A1 A6 20            [ 1]  125     ld a,#SPACE 
      0034A3 CD 08 FD         [ 4]  126     call putc 
      0034A6 CE 00 0F         [ 2]  127     ldw x,ticks 
      0034A9 72 F0 01         [ 2]  128     subw x,(T,sp)
      0034AC CD 17 9D         [ 4]  129     call prt_i16 
      0034AF A6 0D            [ 1]  130     ld a,#CR 
      0034B1 CD 08 FD         [ 4]  131     call putc 
                                    132 ; test abs24 
      0034B4 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0034B7 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0034B9 CE 00 0F         [ 2]  135     ldw x,ticks 
      0034BC 1F 01            [ 2]  136     ldw (T,sp),x 
      0034BE                        137 5$: 
      0034BE A6 FF            [ 1]  138     ld a,#0xff
      0034C0 AE FF FF         [ 2]  139     ldw x,#0xffff
      0034C3 CD 01 A3         [ 4]  140     call abs24 
      0034C6 C7 00 0C         [ 1]  141     ld acc24,a 
      0034C9 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0034CC 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0034CE 1D 00 01         [ 2]  144     subw x,#1
      0034D1 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0034D3 26 E9            [ 1]  146     jrne 5$ 
      0034D5 CD 17 AD         [ 4]  147     call prt_acc24 
      0034D8 A6 20            [ 1]  148     ld a,#SPACE 
      0034DA CD 08 FD         [ 4]  149     call putc 
      0034DD CE 00 0F         [ 2]  150     ldw x,ticks 
      0034E0 72 F0 01         [ 2]  151     subw x,(T,sp)
      0034E3 CD 17 9D         [ 4]  152     call prt_i16 
      0034E6                        153 6$:
      0034E6 A6 0D            [ 1]  154     ld a,#CR 
      0034E8 CD 08 FD         [ 4]  155     call putc 
      0034EB CD 35 31         [ 4]  156     call read_integer 
      0034EE 55 00 0C 00 17   [ 1]  157     mov farptr,acc24 
      0034F3 55 00 0D 00 18   [ 1]  158     mov farptr+1,acc16 
      0034F8 55 00 0E 00 19   [ 1]  159     mov farptr+2,acc8 
      0034FD CD 35 31         [ 4]  160     call read_integer 
      003500 C6 00 0C         [ 1]  161     ld a,acc24 
      003503 CE 00 0D         [ 2]  162     ldw x,acc16 
      003506 55 00 17 00 0C   [ 1]  163     mov acc24,farptr 
      00350B 55 00 18 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003510 55 00 19 00 0E   [ 1]  165     mov acc8,farptr+2 
      003515 CD 02 E5         [ 4]  166     call div24 
      003518 88               [ 1]  167     push a 
      003519 89               [ 2]  168     pushw x 
      00351A CD 17 AD         [ 4]  169     call prt_acc24 
      00351D A6 20            [ 1]  170     ld a,#SPACE 
      00351F CD 08 FD         [ 4]  171     call putc 
      003522 85               [ 2]  172     popw x
      003523 CF 00 0D         [ 2]  173     ldw acc16,x  
      003526 32 00 0C         [ 1]  174     pop acc24 
      003529 CD 17 AD         [ 4]  175     call prt_acc24
      00352C 20 B8            [ 2]  176     jra 6$
      00352E                        177     _drop VSIZE 
      00352E 5B 08            [ 2]    1     addw sp,#VSIZE 
      003530 81               [ 4]  178     ret 
                                    179 
                                    180 
      003531                        181 read_integer:
      003531 A6 3F            [ 1]  182     ld a,#'? 
      003533 CD 08 FD         [ 4]  183     call putc  
      003536 72 5F 00 03      [ 1]  184 	clr count  
      00353A CD 0A 5F         [ 4]  185 	call readln 
      00353D AE 16 68         [ 2]  186 	ldw x,#tib 
      003540 3B 00 03         [ 1]  187 	push count
      003543 4B 00            [ 1]  188 	push #0 
      003545 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003548 5C               [ 1]  190 	incw x 
      003549                        191 	_drop 2 
      003549 5B 02            [ 2]    1     addw sp,#2 
      00354B 72 5F 00 01      [ 1]  192 	clr in 
      00354F CD 0E C7         [ 4]  193 	call get_token
      003552 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003554 27 0F            [ 1]  195 	jreq 3$ 
      003556 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003558 CD 0E C7         [ 4]  197 	call get_token 
      00355B A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00355D 27 03            [ 1]  199 	jreq 2$
      00355F CC 16 48         [ 2]  200 	jp syntax_error
      003562                        201 2$:
      003562 CD 01 D1         [ 4]  202 	call neg_acc24  	
      003565                        203 3$: 
      003565 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003580                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003580                         30 app_space::
      003580 00 00                   31 app_sign: .word 0 ; .ascii "BC"  ; signature 
      003582 00 00                   32 app_size: .word 0 ; 31 
      003584                         33 app: 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 ;;  BASIC code demo 'BLINK.BAS' 
                                     36 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     37 ;; byte code generated by compiler.
                                     38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     39 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     40 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     41 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0032F0 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0032E6 R
    ADCON_ID=  000002     |   4 ADCREAD    0032DA R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        0032D2 R   |     AND_IDX =  000006     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        0032CA R
    ASC_IDX =  000008     |     ATTRIB  =  000002     |   4 AUTO_RUN   000145 R
  4 AWU        0032C2 R   |   4 AWUHandl   000004 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000A 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   4 BIT        0032BA R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BIT_IDX =  00000C     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000C 
  4 BRES       0032B1 R   |     BRES_IDX=  00000E     |     BS      =  000008 
  4 BSET       0032A8 R   |     BSET_IDX=  000010     |     BSIZE   =  000006 
  4 BTEST      00329E R   |     BTEST_ID=  000012     |   4 BTOGL      003294 R
    BTOGL_ID=  000014     |     BTW     =  000001     |     BUFPTR  =  000003 
  4 BYE        00328C R   |     BYE_IDX =  000016     |     C       =  000001 
    CAN     =  000018     |   4 CANT_DO    002787 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       003283 R
    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     COMMA   =  00002C     |   4 CONST      003279 R
  4 CONST_CO   001C51 R   |     CONST_ID=  0000C6     |     CONST_RE=  000005 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        003271 R
    CRH_IDX =  00001A     |   4 CRL        003269 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000008     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       003260 R
    DATA_IDX=  00001E     |     DBG_A   =  000008     |     DBG_CC  =  000009 
    DBG_X   =  000006     |     DBG_Y   =  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        003258 R   |     DDR_IDX =  000020     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        003250 R
    DEC_IDX =  000022     |     DEPTH   =  000001     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         003249 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000024     |   4 DREAD      00323F R
    DREAD_ID=  000026     |   4 DWRITE     003234 R   |     DWRITE_I=  000028 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       00322B R   |     EDIT_IDX=  00002A     |   4 EEFREE     003220 R
    EEFREE_I=  0000C8     |   4 EEPROM     003215 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002C     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        00320D R
    END_IDX =  00002E     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      003203 R   |     ERASE_ID=  000030 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       0031FA R   |     FCPU_IDX=  000032     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001DF4 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        0031F2 R   |     FOR_IDX =  000036 
  4 FREE       0031E9 R   |     FREE_IDX=  000096     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   4 GET        0031E1 R
    GET_IDX =  0000C4     |   4 GOSUB      0031D7 R   |     GOSUB_ID=  000038 
  4 GOTO       0031CE R   |     GOTO_IDX=  00003A     |   4 GPIO       0031C5 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003C 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        0031BD R   |     HEX_IDX =  00003E     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        0031B5 R   |     IDR_IDX =  000040 
  4 IF         0031AE R   |     IF_IDX  =  000042     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   4 INPUT      0031A4 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000044     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  4 INVERT     003199 R   |     INVERT_I=  000046     |     INW     =  00000A 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     00318E R   |     IWDGEN_I=  000048     |   4 IWDGREF    003182 R
    IWDGREF_=  00004A     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        00317A R
    KEY_END =  000083     |     KEY_IDX =  00004C     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   4 LET        003172 R
    LET_IDX =  00004E     |     LF      =  00000A     |     LIMIT   =  000001 
    LINENO  =  000005     |   4 LINK    =  0032F0 R   |   4 LIST       003169 R
    LIST_IDX=  000050     |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG        003161 R
    LOG_IDX =  000052     |     LOOP_CNT=  002710     |   4 LSHIFT     003156 R
    LSHIFT_I=  000054     |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000004     |     N2      =  000007     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000001     |     NCLKOPT =  004808 
    NEG     =  000001     |   4 NEW        00314E R   |     NEW_IDX =  000058 
  4 NEXT       003145 R   |     NEXT_IDX=  000056     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        00313D R   |     NOT_IDX =  00005A 
  4 NOT_SAVE   001EE6 R   |   4 NO_APP     0027C9 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R
  4 ODR        003135 R   |     ODR_IDX =  00005C     |   4 ON         00312E R
    ONOFF   =  000003     |     ON_IDX  =  0000C2     |     OP      =  000001 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   4 OR         003127 R   |     OR_IDX  =  00005E 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        00311F R   |     PAD_IDX =  000060 
    PAD_SIZE=  000080     |   4 PAUSE      003115 R   |     PAUSE_ID=  000062 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       00310C R   |     PEEK_IDX=  000066 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   4 PINP       003103 R
    PINP_IDX=  000068     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      0030F9 R
    PMODE_ID=  000064     |   4 POKE       0030F0 R   |     POKE_IDX=  00006A 
  4 POUT       0030E7 R   |     POUT_IDX=  00006C     |     PREV    =  000001 
  4 PRINT      0030DD R   |     PROD    =  000001     |     PROD_SIG=  00000A 
  4 PROG_ADD   001DCA R   |   4 PROG_SIZ   001DDC R   |   4 PRTA       0030D4 R
    PRTA_IDX=  000070     |   4 PRTB       0030CB R   |     PRTB_IDX=  000072 
  4 PRTC       0030C2 R   |     PRTC_IDX=  000074     |   4 PRTD       0030B9 R
    PRTD_IDX=  000076     |   4 PRTE       0030B0 R   |     PRTE_IDX=  000078 
  4 PRTF       0030A7 R   |     PRTF_IDX=  00007A     |   4 PRTG       00309E R
    PRTG_IDX=  00007C     |   4 PRTH       003095 R   |     PRTH_IDX=  00007E 
  4 PRTI       00308C R   |     PRTI_IDX=  000080     |     PRT_IDX =  00006E 
    PSIZE   =  000001     |     PSTR    =  000003     |   4 QKEY       003083 R
    QKEY_IDX=  000082     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001E05 R   |     RAM_SIZE=  001800 
    RBT_IDX =  000086     |   4 READ       00307A R   |     READ_IDX=  000084 
  4 REBOOT     00306F R   |     RECLEN  =  000005     |   4 REG_A      000520 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

  4 REG_CC     000524 R   |   4 REG_EPC    000513 R   |   4 REG_SP     000529 R
  4 REG_X      00051C R   |   4 REG_Y      000518 R   |     RELOP   =  000001 
  4 REM        003067 R   |     REM_IDX =  000088     |   4 RESTORE    00305B R
    REST_IDX=  00008A     |     RETL1   =  000001     |   4 RETURN     003050 R
    RET_ADDR=  000003     |     RET_BPTR=  000003     |     RET_IDX =  00008C 
    RET_INW =  000005     |   4 RND        003048 R   |     RND_IDX =  00008E 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     00303D R
    RSHIFT_I=  000090     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        003035 R   |     RUN_IDX =  000092     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   4 SAVE       00302C R
    SAVE_IDX=  000034     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   4 SHOW       003023 R
    SHOW_IDX=  000094     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   002785 R   |   4 SIZE       00301A R   |     SIZE_IDX=  0000C0 
    SKIP    =  000005     |   4 SLEEP      003010 R   |     SLEEP_ID=  000098 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      003006 R   |     SPIEN_ID=  00009C     |   4 SPIRD      002FFC R
    SPIRD_ID=  00009A     |   4 SPISEL     002FF1 R   |     SPISEL_I=  00009E 
  4 SPIWR      002FE7 R   |     SPIWR_ID=  0000A0     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  00008C     |   4 STATES     0004D6 R   |   4 STEP       002FDE R
    STEP_IDX=  0000A2     |   4 STOP       002FD5 R   |     STOP_IDX=  0000A4 
    STR     =  000003     |   4 STR_BYTE   001DED R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     T       =  000001     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TARGET  =  000001 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      002FCB R   |     TICKS_ID=  0000A6 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    002FBF R   |   4 TIMER      002FB5 R
    TIMER_ID=  0000A8     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TMROUT_I=  0000AA     |   4 TO         002FAE R   |   4 TONE       002FA5 R
    TONE_IDX=  0000AE     |     TOWRITE =  000005     |     TO_IDX  =  0000AC 
  4 Timer4Up   00001E R   |   4 TrapHand   000012 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     002F9A R   |     UBOUND_I=  0000B0     |   4 UBTN_Han   000057 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

  4 UFLASH     002F8F R   |     UFLASH_I=  0000B2     |   4 UNTIL      002F85 R
    UNTIL_ID=  0000B4     |     UPDATE  =  000006     |     US      =  00001F 
  4 USER_ABO   00005F R   |   4 USR        002F7D R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000B6 
  4 Uart1RxH   00088B R   |   4 UserButt   000033 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VSISE   =  000003     |     VSIZE   =  000008 
    VT      =  00000B     |   4 WAIT       002F74 R   |     WAIT_IDX=  0000B8 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   4 WORDS      002F6A R
    WORDS_ID=  0000BA     |   4 WRITE      002F60 R   |     WRITE_ID=  0000BC 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        002F58 R   |     XOR_IDX =  0000BE     |     XSAVE   =  000005 
    XSTACK_E=  001773     |     XSTACK_S=  00003C     |     XTEMP   =  000001 
    YSAVE   =  000007     |     YTEMP   =  000003     |   4 abs        0029AF R
  4 abs24      0001A3 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   000BC6 R
  4 add24      000158 R   |   4 add_char   00133A R   |   4 add_spac   001117 R
  4 analog_r   00253F R   |   4 app        003584 R   |   4 app_sign   003580 R
  4 app_size   003582 R   |   4 app_spac   003580 GR  |   4 arduino_   002B26 R
  4 arg_list   001901 R   |   5 array_si   00001F R   |   4 ascii      002839 R
  4 at_tst     000F81 R   |   4 atoi24     001838 GR  |   4 atoi_exi   00189E R
  4 awu        00294D R   |   4 awu02      002960 R   |   4 bad_port   0028BF R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       0024B8 R
  4 beep_1kh   00248F GR  |   4 bin_exit   000E02 R   |   4 bit_and    0029BF R
  4 bit_or     0029EC R   |   4 bit_rese   0020B8 R   |   4 bit_set    002096 R
  4 bit_test   0020FD R   |   4 bit_togg   0020DB R   |   4 bit_xor    002A1E R
  4 bitmask    002CE4 R   |   4 bkslsh_t   000F2E R   |   4 bksp       000964 R
  2 block_bu   0016B8 GR  |   4 block_er   00077E R   |   4 break_po   00262C R
  4 bye        002918 R   |   4 char       002822 R   |   4 clear_ba   0014A4 R
  4 clear_bl   0026DC R   |   4 clear_va   0013FC R   |   4 clock_in   00007A R
  4 cloop_1    001CFA R   |   4 cmd_cons   001CD4 R   |   4 cmd_end    00245B R
  4 cmd_get    002462 R   |   4 cmd_itf    00052E R   |   4 cmd_line   0016D5 R
  4 cmd_name   00135A R   |   4 cmd_on     002315 R   |   4 cmd_size   001B76 R
  4 code_add   0032F6 GR  |   4 cold_sta   0000B2 R   |   4 colon_ts   000F55 R
  4 comma_ts   000F60 R   |   4 comp_msg   001627 R   |   4 compile    001086 GR
  4 const_cr   002DB0 R   |   4 const_cr   002DB6 R   |   4 const_dd   002DAA R
  4 const_ee   002DC8 R   |   4 const_id   002DA4 R   |   4 const_in   002DC2 R
  4 const_lo   001CF5 R   |   4 const_od   002D9E R   |   4 const_ou   002DBC R
  4 const_po   002D68 R   |   4 const_po   002D6E R   |   4 const_po   002D74 R
  4 const_po   002D7A R   |   4 const_po   002D80 R   |   4 const_po   002D86 R
  4 const_po   002D8C R   |   4 const_po   002D92 R   |   4 const_po   002D98 R
  4 convert_   000D70 R   |   4 convert_   000928 R   |   4 copy_com   000FB6 R
  5 count      000003 GR  |   4 cp24       00019A R   |   4 cp_loop    0018B0 R
  4 cpl24      0001AA R   |   4 cpy_cmd_   001102 R   |   4 cpy_quot   00113F R
  4 create_g   000C9A R   |   4 cs_high    002F4B R   |   4 cstk_pro   001B1E R
  4 dash_tst   000F76 R   |   4 data       002DCE R   |   5 data_len   000009 R
  4 data_lin   002DDD R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 data_sea   002E1E R   |   4 dec_base   001B55 R   |   4 decomp_l   0011F8 R
  4 decompil   0011B0 GR  |   4 del_line   000C6D R   |   4 delete_l   000A51 R
  4 delete_n   000974 R   |   4 delete_u   000A16 R   |   4 digital_   00257B R
  4 digital_   0025B3 R   |   4 div24      0002E5 R   |   4 divu24_8   0002C7 R
  4 do_loop    002D1A R   |   4 do_progr   000771 R   |   4 edit       001EB9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 enable_i   002C73 R   |   4 eql_tst    00100B R   |   4 equal      00134D R
  4 erase      002654 R   |   4 erase_ex   00079D R   |   4 erase_fl   000793 R
  4 err_bad_   001588 R   |   4 err_buf_   0015FE R   |   4 err_cmd_   00154C R
  4 err_div0   001511 R   |   4 err_dupl   001566 R   |   4 err_math   0014F8 R
  4 err_mem_   0014DD R   |   4 err_msg    0014BB R   |   4 err_no_a   001594 R
  4 err_no_d   0015C7 R   |   4 err_no_f   0015EB R   |   4 err_no_l   001520 R
  4 err_no_p   0015D7 R   |   4 err_not_   001577 R   |   4 err_over   00160B R
  4 err_run_   001536 R   |   4 err_synt   0014EA R   |   4 escaped    000D85 GR
  4 expect     0018EF R   |   4 expr_exi   001A76 R   |   4 expressi   001A38 R
  4 factor     001956 R   |   5 farptr     000017 R   |   4 fcpu       002AAA R
  4 fetchc     00061E R   |   4 fill_wri   0026CC R   |   4 final_te   000BBF R
  4 first_li   001E63 R   |   5 flags      000021 GR  |   4 for        00218E R
  4 free       001B5A R   |   5 free_eep   000023 R   |   7 free_ram   000080 R
  4 func_arg   0018FC R   |   4 func_eef   001C67 R   |   4 func_not   002C63 R
  4 ge         00134F R   |   4 get_addr   00177D R   |   4 get_arra   001926 R
  4 get_char   001797 R   |   4 get_cmd_   00118F R   |   4 get_code   001761 R
  4 get_cons   001BF1 R   |   4 get_esca   000934 R   |   4 get_int2   001787 R
  4 get_targ   0022A6 R   |   4 get_targ   0022B4 R   |   4 get_tick   00299F R
  4 get_toke   000EC7 GR  |   4 getc       00090D GR  |   4 gosub      0023BB R
  4 gosub_1    0023C6 R   |   4 gosub_2    0023CC R   |   4 goto       0023A1 R
  4 goto_1     0023AB R   |   4 gpio       002889 R   |   4 gt         00134B R
  4 gt_tst     001016 R   |   4 hex_base   001B50 R   |   4 hex_dump   00065E R
  4 if         00216D R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   00086F R   |   4 input_ex   00204E R
  4 input_lo   001FBA R   |   4 input_va   001FB6 R   |   4 insert_c   0009D3 R
  4 insert_l   000CC6 R   |   4 insert_l   000D35 R   |   4 interp_l   001716 R
  4 interpre   0016F1 R   |   4 invalid    000573 R   |   4 invalid_   0005F4 R
  4 invert     002D04 R   |   4 is_alnum   000E37 GR  |   4 is_alpha   000E1D GR
  4 is_data_   002DD4 R   |   4 is_digit   000E2E GR  |   4 is_symbo   000E40 R
  4 itoa       0017D3 GR  |   4 itoa_loo   0017F5 R   |   4 jp_to_ta   0023AE R
  4 key        002878 R   |   4 kword_di   0032EE GR  |   4 kword_en   002F56 R
  4 le         001354 R   |   4 leading_   002CC5 R   |   4 ledoff     000429 R
  4 ledon      000424 R   |   4 ledtoggl   00042E R   |   4 left_par   000437 R
  4 let        001BAE GR  |   4 let_arra   001BBC R   |   4 let_eval   001BC4 R
  4 let_var    001BC1 R   |   4 lines_sk   001E66 R   |   4 list       001E14 R
  4 list_con   001C00 R   |   4 list_exi   001EA8 R   |   4 list_loo   001E86 R
  4 log2       002CB6 R   |   4 logical_   002C4D R   |   4 look_tar   0022D7 R
  4 loop_bac   002289 R   |   5 loop_dep   00001E R   |   4 loop_don   00229E R
  4 lshift     002A50 R   |   4 lt         001352 R   |   4 lt_tst     00103F R
  4 mem_peek   000590 R   |   4 mod24      000393 R   |   4 move       0013B8 GR
  4 move_dow   0013D7 R   |   4 move_era   000700 R   |   4 move_exi   0013F8 R
  4 move_lef   0009AB R   |   4 move_loo   0013DC R   |   4 move_prg   000740 R
  4 move_rig   0009B9 R   |   4 move_up    0013C9 R   |   4 mul24      000221 R
  4 mul_char   00133C R   |   4 mulu24_8   0001EE R   |   4 nbr_tst    000EFA R
  4 ne         001357 R   |   4 neg24      0001B7 R   |   4 neg_acc2   0001D1 R
  4 neg_ax     0001C9 R   |   4 new        00264A R   |   4 next       00223A R
  4 next_lin   0016F9 R   |   4 next_tok   001747 GR  |   4 no_match   0018C2 R
  4 number     000624 R   |   4 other      001068 R   |   4 overwrit   000BEB R
  2 pad        0016B8 GR  |   4 pad_ref    002F50 R   |   4 parse_bi   000DE0 R
  4 parse_in   000D8D R   |   4 parse_ke   000E63 R   |   4 parse_qu   000D38 R
  4 parse_sy   000E4B R   |   4 pause      00292C R   |   4 pause02    00293F R
  4 peek       002155 R   |   4 peek_byt   0005BE R   |   4 pin_mode   002AB9 R
  4 plus_tst   000FDF R   |   4 poke       002134 R   |   4 power_ad   0024EF R
  4 prcnt_ts   001000 R   |   4 print      001F21 R   |   4 print_ex   001F8A R
  4 print_fa   000603 R   |   4 print_he   000C20 GR  |   4 print_re   000483 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 print_st   000583 R   |   4 print_to   0017BB R   |   4 prog_siz   001D83 R
  4 program_   001D8B R   |   4 program_   00071A R   |   4 program_   000740 R
  4 prt_acc2   0017AD R   |   4 prt_basi   001EFD R   |   4 prt_i16    00179D R
  4 prt_loop   001F25 R   |   4 prt_peek   000406 GR  |   4 prt_reg1   000464 R
  4 prt_reg8   000442 R   |   4 prt_regs   00039C GR  |   5 ptr16      000018 GR
  5 ptr8       000019 R   |   4 putc       0008FD GR  |   4 puts       00095A GR
  4 qgetc      000906 GR  |   4 qkey       00287C GR  |   4 qmark_ts   000F8C R
  4 qsign      0026C5 R   |   4 random     002B46 R   |   4 read       002E3F R
  4 read01     002E41 R   |   4 read_int   003531 R   |   4 readln     000A5F GR
  4 readln_l   000A6C R   |   4 readln_q   000C08 R   |   4 refresh_   002CB1 R
  4 regs_sta   0003DF R   |   4 rel_exit   001ACB R   |   4 relation   001A79 R
  4 relop_st   00133F R   |   4 remark     002053 GR  |   4 repl       00053C R
  4 repl_exi   000564 R   |   4 reset_co   001F23 R   |   4 rest_con   001FA6 R
  4 restore    002DFF R   |   4 restore_   002E3A R   |   4 return     0023E1 R
  4 right_al   00112D GR  |   4 row_alig   000854 R   |   4 row_eras   0006D3 R
  4 row_eras   000700 R   |   4 row_loop   000641 R   |   4 rparnt_t   000F4A R
  4 rshift     002A7D R   |   7 rsign      00007C R   |   7 rsize      00007E R
  4 rt_msg     001615 R   |   4 run        0023FF R   |   4 run_app    000127 R
  4 run_it     002431 R   |   4 run_it_0   002433 R   |   5 rx1_head   00002D R
  5 rx1_queu   000025 R   |   5 rx1_tail   00002E R   |   4 save_app   0026F0 R
  4 save_con   001F96 R   |   4 scan_blo   00087D R   |   4 search_c   001C90 R
  4 search_d   0018A2 GR  |   4 search_e   0018EC R   |   4 search_l   000C42 GR
  4 search_l   000C51 R   |   4 search_n   0018A6 R   |   5 seedx      000013 R
  5 seedy      000015 R   |   4 select_p   002B16 R   |   4 send_esc   000982 R
  4 send_par   00098D R   |   4 set_data   002DF0 R   |   4 set_time   002C33 R
  4 sharp_ts   000F6B R   |   4 show       001ACE R   |   4 show_row   00062F R
  4 single_c   001335 R   |   4 skip       000EB4 R   |   4 skip_2_b   001765 R
  4 skip_str   00176E R   |   4 slash_ts   000FF5 R   |   4 sleep      002921 R
  4 software   00140B R   |   4 spaces     0009C7 GR  |   4 spi_clea   002EE4 R
  4 spi_disa   002ECC R   |   4 spi_enab   002E99 R   |   4 spi_rcv_   002F06 R
  4 spi_read   002F31 R   |   4 spi_sele   002F39 R   |   4 spi_send   002EF0 R
  4 spi_writ   002F11 R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   000FEA R   |   4 step       0021F6 R   |   4 stop       0025FE R
  4 store_lo   002213 R   |   4 str_matc   0018CF R   |   4 str_tst    000EEA R
  4 strcmp     001397 R   |   4 strcpy     0013A8 GR  |   4 strlen     00138C GR
  4 sub24      00017D R   |   4 symb_loo   000E4C R   |   4 syntax_e   001648 GR
  4 system_i   001451 R   |   5 tab_widt   000022 GR  |   4 tb_error   00164A GR
  4 term       0019EE R   |   4 term01     0019F6 R   |   4 term_exi   001A35 R
  4 test       0033C2 R   |   4 test_p     00057B R   |   2 tib        001668 GR
  4 tick_tst   000FA4 R   |   5 ticks      00000F R   |   4 timeout    002C4A R
  5 timer      000011 GR  |   4 timer2_i   000090 R   |   4 timer4_i   00009D R
  4 tk_id      001638 R   |   4 to         0021B8 R   |   4 to_eepro   000769 R
  4 to_flash   00076E R   |   4 to_hex_c   000C37 GR  |   4 to_upper   00182C GR
  4 token_ch   00107F R   |   4 token_ex   001083 R   |   4 tone       002498 R
  4 try_next   002E2A R   |   5 txtbgn     00001A GR  |   5 txtend     00001C GR
  4 uart1_ge   00090D GR  |   4 uart1_in   0008B8 R   |   4 uart1_pu   0008FD GR
  4 uart1_qg   000906 GR  |   4 uart1_se   0008C8 R   |   4 ubound     001BA3 R
  4 uflash     0028C4 R   |   4 unlock_e   00069D R   |   4 unlock_f   0006B8 R
  4 until      002D2E R   |   4 user_int   000046 R   |   4 usr        0028D9 R
  4 var_name   001185 GR  |   5 vars       00002F GR  |   4 wait       002059 R
  4 warm_ini   001482 R   |   4 warm_sta   0016D2 R   |   4 words      002BCD R
  4 words_co   002C1D R   |   4 write      0027DF R   |   4 write_bl   000819 GR
  4 write_bu   00075A R   |   4 write_by   00079F R   |   4 write_ee   0007DB R
  4 write_ex   000814 R   |   4 write_fl   0007C5 R   |   4 write_nb   00083E R
  2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3584   flags    0
   5 DATA       size     7D   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

