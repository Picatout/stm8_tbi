ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     31 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           0000A0    27 	STACK_SIZE=160
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000000    29 	FRUN=0 ; flags run code in variable flags
                           000001    30 	FTRAP=1 ; inside trap handler 
                           000002    31 	FLOOP=2 ; FOR loop in preparation 
                           000003    32 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    33 	FBREAK=4 ; break point flag 
                           000005    34 	FCOMP=5  ; compiling flags 
                           000006    35 	FAUTORUN=6; auto start program running 
                                     36 
                           004000    37 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     38 
                           000006    39         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     40 
                           007FFF    41 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     42 
                           000008    43 	RX_QUEUE_SIZE=8 
                                     44 
                           00F424    45         TIM2_CLK_FREQ=62500
                                     46 
                           000050    47 	TIB_SIZE=80
                           000080    48         PAD_SIZE=BLOCK_SIZE 
                                     49 
                                     50 ;--------------------------------------
                                     51 ;   constantes related to Arduino 
                                     52 ;   API mapping 
                                     53 ;-------------------------------------
                           000000    54         INP=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000001    55         OUTP=1 
                                     56 
                                     57 ;--------------------------------------
                                     58 ;       token attribute
                                     59 ;--------------------------------------
                                     60         ; bits 4:5 identify token group 
                                     61         ; 0x0n -> miscelinous 
                                     62         ; 0x1n -> +|- operators 
                                     63         ; 0x2n -> *|/|% operators
                                     64         ; 0x3n -> relational operators 
                           000080    65         TK_CMD=128      ; BASIC command   
                           000081    66         TK_IFUNC=129    ; BASIC integer function
                           000082    67         TK_CFUNC=130    ; BASIC character function
                           000083    68         TK_CONST=131    ; BASIC constant 
                           000084    69         TK_INTGR=132
                           000085    70         TK_VAR=133
                           000000    71         TK_NONE=0       ; not a token 
                           000001    72         TK_LABEL=1      ; used for defined, constants, variables
                           000002    73         TK_QSTR=2       ; quoted string  
                           000003    74         TK_CHAR=3       ; ASCII character 
                           000004    75         TK_TARGET=4     ; symbolic target for GOSUB|GOTO  
                           000006    76         TK_ARRAY=6     ; array variable '@' 
                           000007    77         TK_LPAREN=7     ; left parenthesis '('
                           000008    78         TK_RPAREN=8     ; right parenthesis ')'
                           000009    79         TK_COMMA=9     ; item separator ',' 
                           00000A    80         TK_SHARP=0xa     ; print colon width '#' 
                           00000B    81         TK_COLON=0xb      ; command separator ':' 
                                     82         
                           000010    83         TK_PLUS=0x10    ; addition operator '+'
                           000011    84         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    85         TK_MULT=0x20    ; multiplication operator '*'
                           000021    86         TK_DIV=0x21     ; division operator '/'
                           000022    87         TK_MOD=0x22     ; modulo operator '%'
                                     88 
                                     89         ; don't change these token values 
                                     90         ; values chosen to be used as a mask.
                                     91         ; bit 7   1 for dictionary words else 0 
                                     92         ; bits 6  always 0 
                                     93         ; bits 5:4 identify group 
                                     94         ; bits 3:0 token identifier inside group  
                           000031    95         TK_GT=0x31      ; relation operator '>'
                           000032    96         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033    97         TK_GE=0x33      ; relation operator '>='
                           000034    98         TK_LT=0x34      ; relation operator '<'
                           000036    99         TK_LE=0x36      ; relation operator '<='
                           000035   100         TK_NE=0x35      ; relation operator '<>' not equal 
                                    101         ; token groups 
                           000030   102         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   103         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   104         TK_GRP_ADD=0x10  ; additive operators
                           000020   105         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   106         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   107         CMD_END=2 
                                    108 
                                    109 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                    110 ;   error codes 
                                    111 ;--------------------------------------
                           000000   112     ERR_NONE=0
                           000001   113     ERR_MEM_FULL=1 
                           000002   114     ERR_SYNTAX=2
                           000003   115     ERR_MATH_OVF=3
                           000004   116     ERR_DIV0=4 
                           000005   117     ERR_NO_LINE=5
                           000006   118     ERR_RUN_ONLY=6
                           000007   119     ERR_CMD_ONLY=7
                           000008   120     ERR_DUPLICATE=8
                           000009   121     ERR_NOT_FILE=9
                           00000A   122     ERR_BAD_VALUE=10
                           00000B   123     ERR_NO_ACCESS=11
                           00000C   124     ERR_NO_DATA=12 
                           00000D   125     ERR_NO_PROG=13
                           00000E   126     ERR_NO_FSPACE=14
                           00000F   127     ERR_BUF_FULL=15
                                    128 
                                    129 ;--------------------------------------
                                    130 ;   assembler flags 
                                    131 ;-------------------------------------
                           000000   132     MATH_OVF=0 ; if 1 the stop on math overflow 
                                    133 
                           000002   134     CELL_SIZE=2 
                                    135 
                                    136     .macro _usec_dly n 
                                    137     ldw x,#(16*n-2)/4
                                    138     decw x
                                    139     nop 
                                    140     jrne .-4
                                    141     .endm 
                                    142     
                                    143     ; load X register with 
                                    144     ; entry point of dictionary
                                    145     ; before calling 'search_dict'
                                    146     .macro _ldx_dict dict_name
                                    147     ldw x,#dict_name+2
                                    148     .endm 
                                    149 
                                    150     ; reset BASIC pointer
                                    151     ; to beginning of last token
                                    152     ; extracted except if it was end of line 
                                    153     .macro _unget_token 
                                    154      mov in,in.saved  
                                    155     .endm
                                    156 
                                    157 ;-------------------------------
                                    158 ;  macros used to help debugging
                                    159 ;-------------------------------
                           000000   160     DEBUG=0
                                    161     .macro _dbg 
                                    162     DEBUG=1
                                    163     .endm
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                    165     .macro _nodbg
                                    166     DEBUG=0
                                    167     .endm 
                                    168 
                           000006   169     DBG_CC=6
                           000005   170     DBG_A=5 
                           000003   171     DBG_X=3 
                           000001   172     DBG_Y=1 
                                    173     .macro _dbg_save_regs 
                                    174     .if DEBUG
                                    175     push cc ; (6,sp)
                                    176     push a   ; (5,sp)
                                    177     pushw x  ; (3,sp)
                                    178     pushw y  ; (1,sp)
                                    179     .endif 
                                    180     .endm 
                                    181 
                                    182     .macro _dbg_restore_regs 
                                    183     .if DEBUG 
                                    184     popw y 
                                    185     popw x 
                                    186     pop a 
                                    187     pop cc 
                                    188     .endif 
                                    189     .endm 
                                    190 
                                    191     .macro _dbg_getc 
                                    192     .if DEBUG 
                                    193     _dbg_save_regs 
                                    194     call getc
                                    195     ld (DBG_A,sp),a 
                                    196     _dbg_restore_regs  
                                    197     .endif
                                    198     .endm 
                                    199 
                                    200     .macro _dbg_putc 
                                    201     .if DEBUG
                                    202     push cc 
                                    203     call putc 
                                    204     pop cc 
                                    205     .endif 
                                    206     .endm 
                                    207 
                                    208     .macro _dbg_puts 
                                    209     .if DEBUG 
                                    210     _dbg_save_regs
                                    211     call puts 
                                    212     _dbg_restore_regs
                                    213     .endif 
                                    214     .endm 
                                    215 
                                    216     .macro _dbg_prti24 
                                    217     .if DEBUG 
                                    218     _dbg_save_regs
                                    219     call prti24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                    220     _dbg_restore_regs
                                    221     .endif
                                    222     .endm 
                                    223 
                                    224     .macro _dbg_prt_regs
                                    225     .if DEBUG
                                    226     _dbg_save_regs
                                    227     call prt_regs 
                                    228     _dbg_restore_regs 
                                    229     .endif 
                                    230     .endm 
                                    231 
                                    232     .macro _dbg_peek addr 
                                    233     .if DEBUG
                                    234     _dbg_save_regs 
                                    235     ldw x,addr 
                                    236     call peek     
                                    237     _dbg_restore_regs
                                    238     .endif 
                                    239     .endm 
                                    240 
                                    241     .macro _dbg_parser_init 
                                    242     .if DEBUG 
                                    243     _dbg_save_regs
                                    244     call parser_init 
                                    245     _dbg_restore_regs
                                    246     .endif
                                    247     .endm
                                    248 
                                    249     .macro _dbg_readln
                                    250     .if DEBUG 
                                    251     _dbg_save_regs
                                    252     call readln
                                    253     _dbg_restore_regs
                                    254     .endif
                                    255     .endm
                                    256 
                                    257     .macro _dbg_number
                                    258     .if DEBUG 
                                    259     _dbg_save_regs
                                    260     call number 
                                    261     _dbg_restore_regs
                                    262     .endif
                                    263     .endm  
                                    264 
                                    265     .macro _dbg_nextword
                                    266     .if DEBUG 
                                    267     _dbg_save_regs
                                    268     call get_token   
                                    269     _dbg_restore_regs
                                    270     .endif
                                    271     .endm  
                                    272 
                                    273     .macro _dbg_dots 
                                    274     .if DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    275     _dbg_save_regs
                                    276     call dots 
                                    277     _dbg_restore_regs
                                    278     .endif 
                                    279     .endm 
                                    280 
                                    281     .macro _dbg_trap
                                    282     .if DEBUG 
                                    283     bset flags,#FTRAP 
                                    284     trap 
                                    285     .endif 
                                    286     .endm 
                                    287 
                                    288     .macro _dbg_mark n  
                                    289     .if DEBUG 
                                    290     push cc
                                    291     push a 
                                    292     ld a,#n 
                                    293     call putc
                                    294     btjf UART3_SR,#UART_SR_TC,. 
                                    295     pop a 
                                    296     pop cc 
                                    297     .endif 
                                    298     .endm 
                                    299     
                                    300     .macro _dbg_prt_var var 
                                    301     .if DEBUG
                                    302     _dbg_save_regs 
                                    303     ldw x,var 
                                    304     ldw acc16,x 
                                    305     clr acc24 
                                    306     clrw x 
                                    307     ld a,#16+128  
                                    308     call prti24
                                    309     ld a,#CR 
                                    310     call putc  
                                    311     _dbg_restore_regs 
                                    312     .endif 
                                    313     .endm 
                                    314 
                                    315     .macro _dbg_show 
                                    316     .if DEBUG 
                                    317     _dbg_save_regs 
                                    318     call show 
                                    319     _dbg_restore_regs
                                    320     .endif
                                    321     .endm 
                                    322 
                                    323     ; software reset 
                                    324     .macro _swreset
                                    325     mov WWDG_CR,#0X80
                                    326     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     32 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DATALN_IDX=DATA_IDX+2
                           000022    42     DDR_IDX=DATALN_IDX+2
                           000024    43     DEC_IDX=DDR_IDX+2
                           000026    44     DO_IDX=DEC_IDX+2
                           000028    45     DREAD_IDX=DO_IDX+2
                           00002A    46     DWRITE_IDX=DREAD_IDX+2
                           00002C    47     EDIT_IDX=DWRITE_IDX+2
                           00002E    48     EEPROM_IDX=EDIT_IDX+2
                           000030    49     END_IDX=EEPROM_IDX+2
                           000032    50     ERASE_IDX=END_IDX+2
                           000034    51     FCPU_IDX=ERASE_IDX+2
                           000036    52     SAVE_IDX=FCPU_IDX+2
                           000038    53     FOR_IDX=SAVE_IDX+2
                           00003A    54     GOSUB_IDX=FOR_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GOTO_IDX=GOSUB_IDX+2
                           00003E    56     GPIO_IDX=GOTO_IDX+2
                           000040    57     HEX_IDX=GPIO_IDX+2
                           000042    58     IDR_IDX=HEX_IDX+2
                           000044    59     IF_IDX=IDR_IDX+2
                           000046    60     INPUT_IDX=IF_IDX+2
                           000048    61     INVERT_IDX=INPUT_IDX+2
                           00004A    62     IWDGEN_IDX=INVERT_IDX+2
                           00004C    63     IWDGREF_IDX=IWDGEN_IDX+2
                           00004E    64     KEY_IDX=IWDGREF_IDX+2
                           000050    65     LET_IDX=KEY_IDX+2
                           000052    66     LIST_IDX=LET_IDX+2
                           000054    67     LOG_IDX=LIST_IDX+2
                           000056    68     LSHIFT_IDX=LOG_IDX+2
                           000058    69     MULDIV_IDX=LSHIFT_IDX+2
                           00005A    70     NEXT_IDX=MULDIV_IDX+2
                           00005C    71     NEW_IDX=NEXT_IDX+2
                           00005E    72     NOT_IDX=NEW_IDX+2
                           000060    73     ODR_IDX=NOT_IDX+2
                           000062    74     OR_IDX=ODR_IDX+2
                           000064    75     PAD_IDX=OR_IDX+2
                           000066    76     PAUSE_IDX=PAD_IDX+2
                           000068    77     PMODE_IDX=PAUSE_IDX+2
                           00006A    78     PEEK_IDX=PMODE_IDX+2
                           00006C    79     PINP_IDX=PEEK_IDX+2
                           00006E    80     POKE_IDX=PINP_IDX+2
                           000070    81     POUT_IDX=POKE_IDX+2
                           000072    82    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000074    83     PRTA_IDX=PRT_IDX+2
                           000076    84     PRTB_IDX=PRTA_IDX+2
                           000078    85     PRTC_IDX=PRTB_IDX+2
                           00007A    86     PRTD_IDX=PRTC_IDX+2
                           00007C    87     PRTE_IDX=PRTD_IDX+2
                           00007E    88     PRTF_IDX=PRTE_IDX+2
                           000080    89     PRTG_IDX=PRTF_IDX+2
                           000082    90     PRTH_IDX=PRTG_IDX+2
                           000084    91     PRTI_IDX=PRTH_IDX+2
                           000086    92     QKEY_IDX=PRTI_IDX+2
                           000088    93     READ_IDX=QKEY_IDX+2
                           00008A    94     RBT_IDX=READ_IDX+2  ; REBOOT
                           00008C    95 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008E    96     REST_IDX=REM_IDX+2 ; RESTORE
                           000090    97     RET_IDX=REST_IDX+2  ; RETURN 
                           000092    98     RND_IDX=RET_IDX+2 ; RANDOM 
                           000094    99     RSHIFT_IDX=RND_IDX+2
                           000096   100     RUN_IDX=RSHIFT_IDX+2
                           000098   101     SHOW_IDX=RUN_IDX+2
                           00009A   102     FREE_IDX=SHOW_IDX+2
                           00009C   103     SLEEP_IDX=FREE_IDX+2
                           00009E   104     SPIRD_IDX=SLEEP_IDX+2
                           0000A0   105     SPIEN_IDX=SPIRD_IDX+2
                           0000A2   106     SPISEL_IDX=SPIEN_IDX+2
                           0000A4   107     SPIWR_IDX=SPISEL_IDX+2
                           0000A6   108     STEP_IDX=SPIWR_IDX+2
                           0000A8   109     STOP_IDX=STEP_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000AA   110     TICKS_IDX=STOP_IDX+2
                           0000AC   111     TIMER_IDX=TICKS_IDX+2
                           0000AE   112     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000B0   113     TO_IDX=TMROUT_IDX+2
                           0000B2   114     TONE_IDX=TO_IDX+2
                           0000B4   115     UBOUND_IDX=TONE_IDX+2
                           0000B6   116     UFLASH_IDX=UBOUND_IDX+2
                           0000B8   117     UNTIL_IDX=UFLASH_IDX+2
                           0000BA   118     USR_IDX=UNTIL_IDX+2
                           0000BC   119     WAIT_IDX=USR_IDX+2
                           0000BE   120     WORDS_IDX=WAIT_IDX+2
                           0000C0   121     WRITE_IDX=WORDS_IDX+2
                           0000C2   122     XOR_IDX=WRITE_IDX+2
                           0000C4   123     SIZE_IDX=XOR_IDX+2 
                           0000C6   124     ON_IDX=SIZE_IDX+2 
                           0000C8   125     GET_IDX=ON_IDX+2 
                                    126         
                                    127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     33   
                                     34 
                                     35 ;_dbg 
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001690                         41     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         44 pad:: .ds PAD_SIZE             ; working buffer
      001760                         45 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         46 stack_unf: ; stack underflow ; control_stack bottom 
                                     47 
                                     48 ;;--------------------------------------
                                     49     .area HOME 
                                     50 ;; interrupt vector table at 0x8000
                                     51 ;;--------------------------------------
      000000 82 00 0E D1             52     int cold_start			; RESET vector 
                           000000    53 .if DEBUG
                                     54 	int TrapHandler 		;TRAP  software interrupt
                           000001    55 .else
      000004 82 00 00 00             56 	int NonHandledInterrupt ;TRAP  software interrupt
                                     57 .endif
      000008 82 00 00 00             58 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01             59 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             60 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             61 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             62 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             63 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             64 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 24             65 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             66 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             67 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             68 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             69 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             70 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             71 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             72 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             73 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             74 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             75 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 02 7F             76 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             77 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             78 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             79 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             80 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 0F             81 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             82 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             83 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             84 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             85 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             86 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             87 	int NonHandledInterrupt ;int29  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     88 
                                     89 ;---------------------------------------
                                     90     .area CODE
                                     91 ;---------------------------------------
                           000000    92 .if DEBUG
                                     93 .asciz "STM8_TBI" ; I like to put module name here.
                                     94 .endif 
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000 71                     101     .byte 0x71  ; invalid opcode reinitialize MCU
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        108 AWUHandler:
      000001 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      00000E 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000000   117 .if DEBUG 
                                    118 TrapHandler:
                                    119 	bset flags,#FTRAP 
                                    120 	call print_registers
                                    121 	call cmd_itf
                                    122 	bres flags,#FTRAP 	
                                    123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ;--------------------------------
      00000F                        131 Timer4UpdateHandler:
      00000F 72 5F 53 42      [ 1]  132 	clr TIM4_SR 
      000013 CE 00 0F         [ 2]  133 	ldw x,ticks
      000016 5C               [ 1]  134 	incw x
      000017 CF 00 0F         [ 2]  135 	ldw ticks,x 
      00001A CE 00 11         [ 2]  136 	ldw x,timer
                                    137 ;	tnzw x 
      00001D 27 04            [ 1]  138 	jreq 1$
      00001F 5A               [ 2]  139 	decw x 
      000020 CF 00 11         [ 2]  140 	ldw timer,x 
      000023                        141 1$:	
      000023 80               [11]  142 	iret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    143 
                                    144 ;------------------------------------
                                    145 ; Triggered by pressing USER UserButton 
                                    146 ; on NUCLEO card.
                                    147 ; This is used to abort a progam lock 
                                    148 ; in infinite loop. 
                                    149 ;------------------------------------
      000024                        150 UserButtonHandler:
                                    151 ; wait button release
      000024 5F               [ 1]  152 	clrw x
      000025 5A               [ 2]  153 1$: decw x 
      000026 26 FD            [ 1]  154 	jrne 1$
      000028 72 09 50 15 F8   [ 2]  155 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    156 ; if MCU suspended by SLEEP resume program
      00002D 72 07 00 21 05   [ 2]  157     btjf flags,#FSLEEP,2$
      000032 72 17 00 21      [ 1]  158 	bres flags,#FSLEEP 
      000036 80               [11]  159 	iret
      000037                        160 2$:	
      000037                        161 user_interrupted:
      000037 72 00 00 21 02   [ 2]  162     btjt flags,#FRUN,4$
      00003C 20 0A            [ 2]  163 	jra UBTN_Handler_exit 
      00003E                        164 4$:	; program interrupted by user 
      00003E 72 11 00 21      [ 1]  165 	bres flags,#FRUN 
      000042 AE 00 5B         [ 2]  166 	ldw x,#USER_ABORT
      000045 CD 03 4E         [ 4]  167 	call puts 
      000048                        168 UBTN_Handler_exit:
      000048 AE 17 FF         [ 2]  169     ldw x,#STACK_EMPTY 
      00004B 94               [ 1]  170     ldw sp,x
      00004C 9A               [ 1]  171 	rim 
      00004D CE 00 1A         [ 2]  172 	ldw x,txtbgn 
      000050 A3 2C 80         [ 2]  173 	cpw x,#app_space 
      000053 22 03            [ 1]  174 	jrugt 5$
      000055 CD 0F BF         [ 4]  175 	call clear_basic 
      000058 CC 11 DB         [ 2]  176 5$:	jp warm_start
                                    177 
      00005B 0A 50 72 6F 67 72 61   178 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    179 
                                    180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    181 ;    peripherals initialization
                                    182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    183 
                                    184 ;----------------------------------------
                                    185 ; inialize MCU clock 
                                    186 ; input:
                                    187 ;   A 		source  HSI | 1 HSE 
                                    188 ;   XL      CLK_CKDIVR , clock divisor 
                                    189 ; output:
                                    190 ;   none 
                                    191 ;----------------------------------------
      000076                        192 clock_init:	
      000076 C1 50 C3         [ 1]  193 	cp a,CLK_CMSR 
      000079 27 0C            [ 1]  194 	jreq 2$ ; no switching required 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    195 ; select clock source 
      00007B 72 12 50 C5      [ 1]  196 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00007F C7 50 C4         [ 1]  197 	ld CLK_SWR,a
      000082 C1 50 C3         [ 1]  198 1$:	cp a,CLK_CMSR
      000085 26 FB            [ 1]  199 	jrne 1$
      000087                        200 2$: 	
                                    201 ; HSI and cpu clock divisor 
      000087 9F               [ 1]  202 	ld a,xl 
      000088 C7 50 C6         [ 1]  203 	ld CLK_CKDIVR,a  
      00008B 81               [ 4]  204 	ret
                                    205 
                                    206 ;----------------------------------
                                    207 ; TIMER2 used as audio tone output 
                                    208 ; on port D:5.
                                    209 ; channel 1 configured as PWM mode 1 
                                    210 ;-----------------------------------  
                                    211 
      00008C                        212 timer2_init:
      00008C 72 1A 50 C7      [ 1]  213 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000090 35 60 53 05      [ 1]  214  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      000094 35 08 53 0C      [ 1]  215 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      000098 81               [ 4]  216 	ret 
                                    217 
                                    218 ;---------------------------------
                                    219 ; TIM4 is configured to generate an 
                                    220 ; interrupt every millisecond 
                                    221 ;----------------------------------
      000099                        222 timer4_init:
      000099 72 18 50 C7      [ 1]  223 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      00009D 35 07 53 45      [ 1]  224 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A1 35 7D 53 46      [ 1]  225 	mov TIM4_ARR,#125 ; set for 1msec.
      0000A5 35 05 53 40      [ 1]  226 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A9 72 10 53 41      [ 1]  227 	bset TIM4_IER,#TIM4_IER_UIE
      0000AD 81               [ 4]  228 	ret
                                    229 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0000AE                         45 unlock_eeprom:
      0000AE 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0000B3 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0000B7 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0000BB 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000BF 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C3 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000C8 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0000C9                         62 unlock_flash:
      0000C9 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0000CE 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0000D2 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0000D6 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000DA 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000DE 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000E3 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0000E4                         76 row_erase:
      0000E4 88               [ 1]   77 	push a 
      0000E5 90 89            [ 2]   78 	pushw y 
      0000E7 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0000EB 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0000EF 4F               [ 1]   81 	clr a 
      0000F0 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0000F2 91 A7 00 17      [ 1]   83 	ldf ([farptr],y),a
      0000F6 90 5C            [ 1]   84     incw y
      0000F8 91 A7 00 17      [ 1]   85 	ldf ([farptr],y),a
      0000FC 90 5C            [ 1]   86     incw y
      0000FE 91 A7 00 17      [ 1]   87 	ldf ([farptr],y),a
      000102 90 5C            [ 1]   88     incw y
      000104 91 A7 00 17      [ 1]   89 	ldf ([farptr],y),a
      000108 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00010D 90 85            [ 2]   91 	popw y 
      00010F 84               [ 1]   92 	pop a 
      000110 81               [ 4]   93 	ret
      000111                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000111                         97 move_erase_to_ram:
      000111 89               [ 2]   98 	pushw x 
      000112 90 89            [ 2]   99 	pushw y 
      000114 AE 01 11         [ 2]  100 	ldw x,#row_erase_end 
      000117 1D 00 E4         [ 2]  101 	subw x,#row_erase
      00011A CF 00 0D         [ 2]  102 	ldw acc16,x 
      00011D AE 16 90         [ 2]  103 	ldw x,#tib 
      000120 90 AE 00 E4      [ 2]  104 	ldw y,#row_erase 
      000124 CD 0E 38         [ 4]  105 	call move
      000127 90 85            [ 2]  106 	popw y
      000129 85               [ 2]  107 	popw x
      00012A 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00012B                        123 program_row:
      00012B 88               [ 1]  124 	push a 
      00012C 90 89            [ 2]  125 	pushw y 
      00012E 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000130 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000134 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000138 90 5F            [ 1]  130 	clrw y 
      00013A F6               [ 1]  131 1$:	ld a,(x)
      00013B 91 A7 00 17      [ 1]  132 	ldf ([farptr],y),a
      00013F 5C               [ 1]  133 	incw x 
      000140 90 5C            [ 1]  134 	incw y 
      000142 0A 01            [ 1]  135 	dec (BCNT,sp)
      000144 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000146 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00014B                        139 	_drop 1 
      00014B 5B 01            [ 2]    1     addw sp,#1 
      00014D 90 85            [ 2]  140 	popw y 
      00014F 84               [ 1]  141 	pop a 
      000150 81               [ 4]  142 	ret 
      000151                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000151                        149 move_prg_to_ram:
      000151 89               [ 2]  150 	pushw x 
      000152 90 89            [ 2]  151 	pushw y 
      000154 AE 01 51         [ 2]  152 	ldw x,#program_row_end 
      000157 1D 01 2B         [ 2]  153 	subw x,#program_row 
      00015A CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00015D AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000160 90 AE 01 2B      [ 2]  156 	ldw y,#program_row ; source address 
      000164 CD 0E 38         [ 4]  157 	call move
      000167 90 85            [ 2]  158 	popw y 
      000169 85               [ 2]  159 	popw x  
      00016A 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00016B                        169 write_buffer:
      00016B 89               [ 2]  170 	pushw x 
      00016C 72 5D 00 17      [ 1]  171 	tnz farptr 
      000170 26 0D            [ 1]  172 	jrne to_flash 
      000172 CE 00 18         [ 2]  173 	ldw x,farptr+1 
      000175 A3 2C 80         [ 2]  174 	cpw x,#app_space  
      000178 24 05            [ 1]  175 	jruge to_flash 
      00017A                        176 to_eeprom:
      00017A CD 00 AE         [ 4]  177 	call unlock_eeprom
      00017D 20 03            [ 2]  178 	jra do_programming
      00017F                        179 to_flash:
      00017F CD 00 C9         [ 4]  180 	call unlock_flash
      000182                        181 do_programming:
      000182 85               [ 2]  182 	popw x 
      000183 CD 16 90         [ 4]  183 	call tib
      000186 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00018A 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00018E 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00018F                        197 block_erase:
      00018F 89               [ 2]  198 	pushw x 
      000190 CE 00 18         [ 2]  199 	ldw x,farptr+1
      000193 A3 2C 80         [ 2]  200 	cpw x,#app_space 
      000196 24 0C            [ 1]  201 	jruge erase_flash 
                                    202 ; erase eeprom block
      000198 CD 00 AE         [ 4]  203 	call unlock_eeprom 
      00019B CD 16 90         [ 4]  204 	call tib 
      00019E 72 17 50 5F      [ 1]  205 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001A2 20 0A            [ 2]  206 	jra erase_exit  
                                    207 ; erase flash block:
      0001A4                        208 erase_flash:
      0001A4 CD 00 C9         [ 4]  209 	call unlock_flash 
      0001A7 CD 16 90         [ 4]  210 	call tib 
      0001AA 72 13 50 5F      [ 1]  211     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001AE                        212 erase_exit: 
      0001AE 85               [ 2]  213 	popw x 
      0001AF 81               [ 4]  214 	ret 
                                    215 
                                    216 
                                    217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    218 ; write a byte to FLASH or EEPROM/OPTION  
                                    219 ; input:
                                    220 ;    a  		byte to write
                                    221 ;    farptr  	address
                                    222 ;    x          farptr[x]
                                    223 ; output:
                                    224 ;    none
                                    225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    226 	; variables locales
                           000001   227 	BTW = 1   ; byte to write offset on stack
                           000002   228 	OPT = 2   ; OPTION flag offset on stack
                           000002   229 	VSIZE = 2
      0001B0                        230 write_byte:
      0001B0 90 89            [ 2]  231 	pushw y
      0001B2                        232 	_vars VSIZE
      0001B2 52 02            [ 2]    1     sub sp,#VSIZE 
      0001B4 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      0001B6 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
                                    235 ; put addr[15:0] in Y, for bounds check.
      0001B8 90 CE 00 18      [ 2]  236 	ldw y,farptr+1   ; Y=addr15:0
                                    237 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001BC 72 5D 00 17      [ 1]  238 	tnz farptr 
      0001C0 26 14            [ 1]  239 	jrne write_flash
      0001C2 90 A3 2C 80      [ 2]  240     cpw y,#app_space 	 
      0001C6 24 0E            [ 1]  241     jruge write_flash
      0001C8 90 A3 40 00      [ 2]  242 	cpw y,#EEPROM_BASE  
      0001CC 25 57            [ 1]  243     jrult write_exit
      0001CE 90 A3 48 7F      [ 2]  244 	cpw y,#OPTION_END 
      0001D2 22 51            [ 1]  245 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0001D4 20 16            [ 2]  246 	jra write_eeprom 
                                    247 ; write program memory
      0001D6                        248 write_flash:
      0001D6 CD 00 C9         [ 4]  249 	call unlock_flash 
      0001D9 9B               [ 1]  250 1$:	sim 
      0001DA 7B 01            [ 1]  251 	ld a,(BTW,sp)
      0001DC 92 A7 00 17      [ 4]  252 	ldf ([farptr],x),a ; farptr[x]=A
      0001E0 72 05 50 5F FB   [ 2]  253 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0001E5 9A               [ 1]  254     rim 
      0001E6 72 13 50 5F      [ 1]  255     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001EA 20 39            [ 2]  256     jra write_exit
                                    257 ; write eeprom and option
      0001EC                        258 write_eeprom:
      0001EC CD 00 AE         [ 4]  259 	call unlock_eeprom
                                    260 	; check for data eeprom or option eeprom
      0001EF 90 A3 48 00      [ 2]  261 	cpw y,#OPTION_BASE
      0001F3 2B 08            [ 1]  262 	jrmi 1$
      0001F5 90 A3 48 80      [ 2]  263 	cpw y,#OPTION_END+1
      0001F9 2A 02            [ 1]  264 	jrpl 1$
      0001FB 03 02            [ 1]  265 	cpl (OPT,sp)
      0001FD                        266 1$: 
      0001FD 0D 02            [ 1]  267     tnz (OPT,sp)
      0001FF 27 08            [ 1]  268     jreq 2$
                                    269 	; pour modifier une option il faut modifier ces 2 bits
      000201 72 1E 50 5B      [ 1]  270     bset FLASH_CR2,#FLASH_CR2_OPT
      000205 72 1F 50 5C      [ 1]  271     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000209                        272 2$: 
      000209 7B 01            [ 1]  273     ld a,(BTW,sp)
      00020B 92 A7 00 17      [ 4]  274     ldf ([farptr],x),a
      00020F 0D 02            [ 1]  275     tnz (OPT,sp)
      000211 27 08            [ 1]  276     jreq 3$
      000213 5C               [ 1]  277     incw x
      000214 7B 01            [ 1]  278     ld a,(BTW,sp)
      000216 43               [ 1]  279     cpl a
      000217 92 A7 00 17      [ 4]  280     ldf ([farptr],x),a
      00021B 72 05 50 5F FB   [ 2]  281 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000220 72 0D 50 5F FB   [ 2]  282 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000225                        283 write_exit:
      000225                        284 	_drop VSIZE 
      000225 5B 02            [ 2]    1     addw sp,#VSIZE 
      000227 90 85            [ 2]  285 	popw y
      000229 81               [ 4]  286     ret
                                    287 
                                    288 ;--------------------------------------------
                                    289 ; write a data block to eeprom or flash 
                                    290 ; input:
                                    291 ;   Y        source address   
                                    292 ;   X        array index  destination  farptr[x]
                                    293 ;   BSIZE    block size bytes 
                                    294 ;   farptr   write address , byte* 
                                    295 ; output:
                                    296 ;	X 		after last byte written 
                                    297 ;   Y 		after last byte read 
                                    298 ;  farptr   point after block
                                    299 ;---------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00022A                        300 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00022A                        301 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    302 	; local var 
                           000001   303 	XSAVE=1 
                           000002   304 	VSIZE=2 
      00022A                        305 write_block::
      00022A 88               [ 1]  306 	push a 
      00022B                        307 	_vars VSIZE
      00022B 52 02            [ 2]    1     sub sp,#VSIZE 
      00022D 1F 01            [ 2]  308 	ldw (XSAVE,sp),x 
      00022F 1E 06            [ 2]  309 	ldw x,(BSIZE,sp) 
      000231 27 13            [ 1]  310 	jreq 9$
      000233 1E 01            [ 2]  311 1$:	ldw x,(XSAVE,sp)
      000235 90 F6            [ 1]  312 	ld a,(y)
      000237 CD 01 B0         [ 4]  313 	call write_byte 
      00023A 5C               [ 1]  314 	incw x 
      00023B 90 5C            [ 1]  315 	incw y 
      00023D 1F 01            [ 2]  316 	ldw (XSAVE,sp),x
      00023F 1E 06            [ 2]  317 	ldw x,(BSIZE,sp)
      000241 5A               [ 2]  318 	decw x
      000242 1F 06            [ 2]  319 	ldw (BSIZE,sp),x 
      000244 26 ED            [ 1]  320 	jrne 1$
      000246                        321 9$:
      000246 1E 01            [ 2]  322 	ldw x,(XSAVE,sp)
      000248 CD 1F D6         [ 4]  323 	call incr_farptr
      00024B                        324 	_drop VSIZE
      00024B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00024D 84               [ 1]  325 	pop a 
      00024E 81               [ 4]  326 	ret 
                                    327 
                                    328 
                                    329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    330 ;;  scan_free_eeprom
                                    331 ;;  return free address in eeprom 
                                    332 ;;  input:
                                    333 ;;     none
                                    334 ;;  output:
                                    335 ;;     X    address free 
                                    336 ;;          if full return 0
                                    337 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00024F                        338 scan_free_eeprom::
      00024F 88               [ 1]  339     push a
      000250                        340     _vars 2  
      000250 52 02            [ 2]    1     sub sp,#2 
      000252 AE 40 00         [ 2]  341     ldw x,#EEPROM_BASE  
      000255                        342 1$: ; expect a string here 
      000255 F6               [ 1]  343     ld a,(x)
      000256 27 10            [ 1]  344     jreq 8$ ; free address 
      000258 1F 01            [ 2]  345     ldw (1,sp),x 
      00025A 5F               [ 1]  346     clrw x 
      00025B 97               [ 1]  347     ld xl,a 
      00025C 72 FB 01         [ 2]  348     addw x,(1,sp) ; skip name 
      00025F 1C 00 05         [ 2]  349     addw x,#5 ; skip terminal 0 and value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000262 A3 47 FF         [ 2]  350     cpw x,#EEPROM_END 
      000265 25 EE            [ 1]  351     jrult 1$
      000267 5F               [ 1]  352     clrw x  
      000268                        353 8$: _drop 2  
      000268 5B 02            [ 2]    1     addw sp,#2 
      00026A 84               [ 1]  354     pop a 
      00026B 81               [ 4]  355     ret 
                                    356 
                                    357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    358 ;;  eefree 
                                    359 ;;  return free bytes in eeprom 
                                    360 ;;  input:
                                    361 ;;     none 
                                    362 ;;  output:
                                    363 ;;     X     size 
                                    364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00026C                        365 eefree:
      00026C CD 02 4F         [ 4]  366     call scan_free_eeprom 
      00026F CF 00 2D         [ 2]  367     ldw free_eeprom,x 
      000272 5D               [ 2]  368     tnzw x 
      000273 27 09            [ 1]  369     jreq 9$ 
      000275 89               [ 2]  370     pushw x 
      000276 AE 48 00         [ 2]  371     ldw x,#EEPROM_BASE+EEPROM_SIZE 
      000279 72 F0 01         [ 2]  372     subw x,(1,sp)
      00027C                        373     _drop 2  
      00027C 5B 02            [ 2]    1     addw sp,#2 
      00027E 81               [ 4]  374 9$: ret 
                                    375 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00027F                         66 Uart1RxHandler: ; console receive char 
      00027F 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000284 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000287 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000289 26 06            [ 1]   70 	jrne 2$
      00028B CD 02 F1         [ 4]   71 	call putc 
      00028E CC 00 37         [ 2]   72 	jp user_interrupted
      000291                         73 2$:
      000291 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000293 26 03            [ 1]   75 	jrne 3$
      000295 CC 0E D1         [ 2]   76 	jp cold_start 	
      000298 88               [ 1]   77 3$:	push a 
      000299 A6 23            [ 1]   78 	ld a,#rx1_queue 
      00029B CB 00 2C         [ 1]   79 	add a,rx1_tail 
      00029E 5F               [ 1]   80 	clrw x 
      00029F 97               [ 1]   81 	ld xl,a 
      0002A0 84               [ 1]   82 	pop a 
      0002A1 F7               [ 1]   83 	ld (x),a 
      0002A2 C6 00 2C         [ 1]   84 	ld a,rx1_tail 
      0002A5 4C               [ 1]   85 	inc a 
      0002A6 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0002A8 C7 00 2C         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002AB 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0002AC                         97 uart1_init:
      0002AC 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0002B0 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0002B4 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0002B8 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0002BC                        103 uart1_set_baud: 
      0002BC 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0002BD A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0002BF C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0002C2 27 0A            [ 1]  109 	jreq 2$ 
      0002C4                        110 1$: ; 8 Mhz 	
      0002C4 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0002C8 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0002CC 20 08            [ 2]  113 	jra 3$
      0002CE                        114 2$: ; 16 Mhz 	
      0002CE 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002D2 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0002D6                        117 3$:
      0002D6 72 5F 52 31      [ 1]  118     clr UART1_DR
      0002DA 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002DE 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0002E2 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0002E7 72 5F 00 2B      [ 1]  122     clr rx1_head 
      0002EB 72 5F 00 2C      [ 1]  123 	clr rx1_tail
      0002EF 84               [ 1]  124 	pop a  
      0002F0 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0002F1                        133 putc:: ; console output always on UART1
      0002F1                        134 uart1_putc:: 
      0002F1 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0002F6 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0002F9 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0002FA                        148 qgetc::
      0002FA                        149 uart1_qgetc::
      0002FA C6 00 2B         [ 1]  150 	ld a,rx1_head 
      0002FD C0 00 2C         [ 1]  151 	sub a,rx1_tail 
      000300 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000301                        161 getc:: ;console input
      000301                        162 uart1_getc::
      000301 CD 02 FA         [ 4]  163 	call uart1_qgetc
      000304 27 FB            [ 1]  164 	jreq uart1_getc 
      000306 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000307 A6 23            [ 1]  167 	ld a,#rx1_queue
      000309 CB 00 2B         [ 1]  168 	add a,rx1_head 
      00030C 5F               [ 1]  169 	clrw x  
      00030D 97               [ 1]  170 	ld xl,a 
      00030E F6               [ 1]  171 	ld a,(x)
      00030F 88               [ 1]  172 	push a
      000310 C6 00 2B         [ 1]  173 	ld a,rx1_head 
      000313 4C               [ 1]  174 	inc a 
      000314 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000316 C7 00 2B         [ 1]  176 	ld rx1_head,a 
      000319 84               [ 1]  177 	pop a  
      00031A 85               [ 2]  178 	popw x
      00031B 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00031C 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000328                        207 get_escape:
      000328 CD 03 01         [ 4]  208     call getc 
      00032B A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      00032D 27 02            [ 1]  210     jreq 1$
      00032F 4F               [ 1]  211     clr a
      000330 81               [ 4]  212     ret
      000331 CD 03 01         [ 4]  213 1$: call getc 
      000334 AE 03 1C         [ 2]  214     ldw x,#convert_table
      000337                        215 2$:
      000337 F1               [ 1]  216     cp a,(x)
      000338 27 08            [ 1]  217     jreq 4$
      00033A 1C 00 02         [ 2]  218     addw x,#2
      00033D 7D               [ 1]  219     tnz (x)
      00033E 26 F7            [ 1]  220     jrne 2$
      000340 4F               [ 1]  221     clr a
      000341 81               [ 4]  222     ret 
      000342 5C               [ 1]  223 4$: incw x 
      000343 F6               [ 1]  224     ld a,(x)
      000344 A1 84            [ 1]  225     cp a,#SUP
      000346 26 05            [ 1]  226     jrne 5$
      000348 88               [ 1]  227     push a 
      000349 CD 03 01         [ 4]  228     call getc
      00034C 84               [ 1]  229     pop a 
      00034D                        230 5$:
      00034D 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00034E                        241 puts::
      00034E F6               [ 1]  242     ld a,(x)
      00034F 27 06            [ 1]  243 	jreq 1$
      000351 CD 02 F1         [ 4]  244 	call putc 
      000354 5C               [ 1]  245 	incw x 
      000355 20 F7            [ 2]  246 	jra puts 
      000357 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000358                        258 bksp:
      000358 A6 08            [ 1]  259 	ld a,#BS 
      00035A CD 02 F1         [ 4]  260 	call putc 
      00035D A6 20            [ 1]  261 	ld a,#SPACE 
      00035F CD 02 F1         [ 4]  262 	call putc 
      000362 A6 08            [ 1]  263 	ld a,#BS 
      000364 CD 02 F1         [ 4]  264 	call putc 
      000367 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000368                        274 delete_nchar:
      000368 88               [ 1]  275 	push a 
      000369 0D 01            [ 1]  276 0$:	tnz (1,sp)
      00036B 27 07            [ 1]  277 	jreq 1$
      00036D CD 03 58         [ 4]  278 	call bksp 
      000370 0A 01            [ 1]  279 	dec (1,sp)
      000372 20 F5            [ 2]  280 	jra 0$
      000374 84               [ 1]  281 1$:	pop a 
      000375 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000376                        290 send_escape:
      000376 A6 1B            [ 1]  291 	ld a,#ESC 
      000378 CD 02 F1         [ 4]  292 	call putc 
      00037B A6 5B            [ 1]  293 	ld a,#'[
      00037D CD 02 F1         [ 4]  294 	call putc 
      000380 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      000381                        311 send_parameter:
      000381 89               [ 2]  312 	pushw x 
      000382 5F               [ 1]  313 	clrw x 
      000383 97               [ 1]  314 	ld xl,a 
      000384 A6 0A            [ 1]  315 	ld a,#10 
      000386 62               [ 2]  316 	div x,a 
      000387 95               [ 1]  317 	ld xh,a 
      000388 9F               [ 1]  318 	ld a,xl
      000389 4D               [ 1]  319     tnz a 
      00038A 27 0B            [ 1]  320     jreq 2$
      00038C A1 09            [ 1]  321 	cp a,#9 
      00038E 23 02            [ 2]  322 	jrule 1$
      000390 A6 39            [ 1]  323 	ld a,#'9
      000392                        324 1$:
      000392 AB 30            [ 1]  325 	add a,#'0 
      000394 CD 02 F1         [ 4]  326 	call putc
      000397 9E               [ 1]  327 2$:	ld a,xh 
      000398 AB 30            [ 1]  328 	add a,#'0
      00039A CD 02 F1         [ 4]  329 	call putc 
      00039D 85               [ 2]  330 	popw x 
      00039E 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      00039F                        344 move_left:
      00039F 88               [ 1]  345 	push a 
      0003A0 CD 03 76         [ 4]  346 	call send_escape
      0003A3 84               [ 1]  347     pop a
      0003A4 CD 03 81         [ 4]  348 	call send_parameter 
      0003A7 A6 44            [ 1]  349 	ld a,#'D 
      0003A9 CD 02 F1         [ 4]  350 	call putc 
      0003AC 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003AD                        362 move_right:
      0003AD 88               [ 1]  363 	push a 
      0003AE CD 03 76         [ 4]  364 	call send_escape
      0003B1 84               [ 1]  365     pop a
      0003B2 CD 03 81         [ 4]  366 	call send_parameter 
      0003B5 A6 43            [ 1]  367 	ld a,#'C 
      0003B7 CD 02 F1         [ 4]  368 	call putc 
      0003BA 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0003BB                        379 spaces::
      0003BB A6 20            [ 1]  380 	ld a,#SPACE 
      0003BD 5D               [ 2]  381 1$:	tnzw x
      0003BE 27 06            [ 1]  382 	jreq 9$
      0003C0 CD 02 F1         [ 4]  383 	call putc 
      0003C3 5A               [ 2]  384 	decw x
      0003C4 20 F7            [ 2]  385 	jra 1$
      0003C6                        386 9$: 
      0003C6 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      0003C7                        404 insert_char: 
      0003C7                        405 	_vars VSIZE 
      0003C7 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C9 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      0003CB 9E               [ 1]  407     ld a,xh 
      0003CC 6B 01            [ 1]  408 	ld (IPOS,sp),a
      0003CE 9F               [ 1]  409     ld a,xl 
      0003CF 6B 03            [ 1]  410     ld (LLEN,sp),a  
      0003D1 93               [ 1]  411     ldw x,y
      0003D2 5C               [ 1]  412     incw x 
      0003D3 7B 03            [ 1]  413     ld a,(LLEN,sp)
      0003D5 10 01            [ 1]  414     sub a,(IPOS,sp)
      0003D7 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0003D8 C7 00 0E         [ 1]  416     ld acc8,a 
      0003DB 72 5F 00 0D      [ 1]  417     clr acc16
      0003DF CD 0E 38         [ 4]  418     call move
      0003E2 90 AE 16 90      [ 2]  419     ldw y,#tib 
      0003E6 7B 01            [ 1]  420     ld a,(IPOS,sp)
      0003E8 C7 00 0E         [ 1]  421     ld acc8,a 
      0003EB 72 B9 00 0D      [ 2]  422     addw y,acc16 
      0003EF 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      0003F1 90 F7            [ 1]  424     ld (y),a
      0003F3 90 5C            [ 1]  425     incw y  
      0003F5 7B 01            [ 1]  426     ld a,(IPOS,sp)
      0003F7 CD 03 9F         [ 4]  427     call move_left
      0003FA AE 16 90         [ 2]  428     ldw x,#tib 
      0003FD CD 03 4E         [ 4]  429     call puts 
      000400 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000402 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000404 CD 03 9F         [ 4]  432     call move_left 
      000407                        433 	_drop VSIZE 
      000407 5B 02            [ 2]    1     addw sp,#VSIZE 
      000409 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      00040A                        447 delete_under:
      00040A                        448 	_vars VSIZE 
      00040A 52 02            [ 2]    1     sub sp,#VSIZE 
      00040C 6B 02            [ 1]  449     ld (LLEN,sp),a 
      00040E 9F               [ 1]  450     ld a,xl 
      00040F 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000411 93               [ 1]  452     ldw x,y ; move destination
      000412 90 5C            [ 1]  453     incw y  ; move source 
      000414 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000416 10 01            [ 1]  455     sub a,(CPOS,sp)
      000418 4C               [ 1]  456     inc a ; move including zero at end.
      000419 C7 00 0E         [ 1]  457     ld acc8,a 
      00041C 72 5F 00 0D      [ 1]  458     clr acc16 
      000420 CD 0E 38         [ 4]  459 	call move 
      000423 90 AE 16 90      [ 2]  460     ldw y,#tib 
      000427 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000429 C7 00 0E         [ 1]  462     ld acc8,a 
      00042C 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000430 93               [ 1]  464     ldw x,y 
      000431 CD 03 4E         [ 4]  465     call puts 
      000434 A6 20            [ 1]  466     ld a,#SPACE  
      000436 CD 02 F1         [ 4]  467     call putc
      000439 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00043B 10 01            [ 1]  469     sub a,(CPOS,sp)
      00043D CD 03 9F         [ 4]  470     call move_left 
      000440 0A 02            [ 1]  471     dec (LLEN,sp)
      000442                        472 	_drop VSIZE 
      000442 5B 02            [ 2]    1     addw sp,#VSIZE 
      000444 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000445                        485 delete_line:
      000445 CD 03 76         [ 4]  486     call send_escape
      000448 A6 32            [ 1]  487 	ld a,#'2
      00044A CD 02 F1         [ 4]  488 	call putc 
      00044D A6 4B            [ 1]  489 	ld a,#'K 
      00044F CD 02 F1         [ 4]  490 	call putc 
      000452 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000453                        523 readln::
      000453                        524 	_vars VSIZE 
      000453 52 04            [ 2]    1     sub sp,#VSIZE 
      000455 5F               [ 1]  525 	clrw x 
      000456 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000458 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      00045A 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      00045C 90 AE 16 90      [ 2]  529  	ldw y,#tib ; input buffer
      000460                        530 readln_loop:
      000460 CD 03 01         [ 4]  531 	call getc
      000463 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000465 A1 1B            [ 1]  533     cp a,#ESC 
      000467 26 05            [ 1]  534     jrne 0$
      000469 CD 03 28         [ 4]  535     call get_escape 
      00046C 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      00046E A1 0D            [ 1]  537 0$:	cp a,#CR
      000470 26 03            [ 1]  538 	jrne 1$
      000472 CC 05 FC         [ 2]  539 	jp readln_quit
      000475 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000477 26 03            [ 1]  541 	jrne 2$ 
      000479 CC 05 FC         [ 2]  542 	jp readln_quit
      00047C                        543 2$:
      00047C A1 08            [ 1]  544 	cp a,#BS
      00047E 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000480 0D 03            [ 1]  547     tnz (CPOS,sp)
      000482 27 DC            [ 1]  548     jreq readln_loop 
      000484 A6 01            [ 1]  549     ld a,#1 
      000486 CD 03 9F         [ 4]  550     call move_left
      000489 0A 03            [ 1]  551     dec (CPOS,sp)
      00048B 90 5A            [ 2]  552     decw y 
      00048D 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      00048F CC 05 A8         [ 2]  554     jp 12$
      000492                        555 3$:
      000492 A1 04            [ 1]  556 	cp a,#CTRL_D
      000494 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000496 CD 04 45         [ 4]  559 	call delete_line 
      000499 7B 03            [ 1]  560     ld a,(CPOS,sp)
      00049B 4C               [ 1]  561     inc a 
      00049C CD 03 9F         [ 4]  562     call move_left 
      00049F A6 3E            [ 1]  563 	ld a,#'> 
      0004A1 CD 02 F1         [ 4]  564 	call putc 
      0004A4 90 AE 16 90      [ 2]  565 	ldw y,#tib
      0004A8 90 7F            [ 1]  566 	clr (y)
      0004AA 0F 02            [ 1]  567 	clr (LL,sp)
      0004AC 0F 03            [ 1]  568 	clr (CPOS,sp)
      0004AE 20 B0            [ 2]  569 	jra readln_loop
      0004B0                        570 4$:
      0004B0 A1 12            [ 1]  571 	cp a,#CTRL_R 
      0004B2 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      0004B4 0D 02            [ 1]  574 	tnz (LL,sp)
      0004B6 26 A8            [ 1]  575 	jrne readln_loop
      0004B8 AE 16 90         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0004BB CD 0E 0C         [ 4]  577 	call strlen 
      0004BE 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      0004C2 27 9C            [ 1]  579 	jreq readln_loop
      0004C4 6B 02            [ 1]  580 	ld (LL,sp),a 
      0004C6 6B 03            [ 1]  581     ld (CPOS,sp),a
      0004C8 AE 16 90         [ 2]  582 	ldw x,#tib 
      0004CB CD 03 4E         [ 4]  583 	call puts
      0004CE 0F 01            [ 1]  584 	clr (LL_HB,sp)
      0004D0 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      0004D3 20 8B            [ 2]  586 	jra readln_loop 
      0004D5                        587 5$:
      0004D5 A1 05            [ 1]  588 	cp a,#CTRL_E 
      0004D7 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      0004D9 AE 16 90         [ 2]  591 	ldw x,#tib 
      0004DC CD 13 B5         [ 4]  592 	call atoi24
      0004DF CE 00 0D         [ 2]  593 	ldw x,acc16
      0004E2 CD 06 36         [ 4]  594 	call search_lineno
      0004E5 5D               [ 2]  595 	tnzw x 
      0004E6 26 0B            [ 1]  596 	jrne 51$
      0004E8 0F 02            [ 1]  597 	clr (LL,sp)
      0004EA 90 AE 16 90      [ 2]  598 	ldw y,#tib
      0004EE 90 7F            [ 1]  599     clr (y) 	
      0004F0 CC 05 FC         [ 2]  600 	jp readln_quit  
      0004F3                        601 51$:
      0004F3 CF 00 04         [ 2]  602 	ldw basicptr,x
      0004F6 E6 02            [ 1]  603 	ld a,(2,x)
      0004F8 C7 00 03         [ 1]  604 	ld count,a 
      0004FB 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      0004FF CD 0B 91         [ 4]  606 	call decompile 
      000502 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000504 A6 0D            [ 1]  608 	ld a,#CR 
      000506 CD 02 F1         [ 4]  609 	call putc 
      000509 A6 3E            [ 1]  610 	ld a,#'>
      00050B CD 02 F1         [ 4]  611 	call putc
      00050E AE 16 90         [ 2]  612     ldw x,#tib  
      000511 CD 0E 0C         [ 4]  613 	call strlen 
      000514 6B 02            [ 1]  614 	ld (LL,sp),a 
      000516 CD 03 4E         [ 4]  615 	call puts 
      000519 90 93            [ 1]  616 	ldw y,x
      00051B 7B 02            [ 1]  617     ld a,(LL,sp)
      00051D 6B 03            [ 1]  618     ld (CPOS,sp),a  
      00051F CC 04 60         [ 2]  619 	jp readln_loop
      000522                        620 6$:
      000522 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000524 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000526 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000528 11 02            [ 1]  625     cp a,(LL,sp)
      00052A 2B 03            [ 1]  626     jrmi 61$
      00052C CC 04 60         [ 2]  627     jp readln_loop 
      00052F                        628 61$:
      00052F A6 01            [ 1]  629     ld a,#1 
      000531 CD 03 AD         [ 4]  630 	call move_right 
      000534 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000536 90 5C            [ 1]  632     incw y 
      000538 CC 04 60         [ 2]  633     jp readln_loop 
      00053B A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      00053D 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      00053F 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000541 26 03            [ 1]  638 	jrne 71$
      000543 CC 04 60         [ 2]  639 	jp readln_loop
      000546                        640 71$:
      000546 A6 01            [ 1]  641     ld a,#1 
      000548 CD 03 9F         [ 4]  642 	call move_left 
      00054B 0A 03            [ 1]  643 	dec (CPOS,sp)
      00054D 90 5A            [ 2]  644     decw y 
      00054F CC 04 60         [ 2]  645 	jp readln_loop 
      000552 A1 82            [ 1]  646 8$: cp a,#HOME  
      000554 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000556 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000558 CD 03 9F         [ 4]  650     call move_left 
      00055B 0F 03            [ 1]  651 	clr (CPOS,sp)
      00055D 90 AE 16 90      [ 2]  652     ldw y,#tib 
      000561 CC 04 60         [ 2]  653 	jp readln_loop  
      000564 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000566 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000568 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      00056A 11 02            [ 1]  658 	cp a,(LL,sp)
      00056C 26 03            [ 1]  659 	jrne 91$
      00056E CC 04 60         [ 2]  660 	jp readln_loop 
      000571                        661 91$:
      000571 7B 02            [ 1]  662 	ld a,(LL,sp)
      000573 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000575 CD 03 AD         [ 4]  664 	call move_right 
      000578 7B 02            [ 1]  665 	ld a,(LL,sp)
      00057A 6B 03            [ 1]  666 	ld (CPOS,sp),a
      00057C 90 AE 16 90      [ 2]  667     ldw y,#tib
      000580 72 5F 00 0D      [ 1]  668     clr acc16 
      000584 C7 00 0E         [ 1]  669     ld acc8,a 
      000587 72 B9 00 0D      [ 2]  670     addw y,acc16  
      00058B CC 04 60         [ 2]  671 	jp readln_loop 
      00058E A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000590 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000592 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000594 90 89            [ 2]  676 	pushw y 
      000596 CD 1E 3D         [ 4]  677 	call beep_1khz
      000599 90 85            [ 2]  678 	popw y 
      00059B CC 04 60         [ 2]  679 	jp readln_loop 
      00059E A1 84            [ 1]  680 11$: cp a,#SUP 
      0005A0 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      0005A2 7B 03            [ 1]  683     ld a,(CPOS,sp)
      0005A4 11 02            [ 1]  684     cp a,(LL,sp)
      0005A6 2A 08            [ 1]  685     jrpl 13$
      0005A8                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0005A8 97               [ 1]  687     ld xl,a    ; cursor position 
      0005A9 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      0005AB CD 04 0A         [ 4]  689     call delete_under
      0005AE 0A 02            [ 1]  690     dec (LLEN,sp)
      0005B0                        691 13$:
      0005B0 CC 04 60         [ 2]  692     jp readln_loop 
      0005B3                        693 final_test:
      0005B3 A1 20            [ 1]  694 	cp a,#SPACE
      0005B5 2A 03            [ 1]  695 	jrpl accept_char
      0005B7 CC 04 60         [ 2]  696 	jp readln_loop
      0005BA                        697 accept_char:
      0005BA A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      0005BC 11 02            [ 1]  699 	cp a, (LL,sp)
      0005BE 2A 03            [ 1]  700 	jrpl 1$
      0005C0 CC 04 60         [ 2]  701 	jp readln_loop
      0005C3 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      0005C5 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      0005C7 7B 03            [ 1]  705     ld a,(CPOS,sp)
      0005C9 11 02            [ 1]  706     cp a,(LL,sp)
      0005CB 27 12            [ 1]  707     jreq overwrite
      0005CD 7B 02            [ 1]  708     ld a,(LL,sp)
      0005CF 97               [ 1]  709     ld xl,a 
      0005D0 7B 03            [ 1]  710     ld a,(CPOS,sp)
      0005D2 95               [ 1]  711     ld xh,a
      0005D3 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      0005D5 CD 03 C7         [ 4]  713     call insert_char
      0005D8 0C 02            [ 1]  714     inc (LLEN,sp)
      0005DA 0C 03            [ 1]  715     inc (CPOS,sp)
      0005DC CC 04 60         [ 2]  716     jp readln_loop 
      0005DF                        717 overwrite:
      0005DF 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      0005E1 90 F7            [ 1]  719 	ld (y),a
      0005E3 90 5C            [ 1]  720     incw y
      0005E5 CD 02 F1         [ 4]  721     call putc 
      0005E8 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      0005EA 11 02            [ 1]  723 	cp a,(LL,sp)
      0005EC 2B 09            [ 1]  724 	jrmi 1$
      0005EE 90 7F            [ 1]  725 	clr (y)
      0005F0 0C 02            [ 1]  726 	inc (LL,sp)
      0005F2 0C 03            [ 1]  727     inc (CPOS,sp)
      0005F4 CC 04 60         [ 2]  728 	jp readln_loop 
      0005F7                        729 1$:	
      0005F7 0C 03            [ 1]  730 	inc (CPOS,sp)
      0005F9 CC 04 60         [ 2]  731 	jp readln_loop 
      0005FC                        732 readln_quit:
      0005FC 90 AE 16 90      [ 2]  733 	ldw y,#tib
      000600 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000602 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000605 90 7F            [ 1]  736     clr (y)
      000607 7B 02            [ 1]  737 	ld a,(LL,sp)
      000609 C7 00 03         [ 1]  738 	ld count,a 
      00060C A6 0D            [ 1]  739 	ld a,#CR
      00060E CD 02 F1         [ 4]  740 	call putc
      000611                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000611 5B 04            [ 2]    1     addw sp,#VSIZE 
      000613 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000614                        750 print_hex::
      000614 88               [ 1]  751 	push a 
      000615 4E               [ 1]  752 	swap a 
      000616 CD 06 2B         [ 4]  753 	call to_hex_char 
      000619 CD 02 F1         [ 4]  754 	call putc 
      00061C 7B 01            [ 1]  755     ld a,(1,sp) 
      00061E CD 06 2B         [ 4]  756 	call to_hex_char
      000621 CD 02 F1         [ 4]  757 	call putc
      000624 A6 20            [ 1]  758 	ld a,#SPACE 
      000626 CD 02 F1         [ 4]  759 	call putc 
      000629 84               [ 1]  760 	pop a 
      00062A 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      00062B                        770 to_hex_char::
      00062B A4 0F            [ 1]  771 	and a,#15 
      00062D A1 09            [ 1]  772 	cp a,#9 
      00062F 23 02            [ 2]  773 	jrule 1$ 
      000631 AB 07            [ 1]  774 	add a,#7
      000633 AB 30            [ 1]  775 1$: add a,#'0 
      000635 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000636                         51 search_lineno::
      000636                         52 	_vars VSIZE
      000636 52 02            [ 2]    1     sub sp,#VSIZE 
      000638 0F 01            [ 1]   53 	clr (LL,sp)
      00063A 90 CE 00 1A      [ 2]   54 	ldw y,txtbgn
      00063E 4D               [ 1]   55 	tnz a 
      00063F 27 04            [ 1]   56 	jreq search_ln_loop
      000641 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000645                         58 search_ln_loop:
      000645 90 C3 00 1C      [ 2]   59 	cpw y,txtend 
      000649 2A 10            [ 1]   60 	jrpl 8$
      00064B 90 F3            [ 1]   61 	cpw x,(y)
      00064D 27 0E            [ 1]   62 	jreq 9$
      00064F 2B 0A            [ 1]   63 	jrmi 8$ 
      000651 90 E6 02         [ 1]   64 	ld a,(2,y)
      000654 6B 02            [ 1]   65 	ld (LB,sp),a 
      000656 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000659 20 EA            [ 2]   67 	jra search_ln_loop 
      00065B                         68 8$: 
      00065B 5F               [ 1]   69 	clrw x 	
      00065C 51               [ 1]   70 	exgw x,y 
      00065D                         71 9$: _drop VSIZE
      00065D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00065F 51               [ 1]   72 	exgw x,y   
      000660 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000661                         83 del_line: 
      000661                         84 	_vars VSIZE 
      000661 52 04            [ 2]    1     sub sp,#VSIZE 
      000663 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000665 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000667 0F 01            [ 1]   87 	clr (LLEN,sp)
      000669 90 93            [ 1]   88 	ldw y,x  
      00066B 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      00066E 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000670 90 CE 00 1C      [ 2]   91 	ldw y,txtend 
      000674 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000677 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      00067B 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      00067D CD 0E 38         [ 4]   95 	call move
      000680 90 CE 00 1C      [ 2]   96 	ldw y,txtend 
      000684 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000687 90 CF 00 1C      [ 2]   98 	ldw txtend,y  
      00068B                         99 	_drop VSIZE     
      00068B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00068D 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      00068E                        115 create_gap:
      00068E                        116 	_vars VSIZE
      00068E 52 06            [ 2]    1     sub sp,#VSIZE 
      000690 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000692 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000694 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000698 90 93            [ 1]  120 	ldw y,x ; SRC
      00069A 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      00069E 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      0006A0 CE 00 1C         [ 2]  124 	ldw x,txtend 
      0006A3 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      0006A6 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      0006A9 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      0006AB CD 0E 38         [ 4]  128 	call move
      0006AE CE 00 1C         [ 2]  129 	ldw x,txtend
      0006B1 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      0006B4 CF 00 1C         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0006B7                        132 9$:	_drop VSIZE 
      0006B7 5B 06            [ 2]    1     addw sp,#VSIZE 
      0006B9 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      0006BA                        150 insert_line:
      0006BA                        151 	_vars VSIZE 
      0006BA 52 08            [ 2]    1     sub sp,#VSIZE 
      0006BC CE 00 1C         [ 2]  152 	ldw x,txtend  
      0006BF C3 00 1A         [ 2]  153 	cpw x,txtbgn 
      0006C2 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      0006C4 AE 00 02         [ 2]  156 	ldw x,#2 
      0006C7 72 D6 00 18      [ 4]  157 	ld a,([ptr16],x)
      0006CB A1 03            [ 1]  158 	cp a,#3
      0006CD 27 5A            [ 1]  159 	jreq insert_ln_exit
      0006CF 5F               [ 1]  160 	clrw x 
      0006D0 97               [ 1]  161 	ld xl,a
      0006D1 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      0006D3 CE 00 1A         [ 2]  163 	ldw x,txtbgn
      0006D6 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      0006D8 CE 00 1C         [ 2]  165 	ldw x,txtend 
      0006DB 20 38            [ 2]  166 	jra 4$
      0006DD 72 CE 00 18      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      0006E1 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      0006E3 AE 00 02         [ 2]  170 	ldw x,#2 
      0006E6 72 D6 00 18      [ 4]  171 	ld a,([ptr16],x)
      0006EA 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      0006EB 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      0006ED 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      0006EF 4F               [ 1]  177 	clr a 
      0006F0 CD 06 36         [ 4]  178 	call search_lineno 
      0006F3 5D               [ 2]  179 	tnzw x 
      0006F4 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      0006F6 17 01            [ 2]  183 	ldw (DEST,sp),y 
      0006F8 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      0006FA 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      0006FC CD 06 61         [ 4]  188 	call del_line
      0006FF                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      0006FF A6 03            [ 1]  192 	ld a,#3
      000701 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000703 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000705 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000707 C3 00 1C         [ 2]  198 	cpw x,txtend 
      00070A 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      00070C 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      00070E 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000710 CD 06 8E         [ 4]  204 	call create_gap
      000713 20 06            [ 2]  205 	jra 5$
      000715                        206 4$: 
      000715 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000718 CF 00 1C         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      00071B 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      00071D CF 00 0D         [ 2]  211 	ldw acc16,x 
      000720 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000724 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000726 CD 0E 38         [ 4]  214 	call move 
      000729                        215 insert_ln_exit:	
      000729                        216 	_drop VSIZE
      000729 5B 08            [ 2]    1     addw sp,#VSIZE 
      00072B 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      00072C                        233 parse_quote: 
      00072C                        234 	_vars VSIZE 
      00072C 52 02            [ 2]    1     sub sp,#VSIZE 
      00072E 4F               [ 1]  235 	clr a
      00072F 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000731                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      000731 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000734 27 24            [ 1]  239 	jreq 6$
      000736 72 5C 00 01      [ 1]  240 	inc in 
      00073A 6B 02            [ 1]  241 	ld (CURR,sp),a 
      00073C A6 5C            [ 1]  242 	ld a,#'\
      00073E 11 01            [ 1]  243 	cp a, (PREV,sp)
      000740 26 0A            [ 1]  244 	jrne 3$
      000742 0F 01            [ 1]  245 	clr (PREV,sp)
      000744 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000746 AD 1C            [ 4]  247 	callr convert_escape
      000748 F7               [ 1]  248 	ld (x),a 
      000749 5C               [ 1]  249 	incw x 
      00074A 20 E5            [ 2]  250 	jra 2$
      00074C                        251 3$:
      00074C 7B 02            [ 1]  252 	ld a,(CURR,sp)
      00074E A1 5C            [ 1]  253 	cp a,#'\'
      000750 27 DD            [ 1]  254 	jreq 1$
      000752 A1 22            [ 1]  255 	cp a,#'"
      000754 27 04            [ 1]  256 	jreq 6$ 
      000756 F7               [ 1]  257 	ld (x),a 
      000757 5C               [ 1]  258 	incw x 
      000758 20 D7            [ 2]  259 	jra 2$
      00075A                        260 6$:
      00075A 7F               [ 1]  261 	clr (x)
      00075B 5C               [ 1]  262 	incw x 
      00075C 90 93            [ 1]  263 	ldw y,x 
      00075E 5F               [ 1]  264 	clrw x 
      00075F A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000761                        266 	_drop VSIZE
      000761 5B 02            [ 2]    1     addw sp,#VSIZE 
      000763 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000764                        278 convert_escape:
      000764 89               [ 2]  279 	pushw x 
      000765 AE 07 79         [ 2]  280 	ldw x,#escaped 
      000768 F1               [ 1]  281 1$:	cp a,(x)
      000769 27 06            [ 1]  282 	jreq 2$
      00076B 7D               [ 1]  283 	tnz (x)
      00076C 27 09            [ 1]  284 	jreq 3$
      00076E 5C               [ 1]  285 	incw x 
      00076F 20 F7            [ 2]  286 	jra 1$
      000771 1D 07 79         [ 2]  287 2$: subw x,#escaped 
      000774 9F               [ 1]  288 	ld a,xl 
      000775 AB 07            [ 1]  289 	add a,#7
      000777 85               [ 2]  290 3$:	popw x 
      000778 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    292 
      000779 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000781                        310 parse_integer: ; { -- n }
      000781 89               [ 2]  311 	pushw x 	
      000782 4B 00            [ 1]  312 	push #0 ; TCHAR
      000784 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000786 A1 24            [ 1]  314 	cp a,#'$
      000788 26 04            [ 1]  315 	jrne 2$ 
      00078A                        316     _drop #1
      00078A 5B 01            [ 2]    1     addw sp,##1 
      00078C 4B 10            [ 1]  317 	push #16  ; BASE=16
      00078E F7               [ 1]  318 2$:	ld (x),a 
      00078F 5C               [ 1]  319 	incw x 
      000790 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000793 72 5C 00 01      [ 1]  321 	inc in 
      000797 CD 13 A9         [ 4]  322 	call to_upper 
      00079A 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      00079C CD 08 19         [ 4]  324 	call is_digit 
      00079F 25 ED            [ 1]  325 	jrc 2$
      0007A1 A6 10            [ 1]  326 	ld a,#16 
      0007A3 11 01            [ 1]  327 	cp a,(BASE,sp)
      0007A5 26 0A            [ 1]  328 	jrne 3$ 
      0007A7 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      0007A9 A1 41            [ 1]  330 	cp a,#'A 
      0007AB 2B 04            [ 1]  331 	jrmi 3$ 
      0007AD A1 47            [ 1]  332 	cp a,#'G 
      0007AF 2B DD            [ 1]  333 	jrmi 2$ 
      0007B1 72 5A 00 01      [ 1]  334 3$: dec in 	
      0007B5 7F               [ 1]  335     clr (x)
      0007B6 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      0007B8 CD 13 B5         [ 4]  337 	call atoi24
      0007BB 90 93            [ 1]  338 	ldw y,x 
      0007BD CE 00 0D         [ 2]  339 	ldw x,acc16 
      0007C0 A6 84            [ 1]  340 	ld a,#TK_INTGR
      0007C2 90 FF            [ 2]  341 	ldw (y),x 
      0007C4 72 A9 00 02      [ 2]  342 	addw y,#2
      0007C8                        343 	_drop VSIZE  
      0007C8 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0007CA 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      0007CB                        361 parse_binary: ; { -- n }
      0007CB 4B 00            [ 1]  362 	push #0
      0007CD 4B 00            [ 1]  363 	push #0
      0007CF 4B 00            [ 1]  364 	push #0
      0007D1                        365 2$:	
      0007D1 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      0007D4 72 5C 00 01      [ 1]  367 	inc in 
      0007D8 A1 30            [ 1]  368 	cp a,#'0 
      0007DA 27 06            [ 1]  369 	jreq 3$
      0007DC A1 31            [ 1]  370 	cp a,#'1 
      0007DE 27 02            [ 1]  371 	jreq 3$ 
      0007E0 20 0B            [ 2]  372 	jra bin_exit 
      0007E2 A0 30            [ 1]  373 3$: sub a,#'0 
      0007E4 46               [ 1]  374 	rrc a
      0007E5 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      0007E7 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      0007E9 09 01            [ 1]  377 	rlc (BINARY,sp) 
      0007EB 20 E4            [ 2]  378 	jra 2$  
      0007ED                        379 bin_exit:
      0007ED 72 5A 00 01      [ 1]  380 	dec in 
      0007F1 90 93            [ 1]  381 	ldw y,x
      0007F3 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      0007F5 C7 00 0C         [ 1]  383 	ld acc24,a 
      0007F8 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      0007FA CF 00 0D         [ 2]  385 	ldw acc16,x
      0007FD 90 FF            [ 2]  386 	ldw (y),x 
      0007FF 72 A9 00 02      [ 2]  387 	addw y,#2  
      000803 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      000805                        389 	_drop VSIZE 
      000805 5B 03            [ 2]    1     addw sp,#VSIZE 
      000807 81               [ 4]  390 	ret
                                    391 
                                    392 ;-------------------------------------
                                    393 ; check if A is a letter 
                                    394 ; input:
                                    395 ;   A 			character to test 
                                    396 ; output:
                                    397 ;   C flag      1 true, 0 false 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    398 ;-------------------------------------
      000808                        399 is_alpha::
      000808 A1 41            [ 1]  400 	cp a,#'A 
      00080A 8C               [ 1]  401 	ccf 
      00080B 24 0B            [ 1]  402 	jrnc 9$ 
      00080D A1 5B            [ 1]  403 	cp a,#'Z+1 
      00080F 25 07            [ 1]  404 	jrc 9$ 
      000811 A1 61            [ 1]  405 	cp a,#'a 
      000813 8C               [ 1]  406 	ccf 
      000814 24 02            [ 1]  407 	jrnc 9$
      000816 A1 7B            [ 1]  408 	cp a,#'z+1
      000818 81               [ 4]  409 9$: ret 	
                                    410 
                                    411 ;------------------------------------
                                    412 ; check if character in {'0'..'9'}
                                    413 ; input:
                                    414 ;    A  character to test
                                    415 ; output:
                                    416 ;    Carry  0 not digit | 1 digit
                                    417 ;------------------------------------
      000819                        418 is_digit::
      000819 A1 30            [ 1]  419 	cp a,#'0
      00081B 25 03            [ 1]  420 	jrc 1$
      00081D A1 3A            [ 1]  421     cp a,#'9+1
      00081F 8C               [ 1]  422 	ccf 
      000820 8C               [ 1]  423 1$:	ccf 
      000821 81               [ 4]  424     ret
                                    425 
                                    426 ;-------------------------------------
                                    427 ; return true if character in  A 
                                    428 ; is letter or digit.
                                    429 ; input:
                                    430 ;   A     ASCII character 
                                    431 ; output:
                                    432 ;   A     no change 
                                    433 ;   Carry    0 false| 1 true 
                                    434 ;--------------------------------------
      000822                        435 is_alnum::
      000822 CD 08 19         [ 4]  436 	call is_digit
      000825 25 03            [ 1]  437 	jrc 1$ 
      000827 CD 08 08         [ 4]  438 	call is_alpha
      00082A 81               [ 4]  439 1$:	ret 
                                    440 
                                    441 ;-----------------------------
                                    442 ; check if character in A 
                                    443 ; is a valid symbol character 
                                    444 ; valid: Upper case LETTER,DIGIT,'_' 
                                    445 ; input:
                                    446 ;    A   character to validate
                                    447 ; output:
                                    448 ;    Carry   set if valid 
                                    449 ;----------------------------
      00082B                        450 is_symbol_char: 
      00082B A1 5F            [ 1]  451 	cp a,#'_ 
      00082D 26 03            [ 1]  452 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00082F 99               [ 1]  453 	scf 
      000830 20 03            [ 2]  454 	jra 9$ 
      000832 CD 08 22         [ 4]  455 1$:	call is_alnum 
      000835 81               [ 4]  456 9$: ret 
                                    457 
                                    458 ;---------------------------
                                    459 ;  when lexical unit begin 
                                    460 ;  with a letter a symbol 
                                    461 ;  is expected.
                                    462 ; input:
                                    463 ;   A   first character of symbol 
                                    464 ;	X   point to output buffer 
                                    465 ;   Y   point to input text 
                                    466 ; output:
                                    467 ;	X   after symbol 
                                    468 ;   Y   point after lexical unit 
                                    469 ;---------------------------
      000836                        470 parse_symbol:
      000836 5C               [ 1]  471 	incw x ; keep space for TK_ID 
      000837                        472 symb_loop: 
                                    473 ; symbol are converted to upper case 
      000837 CD 13 A9         [ 4]  474 	call to_upper  
      00083A F7               [ 1]  475 	ld (x), a 
      00083B 5C               [ 1]  476 	incw x
      00083C 91 D6 00         [ 4]  477 	ld a,([in.w],y)
      00083F 72 5C 00 01      [ 1]  478 	inc in 
      000843 CD 08 2B         [ 4]  479 	call is_symbol_char 
      000846 25 EF            [ 1]  480 	jrc symb_loop 
      000848 7F               [ 1]  481 	clr (x)
      000849 72 5A 00 01      [ 1]  482 	dec in  
      00084D 81               [ 4]  483 	ret 
                                    484 
                                    485 ;---------------------------
                                    486 ;  token begin with a letter,
                                    487 ;  is keyword or variable. 	
                                    488 ; input:
                                    489 ;   X 		point to pad 
                                    490 ;   Y 		point to text
                                    491 ;   A 	    first letter  
                                    492 ; output:
                                    493 ;   X		exec_addr|var_addr 
                                    494 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    495 ;   pad 	keyword|var_name  
                                    496 ;--------------------------  
                           000001   497 	XFIRST=1
                           000002   498 	VSIZE=2
      00084E                        499 parse_keyword: 
      00084E 89               [ 2]  500 	pushw x ; preserve *symbol 
      00084F CD 08 36         [ 4]  501 	call parse_symbol
      000852 1E 01            [ 2]  502 	ldw x,(XFIRST,sp) 
      000854 E6 02            [ 1]  503 	ld a,(2,x)
      000856 26 14            [ 1]  504 	jrne 2$
                                    505 ; one letter variable name 
      000858 E6 01            [ 1]  506 	ld a,(1,x) 
      00085A A0 41            [ 1]  507 	sub a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00085C 48               [ 1]  508 	sll a 
      00085D 88               [ 1]  509 	push a 
      00085E 4B 00            [ 1]  510 	push #0
      000860 AE 00 2F         [ 2]  511 	ldw x,#vars 
      000863 72 FB 01         [ 2]  512 	addw x,(1,sp) ; X=var address 
      000866                        513 	_drop 2 
      000866 5B 02            [ 2]    1     addw sp,#2 
      000868 A6 85            [ 1]  514 	ld a,#TK_VAR 
      00086A 20 24            [ 2]  515 	jra 4$ 
      00086C                        516 2$: ; check for keyword, otherwise syntax error.
      00086C                        517 	_ldx_dict kword_dict ; dictionary entry point
      00086C AE 2B 35         [ 2]    1     ldw x,#kword_dict+2
      00086F 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000871 90 5C            [ 1]  519 	incw y 
      000873 CD 15 9C         [ 4]  520 	call search_dict
      000876 4D               [ 1]  521 	tnz a
      000877 26 17            [ 1]  522 	jrne 4$ 
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000879 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      00087B A6 01            [ 1]  526 	ld a,#TK_LABEL 
      00087D 90 F7            [ 1]  527 	ld (y),a 
      00087F 90 5C            [ 1]  528 	incw y
      000881                        529 24$:	
      000881 90 F6            [ 1]  530     ld a,(y)
      000883 27 04            [ 1]  531 	jreq 3$
      000885 90 5C            [ 1]  532 	incw y 
      000887 20 F8            [ 2]  533 	jra 24$ 
      000889 90 5C            [ 1]  534 3$: incw y 
      00088B A6 01            [ 1]  535 	ld a,#TK_LABEL 
      00088D 5F               [ 1]  536 	clrw x 	
      00088E 20 11            [ 2]  537 	jra 5$ 
      000890                        538 4$:	
      000890 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000892 A3 00 50         [ 2]  540 	cpw x,#LET_IDX 
      000895 27 0A            [ 1]  541 	jreq 5$  ; don't compile LET command 
      000897 90 F7            [ 1]  542 	ld (y),a 
      000899 90 5C            [ 1]  543 	incw y 
      00089B 90 FF            [ 2]  544 	ldw (y),x
      00089D 72 A9 00 02      [ 2]  545 	addw y,#2  
      0008A1                        546 5$:	_drop VSIZE 
      0008A1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0008A3 81               [ 4]  547 	ret  	
                                    548 
                                    549 ;------------------------------------
                                    550 ; skip character c in text starting from 'in'
                                    551 ; input:
                                    552 ;	 y 		point to text buffer
                                    553 ;    a 		character to skip
                                    554 ; output:  
                                    555 ;	'in' ajusted to new position
                                    556 ;------------------------------------
                           000001   557 	C = 1 ; local var
      0008A4                        558 skip:
      0008A4 88               [ 1]  559 	push a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008A5 91 D6 00         [ 4]  560 1$:	ld a,([in.w],y)
      0008A8 27 0A            [ 1]  561 	jreq 2$
      0008AA 11 01            [ 1]  562 	cp a,(C,sp)
      0008AC 26 06            [ 1]  563 	jrne 2$
      0008AE 72 5C 00 01      [ 1]  564 	inc in
      0008B2 20 F1            [ 2]  565 	jra 1$
      0008B4                        566 2$: _drop 1 
      0008B4 5B 01            [ 2]    1     addw sp,#1 
      0008B6 81               [ 4]  567 	ret
                                    568 	
                                    569 
                                    570 ;------------------------------------
                                    571 ; scan text for next token
                                    572 ; input: 
                                    573 ;	X 		pointer to buffer where 
                                    574 ;	        token id and value are copied 
                                    575 ; use:
                                    576 ;	Y   pointer to text in tib 
                                    577 ; output:
                                    578 ;   A       token attribute 
                                    579 ;   X 		token value
                                    580 ;   Y       updated position in output buffer   
                                    581 ;------------------------------------
                                    582 	; use to check special character 
                                    583 	.macro _case c t  
                                    584 	ld a,#c 
                                    585 	cp a,(TCHAR,sp) 
                                    586 	jrne t
                                    587 	.endm 
                                    588 
                           000001   589 	TCHAR=1
                           000002   590 	ATTRIB=2
                           000002   591 	VSIZE=2
      0008B7                        592 get_token:: 
      0008B7                        593 	_vars VSIZE
      0008B7 52 02            [ 2]    1     sub sp,#VSIZE 
                                    594 ;	ld a,in 
                                    595 ;	sub a,count
                                    596 ;   jrmi 0$
                                    597 ;	clr a 
                                    598 ;	ret 
      0008B9                        599 0$: 
      0008B9 90 AE 16 90      [ 2]  600 	ldw y,#tib    	
      0008BD A6 20            [ 1]  601 	ld a,#SPACE
      0008BF CD 08 A4         [ 4]  602 	call skip
      0008C2 55 00 01 00 02   [ 1]  603 	mov in.saved,in 
      0008C7 91 D6 00         [ 4]  604 	ld a,([in.w],y)
      0008CA 26 05            [ 1]  605 	jrne 1$
      0008CC 90 93            [ 1]  606 	ldw y,x 
      0008CE CC 0A 73         [ 2]  607 	jp token_exit ; end of line 
      0008D1 72 5C 00 01      [ 1]  608 1$:	inc in 
      0008D5 CD 13 A9         [ 4]  609 	call to_upper 
      0008D8 6B 01            [ 1]  610 	ld (TCHAR,sp),a 
                                    611 ; check for quoted string
      0008DA                        612 str_tst:  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008DA                        613 	_case '"' nbr_tst
      0008DA A6 22            [ 1]    1 	ld a,#'"' 
      0008DC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0008DE 26 0A            [ 1]    3 	jrne nbr_tst
      0008E0 A6 02            [ 1]  614 	ld a,#TK_QSTR
      0008E2 F7               [ 1]  615 	ld (x),a 
      0008E3 5C               [ 1]  616 	incw x 
      0008E4 CD 07 2C         [ 4]  617 	call parse_quote
      0008E7 CC 0A 73         [ 2]  618 	jp token_exit
      0008EA                        619 nbr_tst:
                                    620 ; check for hexadecimal number 
      0008EA A6 24            [ 1]  621 	ld a,#'$'
      0008EC 11 01            [ 1]  622 	cp a,(TCHAR,sp) 
      0008EE 27 17            [ 1]  623 	jreq 1$
                                    624 ;check for binary number 
      0008F0 A6 26            [ 1]  625 	ld a,#'&
      0008F2 11 01            [ 1]  626 	cp a,(TCHAR,sp)
      0008F4 26 0A            [ 1]  627 	jrne 0$
      0008F6 A6 84            [ 1]  628 	ld a,#TK_INTGR
      0008F8 F7               [ 1]  629 	ld (x),a 
      0008F9 5C               [ 1]  630 	incw x 
      0008FA CD 07 CB         [ 4]  631 	call parse_binary ; expect binary integer 
      0008FD CC 0A 73         [ 2]  632 	jp token_exit 
                                    633 ; check for decimal number 	
      000900 7B 01            [ 1]  634 0$:	ld a,(TCHAR,sp)
      000902 CD 08 19         [ 4]  635 	call is_digit
      000905 24 0C            [ 1]  636 	jrnc 3$
      000907 A6 84            [ 1]  637 1$:	ld a,#TK_INTGR 
      000909 F7               [ 1]  638 	ld (x),a 
      00090A 5C               [ 1]  639 	incw x 
      00090B 7B 01            [ 1]  640 	ld a,(TCHAR,sp)
      00090D CD 07 81         [ 4]  641 	call parse_integer 
      000910 CC 0A 73         [ 2]  642 	jp token_exit 
      000913                        643 3$: 
      000913                        644 	_case '(' bkslsh_tst 
      000913 A6 28            [ 1]    1 	ld a,#'(' 
      000915 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000917 26 05            [ 1]    3 	jrne bkslsh_tst
      000919 A6 07            [ 1]  645 	ld a,#TK_LPAREN
      00091B CC 0A 6F         [ 2]  646 	jp token_char   	
      00091E                        647 bkslsh_tst: ; character token 
      00091E                        648 	_case '\',rparnt_tst
      00091E A6 5C            [ 1]    1 	ld a,#'\' 
      000920 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000922 26 16            [ 1]    3 	jrne rparnt_tst
      000924 A6 03            [ 1]  649 	ld a,#TK_CHAR 
      000926 F7               [ 1]  650 	ld (x),a 
      000927 5C               [ 1]  651 	incw x 
      000928 91 D6 00         [ 4]  652 	ld a,([in.w],y)
      00092B F7               [ 1]  653 	ld (x),a 
      00092C 5C               [ 1]  654 	incw x
      00092D 90 93            [ 1]  655 	ldw y,x 	 
      00092F 72 5C 00 01      [ 1]  656 	inc in  
      000933 5F               [ 1]  657 	clrw x 
      000934 97               [ 1]  658 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      000935 A6 03            [ 1]  659 	ld a,#TK_CHAR 
      000937 CC 0A 73         [ 2]  660 	jp token_exit 
      00093A                        661 rparnt_tst:		
      00093A                        662 	_case ')' colon_tst 
      00093A A6 29            [ 1]    1 	ld a,#')' 
      00093C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00093E 26 05            [ 1]    3 	jrne colon_tst
      000940 A6 08            [ 1]  663 	ld a,#TK_RPAREN 
      000942 CC 0A 6F         [ 2]  664 	jp token_char
      000945                        665 colon_tst:
      000945                        666 	_case ':' comma_tst 
      000945 A6 3A            [ 1]    1 	ld a,#':' 
      000947 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000949 26 05            [ 1]    3 	jrne comma_tst
      00094B A6 0B            [ 1]  667 	ld a,#TK_COLON 
      00094D CC 0A 6F         [ 2]  668 	jp token_char  
      000950                        669 comma_tst:
      000950                        670 	_case COMMA sharp_tst 
      000950 A6 2C            [ 1]    1 	ld a,#COMMA 
      000952 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000954 26 05            [ 1]    3 	jrne sharp_tst
      000956 A6 09            [ 1]  671 	ld a,#TK_COMMA
      000958 CC 0A 6F         [ 2]  672 	jp token_char
      00095B                        673 sharp_tst:
      00095B                        674 	_case SHARP dash_tst 
      00095B A6 23            [ 1]    1 	ld a,#SHARP 
      00095D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00095F 26 05            [ 1]    3 	jrne dash_tst
      000961 A6 0A            [ 1]  675 	ld a,#TK_SHARP
      000963 CC 0A 6F         [ 2]  676 	jp token_char  	 	 
      000966                        677 dash_tst: 	
      000966                        678 	_case '-' at_tst 
      000966 A6 2D            [ 1]    1 	ld a,#'-' 
      000968 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00096A 26 05            [ 1]    3 	jrne at_tst
      00096C A6 11            [ 1]  679 	ld a,#TK_MINUS  
      00096E CC 0A 6F         [ 2]  680 	jp token_char 
      000971                        681 at_tst:
      000971                        682 	_case '@' qmark_tst 
      000971 A6 40            [ 1]    1 	ld a,#'@' 
      000973 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000975 26 05            [ 1]    3 	jrne qmark_tst
      000977 A6 06            [ 1]  683 	ld a,#TK_ARRAY 
      000979 CC 0A 6F         [ 2]  684 	jp token_char
      00097C                        685 qmark_tst:
      00097C                        686 	_case '?' tick_tst 
      00097C A6 3F            [ 1]    1 	ld a,#'?' 
      00097E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000980 26 12            [ 1]    3 	jrne tick_tst
      000982 A6 80            [ 1]  687 	ld a,#TK_CMD  
      000984 F7               [ 1]  688 	ld (x),a 
      000985 5C               [ 1]  689 	incw x 
      000986 90 93            [ 1]  690 	ldw y,x 
      000988 AE 00 72         [ 2]  691 	ldw x,#PRT_IDX 
      00098B 90 FF            [ 2]  692 	ldw (y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00098D 72 A9 00 02      [ 2]  693 	addw y,#2
      000991 CC 0A 73         [ 2]  694 	jp token_exit
      000994                        695 tick_tst: ; comment 
      000994                        696 	_case TICK plus_tst 
      000994 A6 27            [ 1]    1 	ld a,#TICK 
      000996 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000998 26 35            [ 1]    3 	jrne plus_tst
      00099A A6 80            [ 1]  697 	ld a,#TK_CMD
      00099C F7               [ 1]  698 	ld (x),a 
      00099D 5C               [ 1]  699 	incw x
      00099E 90 AE 00 8C      [ 2]  700 	ldw y,#REM_IDX
      0009A2 FF               [ 2]  701 	ldw (x),y 
      0009A3 1C 00 02         [ 2]  702 	addw x,#2  
      0009A6                        703 copy_comment:
      0009A6 90 AE 16 90      [ 2]  704 	ldw y,#tib 
      0009AA 72 B9 00 00      [ 2]  705 	addw y,in.w
      0009AE 90 89            [ 2]  706 	pushw y
      0009B0 CD 0E 28         [ 4]  707 	call strcpy
      0009B3 72 F2 01         [ 2]  708     subw y,(1,sp)
      0009B6 90 9F            [ 1]  709 	ld a,yl 
      0009B8 CB 00 01         [ 1]  710 	add a,in
      0009BB C7 00 01         [ 1]  711 	ld in,a 
      0009BE 1F 01            [ 2]  712 	ldw (1,sp),x
      0009C0 72 F9 01         [ 2]  713 	addw y,(1,sp)
      0009C3 90 5C            [ 1]  714 	incw y 
      0009C5                        715 	_drop 2 
      0009C5 5B 02            [ 2]    1     addw sp,#2 
      0009C7 AE 00 8C         [ 2]  716 	ldw x,#REM_IDX 
      0009CA A6 80            [ 1]  717 	ld a,#TK_CMD 
      0009CC CC 0A 73         [ 2]  718 	jp token_exit 
      0009CF                        719 plus_tst:
      0009CF                        720 	_case '+' star_tst 
      0009CF A6 2B            [ 1]    1 	ld a,#'+' 
      0009D1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009D3 26 05            [ 1]    3 	jrne star_tst
      0009D5 A6 10            [ 1]  721 	ld a,#TK_PLUS  
      0009D7 CC 0A 6F         [ 2]  722 	jp token_char 
      0009DA                        723 star_tst:
      0009DA                        724 	_case '*' slash_tst 
      0009DA A6 2A            [ 1]    1 	ld a,#'*' 
      0009DC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009DE 26 05            [ 1]    3 	jrne slash_tst
      0009E0 A6 20            [ 1]  725 	ld a,#TK_MULT 
      0009E2 CC 0A 6F         [ 2]  726 	jp token_char 
      0009E5                        727 slash_tst: 
      0009E5                        728 	_case '/' prcnt_tst 
      0009E5 A6 2F            [ 1]    1 	ld a,#'/' 
      0009E7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009E9 26 05            [ 1]    3 	jrne prcnt_tst
      0009EB A6 21            [ 1]  729 	ld a,#TK_DIV 
      0009ED CC 0A 6F         [ 2]  730 	jp token_char 
      0009F0                        731 prcnt_tst:
      0009F0                        732 	_case '%' eql_tst 
      0009F0 A6 25            [ 1]    1 	ld a,#'%' 
      0009F2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0009F4 26 05            [ 1]    3 	jrne eql_tst
      0009F6 A6 22            [ 1]  733 	ld a,#TK_MOD
      0009F8 CC 0A 6F         [ 2]  734 	jp token_char  
                                    735 ; 1 or 2 character tokens 	
      0009FB                        736 eql_tst:
      0009FB                        737 	_case '=' gt_tst 		
      0009FB A6 3D            [ 1]    1 	ld a,#'=' 
      0009FD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0009FF 26 05            [ 1]    3 	jrne gt_tst
      000A01 A6 32            [ 1]  738 	ld a,#TK_EQUAL
      000A03 CC 0A 6F         [ 2]  739 	jp token_char 
      000A06                        740 gt_tst:
      000A06                        741 	_case '>' lt_tst 
      000A06 A6 3E            [ 1]    1 	ld a,#'>' 
      000A08 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A0A 26 23            [ 1]    3 	jrne lt_tst
      000A0C A6 31            [ 1]  742 	ld a,#TK_GT 
      000A0E 6B 02            [ 1]  743 	ld (ATTRIB,sp),a 
      000A10 91 D6 00         [ 4]  744 	ld a,([in.w],y)
      000A13 72 5C 00 01      [ 1]  745 	inc in 
      000A17 A1 3D            [ 1]  746 	cp a,#'=
      000A19 26 04            [ 1]  747 	jrne 1$
      000A1B A6 33            [ 1]  748 	ld a,#TK_GE 
      000A1D 20 50            [ 2]  749 	jra token_char  
      000A1F A1 3C            [ 1]  750 1$: cp a,#'<
      000A21 26 04            [ 1]  751 	jrne 2$
      000A23 A6 35            [ 1]  752 	ld a,#TK_NE 
      000A25 20 48            [ 2]  753 	jra token_char 
      000A27 72 5A 00 01      [ 1]  754 2$: dec in
      000A2B 7B 02            [ 1]  755 	ld a,(ATTRIB,sp)
      000A2D 20 40            [ 2]  756 	jra token_char 	 
      000A2F                        757 lt_tst:
      000A2F                        758 	_case '<' other
      000A2F A6 3C            [ 1]    1 	ld a,#'<' 
      000A31 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000A33 26 23            [ 1]    3 	jrne other
      000A35 A6 34            [ 1]  759 	ld a,#TK_LT 
      000A37 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      000A39 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      000A3C 72 5C 00 01      [ 1]  762 	inc in 
      000A40 A1 3D            [ 1]  763 	cp a,#'=
      000A42 26 04            [ 1]  764 	jrne 1$
      000A44 A6 36            [ 1]  765 	ld a,#TK_LE 
      000A46 20 27            [ 2]  766 	jra token_char 
      000A48 A1 3E            [ 1]  767 1$: cp a,#'>
      000A4A 26 04            [ 1]  768 	jrne 2$
      000A4C A6 35            [ 1]  769 	ld a,#TK_NE 
      000A4E 20 1F            [ 2]  770 	jra token_char 
      000A50 72 5A 00 01      [ 1]  771 2$: dec in 
      000A54 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      000A56 20 17            [ 2]  773 	jra token_char 	
      000A58                        774 other: ; not a special character 	 
      000A58 7B 01            [ 1]  775 	ld a,(TCHAR,sp)
      000A5A CD 08 08         [ 4]  776 	call is_alpha 
      000A5D 25 03            [ 1]  777 	jrc 30$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000A5F CC 11 57         [ 2]  778 	jp syntax_error 
      000A62                        779 30$: 
      000A62 CD 08 4E         [ 4]  780 	call parse_keyword
      000A65 A3 1A DE         [ 2]  781 	cpw x,#remark 
      000A68 26 09            [ 1]  782 	jrne token_exit 
      000A6A 90 93            [ 1]  783 	ldw y,x 
      000A6C CC 09 A6         [ 2]  784 	jp copy_comment 
      000A6F                        785 token_char:
      000A6F F7               [ 1]  786 	ld (x),a 
      000A70 5C               [ 1]  787 	incw x
      000A71 90 93            [ 1]  788 	ldw y,x 
      000A73                        789 token_exit:
      000A73                        790 	_drop VSIZE 
      000A73 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A75 81               [ 4]  791 	ret
                                    792 
                                    793 
                                    794 ;-----------------------------------
                                    795 ; create token list fromm text line 
                                    796 ; save this list in pad buffer 
                                    797 ;  compiled line format: 
                                    798 ;    line_no  2 bytes {0...32767}
                                    799 ;    count    1 byte  
                                    800 ;    tokens   variable length 
                                    801 ;   
                                    802 ; input:
                                    803 ;   none
                                    804 ; modified variables:
                                    805 ;   basicptr     token list buffer address 
                                    806 ;   in.w  		 3|count, i.e. index in buffer
                                    807 ;   count        length of line | 0  
                                    808 ;-----------------------------------
                           000001   809 	XSAVE=1
                           000002   810 	VSIZE=2
      000A76                        811 compile::
      000A76                        812 	_vars VSIZE 
      000A76 52 02            [ 2]    1     sub sp,#VSIZE 
      000A78 55 00 1A 00 04   [ 1]  813 	mov basicptr,txtbgn
      000A7D 72 1A 00 21      [ 1]  814 	bset flags,#FCOMP 
      000A81 A6 00            [ 1]  815 	ld a,#0
      000A83 AE 00 00         [ 2]  816 	ldw x,#0
      000A86 CF 16 E0         [ 2]  817 	ldw pad,x ; destination buffer 
      000A89 C7 16 E2         [ 1]  818 	ld pad+2,a ; count 
      000A8C AE 16 E3         [ 2]  819 	ldw x,#pad+3
      000A8F 72 5F 00 01      [ 1]  820 	clr in 
      000A93 CD 08 B7         [ 4]  821 	call get_token
      000A96 A1 84            [ 1]  822 	cp a,#TK_INTGR
      000A98 26 11            [ 1]  823 	jrne 2$
      000A9A A3 00 01         [ 2]  824 	cpw x,#1 
      000A9D 2A 05            [ 1]  825 	jrpl 1$
      000A9F A6 0A            [ 1]  826 	ld a,#ERR_BAD_VALUE
      000AA1 CC 11 59         [ 2]  827 	jp tb_error
      000AA4 CF 16 E0         [ 2]  828 1$:	ldw pad,x 
      000AA7 90 AE 16 E3      [ 2]  829 	ldw y,#pad+3 
      000AAB 90 A3 17 60      [ 2]  830 2$:	cpw y,#stack_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AAF 25 05            [ 1]  831 	jrult 3$
      000AB1 A6 0F            [ 1]  832 	ld a,#ERR_BUF_FULL 
      000AB3 CC 11 59         [ 2]  833 	jp tb_error 
      000AB6                        834 3$:	
      000AB6 93               [ 1]  835 	ldw x,y 
      000AB7 CD 08 B7         [ 4]  836 	call get_token 
      000ABA A1 00            [ 1]  837 	cp a,#TK_NONE 
      000ABC 26 ED            [ 1]  838 	jrne 2$ 
                                    839 ; compilation completed  
      000ABE 72 A2 16 E0      [ 2]  840 	subw y,#pad
      000AC2 90 9F            [ 1]  841     ld a,yl
      000AC4 AE 16 E0         [ 2]  842 	ldw x,#pad 
      000AC7 CF 00 18         [ 2]  843 	ldw ptr16,x 
      000ACA E7 02            [ 1]  844 	ld (2,x),a 
      000ACC FE               [ 2]  845 	ldw x,(x)
      000ACD 27 09            [ 1]  846 	jreq 10$
      000ACF CD 06 BA         [ 4]  847 	call insert_line
      000AD2 72 5F 00 03      [ 1]  848 	clr  count 
      000AD6 20 0F            [ 2]  849 	jra  11$ 
      000AD8                        850 10$: ; line# is zero 
      000AD8 CE 00 18         [ 2]  851 	ldw x,ptr16  
      000ADB CF 00 04         [ 2]  852 	ldw basicptr,x 
      000ADE E6 02            [ 1]  853 	ld a,(2,x)
      000AE0 C7 00 03         [ 1]  854 	ld count,a 
      000AE3 35 03 00 01      [ 1]  855 	mov in,#3 
      000AE7                        856 11$:
      000AE7                        857 	_drop VSIZE 
      000AE7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AE9 72 1B 00 21      [ 1]  858 	bres flags,#FCOMP 
      000AED 81               [ 4]  859 	ret 
                                    860 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      000AEE                         48 cpy_cmd_name:
      000AEE F6               [ 1]   49 	ld a,(x)
      000AEF 5C               [ 1]   50 	incw x
      000AF0 A4 0F            [ 1]   51 	and a,#15  
      000AF2 88               [ 1]   52 	push a 
      000AF3 0D 01            [ 1]   53     tnz (1,sp) 
      000AF5 27 0A            [ 1]   54 	jreq 9$
      000AF7 F6               [ 1]   55 1$:	ld a,(x)
      000AF8 90 F7            [ 1]   56 	ld (y),a  
      000AFA 5C               [ 1]   57 	incw x
      000AFB 90 5C            [ 1]   58 	incw y 
      000AFD 0A 01            [ 1]   59 	dec (1,sp)	 
      000AFF 26 F6            [ 1]   60 	jrne 1$
      000B01 84               [ 1]   61 9$: pop a 
      000B02 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      000B03                         72 add_space:
      000B03 90 5A            [ 2]   73 	decw y 
      000B05 90 F6            [ 1]   74 	ld a,(y)
      000B07 90 5C            [ 1]   75 	incw y
      000B09 CD 08 22         [ 4]   76 	call is_alnum 
      000B0C 24 06            [ 1]   77 	jrnc 1$
      000B0E A6 20            [ 1]   78 	ld a,#SPACE 
      000B10 90 F7            [ 1]   79 	ld (y),a 
      000B12 90 5C            [ 1]   80 	incw y 
      000B14 81               [ 4]   81 1$: ret 
                                     82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     83 ;--------------------------
                                     84 ;  align text in buffer 
                                     85 ;  to tab_width padding 
                                     86 ;  left with  SPACE 
                                     87 ; input:
                                     88 ;   X      str*
                                     89 ;   A      str_length 
                                     90 ; output:
                                     91 ;   X      ajusted
                                     92 ;--------------------------
      000B15                         93 right_align::
      000B15 88               [ 1]   94 	push a 
      000B16 7B 01            [ 1]   95 0$: ld a,(1,sp)
      000B18 C1 00 22         [ 1]   96 	cp a,tab_width 
      000B1B 2A 08            [ 1]   97 	jrpl 1$
      000B1D A6 20            [ 1]   98 	ld a,#SPACE 
      000B1F 5A               [ 2]   99 	decw x
      000B20 F7               [ 1]  100 	ld (x),a  
      000B21 0C 01            [ 1]  101 	inc (1,sp)
      000B23 20 F1            [ 2]  102 	jra 0$ 
      000B25 84               [ 1]  103 1$: pop a 	
      000B26 81               [ 4]  104 	ret 
                                    105 
                                    106 ;--------------------------
                                    107 ; print TK_QSTR
                                    108 ; converting control character
                                    109 ; to backslash sequence
                                    110 ; input:
                                    111 ;   X        char *
                                    112 ;   Y        dest. buffer 
                                    113 ; output:
                                    114 ;   X        moved forward 
                                    115 ;   Y        moved forward 
                                    116 ;-----------------------------
      000B27                        117 cpy_quote:
      000B27 A6 22            [ 1]  118 	ld a,#'"
      000B29 90 F7            [ 1]  119 	ld (y),a 
      000B2B 90 5C            [ 1]  120 	incw y 
      000B2D F6               [ 1]  121 1$:	ld a,(x)
      000B2E 27 30            [ 1]  122 	jreq 9$
      000B30 5C               [ 1]  123 	incw x 
      000B31 A1 20            [ 1]  124 	cp a,#SPACE 
      000B33 25 0E            [ 1]  125 	jrult 3$
      000B35 90 F7            [ 1]  126 	ld (y),a
      000B37 90 5C            [ 1]  127 	incw y 
      000B39 A1 5C            [ 1]  128 	cp a,#'\ 
      000B3B 26 F0            [ 1]  129 	jrne 1$ 
      000B3D                        130 2$:
      000B3D 90 F7            [ 1]  131 	ld (y),a
      000B3F 90 5C            [ 1]  132 	incw y  
      000B41 20 EA            [ 2]  133 	jra 1$
      000B43 88               [ 1]  134 3$: push a 
      000B44 A6 5C            [ 1]  135 	ld a,#'\
      000B46 90 F7            [ 1]  136 	ld (y),a 
      000B48 90 5C            [ 1]  137 	incw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B4A 84               [ 1]  138 	pop a 
      000B4B A0 07            [ 1]  139 	sub a,#7
      000B4D C7 00 0E         [ 1]  140 	ld acc8,a 
      000B50 72 5F 00 0D      [ 1]  141 	clr acc16
      000B54 89               [ 2]  142 	pushw x
      000B55 AE 07 79         [ 2]  143 	ldw x,#escaped 
      000B58 72 BB 00 0D      [ 2]  144 	addw x,acc16 
      000B5C F6               [ 1]  145 	ld a,(x)
      000B5D 85               [ 2]  146 	popw x
      000B5E 20 DD            [ 2]  147 	jra 2$
      000B60 A6 22            [ 1]  148 9$: ld a,#'"
      000B62 90 F7            [ 1]  149 	ld (y),a 
      000B64 90 5C            [ 1]  150 	incw y  
      000B66 5C               [ 1]  151 	incw x 
      000B67 81               [ 4]  152 	ret
                                    153 
                                    154 ;--------------------------
                                    155 ; return variable name 
                                    156 ; from its address.
                                    157 ; input:
                                    158 ;   X    variable address
                                    159 ; output:
                                    160 ;   A     variable letter
                                    161 ;--------------------------
      000B68                        162 var_name::
      000B68 1D 00 2F         [ 2]  163 		subw x,#vars 
      000B6B 9F               [ 1]  164 		ld a,xl 
      000B6C 44               [ 1]  165 		srl a 
      000B6D AB 41            [ 1]  166 		add a,#'A 
      000B6F 81               [ 4]  167 		ret 
                                    168 
                                    169 ;-----------------------------
                                    170 ; return cmd  idx from its 
                                    171 ; code address 
                                    172 ; input:
                                    173 ;   X      code address 
                                    174 ; output:
                                    175 ;   X      cmd_idx
                                    176 ;-----------------------------
      000B70                        177 get_cmd_idx:
      000B70 90 89            [ 2]  178 	pushw y
      000B72 90 AE 2B 3B      [ 2]  179 	ldw y,#code_addr 
      000B76 90 CF 00 18      [ 2]  180 	ldw ptr16,y 
      000B7A 90 5F            [ 1]  181 	clrw y 
      000B7C 91 D3 18         [ 5]  182 1$:	cpw x,([ptr16],y)
      000B7F 27 0C            [ 1]  183 	jreq 3$ 
      000B81 90 5C            [ 1]  184 	incw y 
      000B83 91 D6 18         [ 4]  185 	ld a,([ptr16],y)
      000B86 90 5C            [ 1]  186 	incw y
      000B88 91 DA 18         [ 4]  187 	or a,([ptr16],y)	
      000B8B 26 EF            [ 1]  188 	jrne 1$
      000B8D 93               [ 1]  189 3$: ldw x,y 
      000B8E 90 85            [ 2]  190 	popw y 
      000B90 81               [ 4]  191 	ret
                                    192 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    193 
                                    194 ;-------------------------------------
                                    195 ; decompile tokens list 
                                    196 ; to original text line 
                                    197 ; input:
                                    198 ;   [basicptr]  pointer at line 
                                    199 ;   Y           output buffer
                                    200 ; output:
                                    201 ;   A           length 
                                    202 ;   Y           after string  
                                    203 ;------------------------------------
                           000001   204 	BASE_SAV=1
                           000002   205 	WIDTH_SAV=2
                           000003   206 	STR=3
                           000004   207 	VSIZE=4 
      000B91                        208 decompile::
      000B91                        209 	_vars VSIZE
      000B91 52 04            [ 2]    1     sub sp,#VSIZE 
      000B93 C6 00 0A         [ 1]  210 	ld a,base
      000B96 6B 01            [ 1]  211 	ld (BASE_SAV,sp),a  
      000B98 C6 00 22         [ 1]  212 	ld a,tab_width 
      000B9B 6B 02            [ 1]  213 	ld (WIDTH_SAV,sp),a 
      000B9D 17 03            [ 2]  214 	ldw (STR,sp),y   
      000B9F 72 CE 00 04      [ 5]  215 	ldw x,[basicptr] ; line number 
      000BA3 35 0A 00 0A      [ 1]  216 	mov base,#10
      000BA7 35 05 00 22      [ 1]  217 	mov tab_width,#5
      000BAB 72 5F 00 0C      [ 1]  218 	clr acc24 
      000BAF CF 00 0D         [ 2]  219 	ldw acc16,x
      000BB2 CD 12 B9         [ 4]  220 	call itoa  
      000BB5 CD 0B 15         [ 4]  221 	call right_align 
      000BB8 88               [ 1]  222 	push a 
      000BB9 90 93            [ 1]  223 1$:	ldw y,x ; source
      000BBB 1E 04            [ 2]  224 	ldw x,(STR+1,sp) ; destination
      000BBD CD 0E 28         [ 4]  225 	call strcpy 
      000BC0 90 5F            [ 1]  226 	clrw y 
      000BC2 84               [ 1]  227 	pop a 
      000BC3 90 97            [ 1]  228 	ld yl,a 
      000BC5 72 F9 03         [ 2]  229 	addw y,(STR,sp)
      000BC8 A6 20            [ 1]  230 	ld a,#SPACE 
      000BCA 90 F7            [ 1]  231 	ld (y),a 
      000BCC 90 5C            [ 1]  232 	incw y 
      000BCE 72 5F 00 22      [ 1]  233 	clr tab_width
      000BD2 AE 00 03         [ 2]  234 	ldw x,#3
      000BD5 CF 00 00         [ 2]  235 	ldw in.w,x 
      000BD8                        236 decomp_loop:
      000BD8 90 89            [ 2]  237 	pushw y
      000BDA CD 12 4F         [ 4]  238 	call next_token 
      000BDD 90 85            [ 2]  239 	popw y 
      000BDF 4D               [ 1]  240 	tnz a  
      000BE0 26 03            [ 1]  241 	jrne 1$
      000BE2 CC 0C F2         [ 2]  242 	jp 20$
      000BE5 2B 03            [ 1]  243 1$:	jrmi 2$
      000BE7 CC 0C 63         [ 2]  244 	jp 6$
      000BEA                        245 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      000BEA A1 85            [ 1]  246 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000BEC 26 0C            [ 1]  247 	jrne 3$
                                    248 ;; TK_VAR 
      000BEE CD 0B 03         [ 4]  249 	call add_space  
      000BF1 CD 0B 68         [ 4]  250 	call var_name
      000BF4 90 F7            [ 1]  251 	ld (y),a 
      000BF6 90 5C            [ 1]  252 	incw y  
      000BF8 20 DE            [ 2]  253 	jra decomp_loop
      000BFA                        254 3$:
      000BFA A1 84            [ 1]  255 	cp a,#TK_INTGR
      000BFC 26 22            [ 1]  256 	jrne 4$
                                    257 ;; TK_INTGR
      000BFE CD 0B 03         [ 4]  258 	call add_space
      000C01 72 5F 00 0C      [ 1]  259 	clr acc24 
      000C05 CF 00 0D         [ 2]  260 	ldw acc16,x 
      000C08 90 89            [ 2]  261 	pushw y 
      000C0A CD 12 B9         [ 4]  262 	call itoa  
      000C0D 16 01            [ 2]  263 	ldw y,(1,sp) 
      000C0F 88               [ 1]  264 	push a 
      000C10 51               [ 1]  265 	exgw x,y 
      000C11 CD 0E 28         [ 4]  266 	call strcpy 
      000C14 90 5F            [ 1]  267 	clrw y
      000C16 84               [ 1]  268 	pop a  
      000C17 90 97            [ 1]  269 	ld yl,a 
      000C19 72 F9 01         [ 2]  270 	addw y,(1,sp)
      000C1C                        271 	_drop 2 
      000C1C 5B 02            [ 2]    1     addw sp,#2 
      000C1E 20 B8            [ 2]  272 	jra decomp_loop
      000C20                        273 4$: ; dictionary keyword 
      000C20 CD 0B 70         [ 4]  274 	call get_cmd_idx 
      000C23 A3 00 8C         [ 2]  275 	cpw x,#REM_IDX
      000C26 26 23            [ 1]  276 	jrne 5$
      000C28 CE 00 04         [ 2]  277 	ldw x,basicptr 
                                    278 ; copy comment to buffer 
      000C2B CD 0B 03         [ 4]  279 	call add_space
      000C2E A6 27            [ 1]  280 	ld a,#''
      000C30 90 F7            [ 1]  281 	ld (y),a 
      000C32 90 5C            [ 1]  282 	incw y 
      000C34                        283 46$:
      000C34 72 D6 00 00      [ 4]  284 	ld a,([in.w],x)
      000C38 72 5C 00 01      [ 1]  285 	inc in  
      000C3C 90 F7            [ 1]  286 	ld (y),a 
      000C3E 90 5C            [ 1]  287 	incw y 
      000C40 C6 00 01         [ 1]  288 	ld a,in 
      000C43 C1 00 03         [ 1]  289 	cp a,count 
      000C46 2B EC            [ 1]  290 	jrmi 46$
      000C48 CC 0C F2         [ 2]  291 	jp 20$  
      000C4B A3 00 50         [ 2]  292 5$: cpw x,#LET_IDX 
      000C4E 26 03            [ 1]  293 	jrne 51$
      000C50 CC 0B D8         [ 2]  294 	jp decomp_loop ; down display LET 	
      000C53                        295 51$: ; insert command name 
      000C53 CD 0B 03         [ 4]  296 	call add_space  
      000C56 90 89            [ 2]  297 	pushw y
      000C58 CD 0D 2D         [ 4]  298 	call cmd_name
      000C5B 90 85            [ 2]  299 	popw y 
      000C5D CD 0A EE         [ 4]  300 	call cpy_cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000C60 CC 0B D8         [ 2]  301 	jp decomp_loop 
      000C63                        302 6$:
                                    303 ; label?
      000C63 A1 01            [ 1]  304 	cp a,#TK_LABEL 
      000C65 26 23            [ 1]  305 	jrne 64$
                                    306 ; copy label string to output buffer   	
      000C67 A6 20            [ 1]  307 	ld a,#32 
      000C69 90 F7            [ 1]  308 	ld (y),a 
      000C6B 90 5C            [ 1]  309 	incw y 
      000C6D CE 00 04         [ 2]  310 	ldw x,basicptr 
      000C70                        311 61$:
      000C70 72 D6 00 00      [ 4]  312 	ld a,([in.w],x)
      000C74 72 5C 00 01      [ 1]  313 	inc in 
      000C78 4D               [ 1]  314 	tnz a 
      000C79 27 06            [ 1]  315 	jreq 62$
      000C7B 90 F7            [ 1]  316 	ld (y),a 
      000C7D 90 5C            [ 1]  317 	incw y 
      000C7F 20 EF            [ 2]  318 	jra 61$ 
      000C81                        319 62$: 
      000C81 A6 20            [ 1]  320 	ld a,#32 
      000C83 90 F7            [ 1]  321 	ld (y),a 
      000C85 90 5C            [ 1]  322 	incw y 
      000C87 CC 0B D8         [ 2]  323 	jp decomp_loop
      000C8A                        324 64$:
      000C8A A1 02            [ 1]  325 	cp a,#TK_QSTR 
      000C8C 26 06            [ 1]  326 	jrne 7$
                                    327 ;; TK_QSTR
      000C8E CD 0B 27         [ 4]  328 	call cpy_quote  
      000C91 CC 0B D8         [ 2]  329 	jp decomp_loop
      000C94                        330 7$:
      000C94 A1 03            [ 1]  331 	cp a,#TK_CHAR 
      000C96 26 0E            [ 1]  332 	jrne 8$
                                    333 ;; TK_CHAR 
      000C98 A6 5C            [ 1]  334 	ld a,#'\ 
      000C9A 90 F7            [ 1]  335 	ld (y),a 
      000C9C 90 5C            [ 1]  336 	incw y 
      000C9E 9F               [ 1]  337 	ld a,xl 
      000C9F 90 F7            [ 1]  338 	ld (y),a 
      000CA1 90 5C            [ 1]  339 	incw y 
      000CA3 CC 0B D8         [ 2]  340 	jp decomp_loop
      000CA6 A1 0B            [ 1]  341 8$: cp a,#TK_COLON 
      000CA8 26 09            [ 1]  342 	jrne 9$
      000CAA A6 3A            [ 1]  343 	ld a,#':
      000CAC                        344 81$:
      000CAC 90 F7            [ 1]  345 	ld (y),a 
      000CAE 90 5C            [ 1]  346 	incw y 
      000CB0                        347 82$:
      000CB0 CC 0B D8         [ 2]  348 	jp decomp_loop
      000CB3                        349 9$: 
      000CB3 A1 0A            [ 1]  350 	cp a,#TK_SHARP
      000CB5 22 0A            [ 1]  351 	jrugt 10$ 
      000CB7 A0 06            [ 1]  352 	sub a,#TK_ARRAY 
      000CB9 5F               [ 1]  353 	clrw x 
      000CBA 97               [ 1]  354 	ld xl,a
      000CBB 1C 0D 08         [ 2]  355 	addw x,#single_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000CBE F6               [ 1]  356 	ld a,(x)
      000CBF 20 EB            [ 2]  357 	jra 81$ 
      000CC1                        358 10$: 
      000CC1 A1 11            [ 1]  359 	cp a,#TK_MINUS 
      000CC3 22 0A            [ 1]  360 	jrugt 11$
      000CC5 A0 10            [ 1]  361 	sub a,#TK_PLUS 
      000CC7 5F               [ 1]  362 	clrw x 
      000CC8 97               [ 1]  363 	ld xl,a 
      000CC9 1C 0D 0D         [ 2]  364 	addw x,#add_char 
      000CCC F6               [ 1]  365 	ld a,(x)
      000CCD 20 DD            [ 2]  366 	jra 81$
      000CCF                        367 11$:
      000CCF A1 22            [ 1]  368     cp a,#TK_MOD 
      000CD1 22 0A            [ 1]  369 	jrugt 12$
      000CD3 A0 20            [ 1]  370 	sub a,#TK_MULT
      000CD5 5F               [ 1]  371 	clrw x 
      000CD6 97               [ 1]  372 	ld xl,a 
      000CD7 1C 0D 0F         [ 2]  373 	addw x,#mul_char
      000CDA F6               [ 1]  374 	ld a,(x)
      000CDB 20 CF            [ 2]  375 	jra 81$
      000CDD                        376 12$:
      000CDD A0 31            [ 1]  377 	sub a,#TK_GT  
      000CDF 48               [ 1]  378 	sll a 
      000CE0 5F               [ 1]  379 	clrw x 
      000CE1 97               [ 1]  380 	ld xl,a 
      000CE2 1C 0D 12         [ 2]  381 	addw x,#relop_str 
      000CE5 FE               [ 2]  382 	ldw x,(x)
      000CE6 F6               [ 1]  383 	ld a,(x)
      000CE7 5C               [ 1]  384 	incw x 
      000CE8 90 F7            [ 1]  385 	ld (y),a
      000CEA 90 5C            [ 1]  386 	incw y 
      000CEC F6               [ 1]  387 	ld a,(x)
      000CED 26 BD            [ 1]  388 	jrne 81$
      000CEF CC 0B D8         [ 2]  389 	jp decomp_loop 
      000CF2                        390 20$: 
      000CF2 90 7F            [ 1]  391 	clr (y)
      000CF4 1E 03            [ 2]  392 	ldw x,(STR,sp)
      000CF6 7B 01            [ 1]  393 	ld a,(BASE_SAV,sp)
      000CF8 C7 00 0A         [ 1]  394 	ld base,a 
      000CFB 7B 02            [ 1]  395 	ld a,(WIDTH_SAV,sp)
      000CFD C7 00 22         [ 1]  396 	ld tab_width,a
      000D00 72 F2 03         [ 2]  397 	subw y,(STR,sp) 
      000D03 90 9F            [ 1]  398 	ld a,yl 
      000D05                        399 	_drop VSIZE 
      000D05 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D07 81               [ 4]  400 	ret 
                                    401 
      000D08 40 28 29 2C 23         402 single_char: .byte '@','(',')',',','#'
      000D0D 2B 2D                  403 add_char: .byte '+','-'
      000D0F 2A 2F 25               404 mul_char: .byte '*','/','%'
      000D12 0D 1E 0D 20 0D 22 0D   405 relop_str: .word gt,equal,ge,lt,le,ne 
             25 0D 27 0D 2A
      000D1E 3E 00                  406 gt: .asciz ">"
      000D20 3D 00                  407 equal: .asciz "="
      000D22 3E 3D 00               408 ge: .asciz ">="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D25 3C 00                  409 lt: .asciz "<"
      000D27 3C 3D 00               410 le: .asciz "<="
      000D2A 3C 3E 00               411 ne:  .asciz "<>"
                                    412 
                                    413 ;----------------------------------
                                    414 ; search in kword_dict name
                                    415 ; from its execution address 
                                    416 ; input:
                                    417 ;   X       	cmd_index 
                                    418 ; output:
                                    419 ;   X 			cstr*  | 0 
                                    420 ;--------------------------------
                           000001   421 	CMDX=1 
                           000003   422 	LINK=3 
                           000004   423 	VSIZE=4
      000D2D                        424 cmd_name:
      000D2D                        425 	_vars VSIZE 
      000D2D 52 04            [ 2]    1     sub sp,#VSIZE 
      000D2F 72 5F 00 0D      [ 1]  426 	clr acc16 
      000D33 1F 01            [ 2]  427 	ldw (CMDX,sp),x  
      000D35 AE 2B 33         [ 2]  428 	ldw x,#kword_dict	
      000D38 1F 03            [ 2]  429 1$:	ldw (LINK,sp),x
      000D3A E6 02            [ 1]  430 	ld a,(2,x)
      000D3C A4 0F            [ 1]  431 	and a,#15 
      000D3E C7 00 0E         [ 1]  432 	ld acc8,a 
      000D41 1C 00 03         [ 2]  433 	addw x,#3
      000D44 72 BB 00 0D      [ 2]  434 	addw x,acc16
      000D48 FE               [ 2]  435 	ldw x,(x) ; command index  
      000D49 13 01            [ 2]  436 	cpw x,(CMDX,sp)
      000D4B 27 0A            [ 1]  437 	jreq 2$
      000D4D 1E 03            [ 2]  438 	ldw x,(LINK,sp)
      000D4F FE               [ 2]  439 	ldw x,(x) 
      000D50 1D 00 02         [ 2]  440 	subw x,#2  
      000D53 26 E3            [ 1]  441 	jrne 1$
      000D55 20 05            [ 2]  442 	jra 9$
      000D57 1E 03            [ 2]  443 2$: ldw x,(LINK,sp)
      000D59 1C 00 02         [ 2]  444 	addw x,#2 	
      000D5C                        445 9$:	_drop VSIZE
      000D5C 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D5E 81               [ 4]  446 	ret
                                    447 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                     29     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 SEPARATE=0 ; set to 1 for 'make separate' 
                                      6 
                                      7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                     30 
                           000000    31 .if SEPARATE
                                     32 	.include "inc/nucleo_8s208.inc"
                                     33 	.include "inc/stm8s208.inc"
                                     34 	.include "inc/ascii.inc"
                                     35 	.include "inc/gen_macros.inc" 
                                     36 	.include "tbi_macros.inc" 
                                     37 .endif 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
      000000                         43 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         44 in::    .blkb 1 ; low byte of in.w 
      000002                         45 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         46 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         47 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         48 data_ptr:  .blkw 1  ; point to DATA address
      000008                         49 data_ofs:  .blkb 1  ; index to next data item 
      000009                         50 data_len:  .blkb 1  ; length of data line 
      00000A                         51 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         52 acc32:  .blkb 1 ; 32 bit accumulator most signicant byte 
      00000C                         53 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000D                         54 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000E                         55 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000F                         56 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000011                         57 timer:: .blkw 1 ;  milliseconds count down timer 
      000013                         58 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000015                         59 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000017                         60 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000018                         61 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000019                         62 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001A                         63 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001C                         64 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001E                         65 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001F                         66 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000021                         67 flags:: .blkb 1 ; various boolean flags
      000022                         68 tab_width:: .blkb 1 ; print colon width (default 6)
      000023                         69 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002B                         70 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002C                         71 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002D                         72 free_eeprom: .blkw 1 ; start address of free eeprom 
                                     73 
                                     74 
      00002F                         75 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     76 	.area BTXT (ABS)
      00007C                         77 	.org 0x7C  
                                     78 ; keep 'free_ram' as last variable 
                                     79 ; basic code compiled here. 
      00007C                         80 rsign: .blkw 1 ; "BC" 
      00007E                         81 rsize: .blkw 1 ; code size 	 
      000080                         82 free_ram: ; from here RAM free for BASIC text 
                                     83 
                                     84 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                     85 
                                     86 ;----------------------
                                     87 ; print token id && value
                                     88 ; input:
                                     89 ;   A     token id 
                                     90 ;   X     token value 
                                     91 ;---------------------
                           000001    92 	BSAVE=1
                           000002    93 	AREG=2
                           000003    94 	XREG=3
                           000004    95 	VSIZE=4
      000D5F                         96 prt_tok:
      000D5F                         97 	_vars VSIZE 
      000D5F 52 04            [ 2]    1     sub sp,#VSIZE 
      000D61 6B 02            [ 1]   98 	ld (AREG,sp),a 
      000D63 1F 03            [ 2]   99 	ldw (XREG,sp),x 
      000D65 C6 00 0A         [ 1]  100 	ld a, base
      000D68 6B 01            [ 1]  101 	ld (BSAVE,sp),a 
      000D6A 35 10 00 0A      [ 1]  102 	mov base,#16  
      000D6E AE 0D 96         [ 2]  103 	ldw x,#token_msg
      000D71 CD 03 4E         [ 4]  104 	call puts 
      000D74 5F               [ 1]  105 	clrw x 
      000D75 7B 02            [ 1]  106 	ld a,(AREG,sp)
      000D77 97               [ 1]  107 	ld xl,a 
      000D78 CD 12 9D         [ 4]  108 	call print_int 
      000D7B A6 20            [ 1]  109 	ld a,#SPACE
      000D7D CD 02 F1         [ 4]  110 	call putc 
      000D80 1E 03            [ 2]  111 	ldw x,(XREG,sp)
      000D82 CD 12 9D         [ 4]  112 	call print_int 
      000D85 A6 0D            [ 1]  113 	ld a,#CR 
      000D87 CD 02 F1         [ 4]  114 	call putc 
      000D8A 7B 01            [ 1]  115 	ld a,(BSAVE,sp)
      000D8C C7 00 0A         [ 1]  116 	ld base,a 
      000D8F 7B 02            [ 1]  117 	ld a,(AREG,sp)
      000D91 1E 03            [ 2]  118 	ldw x,(XREG,sp)
      000D93                        119 	_drop VSIZE 
      000D93 5B 04            [ 2]    1     addw sp,#VSIZE 
      000D95 81               [ 4]  120 	ret 
      000D96 74 6F 6B 65 6E 3A 20   121 token_msg: .asciz "token: "
             00
                                    122 
                                    123 
                                    124 ;---------------------
                                    125 ; display n bytes row 
                                    126 ; from memory.
                                    127 ; input:
                                    128 ;   A   bytes to print 
                                    129 ;	X   start address 
                                    130 ; output:
                                    131 ;   X   address after last shown  
                                    132 ;---------------------
                           000001   133 	CNT=1 
                           000002   134 	ADR=2 
                           000003   135 	VSIZE=3 
      000D9E                        136 show_row:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000D9E 4D               [ 1]  137 	tnz a 
      000D9F 26 01            [ 1]  138 	jrne 1$
      000DA1 81               [ 4]  139 	ret 
      000DA2                        140 1$:	
      000DA2 89               [ 2]  141 	pushw x  
      000DA3 88               [ 1]  142 	push a 
      000DA4 35 04 00 22      [ 1]  143 	mov tab_width,#4 
      000DA8 CD 12 9D         [ 4]  144 	call print_int 
      000DAB A6 20            [ 1]  145 	ld a,#SPACE  
      000DAD CD 02 F1         [ 4]  146 	call putc
      000DB0                        147 row_loop:
      000DB0 1E 02            [ 2]  148 	ldw x,(ADR,sp)
      000DB2 F6               [ 1]  149 	ld a,(x)
      000DB3 5F               [ 1]  150 	clrw x 
      000DB4 97               [ 1]  151 	ld xl,a 
      000DB5 CD 12 9D         [ 4]  152 	call print_int 
      000DB8 1E 02            [ 2]  153 	ldw x,(ADR,sp)
      000DBA 5C               [ 1]  154 	incw x 
      000DBB 1F 02            [ 2]  155 	ldw (ADR,sp),x 
      000DBD 0A 01            [ 1]  156 	dec (CNT,sp)
      000DBF 26 EF            [ 1]  157 	jrne row_loop
      000DC1                        158 	_drop VSIZE  		
      000DC1 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DC3 35 04 00 22      [ 1]  159 	mov tab_width,#4
      000DC7 A6 0D            [ 1]  160 	ld a,#CR 
      000DC9 CD 02 F1         [ 4]  161 	call putc 
      000DCC 81               [ 4]  162 	ret 
                                    163 
                                    164 ;--------------------------
                                    165 ; print memory content 
                                    166 ; in hexadecimal format
                                    167 ;  input:
                                    168 ;    X    start address 
                                    169 ;    Y    count 
                                    170 ;--------------------------
                           000001   171 	BCNT=1
                           000003   172 	BASE=3
                           000004   173 	TABW=4
                           000004   174 	VSIZE=4   
      000DCD                        175 hex_dump:
      000DCD 88               [ 1]  176 	push a 
      000DCE                        177 	_vars VSIZE
      000DCE 52 04            [ 2]    1     sub sp,#VSIZE 
      000DD0 C6 00 0A         [ 1]  178 	ld a,base
      000DD3 6B 03            [ 1]  179 	ld (BASE,sp),a 
      000DD5 35 10 00 0A      [ 1]  180 	mov base,#16
      000DD9 C6 00 22         [ 1]  181 	ld a,tab_width 
      000DDC 6B 04            [ 1]  182 	ld (TABW,sp),a
      000DDE A6 0D            [ 1]  183 	ld a,#CR 
      000DE0 CD 02 F1         [ 4]  184 	call putc 
      000DE3 17 01            [ 2]  185 1$: ldw (BCNT,sp),y
      000DE5 A6 10            [ 1]  186 	ld a,#16
      000DE7 90 A3 00 10      [ 2]  187 	cpw y,#16
      000DEB 2A 02            [ 1]  188 	jrpl 2$
      000DED 90 9F            [ 1]  189 	ld a,yl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000DEF                        190 2$: 	
      000DEF CD 0D 9E         [ 4]  191 	call show_row 
      000DF2 16 01            [ 2]  192 	ldw y,(BCNT,sp) 
      000DF4 72 A2 00 10      [ 2]  193 	subw y,#16 
      000DF8 90 A3 00 01      [ 2]  194 	cpw y,#1
      000DFC 2A E5            [ 1]  195 	jrpl 1$
      000DFE 7B 03            [ 1]  196 	ld a,(BASE,sp)
      000E00 C7 00 0A         [ 1]  197 	ld base,a
      000E03 7B 04            [ 1]  198 	ld a,(TABW,sp)
      000E05 C7 00 22         [ 1]  199 	ld tab_width,a 
      000E08                        200 	_drop VSIZE
      000E08 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E0A 84               [ 1]  201 	pop a 
      000E0B 81               [ 4]  202 	ret 
                                    203 
                                    204 ;-------------------------------------
                                    205 ; retrun string length
                                    206 ; input:
                                    207 ;   X         .asciz  pointer 
                                    208 ; output:
                                    209 ;   X         not affected 
                                    210 ;   A         length 
                                    211 ;-------------------------------------
      000E0C                        212 strlen::
      000E0C 89               [ 2]  213 	pushw x 
      000E0D 4F               [ 1]  214 	clr a
      000E0E 7D               [ 1]  215 1$:	tnz (x) 
      000E0F 27 04            [ 1]  216 	jreq 9$ 
      000E11 4C               [ 1]  217 	inc a 
      000E12 5C               [ 1]  218 	incw x 
      000E13 20 F9            [ 2]  219 	jra 1$ 
      000E15 85               [ 2]  220 9$:	popw x 
      000E16 81               [ 4]  221 	ret 
                                    222 
                                    223 ;------------------------------------
                                    224 ; compare 2 strings
                                    225 ; input:
                                    226 ;   X 		char* first string 
                                    227 ;   Y       char* second string 
                                    228 ; output:
                                    229 ;   A 		0|1 
                                    230 ;-------------------------------------
      000E17                        231 strcmp:
      000E17 F6               [ 1]  232 	ld a,(x)
      000E18 27 0B            [ 1]  233 	jreq 5$ 
      000E1A 90 F1            [ 1]  234 	cp a,(y) 
      000E1C 26 05            [ 1]  235 	jrne 4$ 
      000E1E 5C               [ 1]  236 	incw x 
      000E1F 90 5C            [ 1]  237 	incw y 
      000E21 20 F4            [ 2]  238 	jra strcmp 
      000E23                        239 4$: ; not same  
      000E23 4F               [ 1]  240 	clr a 
      000E24 81               [ 4]  241 	ret 
      000E25                        242 5$: ; same 
      000E25 A6 01            [ 1]  243 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E27 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;---------------------------------------
                                    248 ;  copy src to dest 
                                    249 ; input:
                                    250 ;   X 		dest 
                                    251 ;   Y 		src 
                                    252 ; output: 
                                    253 ;   X 		dest 
                                    254 ;----------------------------------
      000E28                        255 strcpy::
      000E28 88               [ 1]  256 	push a 
      000E29 89               [ 2]  257 	pushw x 
      000E2A 90 F6            [ 1]  258 1$: ld a,(y)
      000E2C 27 06            [ 1]  259 	jreq 9$ 
      000E2E F7               [ 1]  260 	ld (x),a 
      000E2F 5C               [ 1]  261 	incw x 
      000E30 90 5C            [ 1]  262 	incw y 
      000E32 20 F6            [ 2]  263 	jra 1$ 
      000E34 7F               [ 1]  264 9$:	clr (x)
      000E35 85               [ 2]  265 	popw x 
      000E36 84               [ 1]  266 	pop a 
      000E37 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; move memory block 
                                    271 ; input:
                                    272 ;   X 		destination 
                                    273 ;   Y 	    source 
                                    274 ;   acc16	bytes count 
                                    275 ; output:
                                    276 ;   none 
                                    277 ;--------------------------------------
                           000001   278 	INCR=1 ; increament high byte 
                           000002   279 	LB=2 ; increament low byte 
                           000002   280 	VSIZE=2
      000E38                        281 move::
      000E38 88               [ 1]  282 	push a 
      000E39                        283 	_vars VSIZE 
      000E39 52 02            [ 2]    1     sub sp,#VSIZE 
      000E3B 0F 01            [ 1]  284 	clr (INCR,sp)
      000E3D 0F 02            [ 1]  285 	clr (LB,sp)
      000E3F 90 89            [ 2]  286 	pushw y 
      000E41 13 01            [ 2]  287 	cpw x,(1,sp) ; compare DEST to SRC 
      000E43 90 85            [ 2]  288 	popw y 
      000E45 27 31            [ 1]  289 	jreq move_exit ; x==y 
      000E47 2B 0E            [ 1]  290 	jrmi move_down
      000E49                        291 move_up: ; start from top address with incr=-1
      000E49 72 BB 00 0D      [ 2]  292 	addw x,acc16
      000E4D 72 B9 00 0D      [ 2]  293 	addw y,acc16
      000E51 03 01            [ 1]  294 	cpl (INCR,sp)
      000E53 03 02            [ 1]  295 	cpl (LB,sp)   ; increment = -1 
      000E55 20 05            [ 2]  296 	jra move_loop  
      000E57                        297 move_down: ; start from bottom address with incr=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E57 5A               [ 2]  298     decw x 
      000E58 90 5A            [ 2]  299 	decw y
      000E5A 0C 02            [ 1]  300 	inc (LB,sp) ; incr=1 
      000E5C                        301 move_loop:	
      000E5C C6 00 0D         [ 1]  302     ld a, acc16 
      000E5F CA 00 0E         [ 1]  303 	or a, acc8
      000E62 27 14            [ 1]  304 	jreq move_exit 
      000E64 72 FB 01         [ 2]  305 	addw x,(INCR,sp)
      000E67 72 F9 01         [ 2]  306 	addw y,(INCR,sp) 
      000E6A 90 F6            [ 1]  307 	ld a,(y)
      000E6C F7               [ 1]  308 	ld (x),a 
      000E6D 89               [ 2]  309 	pushw x 
      000E6E CE 00 0D         [ 2]  310 	ldw x,acc16 
      000E71 5A               [ 2]  311 	decw x 
      000E72 CF 00 0D         [ 2]  312 	ldw acc16,x 
      000E75 85               [ 2]  313 	popw x 
      000E76 20 E4            [ 2]  314 	jra move_loop
      000E78                        315 move_exit:
      000E78                        316 	_drop VSIZE
      000E78 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E7A 84               [ 1]  317 	pop a 
      000E7B 81               [ 4]  318 	ret 	
                                    319 
                                    320 ;------------------------------------
                                    321 ;  set all variables to zero 
                                    322 ; input:
                                    323 ;   none 
                                    324 ; output:
                                    325 ;	none
                                    326 ;------------------------------------
      000E7C                        327 clear_vars:
      000E7C 89               [ 2]  328 	pushw x 
      000E7D 88               [ 1]  329 	push a  
      000E7E AE 00 2F         [ 2]  330 	ldw x,#vars 
      000E81 A6 34            [ 1]  331 	ld a,#2*26 
      000E83 7F               [ 1]  332 1$:	clr (x)
      000E84 5C               [ 1]  333 	incw x 
      000E85 4A               [ 1]  334 	dec a 
      000E86 26 FB            [ 1]  335 	jrne 1$
      000E88 84               [ 1]  336 	pop a 
      000E89 85               [ 2]  337 	popw x 
      000E8A 81               [ 4]  338 	ret 
                                    339 
                                    340 ;-------------------------------------
                                    341 ;  program initialization entry point 
                                    342 ;-------------------------------------
                           000002   343 	MAJOR=2
                           000000   344 	MINOR=0 
      000E8B 0A 0A 54 69 6E 79 20   345 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      000ED1                        346 cold_start:
                                    347 ;set stack 
      000ED1 AE 17 FF         [ 2]  348 	ldw x,#STACK_EMPTY
      000ED4 94               [ 1]  349 	ldw sp,x   
                                    350 ; clear all ram 
      000ED5 7F               [ 1]  351 0$: clr (x)
      000ED6 5A               [ 2]  352 	decw x 
      000ED7 26 FC            [ 1]  353 	jrne 0$
                                    354 ; activate pull up on all inputs 
      000ED9 A6 FF            [ 1]  355 	ld a,#255 
      000EDB C7 50 03         [ 1]  356 	ld PA_CR1,a 
      000EDE C7 50 08         [ 1]  357 	ld PB_CR1,a 
      000EE1 C7 50 0D         [ 1]  358 	ld PC_CR1,a 
      000EE4 C7 50 12         [ 1]  359 	ld PD_CR1,a 
      000EE7 C7 50 17         [ 1]  360 	ld PE_CR1,a 
      000EEA C7 50 1C         [ 1]  361 	ld PF_CR1,a 
      000EED C7 50 21         [ 1]  362 	ld PG_CR1,a 
      000EF0 C7 50 2B         [ 1]  363 	ld PI_CR1,a
                                    364 ; set LD2 pin as output 
      000EF3 72 1A 50 0D      [ 1]  365     bset PC_CR1,#LED2_BIT
      000EF7 72 1A 50 0E      [ 1]  366     bset PC_CR2,#LED2_BIT
      000EFB 72 1A 50 0C      [ 1]  367     bset PC_DDR,#LED2_BIT
      000EFF 72 1B 50 0A      [ 1]  368 	bres PC_ODR,#LED2_BIT 
                                    369 ; disable schmitt triggers on Arduino CN4 analog inputs
      000F03 55 00 3F 54 07   [ 1]  370 	mov ADC_TDRL,0x3f
                                    371 ; disable peripherals clocks
                                    372 ;	clr CLK_PCKENR1 
                                    373 ;	clr CLK_PCKENR2
      000F08 72 5F 50 F2      [ 1]  374 	clr AWU_TBR 
      000F0C 72 14 50 CA      [ 1]  375 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    376 ; select internal clock no divisor: 16 Mhz 	
      000F10 A6 E1            [ 1]  377 	ld a,#CLK_SWR_HSI 
      000F12 5F               [ 1]  378 	clrw x  
      000F13 CD 00 76         [ 4]  379     call clock_init 
      000F16 CD 00 99         [ 4]  380 	call timer4_init
      000F19 CD 00 8C         [ 4]  381 	call timer2_init
                                    382 ; UART1 at 115200 BAUD
      000F1C CD 02 AC         [ 4]  383 	call uart1_init
                                    384 ; activate PE_4 (user button interrupt)
      000F1F 72 18 50 18      [ 1]  385     bset PE_CR2,#USR_BTN_BIT 
                                    386 ; display system information
      000F23 AE 0E 8B         [ 2]  387 	ldw x,#software 
      000F26 CD 03 4E         [ 4]  388 	call puts 
      000F29 A6 02            [ 1]  389 	ld a,#MAJOR 
      000F2B C7 00 0E         [ 1]  390 	ld acc8,a 
      000F2E 5F               [ 1]  391 	clrw x 
      000F2F CF 00 0C         [ 2]  392 	ldw acc24,x
      000F32 72 5F 00 22      [ 1]  393 	clr tab_width  
      000F36 35 0A 00 0A      [ 1]  394 	mov base, #10 
      000F3A CD 12 AD         [ 4]  395 	call prti24 
      000F3D A6 2E            [ 1]  396 	ld a,#'.
      000F3F CD 02 F1         [ 4]  397 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F42 A6 00            [ 1]  398 	ld a,#MINOR 
      000F44 C7 00 0E         [ 1]  399 	ld acc8,a 
      000F47 5F               [ 1]  400 	clrw x 
      000F48 CF 00 0C         [ 2]  401 	ldw acc24,x 
      000F4B CD 12 AD         [ 4]  402 	call prti24
      000F4E A6 0D            [ 1]  403 	ld a,#CR 
      000F50 CD 02 F1         [ 4]  404 	call putc
      000F53 9A               [ 1]  405 	rim 
      000F54 72 5C 00 16      [ 1]  406 	inc seedy+1 
      000F58 72 5C 00 14      [ 1]  407 	inc seedx+1 
      000F5C CD 0F BF         [ 4]  408 	call clear_basic
      000F5F CD 18 2C         [ 4]  409 	call ubound 
      000F62 CD 1E 3D         [ 4]  410 	call beep_1khz  
      000F65                        411 2$:	
      000F65 CD 0F A1         [ 4]  412 	call warm_init
                                    413 ; check for application in flash memory 
      000F68 CE 2C 80         [ 2]  414 	ldw x,app_sign 
      000F6B C3 21 17         [ 2]  415 	cpw x,SIGNATURE 
      000F6E 27 03            [ 1]  416 	jreq run_app
      000F70 CC 11 DE         [ 2]  417 	jp cmd_line
      000F73                        418 run_app:
                                    419 ; run application in FLASH|EEPROM 
      000F73 AE 2C 84         [ 2]  420 	ldw x,#app 
      000F76 CF 00 1A         [ 2]  421 	ldw txtbgn,x
      000F79 72 BB 2C 82      [ 2]  422 	addw x,app_size 
      000F7D CF 00 1C         [ 2]  423 	ldw txtend,x 
      000F80 AE 0F 8E         [ 2]  424 	ldw x,#AUTO_RUN 
      000F83 CD 03 4E         [ 4]  425 	call puts 
      000F86 CD 18 69         [ 4]  426 	call program_info 
      000F89 CC 1D EC         [ 2]  427 	jp run_it_02  
      000F8C 20 FE            [ 2]  428     jra .  
                                    429 
      000F8E 20 61 75 74 6F 20 72   430 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    431 
                                    432 
      000FA1                        433 warm_init:
      000FA1 72 5F 00 21      [ 1]  434 	clr flags 
      000FA5 72 5F 00 1E      [ 1]  435 	clr loop_depth 
      000FA9 35 04 00 22      [ 1]  436 	mov tab_width,#TAB_WIDTH 
      000FAD 35 0A 00 0A      [ 1]  437 	mov base,#10 
      000FB1 AE 00 00         [ 2]  438 	ldw x,#0 
      000FB4 CF 00 04         [ 2]  439 	ldw basicptr,x 
      000FB7 CF 00 00         [ 2]  440 	ldw in.w,x 
      000FBA 72 5F 00 03      [ 1]  441 	clr count
      000FBE 81               [ 4]  442 	ret 
                                    443 
                                    444 
                                    445 ;---------------------------
                                    446 ; reset BASIC text variables 
                                    447 ; and clear variables 
                                    448 ;---------------------------
      000FBF                        449 clear_basic:
      000FBF 89               [ 2]  450 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000FC0 72 5F 00 03      [ 1]  451 	clr count
      000FC4 72 5F 00 01      [ 1]  452 	clr in  
      000FC8 AE 00 80         [ 2]  453 	ldw x,#free_ram 
      000FCB CF 00 1A         [ 2]  454 	ldw txtbgn,x 
      000FCE CF 00 1C         [ 2]  455 	ldw txtend,x 
      000FD1 CD 0E 7C         [ 4]  456 	call clear_vars 
      000FD4 85               [ 2]  457 	popw x
      000FD5 81               [ 4]  458 	ret 
                                    459 
                                    460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    461 ;;   Tiny BASIC error messages     ;;
                                    462 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FD6                        463 err_msg:
      000FD6 00 00 0F F6 10 03 10   464 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             11 10 2A 10 39
      000FE2 10 4F 10 65 10 7F 10   465 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             90 10 A1
      000FEC 10 AD 10 E0 10 F0 11   466 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             04 11 17
                                    467 
      000FF6 4D 65 6D 6F 72 79 20   468 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      001003 73 79 6E 74 61 78 20   469 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      001011 6D 61 74 68 20 6F 70   470 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00102A 64 69 76 69 73 69 6F   471 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001039 69 6E 76 61 6C 69 64   472 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00104F 72 75 6E 20 74 69 6D   473 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001065 63 6F 6D 6D 61 6E 64   474 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00107F 64 75 70 6C 69 63 61   475 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001090 46 69 6C 65 20 6E 6F   476 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0010A1 62 61 64 20 76 61 6C   477 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0010AD 46 69 6C 65 20 69 6E   478 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0010E0 4E 6F 20 64 61 74 61   479 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0010F0 4E 6F 20 70 72 6F 67   480 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001104 46 69 6C 65 20 73 79   481 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001117 42 75 66 66 65 72 20   482 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                    483 
      001124 0A 72 75 6E 20 74 69   484 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001136 0A 63 6F 6D 70 69 6C   485 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001147 6C 61 73 74 20 74 6F   486 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    487 
      001157                        488 syntax_error::
      001157 A6 02            [ 1]  489 	ld a,#ERR_SYNTAX 
                                    490 
      001159                        491 tb_error::
      001159 72 0A 00 21 44   [ 2]  492 	btjt flags,#FCOMP,1$
      00115E 88               [ 1]  493 	push a 
      00115F AE 11 24         [ 2]  494 	ldw x, #rt_msg 
      001162 CD 03 4E         [ 4]  495 	call puts 
      001165 84               [ 1]  496 	pop a 
      001166 AE 0F D6         [ 2]  497 	ldw x, #err_msg 
      001169 72 5F 00 0D      [ 1]  498 	clr acc16 
      00116D 48               [ 1]  499 	sll a
      00116E 72 59 00 0D      [ 1]  500 	rlc acc16  
      001172 C7 00 0E         [ 1]  501 	ld acc8, a 
      001175 72 BB 00 0D      [ 2]  502 	addw x,acc16 
      001179 FE               [ 2]  503 	ldw x,(x)
      00117A CD 03 4E         [ 4]  504 	call puts
      00117D CE 00 04         [ 2]  505 	ldw x,basicptr
      001180 C6 00 01         [ 1]  506 	ld a,in 
      001183 CD 19 BE         [ 4]  507 	call prt_basic_line
      001186 AE 11 47         [ 2]  508 	ldw x,#tk_id 
      001189 CD 03 4E         [ 4]  509 	call puts 
      00118C C6 00 02         [ 1]  510 	ld a,in.saved 
      00118F 5F               [ 1]  511 	clrw x 
      001190 97               [ 1]  512 	ld xl,a 
      001191 72 BB 00 04      [ 2]  513 	addw x,basicptr 
      001195 F6               [ 1]  514 	ld a,(x)
      001196 5F               [ 1]  515 	clrw x 
      001197 97               [ 1]  516 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001198 CD 12 9D         [ 4]  517 	call print_int
      00119B 72 0D 00 21 37   [ 2]  518 	btjf flags,#FAUTORUN ,6$
      0011A0 20 35            [ 2]  519 	jra 6$
      0011A2                        520 1$:	
      0011A2 88               [ 1]  521 	push a 
      0011A3 AE 11 36         [ 2]  522 	ldw x,#comp_msg
      0011A6 CD 03 4E         [ 4]  523 	call puts 
      0011A9 84               [ 1]  524 	pop a 
      0011AA AE 0F D6         [ 2]  525 	ldw x, #err_msg 
      0011AD 72 5F 00 0D      [ 1]  526 	clr acc16 
      0011B1 48               [ 1]  527 	sll a
      0011B2 72 59 00 0D      [ 1]  528 	rlc acc16  
      0011B6 C7 00 0E         [ 1]  529 	ld acc8, a 
      0011B9 72 BB 00 0D      [ 2]  530 	addw x,acc16 
      0011BD FE               [ 2]  531 	ldw x,(x)
      0011BE CD 03 4E         [ 4]  532 	call puts
      0011C1 AE 16 90         [ 2]  533 	ldw x,#tib
      0011C4 CD 03 4E         [ 4]  534 	call puts 
      0011C7 A6 0D            [ 1]  535 	ld a,#CR 
      0011C9 CD 02 F1         [ 4]  536 	call putc
      0011CC CE 00 00         [ 2]  537 	ldw x,in.w
      0011CF CD 03 BB         [ 4]  538 	call spaces
      0011D2 A6 5E            [ 1]  539 	ld a,#'^
      0011D4 CD 02 F1         [ 4]  540 	call putc 
      0011D7 AE 17 FF         [ 2]  541 6$: ldw x,#STACK_EMPTY 
      0011DA 94               [ 1]  542     ldw sp,x
      0011DB                        543 warm_start:
      0011DB CD 0F A1         [ 4]  544 	call warm_init
                                    545 ;----------------------------
                                    546 ;   BASIC interpreter
                                    547 ;----------------------------
      0011DE                        548 cmd_line: ; user interface 
      0011DE A6 0D            [ 1]  549 	ld a,#CR 
      0011E0 CD 02 F1         [ 4]  550 	call putc 
      0011E3 A6 3E            [ 1]  551 	ld a,#'> 
      0011E5 CD 02 F1         [ 4]  552 	call putc
      0011E8 CD 04 53         [ 4]  553 	call readln
      0011EB 72 5D 00 03      [ 1]  554 	tnz count 
      0011EF 27 ED            [ 1]  555 	jreq cmd_line
      0011F1 CD 0A 76         [ 4]  556 	call compile
                                    557 ;;; test 
                                    558 ; ldw x,txtbgn 
                                    559 ; ldw y,#16 
                                    560 ; call hex_dump
                                    561 ;;; end test
                                    562 
                                    563 ; if text begin with a line number
                                    564 ; the compiler set count to zero    
                                    565 ; so code is not interpreted
      0011F4 72 5D 00 03      [ 1]  566 	tnz count 
      0011F8 27 E4            [ 1]  567 	jreq cmd_line
                                    568 
                                    569 ; if direct command 
                                    570 ; it's ready to interpret 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                    572 ;; This is the interpreter loop
                                    573 ;; for each BASIC code line. 
                                    574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0011FA                        575 interpreter: 
      0011FA C6 00 01         [ 1]  576 	ld a,in 
      0011FD C1 00 03         [ 1]  577 	cp a,count 
      001200 2B 1D            [ 1]  578 	jrmi interp_loop
      001202                        579 next_line:
      001202 72 01 00 21 D7   [ 2]  580 	btjf flags, #FRUN, cmd_line
      001207 CE 00 04         [ 2]  581 	ldw x,basicptr
      00120A 72 BB 00 00      [ 2]  582 	addw x,in.w 
      00120E C3 00 1C         [ 2]  583 	cpw x,txtend 
      001211 2A C8            [ 1]  584 	jrpl warm_start
      001213 CF 00 04         [ 2]  585 	ldw basicptr,x ; start of next line  
      001216 E6 02            [ 1]  586 	ld a,(2,x)
      001218 C7 00 03         [ 1]  587 	ld count,a 
      00121B 35 03 00 01      [ 1]  588 	mov in,#3 ; skip first 3 bytes of line 
      00121F                        589 interp_loop: 
      00121F CD 12 4F         [ 4]  590 	call next_token
      001222 A1 00            [ 1]  591 	cp a,#TK_NONE 
      001224 27 DC            [ 1]  592 	jreq next_line 
      001226 A1 80            [ 1]  593 	cp a,#TK_CMD
      001228 26 03            [ 1]  594 	jrne 1$
      00122A FD               [ 4]  595 	call (x) 
      00122B 20 F2            [ 2]  596 	jra interp_loop 
      00122D                        597 1$:	 
      00122D A1 85            [ 1]  598 	cp a,#TK_VAR
      00122F 26 05            [ 1]  599 	jrne 2$
      001231 CD 18 47         [ 4]  600 	call let_var  
      001234 20 E9            [ 2]  601 	jra interp_loop 
      001236                        602 2$:	
      001236 A1 06            [ 1]  603 	cp a,#TK_ARRAY 
      001238 26 05            [ 1]  604 	jrne 3$
      00123A CD 18 44         [ 4]  605 	call let_array 
      00123D 20 E0            [ 2]  606 	jra interp_loop
      00123F                        607 3$:	
      00123F A1 0B            [ 1]  608 	cp a,#TK_COLON 
      001241 27 DC            [ 1]  609 	jreq interp_loop
      001243 A1 01            [ 1]  610 4$: cp a,#TK_LABEL 
      001245 26 05            [ 1]  611 	jrne 5$
      001247 CD 1C C8         [ 4]  612 	call skip_label
      00124A 20 D3            [ 2]  613 	jra interp_loop 
      00124C CC 11 57         [ 2]  614 5$:	jp syntax_error 
                                    615 
                                    616 		
                                    617 ;--------------------------
                                    618 ; extract next token from
                                    619 ; token list 
                                    620 ; basicptr -> base address 
                                    621 ; in  -> offset in list array 
                                    622 ; output:
                                    623 ;   A 		token attribute
                                    624 ;   X 		token value if there is one
                                    625 ;----------------------------------------
      00124F                        626 next_token::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00124F 5F               [ 1]  627 	clrw x 
      001250 C6 00 01         [ 1]  628 	ld a,in 
                                    629 ; don't replace sub by "cp a,count" 
                                    630 ; if end of line must return with A=0   	
      001253 C0 00 03         [ 1]  631 	sub a,count 
      001256 27 44            [ 1]  632 	jreq 9$ ; end of line 
      001258                        633 0$: 
      001258 55 00 01 00 02   [ 1]  634 	mov in.saved,in ; in case "_unget_token" needed 
      00125D 90 CE 00 04      [ 2]  635 	ldw y,basicptr 
      001261 72 B9 00 00      [ 2]  636 	addw y,in.w 
      001265 90 F6            [ 1]  637 	ld a,(y)
      001267 90 5C            [ 1]  638 	incw y   
      001269 4D               [ 1]  639 	tnz a 
      00126A 2B 1B            [ 1]  640 	jrmi 4$
      00126C A1 06            [ 1]  641 	cp a,#TK_ARRAY
      00126E 2A 24            [ 1]  642 	jrpl 7$  ; no attribute for these
      001270                        643 1$: ; 
      001270 A1 03            [ 1]  644 	cp a,#TK_CHAR
      001272 26 06            [ 1]  645 	jrne 2$
      001274 41               [ 1]  646 	exg a,xl
      001275 90 F6            [ 1]  647 	ld a,(y)
      001277 41               [ 1]  648 	exg a,xl  
      001278 20 18            [ 2]  649 	jra 6$ 
      00127A A1 02            [ 1]  650 2$:	cp a,#TK_QSTR 
      00127C 26 16            [ 1]  651 	jrne 7$
      00127E 93               [ 1]  652 	ldw x,y 
                                    653 ; move pointer after string 
      00127F 90 7D            [ 1]  654 3$:	tnz (y)
      001281 27 0F            [ 1]  655 	jreq 6$
      001283 90 5C            [ 1]  656 	incw y 
      001285 20 F8            [ 2]  657 	jra 3$
      001287                        658 4$: 
      001287 93               [ 1]  659 	ldw x,y 
      001288 FE               [ 2]  660 	ldw x,(x)
      001289 A1 84            [ 1]  661 	cp a,#TK_INTGR
      00128B 2A 03            [ 1]  662 	jrpl 5$
      00128D DE 2B 3B         [ 2]  663 	ldw x,(code_addr,x) 
      001290 90 5C            [ 1]  664 5$:	incw y 
      001292 90 5C            [ 1]  665 6$:	incw y 
      001294 72 B2 00 04      [ 2]  666 7$:	subw y,basicptr 
      001298 90 CF 00 00      [ 2]  667 	ldw in.w,y 
      00129C                        668 9$: 
      00129C 81               [ 4]  669 	ret	
                                    670 
                                    671 ;-----------------------------------
                                    672 ; print a 16 bit integer 
                                    673 ; using variable 'base' as conversion
                                    674 ; format.
                                    675 ; input:
                                    676 ;   X       integer to print 
                                    677 ;   'base'    conversion base 
                                    678 ; output:
                                    679 ;   none 
                                    680 ;-----------------------------------
      00129D                        681 print_int:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00129D 72 5F 00 0C      [ 1]  682 	clr acc24 
      0012A1 CF 00 0D         [ 2]  683 	ldw acc16,x 
      0012A4 72 0F 00 0D 04   [ 2]  684 	btjf acc16,#7,prti24
      0012A9 72 53 00 0C      [ 1]  685 	cpl acc24 
                                    686 	
                                    687 ;------------------------------------
                                    688 ; print integer in acc24 
                                    689 ; input:
                                    690 ;	acc24 		integer to print 
                                    691 ;	'base' 		numerical base for conversion 
                                    692 ;   'tab_width' field width 
                                    693 ;  output:
                                    694 ;    A          string length
                                    695 ;------------------------------------
      0012AD                        696 prti24:
      0012AD CD 12 B9         [ 4]  697     call itoa  ; conversion entier en  .asciz
      0012B0 CD 0B 15         [ 4]  698 	call right_align  
      0012B3 88               [ 1]  699 	push a 
      0012B4 CD 03 4E         [ 4]  700 	call puts
      0012B7 84               [ 1]  701 	pop a 
      0012B8 81               [ 4]  702     ret	
                                    703 
                                    704 ;------------------------------------
                                    705 ; convert integer in acc24 to string
                                    706 ; input:
                                    707 ;   'base'	conversion base 
                                    708 ;	acc24	integer to convert
                                    709 ; output:
                                    710 ;   X  		pointer to first char of string
                                    711 ;   A       string length
                                    712 ;------------------------------------
                           000001   713 	SIGN=1  ; integer sign 
                           000002   714 	LEN=2 
                           000003   715 	PSTR=3
                           000004   716 	VSIZE=4 ;locals size
      0012B9                        717 itoa::
      0012B9                        718 	_vars VSIZE
      0012B9 52 04            [ 2]    1     sub sp,#VSIZE 
      0012BB 0F 02            [ 1]  719 	clr (LEN,sp) ; string length  
      0012BD 0F 01            [ 1]  720 	clr (SIGN,sp)    ; sign
      0012BF C6 00 0A         [ 1]  721 	ld a,base 
      0012C2 A1 0A            [ 1]  722 	cp a,#10
      0012C4 26 0A            [ 1]  723 	jrne 1$
                                    724 	; base 10 string display with negative sign if bit 23==1
      0012C6 72 0F 00 0C 05   [ 2]  725 	btjf acc24,#7,1$
      0012CB 03 01            [ 1]  726 	cpl (SIGN,sp)
      0012CD CD 13 86         [ 4]  727 	call neg_acc24
      0012D0                        728 1$:
                                    729 ; initialize string pointer 
      0012D0 AE 16 90         [ 2]  730 	ldw x,#tib 
      0012D3 1C 00 50         [ 2]  731 	addw x,#TIB_SIZE
      0012D6 5A               [ 2]  732 	decw x 
      0012D7 7F               [ 1]  733 	clr (x)
      0012D8 5A               [ 2]  734 	decw x 
      0012D9 A6 20            [ 1]  735 	ld a,#32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0012DB F7               [ 1]  736 	ld (x),a
      0012DC 0C 02            [ 1]  737 	inc (LEN,sp)
      0012DE                        738 itoa_loop:
      0012DE C6 00 0A         [ 1]  739     ld a,base
      0012E1 1F 03            [ 2]  740 	ldw (PSTR,sp),x 
      0012E3 CD 13 24         [ 4]  741     call divu24_8 ; acc24/A 
      0012E6 1E 03            [ 2]  742 	ldw x,(PSTR,sp)
      0012E8 AB 30            [ 1]  743     add a,#'0  ; remainder of division
      0012EA A1 3A            [ 1]  744     cp a,#'9+1
      0012EC 2B 02            [ 1]  745     jrmi 2$
      0012EE AB 07            [ 1]  746     add a,#7 
      0012F0                        747 2$:	
      0012F0 5A               [ 2]  748 	decw x
      0012F1 F7               [ 1]  749     ld (x),a
      0012F2 0C 02            [ 1]  750 	inc (LEN,sp)
                                    751 	; if acc24==0 conversion done
      0012F4 C6 00 0C         [ 1]  752 	ld a,acc24
      0012F7 CA 00 0D         [ 1]  753 	or a,acc16
      0012FA CA 00 0E         [ 1]  754 	or a,acc8
      0012FD 26 DF            [ 1]  755     jrne itoa_loop
                                    756 	;conversion done, next add '$' or '-' as required
      0012FF C6 00 0A         [ 1]  757 	ld a,base 
      001302 A1 10            [ 1]  758 	cp a,#16
      001304 27 08            [ 1]  759 	jreq 8$
      001306 7B 01            [ 1]  760 	ld a,(SIGN,sp)
      001308 27 15            [ 1]  761     jreq 10$
      00130A A6 2D            [ 1]  762     ld a,#'-
      00130C 20 0D            [ 2]  763 	jra 9$ 
                                    764 ; don't print more than 4 digits
                                    765 ; in hexadecimal to avoid '-' sign 
                                    766 ; extend display 	
      00130E 7B 02            [ 1]  767 8$: ld a,(LEN,sp) 
      001310 A1 06            [ 1]  768 	cp a,#6 
      001312 2B 05            [ 1]  769 	jrmi 81$
      001314 5C               [ 1]  770 	incw x
      001315 0A 02            [ 1]  771 	dec (LEN,sp)
      001317 20 F5            [ 2]  772 	jra 8$
      001319                        773 81$:	
      001319 A6 24            [ 1]  774 	ld a,#'$ 
      00131B 5A               [ 2]  775 9$: decw x
      00131C F7               [ 1]  776     ld (x),a
      00131D 0C 02            [ 1]  777 	inc (LEN,sp)
      00131F                        778 10$:
      00131F 7B 02            [ 1]  779 	ld a,(LEN,sp)
      001321                        780 	_drop VSIZE
      001321 5B 04            [ 2]    1     addw sp,#VSIZE 
      001323 81               [ 4]  781 	ret
                                    782 
                                    783 ;-------------------------------------
                                    784 ; divide uint24_t by uint8_t
                                    785 ; used to convert uint24_t to string
                                    786 ; input:
                                    787 ;	acc24	dividend
                                    788 ;   A 		divisor
                                    789 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    790 ;   acc24	quotient
                                    791 ;   A		remainder
                                    792 ;------------------------------------- 
                                    793 ; offset  on sp of arguments and locals
                           000001   794 	U8   = 1   ; divisor on stack
                           000001   795 	VSIZE =1
      001324                        796 divu24_8:
      001324 89               [ 2]  797 	pushw x ; save x
      001325 88               [ 1]  798 	push a 
                                    799 	; ld dividend UU:MM bytes in X
      001326 C6 00 0C         [ 1]  800 	ld a, acc24
      001329 95               [ 1]  801 	ld xh,a
      00132A C6 00 0D         [ 1]  802 	ld a,acc24+1
      00132D 97               [ 1]  803 	ld xl,a
      00132E 7B 01            [ 1]  804 	ld a,(U8,SP) ; divisor
      001330 62               [ 2]  805 	div x,a ; UU:MM/U8
      001331 88               [ 1]  806 	push a  ;save remainder
      001332 9E               [ 1]  807 	ld a,xh
      001333 C7 00 0C         [ 1]  808 	ld acc24,a
      001336 9F               [ 1]  809 	ld a,xl
      001337 C7 00 0D         [ 1]  810 	ld acc24+1,a
      00133A 84               [ 1]  811 	pop a
      00133B 95               [ 1]  812 	ld xh,a
      00133C C6 00 0E         [ 1]  813 	ld a,acc24+2
      00133F 97               [ 1]  814 	ld xl,a
      001340 7B 01            [ 1]  815 	ld a,(U8,sp) ; divisor
      001342 62               [ 2]  816 	div x,a  ; R:LL/U8
      001343 6B 01            [ 1]  817 	ld (U8,sp),a ; save remainder
      001345 9F               [ 1]  818 	ld a,xl
      001346 C7 00 0E         [ 1]  819 	ld acc24+2,a
      001349 84               [ 1]  820 	pop a
      00134A 85               [ 2]  821 	popw x
      00134B 81               [ 4]  822 	ret
                                    823 
                                    824 ;--------------------------------------
                                    825 ; unsigned multiply uint24_t by uint8_t
                                    826 ; use to convert numerical string to uint24_t
                                    827 ; input:
                                    828 ;	acc24	uint24_t 
                                    829 ;   A		uint8_t
                                    830 ; output:
                                    831 ;   acc24   A*acc24
                                    832 ;-------------------------------------
                                    833 ; local variables offset  on sp
                           000003   834 	U8   = 3   ; A pushed on stack
                           000002   835 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   836 	OVFH = 1  ; multiplication overflow high byte
                           000003   837 	VSIZE = 3
      00134C                        838 mulu24_8:
      00134C 89               [ 2]  839 	pushw x    ; save X
                                    840 	; local variables
      00134D 88               [ 1]  841 	push a     ; U8
      00134E 5F               [ 1]  842 	clrw x     ; initialize overflow to 0
      00134F 89               [ 2]  843 	pushw x    ; multiplication overflow
                                    844 ; multiply low byte.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001350 C6 00 0E         [ 1]  845 	ld a,acc24+2
      001353 97               [ 1]  846 	ld xl,a
      001354 7B 03            [ 1]  847 	ld a,(U8,sp)
      001356 42               [ 4]  848 	mul x,a
      001357 9F               [ 1]  849 	ld a,xl
      001358 C7 00 0E         [ 1]  850 	ld acc24+2,a
      00135B 9E               [ 1]  851 	ld a, xh
      00135C 6B 02            [ 1]  852 	ld (OVFL,sp),a
                                    853 ; multipy middle byte
      00135E C6 00 0D         [ 1]  854 	ld a,acc24+1
      001361 97               [ 1]  855 	ld xl,a
      001362 7B 03            [ 1]  856 	ld a, (U8,sp)
      001364 42               [ 4]  857 	mul x,a
                                    858 ; add overflow to this partial product
      001365 72 FB 01         [ 2]  859 	addw x,(OVFH,sp)
      001368 9F               [ 1]  860 	ld a,xl
      001369 C7 00 0D         [ 1]  861 	ld acc24+1,a
      00136C 4F               [ 1]  862 	clr a
      00136D A9 00            [ 1]  863 	adc a,#0
      00136F 6B 01            [ 1]  864 	ld (OVFH,sp),a
      001371 9E               [ 1]  865 	ld a,xh
      001372 6B 02            [ 1]  866 	ld (OVFL,sp),a
                                    867 ; multiply most signficant byte	
      001374 C6 00 0C         [ 1]  868 	ld a, acc24
      001377 97               [ 1]  869 	ld xl, a
      001378 7B 03            [ 1]  870 	ld a, (U8,sp)
      00137A 42               [ 4]  871 	mul x,a
      00137B 72 FB 01         [ 2]  872 	addw x, (OVFH,sp)
      00137E 9F               [ 1]  873 	ld a, xl
      00137F C7 00 0C         [ 1]  874 	ld acc24,a
      001382 5B 03            [ 2]  875     addw sp,#VSIZE
      001384 85               [ 2]  876 	popw x
      001385 81               [ 4]  877 	ret
                                    878 
                                    879 ;------------------------------------
                                    880 ;  two's complement acc24
                                    881 ;  input:
                                    882 ;		acc24 variable
                                    883 ;  output:
                                    884 ;		acc24 variable
                                    885 ;-------------------------------------
      001386                        886 neg_acc24:
      001386 72 53 00 0E      [ 1]  887 	cpl acc24+2
      00138A 72 53 00 0D      [ 1]  888 	cpl acc24+1
      00138E 72 53 00 0C      [ 1]  889 	cpl acc24
      001392 A6 01            [ 1]  890 	ld a,#1
      001394 CB 00 0E         [ 1]  891 	add a,acc24+2
      001397 C7 00 0E         [ 1]  892 	ld acc24+2,a
      00139A 4F               [ 1]  893 	clr a
      00139B C9 00 0D         [ 1]  894 	adc a,acc24+1
      00139E C7 00 0D         [ 1]  895 	ld acc24+1,a 
      0013A1 4F               [ 1]  896 	clr a 
      0013A2 C9 00 0C         [ 1]  897 	adc a,acc24 
      0013A5 C7 00 0C         [ 1]  898 	ld acc24,a 
      0013A8 81               [ 4]  899 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    900 
                                    901 
                                    902 
                                    903 
                                    904 ;------------------------------------
                                    905 ; convert alpha to uppercase
                                    906 ; input:
                                    907 ;    a  character to convert
                                    908 ; output:
                                    909 ;    a  uppercase character
                                    910 ;------------------------------------
      0013A9                        911 to_upper::
      0013A9 A1 61            [ 1]  912 	cp a,#'a
      0013AB 2A 01            [ 1]  913 	jrpl 1$
      0013AD 81               [ 4]  914 0$:	ret
      0013AE A1 7A            [ 1]  915 1$: cp a,#'z	
      0013B0 22 FB            [ 1]  916 	jrugt 0$
      0013B2 A0 20            [ 1]  917 	sub a,#32
      0013B4 81               [ 4]  918 	ret
                                    919 	
                                    920 ;------------------------------------
                                    921 ; convert pad content in integer
                                    922 ; input:
                                    923 ;    x		.asciz to convert
                                    924 ; output:
                                    925 ;    acc24      int24_t
                                    926 ;------------------------------------
                                    927 	; local variables
                           000001   928 	SIGN=1 ; 1 byte, 
                           000002   929 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   930 	TEMP=3 ; 1 byte, temporary storage
                           000003   931 	VSIZE=3 ; 3 bytes reserved for local storage
      0013B5                        932 atoi24::
      0013B5 89               [ 2]  933 	pushw x 
      0013B6                        934 	_vars VSIZE
      0013B6 52 03            [ 2]    1     sub sp,#VSIZE 
                                    935 	; acc24=0 
      0013B8 72 5F 00 0C      [ 1]  936 	clr acc24    
      0013BC 72 5F 00 0D      [ 1]  937 	clr acc16
      0013C0 72 5F 00 0E      [ 1]  938 	clr acc8 
      0013C4 0F 01            [ 1]  939 	clr (SIGN,sp)
      0013C6 A6 0A            [ 1]  940 	ld a,#10
      0013C8 6B 02            [ 1]  941 	ld (BASE,sp),a ; default base decimal
      0013CA F6               [ 1]  942 	ld a,(x)
      0013CB 27 47            [ 1]  943 	jreq 9$  ; completed if 0
      0013CD A1 2D            [ 1]  944 	cp a,#'-
      0013CF 26 04            [ 1]  945 	jrne 1$
      0013D1 03 01            [ 1]  946 	cpl (SIGN,sp)
      0013D3 20 08            [ 2]  947 	jra 2$
      0013D5 A1 24            [ 1]  948 1$: cp a,#'$
      0013D7 26 06            [ 1]  949 	jrne 3$
      0013D9 A6 10            [ 1]  950 	ld a,#16
      0013DB 6B 02            [ 1]  951 	ld (BASE,sp),a
      0013DD 5C               [ 1]  952 2$:	incw x
      0013DE F6               [ 1]  953 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0013DF                        954 3$:	
      0013DF A1 61            [ 1]  955 	cp a,#'a
      0013E1 2B 02            [ 1]  956 	jrmi 4$
      0013E3 A0 20            [ 1]  957 	sub a,#32
      0013E5 A1 30            [ 1]  958 4$:	cp a,#'0
      0013E7 2B 2B            [ 1]  959 	jrmi 9$
      0013E9 A0 30            [ 1]  960 	sub a,#'0
      0013EB A1 0A            [ 1]  961 	cp a,#10
      0013ED 2B 06            [ 1]  962 	jrmi 5$
      0013EF A0 07            [ 1]  963 	sub a,#7
      0013F1 11 02            [ 1]  964 	cp a,(BASE,sp)
      0013F3 2A 1F            [ 1]  965 	jrpl 9$
      0013F5 6B 03            [ 1]  966 5$:	ld (TEMP,sp),a
      0013F7 7B 02            [ 1]  967 	ld a,(BASE,sp)
      0013F9 CD 13 4C         [ 4]  968 	call mulu24_8
      0013FC 7B 03            [ 1]  969 	ld a,(TEMP,sp)
      0013FE CB 00 0E         [ 1]  970 	add a,acc24+2
      001401 C7 00 0E         [ 1]  971 	ld acc24+2,a
      001404 4F               [ 1]  972 	clr a
      001405 C9 00 0D         [ 1]  973 	adc a,acc24+1
      001408 C7 00 0D         [ 1]  974 	ld acc24+1,a
      00140B 4F               [ 1]  975 	clr a
      00140C C9 00 0C         [ 1]  976 	adc a,acc24
      00140F C7 00 0C         [ 1]  977 	ld acc24,a
      001412 20 C9            [ 2]  978 	jra 2$
      001414 0D 01            [ 1]  979 9$:	tnz (SIGN,sp)
      001416 27 03            [ 1]  980     jreq atoi_exit
      001418 CD 13 86         [ 4]  981     call neg_acc24
      00141B                        982 atoi_exit: 
      00141B                        983 	_drop VSIZE
      00141B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00141D 85               [ 2]  984 	popw x ; restore x
      00141E 81               [ 4]  985 	ret
                                    986 
                                    987 
                                    988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    989 ;;   TINY BASIC  operators,
                                    990 ;;   commands and functions 
                                    991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    992 
                                    993 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    994 ;;  Arithmetic operators
                                    995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    996 
                                    997 ;debug support
                           000001   998 DEBUG_PRT=1
                           000001   999 .if DEBUG_PRT 
                           000001  1000 	REGA=1
                           000002  1001 	SAVEB=2
                           000003  1002 	REGX=3
                           000005  1003 	REGY=5
                           000007  1004 	ACC24=7
                           000009  1005 	VSIZE=9 
      00141F                       1006 printxy:
      00141F                       1007 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00141F 52 09            [ 2]    1     sub sp,#VSIZE 
      001421 6B 01            [ 1] 1008 	ld (REGA,sp),a 
      001423 C6 00 0A         [ 1] 1009 	ld a,base 
      001426 6B 02            [ 1] 1010 	ld (SAVEB,sp),a
      001428 1F 03            [ 2] 1011 	ldw (REGX,sp),x
      00142A 17 05            [ 2] 1012 	ldw (REGY,sp),y
      00142C CE 00 0C         [ 2] 1013 	ldw x,acc24 
      00142F C6 00 0E         [ 1] 1014 	ld a,acc8 
      001432 1F 07            [ 2] 1015 	ldw (ACC24,sp),x 
      001434 6B 09            [ 1] 1016 	ld (ACC24+2,sp),a 
      001436 35 10 00 0A      [ 1] 1017 	mov base,#16 
      00143A 5F               [ 1] 1018 	clrw x 
      00143B 7B 01            [ 1] 1019 	ld a,(REGA,sp)
      00143D 97               [ 1] 1020 	ld xl,a 
      00143E CD 12 9D         [ 4] 1021 	call print_int
      001441 A6 20            [ 1] 1022 	ld a,#SPACE 
      001443 CD 02 F1         [ 4] 1023 	call putc  
      001446 1E 03            [ 2] 1024 	ldw x,(REGX,sp)
      001448 CD 12 9D         [ 4] 1025 	call print_int 
      00144B A6 20            [ 1] 1026 	ld a,#SPACE 
      00144D CD 02 F1         [ 4] 1027 	call putc  
      001450 1E 05            [ 2] 1028 	ldw x,(REGY,sp)
      001452 CD 12 9D         [ 4] 1029 	call print_int 
      001455 A6 0D            [ 1] 1030 	ld a,#CR 
      001457 CD 02 F1         [ 4] 1031 	call putc 
      00145A 7B 09            [ 1] 1032 	ld a,(ACC24+2,sp)
      00145C 1E 07            [ 2] 1033 	ldw x,(ACC24,sp)
      00145E CF 00 0C         [ 2] 1034 	ldw acc24,x 
      001461 C7 00 0E         [ 1] 1035 	ld acc8,a
      001464 7B 02            [ 1] 1036 	ld a,(SAVEB,sp)
      001466 C7 00 0A         [ 1] 1037 	ld base,a 
      001469 7B 01            [ 1] 1038 	ld a,(REGA,sp)
      00146B 1E 03            [ 2] 1039 	ldw x,(REGX,sp)
      00146D 16 05            [ 2] 1040 	ldw y,(REGY,sp)
      00146F                       1041 	_drop VSIZE 
      00146F 5B 09            [ 2]    1     addw sp,#VSIZE 
      001471 81               [ 4] 1042 	ret 
                                   1043 .endif 
                                   1044 
                                   1045 
                                   1046 ;--------------------------------------
                                   1047 ;  multiply 2 uint16_t return uint32_t
                                   1048 ;  input:
                                   1049 ;     x       uint16_t 
                                   1050 ;     y       uint16_t 
                                   1051 ;  output:
                                   1052 ;     x       product bits 15..0
                                   1053 ;     y       product bits 31..16 
                                   1054 ;---------------------------------------
                           000001  1055 		U1=1  ; uint16_t 
                           000003  1056 		DBL=3 ; uint32_t
                           000006  1057 		VSIZE=6
      001472                       1058 umstar:
      001472                       1059 	_vars VSIZE 
      001472 52 06            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001474 1F 01            [ 2] 1060 	ldw (U1,sp),x 
                                   1061 ;initialize bits 31..16 of 
                                   1062 ;product to zero 
      001476 0F 03            [ 1] 1063 	clr (DBL,sp)
      001478 0F 04            [ 1] 1064 	clr (DBL+1,sp)
                                   1065 ; produc U1L*U2L 
      00147A 90 9F            [ 1] 1066 	ld a,yl 
      00147C 42               [ 4] 1067 	mul x,a 
      00147D 1F 05            [ 2] 1068 	ldw (DBL+2,sp),x
                                   1069 ; product U1H*U2L 
      00147F 7B 01            [ 1] 1070 	ld a,(U1,sp) ; xh 
      001481 93               [ 1] 1071 	ldw x,y
      001482 42               [ 4] 1072 	mul x,a 
      001483 4F               [ 1] 1073 	clr a 
      001484 72 FB 04         [ 2] 1074 	addw x,(DBL+1,sp) 
      001487 4F               [ 1] 1075 	clr a 
      001488 19 03            [ 1] 1076 	adc a,(DBL,sp) 
      00148A 6B 03            [ 1] 1077 	ld (DBL,sp),a ; bits 23..17 
      00148C 1F 04            [ 2] 1078 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1079 ; product U1L*U2H
      00148E 90 5E            [ 1] 1080 	swapw y 
      001490 93               [ 1] 1081 	ldw x,y
      001491 7B 02            [ 1] 1082 	ld a,(U1+1,sp)
      001493 42               [ 4] 1083 	mul x,a
      001494 72 FB 04         [ 2] 1084 	addw x,(DBL+1,sp)
      001497 4F               [ 1] 1085 	clr a 
      001498 19 03            [ 1] 1086 	adc a,(DBL,sp)
      00149A 6B 03            [ 1] 1087 	ld (DBL,sp),a 
      00149C 1F 04            [ 2] 1088 	ldw (DBL+1,sp),x 
                                   1089 ; product U1H*U2H 	
      00149E 7B 01            [ 1] 1090 	ld a,(U1,sp)
      0014A0 93               [ 1] 1091 	ldw x,y  
      0014A1 42               [ 4] 1092 	mul x,a 
      0014A2 72 FB 03         [ 2] 1093 	addw x,(DBL,sp)
      0014A5 90 93            [ 1] 1094 	ldw y,x 
      0014A7 1E 05            [ 2] 1095 	ldw x,(DBL+2,sp)
      0014A9                       1096 	_drop VSIZE 
      0014A9 5B 06            [ 2]    1     addw sp,#VSIZE 
      0014AB 81               [ 4] 1097 	ret
                                   1098 
                                   1099 
                                   1100 ;-------------------------------------
                                   1101 ; multiply 2 integers
                                   1102 ; input:
                                   1103 ;  	x       n1 
                                   1104 ;   y 		n2 
                                   1105 ; output:
                                   1106 ;	X        N1*N2 bits 15..0
                                   1107 ;   Y        N1*N2 bits 31..16 
                                   1108 ;-------------------------------------
                           000001  1109 	SIGN=1
                           000001  1110 	VSIZE=1
      0014AC                       1111 multiply:
      0014AC                       1112 	_vars VSIZE 
      0014AC 52 01            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0014AE 0F 01            [ 1] 1113 	clr (SIGN,sp)
      0014B0 9E               [ 1] 1114 	ld a,xh 
      0014B1 A4 80            [ 1] 1115 	and a,#0x80
      0014B3 2A 03            [ 1] 1116 	jrpl 1$
      0014B5 03 01            [ 1] 1117 	cpl (SIGN,sp)
      0014B7 50               [ 2] 1118 	negw x 
      0014B8                       1119 1$:	
      0014B8 90 9E            [ 1] 1120 	ld a,yh
      0014BA A4 80            [ 1] 1121 	and a,#0x80  
      0014BC 2A 04            [ 1] 1122 	jrpl 2$ 
      0014BE 03 01            [ 1] 1123 	cpl (SIGN,sp)
      0014C0 90 50            [ 2] 1124 	negw y 
      0014C2                       1125 2$:	
      0014C2 CD 14 72         [ 4] 1126 	call umstar
      0014C5 7B 01            [ 1] 1127 	ld a,(SIGN,sp)
      0014C7 27 03            [ 1] 1128 	jreq 3$
      0014C9 CD 14 F9         [ 4] 1129 	call dneg 
      0014CC                       1130 3$:	
      0014CC                       1131 	_drop VSIZE 
      0014CC 5B 01            [ 2]    1     addw sp,#VSIZE 
      0014CE 81               [ 4] 1132 	ret
                                   1133 
                                   1134 ;--------------------------------------
                                   1135 ; divide uint32_t/uint16_t
                                   1136 ; return:  quotient and remainder 
                                   1137 ; quotient expected to be uint16_t 
                                   1138 ; input:
                                   1139 ;   DBLDIVDND    on stack 
                                   1140 ;   X            divisor 
                                   1141 ; output:
                                   1142 ;   X            quotient 
                                   1143 ;   Y            remainder 
                                   1144 ;---------------------------------------
                           000003  1145 	VSIZE=3
      0014CF                       1146 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      0014CF                       1147 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1148 	; local variables 
                           000001  1149 	DIVISOR=1 
                           000003  1150 	CNTR=3 
      0014CF                       1151 udiv32_16:
      0014CF                       1152 	_vars VSIZE 
      0014CF 52 03            [ 2]    1     sub sp,#VSIZE 
      0014D1 1F 01            [ 2] 1153 	ldw (DIVISOR,sp),x	; save divisor 
      0014D3 1E 08            [ 2] 1154 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      0014D5 16 06            [ 2] 1155 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      0014D7 90 5D            [ 2] 1156 	tnzw y
      0014D9 26 06            [ 1] 1157 	jrne long_division 
      0014DB 16 01            [ 2] 1158 	ldw y,(DIVISOR,sp)
      0014DD 65               [ 2] 1159 	divw x,y
      0014DE                       1160 	_drop VSIZE 
      0014DE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0014E0 81               [ 4] 1161 	ret
      0014E1                       1162 long_division:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0014E1 51               [ 1] 1163 	exgw x,y ; hi in x, lo in y 
      0014E2 A6 11            [ 1] 1164 	ld a,#17 
      0014E4 6B 03            [ 1] 1165 	ld (CNTR,sp),a
      0014E6                       1166 1$:
      0014E6 13 01            [ 2] 1167 	cpw x,(DIVISOR,sp)
      0014E8 2B 03            [ 1] 1168 	jrmi 2$
      0014EA 72 F0 01         [ 2] 1169 	subw x,(DIVISOR,sp)
      0014ED 8C               [ 1] 1170 2$:	ccf 
      0014EE 90 59            [ 2] 1171 	rlcw y 
      0014F0 59               [ 2] 1172 	rlcw x 
      0014F1 0A 03            [ 1] 1173 	dec (CNTR,sp)
      0014F3 26 F1            [ 1] 1174 	jrne 1$
      0014F5 51               [ 1] 1175 	exgw x,y 
      0014F6                       1176 	_drop VSIZE 
      0014F6 5B 03            [ 2]    1     addw sp,#VSIZE 
      0014F8 81               [ 4] 1177 	ret
                                   1178 
                                   1179 ;-----------------------------
                                   1180 ; negate double int.
                                   1181 ; input:
                                   1182 ;   x     bits 15..0
                                   1183 ;   y     bits 31..16
                                   1184 ; output: 
                                   1185 ;   x     bits 15..0
                                   1186 ;   y     bits 31..16
                                   1187 ;-----------------------------
      0014F9                       1188 dneg:
      0014F9 53               [ 2] 1189 	cplw x 
      0014FA 90 53            [ 2] 1190 	cplw y 
      0014FC 1C 00 01         [ 2] 1191 	addw x,#1 
      0014FF 24 02            [ 1] 1192 	jrnc 1$
      001501 90 5C            [ 1] 1193 	incw y 
      001503 81               [ 4] 1194 1$: ret 
                                   1195 
                                   1196 
                                   1197 ;--------------------------------
                                   1198 ; sign extend single to double
                                   1199 ; input:
                                   1200 ;   x    int16_t
                                   1201 ; output:
                                   1202 ;   x    int32_t bits 15..0
                                   1203 ;   y    int32_t bits 31..16
                                   1204 ;--------------------------------
      001504                       1205 dbl_sign_extend:
      001504 90 5F            [ 1] 1206 	clrw y
      001506 9E               [ 1] 1207 	ld a,xh 
      001507 A4 80            [ 1] 1208 	and a,#0x80 
      001509 27 02            [ 1] 1209 	jreq 1$
      00150B 90 53            [ 2] 1210 	cplw y
      00150D 81               [ 4] 1211 1$: ret 	
                                   1212 
                                   1213 
                                   1214 ;----------------------------------
                                   1215 ;  euclidian divide dbl/n1 
                                   1216 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   1217 ; input:
                                   1218 ;    dbl    int32_t on stack 
                                   1219 ;    x 		n1   int16_t  disivor  
                                   1220 ; output:
                                   1221 ;    X      dbl/x  int16_t 
                                   1222 ;    Y      remainder int16_t 
                                   1223 ;----------------------------------
                           000008  1224 	VSIZE=8
      00150E                       1225 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      00150E                       1226 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      00150E                       1227 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1228 	; local variables
                           000001  1229 	DBLHI=1
                           000003  1230 	DBLLO=3 
                           000005  1231 	SDIVSR=5 ; sign divisor
                           000006  1232 	SQUOT=6 ; sign dividend 
                           000007  1233 	DIVISR=7 ; divisor 
      00150E                       1234 div32_16:
      00150E                       1235 	_vars VSIZE 
      00150E 52 08            [ 2]    1     sub sp,#VSIZE 
      001510 0F 05            [ 1] 1236 	clr (SDIVSR,sp)
      001512 0F 06            [ 1] 1237 	clr (SQUOT,sp)
                                   1238 ; copy arguments 
      001514 16 0B            [ 2] 1239 	ldw y,(DIVDNDHI,sp)
      001516 17 01            [ 2] 1240 	ldw (DBLHI,sp),y
      001518 16 0D            [ 2] 1241 	ldw y,(DIVDNDLO,sp)
      00151A 17 03            [ 2] 1242 	ldw (DBLLO,sp),y 
                                   1243 ; check for 0 divisor
      00151C 5D               [ 2] 1244 	tnzw x 
      00151D 26 05            [ 1] 1245     jrne 0$
      00151F A6 04            [ 1] 1246 	ld a,#ERR_DIV0 
      001521 CC 11 59         [ 2] 1247 	jp tb_error 
                                   1248 ; check divisor sign 	
      001524 9E               [ 1] 1249 0$:	ld a,xh 
      001525 A4 80            [ 1] 1250 	and a,#0x80 
      001527 27 05            [ 1] 1251 	jreq 1$
      001529 03 05            [ 1] 1252 	cpl (SDIVSR,sp)
      00152B 03 06            [ 1] 1253 	cpl (SQUOT,sp)
      00152D 50               [ 2] 1254 	negw x
      00152E 1F 07            [ 2] 1255 1$:	ldw (DIVISR,sp),x
                                   1256 ; check dividend sign 	 
      001530 7B 01            [ 1] 1257  	ld a,(DBLHI,sp) 
      001532 A4 80            [ 1] 1258 	and a,#0x80 
      001534 27 0D            [ 1] 1259 	jreq 2$ 
      001536 03 06            [ 1] 1260 	cpl (SQUOT,sp)
      001538 1E 03            [ 2] 1261 	ldw x,(DBLLO,sp)
      00153A 16 01            [ 2] 1262 	ldw y,(DBLHI,sp)
      00153C CD 14 F9         [ 4] 1263 	call dneg 
      00153F 1F 03            [ 2] 1264 	ldw (DBLLO,sp),x 
      001541 17 01            [ 2] 1265 	ldw (DBLHI,sp),y 
      001543 1E 07            [ 2] 1266 2$:	ldw x,(DIVISR,sp)
      001545 CD 14 CF         [ 4] 1267 	call udiv32_16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      001548 90 5D            [ 2] 1268 	tnzw y 
      00154A 27 11            [ 1] 1269 	jreq 3$ 
                                   1270 ; x=quotient 
                                   1271 ; y=remainder 
                                   1272 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      00154C 7B 06            [ 1] 1273 	ld a,(SQUOT,sp)
      00154E 18 05            [ 1] 1274 	xor a,(SDIVSR,sp)
      001550 27 0B            [ 1] 1275 	jreq 3$
      001552 5C               [ 1] 1276 	incw x 
      001553 90 CF 00 0D      [ 2] 1277 	ldw acc16,y 
      001557 16 07            [ 2] 1278 	ldw y,(DIVISR,sp)
      001559 72 B2 00 0D      [ 2] 1279 	subw y,acc16
                                   1280 ; sign quotient
      00155D 7B 06            [ 1] 1281 3$:	ld a,(SQUOT,sp)
      00155F 27 01            [ 1] 1282 	jreq 4$
      001561 50               [ 2] 1283 	negw x 
      001562                       1284 4$:	
      001562                       1285 	_drop VSIZE 
      001562 5B 08            [ 2]    1     addw sp,#VSIZE 
      001564 81               [ 4] 1286 	ret 
                                   1287 
                                   1288 
                                   1289 
                                   1290 ;----------------------------------
                                   1291 ; division x/y 
                                   1292 ; input:
                                   1293 ;    X       dividend
                                   1294 ;    Y       divisor 
                                   1295 ; output:
                                   1296 ;    X       quotient
                                   1297 ;    Y       remainder 
                                   1298 ;-----------------------------------
                           000004  1299 	VSIZE=4 
                                   1300 	; local variables 
                           000001  1301 	DBLHI=1
                           000003  1302 	DBLLO=3
      001565                       1303 divide: 
      001565                       1304 	_vars VSIZE 
      001565 52 04            [ 2]    1     sub sp,#VSIZE 
      001567 90 CF 00 0D      [ 2] 1305 	ldw acc16,y
      00156B CD 15 04         [ 4] 1306 	call dbl_sign_extend
      00156E 1F 03            [ 2] 1307 	ldw (DBLLO,sp),x 
      001570 17 01            [ 2] 1308 	ldw (DBLHI,sp),y 
      001572 CE 00 0D         [ 2] 1309 	ldw x,acc16 
      001575 CD 15 0E         [ 4] 1310 	call div32_16 
      001578                       1311 	_drop VSIZE 
      001578 5B 04            [ 2]    1     addw sp,#VSIZE 
      00157A 81               [ 4] 1312 	ret
                                   1313 
                                   1314 
                                   1315 ;----------------------------------
                                   1316 ;  remainder resulting from euclidian 
                                   1317 ;  division of x/y 
                                   1318 ; input:
                                   1319 ;   x   	dividend int16_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   1320 ;   y 		divisor int16_t
                                   1321 ; output:
                                   1322 ;   X       n1%n2 
                                   1323 ;----------------------------------
      00157B                       1324 modulo:
      00157B CD 15 65         [ 4] 1325 	call divide
      00157E 93               [ 1] 1326 	ldw x,y 
      00157F 81               [ 4] 1327 	ret 
                                   1328 
                                   1329 ;----------------------------------
                                   1330 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1331 ; return expr1*expr2/expr3 
                                   1332 ; product result is int32_t and 
                                   1333 ; divisiont is int32_t/int16_t
                                   1334 ;----------------------------------
                           000004  1335 	DBL_SIZE=4 
      001580                       1336 muldiv:
      001580 CD 15 F6         [ 4] 1337 	call func_args 
      001583 A1 03            [ 1] 1338 	cp a,#3 
      001585 27 03            [ 1] 1339 	jreq 1$
      001587 CC 11 57         [ 2] 1340 	jp syntax_error
      00158A                       1341 1$: 
      00158A 1E 05            [ 2] 1342 	ldw x,(5,sp) ; expr1
      00158C 16 03            [ 2] 1343 	ldw y,(3,sp) ; expr2
      00158E CD 14 AC         [ 4] 1344 	call multiply 
      001591 1F 05            [ 2] 1345 	ldw (5,sp),x  ;int32_t 15..0
      001593 17 03            [ 2] 1346 	ldw (3,sp),y  ;int32_t 31..16
      001595 85               [ 2] 1347 	popw x        ; expr3 
      001596 CD 15 0E         [ 4] 1348 	call div32_16 ; int32_t/expr3 
      001599                       1349 	_drop DBL_SIZE
      001599 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      00159B 81               [ 4] 1350 	ret 
                                   1351 
                                   1352 
                                   1353 ;---------------------------------
                                   1354 ; dictionary search 
                                   1355 ; input:
                                   1356 ;	X 		dictionary entry point, name field  
                                   1357 ;   y		.asciz name to search 
                                   1358 ; output:
                                   1359 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   1360 ;  X		cmd_index
                                   1361 ;---------------------------------
                           000001  1362 	NLEN=1 ; cmd length 
                           000002  1363 	XSAVE=2
                           000004  1364 	YSAVE=4
                           000005  1365 	VSIZE=5 
      00159C                       1366 search_dict::
      00159C                       1367 	_vars VSIZE 
      00159C 52 05            [ 2]    1     sub sp,#VSIZE 
                                   1368 
      00159E 17 04            [ 2] 1369 	ldw (YSAVE,sp),y 
      0015A0                       1370 search_next:
      0015A0 1F 02            [ 2] 1371 	ldw (XSAVE,sp),x 
                                   1372 ; get name length in dictionary	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0015A2 F6               [ 1] 1373 	ld a,(x)
      0015A3 A4 0F            [ 1] 1374 	and a,#0xf 
      0015A5 6B 01            [ 1] 1375 	ld (NLEN,sp),a  
      0015A7 16 04            [ 2] 1376 	ldw y,(YSAVE,sp) ; name pointer 
      0015A9 5C               [ 1] 1377 	incw x 
      0015AA                       1378 cp_loop:
      0015AA 90 F6            [ 1] 1379 	ld a,(y)
      0015AC 27 1B            [ 1] 1380 	jreq str_match 
      0015AE 0D 01            [ 1] 1381 	tnz (NLEN,sp)
      0015B0 27 0A            [ 1] 1382 	jreq no_match  
      0015B2 F1               [ 1] 1383 	cp a,(x)
      0015B3 26 07            [ 1] 1384 	jrne no_match 
      0015B5 90 5C            [ 1] 1385 	incw y 
      0015B7 5C               [ 1] 1386 	incw x
      0015B8 0A 01            [ 1] 1387 	dec (NLEN,sp)
      0015BA 20 EE            [ 2] 1388 	jra cp_loop 
      0015BC                       1389 no_match:
      0015BC 1E 02            [ 2] 1390 	ldw x,(XSAVE,sp) 
      0015BE 1D 00 02         [ 2] 1391 	subw x,#2 ; move X to link field
      0015C1 4B 00            [ 1] 1392 	push #TK_NONE 
      0015C3 FE               [ 2] 1393 	ldw x,(x) ; next word link 
      0015C4 84               [ 1] 1394 	pop a ; TK_NONE 
      0015C5 27 1F            [ 1] 1395 	jreq search_exit  ; not found  
                                   1396 ;try next 
      0015C7 20 D7            [ 2] 1397 	jra search_next
      0015C9                       1398 str_match:
      0015C9 1E 02            [ 2] 1399 	ldw x,(XSAVE,sp)
      0015CB F6               [ 1] 1400 	ld a,(X)
      0015CC 6B 01            [ 1] 1401 	ld (NLEN,sp),a ; needed to test keyword type  
      0015CE A4 0F            [ 1] 1402 	and a,#0xf 
                                   1403 ; move x to procedure address field 	
      0015D0 4C               [ 1] 1404 	inc a 
      0015D1 C7 00 0E         [ 1] 1405 	ld acc8,a 
      0015D4 72 5F 00 0D      [ 1] 1406 	clr acc16 
      0015D8 72 BB 00 0D      [ 2] 1407 	addw x,acc16 
      0015DC FE               [ 2] 1408 	ldw x,(x) ; routine index  
                                   1409 ;determine keyword type bits 7:6 
      0015DD 7B 01            [ 1] 1410 	ld a,(NLEN,sp)
      0015DF 4E               [ 1] 1411 	swap a 
      0015E0 A4 0C            [ 1] 1412 	and a,#0xc
      0015E2 44               [ 1] 1413 	srl a
      0015E3 44               [ 1] 1414 	srl a 
      0015E4 AB 80            [ 1] 1415 	add a,#128
      0015E6                       1416 search_exit: 
      0015E6                       1417 	_drop VSIZE 	 
      0015E6 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015E8 81               [ 4] 1418 	ret 
                                   1419 
                                   1420 ;---------------------
                                   1421 ; check if next token
                                   1422 ;  is of expected type 
                                   1423 ; input:
                                   1424 ;   A 		 expected token attribute
                                   1425 ;  ouput:
                                   1426 ;   none     if fail call syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                   1427 ;--------------------
      0015E9                       1428 expect:
      0015E9 88               [ 1] 1429 	push a 
      0015EA CD 12 4F         [ 4] 1430 	call next_token 
      0015ED 11 01            [ 1] 1431 	cp a,(1,sp)
      0015EF 27 03            [ 1] 1432 	jreq 1$
      0015F1 CC 11 57         [ 2] 1433 	jp syntax_error
      0015F4 84               [ 1] 1434 1$: pop a 
      0015F5 81               [ 4] 1435 	ret 
                                   1436 
                                   1437 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1438 ; parse arguments list 
                                   1439 ; between ()
                                   1440 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F6                       1441 func_args:
      0015F6 A6 07            [ 1] 1442 	ld a,#TK_LPAREN 
      0015F8 CD 15 E9         [ 4] 1443 	call expect 
                                   1444 ; expected to continue in arg_list 
                                   1445 ; caller must check for TK_RPAREN 
                                   1446 
                                   1447 ;-------------------------------
                                   1448 ; parse embedded BASIC routines 
                                   1449 ; arguments list.
                                   1450 ; arg_list::=  rel[','rel]*
                                   1451 ; all arguments are of integer type
                                   1452 ; and pushed on stack 
                                   1453 ; input:
                                   1454 ;   none
                                   1455 ; output:
                                   1456 ;   stack{n}   arguments pushed on stack
                                   1457 ;   A 	number of arguments pushed on stack  
                                   1458 ;--------------------------------
      0015FB                       1459 arg_list:
      0015FB 4B 00            [ 1] 1460 	push #0  
      0015FD CD 17 43         [ 4] 1461 1$: call relation
      001600 A1 00            [ 1] 1462 	cp a,#TK_NONE 
      001602 27 20            [ 1] 1463 	jreq 5$
      001604 A1 84            [ 1] 1464 	cp a,#TK_INTGR
      001606 26 13            [ 1] 1465 	jrne 4$
      001608                       1466 3$: 
                                   1467 ; swap return address with argument
      001608 84               [ 1] 1468 	pop a ; arg_count
      001609 90 85            [ 2] 1469 	popw y ; return address 
      00160B 89               [ 2] 1470 	pushw x ; new argument 
      00160C 90 89            [ 2] 1471 	pushw y 
      00160E 4C               [ 1] 1472     inc a
      00160F 88               [ 1] 1473 	push a 
      001610 CD 12 4F         [ 4] 1474 	call next_token 
      001613 A1 09            [ 1] 1475 	cp a,#TK_COMMA 
      001615 27 E6            [ 1] 1476 	jreq 1$ 
      001617 A1 00            [ 1] 1477 	cp a,#TK_NONE 
      001619 27 09            [ 1] 1478 	jreq 5$ 
      00161B A1 08            [ 1] 1479 4$:	cp a,#TK_RPAREN 
      00161D 27 05            [ 1] 1480 	jreq 5$
      00161F                       1481 	_unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00161F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001624 84               [ 1] 1482 5$:	pop a  
      001625 81               [ 4] 1483 	ret 
                                   1484 
                                   1485 ;--------------------------------
                                   1486 ;   BASIC commnands 
                                   1487 ;--------------------------------
                                   1488 
                                   1489 ;--------------------------------
                                   1490 ;  arithmetic and relational 
                                   1491 ;  routines
                                   1492 ;  operators precedence
                                   1493 ;  highest to lowest
                                   1494 ;  operators on same row have 
                                   1495 ;  same precedence and are executed
                                   1496 ;  from left to right.
                                   1497 ;	'*','/','%'
                                   1498 ;   '-','+'
                                   1499 ;   '=','>','<','>=','<=','<>','><'
                                   1500 ;   '<>' and '><' are equivalent for not equal.
                                   1501 ;--------------------------------
                                   1502 
                                   1503 ;---------------------
                                   1504 ; return array element
                                   1505 ; address from @(expr)
                                   1506 ; input:
                                   1507 ;   A 		TK_ARRAY
                                   1508 ; output:
                                   1509 ;   A 		TK_INTGR
                                   1510 ;	X 		element address 
                                   1511 ;----------------------
      001626                       1512 get_array_element:
      001626 CD 15 F6         [ 4] 1513 	call func_args 
      001629 A1 01            [ 1] 1514 	cp a,#1
      00162B 27 03            [ 1] 1515 	jreq 1$
      00162D CC 11 57         [ 2] 1516 	jp syntax_error
      001630 85               [ 2] 1517 1$: popw x 
                                   1518 	; check for bounds 
      001631 C3 00 1F         [ 2] 1519 	cpw x,array_size 
      001634 23 05            [ 2] 1520 	jrule 3$
                                   1521 ; bounds {1..array_size}	
      001636 A6 0A            [ 1] 1522 2$: ld a,#ERR_BAD_VALUE 
      001638 CC 11 59         [ 2] 1523 	jp tb_error 
      00163B 5D               [ 2] 1524 3$: tnzw  x
      00163C 27 F8            [ 1] 1525 	jreq 2$ 
      00163E 58               [ 2] 1526 	sllw x 
      00163F 89               [ 2] 1527 	pushw x 
      001640 AE 16 90         [ 2] 1528 	ldw x,#tib
      001643 72 F0 01         [ 2] 1529 	subw x,(1,sp)
      001646                       1530 	_drop 2   
      001646 5B 02            [ 2]    1     addw sp,#2 
      001648 A6 84            [ 1] 1531 	ld a,#TK_INTGR
      00164A 81               [ 4] 1532 	ret 
                                   1533 
                                   1534 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                   1535 ;***********************************
                                   1536 ;   expression parse,execute 
                                   1537 ;***********************************
                                   1538 ;-----------------------------------
                                   1539 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1540 ;			 integer | function |
                                   1541 ;			 '('relation')' 
                                   1542 ; output:
                                   1543 ;   A    token attribute 
                                   1544 ;   X 	 integer
                                   1545 ; ---------------------------------
                           000001  1546 	NEG=1
                           000001  1547 	VSIZE=1
      00164B                       1548 factor:
      00164B                       1549 	_vars VSIZE 
      00164B 52 01            [ 2]    1     sub sp,#VSIZE 
      00164D CD 12 4F         [ 4] 1550 	call next_token
      001650 A1 02            [ 1] 1551 	cp a,#CMD_END  
      001652 25 3D            [ 1] 1552 	jrult 16$
      001654 6B 01            [ 1] 1553 1$:	ld (NEG,sp),a 
      001656 A4 30            [ 1] 1554 	and a,#TK_GRP_MASK
      001658 A1 10            [ 1] 1555 	cp a,#TK_GRP_ADD 
      00165A 27 04            [ 1] 1556 	jreq 2$
      00165C 7B 01            [ 1] 1557 	ld a,(NEG,sp)
      00165E 20 03            [ 2] 1558 	jra 4$  
      001660                       1559 2$:	
      001660 CD 12 4F         [ 4] 1560 	call next_token 
      001663                       1561 4$:	
      001663 A1 81            [ 1] 1562 	cp a,#TK_IFUNC 
      001665 26 03            [ 1] 1563 	jrne 5$ 
      001667 FD               [ 4] 1564 	call (x) 
      001668 20 32            [ 2] 1565 	jra 18$ 
      00166A                       1566 5$:
      00166A A1 84            [ 1] 1567 	cp a,#TK_INTGR
      00166C 26 02            [ 1] 1568 	jrne 6$
      00166E 20 2C            [ 2] 1569 	jra 18$
      001670                       1570 6$:
      001670 A1 06            [ 1] 1571 	cp a,#TK_ARRAY
      001672 26 06            [ 1] 1572 	jrne 10$
      001674 CD 16 26         [ 4] 1573 	call get_array_element
      001677 FE               [ 2] 1574 	ldw x,(x)
      001678 20 22            [ 2] 1575 	jra 18$ 
      00167A                       1576 10$:
      00167A A1 85            [ 1] 1577 	cp a,#TK_VAR 
      00167C 26 03            [ 1] 1578 	jrne 12$
      00167E FE               [ 2] 1579 	ldw x,(x)
      00167F 20 1B            [ 2] 1580 	jra 18$
      001681                       1581 12$:			
      001681 A1 07            [ 1] 1582 	cp a,#TK_LPAREN
      001683 26 0C            [ 1] 1583 	jrne 16$
      001685 CD 17 43         [ 4] 1584 	call relation
      001688 89               [ 2] 1585 	pushw x 
      001689 A6 08            [ 1] 1586 	ld a,#TK_RPAREN 
      00168B CD 15 E9         [ 4] 1587 	call expect
      00168E 85               [ 2] 1588 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00168F 20 0B            [ 2] 1589 	jra 18$	
      001691                       1590 16$:
      001691 4D               [ 1] 1591 	tnz a 
      001692 27 11            [ 1] 1592 	jreq 20$ 
      001694                       1593 	_unget_token
      001694 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001699 4F               [ 1] 1594 	clr a 
      00169A 20 09            [ 2] 1595 	jra 20$ 
      00169C                       1596 18$: 
      00169C A6 11            [ 1] 1597 	ld a,#TK_MINUS 
      00169E 11 01            [ 1] 1598 	cp a,(NEG,sp)
      0016A0 26 01            [ 1] 1599 	jrne 19$
      0016A2 50               [ 2] 1600 	negw x
      0016A3                       1601 19$:
      0016A3 A6 84            [ 1] 1602 	ld a,#TK_INTGR
      0016A5                       1603 20$:
      0016A5                       1604 	_drop VSIZE
      0016A5 5B 01            [ 2]    1     addw sp,#VSIZE 
      0016A7 81               [ 4] 1605 	ret
                                   1606 
                                   1607 ;-----------------------------------
                                   1608 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1609 ; output:
                                   1610 ;   A    	token attribute 
                                   1611 ;	X		integer
                                   1612 ;-----------------------------------
                           000001  1613 	N1=1   ; int16_t
                           000003  1614 	MULOP=3
                           000003  1615 	VSIZE=3
      0016A8                       1616 term:
      0016A8                       1617 	_vars VSIZE
      0016A8 52 03            [ 2]    1     sub sp,#VSIZE 
      0016AA CD 16 4B         [ 4] 1618 	call factor
      0016AD 4D               [ 1] 1619 	tnz a 
      0016AE 27 47            [ 1] 1620 	jreq term_exit 
      0016B0                       1621 term01:	 ; check for  operator 
      0016B0 1F 01            [ 2] 1622 	ldw (N1,sp),x  ; save first factor 
      0016B2 CD 12 4F         [ 4] 1623 	call next_token
      0016B5 6B 03            [ 1] 1624 	ld (MULOP,sp),a
      0016B7 A1 02            [ 1] 1625 	cp a,#CMD_END
      0016B9 25 2F            [ 1] 1626 	jrult 8$
      0016BB A4 30            [ 1] 1627 	and a,#TK_GRP_MASK
      0016BD A1 20            [ 1] 1628 	cp a,#TK_GRP_MULT
      0016BF 27 02            [ 1] 1629 	jreq 1$
      0016C1 20 27            [ 2] 1630 	jra 8$
      0016C3                       1631 1$:	; got *|/|%
      0016C3 CD 16 4B         [ 4] 1632 	call factor
      0016C6 A1 84            [ 1] 1633 	cp a,#TK_INTGR
      0016C8 27 03            [ 1] 1634 	jreq 2$
      0016CA CC 11 57         [ 2] 1635 	jp syntax_error
      0016CD 90 93            [ 1] 1636 2$:	ldw y,x 
      0016CF 1E 01            [ 2] 1637 	ldw x,(N1,sp)
      0016D1 7B 03            [ 1] 1638 	ld a,(MULOP,sp) 
      0016D3 A1 20            [ 1] 1639 	cp a,#TK_MULT 
      0016D5 26 05            [ 1] 1640 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0016D7 CD 14 AC         [ 4] 1641 	call multiply 
      0016DA 20 D4            [ 2] 1642 	jra term01
      0016DC A1 21            [ 1] 1643 3$: cp a,#TK_DIV 
      0016DE 26 05            [ 1] 1644 	jrne 4$ 
      0016E0 CD 15 65         [ 4] 1645 	call divide 
      0016E3 20 CB            [ 2] 1646 	jra term01 
      0016E5 CD 15 7B         [ 4] 1647 4$: call modulo
      0016E8 20 C6            [ 2] 1648 	jra term01 
      0016EA 7B 03            [ 1] 1649 8$: ld a,(MULOP,sp)
      0016EC 27 05            [ 1] 1650 	jreq 9$ 
      0016EE                       1651 	_unget_token
      0016EE 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0016F3 1E 01            [ 2] 1652 9$: ldw x,(N1,sp)
      0016F5 A6 84            [ 1] 1653 	ld a,#TK_INTGR 	
      0016F7                       1654 term_exit:
      0016F7                       1655 	_drop VSIZE 
      0016F7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0016F9 81               [ 4] 1656 	ret 
                                   1657 
                                   1658 ;-------------------------------
                                   1659 ;  expr ::= term [['+'|'-'] term]*
                                   1660 ;  result range {-32768..32767}
                                   1661 ;  output:
                                   1662 ;   A    token attribute 
                                   1663 ;   X	 integer   
                                   1664 ;-------------------------------
                           000001  1665 	N1=1
                           000003  1666 	N2=3 
                           000005  1667 	OP=5 
                           000005  1668 	VSIZE=5 
      0016FA                       1669 expression:
      0016FA                       1670 	_vars VSIZE 
      0016FA 52 05            [ 2]    1     sub sp,#VSIZE 
      0016FC CD 16 A8         [ 4] 1671 	call term
      0016FF 4D               [ 1] 1672 	tnz a 
      001700 27 3E            [ 1] 1673 	jreq expr_exit 
      001702 1F 01            [ 2] 1674 1$:	ldw (N1,sp),x 
      001704 CD 12 4F         [ 4] 1675 	call next_token
      001707 6B 05            [ 1] 1676 	ld (OP,sp),a 
      001709 A1 02            [ 1] 1677 	cp a,#CMD_END 
      00170B 25 26            [ 1] 1678 	jrult 8$ 
      00170D A4 30            [ 1] 1679 	and a,#TK_GRP_MASK
      00170F A1 10            [ 1] 1680 	cp a,#TK_GRP_ADD 
      001711 27 02            [ 1] 1681 	jreq 2$ 
      001713 20 1E            [ 2] 1682 	jra 8$
      001715                       1683 2$: 
      001715 CD 16 A8         [ 4] 1684 	call term
      001718 A1 84            [ 1] 1685 	cp a,#TK_INTGR
      00171A 27 03            [ 1] 1686 	jreq 3$
      00171C CC 11 57         [ 2] 1687 	jp syntax_error
      00171F 1F 03            [ 2] 1688 3$:	ldw (N2,sp),x 
      001721 1E 01            [ 2] 1689 	ldw x,(N1,sp)
      001723 7B 05            [ 1] 1690 	ld a,(OP,sp)
      001725 A1 10            [ 1] 1691 	cp a,#TK_PLUS 
      001727 26 05            [ 1] 1692 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001729 72 FB 03         [ 2] 1693 	addw x,(N2,sp)
      00172C 20 D4            [ 2] 1694 	jra 1$ 
      00172E 72 F0 03         [ 2] 1695 4$:	subw x,(N2,sp)
      001731 20 CF            [ 2] 1696 	jra 1$
      001733 7B 05            [ 1] 1697 8$: ld a,(OP,sp)
      001735 27 05            [ 1] 1698 	jreq 9$ 
      001737                       1699 	_unget_token	
      001737 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00173C 1E 01            [ 2] 1700 9$: ldw x,(N1,sp)
      00173E A6 84            [ 1] 1701 	ld a,#TK_INTGR	
      001740                       1702 expr_exit:
      001740                       1703 	_drop VSIZE 
      001740 5B 05            [ 2]    1     addw sp,#VSIZE 
      001742 81               [ 4] 1704 	ret 
                                   1705 
                                   1706 ;---------------------------------------------
                                   1707 ; rel ::= expr rel_op expr
                                   1708 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1709 ;  relation return  integer , zero is false 
                                   1710 ;  output:
                                   1711 ;    A 		token attribute  
                                   1712 ;	 X		integer 
                                   1713 ;---------------------------------------------
                           000001  1714 	N1=1
                           000003  1715 	RELOP=3
                           000003  1716 	VSIZE=3 
      001743                       1717 relation: 
      001743                       1718 	_vars VSIZE
      001743 52 03            [ 2]    1     sub sp,#VSIZE 
      001745 CD 16 FA         [ 4] 1719 	call expression
      001748 4D               [ 1] 1720 	tnz a 
      001749 27 4D            [ 1] 1721 	jreq rel_exit
      00174B 1F 01            [ 2] 1722 	ldw (N1,sp),x 
                                   1723 ; expect rel_op or leave 
      00174D CD 12 4F         [ 4] 1724 	call next_token 
      001750 6B 03            [ 1] 1725 	ld (RELOP,sp),a 
      001752 A4 30            [ 1] 1726 	and a,#TK_GRP_MASK
      001754 A1 30            [ 1] 1727 	cp a,#TK_GRP_RELOP 
      001756 26 33            [ 1] 1728 	jrne 8$
      001758                       1729 2$:	; expect another expression
      001758 CD 16 FA         [ 4] 1730 	call expression
      00175B A1 84            [ 1] 1731 	cp a,#TK_INTGR
      00175D 27 03            [ 1] 1732 	jreq 3$
      00175F CC 11 57         [ 2] 1733 	jp syntax_error 
      001762 CF 00 0D         [ 2] 1734 3$:	ldw acc16,x 
      001765 1E 01            [ 2] 1735 	ldw x,(N1,sp) 
      001767 72 B0 00 0D      [ 2] 1736 	subw x,acc16
      00176B 26 06            [ 1] 1737 	jrne 4$
      00176D 35 02 00 0E      [ 1] 1738 	mov acc8,#2 ; n1==n2
      001771 20 0C            [ 2] 1739 	jra 6$ 
      001773                       1740 4$: 
      001773 2C 06            [ 1] 1741 	jrsgt 5$  
      001775 35 04 00 0E      [ 1] 1742 	mov acc8,#4 ; n1<2 
      001779 20 04            [ 2] 1743 	jra 6$
      00177B                       1744 5$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00177B 35 01 00 0E      [ 1] 1745 	mov acc8,#1 ; n1>n2 
      00177F                       1746 6$:
      00177F 5F               [ 1] 1747 	clrw x 
      001780 C6 00 0E         [ 1] 1748 	ld a, acc8  
      001783 14 03            [ 1] 1749 	and a,(RELOP,sp)
      001785 4D               [ 1] 1750 	tnz a 
      001786 27 0E            [ 1] 1751 	jreq 10$
      001788 5C               [ 1] 1752 	incw x 
      001789 20 0B            [ 2] 1753 	jra 10$  	
      00178B 7B 03            [ 1] 1754 8$: ld a,(RELOP,sp)
      00178D 27 05            [ 1] 1755 	jreq 9$
      00178F                       1756 	_unget_token
      00178F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001794                       1757 9$: 
      001794 1E 01            [ 2] 1758 	ldw x,(N1,sp)
      001796                       1759 10$:
      001796 A6 84            [ 1] 1760 	ld a,#TK_INTGR
      001798                       1761 rel_exit:
      001798                       1762 	_drop VSIZE
      001798 5B 03            [ 2]    1     addw sp,#VSIZE 
      00179A 81               [ 4] 1763 	ret 
                                   1764 
                                   1765 ;--------------------------------
                                   1766 ; BASIC: SHOW 
                                   1767 ; print stack content in hexadecimal bytes 
                                   1768 ; 16 bytes per row 
                                   1769 ;--------------------------------
      00179B                       1770 show:
      00179B AE 17 B5         [ 2] 1771 	ldw x,#cstk_prompt
      00179E CD 03 4E         [ 4] 1772 	call puts 
      0017A1 96               [ 1] 1773 	ldw x,sp 
      0017A2 1C 00 03         [ 2] 1774 	addw x,#3 ; ignore return address
      0017A5 90 AE 18 00      [ 2] 1775 	ldw y,#RAM_SIZE  
      0017A9 CF 00 0D         [ 2] 1776 	ldw acc16,x 
      0017AC 72 B2 00 0D      [ 2] 1777 	subw y,acc16
      0017B0 CD 0D CD         [ 4] 1778 	call hex_dump
      0017B3 4F               [ 1] 1779 	clr a 
      0017B4 81               [ 4] 1780 	ret
                                   1781 
      0017B5 0A 63 6F 6E 74 65 6E  1782 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   1783 
                                   1784 
                                   1785 ;--------------------------------------------
                                   1786 ; BASIC: HEX 
                                   1787 ; select hexadecimal base for integer print
                                   1788 ;---------------------------------------------
      0017DC                       1789 hex_base:
      0017DC 35 10 00 0A      [ 1] 1790 	mov base,#16 
      0017E0 81               [ 4] 1791 	ret 
                                   1792 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   1793 ;--------------------------------------------
                                   1794 ; BASIC: DEC 
                                   1795 ; select decimal base for integer print
                                   1796 ;---------------------------------------------
      0017E1                       1797 dec_base:
      0017E1 35 0A 00 0A      [ 1] 1798 	mov base,#10
      0017E5 81               [ 4] 1799 	ret 
                                   1800 
                                   1801 ;------------------------
                                   1802 ; BASIC: FREE 
                                   1803 ; return free size in RAM 
                                   1804 ; output:
                                   1805 ;   A 		TK_INTGR
                                   1806 ;   X 	    size integer
                                   1807 ;--------------------------
      0017E6                       1808 free:
      0017E6 AE 16 90         [ 2] 1809 	ldw x,#tib 
      0017E9 90 CE 00 1A      [ 2] 1810 	ldw y,txtbgn 
      0017ED 90 A3 2C 80      [ 2] 1811 	cpw y,#app_space
      0017F1 25 05            [ 1] 1812 	jrult 1$
      0017F3 1D 00 80         [ 2] 1813 	subw x,#free_ram 
      0017F6 20 04            [ 2] 1814 	jra 2$ 
      0017F8                       1815 1$:	
      0017F8 72 B0 00 1C      [ 2] 1816 	subw x,txtend 
      0017FC A6 84            [ 1] 1817 2$:	ld a,#TK_INTGR
      0017FE 81               [ 4] 1818 	ret 
                                   1819 
                                   1820 ;------------------------------
                                   1821 ; BASIC: SIZE 
                                   1822 ; command that print 
                                   1823 ; program start addres and size 
                                   1824 ;------------------------------
      0017FF                       1825 cmd_size:
      0017FF 3B 00 0A         [ 1] 1826 	push base 
      001802 AE 18 A8         [ 2] 1827 	ldw x,#PROG_ADDR 
      001805 CD 03 4E         [ 4] 1828 	call puts 
      001808 CE 00 1A         [ 2] 1829 	ldw x,txtbgn     
      00180B 35 10 00 0A      [ 1] 1830 	mov base,#16 
      00180F CD 12 9D         [ 4] 1831 	call print_int
      001812 32 00 0A         [ 1] 1832 	pop base 
      001815 AE 18 BA         [ 2] 1833 	ldw x,#PROG_SIZE 
      001818 CD 03 4E         [ 4] 1834 	call puts 
      00181B CE 00 1C         [ 2] 1835 	ldw x,txtend 
      00181E 72 B0 00 1A      [ 2] 1836 	subw x,txtbgn 
      001822 CD 12 9D         [ 4] 1837 	call print_int
      001825 AE 18 CB         [ 2] 1838 	ldw x,#STR_BYTES 
      001828 CD 03 4E         [ 4] 1839 	call puts  
      00182B 81               [ 4] 1840 	ret 
                                   1841 
                                   1842 
                                   1843 ;------------------------
                                   1844 ; BASIC: UBOUND  
                                   1845 ; return array variable size 
                                   1846 ; output:
                                   1847 ;   A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                   1848 ;   X 	    array size 
                                   1849 ;--------------------------
      00182C                       1850 ubound:
      00182C CD 17 E6         [ 4] 1851 	call free 
      00182F 54               [ 2] 1852 	srlw x 
      001830 CF 00 1F         [ 2] 1853 	ldw array_size,x
      001833 A6 84            [ 1] 1854 	ld a,#TK_INTGR
      001835 81               [ 4] 1855 	ret 
                                   1856 
                                   1857 ;-----------------------------
                                   1858 ; BASIC: LET var=expr 
                                   1859 ; variable assignement 
                                   1860 ; output:
                                   1861 ;   A 		TK_NONE 
                                   1862 ;-----------------------------
      001836                       1863 let::
      001836 CD 12 4F         [ 4] 1864 	call next_token 
      001839 A1 85            [ 1] 1865 	cp a,#TK_VAR 
      00183B 27 0A            [ 1] 1866 	jreq let_var
      00183D A1 06            [ 1] 1867 	cp a,#TK_ARRAY 
      00183F 27 03            [ 1] 1868 	jreq  let_array
      001841 CC 11 57         [ 2] 1869 	jp syntax_error
      001844                       1870 let_array:
      001844 CD 16 26         [ 4] 1871 	call get_array_element
      001847                       1872 let_var:
      001847 89               [ 2] 1873 	pushw x  
      001848 CD 12 4F         [ 4] 1874 	call next_token 
      00184B A1 32            [ 1] 1875 	cp a,#TK_EQUAL
      00184D 27 03            [ 1] 1876 	jreq 1$
      00184F CC 11 57         [ 2] 1877 	jp syntax_error
      001852                       1878 1$:	
      001852 CD 17 43         [ 4] 1879 	call relation   
      001855 A1 84            [ 1] 1880 	cp a,#TK_INTGR 
      001857 27 03            [ 1] 1881 	jreq 2$
      001859 CC 11 57         [ 2] 1882 	jp syntax_error
      00185C                       1883 2$:	
      00185C 90 93            [ 1] 1884 	ldw y,x 
      00185E 85               [ 2] 1885 	popw x   
      00185F FF               [ 2] 1886 	ldw (x),y   
      001860 81               [ 4] 1887 	ret 
                                   1888 
                                   1889 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1890 ; return program size 
                                   1891 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001861                       1892 prog_size:
      001861 CE 00 1C         [ 2] 1893 	ldw x,txtend 
      001864 72 B0 00 1A      [ 2] 1894 	subw x,txtbgn 
      001868 81               [ 4] 1895 	ret 
                                   1896 
                                   1897 ;----------------------------
                                   1898 ; print program information 
                                   1899 ;---------------------------
      001869                       1900 program_info: 
      001869 AE 18 A8         [ 2] 1901 	ldw x,#PROG_ADDR 
      00186C CD 03 4E         [ 4] 1902 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      00186F CE 00 1A         [ 2] 1903 	ldw x,txtbgn 
      001872 35 10 00 0A      [ 1] 1904 	mov base,#16 
      001876 CD 12 9D         [ 4] 1905 	call print_int
      001879 35 0A 00 0A      [ 1] 1906 	mov base,#10  
      00187D AE 18 BA         [ 2] 1907 	ldw x,#PROG_SIZE
      001880 CD 03 4E         [ 4] 1908 	call puts 
      001883 CD 18 61         [ 4] 1909 	call prog_size 
      001886 CD 12 9D         [ 4] 1910 	call print_int 
      001889 AE 18 CB         [ 2] 1911 	ldw x,#STR_BYTES 
      00188C CD 03 4E         [ 4] 1912 	call puts
      00188F CE 00 1A         [ 2] 1913 	ldw x,txtbgn
      001892 A3 2C 84         [ 2] 1914 	cpw x,#app 
      001895 25 05            [ 1] 1915 	jrult 2$
      001897 AE 18 D1         [ 2] 1916 	ldw x,#FLASH_MEM 
      00189A 20 03            [ 2] 1917 	jra 3$
      00189C AE 18 E2         [ 2] 1918 2$: ldw x,#RAM_MEM 	 
      00189F CD 03 4E         [ 4] 1919 3$:	call puts 
      0018A2 A6 0D            [ 1] 1920 	ld a,#CR 
      0018A4 CD 02 F1         [ 4] 1921 	call putc
      0018A7 81               [ 4] 1922 	ret 
                                   1923 
      0018A8 70 72 6F 67 72 61 6D  1924 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      0018BA 2C 20 70 72 6F 67 72  1925 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      0018CB 62 79 74 65 73 00     1926 STR_BYTES: .asciz "bytes" 
      0018D1 20 69 6E 20 46 4C 41  1927 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      0018E2 20 69 6E 20 52 41 4D  1928 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1929 
                                   1930 
                                   1931 ;----------------------------
                                   1932 ; BASIC: LIST [[start][,end]]
                                   1933 ; list program lines 
                                   1934 ; form start to end 
                                   1935 ; if empty argument list then 
                                   1936 ; list all.
                                   1937 ;----------------------------
                           000001  1938 	FIRST=1
                           000003  1939 	LAST=3 
                           000005  1940 	LN_PTR=5
                           000006  1941 	VSIZE=6 
      0018F1                       1942 list:
      0018F1 72 01 00 21 05   [ 2] 1943 	btjf flags,#FRUN,0$
      0018F6 A6 07            [ 1] 1944 	ld a,#ERR_CMD_ONLY
      0018F8 CC 11 59         [ 2] 1945 	jp tb_error
      0018FB                       1946 0$:	 
      0018FB CD 18 61         [ 4] 1947 	call prog_size 
      0018FE 22 01            [ 1] 1948 	jrugt 1$
      001900 81               [ 4] 1949 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001901                       1950 1$: _vars VSIZE
      001901 52 06            [ 2]    1     sub sp,#VSIZE 
      001903 CE 00 1A         [ 2] 1951 	ldw x,txtbgn 
      001906 1F 05            [ 2] 1952 	ldw (LN_PTR,sp),x 
      001908 FE               [ 2] 1953 	ldw x,(x) 
      001909 1F 01            [ 2] 1954 	ldw (FIRST,sp),x ; list from first line 
      00190B AE 7F FF         [ 2] 1955 	ldw x,#MAX_LINENO ; biggest line number 
      00190E 1F 03            [ 2] 1956 	ldw (LAST,sp),x 
      001910 CD 15 FB         [ 4] 1957 	call arg_list
      001913 4D               [ 1] 1958 	tnz a
      001914 27 31            [ 1] 1959 	jreq list_loop 
      001916 A1 02            [ 1] 1960 	cp a,#2 
      001918 27 07            [ 1] 1961 	jreq 4$
      00191A A1 01            [ 1] 1962 	cp a,#1 
      00191C 27 06            [ 1] 1963 	jreq first_line 
      00191E CC 11 57         [ 2] 1964 	jp syntax_error 
      001921 85               [ 2] 1965 4$:	popw x 
      001922 1F 05            [ 2] 1966 	ldw (LAST+2,sp),x 
      001924                       1967 first_line:
      001924 85               [ 2] 1968 	popw x
      001925 1F 01            [ 2] 1969 	ldw (FIRST,sp),x 
      001927                       1970 lines_skip:
      001927 CE 00 1A         [ 2] 1971 	ldw x,txtbgn
      00192A 1F 05            [ 2] 1972 2$:	ldw (LN_PTR,sp),x 
      00192C C3 00 1C         [ 2] 1973 	cpw x,txtend 
      00192F 2A 38            [ 1] 1974 	jrpl list_exit 
      001931 FE               [ 2] 1975 	ldw x,(x) ;line# 
      001932 13 01            [ 2] 1976 	cpw x,(FIRST,sp)
      001934 2A 11            [ 1] 1977 	jrpl list_loop 
      001936 1E 05            [ 2] 1978 	ldw x,(LN_PTR,sp) 
      001938 E6 02            [ 1] 1979 	ld a,(2,x)
      00193A C7 00 0E         [ 1] 1980 	ld acc8,a 
      00193D 72 5F 00 0D      [ 1] 1981 	clr acc16 
      001941 72 BB 00 0D      [ 2] 1982 	addw x,acc16
      001945 20 E3            [ 2] 1983 	jra 2$ 
                                   1984 ; print loop
      001947                       1985 list_loop:
      001947 1E 05            [ 2] 1986 	ldw x,(LN_PTR,sp)
      001949 E6 02            [ 1] 1987 	ld a,(2,x) 
      00194B CD 19 BE         [ 4] 1988 	call prt_basic_line
      00194E 1E 05            [ 2] 1989 	ldw x,(LN_PTR,sp)
      001950 E6 02            [ 1] 1990 	ld a,(2,x)
      001952 C7 00 0E         [ 1] 1991 	ld acc8,a 
      001955 72 5F 00 0D      [ 1] 1992 	clr acc16 
      001959 72 BB 00 0D      [ 2] 1993 	addw x,acc16
      00195D C3 00 1C         [ 2] 1994 	cpw x,txtend 
      001960 2A 07            [ 1] 1995 	jrpl list_exit
      001962 1F 05            [ 2] 1996 	ldw (LN_PTR,sp),x
      001964 FE               [ 2] 1997 	ldw x,(x)
      001965 13 03            [ 2] 1998 	cpw x,(LAST,sp)  
      001967 2F DE            [ 1] 1999 	jrslt list_loop
      001969                       2000 list_exit:
      001969 55 00 03 00 01   [ 1] 2001 	mov in,count 
      00196E AE 16 E0         [ 2] 2002 	ldw x,#pad 
      001971 CF 00 04         [ 2] 2003 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001974                       2004 	_drop VSIZE 
      001974 5B 06            [ 2]    1     addw sp,#VSIZE 
      001976 CD 18 69         [ 4] 2005 	call program_info 
      001979 81               [ 4] 2006 	ret
                                   2007 
                                   2008 
                                   2009 ;--------------------------
                                   2010 ; BASIC: EDIT \E | \F
                                   2011 ;  copy program in FLASH 
                                   2012 ;  to RAM for edition 
                                   2013 ;-------------------------
      00197A                       2014 edit:
      00197A CD 20 57         [ 4] 2015 	call qsign 
      00197D 27 07            [ 1] 2016 	jreq 1$ 
      00197F AE 19 A7         [ 2] 2017 	ldw x,#NOT_SAVED 
      001982 CD 03 4E         [ 4] 2018 	call puts 
      001985 81               [ 4] 2019 	ret 
      001986                       2020 1$: 
      001986 90 AE 2C 80      [ 2] 2021 	ldw y,#app_sign ; source address 
      00198A CE 2C 82         [ 2] 2022     ldw x,app_size  
      00198D 1C 00 04         [ 2] 2023 	addw x,#4 
      001990 CF 00 0D         [ 2] 2024 	ldw acc16,x  ; bytes to copy 
      001993 AE 00 7C         [ 2] 2025 	ldw x,#rsign ; destination address 
      001996 CD 0E 38         [ 4] 2026 	call move  
      001999 AE 00 80         [ 2] 2027 	ldw x,#free_ram 
      00199C CF 00 1A         [ 2] 2028 	ldw txtbgn,x 
      00199F 72 BB 00 7E      [ 2] 2029 	addw x,rsize  
      0019A3 CF 00 1C         [ 2] 2030 	ldw txtend,x 
      0019A6 81               [ 4] 2031 	ret 
                                   2032 
      0019A7 4E 6F 20 61 70 70 6C  2033 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   2034 
                                   2035 ;--------------------------
                                   2036 ; decompile line from token list
                                   2037 ; and print it. 
                                   2038 ; input:
                                   2039 ;   A       stop at this position 
                                   2040 ;   X 		pointer at line
                                   2041 ; output:
                                   2042 ;   none 
                                   2043 ;--------------------------	
      0019BE                       2044 prt_basic_line:
      0019BE C7 00 03         [ 1] 2045 	ld count,a 
      0019C1 E6 02            [ 1] 2046 	ld a,(2,x)
      0019C3 C1 00 03         [ 1] 2047 	cp a,count 
      0019C6 2A 03            [ 1] 2048 	jrpl 1$ 
      0019C8 C7 00 03         [ 1] 2049 	ld count,a 
      0019CB CF 00 04         [ 2] 2050 1$:	ldw basicptr,x 
      0019CE 90 AE 16 90      [ 2] 2051 	ldw y,#tib  
      0019D2 CD 0B 91         [ 4] 2052 	call decompile 
      0019D5 CD 03 4E         [ 4] 2053 	call puts 
      0019D8 A6 0D            [ 1] 2054 	ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0019DA CD 02 F1         [ 4] 2055 	call putc 
      0019DD 81               [ 4] 2056 	ret 
                                   2057 
                                   2058 
                                   2059 
                                   2060 ;---------------------------------
                                   2061 ; BASIC: PRINT|? arg_list 
                                   2062 ; print values from argument list
                                   2063 ;----------------------------------
                           000001  2064 	CCOMMA=1
                           000001  2065 	VSIZE=1
      0019DE                       2066 print:
      0019DE                       2067 	_vars VSIZE 
      0019DE 52 01            [ 2]    1     sub sp,#VSIZE 
      0019E0                       2068 reset_comma:
      0019E0 0F 01            [ 1] 2069 	clr (CCOMMA,sp)
      0019E2                       2070 prt_loop:
      0019E2 CD 12 4F         [ 4] 2071 	call next_token
      0019E5 A1 02            [ 1] 2072 	cp a,#CMD_END 
      0019E7 25 4F            [ 1] 2073 	jrult print_exit ; colon or end of line 
      0019E9 A1 02            [ 1] 2074 	cp a,#TK_QSTR
      0019EB 27 12            [ 1] 2075 	jreq 1$
      0019ED A1 03            [ 1] 2076 	cp a,#TK_CHAR 
      0019EF 27 13            [ 1] 2077 	jreq 2$ 
      0019F1 A1 82            [ 1] 2078 	cp a,#TK_CFUNC 
      0019F3 27 15            [ 1] 2079 	jreq 3$
      0019F5 A1 09            [ 1] 2080 	cp a,#TK_COMMA 
      0019F7 27 18            [ 1] 2081 	jreq 4$
      0019F9 A1 0A            [ 1] 2082 	cp a,#TK_SHARP 
      0019FB 27 18            [ 1] 2083 	jreq 5$
      0019FD 20 28            [ 2] 2084 	jra 7$ 
      0019FF                       2085 1$:	; print string 
      0019FF CD 03 4E         [ 4] 2086 	call puts
      001A02 20 DC            [ 2] 2087 	jra reset_comma
      001A04                       2088 2$:	; print character 
      001A04 9F               [ 1] 2089 	ld a,xl 
      001A05 CD 02 F1         [ 4] 2090 	call putc 
      001A08 20 D6            [ 2] 2091 	jra reset_comma 
      001A0A                       2092 3$: ; print character function value  	
      001A0A FD               [ 4] 2093 	call (x)
      001A0B 9F               [ 1] 2094 	ld a,xl 
      001A0C CD 02 F1         [ 4] 2095 	call putc
      001A0F 20 CF            [ 2] 2096 	jra reset_comma 
      001A11                       2097 4$: ; set comma state 
      001A11 03 01            [ 1] 2098 	cpl (CCOMMA,sp)
      001A13 20 CD            [ 2] 2099 	jra prt_loop   
      001A15                       2100 5$: ; # character must be followed by an integer   
      001A15 CD 12 4F         [ 4] 2101 	call next_token
      001A18 A1 84            [ 1] 2102 	cp a,#TK_INTGR 
      001A1A 27 03            [ 1] 2103 	jreq 6$
      001A1C CC 11 57         [ 2] 2104 	jp syntax_error 
      001A1F                       2105 6$: ; set tab width
      001A1F 9F               [ 1] 2106 	ld a,xl 
      001A20 A4 0F            [ 1] 2107 	and a,#15 
      001A22 C7 00 22         [ 1] 2108 	ld tab_width,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      001A25 20 B9            [ 2] 2109 	jra reset_comma 
      001A27                       2110 7$:	
      001A27                       2111 	_unget_token 
      001A27 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A2C CD 17 43         [ 4] 2112 	call relation 
      001A2F A1 84            [ 1] 2113 	cp a,#TK_INTGR 
      001A31 26 05            [ 1] 2114 	jrne print_exit 
      001A33 CD 12 9D         [ 4] 2115     call print_int 
      001A36 20 A8            [ 2] 2116 	jra reset_comma 
      001A38                       2117 print_exit:
      001A38 0D 01            [ 1] 2118 	tnz (CCOMMA,sp)
      001A3A 26 05            [ 1] 2119 	jrne 9$
      001A3C A6 0D            [ 1] 2120 	ld a,#CR 
      001A3E CD 02 F1         [ 4] 2121     call putc 
      001A41                       2122 9$:	_drop VSIZE 
      001A41 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A43 81               [ 4] 2123 	ret 
                                   2124 
                                   2125 ;----------------------
                                   2126 ; 'save_context' and
                                   2127 ; 'rest_context' must be 
                                   2128 ; called at the same 
                                   2129 ; call stack depth 
                                   2130 ; i.e. SP must have the 
                                   2131 ; save value at  
                                   2132 ; entry point of both 
                                   2133 ; routine. 
                                   2134 ;---------------------
                           000004  2135 	CTXT_SIZE=4 ; size of saved data 
                                   2136 ;--------------------
                                   2137 ; save current BASIC
                                   2138 ; interpreter context 
                                   2139 ; on stack 
                                   2140 ;--------------------
      001A44                       2141 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001A44                       2142 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001A44                       2143 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001A44                       2144 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001A44                       2145 save_context:
      001A44 CE 00 04         [ 2] 2146 	ldw x,basicptr 
      001A47 1F 03            [ 2] 2147 	ldw (BPTR,sp),x
      001A49 C6 00 01         [ 1] 2148 	ld a,in 
      001A4C 6B 05            [ 1] 2149 	ld (IN,sp),a
      001A4E C6 00 03         [ 1] 2150 	ld a,count 
      001A51 6B 06            [ 1] 2151 	ld (CNT,sp),a  
      001A53 81               [ 4] 2152 	ret
                                   2153 
                                   2154 ;-----------------------
                                   2155 ; restore previously saved 
                                   2156 ; BASIC interpreter context 
                                   2157 ; from stack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                   2158 ;-------------------------
      001A54                       2159 rest_context:
      001A54 1E 03            [ 2] 2160 	ldw x,(BPTR,sp)
      001A56 CF 00 04         [ 2] 2161 	ldw basicptr,x 
      001A59 7B 05            [ 1] 2162 	ld a,(IN,sp)
      001A5B C7 00 01         [ 1] 2163 	ld in,a
      001A5E 7B 06            [ 1] 2164 	ld a,(CNT,sp)
      001A60 C7 00 03         [ 1] 2165 	ld count,a  
      001A63 81               [ 4] 2166 	ret
                                   2167 
                                   2168 
                                   2169 
                                   2170 ;------------------------------------------
                                   2171 ; BASIC: INPUT [string]var[,[string]var]
                                   2172 ; input value in variables 
                                   2173 ; [string] optionally can be used as prompt 
                                   2174 ;-----------------------------------------
                           000001  2175 	CX_BPTR=1
                           000003  2176 	CX_IN=3
                           000004  2177 	CX_CNT=4
                           000005  2178 	SKIP=5
                           000006  2179 	VAR_ADDR=6
                           000007  2180 	VSIZE=7
      001A64                       2181 input_var:
      001A64                       2182 	_vars VSIZE 
      001A64 52 07            [ 2]    1     sub sp,#VSIZE 
      001A66                       2183 input_loop:
      001A66 0F 05            [ 1] 2184 	clr (SKIP,sp)
      001A68 CD 12 4F         [ 4] 2185 	call next_token 
      001A6B A1 02            [ 1] 2186 	cp a,#TK_QSTR 
      001A6D 26 08            [ 1] 2187 	jrne 1$ 
      001A6F CD 03 4E         [ 4] 2188 	call puts 
      001A72 03 05            [ 1] 2189 	cpl (SKIP,sp)
      001A74 CD 12 4F         [ 4] 2190 	call next_token 
      001A77 A1 85            [ 1] 2191 1$: cp a,#TK_VAR  
      001A79 27 03            [ 1] 2192 	jreq 2$ 
      001A7B CC 11 57         [ 2] 2193 	jp syntax_error
      001A7E 1F 06            [ 2] 2194 2$:	ldw (VAR_ADDR,sp),x 
      001A80 0D 05            [ 1] 2195 	tnz (SKIP,sp)
      001A82 26 06            [ 1] 2196 	jrne 21$ 
      001A84 CD 0B 68         [ 4] 2197 	call var_name 
      001A87 CD 02 F1         [ 4] 2198 	call putc   
      001A8A                       2199 21$:
      001A8A A6 3A            [ 1] 2200 	ld a,#':
      001A8C CD 02 F1         [ 4] 2201 	call putc 
      001A8F CD 1A 44         [ 4] 2202 	call save_context 
      001A92 72 5F 00 03      [ 1] 2203 	clr count  
      001A96 CD 04 53         [ 4] 2204 	call readln 
      001A99 AE 16 90         [ 2] 2205 	ldw x,#tib 
      001A9C 3B 00 03         [ 1] 2206 	push count
      001A9F 4B 00            [ 1] 2207 	push #0 
      001AA1 72 FB 01         [ 2] 2208 	addw x,(1,sp)
      001AA4 5C               [ 1] 2209 	incw x 
      001AA5                       2210 	_drop 2 
      001AA5 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001AA7 72 5F 00 01      [ 1] 2211 	clr in 
      001AAB CD 08 B7         [ 4] 2212 	call get_token
      001AAE A1 84            [ 1] 2213 	cp a,#TK_INTGR
      001AB0 27 10            [ 1] 2214 	jreq 3$ 
      001AB2 A1 11            [ 1] 2215 	cp a,#TK_MINUS
      001AB4 CD 08 B7         [ 4] 2216 	call get_token 
      001AB7 A1 84            [ 1] 2217 	cp a,#TK_INTGR 
      001AB9 27 06            [ 1] 2218 	jreq 22$
      001ABB CD 1A 54         [ 4] 2219 	call rest_context 
      001ABE CC 11 57         [ 2] 2220 	jp syntax_error
      001AC1                       2221 22$:
      001AC1 50               [ 2] 2222 	negw x 	
      001AC2 16 06            [ 2] 2223 3$: ldw y,(VAR_ADDR,sp) 
      001AC4 90 FF            [ 2] 2224 	ldw (y),x 
      001AC6 CD 1A 54         [ 4] 2225 	call rest_context
      001AC9 CD 12 4F         [ 4] 2226 	call next_token 
      001ACC A1 09            [ 1] 2227 	cp a,#TK_COMMA 
      001ACE 27 96            [ 1] 2228 	jreq input_loop
      001AD0 A1 00            [ 1] 2229 	cp a,#TK_NONE 
      001AD2 27 07            [ 1] 2230 	jreq input_exit  
      001AD4 A1 0B            [ 1] 2231 	cp a,#TK_COLON 
      001AD6 27 03            [ 1] 2232     jreq input_exit 
      001AD8 CC 11 57         [ 2] 2233 	jp syntax_error 
      001ADB                       2234 input_exit:
      001ADB                       2235 	_drop VSIZE 
      001ADB 5B 07            [ 2]    1     addw sp,#VSIZE 
      001ADD 81               [ 4] 2236 	ret 
                                   2237 
                                   2238 
                                   2239 ;---------------------
                                   2240 ; BASIC: REMARK | ' 
                                   2241 ; skip comment to end of line 
                                   2242 ;---------------------- 
      001ADE                       2243 remark::
      001ADE 55 00 03 00 01   [ 1] 2244 	mov in,count 
      001AE3 81               [ 4] 2245  	ret 
                                   2246 
                                   2247 
                                   2248 ;---------------------
                                   2249 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2250 ; read in loop 'addr'  
                                   2251 ; apply & 'mask' to value 
                                   2252 ; loop while result==0.  
                                   2253 ; 'xor_mask' is used to 
                                   2254 ; invert the wait logic.
                                   2255 ; i.e. loop while not 0.
                                   2256 ;---------------------
                           000001  2257 	XMASK=1 
                           000002  2258 	MASK=2
                           000003  2259 	ADDR=3
                           000004  2260 	VSIZE=4
      001AE4                       2261 wait: 
      001AE4                       2262 	_vars VSIZE
      001AE4 52 04            [ 2]    1     sub sp,#VSIZE 
      001AE6 0F 01            [ 1] 2263 	clr (XMASK,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001AE8 CD 15 FB         [ 4] 2264 	call arg_list 
      001AEB A1 02            [ 1] 2265 	cp a,#2
      001AED 24 03            [ 1] 2266 	jruge 0$
      001AEF CC 11 57         [ 2] 2267 	jp syntax_error 
      001AF2 A1 03            [ 1] 2268 0$:	cp a,#3
      001AF4 25 04            [ 1] 2269 	jrult 1$
      001AF6 85               [ 2] 2270 	popw x 
      001AF7 9F               [ 1] 2271 	ld a,xl
      001AF8 6B 01            [ 1] 2272 	ld (XMASK,sp),a 
      001AFA 85               [ 2] 2273 1$: popw x ; mask 
      001AFB 9F               [ 1] 2274 	ld a,xl 
      001AFC 6B 02            [ 1] 2275 	ld (MASK,sp),a 
      001AFE 85               [ 2] 2276 	popw x ; address 
      001AFF F6               [ 1] 2277 2$:	ld a,(x)
      001B00 14 02            [ 1] 2278 	and a,(MASK,sp)
      001B02 18 01            [ 1] 2279 	xor a,(XMASK,sp)
      001B04 27 F9            [ 1] 2280 	jreq 2$ 
      001B06                       2281 	_drop VSIZE 
      001B06 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B08 81               [ 4] 2282 	ret 
                                   2283 
                                   2284 ;---------------------
                                   2285 ; BASIC: BSET addr,mask
                                   2286 ; set bits at 'addr' corresponding 
                                   2287 ; to those of 'mask' that are at 1.
                                   2288 ; arguments:
                                   2289 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2290 ;   mask        mask|addr
                                   2291 ; output:
                                   2292 ;	none 
                                   2293 ;--------------------------
      001B09                       2294 bit_set:
      001B09 CD 15 FB         [ 4] 2295 	call arg_list 
      001B0C A1 02            [ 1] 2296 	cp a,#2	 
      001B0E 27 03            [ 1] 2297 	jreq 1$ 
      001B10 CC 11 57         [ 2] 2298 	jp syntax_error
      001B13                       2299 1$: 
      001B13 85               [ 2] 2300 	popw x ; mask 
      001B14 9F               [ 1] 2301 	ld a,xl 
      001B15 85               [ 2] 2302 	popw x ; addr  
      001B16 FA               [ 1] 2303 	or a,(x)
      001B17 F7               [ 1] 2304 	ld (x),a
      001B18 81               [ 4] 2305 	ret 
                                   2306 
                                   2307 ;---------------------
                                   2308 ; BASIC: BRES addr,mask
                                   2309 ; reset bits at 'addr' corresponding 
                                   2310 ; to those of 'mask' that are at 1.
                                   2311 ; arguments:
                                   2312 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2313 ;   mask	    ~mask&*addr  
                                   2314 ; output:
                                   2315 ;	none 
                                   2316 ;--------------------------
      001B19                       2317 bit_reset:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001B19 CD 15 FB         [ 4] 2318 	call arg_list 
      001B1C A1 02            [ 1] 2319 	cp a,#2  
      001B1E 27 03            [ 1] 2320 	jreq 1$ 
      001B20 CC 11 57         [ 2] 2321 	jp syntax_error
      001B23                       2322 1$: 
      001B23 85               [ 2] 2323 	popw x ; mask 
      001B24 9F               [ 1] 2324 	ld a,xl 
      001B25 43               [ 1] 2325 	cpl a 
      001B26 85               [ 2] 2326 	popw x ; addr  
      001B27 F4               [ 1] 2327 	and a,(x)
      001B28 F7               [ 1] 2328 	ld (x),a 
      001B29 81               [ 4] 2329 	ret 
                                   2330 
                                   2331 ;---------------------
                                   2332 ; BASIC: BTOGL addr,mask
                                   2333 ; toggle bits at 'addr' corresponding 
                                   2334 ; to those of 'mask' that are at 1.
                                   2335 ; arguments:
                                   2336 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2337 ;   mask	    mask^*addr  
                                   2338 ; output:
                                   2339 ;	none 
                                   2340 ;--------------------------
      001B2A                       2341 bit_toggle:
      001B2A CD 15 FB         [ 4] 2342 	call arg_list 
      001B2D A1 02            [ 1] 2343 	cp a,#2 
      001B2F 27 03            [ 1] 2344 	jreq 1$ 
      001B31 CC 11 57         [ 2] 2345 	jp syntax_error
      001B34 85               [ 2] 2346 1$: popw x ; mask 
      001B35 9F               [ 1] 2347 	ld a,xl 
      001B36 85               [ 2] 2348 	popw x ; addr  
      001B37 F8               [ 1] 2349 	xor a,(x)
      001B38 F7               [ 1] 2350 	ld (x),a 
      001B39 81               [ 4] 2351 	ret 
                                   2352 
                                   2353 
                                   2354 ;---------------------
                                   2355 ; BASIC: BTEST(addr,bit)
                                   2356 ; return bit value at 'addr' 
                                   2357 ; bit is in range {0..7}.
                                   2358 ; arguments:
                                   2359 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2360 ;   bit 	    bit position {0..7}  
                                   2361 ; output:
                                   2362 ;	none 
                                   2363 ;--------------------------
      001B3A                       2364 bit_test:
      001B3A CD 15 F6         [ 4] 2365 	call func_args 
      001B3D A1 02            [ 1] 2366 	cp a,#2
      001B3F 27 03            [ 1] 2367 	jreq 0$
      001B41 CC 11 57         [ 2] 2368 	jp syntax_error
      001B44                       2369 0$:	
      001B44 85               [ 2] 2370 	popw x 
      001B45 9F               [ 1] 2371 	ld a,xl 
      001B46 A4 07            [ 1] 2372 	and a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B48 88               [ 1] 2373 	push a   
      001B49 A6 01            [ 1] 2374 	ld a,#1 
      001B4B 0D 01            [ 1] 2375 1$: tnz (1,sp)
      001B4D 27 05            [ 1] 2376 	jreq 2$
      001B4F 48               [ 1] 2377 	sll a 
      001B50 0A 01            [ 1] 2378 	dec (1,sp)
      001B52 20 F7            [ 2] 2379 	jra 1$
      001B54                       2380 2$: _drop 1 
      001B54 5B 01            [ 2]    1     addw sp,#1 
      001B56 85               [ 2] 2381 	popw x 
      001B57 F4               [ 1] 2382 	and a,(x)
      001B58 27 02            [ 1] 2383 	jreq 3$
      001B5A A6 01            [ 1] 2384 	ld a,#1 
      001B5C 5F               [ 1] 2385 3$:	clrw x 
      001B5D 97               [ 1] 2386 	ld xl,a 
      001B5E A6 84            [ 1] 2387 	ld a,#TK_INTGR
      001B60 81               [ 4] 2388 	ret
                                   2389 
                                   2390 
                                   2391 ;--------------------
                                   2392 ; BASIC: POKE addr,byte
                                   2393 ; put a byte at addr 
                                   2394 ;--------------------
      001B61                       2395 poke:
      001B61 CD 15 FB         [ 4] 2396 	call arg_list 
      001B64 A1 02            [ 1] 2397 	cp a,#2
      001B66 27 03            [ 1] 2398 	jreq 1$
      001B68 CC 11 57         [ 2] 2399 	jp syntax_error
      001B6B                       2400 1$:	
      001B6B 85               [ 2] 2401 	popw x  
      001B6C 9F               [ 1] 2402     ld a,xl 
      001B6D 85               [ 2] 2403 	popw x 
      001B6E F7               [ 1] 2404 	ld (x),a 
      001B6F 81               [ 4] 2405 	ret 
                                   2406 
                                   2407 ;-----------------------
                                   2408 ; BASIC: PEEK(addr)
                                   2409 ; get the byte at addr 
                                   2410 ; input:
                                   2411 ;	none 
                                   2412 ; output:
                                   2413 ;	X 		value 
                                   2414 ;-----------------------
      001B70                       2415 peek:
      001B70 CD 15 F6         [ 4] 2416 	call func_args
      001B73 A1 01            [ 1] 2417 	cp a,#1 
      001B75 27 03            [ 1] 2418 	jreq 1$
      001B77 CC 11 57         [ 2] 2419 	jp syntax_error
      001B7A 85               [ 2] 2420 1$: popw x 
      001B7B F6               [ 1] 2421 	ld a,(x)
      001B7C 5F               [ 1] 2422 	clrw x 
      001B7D 97               [ 1] 2423 	ld xl,a 
      001B7E A6 84            [ 1] 2424 	ld a,#TK_INTGR
      001B80 81               [ 4] 2425 	ret 
                                   2426 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                   2427 ;---------------------------
                                   2428 ; BASIC IF expr : instructions
                                   2429 ; evaluate expr and if true 
                                   2430 ; execute instructions on same line. 
                                   2431 ;----------------------------
      001B81                       2432 if: 
      001B81 CD 17 43         [ 4] 2433 	call relation 
      001B84 A1 84            [ 1] 2434 	cp a,#TK_INTGR
      001B86 27 03            [ 1] 2435 	jreq 1$ 
      001B88 CC 11 57         [ 2] 2436 	jp syntax_error
      001B8B 4F               [ 1] 2437 1$:	clr a 
      001B8C 5D               [ 2] 2438 	tnzw x 
      001B8D 26 05            [ 1] 2439 	jrne 9$  
                                   2440 ;skip to next line
      001B8F 55 00 03 00 01   [ 1] 2441 	mov in,count
      001B94 81               [ 4] 2442 9$:	ret 
                                   2443 
                                   2444 ;------------------------
                                   2445 ; BASIC: FOR var=expr 
                                   2446 ; set variable to expression 
                                   2447 ; leave variable address 
                                   2448 ; on stack and set
                                   2449 ; FLOOP bit in 'flags'
                                   2450 ;-----------------
                           000001  2451 	RETL1=1 ; return address  
                           000003  2452 	FSTEP=3  ; variable increment
                           000005  2453 	LIMIT=5 ; loop limit 
                           000007  2454 	CVAR=7   ; control variable 
                           000009  2455 	INW=9   ;  in.w saved
                           00000B  2456 	BPTR=11 ; baseptr saved
                           00000A  2457 	VSIZE=10  
      001B95                       2458 for: ; { -- var_addr }
      001B95 85               [ 2] 2459 	popw x ; call return address 
      001B96                       2460 	_vars VSIZE 
      001B96 52 0A            [ 2]    1     sub sp,#VSIZE 
      001B98 89               [ 2] 2461 	pushw x  ; RETL1 
      001B99 A6 85            [ 1] 2462 	ld a,#TK_VAR 
      001B9B CD 15 E9         [ 4] 2463 	call expect
      001B9E 1F 07            [ 2] 2464 	ldw (CVAR,sp),x  ; control variable 
      001BA0 CD 18 47         [ 4] 2465 	call let_var 
      001BA3 72 14 00 21      [ 1] 2466 	bset flags,#FLOOP 
                                   2467 ; open space on stack for loop data 
      001BA7 5F               [ 1] 2468 	clrw x 
      001BA8 1F 0B            [ 2] 2469 	ldw (BPTR,sp),x 
      001BAA 1F 09            [ 2] 2470 	ldw (INW,sp),x 
      001BAC CD 12 4F         [ 4] 2471 	call next_token 
      001BAF A1 80            [ 1] 2472 	cp a,#TK_CMD 
      001BB1 27 03            [ 1] 2473 	jreq 1$
      001BB3 CC 11 57         [ 2] 2474 	jp syntax_error
      001BB6                       2475 1$:  
      001BB6 A3 1B BE         [ 2] 2476 	cpw x,#to 
      001BB9 27 03            [ 1] 2477 	jreq to
      001BBB CC 11 57         [ 2] 2478 	jp syntax_error 
                                   2479 
                                   2480 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                   2481 ; BASIC: TO expr 
                                   2482 ; second part of FOR loop initilization
                                   2483 ; leave limit on stack and set 
                                   2484 ; FTO bit in 'flags'
                                   2485 ;-----------------------------------
      001BBE                       2486 to: ; { var_addr -- var_addr limit step }
      001BBE 72 04 00 21 03   [ 2] 2487 	btjt flags,#FLOOP,1$
      001BC3 CC 11 57         [ 2] 2488 	jp syntax_error
      001BC6 CD 17 43         [ 4] 2489 1$: call relation  
      001BC9 A1 84            [ 1] 2490 	cp a,#TK_INTGR 
      001BCB 27 03            [ 1] 2491 	jreq 2$ 
      001BCD CC 11 57         [ 2] 2492 	jp syntax_error
      001BD0 1F 05            [ 2] 2493 2$: ldw (LIMIT,sp),x
                                   2494 ;	ldw x,in.w 
      001BD2 CD 12 4F         [ 4] 2495 	call next_token
      001BD5 A1 00            [ 1] 2496 	cp a,#TK_NONE  
      001BD7 27 0E            [ 1] 2497 	jreq 4$ 
      001BD9 A1 80            [ 1] 2498 	cp a,#TK_CMD
      001BDB 26 05            [ 1] 2499 	jrne 3$
      001BDD A3 1B EE         [ 2] 2500 	cpw x,#step 
      001BE0 27 0C            [ 1] 2501 	jreq step
      001BE2                       2502 3$:	
      001BE2                       2503 	_unget_token   	 
      001BE2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BE7                       2504 4$:	
      001BE7 AE 00 01         [ 2] 2505 	ldw x,#1   ; default step  
      001BEA 1F 03            [ 2] 2506 	ldw (FSTEP,sp),x 
      001BEC 20 14            [ 2] 2507 	jra store_loop_addr 
                                   2508 
                                   2509 
                                   2510 ;----------------------------------
                                   2511 ; BASIC: STEP expr 
                                   2512 ; optional third par of FOR loop
                                   2513 ; initialization. 	
                                   2514 ;------------------------------------
      001BEE                       2515 step: ; {var limit -- var limit step}
      001BEE 72 04 00 21 03   [ 2] 2516 	btjt flags,#FLOOP,1$
      001BF3 CC 11 57         [ 2] 2517 	jp syntax_error
      001BF6 CD 17 43         [ 4] 2518 1$: call relation
      001BF9 A1 84            [ 1] 2519 	cp a,#TK_INTGR
      001BFB 27 03            [ 1] 2520 	jreq 2$
      001BFD CC 11 57         [ 2] 2521 	jp syntax_error
      001C00 1F 03            [ 2] 2522 2$:	ldw (FSTEP,sp),x ; step
                                   2523 ; leave loop back entry point on cstack 
                                   2524 ; cstack is 1 call deep from interpreter
      001C02                       2525 store_loop_addr:
      001C02 CE 00 04         [ 2] 2526 	ldw x,basicptr  
      001C05 1F 0B            [ 2] 2527 	ldw (BPTR,sp),x 
      001C07 CE 00 00         [ 2] 2528 	ldw x,in.w 
      001C0A 1F 09            [ 2] 2529 	ldw (INW,sp),x   
      001C0C 72 15 00 21      [ 1] 2530 	bres flags,#FLOOP 
      001C10 72 5C 00 1E      [ 1] 2531 	inc loop_depth  
      001C14 81               [ 4] 2532 	ret 
                                   2533 
                                   2534 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                   2535 ; BASIC: NEXT var 
                                   2536 ; FOR loop control 
                                   2537 ; increment variable with step 
                                   2538 ; and compare with limit 
                                   2539 ; loop if threshold not crossed.
                                   2540 ; else stack. 
                                   2541 ; and decrement 'loop_depth' 
                                   2542 ;--------------------------------
      001C15                       2543 next: ; {var limit step retl1 -- [var limit step ] }
      001C15 72 5D 00 1E      [ 1] 2544 	tnz loop_depth 
      001C19 26 03            [ 1] 2545 	jrne 1$ 
      001C1B CC 11 57         [ 2] 2546 	jp syntax_error 
      001C1E                       2547 1$: 
      001C1E A6 85            [ 1] 2548 	ld a,#TK_VAR 
      001C20 CD 15 E9         [ 4] 2549 	call expect
                                   2550 ; check for good variable after NEXT 	 
      001C23 13 07            [ 2] 2551 	cpw x,(CVAR,sp)
      001C25 27 03            [ 1] 2552 	jreq 2$  
      001C27 CC 11 57         [ 2] 2553 	jp syntax_error ; not the good one 
      001C2A                       2554 2$: ; increment variable 
      001C2A FE               [ 2] 2555 	ldw x,(x)  ; get var value 
      001C2B 72 FB 03         [ 2] 2556 	addw x,(FSTEP,sp) ; var+step 
      001C2E 16 07            [ 2] 2557 	ldw y,(CVAR,sp)
      001C30 90 FF            [ 2] 2558 	ldw (y),x ; save var new value 
                                   2559 ; check sign of STEP  
      001C32 A6 80            [ 1] 2560 	ld a,#0x80
      001C34 15 03            [ 1] 2561 	bcp a,(FSTEP,sp)
      001C36 2A 06            [ 1] 2562 	jrpl 4$
                                   2563 ;negative step 
      001C38 13 05            [ 2] 2564 	cpw x,(LIMIT,sp)
      001C3A 2F 1B            [ 1] 2565 	jrslt loop_done
      001C3C 20 04            [ 2] 2566 	jra loop_back 
      001C3E                       2567 4$: ; positive step
      001C3E 13 05            [ 2] 2568 	cpw x,(LIMIT,sp)
      001C40 2C 15            [ 1] 2569 	jrsgt loop_done
      001C42                       2570 loop_back:
      001C42 1E 0B            [ 2] 2571 	ldw x,(BPTR,sp)
      001C44 CF 00 04         [ 2] 2572 	ldw basicptr,x 
      001C47 72 01 00 21 05   [ 2] 2573 	btjf flags,#FRUN,1$ 
      001C4C E6 02            [ 1] 2574 	ld a,(2,x)
      001C4E C7 00 03         [ 1] 2575 	ld count,a
      001C51 1E 09            [ 2] 2576 1$:	ldw x,(INW,sp)
      001C53 CF 00 00         [ 2] 2577 	ldw in.w,x 
      001C56 81               [ 4] 2578 	ret 
      001C57                       2579 loop_done:
                                   2580 	; remove loop data from stack  
      001C57 85               [ 2] 2581 	popw x
      001C58                       2582 	_drop VSIZE 
      001C58 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001C5A 72 5A 00 1E      [ 1] 2583 	dec loop_depth 
                                   2584 ;	pushw x 
                                   2585 ;	ret 
      001C5E FC               [ 2] 2586 	jp (x)
                                   2587 
                                   2588 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   2589 ; called by goto/gosub
                                   2590 ; to get target line number 
                                   2591 ;---------------------------
      001C5F                       2592 get_target_line:
      001C5F CD 12 4F         [ 4] 2593 	call next_token  
      001C62 A1 84            [ 1] 2594 	cp a,#TK_INTGR
      001C64 27 07            [ 1] 2595 	jreq get_target_line_2 
      001C66 A1 01            [ 1] 2596 	cp a,#TK_LABEL 
      001C68 27 1F            [ 1] 2597 	jreq look_target_symbol 
      001C6A CC 11 57         [ 2] 2598 	jp syntax_error
      001C6D                       2599 get_target_line_2:
      001C6D 4F               [ 1] 2600 	clr a
      001C6E 90 CE 00 04      [ 2] 2601 	ldw y,basicptr 
      001C72 90 FE            [ 2] 2602 	ldw y,(y)
      001C74 90 89            [ 2] 2603 	pushw y 
      001C76 13 01            [ 2] 2604 	cpw x,(1,sp)
      001C78 5B 02            [ 2] 2605 	addw sp,#2 
      001C7A 25 01            [ 1] 2606 	jrult 11$
      001C7C 4C               [ 1] 2607 	inc a 
      001C7D                       2608 11$:	
      001C7D CD 06 36         [ 4] 2609 	call search_lineno  
      001C80 5D               [ 2] 2610 	tnzw x 
      001C81 26 05            [ 1] 2611 	jrne 2$ 
      001C83 A6 05            [ 1] 2612 	ld a,#ERR_NO_LINE 
      001C85 CC 11 59         [ 2] 2613 	jp tb_error 
      001C88 81               [ 4] 2614 2$:	ret 
                                   2615 
                                   2616 ; the GOTO|GOSUB target is a symbol.
      001C89                       2617 look_target_symbol:
      001C89 72 5F 00 0D      [ 1] 2618 	clr acc16 
      001C8D 90 CE 00 1A      [ 2] 2619 	ldw y,txtbgn 
      001C91 90 E6 03         [ 1] 2620 1$:	ld a,(3,y) ; first TK_ID on line 
      001C94 A1 01            [ 1] 2621 	cp a,#TK_LABEL 
      001C96 27 15            [ 1] 2622 	jreq 3$ 
      001C98 90 E6 02         [ 1] 2623 2$:	ld a,(2,y); line length 
      001C9B C7 00 0E         [ 1] 2624 	ld acc8,a 
      001C9E 72 B9 00 0D      [ 2] 2625 	addw y,acc16 ;point to next line 
      001CA2 90 C3 00 1C      [ 2] 2626 	cpw y,txtend 
      001CA6 25 E9            [ 1] 2627 	jrult 1$
      001CA8 A6 0A            [ 1] 2628 	ld a,#ERR_BAD_VALUE
      001CAA CC 11 59         [ 2] 2629 	jp tb_error 
      001CAD                       2630 3$: ; found a TK_LABEL 
                                   2631 	; compare with GOTO|GOSUB target 
      001CAD 90 89            [ 2] 2632 	pushw y 
      001CAF 72 A9 00 04      [ 2] 2633 	addw y,#4 ; label string 
      001CB3 CE 00 04         [ 2] 2634 	ldw x,basicptr 
      001CB6 72 BB 00 00      [ 2] 2635 	addw x,in.w 
      001CBA CD 0E 17         [ 4] 2636 	call strcmp
      001CBD 26 04            [ 1] 2637 	jrne 4$
      001CBF 90 85            [ 2] 2638 	popw y 
      001CC1 20 D5            [ 2] 2639 	jra 2$ 
      001CC3                       2640 4$: ; target found 
      001CC3 CD 1C C8         [ 4] 2641 	call skip_label 
      001CC6 85               [ 2] 2642 	popw x 
      001CC7 81               [ 4] 2643 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   2644 
                                   2645 ;--------------------------------
                                   2646 ;  skip label string in BASIC 
                                   2647 ;  text.
                                   2648 ;-------------------------------
      001CC8                       2649 skip_label:
      001CC8 CE 00 04         [ 2] 2650 	ldw x,basicptr 
      001CCB 72 D6 00 00      [ 4] 2651 1$:	ld a,([in.w],x)
      001CCF 72 5C 00 01      [ 1] 2652 	inc in 
      001CD3 4D               [ 1] 2653 	tnz a 
      001CD4 26 F5            [ 1] 2654 	jrne 1$
      001CD6 81               [ 4] 2655 	ret 
                                   2656 
                                   2657 
                                   2658 ;--------------------------------
                                   2659 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2660 ; selective goto or gosub 
                                   2661 ;--------------------------------
                           000003  2662 	RET_ADDR=3
                           000005  2663 	RET_INW=5
                           000004  2664 	VSIZE=4  
      001CD7                       2665 cmd_on:
      001CD7 72 00 00 21 05   [ 2] 2666 	btjt flags,#FRUN,0$ 
      001CDC A6 06            [ 1] 2667 	ld a,#ERR_RUN_ONLY
      001CDE CC 11 59         [ 2] 2668 	jp tb_error 
      001CE1 CD 16 FA         [ 4] 2669 0$:	call expression 
      001CE4 A1 84            [ 1] 2670 	cp a,#TK_INTGR
      001CE6 27 03            [ 1] 2671 	jreq 1$
      001CE8 CC 11 57         [ 2] 2672 	jp syntax_error
      001CEB A3 00 01         [ 2] 2673 1$: cpw x,#1 
      001CEE 2F 69            [ 1] 2674 	jrslt 9$
      001CF0 A3 00 10         [ 2] 2675 	cpw x,#16 ; no more than 16 arguments 
      001CF3 22 64            [ 1] 2676 	jrugt 9$
      001CF5 9F               [ 1] 2677 	ld a,xl 
      001CF6 88               [ 1] 2678 	push a  ; selector  
      001CF7 CD 12 4F         [ 4] 2679 	call next_token ; should be GOTO|GOSUB 
      001CFA A1 80            [ 1] 2680 	cp a,#TK_CMD 
      001CFC 27 03            [ 1] 2681 	jreq 2$ 
      001CFE CC 11 57         [ 2] 2682 	jp syntax_error 
      001D01 A3 1D 60         [ 2] 2683 2$: cpw x,#goto 
      001D04 27 08            [ 1] 2684 	jreq 4$
      001D06 A3 1D 7A         [ 2] 2685 	cpw x,#gosub 
      001D09 27 03            [ 1] 2686 	jreq 4$ 
      001D0B CC 11 57         [ 2] 2687 	jp syntax_error 
      001D0E 84               [ 1] 2688 4$: pop a 
      001D0F 89               [ 2] 2689 	pushw x ; save routine address 	
      001D10 88               [ 1] 2690 	push a  ; -- code_addr selector  
      001D11 CD 12 4F         [ 4] 2691 5$: call next_token 
      001D14 A1 84            [ 1] 2692 	cp a,#TK_INTGR 
      001D16 27 03            [ 1] 2693 	jreq 52$
      001D18 CC 11 57         [ 2] 2694 	jp syntax_error 
      001D1B                       2695 52$: ; got a line number 
      001D1B 0A 01            [ 1] 2696 	dec (1,sp) ; decrement selector 
      001D1D 27 0B            [ 1] 2697 	jreq 58$ ; this is the selected one 
      001D1F CD 12 4F         [ 4] 2698 	call next_token ; try for the next one 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D22 A1 09            [ 1] 2699 	cp a,#TK_COMMA 
      001D24 27 EB            [ 1] 2700 	jreq 5$ 
                                   2701 ; arg list exhausted, selector to big 
                                   2702 ; continue execution on next line 
      001D26                       2703 	_drop 3 ; drop selector and GOTO|GOSUB address 
      001D26 5B 03            [ 2]    1     addw sp,#3 
      001D28 20 2F            [ 2] 2704 	jra 9$
      001D2A                       2705 58$: ;found line# in list 
      001D2A                       2706 	_drop 1 ; discard selector 
      001D2A 5B 01            [ 2]    1     addw sp,#1 
      001D2C 55 00 03 00 01   [ 1] 2707 	mov in,count ; skip to end of this line. 
                                   2708 ; here only the routine address of GOTO|GOSUB is on stack 
                                   2709 ;   X contain target line number 
      001D31 CD 1C 6D         [ 4] 2710 8$:	call get_target_line_2
      001D34 90 85            [ 2] 2711 	popw y ; routine address GOTO|GOSUB  
      001D36 90 A3 1D 60      [ 2] 2712 	cpw y,#goto 
      001D3A 27 31            [ 1] 2713 	jreq jp_to_target 
      001D3C 90 85            [ 2] 2714 	popw y 
      001D3E                       2715 	_vars VSIZE 
      001D3E 52 04            [ 2]    1     sub sp,#VSIZE 
      001D40 90 89            [ 2] 2716 	pushw y 
      001D42 90 CE 00 04      [ 2] 2717 	ldw y,basicptr 
      001D46 55 00 03 00 01   [ 1] 2718 	mov in,count 
      001D4B 72 B9 00 00      [ 2] 2719 	addw y,in.w 
      001D4F 17 03            [ 2] 2720 	ldw (RET_ADDR,sp),y 
      001D51 90 AE 00 03      [ 2] 2721 	ldw y,#3 
      001D55 17 05            [ 2] 2722 	ldw (RET_INW,sp),y
      001D57 20 14            [ 2] 2723 	jra jp_to_target
      001D59                       2724 9$: ; expr out of range skip to next line 
      001D59 55 00 03 00 01   [ 1] 2725 	mov in,count
      001D5E 4F               [ 1] 2726 	clr a  
      001D5F 81               [ 4] 2727 	ret 
                                   2728 
                                   2729 ;------------------------
                                   2730 ; BASIC: GOTO line# 
                                   2731 ; jump to line# 
                                   2732 ; here cstack is 2 call deep from interpreter 
                                   2733 ;------------------------
      001D60                       2734 goto:
      001D60 72 00 00 21 05   [ 2] 2735 	btjt flags,#FRUN,0$ 
      001D65 A6 06            [ 1] 2736 	ld a,#ERR_RUN_ONLY
      001D67 CC 11 59         [ 2] 2737 	jp tb_error 
      001D6A CD 1C 5F         [ 4] 2738 0$:	call get_target_line
      001D6D                       2739 jp_to_target:
      001D6D CF 00 04         [ 2] 2740 	ldw basicptr,x 
      001D70 E6 02            [ 1] 2741 	ld a,(2,x)
      001D72 C7 00 03         [ 1] 2742 	ld count,a 
      001D75 35 03 00 01      [ 1] 2743 	mov in,#3 
      001D79 81               [ 4] 2744 	ret 
                                   2745 
                                   2746 
                                   2747 ;--------------------
                                   2748 ; BASIC: GOSUB line#
                                   2749 ; basic subroutine call
                                   2750 ; actual line# and basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   2751 ; are saved on cstack
                                   2752 ; here cstack is 2 call deep from interpreter 
                                   2753 ;--------------------
                           000003  2754 	RET_ADDR=3
                           000005  2755 	RET_INW=5
                           000004  2756 	VSIZE=4  
      001D7A                       2757 gosub:
      001D7A 72 00 00 21 06   [ 2] 2758 	btjt flags,#FRUN,0$ 
      001D7F A6 06            [ 1] 2759 	ld a,#ERR_RUN_ONLY
      001D81 CC 11 59         [ 2] 2760 	jp tb_error 
      001D84 81               [ 4] 2761 	ret 
      001D85 85               [ 2] 2762 0$:	popw x 
      001D86                       2763 	_vars VSIZE  
      001D86 52 04            [ 2]    1     sub sp,#VSIZE 
      001D88 89               [ 2] 2764 	pushw x 
      001D89 CE 00 04         [ 2] 2765 	ldw x,basicptr
      001D8C 1F 03            [ 2] 2766 	ldw (RET_ADDR,sp),x 
      001D8E CD 1C 5F         [ 4] 2767 	call get_target_line  
      001D91 89               [ 2] 2768 	pushw x 
      001D92 CE 00 00         [ 2] 2769 	ldw x,in.w 
      001D95 1F 07            [ 2] 2770 	ldw (RET_INW+2,sp),x
      001D97 85               [ 2] 2771 	popw x 
      001D98 20 D3            [ 2] 2772 	jra jp_to_target
                                   2773 
                                   2774 ;------------------------
                                   2775 ; BASIC: RETURN 
                                   2776 ; exit from a subroutine 
                                   2777 ; 
                                   2778 ;------------------------
      001D9A                       2779 return:
      001D9A 72 00 00 21 05   [ 2] 2780 	btjt flags,#FRUN,0$ 
      001D9F A6 06            [ 1] 2781 	ld a,#ERR_RUN_ONLY
      001DA1 CC 11 59         [ 2] 2782 	jp tb_error 
      001DA4                       2783 0$:	
      001DA4 1E 03            [ 2] 2784 	ldw x,(RET_ADDR,sp) 
      001DA6 CF 00 04         [ 2] 2785 	ldw basicptr,x
      001DA9 E6 02            [ 1] 2786 	ld a,(2,x)
      001DAB C7 00 03         [ 1] 2787 	ld count,a  
      001DAE 1E 05            [ 2] 2788 	ldw x,(RET_INW,sp)
      001DB0 CF 00 00         [ 2] 2789 	ldw in.w,x 
      001DB3 85               [ 2] 2790 	popw x 
      001DB4                       2791 	_drop VSIZE 
      001DB4 5B 04            [ 2]    1     addw sp,#VSIZE 
      001DB6 89               [ 2] 2792 	pushw x
      001DB7 81               [ 4] 2793 	ret  
                                   2794 
                                   2795 
                                   2796 ;----------------------------------
                                   2797 ; BASIC: RUN
                                   2798 ; run BASIC program in RAM
                                   2799 ;----------------------------------- 
      001DB8                       2800 run: 
      001DB8 72 01 00 21 02   [ 2] 2801 	btjf flags,#FRUN,0$  
      001DBD 4F               [ 1] 2802 	clr a 
      001DBE 81               [ 4] 2803 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001DBF                       2804 0$: 
      001DBF 72 09 00 21 12   [ 2] 2805 	btjf flags,#FBREAK,1$
      001DC4                       2806 	_drop 2 
      001DC4 5B 02            [ 2]    1     addw sp,#2 
      001DC6 CD 1A 54         [ 4] 2807 	call rest_context
      001DC9                       2808 	_drop CTXT_SIZE 
      001DC9 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001DCB 72 19 00 21      [ 1] 2809 	bres flags,#FBREAK 
      001DCF 72 10 00 21      [ 1] 2810 	bset flags,#FRUN 
      001DD3 CC 11 FA         [ 2] 2811 	jp interpreter 
      001DD6 CE 00 1A         [ 2] 2812 1$:	ldw x,txtbgn
      001DD9 C3 00 1C         [ 2] 2813 	cpw x,txtend 
      001DDC 2B 0C            [ 1] 2814 	jrmi run_it 
      001DDE AE 10 F0         [ 2] 2815 	ldw x,#err_no_prog
      001DE1 CD 03 4E         [ 4] 2816 	call puts 
      001DE4 55 00 03 00 01   [ 1] 2817 	mov in,count
      001DE9 81               [ 4] 2818 	ret 
      001DEA                       2819 run_it:	 
      001DEA                       2820 	_drop 2 ; drop return address 
      001DEA 5B 02            [ 2]    1     addw sp,#2 
      001DEC                       2821 run_it_02: 
      001DEC CD 18 2C         [ 4] 2822     call ubound 
      001DEF CD 0E 7C         [ 4] 2823 	call clear_vars 
                                   2824 ; clear data pointer 
      001DF2 5F               [ 1] 2825 	clrw x 
      001DF3 CF 00 06         [ 2] 2826 	ldw data_ptr,x 
      001DF6 72 5F 00 08      [ 1] 2827 	clr data_ofs 
      001DFA 72 5F 00 09      [ 1] 2828 	clr data_len 
                                   2829 ; initialize BASIC pointer 
      001DFE CE 00 1A         [ 2] 2830 	ldw x,txtbgn 
      001E01 CF 00 04         [ 2] 2831 	ldw basicptr,x 
      001E04 E6 02            [ 1] 2832 	ld a,(2,x)
      001E06 C7 00 03         [ 1] 2833 	ld count,a
      001E09 35 03 00 01      [ 1] 2834 	mov in,#3	
      001E0D 72 10 00 21      [ 1] 2835 	bset flags,#FRUN 
      001E11 CC 11 FA         [ 2] 2836 	jp interpreter 
                                   2837 
                                   2838 
                                   2839 ;----------------------
                                   2840 ; BASIC: END
                                   2841 ; end running program
                                   2842 ;---------------------- 
      001E14                       2843 cmd_end: 
                                   2844 ; clean stack 
      001E14 AE 17 FF         [ 2] 2845 	ldw x,#STACK_EMPTY
      001E17 94               [ 1] 2846 	ldw sp,x 
      001E18 CC 11 DB         [ 2] 2847 	jp warm_start
                                   2848 
                                   2849 ;---------------------------
                                   2850 ; BASIC: GET var 
                                   2851 ; receive a key in variable 
                                   2852 ; don't wait 
                                   2853 ;---------------------------
      001E1B                       2854 cmd_get:
      001E1B CD 12 4F         [ 4] 2855 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001E1E A1 85            [ 1] 2856 	cp a,#TK_VAR 
      001E20 27 03            [ 1] 2857 	jreq 0$
      001E22 CC 11 57         [ 2] 2858 	jp syntax_error 
      001E25 CF 00 18         [ 2] 2859 0$: ldw ptr16,x 
      001E28 CD 02 FA         [ 4] 2860 	call qgetc 
      001E2B 27 03            [ 1] 2861 	jreq 2$
      001E2D CD 03 01         [ 4] 2862 	call getc  
      001E30 72 3F 00 18      [ 4] 2863 2$: clr [ptr16]
      001E34 72 5C 00 19      [ 1] 2864 	inc ptr8 
      001E38 72 C7 00 18      [ 4] 2865 	ld [ptr16],a 
      001E3C 81               [ 4] 2866 	ret 
                                   2867 
                                   2868 
                                   2869 ;-----------------
                                   2870 ; 1 Khz beep 
                                   2871 ;-----------------
      001E3D                       2872 beep_1khz:: 
      001E3D AE 00 64         [ 2] 2873 	ldw x,#100
      001E40 90 AE 03 E8      [ 2] 2874 	ldw y,#1000
      001E44 20 0D            [ 2] 2875 	jra beep
                                   2876 
                                   2877 ;-----------------------
                                   2878 ; BASIC: TONE expr1,expr2
                                   2879 ; used TIMER2 channel 1
                                   2880 ; to produce a tone 
                                   2881 ; arguments:
                                   2882 ;    expr1   frequency 
                                   2883 ;    expr2   duration msec.
                                   2884 ;---------------------------
      001E46                       2885 tone:
      001E46 CD 15 FB         [ 4] 2886 	call arg_list 
      001E49 A1 02            [ 1] 2887 	cp a,#2 
      001E4B 27 03            [ 1] 2888 	jreq 1$
      001E4D CC 11 57         [ 2] 2889 	jp syntax_error 
      001E50                       2890 1$: 
      001E50 85               [ 2] 2891 	popw x ; duration
      001E51 90 85            [ 2] 2892 	popw y ; frequency 
      001E53                       2893 beep:  
      001E53 89               [ 2] 2894 	pushw x 
      001E54 AE F4 24         [ 2] 2895 	ldw x,#TIM2_CLK_FREQ
      001E57 65               [ 2] 2896 	divw x,y 
                                   2897 ; round to nearest integer 
      001E58 90 A3 7A 12      [ 2] 2898 	cpw y,#TIM2_CLK_FREQ/2
      001E5C 2B 01            [ 1] 2899 	jrmi 2$
      001E5E 5C               [ 1] 2900 	incw x 
      001E5F                       2901 2$:	 
      001E5F 9E               [ 1] 2902 	ld a,xh 
      001E60 C7 53 0D         [ 1] 2903 	ld TIM2_ARRH,a 
      001E63 9F               [ 1] 2904 	ld a,xl 
      001E64 C7 53 0E         [ 1] 2905 	ld TIM2_ARRL,a 
                                   2906 ; 50% duty cycle 
      001E67 8C               [ 1] 2907 	ccf 
      001E68 56               [ 2] 2908 	rrcw x 
      001E69 9E               [ 1] 2909 	ld a,xh 
      001E6A C7 53 0F         [ 1] 2910 	ld TIM2_CCR1H,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E6D 9F               [ 1] 2911 	ld a,xl
      001E6E C7 53 10         [ 1] 2912 	ld TIM2_CCR1L,a
      001E71 72 10 53 08      [ 1] 2913 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001E75 72 10 53 00      [ 1] 2914 	bset TIM2_CR1,#TIM2_CR1_CEN
      001E79 72 10 53 04      [ 1] 2915 	bset TIM2_EGR,#TIM2_EGR_UG
      001E7D 85               [ 2] 2916 	popw x 
      001E7E CD 22 71         [ 4] 2917 	call pause02
      001E81 72 11 53 08      [ 1] 2918 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001E85 72 11 53 00      [ 1] 2919 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001E89 81               [ 4] 2920 	ret 
                                   2921 
                                   2922 ;-------------------------------
                                   2923 ; BASIC: ADCON 0|1 [,divisor]  
                                   2924 ; disable/enanble ADC 
                                   2925 ;-------------------------------
                           000003  2926 	ONOFF=3 
                           000001  2927 	DIVSOR=1
                           000004  2928 	VSIZE=4 
      001E8A                       2929 power_adc:
      001E8A CD 15 FB         [ 4] 2930 	call arg_list 
      001E8D A1 02            [ 1] 2931 	cp a,#2	
      001E8F 27 0B            [ 1] 2932 	jreq 1$
      001E91 A1 01            [ 1] 2933 	cp a,#1 
      001E93 27 03            [ 1] 2934 	jreq 0$ 
      001E95 CC 11 57         [ 2] 2935 	jp syntax_error 
      001E98 AE 00 00         [ 2] 2936 0$: ldw x,#0
      001E9B 89               [ 2] 2937 	pushw x  ; divisor 
      001E9C 1E 03            [ 2] 2938 1$: ldw x,(ONOFF,sp)
      001E9E 5D               [ 2] 2939 	tnzw x 
      001E9F 27 1A            [ 1] 2940 	jreq 2$ 
      001EA1 1E 01            [ 2] 2941 	ldw x,(DIVSOR,sp) ; divisor 
      001EA3 9F               [ 1] 2942 	ld a,xl
      001EA4 A4 07            [ 1] 2943 	and a,#7
      001EA6 4E               [ 1] 2944 	swap a 
      001EA7 C7 54 01         [ 1] 2945 	ld ADC_CR1,a
      001EAA 72 16 50 CA      [ 1] 2946 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001EAE 72 10 54 01      [ 1] 2947 	bset ADC_CR1,#ADC_CR1_ADON 
      001EB2                       2948 	_usec_dly 7 
      001EB2 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001EB5 5A               [ 2]    2     decw x
      001EB6 9D               [ 1]    3     nop 
      001EB7 26 FA            [ 1]    4     jrne .-4
      001EB9 20 08            [ 2] 2949 	jra 3$
      001EBB 72 11 54 01      [ 1] 2950 2$: bres ADC_CR1,#ADC_CR1_ADON
      001EBF 72 17 50 CA      [ 1] 2951 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001EC3                       2952 3$:	_drop VSIZE 
      001EC3 5B 04            [ 2]    1     addw sp,#VSIZE 
      001EC5 81               [ 4] 2953 	ret
                                   2954 
                                   2955 ;-----------------------------
                                   2956 ; BASIC: ADCREAD (channel)
                                   2957 ; read adc channel {0..5}
                                   2958 ; output:
                                   2959 ;   A 		TK_INTGR 
                                   2960 ;   X 		value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



                                   2961 ;-----------------------------
      001EC6                       2962 analog_read:
      001EC6 CD 15 F6         [ 4] 2963 	call func_args 
      001EC9 A1 01            [ 1] 2964 	cp a,#1 
      001ECB 27 03            [ 1] 2965 	jreq 1$
      001ECD CC 11 57         [ 2] 2966 	jp syntax_error
      001ED0 85               [ 2] 2967 1$: popw x 
      001ED1 A3 00 05         [ 2] 2968 	cpw x,#5 
      001ED4 23 05            [ 2] 2969 	jrule 2$
      001ED6 A6 0A            [ 1] 2970 	ld a,#ERR_BAD_VALUE
      001ED8 CC 11 59         [ 2] 2971 	jp tb_error 
      001EDB 9F               [ 1] 2972 2$: ld a,xl
      001EDC C7 00 0E         [ 1] 2973 	ld acc8,a 
      001EDF A6 05            [ 1] 2974 	ld a,#5
      001EE1 C0 00 0E         [ 1] 2975 	sub a,acc8 
      001EE4 C7 54 00         [ 1] 2976 	ld ADC_CSR,a
      001EE7 72 16 54 02      [ 1] 2977 	bset ADC_CR2,#ADC_CR2_ALIGN
      001EEB 72 10 54 01      [ 1] 2978 	bset ADC_CR1,#ADC_CR1_ADON
      001EEF 72 0F 54 00 FB   [ 2] 2979 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001EF4 CE 54 04         [ 2] 2980 	ldw x,ADC_DRH
      001EF7 A6 84            [ 1] 2981 	ld a,#TK_INTGR
      001EF9 81               [ 4] 2982 	ret 
                                   2983 
                                   2984 ;-----------------------
                                   2985 ; BASIC: DREAD(pin)
                                   2986 ; Arduino pins 
                                   2987 ; read state of a digital pin 
                                   2988 ; pin# {0..15}
                                   2989 ; output:
                                   2990 ;    A 		TK_INTGR
                                   2991 ;    X      0|1 
                                   2992 ;-------------------------
                           000001  2993 	PINNO=1
                           000001  2994 	VSIZE=1
      001EFA                       2995 digital_read:
      001EFA                       2996 	_vars VSIZE 
      001EFA 52 01            [ 2]    1     sub sp,#VSIZE 
      001EFC CD 15 F6         [ 4] 2997 	call func_args
      001EFF A1 01            [ 1] 2998 	cp a,#1
      001F01 27 03            [ 1] 2999 	jreq 1$
      001F03 CC 11 57         [ 2] 3000 	jp syntax_error
      001F06 85               [ 2] 3001 1$: popw x 
      001F07 A3 00 0F         [ 2] 3002 	cpw x,#15 
      001F0A 23 05            [ 2] 3003 	jrule 2$
      001F0C A6 0A            [ 1] 3004 	ld a,#ERR_BAD_VALUE
      001F0E CC 11 59         [ 2] 3005 	jp tb_error 
      001F11 CD 23 AF         [ 4] 3006 2$:	call select_pin 
      001F14 6B 01            [ 1] 3007 	ld (PINNO,sp),a
      001F16 E6 01            [ 1] 3008 	ld a,(GPIO_IDR,x)
      001F18 0D 01            [ 1] 3009 	tnz (PINNO,sp)
      001F1A 27 05            [ 1] 3010 	jreq 8$
      001F1C 44               [ 1] 3011 3$: srl a 
      001F1D 0A 01            [ 1] 3012 	dec (PINNO,sp)
      001F1F 26 FB            [ 1] 3013 	jrne 3$ 
      001F21 A4 01            [ 1] 3014 8$: and a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F23 5F               [ 1] 3015 	clrw x 
      001F24 97               [ 1] 3016 	ld xl,a 
      001F25 A6 84            [ 1] 3017 	ld a,#TK_INTGR
      001F27                       3018 	_drop VSIZE
      001F27 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F29 81               [ 4] 3019 	ret
                                   3020 
                                   3021 
                                   3022 ;-----------------------
                                   3023 ; BASIC: DWRITE pin,0|1
                                   3024 ; Arduino pins 
                                   3025 ; write to a digital pin 
                                   3026 ; pin# {0..15}
                                   3027 ; output:
                                   3028 ;    A 		TK_INTGR
                                   3029 ;    X      0|1 
                                   3030 ;-------------------------
                           000001  3031 	PINNO=1
                           000002  3032 	PINVAL=2
                           000002  3033 	VSIZE=2
      001F2A                       3034 digital_write:
      001F2A                       3035 	_vars VSIZE 
      001F2A 52 02            [ 2]    1     sub sp,#VSIZE 
      001F2C CD 15 FB         [ 4] 3036 	call arg_list  
      001F2F A1 02            [ 1] 3037 	cp a,#2 
      001F31 27 03            [ 1] 3038 	jreq 1$
      001F33 CC 11 57         [ 2] 3039 	jp syntax_error
      001F36 85               [ 2] 3040 1$: popw x 
      001F37 9F               [ 1] 3041 	ld a,xl 
      001F38 6B 02            [ 1] 3042 	ld (PINVAL,sp),a
      001F3A 85               [ 2] 3043 	popw x 
      001F3B A3 00 0F         [ 2] 3044 	cpw x,#15 
      001F3E 23 05            [ 2] 3045 	jrule 2$
      001F40 A6 0A            [ 1] 3046 	ld a,#ERR_BAD_VALUE
      001F42 CC 11 59         [ 2] 3047 	jp tb_error 
      001F45 CD 23 AF         [ 4] 3048 2$:	call select_pin 
      001F48 6B 01            [ 1] 3049 	ld (PINNO,sp),a 
      001F4A A6 01            [ 1] 3050 	ld a,#1
      001F4C 0D 01            [ 1] 3051 	tnz (PINNO,sp)
      001F4E 27 05            [ 1] 3052 	jreq 4$
      001F50 48               [ 1] 3053 3$: sll a
      001F51 0A 01            [ 1] 3054 	dec (PINNO,sp)
      001F53 26 FB            [ 1] 3055 	jrne 3$
      001F55 0D 02            [ 1] 3056 4$: tnz (PINVAL,sp)
      001F57 26 05            [ 1] 3057 	jrne 5$
      001F59 43               [ 1] 3058 	cpl a 
      001F5A E4 00            [ 1] 3059 	and a,(GPIO_ODR,x)
      001F5C 20 02            [ 2] 3060 	jra 8$
      001F5E EA 00            [ 1] 3061 5$: or a,(GPIO_ODR,x)
      001F60 E7 00            [ 1] 3062 8$: ld (GPIO_ODR,x),a 
      001F62                       3063 	_drop VSIZE 
      001F62 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F64 81               [ 4] 3064 	ret
                                   3065 
                                   3066 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                   3067 ;-----------------------
                                   3068 ; BASIC: STOP
                                   3069 ; stop progam execution  
                                   3070 ; without resetting pointers 
                                   3071 ; the program is resumed
                                   3072 ; with RUN 
                                   3073 ;-------------------------
      001F65                       3074 stop:
      001F65 72 00 00 21 02   [ 2] 3075 	btjt flags,#FRUN,2$
      001F6A 4F               [ 1] 3076 	clr a
      001F6B 81               [ 4] 3077 	ret 
      001F6C                       3078 2$:	 
                                   3079 ; create space on cstack to save context 
      001F6C AE 1F 93         [ 2] 3080 	ldw x,#break_point 
      001F6F CD 03 4E         [ 4] 3081 	call puts 
      001F72                       3082 	_drop 2 ;drop return address 
      001F72 5B 02            [ 2]    1     addw sp,#2 
      001F74                       3083 	_vars CTXT_SIZE ; context size 
      001F74 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001F76 CD 1A 44         [ 4] 3084 	call save_context 
      001F79 AE 16 90         [ 2] 3085 	ldw x,#tib 
      001F7C CF 00 04         [ 2] 3086 	ldw basicptr,x
      001F7F 7F               [ 1] 3087 	clr (x)
      001F80 72 5F 00 03      [ 1] 3088 	clr count  
      001F84 5F               [ 1] 3089 	clrw x 
      001F85 CF 00 00         [ 2] 3090 	ldw in.w,x
      001F88 72 11 00 21      [ 1] 3091 	bres flags,#FRUN 
      001F8C 72 18 00 21      [ 1] 3092 	bset flags,#FBREAK
      001F90 CC 11 FA         [ 2] 3093 	jp interpreter 
      001F93 0A 62 72 65 61 6B 20  3094 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3095 
                                   3096 ;-----------------------
                                   3097 ; BASIC: NEW
                                   3098 ; from command line only 
                                   3099 ; free program memory
                                   3100 ; and clear variables 
                                   3101 ;------------------------
      001FB1                       3102 new: 
      001FB1 72 01 00 21 01   [ 2] 3103 	btjf flags,#FRUN,0$ 
      001FB6 81               [ 4] 3104 	ret 
      001FB7                       3105 0$:	
      001FB7 CD 0F BF         [ 4] 3106 	call clear_basic 
      001FBA 81               [ 4] 3107 	ret 
                                   3108 
                                   3109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3110 ;;;  flash memory operations
                                   3111 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3112 
                                   3113 ;--------------------------
                                   3114 ; align farptr to BLOCK_SIZE 
                                   3115 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001FBB                       3116 row_align:
      001FBB A6 7F            [ 1] 3117 	ld a,#0x7f 
      001FBD C4 00 19         [ 1] 3118 	and a,farptr+2 
      001FC0 27 13            [ 1] 3119 	jreq 1$ 
      001FC2 CE 00 18         [ 2] 3120 	ldw x,farptr+1 
      001FC5 1C 00 80         [ 2] 3121 	addw x,#BLOCK_SIZE 
      001FC8 24 04            [ 1] 3122 	jrnc 0$
      001FCA 72 5C 00 17      [ 1] 3123 	inc farptr 
      001FCE 9F               [ 1] 3124 0$: ld a,xl 
      001FCF A4 80            [ 1] 3125 	and a,#0x80
      001FD1 97               [ 1] 3126 	ld xl,a
      001FD2 CF 00 18         [ 2] 3127 	ldw farptr+1,x  	
      001FD5 81               [ 4] 3128 1$:	ret
                                   3129 
                                   3130 ;--------------------
                                   3131 ; input:
                                   3132 ;   X     increment 
                                   3133 ; output:
                                   3134 ;   farptr  incremented 
                                   3135 ;---------------------
      001FD6                       3136 incr_farptr:
      001FD6 72 BB 00 18      [ 2] 3137 	addw x,farptr+1 
      001FDA 24 04            [ 1] 3138 	jrnc 1$
      001FDC 72 5C 00 17      [ 1] 3139 	inc farptr 
      001FE0 CF 00 18         [ 2] 3140 1$:	ldw farptr+1,x  
      001FE3 81               [ 4] 3141 	ret 
                                   3142 
                                   3143 ;-----------------------------------
                                   3144 ; scan block for non zero byte 
                                   3145 ; block are 128 bytes 
                                   3146 ; input:
                                   3147 ;    farptr     address block  
                                   3148 ; output:
                                   3149 ;     A     0 cleared, other not cleared  
                                   3150 ;-----------------------------------
      001FE4                       3151 scan_block:
      001FE4 5F               [ 1] 3152 	clrw x 
      001FE5 92 AF 00 17      [ 5] 3153 1$: ldf a,([farptr],x) 
      001FE9 26 06            [ 1] 3154 	jrne 2$
      001FEB 5C               [ 1] 3155 	incw x 
      001FEC A3 00 80         [ 2] 3156 	cpw x,#BLOCK_SIZE 
      001FEF 25 F4            [ 1] 3157 	jrult 1$ 
      001FF1 81               [ 4] 3158 2$:	ret 
                                   3159 
                                   3160 
                                   3161 
                                   3162 ;-----------------------------------
                                   3163 ; BASIC: ERASE \E | \F 
                                   3164 ; erase all block in range from 
                                   3165 ;  'app_space' to FLASH end (0x20000)
                                   3166 ;  or all EEPROM 
                                   3167 ; that contains a non zero byte.  
                                   3168 ;-----------------------------------
                           000001  3169 	LIMIT=1 
                           000003  3170 	VSIZE = 3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001FF2                       3171 erase:
      001FF2 72 5F 00 17      [ 1] 3172 	clr farptr 
      001FF6                       3173 	_vars VSIZE 
      001FF6 52 03            [ 2]    1     sub sp,#VSIZE 
      001FF8 CD 12 4F         [ 4] 3174 	call next_token 
      001FFB A1 03            [ 1] 3175 	cp a,#TK_CHAR 
      001FFD 27 03            [ 1] 3176 	jreq 0$ 
      001FFF CC 11 57         [ 2] 3177 	jp syntax_error
      002002 9F               [ 1] 3178 0$: ld a,xl 
      002003 A4 DF            [ 1] 3179 	and a,#0XDF 
      002005 A1 45            [ 1] 3180 	cp a,#'E
      002007 26 0C            [ 1] 3181 	jrne 1$
      002009 AE 40 00         [ 2] 3182 	ldw x,#EEPROM_BASE 
      00200C CF 00 18         [ 2] 3183 	ldw farptr+1,x 
      00200F AE 47 FF         [ 2] 3184 	ldw x,#EEPROM_END
      002012 4F               [ 1] 3185 	clr a 
      002013 20 15            [ 2] 3186 	jra 3$ 
      002015 A1 46            [ 1] 3187 1$: cp a,#'F 
      002017 27 06            [ 1] 3188 	jreq 2$
      002019 AE 10 A1         [ 2] 3189 	ldw x,#err_bad_value
      00201C CC 11 59         [ 2] 3190 	jp tb_error
      00201F                       3191 2$:
      00201F AE 2C 80         [ 2] 3192 	ldw x,#app_sign 
      002022 CF 00 18         [ 2] 3193 	ldw farptr+1,x 
      002025 A6 02            [ 1] 3194 	ld a,#(FLASH_END>>16)&0XFF 
      002027 AE 7F FF         [ 2] 3195 	ldw x,#FLASH_END&0xffff
      00202A                       3196 3$:
      00202A 6B 01            [ 1] 3197 	ld (LIMIT,sp),a 
      00202C 1F 02            [ 2] 3198 	ldw (LIMIT+1,sp),x 
                                   3199  ; operation done from RAM
                                   3200  ; copy code to RAM in tib   
      00202E CD 01 11         [ 4] 3201 	call move_erase_to_ram
      002031                       3202 4$:	 
      002031 CD 1F E4         [ 4] 3203     call scan_block 
      002034 27 08            [ 1] 3204 	jreq 5$  ; block already erased 
      002036 A6 45            [ 1] 3205     ld a,#'E 
      002038 CD 02 F1         [ 4] 3206     call putc 
      00203B CD 01 8F         [ 4] 3207 	call block_erase   
                                   3208 ; this block is clean, next  
      00203E AE 00 80         [ 2] 3209 5$:	ldw x,#BLOCK_SIZE
      002041 CD 1F D6         [ 4] 3210 	call incr_farptr
                                   3211 ; check limit, 24 bit substraction  	
      002044 7B 01            [ 1] 3212 	ld a,(LIMIT,sp)
      002046 1E 02            [ 2] 3213 	ldw x,(LIMIT+1,sp)
      002048 72 B0 00 18      [ 2] 3214 	subw x,farptr+1
      00204C C2 00 17         [ 1] 3215 	sbc a,farptr 
      00204F 22 E0            [ 1] 3216 	jrugt 4$ 
      002051 CD 0F BF         [ 4] 3217 9$: call clear_basic
      002054                       3218 	_drop VSIZE 
      002054 5B 03            [ 2]    1     addw sp,#VSIZE 
      002056 81               [ 4] 3219 	ret 
                                   3220 	
                                   3221 
                                   3222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3223 ;  check for application signature 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   3224 ; output:
                                   3225 ;   Carry    0 app present 
                                   3226 ;            1 no app installed  
                                   3227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002057                       3228 qsign: 
      002057 CE 2C 80         [ 2] 3229 	ldw x,app_sign 
      00205A C3 21 17         [ 2] 3230 	cpw x,SIGNATURE ; "BC" 
      00205D 81               [ 4] 3231 	ret 
                                   3232 
                                   3233 ;--------------------------------------
                                   3234 ;  fill write buffer 
                                   3235 ;  input:
                                   3236 ;    y  point to output buffer 
                                   3237 ;    x  point to source 
                                   3238 ;    a  bytes to write in buffer 
                                   3239 ;  output:
                                   3240 ;    y   += A 
                                   3241 ;    X   += A 
                                   3242 ;    A   0 
                                   3243 ;---------------------------------------
      00205E                       3244 fill_write_buffer:
      00205E 88               [ 1] 3245 	push a 
      00205F 4D               [ 1] 3246 	tnz a 
      002060 27 0A            [ 1] 3247 	jreq 9$ 
      002062 F6               [ 1] 3248 1$: ld a,(x)
      002063 5C               [ 1] 3249 	incw x 
      002064 90 F7            [ 1] 3250 	ld (y),a 
      002066 90 5C            [ 1] 3251 	incw y 
      002068 0A 01            [ 1] 3252 	dec (1,sp) 
      00206A 26 F6            [ 1] 3253 	jrne 1$ 
      00206C 84               [ 1] 3254 9$:	pop a 
      00206D 81               [ 4] 3255     ret 	
                                   3256 
                                   3257 ;--------------------------------------
                                   3258 ;  fill pad buffer with zero 
                                   3259 ;  input:
                                   3260 ;	none 
                                   3261 ;  output:
                                   3262 ;    y     buffer address  
                                   3263 ;--------------------------------------
      00206E                       3264 clear_block_buffer:
      00206E 88               [ 1] 3265 	push a 
      00206F 90 AE 16 E0      [ 2] 3266 	ldw y,#block_buffer 
      002073 90 89            [ 2] 3267 	pushw y
      002075 A6 80            [ 1] 3268 	ld a,#BLOCK_SIZE   
      002077 90 7F            [ 1] 3269 1$:	clr (y)
      002079 90 5C            [ 1] 3270 	incw y
      00207B 4A               [ 1] 3271 	dec a  
      00207C 26 F9            [ 1] 3272 	jrne 1$ 	
      00207E 90 85            [ 2] 3273 9$: popw y 
      002080 84               [ 1] 3274 	pop a 			
      002081 81               [ 4] 3275 	ret 
                                   3276 
                                   3277 
                                   3278 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   3279 ; BASIC: SAVE
                                   3280 ; write application from RAM to FLASH
                                   3281 ;--------------------------------------
                           000001  3282 	XTEMP=1
                           000003  3283 	COUNT=3  ; last count bytes written 
                           000004  3284 	CNT_LO=4 ; count low byte 
                           000005  3285 	TOWRITE=5 ; how bytes left to write  
                           000006  3286 	VSIZE=6 
      002082                       3287 save_app:
      002082 89               [ 2] 3288 	pushw x 
      002083 90 89            [ 2] 3289 	pushw y 
      002085                       3290 	_vars VSIZE
      002085 52 06            [ 2]    1     sub sp,#VSIZE 
      002087 CD 20 57         [ 4] 3291 	call qsign 
      00208A 26 09            [ 1] 3292 	jrne 1$
      00208C AE 21 19         [ 2] 3293 	ldw x,#CANT_DO 
      00208F CD 03 4E         [ 4] 3294 	call puts 
      002092 CC 21 11         [ 2] 3295 	jp 9$
      002095                       3296 1$: 
      002095 CE 00 1A         [ 2] 3297 	ldw x,txtbgn
      002098 C3 00 1C         [ 2] 3298 	cpw x,txtend 
      00209B 25 09            [ 1] 3299 	jrult 2$ 
      00209D AE 21 5B         [ 2] 3300 	ldw x,#NO_APP
      0020A0 CD 03 4E         [ 4] 3301 	call puts 
      0020A3 CC 21 11         [ 2] 3302 	jp 9$
      0020A6                       3303 2$: 
                                   3304 ; block programming flash
                                   3305 ; must be done from RAM
                                   3306 ; moved in tib  
      0020A6 CD 01 51         [ 4] 3307 	call move_prg_to_ram
                                   3308 ; initialize farptr 
                                   3309 ; to app_sign address 
      0020A9 72 5F 00 17      [ 1] 3310 	clr farptr 
      0020AD AE 2C 80         [ 2] 3311 	ldw x,#app_sign 
      0020B0 CF 00 18         [ 2] 3312 	ldw farptr+1,x
                                   3313 ; initialize local variables 
      0020B3 CD 18 61         [ 4] 3314 	call prog_size
      0020B6 1F 05            [ 2] 3315 	ldw (TOWRITE,sp),x
      0020B8 0F 03            [ 1] 3316 	clr (COUNT,sp)
                                   3317 ; first bock 
                                   3318 ; containt signature 2 bytes 
                                   3319 ; and size 	2 bytes 
                                   3320 ; use Y as pointer to block_buffer
      0020BA CD 20 6E         [ 4] 3321 	call clear_block_buffer ; -- y=*block_buffer	
                                   3322 ; write signature
      0020BD CE 21 17         [ 2] 3323 	ldw x,SIGNATURE ; "BC" 
      0020C0 90 FF            [ 2] 3324 	ldw (y),x 
      0020C2 72 A9 00 02      [ 2] 3325 	addw y,#2
      0020C6 1E 05            [ 2] 3326 	ldw x,(TOWRITE,sp)
      0020C8 90 FF            [ 2] 3327 	ldw (y),x
      0020CA 72 A9 00 02      [ 2] 3328 	addw y,#2   
      0020CE A6 7C            [ 1] 3329 	ld a,#(BLOCK_SIZE-4)
      0020D0 6B 04            [ 1] 3330 	ld (CNT_LO,sp),a 
      0020D2 A3 00 7C         [ 2] 3331 	cpw x,#(BLOCK_SIZE-4) 
      0020D5 22 01            [ 1] 3332 	jrugt 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      0020D7 9F               [ 1] 3333 	ld a,xl 
      0020D8 6B 04            [ 1] 3334 3$:	ld (CNT_LO,sp),a   
      0020DA CE 00 1A         [ 2] 3335 	ldw x,txtbgn 
      0020DD 1F 01            [ 2] 3336 	ldw (XTEMP,sp),x 
      0020DF                       3337 32$: 
      0020DF 1E 01            [ 2] 3338 	ldw x,(XTEMP,sp)
      0020E1 7B 04            [ 1] 3339 	ld a,(CNT_LO,sp)
      0020E3 CD 20 5E         [ 4] 3340 	call fill_write_buffer 
      0020E6 1F 01            [ 2] 3341 	ldw (XTEMP,sp),x 
      0020E8 AE 16 E0         [ 2] 3342 	ldw x,#block_buffer
      0020EB CD 01 6B         [ 4] 3343 	call write_buffer
      0020EE AE 00 80         [ 2] 3344 	ldw x,#BLOCK_SIZE 
      0020F1 CD 1F D6         [ 4] 3345 	call incr_farptr  
                                   3346 ; following blocks 
      0020F4 1E 01            [ 2] 3347 	ldw x,(XTEMP,sp)
      0020F6 C3 00 1C         [ 2] 3348 	cpw x,txtend 
      0020F9 24 16            [ 1] 3349 	jruge 9$ 
      0020FB 1E 05            [ 2] 3350 	ldw x,(TOWRITE,sp)
      0020FD 72 F0 03         [ 2] 3351 	subw x,(COUNT,sp)
      002100 1F 05            [ 2] 3352 	ldw (TOWRITE,sp),x 
      002102 A6 80            [ 1] 3353 	ld a,#BLOCK_SIZE 
      002104 A3 00 80         [ 2] 3354 	cpw x,#BLOCK_SIZE 
      002107 24 01            [ 1] 3355 	jruge 4$ 
      002109 9F               [ 1] 3356 	ld a,xl 
      00210A 6B 04            [ 1] 3357 4$:	ld (CNT_LO,sp),a 
      00210C CD 20 6E         [ 4] 3358 	call clear_block_buffer 
      00210F 20 CE            [ 2] 3359 	jra 32$ 
      002111                       3360 9$:	_drop VSIZE 
      002111 5B 06            [ 2]    1     addw sp,#VSIZE 
      002113 90 85            [ 2] 3361     popw y 
      002115 85               [ 2] 3362 	popw x 
      002116 81               [ 4] 3363 	ret 
                                   3364 
                                   3365 
      002117 42 43                 3366 SIGNATURE: .ascii "BC"
      002119 43 61 6E 27 74 20 66  3367 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      00215B 4E 6F 20 61 70 70 6C  3368 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3369 
                                   3370 ;---------------------
                                   3371 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3372 ; write 1 or more byte to FLASH or EEPROM
                                   3373 ; starting at address  
                                   3374 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   3375 ;   expr1  	is address 
                                   3376 ;   expr2,...,exprn   are bytes to write
                                   3377 ; output:
                                   3378 ;   none 
                                   3379 ;---------------------
                           000001  3380 	ADDR=1
                           000002  3381 	VSIZ=2 
      002171                       3382 write:
      002171                       3383 	_vars VSIZE 
      002171 52 06            [ 2]    1     sub sp,#VSIZE 
      002173 72 5F 00 17      [ 1] 3384 	clr farptr ; expect 16 bits address 
      002177 CD 16 FA         [ 4] 3385 	call expression
      00217A A1 84            [ 1] 3386 	cp a,#TK_INTGR 
      00217C 27 03            [ 1] 3387 	jreq 0$
      00217E CC 11 57         [ 2] 3388 	jp syntax_error
      002181 1F 01            [ 2] 3389 0$: ldw (ADDR,sp),x 
      002183 CD 12 4F         [ 4] 3390 	call next_token 
      002186 A1 09            [ 1] 3391 	cp a,#TK_COMMA 
      002188 27 02            [ 1] 3392 	jreq 1$ 
      00218A 20 19            [ 2] 3393 	jra 9$ 
      00218C CD 16 FA         [ 4] 3394 1$:	call expression
      00218F A1 84            [ 1] 3395 	cp a,#TK_INTGR
      002191 27 03            [ 1] 3396 	jreq 2$
      002193 CC 11 57         [ 2] 3397 	jp syntax_error
      002196 9F               [ 1] 3398 2$:	ld a,xl 
      002197 1E 01            [ 2] 3399 	ldw x,(ADDR,sp) 
      002199 CF 00 18         [ 2] 3400 	ldw farptr+1,x 
      00219C 5F               [ 1] 3401 	clrw x 
      00219D CD 01 B0         [ 4] 3402 	call write_byte
      0021A0 1E 01            [ 2] 3403 	ldw x,(ADDR,sp)
      0021A2 5C               [ 1] 3404 	incw x 
      0021A3 20 DC            [ 2] 3405 	jra 0$ 
      0021A5                       3406 9$:
      0021A5                       3407 	_drop VSIZE
      0021A5 5B 06            [ 2]    1     addw sp,#VSIZE 
      0021A7 81               [ 4] 3408 	ret 
                                   3409 
                                   3410 
                                   3411 ;---------------------
                                   3412 ;BASIC: CHAR(expr)
                                   3413 ; évaluate expression 
                                   3414 ; and take the 7 least 
                                   3415 ; bits as ASCII character
                                   3416 ; return a TK_CHAR 
                                   3417 ;---------------------
      0021A8                       3418 char:
      0021A8 CD 15 F6         [ 4] 3419 	call func_args 
      0021AB A1 01            [ 1] 3420 	cp a,#1
      0021AD 27 03            [ 1] 3421 	jreq 1$
      0021AF CC 11 57         [ 2] 3422 	jp syntax_error
      0021B2 85               [ 2] 3423 1$:	popw x 
      0021B3 9F               [ 1] 3424 	ld a,xl 
      0021B4 A4 7F            [ 1] 3425 	and a,#0x7f 
      0021B6 97               [ 1] 3426 	ld xl,a
      0021B7 A6 03            [ 1] 3427 	ld a,#TK_CHAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0021B9 81               [ 4] 3428 	ret
                                   3429 
                                   3430 ;---------------------
                                   3431 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3432 ; extract first character 
                                   3433 ; of string argument 
                                   3434 ; return it as TK_INTGR 
                                   3435 ;---------------------
      0021BA                       3436 ascii:
      0021BA A6 07            [ 1] 3437 	ld a,#TK_LPAREN
      0021BC CD 15 E9         [ 4] 3438 	call expect 
      0021BF CD 12 4F         [ 4] 3439 	call next_token 
      0021C2 A1 02            [ 1] 3440 	cp a,#TK_QSTR 
      0021C4 27 0E            [ 1] 3441 	jreq 1$
      0021C6 A1 03            [ 1] 3442 	cp a,#TK_CHAR 
      0021C8 27 0D            [ 1] 3443 	jreq 2$ 
      0021CA A1 82            [ 1] 3444 	cp a,#TK_CFUNC 
      0021CC 27 03            [ 1] 3445 	jreq 0$
      0021CE CC 11 57         [ 2] 3446 	jp syntax_error
      0021D1 FD               [ 4] 3447 0$: call (x)
      0021D2 20 03            [ 2] 3448 	jra 2$
      0021D4                       3449 1$: 
      0021D4 F6               [ 1] 3450 	ld a,(x) 
      0021D5 5F               [ 1] 3451 	clrw x
      0021D6 97               [ 1] 3452 	ld xl,a 
      0021D7                       3453 2$: 
      0021D7 89               [ 2] 3454 	pushw x 
      0021D8 A6 08            [ 1] 3455 	ld a,#TK_RPAREN 
      0021DA CD 15 E9         [ 4] 3456 	call expect
      0021DD 85               [ 2] 3457 	popw x 
      0021DE A6 84            [ 1] 3458 	ld a,#TK_INTGR 
      0021E0 81               [ 4] 3459 	ret 
                                   3460 
                                   3461 ;---------------------
                                   3462 ;BASIC: KEY
                                   3463 ; wait for a character 
                                   3464 ; received from STDIN 
                                   3465 ; input:
                                   3466 ;	none 
                                   3467 ; output:
                                   3468 ;	X 		ASCII character 
                                   3469 ;---------------------
      0021E1                       3470 key:
      0021E1 CD 03 01         [ 4] 3471 	call getc 
      0021E4 5F               [ 1] 3472 	clrw x 
      0021E5 97               [ 1] 3473 	ld xl,a 
      0021E6 A6 84            [ 1] 3474 	ld a,#TK_INTGR
      0021E8 81               [ 4] 3475 	ret
                                   3476 
                                   3477 ;----------------------
                                   3478 ; BASIC: QKEY
                                   3479 ; Return true if there 
                                   3480 ; is a character in 
                                   3481 ; waiting in STDIN 
                                   3482 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   3483 ;  none 
                                   3484 ; output:
                                   3485 ;   X 		0|-1 
                                   3486 ;-----------------------
      0021E9                       3487 qkey:: 
      0021E9 5F               [ 1] 3488 	clrw x 
      0021EA C6 00 2B         [ 1] 3489 	ld a,rx1_head
      0021ED C1 00 2C         [ 1] 3490 	cp a,rx1_tail 
      0021F0 27 01            [ 1] 3491 	jreq 9$ 
      0021F2 53               [ 2] 3492 	cplw x 
      0021F3 A6 84            [ 1] 3493 9$: ld a,#TK_INTGR
      0021F5 81               [ 4] 3494 	ret 
                                   3495 
                                   3496 ;---------------------
                                   3497 ; BASIC: GPIO(expr,reg)
                                   3498 ; return gpio address 
                                   3499 ; expr {0..8}
                                   3500 ; input:
                                   3501 ;   none 
                                   3502 ; output:
                                   3503 ;   X 		gpio register address
                                   3504 ;----------------------------
                           000003  3505 	PORT=3
                           000001  3506 	REG=1 
                           000004  3507 	VSIZE=4 
      0021F6                       3508 gpio:
      0021F6 CD 15 F6         [ 4] 3509 	call func_args 
      0021F9 A1 02            [ 1] 3510 	cp a,#2
      0021FB 27 03            [ 1] 3511 	jreq 1$
      0021FD CC 11 57         [ 2] 3512 	jp syntax_error  
      002200                       3513 1$:	
      002200 1E 03            [ 2] 3514 	ldw x,(PORT,sp)
      002202 2B 17            [ 1] 3515 	jrmi bad_port
      002204 A3 00 09         [ 2] 3516 	cpw x,#9
      002207 2A 12            [ 1] 3517 	jrpl bad_port
      002209 A6 05            [ 1] 3518 	ld a,#5
      00220B 42               [ 4] 3519 	mul x,a
      00220C 1C 50 00         [ 2] 3520 	addw x,#GPIO_BASE 
      00220F 1F 03            [ 2] 3521 	ldw (PORT,sp),x  
      002211 1E 01            [ 2] 3522 	ldw x,(REG,sp) 
      002213 72 FB 03         [ 2] 3523 	addw x,(PORT,sp)
      002216 A6 84            [ 1] 3524 	ld a,#TK_INTGR
      002218                       3525 	_drop VSIZE 
      002218 5B 04            [ 2]    1     addw sp,#VSIZE 
      00221A 81               [ 4] 3526 	ret
      00221B                       3527 bad_port:
      00221B A6 0A            [ 1] 3528 	ld a,#ERR_BAD_VALUE
      00221D CC 11 59         [ 2] 3529 	jp tb_error
                                   3530 
                                   3531 
                                   3532 ;-------------------------
                                   3533 ; BASIC: UFLASH 
                                   3534 ; return free flash address
                                   3535 ; input:
                                   3536 ;  none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   3537 ; output:
                                   3538 ;	A		TK_INTGR
                                   3539 ;   X 		free address 
                                   3540 ;---------------------------
      002220                       3541 uflash:
      002220 CE 2C 80         [ 2] 3542 	ldw x,app_sign
      002223 A3 10 93         [ 2] 3543 	cpw x,#4243 ; signature "BC" 
      002226 27 08            [ 1] 3544 	jreq 1$
      002228 CE 2C 82         [ 2] 3545 	ldw x,app_size 
      00222B 1C 2C 84         [ 2] 3546 	addw x,#app
      00222E 20 03            [ 2] 3547 	jra 2$
      002230 AE 2C 80         [ 2] 3548 1$:	ldw x,#app_space 
      002233 A6 84            [ 1] 3549 2$:	ld a,#TK_INTGR 
      002235 81               [ 4] 3550 	ret 
                                   3551 
                                   3552 
                                   3553 ;---------------------
                                   3554 ; BASIC: USR(addr[,arg])
                                   3555 ; execute a function written 
                                   3556 ; in binary code.
                                   3557 ; binary fonction should 
                                   3558 ; return token attribute in A 
                                   3559 ; and value in X. 
                                   3560 ; input:
                                   3561 ;   addr	routine address 
                                   3562 ;   arg 	is an optional argument 
                                   3563 ; output:
                                   3564 ;   A 		token attribute 
                                   3565 ;   X       returned value 
                                   3566 ;---------------------
      002236                       3567 usr:
      002236 90 89            [ 2] 3568 	pushw y 	
      002238 CD 15 F6         [ 4] 3569 	call func_args 
      00223B A1 01            [ 1] 3570 	cp a,#1 
      00223D 27 07            [ 1] 3571 	jreq 2$
      00223F A1 02            [ 1] 3572 	cp a,#2
      002241 27 03            [ 1] 3573 	jreq 2$  
      002243 CC 11 57         [ 2] 3574 	jp syntax_error 
      002246 90 85            [ 2] 3575 2$: popw y  ; arg|addr 
      002248 A1 01            [ 1] 3576 	cp a,#1
      00224A 27 02            [ 1] 3577 	jreq 3$
      00224C 85               [ 2] 3578 	popw x ; addr
      00224D 51               [ 1] 3579 	exgw x,y 
      00224E 90 FD            [ 4] 3580 3$: call (y)
      002250 90 85            [ 2] 3581 	popw y 
      002252 81               [ 4] 3582 	ret 
                                   3583 
                                   3584 ;------------------------------
                                   3585 ; BASIC: BYE 
                                   3586 ; halt mcu in its lowest power mode 
                                   3587 ; wait for reset or external interrupt
                                   3588 ; do a cold start on wakeup.
                                   3589 ;------------------------------
      002253                       3590 bye:
      002253 72 0D 52 30 FB   [ 2] 3591 	btjf UART1_SR,#UART_SR_TC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002258 8E               [10] 3592 	halt
      002259 CC 0E D1         [ 2] 3593 	jp cold_start  
                                   3594 
                                   3595 ;----------------------------------
                                   3596 ; BASIC: SLEEP 
                                   3597 ; halt mcu until reset or external
                                   3598 ; interrupt.
                                   3599 ; Resume progam after SLEEP command
                                   3600 ;----------------------------------
      00225C                       3601 sleep:
      00225C 72 0D 52 30 FB   [ 2] 3602 	btjf UART1_SR,#UART_SR_TC,.
      002261 72 16 00 21      [ 1] 3603 	bset flags,#FSLEEP
      002265 8E               [10] 3604 	halt 
      002266 81               [ 4] 3605 	ret 
                                   3606 
                                   3607 ;-------------------------------
                                   3608 ; BASIC: PAUSE expr 
                                   3609 ; suspend execution for n msec.
                                   3610 ; input:
                                   3611 ;	none
                                   3612 ; output:
                                   3613 ;	none 
                                   3614 ;------------------------------
      002267                       3615 pause:
      002267 CD 16 FA         [ 4] 3616 	call expression
      00226A A1 84            [ 1] 3617 	cp a,#TK_INTGR
      00226C 27 03            [ 1] 3618 	jreq pause02 
      00226E CC 11 57         [ 2] 3619 	jp syntax_error
      002271                       3620 pause02: 
      002271 5D               [ 2] 3621 1$: tnzw x 
      002272 27 04            [ 1] 3622 	jreq 2$
      002274 8F               [10] 3623 	wfi 
      002275 5A               [ 2] 3624 	decw x 
      002276 26 F9            [ 1] 3625 	jrne 1$
      002278 4F               [ 1] 3626 2$:	clr a 
      002279 81               [ 4] 3627 	ret 
                                   3628 
                                   3629 ;------------------------------
                                   3630 ; BASIC: AWU expr
                                   3631 ; halt mcu for 'expr' milliseconds
                                   3632 ; use Auto wakeup peripheral
                                   3633 ; all oscillators stopped except LSI
                                   3634 ; range: 1ms - 511ms
                                   3635 ; input:
                                   3636 ;  none
                                   3637 ; output:
                                   3638 ;  none:
                                   3639 ;------------------------------
      00227A                       3640 awu:
      00227A CD 16 FA         [ 4] 3641   call expression
      00227D A1 84            [ 1] 3642   cp a,#TK_INTGR
      00227F 27 03            [ 1] 3643   jreq awu02
      002281 CC 11 57         [ 2] 3644   jp syntax_error
      002284                       3645 awu02:
      002284 A3 14 00         [ 2] 3646   cpw x,#5120
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002287 2B 0C            [ 1] 3647   jrmi 1$ 
      002289 35 0F 50 F2      [ 1] 3648   mov AWU_TBR,#15 
      00228D A6 1E            [ 1] 3649   ld a,#30
      00228F 62               [ 2] 3650   div x,a
      002290 A6 10            [ 1] 3651   ld a,#16
      002292 62               [ 2] 3652   div x,a 
      002293 20 1E            [ 2] 3653   jra 4$
      002295                       3654 1$: 
      002295 A3 08 00         [ 2] 3655   cpw x,#2048
      002298 2B 09            [ 1] 3656   jrmi 2$ 
      00229A 35 0E 50 F2      [ 1] 3657   mov AWU_TBR,#14
      00229E A6 50            [ 1] 3658   ld a,#80
      0022A0 62               [ 2] 3659   div x,a 
      0022A1 20 10            [ 2] 3660   jra 4$   
      0022A3                       3661 2$:
      0022A3 35 07 50 F2      [ 1] 3662   mov AWU_TBR,#7
      0022A7                       3663 3$:  
                                   3664 ; while X > 64  divide by 2 and increment AWU_TBR 
      0022A7 A3 00 40         [ 2] 3665   cpw x,#64 
      0022AA 23 07            [ 2] 3666   jrule 4$ 
      0022AC 72 5C 50 F2      [ 1] 3667   inc AWU_TBR 
      0022B0 54               [ 2] 3668   srlw x 
      0022B1 20 F4            [ 2] 3669   jra 3$ 
      0022B3                       3670 4$:
      0022B3 9F               [ 1] 3671   ld a, xl
      0022B4 4A               [ 1] 3672   dec a 
      0022B5 27 01            [ 1] 3673   jreq 5$
      0022B7 4A               [ 1] 3674   dec a 	
      0022B8                       3675 5$: 
      0022B8 A4 3E            [ 1] 3676   and a,#0x3e 
      0022BA C7 50 F1         [ 1] 3677   ld AWU_APR,a 
      0022BD 72 18 50 F0      [ 1] 3678   bset AWU_CSR,#AWU_CSR_AWUEN
      0022C1 8E               [10] 3679   halt 
                                   3680 
      0022C2 81               [ 4] 3681   ret 
                                   3682 
                                   3683 ;------------------------------
                                   3684 ; BASIC: TICKS
                                   3685 ; return msec ticks counter value 
                                   3686 ; input:
                                   3687 ; 	none 
                                   3688 ; output:
                                   3689 ;	X 		TK_INTGR
                                   3690 ;-------------------------------
      0022C3                       3691 get_ticks:
      0022C3 CE 00 0F         [ 2] 3692 	ldw x,ticks 
      0022C6 A6 84            [ 1] 3693 	ld a,#TK_INTGR
      0022C8 81               [ 4] 3694 	ret 
                                   3695 
                                   3696 
                                   3697 
                                   3698 ;------------------------------
                                   3699 ; BASIC: ABS(expr)
                                   3700 ; return absolute value of expr.
                                   3701 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   3702 ;   none
                                   3703 ; output:
                                   3704 ;   X     	positive integer
                                   3705 ;-------------------------------
      0022C9                       3706 abs:
      0022C9 CD 15 F6         [ 4] 3707 	call func_args 
      0022CC A1 01            [ 1] 3708 	cp a,#1 
      0022CE 27 03            [ 1] 3709 	jreq 0$ 
      0022D0 CC 11 57         [ 2] 3710 	jp syntax_error
      0022D3                       3711 0$:  
      0022D3 85               [ 2] 3712     popw x   
      0022D4 9E               [ 1] 3713 	ld a,xh 
      0022D5 A5 80            [ 1] 3714 	bcp a,#0x80 
      0022D7 27 01            [ 1] 3715 	jreq 2$ 
      0022D9 50               [ 2] 3716 	negw x 
      0022DA A6 84            [ 1] 3717 2$: ld a,#TK_INTGR 
      0022DC 81               [ 4] 3718 	ret 
                                   3719 
                                   3720 ;------------------------------
                                   3721 ; BASIC: AND(expr1,expr2)
                                   3722 ; Apply bit AND relation between
                                   3723 ; the 2 arguments, i.e expr1 & expr2 
                                   3724 ; output:
                                   3725 ; 	A 		TK_INTGR
                                   3726 ;   X 		result 
                                   3727 ;------------------------------
      0022DD                       3728 bit_and:
      0022DD CD 15 F6         [ 4] 3729 	call func_args 
      0022E0 A1 02            [ 1] 3730 	cp a,#2
      0022E2 27 03            [ 1] 3731 	jreq 1$
      0022E4 CC 11 57         [ 2] 3732 	jp syntax_error 
      0022E7 85               [ 2] 3733 1$:	popw x 
      0022E8 9E               [ 1] 3734 	ld a,xh 
      0022E9 14 01            [ 1] 3735 	and a,(1,sp)
      0022EB 95               [ 1] 3736 	ld xh,a 
      0022EC 9F               [ 1] 3737 	ld a,xl
      0022ED 14 02            [ 1] 3738 	and a,(2,sp)
      0022EF 97               [ 1] 3739 	ld xl,a 
      0022F0                       3740 	_drop 2 
      0022F0 5B 02            [ 2]    1     addw sp,#2 
      0022F2 A6 84            [ 1] 3741 	ld a,#TK_INTGR
      0022F4 81               [ 4] 3742 	ret
                                   3743 
                                   3744 ;------------------------------
                                   3745 ; BASIC: OR(expr1,expr2)
                                   3746 ; Apply bit OR relation between
                                   3747 ; the 2 arguments, i.e expr1 | expr2 
                                   3748 ; output:
                                   3749 ; 	A 		TK_INTGR
                                   3750 ;   X 		result 
                                   3751 ;------------------------------
      0022F5                       3752 bit_or:
      0022F5 CD 15 F6         [ 4] 3753 	call func_args 
      0022F8 A1 02            [ 1] 3754 	cp a,#2
      0022FA 27 03            [ 1] 3755 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      0022FC CC 11 57         [ 2] 3756 	jp syntax_error 
      0022FF                       3757 1$: 
      0022FF 85               [ 2] 3758 	popw x 
      002300 9E               [ 1] 3759 	ld a,xh 
      002301 1A 01            [ 1] 3760 	or a,(1,sp)
      002303 95               [ 1] 3761 	ld xh,a 
      002304 9F               [ 1] 3762 	ld a,xl 
      002305 1A 02            [ 1] 3763 	or a,(2,sp)
      002307 97               [ 1] 3764 	ld xl,a 
      002308                       3765 	_drop 2 
      002308 5B 02            [ 2]    1     addw sp,#2 
      00230A A6 84            [ 1] 3766 	ld a,#TK_INTGR 
      00230C 81               [ 4] 3767 	ret
                                   3768 
                                   3769 ;------------------------------
                                   3770 ; BASIC: XOR(expr1,expr2)
                                   3771 ; Apply bit XOR relation between
                                   3772 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3773 ; output:
                                   3774 ; 	A 		TK_INTGR
                                   3775 ;   X 		result 
                                   3776 ;------------------------------
      00230D                       3777 bit_xor:
      00230D CD 15 F6         [ 4] 3778 	call func_args 
      002310 A1 02            [ 1] 3779 	cp a,#2
      002312 27 03            [ 1] 3780 	jreq 1$
      002314 CC 11 57         [ 2] 3781 	jp syntax_error 
      002317                       3782 1$: 
      002317 85               [ 2] 3783 	popw x 
      002318 9E               [ 1] 3784 	ld a,xh 
      002319 18 01            [ 1] 3785 	xor a,(1,sp)
      00231B 95               [ 1] 3786 	ld xh,a 
      00231C 9F               [ 1] 3787 	ld a,xl 
      00231D 18 02            [ 1] 3788 	xor a,(2,sp)
      00231F 97               [ 1] 3789 	ld xl,a 
      002320                       3790 	_drop 2 
      002320 5B 02            [ 2]    1     addw sp,#2 
      002322 A6 84            [ 1] 3791 	ld a,#TK_INTGR 
      002324 81               [ 4] 3792 	ret 
                                   3793 
                                   3794 ;------------------------------
                                   3795 ; BASIC: LSHIFT(expr1,expr2)
                                   3796 ; logical shift left expr1 by 
                                   3797 ; expr2 bits 
                                   3798 ; output:
                                   3799 ; 	A 		TK_INTGR
                                   3800 ;   X 		result 
                                   3801 ;------------------------------
      002325                       3802 lshift:
      002325 CD 15 F6         [ 4] 3803 	call func_args
      002328 A1 02            [ 1] 3804 	cp a,#2 
      00232A 27 03            [ 1] 3805 	jreq 1$
      00232C CC 11 57         [ 2] 3806 	jp syntax_error
      00232F 90 85            [ 2] 3807 1$: popw y   
      002331 85               [ 2] 3808 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002332 90 5D            [ 2] 3809 	tnzw y 
      002334 27 05            [ 1] 3810 	jreq 4$
      002336 58               [ 2] 3811 2$:	sllw x 
      002337 90 5A            [ 2] 3812 	decw y 
      002339 26 FB            [ 1] 3813 	jrne 2$
      00233B                       3814 4$:  
      00233B A6 84            [ 1] 3815 	ld a,#TK_INTGR
      00233D 81               [ 4] 3816 	ret
                                   3817 
                                   3818 ;------------------------------
                                   3819 ; BASIC: RSHIFT(expr1,expr2)
                                   3820 ; logical shift right expr1 by 
                                   3821 ; expr2 bits.
                                   3822 ; output:
                                   3823 ; 	A 		TK_INTGR
                                   3824 ;   X 		result 
                                   3825 ;------------------------------
      00233E                       3826 rshift:
      00233E CD 15 F6         [ 4] 3827 	call func_args
      002341 A1 02            [ 1] 3828 	cp a,#2 
      002343 27 03            [ 1] 3829 	jreq 1$
      002345 CC 11 57         [ 2] 3830 	jp syntax_error
      002348 90 85            [ 2] 3831 1$: popw y  
      00234A 85               [ 2] 3832 	popw x
      00234B 90 5D            [ 2] 3833 	tnzw y 
      00234D 27 05            [ 1] 3834 	jreq 4$
      00234F 54               [ 2] 3835 2$:	srlw x 
      002350 90 5A            [ 2] 3836 	decw y 
      002352 26 FB            [ 1] 3837 	jrne 2$
      002354                       3838 4$:  
      002354 A6 84            [ 1] 3839 	ld a,#TK_INTGR
      002356 81               [ 4] 3840 	ret
                                   3841 
                                   3842 ;--------------------------
                                   3843 ; BASIC: FCPU integer
                                   3844 ; set CPU frequency 
                                   3845 ;-------------------------- 
                                   3846 
      002357                       3847 fcpu:
      002357 A6 84            [ 1] 3848 	ld a,#TK_INTGR
      002359 CD 15 E9         [ 4] 3849 	call expect 
      00235C 9F               [ 1] 3850 	ld a,xl 
      00235D A4 07            [ 1] 3851 	and a,#7 
      00235F C7 50 C6         [ 1] 3852 	ld CLK_CKDIVR,a 
      002362 81               [ 4] 3853 	ret 
                                   3854 
                                   3855 ;------------------------------
                                   3856 ; BASIC: PMODE pin#, mode 
                                   3857 ; Arduino pin. 
                                   3858 ; define pin as input or output
                                   3859 ; pin#: {0..15}
                                   3860 ; mode: INPUT|OUTPUT  
                                   3861 ;------------------------------
                           000001  3862 	PINNO=1
                           000001  3863 	VSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002363                       3864 pin_mode:
      002363                       3865 	_vars VSIZE 
      002363 52 01            [ 2]    1     sub sp,#VSIZE 
      002365 CD 15 FB         [ 4] 3866 	call arg_list 
      002368 A1 02            [ 1] 3867 	cp a,#2 
      00236A 27 03            [ 1] 3868 	jreq 1$
      00236C CC 11 57         [ 2] 3869 	jp syntax_error 
      00236F 90 85            [ 2] 3870 1$: popw y ; mode 
      002371 85               [ 2] 3871 	popw x ; Dx pin 
      002372 CD 23 AF         [ 4] 3872 	call select_pin 
      002375 6B 01            [ 1] 3873 	ld (PINNO,sp),a  
      002377 A6 01            [ 1] 3874 	ld a,#1 
      002379 0D 01            [ 1] 3875 	tnz (PINNO,sp)
      00237B 27 0D            [ 1] 3876 	jreq 4$
      00237D 48               [ 1] 3877 2$:	sll a 
      00237E 0A 01            [ 1] 3878 	dec (PINNO,sp)
      002380 26 FB            [ 1] 3879 	jrne 2$ 
      002382 6B 01            [ 1] 3880 	ld (PINNO,sp),a
      002384 7B 01            [ 1] 3881 	ld a,(PINNO,sp)
      002386 EA 03            [ 1] 3882 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002388 E7 03            [ 1] 3883 	ld (GPIO_CR1,x),a 
      00238A 90 A3 00 01      [ 2] 3884 4$:	cpw y,#OUTP 
      00238E 27 10            [ 1] 3885 	jreq 6$
                                   3886 ; input mode
                                   3887 ; disable external interrupt 
      002390 7B 01            [ 1] 3888 	ld a,(PINNO,sp)
      002392 43               [ 1] 3889 	cpl a 
      002393 E4 04            [ 1] 3890 	and a,(GPIO_CR2,x)
      002395 E7 04            [ 1] 3891 	ld (GPIO_CR2,x),a 
                                   3892 ;clear bit in DDR for input mode 
      002397 7B 01            [ 1] 3893 	ld a,(PINNO,sp)
      002399 43               [ 1] 3894 	cpl a 
      00239A E4 02            [ 1] 3895 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      00239C E7 02            [ 1] 3896 	ld (GPIO_DDR,x),a 
      00239E 20 0C            [ 2] 3897 	jra 9$
      0023A0                       3898 6$: ;output mode  
      0023A0 7B 01            [ 1] 3899 	ld a,(PINNO,sp)
      0023A2 EA 02            [ 1] 3900 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0023A4 E7 02            [ 1] 3901 	ld (GPIO_DDR,x),a 
      0023A6 7B 01            [ 1] 3902 	ld a,(PINNO,sp)
      0023A8 EA 04            [ 1] 3903 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0023AA E7 04            [ 1] 3904 	ld (GPIO_CR2,x),a 
      0023AC                       3905 9$:	
      0023AC                       3906 	_drop VSIZE 
      0023AC 5B 01            [ 2]    1     addw sp,#VSIZE 
      0023AE 81               [ 4] 3907 	ret
                                   3908 
                                   3909 ;------------------------
                                   3910 ; select Arduino pin 
                                   3911 ; input:
                                   3912 ;   X 	 {0..15} Arduino Dx 
                                   3913 ; output:
                                   3914 ;   A     stm8s208 pin 
                                   3915 ;   X     base address s208 GPIO port 
                                   3916 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0023AF                       3917 select_pin:
      0023AF 58               [ 2] 3918 	sllw x 
      0023B0 1C 23 BF         [ 2] 3919 	addw x,#arduino_to_8s208 
      0023B3 FE               [ 2] 3920 	ldw x,(x)
      0023B4 9F               [ 1] 3921 	ld a,xl 
      0023B5 88               [ 1] 3922 	push a 
      0023B6 5E               [ 1] 3923 	swapw x 
      0023B7 A6 05            [ 1] 3924 	ld a,#5 
      0023B9 42               [ 4] 3925 	mul x,a 
      0023BA 1C 50 00         [ 2] 3926 	addw x,#GPIO_BASE 
      0023BD 84               [ 1] 3927 	pop a 
      0023BE 81               [ 4] 3928 	ret 
                                   3929 ; translation from Arduino D0..D15 to stm8s208rb 
      0023BF                       3930 arduino_to_8s208:
      0023BF 03 06                 3931 .byte 3,6 ; D0 
      0023C1 03 05                 3932 .byte 3,5 ; D1 
      0023C3 04 00                 3933 .byte 4,0 ; D2 
      0023C5 02 01                 3934 .byte 2,1 ; D3
      0023C7 06 00                 3935 .byte 6,0 ; D4
      0023C9 02 02                 3936 .byte 2,2 ; D5
      0023CB 02 03                 3937 .byte 2,3 ; D6
      0023CD 03 01                 3938 .byte 3,1 ; D7
      0023CF 03 03                 3939 .byte 3,3 ; D8
      0023D1 02 04                 3940 .byte 2,4 ; D9
      0023D3 04 05                 3941 .byte 4,5 ; D10
      0023D5 02 06                 3942 .byte 2,6 ; D11
      0023D7 02 07                 3943 .byte 2,7 ; D12
      0023D9 02 05                 3944 .byte 2,5 ; D13
      0023DB 04 02                 3945 .byte 4,2 ; D14
      0023DD 04 01                 3946 .byte 4,1 ; D15
                                   3947 
                                   3948 
                                   3949 ;------------------------------
                                   3950 ; BASIC: RND(expr)
                                   3951 ; return random number 
                                   3952 ; between 1 and expr inclusive
                                   3953 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3954 ; input:
                                   3955 ; 	none 
                                   3956 ; output:
                                   3957 ;	X 		random positive integer 
                                   3958 ;------------------------------
      0023DF                       3959 random:
      0023DF CD 15 F6         [ 4] 3960 	call func_args 
      0023E2 A1 01            [ 1] 3961 	cp a,#1
      0023E4 27 03            [ 1] 3962 	jreq 1$
      0023E6 CC 11 57         [ 2] 3963 	jp syntax_error
      0023E9                       3964 1$:  
      0023E9 A6 80            [ 1] 3965 	ld a,#0x80 
      0023EB 15 01            [ 1] 3966 	bcp a,(1,sp)
      0023ED 27 05            [ 1] 3967 	jreq 2$
      0023EF A6 0A            [ 1] 3968 	ld a,#ERR_BAD_VALUE
      0023F1 CC 11 59         [ 2] 3969 	jp tb_error
      0023F4                       3970 2$: 
                                   3971 ; acc16=(x<<5)^x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023F4 CE 00 13         [ 2] 3972 	ldw x,seedx 
      0023F7 58               [ 2] 3973 	sllw x 
      0023F8 58               [ 2] 3974 	sllw x 
      0023F9 58               [ 2] 3975 	sllw x 
      0023FA 58               [ 2] 3976 	sllw x 
      0023FB 58               [ 2] 3977 	sllw x 
      0023FC 9E               [ 1] 3978 	ld a,xh 
      0023FD C8 00 13         [ 1] 3979 	xor a,seedx 
      002400 C7 00 0D         [ 1] 3980 	ld acc16,a 
      002403 9F               [ 1] 3981 	ld a,xl 
      002404 C8 00 14         [ 1] 3982 	xor a,seedx+1 
      002407 C7 00 0E         [ 1] 3983 	ld acc8,a 
                                   3984 ; seedx=seedy 
      00240A CE 00 15         [ 2] 3985 	ldw x,seedy 
      00240D CF 00 13         [ 2] 3986 	ldw seedx,x  
                                   3987 ; seedy=seedy^(seedy>>1)
      002410 90 54            [ 2] 3988 	srlw y 
      002412 90 9E            [ 1] 3989 	ld a,yh 
      002414 C8 00 15         [ 1] 3990 	xor a,seedy 
      002417 C7 00 15         [ 1] 3991 	ld seedy,a  
      00241A 90 9F            [ 1] 3992 	ld a,yl 
      00241C C8 00 16         [ 1] 3993 	xor a,seedy+1 
      00241F C7 00 16         [ 1] 3994 	ld seedy+1,a 
                                   3995 ; acc16>>3 
      002422 CE 00 0D         [ 2] 3996 	ldw x,acc16 
      002425 54               [ 2] 3997 	srlw x 
      002426 54               [ 2] 3998 	srlw x 
      002427 54               [ 2] 3999 	srlw x 
                                   4000 ; x=acc16^x 
      002428 9E               [ 1] 4001 	ld a,xh 
      002429 C8 00 0D         [ 1] 4002 	xor a,acc16 
      00242C 95               [ 1] 4003 	ld xh,a 
      00242D 9F               [ 1] 4004 	ld a,xl 
      00242E C8 00 0E         [ 1] 4005 	xor a,acc8 
      002431 97               [ 1] 4006 	ld xl,a 
                                   4007 ; seedy=x^seedy 
      002432 C8 00 16         [ 1] 4008 	xor a,seedy+1
      002435 97               [ 1] 4009 	ld xl,a 
      002436 9E               [ 1] 4010 	ld a,xh 
      002437 C8 00 15         [ 1] 4011 	xor a,seedy
      00243A 95               [ 1] 4012 	ld xh,a 
      00243B CF 00 15         [ 2] 4013 	ldw seedy,x 
                                   4014 ; return seedy modulo expr + 1 
      00243E 90 85            [ 2] 4015 	popw y 
      002440 65               [ 2] 4016 	divw x,y 
      002441 93               [ 1] 4017 	ldw x,y 
      002442 5C               [ 1] 4018 	incw x 
      002443                       4019 10$:
      002443 A6 84            [ 1] 4020 	ld a,#TK_INTGR
      002445 81               [ 4] 4021 	ret 
                                   4022 
                                   4023 ;---------------------------------
                                   4024 ; BASIC: WORDS 
                                   4025 ; affiche la listes des mots du
                                   4026 ; dictionnaire ainsi que le nombre
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                   4027 ; de mots.
                                   4028 ;---------------------------------
                           000001  4029 	WLEN=1 ; word length
                           000002  4030 	LLEN=2 ; character sent to console
                           000003  4031 	WCNT=3 ; count words printed 
                           000003  4032 	VSIZE=3 
      002446                       4033 words:
      002446                       4034 	_vars VSIZE
      002446 52 03            [ 2]    1     sub sp,#VSIZE 
      002448 0F 02            [ 1] 4035 	clr (LLEN,sp)
      00244A 0F 03            [ 1] 4036 	clr (WCNT,sp)
      00244C 90 AE 2B 35      [ 2] 4037 	ldw y,#kword_dict+2
      002450 93               [ 1] 4038 0$:	ldw x,y
      002451 F6               [ 1] 4039 	ld a,(x)
      002452 A4 0F            [ 1] 4040 	and a,#15 
      002454 6B 01            [ 1] 4041 	ld (WLEN,sp),a 
      002456 0C 03            [ 1] 4042 	inc (WCNT,sp)
      002458 5C               [ 1] 4043 1$:	incw x 
      002459 F6               [ 1] 4044 	ld a,(x)
      00245A CD 02 F1         [ 4] 4045 	call putc 
      00245D 0C 02            [ 1] 4046 	inc (LLEN,sp)
      00245F 0A 01            [ 1] 4047 	dec (WLEN,sp)
      002461 26 F5            [ 1] 4048 	jrne 1$
      002463 A6 46            [ 1] 4049 	ld a,#70
      002465 11 02            [ 1] 4050 	cp a,(LLEN,sp)
      002467 2B 09            [ 1] 4051 	jrmi 2$   
      002469 A6 20            [ 1] 4052 	ld a,#SPACE 
      00246B CD 02 F1         [ 4] 4053 	call putc 
      00246E 0C 02            [ 1] 4054 	inc (LLEN,sp) 
      002470 20 07            [ 2] 4055 	jra 3$
      002472 A6 0D            [ 1] 4056 2$: ld a,#CR 
      002474 CD 02 F1         [ 4] 4057 	call putc 
      002477 0F 02            [ 1] 4058 	clr (LLEN,sp)
      002479 72 A2 00 02      [ 2] 4059 3$:	subw y,#2 
      00247D 90 FE            [ 2] 4060 	ldw y,(y)
      00247F 26 CF            [ 1] 4061 	jrne 0$ 
      002481 A6 0D            [ 1] 4062 	ld a,#CR 
      002483 CD 02 F1         [ 4] 4063 	call putc  
      002486 5F               [ 1] 4064 	clrw x 
      002487 7B 03            [ 1] 4065 	ld a,(WCNT,sp)
      002489 97               [ 1] 4066 	ld xl,a 
      00248A CD 12 9D         [ 4] 4067 	call print_int 
      00248D AE 24 96         [ 2] 4068 	ldw x,#words_count_msg
      002490 CD 03 4E         [ 4] 4069 	call puts 
      002493                       4070 	_drop VSIZE 
      002493 5B 03            [ 2]    1     addw sp,#VSIZE 
      002495 81               [ 4] 4071 	ret 
      002496 20 77 6F 72 64 73 20  4072 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4073 
                                   4074 
                                   4075 ;-----------------------------
                                   4076 ; BASIC: TIMER expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



                                   4077 ; initialize count down timer 
                                   4078 ;-----------------------------
      0024AC                       4079 set_timer:
      0024AC CD 15 FB         [ 4] 4080 	call arg_list
      0024AF A1 01            [ 1] 4081 	cp a,#1 
      0024B1 27 03            [ 1] 4082 	jreq 1$
      0024B3 CC 11 57         [ 2] 4083 	jp syntax_error
      0024B6                       4084 1$: 
      0024B6 85               [ 2] 4085 	popw x 
      0024B7 CF 00 11         [ 2] 4086 	ldw timer,x 
      0024BA 81               [ 4] 4087 	ret 
                                   4088 
                                   4089 ;------------------------------
                                   4090 ; BASIC: TIMEOUT 
                                   4091 ; return state of timer 
                                   4092 ;------------------------------
      0024BB                       4093 timeout:
      0024BB CE 00 11         [ 2] 4094 	ldw x,timer 
      0024BE                       4095 logical_complement:
      0024BE 53               [ 2] 4096 	cplw x 
      0024BF A3 FF FF         [ 2] 4097 	cpw x,#-1
      0024C2 27 01            [ 1] 4098 	jreq 2$
      0024C4 5F               [ 1] 4099 	clrw x 
      0024C5 A6 84            [ 1] 4100 2$:	ld a,#TK_INTGR
      0024C7 81               [ 4] 4101 	ret 
                                   4102 
                                   4103 ;--------------------------------
                                   4104 ; BASIC NOT(expr) 
                                   4105 ; return logical complement of expr
                                   4106 ;--------------------------------
      0024C8                       4107 func_not:
      0024C8 CD 15 F6         [ 4] 4108 	call func_args  
      0024CB A1 01            [ 1] 4109 	cp a,#1
      0024CD 27 03            [ 1] 4110 	jreq 1$
      0024CF CC 11 57         [ 2] 4111 	jp syntax_error
      0024D2 85               [ 2] 4112 1$:	popw x 
      0024D3 20 E9            [ 2] 4113 	jra logical_complement
                                   4114 
                                   4115 
                                   4116 
                                   4117 ;-----------------------------------
                                   4118 ; BASIC: IWDGEN expr1 
                                   4119 ; enable independant watchdog timer
                                   4120 ; expr1 is delay in multiple of 62.5µsec
                                   4121 ; expr1 -> {1..16383}
                                   4122 ;-----------------------------------
      0024D5                       4123 enable_iwdg:
      0024D5 CD 15 FB         [ 4] 4124 	call arg_list
      0024D8 A1 01            [ 1] 4125 	cp a,#1 
      0024DA 27 03            [ 1] 4126 	jreq 1$
      0024DC CC 11 57         [ 2] 4127 	jp syntax_error 
      0024DF 85               [ 2] 4128 1$: popw x 
      0024E0 4B 00            [ 1] 4129 	push #0
      0024E2 35 CC 50 E0      [ 1] 4130 	mov IWDG_KR,#IWDG_KEY_ENABLE
      0024E6 9E               [ 1] 4131 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0024E7 A4 3F            [ 1] 4132 	and a,#0x3f
      0024E9 95               [ 1] 4133 	ld xh,a  
      0024EA A3 00 FF         [ 2] 4134 2$:	cpw x,#255
      0024ED 23 06            [ 2] 4135 	jrule 3$
      0024EF 0C 01            [ 1] 4136 	inc (1,sp)
      0024F1 98               [ 1] 4137 	rcf 
      0024F2 56               [ 2] 4138 	rrcw x 
      0024F3 20 F5            [ 2] 4139 	jra 2$
      0024F5 35 55 50 E0      [ 1] 4140 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0024F9 84               [ 1] 4141 	pop a  
      0024FA C7 50 E1         [ 1] 4142 	ld IWDG_PR,a 
      0024FD 9F               [ 1] 4143 	ld a,xl
      0024FE 4A               [ 1] 4144 	dec a 
      0024FF 35 55 50 E0      [ 1] 4145 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002503 C7 50 E2         [ 1] 4146 	ld IWDG_RLR,a 
      002506 35 AA 50 E0      [ 1] 4147 	mov IWDG_KR,#IWDG_KEY_REFRESH
      00250A 81               [ 4] 4148 	ret 
                                   4149 
                                   4150 
                                   4151 ;-----------------------------------
                                   4152 ; BASIC: IWDGREF  
                                   4153 ; refresh independant watchdog count down 
                                   4154 ; timer before it reset MCU. 
                                   4155 ;-----------------------------------
      00250B                       4156 refresh_iwdg:
      00250B 35 AA 50 E0      [ 1] 4157 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00250F 81               [ 4] 4158 	ret 
                                   4159 
                                   4160 
                                   4161 ;-------------------------------------
                                   4162 ; BASIC: LOG(expr)
                                   4163 ; return logarithm base 2 of expr 
                                   4164 ; this is the position of most significant
                                   4165 ; bit set. 
                                   4166 ; input: 
                                   4167 ; output:
                                   4168 ;   X     log2 
                                   4169 ;   A     TK_INTGR 
                                   4170 ;*********************************
      002510                       4171 log2:
      002510 CD 15 F6         [ 4] 4172 	call func_args 
      002513 A1 01            [ 1] 4173 	cp a,#1 
      002515 27 03            [ 1] 4174 	jreq 1$
      002517 CC 11 57         [ 2] 4175 	jp syntax_error 
      00251A 85               [ 2] 4176 1$: popw x 
      00251B                       4177 leading_one:
      00251B 5D               [ 2] 4178 	tnzw x 
      00251C 27 0A            [ 1] 4179 	jreq 4$
      00251E A6 0F            [ 1] 4180 	ld a,#15 
      002520 59               [ 2] 4181 2$: rlcw x 
      002521 25 03            [ 1] 4182     jrc 3$
      002523 4A               [ 1] 4183 	dec a 
      002524 20 FA            [ 2] 4184 	jra 2$
      002526 5F               [ 1] 4185 3$: clrw x 
      002527 97               [ 1] 4186     ld xl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002528 A6 84            [ 1] 4187 4$:	ld a,#TK_INTGR
      00252A 81               [ 4] 4188 	ret 
                                   4189 
                                   4190 ;-----------------------------------
                                   4191 ; BASIC: BIT(expr) 
                                   4192 ; expr ->{0..15}
                                   4193 ; return 2^expr 
                                   4194 ; output:
                                   4195 ;    x    2^expr 
                                   4196 ;-----------------------------------
      00252B                       4197 bitmask:
      00252B CD 15 F6         [ 4] 4198     call func_args 
      00252E A1 01            [ 1] 4199 	cp a,#1
      002530 27 03            [ 1] 4200 	jreq 1$
      002532 CC 11 57         [ 2] 4201 	jp syntax_error 
      002535 85               [ 2] 4202 1$: popw x 
      002536 9F               [ 1] 4203 	ld a,xl 
      002537 A4 0F            [ 1] 4204 	and a,#15
      002539 5F               [ 1] 4205 	clrw x 
      00253A 5C               [ 1] 4206 	incw x 
      00253B 4D               [ 1] 4207 2$: tnz a 
      00253C 27 04            [ 1] 4208 	jreq 3$
      00253E 58               [ 2] 4209 	slaw x 
      00253F 4A               [ 1] 4210 	dec a 
      002540 20 F9            [ 2] 4211 	jra 2$ 
      002542 A6 84            [ 1] 4212 3$: ld a,#TK_INTGR
      002544 81               [ 4] 4213 	ret 
                                   4214 
                                   4215 ;------------------------------
                                   4216 ; BASIC: INVERT(expr)
                                   4217 ; 1's complement 
                                   4218 ;--------------------------------
      002545                       4219 invert:
      002545 CD 15 F6         [ 4] 4220 	call func_args
      002548 A1 01            [ 1] 4221 	cp a,#1 
      00254A 27 03            [ 1] 4222 	jreq 1$
      00254C CC 11 57         [ 2] 4223 	jp syntax_error
      00254F 85               [ 2] 4224 1$: popw x  
      002550 53               [ 2] 4225 	cplw x 
      002551 A6 84            [ 1] 4226 	ld a,#TK_INTGR 
      002553 81               [ 4] 4227 	ret 
                                   4228 
                                   4229 ;------------------------------
                                   4230 ; BASIC: DO 
                                   4231 ; initiate a DO ... UNTIL loop 
                                   4232 ;------------------------------
                           000003  4233 	DOLP_ADR=3 
                           000005  4234 	DOLP_INW=5
                           000004  4235 	VSIZE=4 
      002554                       4236 do_loop:
      002554 85               [ 2] 4237 	popw x 
      002555                       4238 	_vars VSIZE 
      002555 52 04            [ 2]    1     sub sp,#VSIZE 
      002557 89               [ 2] 4239 	pushw x 
      002558 90 CE 00 04      [ 2] 4240 	ldw y,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00255C 17 03            [ 2] 4241 	ldw (DOLP_ADR,sp),y
      00255E 90 CE 00 00      [ 2] 4242 	ldw y,in.w 
      002562 17 05            [ 2] 4243 	ldw (DOLP_INW,sp),y
      002564 72 5C 00 1E      [ 1] 4244 	inc loop_depth 
      002568 81               [ 4] 4245 	ret 
                                   4246 
                                   4247 ;--------------------------------
                                   4248 ; BASIC: UNTIL expr 
                                   4249 ; loop if exprssion is false 
                                   4250 ; else terminate loop
                                   4251 ;--------------------------------
      002569                       4252 until: 
      002569 72 5D 00 1E      [ 1] 4253 	tnz loop_depth 
      00256D 26 03            [ 1] 4254 	jrne 1$ 
      00256F CC 11 57         [ 2] 4255 	jp syntax_error 
      002572                       4256 1$: 
      002572 CD 17 43         [ 4] 4257 	call relation 
      002575 A1 84            [ 1] 4258 	cp a,#TK_INTGR
      002577 27 03            [ 1] 4259 	jreq 2$
      002579 CC 11 57         [ 2] 4260 	jp syntax_error
      00257C                       4261 2$: 
      00257C 5D               [ 2] 4262 	tnzw x 
      00257D 26 10            [ 1] 4263 	jrne 9$
      00257F 1E 03            [ 2] 4264 	ldw x,(DOLP_ADR,sp)
      002581 CF 00 04         [ 2] 4265 	ldw basicptr,x 
      002584 E6 02            [ 1] 4266 	ld a,(2,x)
      002586 C7 00 03         [ 1] 4267 	ld count,a 
      002589 1E 05            [ 2] 4268 	ldw x,(DOLP_INW,sp)
      00258B CF 00 00         [ 2] 4269 	ldw in.w,x 
      00258E 81               [ 4] 4270 	ret 
      00258F                       4271 9$:	; remove loop data from stack  
      00258F 85               [ 2] 4272 	popw x
      002590                       4273 	_drop VSIZE
      002590 5B 04            [ 2]    1     addw sp,#VSIZE 
      002592 72 5A 00 1E      [ 1] 4274 	dec loop_depth 
      002596 FC               [ 2] 4275 	jp (x)
                                   4276 
                                   4277 ;--------------------------
                                   4278 ; BASIC: PRTA...PRTI  
                                   4279 ;  return constant value 
                                   4280 ;  PORT  offset in GPIO
                                   4281 ;  array
                                   4282 ;---------------------------
      002597                       4283 const_porta:
      002597 AE 00 00         [ 2] 4284 	ldw x,#0
      00259A A6 84            [ 1] 4285 	ld a,#TK_INTGR 
      00259C 81               [ 4] 4286 	ret 
      00259D                       4287 const_portb:
      00259D AE 00 01         [ 2] 4288 	ldw x,#1
      0025A0 A6 84            [ 1] 4289 	ld a,#TK_INTGR 
      0025A2 81               [ 4] 4290 	ret 
      0025A3                       4291 const_portc:
      0025A3 AE 00 02         [ 2] 4292 	ldw x,#2
      0025A6 A6 84            [ 1] 4293 	ld a,#TK_INTGR 
      0025A8 81               [ 4] 4294 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0025A9                       4295 const_portd:
      0025A9 AE 00 03         [ 2] 4296 	ldw x,#3
      0025AC A6 84            [ 1] 4297 	ld a,#TK_INTGR 
      0025AE 81               [ 4] 4298 	ret 
      0025AF                       4299 const_porte:
      0025AF AE 00 04         [ 2] 4300 	ldw x,#4
      0025B2 A6 84            [ 1] 4301 	ld a,#TK_INTGR 
      0025B4 81               [ 4] 4302 	ret 
      0025B5                       4303 const_portf:
      0025B5 AE 00 05         [ 2] 4304 	ldw x,#5
      0025B8 A6 84            [ 1] 4305 	ld a,#TK_INTGR 
      0025BA 81               [ 4] 4306 	ret 
      0025BB                       4307 const_portg:
      0025BB AE 00 06         [ 2] 4308 	ldw x,#6
      0025BE A6 84            [ 1] 4309 	ld a,#TK_INTGR 
      0025C0 81               [ 4] 4310 	ret 
      0025C1                       4311 const_porth:
      0025C1 AE 00 07         [ 2] 4312 	ldw x,#7
      0025C4 A6 84            [ 1] 4313 	ld a,#TK_INTGR 
      0025C6 81               [ 4] 4314 	ret 
      0025C7                       4315 const_porti:
      0025C7 AE 00 08         [ 2] 4316 	ldw x,#8
      0025CA A6 84            [ 1] 4317 	ld a,#TK_INTGR 
      0025CC 81               [ 4] 4318 	ret 
                                   4319 
                                   4320 ;-------------------------------
                                   4321 ; following return constant 
                                   4322 ; related to GPIO register offset 
                                   4323 ;---------------------------------
      0025CD                       4324 const_odr:
      0025CD A6 84            [ 1] 4325 	ld a,#TK_INTGR 
      0025CF AE 00 00         [ 2] 4326 	ldw x,#GPIO_ODR
      0025D2 81               [ 4] 4327 	ret 
      0025D3                       4328 const_idr:
      0025D3 A6 84            [ 1] 4329 	ld a,#TK_INTGR 
      0025D5 AE 00 01         [ 2] 4330 	ldw x,#GPIO_IDR
      0025D8 81               [ 4] 4331 	ret 
      0025D9                       4332 const_ddr:
      0025D9 A6 84            [ 1] 4333 	ld a,#TK_INTGR 
      0025DB AE 00 02         [ 2] 4334 	ldw x,#GPIO_DDR
      0025DE 81               [ 4] 4335 	ret 
      0025DF                       4336 const_cr1:
      0025DF A6 84            [ 1] 4337 	ld a,#TK_INTGR 
      0025E1 AE 00 03         [ 2] 4338 	ldw x,#GPIO_CR1
      0025E4 81               [ 4] 4339 	ret 
      0025E5                       4340 const_cr2:
      0025E5 A6 84            [ 1] 4341 	ld a,#TK_INTGR 
      0025E7 AE 00 04         [ 2] 4342 	ldw x,#GPIO_CR2
      0025EA 81               [ 4] 4343 	ret 
                                   4344 ;-------------------------
                                   4345 ; BASIC: POUT 
                                   4346 ;  constant for port mode
                                   4347 ;  used by PMODE 
                                   4348 ;  to set pin as output
                                   4349 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0025EB                       4350 const_output:
      0025EB A6 84            [ 1] 4351 	ld a,#TK_INTGR 
      0025ED AE 00 01         [ 2] 4352 	ldw x,#OUTP
      0025F0 81               [ 4] 4353 	ret 
                                   4354 
                                   4355 ;-------------------------
                                   4356 ; BASIC: PINP 
                                   4357 ;  constant for port mode
                                   4358 ;  used by PMODE 
                                   4359 ;  to set pin as input
                                   4360 ;------------------------
      0025F1                       4361 const_input:
      0025F1 A6 84            [ 1] 4362 	ld a,#TK_INTGR 
      0025F3 AE 00 00         [ 2] 4363 	ldw x,#INP 
      0025F6 81               [ 4] 4364 	ret 
                                   4365 	
                                   4366 ;-----------------------
                                   4367 ; memory area constants
                                   4368 ;-----------------------
      0025F7                       4369 const_eeprom_base:
      0025F7 A6 84            [ 1] 4370 	ld a,#TK_INTGR 
      0025F9 AE 40 00         [ 2] 4371 	ldw x,#EEPROM_BASE 
      0025FC 81               [ 4] 4372 	ret 
                                   4373 
                                   4374 ;---------------------------
                                   4375 ; BASIC: DATA 
                                   4376 ; when the interpreter find 
                                   4377 ; a DATA line it skip it.
                                   4378 ;---------------------------
      0025FD                       4379 data:
      0025FD 55 00 03 00 01   [ 1] 4380 	mov in,count 
      002602 81               [ 4] 4381 	ret 
                                   4382 
                                   4383 ;---------------------------
                                   4384 ; BASIC: DATLN  *expr*
                                   4385 ; set DATA pointer at line# 
                                   4386 ; specified by *expr* 
                                   4387 ;---------------------------
      002603                       4388 data_line:
      002603 CD 16 FA         [ 4] 4389 	call expression
      002606 A1 84            [ 1] 4390 	cp a,#TK_INTGR
      002608 27 03            [ 1] 4391 	jreq 1$
      00260A CC 11 57         [ 2] 4392 	jp syntax_error  
      00260D 4F               [ 1] 4393 1$: clr a 
      00260E CD 06 36         [ 4] 4394 	call search_lineno
      002611 5D               [ 2] 4395 	tnzw x 
      002612 26 05            [ 1] 4396 	jrne 3$
      002614 A6 05            [ 1] 4397 2$:	ld a,#ERR_NO_LINE 
      002616 CC 11 59         [ 2] 4398 	jp tb_error
      002619                       4399 3$: ; check if valid data line 
      002619 90 93            [ 1] 4400     ldw y,x 
      00261B EE 04            [ 2] 4401 	ldw x,(4,x)
      00261D A3 25 FD         [ 2] 4402 	cpw x,#data 
      002620 26 F2            [ 1] 4403 	jrne 2$ 
      002622 90 CF 00 06      [ 2] 4404 	ldw data_ptr,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002626 90 E6 02         [ 1] 4405 	ld a,(2,y)
      002629 C7 00 09         [ 1] 4406 	ld data_len,a 
      00262C 35 06 00 08      [ 1] 4407 	mov data_ofs,#FIRST_DATA_ITEM 
      002630 81               [ 4] 4408 	ret
                                   4409 
                                   4410 ;---------------------------------
                                   4411 ; BASIC: RESTORE 
                                   4412 ; set data_ptr to first data line
                                   4413 ; if not DATA found pointer set to
                                   4414 ; zero 
                                   4415 ;---------------------------------
      002631                       4416 restore:
      002631 72 5F 00 06      [ 1] 4417 	clr data_ptr 
      002635 72 5F 00 07      [ 1] 4418 	clr data_ptr+1
      002639 72 5F 00 08      [ 1] 4419 	clr data_ofs 
      00263D 72 5F 00 09      [ 1] 4420 	clr data_len
      002641 CE 00 1A         [ 2] 4421 	ldw x,txtbgn
      002644                       4422 data_search_loop: 	
      002644 C3 00 1C         [ 2] 4423 	cpw x,txtend
      002647 24 1B            [ 1] 4424 	jruge 9$
      002649 90 93            [ 1] 4425 	ldw y,x 
      00264B EE 04            [ 2] 4426 	ldw x,(4,x)
      00264D 1C 2B 3B         [ 2] 4427 	addw x,#code_addr
      002650 FE               [ 2] 4428 	ldw x,(x)
      002651 A3 25 FD         [ 2] 4429 	cpw x,#data 
      002654 26 1A            [ 1] 4430 	jrne try_next_line 
      002656 90 CF 00 06      [ 2] 4431 	ldw data_ptr,y 
      00265A 90 E6 02         [ 1] 4432 	ld a,(2,y)
      00265D C7 00 09         [ 1] 4433 	ld data_len,a 
      002660 35 06 00 08      [ 1] 4434 	mov data_ofs,#FIRST_DATA_ITEM
      002664 72 5D 00 09      [ 1] 4435 9$:	tnz data_len 
      002668 26 05            [ 1] 4436     jrne 10$
      00266A A6 0C            [ 1] 4437 	ld a,#ERR_NO_DATA 
      00266C CC 11 59         [ 2] 4438 	jp tb_error 
      00266F 81               [ 4] 4439 10$:ret
      002670                       4440 try_next_line:
      002670 93               [ 1] 4441 	ldw x,y 
      002671 E6 02            [ 1] 4442 	ld a,(2,x)
      002673 C7 00 0E         [ 1] 4443 	ld acc8,a 
      002676 72 5F 00 0D      [ 1] 4444 	clr acc16 
      00267A 72 BB 00 0D      [ 2] 4445 	addw x,acc16 
      00267E 20 C4            [ 2] 4446 	jra data_search_loop
                                   4447 
                                   4448 
                                   4449 ;---------------------------------
                                   4450 ; BASIC: READ 
                                   4451 ; return next data item | 0 
                                   4452 ;---------------------------------
                           000001  4453 	CTX_BPTR=1 
                           000003  4454 	CTX_IN=3 
                           000004  4455 	CTX_COUNT=4 
                           000005  4456 	XSAVE=5
                           000006  4457 	VSIZE=6
      002680                       4458 read:
      002680                       4459 	_vars  VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      002680 52 06            [ 2]    1     sub sp,#VSIZE 
      002682                       4460 read01:	
      002682 C6 00 08         [ 1] 4461 	ld a,data_ofs
      002685 C1 00 09         [ 1] 4462 	cp a,data_len 
      002688 27 37            [ 1] 4463 	jreq 2$ ; end of line  
      00268A CD 1A 44         [ 4] 4464 	call save_context
      00268D CE 00 06         [ 2] 4465 	ldw x,data_ptr 
      002690 CF 00 04         [ 2] 4466 	ldw basicptr,x 
      002693 55 00 08 00 01   [ 1] 4467 	mov in,data_ofs 
      002698 55 00 09 00 03   [ 1] 4468 	mov count,data_len  
      00269D CD 16 FA         [ 4] 4469 	call expression 
      0026A0 A1 84            [ 1] 4470 	cp a,#TK_INTGR 
      0026A2 27 03            [ 1] 4471 	jreq 1$ 
      0026A4 CC 11 57         [ 2] 4472 	jp syntax_error 
      0026A7                       4473 1$:
      0026A7 1F 05            [ 2] 4474 	ldw (XSAVE,SP),x
      0026A9 CD 12 4F         [ 4] 4475 	call next_token ; skip comma
      0026AC CE 00 04         [ 2] 4476 	ldw x,basicptr 
      0026AF CF 00 06         [ 2] 4477 	ldw data_ptr,x 
      0026B2 55 00 01 00 08   [ 1] 4478 	mov data_ofs,in 
      0026B7 CD 1A 54         [ 4] 4479 	call rest_context
      0026BA 1E 05            [ 2] 4480 	ldw x,(XSAVE,sp)
      0026BC A6 84            [ 1] 4481 	ld a,#TK_INTGR
      0026BE                       4482 	_drop VSIZE 
      0026BE 5B 06            [ 2]    1     addw sp,#VSIZE 
      0026C0 81               [ 4] 4483 	ret 
      0026C1                       4484 2$: ; end of line reached 
      0026C1 90 CE 00 06      [ 2] 4485 	ldw y, data_ptr 
      0026C5 72 5F 00 06      [ 1] 4486 	clr data_ptr
      0026C9 72 5F 00 07      [ 1] 4487 	clr data_ptr+1   
      0026CD 72 5F 00 08      [ 1] 4488 	clr data_ofs 
      0026D1 72 5F 00 09      [ 1] 4489 	clr data_len 
      0026D5 CD 26 70         [ 4] 4490 	call try_next_line 
      0026D8 20 A8            [ 2] 4491 	jra read01
                                   4492 
                                   4493 
                                   4494 ;---------------------------------
                                   4495 ; BASIC: SPIEN clkdiv, 0|1  
                                   4496 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4497 ; if clkdiv==-1 disable SPI
                                   4498 ; 0|1 -> disable|enable  
                                   4499 ;--------------------------------- 
                           000005  4500 SPI_CS_BIT=5
      0026DA                       4501 spi_enable:
      0026DA CD 15 FB         [ 4] 4502 	call arg_list 
      0026DD A1 02            [ 1] 4503 	cp a,#2
      0026DF 27 03            [ 1] 4504 	jreq 1$
      0026E1 CC 11 57         [ 2] 4505 	jp syntax_error 
      0026E4                       4506 1$: 
      0026E4 72 12 50 C7      [ 1] 4507 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0026E8 85               [ 2] 4508 	popw x  
      0026E9 5D               [ 2] 4509 	tnzw x 
      0026EA 27 21            [ 1] 4510 	jreq spi_disable 
      0026EC 85               [ 2] 4511 	popw x 
      0026ED A6 08            [ 1] 4512 	ld a,#(1<<SPI_CR1_BR)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0026EF 42               [ 4] 4513 	mul x,a 
      0026F0 9F               [ 1] 4514 	ld a,xl 
      0026F1 C7 52 00         [ 1] 4515 	ld SPI_CR1,a 
                                   4516 ; configure ~CS on PE5 (D10 on CN8) as output. 
      0026F4 72 1A 50 14      [ 1] 4517 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      0026F8 72 1A 50 16      [ 1] 4518 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4519 ; configure SPI as master mode 0.	
      0026FC 72 14 52 00      [ 1] 4520 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4521 ; ~CS line controlled by sofware 	
      002700 72 12 52 01      [ 1] 4522 	bset SPI_CR2,#SPI_CR2_SSM 
      002704 72 10 52 01      [ 1] 4523     bset SPI_CR2,#SPI_CR2_SSI 
                                   4524 ; enable SPI
      002708 72 1C 52 00      [ 1] 4525 	bset SPI_CR1,#SPI_CR1_SPE 	
      00270C 81               [ 4] 4526 	ret 
      00270D                       4527 spi_disable:
      00270D                       4528 	_drop #2; throw first argument.
      00270D 5B 02            [ 2]    1     addw sp,##2 
                                   4529 ; wait spi idle 
      00270F A6 82            [ 1] 4530 1$:	ld a,#0x82 
      002711 C4 52 03         [ 1] 4531 	and a,SPI_SR
      002714 A1 02            [ 1] 4532 	cp a,#2 
      002716 26 F7            [ 1] 4533 	jrne 1$
      002718 72 1D 52 00      [ 1] 4534 	bres SPI_CR1,#SPI_CR1_SPE
      00271C 72 13 50 C7      [ 1] 4535 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002720 72 1B 50 16      [ 1] 4536 	bres PE_DDR,#SPI_CS_BIT 
      002724 81               [ 4] 4537 	ret 
                                   4538 
      002725                       4539 spi_clear_error:
      002725 A6 78            [ 1] 4540 	ld a,#0x78 
      002727 C5 52 03         [ 1] 4541 	bcp a,SPI_SR 
      00272A 27 04            [ 1] 4542 	jreq 1$
      00272C 72 5F 52 03      [ 1] 4543 	clr SPI_SR 
      002730 81               [ 4] 4544 1$: ret 
                                   4545 
      002731                       4546 spi_send_byte:
      002731 88               [ 1] 4547 	push a 
      002732 CD 27 25         [ 4] 4548 	call spi_clear_error
      002735 84               [ 1] 4549 	pop a 
      002736 72 03 52 03 FB   [ 2] 4550 	btjf SPI_SR,#SPI_SR_TXE,.
      00273B C7 52 04         [ 1] 4551 	ld SPI_DR,a
      00273E 72 01 52 03 FB   [ 2] 4552 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002743 C6 52 04         [ 1] 4553 	ld a,SPI_DR 
      002746 81               [ 4] 4554 	ret 
                                   4555 
      002747                       4556 spi_rcv_byte:
      002747 A6 FF            [ 1] 4557 	ld a,#255
      002749 72 01 52 03 E3   [ 2] 4558 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      00274E C6 52 04         [ 1] 4559 	ld a,SPI_DR 
      002751 81               [ 4] 4560 	ret
                                   4561 
                                   4562 ;------------------------------
                                   4563 ; BASIC: SPIWR byte [,byte]
                                   4564 ; write 1 or more byte
                                   4565 ;------------------------------
      002752                       4566 spi_write:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      002752 CD 16 FA         [ 4] 4567 	call expression
      002755 A1 84            [ 1] 4568 	cp a,#TK_INTGR 
      002757 27 03            [ 1] 4569 	jreq 1$
      002759 CC 11 57         [ 2] 4570 	jp syntax_error 
      00275C                       4571 1$:	
      00275C 9F               [ 1] 4572 	ld a,xl 
      00275D CD 27 31         [ 4] 4573 	call spi_send_byte 
      002760 CD 12 4F         [ 4] 4574 	call next_token 
      002763 A1 09            [ 1] 4575 	cp a,#TK_COMMA 
      002765 26 02            [ 1] 4576 	jrne 2$ 
      002767 20 E9            [ 2] 4577 	jra spi_write 
      002769 4D               [ 1] 4578 2$:	tnz a 
      00276A 27 05            [ 1] 4579 	jreq 3$
      00276C                       4580 	_unget_token  
      00276C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002771 81               [ 4] 4581 3$:	ret 
                                   4582 
                                   4583 
                                   4584 ;-------------------------------
                                   4585 ; BASIC: SPIRD 	
                                   4586 ; read one byte from SPI 
                                   4587 ;-------------------------------
      002772                       4588 spi_read:
      002772 CD 27 47         [ 4] 4589 	call spi_rcv_byte 
      002775 5F               [ 1] 4590 	clrw x 
      002776 97               [ 1] 4591 	ld xl,a 
      002777 A6 84            [ 1] 4592 	ld a,#TK_INTGR 
      002779 81               [ 4] 4593 	ret 
                                   4594 
                                   4595 ;------------------------------
                                   4596 ; BASIC: SPISEL 0|1 
                                   4597 ; set state of ~CS line
                                   4598 ; 0|1 deselect|select  
                                   4599 ;------------------------------
      00277A                       4600 spi_select:
      00277A CD 12 4F         [ 4] 4601 	call next_token 
      00277D A1 84            [ 1] 4602 	cp a,#TK_INTGR 
      00277F 27 03            [ 1] 4603 	jreq 1$
      002781 CC 11 57         [ 2] 4604 	jp syntax_error 
      002784 5D               [ 2] 4605 1$: tnzw x  
      002785 27 05            [ 1] 4606 	jreq cs_high 
      002787 72 1B 50 14      [ 1] 4607 	bres PE_ODR,#SPI_CS_BIT
      00278B 81               [ 4] 4608 	ret 
      00278C                       4609 cs_high: 
      00278C 72 1A 50 14      [ 1] 4610 	bset PE_ODR,#SPI_CS_BIT
      002790 81               [ 4] 4611 	ret 
                                   4612 
                                   4613 ;-------------------------------
                                   4614 ; BASIC: PAD 
                                   4615 ; Return pad buffer address.
                                   4616 ;------------------------------
      002791                       4617 pad_ref:
      002791 AE 16 E0         [ 2] 4618 	ldw x,#pad 
      002794 B6 84            [ 1] 4619 	ld a,TK_INTGR
      002796 81               [ 4] 4620 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   4621 
                                   4622 
                                   4623 ;------------------------------
                                   4624 ;      dictionary 
                                   4625 ; format:
                                   4626 ;   link:   2 bytes 
                                   4627 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4628 ;   cmd_name: 16 byte max 
                                   4629 ;   cmd_index: 2 bytes 
                                   4630 ;------------------------------
                                   4631 	.macro _dict_entry len,name,cmd_idx 
                                   4632 	.word LINK 
                                   4633 	LINK=.
                                   4634 name:
                                   4635 	.byte len 	
                                   4636 	.ascii "name"
                                   4637 	.word cmd_idx 
                                   4638 	.endm 
                                   4639 
                           000000  4640 	LINK=0
                                   4641 ; respect alphabetic order for BASIC names from Z-A
                                   4642 ; this sort order is for a cleaner WORDS cmd output. 	
      002797                       4643 kword_end:
      002797                       4644 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002797 00 00                    1 	.word LINK 
                           002799     2 	LINK=.
      002799                          3 XOR:
      002799 43                       4 	.byte 3+F_IFUNC 	
      00279A 58 4F 52                 5 	.ascii "XOR"
      00279D 00 C2                    6 	.word XOR_IDX 
      00279F                       4645 	_dict_entry,5,WRITE,WRITE_IDX;write  
      00279F 27 99                    1 	.word LINK 
                           0027A1     2 	LINK=.
      0027A1                          3 WRITE:
      0027A1 05                       4 	.byte 5 	
      0027A2 57 52 49 54 45           5 	.ascii "WRITE"
      0027A7 00 C0                    6 	.word WRITE_IDX 
      0027A9                       4646 	_dict_entry,5,WORDS,WORDS_IDX;words 
      0027A9 27 A1                    1 	.word LINK 
                           0027AB     2 	LINK=.
      0027AB                          3 WORDS:
      0027AB 05                       4 	.byte 5 	
      0027AC 57 4F 52 44 53           5 	.ascii "WORDS"
      0027B1 00 BE                    6 	.word WORDS_IDX 
      0027B3                       4647 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      0027B3 27 AB                    1 	.word LINK 
                           0027B5     2 	LINK=.
      0027B5                          3 WAIT:
      0027B5 04                       4 	.byte 4 	
      0027B6 57 41 49 54              5 	.ascii "WAIT"
      0027BA 00 BC                    6 	.word WAIT_IDX 
      0027BC                       4648 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      0027BC 27 B5                    1 	.word LINK 
                           0027BE     2 	LINK=.
      0027BE                          3 USR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027BE 43                       4 	.byte 3+F_IFUNC 	
      0027BF 55 53 52                 5 	.ascii "USR"
      0027C2 00 BA                    6 	.word USR_IDX 
      0027C4                       4649 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      0027C4 27 BE                    1 	.word LINK 
                           0027C6     2 	LINK=.
      0027C6                          3 UNTIL:
      0027C6 05                       4 	.byte 5 	
      0027C7 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0027CC 00 B8                    6 	.word UNTIL_IDX 
      0027CE                       4650 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      0027CE 27 C6                    1 	.word LINK 
                           0027D0     2 	LINK=.
      0027D0                          3 UFLASH:
      0027D0 46                       4 	.byte 6+F_IFUNC 	
      0027D1 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0027D7 00 B6                    6 	.word UFLASH_IDX 
      0027D9                       4651 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      0027D9 27 D0                    1 	.word LINK 
                           0027DB     2 	LINK=.
      0027DB                          3 UBOUND:
      0027DB 46                       4 	.byte 6+F_IFUNC 	
      0027DC 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0027E2 00 B4                    6 	.word UBOUND_IDX 
      0027E4                       4652 	_dict_entry,4,TONE,TONE_IDX;tone  
      0027E4 27 DB                    1 	.word LINK 
                           0027E6     2 	LINK=.
      0027E6                          3 TONE:
      0027E6 04                       4 	.byte 4 	
      0027E7 54 4F 4E 45              5 	.ascii "TONE"
      0027EB 00 B2                    6 	.word TONE_IDX 
      0027ED                       4653 	_dict_entry,2,TO,TO_IDX;to
      0027ED 27 E6                    1 	.word LINK 
                           0027EF     2 	LINK=.
      0027EF                          3 TO:
      0027EF 02                       4 	.byte 2 	
      0027F0 54 4F                    5 	.ascii "TO"
      0027F2 00 B0                    6 	.word TO_IDX 
      0027F4                       4654 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      0027F4 27 EF                    1 	.word LINK 
                           0027F6     2 	LINK=.
      0027F6                          3 TIMER:
      0027F6 05                       4 	.byte 5 	
      0027F7 54 49 4D 45 52           5 	.ascii "TIMER"
      0027FC 00 AC                    6 	.word TIMER_IDX 
      0027FE                       4655 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      0027FE 27 F6                    1 	.word LINK 
                           002800     2 	LINK=.
      002800                          3 TIMEOUT:
      002800 47                       4 	.byte 7+F_IFUNC 	
      002801 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002808 00 AE                    6 	.word TMROUT_IDX 
      00280A                       4656 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      00280A 28 00                    1 	.word LINK 
                           00280C     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00280C                          3 TICKS:
      00280C 45                       4 	.byte 5+F_IFUNC 	
      00280D 54 49 43 4B 53           5 	.ascii "TICKS"
      002812 00 AA                    6 	.word TICKS_IDX 
      002814                       4657 	_dict_entry,4,STOP,STOP_IDX;stop 
      002814 28 0C                    1 	.word LINK 
                           002816     2 	LINK=.
      002816                          3 STOP:
      002816 04                       4 	.byte 4 	
      002817 53 54 4F 50              5 	.ascii "STOP"
      00281B 00 A8                    6 	.word STOP_IDX 
      00281D                       4658 	_dict_entry,4,STEP,STEP_IDX;step 
      00281D 28 16                    1 	.word LINK 
                           00281F     2 	LINK=.
      00281F                          3 STEP:
      00281F 04                       4 	.byte 4 	
      002820 53 54 45 50              5 	.ascii "STEP"
      002824 00 A6                    6 	.word STEP_IDX 
      002826                       4659 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002826 28 1F                    1 	.word LINK 
                           002828     2 	LINK=.
      002828                          3 SPIWR:
      002828 05                       4 	.byte 5 	
      002829 53 50 49 57 52           5 	.ascii "SPIWR"
      00282E 00 A4                    6 	.word SPIWR_IDX 
      002830                       4660 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      002830 28 28                    1 	.word LINK 
                           002832     2 	LINK=.
      002832                          3 SPISEL:
      002832 06                       4 	.byte 6 	
      002833 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002839 00 A2                    6 	.word SPISEL_IDX 
      00283B                       4661 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      00283B 28 32                    1 	.word LINK 
                           00283D     2 	LINK=.
      00283D                          3 SPIRD:
      00283D 45                       4 	.byte 5+F_IFUNC 	
      00283E 53 50 49 52 44           5 	.ascii "SPIRD"
      002843 00 9E                    6 	.word SPIRD_IDX 
      002845                       4662 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      002845 28 3D                    1 	.word LINK 
                           002847     2 	LINK=.
      002847                          3 SPIEN:
      002847 05                       4 	.byte 5 	
      002848 53 50 49 45 4E           5 	.ascii "SPIEN"
      00284D 00 A0                    6 	.word SPIEN_IDX 
      00284F                       4663 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      00284F 28 47                    1 	.word LINK 
                           002851     2 	LINK=.
      002851                          3 SLEEP:
      002851 05                       4 	.byte 5 	
      002852 53 4C 45 45 50           5 	.ascii "SLEEP"
      002857 00 9C                    6 	.word SLEEP_IDX 
      002859                       4664     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      002859 28 51                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                           00285B     2 	LINK=.
      00285B                          3 SIZE:
      00285B 04                       4 	.byte 4 	
      00285C 53 49 5A 45              5 	.ascii "SIZE"
      002860 00 C4                    6 	.word SIZE_IDX 
      002862                       4665 	_dict_entry,4,SHOW,SHOW_IDX;show 
      002862 28 5B                    1 	.word LINK 
                           002864     2 	LINK=.
      002864                          3 SHOW:
      002864 04                       4 	.byte 4 	
      002865 53 48 4F 57              5 	.ascii "SHOW"
      002869 00 98                    6 	.word SHOW_IDX 
      00286B                       4666 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      00286B 28 64                    1 	.word LINK 
                           00286D     2 	LINK=.
      00286D                          3 SAVE:
      00286D 04                       4 	.byte 4 	
      00286E 53 41 56 45              5 	.ascii "SAVE"
      002872 00 36                    6 	.word SAVE_IDX 
      002874                       4667 	_dict_entry 3,RUN,RUN_IDX;run
      002874 28 6D                    1 	.word LINK 
                           002876     2 	LINK=.
      002876                          3 RUN:
      002876 03                       4 	.byte 3 	
      002877 52 55 4E                 5 	.ascii "RUN"
      00287A 00 96                    6 	.word RUN_IDX 
      00287C                       4668 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      00287C 28 76                    1 	.word LINK 
                           00287E     2 	LINK=.
      00287E                          3 RSHIFT:
      00287E 46                       4 	.byte 6+F_IFUNC 	
      00287F 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      002885 00 94                    6 	.word RSHIFT_IDX 
      002887                       4669 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      002887 28 7E                    1 	.word LINK 
                           002889     2 	LINK=.
      002889                          3 RND:
      002889 43                       4 	.byte 3+F_IFUNC 	
      00288A 52 4E 44                 5 	.ascii "RND"
      00288D 00 92                    6 	.word RND_IDX 
      00288F                       4670 	_dict_entry,6,RETURN,RET_IDX;return 
      00288F 28 89                    1 	.word LINK 
                           002891     2 	LINK=.
      002891                          3 RETURN:
      002891 06                       4 	.byte 6 	
      002892 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002898 00 90                    6 	.word RET_IDX 
      00289A                       4671 	_dict_entry,7,RESTORE,REST_IDX;restore 
      00289A 28 91                    1 	.word LINK 
                           00289C     2 	LINK=.
      00289C                          3 RESTORE:
      00289C 07                       4 	.byte 7 	
      00289D 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0028A4 00 8E                    6 	.word REST_IDX 
      0028A6                       4672 	_dict_entry 6,REMARK,REM_IDX;remark 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0028A6 28 9C                    1 	.word LINK 
                           0028A8     2 	LINK=.
      0028A8                          3 REMARK:
      0028A8 06                       4 	.byte 6 	
      0028A9 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0028AF 00 8C                    6 	.word REM_IDX 
      0028B1                       4673 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      0028B1 28 A8                    1 	.word LINK 
                           0028B3     2 	LINK=.
      0028B3                          3 REBOOT:
      0028B3 06                       4 	.byte 6 	
      0028B4 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0028BA 00 8A                    6 	.word RBT_IDX 
      0028BC                       4674 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      0028BC 28 B3                    1 	.word LINK 
                           0028BE     2 	LINK=.
      0028BE                          3 READ:
      0028BE 44                       4 	.byte 4+F_IFUNC 	
      0028BF 52 45 41 44              5 	.ascii "READ"
      0028C3 00 88                    6 	.word READ_IDX 
      0028C5                       4675 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      0028C5 28 BE                    1 	.word LINK 
                           0028C7     2 	LINK=.
      0028C7                          3 QKEY:
      0028C7 44                       4 	.byte 4+F_IFUNC 	
      0028C8 51 4B 45 59              5 	.ascii "QKEY"
      0028CC 00 86                    6 	.word QKEY_IDX 
      0028CE                       4676 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      0028CE 28 C7                    1 	.word LINK 
                           0028D0     2 	LINK=.
      0028D0                          3 PRTI:
      0028D0 44                       4 	.byte 4+F_IFUNC 	
      0028D1 50 52 54 49              5 	.ascii "PRTI"
      0028D5 00 84                    6 	.word PRTI_IDX 
      0028D7                       4677 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      0028D7 28 D0                    1 	.word LINK 
                           0028D9     2 	LINK=.
      0028D9                          3 PRTH:
      0028D9 44                       4 	.byte 4+F_IFUNC 	
      0028DA 50 52 54 48              5 	.ascii "PRTH"
      0028DE 00 82                    6 	.word PRTH_IDX 
      0028E0                       4678 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      0028E0 28 D9                    1 	.word LINK 
                           0028E2     2 	LINK=.
      0028E2                          3 PRTG:
      0028E2 44                       4 	.byte 4+F_IFUNC 	
      0028E3 50 52 54 47              5 	.ascii "PRTG"
      0028E7 00 80                    6 	.word PRTG_IDX 
      0028E9                       4679 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      0028E9 28 E2                    1 	.word LINK 
                           0028EB     2 	LINK=.
      0028EB                          3 PRTF:
      0028EB 44                       4 	.byte 4+F_IFUNC 	
      0028EC 50 52 54 46              5 	.ascii "PRTF"
      0028F0 00 7E                    6 	.word PRTF_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0028F2                       4680 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      0028F2 28 EB                    1 	.word LINK 
                           0028F4     2 	LINK=.
      0028F4                          3 PRTE:
      0028F4 44                       4 	.byte 4+F_IFUNC 	
      0028F5 50 52 54 45              5 	.ascii "PRTE"
      0028F9 00 7C                    6 	.word PRTE_IDX 
      0028FB                       4681 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      0028FB 28 F4                    1 	.word LINK 
                           0028FD     2 	LINK=.
      0028FD                          3 PRTD:
      0028FD 44                       4 	.byte 4+F_IFUNC 	
      0028FE 50 52 54 44              5 	.ascii "PRTD"
      002902 00 7A                    6 	.word PRTD_IDX 
      002904                       4682 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      002904 28 FD                    1 	.word LINK 
                           002906     2 	LINK=.
      002906                          3 PRTC:
      002906 44                       4 	.byte 4+F_IFUNC 	
      002907 50 52 54 43              5 	.ascii "PRTC"
      00290B 00 78                    6 	.word PRTC_IDX 
      00290D                       4683 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      00290D 29 06                    1 	.word LINK 
                           00290F     2 	LINK=.
      00290F                          3 PRTB:
      00290F 44                       4 	.byte 4+F_IFUNC 	
      002910 50 52 54 42              5 	.ascii "PRTB"
      002914 00 76                    6 	.word PRTB_IDX 
      002916                       4684 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      002916 29 0F                    1 	.word LINK 
                           002918     2 	LINK=.
      002918                          3 PRTA:
      002918 44                       4 	.byte 4+F_IFUNC 	
      002919 50 52 54 41              5 	.ascii "PRTA"
      00291D 00 74                    6 	.word PRTA_IDX 
      00291F                       4685 	_dict_entry 5,PRINT,PRT_IDX;print 
      00291F 29 18                    1 	.word LINK 
                           002921     2 	LINK=.
      002921                          3 PRINT:
      002921 05                       4 	.byte 5 	
      002922 50 52 49 4E 54           5 	.ascii "PRINT"
      002927 00 72                    6 	.word PRT_IDX 
      002929                       4686 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      002929 29 21                    1 	.word LINK 
                           00292B     2 	LINK=.
      00292B                          3 POUT:
      00292B 44                       4 	.byte 4+F_IFUNC 	
      00292C 50 4F 55 54              5 	.ascii "POUT"
      002930 00 70                    6 	.word POUT_IDX 
      002932                       4687 	_dict_entry,4,POKE,POKE_IDX;poke 
      002932 29 2B                    1 	.word LINK 
                           002934     2 	LINK=.
      002934                          3 POKE:
      002934 04                       4 	.byte 4 	
      002935 50 4F 4B 45              5 	.ascii "POKE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002939 00 6E                    6 	.word POKE_IDX 
      00293B                       4688 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      00293B 29 34                    1 	.word LINK 
                           00293D     2 	LINK=.
      00293D                          3 PMODE:
      00293D 05                       4 	.byte 5 	
      00293E 50 4D 4F 44 45           5 	.ascii "PMODE"
      002943 00 68                    6 	.word PMODE_IDX 
      002945                       4689 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      002945 29 3D                    1 	.word LINK 
                           002947     2 	LINK=.
      002947                          3 PINP:
      002947 44                       4 	.byte 4+F_IFUNC 	
      002948 50 49 4E 50              5 	.ascii "PINP"
      00294C 00 6C                    6 	.word PINP_IDX 
      00294E                       4690 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      00294E 29 47                    1 	.word LINK 
                           002950     2 	LINK=.
      002950                          3 PEEK:
      002950 44                       4 	.byte 4+F_IFUNC 	
      002951 50 45 45 4B              5 	.ascii "PEEK"
      002955 00 6A                    6 	.word PEEK_IDX 
      002957                       4691 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      002957 29 50                    1 	.word LINK 
                           002959     2 	LINK=.
      002959                          3 PAUSE:
      002959 05                       4 	.byte 5 	
      00295A 50 41 55 53 45           5 	.ascii "PAUSE"
      00295F 00 66                    6 	.word PAUSE_IDX 
      002961                       4692 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      002961 29 59                    1 	.word LINK 
                           002963     2 	LINK=.
      002963                          3 PAD:
      002963 43                       4 	.byte 3+F_IFUNC 	
      002964 50 41 44                 5 	.ascii "PAD"
      002967 00 64                    6 	.word PAD_IDX 
      002969                       4693 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      002969 29 63                    1 	.word LINK 
                           00296B     2 	LINK=.
      00296B                          3 OR:
      00296B 42                       4 	.byte 2+F_IFUNC 	
      00296C 4F 52                    5 	.ascii "OR"
      00296E 00 62                    6 	.word OR_IDX 
      002970                       4694 	_dict_entry,2,ON,ON_IDX; cmd_on 
      002970 29 6B                    1 	.word LINK 
                           002972     2 	LINK=.
      002972                          3 ON:
      002972 02                       4 	.byte 2 	
      002973 4F 4E                    5 	.ascii "ON"
      002975 00 C6                    6 	.word ON_IDX 
      002977                       4695 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      002977 29 72                    1 	.word LINK 
                           002979     2 	LINK=.
      002979                          3 ODR:
      002979 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      00297A 4F 44 52                 5 	.ascii "ODR"
      00297D 00 60                    6 	.word ODR_IDX 
      00297F                       4696 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      00297F 29 79                    1 	.word LINK 
                           002981     2 	LINK=.
      002981                          3 NOT:
      002981 43                       4 	.byte 3+F_IFUNC 	
      002982 4E 4F 54                 5 	.ascii "NOT"
      002985 00 5E                    6 	.word NOT_IDX 
      002987                       4697 	_dict_entry,4,NEXT,NEXT_IDX;next 
      002987 29 81                    1 	.word LINK 
                           002989     2 	LINK=.
      002989                          3 NEXT:
      002989 04                       4 	.byte 4 	
      00298A 4E 45 58 54              5 	.ascii "NEXT"
      00298E 00 5A                    6 	.word NEXT_IDX 
      002990                       4698 	_dict_entry,3,NEW,NEW_IDX;new
      002990 29 89                    1 	.word LINK 
                           002992     2 	LINK=.
      002992                          3 NEW:
      002992 03                       4 	.byte 3 	
      002993 4E 45 57                 5 	.ascii "NEW"
      002996 00 5C                    6 	.word NEW_IDX 
      002998                       4699 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      002998 29 92                    1 	.word LINK 
                           00299A     2 	LINK=.
      00299A                          3 MULDIV:
      00299A 46                       4 	.byte 6+F_IFUNC 	
      00299B 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      0029A1 00 58                    6 	.word MULDIV_IDX 
      0029A3                       4700 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      0029A3 29 9A                    1 	.word LINK 
                           0029A5     2 	LINK=.
      0029A5                          3 LSHIFT:
      0029A5 46                       4 	.byte 6+F_IFUNC 	
      0029A6 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0029AC 00 56                    6 	.word LSHIFT_IDX 
      0029AE                       4701 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      0029AE 29 A5                    1 	.word LINK 
                           0029B0     2 	LINK=.
      0029B0                          3 LOG:
      0029B0 43                       4 	.byte 3+F_IFUNC 	
      0029B1 4C 4F 47                 5 	.ascii "LOG"
      0029B4 00 54                    6 	.word LOG_IDX 
      0029B6                       4702 	_dict_entry 4,LIST,LIST_IDX;list
      0029B6 29 B0                    1 	.word LINK 
                           0029B8     2 	LINK=.
      0029B8                          3 LIST:
      0029B8 04                       4 	.byte 4 	
      0029B9 4C 49 53 54              5 	.ascii "LIST"
      0029BD 00 52                    6 	.word LIST_IDX 
      0029BF                       4703 	_dict_entry 3,LET,LET_IDX;let 
      0029BF 29 B8                    1 	.word LINK 
                           0029C1     2 	LINK=.
      0029C1                          3 LET:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      0029C1 03                       4 	.byte 3 	
      0029C2 4C 45 54                 5 	.ascii "LET"
      0029C5 00 50                    6 	.word LET_IDX 
      0029C7                       4704 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      0029C7 29 C1                    1 	.word LINK 
                           0029C9     2 	LINK=.
      0029C9                          3 KEY:
      0029C9 43                       4 	.byte 3+F_IFUNC 	
      0029CA 4B 45 59                 5 	.ascii "KEY"
      0029CD 00 4E                    6 	.word KEY_IDX 
      0029CF                       4705 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      0029CF 29 C9                    1 	.word LINK 
                           0029D1     2 	LINK=.
      0029D1                          3 IWDGREF:
      0029D1 07                       4 	.byte 7 	
      0029D2 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0029D9 00 4C                    6 	.word IWDGREF_IDX 
      0029DB                       4706 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      0029DB 29 D1                    1 	.word LINK 
                           0029DD     2 	LINK=.
      0029DD                          3 IWDGEN:
      0029DD 06                       4 	.byte 6 	
      0029DE 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0029E4 00 4A                    6 	.word IWDGEN_IDX 
      0029E6                       4707 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      0029E6 29 DD                    1 	.word LINK 
                           0029E8     2 	LINK=.
      0029E8                          3 INVERT:
      0029E8 46                       4 	.byte 6+F_IFUNC 	
      0029E9 49 4E 56 45 52 54        5 	.ascii "INVERT"
      0029EF 00 48                    6 	.word INVERT_IDX 
      0029F1                       4708 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      0029F1 29 E8                    1 	.word LINK 
                           0029F3     2 	LINK=.
      0029F3                          3 INPUT:
      0029F3 05                       4 	.byte 5 	
      0029F4 49 4E 50 55 54           5 	.ascii "INPUT"
      0029F9 00 46                    6 	.word INPUT_IDX 
      0029FB                       4709 	_dict_entry,2,IF,IF_IDX;if 
      0029FB 29 F3                    1 	.word LINK 
                           0029FD     2 	LINK=.
      0029FD                          3 IF:
      0029FD 02                       4 	.byte 2 	
      0029FE 49 46                    5 	.ascii "IF"
      002A00 00 44                    6 	.word IF_IDX 
      002A02                       4710 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      002A02 29 FD                    1 	.word LINK 
                           002A04     2 	LINK=.
      002A04                          3 IDR:
      002A04 43                       4 	.byte 3+F_IFUNC 	
      002A05 49 44 52                 5 	.ascii "IDR"
      002A08 00 42                    6 	.word IDR_IDX 
      002A0A                       4711 	_dict_entry,3,HEX,HEX_IDX;hex_base
      002A0A 2A 04                    1 	.word LINK 
                           002A0C     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A0C                          3 HEX:
      002A0C 03                       4 	.byte 3 	
      002A0D 48 45 58                 5 	.ascii "HEX"
      002A10 00 40                    6 	.word HEX_IDX 
      002A12                       4712 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      002A12 2A 0C                    1 	.word LINK 
                           002A14     2 	LINK=.
      002A14                          3 GPIO:
      002A14 44                       4 	.byte 4+F_IFUNC 	
      002A15 47 50 49 4F              5 	.ascii "GPIO"
      002A19 00 3E                    6 	.word GPIO_IDX 
      002A1B                       4713 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      002A1B 2A 14                    1 	.word LINK 
                           002A1D     2 	LINK=.
      002A1D                          3 GOTO:
      002A1D 04                       4 	.byte 4 	
      002A1E 47 4F 54 4F              5 	.ascii "GOTO"
      002A22 00 3C                    6 	.word GOTO_IDX 
      002A24                       4714 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      002A24 2A 1D                    1 	.word LINK 
                           002A26     2 	LINK=.
      002A26                          3 GOSUB:
      002A26 05                       4 	.byte 5 	
      002A27 47 4F 53 55 42           5 	.ascii "GOSUB"
      002A2C 00 3A                    6 	.word GOSUB_IDX 
      002A2E                       4715 	_dict_entry,3,GET,GET_IDX; cmd_get 
      002A2E 2A 26                    1 	.word LINK 
                           002A30     2 	LINK=.
      002A30                          3 GET:
      002A30 03                       4 	.byte 3 	
      002A31 47 45 54                 5 	.ascii "GET"
      002A34 00 C8                    6 	.word GET_IDX 
      002A36                       4716 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      002A36 2A 30                    1 	.word LINK 
                           002A38     2 	LINK=.
      002A38                          3 FREE:
      002A38 44                       4 	.byte 4+F_IFUNC 	
      002A39 46 52 45 45              5 	.ascii "FREE"
      002A3D 00 9A                    6 	.word FREE_IDX 
      002A3F                       4717 	_dict_entry,3,FOR,FOR_IDX;for 
      002A3F 2A 38                    1 	.word LINK 
                           002A41     2 	LINK=.
      002A41                          3 FOR:
      002A41 03                       4 	.byte 3 	
      002A42 46 4F 52                 5 	.ascii "FOR"
      002A45 00 38                    6 	.word FOR_IDX 
      002A47                       4718 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      002A47 2A 41                    1 	.word LINK 
                           002A49     2 	LINK=.
      002A49                          3 FCPU:
      002A49 04                       4 	.byte 4 	
      002A4A 46 43 50 55              5 	.ascii "FCPU"
      002A4E 00 34                    6 	.word FCPU_IDX 
      002A50                       4719 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      002A50 2A 49                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                           002A52     2 	LINK=.
      002A52                          3 ERASE:
      002A52 05                       4 	.byte 5 	
      002A53 45 52 41 53 45           5 	.ascii "ERASE"
      002A58 00 32                    6 	.word ERASE_IDX 
      002A5A                       4720 	_dict_entry,3,END,END_IDX;cmd_end  
      002A5A 2A 52                    1 	.word LINK 
                           002A5C     2 	LINK=.
      002A5C                          3 END:
      002A5C 03                       4 	.byte 3 	
      002A5D 45 4E 44                 5 	.ascii "END"
      002A60 00 30                    6 	.word END_IDX 
      002A62                       4721 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      002A62 2A 5C                    1 	.word LINK 
                           002A64     2 	LINK=.
      002A64                          3 EEPROM:
      002A64 46                       4 	.byte 6+F_IFUNC 	
      002A65 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002A6B 00 2E                    6 	.word EEPROM_IDX 
      002A6D                       4722 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      002A6D 2A 64                    1 	.word LINK 
                           002A6F     2 	LINK=.
      002A6F                          3 EDIT:
      002A6F 04                       4 	.byte 4 	
      002A70 45 44 49 54              5 	.ascii "EDIT"
      002A74 00 2C                    6 	.word EDIT_IDX 
      002A76                       4723 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      002A76 2A 6F                    1 	.word LINK 
                           002A78     2 	LINK=.
      002A78                          3 DWRITE:
      002A78 06                       4 	.byte 6+F_CMD 	
      002A79 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002A7F 00 2A                    6 	.word DWRITE_IDX 
      002A81                       4724 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      002A81 2A 78                    1 	.word LINK 
                           002A83     2 	LINK=.
      002A83                          3 DREAD:
      002A83 45                       4 	.byte 5+F_IFUNC 	
      002A84 44 52 45 41 44           5 	.ascii "DREAD"
      002A89 00 28                    6 	.word DREAD_IDX 
      002A8B                       4725 	_dict_entry,2,DO,DO_IDX;do_loop
      002A8B 2A 83                    1 	.word LINK 
                           002A8D     2 	LINK=.
      002A8D                          3 DO:
      002A8D 02                       4 	.byte 2 	
      002A8E 44 4F                    5 	.ascii "DO"
      002A90 00 26                    6 	.word DO_IDX 
      002A92                       4726 	_dict_entry,3,DEC,DEC_IDX;dec_base
      002A92 2A 8D                    1 	.word LINK 
                           002A94     2 	LINK=.
      002A94                          3 DEC:
      002A94 03                       4 	.byte 3 	
      002A95 44 45 43                 5 	.ascii "DEC"
      002A98 00 24                    6 	.word DEC_IDX 
      002A9A                       4727 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002A9A 2A 94                    1 	.word LINK 
                           002A9C     2 	LINK=.
      002A9C                          3 DDR:
      002A9C 43                       4 	.byte 3+F_IFUNC 	
      002A9D 44 44 52                 5 	.ascii "DDR"
      002AA0 00 22                    6 	.word DDR_IDX 
      002AA2                       4728 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      002AA2 2A 9C                    1 	.word LINK 
                           002AA4     2 	LINK=.
      002AA4                          3 DATALN:
      002AA4 06                       4 	.byte 6 	
      002AA5 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002AAB 00 20                    6 	.word DATALN_IDX 
      002AAD                       4729 	_dict_entry,4,DATA,DATA_IDX;data  
      002AAD 2A A4                    1 	.word LINK 
                           002AAF     2 	LINK=.
      002AAF                          3 DATA:
      002AAF 04                       4 	.byte 4 	
      002AB0 44 41 54 41              5 	.ascii "DATA"
      002AB4 00 1E                    6 	.word DATA_IDX 
      002AB6                       4730 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      002AB6 2A AF                    1 	.word LINK 
                           002AB8     2 	LINK=.
      002AB8                          3 CRL:
      002AB8 43                       4 	.byte 3+F_IFUNC 	
      002AB9 43 52 4C                 5 	.ascii "CRL"
      002ABC 00 1C                    6 	.word CRL_IDX 
      002ABE                       4731 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      002ABE 2A B8                    1 	.word LINK 
                           002AC0     2 	LINK=.
      002AC0                          3 CRH:
      002AC0 43                       4 	.byte 3+F_IFUNC 	
      002AC1 43 52 48                 5 	.ascii "CRH"
      002AC4 00 1A                    6 	.word CRH_IDX 
      002AC6                       4732 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      002AC6 2A C0                    1 	.word LINK 
                           002AC8     2 	LINK=.
      002AC8                          3 CHAR:
      002AC8 84                       4 	.byte 4+F_CFUNC 	
      002AC9 43 48 41 52              5 	.ascii "CHAR"
      002ACD 00 18                    6 	.word CHAR_IDX 
      002ACF                       4733 	_dict_entry,3,BYE,BYE_IDX;bye 
      002ACF 2A C8                    1 	.word LINK 
                           002AD1     2 	LINK=.
      002AD1                          3 BYE:
      002AD1 03                       4 	.byte 3 	
      002AD2 42 59 45                 5 	.ascii "BYE"
      002AD5 00 16                    6 	.word BYE_IDX 
      002AD7                       4734 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      002AD7 2A D1                    1 	.word LINK 
                           002AD9     2 	LINK=.
      002AD9                          3 BTOGL:
      002AD9 05                       4 	.byte 5 	
      002ADA 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002ADF 00 14                    6 	.word BTOGL_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002AE1                       4735 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      002AE1 2A D9                    1 	.word LINK 
                           002AE3     2 	LINK=.
      002AE3                          3 BTEST:
      002AE3 45                       4 	.byte 5+F_IFUNC 	
      002AE4 42 54 45 53 54           5 	.ascii "BTEST"
      002AE9 00 12                    6 	.word BTEST_IDX 
      002AEB                       4736 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      002AEB 2A E3                    1 	.word LINK 
                           002AED     2 	LINK=.
      002AED                          3 BSET:
      002AED 04                       4 	.byte 4 	
      002AEE 42 53 45 54              5 	.ascii "BSET"
      002AF2 00 10                    6 	.word BSET_IDX 
      002AF4                       4737 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      002AF4 2A ED                    1 	.word LINK 
                           002AF6     2 	LINK=.
      002AF6                          3 BRES:
      002AF6 04                       4 	.byte 4 	
      002AF7 42 52 45 53              5 	.ascii "BRES"
      002AFB 00 0E                    6 	.word BRES_IDX 
      002AFD                       4738 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      002AFD 2A F6                    1 	.word LINK 
                           002AFF     2 	LINK=.
      002AFF                          3 BIT:
      002AFF 43                       4 	.byte 3+F_IFUNC 	
      002B00 42 49 54                 5 	.ascii "BIT"
      002B03 00 0C                    6 	.word BIT_IDX 
      002B05                       4739 	_dict_entry,3,AWU,AWU_IDX;awu 
      002B05 2A FF                    1 	.word LINK 
                           002B07     2 	LINK=.
      002B07                          3 AWU:
      002B07 03                       4 	.byte 3 	
      002B08 41 57 55                 5 	.ascii "AWU"
      002B0B 00 0A                    6 	.word AWU_IDX 
      002B0D                       4740 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      002B0D 2B 07                    1 	.word LINK 
                           002B0F     2 	LINK=.
      002B0F                          3 ASC:
      002B0F 43                       4 	.byte 3+F_IFUNC 	
      002B10 41 53 43                 5 	.ascii "ASC"
      002B13 00 08                    6 	.word ASC_IDX 
      002B15                       4741 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      002B15 2B 0F                    1 	.word LINK 
                           002B17     2 	LINK=.
      002B17                          3 AND:
      002B17 43                       4 	.byte 3+F_IFUNC 	
      002B18 41 4E 44                 5 	.ascii "AND"
      002B1B 00 06                    6 	.word AND_IDX 
      002B1D                       4742 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      002B1D 2B 17                    1 	.word LINK 
                           002B1F     2 	LINK=.
      002B1F                          3 ADCREAD:
      002B1F 47                       4 	.byte 7+F_IFUNC 	
      002B20 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B27 00 04                    6 	.word ADCREAD_IDX 
      002B29                       4743 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      002B29 2B 1F                    1 	.word LINK 
                           002B2B     2 	LINK=.
      002B2B                          3 ADCON:
      002B2B 05                       4 	.byte 5 	
      002B2C 41 44 43 4F 4E           5 	.ascii "ADCON"
      002B31 00 02                    6 	.word ADCON_IDX 
      002B33                       4744 kword_dict::
      002B33                       4745 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      002B33 2B 2B                    1 	.word LINK 
                           002B35     2 	LINK=.
      002B35                          3 ABS:
      002B35 43                       4 	.byte 3+F_IFUNC 	
      002B36 41 42 53                 5 	.ascii "ABS"
      002B39 00 00                    6 	.word ABS_IDX 
                                   4746 
                                   4747 ;comands and fonctions address table 	
      002B3B                       4748 code_addr::
      002B3B 22 C9 1E 8A 1E C6 22  4749 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             DD 21 BA 22 7A 25 2B
      002B49 1B 19 1B 09 1B 3A 1B  4750 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             2A 22 53 21 A8 25 E5
      002B57 25 DF 25 FD 26 03 25  4751 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             D9 17 E1 25 54 1E FA
             1F 2A
      002B67 19 7A 25 F7 1E 14 1F  4752 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             F2 23 57 20 82 1B 95
             1D 7A 1D 60 21 F6
      002B7B 17 DC 25 D3 1B 81 1A  4753 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             64 25 45 24 D5 25 0B
             21 E1
      002B8B 18 36 18 F1 25 10 23  4754 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             25 15 80 1C 15 1F B1
      002B99 24 C8 25 CD 22 F5 27  4755 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             91 22 67 23 63 1B 70
             25 F1
      002BA9 1B 61 25 EB 19 DE 25  4756 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             97 25 9D 25 A3 25 A9
             25 AF
      002BB9 25 B5 25 BB 25 C1 25  4757 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             C7 21 E9 26 80 0E D1
             1A DE
      002BC9 26 31 1D 9A 23 DF 23  4758 	.word restore,return, random,rshift,run,show,free ; 72..79
             3E 1D B8 17 9B 17 E6
      002BD7 22 5C 27 72 26 DA 27  4759 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             7A 27 52 1B EE 1F 65
             22 C3
      002BE7 24 AC 24 BB 1B BE 1E  4760 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             46 18 2C 22 20 25 69
             22 36
      002BF7 1A E4 24 46 21 71 23  4761 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get ; 96..99
             0D 17 FF 1C D7 1E 1B
      002C05 00 00                 4762 	.word 0 
                                   4763 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                                   4764 
                                   4765 
                                   4766 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      002C80                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      002C80                         30 app_space::
      002C80 00 00                   31 app_sign: .word 0 ; .ascii "BC"  ; signature 
      002C82 00 00                   32 app_size: .word 0 ; 31 
      002C84                         33 app: 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 ;;  BASIC code demo 'BLINK.BAS' 
                                     36 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     37 ;; byte code generated by compiler.
                                     38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     39 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     40 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     41 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   4 ABS        002B35 R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   4 ADCON      002B2B R
    ADCON_ID=  000002     |   4 ADCREAD    002B1F R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        002B17 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        002B0F R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   4 AUTO_RUN   000F8E R   |   4 AWU        002B07 R
  4 AWUHandl   000001 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  00000A     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        002AFF R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000C     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   4 BRES       002AF6 R
    BRES_IDX=  00000E     |     BS      =  000008     |     BSAVE   =  000001 
  4 BSET       002AED R   |     BSET_IDX=  000010     |     BSIZE   =  000006 
  4 BTEST      002AE3 R   |     BTEST_ID=  000012     |   4 BTOGL      002AD9 R
    BTOGL_ID=  000014     |     BTW     =  000001     |   4 BYE        002AD1 R
    BYE_IDX =  000016     |     C       =  000001     |     CAN     =  000018 
  4 CANT_DO    002119 R   |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CCOMMA  =  000001     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   4 CHAR       002AC8 R   |     CHAR_IDX=  000018 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMDX    =  000001     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     COMMA   =  00002C 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        002AC0 R
    CRH_IDX =  00001A     |   4 CRL        002AB8 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       002AAF R
  4 DATALN     002AA4 R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        002A9C R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   4 DEC        002A94 R   |     DEC_IDX =  000024 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         002A8D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]

Symbol Table

    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000026 
  4 DREAD      002A83 R   |     DREAD_ID=  000028     |   4 DWRITE     002A78 R
    DWRITE_I=  00002A     |   4 EDIT       002A6F R   |     EDIT_IDX=  00002C 
  4 EEPROM     002A64 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002E     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        002A5C R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      002A52 R
    ERASE_ID=  000032     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       002A49 R   |     FCPU_IDX=  000034 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   0018D1 R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   4 FOR        002A41 R
    FOR_IDX =  000038     |   4 FREE       002A38 R   |     FREE_IDX=  00009A 
    FRUN    =  000000     |     FS      =  00001C     |     FSLEEP  =  000003 
    FSTEP   =  000003     |     FTRAP   =  000001     |     F_CFUNC =  000080 
    F_CMD   =  000000     |     F_CONST =  0000C0     |     F_IFUNC =  000040 
  4 GET        002A30 R   |     GET_IDX =  0000C8     |   4 GOSUB      002A26 R
    GOSUB_ID=  00003A     |   4 GOTO       002A1D R   |     GOTO_IDX=  00003C 
  4 GPIO       002A14 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003E     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        002A0C R   |     HEX_IDX =  000040 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        002A04 R
    IDR_IDX =  000042     |   4 IF         0029FD R   |     IF_IDX  =  000044 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  4 INPUT      0029F3 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000046     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   4 INVERT     0029E8 R   |     INVERT_I=  000048 
    INW     =  000009     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     0029DD R   |     IWDGEN_I=  00004A 
  4 IWDGREF    0029D1 R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        0029C9 R   |     KEY_END =  000083     |     KEY_IDX =  00004E 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        0029C1 R   |     LET_IDX =  000050     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |   4 LINK    =  002B35 R
  4 LIST       0029B8 R   |     LIST_IDX=  000052     |     LL      =  000001 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  4 LOG        0029B0 R   |     LOG_IDX =  000054     |   4 LSHIFT     0029A5 R
    LSHIFT_I=  000056     |     MAJOR   =  000002     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  4 MULDIV     00299A R   |     MULDIV_I=  000058     |     MULOP   =  000003 
    N1      =  000001     |     N2      =  000003     |     NAFR    =  004804 
    NAK     =  000015     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        002992 R   |     NEW_IDX =  00005C     |   4 NEXT       002989 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]

Symbol Table

    NEXT_IDX=  00005A     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        002981 R   |     NOT_IDX =  00005E     |   4 NOT_SAVE   0019A7 R
  4 NO_APP     00215B R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        002979 R
    ODR_IDX =  000060     |   4 ON         002972 R   |     ONOFF   =  000003 
    ON_IDX  =  0000C6     |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         00296B R   |     OR_IDX  =  000062     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        002963 R
    PAD_IDX =  000064     |     PAD_SIZE=  000080     |   4 PAUSE      002959 R
    PAUSE_ID=  000066     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       002950 R
    PEEK_IDX=  00006A     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  4 PINP       002947 R   |     PINP_IDX=  00006C     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      00293D R   |     PMODE_ID=  000068     |   4 POKE       002934 R
    POKE_IDX=  00006E     |     PORT    =  000003     |   4 POUT       00292B R
    POUT_IDX=  000070     |     PREV    =  000001     |   4 PRINT      002921 R
  4 PROG_ADD   0018A8 R   |   4 PROG_SIZ   0018BA R   |   4 PRTA       002918 R
    PRTA_IDX=  000074     |   4 PRTB       00290F R   |     PRTB_IDX=  000076 
  4 PRTC       002906 R   |     PRTC_IDX=  000078     |   4 PRTD       0028FD R
    PRTD_IDX=  00007A     |   4 PRTE       0028F4 R   |     PRTE_IDX=  00007C 
  4 PRTF       0028EB R   |     PRTF_IDX=  00007E     |   4 PRTG       0028E2 R
    PRTG_IDX=  000080     |   4 PRTH       0028D9 R   |     PRTH_IDX=  000082 
  4 PRTI       0028D0 R   |     PRTI_IDX=  000084     |     PRT_IDX =  000072 
    PSTR    =  000003     |   4 QKEY       0028C7 R   |     QKEY_IDX=  000086 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    0018E2 R
    RAM_SIZE=  001800     |     RBT_IDX =  00008A     |   4 READ       0028BE R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]

Symbol Table

    READ_IDX=  000088     |   4 REBOOT     0028B3 R   |     REG     =  000001 
    REGA    =  000001     |     REGX    =  000003     |     REGY    =  000005 
    RELOP   =  000003     |   4 REMARK     0028A8 R   |     REM_IDX =  00008C 
  4 RESTORE    00289C R   |     REST_IDX=  00008E     |     RETL1   =  000001 
  4 RETURN     002891 R   |     RET_ADDR=  000003     |     RET_IDX =  000090 
    RET_INW =  000005     |   4 RND        002889 R   |     RND_IDX =  000092 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     00287E R
    RSHIFT_I=  000094     |     RST_SR  =  0050B3     |   4 RUN        002876 R
    RUN_IDX =  000096     |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
  4 SAVE       00286D R   |     SAVEB   =  000002     |     SAVE_IDX=  000036 
    SDIVSR  =  000005     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   4 SHOW       002864 R
    SHOW_IDX=  000098     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   002117 R   |   4 SIZE       00285B R   |     SIZE_IDX=  0000C4 
    SKIP    =  000005     |   4 SLEEP      002851 R   |     SLEEP_ID=  00009C 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      002847 R   |     SPIEN_ID=  0000A0     |   4 SPIRD      00283D R
    SPIRD_ID=  00009E     |   4 SPISEL     002832 R   |     SPISEL_I=  0000A2 
  4 SPIWR      002828 R   |     SPIWR_ID=  0000A4     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SQUOT   =  000006     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  0000A0     |   4 STEP       00281F R
    STEP_IDX=  0000A6     |   4 STOP       002816 R   |     STOP_IDX=  0000A8 
    STR     =  000003     |   4 STR_BYTE   0018CB R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      00280C R
    TICKS_ID=  0000AA     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    002800 R
  4 TIMER      0027F6 R   |     TIMER_ID=  0000AC     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  00000B 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000001     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_TARGE=  000004 
    TK_VAR  =  000085     |     TMROUT_I=  0000AE     |   4 TO         0027EF R
  4 TONE       0027E6 R   |     TONE_IDX=  0000B2     |     TOWRITE =  000005 
    TO_IDX  =  0000B0     |   4 Timer4Up   00000F R   |     U1      =  000001 
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     0027DB R   |     UBOUND_I=  0000B4 
  4 UBTN_Han   000048 R   |   4 UFLASH     0027D0 R   |     UFLASH_I=  0000B6 
  4 UNTIL      0027C6 R   |     UNTIL_ID=  0000B8     |     US      =  00001F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]

Symbol Table

  4 USER_ABO   00005B R   |   4 USR        0027BE R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000BA 
  4 Uart1RxH   00027F R   |   4 UserButt   000024 R   |     VAR_ADDR=  000006 
    VSISE   =  000003     |     VSIZ    =  000002     |     VSIZE   =  000006 
    VT      =  00000B     |   4 WAIT       0027B5 R   |     WAIT_IDX=  0000BC 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   4 WORDS      0027AB R
    WORDS_ID=  0000BE     |   4 WRITE      0027A1 R   |     WRITE_ID=  0000C0 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        002799 R   |     XOR_IDX =  0000C2     |     XREG    =  000003 
    XSAVE   =  000005     |     XTEMP   =  000001     |     YSAVE   =  000004 
  4 abs        0022C9 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B R   |   5 acc8       00000E GR  |   4 accept_c   0005BA R
  4 add_char   000D0D R   |   4 add_spac   000B03 R   |   4 analog_r   001EC6 R
  4 app        002C84 R   |   4 app_sign   002C80 R   |   4 app_size   002C82 R
  4 app_spac   002C80 GR  |   4 arduino_   0023BF R   |   4 arg_list   0015FB R
  5 array_si   00001F R   |   4 ascii      0021BA R   |   4 at_tst     000971 R
  4 atoi24     0013B5 GR  |   4 atoi_exi   00141B R   |   4 awu        00227A R
  4 awu02      002284 R   |   4 bad_port   00221B R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       001E53 R   |   4 beep_1kh   001E3D GR
  4 bin_exit   0007ED R   |   4 bit_and    0022DD R   |   4 bit_or     0022F5 R
  4 bit_rese   001B19 R   |   4 bit_set    001B09 R   |   4 bit_test   001B3A R
  4 bit_togg   001B2A R   |   4 bit_xor    00230D R   |   4 bitmask    00252B R
  4 bkslsh_t   00091E R   |   4 bksp       000358 R   |   2 block_bu   0016E0 GR
  4 block_er   00018F R   |   4 break_po   001F93 R   |   4 bye        002253 R
  4 char       0021A8 R   |   4 clear_ba   000FBF R   |   4 clear_bl   00206E R
  4 clear_va   000E7C R   |   4 clock_in   000076 R   |   4 cmd_end    001E14 R
  4 cmd_get    001E1B R   |   4 cmd_line   0011DE R   |   4 cmd_name   000D2D R
  4 cmd_on     001CD7 R   |   4 cmd_size   0017FF R   |   4 code_add   002B3B GR
  4 cold_sta   000ED1 R   |   4 colon_ts   000945 R   |   4 comma_ts   000950 R
  4 comp_msg   001136 R   |   4 compile    000A76 GR  |   4 const_cr   0025DF R
  4 const_cr   0025E5 R   |   4 const_dd   0025D9 R   |   4 const_ee   0025F7 R
  4 const_id   0025D3 R   |   4 const_in   0025F1 R   |   4 const_od   0025CD R
  4 const_ou   0025EB R   |   4 const_po   002597 R   |   4 const_po   00259D R
  4 const_po   0025A3 R   |   4 const_po   0025A9 R   |   4 const_po   0025AF R
  4 const_po   0025B5 R   |   4 const_po   0025BB R   |   4 const_po   0025C1 R
  4 const_po   0025C7 R   |   4 convert_   000764 R   |   4 convert_   00031C R
  4 copy_com   0009A6 R   |   5 count      000003 GR  |   4 cp_loop    0015AA R
  4 cpy_cmd_   000AEE R   |   4 cpy_quot   000B27 R   |   4 create_g   00068E R
  4 cs_high    00278C R   |   4 cstk_pro   0017B5 R   |   4 dash_tst   000966 R
  4 data       0025FD R   |   5 data_len   000009 R   |   4 data_lin   002603 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 data_sea   002644 R
  4 dbl_sign   001504 R   |   4 dec_base   0017E1 R   |   4 decomp_l   000BD8 R
  4 decompil   000B91 GR  |   4 del_line   000661 R   |   4 delete_l   000445 R
  4 delete_n   000368 R   |   4 delete_u   00040A R   |   4 digital_   001EFA R
  4 digital_   001F2A R   |   4 div32_16   00150E R   |   4 divide     001565 R
  4 divu24_8   001324 R   |   4 dneg       0014F9 R   |   4 do_loop    002554 R
  4 do_progr   000182 R   |   4 edit       00197A R   |   4 eefree     00026C R
  4 enable_i   0024D5 R   |   4 eql_tst    0009FB R   |   4 equal      000D20 R
  4 erase      001FF2 R   |   4 erase_ex   0001AE R   |   4 erase_fl   0001A4 R
  4 err_bad_   0010A1 R   |   4 err_buf_   001117 R   |   4 err_cmd_   001065 R
  4 err_div0   00102A R   |   4 err_dupl   00107F R   |   4 err_math   001011 R
  4 err_mem_   000FF6 R   |   4 err_msg    000FD6 R   |   4 err_no_a   0010AD R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]

Symbol Table

  4 err_no_d   0010E0 R   |   4 err_no_f   001104 R   |   4 err_no_l   001039 R
  4 err_no_p   0010F0 R   |   4 err_not_   001090 R   |   4 err_run_   00104F R
  4 err_synt   001003 R   |   4 escaped    000779 GR  |   4 expect     0015E9 R
  4 expr_exi   001740 R   |   4 expressi   0016FA R   |   4 factor     00164B R
  5 farptr     000017 R   |   4 fcpu       002357 R   |   4 fill_wri   00205E R
  4 final_te   0005B3 R   |   4 first_li   001924 R   |   5 flags      000021 GR
  4 for        001B95 R   |   4 free       0017E6 R   |   5 free_eep   00002D R
  7 free_ram   000080 R   |   4 func_arg   0015F6 R   |   4 func_not   0024C8 R
  4 ge         000D22 R   |   4 get_arra   001626 R   |   4 get_cmd_   000B70 R
  4 get_esca   000328 R   |   4 get_targ   001C5F R   |   4 get_targ   001C6D R
  4 get_tick   0022C3 R   |   4 get_toke   0008B7 GR  |   4 getc       000301 GR
  4 gosub      001D7A R   |   4 goto       001D60 R   |   4 gpio       0021F6 R
  4 gt         000D1E R   |   4 gt_tst     000A06 R   |   4 hex_base   0017DC R
  4 hex_dump   000DCD R   |   4 if         001B81 R   |   5 in         000001 GR
  5 in.saved   000002 GR  |   5 in.w       000000 GR  |   4 incr_far   001FD6 R
  4 input_ex   001ADB R   |   4 input_lo   001A66 R   |   4 input_va   001A64 R
  4 insert_c   0003C7 R   |   4 insert_l   0006BA R   |   4 insert_l   000729 R
  4 interp_l   00121F R   |   4 interpre   0011FA R   |   4 invert     002545 R
  4 is_alnum   000822 GR  |   4 is_alpha   000808 GR  |   4 is_digit   000819 GR
  4 is_symbo   00082B R   |   4 itoa       0012B9 GR  |   4 itoa_loo   0012DE R
  4 jp_to_ta   001D6D R   |   4 key        0021E1 R   |   4 kword_di   002B33 GR
  4 kword_en   002797 R   |   4 le         000D27 R   |   4 leading_   00251B R
  4 let        001836 GR  |   4 let_arra   001844 R   |   4 let_var    001847 R
  4 lines_sk   001927 R   |   4 list       0018F1 R   |   4 list_exi   001969 R
  4 list_loo   001947 R   |   4 log2       002510 R   |   4 logical_   0024BE R
  4 long_div   0014E1 R   |   4 look_tar   001C89 R   |   4 loop_bac   001C42 R
  5 loop_dep   00001E R   |   4 loop_don   001C57 R   |   4 lshift     002325 R
  4 lt         000D25 R   |   4 lt_tst     000A2F R   |   4 modulo     00157B R
  4 move       000E38 GR  |   4 move_dow   000E57 R   |   4 move_era   000111 R
  4 move_exi   000E78 R   |   4 move_lef   00039F R   |   4 move_loo   000E5C R
  4 move_prg   000151 R   |   4 move_rig   0003AD R   |   4 move_up    000E49 R
  4 mul_char   000D0F R   |   4 muldiv     001580 R   |   4 multiply   0014AC R
  4 mulu24_8   00134C R   |   4 nbr_tst    0008EA R   |   4 ne         000D2A R
  4 neg_acc2   001386 R   |   4 new        001FB1 R   |   4 next       001C15 R
  4 next_lin   001202 R   |   4 next_tok   00124F GR  |   4 no_match   0015BC R
  4 other      000A58 R   |   4 overwrit   0005DF R   |   2 pad        0016E0 GR
  4 pad_ref    002791 R   |   4 parse_bi   0007CB R   |   4 parse_in   000781 R
  4 parse_ke   00084E R   |   4 parse_qu   00072C R   |   4 parse_sy   000836 R
  4 pause      002267 R   |   4 pause02    002271 R   |   4 peek       001B70 R
  4 pin_mode   002363 R   |   4 plus_tst   0009CF R   |   4 poke       001B61 R
  4 power_ad   001E8A R   |   4 prcnt_ts   0009F0 R   |   4 print      0019DE R
  4 print_ex   001A38 R   |   4 print_he   000614 GR  |   4 print_in   00129D R
  4 printxy    00141F R   |   4 prog_siz   001861 R   |   4 program_   001869 R
  4 program_   00012B R   |   4 program_   000151 R   |   4 prt_basi   0019BE R
  4 prt_loop   0019E2 R   |   4 prt_tok    000D5F R   |   4 prti24     0012AD R
  5 ptr16      000018 GR  |   5 ptr8       000019 R   |   4 putc       0002F1 GR
  4 puts       00034E GR  |   4 qgetc      0002FA GR  |   4 qkey       0021E9 GR
  4 qmark_ts   00097C R   |   4 qsign      002057 R   |   4 random     0023DF R
  4 read       002680 R   |   4 read01     002682 R   |   4 readln     000453 GR
  4 readln_l   000460 R   |   4 readln_q   0005FC R   |   4 refresh_   00250B R
  4 rel_exit   001798 R   |   4 relation   001743 R   |   4 relop_st   000D12 R
  4 remark     001ADE GR  |   4 reset_co   0019E0 R   |   4 rest_con   001A54 R
  4 restore    002631 R   |   4 return     001D9A R   |   4 right_al   000B15 GR
  4 row_alig   001FBB R   |   4 row_eras   0000E4 R   |   4 row_eras   000111 R
  4 row_loop   000DB0 R   |   4 rparnt_t   00093A R   |   4 rshift     00233E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]

Symbol Table

  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     001124 R
  4 run        001DB8 R   |   4 run_app    000F73 R   |   4 run_it     001DEA R
  4 run_it_0   001DEC R   |   5 rx1_head   00002B R   |   5 rx1_queu   000023 R
  5 rx1_tail   00002C R   |   4 save_app   002082 R   |   4 save_con   001A44 R
  4 scan_blo   001FE4 R   |   4 scan_fre   00024F GR  |   4 search_d   00159C GR
  4 search_e   0015E6 R   |   4 search_l   000636 GR  |   4 search_l   000645 R
  4 search_n   0015A0 R   |   5 seedx      000013 R   |   5 seedy      000015 R
  4 select_p   0023AF R   |   4 send_esc   000376 R   |   4 send_par   000381 R
  4 set_time   0024AC R   |   4 sharp_ts   00095B R   |   4 show       00179B R
  4 show_row   000D9E R   |   4 single_c   000D08 R   |   4 skip       0008A4 R
  4 skip_lab   001CC8 R   |   4 slash_ts   0009E5 R   |   4 sleep      00225C R
  4 software   000E8B R   |   4 spaces     0003BB GR  |   4 spi_clea   002725 R
  4 spi_disa   00270D R   |   4 spi_enab   0026DA R   |   4 spi_rcv_   002747 R
  4 spi_read   002772 R   |   4 spi_sele   00277A R   |   4 spi_send   002731 R
  4 spi_writ   002752 R   |   2 stack_fu   001760 GR  |   2 stack_un   001800 R
  4 star_tst   0009DA R   |   4 step       001BEE R   |   4 stop       001F65 R
  4 store_lo   001C02 R   |   4 str_matc   0015C9 R   |   4 str_tst    0008DA R
  4 strcmp     000E17 R   |   4 strcpy     000E28 GR  |   4 strlen     000E0C GR
  4 symb_loo   000837 R   |   4 syntax_e   001157 GR  |   5 tab_widt   000022 GR
  4 tb_error   001159 GR  |   4 term       0016A8 R   |   4 term01     0016B0 R
  4 term_exi   0016F7 R   |   2 tib        001690 GR  |   4 tick_tst   000994 R
  5 ticks      00000F R   |   4 timeout    0024BB R   |   5 timer      000011 GR
  4 timer2_i   00008C R   |   4 timer4_i   000099 R   |   4 tk_id      001147 R
  4 to         001BBE R   |   4 to_eepro   00017A R   |   4 to_flash   00017F R
  4 to_hex_c   00062B GR  |   4 to_upper   0013A9 GR  |   4 token_ch   000A6F R
  4 token_ex   000A73 R   |   4 token_ms   000D96 R   |   4 tone       001E46 R
  4 try_next   002670 R   |   5 txtbgn     00001A GR  |   5 txtend     00001C GR
  4 uart1_ge   000301 GR  |   4 uart1_in   0002AC R   |   4 uart1_pu   0002F1 GR
  4 uart1_qg   0002FA GR  |   4 uart1_se   0002BC R   |   4 ubound     00182C R
  4 udiv32_1   0014CF R   |   4 uflash     002220 R   |   4 umstar     001472 R
  4 unlock_e   0000AE R   |   4 unlock_f   0000C9 R   |   4 until      002569 R
  4 user_int   000037 R   |   4 usr        002236 R   |   4 var_name   000B68 GR
  5 vars       00002F GR  |   4 wait       001AE4 R   |   4 warm_ini   000FA1 R
  4 warm_sta   0011DB R   |   4 words      002446 R   |   4 words_co   002496 R
  4 write      002171 R   |   4 write_bl   00022A GR  |   4 write_bu   00016B R
  4 write_by   0001B0 R   |   4 write_ee   0001EC R   |   4 write_ex   000225 R
  4 write_fl   0001D6 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    170   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   2C84   flags    0
   5 DATA       size     63   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

