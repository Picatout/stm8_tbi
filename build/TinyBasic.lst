ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                                
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001B                         65 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001D                         66 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001E                         67 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000020                         68 flags:: .blkb 1 ; various boolean flags
      000021                         69 tab_width:: .blkb 1 ; print colon width (default 6)
      000022                         70 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002A                         71 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002B                         72 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     73 
      00002C                         74 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     75 	.area BTXT (ABS)
      00007C                         76 	.org 0x7C  
                                     77 ; keep 'free_ram' as last variable 
                                     78 ; basic code compiled here. 
      00007C                         79 rsign: .blkw 1 ; "BC" 
      00007E                         80 rsize: .blkw 1 ; code size 	 
      000080                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;; working buffers and stack at end of RAM. 	
                                     86 ;;-----------------------------------
      001690                         87     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         88 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         89 pad:: .ds PAD_SIZE             ; working buffer
      001760                         90 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         91 stack_unf: ; stack underflow ; control_stack bottom 
                                     92 
                                     93 ;;--------------------------------------
                                     94     .area HOME 
                                     95 ;; interrupt vector table at 0x8000
                                     96 ;;--------------------------------------
      000000 82 00 04 86             97     int cold_start			; RESET vector 
                           000000    98 .if DEBUG
                                     99 	int TrapHandler 		;TRAP  software interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                           000001   100 .else
      000004 82 00 00 00            101 	int NonHandledInterrupt ;TRAP  software interrupt
                                    102 .endif
      000008 82 00 00 00            103 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            104 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            105 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            106 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            107 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            108 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            109 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 51            110 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            111 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            112 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            113 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            114 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            115 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            116 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            117 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            118 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            119 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            120 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            121 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            122 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            123 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00            124 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00            125 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 3C            126 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            127 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            128 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            129 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            130 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            131 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            132 	int NonHandledInterrupt ;int29  not used
                                    133 
                                    134 ;---------------------------------------
                                    135     .area CODE
                                    136 ;---------------------------------------
                           000000   137 .if DEBUG
                                    138 .asciz "STM8_TBI" ; I like to put module name here.
                                    139 .endif 
                                    140 
                                    141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    142 ; non handled interrupt 
                                    143 ; reset MCU
                                    144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        145 NonHandledInterrupt:
      000000 71                     146     .byte 0x71  ; invalid opcode reinitialize MCU
                                    147 
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    149 ; auto wakeup from halt
                                    150 ; at iret, program continue 
                                    151 ; after hatl instruction
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        153 AWUHandler:
      000001 72 19 50 F0      [ 1]  154 	bres AWU_CSR,#AWU_CSR_AWUEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000005 55 00 3F 50 F1   [ 1]  155 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  156 	clr AWU_TBR 
      00000E 80               [11]  157 	iret
                                    158 
                                    159 ;--------------------------
                                    160 ; UART1 receive character
                                    161 ; CTRL+C (ASCII 3)
                                    162 ; cancel program execution
                                    163 ; and fall back to command line
                                    164 ; CTRL+X reboot system 
                                    165 ;--------------------------
      00000F                        166 Uart1RxHandler: ; console receive char 
      00000F 72 0B 52 30 27   [ 2]  167 	btjf UART1_SR,#UART_SR_RXNE,5$
      000014 C6 52 31         [ 1]  168 	ld a,UART1_DR 
      000017 A1 03            [ 1]  169 	cp a,#CTRL_C 
      000019 26 06            [ 1]  170 	jrne 2$
      00001B CD 02 C1         [ 4]  171 	call putc 
      00001E CC 00 64         [ 2]  172 	jp user_interrupted
      000021                        173 2$:
      000021 A1 18            [ 1]  174 	cp a,#CAN ; CTRL_X 
      000023 26 03            [ 1]  175 	jrne 3$
      000025 CC 04 86         [ 2]  176 	jp cold_start 	
      000028 88               [ 1]  177 3$:	push a 
      000029 A6 22            [ 1]  178 	ld a,#rx1_queue 
      00002B CB 00 2B         [ 1]  179 	add a,rx1_tail 
      00002E 5F               [ 1]  180 	clrw x 
      00002F 97               [ 1]  181 	ld xl,a 
      000030 84               [ 1]  182 	pop a 
      000031 F7               [ 1]  183 	ld (x),a 
      000032 C6 00 2B         [ 1]  184 	ld a,rx1_tail 
      000035 4C               [ 1]  185 	inc a 
      000036 A4 07            [ 1]  186 	and a,#RX_QUEUE_SIZE-1
      000038 C7 00 2B         [ 1]  187 	ld rx1_tail,a 
      00003B 80               [11]  188 5$:	iret 
                                    189 
                                    190 ;------------------------------------
                                    191 ; software interrupt handler  
                                    192 ;------------------------------------
                           000000   193 .if DEBUG 
                                    194 TrapHandler:
                                    195 	bset flags,#FTRAP 
                                    196 	call print_registers
                                    197 	call cmd_itf
                                    198 	bres flags,#FTRAP 	
                                    199 	iret
                                    200 .endif 
                                    201 
                                    202 ;------------------------------
                                    203 ; TIMER 4 is used to maintain 
                                    204 ; a milliseconds 'ticks' counter
                                    205 ; and decrement 'timer' varaiable
                                    206 ;--------------------------------
      00003C                        207 Timer4UpdateHandler:
      00003C 72 5F 53 42      [ 1]  208 	clr TIM4_SR 
      000040 CE 00 0E         [ 2]  209 	ldw x,ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000043 5C               [ 1]  210 	incw x
      000044 CF 00 0E         [ 2]  211 	ldw ticks,x 
      000047 CE 00 10         [ 2]  212 	ldw x,timer
                                    213 ;	tnzw x 
      00004A 27 04            [ 1]  214 	jreq 1$
      00004C 5A               [ 2]  215 	decw x 
      00004D CF 00 10         [ 2]  216 	ldw timer,x 
      000050                        217 1$:	
      000050 80               [11]  218 	iret 
                                    219 
                                    220 ;------------------------------------
                                    221 ; Triggered by pressing USER UserButton 
                                    222 ; on NUCLEO card.
                                    223 ; This is used to abort a progam lock 
                                    224 ; in infinite loop. 
                                    225 ;------------------------------------
      000051                        226 UserButtonHandler:
                                    227 ; wait button release
      000051 5F               [ 1]  228 	clrw x
      000052 5A               [ 2]  229 1$: decw x 
      000053 26 FD            [ 1]  230 	jrne 1$
      000055 72 09 50 15 F8   [ 2]  231 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    232 ; if MCU suspended by SLEEP resume program
      00005A 72 07 00 20 05   [ 2]  233     btjf flags,#FSLEEP,2$
      00005F 72 17 00 20      [ 1]  234 	bres flags,#FSLEEP 
      000063 80               [11]  235 	iret
      000064                        236 2$:	
      000064                        237 user_interrupted:
      000064 72 00 00 20 02   [ 2]  238     btjt flags,#FRUN,4$
      000069 20 0A            [ 2]  239 	jra UBTN_Handler_exit 
      00006B                        240 4$:	; program interrupted by user 
      00006B 72 11 00 20      [ 1]  241 	bres flags,#FRUN 
      00006F AE 00 88         [ 2]  242 	ldw x,#USER_ABORT
      000072 CD 20 4F         [ 4]  243 	call puts 
      000075                        244 UBTN_Handler_exit:
      000075 AE 17 FF         [ 2]  245     ldw x,#STACK_EMPTY 
      000078 94               [ 1]  246     ldw sp,x
      000079 9A               [ 1]  247 	rim 
      00007A CE 00 19         [ 2]  248 	ldw x,txtbgn 
      00007D A3 2A 00         [ 2]  249 	cpw x,#app_space 
      000080 22 03            [ 1]  250 	jrugt 5$
      000082 CD 05 A9         [ 4]  251 	call clear_basic 
      000085 CC 07 C5         [ 2]  252 5$:	jp warm_start
                                    253 
      000088 0A 50 72 6F 67 72 61   254 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    255 
                                    256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    257 ;    peripherals initialization
                                    258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    259 
                                    260 ;----------------------------------------
                                    261 ; inialize MCU clock 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    262 ; input:
                                    263 ;   A 		source  HSI | 1 HSE 
                                    264 ;   XL      CLK_CKDIVR , clock divisor 
                                    265 ; output:
                                    266 ;   none 
                                    267 ;----------------------------------------
      0000A3                        268 clock_init:	
      0000A3 C1 50 C3         [ 1]  269 	cp a,CLK_CMSR 
      0000A6 27 0C            [ 1]  270 	jreq 2$ ; no switching required 
                                    271 ; select clock source 
      0000A8 72 12 50 C5      [ 1]  272 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000AC C7 50 C4         [ 1]  273 	ld CLK_SWR,a
      0000AF C1 50 C3         [ 1]  274 1$:	cp a,CLK_CMSR
      0000B2 26 FB            [ 1]  275 	jrne 1$
      0000B4                        276 2$: 	
                                    277 ; HSI and cpu clock divisor 
      0000B4 9F               [ 1]  278 	ld a,xl 
      0000B5 C7 50 C6         [ 1]  279 	ld CLK_CKDIVR,a  
      0000B8 81               [ 4]  280 	ret
                                    281 
                                    282 ;----------------------------------
                                    283 ; TIMER2 used as audio tone output 
                                    284 ; on port D:5.
                                    285 ; channel 1 configured as PWM mode 1 
                                    286 ;-----------------------------------  
                           00F424   287 TIM2_CLK_FREQ=62500
      0000B9                        288 timer2_init:
      0000B9 72 1A 50 C7      [ 1]  289 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000BD 35 60 53 05      [ 1]  290  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C1 35 08 53 0C      [ 1]  291 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C5 81               [ 4]  292 	ret 
                                    293 
                                    294 ;---------------------------------
                                    295 ; TIM4 is configured to generate an 
                                    296 ; interrupt every millisecond 
                                    297 ;----------------------------------
      0000C6                        298 timer4_init:
      0000C6 72 18 50 C7      [ 1]  299 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CA 35 07 53 45      [ 1]  300 	mov TIM4_PSCR,#7 ; prescale 128  
      0000CE 35 7D 53 46      [ 1]  301 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D2 35 05 53 40      [ 1]  302 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D6 72 10 53 41      [ 1]  303 	bset TIM4_IER,#TIM4_IER_UIE
      0000DA 81               [ 4]  304 	ret
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;  routines to write to FLASH, EEPROM 
                                    308 ;  and OPTION 
                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 
                                    311 ;----------------------------------
                                    312 ; unlock EEPROM/OPT for writing/erasing
                                    313 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    314 ; input:
                                    315 ;  none
                                    316 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    317 ;  none 
                                    318 ;----------------------------------
      0000DB                        319 unlock_eeprom:
      0000DB 72 06 50 5F 15   [ 2]  320 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0000E0 35 00 50 5B      [ 1]  321 	mov FLASH_CR2,#0 
      0000E4 35 FF 50 5C      [ 1]  322 	mov FLASH_NCR2,#0xFF 
      0000E8 35 AE 50 64      [ 1]  323 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000EC 35 56 50 64      [ 1]  324     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000F0 72 07 50 5F FB   [ 2]  325 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000F5 81               [ 4]  326 9$:	ret
                                    327 
                                    328 ;----------------------------------
                                    329 ; unlock FLASH for writing/erasing
                                    330 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    331 ; input:
                                    332 ;  none
                                    333 ; output:
                                    334 ;  none
                                    335 ;----------------------------------
      0000F6                        336 unlock_flash:
      0000F6 72 02 50 5F 15   [ 2]  337 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0000FB 35 00 50 5B      [ 1]  338 	mov FLASH_CR2,#0 
      0000FF 35 FF 50 5C      [ 1]  339 	mov FLASH_NCR2,#0xFF 
      000103 35 56 50 62      [ 1]  340 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000107 35 AE 50 62      [ 1]  341 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00010B 72 03 50 5F FB   [ 2]  342 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000110 81               [ 4]  343 9$:	ret
                                    344 
                                    345 ;----------------------------
                                    346 ; erase block code must be 
                                    347 ; executed from RAM
                                    348 ; input:
                                    349 ;-----------------------------
      000111                        350 row_erase:
      000111 88               [ 1]  351 	push a 
      000112 90 89            [ 2]  352 	pushw y 
      000114 35 20 50 5B      [ 1]  353 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000118 35 DF 50 5C      [ 1]  354 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00011C 4F               [ 1]  355 	clr a 
      00011D 90 5F            [ 1]  356 	clrw y 
      00011F 91 A7 00 16      [ 1]  357 	ldf ([farptr],y),a
      000123 90 5C            [ 1]  358     incw y
      000125 91 A7 00 16      [ 1]  359 	ldf ([farptr],y),a
      000129 90 5C            [ 1]  360     incw y
      00012B 91 A7 00 16      [ 1]  361 	ldf ([farptr],y),a
      00012F 90 5C            [ 1]  362     incw y
      000131 91 A7 00 16      [ 1]  363 	ldf ([farptr],y),a
      000135 72 05 50 5F FB   [ 2]  364 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00013A 90 85            [ 2]  365 	popw y 
      00013C 84               [ 1]  366 	pop a 
      00013D 81               [ 4]  367 	ret
      00013E                        368 row_erase_end:
                                    369 
                                    370 ; copy erase_start in RAM 
      00013E                        371 move_erase_to_ram:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      00013E 89               [ 2]  372 	pushw x 
      00013F 90 89            [ 2]  373 	pushw y 
      000141 AE 01 3E         [ 2]  374 	ldw x,#row_erase_end 
      000144 1D 01 11         [ 2]  375 	subw x,#row_erase
      000147 CF 00 0C         [ 2]  376 	ldw acc16,x 
      00014A AE 16 90         [ 2]  377 	ldw x,#tib 
      00014D 90 AE 01 11      [ 2]  378 	ldw y,#row_erase 
      000151 CD 03 C5         [ 4]  379 	call move
      000154 90 85            [ 2]  380 	popw y
      000156 85               [ 2]  381 	popw x
      000157 81               [ 4]  382 	ret 
                                    383 
                                    384 ;-----------------------------------
                                    385 ; block programming must be 
                                    386 ; executed from RAM 
                                    387 ; initial contidions: 
                                    388 ; 	memory unlocked
                                    389 ;   bit PRG set in 
                                    390 ; input:
                                    391 ;   x        data source 
                                    392 ;   farptr   row address destination 
                                    393 ; output:
                                    394 ;   none 
                                    395 ;----------------------------------
                           000001   396 	BCNT=1 
      000158                        397 program_row:
      000158 88               [ 1]  398 	push a 
      000159 90 89            [ 2]  399 	pushw y 
      00015B 4B 80            [ 1]  400 	push #BLOCK_SIZE  
                                    401 ;enable block programming 
      00015D 72 10 50 5B      [ 1]  402 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000161 72 11 50 5C      [ 1]  403 	bres FLASH_NCR2,#FLASH_CR2_PRG
                                    404 ;	mov FLASH_CR2,#(1<<FLASH_CR2_PRG) 
                                    405 ;	mov FLASH_NCR2,#~(1<<FLASH_CR2_PRG)
      000165 90 5F            [ 1]  406 	clrw y 
      000167 F6               [ 1]  407 1$:	ld a,(x)
      000168 91 A7 00 16      [ 1]  408 	ldf ([farptr],y),a
      00016C 5C               [ 1]  409 	incw x 
      00016D 90 5C            [ 1]  410 	incw y 
      00016F 0A 01            [ 1]  411 	dec (BCNT,sp)
      000171 26 F4            [ 1]  412 	jrne 1$
                                    413 ; wait EOP bit 
      000173 72 05 50 5F FB   [ 2]  414 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000178                        415 	_drop 1 
      000178 5B 01            [ 2]    1     addw sp,#1 
      00017A 90 85            [ 2]  416 	popw y 
      00017C 84               [ 1]  417 	pop a 
      00017D 81               [ 4]  418 	ret 
      00017E                        419 program_row_end:
                                    420 
                                    421 ;-------------------------
                                    422 ; move program_row to RAM 
                                    423 ; at txtubound address 
                                    424 ;------------------------
      00017E                        425 move_prg_to_ram:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00017E 89               [ 2]  426 	pushw x 
      00017F 90 89            [ 2]  427 	pushw y 
      000181 AE 01 7E         [ 2]  428 	ldw x,#program_row_end 
      000184 1D 01 58         [ 2]  429 	subw x,#program_row 
      000187 CF 00 0C         [ 2]  430 	ldw acc16,x ; bytes to move 
      00018A AE 16 90         [ 2]  431 	ldw x,#tib ; destination address 
      00018D 90 AE 01 58      [ 2]  432 	ldw y,#program_row ; source address 
      000191 CD 03 C5         [ 4]  433 	call move
      000194 90 85            [ 2]  434 	popw y 
      000196 85               [ 2]  435 	popw x  
      000197 81               [ 4]  436 	ret 
                                    437 
                                    438 
                                    439 ;-----------------------------
                                    440 ; write a row in FLASH/EEPROM 
                                    441 ; input:
                                    442 ;    farptr   destination address 
                                    443 ;    x        source address 
                                    444 ;-----------------------------
      000198                        445 write_row:
      000198 89               [ 2]  446 	pushw x 
      000199 72 5D 00 16      [ 1]  447 	tnz farptr 
      00019D 26 0D            [ 1]  448 	jrne to_flash 
      00019F CE 00 17         [ 2]  449 	ldw x,farptr+1 
      0001A2 A3 2A 00         [ 2]  450 	cpw x,#app_space  
      0001A5 24 05            [ 1]  451 	jruge to_flash 
      0001A7                        452 to_eeprom:
      0001A7 CD 00 DB         [ 4]  453 	call unlock_eeprom
      0001AA 20 03            [ 2]  454 	jra do_programming
      0001AC                        455 to_flash:
      0001AC CD 00 F6         [ 4]  456 	call unlock_flash
      0001AF                        457 do_programming:
      0001AF 85               [ 2]  458 	popw x 
      0001B0 CD 16 90         [ 4]  459 	call tib
      0001B3 72 13 50 5F      [ 1]  460 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001B7 72 17 50 5F      [ 1]  461 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001BB 81               [ 4]  462 	ret 
                                    463 
                                    464 
                                    465 ;-----------------------------------
                                    466 ; erase flash or EEPROM block
                                    467 ; a block is 128 bytes 
                                    468 ; input:
                                    469 ;   farptr  address row begin
                                    470 ; output:
                                    471 ;   none
                                    472 ;--------------------------------------
      0001BC                        473 block_erase:
      0001BC 89               [ 2]  474 	pushw x 
      0001BD CE 00 17         [ 2]  475 	ldw x,farptr+1
      0001C0 A3 2A 00         [ 2]  476 	cpw x,#app_space 
      0001C3 24 0C            [ 1]  477 	jruge erase_flash 
                                    478 ; erase eeprom block
      0001C5 CD 00 DB         [ 4]  479 	call unlock_eeprom 
      0001C8 CD 16 90         [ 4]  480 	call tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001CB 72 17 50 5F      [ 1]  481 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001CF 20 0A            [ 2]  482 	jra erase_exit  
                                    483 ; erase flash block:
      0001D1                        484 erase_flash:
      0001D1 CD 00 F6         [ 4]  485 	call unlock_flash 
      0001D4 CD 16 90         [ 4]  486 	call tib 
      0001D7 72 13 50 5F      [ 1]  487     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001DB                        488 erase_exit: 
      0001DB 85               [ 2]  489 	popw x 
      0001DC 81               [ 4]  490 	ret 
                                    491 
                                    492 
                                    493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    494 ; write a byte to FLASH or EEPROM/OPTION  
                                    495 ; input:
                                    496 ;    a  		byte to write
                                    497 ;    farptr  	address
                                    498 ;    x          farptr[x]
                                    499 ; output:
                                    500 ;    none
                                    501 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    502 	; variables locales
                           000001   503 	BTW = 1   ; byte to write offset on stack
                           000002   504 	OPT = 2   ; OPTION flag offset on stack
                           000002   505 	VSIZE = 2
      0001DD                        506 write_byte:
      0001DD 90 89            [ 2]  507 	pushw y
      0001DF                        508 	_vars VSIZE
      0001DF 52 02            [ 2]    1     sub sp,#VSIZE 
      0001E1 6B 01            [ 1]  509 	ld (BTW,sp),a ; byte to write 
      0001E3 0F 02            [ 1]  510 	clr (OPT,sp)  ; OPTION flag
                                    511 ; put addr[15:0] in Y, for bounds check.
      0001E5 90 CE 00 17      [ 2]  512 	ldw y,farptr+1   ; Y=addr15:0
                                    513 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001E9 72 5D 00 16      [ 1]  514 	tnz farptr 
      0001ED 26 14            [ 1]  515 	jrne write_flash
      0001EF 90 A3 2A 00      [ 2]  516     cpw y,#app_space 	 
      0001F3 24 0E            [ 1]  517     jruge write_flash
      0001F5 90 A3 40 00      [ 2]  518 	cpw y,#EEPROM_BASE  
      0001F9 25 57            [ 1]  519     jrult write_exit
      0001FB 90 A3 48 7F      [ 2]  520 	cpw y,#OPTION_END 
      0001FF 22 51            [ 1]  521 	jrugt write_exit
      000201 20 16            [ 2]  522 	jra write_eeprom 
                                    523 ; write program memory
      000203                        524 write_flash:
      000203 CD 00 F6         [ 4]  525 	call unlock_flash 
      000206 9B               [ 1]  526 1$:	sim 
      000207 7B 01            [ 1]  527 	ld a,(BTW,sp)
      000209 92 A7 00 16      [ 4]  528 	ldf ([farptr],x),a ; farptr[x]=A
      00020D 72 05 50 5F FB   [ 2]  529 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000212 9A               [ 1]  530     rim 
      000213 72 13 50 5F      [ 1]  531     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000217 20 39            [ 2]  532     jra write_exit
                                    533 ; write eeprom and option
      000219                        534 write_eeprom:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000219 CD 00 DB         [ 4]  535 	call unlock_eeprom
                                    536 	; check for data eeprom or option eeprom
      00021C 90 A3 48 00      [ 2]  537 	cpw y,#OPTION_BASE
      000220 2B 08            [ 1]  538 	jrmi 1$
      000222 90 A3 48 80      [ 2]  539 	cpw y,#OPTION_END+1
      000226 2A 02            [ 1]  540 	jrpl 1$
      000228 03 02            [ 1]  541 	cpl (OPT,sp)
      00022A                        542 1$: 
      00022A 0D 02            [ 1]  543     tnz (OPT,sp)
      00022C 27 08            [ 1]  544     jreq 2$
                                    545 	; pour modifier une option il faut modifier ces 2 bits
      00022E 72 1E 50 5B      [ 1]  546     bset FLASH_CR2,#FLASH_CR2_OPT
      000232 72 1F 50 5C      [ 1]  547     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000236                        548 2$: 
      000236 7B 01            [ 1]  549     ld a,(BTW,sp)
      000238 92 A7 00 16      [ 4]  550     ldf ([farptr],x),a
      00023C 0D 02            [ 1]  551     tnz (OPT,sp)
      00023E 27 08            [ 1]  552     jreq 3$
      000240 5C               [ 1]  553     incw x
      000241 7B 01            [ 1]  554     ld a,(BTW,sp)
      000243 43               [ 1]  555     cpl a
      000244 92 A7 00 16      [ 4]  556     ldf ([farptr],x),a
      000248 72 05 50 5F FB   [ 2]  557 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00024D 72 0D 50 5F FB   [ 2]  558 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000252                        559 write_exit:
      000252                        560 	_drop VSIZE 
      000252 5B 02            [ 2]    1     addw sp,#VSIZE 
      000254 90 85            [ 2]  561 	popw y
      000256 81               [ 4]  562     ret
                                    563 
                                    564 ;--------------------------------------------
                                    565 ; write a data block to eeprom or flash 
                                    566 ; input:
                                    567 ;   Y        source address   
                                    568 ;   X        array index  destination  farptr[x]
                                    569 ;   BSIZE    block size bytes 
                                    570 ;   farptr   write address , byte* 
                                    571 ; output:
                                    572 ;	X 		after last byte written 
                                    573 ;   Y 		after last byte read 
                                    574 ;  farptr   point after block
                                    575 ;---------------------------------------------
      000257                        576 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000257                        577 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    578 	; local var 
                           000001   579 	XSAVE=1 
                           000002   580 	VSIZE=2 
      000257                        581 write_block:
      000257 88               [ 1]  582 	push a 
      000258                        583 	_vars VSIZE
      000258 52 02            [ 2]    1     sub sp,#VSIZE 
      00025A 1F 01            [ 2]  584 	ldw (XSAVE,sp),x 
      00025C 1E 06            [ 2]  585 	ldw x,(BSIZE,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00025E 27 13            [ 1]  586 	jreq 9$
      000260 1E 01            [ 2]  587 1$:	ldw x,(XSAVE,sp)
      000262 90 F6            [ 1]  588 	ld a,(y)
      000264 CD 01 DD         [ 4]  589 	call write_byte 
      000267 5C               [ 1]  590 	incw x 
      000268 90 5C            [ 1]  591 	incw y 
      00026A 1F 01            [ 2]  592 	ldw (XSAVE,sp),x
      00026C 1E 06            [ 2]  593 	ldw x,(BSIZE,sp)
      00026E 5A               [ 2]  594 	decw x
      00026F 1F 06            [ 2]  595 	ldw (BSIZE,sp),x 
      000271 26 ED            [ 1]  596 	jrne 1$
      000273                        597 9$:
      000273 1E 01            [ 2]  598 	ldw x,(XSAVE,sp)
      000275 CD 14 5A         [ 4]  599 	call incr_farptr
      000278                        600 	_drop VSIZE
      000278 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027A 84               [ 1]  601 	pop a 
      00027B 81               [ 4]  602 	ret 
                                    603 
                                    604 
                                    605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    606 ;;   UART1 subroutines
                                    607 ;;   used for user interface 
                                    608 ;;   communication channel.
                                    609 ;;   settings: 
                                    610 ;;		115200 8N1 no flow control
                                    611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    612 
                                    613 ;---------------------------------------------
                                    614 ; initialize UART1, 115200 8N1
                                    615 ; input:
                                    616 ;	none
                                    617 ; output:
                                    618 ;   none
                                    619 ;---------------------------------------------
      00027C                        620 uart1_init:
      00027C 72 1A 50 02      [ 1]  621     bset PA_DDR,#UART1_TX_PIN
      000280 72 1A 50 03      [ 1]  622     bset PA_CR1,#UART1_TX_PIN 
      000284 72 1A 50 04      [ 1]  623     bset PA_CR2,#UART1_TX_PIN 
                                    624 ; enable UART1 clock
      000288 72 14 50 C7      [ 1]  625 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00028C                        626 uart1_set_baud: 
      00028C 88               [ 1]  627 	push a 
                                    628 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    629 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00028D A6 E1            [ 1]  630 	ld a,#CLK_SWR_HSI
      00028F C1 50 C3         [ 1]  631 	cp a,CLK_CMSR 
      000292 27 0A            [ 1]  632 	jreq 2$ 
      000294                        633 1$: ; 8 Mhz 	
      000294 35 05 52 33      [ 1]  634 	mov UART1_BRR2,#0x05 ; must be loaded first
      000298 35 04 52 32      [ 1]  635 	mov UART1_BRR1,#0x4
      00029C 20 08            [ 2]  636 	jra 3$
      00029E                        637 2$: ; 16 Mhz 	
      00029E 35 0B 52 33      [ 1]  638 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002A2 35 08 52 32      [ 1]  639 	mov UART1_BRR1,#0x08
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002A6                        640 3$:
      0002A6 72 5F 52 31      [ 1]  641     clr UART1_DR
      0002AA 35 2C 52 35      [ 1]  642 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002AE 72 10 52 35      [ 1]  643 	bset UART1_CR2,#UART_CR2_SBK
      0002B2 72 0D 52 30 FB   [ 2]  644     btjf UART1_SR,#UART_SR_TC,.
      0002B7 72 5F 00 2A      [ 1]  645     clr rx1_head 
      0002BB 72 5F 00 2B      [ 1]  646 	clr rx1_tail
      0002BF 84               [ 1]  647 	pop a  
      0002C0 81               [ 4]  648 	ret
                                    649 
                                    650 ;---------------------------------
                                    651 ; uart1_putc
                                    652 ; send a character via UART1
                                    653 ; input:
                                    654 ;    A  	character to send
                                    655 ;---------------------------------
      0002C1                        656 putc:: ; console output always on UART1
      0002C1                        657 uart1_putc:: 
      0002C1 72 0F 52 30 FB   [ 2]  658 	btjf UART1_SR,#UART_SR_TXE,.
      0002C6 C7 52 31         [ 1]  659 	ld UART1_DR,a 
      0002C9 81               [ 4]  660 	ret 
                                    661 
                                    662 
                                    663 ;---------------------------------
                                    664 ; Query for character in rx1_queue
                                    665 ; input:
                                    666 ;   none 
                                    667 ; output:
                                    668 ;   A     0 no charcter available
                                    669 ;   Z     1 no character available
                                    670 ;---------------------------------
      0002CA                        671 qgetc::
      0002CA                        672 uart1_qgetc::
      0002CA C6 00 2A         [ 1]  673 	ld a,rx1_head 
      0002CD C0 00 2B         [ 1]  674 	sub a,rx1_tail 
      0002D0 81               [ 4]  675 	ret 
                                    676 
                                    677 ;---------------------------------
                                    678 ; wait character from UART1 
                                    679 ; input:
                                    680 ;   none
                                    681 ; output:
                                    682 ;   A 			char  
                                    683 ;--------------------------------	
      0002D1                        684 getc:: ;console input
      0002D1                        685 uart1_getc::
      0002D1 CD 02 CA         [ 4]  686 	call uart1_qgetc
      0002D4 27 FB            [ 1]  687 	jreq uart1_getc 
      0002D6 89               [ 2]  688 	pushw x 
                                    689 ;; rx1_queue must be in page 0 	
      0002D7 A6 22            [ 1]  690 	ld a,#rx1_queue
      0002D9 CB 00 2A         [ 1]  691 	add a,rx1_head 
      0002DC 5F               [ 1]  692 	clrw x  
      0002DD 97               [ 1]  693 	ld xl,a 
      0002DE F6               [ 1]  694 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002DF 88               [ 1]  695 	push a
      0002E0 C6 00 2A         [ 1]  696 	ld a,rx1_head 
      0002E3 4C               [ 1]  697 	inc a 
      0002E4 A4 07            [ 1]  698 	and a,#RX_QUEUE_SIZE-1
      0002E6 C7 00 2A         [ 1]  699 	ld rx1_head,a 
      0002E9 84               [ 1]  700 	pop a  
      0002EA 85               [ 2]  701 	popw x
      0002EB 81               [ 4]  702 	ret 
                                    703 
                                    704 ;----------------------
                                    705 ; print token id && value
                                    706 ; input:
                                    707 ;   A     token id 
                                    708 ;   X     token value 
                                    709 ;---------------------
                           000001   710 	BSAVE=1
                           000002   711 	AREG=2
                           000003   712 	XREG=3
                           000004   713 	VSIZE=4
      0002EC                        714 prt_tok:
      0002EC                        715 	_vars VSIZE 
      0002EC 52 04            [ 2]    1     sub sp,#VSIZE 
      0002EE 6B 02            [ 1]  716 	ld (AREG,sp),a 
      0002F0 1F 03            [ 2]  717 	ldw (XREG,sp),x 
      0002F2 C6 00 0A         [ 1]  718 	ld a, base
      0002F5 6B 01            [ 1]  719 	ld (BSAVE,sp),a 
      0002F7 35 10 00 0A      [ 1]  720 	mov base,#16  
      0002FB AE 03 23         [ 2]  721 	ldw x,#token_msg
      0002FE CD 20 4F         [ 4]  722 	call puts 
      000301 5F               [ 1]  723 	clrw x 
      000302 7B 02            [ 1]  724 	ld a,(AREG,sp)
      000304 97               [ 1]  725 	ld xl,a 
      000305 CD 08 7E         [ 4]  726 	call print_int 
      000308 A6 20            [ 1]  727 	ld a,#SPACE
      00030A CD 02 C1         [ 4]  728 	call putc 
      00030D 1E 03            [ 2]  729 	ldw x,(XREG,sp)
      00030F CD 08 7E         [ 4]  730 	call print_int 
      000312 A6 0D            [ 1]  731 	ld a,#CR 
      000314 CD 02 C1         [ 4]  732 	call putc 
      000317 7B 01            [ 1]  733 	ld a,(BSAVE,sp)
      000319 C7 00 0A         [ 1]  734 	ld base,a 
      00031C 7B 02            [ 1]  735 	ld a,(AREG,sp)
      00031E 1E 03            [ 2]  736 	ldw x,(XREG,sp)
      000320                        737 	_drop VSIZE 
      000320 5B 04            [ 2]    1     addw sp,#VSIZE 
      000322 81               [ 4]  738 	ret 
      000323 74 6F 6B 65 6E 3A 20   739 token_msg: .asciz "token: "
             00
                                    740 
                                    741 
                                    742 ;---------------------
                                    743 ; display n bytes row 
                                    744 ; from memory.
                                    745 ; input:
                                    746 ;   A   bytes to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    747 ;	X   start address 
                                    748 ; output:
                                    749 ;   X   address after last shown  
                                    750 ;---------------------
                           000001   751 	CNT=1 
                           000002   752 	ADR=2 
                           000003   753 	VSIZE=3 
      00032B                        754 show_row:
      00032B 4D               [ 1]  755 	tnz a 
      00032C 26 01            [ 1]  756 	jrne 1$
      00032E 81               [ 4]  757 	ret 
      00032F                        758 1$:	
      00032F 89               [ 2]  759 	pushw x  
      000330 88               [ 1]  760 	push a 
      000331 35 04 00 21      [ 1]  761 	mov tab_width,#4 
      000335 CD 08 7E         [ 4]  762 	call print_int 
      000338 A6 20            [ 1]  763 	ld a,#SPACE  
      00033A CD 02 C1         [ 4]  764 	call putc
      00033D                        765 row_loop:
      00033D 1E 02            [ 2]  766 	ldw x,(ADR,sp)
      00033F F6               [ 1]  767 	ld a,(x)
      000340 5F               [ 1]  768 	clrw x 
      000341 97               [ 1]  769 	ld xl,a 
      000342 CD 08 7E         [ 4]  770 	call print_int 
      000345 1E 02            [ 2]  771 	ldw x,(ADR,sp)
      000347 5C               [ 1]  772 	incw x 
      000348 1F 02            [ 2]  773 	ldw (ADR,sp),x 
      00034A 0A 01            [ 1]  774 	dec (CNT,sp)
      00034C 26 EF            [ 1]  775 	jrne row_loop
      00034E                        776 	_drop VSIZE  		
      00034E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000350 35 04 00 21      [ 1]  777 	mov tab_width,#4
      000354 A6 0D            [ 1]  778 	ld a,#CR 
      000356 CD 02 C1         [ 4]  779 	call putc 
      000359 81               [ 4]  780 	ret 
                                    781 
                                    782 ;--------------------------
                                    783 ; print memory content 
                                    784 ; in hexadecimal format
                                    785 ;  input:
                                    786 ;    X    start address 
                                    787 ;    Y    count 
                                    788 ;--------------------------
                           000001   789 	BCNT=1
                           000003   790 	BASE=3
                           000004   791 	TABW=4
                           000004   792 	VSIZE=4   
      00035A                        793 hex_dump:
      00035A 88               [ 1]  794 	push a 
      00035B                        795 	_vars VSIZE
      00035B 52 04            [ 2]    1     sub sp,#VSIZE 
      00035D C6 00 0A         [ 1]  796 	ld a,base
      000360 6B 03            [ 1]  797 	ld (BASE,sp),a 
      000362 35 10 00 0A      [ 1]  798 	mov base,#16
      000366 C6 00 21         [ 1]  799 	ld a,tab_width 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000369 6B 04            [ 1]  800 	ld (TABW,sp),a
      00036B A6 0D            [ 1]  801 	ld a,#CR 
      00036D CD 02 C1         [ 4]  802 	call putc 
      000370 17 01            [ 2]  803 1$: ldw (BCNT,sp),y
      000372 A6 10            [ 1]  804 	ld a,#16
      000374 90 A3 00 10      [ 2]  805 	cpw y,#16
      000378 2A 02            [ 1]  806 	jrpl 2$
      00037A 90 9F            [ 1]  807 	ld a,yl
      00037C                        808 2$: 	
      00037C CD 03 2B         [ 4]  809 	call show_row 
      00037F 16 01            [ 2]  810 	ldw y,(BCNT,sp) 
      000381 72 A2 00 10      [ 2]  811 	subw y,#16 
      000385 90 A3 00 01      [ 2]  812 	cpw y,#1
      000389 2A E5            [ 1]  813 	jrpl 1$
      00038B 7B 03            [ 1]  814 	ld a,(BASE,sp)
      00038D C7 00 0A         [ 1]  815 	ld base,a
      000390 7B 04            [ 1]  816 	ld a,(TABW,sp)
      000392 C7 00 21         [ 1]  817 	ld tab_width,a 
      000395                        818 	_drop VSIZE
      000395 5B 04            [ 2]    1     addw sp,#VSIZE 
      000397 84               [ 1]  819 	pop a 
      000398 81               [ 4]  820 	ret 
                                    821 
                                    822 ;-------------------------------------
                                    823 ; retrun string length
                                    824 ; input:
                                    825 ;   X         .asciz  pointer 
                                    826 ; output:
                                    827 ;   X         not affected 
                                    828 ;   A         length 
                                    829 ;-------------------------------------
      000399                        830 strlen::
      000399 89               [ 2]  831 	pushw x 
      00039A 4F               [ 1]  832 	clr a
      00039B 7D               [ 1]  833 1$:	tnz (x) 
      00039C 27 04            [ 1]  834 	jreq 9$ 
      00039E 4C               [ 1]  835 	inc a 
      00039F 5C               [ 1]  836 	incw x 
      0003A0 20 F9            [ 2]  837 	jra 1$ 
      0003A2 85               [ 2]  838 9$:	popw x 
      0003A3 81               [ 4]  839 	ret 
                                    840 
                                    841 ;------------------------------------
                                    842 ; compare 2 strings
                                    843 ; input:
                                    844 ;   X 		char* first string 
                                    845 ;   Y       char* second string 
                                    846 ; output:
                                    847 ;   A 		0|1 
                                    848 ;-------------------------------------
      0003A4                        849 strcmp:
      0003A4 F6               [ 1]  850 	ld a,(x)
      0003A5 27 0B            [ 1]  851 	jreq 5$ 
      0003A7 90 F1            [ 1]  852 	cp a,(y) 
      0003A9 26 05            [ 1]  853 	jrne 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AB 5C               [ 1]  854 	incw x 
      0003AC 90 5C            [ 1]  855 	incw y 
      0003AE 20 F4            [ 2]  856 	jra strcmp 
      0003B0                        857 4$: ; not same  
      0003B0 4F               [ 1]  858 	clr a 
      0003B1 81               [ 4]  859 	ret 
      0003B2                        860 5$: ; same 
      0003B2 A6 01            [ 1]  861 	ld a,#1 
      0003B4 81               [ 4]  862 	ret 
                                    863 
                                    864 
                                    865 ;---------------------------------------
                                    866 ;  copy src to dest 
                                    867 ; input:
                                    868 ;   X 		dest 
                                    869 ;   Y 		src 
                                    870 ; output: 
                                    871 ;   X 		dest 
                                    872 ;----------------------------------
      0003B5                        873 strcpy::
      0003B5 88               [ 1]  874 	push a 
      0003B6 89               [ 2]  875 	pushw x 
      0003B7 90 F6            [ 1]  876 1$: ld a,(y)
      0003B9 27 06            [ 1]  877 	jreq 9$ 
      0003BB F7               [ 1]  878 	ld (x),a 
      0003BC 5C               [ 1]  879 	incw x 
      0003BD 90 5C            [ 1]  880 	incw y 
      0003BF 20 F6            [ 2]  881 	jra 1$ 
      0003C1 7F               [ 1]  882 9$:	clr (x)
      0003C2 85               [ 2]  883 	popw x 
      0003C3 84               [ 1]  884 	pop a 
      0003C4 81               [ 4]  885 	ret 
                                    886 
                                    887 ;---------------------------------------
                                    888 ; move memory block 
                                    889 ; input:
                                    890 ;   X 		destination 
                                    891 ;   Y 	    source 
                                    892 ;   acc16	bytes count 
                                    893 ; output:
                                    894 ;   none 
                                    895 ;--------------------------------------
                           000001   896 	INCR=1 ; increament high byte 
                           000002   897 	LB=2 ; increament low byte 
                           000002   898 	VSIZE=2
      0003C5                        899 move::
      0003C5 88               [ 1]  900 	push a 
      0003C6                        901 	_vars VSIZE 
      0003C6 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C8 0F 01            [ 1]  902 	clr (INCR,sp)
      0003CA 0F 02            [ 1]  903 	clr (LB,sp)
      0003CC 90 89            [ 2]  904 	pushw y 
      0003CE 13 01            [ 2]  905 	cpw x,(1,sp) ; compare DEST to SRC 
      0003D0 90 85            [ 2]  906 	popw y 
      0003D2 27 31            [ 1]  907 	jreq move_exit ; x==y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003D4 2B 0E            [ 1]  908 	jrmi move_down
      0003D6                        909 move_up: ; start from top address with incr=-1
      0003D6 72 BB 00 0C      [ 2]  910 	addw x,acc16
      0003DA 72 B9 00 0C      [ 2]  911 	addw y,acc16
      0003DE 03 01            [ 1]  912 	cpl (INCR,sp)
      0003E0 03 02            [ 1]  913 	cpl (LB,sp)   ; increment = -1 
      0003E2 20 05            [ 2]  914 	jra move_loop  
      0003E4                        915 move_down: ; start from bottom address with incr=1 
      0003E4 5A               [ 2]  916     decw x 
      0003E5 90 5A            [ 2]  917 	decw y
      0003E7 0C 02            [ 1]  918 	inc (LB,sp) ; incr=1 
      0003E9                        919 move_loop:	
      0003E9 C6 00 0C         [ 1]  920     ld a, acc16 
      0003EC CA 00 0D         [ 1]  921 	or a, acc8
      0003EF 27 14            [ 1]  922 	jreq move_exit 
      0003F1 72 FB 01         [ 2]  923 	addw x,(INCR,sp)
      0003F4 72 F9 01         [ 2]  924 	addw y,(INCR,sp) 
      0003F7 90 F6            [ 1]  925 	ld a,(y)
      0003F9 F7               [ 1]  926 	ld (x),a 
      0003FA 89               [ 2]  927 	pushw x 
      0003FB CE 00 0C         [ 2]  928 	ldw x,acc16 
      0003FE 5A               [ 2]  929 	decw x 
      0003FF CF 00 0C         [ 2]  930 	ldw acc16,x 
      000402 85               [ 2]  931 	popw x 
      000403 20 E4            [ 2]  932 	jra move_loop
      000405                        933 move_exit:
      000405                        934 	_drop VSIZE
      000405 5B 02            [ 2]    1     addw sp,#VSIZE 
      000407 84               [ 1]  935 	pop a 
      000408 81               [ 4]  936 	ret 	
                                    937 
                                    938 ;------------------------------------
                                    939 ;  set all variables to zero 
                                    940 ; input:
                                    941 ;   none 
                                    942 ; output:
                                    943 ;	none
                                    944 ;------------------------------------
      000409                        945 clear_vars:
      000409 89               [ 2]  946 	pushw x 
      00040A 90 89            [ 2]  947 	pushw y 
      00040C AE 00 2C         [ 2]  948 	ldw x,#vars 
      00040F 90 AE 00 34      [ 2]  949 	ldw y,#2*26 
      000413 7F               [ 1]  950 1$:	clr (x)
      000414 5C               [ 1]  951 	incw x 
      000415 90 5A            [ 2]  952 	decw y 
      000417 26 FA            [ 1]  953 	jrne 1$
      000419 90 85            [ 2]  954 	popw y 
      00041B 85               [ 2]  955 	popw x 
      00041C 81               [ 4]  956 	ret 
                                    957 
                                    958 ;-------------------------------------
                                    959 ; check if A is a letter 
                                    960 ; input:
                                    961 ;   A 			character to test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    962 ; output:
                                    963 ;   C flag      1 true, 0 false 
                                    964 ;-------------------------------------
      00041D                        965 is_alpha::
      00041D A1 41            [ 1]  966 	cp a,#'A 
      00041F 8C               [ 1]  967 	ccf 
      000420 24 0B            [ 1]  968 	jrnc 9$ 
      000422 A1 5B            [ 1]  969 	cp a,#'Z+1 
      000424 25 07            [ 1]  970 	jrc 9$ 
      000426 A1 61            [ 1]  971 	cp a,#'a 
      000428 8C               [ 1]  972 	ccf 
      000429 24 02            [ 1]  973 	jrnc 9$
      00042B A1 7B            [ 1]  974 	cp a,#'z+1
      00042D 81               [ 4]  975 9$: ret 	
                                    976 
                                    977 ;------------------------------------
                                    978 ; check if character in {'0'..'9'}
                                    979 ; input:
                                    980 ;    A  character to test
                                    981 ; output:
                                    982 ;    Carry  0 not digit | 1 digit
                                    983 ;------------------------------------
      00042E                        984 is_digit::
      00042E A1 30            [ 1]  985 	cp a,#'0
      000430 25 03            [ 1]  986 	jrc 1$
      000432 A1 3A            [ 1]  987     cp a,#'9+1
      000434 8C               [ 1]  988 	ccf 
      000435 8C               [ 1]  989 1$:	ccf 
      000436 81               [ 4]  990     ret
                                    991 
                                    992 ;-------------------------------------
                                    993 ; return true if character in  A 
                                    994 ; is letter or digit.
                                    995 ; input:
                                    996 ;   A     ASCII character 
                                    997 ; output:
                                    998 ;   A     no change 
                                    999 ;   Carry    0 false| 1 true 
                                   1000 ;--------------------------------------
      000437                       1001 is_alnum::
      000437 CD 04 2E         [ 4] 1002 	call is_digit
      00043A 25 03            [ 1] 1003 	jrc 1$ 
      00043C CD 04 1D         [ 4] 1004 	call is_alpha
      00043F 81               [ 4] 1005 1$:	ret 
                                   1006 
                                   1007 
                                   1008 ;-------------------------------------
                                   1009 ;  program initialization entry point 
                                   1010 ;-------------------------------------
                           000002  1011 	MAJOR=2
                           000000  1012 	MINOR=0 
      000440 0A 0A 54 69 6E 79 20  1013 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      000486                       1014 cold_start:
                                   1015 ;set stack 
      000486 AE 17 FF         [ 2] 1016 	ldw x,#STACK_EMPTY
      000489 94               [ 1] 1017 	ldw sp,x   
                                   1018 ; clear all ram 
      00048A 7F               [ 1] 1019 0$: clr (x)
      00048B 5A               [ 2] 1020 	decw x 
      00048C 26 FC            [ 1] 1021 	jrne 0$
                                   1022 ; activate pull up on all inputs 
      00048E A6 FF            [ 1] 1023 	ld a,#255 
      000490 C7 50 03         [ 1] 1024 	ld PA_CR1,a 
      000493 C7 50 08         [ 1] 1025 	ld PB_CR1,a 
      000496 C7 50 0D         [ 1] 1026 	ld PC_CR1,a 
      000499 C7 50 12         [ 1] 1027 	ld PD_CR1,a 
      00049C C7 50 17         [ 1] 1028 	ld PE_CR1,a 
      00049F C7 50 1C         [ 1] 1029 	ld PF_CR1,a 
      0004A2 C7 50 21         [ 1] 1030 	ld PG_CR1,a 
      0004A5 C7 50 2B         [ 1] 1031 	ld PI_CR1,a
                                   1032 ; set LD2 pin as output 
      0004A8 72 1A 50 0D      [ 1] 1033     bset PC_CR1,#LED2_BIT
      0004AC 72 1A 50 0E      [ 1] 1034     bset PC_CR2,#LED2_BIT
      0004B0 72 1A 50 0C      [ 1] 1035     bset PC_DDR,#LED2_BIT
      0004B4 72 1B 50 0A      [ 1] 1036 	bres PC_ODR,#LED2_BIT 
                                   1037 ; disable schmitt triggers on Arduino CN4 analog inputs
      0004B8 55 00 3F 54 07   [ 1] 1038 	mov ADC_TDRL,0x3f
                                   1039 ; disable peripherals clocks
                                   1040 ;	clr CLK_PCKENR1 
                                   1041 ;	clr CLK_PCKENR2
      0004BD 72 5F 50 F2      [ 1] 1042 	clr AWU_TBR 
      0004C1 72 14 50 CA      [ 1] 1043 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1044 ; select internal clock no divisor: 16 Mhz 	
      0004C5 A6 E1            [ 1] 1045 	ld a,#CLK_SWR_HSI 
      0004C7 5F               [ 1] 1046 	clrw x  
      0004C8 CD 00 A3         [ 4] 1047     call clock_init 
      0004CB CD 00 C6         [ 4] 1048 	call timer4_init
      0004CE CD 00 B9         [ 4] 1049 	call timer2_init
                                   1050 ; UART1 at 115200 BAUD
      0004D1 CD 02 7C         [ 4] 1051 	call uart1_init
                                   1052 ; activate PE_4 (user button interrupt)
      0004D4 72 18 50 18      [ 1] 1053     bset PE_CR2,#USR_BTN_BIT 
                                   1054 ; display system information
      0004D8 AE 04 40         [ 2] 1055 	ldw x,#software 
      0004DB CD 20 4F         [ 4] 1056 	call puts 
      0004DE A6 02            [ 1] 1057 	ld a,#MAJOR 
      0004E0 C7 00 0D         [ 1] 1058 	ld acc8,a 
      0004E3 5F               [ 1] 1059 	clrw x 
      0004E4 CF 00 0B         [ 2] 1060 	ldw acc24,x
      0004E7 72 5F 00 21      [ 1] 1061 	clr tab_width  
      0004EB 35 0A 00 0A      [ 1] 1062 	mov base, #10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004EF CD 08 8E         [ 4] 1063 	call prti24 
      0004F2 A6 2E            [ 1] 1064 	ld a,#'.
      0004F4 CD 02 C1         [ 4] 1065 	call putc 
      0004F7 A6 00            [ 1] 1066 	ld a,#MINOR 
      0004F9 C7 00 0D         [ 1] 1067 	ld acc8,a 
      0004FC 5F               [ 1] 1068 	clrw x 
      0004FD CF 00 0B         [ 2] 1069 	ldw acc24,x 
      000500 CD 08 8E         [ 4] 1070 	call prti24
      000503 A6 0D            [ 1] 1071 	ld a,#CR 
      000505 CD 02 C1         [ 4] 1072 	call putc
      000508 9A               [ 1] 1073 	rim 
      000509 72 5C 00 15      [ 1] 1074 	inc seedy+1 
      00050D 72 5C 00 13      [ 1] 1075 	inc seedx+1 
      000511 CD 05 A9         [ 4] 1076 	call clear_basic
      000514 CD 0E 35         [ 4] 1077 	call ubound 
      000517 CD 12 C1         [ 4] 1078 	call beep_1khz  
      00051A                       1079 2$:	
      00051A CD 05 8B         [ 4] 1080 	call warm_init
                                   1081 ; check for application in flash memory 
      00051D CE 2A 00         [ 2] 1082 	ldw x,app_sign 
      000520 C3 15 43         [ 2] 1083 	cpw x,SIGNATURE 
      000523 27 03            [ 1] 1084 	jreq run_app
      000525 CC 07 C8         [ 2] 1085 	jp cmd_line
      000528                       1086 run_app:
                                   1087 ; run application in FLASH|EEPROM 
      000528 CE 2A 02         [ 2] 1088 	ldw x,app_size  
      00052B 89               [ 2] 1089 	pushw x 
      00052C AE 2A 04         [ 2] 1090 	ldw x,#app 
      00052F CF 00 19         [ 2] 1091 	ldw txtbgn,x
      000532 CF 00 04         [ 2] 1092 	ldw basicptr,x 
      000535 72 FB 01         [ 2] 1093 	addw x,(1,sp) ; x+size 
      000538                       1094 	_drop 2 
      000538 5B 02            [ 2]    1     addw sp,#2 
      00053A CF 00 1B         [ 2] 1095 	ldw txtend,x 
      00053D AE 05 69         [ 2] 1096 	ldw x,#RUNNING 
      000540 CD 20 4F         [ 4] 1097 	call puts
      000543 CE 00 04         [ 2] 1098 	ldw x,basicptr    
      000546 35 10 00 0A      [ 1] 1099 	mov base,#16 
      00054A CD 08 7E         [ 4] 1100 	call print_int
      00054D 35 0A 00 0A      [ 1] 1101 	mov base,#10  
      000551 CE 00 04         [ 2] 1102 	ldw x, basicptr 
      000554 E6 02            [ 1] 1103 	ld a,(2,x)
      000556 C7 00 03         [ 1] 1104 	ld count,a 
      000559 35 03 00 01      [ 1] 1105 	mov in,#3 
      00055D 72 10 00 20      [ 1] 1106 	bset flags,#FRUN
      000561 CD 0E 35         [ 4] 1107 	call ubound   
      000564 CC 07 E4         [ 2] 1108 	jp interpreter  
      000567 20 FE            [ 2] 1109     jra .  
                                   1110 
      000569 0A 72 75 6E 6E 69 6E  1111 RUNNING: .asciz "\nrunning application at address: " 
             67 20 61 70 70 6C 69
             63 61 74 69 6F 6E 20
             61 74 20 61 64 64 72
             65 73 73 3A 20 00
                                   1112 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00058B                       1113 warm_init:
      00058B 72 5F 00 20      [ 1] 1114 	clr flags 
      00058F 72 5F 00 1D      [ 1] 1115 	clr loop_depth 
      000593 35 04 00 21      [ 1] 1116 	mov tab_width,#TAB_WIDTH 
      000597 35 0A 00 0A      [ 1] 1117 	mov base,#10 
      00059B AE 00 00         [ 2] 1118 	ldw x,#0 
      00059E CF 00 04         [ 2] 1119 	ldw basicptr,x 
      0005A1 CF 00 00         [ 2] 1120 	ldw in.w,x 
      0005A4 72 5F 00 03      [ 1] 1121 	clr count
      0005A8 81               [ 4] 1122 	ret 
                                   1123 
                                   1124 
                                   1125 ;---------------------------
                                   1126 ; reset BASIC text variables 
                                   1127 ; and clear variables 
                                   1128 ;---------------------------
      0005A9                       1129 clear_basic:
      0005A9 89               [ 2] 1130 	pushw x 
      0005AA 72 5F 00 03      [ 1] 1131 	clr count
      0005AE 72 5F 00 01      [ 1] 1132 	clr in  
      0005B2 AE 00 80         [ 2] 1133 	ldw x,#free_ram 
      0005B5 CF 00 19         [ 2] 1134 	ldw txtbgn,x 
      0005B8 CF 00 1B         [ 2] 1135 	ldw txtend,x 
      0005BB CD 04 09         [ 4] 1136 	call clear_vars 
      0005BE 85               [ 2] 1137 	popw x
      0005BF 81               [ 4] 1138 	ret 
                                   1139 
                                   1140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1141 ;;   Tiny BASIC error messages     ;;
                                   1142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005C0                       1143 err_msg:
      0005C0 00 00 05 E0 05 ED 05  1144 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             FB 06 14 06 23
      0005CC 06 39 06 4F 06 69 06  1145 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             7A 06 8B
      0005D6 06 97 06 CA 06 DA 06  1146 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             EE 07 01
                                   1147 
      0005E0 4D 65 6D 6F 72 79 20  1148 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0005ED 73 79 6E 74 61 78 20  1149 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0005FB 6D 61 74 68 20 6F 70  1150 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      000614 64 69 76 69 73 69 6F  1151 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000623 69 6E 76 61 6C 69 64  1152 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000639 72 75 6E 20 74 69 6D  1153 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



             75 73 61 67 65 2E 0A
             00
      00064F 63 6F 6D 6D 61 6E 64  1154 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      000669 64 75 70 6C 69 63 61  1155 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00067A 46 69 6C 65 20 6E 6F  1156 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      00068B 62 61 64 20 76 61 6C  1157 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      000697 46 69 6C 65 20 69 6E  1158 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0006CA 4E 6F 20 64 61 74 61  1159 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0006DA 4E 6F 20 70 72 6F 67  1160 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0006EE 46 69 6C 65 20 73 79  1161 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      000701 42 75 66 66 65 72 20  1162 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1163 
      00070E 0A 72 75 6E 20 74 69  1164 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      000720 0A 63 6F 6D 70 69 6C  1165 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000731 6C 61 73 74 20 74 6F  1166 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1167 
      000741                       1168 syntax_error::
      000741 A6 02            [ 1] 1169 	ld a,#ERR_SYNTAX 
                                   1170 
      000743                       1171 tb_error::
      000743 72 0A 00 20 44   [ 2] 1172 	btjt flags,#FCOMP,1$
      000748 88               [ 1] 1173 	push a 
      000749 AE 07 0E         [ 2] 1174 	ldw x, #rt_msg 
      00074C CD 20 4F         [ 4] 1175 	call puts 
      00074F 84               [ 1] 1176 	pop a 
      000750 AE 05 C0         [ 2] 1177 	ldw x, #err_msg 
      000753 72 5F 00 0C      [ 1] 1178 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000757 48               [ 1] 1179 	sll a
      000758 72 59 00 0C      [ 1] 1180 	rlc acc16  
      00075C C7 00 0D         [ 1] 1181 	ld acc8, a 
      00075F 72 BB 00 0C      [ 2] 1182 	addw x,acc16 
      000763 FE               [ 2] 1183 	ldw x,(x)
      000764 CD 20 4F         [ 4] 1184 	call puts
      000767 CE 00 04         [ 2] 1185 	ldw x,basicptr
      00076A C6 00 01         [ 1] 1186 	ld a,in 
      00076D CD 0F 4B         [ 4] 1187 	call prt_basic_line
      000770 AE 07 31         [ 2] 1188 	ldw x,#tk_id 
      000773 CD 20 4F         [ 4] 1189 	call puts 
      000776 C6 00 02         [ 1] 1190 	ld a,in.saved 
      000779 5F               [ 1] 1191 	clrw x 
      00077A 97               [ 1] 1192 	ld xl,a 
      00077B 72 BB 00 04      [ 2] 1193 	addw x,basicptr 
      00077F F6               [ 1] 1194 	ld a,(x)
      000780 5F               [ 1] 1195 	clrw x 
      000781 97               [ 1] 1196 	ld xl,a 
      000782 CD 08 7E         [ 4] 1197 	call print_int
      000785 72 0D 00 20 37   [ 2] 1198 	btjf flags,#FAUTORUN ,6$
      00078A 20 35            [ 2] 1199 	jra 6$
      00078C                       1200 1$:	
      00078C 88               [ 1] 1201 	push a 
      00078D AE 07 20         [ 2] 1202 	ldw x,#comp_msg
      000790 CD 20 4F         [ 4] 1203 	call puts 
      000793 84               [ 1] 1204 	pop a 
      000794 AE 05 C0         [ 2] 1205 	ldw x, #err_msg 
      000797 72 5F 00 0C      [ 1] 1206 	clr acc16 
      00079B 48               [ 1] 1207 	sll a
      00079C 72 59 00 0C      [ 1] 1208 	rlc acc16  
      0007A0 C7 00 0D         [ 1] 1209 	ld acc8, a 
      0007A3 72 BB 00 0C      [ 2] 1210 	addw x,acc16 
      0007A7 FE               [ 2] 1211 	ldw x,(x)
      0007A8 CD 20 4F         [ 4] 1212 	call puts
      0007AB AE 16 90         [ 2] 1213 	ldw x,#tib
      0007AE CD 20 4F         [ 4] 1214 	call puts 
      0007B1 A6 0D            [ 1] 1215 	ld a,#CR 
      0007B3 CD 02 C1         [ 4] 1216 	call putc
      0007B6 CE 00 00         [ 2] 1217 	ldw x,in.w
      0007B9 CD 20 BC         [ 4] 1218 	call spaces
      0007BC A6 5E            [ 1] 1219 	ld a,#'^
      0007BE CD 02 C1         [ 4] 1220 	call putc 
      0007C1 AE 17 FF         [ 2] 1221 6$: ldw x,#STACK_EMPTY 
      0007C4 94               [ 1] 1222     ldw sp,x
      0007C5                       1223 warm_start:
      0007C5 CD 05 8B         [ 4] 1224 	call warm_init
                                   1225 ;----------------------------
                                   1226 ;   BASIC interpreter
                                   1227 ;----------------------------
      0007C8                       1228 cmd_line: ; user interface 
      0007C8 A6 0D            [ 1] 1229 	ld a,#CR 
      0007CA CD 02 C1         [ 4] 1230 	call putc 
      0007CD A6 3E            [ 1] 1231 	ld a,#'> 
      0007CF CD 02 C1         [ 4] 1232 	call putc
      0007D2 CD 21 54         [ 4] 1233 	call readln
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0007D5 72 5D 00 03      [ 1] 1234 	tnz count 
      0007D9 27 ED            [ 1] 1235 	jreq cmd_line
      0007DB CD 27 2D         [ 4] 1236 	call compile
                                   1237 ; if text begin with a line number
                                   1238 ; the compiler set count to zero    
                                   1239 ; so code is not interpreted
      0007DE 72 5D 00 03      [ 1] 1240 	tnz count 
      0007E2 27 E4            [ 1] 1241 	jreq cmd_line
                                   1242 
                                   1243 ; if direct command 
                                   1244 ; it's ready to interpret 
                                   1245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1246 ;; This is the interpreter loop
                                   1247 ;; for each BASIC code line. 
                                   1248 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0007E4                       1249 interpreter: 
      0007E4 C6 00 01         [ 1] 1250 	ld a,in 
      0007E7 C1 00 03         [ 1] 1251 	cp a,count 
      0007EA 2B 1D            [ 1] 1252 	jrmi interp_loop
      0007EC                       1253 next_line:
      0007EC 72 01 00 20 D7   [ 2] 1254 	btjf flags, #FRUN, cmd_line
      0007F1 CE 00 04         [ 2] 1255 	ldw x,basicptr
      0007F4 72 BB 00 00      [ 2] 1256 	addw x,in.w 
      0007F8 C3 00 1B         [ 2] 1257 	cpw x,txtend 
      0007FB 2A C8            [ 1] 1258 	jrpl warm_start
      0007FD CF 00 04         [ 2] 1259 	ldw basicptr,x ; start of next line  
      000800 E6 02            [ 1] 1260 	ld a,(2,x)
      000802 C7 00 03         [ 1] 1261 	ld count,a 
      000805 35 03 00 01      [ 1] 1262 	mov in,#3 ; skip first 3 bytes of line 
      000809                       1263 interp_loop: 
      000809 CD 08 30         [ 4] 1264 	call next_token
      00080C A1 00            [ 1] 1265 	cp a,#TK_NONE 
      00080E 27 DC            [ 1] 1266 	jreq next_line 
      000810 A1 80            [ 1] 1267 	cp a,#TK_CMD
      000812 26 03            [ 1] 1268 	jrne 1$
      000814 FD               [ 4] 1269 	call (x) 
      000815 20 F2            [ 2] 1270 	jra interp_loop 
      000817                       1271 1$:	 
      000817 A1 85            [ 1] 1272 	cp a,#TK_VAR
      000819 26 05            [ 1] 1273 	jrne 2$
      00081B CD 0E 50         [ 4] 1274 	call let_var  
      00081E 20 E9            [ 2] 1275 	jra interp_loop 
      000820                       1276 2$:	
      000820 A1 06            [ 1] 1277 	cp a,#TK_ARRAY 
      000822 26 05            [ 1] 1278 	jrne 3$
      000824 CD 0E 4D         [ 4] 1279 	call let_array 
      000827 20 E0            [ 2] 1280 	jra interp_loop
      000829                       1281 3$:	
      000829 A1 0B            [ 1] 1282 	cp a,#TK_COLON 
      00082B 27 DC            [ 1] 1283 	jreq interp_loop 
      00082D CC 07 41         [ 2] 1284 	jp syntax_error 
                                   1285 
                                   1286 		
                                   1287 ;--------------------------
                                   1288 ; extract next token from
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1289 ; token list 
                                   1290 ; basicptr -> base address 
                                   1291 ; in  -> offset in list array 
                                   1292 ; output:
                                   1293 ;   A 		token attribute
                                   1294 ;   X 		token value if there is one
                                   1295 ;----------------------------------------
      000830                       1296 next_token::
      000830 5F               [ 1] 1297 	clrw x 
      000831 C6 00 01         [ 1] 1298 	ld a,in 
                                   1299 ; don't replace sub by "cp a,count" 
                                   1300 ; if end of line must return with A=0   	
      000834 C0 00 03         [ 1] 1301 	sub a,count 
      000837 27 44            [ 1] 1302 	jreq 9$ ; end of line 
      000839                       1303 0$: 
      000839 55 00 01 00 02   [ 1] 1304 	mov in.saved,in ; in case "_unget_token" needed 
      00083E 90 CE 00 04      [ 2] 1305 	ldw y,basicptr 
      000842 72 B9 00 00      [ 2] 1306 	addw y,in.w 
      000846 90 F6            [ 1] 1307 	ld a,(y)
      000848 90 5C            [ 1] 1308 	incw y   
      00084A 4D               [ 1] 1309 	tnz a 
      00084B 2B 1B            [ 1] 1310 	jrmi 4$
      00084D A1 06            [ 1] 1311 	cp a,#TK_ARRAY
      00084F 2A 24            [ 1] 1312 	jrpl 7$  ; no attribute for these
      000851                       1313 1$: ; 
      000851 A1 03            [ 1] 1314 	cp a,#TK_CHAR
      000853 26 06            [ 1] 1315 	jrne 2$
      000855 41               [ 1] 1316 	exg a,xl
      000856 90 F6            [ 1] 1317 	ld a,(y)
      000858 41               [ 1] 1318 	exg a,xl  
      000859 20 18            [ 2] 1319 	jra 6$ 
      00085B A1 02            [ 1] 1320 2$:	cp a,#TK_QSTR 
      00085D 26 16            [ 1] 1321 	jrne 7$
      00085F 93               [ 1] 1322 	ldw x,y 
                                   1323 ; move pointer after string 
      000860 90 7D            [ 1] 1324 3$:	tnz (y)
      000862 27 0F            [ 1] 1325 	jreq 6$
      000864 90 5C            [ 1] 1326 	incw y 
      000866 20 F8            [ 2] 1327 	jra 3$
      000868                       1328 4$: 
      000868 93               [ 1] 1329 	ldw x,y 
      000869 FE               [ 2] 1330 	ldw x,(x)
      00086A A1 84            [ 1] 1331 	cp a,#TK_INTGR
      00086C 2A 03            [ 1] 1332 	jrpl 5$
      00086E DE 1F 55         [ 2] 1333 	ldw x,(code_addr,x) 
      000871 90 5C            [ 1] 1334 5$:	incw y 
      000873 90 5C            [ 1] 1335 6$:	incw y 
      000875 72 B2 00 04      [ 2] 1336 7$:	subw y,basicptr 
      000879 90 CF 00 00      [ 2] 1337 	ldw in.w,y 
      00087D                       1338 9$: 
      00087D 81               [ 4] 1339 	ret	
                                   1340 
                                   1341 ;-----------------------------------
                                   1342 ; print a 16 bit integer 
                                   1343 ; using variable 'base' as conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1344 ; format.
                                   1345 ; input:
                                   1346 ;   X       integer to print 
                                   1347 ;   'base'    conversion base 
                                   1348 ; output:
                                   1349 ;   none 
                                   1350 ;-----------------------------------
      00087E                       1351 print_int:
      00087E 72 5F 00 0B      [ 1] 1352 	clr acc24 
      000882 CF 00 0C         [ 2] 1353 	ldw acc16,x 
      000885 72 0F 00 0C 04   [ 2] 1354 	btjf acc16,#7,prti24
      00088A 72 53 00 0B      [ 1] 1355 	cpl acc24 
                                   1356 	
                                   1357 ;------------------------------------
                                   1358 ; print integer in acc24 
                                   1359 ; input:
                                   1360 ;	acc24 		integer to print 
                                   1361 ;	'base' 		numerical base for conversion 
                                   1362 ;   'tab_width' field width 
                                   1363 ;  output:
                                   1364 ;    A          string length
                                   1365 ;------------------------------------
      00088E                       1366 prti24:
      00088E CD 08 9A         [ 4] 1367     call itoa  ; conversion entier en  .asciz
      000891 CD 27 CC         [ 4] 1368 	call right_align  
      000894 88               [ 1] 1369 	push a 
      000895 CD 20 4F         [ 4] 1370 	call puts
      000898 84               [ 1] 1371 	pop a 
      000899 81               [ 4] 1372     ret	
                                   1373 
                                   1374 ;------------------------------------
                                   1375 ; convert integer in acc24 to string
                                   1376 ; input:
                                   1377 ;   'base'	conversion base 
                                   1378 ;	acc24	integer to convert
                                   1379 ; output:
                                   1380 ;   X  		pointer to first char of string
                                   1381 ;   A       string length
                                   1382 ;------------------------------------
                           000001  1383 	SIGN=1  ; integer sign 
                           000002  1384 	LEN=2 
                           000003  1385 	PSTR=3
                           000004  1386 	VSIZE=4 ;locals size
      00089A                       1387 itoa::
      00089A                       1388 	_vars VSIZE
      00089A 52 04            [ 2]    1     sub sp,#VSIZE 
      00089C 0F 02            [ 1] 1389 	clr (LEN,sp) ; string length  
      00089E 0F 01            [ 1] 1390 	clr (SIGN,sp)    ; sign
      0008A0 C6 00 0A         [ 1] 1391 	ld a,base 
      0008A3 A1 0A            [ 1] 1392 	cp a,#10
      0008A5 26 0A            [ 1] 1393 	jrne 1$
                                   1394 	; base 10 string display with negative sign if bit 23==1
      0008A7 72 0F 00 0B 05   [ 2] 1395 	btjf acc24,#7,1$
      0008AC 03 01            [ 1] 1396 	cpl (SIGN,sp)
      0008AE CD 09 67         [ 4] 1397 	call neg_acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008B1                       1398 1$:
                                   1399 ; initialize string pointer 
      0008B1 AE 16 90         [ 2] 1400 	ldw x,#tib 
      0008B4 1C 00 50         [ 2] 1401 	addw x,#TIB_SIZE
      0008B7 5A               [ 2] 1402 	decw x 
      0008B8 7F               [ 1] 1403 	clr (x)
      0008B9 5A               [ 2] 1404 	decw x 
      0008BA A6 20            [ 1] 1405 	ld a,#32
      0008BC F7               [ 1] 1406 	ld (x),a
      0008BD 0C 02            [ 1] 1407 	inc (LEN,sp)
      0008BF                       1408 itoa_loop:
      0008BF C6 00 0A         [ 1] 1409     ld a,base
      0008C2 1F 03            [ 2] 1410 	ldw (PSTR,sp),x 
      0008C4 CD 09 05         [ 4] 1411     call divu24_8 ; acc24/A 
      0008C7 1E 03            [ 2] 1412 	ldw x,(PSTR,sp)
      0008C9 AB 30            [ 1] 1413     add a,#'0  ; remainder of division
      0008CB A1 3A            [ 1] 1414     cp a,#'9+1
      0008CD 2B 02            [ 1] 1415     jrmi 2$
      0008CF AB 07            [ 1] 1416     add a,#7 
      0008D1                       1417 2$:	
      0008D1 5A               [ 2] 1418 	decw x
      0008D2 F7               [ 1] 1419     ld (x),a
      0008D3 0C 02            [ 1] 1420 	inc (LEN,sp)
                                   1421 	; if acc24==0 conversion done
      0008D5 C6 00 0B         [ 1] 1422 	ld a,acc24
      0008D8 CA 00 0C         [ 1] 1423 	or a,acc16
      0008DB CA 00 0D         [ 1] 1424 	or a,acc8
      0008DE 26 DF            [ 1] 1425     jrne itoa_loop
                                   1426 	;conversion done, next add '$' or '-' as required
      0008E0 C6 00 0A         [ 1] 1427 	ld a,base 
      0008E3 A1 10            [ 1] 1428 	cp a,#16
      0008E5 27 08            [ 1] 1429 	jreq 8$
      0008E7 7B 01            [ 1] 1430 	ld a,(SIGN,sp)
      0008E9 27 15            [ 1] 1431     jreq 10$
      0008EB A6 2D            [ 1] 1432     ld a,#'-
      0008ED 20 0D            [ 2] 1433 	jra 9$ 
                                   1434 ; don't print more than 4 digits
                                   1435 ; in hexadecimal to avoid '-' sign 
                                   1436 ; extend display 	
      0008EF 7B 02            [ 1] 1437 8$: ld a,(LEN,sp) 
      0008F1 A1 06            [ 1] 1438 	cp a,#6 
      0008F3 2B 05            [ 1] 1439 	jrmi 81$
      0008F5 5C               [ 1] 1440 	incw x
      0008F6 0A 02            [ 1] 1441 	dec (LEN,sp)
      0008F8 20 F5            [ 2] 1442 	jra 8$
      0008FA                       1443 81$:	
      0008FA A6 24            [ 1] 1444 	ld a,#'$ 
      0008FC 5A               [ 2] 1445 9$: decw x
      0008FD F7               [ 1] 1446     ld (x),a
      0008FE 0C 02            [ 1] 1447 	inc (LEN,sp)
      000900                       1448 10$:
      000900 7B 02            [ 1] 1449 	ld a,(LEN,sp)
      000902                       1450 	_drop VSIZE
      000902 5B 04            [ 2]    1     addw sp,#VSIZE 
      000904 81               [ 4] 1451 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1452 
                                   1453 ;-------------------------------------
                                   1454 ; divide uint24_t by uint8_t
                                   1455 ; used to convert uint24_t to string
                                   1456 ; input:
                                   1457 ;	acc24	dividend
                                   1458 ;   A 		divisor
                                   1459 ; output:
                                   1460 ;   acc24	quotient
                                   1461 ;   A		remainder
                                   1462 ;------------------------------------- 
                                   1463 ; offset  on sp of arguments and locals
                           000001  1464 	U8   = 1   ; divisor on stack
                           000001  1465 	VSIZE =1
      000905                       1466 divu24_8:
      000905 89               [ 2] 1467 	pushw x ; save x
      000906 88               [ 1] 1468 	push a 
                                   1469 	; ld dividend UU:MM bytes in X
      000907 C6 00 0B         [ 1] 1470 	ld a, acc24
      00090A 95               [ 1] 1471 	ld xh,a
      00090B C6 00 0C         [ 1] 1472 	ld a,acc24+1
      00090E 97               [ 1] 1473 	ld xl,a
      00090F 7B 01            [ 1] 1474 	ld a,(U8,SP) ; divisor
      000911 62               [ 2] 1475 	div x,a ; UU:MM/U8
      000912 88               [ 1] 1476 	push a  ;save remainder
      000913 9E               [ 1] 1477 	ld a,xh
      000914 C7 00 0B         [ 1] 1478 	ld acc24,a
      000917 9F               [ 1] 1479 	ld a,xl
      000918 C7 00 0C         [ 1] 1480 	ld acc24+1,a
      00091B 84               [ 1] 1481 	pop a
      00091C 95               [ 1] 1482 	ld xh,a
      00091D C6 00 0D         [ 1] 1483 	ld a,acc24+2
      000920 97               [ 1] 1484 	ld xl,a
      000921 7B 01            [ 1] 1485 	ld a,(U8,sp) ; divisor
      000923 62               [ 2] 1486 	div x,a  ; R:LL/U8
      000924 6B 01            [ 1] 1487 	ld (U8,sp),a ; save remainder
      000926 9F               [ 1] 1488 	ld a,xl
      000927 C7 00 0D         [ 1] 1489 	ld acc24+2,a
      00092A 84               [ 1] 1490 	pop a
      00092B 85               [ 2] 1491 	popw x
      00092C 81               [ 4] 1492 	ret
                                   1493 
                                   1494 ;--------------------------------------
                                   1495 ; unsigned multiply uint24_t by uint8_t
                                   1496 ; use to convert numerical string to uint24_t
                                   1497 ; input:
                                   1498 ;	acc24	uint24_t 
                                   1499 ;   A		uint8_t
                                   1500 ; output:
                                   1501 ;   acc24   A*acc24
                                   1502 ;-------------------------------------
                                   1503 ; local variables offset  on sp
                           000003  1504 	U8   = 3   ; A pushed on stack
                           000002  1505 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1506 	OVFH = 1  ; multiplication overflow high byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                           000003  1507 	VSIZE = 3
      00092D                       1508 mulu24_8:
      00092D 89               [ 2] 1509 	pushw x    ; save X
                                   1510 	; local variables
      00092E 88               [ 1] 1511 	push a     ; U8
      00092F 5F               [ 1] 1512 	clrw x     ; initialize overflow to 0
      000930 89               [ 2] 1513 	pushw x    ; multiplication overflow
                                   1514 ; multiply low byte.
      000931 C6 00 0D         [ 1] 1515 	ld a,acc24+2
      000934 97               [ 1] 1516 	ld xl,a
      000935 7B 03            [ 1] 1517 	ld a,(U8,sp)
      000937 42               [ 4] 1518 	mul x,a
      000938 9F               [ 1] 1519 	ld a,xl
      000939 C7 00 0D         [ 1] 1520 	ld acc24+2,a
      00093C 9E               [ 1] 1521 	ld a, xh
      00093D 6B 02            [ 1] 1522 	ld (OVFL,sp),a
                                   1523 ; multipy middle byte
      00093F C6 00 0C         [ 1] 1524 	ld a,acc24+1
      000942 97               [ 1] 1525 	ld xl,a
      000943 7B 03            [ 1] 1526 	ld a, (U8,sp)
      000945 42               [ 4] 1527 	mul x,a
                                   1528 ; add overflow to this partial product
      000946 72 FB 01         [ 2] 1529 	addw x,(OVFH,sp)
      000949 9F               [ 1] 1530 	ld a,xl
      00094A C7 00 0C         [ 1] 1531 	ld acc24+1,a
      00094D 4F               [ 1] 1532 	clr a
      00094E A9 00            [ 1] 1533 	adc a,#0
      000950 6B 01            [ 1] 1534 	ld (OVFH,sp),a
      000952 9E               [ 1] 1535 	ld a,xh
      000953 6B 02            [ 1] 1536 	ld (OVFL,sp),a
                                   1537 ; multiply most signficant byte	
      000955 C6 00 0B         [ 1] 1538 	ld a, acc24
      000958 97               [ 1] 1539 	ld xl, a
      000959 7B 03            [ 1] 1540 	ld a, (U8,sp)
      00095B 42               [ 4] 1541 	mul x,a
      00095C 72 FB 01         [ 2] 1542 	addw x, (OVFH,sp)
      00095F 9F               [ 1] 1543 	ld a, xl
      000960 C7 00 0B         [ 1] 1544 	ld acc24,a
      000963 5B 03            [ 2] 1545     addw sp,#VSIZE
      000965 85               [ 2] 1546 	popw x
      000966 81               [ 4] 1547 	ret
                                   1548 
                                   1549 ;------------------------------------
                                   1550 ;  two's complement acc24
                                   1551 ;  input:
                                   1552 ;		acc24 variable
                                   1553 ;  output:
                                   1554 ;		acc24 variable
                                   1555 ;-------------------------------------
      000967                       1556 neg_acc24:
      000967 72 53 00 0D      [ 1] 1557 	cpl acc24+2
      00096B 72 53 00 0C      [ 1] 1558 	cpl acc24+1
      00096F 72 53 00 0B      [ 1] 1559 	cpl acc24
      000973 A6 01            [ 1] 1560 	ld a,#1
      000975 CB 00 0D         [ 1] 1561 	add a,acc24+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000978 C7 00 0D         [ 1] 1562 	ld acc24+2,a
      00097B 4F               [ 1] 1563 	clr a
      00097C C9 00 0C         [ 1] 1564 	adc a,acc24+1
      00097F C7 00 0C         [ 1] 1565 	ld acc24+1,a 
      000982 4F               [ 1] 1566 	clr a 
      000983 C9 00 0B         [ 1] 1567 	adc a,acc24 
      000986 C7 00 0B         [ 1] 1568 	ld acc24,a 
      000989 81               [ 4] 1569 	ret
                                   1570 
                                   1571 
                                   1572 
                                   1573 
                                   1574 ;------------------------------------
                                   1575 ; convert alpha to uppercase
                                   1576 ; input:
                                   1577 ;    a  character to convert
                                   1578 ; output:
                                   1579 ;    a  uppercase character
                                   1580 ;------------------------------------
      00098A                       1581 to_upper::
      00098A A1 61            [ 1] 1582 	cp a,#'a
      00098C 2A 01            [ 1] 1583 	jrpl 1$
      00098E 81               [ 4] 1584 0$:	ret
      00098F A1 7A            [ 1] 1585 1$: cp a,#'z	
      000991 22 FB            [ 1] 1586 	jrugt 0$
      000993 A0 20            [ 1] 1587 	sub a,#32
      000995 81               [ 4] 1588 	ret
                                   1589 	
                                   1590 ;------------------------------------
                                   1591 ; convert pad content in integer
                                   1592 ; input:
                                   1593 ;    x		.asciz to convert
                                   1594 ; output:
                                   1595 ;    acc24      int24_t
                                   1596 ;------------------------------------
                                   1597 	; local variables
                           000001  1598 	SIGN=1 ; 1 byte, 
                           000002  1599 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1600 	TEMP=3 ; 1 byte, temporary storage
                           000003  1601 	VSIZE=3 ; 3 bytes reserved for local storage
      000996                       1602 atoi24::
      000996 89               [ 2] 1603 	pushw x 
      000997                       1604 	_vars VSIZE
      000997 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1605 	; acc24=0 
      000999 72 5F 00 0B      [ 1] 1606 	clr acc24    
      00099D 72 5F 00 0C      [ 1] 1607 	clr acc16
      0009A1 72 5F 00 0D      [ 1] 1608 	clr acc8 
      0009A5 0F 01            [ 1] 1609 	clr (SIGN,sp)
      0009A7 A6 0A            [ 1] 1610 	ld a,#10
      0009A9 6B 02            [ 1] 1611 	ld (BASE,sp),a ; default base decimal
      0009AB F6               [ 1] 1612 	ld a,(x)
      0009AC 27 47            [ 1] 1613 	jreq 9$  ; completed if 0
      0009AE A1 2D            [ 1] 1614 	cp a,#'-
      0009B0 26 04            [ 1] 1615 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009B2 03 01            [ 1] 1616 	cpl (SIGN,sp)
      0009B4 20 08            [ 2] 1617 	jra 2$
      0009B6 A1 24            [ 1] 1618 1$: cp a,#'$
      0009B8 26 06            [ 1] 1619 	jrne 3$
      0009BA A6 10            [ 1] 1620 	ld a,#16
      0009BC 6B 02            [ 1] 1621 	ld (BASE,sp),a
      0009BE 5C               [ 1] 1622 2$:	incw x
      0009BF F6               [ 1] 1623 	ld a,(x)
      0009C0                       1624 3$:	
      0009C0 A1 61            [ 1] 1625 	cp a,#'a
      0009C2 2B 02            [ 1] 1626 	jrmi 4$
      0009C4 A0 20            [ 1] 1627 	sub a,#32
      0009C6 A1 30            [ 1] 1628 4$:	cp a,#'0
      0009C8 2B 2B            [ 1] 1629 	jrmi 9$
      0009CA A0 30            [ 1] 1630 	sub a,#'0
      0009CC A1 0A            [ 1] 1631 	cp a,#10
      0009CE 2B 06            [ 1] 1632 	jrmi 5$
      0009D0 A0 07            [ 1] 1633 	sub a,#7
      0009D2 11 02            [ 1] 1634 	cp a,(BASE,sp)
      0009D4 2A 1F            [ 1] 1635 	jrpl 9$
      0009D6 6B 03            [ 1] 1636 5$:	ld (TEMP,sp),a
      0009D8 7B 02            [ 1] 1637 	ld a,(BASE,sp)
      0009DA CD 09 2D         [ 4] 1638 	call mulu24_8
      0009DD 7B 03            [ 1] 1639 	ld a,(TEMP,sp)
      0009DF CB 00 0D         [ 1] 1640 	add a,acc24+2
      0009E2 C7 00 0D         [ 1] 1641 	ld acc24+2,a
      0009E5 4F               [ 1] 1642 	clr a
      0009E6 C9 00 0C         [ 1] 1643 	adc a,acc24+1
      0009E9 C7 00 0C         [ 1] 1644 	ld acc24+1,a
      0009EC 4F               [ 1] 1645 	clr a
      0009ED C9 00 0B         [ 1] 1646 	adc a,acc24
      0009F0 C7 00 0B         [ 1] 1647 	ld acc24,a
      0009F3 20 C9            [ 2] 1648 	jra 2$
      0009F5 0D 01            [ 1] 1649 9$:	tnz (SIGN,sp)
      0009F7 27 03            [ 1] 1650     jreq atoi_exit
      0009F9 CD 09 67         [ 4] 1651     call neg_acc24
      0009FC                       1652 atoi_exit: 
      0009FC                       1653 	_drop VSIZE
      0009FC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009FE 85               [ 2] 1654 	popw x ; restore x
      0009FF 81               [ 4] 1655 	ret
                                   1656 
                                   1657 
                                   1658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1659 ;;   TINY BASIC  operators,
                                   1660 ;;   commands and functions 
                                   1661 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1662 
                                   1663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1664 ;;  Arithmetic operators
                                   1665 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1666 
                                   1667 ;debug support
                           000001  1668 DEBUG_PRT=1
                           000001  1669 .if DEBUG_PRT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000001  1670 	REGA=1
                           000002  1671 	SAVEB=2
                           000003  1672 	REGX=3
                           000005  1673 	REGY=5
                           000007  1674 	ACC24=7
                           000009  1675 	VSIZE=9 
      000A00                       1676 printxy:
      000A00                       1677 	_vars VSIZE 
      000A00 52 09            [ 2]    1     sub sp,#VSIZE 
      000A02 6B 01            [ 1] 1678 	ld (REGA,sp),a 
      000A04 C6 00 0A         [ 1] 1679 	ld a,base 
      000A07 6B 02            [ 1] 1680 	ld (SAVEB,sp),a
      000A09 1F 03            [ 2] 1681 	ldw (REGX,sp),x
      000A0B 17 05            [ 2] 1682 	ldw (REGY,sp),y
      000A0D CE 00 0B         [ 2] 1683 	ldw x,acc24 
      000A10 C6 00 0D         [ 1] 1684 	ld a,acc8 
      000A13 1F 07            [ 2] 1685 	ldw (ACC24,sp),x 
      000A15 6B 09            [ 1] 1686 	ld (ACC24+2,sp),a 
      000A17 35 10 00 0A      [ 1] 1687 	mov base,#16 
      000A1B 5F               [ 1] 1688 	clrw x 
      000A1C 7B 01            [ 1] 1689 	ld a,(REGA,sp)
      000A1E 97               [ 1] 1690 	ld xl,a 
      000A1F CD 08 7E         [ 4] 1691 	call print_int
      000A22 A6 20            [ 1] 1692 	ld a,#SPACE 
      000A24 CD 02 C1         [ 4] 1693 	call putc  
      000A27 1E 03            [ 2] 1694 	ldw x,(REGX,sp)
      000A29 CD 08 7E         [ 4] 1695 	call print_int 
      000A2C A6 20            [ 1] 1696 	ld a,#SPACE 
      000A2E CD 02 C1         [ 4] 1697 	call putc  
      000A31 1E 05            [ 2] 1698 	ldw x,(REGY,sp)
      000A33 CD 08 7E         [ 4] 1699 	call print_int 
      000A36 A6 0D            [ 1] 1700 	ld a,#CR 
      000A38 CD 02 C1         [ 4] 1701 	call putc 
      000A3B 7B 09            [ 1] 1702 	ld a,(ACC24+2,sp)
      000A3D 1E 07            [ 2] 1703 	ldw x,(ACC24,sp)
      000A3F CF 00 0B         [ 2] 1704 	ldw acc24,x 
      000A42 C7 00 0D         [ 1] 1705 	ld acc8,a
      000A45 7B 02            [ 1] 1706 	ld a,(SAVEB,sp)
      000A47 C7 00 0A         [ 1] 1707 	ld base,a 
      000A4A 7B 01            [ 1] 1708 	ld a,(REGA,sp)
      000A4C 1E 03            [ 2] 1709 	ldw x,(REGX,sp)
      000A4E 16 05            [ 2] 1710 	ldw y,(REGY,sp)
      000A50                       1711 	_drop VSIZE 
      000A50 5B 09            [ 2]    1     addw sp,#VSIZE 
      000A52 81               [ 4] 1712 	ret 
                                   1713 .endif 
                                   1714 
                                   1715 
                                   1716 ;--------------------------------------
                                   1717 ;  multiply 2 uint16_t return uint32_t
                                   1718 ;  input:
                                   1719 ;     x       uint16_t 
                                   1720 ;     y       uint16_t 
                                   1721 ;  output:
                                   1722 ;     x       product bits 15..0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1723 ;     y       product bits 31..16 
                                   1724 ;---------------------------------------
                           000001  1725 		U1=1  ; uint16_t 
                           000003  1726 		DBL=3 ; uint32_t
                           000006  1727 		VSIZE=6
      000A53                       1728 umstar:
      000A53                       1729 	_vars VSIZE 
      000A53 52 06            [ 2]    1     sub sp,#VSIZE 
      000A55 1F 01            [ 2] 1730 	ldw (U1,sp),x 
                                   1731 ;initialize bits 31..16 of 
                                   1732 ;product to zero 
      000A57 0F 03            [ 1] 1733 	clr (DBL,sp)
      000A59 0F 04            [ 1] 1734 	clr (DBL+1,sp)
                                   1735 ; produc U1L*U2L 
      000A5B 90 9F            [ 1] 1736 	ld a,yl 
      000A5D 42               [ 4] 1737 	mul x,a 
      000A5E 1F 05            [ 2] 1738 	ldw (DBL+2,sp),x
                                   1739 ; product U1H*U2L 
      000A60 7B 01            [ 1] 1740 	ld a,(U1,sp) ; xh 
      000A62 93               [ 1] 1741 	ldw x,y
      000A63 42               [ 4] 1742 	mul x,a 
      000A64 4F               [ 1] 1743 	clr a 
      000A65 72 FB 04         [ 2] 1744 	addw x,(DBL+1,sp) 
      000A68 4F               [ 1] 1745 	clr a 
      000A69 19 03            [ 1] 1746 	adc a,(DBL,sp) 
      000A6B 6B 03            [ 1] 1747 	ld (DBL,sp),a ; bits 23..17 
      000A6D 1F 04            [ 2] 1748 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1749 ; product U1L*U2H
      000A6F 90 5E            [ 1] 1750 	swapw y 
      000A71 93               [ 1] 1751 	ldw x,y
      000A72 7B 02            [ 1] 1752 	ld a,(U1+1,sp)
      000A74 42               [ 4] 1753 	mul x,a
      000A75 72 FB 04         [ 2] 1754 	addw x,(DBL+1,sp)
      000A78 4F               [ 1] 1755 	clr a 
      000A79 19 03            [ 1] 1756 	adc a,(DBL,sp)
      000A7B 6B 03            [ 1] 1757 	ld (DBL,sp),a 
      000A7D 1F 04            [ 2] 1758 	ldw (DBL+1,sp),x 
                                   1759 ; product U1H*U2H 	
      000A7F 7B 01            [ 1] 1760 	ld a,(U1,sp)
      000A81 93               [ 1] 1761 	ldw x,y  
      000A82 42               [ 4] 1762 	mul x,a 
      000A83 72 FB 03         [ 2] 1763 	addw x,(DBL,sp)
      000A86 90 93            [ 1] 1764 	ldw y,x 
      000A88 1E 05            [ 2] 1765 	ldw x,(DBL+2,sp)
      000A8A                       1766 	_drop VSIZE 
      000A8A 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A8C 81               [ 4] 1767 	ret
                                   1768 
                                   1769 
                                   1770 ;-------------------------------------
                                   1771 ; multiply 2 integers
                                   1772 ; input:
                                   1773 ;  	x       n1 
                                   1774 ;   y 		n2 
                                   1775 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1776 ;	X        N1*N2 bits 15..0
                                   1777 ;   Y        N1*N2 bits 31..16 
                                   1778 ;-------------------------------------
                           000001  1779 	SIGN=1
                           000001  1780 	VSIZE=1
      000A8D                       1781 multiply:
      000A8D                       1782 	_vars VSIZE 
      000A8D 52 01            [ 2]    1     sub sp,#VSIZE 
      000A8F 0F 01            [ 1] 1783 	clr (SIGN,sp)
      000A91 9E               [ 1] 1784 	ld a,xh 
      000A92 A4 80            [ 1] 1785 	and a,#0x80
      000A94 2A 03            [ 1] 1786 	jrpl 1$
      000A96 03 01            [ 1] 1787 	cpl (SIGN,sp)
      000A98 50               [ 2] 1788 	negw x 
      000A99                       1789 1$:	
      000A99 90 9E            [ 1] 1790 	ld a,yh
      000A9B A4 80            [ 1] 1791 	and a,#0x80  
      000A9D 2A 04            [ 1] 1792 	jrpl 2$ 
      000A9F 03 01            [ 1] 1793 	cpl (SIGN,sp)
      000AA1 90 50            [ 2] 1794 	negw y 
      000AA3                       1795 2$:	
      000AA3 CD 0A 53         [ 4] 1796 	call umstar
      000AA6 7B 01            [ 1] 1797 	ld a,(SIGN,sp)
      000AA8 27 03            [ 1] 1798 	jreq 3$
      000AAA CD 0A DA         [ 4] 1799 	call dneg 
      000AAD                       1800 3$:	
      000AAD                       1801 	_drop VSIZE 
      000AAD 5B 01            [ 2]    1     addw sp,#VSIZE 
      000AAF 81               [ 4] 1802 	ret
                                   1803 
                                   1804 ;--------------------------------------
                                   1805 ; divide uint32_t/uint16_t
                                   1806 ; return:  quotient and remainder 
                                   1807 ; quotient expected to be uint16_t 
                                   1808 ; input:
                                   1809 ;   DBLDIVDND    on stack 
                                   1810 ;   X            divisor 
                                   1811 ; output:
                                   1812 ;   X            quotient 
                                   1813 ;   Y            remainder 
                                   1814 ;---------------------------------------
                           000003  1815 	VSIZE=3
      000AB0                       1816 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000AB0                       1817 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1818 	; local variables 
                           000001  1819 	DIVISOR=1 
                           000003  1820 	CNTR=3 
      000AB0                       1821 udiv32_16:
      000AB0                       1822 	_vars VSIZE 
      000AB0 52 03            [ 2]    1     sub sp,#VSIZE 
      000AB2 1F 01            [ 2] 1823 	ldw (DIVISOR,sp),x	; save divisor 
      000AB4 1E 08            [ 2] 1824 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000AB6 16 06            [ 2] 1825 	ldw y,(DBLDIVDND,sp) ; bits 31..16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AB8 90 5D            [ 2] 1826 	tnzw y
      000ABA 26 06            [ 1] 1827 	jrne long_division 
      000ABC 16 01            [ 2] 1828 	ldw y,(DIVISOR,sp)
      000ABE 65               [ 2] 1829 	divw x,y
      000ABF                       1830 	_drop VSIZE 
      000ABF 5B 03            [ 2]    1     addw sp,#VSIZE 
      000AC1 81               [ 4] 1831 	ret
      000AC2                       1832 long_division:
      000AC2 51               [ 1] 1833 	exgw x,y ; hi in x, lo in y 
      000AC3 A6 11            [ 1] 1834 	ld a,#17 
      000AC5 6B 03            [ 1] 1835 	ld (CNTR,sp),a
      000AC7                       1836 1$:
      000AC7 13 01            [ 2] 1837 	cpw x,(DIVISOR,sp)
      000AC9 2B 03            [ 1] 1838 	jrmi 2$
      000ACB 72 F0 01         [ 2] 1839 	subw x,(DIVISOR,sp)
      000ACE 8C               [ 1] 1840 2$:	ccf 
      000ACF 90 59            [ 2] 1841 	rlcw y 
      000AD1 59               [ 2] 1842 	rlcw x 
      000AD2 0A 03            [ 1] 1843 	dec (CNTR,sp)
      000AD4 26 F1            [ 1] 1844 	jrne 1$
      000AD6 51               [ 1] 1845 	exgw x,y 
      000AD7                       1846 	_drop VSIZE 
      000AD7 5B 03            [ 2]    1     addw sp,#VSIZE 
      000AD9 81               [ 4] 1847 	ret
                                   1848 
                                   1849 ;-----------------------------
                                   1850 ; negate double int.
                                   1851 ; input:
                                   1852 ;   x     bits 15..0
                                   1853 ;   y     bits 31..16
                                   1854 ; output: 
                                   1855 ;   x     bits 15..0
                                   1856 ;   y     bits 31..16
                                   1857 ;-----------------------------
      000ADA                       1858 dneg:
      000ADA 53               [ 2] 1859 	cplw x 
      000ADB 90 53            [ 2] 1860 	cplw y 
      000ADD 1C 00 01         [ 2] 1861 	addw x,#1 
      000AE0 24 02            [ 1] 1862 	jrnc 1$
      000AE2 90 5C            [ 1] 1863 	incw y 
      000AE4 81               [ 4] 1864 1$: ret 
                                   1865 
                                   1866 
                                   1867 ;--------------------------------
                                   1868 ; sign extend single to double
                                   1869 ; input:
                                   1870 ;   x    int16_t
                                   1871 ; output:
                                   1872 ;   x    int32_t bits 15..0
                                   1873 ;   y    int32_t bits 31..16
                                   1874 ;--------------------------------
      000AE5                       1875 dbl_sign_extend:
      000AE5 90 5F            [ 1] 1876 	clrw y
      000AE7 9E               [ 1] 1877 	ld a,xh 
      000AE8 A4 80            [ 1] 1878 	and a,#0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000AEA 27 02            [ 1] 1879 	jreq 1$
      000AEC 90 53            [ 2] 1880 	cplw y
      000AEE 81               [ 4] 1881 1$: ret 	
                                   1882 
                                   1883 
                                   1884 ;----------------------------------
                                   1885 ;  euclidian divide dbl/n1 
                                   1886 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1887 ; input:
                                   1888 ;    dbl    int32_t on stack 
                                   1889 ;    x 		n1   int16_t  disivor  
                                   1890 ; output:
                                   1891 ;    X      dbl/x  int16_t 
                                   1892 ;    Y      remainder int16_t 
                                   1893 ;----------------------------------
                           000008  1894 	VSIZE=8
      000AEF                       1895 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000AEF                       1896 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000AEF                       1897 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1898 	; local variables
                           000001  1899 	DBLHI=1
                           000003  1900 	DBLLO=3 
                           000005  1901 	SDIVSR=5 ; sign divisor
                           000006  1902 	SQUOT=6 ; sign dividend 
                           000007  1903 	DIVISR=7 ; divisor 
      000AEF                       1904 div32_16:
      000AEF                       1905 	_vars VSIZE 
      000AEF 52 08            [ 2]    1     sub sp,#VSIZE 
      000AF1 0F 05            [ 1] 1906 	clr (SDIVSR,sp)
      000AF3 0F 06            [ 1] 1907 	clr (SQUOT,sp)
                                   1908 ; copy arguments 
      000AF5 16 0B            [ 2] 1909 	ldw y,(DIVDNDHI,sp)
      000AF7 17 01            [ 2] 1910 	ldw (DBLHI,sp),y
      000AF9 16 0D            [ 2] 1911 	ldw y,(DIVDNDLO,sp)
      000AFB 17 03            [ 2] 1912 	ldw (DBLLO,sp),y 
                                   1913 ; check for 0 divisor
      000AFD 5D               [ 2] 1914 	tnzw x 
      000AFE 26 05            [ 1] 1915     jrne 0$
      000B00 A6 04            [ 1] 1916 	ld a,#ERR_DIV0 
      000B02 CC 07 43         [ 2] 1917 	jp tb_error 
                                   1918 ; check divisor sign 	
      000B05 9E               [ 1] 1919 0$:	ld a,xh 
      000B06 A4 80            [ 1] 1920 	and a,#0x80 
      000B08 27 05            [ 1] 1921 	jreq 1$
      000B0A 03 05            [ 1] 1922 	cpl (SDIVSR,sp)
      000B0C 03 06            [ 1] 1923 	cpl (SQUOT,sp)
      000B0E 50               [ 2] 1924 	negw x
      000B0F 1F 07            [ 2] 1925 1$:	ldw (DIVISR,sp),x
                                   1926 ; check dividend sign 	 
      000B11 7B 01            [ 1] 1927  	ld a,(DBLHI,sp) 
      000B13 A4 80            [ 1] 1928 	and a,#0x80 
      000B15 27 0D            [ 1] 1929 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000B17 03 06            [ 1] 1930 	cpl (SQUOT,sp)
      000B19 1E 03            [ 2] 1931 	ldw x,(DBLLO,sp)
      000B1B 16 01            [ 2] 1932 	ldw y,(DBLHI,sp)
      000B1D CD 0A DA         [ 4] 1933 	call dneg 
      000B20 1F 03            [ 2] 1934 	ldw (DBLLO,sp),x 
      000B22 17 01            [ 2] 1935 	ldw (DBLHI,sp),y 
      000B24 1E 07            [ 2] 1936 2$:	ldw x,(DIVISR,sp)
      000B26 CD 0A B0         [ 4] 1937 	call udiv32_16
      000B29 90 5D            [ 2] 1938 	tnzw y 
      000B2B 27 11            [ 1] 1939 	jreq 3$ 
                                   1940 ; x=quotient 
                                   1941 ; y=remainder 
                                   1942 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000B2D 7B 06            [ 1] 1943 	ld a,(SQUOT,sp)
      000B2F 18 05            [ 1] 1944 	xor a,(SDIVSR,sp)
      000B31 27 0B            [ 1] 1945 	jreq 3$
      000B33 5C               [ 1] 1946 	incw x 
      000B34 90 CF 00 0C      [ 2] 1947 	ldw acc16,y 
      000B38 16 07            [ 2] 1948 	ldw y,(DIVISR,sp)
      000B3A 72 B2 00 0C      [ 2] 1949 	subw y,acc16
                                   1950 ; sign quotient
      000B3E 7B 06            [ 1] 1951 3$:	ld a,(SQUOT,sp)
      000B40 27 01            [ 1] 1952 	jreq 4$
      000B42 50               [ 2] 1953 	negw x 
      000B43                       1954 4$:	
      000B43                       1955 	_drop VSIZE 
      000B43 5B 08            [ 2]    1     addw sp,#VSIZE 
      000B45 81               [ 4] 1956 	ret 
                                   1957 
                                   1958 
                                   1959 
                                   1960 ;----------------------------------
                                   1961 ; division x/y 
                                   1962 ; input:
                                   1963 ;    X       dividend
                                   1964 ;    Y       divisor 
                                   1965 ; output:
                                   1966 ;    X       quotient
                                   1967 ;    Y       remainder 
                                   1968 ;-----------------------------------
                           000004  1969 	VSIZE=4 
                                   1970 	; local variables 
                           000001  1971 	DBLHI=1
                           000003  1972 	DBLLO=3
      000B46                       1973 divide: 
      000B46                       1974 	_vars VSIZE 
      000B46 52 04            [ 2]    1     sub sp,#VSIZE 
      000B48 90 CF 00 0C      [ 2] 1975 	ldw acc16,y
      000B4C CD 0A E5         [ 4] 1976 	call dbl_sign_extend
      000B4F 1F 03            [ 2] 1977 	ldw (DBLLO,sp),x 
      000B51 17 01            [ 2] 1978 	ldw (DBLHI,sp),y 
      000B53 CE 00 0C         [ 2] 1979 	ldw x,acc16 
      000B56 CD 0A EF         [ 4] 1980 	call div32_16 
      000B59                       1981 	_drop VSIZE 
      000B59 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B5B 81               [ 4] 1982 	ret
                                   1983 
                                   1984 
                                   1985 ;----------------------------------
                                   1986 ;  remainder resulting from euclidian 
                                   1987 ;  division of x/y 
                                   1988 ; input:
                                   1989 ;   x   	dividend int16_t 
                                   1990 ;   y 		divisor int16_t
                                   1991 ; output:
                                   1992 ;   X       n1%n2 
                                   1993 ;----------------------------------
      000B5C                       1994 modulo:
      000B5C CD 0B 46         [ 4] 1995 	call divide
      000B5F 93               [ 1] 1996 	ldw x,y 
      000B60 81               [ 4] 1997 	ret 
                                   1998 
                                   1999 ;----------------------------------
                                   2000 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2001 ; return expr1*expr2/expr3 
                                   2002 ; product result is int32_t and 
                                   2003 ; divisiont is int32_t/int16_t
                                   2004 ;----------------------------------
                           000004  2005 	DBL_SIZE=4 
      000B61                       2006 muldiv:
      000B61 CD 0B D7         [ 4] 2007 	call func_args 
      000B64 A1 03            [ 1] 2008 	cp a,#3 
      000B66 27 03            [ 1] 2009 	jreq 1$
      000B68 CC 07 41         [ 2] 2010 	jp syntax_error
      000B6B                       2011 1$: 
      000B6B 1E 05            [ 2] 2012 	ldw x,(5,sp) ; expr1
      000B6D 16 03            [ 2] 2013 	ldw y,(3,sp) ; expr2
      000B6F CD 0A 8D         [ 4] 2014 	call multiply 
      000B72 1F 05            [ 2] 2015 	ldw (5,sp),x  ;int32_t 15..0
      000B74 17 03            [ 2] 2016 	ldw (3,sp),y  ;int32_t 31..16
      000B76 85               [ 2] 2017 	popw x        ; expr3 
      000B77 CD 0A EF         [ 4] 2018 	call div32_16 ; int32_t/expr3 
      000B7A                       2019 	_drop DBL_SIZE
      000B7A 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000B7C 81               [ 4] 2020 	ret 
                                   2021 
                                   2022 
                                   2023 ;---------------------------------
                                   2024 ; dictionary search 
                                   2025 ; input:
                                   2026 ;	X 		dictionary entry point, name field  
                                   2027 ;   y		.asciz name to search 
                                   2028 ; output:
                                   2029 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2030 ;  X		cmd_index
                                   2031 ;---------------------------------
                           000001  2032 	NLEN=1 ; cmd length 
                           000002  2033 	XSAVE=2
                           000004  2034 	YSAVE=4
                           000005  2035 	VSIZE=5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000B7D                       2036 search_dict::
      000B7D                       2037 	_vars VSIZE 
      000B7D 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2038 
      000B7F 17 04            [ 2] 2039 	ldw (YSAVE,sp),y 
      000B81                       2040 search_next:
      000B81 1F 02            [ 2] 2041 	ldw (XSAVE,sp),x 
                                   2042 ; get name length in dictionary	
      000B83 F6               [ 1] 2043 	ld a,(x)
      000B84 A4 0F            [ 1] 2044 	and a,#0xf 
      000B86 6B 01            [ 1] 2045 	ld (NLEN,sp),a  
      000B88 16 04            [ 2] 2046 	ldw y,(YSAVE,sp) ; name pointer 
      000B8A 5C               [ 1] 2047 	incw x 
      000B8B                       2048 cp_loop:
      000B8B 90 F6            [ 1] 2049 	ld a,(y)
      000B8D 27 1B            [ 1] 2050 	jreq str_match 
      000B8F 0D 01            [ 1] 2051 	tnz (NLEN,sp)
      000B91 27 0A            [ 1] 2052 	jreq no_match  
      000B93 F1               [ 1] 2053 	cp a,(x)
      000B94 26 07            [ 1] 2054 	jrne no_match 
      000B96 90 5C            [ 1] 2055 	incw y 
      000B98 5C               [ 1] 2056 	incw x
      000B99 0A 01            [ 1] 2057 	dec (NLEN,sp)
      000B9B 20 EE            [ 2] 2058 	jra cp_loop 
      000B9D                       2059 no_match:
      000B9D 1E 02            [ 2] 2060 	ldw x,(XSAVE,sp) 
      000B9F 1D 00 02         [ 2] 2061 	subw x,#2 ; move X to link field
      000BA2 4B 00            [ 1] 2062 	push #TK_NONE 
      000BA4 FE               [ 2] 2063 	ldw x,(x) ; next word link 
      000BA5 84               [ 1] 2064 	pop a ; TK_NONE 
      000BA6 27 1F            [ 1] 2065 	jreq search_exit  ; not found  
                                   2066 ;try next 
      000BA8 20 D7            [ 2] 2067 	jra search_next
      000BAA                       2068 str_match:
      000BAA 1E 02            [ 2] 2069 	ldw x,(XSAVE,sp)
      000BAC F6               [ 1] 2070 	ld a,(X)
      000BAD 6B 01            [ 1] 2071 	ld (NLEN,sp),a ; needed to test keyword type  
      000BAF A4 0F            [ 1] 2072 	and a,#0xf 
                                   2073 ; move x to procedure address field 	
      000BB1 4C               [ 1] 2074 	inc a 
      000BB2 C7 00 0D         [ 1] 2075 	ld acc8,a 
      000BB5 72 5F 00 0C      [ 1] 2076 	clr acc16 
      000BB9 72 BB 00 0C      [ 2] 2077 	addw x,acc16 
      000BBD FE               [ 2] 2078 	ldw x,(x) ; routine index  
                                   2079 ;determine keyword type bits 7:6 
      000BBE 7B 01            [ 1] 2080 	ld a,(NLEN,sp)
      000BC0 4E               [ 1] 2081 	swap a 
      000BC1 A4 0C            [ 1] 2082 	and a,#0xc
      000BC3 44               [ 1] 2083 	srl a
      000BC4 44               [ 1] 2084 	srl a 
      000BC5 AB 80            [ 1] 2085 	add a,#128
      000BC7                       2086 search_exit: 
      000BC7                       2087 	_drop VSIZE 	 
      000BC7 5B 05            [ 2]    1     addw sp,#VSIZE 
      000BC9 81               [ 4] 2088 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2089 
                                   2090 ;---------------------
                                   2091 ; check if next token
                                   2092 ;  is of expected type 
                                   2093 ; input:
                                   2094 ;   A 		 expected token attribute
                                   2095 ;  ouput:
                                   2096 ;   none     if fail call syntax_error 
                                   2097 ;--------------------
      000BCA                       2098 expect:
      000BCA 88               [ 1] 2099 	push a 
      000BCB CD 08 30         [ 4] 2100 	call next_token 
      000BCE 11 01            [ 1] 2101 	cp a,(1,sp)
      000BD0 27 03            [ 1] 2102 	jreq 1$
      000BD2 CC 07 41         [ 2] 2103 	jp syntax_error
      000BD5 84               [ 1] 2104 1$: pop a 
      000BD6 81               [ 4] 2105 	ret 
                                   2106 
                                   2107 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2108 ; parse arguments list 
                                   2109 ; between ()
                                   2110 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD7                       2111 func_args:
      000BD7 A6 07            [ 1] 2112 	ld a,#TK_LPAREN 
      000BD9 CD 0B CA         [ 4] 2113 	call expect 
                                   2114 ; expected to continue in arg_list 
                                   2115 ; caller must check for TK_RPAREN 
                                   2116 
                                   2117 ;-------------------------------
                                   2118 ; parse embedded BASIC routines 
                                   2119 ; arguments list.
                                   2120 ; arg_list::=  rel[','rel]*
                                   2121 ; all arguments are of integer type
                                   2122 ; and pushed on stack 
                                   2123 ; input:
                                   2124 ;   none
                                   2125 ; output:
                                   2126 ;   stack{n}   arguments pushed on stack
                                   2127 ;   A 	number of arguments pushed on stack  
                                   2128 ;--------------------------------
      000BDC                       2129 arg_list:
      000BDC 4B 00            [ 1] 2130 	push #0  
      000BDE CD 0D 24         [ 4] 2131 1$: call relation
      000BE1 A1 00            [ 1] 2132 	cp a,#TK_NONE 
      000BE3 27 20            [ 1] 2133 	jreq 5$
      000BE5 A1 84            [ 1] 2134 	cp a,#TK_INTGR
      000BE7 26 13            [ 1] 2135 	jrne 4$
      000BE9                       2136 3$: 
                                   2137 ; swap return address with argument
      000BE9 84               [ 1] 2138 	pop a ; arg_count
      000BEA 90 85            [ 2] 2139 	popw y ; return address 
      000BEC 89               [ 2] 2140 	pushw x ; new argument 
      000BED 90 89            [ 2] 2141 	pushw y 
      000BEF 4C               [ 1] 2142     inc a
      000BF0 88               [ 1] 2143 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000BF1 CD 08 30         [ 4] 2144 	call next_token 
      000BF4 A1 09            [ 1] 2145 	cp a,#TK_COMMA 
      000BF6 27 E6            [ 1] 2146 	jreq 1$ 
      000BF8 A1 00            [ 1] 2147 	cp a,#TK_NONE 
      000BFA 27 09            [ 1] 2148 	jreq 5$ 
      000BFC A1 08            [ 1] 2149 4$:	cp a,#TK_RPAREN 
      000BFE 27 05            [ 1] 2150 	jreq 5$
      000C00                       2151 	_unget_token 
      000C00 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C05 84               [ 1] 2152 5$:	pop a  
      000C06 81               [ 4] 2153 	ret 
                                   2154 
                                   2155 ;--------------------------------
                                   2156 ;   BASIC commnands 
                                   2157 ;--------------------------------
                                   2158 
                                   2159 ;--------------------------------
                                   2160 ;  arithmetic and relational 
                                   2161 ;  routines
                                   2162 ;  operators precedence
                                   2163 ;  highest to lowest
                                   2164 ;  operators on same row have 
                                   2165 ;  same precedence and are executed
                                   2166 ;  from left to right.
                                   2167 ;	'*','/','%'
                                   2168 ;   '-','+'
                                   2169 ;   '=','>','<','>=','<=','<>','><'
                                   2170 ;   '<>' and '><' are equivalent for not equal.
                                   2171 ;--------------------------------
                                   2172 
                                   2173 ;---------------------
                                   2174 ; return array element
                                   2175 ; address from @(expr)
                                   2176 ; input:
                                   2177 ;   A 		TK_ARRAY
                                   2178 ; output:
                                   2179 ;   A 		TK_INTGR
                                   2180 ;	X 		element address 
                                   2181 ;----------------------
      000C07                       2182 get_array_element:
      000C07 CD 0B D7         [ 4] 2183 	call func_args 
      000C0A A1 01            [ 1] 2184 	cp a,#1
      000C0C 27 03            [ 1] 2185 	jreq 1$
      000C0E CC 07 41         [ 2] 2186 	jp syntax_error
      000C11 85               [ 2] 2187 1$: popw x 
                                   2188 	; check for bounds 
      000C12 C3 00 1E         [ 2] 2189 	cpw x,array_size 
      000C15 23 05            [ 2] 2190 	jrule 3$
                                   2191 ; bounds {1..array_size}	
      000C17 A6 0A            [ 1] 2192 2$: ld a,#ERR_BAD_VALUE 
      000C19 CC 07 43         [ 2] 2193 	jp tb_error 
      000C1C 5D               [ 2] 2194 3$: tnzw  x
      000C1D 27 F8            [ 1] 2195 	jreq 2$ 
      000C1F 58               [ 2] 2196 	sllw x 
      000C20 89               [ 2] 2197 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000C21 AE 16 90         [ 2] 2198 	ldw x,#tib
      000C24 72 F0 01         [ 2] 2199 	subw x,(1,sp)
      000C27                       2200 	_drop 2   
      000C27 5B 02            [ 2]    1     addw sp,#2 
      000C29 A6 84            [ 1] 2201 	ld a,#TK_INTGR
      000C2B 81               [ 4] 2202 	ret 
                                   2203 
                                   2204 
                                   2205 ;***********************************
                                   2206 ;   expression parse,execute 
                                   2207 ;***********************************
                                   2208 ;-----------------------------------
                                   2209 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2210 ;			 integer | function |
                                   2211 ;			 '('relation')' 
                                   2212 ; output:
                                   2213 ;   A    token attribute 
                                   2214 ;   X 	 integer
                                   2215 ; ---------------------------------
                           000001  2216 	NEG=1
                           000001  2217 	VSIZE=1
      000C2C                       2218 factor:
      000C2C                       2219 	_vars VSIZE 
      000C2C 52 01            [ 2]    1     sub sp,#VSIZE 
      000C2E CD 08 30         [ 4] 2220 	call next_token
      000C31 A1 02            [ 1] 2221 	cp a,#CMD_END  
      000C33 25 3D            [ 1] 2222 	jrult 16$
      000C35 6B 01            [ 1] 2223 1$:	ld (NEG,sp),a 
      000C37 A4 30            [ 1] 2224 	and a,#TK_GRP_MASK
      000C39 A1 10            [ 1] 2225 	cp a,#TK_GRP_ADD 
      000C3B 27 04            [ 1] 2226 	jreq 2$
      000C3D 7B 01            [ 1] 2227 	ld a,(NEG,sp)
      000C3F 20 03            [ 2] 2228 	jra 4$  
      000C41                       2229 2$:	
      000C41 CD 08 30         [ 4] 2230 	call next_token 
      000C44                       2231 4$:	
      000C44 A1 81            [ 1] 2232 	cp a,#TK_IFUNC 
      000C46 26 03            [ 1] 2233 	jrne 5$ 
      000C48 FD               [ 4] 2234 	call (x) 
      000C49 20 32            [ 2] 2235 	jra 18$ 
      000C4B                       2236 5$:
      000C4B A1 84            [ 1] 2237 	cp a,#TK_INTGR
      000C4D 26 02            [ 1] 2238 	jrne 6$
      000C4F 20 2C            [ 2] 2239 	jra 18$
      000C51                       2240 6$:
      000C51 A1 06            [ 1] 2241 	cp a,#TK_ARRAY
      000C53 26 06            [ 1] 2242 	jrne 10$
      000C55 CD 0C 07         [ 4] 2243 	call get_array_element
      000C58 FE               [ 2] 2244 	ldw x,(x)
      000C59 20 22            [ 2] 2245 	jra 18$ 
      000C5B                       2246 10$:
      000C5B A1 85            [ 1] 2247 	cp a,#TK_VAR 
      000C5D 26 03            [ 1] 2248 	jrne 12$
      000C5F FE               [ 2] 2249 	ldw x,(x)
      000C60 20 1B            [ 2] 2250 	jra 18$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C62                       2251 12$:			
      000C62 A1 07            [ 1] 2252 	cp a,#TK_LPAREN
      000C64 26 0C            [ 1] 2253 	jrne 16$
      000C66 CD 0D 24         [ 4] 2254 	call relation
      000C69 89               [ 2] 2255 	pushw x 
      000C6A A6 08            [ 1] 2256 	ld a,#TK_RPAREN 
      000C6C CD 0B CA         [ 4] 2257 	call expect
      000C6F 85               [ 2] 2258 	popw x 
      000C70 20 0B            [ 2] 2259 	jra 18$	
      000C72                       2260 16$:
      000C72 4D               [ 1] 2261 	tnz a 
      000C73 27 11            [ 1] 2262 	jreq 20$ 
      000C75                       2263 	_unget_token
      000C75 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C7A 4F               [ 1] 2264 	clr a 
      000C7B 20 09            [ 2] 2265 	jra 20$ 
      000C7D                       2266 18$: 
      000C7D A6 11            [ 1] 2267 	ld a,#TK_MINUS 
      000C7F 11 01            [ 1] 2268 	cp a,(NEG,sp)
      000C81 26 01            [ 1] 2269 	jrne 19$
      000C83 50               [ 2] 2270 	negw x
      000C84                       2271 19$:
      000C84 A6 84            [ 1] 2272 	ld a,#TK_INTGR
      000C86                       2273 20$:
      000C86                       2274 	_drop VSIZE
      000C86 5B 01            [ 2]    1     addw sp,#VSIZE 
      000C88 81               [ 4] 2275 	ret
                                   2276 
                                   2277 ;-----------------------------------
                                   2278 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2279 ; output:
                                   2280 ;   A    	token attribute 
                                   2281 ;	X		integer
                                   2282 ;-----------------------------------
                           000001  2283 	N1=1   ; int16_t
                           000003  2284 	MULOP=3
                           000003  2285 	VSIZE=3
      000C89                       2286 term:
      000C89                       2287 	_vars VSIZE
      000C89 52 03            [ 2]    1     sub sp,#VSIZE 
      000C8B CD 0C 2C         [ 4] 2288 	call factor
      000C8E 4D               [ 1] 2289 	tnz a 
      000C8F 27 47            [ 1] 2290 	jreq term_exit 
      000C91                       2291 term01:	 ; check for  operator 
      000C91 1F 01            [ 2] 2292 	ldw (N1,sp),x  ; save first factor 
      000C93 CD 08 30         [ 4] 2293 	call next_token
      000C96 6B 03            [ 1] 2294 	ld (MULOP,sp),a
      000C98 A1 02            [ 1] 2295 	cp a,#CMD_END
      000C9A 25 2F            [ 1] 2296 	jrult 8$
      000C9C A4 30            [ 1] 2297 	and a,#TK_GRP_MASK
      000C9E A1 20            [ 1] 2298 	cp a,#TK_GRP_MULT
      000CA0 27 02            [ 1] 2299 	jreq 1$
      000CA2 20 27            [ 2] 2300 	jra 8$
      000CA4                       2301 1$:	; got *|/|%
      000CA4 CD 0C 2C         [ 4] 2302 	call factor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000CA7 A1 84            [ 1] 2303 	cp a,#TK_INTGR
      000CA9 27 03            [ 1] 2304 	jreq 2$
      000CAB CC 07 41         [ 2] 2305 	jp syntax_error
      000CAE 90 93            [ 1] 2306 2$:	ldw y,x 
      000CB0 1E 01            [ 2] 2307 	ldw x,(N1,sp)
      000CB2 7B 03            [ 1] 2308 	ld a,(MULOP,sp) 
      000CB4 A1 20            [ 1] 2309 	cp a,#TK_MULT 
      000CB6 26 05            [ 1] 2310 	jrne 3$
      000CB8 CD 0A 8D         [ 4] 2311 	call multiply 
      000CBB 20 D4            [ 2] 2312 	jra term01
      000CBD A1 21            [ 1] 2313 3$: cp a,#TK_DIV 
      000CBF 26 05            [ 1] 2314 	jrne 4$ 
      000CC1 CD 0B 46         [ 4] 2315 	call divide 
      000CC4 20 CB            [ 2] 2316 	jra term01 
      000CC6 CD 0B 5C         [ 4] 2317 4$: call modulo
      000CC9 20 C6            [ 2] 2318 	jra term01 
      000CCB 7B 03            [ 1] 2319 8$: ld a,(MULOP,sp)
      000CCD 27 05            [ 1] 2320 	jreq 9$ 
      000CCF                       2321 	_unget_token
      000CCF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000CD4 1E 01            [ 2] 2322 9$: ldw x,(N1,sp)
      000CD6 A6 84            [ 1] 2323 	ld a,#TK_INTGR 	
      000CD8                       2324 term_exit:
      000CD8                       2325 	_drop VSIZE 
      000CD8 5B 03            [ 2]    1     addw sp,#VSIZE 
      000CDA 81               [ 4] 2326 	ret 
                                   2327 
                                   2328 ;-------------------------------
                                   2329 ;  expr ::= term [['+'|'-'] term]*
                                   2330 ;  result range {-32768..32767}
                                   2331 ;  output:
                                   2332 ;   A    token attribute 
                                   2333 ;   X	 integer   
                                   2334 ;-------------------------------
                           000001  2335 	N1=1
                           000003  2336 	N2=3 
                           000005  2337 	OP=5 
                           000005  2338 	VSIZE=5 
      000CDB                       2339 expression:
      000CDB                       2340 	_vars VSIZE 
      000CDB 52 05            [ 2]    1     sub sp,#VSIZE 
      000CDD CD 0C 89         [ 4] 2341 	call term
      000CE0 4D               [ 1] 2342 	tnz a 
      000CE1 27 3E            [ 1] 2343 	jreq expr_exit 
      000CE3 1F 01            [ 2] 2344 1$:	ldw (N1,sp),x 
      000CE5 CD 08 30         [ 4] 2345 	call next_token
      000CE8 6B 05            [ 1] 2346 	ld (OP,sp),a 
      000CEA A1 02            [ 1] 2347 	cp a,#CMD_END 
      000CEC 25 26            [ 1] 2348 	jrult 8$ 
      000CEE A4 30            [ 1] 2349 	and a,#TK_GRP_MASK
      000CF0 A1 10            [ 1] 2350 	cp a,#TK_GRP_ADD 
      000CF2 27 02            [ 1] 2351 	jreq 2$ 
      000CF4 20 1E            [ 2] 2352 	jra 8$
      000CF6                       2353 2$: 
      000CF6 CD 0C 89         [ 4] 2354 	call term
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CF9 A1 84            [ 1] 2355 	cp a,#TK_INTGR
      000CFB 27 03            [ 1] 2356 	jreq 3$
      000CFD CC 07 41         [ 2] 2357 	jp syntax_error
      000D00 1F 03            [ 2] 2358 3$:	ldw (N2,sp),x 
      000D02 1E 01            [ 2] 2359 	ldw x,(N1,sp)
      000D04 7B 05            [ 1] 2360 	ld a,(OP,sp)
      000D06 A1 10            [ 1] 2361 	cp a,#TK_PLUS 
      000D08 26 05            [ 1] 2362 	jrne 4$
      000D0A 72 FB 03         [ 2] 2363 	addw x,(N2,sp)
      000D0D 20 D4            [ 2] 2364 	jra 1$ 
      000D0F 72 F0 03         [ 2] 2365 4$:	subw x,(N2,sp)
      000D12 20 CF            [ 2] 2366 	jra 1$
      000D14 7B 05            [ 1] 2367 8$: ld a,(OP,sp)
      000D16 27 05            [ 1] 2368 	jreq 9$ 
      000D18                       2369 	_unget_token	
      000D18 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D1D 1E 01            [ 2] 2370 9$: ldw x,(N1,sp)
      000D1F A6 84            [ 1] 2371 	ld a,#TK_INTGR	
      000D21                       2372 expr_exit:
      000D21                       2373 	_drop VSIZE 
      000D21 5B 05            [ 2]    1     addw sp,#VSIZE 
      000D23 81               [ 4] 2374 	ret 
                                   2375 
                                   2376 ;---------------------------------------------
                                   2377 ; rel ::= expr rel_op expr
                                   2378 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   2379 ;  relation return  integer , zero is false 
                                   2380 ;  output:
                                   2381 ;    A 		token attribute  
                                   2382 ;	 X		integer 
                                   2383 ;---------------------------------------------
                           000001  2384 	N1=1
                           000003  2385 	RELOP=3
                           000003  2386 	VSIZE=3 
      000D24                       2387 relation: 
      000D24                       2388 	_vars VSIZE
      000D24 52 03            [ 2]    1     sub sp,#VSIZE 
      000D26 CD 0C DB         [ 4] 2389 	call expression
      000D29 4D               [ 1] 2390 	tnz a 
      000D2A 27 4D            [ 1] 2391 	jreq rel_exit
      000D2C 1F 01            [ 2] 2392 	ldw (N1,sp),x 
                                   2393 ; expect rel_op or leave 
      000D2E CD 08 30         [ 4] 2394 	call next_token 
      000D31 6B 03            [ 1] 2395 	ld (RELOP,sp),a 
      000D33 A4 30            [ 1] 2396 	and a,#TK_GRP_MASK
      000D35 A1 30            [ 1] 2397 	cp a,#TK_GRP_RELOP 
      000D37 26 33            [ 1] 2398 	jrne 8$
      000D39                       2399 2$:	; expect another expression
      000D39 CD 0C DB         [ 4] 2400 	call expression
      000D3C A1 84            [ 1] 2401 	cp a,#TK_INTGR
      000D3E 27 03            [ 1] 2402 	jreq 3$
      000D40 CC 07 41         [ 2] 2403 	jp syntax_error 
      000D43 CF 00 0C         [ 2] 2404 3$:	ldw acc16,x 
      000D46 1E 01            [ 2] 2405 	ldw x,(N1,sp) 
      000D48 72 B0 00 0C      [ 2] 2406 	subw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D4C 26 06            [ 1] 2407 	jrne 4$
      000D4E 35 02 00 0D      [ 1] 2408 	mov acc8,#2 ; n1==n2
      000D52 20 0C            [ 2] 2409 	jra 6$ 
      000D54                       2410 4$: 
      000D54 2C 06            [ 1] 2411 	jrsgt 5$  
      000D56 35 04 00 0D      [ 1] 2412 	mov acc8,#4 ; n1<2 
      000D5A 20 04            [ 2] 2413 	jra 6$
      000D5C                       2414 5$:
      000D5C 35 01 00 0D      [ 1] 2415 	mov acc8,#1 ; n1>n2 
      000D60                       2416 6$:
      000D60 5F               [ 1] 2417 	clrw x 
      000D61 C6 00 0D         [ 1] 2418 	ld a, acc8  
      000D64 14 03            [ 1] 2419 	and a,(RELOP,sp)
      000D66 4D               [ 1] 2420 	tnz a 
      000D67 27 0E            [ 1] 2421 	jreq 10$
      000D69 5C               [ 1] 2422 	incw x 
      000D6A 20 0B            [ 2] 2423 	jra 10$  	
      000D6C 7B 03            [ 1] 2424 8$: ld a,(RELOP,sp)
      000D6E 27 05            [ 1] 2425 	jreq 9$
      000D70                       2426 	_unget_token
      000D70 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D75                       2427 9$: 
      000D75 1E 01            [ 2] 2428 	ldw x,(N1,sp)
      000D77                       2429 10$:
      000D77 A6 84            [ 1] 2430 	ld a,#TK_INTGR
      000D79                       2431 rel_exit:
      000D79                       2432 	_drop VSIZE
      000D79 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D7B 81               [ 4] 2433 	ret 
                                   2434 
                                   2435 ;--------------------------------
                                   2436 ; BASIC: SHOW 
                                   2437 ; print stack content in hexadecimal bytes 
                                   2438 ; 16 bytes per row 
                                   2439 ;--------------------------------
      000D7C                       2440 show:
      000D7C AE 0D 96         [ 2] 2441 	ldw x,#cstk_prompt
      000D7F CD 20 4F         [ 4] 2442 	call puts 
      000D82 96               [ 1] 2443 	ldw x,sp 
      000D83 1C 00 03         [ 2] 2444 	addw x,#3 ; ignore return address
      000D86 90 AE 18 00      [ 2] 2445 	ldw y,#RAM_SIZE  
      000D8A CF 00 0C         [ 2] 2446 	ldw acc16,x 
      000D8D 72 B2 00 0C      [ 2] 2447 	subw y,acc16
      000D91 CD 03 5A         [ 4] 2448 	call hex_dump
      000D94 4F               [ 1] 2449 	clr a 
      000D95 81               [ 4] 2450 	ret
                                   2451 
      000D96 0A 63 6F 6E 74 65 6E  2452 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   2453 
                                   2454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2455 ;--------------------------------------------
                                   2456 ; BASIC: HEX 
                                   2457 ; select hexadecimal base for integer print
                                   2458 ;---------------------------------------------
      000DBD                       2459 hex_base:
      000DBD 35 10 00 0A      [ 1] 2460 	mov base,#16 
      000DC1 81               [ 4] 2461 	ret 
                                   2462 
                                   2463 ;--------------------------------------------
                                   2464 ; BASIC: DEC 
                                   2465 ; select decimal base for integer print
                                   2466 ;---------------------------------------------
      000DC2                       2467 dec_base:
      000DC2 35 0A 00 0A      [ 1] 2468 	mov base,#10
      000DC6 81               [ 4] 2469 	ret 
                                   2470 
                                   2471 ;------------------------
                                   2472 ; BASIC: FREE 
                                   2473 ; return free size in RAM 
                                   2474 ; output:
                                   2475 ;   A 		TK_INTGR
                                   2476 ;   X 	    size integer
                                   2477 ;--------------------------
      000DC7                       2478 free:
      000DC7 AE 16 90         [ 2] 2479 	ldw x,#tib 
      000DCA 90 CE 00 19      [ 2] 2480 	ldw y,txtbgn 
      000DCE 90 A3 2A 00      [ 2] 2481 	cpw y,#app_space
      000DD2 25 05            [ 1] 2482 	jrult 1$
      000DD4 1D 00 80         [ 2] 2483 	subw x,#free_ram 
      000DD7 20 04            [ 2] 2484 	jra 2$ 
      000DD9                       2485 1$:	
      000DD9 72 B0 00 1B      [ 2] 2486 	subw x,txtend 
      000DDD A6 84            [ 1] 2487 2$:	ld a,#TK_INTGR
      000DDF 81               [ 4] 2488 	ret 
                                   2489 
                                   2490 ;------------------------------
                                   2491 ; BASIC: SIZE 
                                   2492 ; command that print 
                                   2493 ; program start addres and size 
                                   2494 ;------------------------------
      000DE0                       2495 cmd_size:
      000DE0 3B 00 0A         [ 1] 2496 	push base 
      000DE3 AE 0E 0D         [ 2] 2497 	ldw x,#PROG_ADDR 
      000DE6 CD 20 4F         [ 4] 2498 	call puts 
      000DE9 CE 00 19         [ 2] 2499 	ldw x,txtbgn     
      000DEC 35 10 00 0A      [ 1] 2500 	mov base,#16 
      000DF0 CD 08 7E         [ 4] 2501 	call print_int
      000DF3 32 00 0A         [ 1] 2502 	pop base 
      000DF6 AE 0E 1F         [ 2] 2503 	ldw x,#PROG_SIZE 
      000DF9 CD 20 4F         [ 4] 2504 	call puts 
      000DFC CE 00 1B         [ 2] 2505 	ldw x,txtend 
      000DFF 72 B0 00 19      [ 2] 2506 	subw x,txtbgn 
      000E03 CD 08 7E         [ 4] 2507 	call print_int
      000E06 AE 0E 2E         [ 2] 2508 	ldw x,#STR_BYTES 
      000E09 CD 20 4F         [ 4] 2509 	call puts  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E0C 81               [ 4] 2510 	ret 
                                   2511 
      000E0D 70 72 6F 67 72 61 6D  2512 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      000E1F 70 72 6F 67 72 61 6D  2513 PROG_SIZE: .asciz "program size: "
             20 73 69 7A 65 3A 20
             00
      000E2E 62 79 74 65 73 0A 00  2514 STR_BYTES: .asciz "bytes\n" 
                                   2515 
                                   2516 ;------------------------
                                   2517 ; BASIC: UBOUND  
                                   2518 ; return array variable size 
                                   2519 ; output:
                                   2520 ;   A 		TK_INTGR
                                   2521 ;   X 	    array size 
                                   2522 ;--------------------------
      000E35                       2523 ubound:
      000E35 CD 0D C7         [ 4] 2524 	call free 
      000E38 54               [ 2] 2525 	srlw x 
      000E39 CF 00 1E         [ 2] 2526 	ldw array_size,x
      000E3C A6 84            [ 1] 2527 	ld a,#TK_INTGR
      000E3E 81               [ 4] 2528 	ret 
                                   2529 
                                   2530 ;-----------------------------
                                   2531 ; BASIC: LET var=expr 
                                   2532 ; variable assignement 
                                   2533 ; output:
                                   2534 ;   A 		TK_NONE 
                                   2535 ;-----------------------------
      000E3F                       2536 let::
      000E3F CD 08 30         [ 4] 2537 	call next_token 
      000E42 A1 85            [ 1] 2538 	cp a,#TK_VAR 
      000E44 27 0A            [ 1] 2539 	jreq let_var
      000E46 A1 06            [ 1] 2540 	cp a,#TK_ARRAY 
      000E48 27 03            [ 1] 2541 	jreq  let_array
      000E4A CC 07 41         [ 2] 2542 	jp syntax_error
      000E4D                       2543 let_array:
      000E4D CD 0C 07         [ 4] 2544 	call get_array_element
      000E50                       2545 let_var:
      000E50 89               [ 2] 2546 	pushw x  
      000E51 CD 08 30         [ 4] 2547 	call next_token 
      000E54 A1 32            [ 1] 2548 	cp a,#TK_EQUAL
      000E56 27 03            [ 1] 2549 	jreq 1$
      000E58 CC 07 41         [ 2] 2550 	jp syntax_error
      000E5B                       2551 1$:	
      000E5B CD 0D 24         [ 4] 2552 	call relation   
      000E5E A1 84            [ 1] 2553 	cp a,#TK_INTGR 
      000E60 27 03            [ 1] 2554 	jreq 2$
      000E62 CC 07 41         [ 2] 2555 	jp syntax_error
      000E65                       2556 2$:	
      000E65 90 93            [ 1] 2557 	ldw y,x 
      000E67 85               [ 2] 2558 	popw x   
      000E68 FF               [ 2] 2559 	ldw (x),y   
      000E69 81               [ 4] 2560 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2561 
                                   2562 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2563 ; return program size 
                                   2564 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E6A                       2565 prog_size:
      000E6A CE 00 1B         [ 2] 2566 	ldw x,txtend 
      000E6D 72 B0 00 19      [ 2] 2567 	subw x,txtbgn 
      000E71 81               [ 4] 2568 	ret 
                                   2569 
                                   2570 ;----------------------------
                                   2571 ; BASIC: LIST [[start][,end]]
                                   2572 ; list program lines 
                                   2573 ; form start to end 
                                   2574 ; if empty argument list then 
                                   2575 ; list all.
                                   2576 ;----------------------------
                           000001  2577 	FIRST=1
                           000003  2578 	LAST=3 
                           000005  2579 	LN_PTR=5
                           000006  2580 	VSIZE=6 
      000E72                       2581 list:
      000E72 CE 00 19         [ 2] 2582 	ldw x,txtbgn 
      000E75 C3 00 1B         [ 2] 2583 	cpw x,txtend 
      000E78 2B 01            [ 1] 2584 	jrmi 1$
      000E7A 81               [ 4] 2585 	ret 
      000E7B                       2586 1$:	
      000E7B AE 0E 1F         [ 2] 2587 	ldw x,#PROG_SIZE
      000E7E CD 20 4F         [ 4] 2588 	call puts 
      000E81 CE 00 1B         [ 2] 2589 	ldw x,txtend 
      000E84 72 B0 00 19      [ 2] 2590 	subw x,txtbgn 
      000E88 CD 08 7E         [ 4] 2591 	call print_int 
      000E8B AE 0E 2E         [ 2] 2592 	ldw x,#STR_BYTES 
      000E8E CD 20 4F         [ 4] 2593 	call puts 
      000E91                       2594 	_vars VSIZE
      000E91 52 06            [ 2]    1     sub sp,#VSIZE 
      000E93 CE 00 19         [ 2] 2595 	ldw x,txtbgn 
      000E96 1F 05            [ 2] 2596 	ldw (LN_PTR,sp),x 
      000E98 FE               [ 2] 2597 	ldw x,(x) 
      000E99 1F 01            [ 2] 2598 	ldw (FIRST,sp),x ; list from first line 
      000E9B AE 7F FF         [ 2] 2599 	ldw x,#MAX_LINENO ; biggest line number 
      000E9E 1F 03            [ 2] 2600 	ldw (LAST,sp),x 
      000EA0 CD 0B DC         [ 4] 2601 	call arg_list
      000EA3 4D               [ 1] 2602 	tnz a
      000EA4 27 31            [ 1] 2603 	jreq list_loop 
      000EA6 A1 02            [ 1] 2604 	cp a,#2 
      000EA8 27 07            [ 1] 2605 	jreq 4$
      000EAA A1 01            [ 1] 2606 	cp a,#1 
      000EAC 27 06            [ 1] 2607 	jreq first_line 
      000EAE CC 07 41         [ 2] 2608 	jp syntax_error 
      000EB1 85               [ 2] 2609 4$:	popw x 
      000EB2 1F 05            [ 2] 2610 	ldw (LAST+2,sp),x 
      000EB4                       2611 first_line:
      000EB4 85               [ 2] 2612 	popw x
      000EB5 1F 01            [ 2] 2613 	ldw (FIRST,sp),x 
      000EB7                       2614 lines_skip:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EB7 CE 00 19         [ 2] 2615 	ldw x,txtbgn
      000EBA 1F 05            [ 2] 2616 2$:	ldw (LN_PTR,sp),x 
      000EBC C3 00 1B         [ 2] 2617 	cpw x,txtend 
      000EBF 2A 38            [ 1] 2618 	jrpl list_exit 
      000EC1 FE               [ 2] 2619 	ldw x,(x) ;line# 
      000EC2 13 01            [ 2] 2620 	cpw x,(FIRST,sp)
      000EC4 2A 11            [ 1] 2621 	jrpl list_loop 
      000EC6 1E 05            [ 2] 2622 	ldw x,(LN_PTR,sp) 
      000EC8 E6 02            [ 1] 2623 	ld a,(2,x)
      000ECA C7 00 0D         [ 1] 2624 	ld acc8,a 
      000ECD 72 5F 00 0C      [ 1] 2625 	clr acc16 
      000ED1 72 BB 00 0C      [ 2] 2626 	addw x,acc16
      000ED5 20 E3            [ 2] 2627 	jra 2$ 
                                   2628 ; print loop
      000ED7                       2629 list_loop:
      000ED7 1E 05            [ 2] 2630 	ldw x,(LN_PTR,sp)
      000ED9 E6 02            [ 1] 2631 	ld a,(2,x) 
      000EDB CD 0F 4B         [ 4] 2632 	call prt_basic_line
      000EDE 1E 05            [ 2] 2633 	ldw x,(LN_PTR,sp)
      000EE0 E6 02            [ 1] 2634 	ld a,(2,x)
      000EE2 C7 00 0D         [ 1] 2635 	ld acc8,a 
      000EE5 72 5F 00 0C      [ 1] 2636 	clr acc16 
      000EE9 72 BB 00 0C      [ 2] 2637 	addw x,acc16
      000EED C3 00 1B         [ 2] 2638 	cpw x,txtend 
      000EF0 2A 07            [ 1] 2639 	jrpl list_exit
      000EF2 1F 05            [ 2] 2640 	ldw (LN_PTR,sp),x
      000EF4 FE               [ 2] 2641 	ldw x,(x)
      000EF5 13 03            [ 2] 2642 	cpw x,(LAST,sp)  
      000EF7 2F DE            [ 1] 2643 	jrslt list_loop
      000EF9                       2644 list_exit:
      000EF9 55 00 03 00 01   [ 1] 2645 	mov in,count 
      000EFE AE 16 E0         [ 2] 2646 	ldw x,#pad 
      000F01 CF 00 04         [ 2] 2647 	ldw basicptr,x 
      000F04                       2648 	_drop VSIZE 
      000F04 5B 06            [ 2]    1     addw sp,#VSIZE 
      000F06 81               [ 4] 2649 	ret
                                   2650 
                                   2651 
                                   2652 ;--------------------------
                                   2653 ; BASIC: EDIT \E | \F
                                   2654 ;  copy program in FLASH 
                                   2655 ;  to RAM for edition 
                                   2656 ;-------------------------
      000F07                       2657 edit:
      000F07 CD 14 DB         [ 4] 2658 	call qsign 
      000F0A 27 07            [ 1] 2659 	jreq 1$ 
      000F0C AE 0F 34         [ 2] 2660 	ldw x,#NOT_SAVED 
      000F0F CD 20 4F         [ 4] 2661 	call puts 
      000F12 81               [ 4] 2662 	ret 
      000F13                       2663 1$: 
      000F13 90 AE 2A 00      [ 2] 2664 	ldw y,#app_sign ; source address 
      000F17 CE 2A 02         [ 2] 2665     ldw x,app_size  
      000F1A 1C 00 04         [ 2] 2666 	addw x,#4 
      000F1D CF 00 0C         [ 2] 2667 	ldw acc16,x  ; bytes to copy 
      000F20 AE 00 7C         [ 2] 2668 	ldw x,#rsign ; destination address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F23 CD 03 C5         [ 4] 2669 	call move  
      000F26 AE 00 80         [ 2] 2670 	ldw x,#free_ram 
      000F29 CF 00 19         [ 2] 2671 	ldw txtbgn,x 
      000F2C 72 BB 00 7E      [ 2] 2672 	addw x,rsize  
      000F30 CF 00 1B         [ 2] 2673 	ldw txtend,x 
      000F33 81               [ 4] 2674 	ret 
                                   2675 
      000F34 4E 6F 20 61 70 70 6C  2676 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   2677 
                                   2678 ;--------------------------
                                   2679 ; decompile line from token list
                                   2680 ; and print it. 
                                   2681 ; input:
                                   2682 ;   A       stop at this position 
                                   2683 ;   X 		pointer at line
                                   2684 ; output:
                                   2685 ;   none 
                                   2686 ;--------------------------	
      000F4B                       2687 prt_basic_line:
      000F4B C7 00 03         [ 1] 2688 	ld count,a 
      000F4E E6 02            [ 1] 2689 	ld a,(2,x)
      000F50 C1 00 03         [ 1] 2690 	cp a,count 
      000F53 2A 03            [ 1] 2691 	jrpl 1$ 
      000F55 C7 00 03         [ 1] 2692 	ld count,a 
      000F58 CF 00 04         [ 2] 2693 1$:	ldw basicptr,x 
      000F5B 90 AE 16 90      [ 2] 2694 	ldw y,#tib  
      000F5F CD 28 48         [ 4] 2695 	call decompile 
      000F62 CD 20 4F         [ 4] 2696 	call puts 
      000F65 A6 0D            [ 1] 2697 	ld a,#CR 
      000F67 CD 02 C1         [ 4] 2698 	call putc 
      000F6A 81               [ 4] 2699 	ret 
                                   2700 
                                   2701 
                                   2702 
                                   2703 ;---------------------------------
                                   2704 ; BASIC: PRINT|? arg_list 
                                   2705 ; print values from argument list
                                   2706 ;----------------------------------
                           000001  2707 	CCOMMA=1
                           000001  2708 	VSIZE=1
      000F6B                       2709 print:
      000F6B                       2710 	_vars VSIZE 
      000F6B 52 01            [ 2]    1     sub sp,#VSIZE 
      000F6D                       2711 reset_comma:
      000F6D 0F 01            [ 1] 2712 	clr (CCOMMA,sp)
      000F6F                       2713 prt_loop:
      000F6F CD 08 30         [ 4] 2714 	call next_token
      000F72 A1 02            [ 1] 2715 	cp a,#CMD_END 
      000F74 25 4F            [ 1] 2716 	jrult print_exit ; colon or end of line 
      000F76 A1 02            [ 1] 2717 	cp a,#TK_QSTR
      000F78 27 12            [ 1] 2718 	jreq 1$
      000F7A A1 03            [ 1] 2719 	cp a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F7C 27 13            [ 1] 2720 	jreq 2$ 
      000F7E A1 82            [ 1] 2721 	cp a,#TK_CFUNC 
      000F80 27 15            [ 1] 2722 	jreq 3$
      000F82 A1 09            [ 1] 2723 	cp a,#TK_COMMA 
      000F84 27 18            [ 1] 2724 	jreq 4$
      000F86 A1 0A            [ 1] 2725 	cp a,#TK_SHARP 
      000F88 27 18            [ 1] 2726 	jreq 5$
      000F8A 20 28            [ 2] 2727 	jra 7$ 
      000F8C                       2728 1$:	; print string 
      000F8C CD 20 4F         [ 4] 2729 	call puts
      000F8F 20 DC            [ 2] 2730 	jra reset_comma
      000F91                       2731 2$:	; print character 
      000F91 9F               [ 1] 2732 	ld a,xl 
      000F92 CD 02 C1         [ 4] 2733 	call putc 
      000F95 20 D6            [ 2] 2734 	jra reset_comma 
      000F97                       2735 3$: ; print character function value  	
      000F97 FD               [ 4] 2736 	call (x)
      000F98 9F               [ 1] 2737 	ld a,xl 
      000F99 CD 02 C1         [ 4] 2738 	call putc
      000F9C 20 CF            [ 2] 2739 	jra reset_comma 
      000F9E                       2740 4$: ; set comma state 
      000F9E 03 01            [ 1] 2741 	cpl (CCOMMA,sp)
      000FA0 20 CD            [ 2] 2742 	jra prt_loop   
      000FA2                       2743 5$: ; # character must be followed by an integer   
      000FA2 CD 08 30         [ 4] 2744 	call next_token
      000FA5 A1 84            [ 1] 2745 	cp a,#TK_INTGR 
      000FA7 27 03            [ 1] 2746 	jreq 6$
      000FA9 CC 07 41         [ 2] 2747 	jp syntax_error 
      000FAC                       2748 6$: ; set tab width
      000FAC 9F               [ 1] 2749 	ld a,xl 
      000FAD A4 0F            [ 1] 2750 	and a,#15 
      000FAF C7 00 21         [ 1] 2751 	ld tab_width,a 
      000FB2 20 B9            [ 2] 2752 	jra reset_comma 
      000FB4                       2753 7$:	
      000FB4                       2754 	_unget_token 
      000FB4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000FB9 CD 0D 24         [ 4] 2755 	call relation 
      000FBC A1 84            [ 1] 2756 	cp a,#TK_INTGR 
      000FBE 26 05            [ 1] 2757 	jrne print_exit 
      000FC0 CD 08 7E         [ 4] 2758     call print_int 
      000FC3 20 A8            [ 2] 2759 	jra reset_comma 
      000FC5                       2760 print_exit:
      000FC5 0D 01            [ 1] 2761 	tnz (CCOMMA,sp)
      000FC7 26 05            [ 1] 2762 	jrne 9$
      000FC9 A6 0D            [ 1] 2763 	ld a,#CR 
      000FCB CD 02 C1         [ 4] 2764     call putc 
      000FCE                       2765 9$:	_drop VSIZE 
      000FCE 5B 01            [ 2]    1     addw sp,#VSIZE 
      000FD0 81               [ 4] 2766 	ret 
                                   2767 
                                   2768 ;----------------------
                                   2769 ; 'save_context' and
                                   2770 ; 'rest_context' must be 
                                   2771 ; called at the same 
                                   2772 ; call stack depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2773 ; i.e. SP must have the 
                                   2774 ; save value at  
                                   2775 ; entry point of both 
                                   2776 ; routine. 
                                   2777 ;---------------------
                           000004  2778 	CTXT_SIZE=4 ; size of saved data 
                                   2779 ;--------------------
                                   2780 ; save current BASIC
                                   2781 ; interpreter context 
                                   2782 ; on stack 
                                   2783 ;--------------------
      000FD1                       2784 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000FD1                       2785 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000FD1                       2786 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000FD1                       2787 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000FD1                       2788 save_context:
      000FD1 CE 00 04         [ 2] 2789 	ldw x,basicptr 
      000FD4 1F 03            [ 2] 2790 	ldw (BPTR,sp),x
      000FD6 C6 00 01         [ 1] 2791 	ld a,in 
      000FD9 6B 05            [ 1] 2792 	ld (IN,sp),a
      000FDB C6 00 03         [ 1] 2793 	ld a,count 
      000FDE 6B 06            [ 1] 2794 	ld (CNT,sp),a  
      000FE0 81               [ 4] 2795 	ret
                                   2796 
                                   2797 ;-----------------------
                                   2798 ; restore previously saved 
                                   2799 ; BASIC interpreter context 
                                   2800 ; from stack 
                                   2801 ;-------------------------
      000FE1                       2802 rest_context:
      000FE1 1E 03            [ 2] 2803 	ldw x,(BPTR,sp)
      000FE3 CF 00 04         [ 2] 2804 	ldw basicptr,x 
      000FE6 7B 05            [ 1] 2805 	ld a,(IN,sp)
      000FE8 C7 00 01         [ 1] 2806 	ld in,a
      000FEB 7B 06            [ 1] 2807 	ld a,(CNT,sp)
      000FED C7 00 03         [ 1] 2808 	ld count,a  
      000FF0 81               [ 4] 2809 	ret
                                   2810 
                                   2811 
                                   2812 
                                   2813 ;------------------------------------------
                                   2814 ; BASIC: INPUT [string]var[,[string]var]
                                   2815 ; input value in variables 
                                   2816 ; [string] optionally can be used as prompt 
                                   2817 ;-----------------------------------------
                           000001  2818 	CX_BPTR=1
                           000003  2819 	CX_IN=3
                           000004  2820 	CX_CNT=4
                           000005  2821 	SKIP=5
                           000006  2822 	VAR_ADDR=6
                           000007  2823 	VSIZE=7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FF1                       2824 input_var:
      000FF1                       2825 	_vars VSIZE 
      000FF1 52 07            [ 2]    1     sub sp,#VSIZE 
      000FF3                       2826 input_loop:
      000FF3 0F 05            [ 1] 2827 	clr (SKIP,sp)
      000FF5 CD 08 30         [ 4] 2828 	call next_token 
      000FF8 A1 02            [ 1] 2829 	cp a,#TK_QSTR 
      000FFA 26 08            [ 1] 2830 	jrne 1$ 
      000FFC CD 20 4F         [ 4] 2831 	call puts 
      000FFF 03 05            [ 1] 2832 	cpl (SKIP,sp)
      001001 CD 08 30         [ 4] 2833 	call next_token 
      001004 A1 85            [ 1] 2834 1$: cp a,#TK_VAR  
      001006 27 03            [ 1] 2835 	jreq 2$ 
      001008 CC 07 41         [ 2] 2836 	jp syntax_error
      00100B 1F 06            [ 2] 2837 2$:	ldw (VAR_ADDR,sp),x 
      00100D 0D 05            [ 1] 2838 	tnz (SKIP,sp)
      00100F 26 06            [ 1] 2839 	jrne 21$ 
      001011 CD 28 1F         [ 4] 2840 	call var_name 
      001014 CD 02 C1         [ 4] 2841 	call putc   
      001017                       2842 21$:
      001017 A6 3A            [ 1] 2843 	ld a,#':
      001019 CD 02 C1         [ 4] 2844 	call putc 
      00101C CD 0F D1         [ 4] 2845 	call save_context 
      00101F 72 5F 00 03      [ 1] 2846 	clr count  
      001023 CD 21 54         [ 4] 2847 	call readln 
      001026 AE 16 90         [ 2] 2848 	ldw x,#tib 
      001029 3B 00 03         [ 1] 2849 	push count
      00102C 4B 00            [ 1] 2850 	push #0 
      00102E 72 FB 01         [ 2] 2851 	addw x,(1,sp)
      001031 5C               [ 1] 2852 	incw x 
      001032                       2853 	_drop 2 
      001032 5B 02            [ 2]    1     addw sp,#2 
      001034 72 5F 00 01      [ 1] 2854 	clr in 
      001038 CD 25 6E         [ 4] 2855 	call get_token
      00103B A1 84            [ 1] 2856 	cp a,#TK_INTGR
      00103D 27 06            [ 1] 2857 	jreq 3$ 
      00103F CD 0F E1         [ 4] 2858 	call rest_context 
      001042 CC 07 41         [ 2] 2859 	jp syntax_error
      001045 16 06            [ 2] 2860 3$: ldw y,(VAR_ADDR,sp) 
      001047 90 FF            [ 2] 2861 	ldw (y),x 
      001049 CD 0F E1         [ 4] 2862 	call rest_context
      00104C CD 08 30         [ 4] 2863 	call next_token 
      00104F A1 09            [ 1] 2864 	cp a,#TK_COMMA 
      001051 27 A0            [ 1] 2865 	jreq input_loop
      001053 A1 00            [ 1] 2866 	cp a,#TK_NONE 
      001055 27 07            [ 1] 2867 	jreq input_exit  
      001057 A1 0B            [ 1] 2868 	cp a,#TK_COLON 
      001059 27 03            [ 1] 2869     jreq input_exit 
      00105B CC 07 41         [ 2] 2870 	jp syntax_error 
      00105E                       2871 input_exit:
      00105E                       2872 	_drop VSIZE 
      00105E 5B 07            [ 2]    1     addw sp,#VSIZE 
      001060 81               [ 4] 2873 	ret 
                                   2874 
                                   2875 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2876 ;---------------------
                                   2877 ; BASIC: REMARK | ' 
                                   2878 ; skip comment to end of line 
                                   2879 ;---------------------- 
      001061                       2880 remark::
      001061 55 00 03 00 01   [ 1] 2881 	mov in,count 
      001066 81               [ 4] 2882  	ret 
                                   2883 
                                   2884 
                                   2885 ;---------------------
                                   2886 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2887 ; read in loop 'addr'  
                                   2888 ; apply & 'mask' to value 
                                   2889 ; loop while result==0.  
                                   2890 ; 'xor_mask' is used to 
                                   2891 ; invert the wait logic.
                                   2892 ; i.e. loop while not 0.
                                   2893 ;---------------------
                           000001  2894 	XMASK=1 
                           000002  2895 	MASK=2
                           000003  2896 	ADDR=3
                           000004  2897 	VSIZE=4
      001067                       2898 wait: 
      001067                       2899 	_vars VSIZE
      001067 52 04            [ 2]    1     sub sp,#VSIZE 
      001069 0F 01            [ 1] 2900 	clr (XMASK,sp) 
      00106B CD 0B DC         [ 4] 2901 	call arg_list 
      00106E A1 02            [ 1] 2902 	cp a,#2
      001070 24 03            [ 1] 2903 	jruge 0$
      001072 CC 07 41         [ 2] 2904 	jp syntax_error 
      001075 A1 03            [ 1] 2905 0$:	cp a,#3
      001077 25 04            [ 1] 2906 	jrult 1$
      001079 85               [ 2] 2907 	popw x 
      00107A 9F               [ 1] 2908 	ld a,xl
      00107B 6B 01            [ 1] 2909 	ld (XMASK,sp),a 
      00107D 85               [ 2] 2910 1$: popw x ; mask 
      00107E 9F               [ 1] 2911 	ld a,xl 
      00107F 6B 02            [ 1] 2912 	ld (MASK,sp),a 
      001081 85               [ 2] 2913 	popw x ; address 
      001082 F6               [ 1] 2914 2$:	ld a,(x)
      001083 14 02            [ 1] 2915 	and a,(MASK,sp)
      001085 18 01            [ 1] 2916 	xor a,(XMASK,sp)
      001087 27 F9            [ 1] 2917 	jreq 2$ 
      001089                       2918 	_drop VSIZE 
      001089 5B 04            [ 2]    1     addw sp,#VSIZE 
      00108B 81               [ 4] 2919 	ret 
                                   2920 
                                   2921 ;---------------------
                                   2922 ; BASIC: BSET addr,mask
                                   2923 ; set bits at 'addr' corresponding 
                                   2924 ; to those of 'mask' that are at 1.
                                   2925 ; arguments:
                                   2926 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2927 ;   mask        mask|addr
                                   2928 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2929 ;	none 
                                   2930 ;--------------------------
      00108C                       2931 bit_set:
      00108C CD 0B DC         [ 4] 2932 	call arg_list 
      00108F A1 02            [ 1] 2933 	cp a,#2	 
      001091 27 03            [ 1] 2934 	jreq 1$ 
      001093 CC 07 41         [ 2] 2935 	jp syntax_error
      001096                       2936 1$: 
      001096 85               [ 2] 2937 	popw x ; mask 
      001097 9F               [ 1] 2938 	ld a,xl 
      001098 85               [ 2] 2939 	popw x ; addr  
      001099 FA               [ 1] 2940 	or a,(x)
      00109A F7               [ 1] 2941 	ld (x),a
      00109B 81               [ 4] 2942 	ret 
                                   2943 
                                   2944 ;---------------------
                                   2945 ; BASIC: BRES addr,mask
                                   2946 ; reset bits at 'addr' corresponding 
                                   2947 ; to those of 'mask' that are at 1.
                                   2948 ; arguments:
                                   2949 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2950 ;   mask	    ~mask&*addr  
                                   2951 ; output:
                                   2952 ;	none 
                                   2953 ;--------------------------
      00109C                       2954 bit_reset:
      00109C CD 0B DC         [ 4] 2955 	call arg_list 
      00109F A1 02            [ 1] 2956 	cp a,#2  
      0010A1 27 03            [ 1] 2957 	jreq 1$ 
      0010A3 CC 07 41         [ 2] 2958 	jp syntax_error
      0010A6                       2959 1$: 
      0010A6 85               [ 2] 2960 	popw x ; mask 
      0010A7 9F               [ 1] 2961 	ld a,xl 
      0010A8 43               [ 1] 2962 	cpl a 
      0010A9 85               [ 2] 2963 	popw x ; addr  
      0010AA F4               [ 1] 2964 	and a,(x)
      0010AB F7               [ 1] 2965 	ld (x),a 
      0010AC 81               [ 4] 2966 	ret 
                                   2967 
                                   2968 ;---------------------
                                   2969 ; BASIC: BTOGL addr,mask
                                   2970 ; toggle bits at 'addr' corresponding 
                                   2971 ; to those of 'mask' that are at 1.
                                   2972 ; arguments:
                                   2973 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2974 ;   mask	    mask^*addr  
                                   2975 ; output:
                                   2976 ;	none 
                                   2977 ;--------------------------
      0010AD                       2978 bit_toggle:
      0010AD CD 0B DC         [ 4] 2979 	call arg_list 
      0010B0 A1 02            [ 1] 2980 	cp a,#2 
      0010B2 27 03            [ 1] 2981 	jreq 1$ 
      0010B4 CC 07 41         [ 2] 2982 	jp syntax_error
      0010B7 85               [ 2] 2983 1$: popw x ; mask 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010B8 9F               [ 1] 2984 	ld a,xl 
      0010B9 85               [ 2] 2985 	popw x ; addr  
      0010BA F8               [ 1] 2986 	xor a,(x)
      0010BB F7               [ 1] 2987 	ld (x),a 
      0010BC 81               [ 4] 2988 	ret 
                                   2989 
                                   2990 
                                   2991 ;---------------------
                                   2992 ; BASIC: BTEST(addr,bit)
                                   2993 ; return bit value at 'addr' 
                                   2994 ; bit is in range {0..7}.
                                   2995 ; arguments:
                                   2996 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2997 ;   bit 	    bit position {0..7}  
                                   2998 ; output:
                                   2999 ;	none 
                                   3000 ;--------------------------
      0010BD                       3001 bit_test:
      0010BD CD 0B D7         [ 4] 3002 	call func_args 
      0010C0 A1 02            [ 1] 3003 	cp a,#2
      0010C2 27 03            [ 1] 3004 	jreq 0$
      0010C4 CC 07 41         [ 2] 3005 	jp syntax_error
      0010C7                       3006 0$:	
      0010C7 85               [ 2] 3007 	popw x 
      0010C8 9F               [ 1] 3008 	ld a,xl 
      0010C9 A4 07            [ 1] 3009 	and a,#7
      0010CB 88               [ 1] 3010 	push a   
      0010CC A6 01            [ 1] 3011 	ld a,#1 
      0010CE 0D 01            [ 1] 3012 1$: tnz (1,sp)
      0010D0 27 05            [ 1] 3013 	jreq 2$
      0010D2 48               [ 1] 3014 	sll a 
      0010D3 0A 01            [ 1] 3015 	dec (1,sp)
      0010D5 20 F7            [ 2] 3016 	jra 1$
      0010D7                       3017 2$: _drop 1 
      0010D7 5B 01            [ 2]    1     addw sp,#1 
      0010D9 85               [ 2] 3018 	popw x 
      0010DA F4               [ 1] 3019 	and a,(x)
      0010DB 27 02            [ 1] 3020 	jreq 3$
      0010DD A6 01            [ 1] 3021 	ld a,#1 
      0010DF 5F               [ 1] 3022 3$:	clrw x 
      0010E0 97               [ 1] 3023 	ld xl,a 
      0010E1 A6 84            [ 1] 3024 	ld a,#TK_INTGR
      0010E3 81               [ 4] 3025 	ret
                                   3026 
                                   3027 
                                   3028 ;--------------------
                                   3029 ; BASIC: POKE addr,byte
                                   3030 ; put a byte at addr 
                                   3031 ;--------------------
      0010E4                       3032 poke:
      0010E4 CD 0B DC         [ 4] 3033 	call arg_list 
      0010E7 A1 02            [ 1] 3034 	cp a,#2
      0010E9 27 03            [ 1] 3035 	jreq 1$
      0010EB CC 07 41         [ 2] 3036 	jp syntax_error
      0010EE                       3037 1$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010EE 85               [ 2] 3038 	popw x  
      0010EF 9F               [ 1] 3039     ld a,xl 
      0010F0 85               [ 2] 3040 	popw x 
      0010F1 F7               [ 1] 3041 	ld (x),a 
      0010F2 81               [ 4] 3042 	ret 
                                   3043 
                                   3044 ;-----------------------
                                   3045 ; BASIC: PEEK(addr)
                                   3046 ; get the byte at addr 
                                   3047 ; input:
                                   3048 ;	none 
                                   3049 ; output:
                                   3050 ;	X 		value 
                                   3051 ;-----------------------
      0010F3                       3052 peek:
      0010F3 CD 0B D7         [ 4] 3053 	call func_args
      0010F6 A1 01            [ 1] 3054 	cp a,#1 
      0010F8 27 03            [ 1] 3055 	jreq 1$
      0010FA CC 07 41         [ 2] 3056 	jp syntax_error
      0010FD 85               [ 2] 3057 1$: popw x 
      0010FE F6               [ 1] 3058 	ld a,(x)
      0010FF 5F               [ 1] 3059 	clrw x 
      001100 97               [ 1] 3060 	ld xl,a 
      001101 A6 84            [ 1] 3061 	ld a,#TK_INTGR
      001103 81               [ 4] 3062 	ret 
                                   3063 
                                   3064 ;---------------------------
                                   3065 ; BASIC IF expr : instructions
                                   3066 ; evaluate expr and if true 
                                   3067 ; execute instructions on same line. 
                                   3068 ;----------------------------
      001104                       3069 if: 
      001104 CD 0D 24         [ 4] 3070 	call relation 
      001107 A1 84            [ 1] 3071 	cp a,#TK_INTGR
      001109 27 03            [ 1] 3072 	jreq 1$ 
      00110B CC 07 41         [ 2] 3073 	jp syntax_error
      00110E 4F               [ 1] 3074 1$:	clr a 
      00110F 5D               [ 2] 3075 	tnzw x 
      001110 26 05            [ 1] 3076 	jrne 9$  
                                   3077 ;skip to next line
      001112 55 00 03 00 01   [ 1] 3078 	mov in,count
      001117 81               [ 4] 3079 9$:	ret 
                                   3080 
                                   3081 ;------------------------
                                   3082 ; BASIC: FOR var=expr 
                                   3083 ; set variable to expression 
                                   3084 ; leave variable address 
                                   3085 ; on stack and set
                                   3086 ; FLOOP bit in 'flags'
                                   3087 ;-----------------
                           000001  3088 	RETL1=1 ; return address  
                           000003  3089 	FSTEP=3  ; variable increment
                           000005  3090 	LIMIT=5 ; loop limit 
                           000007  3091 	CVAR=7   ; control variable 
                           000009  3092 	INW=9   ;  in.w saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                           00000B  3093 	BPTR=11 ; baseptr saved
                           00000A  3094 	VSIZE=10  
      001118                       3095 for: ; { -- var_addr }
      001118 85               [ 2] 3096 	popw x ; call return address 
      001119                       3097 	_vars VSIZE 
      001119 52 0A            [ 2]    1     sub sp,#VSIZE 
      00111B 89               [ 2] 3098 	pushw x  ; RETL1 
      00111C A6 85            [ 1] 3099 	ld a,#TK_VAR 
      00111E CD 0B CA         [ 4] 3100 	call expect
      001121 1F 07            [ 2] 3101 	ldw (CVAR,sp),x  ; control variable 
      001123 CD 0E 50         [ 4] 3102 	call let_var 
      001126 72 14 00 20      [ 1] 3103 	bset flags,#FLOOP 
                                   3104 ; open space on stack for loop data 
      00112A 5F               [ 1] 3105 	clrw x 
      00112B 1F 0B            [ 2] 3106 	ldw (BPTR,sp),x 
      00112D 1F 09            [ 2] 3107 	ldw (INW,sp),x 
      00112F CD 08 30         [ 4] 3108 	call next_token 
      001132 A1 80            [ 1] 3109 	cp a,#TK_CMD 
      001134 27 03            [ 1] 3110 	jreq 1$
      001136 CC 07 41         [ 2] 3111 	jp syntax_error
      001139                       3112 1$:  
      001139 A3 11 41         [ 2] 3113 	cpw x,#to 
      00113C 27 03            [ 1] 3114 	jreq to
      00113E CC 07 41         [ 2] 3115 	jp syntax_error 
                                   3116 
                                   3117 ;-----------------------------------
                                   3118 ; BASIC: TO expr 
                                   3119 ; second part of FOR loop initilization
                                   3120 ; leave limit on stack and set 
                                   3121 ; FTO bit in 'flags'
                                   3122 ;-----------------------------------
      001141                       3123 to: ; { var_addr -- var_addr limit step }
      001141 72 04 00 20 03   [ 2] 3124 	btjt flags,#FLOOP,1$
      001146 CC 07 41         [ 2] 3125 	jp syntax_error
      001149 CD 0D 24         [ 4] 3126 1$: call relation  
      00114C A1 84            [ 1] 3127 	cp a,#TK_INTGR 
      00114E 27 03            [ 1] 3128 	jreq 2$ 
      001150 CC 07 41         [ 2] 3129 	jp syntax_error
      001153 1F 05            [ 2] 3130 2$: ldw (LIMIT,sp),x
                                   3131 ;	ldw x,in.w 
      001155 CD 08 30         [ 4] 3132 	call next_token
      001158 A1 00            [ 1] 3133 	cp a,#TK_NONE  
      00115A 27 0E            [ 1] 3134 	jreq 4$ 
      00115C A1 80            [ 1] 3135 	cp a,#TK_CMD
      00115E 26 05            [ 1] 3136 	jrne 3$
      001160 A3 11 71         [ 2] 3137 	cpw x,#step 
      001163 27 0C            [ 1] 3138 	jreq step
      001165                       3139 3$:	
      001165                       3140 	_unget_token   	 
      001165 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00116A                       3141 4$:	
      00116A AE 00 01         [ 2] 3142 	ldw x,#1   ; default step  
      00116D 1F 03            [ 2] 3143 	ldw (FSTEP,sp),x 
      00116F 20 14            [ 2] 3144 	jra store_loop_addr 
                                   3145 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3146 
                                   3147 ;----------------------------------
                                   3148 ; BASIC: STEP expr 
                                   3149 ; optional third par of FOR loop
                                   3150 ; initialization. 	
                                   3151 ;------------------------------------
      001171                       3152 step: ; {var limit -- var limit step}
      001171 72 04 00 20 03   [ 2] 3153 	btjt flags,#FLOOP,1$
      001176 CC 07 41         [ 2] 3154 	jp syntax_error
      001179 CD 0D 24         [ 4] 3155 1$: call relation
      00117C A1 84            [ 1] 3156 	cp a,#TK_INTGR
      00117E 27 03            [ 1] 3157 	jreq 2$
      001180 CC 07 41         [ 2] 3158 	jp syntax_error
      001183 1F 03            [ 2] 3159 2$:	ldw (FSTEP,sp),x ; step
                                   3160 ; leave loop back entry point on cstack 
                                   3161 ; cstack is 1 call deep from interpreter
      001185                       3162 store_loop_addr:
      001185 CE 00 04         [ 2] 3163 	ldw x,basicptr  
      001188 1F 0B            [ 2] 3164 	ldw (BPTR,sp),x 
      00118A CE 00 00         [ 2] 3165 	ldw x,in.w 
      00118D 1F 09            [ 2] 3166 	ldw (INW,sp),x   
      00118F 72 15 00 20      [ 1] 3167 	bres flags,#FLOOP 
      001193 72 5C 00 1D      [ 1] 3168 	inc loop_depth  
      001197 81               [ 4] 3169 	ret 
                                   3170 
                                   3171 ;--------------------------------
                                   3172 ; BASIC: NEXT var 
                                   3173 ; FOR loop control 
                                   3174 ; increment variable with step 
                                   3175 ; and compare with limit 
                                   3176 ; loop if threshold not crossed.
                                   3177 ; else stack. 
                                   3178 ; and decrement 'loop_depth' 
                                   3179 ;--------------------------------
      001198                       3180 next: ; {var limit step retl1 -- [var limit step ] }
      001198 72 5D 00 1D      [ 1] 3181 	tnz loop_depth 
      00119C 26 03            [ 1] 3182 	jrne 1$ 
      00119E CC 07 41         [ 2] 3183 	jp syntax_error 
      0011A1                       3184 1$: 
      0011A1 A6 85            [ 1] 3185 	ld a,#TK_VAR 
      0011A3 CD 0B CA         [ 4] 3186 	call expect
                                   3187 ; check for good variable after NEXT 	 
      0011A6 13 07            [ 2] 3188 	cpw x,(CVAR,sp)
      0011A8 27 03            [ 1] 3189 	jreq 2$  
      0011AA CC 07 41         [ 2] 3190 	jp syntax_error ; not the good one 
      0011AD                       3191 2$: ; increment variable 
      0011AD FE               [ 2] 3192 	ldw x,(x)  ; get var value 
      0011AE 72 FB 03         [ 2] 3193 	addw x,(FSTEP,sp) ; var+step 
      0011B1 16 07            [ 2] 3194 	ldw y,(CVAR,sp)
      0011B3 90 FF            [ 2] 3195 	ldw (y),x ; save var new value 
                                   3196 ; check sign of STEP  
      0011B5 A6 80            [ 1] 3197 	ld a,#0x80
      0011B7 15 03            [ 1] 3198 	bcp a,(FSTEP,sp)
      0011B9 2A 06            [ 1] 3199 	jrpl 4$
                                   3200 ;negative step 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011BB 13 05            [ 2] 3201 	cpw x,(LIMIT,sp)
      0011BD 2F 1B            [ 1] 3202 	jrslt loop_done
      0011BF 20 04            [ 2] 3203 	jra loop_back 
      0011C1                       3204 4$: ; positive step
      0011C1 13 05            [ 2] 3205 	cpw x,(LIMIT,sp)
      0011C3 2C 15            [ 1] 3206 	jrsgt loop_done
      0011C5                       3207 loop_back:
      0011C5 1E 0B            [ 2] 3208 	ldw x,(BPTR,sp)
      0011C7 CF 00 04         [ 2] 3209 	ldw basicptr,x 
      0011CA 72 01 00 20 05   [ 2] 3210 	btjf flags,#FRUN,1$ 
      0011CF E6 02            [ 1] 3211 	ld a,(2,x)
      0011D1 C7 00 03         [ 1] 3212 	ld count,a
      0011D4 1E 09            [ 2] 3213 1$:	ldw x,(INW,sp)
      0011D6 CF 00 00         [ 2] 3214 	ldw in.w,x 
      0011D9 81               [ 4] 3215 	ret 
      0011DA                       3216 loop_done:
                                   3217 	; remove loop data from stack  
      0011DA 85               [ 2] 3218 	popw x
      0011DB                       3219 	_drop VSIZE 
      0011DB 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0011DD 72 5A 00 1D      [ 1] 3220 	dec loop_depth 
                                   3221 ;	pushw x 
                                   3222 ;	ret 
      0011E1 FC               [ 2] 3223 	jp (x)
                                   3224 
                                   3225 ;----------------------------
                                   3226 ; called by goto/gosub
                                   3227 ; to get target line number 
                                   3228 ;---------------------------
      0011E2                       3229 get_target_line:
      0011E2 CD 0D 24         [ 4] 3230 	call relation 
      0011E5 A1 84            [ 1] 3231 	cp a,#TK_INTGR
      0011E7 27 03            [ 1] 3232 	jreq 1$
      0011E9 CC 07 41         [ 2] 3233 	jp syntax_error
      0011EC 4F               [ 1] 3234 1$:	clr a
      0011ED 90 CE 00 04      [ 2] 3235 	ldw y,basicptr 
      0011F1 90 FE            [ 2] 3236 	ldw y,(y)
      0011F3 90 89            [ 2] 3237 	pushw y 
      0011F5 13 01            [ 2] 3238 	cpw x,(1,sp)
      0011F7 5B 02            [ 2] 3239 	addw sp,#2 
      0011F9 25 01            [ 1] 3240 	jrult 11$
      0011FB 4C               [ 1] 3241 	inc a 
      0011FC                       3242 11$:	
      0011FC CD 23 37         [ 4] 3243 	call search_lineno  
      0011FF 5D               [ 2] 3244 	tnzw x 
      001200 26 05            [ 1] 3245 	jrne 2$ 
      001202 A6 05            [ 1] 3246 	ld a,#ERR_NO_LINE 
      001204 CC 07 43         [ 2] 3247 	jp tb_error 
      001207 81               [ 4] 3248 2$:	ret 
                                   3249 
                                   3250 ;------------------------
                                   3251 ; BASIC: GOTO line# 
                                   3252 ; jump to line# 
                                   3253 ; here cstack is 2 call deep from interpreter 
                                   3254 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001208                       3255 goto:
      001208 72 00 00 20 06   [ 2] 3256 	btjt flags,#FRUN,0$ 
      00120D A6 06            [ 1] 3257 	ld a,#ERR_RUN_ONLY
      00120F CC 07 43         [ 2] 3258 	jp tb_error 
      001212 81               [ 4] 3259 	ret 
      001213 CD 11 E2         [ 4] 3260 0$:	call get_target_line
      001216                       3261 jp_to_target:
      001216 CF 00 04         [ 2] 3262 	ldw basicptr,x 
      001219 E6 02            [ 1] 3263 	ld a,(2,x)
      00121B C7 00 03         [ 1] 3264 	ld count,a 
      00121E 35 03 00 01      [ 1] 3265 	mov in,#3 
      001222 81               [ 4] 3266 	ret 
                                   3267 
                                   3268 
                                   3269 ;--------------------
                                   3270 ; BASIC: GOSUB line#
                                   3271 ; basic subroutine call
                                   3272 ; actual line# and basicptr 
                                   3273 ; are saved on cstack
                                   3274 ; here cstack is 2 call deep from interpreter 
                                   3275 ;--------------------
                           000003  3276 	RET_ADDR=3
                           000005  3277 	RET_INW=5
                           000004  3278 	VSIZE=4  
      001223                       3279 gosub:
      001223 72 00 00 20 06   [ 2] 3280 	btjt flags,#FRUN,0$ 
      001228 A6 06            [ 1] 3281 	ld a,#ERR_RUN_ONLY
      00122A CC 07 43         [ 2] 3282 	jp tb_error 
      00122D 81               [ 4] 3283 	ret 
      00122E 85               [ 2] 3284 0$:	popw x 
      00122F                       3285 	_vars VSIZE  
      00122F 52 04            [ 2]    1     sub sp,#VSIZE 
      001231 89               [ 2] 3286 	pushw x 
      001232 CE 00 04         [ 2] 3287 	ldw x,basicptr
      001235 1F 03            [ 2] 3288 	ldw (RET_ADDR,sp),x 
      001237 CD 11 E2         [ 4] 3289 	call get_target_line  
      00123A 89               [ 2] 3290 	pushw x 
      00123B CE 00 00         [ 2] 3291 	ldw x,in.w 
      00123E 1F 07            [ 2] 3292 	ldw (RET_INW+2,sp),x
      001240 85               [ 2] 3293 	popw x 
      001241 20 D3            [ 2] 3294 	jra jp_to_target
                                   3295 
                                   3296 ;------------------------
                                   3297 ; BASIC: RETURN 
                                   3298 ; exit from a subroutine 
                                   3299 ; 
                                   3300 ;------------------------
      001243                       3301 return:
      001243 72 00 00 20 05   [ 2] 3302 	btjt flags,#FRUN,0$ 
      001248 A6 06            [ 1] 3303 	ld a,#ERR_RUN_ONLY
      00124A CC 07 43         [ 2] 3304 	jp tb_error 
      00124D                       3305 0$:	
      00124D 1E 03            [ 2] 3306 	ldw x,(RET_ADDR,sp) 
      00124F CF 00 04         [ 2] 3307 	ldw basicptr,x
      001252 E6 02            [ 1] 3308 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001254 C7 00 03         [ 1] 3309 	ld count,a  
      001257 1E 05            [ 2] 3310 	ldw x,(RET_INW,sp)
      001259 CF 00 00         [ 2] 3311 	ldw in.w,x 
      00125C 85               [ 2] 3312 	popw x 
      00125D                       3313 	_drop VSIZE 
      00125D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00125F 89               [ 2] 3314 	pushw x
      001260 81               [ 4] 3315 	ret  
                                   3316 
                                   3317 
                                   3318 ;----------------------------------
                                   3319 ; BASIC: RUN
                                   3320 ; run BASIC program in RAM
                                   3321 ;----------------------------------- 
      001261                       3322 run: 
      001261 72 01 00 20 02   [ 2] 3323 	btjf flags,#FRUN,0$  
      001266 4F               [ 1] 3324 	clr a 
      001267 81               [ 4] 3325 	ret
      001268                       3326 0$: 
      001268 72 09 00 20 12   [ 2] 3327 	btjf flags,#FBREAK,1$
      00126D                       3328 	_drop 2 
      00126D 5B 02            [ 2]    1     addw sp,#2 
      00126F CD 0F E1         [ 4] 3329 	call rest_context
      001272                       3330 	_drop CTXT_SIZE 
      001272 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001274 72 19 00 20      [ 1] 3331 	bres flags,#FBREAK 
      001278 72 10 00 20      [ 1] 3332 	bset flags,#FRUN 
      00127C CC 07 E4         [ 2] 3333 	jp interpreter 
      00127F CE 00 19         [ 2] 3334 1$:	ldw x,txtbgn
      001282 C3 00 1B         [ 2] 3335 	cpw x,txtend 
      001285 2B 0C            [ 1] 3336 	jrmi run_it 
      001287 AE 06 DA         [ 2] 3337 	ldw x,#err_no_prog
      00128A CD 20 4F         [ 4] 3338 	call puts 
      00128D 55 00 03 00 01   [ 1] 3339 	mov in,count
      001292 81               [ 4] 3340 	ret 
      001293                       3341 run_it:	 
      001293 CD 0E 35         [ 4] 3342     call ubound 
      001296                       3343 	_drop 2 ; drop return address 
      001296 5B 02            [ 2]    1     addw sp,#2 
                                   3344 ; clear data pointer 
      001298 5F               [ 1] 3345 	clrw x 
      001299 CF 00 06         [ 2] 3346 	ldw data_ptr,x 
      00129C 72 5F 00 08      [ 1] 3347 	clr data_ofs 
      0012A0 72 5F 00 09      [ 1] 3348 	clr data_len 
                                   3349 ; initialize BASIC pointer 
      0012A4 CE 00 19         [ 2] 3350 	ldw x,txtbgn 
      0012A7 CF 00 04         [ 2] 3351 	ldw basicptr,x 
      0012AA E6 02            [ 1] 3352 	ld a,(2,x)
      0012AC C7 00 03         [ 1] 3353 	ld count,a
      0012AF 35 03 00 01      [ 1] 3354 	mov in,#3	
      0012B3 72 10 00 20      [ 1] 3355 	bset flags,#FRUN 
      0012B7 CC 07 E4         [ 2] 3356 	jp interpreter 
                                   3357 
                                   3358 
                                   3359 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3360 ; BASIC: END
                                   3361 ; end running program
                                   3362 ;---------------------- 
      0012BA                       3363 cmd_end: 
                                   3364 ; clean stack 
      0012BA AE 17 FF         [ 2] 3365 	ldw x,#STACK_EMPTY
      0012BD 94               [ 1] 3366 	ldw sp,x 
      0012BE CC 07 C5         [ 2] 3367 	jp warm_start
                                   3368 
                                   3369 ;-----------------
                                   3370 ; 1 Khz beep 
                                   3371 ;-----------------
      0012C1                       3372 beep_1khz:: 
      0012C1 AE 00 64         [ 2] 3373 	ldw x,#100
      0012C4 90 AE 03 E8      [ 2] 3374 	ldw y,#1000
      0012C8 20 0D            [ 2] 3375 	jra beep
                                   3376 
                                   3377 ;-----------------------
                                   3378 ; BASIC: TONE expr1,expr2
                                   3379 ; used TIMER2 channel 1
                                   3380 ; to produce a tone 
                                   3381 ; arguments:
                                   3382 ;    expr1   frequency 
                                   3383 ;    expr2   duration msec.
                                   3384 ;---------------------------
      0012CA                       3385 tone:
      0012CA CD 0B DC         [ 4] 3386 	call arg_list 
      0012CD A1 02            [ 1] 3387 	cp a,#2 
      0012CF 27 03            [ 1] 3388 	jreq 1$
      0012D1 CC 07 41         [ 2] 3389 	jp syntax_error 
      0012D4                       3390 1$: 
      0012D4 85               [ 2] 3391 	popw x ; duration
      0012D5 90 85            [ 2] 3392 	popw y ; frequency 
      0012D7                       3393 beep:  
      0012D7 89               [ 2] 3394 	pushw x 
      0012D8 AE F4 24         [ 2] 3395 	ldw x,#TIM2_CLK_FREQ
      0012DB 65               [ 2] 3396 	divw x,y 
                                   3397 ; round to nearest integer 
      0012DC 90 A3 7A 12      [ 2] 3398 	cpw y,#TIM2_CLK_FREQ/2
      0012E0 2B 01            [ 1] 3399 	jrmi 2$
      0012E2 5C               [ 1] 3400 	incw x 
      0012E3                       3401 2$:	 
      0012E3 9E               [ 1] 3402 	ld a,xh 
      0012E4 C7 53 0D         [ 1] 3403 	ld TIM2_ARRH,a 
      0012E7 9F               [ 1] 3404 	ld a,xl 
      0012E8 C7 53 0E         [ 1] 3405 	ld TIM2_ARRL,a 
                                   3406 ; 50% duty cycle 
      0012EB 8C               [ 1] 3407 	ccf 
      0012EC 56               [ 2] 3408 	rrcw x 
      0012ED 9E               [ 1] 3409 	ld a,xh 
      0012EE C7 53 0F         [ 1] 3410 	ld TIM2_CCR1H,a 
      0012F1 9F               [ 1] 3411 	ld a,xl
      0012F2 C7 53 10         [ 1] 3412 	ld TIM2_CCR1L,a
      0012F5 72 10 53 08      [ 1] 3413 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0012F9 72 10 53 00      [ 1] 3414 	bset TIM2_CR1,#TIM2_CR1_CEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0012FD 72 10 53 04      [ 1] 3415 	bset TIM2_EGR,#TIM2_EGR_UG
      001301 85               [ 2] 3416 	popw x 
      001302 CD 16 9A         [ 4] 3417 	call pause02
      001305 72 11 53 08      [ 1] 3418 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001309 72 11 53 00      [ 1] 3419 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00130D 81               [ 4] 3420 	ret 
                                   3421 
                                   3422 ;-------------------------------
                                   3423 ; BASIC: ADCON 0|1 [,divisor]  
                                   3424 ; disable/enanble ADC 
                                   3425 ;-------------------------------
                           000003  3426 	ONOFF=3 
                           000001  3427 	DIVSOR=1
                           000004  3428 	VSIZE=4 
      00130E                       3429 power_adc:
      00130E CD 0B DC         [ 4] 3430 	call arg_list 
      001311 A1 02            [ 1] 3431 	cp a,#2	
      001313 27 0B            [ 1] 3432 	jreq 1$
      001315 A1 01            [ 1] 3433 	cp a,#1 
      001317 27 03            [ 1] 3434 	jreq 0$ 
      001319 CC 07 41         [ 2] 3435 	jp syntax_error 
      00131C AE 00 00         [ 2] 3436 0$: ldw x,#0
      00131F 89               [ 2] 3437 	pushw x  ; divisor 
      001320 1E 03            [ 2] 3438 1$: ldw x,(ONOFF,sp)
      001322 5D               [ 2] 3439 	tnzw x 
      001323 27 1A            [ 1] 3440 	jreq 2$ 
      001325 1E 01            [ 2] 3441 	ldw x,(DIVSOR,sp) ; divisor 
      001327 9F               [ 1] 3442 	ld a,xl
      001328 A4 07            [ 1] 3443 	and a,#7
      00132A 4E               [ 1] 3444 	swap a 
      00132B C7 54 01         [ 1] 3445 	ld ADC_CR1,a
      00132E 72 16 50 CA      [ 1] 3446 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001332 72 10 54 01      [ 1] 3447 	bset ADC_CR1,#ADC_CR1_ADON 
      001336                       3448 	_usec_dly 7 
      001336 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001339 5A               [ 2]    2     decw x
      00133A 9D               [ 1]    3     nop 
      00133B 26 FA            [ 1]    4     jrne .-4
      00133D 20 08            [ 2] 3449 	jra 3$
      00133F 72 11 54 01      [ 1] 3450 2$: bres ADC_CR1,#ADC_CR1_ADON
      001343 72 17 50 CA      [ 1] 3451 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001347                       3452 3$:	_drop VSIZE 
      001347 5B 04            [ 2]    1     addw sp,#VSIZE 
      001349 81               [ 4] 3453 	ret
                                   3454 
                                   3455 ;-----------------------------
                                   3456 ; BASIC: ADCREAD (channel)
                                   3457 ; read adc channel {0..5}
                                   3458 ; output:
                                   3459 ;   A 		TK_INTGR 
                                   3460 ;   X 		value 
                                   3461 ;-----------------------------
      00134A                       3462 analog_read:
      00134A CD 0B D7         [ 4] 3463 	call func_args 
      00134D A1 01            [ 1] 3464 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00134F 27 03            [ 1] 3465 	jreq 1$
      001351 CC 07 41         [ 2] 3466 	jp syntax_error
      001354 85               [ 2] 3467 1$: popw x 
      001355 A3 00 05         [ 2] 3468 	cpw x,#5 
      001358 23 05            [ 2] 3469 	jrule 2$
      00135A A6 0A            [ 1] 3470 	ld a,#ERR_BAD_VALUE
      00135C CC 07 43         [ 2] 3471 	jp tb_error 
      00135F 9F               [ 1] 3472 2$: ld a,xl
      001360 C7 00 0D         [ 1] 3473 	ld acc8,a 
      001363 A6 05            [ 1] 3474 	ld a,#5
      001365 C0 00 0D         [ 1] 3475 	sub a,acc8 
      001368 C7 54 00         [ 1] 3476 	ld ADC_CSR,a
      00136B 72 16 54 02      [ 1] 3477 	bset ADC_CR2,#ADC_CR2_ALIGN
      00136F 72 10 54 01      [ 1] 3478 	bset ADC_CR1,#ADC_CR1_ADON
      001373 72 0F 54 00 FB   [ 2] 3479 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001378 CE 54 04         [ 2] 3480 	ldw x,ADC_DRH
      00137B A6 84            [ 1] 3481 	ld a,#TK_INTGR
      00137D 81               [ 4] 3482 	ret 
                                   3483 
                                   3484 ;-----------------------
                                   3485 ; BASIC: DREAD(pin)
                                   3486 ; Arduino pins 
                                   3487 ; read state of a digital pin 
                                   3488 ; pin# {0..15}
                                   3489 ; output:
                                   3490 ;    A 		TK_INTGR
                                   3491 ;    X      0|1 
                                   3492 ;-------------------------
                           000001  3493 	PINNO=1
                           000001  3494 	VSIZE=1
      00137E                       3495 digital_read:
      00137E                       3496 	_vars VSIZE 
      00137E 52 01            [ 2]    1     sub sp,#VSIZE 
      001380 CD 0B D7         [ 4] 3497 	call func_args
      001383 A1 01            [ 1] 3498 	cp a,#1
      001385 27 03            [ 1] 3499 	jreq 1$
      001387 CC 07 41         [ 2] 3500 	jp syntax_error
      00138A 85               [ 2] 3501 1$: popw x 
      00138B A3 00 0F         [ 2] 3502 	cpw x,#15 
      00138E 23 05            [ 2] 3503 	jrule 2$
      001390 A6 0A            [ 1] 3504 	ld a,#ERR_BAD_VALUE
      001392 CC 07 43         [ 2] 3505 	jp tb_error 
      001395 CD 17 D8         [ 4] 3506 2$:	call select_pin 
      001398 6B 01            [ 1] 3507 	ld (PINNO,sp),a
      00139A E6 01            [ 1] 3508 	ld a,(GPIO_IDR,x)
      00139C 0D 01            [ 1] 3509 	tnz (PINNO,sp)
      00139E 27 05            [ 1] 3510 	jreq 8$
      0013A0 44               [ 1] 3511 3$: srl a 
      0013A1 0A 01            [ 1] 3512 	dec (PINNO,sp)
      0013A3 26 FB            [ 1] 3513 	jrne 3$ 
      0013A5 A4 01            [ 1] 3514 8$: and a,#1 
      0013A7 5F               [ 1] 3515 	clrw x 
      0013A8 97               [ 1] 3516 	ld xl,a 
      0013A9 A6 84            [ 1] 3517 	ld a,#TK_INTGR
      0013AB                       3518 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013AB 5B 01            [ 2]    1     addw sp,#VSIZE 
      0013AD 81               [ 4] 3519 	ret
                                   3520 
                                   3521 
                                   3522 ;-----------------------
                                   3523 ; BASIC: DWRITE pin,0|1
                                   3524 ; Arduino pins 
                                   3525 ; write to a digital pin 
                                   3526 ; pin# {0..15}
                                   3527 ; output:
                                   3528 ;    A 		TK_INTGR
                                   3529 ;    X      0|1 
                                   3530 ;-------------------------
                           000001  3531 	PINNO=1
                           000002  3532 	PINVAL=2
                           000002  3533 	VSIZE=2
      0013AE                       3534 digital_write:
      0013AE                       3535 	_vars VSIZE 
      0013AE 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B0 CD 0B DC         [ 4] 3536 	call arg_list  
      0013B3 A1 02            [ 1] 3537 	cp a,#2 
      0013B5 27 03            [ 1] 3538 	jreq 1$
      0013B7 CC 07 41         [ 2] 3539 	jp syntax_error
      0013BA 85               [ 2] 3540 1$: popw x 
      0013BB 9F               [ 1] 3541 	ld a,xl 
      0013BC 6B 02            [ 1] 3542 	ld (PINVAL,sp),a
      0013BE 85               [ 2] 3543 	popw x 
      0013BF A3 00 0F         [ 2] 3544 	cpw x,#15 
      0013C2 23 05            [ 2] 3545 	jrule 2$
      0013C4 A6 0A            [ 1] 3546 	ld a,#ERR_BAD_VALUE
      0013C6 CC 07 43         [ 2] 3547 	jp tb_error 
      0013C9 CD 17 D8         [ 4] 3548 2$:	call select_pin 
      0013CC 6B 01            [ 1] 3549 	ld (PINNO,sp),a 
      0013CE A6 01            [ 1] 3550 	ld a,#1
      0013D0 0D 01            [ 1] 3551 	tnz (PINNO,sp)
      0013D2 27 05            [ 1] 3552 	jreq 4$
      0013D4 48               [ 1] 3553 3$: sll a
      0013D5 0A 01            [ 1] 3554 	dec (PINNO,sp)
      0013D7 26 FB            [ 1] 3555 	jrne 3$
      0013D9 0D 02            [ 1] 3556 4$: tnz (PINVAL,sp)
      0013DB 26 05            [ 1] 3557 	jrne 5$
      0013DD 43               [ 1] 3558 	cpl a 
      0013DE E4 00            [ 1] 3559 	and a,(GPIO_ODR,x)
      0013E0 20 02            [ 2] 3560 	jra 8$
      0013E2 EA 00            [ 1] 3561 5$: or a,(GPIO_ODR,x)
      0013E4 E7 00            [ 1] 3562 8$: ld (GPIO_ODR,x),a 
      0013E6                       3563 	_drop VSIZE 
      0013E6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013E8 81               [ 4] 3564 	ret
                                   3565 
                                   3566 
                                   3567 ;-----------------------
                                   3568 ; BASIC: STOP
                                   3569 ; stop progam execution  
                                   3570 ; without resetting pointers 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3571 ; the program is resumed
                                   3572 ; with RUN 
                                   3573 ;-------------------------
      0013E9                       3574 stop:
      0013E9 72 00 00 20 02   [ 2] 3575 	btjt flags,#FRUN,2$
      0013EE 4F               [ 1] 3576 	clr a
      0013EF 81               [ 4] 3577 	ret 
      0013F0                       3578 2$:	 
                                   3579 ; create space on cstack to save context 
      0013F0 AE 14 17         [ 2] 3580 	ldw x,#break_point 
      0013F3 CD 20 4F         [ 4] 3581 	call puts 
      0013F6                       3582 	_drop 2 ;drop return address 
      0013F6 5B 02            [ 2]    1     addw sp,#2 
      0013F8                       3583 	_vars CTXT_SIZE ; context size 
      0013F8 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0013FA CD 0F D1         [ 4] 3584 	call save_context 
      0013FD AE 16 90         [ 2] 3585 	ldw x,#tib 
      001400 CF 00 04         [ 2] 3586 	ldw basicptr,x
      001403 7F               [ 1] 3587 	clr (x)
      001404 72 5F 00 03      [ 1] 3588 	clr count  
      001408 5F               [ 1] 3589 	clrw x 
      001409 CF 00 00         [ 2] 3590 	ldw in.w,x
      00140C 72 11 00 20      [ 1] 3591 	bres flags,#FRUN 
      001410 72 18 00 20      [ 1] 3592 	bset flags,#FBREAK
      001414 CC 07 E4         [ 2] 3593 	jp interpreter 
      001417 0A 62 72 65 61 6B 20  3594 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3595 
                                   3596 ;-----------------------
                                   3597 ; BASIC: NEW
                                   3598 ; from command line only 
                                   3599 ; free program memory
                                   3600 ; and clear variables 
                                   3601 ;------------------------
      001435                       3602 new: 
      001435 72 01 00 20 01   [ 2] 3603 	btjf flags,#FRUN,0$ 
      00143A 81               [ 4] 3604 	ret 
      00143B                       3605 0$:	
      00143B CD 05 A9         [ 4] 3606 	call clear_basic 
      00143E 81               [ 4] 3607 	ret 
                                   3608 
                                   3609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3610 ;;;  flash memory operations
                                   3611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3612 
                                   3613 ;--------------------------
                                   3614 ; align farptr to BLOCK_SIZE 
                                   3615 ;---------------------------
      00143F                       3616 row_align:
      00143F A6 7F            [ 1] 3617 	ld a,#0x7f 
      001441 C4 00 18         [ 1] 3618 	and a,farptr+2 
      001444 27 13            [ 1] 3619 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001446 CE 00 17         [ 2] 3620 	ldw x,farptr+1 
      001449 1C 00 80         [ 2] 3621 	addw x,#BLOCK_SIZE 
      00144C 24 04            [ 1] 3622 	jrnc 0$
      00144E 72 5C 00 16      [ 1] 3623 	inc farptr 
      001452 9F               [ 1] 3624 0$: ld a,xl 
      001453 A4 80            [ 1] 3625 	and a,#0x80
      001455 97               [ 1] 3626 	ld xl,a
      001456 CF 00 17         [ 2] 3627 	ldw farptr+1,x  	
      001459 81               [ 4] 3628 1$:	ret
                                   3629 
                                   3630 ;--------------------
                                   3631 ; input:
                                   3632 ;   X     increment 
                                   3633 ; output:
                                   3634 ;   farptr  incremented 
                                   3635 ;---------------------
      00145A                       3636 incr_farptr:
      00145A 72 BB 00 17      [ 2] 3637 	addw x,farptr+1 
      00145E 24 04            [ 1] 3638 	jrnc 1$
      001460 72 5C 00 16      [ 1] 3639 	inc farptr 
      001464 CF 00 17         [ 2] 3640 1$:	ldw farptr+1,x  
      001467 81               [ 4] 3641 	ret 
                                   3642 
                                   3643 ;-----------------------------------
                                   3644 ; scan block for non zero byte 
                                   3645 ; block are 128 bytes 
                                   3646 ; input:
                                   3647 ;    farptr     address block  
                                   3648 ; output:
                                   3649 ;     A     0 cleared, other not cleared  
                                   3650 ;-----------------------------------
      001468                       3651 scan_block:
      001468 5F               [ 1] 3652 	clrw x 
      001469 92 AF 00 16      [ 5] 3653 1$: ldf a,([farptr],x) 
      00146D 26 06            [ 1] 3654 	jrne 2$
      00146F 5C               [ 1] 3655 	incw x 
      001470 A3 00 80         [ 2] 3656 	cpw x,#BLOCK_SIZE 
      001473 25 F4            [ 1] 3657 	jrult 1$ 
      001475 81               [ 4] 3658 2$:	ret 
                                   3659 
                                   3660 
                                   3661 
                                   3662 ;-----------------------------------
                                   3663 ; BASIC: ERASE \E | \F 
                                   3664 ; erase all block in range from 
                                   3665 ;  'app_space' to FLASH end (0x20000)
                                   3666 ;  or all EEPROM 
                                   3667 ; that contains a non zero byte.  
                                   3668 ;-----------------------------------
                           000001  3669 	LIMIT=1 
                           000003  3670 	VSIZE = 3 
      001476                       3671 erase:
      001476 72 5F 00 16      [ 1] 3672 	clr farptr 
      00147A                       3673 	_vars VSIZE 
      00147A 52 03            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00147C CD 08 30         [ 4] 3674 	call next_token 
      00147F A1 03            [ 1] 3675 	cp a,#TK_CHAR 
      001481 27 03            [ 1] 3676 	jreq 0$ 
      001483 CC 07 41         [ 2] 3677 	jp syntax_error
      001486 9F               [ 1] 3678 0$: ld a,xl 
      001487 A4 DF            [ 1] 3679 	and a,#0XDF 
      001489 A1 45            [ 1] 3680 	cp a,#'E
      00148B 26 0C            [ 1] 3681 	jrne 1$
      00148D AE 40 00         [ 2] 3682 	ldw x,#EEPROM_BASE 
      001490 CF 00 17         [ 2] 3683 	ldw farptr+1,x 
      001493 AE 47 FF         [ 2] 3684 	ldw x,#EEPROM_END
      001496 4F               [ 1] 3685 	clr a 
      001497 20 15            [ 2] 3686 	jra 3$ 
      001499 A1 46            [ 1] 3687 1$: cp a,#'F 
      00149B 27 06            [ 1] 3688 	jreq 2$
      00149D AE 06 8B         [ 2] 3689 	ldw x,#err_bad_value
      0014A0 CC 07 43         [ 2] 3690 	jp tb_error
      0014A3                       3691 2$:
      0014A3 AE 2A 00         [ 2] 3692 	ldw x,#app_sign 
      0014A6 CF 00 17         [ 2] 3693 	ldw farptr+1,x 
      0014A9 A6 02            [ 1] 3694 	ld a,#(FLASH_END>>16)&0XFF 
      0014AB AE 7F FF         [ 2] 3695 	ldw x,#FLASH_END&0xffff
      0014AE                       3696 3$:
      0014AE 6B 01            [ 1] 3697 	ld (LIMIT,sp),a 
      0014B0 1F 02            [ 2] 3698 	ldw (LIMIT+1,sp),x 
                                   3699  ; operation done from RAM
                                   3700  ; copy code to RAM in tib   
      0014B2 CD 01 3E         [ 4] 3701 	call move_erase_to_ram
      0014B5                       3702 4$:	 
      0014B5 CD 14 68         [ 4] 3703     call scan_block 
      0014B8 27 08            [ 1] 3704 	jreq 5$  ; block already erased 
      0014BA A6 45            [ 1] 3705     ld a,#'E 
      0014BC CD 02 C1         [ 4] 3706     call putc 
      0014BF CD 01 BC         [ 4] 3707 	call block_erase   
                                   3708 ; this block is clean, next  
      0014C2 AE 00 80         [ 2] 3709 5$:	ldw x,#BLOCK_SIZE
      0014C5 CD 14 5A         [ 4] 3710 	call incr_farptr
                                   3711 ; check limit, 24 bit substraction  	
      0014C8 7B 01            [ 1] 3712 	ld a,(LIMIT,sp)
      0014CA 1E 02            [ 2] 3713 	ldw x,(LIMIT+1,sp)
      0014CC 72 B0 00 17      [ 2] 3714 	subw x,farptr+1
      0014D0 C2 00 16         [ 1] 3715 	sbc a,farptr 
      0014D3 22 E0            [ 1] 3716 	jrugt 4$ 
      0014D5 CD 05 A9         [ 4] 3717 9$: call clear_basic
      0014D8                       3718 	_drop VSIZE 
      0014D8 5B 03            [ 2]    1     addw sp,#VSIZE 
      0014DA 81               [ 4] 3719 	ret 
                                   3720 	
                                   3721 
                                   3722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3723 ;  check for application signature 
                                   3724 ; output:
                                   3725 ;   Carry    0 app present 
                                   3726 ;            1 no app installed  
                                   3727 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014DB                       3728 qsign: 
      0014DB CE 2A 00         [ 2] 3729 	ldw x,app_sign 
      0014DE C3 15 43         [ 2] 3730 	cpw x,SIGNATURE ; "BC" 
      0014E1 81               [ 4] 3731 	ret 
                                   3732 
                                   3733 ;---------------------------------------
                                   3734 ; BASIC: SAVE
                                   3735 ; write application in RAM to FLASH
                                   3736 ;--------------------------------------
      0014E2                       3737 save_app:
      0014E2 CD 14 DB         [ 4] 3738 	call qsign 
      0014E5 26 09            [ 1] 3739 	jrne 1$
      0014E7 AE 15 45         [ 2] 3740 	ldw x,#CANT_DO 
      0014EA CD 20 4F         [ 4] 3741 	call puts 
      0014ED CC 15 42         [ 2] 3742 	jp 9$
      0014F0                       3743 1$: 
      0014F0 CE 00 19         [ 2] 3744 	ldw x,txtbgn
      0014F3 C3 00 1B         [ 2] 3745 	cpw x,txtend 
      0014F6 25 08            [ 1] 3746 	jrult 2$ 
      0014F8 AE 15 84         [ 2] 3747 	ldw x,#NO_APP
      0014FB CD 20 4F         [ 4] 3748 	call puts 
      0014FE 20 42            [ 2] 3749 	jra 9$
      001500                       3750 2$: 
                                   3751 ; block programming flash
                                   3752 ; must be done from RAM 
      001500 CD 01 7E         [ 4] 3753 	call move_prg_to_ram
                                   3754 ; initialize farptr 
      001503 72 5F 00 16      [ 1] 3755 	clr farptr 
      001507 AE 2A 00         [ 2] 3756 	ldw x,#app_sign 
      00150A CF 00 17         [ 2] 3757 	ldw farptr+1,x 
                                   3758 ; write signature
      00150D CE 15 43         [ 2] 3759 	ldw x,SIGNATURE ; "BC" 
      001510 CF 00 7C         [ 2] 3760 	ldw rsign,x 
      001513 CE 00 1B         [ 2] 3761 	ldw x,txtend 
      001516 72 B0 00 19      [ 2] 3762 	subw x,txtbgn 
      00151A CF 00 7E         [ 2] 3763 	ldw rsize,x   
                                   3764 ;copy block to flash
      00151D AE 00 7C         [ 2] 3765 	ldw x,#rsign  
      001520 1F 01            [ 2] 3766 	ldw (1,sp),x   
      001522 1E 01            [ 2] 3767 3$:	ldw x,(1,sp)
      001524 CD 01 98         [ 4] 3768 	call write_row 
      001527 A6 2E            [ 1] 3769     ld a,#'. 
      001529 CD 02 C1         [ 4] 3770     call putc 
      00152C 1E 01            [ 2] 3771 	ldw x,(1,sp)
      00152E 1C 00 80         [ 2] 3772 	addw x,#BLOCK_SIZE
      001531 1F 01            [ 2] 3773 	ldw (1,sp),x  
      001533 C3 00 1B         [ 2] 3774 	cpw x,txtend 
      001536 24 08            [ 1] 3775 	jruge 8$
      001538 AE 00 80         [ 2] 3776 	ldw x,#BLOCK_SIZE 
      00153B CD 14 5A         [ 4] 3777 	call incr_farptr
      00153E 20 E2            [ 2] 3778 	jra 3$ 
      001540                       3779 8$:	
      001540                       3780 	_drop 2   
      001540 5B 02            [ 2]    1     addw sp,#2 
      001542 81               [ 4] 3781 9$: ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3782 
      001543 42 43                 3783 SIGNATURE: .ascii "BC"
      001545 43 61 6E 27 74 20 66  3784 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             62 65 66 6F 72 65 00
      001584 4E 6F 20 61 70 70 6C  3785 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3786 
                                   3787 ;---------------------
                                   3788 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3789 ; write 1 or more byte to FLASH or EEPROM
                                   3790 ; starting at address  
                                   3791 ; input:
                                   3792 ;   expr1  	is address 
                                   3793 ;   expr2,...,exprn   are bytes to write
                                   3794 ; output:
                                   3795 ;   none 
                                   3796 ;---------------------
                           000001  3797 	ADDR=1
                           000002  3798 	VSIZ=2 
      00159A                       3799 write:
      00159A                       3800 	_vars VSIZE 
      00159A 52 03            [ 2]    1     sub sp,#VSIZE 
      00159C 72 5F 00 16      [ 1] 3801 	clr farptr ; expect 16 bits address 
      0015A0 CD 0C DB         [ 4] 3802 	call expression
      0015A3 A1 84            [ 1] 3803 	cp a,#TK_INTGR 
      0015A5 27 03            [ 1] 3804 	jreq 0$
      0015A7 CC 07 41         [ 2] 3805 	jp syntax_error
      0015AA 1F 01            [ 2] 3806 0$: ldw (ADDR,sp),x 
      0015AC CD 08 30         [ 4] 3807 	call next_token 
      0015AF A1 09            [ 1] 3808 	cp a,#TK_COMMA 
      0015B1 27 02            [ 1] 3809 	jreq 1$ 
      0015B3 20 19            [ 2] 3810 	jra 9$ 
      0015B5 CD 0C DB         [ 4] 3811 1$:	call expression
      0015B8 A1 84            [ 1] 3812 	cp a,#TK_INTGR
      0015BA 27 03            [ 1] 3813 	jreq 2$
      0015BC CC 07 41         [ 2] 3814 	jp syntax_error
      0015BF 9F               [ 1] 3815 2$:	ld a,xl 
      0015C0 1E 01            [ 2] 3816 	ldw x,(ADDR,sp) 
      0015C2 CF 00 17         [ 2] 3817 	ldw farptr+1,x 
      0015C5 5F               [ 1] 3818 	clrw x 
      0015C6 CD 01 DD         [ 4] 3819 	call write_byte
      0015C9 1E 01            [ 2] 3820 	ldw x,(ADDR,sp)
      0015CB 5C               [ 1] 3821 	incw x 
      0015CC 20 DC            [ 2] 3822 	jra 0$ 
      0015CE                       3823 9$:
      0015CE                       3824 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015CE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0015D0 81               [ 4] 3825 	ret 
                                   3826 
                                   3827 
                                   3828 ;---------------------
                                   3829 ;BASIC: CHAR(expr)
                                   3830 ; évaluate expression 
                                   3831 ; and take the 7 least 
                                   3832 ; bits as ASCII character
                                   3833 ; return a TK_CHAR 
                                   3834 ;---------------------
      0015D1                       3835 char:
      0015D1 CD 0B D7         [ 4] 3836 	call func_args 
      0015D4 A1 01            [ 1] 3837 	cp a,#1
      0015D6 27 03            [ 1] 3838 	jreq 1$
      0015D8 CC 07 41         [ 2] 3839 	jp syntax_error
      0015DB 85               [ 2] 3840 1$:	popw x 
      0015DC 9F               [ 1] 3841 	ld a,xl 
      0015DD A4 7F            [ 1] 3842 	and a,#0x7f 
      0015DF 97               [ 1] 3843 	ld xl,a
      0015E0 A6 03            [ 1] 3844 	ld a,#TK_CHAR
      0015E2 81               [ 4] 3845 	ret
                                   3846 
                                   3847 ;---------------------
                                   3848 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3849 ; extract first character 
                                   3850 ; of string argument 
                                   3851 ; return it as TK_INTGR 
                                   3852 ;---------------------
      0015E3                       3853 ascii:
      0015E3 A6 07            [ 1] 3854 	ld a,#TK_LPAREN
      0015E5 CD 0B CA         [ 4] 3855 	call expect 
      0015E8 CD 08 30         [ 4] 3856 	call next_token 
      0015EB A1 02            [ 1] 3857 	cp a,#TK_QSTR 
      0015ED 27 0E            [ 1] 3858 	jreq 1$
      0015EF A1 03            [ 1] 3859 	cp a,#TK_CHAR 
      0015F1 27 0D            [ 1] 3860 	jreq 2$ 
      0015F3 A1 82            [ 1] 3861 	cp a,#TK_CFUNC 
      0015F5 27 03            [ 1] 3862 	jreq 0$
      0015F7 CC 07 41         [ 2] 3863 	jp syntax_error
      0015FA FD               [ 4] 3864 0$: call (x)
      0015FB 20 03            [ 2] 3865 	jra 2$
      0015FD                       3866 1$: 
      0015FD F6               [ 1] 3867 	ld a,(x) 
      0015FE 5F               [ 1] 3868 	clrw x
      0015FF 97               [ 1] 3869 	ld xl,a 
      001600                       3870 2$: 
      001600 89               [ 2] 3871 	pushw x 
      001601 A6 08            [ 1] 3872 	ld a,#TK_RPAREN 
      001603 CD 0B CA         [ 4] 3873 	call expect
      001606 85               [ 2] 3874 	popw x 
      001607 A6 84            [ 1] 3875 	ld a,#TK_INTGR 
      001609 81               [ 4] 3876 	ret 
                                   3877 
                                   3878 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3879 ;BASIC: KEY
                                   3880 ; wait for a character 
                                   3881 ; received from STDIN 
                                   3882 ; input:
                                   3883 ;	none 
                                   3884 ; output:
                                   3885 ;	X 		ASCII character 
                                   3886 ;---------------------
      00160A                       3887 key:
      00160A CD 02 D1         [ 4] 3888 	call getc 
      00160D 5F               [ 1] 3889 	clrw x 
      00160E 97               [ 1] 3890 	ld xl,a 
      00160F A6 84            [ 1] 3891 	ld a,#TK_INTGR
      001611 81               [ 4] 3892 	ret
                                   3893 
                                   3894 ;----------------------
                                   3895 ; BASIC: QKEY
                                   3896 ; Return true if there 
                                   3897 ; is a character in 
                                   3898 ; waiting in STDIN 
                                   3899 ; input:
                                   3900 ;  none 
                                   3901 ; output:
                                   3902 ;   X 		0|-1 
                                   3903 ;-----------------------
      001612                       3904 qkey:: 
      001612 5F               [ 1] 3905 	clrw x 
      001613 C6 00 2A         [ 1] 3906 	ld a,rx1_head
      001616 C1 00 2B         [ 1] 3907 	cp a,rx1_tail 
      001619 27 01            [ 1] 3908 	jreq 9$ 
      00161B 53               [ 2] 3909 	cplw x 
      00161C A6 84            [ 1] 3910 9$: ld a,#TK_INTGR
      00161E 81               [ 4] 3911 	ret 
                                   3912 
                                   3913 ;---------------------
                                   3914 ; BASIC: GPIO(expr,reg)
                                   3915 ; return gpio address 
                                   3916 ; expr {0..8}
                                   3917 ; input:
                                   3918 ;   none 
                                   3919 ; output:
                                   3920 ;   X 		gpio register address
                                   3921 ;----------------------------
                           000003  3922 	PORT=3
                           000001  3923 	REG=1 
                           000004  3924 	VSIZE=4 
      00161F                       3925 gpio:
      00161F CD 0B D7         [ 4] 3926 	call func_args 
      001622 A1 02            [ 1] 3927 	cp a,#2
      001624 27 03            [ 1] 3928 	jreq 1$
      001626 CC 07 41         [ 2] 3929 	jp syntax_error  
      001629                       3930 1$:	
      001629 1E 03            [ 2] 3931 	ldw x,(PORT,sp)
      00162B 2B 17            [ 1] 3932 	jrmi bad_port
      00162D A3 00 09         [ 2] 3933 	cpw x,#9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001630 2A 12            [ 1] 3934 	jrpl bad_port
      001632 A6 05            [ 1] 3935 	ld a,#5
      001634 42               [ 4] 3936 	mul x,a
      001635 1C 50 00         [ 2] 3937 	addw x,#GPIO_BASE 
      001638 1F 03            [ 2] 3938 	ldw (PORT,sp),x  
      00163A 1E 01            [ 2] 3939 	ldw x,(REG,sp) 
      00163C 72 FB 03         [ 2] 3940 	addw x,(PORT,sp)
      00163F A6 84            [ 1] 3941 	ld a,#TK_INTGR
      001641                       3942 	_drop VSIZE 
      001641 5B 04            [ 2]    1     addw sp,#VSIZE 
      001643 81               [ 4] 3943 	ret
      001644                       3944 bad_port:
      001644 A6 0A            [ 1] 3945 	ld a,#ERR_BAD_VALUE
      001646 CC 07 43         [ 2] 3946 	jp tb_error
                                   3947 
                                   3948 
                                   3949 ;-------------------------
                                   3950 ; BASIC: UFLASH 
                                   3951 ; return free flash address
                                   3952 ; input:
                                   3953 ;  none 
                                   3954 ; output:
                                   3955 ;	A		TK_INTGR
                                   3956 ;   X 		free address 
                                   3957 ;---------------------------
      001649                       3958 uflash:
      001649 CE 2A 00         [ 2] 3959 	ldw x,app_sign
      00164C A3 10 93         [ 2] 3960 	cpw x,#4243 ; signature "BC" 
      00164F 27 08            [ 1] 3961 	jreq 1$
      001651 CE 2A 02         [ 2] 3962 	ldw x,app_size 
      001654 1C 2A 04         [ 2] 3963 	addw x,#app
      001657 20 03            [ 2] 3964 	jra 2$
      001659 AE 2A 00         [ 2] 3965 1$:	ldw x,#app_space 
      00165C A6 84            [ 1] 3966 2$:	ld a,#TK_INTGR 
      00165E 81               [ 4] 3967 	ret 
                                   3968 
                                   3969 
                                   3970 ;---------------------
                                   3971 ; BASIC: USR(addr[,arg])
                                   3972 ; execute a function written 
                                   3973 ; in binary code.
                                   3974 ; binary fonction should 
                                   3975 ; return token attribute in A 
                                   3976 ; and value in X. 
                                   3977 ; input:
                                   3978 ;   addr	routine address 
                                   3979 ;   arg 	is an optional argument 
                                   3980 ; output:
                                   3981 ;   A 		token attribute 
                                   3982 ;   X       returned value 
                                   3983 ;---------------------
      00165F                       3984 usr:
      00165F 90 89            [ 2] 3985 	pushw y 	
      001661 CD 0B D7         [ 4] 3986 	call func_args 
      001664 A1 01            [ 1] 3987 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001666 27 07            [ 1] 3988 	jreq 2$
      001668 A1 02            [ 1] 3989 	cp a,#2
      00166A 27 03            [ 1] 3990 	jreq 2$  
      00166C CC 07 41         [ 2] 3991 	jp syntax_error 
      00166F 90 85            [ 2] 3992 2$: popw y  ; arg|addr 
      001671 A1 01            [ 1] 3993 	cp a,#1
      001673 27 02            [ 1] 3994 	jreq 3$
      001675 85               [ 2] 3995 	popw x ; addr
      001676 51               [ 1] 3996 	exgw x,y 
      001677 90 FD            [ 4] 3997 3$: call (y)
      001679 90 85            [ 2] 3998 	popw y 
      00167B 81               [ 4] 3999 	ret 
                                   4000 
                                   4001 ;------------------------------
                                   4002 ; BASIC: BYE 
                                   4003 ; halt mcu in its lowest power mode 
                                   4004 ; wait for reset or external interrupt
                                   4005 ; do a cold start on wakeup.
                                   4006 ;------------------------------
      00167C                       4007 bye:
      00167C 72 0D 52 30 FB   [ 2] 4008 	btjf UART1_SR,#UART_SR_TC,.
      001681 8E               [10] 4009 	halt
      001682 CC 04 86         [ 2] 4010 	jp cold_start  
                                   4011 
                                   4012 ;----------------------------------
                                   4013 ; BASIC: SLEEP 
                                   4014 ; halt mcu until reset or external
                                   4015 ; interrupt.
                                   4016 ; Resume progam after SLEEP command
                                   4017 ;----------------------------------
      001685                       4018 sleep:
      001685 72 0D 52 30 FB   [ 2] 4019 	btjf UART1_SR,#UART_SR_TC,.
      00168A 72 16 00 20      [ 1] 4020 	bset flags,#FSLEEP
      00168E 8E               [10] 4021 	halt 
      00168F 81               [ 4] 4022 	ret 
                                   4023 
                                   4024 ;-------------------------------
                                   4025 ; BASIC: PAUSE expr 
                                   4026 ; suspend execution for n msec.
                                   4027 ; input:
                                   4028 ;	none
                                   4029 ; output:
                                   4030 ;	none 
                                   4031 ;------------------------------
      001690                       4032 pause:
      001690 CD 0C DB         [ 4] 4033 	call expression
      001693 A1 84            [ 1] 4034 	cp a,#TK_INTGR
      001695 27 03            [ 1] 4035 	jreq pause02 
      001697 CC 07 41         [ 2] 4036 	jp syntax_error
      00169A                       4037 pause02: 
      00169A 5D               [ 2] 4038 1$: tnzw x 
      00169B 27 04            [ 1] 4039 	jreq 2$
      00169D 8F               [10] 4040 	wfi 
      00169E 5A               [ 2] 4041 	decw x 
      00169F 26 F9            [ 1] 4042 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016A1 4F               [ 1] 4043 2$:	clr a 
      0016A2 81               [ 4] 4044 	ret 
                                   4045 
                                   4046 ;------------------------------
                                   4047 ; BASIC: AWU expr
                                   4048 ; halt mcu for 'expr' milliseconds
                                   4049 ; use Auto wakeup peripheral
                                   4050 ; all oscillators stopped except LSI
                                   4051 ; range: 1ms - 511ms
                                   4052 ; input:
                                   4053 ;  none
                                   4054 ; output:
                                   4055 ;  none:
                                   4056 ;------------------------------
      0016A3                       4057 awu:
      0016A3 CD 0C DB         [ 4] 4058   call expression
      0016A6 A1 84            [ 1] 4059   cp a,#TK_INTGR
      0016A8 27 03            [ 1] 4060   jreq awu02
      0016AA CC 07 41         [ 2] 4061   jp syntax_error
      0016AD                       4062 awu02:
      0016AD A3 14 00         [ 2] 4063   cpw x,#5120
      0016B0 2B 0C            [ 1] 4064   jrmi 1$ 
      0016B2 35 0F 50 F2      [ 1] 4065   mov AWU_TBR,#15 
      0016B6 A6 1E            [ 1] 4066   ld a,#30
      0016B8 62               [ 2] 4067   div x,a
      0016B9 A6 10            [ 1] 4068   ld a,#16
      0016BB 62               [ 2] 4069   div x,a 
      0016BC 20 1E            [ 2] 4070   jra 4$
      0016BE                       4071 1$: 
      0016BE A3 08 00         [ 2] 4072   cpw x,#2048
      0016C1 2B 09            [ 1] 4073   jrmi 2$ 
      0016C3 35 0E 50 F2      [ 1] 4074   mov AWU_TBR,#14
      0016C7 A6 50            [ 1] 4075   ld a,#80
      0016C9 62               [ 2] 4076   div x,a 
      0016CA 20 10            [ 2] 4077   jra 4$   
      0016CC                       4078 2$:
      0016CC 35 07 50 F2      [ 1] 4079   mov AWU_TBR,#7
      0016D0                       4080 3$:  
                                   4081 ; while X > 64  divide by 2 and increment AWU_TBR 
      0016D0 A3 00 40         [ 2] 4082   cpw x,#64 
      0016D3 23 07            [ 2] 4083   jrule 4$ 
      0016D5 72 5C 50 F2      [ 1] 4084   inc AWU_TBR 
      0016D9 54               [ 2] 4085   srlw x 
      0016DA 20 F4            [ 2] 4086   jra 3$ 
      0016DC                       4087 4$:
      0016DC 9F               [ 1] 4088   ld a, xl
      0016DD 4A               [ 1] 4089   dec a 
      0016DE 27 01            [ 1] 4090   jreq 5$
      0016E0 4A               [ 1] 4091   dec a 	
      0016E1                       4092 5$: 
      0016E1 A4 3E            [ 1] 4093   and a,#0x3e 
      0016E3 C7 50 F1         [ 1] 4094   ld AWU_APR,a 
      0016E6 72 18 50 F0      [ 1] 4095   bset AWU_CSR,#AWU_CSR_AWUEN
      0016EA 8E               [10] 4096   halt 
                                   4097 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016EB 81               [ 4] 4098   ret 
                                   4099 
                                   4100 ;------------------------------
                                   4101 ; BASIC: TICKS
                                   4102 ; return msec ticks counter value 
                                   4103 ; input:
                                   4104 ; 	none 
                                   4105 ; output:
                                   4106 ;	X 		TK_INTGR
                                   4107 ;-------------------------------
      0016EC                       4108 get_ticks:
      0016EC CE 00 0E         [ 2] 4109 	ldw x,ticks 
      0016EF A6 84            [ 1] 4110 	ld a,#TK_INTGR
      0016F1 81               [ 4] 4111 	ret 
                                   4112 
                                   4113 
                                   4114 
                                   4115 ;------------------------------
                                   4116 ; BASIC: ABS(expr)
                                   4117 ; return absolute value of expr.
                                   4118 ; input:
                                   4119 ;   none
                                   4120 ; output:
                                   4121 ;   X     	positive integer
                                   4122 ;-------------------------------
      0016F2                       4123 abs:
      0016F2 CD 0B D7         [ 4] 4124 	call func_args 
      0016F5 A1 01            [ 1] 4125 	cp a,#1 
      0016F7 27 03            [ 1] 4126 	jreq 0$ 
      0016F9 CC 07 41         [ 2] 4127 	jp syntax_error
      0016FC                       4128 0$:  
      0016FC 85               [ 2] 4129     popw x   
      0016FD 9E               [ 1] 4130 	ld a,xh 
      0016FE A5 80            [ 1] 4131 	bcp a,#0x80 
      001700 27 01            [ 1] 4132 	jreq 2$ 
      001702 50               [ 2] 4133 	negw x 
      001703 A6 84            [ 1] 4134 2$: ld a,#TK_INTGR 
      001705 81               [ 4] 4135 	ret 
                                   4136 
                                   4137 ;------------------------------
                                   4138 ; BASIC: AND(expr1,expr2)
                                   4139 ; Apply bit AND relation between
                                   4140 ; the 2 arguments, i.e expr1 & expr2 
                                   4141 ; output:
                                   4142 ; 	A 		TK_INTGR
                                   4143 ;   X 		result 
                                   4144 ;------------------------------
      001706                       4145 bit_and:
      001706 CD 0B D7         [ 4] 4146 	call func_args 
      001709 A1 02            [ 1] 4147 	cp a,#2
      00170B 27 03            [ 1] 4148 	jreq 1$
      00170D CC 07 41         [ 2] 4149 	jp syntax_error 
      001710 85               [ 2] 4150 1$:	popw x 
      001711 9E               [ 1] 4151 	ld a,xh 
      001712 14 01            [ 1] 4152 	and a,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001714 95               [ 1] 4153 	ld xh,a 
      001715 9F               [ 1] 4154 	ld a,xl
      001716 14 02            [ 1] 4155 	and a,(2,sp)
      001718 97               [ 1] 4156 	ld xl,a 
      001719                       4157 	_drop 2 
      001719 5B 02            [ 2]    1     addw sp,#2 
      00171B A6 84            [ 1] 4158 	ld a,#TK_INTGR
      00171D 81               [ 4] 4159 	ret
                                   4160 
                                   4161 ;------------------------------
                                   4162 ; BASIC: OR(expr1,expr2)
                                   4163 ; Apply bit OR relation between
                                   4164 ; the 2 arguments, i.e expr1 | expr2 
                                   4165 ; output:
                                   4166 ; 	A 		TK_INTGR
                                   4167 ;   X 		result 
                                   4168 ;------------------------------
      00171E                       4169 bit_or:
      00171E CD 0B D7         [ 4] 4170 	call func_args 
      001721 A1 02            [ 1] 4171 	cp a,#2
      001723 27 03            [ 1] 4172 	jreq 1$
      001725 CC 07 41         [ 2] 4173 	jp syntax_error 
      001728                       4174 1$: 
      001728 85               [ 2] 4175 	popw x 
      001729 9E               [ 1] 4176 	ld a,xh 
      00172A 1A 01            [ 1] 4177 	or a,(1,sp)
      00172C 95               [ 1] 4178 	ld xh,a 
      00172D 9F               [ 1] 4179 	ld a,xl 
      00172E 1A 02            [ 1] 4180 	or a,(2,sp)
      001730 97               [ 1] 4181 	ld xl,a 
      001731                       4182 	_drop 2 
      001731 5B 02            [ 2]    1     addw sp,#2 
      001733 A6 84            [ 1] 4183 	ld a,#TK_INTGR 
      001735 81               [ 4] 4184 	ret
                                   4185 
                                   4186 ;------------------------------
                                   4187 ; BASIC: XOR(expr1,expr2)
                                   4188 ; Apply bit XOR relation between
                                   4189 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4190 ; output:
                                   4191 ; 	A 		TK_INTGR
                                   4192 ;   X 		result 
                                   4193 ;------------------------------
      001736                       4194 bit_xor:
      001736 CD 0B D7         [ 4] 4195 	call func_args 
      001739 A1 02            [ 1] 4196 	cp a,#2
      00173B 27 03            [ 1] 4197 	jreq 1$
      00173D CC 07 41         [ 2] 4198 	jp syntax_error 
      001740                       4199 1$: 
      001740 85               [ 2] 4200 	popw x 
      001741 9E               [ 1] 4201 	ld a,xh 
      001742 18 01            [ 1] 4202 	xor a,(1,sp)
      001744 95               [ 1] 4203 	ld xh,a 
      001745 9F               [ 1] 4204 	ld a,xl 
      001746 18 02            [ 1] 4205 	xor a,(2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001748 97               [ 1] 4206 	ld xl,a 
      001749                       4207 	_drop 2 
      001749 5B 02            [ 2]    1     addw sp,#2 
      00174B A6 84            [ 1] 4208 	ld a,#TK_INTGR 
      00174D 81               [ 4] 4209 	ret 
                                   4210 
                                   4211 ;------------------------------
                                   4212 ; BASIC: LSHIFT(expr1,expr2)
                                   4213 ; logical shift left expr1 by 
                                   4214 ; expr2 bits 
                                   4215 ; output:
                                   4216 ; 	A 		TK_INTGR
                                   4217 ;   X 		result 
                                   4218 ;------------------------------
      00174E                       4219 lshift:
      00174E CD 0B D7         [ 4] 4220 	call func_args
      001751 A1 02            [ 1] 4221 	cp a,#2 
      001753 27 03            [ 1] 4222 	jreq 1$
      001755 CC 07 41         [ 2] 4223 	jp syntax_error
      001758 90 85            [ 2] 4224 1$: popw y   
      00175A 85               [ 2] 4225 	popw x 
      00175B 90 5D            [ 2] 4226 	tnzw y 
      00175D 27 05            [ 1] 4227 	jreq 4$
      00175F 58               [ 2] 4228 2$:	sllw x 
      001760 90 5A            [ 2] 4229 	decw y 
      001762 26 FB            [ 1] 4230 	jrne 2$
      001764                       4231 4$:  
      001764 A6 84            [ 1] 4232 	ld a,#TK_INTGR
      001766 81               [ 4] 4233 	ret
                                   4234 
                                   4235 ;------------------------------
                                   4236 ; BASIC: RSHIFT(expr1,expr2)
                                   4237 ; logical shift right expr1 by 
                                   4238 ; expr2 bits.
                                   4239 ; output:
                                   4240 ; 	A 		TK_INTGR
                                   4241 ;   X 		result 
                                   4242 ;------------------------------
      001767                       4243 rshift:
      001767 CD 0B D7         [ 4] 4244 	call func_args
      00176A A1 02            [ 1] 4245 	cp a,#2 
      00176C 27 03            [ 1] 4246 	jreq 1$
      00176E CC 07 41         [ 2] 4247 	jp syntax_error
      001771 90 85            [ 2] 4248 1$: popw y  
      001773 85               [ 2] 4249 	popw x
      001774 90 5D            [ 2] 4250 	tnzw y 
      001776 27 05            [ 1] 4251 	jreq 4$
      001778 54               [ 2] 4252 2$:	srlw x 
      001779 90 5A            [ 2] 4253 	decw y 
      00177B 26 FB            [ 1] 4254 	jrne 2$
      00177D                       4255 4$:  
      00177D A6 84            [ 1] 4256 	ld a,#TK_INTGR
      00177F 81               [ 4] 4257 	ret
                                   4258 
                                   4259 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4260 ; BASIC: FCPU integer
                                   4261 ; set CPU frequency 
                                   4262 ;-------------------------- 
                                   4263 
      001780                       4264 fcpu:
      001780 A6 84            [ 1] 4265 	ld a,#TK_INTGR
      001782 CD 0B CA         [ 4] 4266 	call expect 
      001785 9F               [ 1] 4267 	ld a,xl 
      001786 A4 07            [ 1] 4268 	and a,#7 
      001788 C7 50 C6         [ 1] 4269 	ld CLK_CKDIVR,a 
      00178B 81               [ 4] 4270 	ret 
                                   4271 
                                   4272 ;------------------------------
                                   4273 ; BASIC: PMODE pin#, mode 
                                   4274 ; Arduino pin. 
                                   4275 ; define pin as input or output
                                   4276 ; pin#: {0..15}
                                   4277 ; mode: INPUT|OUTPUT  
                                   4278 ;------------------------------
                           000001  4279 	PINNO=1
                           000001  4280 	VSIZE=1
      00178C                       4281 pin_mode:
      00178C                       4282 	_vars VSIZE 
      00178C 52 01            [ 2]    1     sub sp,#VSIZE 
      00178E CD 0B DC         [ 4] 4283 	call arg_list 
      001791 A1 02            [ 1] 4284 	cp a,#2 
      001793 27 03            [ 1] 4285 	jreq 1$
      001795 CC 07 41         [ 2] 4286 	jp syntax_error 
      001798 90 85            [ 2] 4287 1$: popw y ; mode 
      00179A 85               [ 2] 4288 	popw x ; Dx pin 
      00179B CD 17 D8         [ 4] 4289 	call select_pin 
      00179E 6B 01            [ 1] 4290 	ld (PINNO,sp),a  
      0017A0 A6 01            [ 1] 4291 	ld a,#1 
      0017A2 0D 01            [ 1] 4292 	tnz (PINNO,sp)
      0017A4 27 0D            [ 1] 4293 	jreq 4$
      0017A6 48               [ 1] 4294 2$:	sll a 
      0017A7 0A 01            [ 1] 4295 	dec (PINNO,sp)
      0017A9 26 FB            [ 1] 4296 	jrne 2$ 
      0017AB 6B 01            [ 1] 4297 	ld (PINNO,sp),a
      0017AD 7B 01            [ 1] 4298 	ld a,(PINNO,sp)
      0017AF EA 03            [ 1] 4299 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0017B1 E7 03            [ 1] 4300 	ld (GPIO_CR1,x),a 
      0017B3 90 A3 00 01      [ 2] 4301 4$:	cpw y,#OUTP 
      0017B7 27 10            [ 1] 4302 	jreq 6$
                                   4303 ; input mode
                                   4304 ; disable external interrupt 
      0017B9 7B 01            [ 1] 4305 	ld a,(PINNO,sp)
      0017BB 43               [ 1] 4306 	cpl a 
      0017BC E4 04            [ 1] 4307 	and a,(GPIO_CR2,x)
      0017BE E7 04            [ 1] 4308 	ld (GPIO_CR2,x),a 
                                   4309 ;clear bit in DDR for input mode 
      0017C0 7B 01            [ 1] 4310 	ld a,(PINNO,sp)
      0017C2 43               [ 1] 4311 	cpl a 
      0017C3 E4 02            [ 1] 4312 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0017C5 E7 02            [ 1] 4313 	ld (GPIO_DDR,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0017C7 20 0C            [ 2] 4314 	jra 9$
      0017C9                       4315 6$: ;output mode  
      0017C9 7B 01            [ 1] 4316 	ld a,(PINNO,sp)
      0017CB EA 02            [ 1] 4317 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0017CD E7 02            [ 1] 4318 	ld (GPIO_DDR,x),a 
      0017CF 7B 01            [ 1] 4319 	ld a,(PINNO,sp)
      0017D1 EA 04            [ 1] 4320 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0017D3 E7 04            [ 1] 4321 	ld (GPIO_CR2,x),a 
      0017D5                       4322 9$:	
      0017D5                       4323 	_drop VSIZE 
      0017D5 5B 01            [ 2]    1     addw sp,#VSIZE 
      0017D7 81               [ 4] 4324 	ret
                                   4325 
                                   4326 ;------------------------
                                   4327 ; select Arduino pin 
                                   4328 ; input:
                                   4329 ;   X 	 {0..15} Arduino Dx 
                                   4330 ; output:
                                   4331 ;   A     stm8s208 pin 
                                   4332 ;   X     base address s208 GPIO port 
                                   4333 ;---------------------------
      0017D8                       4334 select_pin:
      0017D8 58               [ 2] 4335 	sllw x 
      0017D9 1C 17 E8         [ 2] 4336 	addw x,#arduino_to_8s208 
      0017DC FE               [ 2] 4337 	ldw x,(x)
      0017DD 9F               [ 1] 4338 	ld a,xl 
      0017DE 88               [ 1] 4339 	push a 
      0017DF 5E               [ 1] 4340 	swapw x 
      0017E0 A6 05            [ 1] 4341 	ld a,#5 
      0017E2 42               [ 4] 4342 	mul x,a 
      0017E3 1C 50 00         [ 2] 4343 	addw x,#GPIO_BASE 
      0017E6 84               [ 1] 4344 	pop a 
      0017E7 81               [ 4] 4345 	ret 
                                   4346 ; translation from Arduino D0..D15 to stm8s208rb 
      0017E8                       4347 arduino_to_8s208:
      0017E8 03 06                 4348 .byte 3,6 ; D0 
      0017EA 03 05                 4349 .byte 3,5 ; D1 
      0017EC 04 00                 4350 .byte 4,0 ; D2 
      0017EE 02 01                 4351 .byte 2,1 ; D3
      0017F0 06 00                 4352 .byte 6,0 ; D4
      0017F2 02 02                 4353 .byte 2,2 ; D5
      0017F4 02 03                 4354 .byte 2,3 ; D6
      0017F6 03 01                 4355 .byte 3,1 ; D7
      0017F8 03 03                 4356 .byte 3,3 ; D8
      0017FA 02 04                 4357 .byte 2,4 ; D9
      0017FC 04 05                 4358 .byte 4,5 ; D10
      0017FE 02 06                 4359 .byte 2,6 ; D11
      001800 02 07                 4360 .byte 2,7 ; D12
      001802 02 05                 4361 .byte 2,5 ; D13
      001804 04 02                 4362 .byte 4,2 ; D14
      001806 04 01                 4363 .byte 4,1 ; D15
                                   4364 
                                   4365 
                                   4366 ;------------------------------
                                   4367 ; BASIC: RND(expr)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4368 ; return random number 
                                   4369 ; between 1 and expr inclusive
                                   4370 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4371 ; input:
                                   4372 ; 	none 
                                   4373 ; output:
                                   4374 ;	X 		random positive integer 
                                   4375 ;------------------------------
      001808                       4376 random:
      001808 CD 0B D7         [ 4] 4377 	call func_args 
      00180B A1 01            [ 1] 4378 	cp a,#1
      00180D 27 03            [ 1] 4379 	jreq 1$
      00180F CC 07 41         [ 2] 4380 	jp syntax_error
      001812                       4381 1$:  
      001812 A6 80            [ 1] 4382 	ld a,#0x80 
      001814 15 01            [ 1] 4383 	bcp a,(1,sp)
      001816 27 05            [ 1] 4384 	jreq 2$
      001818 A6 0A            [ 1] 4385 	ld a,#ERR_BAD_VALUE
      00181A CC 07 43         [ 2] 4386 	jp tb_error
      00181D                       4387 2$: 
                                   4388 ; acc16=(x<<5)^x 
      00181D CE 00 12         [ 2] 4389 	ldw x,seedx 
      001820 58               [ 2] 4390 	sllw x 
      001821 58               [ 2] 4391 	sllw x 
      001822 58               [ 2] 4392 	sllw x 
      001823 58               [ 2] 4393 	sllw x 
      001824 58               [ 2] 4394 	sllw x 
      001825 9E               [ 1] 4395 	ld a,xh 
      001826 C8 00 12         [ 1] 4396 	xor a,seedx 
      001829 C7 00 0C         [ 1] 4397 	ld acc16,a 
      00182C 9F               [ 1] 4398 	ld a,xl 
      00182D C8 00 13         [ 1] 4399 	xor a,seedx+1 
      001830 C7 00 0D         [ 1] 4400 	ld acc8,a 
                                   4401 ; seedx=seedy 
      001833 CE 00 14         [ 2] 4402 	ldw x,seedy 
      001836 CF 00 12         [ 2] 4403 	ldw seedx,x  
                                   4404 ; seedy=seedy^(seedy>>1)
      001839 90 54            [ 2] 4405 	srlw y 
      00183B 90 9E            [ 1] 4406 	ld a,yh 
      00183D C8 00 14         [ 1] 4407 	xor a,seedy 
      001840 C7 00 14         [ 1] 4408 	ld seedy,a  
      001843 90 9F            [ 1] 4409 	ld a,yl 
      001845 C8 00 15         [ 1] 4410 	xor a,seedy+1 
      001848 C7 00 15         [ 1] 4411 	ld seedy+1,a 
                                   4412 ; acc16>>3 
      00184B CE 00 0C         [ 2] 4413 	ldw x,acc16 
      00184E 54               [ 2] 4414 	srlw x 
      00184F 54               [ 2] 4415 	srlw x 
      001850 54               [ 2] 4416 	srlw x 
                                   4417 ; x=acc16^x 
      001851 9E               [ 1] 4418 	ld a,xh 
      001852 C8 00 0C         [ 1] 4419 	xor a,acc16 
      001855 95               [ 1] 4420 	ld xh,a 
      001856 9F               [ 1] 4421 	ld a,xl 
      001857 C8 00 0D         [ 1] 4422 	xor a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00185A 97               [ 1] 4423 	ld xl,a 
                                   4424 ; seedy=x^seedy 
      00185B C8 00 15         [ 1] 4425 	xor a,seedy+1
      00185E 97               [ 1] 4426 	ld xl,a 
      00185F 9E               [ 1] 4427 	ld a,xh 
      001860 C8 00 14         [ 1] 4428 	xor a,seedy
      001863 95               [ 1] 4429 	ld xh,a 
      001864 CF 00 14         [ 2] 4430 	ldw seedy,x 
                                   4431 ; return seedy modulo expr + 1 
      001867 90 85            [ 2] 4432 	popw y 
      001869 65               [ 2] 4433 	divw x,y 
      00186A 93               [ 1] 4434 	ldw x,y 
      00186B 5C               [ 1] 4435 	incw x 
      00186C                       4436 10$:
      00186C A6 84            [ 1] 4437 	ld a,#TK_INTGR
      00186E 81               [ 4] 4438 	ret 
                                   4439 
                                   4440 ;---------------------------------
                                   4441 ; BASIC: WORDS 
                                   4442 ; affiche la listes des mots du
                                   4443 ; dictionnaire ainsi que le nombre
                                   4444 ; de mots.
                                   4445 ;---------------------------------
                           000001  4446 	WLEN=1 ; word length
                           000002  4447 	LLEN=2 ; character sent to console
                           000003  4448 	WCNT=3 ; count words printed 
                           000003  4449 	VSIZE=3 
      00186F                       4450 words:
      00186F                       4451 	_vars VSIZE
      00186F 52 03            [ 2]    1     sub sp,#VSIZE 
      001871 0F 02            [ 1] 4452 	clr (LLEN,sp)
      001873 0F 03            [ 1] 4453 	clr (WCNT,sp)
      001875 90 AE 1F 4F      [ 2] 4454 	ldw y,#kword_dict+2
      001879 93               [ 1] 4455 0$:	ldw x,y
      00187A F6               [ 1] 4456 	ld a,(x)
      00187B A4 0F            [ 1] 4457 	and a,#15 
      00187D 6B 01            [ 1] 4458 	ld (WLEN,sp),a 
      00187F 0C 03            [ 1] 4459 	inc (WCNT,sp)
      001881 5C               [ 1] 4460 1$:	incw x 
      001882 F6               [ 1] 4461 	ld a,(x)
      001883 CD 02 C1         [ 4] 4462 	call putc 
      001886 0C 02            [ 1] 4463 	inc (LLEN,sp)
      001888 0A 01            [ 1] 4464 	dec (WLEN,sp)
      00188A 26 F5            [ 1] 4465 	jrne 1$
      00188C A6 46            [ 1] 4466 	ld a,#70
      00188E 11 02            [ 1] 4467 	cp a,(LLEN,sp)
      001890 2B 09            [ 1] 4468 	jrmi 2$   
      001892 A6 20            [ 1] 4469 	ld a,#SPACE 
      001894 CD 02 C1         [ 4] 4470 	call putc 
      001897 0C 02            [ 1] 4471 	inc (LLEN,sp) 
      001899 20 07            [ 2] 4472 	jra 3$
      00189B A6 0D            [ 1] 4473 2$: ld a,#CR 
      00189D CD 02 C1         [ 4] 4474 	call putc 
      0018A0 0F 02            [ 1] 4475 	clr (LLEN,sp)
      0018A2 72 A2 00 02      [ 2] 4476 3$:	subw y,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018A6 90 FE            [ 2] 4477 	ldw y,(y)
      0018A8 26 CF            [ 1] 4478 	jrne 0$ 
      0018AA A6 0D            [ 1] 4479 	ld a,#CR 
      0018AC CD 02 C1         [ 4] 4480 	call putc  
      0018AF 5F               [ 1] 4481 	clrw x 
      0018B0 7B 03            [ 1] 4482 	ld a,(WCNT,sp)
      0018B2 97               [ 1] 4483 	ld xl,a 
      0018B3 CD 08 7E         [ 4] 4484 	call print_int 
      0018B6 AE 18 BF         [ 2] 4485 	ldw x,#words_count_msg
      0018B9 CD 20 4F         [ 4] 4486 	call puts 
      0018BC                       4487 	_drop VSIZE 
      0018BC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0018BE 81               [ 4] 4488 	ret 
      0018BF 20 77 6F 72 64 73 20  4489 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4490 
                                   4491 
                                   4492 ;-----------------------------
                                   4493 ; BASIC: TIMER expr 
                                   4494 ; initialize count down timer 
                                   4495 ;-----------------------------
      0018D5                       4496 set_timer:
      0018D5 CD 0B DC         [ 4] 4497 	call arg_list
      0018D8 A1 01            [ 1] 4498 	cp a,#1 
      0018DA 27 03            [ 1] 4499 	jreq 1$
      0018DC CC 07 41         [ 2] 4500 	jp syntax_error
      0018DF                       4501 1$: 
      0018DF 85               [ 2] 4502 	popw x 
      0018E0 CF 00 10         [ 2] 4503 	ldw timer,x 
      0018E3 81               [ 4] 4504 	ret 
                                   4505 
                                   4506 ;------------------------------
                                   4507 ; BASIC: TIMEOUT 
                                   4508 ; return state of timer 
                                   4509 ;------------------------------
      0018E4                       4510 timeout:
      0018E4 CE 00 10         [ 2] 4511 	ldw x,timer 
      0018E7                       4512 logical_complement:
      0018E7 53               [ 2] 4513 	cplw x 
      0018E8 A3 FF FF         [ 2] 4514 	cpw x,#-1
      0018EB 27 01            [ 1] 4515 	jreq 2$
      0018ED 5F               [ 1] 4516 	clrw x 
      0018EE A6 84            [ 1] 4517 2$:	ld a,#TK_INTGR
      0018F0 81               [ 4] 4518 	ret 
                                   4519 
                                   4520 ;--------------------------------
                                   4521 ; BASIC NOT(expr) 
                                   4522 ; return logical complement of expr
                                   4523 ;--------------------------------
      0018F1                       4524 func_not:
      0018F1 CD 0B D7         [ 4] 4525 	call func_args  
      0018F4 A1 01            [ 1] 4526 	cp a,#1
      0018F6 27 03            [ 1] 4527 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0018F8 CC 07 41         [ 2] 4528 	jp syntax_error
      0018FB 85               [ 2] 4529 1$:	popw x 
      0018FC 20 E9            [ 2] 4530 	jra logical_complement
                                   4531 
                                   4532 
                                   4533 
                                   4534 ;-----------------------------------
                                   4535 ; BASIC: IWDGEN expr1 
                                   4536 ; enable independant watchdog timer
                                   4537 ; expr1 is delay in multiple of 62.5µsec
                                   4538 ; expr1 -> {1..16383}
                                   4539 ;-----------------------------------
      0018FE                       4540 enable_iwdg:
      0018FE CD 0B DC         [ 4] 4541 	call arg_list
      001901 A1 01            [ 1] 4542 	cp a,#1 
      001903 27 03            [ 1] 4543 	jreq 1$
      001905 CC 07 41         [ 2] 4544 	jp syntax_error 
      001908 85               [ 2] 4545 1$: popw x 
      001909 4B 00            [ 1] 4546 	push #0
      00190B 35 CC 50 E0      [ 1] 4547 	mov IWDG_KR,#IWDG_KEY_ENABLE
      00190F 9E               [ 1] 4548 	ld a,xh 
      001910 A4 3F            [ 1] 4549 	and a,#0x3f
      001912 95               [ 1] 4550 	ld xh,a  
      001913 A3 00 FF         [ 2] 4551 2$:	cpw x,#255
      001916 23 06            [ 2] 4552 	jrule 3$
      001918 0C 01            [ 1] 4553 	inc (1,sp)
      00191A 98               [ 1] 4554 	rcf 
      00191B 56               [ 2] 4555 	rrcw x 
      00191C 20 F5            [ 2] 4556 	jra 2$
      00191E 35 55 50 E0      [ 1] 4557 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001922 84               [ 1] 4558 	pop a  
      001923 C7 50 E1         [ 1] 4559 	ld IWDG_PR,a 
      001926 9F               [ 1] 4560 	ld a,xl
      001927 4A               [ 1] 4561 	dec a 
      001928 35 55 50 E0      [ 1] 4562 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      00192C C7 50 E2         [ 1] 4563 	ld IWDG_RLR,a 
      00192F 35 AA 50 E0      [ 1] 4564 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001933 81               [ 4] 4565 	ret 
                                   4566 
                                   4567 
                                   4568 ;-----------------------------------
                                   4569 ; BASIC: IWDGREF  
                                   4570 ; refresh independant watchdog count down 
                                   4571 ; timer before it reset MCU. 
                                   4572 ;-----------------------------------
      001934                       4573 refresh_iwdg:
      001934 35 AA 50 E0      [ 1] 4574 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001938 81               [ 4] 4575 	ret 
                                   4576 
                                   4577 
                                   4578 ;-------------------------------------
                                   4579 ; BASIC: LOG(expr)
                                   4580 ; return logarithm base 2 of expr 
                                   4581 ; this is the position of most significant
                                   4582 ; bit set. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4583 ; input: 
                                   4584 ; output:
                                   4585 ;   X     log2 
                                   4586 ;   A     TK_INTGR 
                                   4587 ;*********************************
      001939                       4588 log2:
      001939 CD 0B D7         [ 4] 4589 	call func_args 
      00193C A1 01            [ 1] 4590 	cp a,#1 
      00193E 27 03            [ 1] 4591 	jreq 1$
      001940 CC 07 41         [ 2] 4592 	jp syntax_error 
      001943 85               [ 2] 4593 1$: popw x 
      001944                       4594 leading_one:
      001944 5D               [ 2] 4595 	tnzw x 
      001945 27 0A            [ 1] 4596 	jreq 4$
      001947 A6 0F            [ 1] 4597 	ld a,#15 
      001949 59               [ 2] 4598 2$: rlcw x 
      00194A 25 03            [ 1] 4599     jrc 3$
      00194C 4A               [ 1] 4600 	dec a 
      00194D 20 FA            [ 2] 4601 	jra 2$
      00194F 5F               [ 1] 4602 3$: clrw x 
      001950 97               [ 1] 4603     ld xl,a
      001951 A6 84            [ 1] 4604 4$:	ld a,#TK_INTGR
      001953 81               [ 4] 4605 	ret 
                                   4606 
                                   4607 ;-----------------------------------
                                   4608 ; BASIC: BIT(expr) 
                                   4609 ; expr ->{0..15}
                                   4610 ; return 2^expr 
                                   4611 ; output:
                                   4612 ;    x    2^expr 
                                   4613 ;-----------------------------------
      001954                       4614 bitmask:
      001954 CD 0B D7         [ 4] 4615     call func_args 
      001957 A1 01            [ 1] 4616 	cp a,#1
      001959 27 03            [ 1] 4617 	jreq 1$
      00195B CC 07 41         [ 2] 4618 	jp syntax_error 
      00195E 85               [ 2] 4619 1$: popw x 
      00195F 9F               [ 1] 4620 	ld a,xl 
      001960 A4 0F            [ 1] 4621 	and a,#15
      001962 5F               [ 1] 4622 	clrw x 
      001963 5C               [ 1] 4623 	incw x 
      001964 4D               [ 1] 4624 2$: tnz a 
      001965 27 04            [ 1] 4625 	jreq 3$
      001967 58               [ 2] 4626 	slaw x 
      001968 4A               [ 1] 4627 	dec a 
      001969 20 F9            [ 2] 4628 	jra 2$ 
      00196B A6 84            [ 1] 4629 3$: ld a,#TK_INTGR
      00196D 81               [ 4] 4630 	ret 
                                   4631 
                                   4632 ;------------------------------
                                   4633 ; BASIC: INVERT(expr)
                                   4634 ; 1's complement 
                                   4635 ;--------------------------------
      00196E                       4636 invert:
      00196E CD 0B D7         [ 4] 4637 	call func_args
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001971 A1 01            [ 1] 4638 	cp a,#1 
      001973 27 03            [ 1] 4639 	jreq 1$
      001975 CC 07 41         [ 2] 4640 	jp syntax_error
      001978 85               [ 2] 4641 1$: popw x  
      001979 53               [ 2] 4642 	cplw x 
      00197A A6 84            [ 1] 4643 	ld a,#TK_INTGR 
      00197C 81               [ 4] 4644 	ret 
                                   4645 
                                   4646 ;------------------------------
                                   4647 ; BASIC: DO 
                                   4648 ; initiate a DO ... UNTIL loop 
                                   4649 ;------------------------------
                           000003  4650 	DOLP_ADR=3 
                           000005  4651 	DOLP_INW=5
                           000004  4652 	VSIZE=4 
      00197D                       4653 do_loop:
      00197D 85               [ 2] 4654 	popw x 
      00197E                       4655 	_vars VSIZE 
      00197E 52 04            [ 2]    1     sub sp,#VSIZE 
      001980 89               [ 2] 4656 	pushw x 
      001981 90 CE 00 04      [ 2] 4657 	ldw y,basicptr 
      001985 17 03            [ 2] 4658 	ldw (DOLP_ADR,sp),y
      001987 90 CE 00 00      [ 2] 4659 	ldw y,in.w 
      00198B 17 05            [ 2] 4660 	ldw (DOLP_INW,sp),y
      00198D 72 5C 00 1D      [ 1] 4661 	inc loop_depth 
      001991 81               [ 4] 4662 	ret 
                                   4663 
                                   4664 ;--------------------------------
                                   4665 ; BASIC: UNTIL expr 
                                   4666 ; loop if exprssion is false 
                                   4667 ; else terminate loop
                                   4668 ;--------------------------------
      001992                       4669 until: 
      001992 72 5D 00 1D      [ 1] 4670 	tnz loop_depth 
      001996 26 03            [ 1] 4671 	jrne 1$ 
      001998 CC 07 41         [ 2] 4672 	jp syntax_error 
      00199B                       4673 1$: 
      00199B CD 0D 24         [ 4] 4674 	call relation 
      00199E A1 84            [ 1] 4675 	cp a,#TK_INTGR
      0019A0 27 03            [ 1] 4676 	jreq 2$
      0019A2 CC 07 41         [ 2] 4677 	jp syntax_error
      0019A5                       4678 2$: 
      0019A5 5D               [ 2] 4679 	tnzw x 
      0019A6 26 10            [ 1] 4680 	jrne 9$
      0019A8 1E 03            [ 2] 4681 	ldw x,(DOLP_ADR,sp)
      0019AA CF 00 04         [ 2] 4682 	ldw basicptr,x 
      0019AD E6 02            [ 1] 4683 	ld a,(2,x)
      0019AF C7 00 03         [ 1] 4684 	ld count,a 
      0019B2 1E 05            [ 2] 4685 	ldw x,(DOLP_INW,sp)
      0019B4 CF 00 00         [ 2] 4686 	ldw in.w,x 
      0019B7 81               [ 4] 4687 	ret 
      0019B8                       4688 9$:	; remove loop data from stack  
      0019B8 85               [ 2] 4689 	popw x
      0019B9                       4690 	_drop VSIZE
      0019B9 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      0019BB 72 5A 00 1D      [ 1] 4691 	dec loop_depth 
      0019BF FC               [ 2] 4692 	jp (x)
                                   4693 
                                   4694 ;--------------------------
                                   4695 ; BASIC: PRTA...PRTI  
                                   4696 ;  return constant value 
                                   4697 ;  PORT  offset in GPIO
                                   4698 ;  array
                                   4699 ;---------------------------
      0019C0                       4700 const_porta:
      0019C0 AE 00 00         [ 2] 4701 	ldw x,#0
      0019C3 A6 84            [ 1] 4702 	ld a,#TK_INTGR 
      0019C5 81               [ 4] 4703 	ret 
      0019C6                       4704 const_portb:
      0019C6 AE 00 01         [ 2] 4705 	ldw x,#1
      0019C9 A6 84            [ 1] 4706 	ld a,#TK_INTGR 
      0019CB 81               [ 4] 4707 	ret 
      0019CC                       4708 const_portc:
      0019CC AE 00 02         [ 2] 4709 	ldw x,#2
      0019CF A6 84            [ 1] 4710 	ld a,#TK_INTGR 
      0019D1 81               [ 4] 4711 	ret 
      0019D2                       4712 const_portd:
      0019D2 AE 00 03         [ 2] 4713 	ldw x,#3
      0019D5 A6 84            [ 1] 4714 	ld a,#TK_INTGR 
      0019D7 81               [ 4] 4715 	ret 
      0019D8                       4716 const_porte:
      0019D8 AE 00 04         [ 2] 4717 	ldw x,#4
      0019DB A6 84            [ 1] 4718 	ld a,#TK_INTGR 
      0019DD 81               [ 4] 4719 	ret 
      0019DE                       4720 const_portf:
      0019DE AE 00 05         [ 2] 4721 	ldw x,#5
      0019E1 A6 84            [ 1] 4722 	ld a,#TK_INTGR 
      0019E3 81               [ 4] 4723 	ret 
      0019E4                       4724 const_portg:
      0019E4 AE 00 06         [ 2] 4725 	ldw x,#6
      0019E7 A6 84            [ 1] 4726 	ld a,#TK_INTGR 
      0019E9 81               [ 4] 4727 	ret 
      0019EA                       4728 const_porth:
      0019EA AE 00 07         [ 2] 4729 	ldw x,#7
      0019ED A6 84            [ 1] 4730 	ld a,#TK_INTGR 
      0019EF 81               [ 4] 4731 	ret 
      0019F0                       4732 const_porti:
      0019F0 AE 00 08         [ 2] 4733 	ldw x,#8
      0019F3 A6 84            [ 1] 4734 	ld a,#TK_INTGR 
      0019F5 81               [ 4] 4735 	ret 
                                   4736 
                                   4737 ;-------------------------------
                                   4738 ; following return constant 
                                   4739 ; related to GPIO register offset 
                                   4740 ;---------------------------------
      0019F6                       4741 const_odr:
      0019F6 A6 84            [ 1] 4742 	ld a,#TK_INTGR 
      0019F8 AE 00 00         [ 2] 4743 	ldw x,#GPIO_ODR
      0019FB 81               [ 4] 4744 	ret 
      0019FC                       4745 const_idr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0019FC A6 84            [ 1] 4746 	ld a,#TK_INTGR 
      0019FE AE 00 01         [ 2] 4747 	ldw x,#GPIO_IDR
      001A01 81               [ 4] 4748 	ret 
      001A02                       4749 const_ddr:
      001A02 A6 84            [ 1] 4750 	ld a,#TK_INTGR 
      001A04 AE 00 02         [ 2] 4751 	ldw x,#GPIO_DDR
      001A07 81               [ 4] 4752 	ret 
      001A08                       4753 const_cr1:
      001A08 A6 84            [ 1] 4754 	ld a,#TK_INTGR 
      001A0A AE 00 03         [ 2] 4755 	ldw x,#GPIO_CR1
      001A0D 81               [ 4] 4756 	ret 
      001A0E                       4757 const_cr2:
      001A0E A6 84            [ 1] 4758 	ld a,#TK_INTGR 
      001A10 AE 00 04         [ 2] 4759 	ldw x,#GPIO_CR2
      001A13 81               [ 4] 4760 	ret 
                                   4761 ;-------------------------
                                   4762 ; BASIC: POUT 
                                   4763 ;  constant for port mode
                                   4764 ;  used by PMODE 
                                   4765 ;  to set pin as output
                                   4766 ;------------------------
      001A14                       4767 const_output:
      001A14 A6 84            [ 1] 4768 	ld a,#TK_INTGR 
      001A16 AE 00 01         [ 2] 4769 	ldw x,#OUTP
      001A19 81               [ 4] 4770 	ret 
                                   4771 
                                   4772 ;-------------------------
                                   4773 ; BASIC: PINP 
                                   4774 ;  constant for port mode
                                   4775 ;  used by PMODE 
                                   4776 ;  to set pin as input
                                   4777 ;------------------------
      001A1A                       4778 const_input:
      001A1A A6 84            [ 1] 4779 	ld a,#TK_INTGR 
      001A1C AE 00 00         [ 2] 4780 	ldw x,#INP 
      001A1F 81               [ 4] 4781 	ret 
                                   4782 	
                                   4783 ;-----------------------
                                   4784 ; memory area constants
                                   4785 ;-----------------------
      001A20                       4786 const_eeprom_base:
      001A20 A6 84            [ 1] 4787 	ld a,#TK_INTGR 
      001A22 AE 40 00         [ 2] 4788 	ldw x,#EEPROM_BASE 
      001A25 81               [ 4] 4789 	ret 
                                   4790 
                                   4791 ;---------------------------
                                   4792 ; BASIC: DATA 
                                   4793 ; when the interpreter find 
                                   4794 ; a DATA line it skip it.
                                   4795 ;---------------------------
      001A26                       4796 data:
      001A26 55 00 03 00 01   [ 1] 4797 	mov in,count 
      001A2B 81               [ 4] 4798 	ret 
                                   4799 
                                   4800 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4801 ; BASIC: DATLN  *expr*
                                   4802 ; set DATA pointer at line# 
                                   4803 ; specified by *expr* 
                                   4804 ;---------------------------
      001A2C                       4805 data_line:
      001A2C CD 0C DB         [ 4] 4806 	call expression
      001A2F A1 84            [ 1] 4807 	cp a,#TK_INTGR
      001A31 27 03            [ 1] 4808 	jreq 1$
      001A33 CC 07 41         [ 2] 4809 	jp syntax_error  
      001A36 4F               [ 1] 4810 1$: clr a 
      001A37 CD 23 37         [ 4] 4811 	call search_lineno
      001A3A 5D               [ 2] 4812 	tnzw x 
      001A3B 26 05            [ 1] 4813 	jrne 3$
      001A3D A6 05            [ 1] 4814 2$:	ld a,#ERR_NO_LINE 
      001A3F CC 07 43         [ 2] 4815 	jp tb_error
      001A42                       4816 3$: ; check if valid data line 
      001A42 90 93            [ 1] 4817     ldw y,x 
      001A44 EE 04            [ 2] 4818 	ldw x,(4,x)
      001A46 A3 1A 26         [ 2] 4819 	cpw x,#data 
      001A49 26 F2            [ 1] 4820 	jrne 2$ 
      001A4B 90 CF 00 06      [ 2] 4821 	ldw data_ptr,y
      001A4F 90 E6 02         [ 1] 4822 	ld a,(2,y)
      001A52 C7 00 09         [ 1] 4823 	ld data_len,a 
      001A55 35 06 00 08      [ 1] 4824 	mov data_ofs,#FIRST_DATA_ITEM 
      001A59 81               [ 4] 4825 	ret
                                   4826 
                                   4827 ;---------------------------------
                                   4828 ; BASIC: RESTORE 
                                   4829 ; set data_ptr to first data line
                                   4830 ; if not DATA found pointer set to
                                   4831 ; zero 
                                   4832 ;---------------------------------
      001A5A                       4833 restore:
      001A5A 72 5F 00 06      [ 1] 4834 	clr data_ptr 
      001A5E 72 5F 00 07      [ 1] 4835 	clr data_ptr+1
      001A62 72 5F 00 08      [ 1] 4836 	clr data_ofs 
      001A66 72 5F 00 09      [ 1] 4837 	clr data_len
      001A6A CE 00 19         [ 2] 4838 	ldw x,txtbgn
      001A6D                       4839 data_search_loop: 	
      001A6D C3 00 1B         [ 2] 4840 	cpw x,txtend
      001A70 24 1B            [ 1] 4841 	jruge 9$
      001A72 90 93            [ 1] 4842 	ldw y,x 
      001A74 EE 04            [ 2] 4843 	ldw x,(4,x)
      001A76 1C 1F 55         [ 2] 4844 	addw x,#code_addr
      001A79 FE               [ 2] 4845 	ldw x,(x)
      001A7A A3 1A 26         [ 2] 4846 	cpw x,#data 
      001A7D 26 1A            [ 1] 4847 	jrne try_next_line 
      001A7F 90 CF 00 06      [ 2] 4848 	ldw data_ptr,y 
      001A83 90 E6 02         [ 1] 4849 	ld a,(2,y)
      001A86 C7 00 09         [ 1] 4850 	ld data_len,a 
      001A89 35 06 00 08      [ 1] 4851 	mov data_ofs,#FIRST_DATA_ITEM
      001A8D 72 5D 00 09      [ 1] 4852 9$:	tnz data_len 
      001A91 26 05            [ 1] 4853     jrne 10$
      001A93 A6 0C            [ 1] 4854 	ld a,#ERR_NO_DATA 
      001A95 CC 07 43         [ 2] 4855 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001A98 81               [ 4] 4856 10$:ret
      001A99                       4857 try_next_line:
      001A99 93               [ 1] 4858 	ldw x,y 
      001A9A E6 02            [ 1] 4859 	ld a,(2,x)
      001A9C C7 00 0D         [ 1] 4860 	ld acc8,a 
      001A9F 72 5F 00 0C      [ 1] 4861 	clr acc16 
      001AA3 72 BB 00 0C      [ 2] 4862 	addw x,acc16 
      001AA7 20 C4            [ 2] 4863 	jra data_search_loop
                                   4864 
                                   4865 
                                   4866 ;---------------------------------
                                   4867 ; BASIC: READ 
                                   4868 ; return next data item | 0 
                                   4869 ;---------------------------------
                           000001  4870 	CTX_BPTR=1 
                           000003  4871 	CTX_IN=3 
                           000004  4872 	CTX_COUNT=4 
                           000005  4873 	XSAVE=5
                           000006  4874 	VSIZE=6
      001AA9                       4875 read:
      001AA9                       4876 	_vars  VSIZE 
      001AA9 52 06            [ 2]    1     sub sp,#VSIZE 
      001AAB                       4877 read01:	
      001AAB C6 00 08         [ 1] 4878 	ld a,data_ofs
      001AAE C1 00 09         [ 1] 4879 	cp a,data_len 
      001AB1 27 37            [ 1] 4880 	jreq 2$ ; end of line  
      001AB3 CD 0F D1         [ 4] 4881 	call save_context
      001AB6 CE 00 06         [ 2] 4882 	ldw x,data_ptr 
      001AB9 CF 00 04         [ 2] 4883 	ldw basicptr,x 
      001ABC 55 00 08 00 01   [ 1] 4884 	mov in,data_ofs 
      001AC1 55 00 09 00 03   [ 1] 4885 	mov count,data_len  
      001AC6 CD 0C DB         [ 4] 4886 	call expression 
      001AC9 A1 84            [ 1] 4887 	cp a,#TK_INTGR 
      001ACB 27 03            [ 1] 4888 	jreq 1$ 
      001ACD CC 07 41         [ 2] 4889 	jp syntax_error 
      001AD0                       4890 1$:
      001AD0 1F 05            [ 2] 4891 	ldw (XSAVE,SP),x
      001AD2 CD 08 30         [ 4] 4892 	call next_token ; skip comma
      001AD5 CE 00 04         [ 2] 4893 	ldw x,basicptr 
      001AD8 CF 00 06         [ 2] 4894 	ldw data_ptr,x 
      001ADB 55 00 01 00 08   [ 1] 4895 	mov data_ofs,in 
      001AE0 CD 0F E1         [ 4] 4896 	call rest_context
      001AE3 1E 05            [ 2] 4897 	ldw x,(XSAVE,sp)
      001AE5 A6 84            [ 1] 4898 	ld a,#TK_INTGR
      001AE7                       4899 	_drop VSIZE 
      001AE7 5B 06            [ 2]    1     addw sp,#VSIZE 
      001AE9 81               [ 4] 4900 	ret 
      001AEA                       4901 2$: ; end of line reached 
      001AEA 90 CE 00 06      [ 2] 4902 	ldw y, data_ptr 
      001AEE 72 5F 00 06      [ 1] 4903 	clr data_ptr
      001AF2 72 5F 00 07      [ 1] 4904 	clr data_ptr+1   
      001AF6 72 5F 00 08      [ 1] 4905 	clr data_ofs 
      001AFA 72 5F 00 09      [ 1] 4906 	clr data_len 
      001AFE CD 1A 99         [ 4] 4907 	call try_next_line 
      001B01 20 A8            [ 2] 4908 	jra read01
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4909 
                                   4910 
                                   4911 ;---------------------------------
                                   4912 ; BASIC: SPIEN clkdiv, 0|1  
                                   4913 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4914 ; if clkdiv==-1 disable SPI
                                   4915 ; 0|1 -> disable|enable  
                                   4916 ;--------------------------------- 
                           000005  4917 SPI_CS_BIT=5
      001B03                       4918 spi_enable:
      001B03 CD 0B DC         [ 4] 4919 	call arg_list 
      001B06 A1 02            [ 1] 4920 	cp a,#2
      001B08 27 03            [ 1] 4921 	jreq 1$
      001B0A CC 07 41         [ 2] 4922 	jp syntax_error 
      001B0D                       4923 1$: 
      001B0D 72 12 50 C7      [ 1] 4924 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      001B11 85               [ 2] 4925 	popw x  
      001B12 5D               [ 2] 4926 	tnzw x 
      001B13 27 21            [ 1] 4927 	jreq spi_disable 
      001B15 85               [ 2] 4928 	popw x 
      001B16 A6 08            [ 1] 4929 	ld a,#(1<<SPI_CR1_BR)
      001B18 42               [ 4] 4930 	mul x,a 
      001B19 9F               [ 1] 4931 	ld a,xl 
      001B1A C7 52 00         [ 1] 4932 	ld SPI_CR1,a 
                                   4933 ; configure ~CS on PE5 (D10 on CN8) as output. 
      001B1D 72 1A 50 14      [ 1] 4934 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      001B21 72 1A 50 16      [ 1] 4935 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4936 ; configure SPI as master mode 0.	
      001B25 72 14 52 00      [ 1] 4937 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4938 ; ~CS line controlled by sofware 	
      001B29 72 12 52 01      [ 1] 4939 	bset SPI_CR2,#SPI_CR2_SSM 
      001B2D 72 10 52 01      [ 1] 4940     bset SPI_CR2,#SPI_CR2_SSI 
                                   4941 ; enable SPI
      001B31 72 1C 52 00      [ 1] 4942 	bset SPI_CR1,#SPI_CR1_SPE 	
      001B35 81               [ 4] 4943 	ret 
      001B36                       4944 spi_disable:
      001B36                       4945 	_drop #2; throw first argument.
      001B36 5B 02            [ 2]    1     addw sp,##2 
                                   4946 ; wait spi idle 
      001B38 A6 82            [ 1] 4947 1$:	ld a,#0x82 
      001B3A C4 52 03         [ 1] 4948 	and a,SPI_SR
      001B3D A1 02            [ 1] 4949 	cp a,#2 
      001B3F 26 F7            [ 1] 4950 	jrne 1$
      001B41 72 1D 52 00      [ 1] 4951 	bres SPI_CR1,#SPI_CR1_SPE
      001B45 72 13 50 C7      [ 1] 4952 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      001B49 72 1B 50 16      [ 1] 4953 	bres PE_DDR,#SPI_CS_BIT 
      001B4D 81               [ 4] 4954 	ret 
                                   4955 
      001B4E                       4956 spi_clear_error:
      001B4E A6 78            [ 1] 4957 	ld a,#0x78 
      001B50 C5 52 03         [ 1] 4958 	bcp a,SPI_SR 
      001B53 27 04            [ 1] 4959 	jreq 1$
      001B55 72 5F 52 03      [ 1] 4960 	clr SPI_SR 
      001B59 81               [ 4] 4961 1$: ret 
                                   4962 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001B5A                       4963 spi_send_byte:
      001B5A 88               [ 1] 4964 	push a 
      001B5B CD 1B 4E         [ 4] 4965 	call spi_clear_error
      001B5E 84               [ 1] 4966 	pop a 
      001B5F 72 03 52 03 FB   [ 2] 4967 	btjf SPI_SR,#SPI_SR_TXE,.
      001B64 C7 52 04         [ 1] 4968 	ld SPI_DR,a
      001B67 72 01 52 03 FB   [ 2] 4969 	btjf SPI_SR,#SPI_SR_RXNE,.  
      001B6C C6 52 04         [ 1] 4970 	ld a,SPI_DR 
      001B6F 81               [ 4] 4971 	ret 
                                   4972 
      001B70                       4973 spi_rcv_byte:
      001B70 A6 FF            [ 1] 4974 	ld a,#255
      001B72 72 01 52 03 E3   [ 2] 4975 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      001B77 C6 52 04         [ 1] 4976 	ld a,SPI_DR 
      001B7A 81               [ 4] 4977 	ret
                                   4978 
                                   4979 ;------------------------------
                                   4980 ; BASIC: SPIWR byte [,byte]
                                   4981 ; write 1 or more byte
                                   4982 ;------------------------------
      001B7B                       4983 spi_write:
      001B7B CD 0C DB         [ 4] 4984 	call expression
      001B7E A1 84            [ 1] 4985 	cp a,#TK_INTGR 
      001B80 27 03            [ 1] 4986 	jreq 1$
      001B82 CC 07 41         [ 2] 4987 	jp syntax_error 
      001B85                       4988 1$:	
      001B85 9F               [ 1] 4989 	ld a,xl 
      001B86 CD 1B 5A         [ 4] 4990 	call spi_send_byte 
      001B89 CD 08 30         [ 4] 4991 	call next_token 
      001B8C A1 09            [ 1] 4992 	cp a,#TK_COMMA 
      001B8E 26 02            [ 1] 4993 	jrne 2$ 
      001B90 20 E9            [ 2] 4994 	jra spi_write 
      001B92 4D               [ 1] 4995 2$:	tnz a 
      001B93 27 05            [ 1] 4996 	jreq 3$
      001B95                       4997 	_unget_token  
      001B95 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B9A 81               [ 4] 4998 3$:	ret 
                                   4999 
                                   5000 
                                   5001 ;-------------------------------
                                   5002 ; BASIC: SPIRD 	
                                   5003 ; read one byte from SPI 
                                   5004 ;-------------------------------
      001B9B                       5005 spi_read:
      001B9B CD 1B 70         [ 4] 5006 	call spi_rcv_byte 
      001B9E 5F               [ 1] 5007 	clrw x 
      001B9F 97               [ 1] 5008 	ld xl,a 
      001BA0 A6 84            [ 1] 5009 	ld a,#TK_INTGR 
      001BA2 81               [ 4] 5010 	ret 
                                   5011 
                                   5012 ;------------------------------
                                   5013 ; BASIC: SPISEL 0|1 
                                   5014 ; set state of ~CS line
                                   5015 ; 0|1 deselect|select  
                                   5016 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001BA3                       5017 spi_select:
      001BA3 CD 08 30         [ 4] 5018 	call next_token 
      001BA6 A1 84            [ 1] 5019 	cp a,#TK_INTGR 
      001BA8 27 03            [ 1] 5020 	jreq 1$
      001BAA CC 07 41         [ 2] 5021 	jp syntax_error 
      001BAD 5D               [ 2] 5022 1$: tnzw x  
      001BAE 27 05            [ 1] 5023 	jreq cs_high 
      001BB0 72 1B 50 14      [ 1] 5024 	bres PE_ODR,#SPI_CS_BIT
      001BB4 81               [ 4] 5025 	ret 
      001BB5                       5026 cs_high: 
      001BB5 72 1A 50 14      [ 1] 5027 	bset PE_ODR,#SPI_CS_BIT
      001BB9 81               [ 4] 5028 	ret 
                                   5029 
                                   5030 ;-------------------------------
                                   5031 ; BASIC: PAD 
                                   5032 ; Return pad buffer address.
                                   5033 ;------------------------------
      001BBA                       5034 pad_ref:
      001BBA AE 16 E0         [ 2] 5035 	ldw x,#pad 
      001BBD B6 84            [ 1] 5036 	ld a,TK_INTGR
      001BBF 81               [ 4] 5037 	ret 
                                   5038 
                                   5039 
                                   5040 ;------------------------------
                                   5041 ;      dictionary 
                                   5042 ; format:
                                   5043 ;   link:   2 bytes 
                                   5044 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5045 ;   cmd_name: 16 byte max 
                                   5046 ;   cmd_index: 2 bytes 
                                   5047 ;------------------------------
                                   5048 	.macro _dict_entry len,name,cmd_idx 
                                   5049 	.word LINK 
                                   5050 	LINK=.
                                   5051 name:
                                   5052 	.byte len 	
                                   5053 	.ascii "name"
                                   5054 	.word cmd_idx 
                                   5055 	.endm 
                                   5056 
                           000000  5057 	LINK=0
                                   5058 ; respect alphabetic order for BASIC names from Z-A
                                   5059 ; this sort order is for a cleaner WORDS cmd output. 	
      001BC0                       5060 kword_end:
      001BC0                       5061 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001BC0 00 00                    1 	.word LINK 
                           001BC2     2 	LINK=.
      001BC2                          3 XOR:
      001BC2 43                       4 	.byte 3+F_IFUNC 	
      001BC3 58 4F 52                 5 	.ascii "XOR"
      001BC6 00 C2                    6 	.word XOR_IDX 
      001BC8                       5062 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001BC8 1B C2                    1 	.word LINK 
                           001BCA     2 	LINK=.
      001BCA                          3 WRITE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001BCA 05                       4 	.byte 5 	
      001BCB 57 52 49 54 45           5 	.ascii "WRITE"
      001BD0 00 C0                    6 	.word WRITE_IDX 
      001BD2                       5063 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001BD2 1B CA                    1 	.word LINK 
                           001BD4     2 	LINK=.
      001BD4                          3 WORDS:
      001BD4 05                       4 	.byte 5 	
      001BD5 57 4F 52 44 53           5 	.ascii "WORDS"
      001BDA 00 BE                    6 	.word WORDS_IDX 
      001BDC                       5064 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001BDC 1B D4                    1 	.word LINK 
                           001BDE     2 	LINK=.
      001BDE                          3 WAIT:
      001BDE 04                       4 	.byte 4 	
      001BDF 57 41 49 54              5 	.ascii "WAIT"
      001BE3 00 BC                    6 	.word WAIT_IDX 
      001BE5                       5065 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001BE5 1B DE                    1 	.word LINK 
                           001BE7     2 	LINK=.
      001BE7                          3 USR:
      001BE7 43                       4 	.byte 3+F_IFUNC 	
      001BE8 55 53 52                 5 	.ascii "USR"
      001BEB 00 BA                    6 	.word USR_IDX 
      001BED                       5066 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      001BED 1B E7                    1 	.word LINK 
                           001BEF     2 	LINK=.
      001BEF                          3 UNTIL:
      001BEF 05                       4 	.byte 5 	
      001BF0 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001BF5 00 B8                    6 	.word UNTIL_IDX 
      001BF7                       5067 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001BF7 1B EF                    1 	.word LINK 
                           001BF9     2 	LINK=.
      001BF9                          3 UFLASH:
      001BF9 46                       4 	.byte 6+F_IFUNC 	
      001BFA 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001C00 00 B6                    6 	.word UFLASH_IDX 
      001C02                       5068 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001C02 1B F9                    1 	.word LINK 
                           001C04     2 	LINK=.
      001C04                          3 UBOUND:
      001C04 46                       4 	.byte 6+F_IFUNC 	
      001C05 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001C0B 00 B4                    6 	.word UBOUND_IDX 
      001C0D                       5069 	_dict_entry,4,TONE,TONE_IDX;tone  
      001C0D 1C 04                    1 	.word LINK 
                           001C0F     2 	LINK=.
      001C0F                          3 TONE:
      001C0F 04                       4 	.byte 4 	
      001C10 54 4F 4E 45              5 	.ascii "TONE"
      001C14 00 B2                    6 	.word TONE_IDX 
      001C16                       5070 	_dict_entry,2,TO,TO_IDX;to
      001C16 1C 0F                    1 	.word LINK 
                           001C18     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001C18                          3 TO:
      001C18 02                       4 	.byte 2 	
      001C19 54 4F                    5 	.ascii "TO"
      001C1B 00 B0                    6 	.word TO_IDX 
      001C1D                       5071 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001C1D 1C 18                    1 	.word LINK 
                           001C1F     2 	LINK=.
      001C1F                          3 TIMER:
      001C1F 05                       4 	.byte 5 	
      001C20 54 49 4D 45 52           5 	.ascii "TIMER"
      001C25 00 AC                    6 	.word TIMER_IDX 
      001C27                       5072 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001C27 1C 1F                    1 	.word LINK 
                           001C29     2 	LINK=.
      001C29                          3 TIMEOUT:
      001C29 47                       4 	.byte 7+F_IFUNC 	
      001C2A 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001C31 00 AE                    6 	.word TMROUT_IDX 
      001C33                       5073 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001C33 1C 29                    1 	.word LINK 
                           001C35     2 	LINK=.
      001C35                          3 TICKS:
      001C35 45                       4 	.byte 5+F_IFUNC 	
      001C36 54 49 43 4B 53           5 	.ascii "TICKS"
      001C3B 00 AA                    6 	.word TICKS_IDX 
      001C3D                       5074 	_dict_entry,4,STOP,STOP_IDX;stop 
      001C3D 1C 35                    1 	.word LINK 
                           001C3F     2 	LINK=.
      001C3F                          3 STOP:
      001C3F 04                       4 	.byte 4 	
      001C40 53 54 4F 50              5 	.ascii "STOP"
      001C44 00 A8                    6 	.word STOP_IDX 
      001C46                       5075 	_dict_entry,4,STEP,STEP_IDX;step 
      001C46 1C 3F                    1 	.word LINK 
                           001C48     2 	LINK=.
      001C48                          3 STEP:
      001C48 04                       4 	.byte 4 	
      001C49 53 54 45 50              5 	.ascii "STEP"
      001C4D 00 A6                    6 	.word STEP_IDX 
      001C4F                       5076 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001C4F 1C 48                    1 	.word LINK 
                           001C51     2 	LINK=.
      001C51                          3 SPIWR:
      001C51 05                       4 	.byte 5 	
      001C52 53 50 49 57 52           5 	.ascii "SPIWR"
      001C57 00 A4                    6 	.word SPIWR_IDX 
      001C59                       5077 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001C59 1C 51                    1 	.word LINK 
                           001C5B     2 	LINK=.
      001C5B                          3 SPISEL:
      001C5B 06                       4 	.byte 6 	
      001C5C 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001C62 00 A2                    6 	.word SPISEL_IDX 
      001C64                       5078 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001C64 1C 5B                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                           001C66     2 	LINK=.
      001C66                          3 SPIRD:
      001C66 45                       4 	.byte 5+F_IFUNC 	
      001C67 53 50 49 52 44           5 	.ascii "SPIRD"
      001C6C 00 9E                    6 	.word SPIRD_IDX 
      001C6E                       5079 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001C6E 1C 66                    1 	.word LINK 
                           001C70     2 	LINK=.
      001C70                          3 SPIEN:
      001C70 05                       4 	.byte 5 	
      001C71 53 50 49 45 4E           5 	.ascii "SPIEN"
      001C76 00 A0                    6 	.word SPIEN_IDX 
      001C78                       5080 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001C78 1C 70                    1 	.word LINK 
                           001C7A     2 	LINK=.
      001C7A                          3 SLEEP:
      001C7A 05                       4 	.byte 5 	
      001C7B 53 4C 45 45 50           5 	.ascii "SLEEP"
      001C80 00 9C                    6 	.word SLEEP_IDX 
      001C82                       5081     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      001C82 1C 7A                    1 	.word LINK 
                           001C84     2 	LINK=.
      001C84                          3 SIZE:
      001C84 04                       4 	.byte 4 	
      001C85 53 49 5A 45              5 	.ascii "SIZE"
      001C89 00 C4                    6 	.word SIZE_IDX 
      001C8B                       5082 	_dict_entry,4,SHOW,SHOW_IDX;show 
      001C8B 1C 84                    1 	.word LINK 
                           001C8D     2 	LINK=.
      001C8D                          3 SHOW:
      001C8D 04                       4 	.byte 4 	
      001C8E 53 48 4F 57              5 	.ascii "SHOW"
      001C92 00 98                    6 	.word SHOW_IDX 
      001C94                       5083 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      001C94 1C 8D                    1 	.word LINK 
                           001C96     2 	LINK=.
      001C96                          3 SAVE:
      001C96 04                       4 	.byte 4 	
      001C97 53 41 56 45              5 	.ascii "SAVE"
      001C9B 00 36                    6 	.word SAVE_IDX 
      001C9D                       5084 	_dict_entry 3,RUN,RUN_IDX;run
      001C9D 1C 96                    1 	.word LINK 
                           001C9F     2 	LINK=.
      001C9F                          3 RUN:
      001C9F 03                       4 	.byte 3 	
      001CA0 52 55 4E                 5 	.ascii "RUN"
      001CA3 00 96                    6 	.word RUN_IDX 
      001CA5                       5085 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001CA5 1C 9F                    1 	.word LINK 
                           001CA7     2 	LINK=.
      001CA7                          3 RSHIFT:
      001CA7 46                       4 	.byte 6+F_IFUNC 	
      001CA8 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001CAE 00 94                    6 	.word RSHIFT_IDX 
      001CB0                       5086 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001CB0 1C A7                    1 	.word LINK 
                           001CB2     2 	LINK=.
      001CB2                          3 RND:
      001CB2 43                       4 	.byte 3+F_IFUNC 	
      001CB3 52 4E 44                 5 	.ascii "RND"
      001CB6 00 92                    6 	.word RND_IDX 
      001CB8                       5087 	_dict_entry,6,RETURN,RET_IDX;return 
      001CB8 1C B2                    1 	.word LINK 
                           001CBA     2 	LINK=.
      001CBA                          3 RETURN:
      001CBA 06                       4 	.byte 6 	
      001CBB 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001CC1 00 90                    6 	.word RET_IDX 
      001CC3                       5088 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001CC3 1C BA                    1 	.word LINK 
                           001CC5     2 	LINK=.
      001CC5                          3 RESTORE:
      001CC5 07                       4 	.byte 7 	
      001CC6 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001CCD 00 8E                    6 	.word REST_IDX 
      001CCF                       5089 	_dict_entry 6,REMARK,REM_IDX;remark 
      001CCF 1C C5                    1 	.word LINK 
                           001CD1     2 	LINK=.
      001CD1                          3 REMARK:
      001CD1 06                       4 	.byte 6 	
      001CD2 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001CD8 00 8C                    6 	.word REM_IDX 
      001CDA                       5090 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001CDA 1C D1                    1 	.word LINK 
                           001CDC     2 	LINK=.
      001CDC                          3 REBOOT:
      001CDC 06                       4 	.byte 6 	
      001CDD 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001CE3 00 8A                    6 	.word RBT_IDX 
      001CE5                       5091 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001CE5 1C DC                    1 	.word LINK 
                           001CE7     2 	LINK=.
      001CE7                          3 READ:
      001CE7 44                       4 	.byte 4+F_IFUNC 	
      001CE8 52 45 41 44              5 	.ascii "READ"
      001CEC 00 88                    6 	.word READ_IDX 
      001CEE                       5092 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001CEE 1C E7                    1 	.word LINK 
                           001CF0     2 	LINK=.
      001CF0                          3 QKEY:
      001CF0 44                       4 	.byte 4+F_IFUNC 	
      001CF1 51 4B 45 59              5 	.ascii "QKEY"
      001CF5 00 86                    6 	.word QKEY_IDX 
      001CF7                       5093 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001CF7 1C F0                    1 	.word LINK 
                           001CF9     2 	LINK=.
      001CF9                          3 PRTI:
      001CF9 44                       4 	.byte 4+F_IFUNC 	
      001CFA 50 52 54 49              5 	.ascii "PRTI"
      001CFE 00 84                    6 	.word PRTI_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D00                       5094 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001D00 1C F9                    1 	.word LINK 
                           001D02     2 	LINK=.
      001D02                          3 PRTH:
      001D02 44                       4 	.byte 4+F_IFUNC 	
      001D03 50 52 54 48              5 	.ascii "PRTH"
      001D07 00 82                    6 	.word PRTH_IDX 
      001D09                       5095 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001D09 1D 02                    1 	.word LINK 
                           001D0B     2 	LINK=.
      001D0B                          3 PRTG:
      001D0B 44                       4 	.byte 4+F_IFUNC 	
      001D0C 50 52 54 47              5 	.ascii "PRTG"
      001D10 00 80                    6 	.word PRTG_IDX 
      001D12                       5096 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001D12 1D 0B                    1 	.word LINK 
                           001D14     2 	LINK=.
      001D14                          3 PRTF:
      001D14 44                       4 	.byte 4+F_IFUNC 	
      001D15 50 52 54 46              5 	.ascii "PRTF"
      001D19 00 7E                    6 	.word PRTF_IDX 
      001D1B                       5097 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001D1B 1D 14                    1 	.word LINK 
                           001D1D     2 	LINK=.
      001D1D                          3 PRTE:
      001D1D 44                       4 	.byte 4+F_IFUNC 	
      001D1E 50 52 54 45              5 	.ascii "PRTE"
      001D22 00 7C                    6 	.word PRTE_IDX 
      001D24                       5098 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      001D24 1D 1D                    1 	.word LINK 
                           001D26     2 	LINK=.
      001D26                          3 PRTD:
      001D26 44                       4 	.byte 4+F_IFUNC 	
      001D27 50 52 54 44              5 	.ascii "PRTD"
      001D2B 00 7A                    6 	.word PRTD_IDX 
      001D2D                       5099 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001D2D 1D 26                    1 	.word LINK 
                           001D2F     2 	LINK=.
      001D2F                          3 PRTC:
      001D2F 44                       4 	.byte 4+F_IFUNC 	
      001D30 50 52 54 43              5 	.ascii "PRTC"
      001D34 00 78                    6 	.word PRTC_IDX 
      001D36                       5100 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001D36 1D 2F                    1 	.word LINK 
                           001D38     2 	LINK=.
      001D38                          3 PRTB:
      001D38 44                       4 	.byte 4+F_IFUNC 	
      001D39 50 52 54 42              5 	.ascii "PRTB"
      001D3D 00 76                    6 	.word PRTB_IDX 
      001D3F                       5101 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001D3F 1D 38                    1 	.word LINK 
                           001D41     2 	LINK=.
      001D41                          3 PRTA:
      001D41 44                       4 	.byte 4+F_IFUNC 	
      001D42 50 52 54 41              5 	.ascii "PRTA"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D46 00 74                    6 	.word PRTA_IDX 
      001D48                       5102 	_dict_entry 5,PRINT,PRT_IDX;print 
      001D48 1D 41                    1 	.word LINK 
                           001D4A     2 	LINK=.
      001D4A                          3 PRINT:
      001D4A 05                       4 	.byte 5 	
      001D4B 50 52 49 4E 54           5 	.ascii "PRINT"
      001D50 00 72                    6 	.word PRT_IDX 
      001D52                       5103 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001D52 1D 4A                    1 	.word LINK 
                           001D54     2 	LINK=.
      001D54                          3 POUT:
      001D54 44                       4 	.byte 4+F_IFUNC 	
      001D55 50 4F 55 54              5 	.ascii "POUT"
      001D59 00 70                    6 	.word POUT_IDX 
      001D5B                       5104 	_dict_entry,4,POKE,POKE_IDX;poke 
      001D5B 1D 54                    1 	.word LINK 
                           001D5D     2 	LINK=.
      001D5D                          3 POKE:
      001D5D 04                       4 	.byte 4 	
      001D5E 50 4F 4B 45              5 	.ascii "POKE"
      001D62 00 6E                    6 	.word POKE_IDX 
      001D64                       5105 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001D64 1D 5D                    1 	.word LINK 
                           001D66     2 	LINK=.
      001D66                          3 PMODE:
      001D66 05                       4 	.byte 5 	
      001D67 50 4D 4F 44 45           5 	.ascii "PMODE"
      001D6C 00 68                    6 	.word PMODE_IDX 
      001D6E                       5106 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001D6E 1D 66                    1 	.word LINK 
                           001D70     2 	LINK=.
      001D70                          3 PINP:
      001D70 44                       4 	.byte 4+F_IFUNC 	
      001D71 50 49 4E 50              5 	.ascii "PINP"
      001D75 00 6C                    6 	.word PINP_IDX 
      001D77                       5107 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001D77 1D 70                    1 	.word LINK 
                           001D79     2 	LINK=.
      001D79                          3 PEEK:
      001D79 44                       4 	.byte 4+F_IFUNC 	
      001D7A 50 45 45 4B              5 	.ascii "PEEK"
      001D7E 00 6A                    6 	.word PEEK_IDX 
      001D80                       5108 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001D80 1D 79                    1 	.word LINK 
                           001D82     2 	LINK=.
      001D82                          3 PAUSE:
      001D82 05                       4 	.byte 5 	
      001D83 50 41 55 53 45           5 	.ascii "PAUSE"
      001D88 00 66                    6 	.word PAUSE_IDX 
      001D8A                       5109 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001D8A 1D 82                    1 	.word LINK 
                           001D8C     2 	LINK=.
      001D8C                          3 PAD:
      001D8C 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001D8D 50 41 44                 5 	.ascii "PAD"
      001D90 00 64                    6 	.word PAD_IDX 
      001D92                       5110 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      001D92 1D 8C                    1 	.word LINK 
                           001D94     2 	LINK=.
      001D94                          3 OR:
      001D94 42                       4 	.byte 2+F_IFUNC 	
      001D95 4F 52                    5 	.ascii "OR"
      001D97 00 62                    6 	.word OR_IDX 
      001D99                       5111 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001D99 1D 94                    1 	.word LINK 
                           001D9B     2 	LINK=.
      001D9B                          3 ODR:
      001D9B 43                       4 	.byte 3+F_IFUNC 	
      001D9C 4F 44 52                 5 	.ascii "ODR"
      001D9F 00 60                    6 	.word ODR_IDX 
      001DA1                       5112 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001DA1 1D 9B                    1 	.word LINK 
                           001DA3     2 	LINK=.
      001DA3                          3 NOT:
      001DA3 43                       4 	.byte 3+F_IFUNC 	
      001DA4 4E 4F 54                 5 	.ascii "NOT"
      001DA7 00 5E                    6 	.word NOT_IDX 
      001DA9                       5113 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001DA9 1D A3                    1 	.word LINK 
                           001DAB     2 	LINK=.
      001DAB                          3 NEXT:
      001DAB 04                       4 	.byte 4 	
      001DAC 4E 45 58 54              5 	.ascii "NEXT"
      001DB0 00 5A                    6 	.word NEXT_IDX 
      001DB2                       5114 	_dict_entry,3,NEW,NEW_IDX;new
      001DB2 1D AB                    1 	.word LINK 
                           001DB4     2 	LINK=.
      001DB4                          3 NEW:
      001DB4 03                       4 	.byte 3 	
      001DB5 4E 45 57                 5 	.ascii "NEW"
      001DB8 00 5C                    6 	.word NEW_IDX 
      001DBA                       5115 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001DBA 1D B4                    1 	.word LINK 
                           001DBC     2 	LINK=.
      001DBC                          3 MULDIV:
      001DBC 46                       4 	.byte 6+F_IFUNC 	
      001DBD 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001DC3 00 58                    6 	.word MULDIV_IDX 
      001DC5                       5116 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001DC5 1D BC                    1 	.word LINK 
                           001DC7     2 	LINK=.
      001DC7                          3 LSHIFT:
      001DC7 46                       4 	.byte 6+F_IFUNC 	
      001DC8 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001DCE 00 56                    6 	.word LSHIFT_IDX 
      001DD0                       5117 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001DD0 1D C7                    1 	.word LINK 
                           001DD2     2 	LINK=.
      001DD2                          3 LOG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001DD2 43                       4 	.byte 3+F_IFUNC 	
      001DD3 4C 4F 47                 5 	.ascii "LOG"
      001DD6 00 54                    6 	.word LOG_IDX 
      001DD8                       5118 	_dict_entry 4,LIST,LIST_IDX;list
      001DD8 1D D2                    1 	.word LINK 
                           001DDA     2 	LINK=.
      001DDA                          3 LIST:
      001DDA 04                       4 	.byte 4 	
      001DDB 4C 49 53 54              5 	.ascii "LIST"
      001DDF 00 52                    6 	.word LIST_IDX 
      001DE1                       5119 	_dict_entry 3,LET,LET_IDX;let 
      001DE1 1D DA                    1 	.word LINK 
                           001DE3     2 	LINK=.
      001DE3                          3 LET:
      001DE3 03                       4 	.byte 3 	
      001DE4 4C 45 54                 5 	.ascii "LET"
      001DE7 00 50                    6 	.word LET_IDX 
      001DE9                       5120 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001DE9 1D E3                    1 	.word LINK 
                           001DEB     2 	LINK=.
      001DEB                          3 KEY:
      001DEB 43                       4 	.byte 3+F_IFUNC 	
      001DEC 4B 45 59                 5 	.ascii "KEY"
      001DEF 00 4E                    6 	.word KEY_IDX 
      001DF1                       5121 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      001DF1 1D EB                    1 	.word LINK 
                           001DF3     2 	LINK=.
      001DF3                          3 IWDGREF:
      001DF3 07                       4 	.byte 7 	
      001DF4 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001DFB 00 4C                    6 	.word IWDGREF_IDX 
      001DFD                       5122 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001DFD 1D F3                    1 	.word LINK 
                           001DFF     2 	LINK=.
      001DFF                          3 IWDGEN:
      001DFF 06                       4 	.byte 6 	
      001E00 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001E06 00 4A                    6 	.word IWDGEN_IDX 
      001E08                       5123 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001E08 1D FF                    1 	.word LINK 
                           001E0A     2 	LINK=.
      001E0A                          3 INVERT:
      001E0A 46                       4 	.byte 6+F_IFUNC 	
      001E0B 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001E11 00 48                    6 	.word INVERT_IDX 
      001E13                       5124 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001E13 1E 0A                    1 	.word LINK 
                           001E15     2 	LINK=.
      001E15                          3 INPUT:
      001E15 05                       4 	.byte 5 	
      001E16 49 4E 50 55 54           5 	.ascii "INPUT"
      001E1B 00 46                    6 	.word INPUT_IDX 
      001E1D                       5125 	_dict_entry,2,IF,IF_IDX;if 
      001E1D 1E 15                    1 	.word LINK 
                           001E1F     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001E1F                          3 IF:
      001E1F 02                       4 	.byte 2 	
      001E20 49 46                    5 	.ascii "IF"
      001E22 00 44                    6 	.word IF_IDX 
      001E24                       5126 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001E24 1E 1F                    1 	.word LINK 
                           001E26     2 	LINK=.
      001E26                          3 IDR:
      001E26 43                       4 	.byte 3+F_IFUNC 	
      001E27 49 44 52                 5 	.ascii "IDR"
      001E2A 00 42                    6 	.word IDR_IDX 
      001E2C                       5127 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001E2C 1E 26                    1 	.word LINK 
                           001E2E     2 	LINK=.
      001E2E                          3 HEX:
      001E2E 03                       4 	.byte 3 	
      001E2F 48 45 58                 5 	.ascii "HEX"
      001E32 00 40                    6 	.word HEX_IDX 
      001E34                       5128 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001E34 1E 2E                    1 	.word LINK 
                           001E36     2 	LINK=.
      001E36                          3 GPIO:
      001E36 44                       4 	.byte 4+F_IFUNC 	
      001E37 47 50 49 4F              5 	.ascii "GPIO"
      001E3B 00 3E                    6 	.word GPIO_IDX 
      001E3D                       5129 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001E3D 1E 36                    1 	.word LINK 
                           001E3F     2 	LINK=.
      001E3F                          3 GOTO:
      001E3F 04                       4 	.byte 4 	
      001E40 47 4F 54 4F              5 	.ascii "GOTO"
      001E44 00 3C                    6 	.word GOTO_IDX 
      001E46                       5130 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      001E46 1E 3F                    1 	.word LINK 
                           001E48     2 	LINK=.
      001E48                          3 GOSUB:
      001E48 05                       4 	.byte 5 	
      001E49 47 4F 53 55 42           5 	.ascii "GOSUB"
      001E4E 00 3A                    6 	.word GOSUB_IDX 
      001E50                       5131 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      001E50 1E 48                    1 	.word LINK 
                           001E52     2 	LINK=.
      001E52                          3 FREE:
      001E52 44                       4 	.byte 4+F_IFUNC 	
      001E53 46 52 45 45              5 	.ascii "FREE"
      001E57 00 9A                    6 	.word FREE_IDX 
      001E59                       5132 	_dict_entry,3,FOR,FOR_IDX;for 
      001E59 1E 52                    1 	.word LINK 
                           001E5B     2 	LINK=.
      001E5B                          3 FOR:
      001E5B 03                       4 	.byte 3 	
      001E5C 46 4F 52                 5 	.ascii "FOR"
      001E5F 00 38                    6 	.word FOR_IDX 
      001E61                       5133 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      001E61 1E 5B                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           001E63     2 	LINK=.
      001E63                          3 FCPU:
      001E63 04                       4 	.byte 4 	
      001E64 46 43 50 55              5 	.ascii "FCPU"
      001E68 00 34                    6 	.word FCPU_IDX 
      001E6A                       5134 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      001E6A 1E 63                    1 	.word LINK 
                           001E6C     2 	LINK=.
      001E6C                          3 ERASE:
      001E6C 05                       4 	.byte 5 	
      001E6D 45 52 41 53 45           5 	.ascii "ERASE"
      001E72 00 32                    6 	.word ERASE_IDX 
      001E74                       5135 	_dict_entry,3,END,END_IDX;cmd_end  
      001E74 1E 6C                    1 	.word LINK 
                           001E76     2 	LINK=.
      001E76                          3 END:
      001E76 03                       4 	.byte 3 	
      001E77 45 4E 44                 5 	.ascii "END"
      001E7A 00 30                    6 	.word END_IDX 
      001E7C                       5136 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      001E7C 1E 76                    1 	.word LINK 
                           001E7E     2 	LINK=.
      001E7E                          3 EEPROM:
      001E7E 46                       4 	.byte 6+F_IFUNC 	
      001E7F 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001E85 00 2E                    6 	.word EEPROM_IDX 
      001E87                       5137 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      001E87 1E 7E                    1 	.word LINK 
                           001E89     2 	LINK=.
      001E89                          3 EDIT:
      001E89 04                       4 	.byte 4 	
      001E8A 45 44 49 54              5 	.ascii "EDIT"
      001E8E 00 2C                    6 	.word EDIT_IDX 
      001E90                       5138 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      001E90 1E 89                    1 	.word LINK 
                           001E92     2 	LINK=.
      001E92                          3 DWRITE:
      001E92 06                       4 	.byte 6+F_CMD 	
      001E93 44 57 52 49 54 45        5 	.ascii "DWRITE"
      001E99 00 2A                    6 	.word DWRITE_IDX 
      001E9B                       5139 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      001E9B 1E 92                    1 	.word LINK 
                           001E9D     2 	LINK=.
      001E9D                          3 DREAD:
      001E9D 45                       4 	.byte 5+F_IFUNC 	
      001E9E 44 52 45 41 44           5 	.ascii "DREAD"
      001EA3 00 28                    6 	.word DREAD_IDX 
      001EA5                       5140 	_dict_entry,2,DO,DO_IDX;do_loop
      001EA5 1E 9D                    1 	.word LINK 
                           001EA7     2 	LINK=.
      001EA7                          3 DO:
      001EA7 02                       4 	.byte 2 	
      001EA8 44 4F                    5 	.ascii "DO"
      001EAA 00 26                    6 	.word DO_IDX 
      001EAC                       5141 	_dict_entry,3,DEC,DEC_IDX;dec_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001EAC 1E A7                    1 	.word LINK 
                           001EAE     2 	LINK=.
      001EAE                          3 DEC:
      001EAE 03                       4 	.byte 3 	
      001EAF 44 45 43                 5 	.ascii "DEC"
      001EB2 00 24                    6 	.word DEC_IDX 
      001EB4                       5142 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      001EB4 1E AE                    1 	.word LINK 
                           001EB6     2 	LINK=.
      001EB6                          3 DDR:
      001EB6 43                       4 	.byte 3+F_IFUNC 	
      001EB7 44 44 52                 5 	.ascii "DDR"
      001EBA 00 22                    6 	.word DDR_IDX 
      001EBC                       5143 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      001EBC 1E B6                    1 	.word LINK 
                           001EBE     2 	LINK=.
      001EBE                          3 DATALN:
      001EBE 06                       4 	.byte 6 	
      001EBF 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      001EC5 00 20                    6 	.word DATALN_IDX 
      001EC7                       5144 	_dict_entry,4,DATA,DATA_IDX;data  
      001EC7 1E BE                    1 	.word LINK 
                           001EC9     2 	LINK=.
      001EC9                          3 DATA:
      001EC9 04                       4 	.byte 4 	
      001ECA 44 41 54 41              5 	.ascii "DATA"
      001ECE 00 1E                    6 	.word DATA_IDX 
      001ED0                       5145 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      001ED0 1E C9                    1 	.word LINK 
                           001ED2     2 	LINK=.
      001ED2                          3 CRL:
      001ED2 43                       4 	.byte 3+F_IFUNC 	
      001ED3 43 52 4C                 5 	.ascii "CRL"
      001ED6 00 1C                    6 	.word CRL_IDX 
      001ED8                       5146 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      001ED8 1E D2                    1 	.word LINK 
                           001EDA     2 	LINK=.
      001EDA                          3 CRH:
      001EDA 43                       4 	.byte 3+F_IFUNC 	
      001EDB 43 52 48                 5 	.ascii "CRH"
      001EDE 00 1A                    6 	.word CRH_IDX 
      001EE0                       5147 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      001EE0 1E DA                    1 	.word LINK 
                           001EE2     2 	LINK=.
      001EE2                          3 CHAR:
      001EE2 84                       4 	.byte 4+F_CFUNC 	
      001EE3 43 48 41 52              5 	.ascii "CHAR"
      001EE7 00 18                    6 	.word CHAR_IDX 
      001EE9                       5148 	_dict_entry,3,BYE,BYE_IDX;bye 
      001EE9 1E E2                    1 	.word LINK 
                           001EEB     2 	LINK=.
      001EEB                          3 BYE:
      001EEB 03                       4 	.byte 3 	
      001EEC 42 59 45                 5 	.ascii "BYE"
      001EEF 00 16                    6 	.word BYE_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001EF1                       5149 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      001EF1 1E EB                    1 	.word LINK 
                           001EF3     2 	LINK=.
      001EF3                          3 BTOGL:
      001EF3 05                       4 	.byte 5 	
      001EF4 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001EF9 00 14                    6 	.word BTOGL_IDX 
      001EFB                       5150 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      001EFB 1E F3                    1 	.word LINK 
                           001EFD     2 	LINK=.
      001EFD                          3 BTEST:
      001EFD 45                       4 	.byte 5+F_IFUNC 	
      001EFE 42 54 45 53 54           5 	.ascii "BTEST"
      001F03 00 12                    6 	.word BTEST_IDX 
      001F05                       5151 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      001F05 1E FD                    1 	.word LINK 
                           001F07     2 	LINK=.
      001F07                          3 BSET:
      001F07 04                       4 	.byte 4 	
      001F08 42 53 45 54              5 	.ascii "BSET"
      001F0C 00 10                    6 	.word BSET_IDX 
      001F0E                       5152 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      001F0E 1F 07                    1 	.word LINK 
                           001F10     2 	LINK=.
      001F10                          3 BRES:
      001F10 04                       4 	.byte 4 	
      001F11 42 52 45 53              5 	.ascii "BRES"
      001F15 00 0E                    6 	.word BRES_IDX 
      001F17                       5153 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      001F17 1F 10                    1 	.word LINK 
                           001F19     2 	LINK=.
      001F19                          3 BIT:
      001F19 43                       4 	.byte 3+F_IFUNC 	
      001F1A 42 49 54                 5 	.ascii "BIT"
      001F1D 00 0C                    6 	.word BIT_IDX 
      001F1F                       5154 	_dict_entry,3,AWU,AWU_IDX;awu 
      001F1F 1F 19                    1 	.word LINK 
                           001F21     2 	LINK=.
      001F21                          3 AWU:
      001F21 03                       4 	.byte 3 	
      001F22 41 57 55                 5 	.ascii "AWU"
      001F25 00 0A                    6 	.word AWU_IDX 
      001F27                       5155 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      001F27 1F 21                    1 	.word LINK 
                           001F29     2 	LINK=.
      001F29                          3 ASC:
      001F29 43                       4 	.byte 3+F_IFUNC 	
      001F2A 41 53 43                 5 	.ascii "ASC"
      001F2D 00 08                    6 	.word ASC_IDX 
      001F2F                       5156 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      001F2F 1F 29                    1 	.word LINK 
                           001F31     2 	LINK=.
      001F31                          3 AND:
      001F31 43                       4 	.byte 3+F_IFUNC 	
      001F32 41 4E 44                 5 	.ascii "AND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001F35 00 06                    6 	.word AND_IDX 
      001F37                       5157 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      001F37 1F 31                    1 	.word LINK 
                           001F39     2 	LINK=.
      001F39                          3 ADCREAD:
      001F39 47                       4 	.byte 7+F_IFUNC 	
      001F3A 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      001F41 00 04                    6 	.word ADCREAD_IDX 
      001F43                       5158 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      001F43 1F 39                    1 	.word LINK 
                           001F45     2 	LINK=.
      001F45                          3 ADCON:
      001F45 05                       4 	.byte 5 	
      001F46 41 44 43 4F 4E           5 	.ascii "ADCON"
      001F4B 00 02                    6 	.word ADCON_IDX 
      001F4D                       5159 kword_dict::
      001F4D                       5160 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      001F4D 1F 45                    1 	.word LINK 
                           001F4F     2 	LINK=.
      001F4F                          3 ABS:
      001F4F 43                       4 	.byte 3+F_IFUNC 	
      001F50 41 42 53                 5 	.ascii "ABS"
      001F53 00 00                    6 	.word ABS_IDX 
                                   5161 
                                   5162 ;comands and fonctions address table 	
      001F55                       5163 code_addr::
      001F55 16 F2 13 0E 13 4A 17  5164 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             06 15 E3 16 A3 19 54
      001F63 10 9C 10 8C 10 BD 10  5165 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             AD 16 7C 15 D1 1A 0E
      001F71 1A 08 1A 26 1A 2C 1A  5166 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             02 0D C2 19 7D 13 7E
             13 AE
      001F81 0F 07 1A 20 12 BA 14  5167 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             76 17 80 14 E2 11 18
             12 23 12 08 16 1F
      001F95 0D BD 19 FC 11 04 0F  5168 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             F1 19 6E 18 FE 19 34
             16 0A
      001FA5 0E 3F 0E 72 19 39 17  5169 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             4E 0B 61 11 98 14 35
      001FB3 18 F1 19 F6 17 1E 1B  5170 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             BA 16 90 17 8C 10 F3
             1A 1A
      001FC3 10 E4 1A 14 0F 6B 19  5171 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             C0 19 C6 19 CC 19 D2
             19 D8
      001FD3 19 DE 19 E4 19 EA 19  5172 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             F0 16 12 1A A9 04 86
             10 61
      001FE3 1A 5A 12 43 18 08 17  5173 	.word restore,return, random,rshift,run,show,free ; 72..79
             67 12 61 0D 7C 0D C7
      001FF1 16 85 1B 9B 1B 03 1B  5174 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             A3 1B 7B 11 71 13 E9
             16 EC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002001 18 D5 18 E4 11 41 12  5175 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             CA 0E 35 16 49 19 92
             16 5F
      002011 10 67 18 6F 15 9A 17  5176 	.word wait,words,write,bit_xor,cmd_size ; 96..99
             36 0D E0
      00201B 00 00                 5177 	.word 0 
                                   5178 
                                   5179 
                                   5180 
                                   5181 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
                                     32 ;    .nlist
                                     33 ;	.include "inc/nucleo_8s208.inc"
                                     34 ;	.include "inc/stm8s208.inc"
                                     35 ;	.include "inc/ascii.inc"
                                     36 ;	.include "inc/gen_macros.inc" 
                                     37 ;	.include "tbi_macros.inc" 
                                     38     .list 
                                     39 
                                     40 
                                     41     .area CODE 
                                     42 
                                     43 
                                     44 ;-----------------------------
                                     45 ;  constants replacing 
                                     46 ;  ANSI sequence received 
                                     47 ;  from terminal.
                                     48 ;  These are the ANSI sequences
                                     49 ;  accepted by function readln
                                     50 ;------------------------------
                           000080    51     ARROW_LEFT=128
                           000081    52     ARROW_RIGHT=129
                           000082    53     HOME=130
                           000083    54     KEY_END=131
                           000084    55     SUP=132 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                     56 
      00201D 43 81 44 80 48 82 46    57 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                     58 
                                     59 ;--------------------------------
                                     60 ; receive ANSI ESC 
                                     61 ; sequence and convert it
                                     62 ; to a single character code 
                                     63 ; in range {128..255}
                                     64 ; This is called after receiving 
                                     65 ; ESC character. 
                                     66 ; ignored sequence return 0 
                                     67 ; output:
                                     68 ;   A    converted character 
                                     69 ;-------------------------------
      002029                         70 get_escape:
      002029 CD 02 D1         [ 4]   71     call getc 
      00202C A1 5B            [ 1]   72     cp a,#'[ ; this character is expected after ESC 
      00202E 27 02            [ 1]   73     jreq 1$
      002030 4F               [ 1]   74     clr a
      002031 81               [ 4]   75     ret
      002032 CD 02 D1         [ 4]   76 1$: call getc 
      002035 AE 20 1D         [ 2]   77     ldw x,#convert_table
      002038                         78 2$:
      002038 F1               [ 1]   79     cp a,(x)
      002039 27 08            [ 1]   80     jreq 4$
      00203B 1C 00 02         [ 2]   81     addw x,#2
      00203E 7D               [ 1]   82     tnz (x)
      00203F 26 F7            [ 1]   83     jrne 2$
      002041 4F               [ 1]   84     clr a
      002042 81               [ 4]   85     ret 
      002043 5C               [ 1]   86 4$: incw x 
      002044 F6               [ 1]   87     ld a,(x)
      002045 A1 84            [ 1]   88     cp a,#SUP
      002047 26 05            [ 1]   89     jrne 5$
      002049 88               [ 1]   90     push a 
      00204A CD 02 D1         [ 4]   91     call getc
      00204D 84               [ 1]   92     pop a 
      00204E                         93 5$:
      00204E 81               [ 4]   94     ret 
                                     95 
                                     96 
                                     97 ;-----------------------------
                                     98 ; send an ASCIZ string to UART1 
                                     99 ; input: 
                                    100 ;   x 		char * 
                                    101 ; output:
                                    102 ;   none 
                                    103 ;-------------------------------
      00204F                        104 puts::
      00204F F6               [ 1]  105     ld a,(x)
      002050 27 06            [ 1]  106 	jreq 1$
      002052 CD 02 C1         [ 4]  107 	call putc 
      002055 5C               [ 1]  108 	incw x 
      002056 20 F7            [ 2]  109 	jra puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      002058 81               [ 4]  110 1$:	ret 
                                    111 
                                    112 
                                    113 ;---------------------------
                                    114 ; delete character at left 
                                    115 ; of cursor on terminal 
                                    116 ; input:
                                    117 ;   none 
                                    118 ; output:
                                    119 ;	none 
                                    120 ;---------------------------
      002059                        121 bksp:
      002059 A6 08            [ 1]  122 	ld a,#BS 
      00205B CD 02 C1         [ 4]  123 	call putc 
      00205E A6 20            [ 1]  124 	ld a,#SPACE 
      002060 CD 02 C1         [ 4]  125 	call putc 
      002063 A6 08            [ 1]  126 	ld a,#BS 
      002065 CD 02 C1         [ 4]  127 	call putc 
      002068 81               [ 4]  128 	ret 
                                    129 ;---------------------------
                                    130 ; delete n character left of cursor 
                                    131 ; at terminal.
                                    132 ; input: 
                                    133 ;   A   number of characters to delete.
                                    134 ; output:
                                    135 ;    none 
                                    136 ;--------------------------	
      002069                        137 delete_nchar:
      002069 88               [ 1]  138 	push a 
      00206A 0D 01            [ 1]  139 0$:	tnz (1,sp)
      00206C 27 07            [ 1]  140 	jreq 1$
      00206E CD 20 59         [ 4]  141 	call bksp 
      002071 0A 01            [ 1]  142 	dec (1,sp)
      002073 20 F5            [ 2]  143 	jra 0$
      002075 84               [ 1]  144 1$:	pop a 
      002076 81               [ 4]  145 	ret
                                    146 
                                    147 ;--------------------------
                                    148 ; send ANSI escape sequence
                                    149 ; ANSI: ESC[
                                    150 ; note: ESC is ASCII 27
                                    151 ;       [   is ASCII 91  
                                    152 ;-------------------------- 
      002077                        153 send_escape:
      002077 A6 1B            [ 1]  154 	ld a,#ESC 
      002079 CD 02 C1         [ 4]  155 	call putc 
      00207C A6 5B            [ 1]  156 	ld a,#'[
      00207E CD 02 C1         [ 4]  157 	call putc 
      002081 81               [ 4]  158 	ret 
                                    159 
                                    160 ;---------------------
                                    161 ;send ANSI parameter value
                                    162 ; ANSI parameter values are 
                                    163 ; sent as ASCII charater 
                                    164 ; not as binary number.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                    165 ; this routine 
                                    166 ; convert binary number to 
                                    167 ; ASCII string and send it.
                                    168 ; expected range {0..99}
                                    169 ; input: 
                                    170 ; 	A {0..99} 
                                    171 ; output:
                                    172 ;   none 
                                    173 ;---------------------
      002082                        174 send_parameter:
      002082 89               [ 2]  175 	pushw x 
      002083 5F               [ 1]  176 	clrw x 
      002084 97               [ 1]  177 	ld xl,a 
      002085 A6 0A            [ 1]  178 	ld a,#10 
      002087 62               [ 2]  179 	div x,a 
      002088 95               [ 1]  180 	ld xh,a 
      002089 9F               [ 1]  181 	ld a,xl
      00208A 4D               [ 1]  182     tnz a 
      00208B 27 0B            [ 1]  183     jreq 2$
      00208D A1 09            [ 1]  184 	cp a,#9 
      00208F 23 02            [ 2]  185 	jrule 1$
      002091 A6 39            [ 1]  186 	ld a,#'9
      002093                        187 1$:
      002093 AB 30            [ 1]  188 	add a,#'0 
      002095 CD 02 C1         [ 4]  189 	call putc
      002098 9E               [ 1]  190 2$:	ld a,xh 
      002099 AB 30            [ 1]  191 	add a,#'0
      00209B CD 02 C1         [ 4]  192 	call putc 
      00209E 85               [ 2]  193 	popw x 
      00209F 81               [ 4]  194 	ret 
                                    195 
                                    196 ;--------------------------
                                    197 ; move cursor left n character
                                    198 ; ANSI: ESC[PnD 
                                    199 ; 'Pn' est a numerical parameter
                                    200 ; specifying number of characters 
                                    201 ; displacement.
                                    202 ; input:
                                    203 ;   A     character count
                                    204 ; output:
                                    205 ;   none
                                    206 ;--------------------------
      0020A0                        207 move_left:
      0020A0 88               [ 1]  208 	push a 
      0020A1 CD 20 77         [ 4]  209 	call send_escape
      0020A4 84               [ 1]  210     pop a
      0020A5 CD 20 82         [ 4]  211 	call send_parameter 
      0020A8 A6 44            [ 1]  212 	ld a,#'D 
      0020AA CD 02 C1         [ 4]  213 	call putc 
      0020AD 81               [ 4]  214 	ret	
                                    215 
                                    216 
                                    217 ;--------------------------
                                    218 ; move cursor right n character 
                                    219 ; ANSI: ESC[PnC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    220 ; input:
                                    221 ;   A     character count
                                    222 ; output:
                                    223 ;   none
                                    224 ;--------------------------
      0020AE                        225 move_right:
      0020AE 88               [ 1]  226 	push a 
      0020AF CD 20 77         [ 4]  227 	call send_escape
      0020B2 84               [ 1]  228     pop a
      0020B3 CD 20 82         [ 4]  229 	call send_parameter 
      0020B6 A6 43            [ 1]  230 	ld a,#'C 
      0020B8 CD 02 C1         [ 4]  231 	call putc 
      0020BB 81               [ 4]  232 	ret 
                                    233 
                                    234 
                                    235 ;--------------------------
                                    236 ; print n spaces on terminal
                                    237 ; input:
                                    238 ;  X 		number of spaces 
                                    239 ; output:
                                    240 ;	none 
                                    241 ;---------------------------
      0020BC                        242 spaces::
      0020BC A6 20            [ 1]  243 	ld a,#SPACE 
      0020BE 5D               [ 2]  244 1$:	tnzw x
      0020BF 27 06            [ 1]  245 	jreq 9$
      0020C1 CD 02 C1         [ 4]  246 	call putc 
      0020C4 5A               [ 2]  247 	decw x
      0020C5 20 F7            [ 2]  248 	jra 1$
      0020C7                        249 9$: 
      0020C7 81               [ 4]  250 	ret 
                                    251 
                                    252 ;--------------------------
                                    253 ; insert character in text 
                                    254 ; line 
                                    255 ; input:
                                    256 ;   A       character to insert 
                                    257 ;   xl      line length
                                    258 ;   xh      insert position 
                                    259 ;   Y       line pointer 
                                    260 ; output:
                                    261 ;   Y       updated Y 
                                    262 ;-------------------------
                           000001   263 	IPOS=1
                           000002   264 	KCHAR=2 
                           000003   265     LLEN=3 
                           000003   266 	VSISE=3 
      0020C8                        267 insert_char: 
      0020C8                        268 	_vars VSIZE 
      0020C8 52 06            [ 2]    1     sub sp,#VSIZE 
      0020CA 6B 02            [ 1]  269     ld (KCHAR,sp),a 
      0020CC 9E               [ 1]  270     ld a,xh 
      0020CD 6B 01            [ 1]  271 	ld (IPOS,sp),a
      0020CF 9F               [ 1]  272     ld a,xl 
      0020D0 6B 03            [ 1]  273     ld (LLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0020D2 93               [ 1]  274     ldw x,y
      0020D3 5C               [ 1]  275     incw x 
      0020D4 7B 03            [ 1]  276     ld a,(LLEN,sp)
      0020D6 10 01            [ 1]  277     sub a,(IPOS,sp)
      0020D8 4C               [ 1]  278     inc a 
      0020D9 C7 00 0D         [ 1]  279     ld acc8,a 
      0020DC 72 5F 00 0C      [ 1]  280     clr acc16
      0020E0 CD 03 C5         [ 4]  281     call move
      0020E3 90 AE 16 90      [ 2]  282     ldw y,#tib 
      0020E7 7B 01            [ 1]  283     ld a,(IPOS,sp)
      0020E9 C7 00 0D         [ 1]  284     ld acc8,a 
      0020EC 72 B9 00 0C      [ 2]  285     addw y,acc16 
      0020F0 7B 02            [ 1]  286     ld a,(KCHAR,sp)
      0020F2 90 F7            [ 1]  287     ld (y),a
      0020F4 90 5C            [ 1]  288     incw y  
      0020F6 7B 01            [ 1]  289     ld a,(IPOS,sp)
      0020F8 CD 20 A0         [ 4]  290     call move_left
      0020FB AE 16 90         [ 2]  291     ldw x,#tib 
      0020FE CD 20 4F         [ 4]  292     call puts 
      002101 7B 03            [ 1]  293     ld a,(LLEN,sp)
      002103 10 01            [ 1]  294     sub a,(IPOS,sp) 
      002105 CD 20 A0         [ 4]  295     call move_left 
      002108                        296 	_drop VSIZE 
      002108 5B 06            [ 2]    1     addw sp,#VSIZE 
      00210A 81               [ 4]  297 	ret 
                                    298 
                                    299 
                                    300 ;--------------------------
                                    301 ; delete character under cursor
                                    302 ; input:
                                    303 ;   A       line length   
                                    304 ;   xl      delete position
                                    305 ;   Y       line pointer 
                                    306 ;-------------------------
                           000001   307 	CPOS=1
                           000002   308 	LLEN=2
                           000002   309 	VSIZE=2
      00210B                        310 delete_under:
      00210B                        311 	_vars VSIZE 
      00210B 52 02            [ 2]    1     sub sp,#VSIZE 
      00210D 6B 02            [ 1]  312     ld (LLEN,sp),a 
      00210F 9F               [ 1]  313     ld a,xl 
      002110 6B 01            [ 1]  314     ld (CPOS,sp),a 
      002112 93               [ 1]  315     ldw x,y ; move destination
      002113 90 5C            [ 1]  316     incw y  ; move source 
      002115 7B 02            [ 1]  317     ld a,(LLEN,sp)
      002117 10 01            [ 1]  318     sub a,(CPOS,sp)
      002119 4C               [ 1]  319     inc a ; move including zero at end.
      00211A C7 00 0D         [ 1]  320     ld acc8,a 
      00211D 72 5F 00 0C      [ 1]  321     clr acc16 
      002121 CD 03 C5         [ 4]  322 	call move 
      002124 90 AE 16 90      [ 2]  323     ldw y,#tib 
      002128 7B 01            [ 1]  324     ld a,(CPOS,sp)
      00212A C7 00 0D         [ 1]  325     ld acc8,a 
      00212D 72 B9 00 0C      [ 2]  326     addw y,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002131 93               [ 1]  327     ldw x,y 
      002132 CD 20 4F         [ 4]  328     call puts 
      002135 A6 20            [ 1]  329     ld a,#SPACE  
      002137 CD 02 C1         [ 4]  330     call putc
      00213A 7B 02            [ 1]  331     ld a,(LLEN,sp)
      00213C 10 01            [ 1]  332     sub a,(CPOS,sp)
      00213E CD 20 A0         [ 4]  333     call move_left 
      002141 0A 02            [ 1]  334     dec (LLEN,sp)
      002143                        335 	_drop VSIZE 
      002143 5B 02            [ 2]    1     addw sp,#VSIZE 
      002145 81               [ 4]  336 	ret 
                                    337 
                                    338 ;-----------------------------
                                    339 ; send ANSI sequence to delete
                                    340 ; whole line. Cursor position
                                    341 ; is not updated.
                                    342 ; ANSI: ESC[2K
                                    343 ; input:
                                    344 ;   none
                                    345 ; output:
                                    346 ;   none 
                                    347 ;-----------------------------
      002146                        348 delete_line:
      002146 CD 20 77         [ 4]  349     call send_escape
      002149 A6 32            [ 1]  350 	ld a,#'2
      00214B CD 02 C1         [ 4]  351 	call putc 
      00214E A6 4B            [ 1]  352 	ld a,#'K 
      002150 CD 02 C1         [ 4]  353 	call putc 
      002153 81               [ 4]  354 	ret 
                                    355 
                                    356 
                                    357 
                                    358 ;------------------------------------
                                    359 ; read a line of text from terminal
                                    360 ;  touches de contrôle
                                    361 ;    BS   efface caractère à gauche 
                                    362 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    363 ;    CTRL_R  répète dernière ligne saisie
                                    364 ;    CTRL_D  supprime ligne 
                                    365 ;    HOME  va au début de la ligne 
                                    366 ;    KEY_END  va à la fin de la ligne 
                                    367 ;    ARROW_LEFT  un caractère vers la gauche 
                                    368 ;    ARROW_RIGHT  un caractère vers la droite 
                                    369 ;    CTRL_O  commute entre insert/overwrite
                                    370 ; input:
                                    371 ;	none
                                    372 ; local variable on stack:
                                    373 ;	LL  line length
                                    374 ;   RXCHAR last received character 
                                    375 ; output:
                                    376 ;   text in tib  buffer
                                    377 ;   count  line length 
                                    378 ;------------------------------------
                                    379 	; local variables
                           000001   380 	LL_HB=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                           000001   381 	RXCHAR = 1 ; last char received
                           000002   382 	LL = 2  ; accepted line length
                           000003   383 	CPOS=3  ; cursor position 
                           000004   384 	OVRWR=4 ; overwrite flag 
                           000004   385 	VSIZE=4 
      002154                        386 readln::
      002154                        387 	_vars VSIZE 
      002154 52 04            [ 2]    1     sub sp,#VSIZE 
      002156 5F               [ 1]  388 	clrw x 
      002157 1F 02            [ 2]  389 	ldw (LL,sp),x 
      002159 1F 03            [ 2]  390 	ldw (CPOS,sp),x 
      00215B 03 04            [ 1]  391 	cpl (OVRWR,sp) ; default to overwrite mode 
      00215D 90 AE 16 90      [ 2]  392  	ldw y,#tib ; input buffer
      002161                        393 readln_loop:
      002161 CD 02 D1         [ 4]  394 	call getc
      002164 6B 01            [ 1]  395 	ld (RXCHAR,sp),a
      002166 A1 1B            [ 1]  396     cp a,#ESC 
      002168 26 05            [ 1]  397     jrne 0$
      00216A CD 20 29         [ 4]  398     call get_escape 
      00216D 6B 01            [ 1]  399     ld (RXCHAR,sp),a 
      00216F A1 0D            [ 1]  400 0$:	cp a,#CR
      002171 26 03            [ 1]  401 	jrne 1$
      002173 CC 22 FD         [ 2]  402 	jp readln_quit
      002176 A1 0A            [ 1]  403 1$:	cp a,#LF 
      002178 26 03            [ 1]  404 	jrne 2$ 
      00217A CC 22 FD         [ 2]  405 	jp readln_quit
      00217D                        406 2$:
      00217D A1 08            [ 1]  407 	cp a,#BS
      00217F 26 12            [ 1]  408 	jrne 3$
                                    409 ; delete left 
      002181 0D 03            [ 1]  410     tnz (CPOS,sp)
      002183 27 DC            [ 1]  411     jreq readln_loop 
      002185 A6 01            [ 1]  412     ld a,#1 
      002187 CD 20 A0         [ 4]  413     call move_left
      00218A 0A 03            [ 1]  414     dec (CPOS,sp)
      00218C 90 5A            [ 2]  415     decw y 
      00218E 7B 03            [ 1]  416     ld a,(CPOS,sp) 
      002190 CC 22 A9         [ 2]  417     jp 12$
      002193                        418 3$:
      002193 A1 04            [ 1]  419 	cp a,#CTRL_D
      002195 26 1A            [ 1]  420 	jrne 4$
                                    421 ;delete line 
      002197 CD 21 46         [ 4]  422 	call delete_line 
      00219A 7B 03            [ 1]  423     ld a,(CPOS,sp)
      00219C 4C               [ 1]  424     inc a 
      00219D CD 20 A0         [ 4]  425     call move_left 
      0021A0 A6 3E            [ 1]  426 	ld a,#'> 
      0021A2 CD 02 C1         [ 4]  427 	call putc 
      0021A5 90 AE 16 90      [ 2]  428 	ldw y,#tib
      0021A9 90 7F            [ 1]  429 	clr (y)
      0021AB 0F 02            [ 1]  430 	clr (LL,sp)
      0021AD 0F 03            [ 1]  431 	clr (CPOS,sp)
      0021AF 20 B0            [ 2]  432 	jra readln_loop
      0021B1                        433 4$:
      0021B1 A1 12            [ 1]  434 	cp a,#CTRL_R 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0021B3 26 21            [ 1]  435 	jrne 5$
                                    436 ;reprint 
      0021B5 0D 02            [ 1]  437 	tnz (LL,sp)
      0021B7 26 A8            [ 1]  438 	jrne readln_loop
      0021B9 AE 16 90         [ 2]  439 	ldw x,#tib 
      0021BC CD 03 99         [ 4]  440 	call strlen 
      0021BF 90 AE 16 90      [ 2]  441 	ldw y,#tib 
      0021C3 27 9C            [ 1]  442 	jreq readln_loop
      0021C5 6B 02            [ 1]  443 	ld (LL,sp),a 
      0021C7 6B 03            [ 1]  444     ld (CPOS,sp),a
      0021C9 AE 16 90         [ 2]  445 	ldw x,#tib 
      0021CC CD 20 4F         [ 4]  446 	call puts
      0021CF 0F 01            [ 1]  447 	clr (LL_HB,sp)
      0021D1 72 F9 01         [ 2]  448 	addw y,(LL_HB,sp)
      0021D4 20 8B            [ 2]  449 	jra readln_loop 
      0021D6                        450 5$:
      0021D6 A1 05            [ 1]  451 	cp a,#CTRL_E 
      0021D8 26 49            [ 1]  452 	jrne 6$
                                    453 ;edit line number 
      0021DA AE 16 90         [ 2]  454 	ldw x,#tib 
      0021DD CD 09 96         [ 4]  455 	call atoi24
      0021E0 CE 00 0C         [ 2]  456 	ldw x,acc16
      0021E3 CD 23 37         [ 4]  457 	call search_lineno
      0021E6 5D               [ 2]  458 	tnzw x 
      0021E7 26 0B            [ 1]  459 	jrne 51$
      0021E9 0F 02            [ 1]  460 	clr (LL,sp)
      0021EB 90 AE 16 90      [ 2]  461 	ldw y,#tib
      0021EF 90 7F            [ 1]  462     clr (y) 	
      0021F1 CC 22 FD         [ 2]  463 	jp readln_quit  
      0021F4                        464 51$:
      0021F4 CF 00 04         [ 2]  465 	ldw basicptr,x
      0021F7 E6 02            [ 1]  466 	ld a,(2,x)
      0021F9 C7 00 03         [ 1]  467 	ld count,a 
      0021FC 90 AE 16 90      [ 2]  468 	ldw y,#tib 
      002200 CD 28 48         [ 4]  469 	call decompile 
      002203 0F 01            [ 1]  470 	clr (LL_HB,sp)
      002205 A6 0D            [ 1]  471 	ld a,#CR 
      002207 CD 02 C1         [ 4]  472 	call putc 
      00220A A6 3E            [ 1]  473 	ld a,#'>
      00220C CD 02 C1         [ 4]  474 	call putc
      00220F AE 16 90         [ 2]  475     ldw x,#tib  
      002212 CD 03 99         [ 4]  476 	call strlen 
      002215 6B 02            [ 1]  477 	ld (LL,sp),a 
      002217 CD 20 4F         [ 4]  478 	call puts 
      00221A 90 93            [ 1]  479 	ldw y,x
      00221C 7B 02            [ 1]  480     ld a,(LL,sp)
      00221E 6B 03            [ 1]  481     ld (CPOS,sp),a  
      002220 CC 21 61         [ 2]  482 	jp readln_loop
      002223                        483 6$:
      002223 A1 81            [ 1]  484 	cp a,#ARROW_RIGHT
      002225 26 15            [ 1]  485    	jrne 7$ 
                                    486 ; right arrow
      002227 7B 03            [ 1]  487 	ld a,(CPOS,sp)
      002229 11 02            [ 1]  488     cp a,(LL,sp)
      00222B 2B 03            [ 1]  489     jrmi 61$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      00222D CC 21 61         [ 2]  490     jp readln_loop 
      002230                        491 61$:
      002230 A6 01            [ 1]  492     ld a,#1 
      002232 CD 20 AE         [ 4]  493 	call move_right 
      002235 0C 03            [ 1]  494 	inc (CPOS,sp)
      002237 90 5C            [ 1]  495     incw y 
      002239 CC 21 61         [ 2]  496     jp readln_loop 
      00223C A1 80            [ 1]  497 7$: cp a,#ARROW_LEFT  
      00223E 26 13            [ 1]  498 	jrne 8$
                                    499 ; left arrow 
      002240 0D 03            [ 1]  500 	tnz (CPOS,sp)
      002242 26 03            [ 1]  501 	jrne 71$
      002244 CC 21 61         [ 2]  502 	jp readln_loop
      002247                        503 71$:
      002247 A6 01            [ 1]  504     ld a,#1 
      002249 CD 20 A0         [ 4]  505 	call move_left 
      00224C 0A 03            [ 1]  506 	dec (CPOS,sp)
      00224E 90 5A            [ 2]  507     decw y 
      002250 CC 21 61         [ 2]  508 	jp readln_loop 
      002253 A1 82            [ 1]  509 8$: cp a,#HOME  
      002255 26 0E            [ 1]  510 	jrne 9$
                                    511 ; HOME 
      002257 7B 03            [ 1]  512     ld a,(CPOS,sp)
      002259 CD 20 A0         [ 4]  513     call move_left 
      00225C 0F 03            [ 1]  514 	clr (CPOS,sp)
      00225E 90 AE 16 90      [ 2]  515     ldw y,#tib 
      002262 CC 21 61         [ 2]  516 	jp readln_loop  
      002265 A1 83            [ 1]  517 9$: cp a,#KEY_END  
      002267 26 26            [ 1]  518 	jrne 10$
                                    519 ; KEY_END 
      002269 7B 03            [ 1]  520 	ld a,(CPOS,sp)
      00226B 11 02            [ 1]  521 	cp a,(LL,sp)
      00226D 26 03            [ 1]  522 	jrne 91$
      00226F CC 21 61         [ 2]  523 	jp readln_loop 
      002272                        524 91$:
      002272 7B 02            [ 1]  525 	ld a,(LL,sp)
      002274 10 03            [ 1]  526 	sub a,(CPOS,sp)
      002276 CD 20 AE         [ 4]  527 	call move_right 
      002279 7B 02            [ 1]  528 	ld a,(LL,sp)
      00227B 6B 03            [ 1]  529 	ld (CPOS,sp),a
      00227D 90 AE 16 90      [ 2]  530     ldw y,#tib
      002281 72 5F 00 0C      [ 1]  531     clr acc16 
      002285 C7 00 0D         [ 1]  532     ld acc8,a 
      002288 72 B9 00 0C      [ 2]  533     addw y,acc16  
      00228C CC 21 61         [ 2]  534 	jp readln_loop 
      00228F A1 0F            [ 1]  535 10$: cp a,#CTRL_O
      002291 26 0C            [ 1]  536 	jrne 11$ 
                                    537 ; toggle between insert/overwrite
      002293 03 04            [ 1]  538 	cpl (OVRWR,sp)
      002295 90 89            [ 2]  539 	pushw y 
      002297 CD 12 C1         [ 4]  540 	call beep_1khz
      00229A 90 85            [ 2]  541 	popw y 
      00229C CC 21 61         [ 2]  542 	jp readln_loop 
      00229F A1 84            [ 1]  543 11$: cp a,#SUP 
      0022A1 26 11            [ 1]  544     jrne final_test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    545 ; del character under cursor 
      0022A3 7B 03            [ 1]  546     ld a,(CPOS,sp)
      0022A5 11 02            [ 1]  547     cp a,(LL,sp)
      0022A7 2A 08            [ 1]  548     jrpl 13$
      0022A9                        549 12$:
      0022A9 97               [ 1]  550     ld xl,a    ; cursor position 
      0022AA 7B 02            [ 1]  551     ld a,(LL,sp)  ; line length
      0022AC CD 21 0B         [ 4]  552     call delete_under
      0022AF 0A 02            [ 1]  553     dec (LLEN,sp)
      0022B1                        554 13$:
      0022B1 CC 21 61         [ 2]  555     jp readln_loop 
      0022B4                        556 final_test:
      0022B4 A1 20            [ 1]  557 	cp a,#SPACE
      0022B6 2A 03            [ 1]  558 	jrpl accept_char
      0022B8 CC 21 61         [ 2]  559 	jp readln_loop
      0022BB                        560 accept_char:
      0022BB A6 4F            [ 1]  561 	ld a,#TIB_SIZE-1
      0022BD 11 02            [ 1]  562 	cp a, (LL,sp)
      0022BF 2A 03            [ 1]  563 	jrpl 1$
      0022C1 CC 21 61         [ 2]  564 	jp readln_loop
      0022C4 0D 04            [ 1]  565 1$:	tnz (OVRWR,sp)
      0022C6 26 18            [ 1]  566 	jrne overwrite
                                    567 ; insert mode 
      0022C8 7B 03            [ 1]  568     ld a,(CPOS,sp)
      0022CA 11 02            [ 1]  569     cp a,(LL,sp)
      0022CC 27 12            [ 1]  570     jreq overwrite
      0022CE 7B 02            [ 1]  571     ld a,(LL,sp)
      0022D0 97               [ 1]  572     ld xl,a 
      0022D1 7B 03            [ 1]  573     ld a,(CPOS,sp)
      0022D3 95               [ 1]  574     ld xh,a
      0022D4 7B 01            [ 1]  575     ld a,(RXCHAR,sp)
      0022D6 CD 20 C8         [ 4]  576     call insert_char
      0022D9 0C 02            [ 1]  577     inc (LLEN,sp)
      0022DB 0C 03            [ 1]  578     inc (CPOS,sp)
      0022DD CC 21 61         [ 2]  579     jp readln_loop 
      0022E0                        580 overwrite:
      0022E0 7B 01            [ 1]  581 	ld a,(RXCHAR,sp)
      0022E2 90 F7            [ 1]  582 	ld (y),a
      0022E4 90 5C            [ 1]  583     incw y
      0022E6 CD 02 C1         [ 4]  584     call putc 
      0022E9 7B 03            [ 1]  585 	ld a,(CPOS,sp)
      0022EB 11 02            [ 1]  586 	cp a,(LL,sp)
      0022ED 2B 09            [ 1]  587 	jrmi 1$
      0022EF 90 7F            [ 1]  588 	clr (y)
      0022F1 0C 02            [ 1]  589 	inc (LL,sp)
      0022F3 0C 03            [ 1]  590     inc (CPOS,sp)
      0022F5 CC 21 61         [ 2]  591 	jp readln_loop 
      0022F8                        592 1$:	
      0022F8 0C 03            [ 1]  593 	inc (CPOS,sp)
      0022FA CC 21 61         [ 2]  594 	jp readln_loop 
      0022FD                        595 readln_quit:
      0022FD 90 AE 16 90      [ 2]  596 	ldw y,#tib
      002301 0F 01            [ 1]  597     clr (LL_HB,sp) 
      002303 72 F9 01         [ 2]  598     addw y,(LL_HB,sp)
      002306 90 7F            [ 1]  599     clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002308 7B 02            [ 1]  600 	ld a,(LL,sp)
      00230A C7 00 03         [ 1]  601 	ld count,a 
      00230D A6 0D            [ 1]  602 	ld a,#CR
      00230F CD 02 C1         [ 4]  603 	call putc
      002312                        604 	_drop VSIZE 
      002312 5B 04            [ 2]    1     addw sp,#VSIZE 
      002314 81               [ 4]  605 	ret
                                    606 
                                    607 ;------------------------------
                                    608 ; print byte  in hexadecimal 
                                    609 ; on console
                                    610 ; input:
                                    611 ;    A		byte to print
                                    612 ;------------------------------
      002315                        613 print_hex::
      002315 88               [ 1]  614 	push a 
      002316 4E               [ 1]  615 	swap a 
      002317 CD 23 2C         [ 4]  616 	call to_hex_char 
      00231A CD 02 C1         [ 4]  617 	call putc 
      00231D 7B 01            [ 1]  618     ld a,(1,sp) 
      00231F CD 23 2C         [ 4]  619 	call to_hex_char
      002322 CD 02 C1         [ 4]  620 	call putc
      002325 A6 20            [ 1]  621 	ld a,#SPACE 
      002327 CD 02 C1         [ 4]  622 	call putc 
      00232A 84               [ 1]  623 	pop a 
      00232B 81               [ 4]  624 	ret 
                                    625 
                                    626 ;----------------------------------
                                    627 ; convert to hexadecimal digit 
                                    628 ; input:
                                    629 ;   A       digit to convert 
                                    630 ; output:
                                    631 ;   A       hexdecimal character 
                                    632 ;----------------------------------
      00232C                        633 to_hex_char::
      00232C A4 0F            [ 1]  634 	and a,#15 
      00232E A1 09            [ 1]  635 	cp a,#9 
      002330 23 02            [ 2]  636 	jrule 1$ 
      002332 AB 07            [ 1]  637 	add a,#7
      002334 AB 30            [ 1]  638 1$: add a,#'0 
      002336 81               [ 4]  639 	ret 
                                    640 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
                                     26 ;    .nlist
                                     27 ;	.include "inc/nucleo_8s208.inc"
                                     28 ;	.include "inc/stm8s208.inc"
                                     29 ;	.include "inc/ascii.inc"
                                     30 ;	.include "inc/gen_macros.inc" 
                                     31 ;	.include "tbi_macros.inc" 
                                     32 ;	.include "cmd_index.inc"
                                     33     .list 
                                     34 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      002337                         51 search_lineno::
      002337                         52 	_vars VSIZE
      002337 52 02            [ 2]    1     sub sp,#VSIZE 
      002339 0F 01            [ 1]   53 	clr (LL,sp)
      00233B 90 CE 00 19      [ 2]   54 	ldw y,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00233F 4D               [ 1]   55 	tnz a 
      002340 27 04            [ 1]   56 	jreq search_ln_loop
      002342 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      002346                         58 search_ln_loop:
      002346 90 C3 00 1B      [ 2]   59 	cpw y,txtend 
      00234A 2A 10            [ 1]   60 	jrpl 8$
      00234C 90 F3            [ 1]   61 	cpw x,(y)
      00234E 27 0E            [ 1]   62 	jreq 9$
      002350 2B 0A            [ 1]   63 	jrmi 8$ 
      002352 90 E6 02         [ 1]   64 	ld a,(2,y)
      002355 6B 02            [ 1]   65 	ld (LB,sp),a 
      002357 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      00235A 20 EA            [ 2]   67 	jra search_ln_loop 
      00235C                         68 8$: 
      00235C 5F               [ 1]   69 	clrw x 	
      00235D 51               [ 1]   70 	exgw x,y 
      00235E                         71 9$: _drop VSIZE
      00235E 5B 02            [ 2]    1     addw sp,#VSIZE 
      002360 51               [ 1]   72 	exgw x,y   
      002361 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      002362                         83 del_line: 
      002362                         84 	_vars VSIZE 
      002362 52 04            [ 2]    1     sub sp,#VSIZE 
      002364 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      002366 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      002368 0F 01            [ 1]   87 	clr (LLEN,sp)
      00236A 90 93            [ 1]   88 	ldw y,x  
      00236C 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      00236F 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      002371 90 CE 00 1B      [ 2]   91 	ldw y,txtend 
      002375 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      002378 90 CF 00 0C      [ 2]   93 	ldw acc16,y 
      00237C 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      00237E CD 03 C5         [ 4]   95 	call move
      002381 90 CE 00 1B      [ 2]   96 	ldw y,txtend 
      002385 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      002388 90 CF 00 1B      [ 2]   98 	ldw txtend,y  
      00238C                         99 	_drop VSIZE     
      00238C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00238E 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      00238F                        115 create_gap:
      00238F                        116 	_vars VSIZE
      00238F 52 06            [ 2]    1     sub sp,#VSIZE 
      002391 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      002393 17 05            [ 2]  118 	ldw (LEN,sp),y 
      002395 90 CF 00 0C      [ 2]  119 	ldw acc16,y 
      002399 90 93            [ 1]  120 	ldw y,x ; SRC
      00239B 72 BB 00 0C      [ 2]  121 	addw x,acc16  
      00239F 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      0023A1 CE 00 1B         [ 2]  124 	ldw x,txtend 
      0023A4 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      0023A7 CF 00 0C         [ 2]  126 	ldw acc16,x ; size to move
      0023AA 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      0023AC CD 03 C5         [ 4]  128 	call move
      0023AF CE 00 1B         [ 2]  129 	ldw x,txtend
      0023B2 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      0023B5 CF 00 1B         [ 2]  131 	ldw txtend,x
      0023B8                        132 9$:	_drop VSIZE 
      0023B8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0023BA 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      0023BB                        150 insert_line:
      0023BB                        151 	_vars VSIZE 
      0023BB 52 08            [ 2]    1     sub sp,#VSIZE 
      0023BD CE 00 1B         [ 2]  152 	ldw x,txtend  
      0023C0 C3 00 19         [ 2]  153 	cpw x,txtbgn 
      0023C3 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      0023C5 AE 00 02         [ 2]  156 	ldw x,#2 
      0023C8 72 D6 00 17      [ 4]  157 	ld a,([ptr16],x)
      0023CC A1 03            [ 1]  158 	cp a,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0023CE 27 5A            [ 1]  159 	jreq insert_ln_exit
      0023D0 5F               [ 1]  160 	clrw x 
      0023D1 97               [ 1]  161 	ld xl,a
      0023D2 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      0023D4 CE 00 19         [ 2]  163 	ldw x,txtbgn
      0023D7 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      0023D9 CE 00 1B         [ 2]  165 	ldw x,txtend 
      0023DC 20 38            [ 2]  166 	jra 4$
      0023DE 72 CE 00 17      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      0023E2 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      0023E4 AE 00 02         [ 2]  170 	ldw x,#2 
      0023E7 72 D6 00 17      [ 4]  171 	ld a,([ptr16],x)
      0023EB 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      0023EC 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      0023EE 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      0023F0 4F               [ 1]  177 	clr a 
      0023F1 CD 23 37         [ 4]  178 	call search_lineno 
      0023F4 5D               [ 2]  179 	tnzw x 
      0023F5 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      0023F7 17 01            [ 2]  183 	ldw (DEST,sp),y 
      0023F9 20 05            [ 2]  184 	jra 3$
                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      0023FB 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      0023FD CD 23 62         [ 4]  188 	call del_line
      002400                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      002400 A6 03            [ 1]  192 	ld a,#3
      002402 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      002404 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      002406 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      002408 C3 00 1B         [ 2]  198 	cpw x,txtend 
      00240B 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      00240D 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      00240F 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      002411 CD 23 8F         [ 4]  204 	call create_gap
      002414 20 06            [ 2]  205 	jra 5$
      002416                        206 4$: 
      002416 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      002419 CF 00 1B         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      00241C 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      00241E CF 00 0C         [ 2]  211 	ldw acc16,x 
      002421 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      002425 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002427 CD 03 C5         [ 4]  214 	call move 
      00242A                        215 insert_ln_exit:	
      00242A                        216 	_drop VSIZE
      00242A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00242C 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      00242D                        233 parse_quote: 
      00242D                        234 	_vars VSIZE 
      00242D 52 02            [ 2]    1     sub sp,#VSIZE 
      00242F 4F               [ 1]  235 	clr a
      002430 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      002432                        237 2$:	
      002432 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      002435 27 24            [ 1]  239 	jreq 6$
      002437 72 5C 00 01      [ 1]  240 	inc in 
      00243B 6B 02            [ 1]  241 	ld (CURR,sp),a 
      00243D A6 5C            [ 1]  242 	ld a,#'\
      00243F 11 01            [ 1]  243 	cp a, (PREV,sp)
      002441 26 0A            [ 1]  244 	jrne 3$
      002443 0F 01            [ 1]  245 	clr (PREV,sp)
      002445 7B 02            [ 1]  246 	ld a,(CURR,sp)
      002447 AD 1C            [ 4]  247 	callr convert_escape
      002449 F7               [ 1]  248 	ld (x),a 
      00244A 5C               [ 1]  249 	incw x 
      00244B 20 E5            [ 2]  250 	jra 2$
      00244D                        251 3$:
      00244D 7B 02            [ 1]  252 	ld a,(CURR,sp)
      00244F A1 5C            [ 1]  253 	cp a,#'\'
      002451 27 DD            [ 1]  254 	jreq 1$
      002453 A1 22            [ 1]  255 	cp a,#'"
      002455 27 04            [ 1]  256 	jreq 6$ 
      002457 F7               [ 1]  257 	ld (x),a 
      002458 5C               [ 1]  258 	incw x 
      002459 20 D7            [ 2]  259 	jra 2$
      00245B                        260 6$:
      00245B 7F               [ 1]  261 	clr (x)
      00245C 5C               [ 1]  262 	incw x 
      00245D 90 93            [ 1]  263 	ldw y,x 
      00245F 5F               [ 1]  264 	clrw x 
      002460 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      002462                        266 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002462 5B 02            [ 2]    1     addw sp,#VSIZE 
      002464 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      002465                        278 convert_escape:
      002465 89               [ 2]  279 	pushw x 
      002466 AE 24 7A         [ 2]  280 	ldw x,#escaped 
      002469 F1               [ 1]  281 1$:	cp a,(x)
      00246A 27 06            [ 1]  282 	jreq 2$
      00246C 7D               [ 1]  283 	tnz (x)
      00246D 27 09            [ 1]  284 	jreq 3$
      00246F 5C               [ 1]  285 	incw x 
      002470 20 F7            [ 2]  286 	jra 1$
      002472 1D 24 7A         [ 2]  287 2$: subw x,#escaped 
      002475 9F               [ 1]  288 	ld a,xl 
      002476 AB 07            [ 1]  289 	add a,#7
      002478 85               [ 2]  290 3$:	popw x 
      002479 81               [ 4]  291 	ret 
                                    292 
      00247A 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      002482                        310 parse_integer: ; { -- n }
      002482 89               [ 2]  311 	pushw x 	
      002483 4B 00            [ 1]  312 	push #0 ; TCHAR
      002485 4B 0A            [ 1]  313 	push #10 ; BASE=10
      002487 A1 24            [ 1]  314 	cp a,#'$
      002489 26 04            [ 1]  315 	jrne 2$ 
      00248B                        316     _drop #1
      00248B 5B 01            [ 2]    1     addw sp,##1 
      00248D 4B 10            [ 1]  317 	push #16  ; BASE=16
      00248F F7               [ 1]  318 2$:	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002490 5C               [ 1]  319 	incw x 
      002491 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      002494 72 5C 00 01      [ 1]  321 	inc in 
      002498 CD 09 8A         [ 4]  322 	call to_upper 
      00249B 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      00249D CD 04 2E         [ 4]  324 	call is_digit 
      0024A0 25 ED            [ 1]  325 	jrc 2$
      0024A2 A6 10            [ 1]  326 	ld a,#16 
      0024A4 11 01            [ 1]  327 	cp a,(BASE,sp)
      0024A6 26 0A            [ 1]  328 	jrne 3$ 
      0024A8 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      0024AA A1 41            [ 1]  330 	cp a,#'A 
      0024AC 2B 04            [ 1]  331 	jrmi 3$ 
      0024AE A1 47            [ 1]  332 	cp a,#'G 
      0024B0 2B DD            [ 1]  333 	jrmi 2$ 
      0024B2 72 5A 00 01      [ 1]  334 3$: dec in 	
      0024B6 7F               [ 1]  335     clr (x)
      0024B7 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      0024B9 CD 09 96         [ 4]  337 	call atoi24
      0024BC 90 93            [ 1]  338 	ldw y,x 
      0024BE CE 00 0C         [ 2]  339 	ldw x,acc16 
      0024C1 A6 84            [ 1]  340 	ld a,#TK_INTGR
      0024C3 90 FF            [ 2]  341 	ldw (y),x 
      0024C5 72 A9 00 02      [ 2]  342 	addw y,#2
      0024C9                        343 	_drop VSIZE  
      0024C9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024CB 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      0024CC                        361 parse_binary: ; { -- n }
      0024CC 4B 00            [ 1]  362 	push #0
      0024CE 4B 00            [ 1]  363 	push #0
      0024D0 4B 00            [ 1]  364 	push #0
      0024D2                        365 2$:	
      0024D2 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      0024D5 72 5C 00 01      [ 1]  367 	inc in 
      0024D9 A1 30            [ 1]  368 	cp a,#'0 
      0024DB 27 06            [ 1]  369 	jreq 3$
      0024DD A1 31            [ 1]  370 	cp a,#'1 
      0024DF 27 02            [ 1]  371 	jreq 3$ 
      0024E1 20 0B            [ 2]  372 	jra bin_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0024E3 A0 30            [ 1]  373 3$: sub a,#'0 
      0024E5 46               [ 1]  374 	rrc a
      0024E6 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      0024E8 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      0024EA 09 01            [ 1]  377 	rlc (BINARY,sp) 
      0024EC 20 E4            [ 2]  378 	jra 2$  
      0024EE                        379 bin_exit:
      0024EE 72 5A 00 01      [ 1]  380 	dec in 
      0024F2 90 93            [ 1]  381 	ldw y,x
      0024F4 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      0024F6 C7 00 0B         [ 1]  383 	ld acc24,a 
      0024F9 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      0024FB CF 00 0C         [ 2]  385 	ldw acc16,x
      0024FE 90 FF            [ 2]  386 	ldw (y),x 
      002500 72 A9 00 02      [ 2]  387 	addw y,#2  
      002504 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      002506                        389 	_drop VSIZE 
      002506 5B 03            [ 2]    1     addw sp,#VSIZE 
      002508 81               [ 4]  390 	ret
                                    391 
                                    392 ;---------------------------
                                    393 ;  token begin with a letter,
                                    394 ;  is keyword or variable. 	
                                    395 ; input:
                                    396 ;   X 		point to pad 
                                    397 ;   Y 		point to text
                                    398 ;   A 	    first letter  
                                    399 ; output:
                                    400 ;   X		exec_addr|var_addr 
                                    401 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    402 ;   pad 	keyword|var_name  
                                    403 ;--------------------------  
                           000001   404 	XFIRST=1
                           000002   405 	VSIZE=2
      002509                        406 parse_keyword: 
      002509 89               [ 2]  407 	pushw x 
      00250A                        408 kw_loop:	
      00250A CD 09 8A         [ 4]  409 	call to_upper 
      00250D F7               [ 1]  410 	ld (x),a 
      00250E 5C               [ 1]  411 	incw x 
      00250F 91 D6 00         [ 4]  412 	ld a,([in.w],y)
      002512 72 5C 00 01      [ 1]  413 	inc in 
      002516 CD 04 1D         [ 4]  414 	call is_alpha 
      002519 25 EF            [ 1]  415 	jrc kw_loop
      00251B 72 5A 00 01      [ 1]  416 	dec in   
      00251F 7F               [ 1]  417 1$: clr (x)
      002520 1E 01            [ 2]  418 	ldw x,(XFIRST,sp) 
      002522 E6 01            [ 1]  419 	ld a,(1,x)
      002524 26 13            [ 1]  420 	jrne 2$
                                    421 ; one letter variable name 
      002526 F6               [ 1]  422 	ld a,(x) 
      002527 A0 41            [ 1]  423 	sub a,#'A 
      002529 48               [ 1]  424 	sll a 
      00252A 88               [ 1]  425 	push a 
      00252B 4B 00            [ 1]  426 	push #0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00252D AE 00 2C         [ 2]  427 	ldw x,#vars 
      002530 72 FB 01         [ 2]  428 	addw x,(1,sp) ; X=var address 
      002533                        429 	_drop 2 
      002533 5B 02            [ 2]    1     addw sp,#2 
      002535 A6 85            [ 1]  430 	ld a,#TK_VAR 
      002537 20 0E            [ 2]  431 	jra 4$ 
      002539                        432 2$: ; check for keyword, otherwise syntax error.
      002539                        433 	_ldx_dict kword_dict ; dictionary entry point
      002539 AE 1F 4F         [ 2]    1     ldw x,#kword_dict+2
      00253C 16 01            [ 2]  434 	ldw y,(XFIRST,sp) ; name to search for
      00253E CD 0B 7D         [ 4]  435 	call search_dict
      002541 4D               [ 1]  436 	tnz a
      002542 26 03            [ 1]  437 	jrne 4$ 
      002544 CC 07 41         [ 2]  438 	jp syntax_error
      002547                        439 4$:	
      002547 16 01            [ 2]  440 	ldw y,(XFIRST,sp)
      002549 A3 00 50         [ 2]  441 	cpw x,#LET_IDX 
      00254C 27 0A            [ 1]  442 	jreq 5$  ; don't compile LET command 
      00254E 90 F7            [ 1]  443 	ld (y),a 
      002550 90 5C            [ 1]  444 	incw y 
      002552 90 FF            [ 2]  445 	ldw (y),x
      002554 72 A9 00 02      [ 2]  446 	addw y,#2  
      002558                        447 5$:	_drop VSIZE 
      002558 5B 02            [ 2]    1     addw sp,#VSIZE 
      00255A 81               [ 4]  448 	ret  	
                                    449 
                                    450 ;------------------------------------
                                    451 ; skip character c in text starting from 'in'
                                    452 ; input:
                                    453 ;	 y 		point to text buffer
                                    454 ;    a 		character to skip
                                    455 ; output:  
                                    456 ;	'in' ajusted to new position
                                    457 ;------------------------------------
                           000001   458 	C = 1 ; local var
      00255B                        459 skip:
      00255B 88               [ 1]  460 	push a
      00255C 91 D6 00         [ 4]  461 1$:	ld a,([in.w],y)
      00255F 27 0A            [ 1]  462 	jreq 2$
      002561 11 01            [ 1]  463 	cp a,(C,sp)
      002563 26 06            [ 1]  464 	jrne 2$
      002565 72 5C 00 01      [ 1]  465 	inc in
      002569 20 F1            [ 2]  466 	jra 1$
      00256B                        467 2$: _drop 1 
      00256B 5B 01            [ 2]    1     addw sp,#1 
      00256D 81               [ 4]  468 	ret
                                    469 	
                                    470 
                                    471 ;------------------------------------
                                    472 ; scan text for next token
                                    473 ; input: 
                                    474 ;	X 		pointer to buffer where 
                                    475 ;	        token id and value are copied 
                                    476 ; use:
                                    477 ;	Y   pointer to text in tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    478 ; output:
                                    479 ;   A       token attribute 
                                    480 ;   X 		token value
                                    481 ;   Y       updated position in output buffer   
                                    482 ;------------------------------------
                                    483 	; use to check special character 
                                    484 	.macro _case c t  
                                    485 	ld a,#c 
                                    486 	cp a,(TCHAR,sp) 
                                    487 	jrne t
                                    488 	.endm 
                                    489 
                           000001   490 	TCHAR=1
                           000002   491 	ATTRIB=2
                           000002   492 	VSIZE=2
      00256E                        493 get_token:: 
      00256E                        494 	_vars VSIZE
      00256E 52 02            [ 2]    1     sub sp,#VSIZE 
                                    495 ;	ld a,in 
                                    496 ;	sub a,count
                                    497 ;   jrmi 0$
                                    498 ;	clr a 
                                    499 ;	ret 
      002570                        500 0$: 
      002570 90 AE 16 90      [ 2]  501 	ldw y,#tib    	
      002574 A6 20            [ 1]  502 	ld a,#SPACE
      002576 CD 25 5B         [ 4]  503 	call skip
      002579 55 00 01 00 02   [ 1]  504 	mov in.saved,in 
      00257E 91 D6 00         [ 4]  505 	ld a,([in.w],y)
      002581 26 05            [ 1]  506 	jrne 1$
      002583 90 93            [ 1]  507 	ldw y,x 
      002585 CC 27 2A         [ 2]  508 	jp token_exit ; end of line 
      002588 72 5C 00 01      [ 1]  509 1$:	inc in 
      00258C CD 09 8A         [ 4]  510 	call to_upper 
      00258F 6B 01            [ 1]  511 	ld (TCHAR,sp),a 
                                    512 ; check for quoted string
      002591                        513 str_tst:  	
      002591                        514 	_case '"' nbr_tst
      002591 A6 22            [ 1]    1 	ld a,#'"' 
      002593 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002595 26 0A            [ 1]    3 	jrne nbr_tst
      002597 A6 02            [ 1]  515 	ld a,#TK_QSTR
      002599 F7               [ 1]  516 	ld (x),a 
      00259A 5C               [ 1]  517 	incw x 
      00259B CD 24 2D         [ 4]  518 	call parse_quote
      00259E CC 27 2A         [ 2]  519 	jp token_exit
      0025A1                        520 nbr_tst:
                                    521 ; check for hexadecimal number 
      0025A1 A6 24            [ 1]  522 	ld a,#'$'
      0025A3 11 01            [ 1]  523 	cp a,(TCHAR,sp) 
      0025A5 27 17            [ 1]  524 	jreq 1$
                                    525 ;check for binary number 
      0025A7 A6 26            [ 1]  526 	ld a,#'&
      0025A9 11 01            [ 1]  527 	cp a,(TCHAR,sp)
      0025AB 26 0A            [ 1]  528 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0025AD A6 84            [ 1]  529 	ld a,#TK_INTGR
      0025AF F7               [ 1]  530 	ld (x),a 
      0025B0 5C               [ 1]  531 	incw x 
      0025B1 CD 24 CC         [ 4]  532 	call parse_binary ; expect binary integer 
      0025B4 CC 27 2A         [ 2]  533 	jp token_exit 
                                    534 ; check for decimal number 	
      0025B7 7B 01            [ 1]  535 0$:	ld a,(TCHAR,sp)
      0025B9 CD 04 2E         [ 4]  536 	call is_digit
      0025BC 24 0C            [ 1]  537 	jrnc 3$
      0025BE A6 84            [ 1]  538 1$:	ld a,#TK_INTGR 
      0025C0 F7               [ 1]  539 	ld (x),a 
      0025C1 5C               [ 1]  540 	incw x 
      0025C2 7B 01            [ 1]  541 	ld a,(TCHAR,sp)
      0025C4 CD 24 82         [ 4]  542 	call parse_integer 
      0025C7 CC 27 2A         [ 2]  543 	jp token_exit 
      0025CA                        544 3$: 
      0025CA                        545 	_case '(' bkslsh_tst 
      0025CA A6 28            [ 1]    1 	ld a,#'(' 
      0025CC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025CE 26 05            [ 1]    3 	jrne bkslsh_tst
      0025D0 A6 07            [ 1]  546 	ld a,#TK_LPAREN
      0025D2 CC 27 26         [ 2]  547 	jp token_char   	
      0025D5                        548 bkslsh_tst: ; character token 
      0025D5                        549 	_case '\',rparnt_tst
      0025D5 A6 5C            [ 1]    1 	ld a,#'\' 
      0025D7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025D9 26 16            [ 1]    3 	jrne rparnt_tst
      0025DB A6 03            [ 1]  550 	ld a,#TK_CHAR 
      0025DD F7               [ 1]  551 	ld (x),a 
      0025DE 5C               [ 1]  552 	incw x 
      0025DF 91 D6 00         [ 4]  553 	ld a,([in.w],y)
      0025E2 F7               [ 1]  554 	ld (x),a 
      0025E3 5C               [ 1]  555 	incw x
      0025E4 90 93            [ 1]  556 	ldw y,x 	 
      0025E6 72 5C 00 01      [ 1]  557 	inc in  
      0025EA 5F               [ 1]  558 	clrw x 
      0025EB 97               [ 1]  559 	ld xl,a 
      0025EC A6 03            [ 1]  560 	ld a,#TK_CHAR 
      0025EE CC 27 2A         [ 2]  561 	jp token_exit 
      0025F1                        562 rparnt_tst:		
      0025F1                        563 	_case ')' colon_tst 
      0025F1 A6 29            [ 1]    1 	ld a,#')' 
      0025F3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025F5 26 05            [ 1]    3 	jrne colon_tst
      0025F7 A6 08            [ 1]  564 	ld a,#TK_RPAREN 
      0025F9 CC 27 26         [ 2]  565 	jp token_char
      0025FC                        566 colon_tst:
      0025FC                        567 	_case ':' comma_tst 
      0025FC A6 3A            [ 1]    1 	ld a,#':' 
      0025FE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002600 26 05            [ 1]    3 	jrne comma_tst
      002602 A6 0B            [ 1]  568 	ld a,#TK_COLON 
      002604 CC 27 26         [ 2]  569 	jp token_char  
      002607                        570 comma_tst:
      002607                        571 	_case COMMA sharp_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      002607 A6 2C            [ 1]    1 	ld a,#COMMA 
      002609 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00260B 26 05            [ 1]    3 	jrne sharp_tst
      00260D A6 09            [ 1]  572 	ld a,#TK_COMMA
      00260F CC 27 26         [ 2]  573 	jp token_char
      002612                        574 sharp_tst:
      002612                        575 	_case SHARP dash_tst 
      002612 A6 23            [ 1]    1 	ld a,#SHARP 
      002614 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002616 26 05            [ 1]    3 	jrne dash_tst
      002618 A6 0A            [ 1]  576 	ld a,#TK_SHARP
      00261A CC 27 26         [ 2]  577 	jp token_char  	 	 
      00261D                        578 dash_tst: 	
      00261D                        579 	_case '-' at_tst 
      00261D A6 2D            [ 1]    1 	ld a,#'-' 
      00261F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002621 26 05            [ 1]    3 	jrne at_tst
      002623 A6 11            [ 1]  580 	ld a,#TK_MINUS  
      002625 CC 27 26         [ 2]  581 	jp token_char 
      002628                        582 at_tst:
      002628                        583 	_case '@' qmark_tst 
      002628 A6 40            [ 1]    1 	ld a,#'@' 
      00262A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00262C 26 05            [ 1]    3 	jrne qmark_tst
      00262E A6 06            [ 1]  584 	ld a,#TK_ARRAY 
      002630 CC 27 26         [ 2]  585 	jp token_char
      002633                        586 qmark_tst:
      002633                        587 	_case '?' tick_tst 
      002633 A6 3F            [ 1]    1 	ld a,#'?' 
      002635 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002637 26 12            [ 1]    3 	jrne tick_tst
      002639 A6 80            [ 1]  588 	ld a,#TK_CMD  
      00263B F7               [ 1]  589 	ld (x),a 
      00263C 5C               [ 1]  590 	incw x 
      00263D 90 93            [ 1]  591 	ldw y,x 
      00263F AE 00 72         [ 2]  592 	ldw x,#PRT_IDX 
      002642 90 FF            [ 2]  593 	ldw (y),x 
      002644 72 A9 00 02      [ 2]  594 	addw y,#2
      002648 CC 27 2A         [ 2]  595 	jp token_exit
      00264B                        596 tick_tst: ; comment 
      00264B                        597 	_case TICK plus_tst 
      00264B A6 27            [ 1]    1 	ld a,#TICK 
      00264D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00264F 26 35            [ 1]    3 	jrne plus_tst
      002651 A6 80            [ 1]  598 	ld a,#TK_CMD
      002653 F7               [ 1]  599 	ld (x),a 
      002654 5C               [ 1]  600 	incw x
      002655 90 AE 00 8C      [ 2]  601 	ldw y,#REM_IDX
      002659 FF               [ 2]  602 	ldw (x),y 
      00265A 1C 00 02         [ 2]  603 	addw x,#2  
      00265D                        604 copy_comment:
      00265D 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      002661 72 B9 00 00      [ 2]  606 	addw y,in.w
      002665 90 89            [ 2]  607 	pushw y
      002667 CD 03 B5         [ 4]  608 	call strcpy
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      00266A 72 F2 01         [ 2]  609     subw y,(1,sp)
      00266D 90 9F            [ 1]  610 	ld a,yl 
      00266F CB 00 01         [ 1]  611 	add a,in
      002672 C7 00 01         [ 1]  612 	ld in,a 
      002675 1F 01            [ 2]  613 	ldw (1,sp),x
      002677 72 F9 01         [ 2]  614 	addw y,(1,sp)
      00267A 90 5C            [ 1]  615 	incw y 
      00267C                        616 	_drop 2 
      00267C 5B 02            [ 2]    1     addw sp,#2 
      00267E AE 00 8C         [ 2]  617 	ldw x,#REM_IDX 
      002681 A6 80            [ 1]  618 	ld a,#TK_CMD 
      002683 CC 27 2A         [ 2]  619 	jp token_exit 
      002686                        620 plus_tst:
      002686                        621 	_case '+' star_tst 
      002686 A6 2B            [ 1]    1 	ld a,#'+' 
      002688 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00268A 26 05            [ 1]    3 	jrne star_tst
      00268C A6 10            [ 1]  622 	ld a,#TK_PLUS  
      00268E CC 27 26         [ 2]  623 	jp token_char 
      002691                        624 star_tst:
      002691                        625 	_case '*' slash_tst 
      002691 A6 2A            [ 1]    1 	ld a,#'*' 
      002693 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002695 26 05            [ 1]    3 	jrne slash_tst
      002697 A6 20            [ 1]  626 	ld a,#TK_MULT 
      002699 CC 27 26         [ 2]  627 	jp token_char 
      00269C                        628 slash_tst: 
      00269C                        629 	_case '/' prcnt_tst 
      00269C A6 2F            [ 1]    1 	ld a,#'/' 
      00269E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026A0 26 05            [ 1]    3 	jrne prcnt_tst
      0026A2 A6 21            [ 1]  630 	ld a,#TK_DIV 
      0026A4 CC 27 26         [ 2]  631 	jp token_char 
      0026A7                        632 prcnt_tst:
      0026A7                        633 	_case '%' eql_tst 
      0026A7 A6 25            [ 1]    1 	ld a,#'%' 
      0026A9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026AB 26 05            [ 1]    3 	jrne eql_tst
      0026AD A6 22            [ 1]  634 	ld a,#TK_MOD
      0026AF CC 27 26         [ 2]  635 	jp token_char  
                                    636 ; 1 or 2 character tokens 	
      0026B2                        637 eql_tst:
      0026B2                        638 	_case '=' gt_tst 		
      0026B2 A6 3D            [ 1]    1 	ld a,#'=' 
      0026B4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026B6 26 05            [ 1]    3 	jrne gt_tst
      0026B8 A6 32            [ 1]  639 	ld a,#TK_EQUAL
      0026BA CC 27 26         [ 2]  640 	jp token_char 
      0026BD                        641 gt_tst:
      0026BD                        642 	_case '>' lt_tst 
      0026BD A6 3E            [ 1]    1 	ld a,#'>' 
      0026BF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026C1 26 23            [ 1]    3 	jrne lt_tst
      0026C3 A6 31            [ 1]  643 	ld a,#TK_GT 
      0026C5 6B 02            [ 1]  644 	ld (ATTRIB,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0026C7 91 D6 00         [ 4]  645 	ld a,([in.w],y)
      0026CA 72 5C 00 01      [ 1]  646 	inc in 
      0026CE A1 3D            [ 1]  647 	cp a,#'=
      0026D0 26 04            [ 1]  648 	jrne 1$
      0026D2 A6 33            [ 1]  649 	ld a,#TK_GE 
      0026D4 20 50            [ 2]  650 	jra token_char  
      0026D6 A1 3C            [ 1]  651 1$: cp a,#'<
      0026D8 26 04            [ 1]  652 	jrne 2$
      0026DA A6 35            [ 1]  653 	ld a,#TK_NE 
      0026DC 20 48            [ 2]  654 	jra token_char 
      0026DE 72 5A 00 01      [ 1]  655 2$: dec in
      0026E2 7B 02            [ 1]  656 	ld a,(ATTRIB,sp)
      0026E4 20 40            [ 2]  657 	jra token_char 	 
      0026E6                        658 lt_tst:
      0026E6                        659 	_case '<' other
      0026E6 A6 3C            [ 1]    1 	ld a,#'<' 
      0026E8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0026EA 26 23            [ 1]    3 	jrne other
      0026EC A6 34            [ 1]  660 	ld a,#TK_LT 
      0026EE 6B 02            [ 1]  661 	ld (ATTRIB,sp),a 
      0026F0 91 D6 00         [ 4]  662 	ld a,([in.w],y)
      0026F3 72 5C 00 01      [ 1]  663 	inc in 
      0026F7 A1 3D            [ 1]  664 	cp a,#'=
      0026F9 26 04            [ 1]  665 	jrne 1$
      0026FB A6 36            [ 1]  666 	ld a,#TK_LE 
      0026FD 20 27            [ 2]  667 	jra token_char 
      0026FF A1 3E            [ 1]  668 1$: cp a,#'>
      002701 26 04            [ 1]  669 	jrne 2$
      002703 A6 35            [ 1]  670 	ld a,#TK_NE 
      002705 20 1F            [ 2]  671 	jra token_char 
      002707 72 5A 00 01      [ 1]  672 2$: dec in 
      00270B 7B 02            [ 1]  673 	ld a,(ATTRIB,sp)
      00270D 20 17            [ 2]  674 	jra token_char 	
      00270F                        675 other: ; not a special character 	 
      00270F 7B 01            [ 1]  676 	ld a,(TCHAR,sp)
      002711 CD 04 1D         [ 4]  677 	call is_alpha 
      002714 25 03            [ 1]  678 	jrc 30$ 
      002716 CC 07 41         [ 2]  679 	jp syntax_error 
      002719                        680 30$: 
      002719 CD 25 09         [ 4]  681 	call parse_keyword
      00271C A3 10 61         [ 2]  682 	cpw x,#remark 
      00271F 26 09            [ 1]  683 	jrne token_exit 
      002721 90 93            [ 1]  684 	ldw y,x 
      002723 CC 26 5D         [ 2]  685 	jp copy_comment 
      002726                        686 token_char:
      002726 F7               [ 1]  687 	ld (x),a 
      002727 5C               [ 1]  688 	incw x
      002728 90 93            [ 1]  689 	ldw y,x 
      00272A                        690 token_exit:
      00272A                        691 	_drop VSIZE 
      00272A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00272C 81               [ 4]  692 	ret
                                    693 
                                    694 
                                    695 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    696 ; create token list fromm text line 
                                    697 ; save this list in pad buffer 
                                    698 ;  compiled line format: 
                                    699 ;    line_no  2 bytes {0...32767}
                                    700 ;    count    1 byte  
                                    701 ;    tokens   variable length 
                                    702 ;   
                                    703 ; input:
                                    704 ;   none
                                    705 ; modified variables:
                                    706 ;   basicptr     token list buffer address 
                                    707 ;   in.w  		 3|count, i.e. index in buffer
                                    708 ;   count        length of line | 0  
                                    709 ;-----------------------------------
                           000001   710 	XSAVE=1
                           000002   711 	VSIZE=2
      00272D                        712 compile::
      00272D                        713 	_vars VSIZE 
      00272D 52 02            [ 2]    1     sub sp,#VSIZE 
      00272F 55 00 19 00 04   [ 1]  714 	mov basicptr,txtbgn
      002734 72 1A 00 20      [ 1]  715 	bset flags,#FCOMP 
      002738 A6 00            [ 1]  716 	ld a,#0
      00273A AE 00 00         [ 2]  717 	ldw x,#0
      00273D CF 16 E0         [ 2]  718 	ldw pad,x ; destination buffer 
      002740 C7 16 E2         [ 1]  719 	ld pad+2,a ; count 
      002743 AE 16 E3         [ 2]  720 	ldw x,#pad+3
      002746 72 5F 00 01      [ 1]  721 	clr in 
      00274A CD 25 6E         [ 4]  722 	call get_token
      00274D A1 84            [ 1]  723 	cp a,#TK_INTGR
      00274F 26 11            [ 1]  724 	jrne 2$
      002751 A3 00 01         [ 2]  725 	cpw x,#1 
      002754 2A 05            [ 1]  726 	jrpl 1$
      002756 A6 0A            [ 1]  727 	ld a,#ERR_BAD_VALUE
      002758 CC 07 43         [ 2]  728 	jp tb_error
      00275B CF 16 E0         [ 2]  729 1$:	ldw pad,x 
      00275E 90 AE 16 E3      [ 2]  730 	ldw y,#pad+3 
      002762 90 A3 17 60      [ 2]  731 2$:	cpw y,#stack_full 
      002766 25 05            [ 1]  732 	jrult 3$
      002768 A6 0F            [ 1]  733 	ld a,#ERR_BUF_FULL 
      00276A CC 07 43         [ 2]  734 	jp tb_error 
      00276D                        735 3$:	
      00276D 93               [ 1]  736 	ldw x,y 
      00276E CD 25 6E         [ 4]  737 	call get_token 
      002771 A1 00            [ 1]  738 	cp a,#TK_NONE 
      002773 26 ED            [ 1]  739 	jrne 2$ 
                                    740 ; compilation completed  
      002775 72 A2 16 E0      [ 2]  741 	subw y,#pad
      002779 90 9F            [ 1]  742     ld a,yl
      00277B AE 16 E0         [ 2]  743 	ldw x,#pad 
      00277E CF 00 17         [ 2]  744 	ldw ptr16,x 
      002781 E7 02            [ 1]  745 	ld (2,x),a 
      002783 FE               [ 2]  746 	ldw x,(x)
      002784 27 09            [ 1]  747 	jreq 10$
      002786 CD 23 BB         [ 4]  748 	call insert_line
      002789 72 5F 00 03      [ 1]  749 	clr  count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00278D 20 0F            [ 2]  750 	jra  11$ 
      00278F                        751 10$: ; line# is zero 
      00278F CE 00 17         [ 2]  752 	ldw x,ptr16  
      002792 CF 00 04         [ 2]  753 	ldw basicptr,x 
      002795 E6 02            [ 1]  754 	ld a,(2,x)
      002797 C7 00 03         [ 1]  755 	ld count,a 
      00279A 35 03 00 01      [ 1]  756 	mov in,#3 
      00279E                        757 11$:
      00279E                        758 	_drop VSIZE 
      00279E 5B 02            [ 2]    1     addw sp,#VSIZE 
      0027A0 72 1B 00 20      [ 1]  759 	bres flags,#FCOMP 
      0027A4 81               [ 4]  760 	ret 
                                    761 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
                                     27 ;    .nlist
                                     28 ;	.include "inc/nucleo_8s208.inc"
                                     29 ;	.include "inc/stm8s208.inc"
                                     30 ;	.include "inc/ascii.inc"
                                     31 ;	.include "inc/gen_macros.inc" 
                                     32 ;	.include "tbi_macros.inc" 
                                     33 ;	.include "cmd_index.inc"
                                     34     .list 
                                     35 
                                     36 
                                     37     .area  CODE 
                                     38 
                                     39 ;-------------------------
                                     40 ; copy command name to buffer  
                                     41 ; input:
                                     42 ;   X 	name address 
                                     43 ;   Y   destination buffer 
                                     44 ; output:
                                     45 ;   Y   point after name  
                                     46 ;--------------------------
      0027A5                         47 cpy_cmd_name:
      0027A5 F6               [ 1]   48 	ld a,(x)
      0027A6 5C               [ 1]   49 	incw x
      0027A7 A4 0F            [ 1]   50 	and a,#15  
      0027A9 88               [ 1]   51 	push a 
      0027AA 0D 01            [ 1]   52     tnz (1,sp) 
      0027AC 27 0A            [ 1]   53 	jreq 9$
      0027AE F6               [ 1]   54 1$:	ld a,(x)
      0027AF 90 F7            [ 1]   55 	ld (y),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0027B1 5C               [ 1]   56 	incw x
      0027B2 90 5C            [ 1]   57 	incw y 
      0027B4 0A 01            [ 1]   58 	dec (1,sp)	 
      0027B6 26 F6            [ 1]   59 	jrne 1$
      0027B8 84               [ 1]   60 9$: pop a 
      0027B9 81               [ 4]   61 	ret	
                                     62 
                                     63 ;--------------------------
                                     64 ; add a space after letter or 
                                     65 ; digit.
                                     66 ; input:
                                     67 ;   Y     pointer to buffer 
                                     68 ; output:
                                     69 ;   Y    moved to end 
                                     70 ;--------------------------
      0027BA                         71 add_space:
      0027BA 90 5A            [ 2]   72 	decw y 
      0027BC 90 F6            [ 1]   73 	ld a,(y)
      0027BE 90 5C            [ 1]   74 	incw y
      0027C0 CD 04 37         [ 4]   75 	call is_alnum 
      0027C3 24 06            [ 1]   76 	jrnc 1$
      0027C5 A6 20            [ 1]   77 	ld a,#SPACE 
      0027C7 90 F7            [ 1]   78 	ld (y),a 
      0027C9 90 5C            [ 1]   79 	incw y 
      0027CB 81               [ 4]   80 1$: ret 
                                     81 
                                     82 ;--------------------------
                                     83 ;  align text in buffer 
                                     84 ;  to tab_width padding 
                                     85 ;  left with  SPACE 
                                     86 ; input:
                                     87 ;   X      str*
                                     88 ;   A      str_length 
                                     89 ; output:
                                     90 ;   X      ajusted
                                     91 ;--------------------------
      0027CC                         92 right_align::
      0027CC 88               [ 1]   93 	push a 
      0027CD 7B 01            [ 1]   94 0$: ld a,(1,sp)
      0027CF C1 00 21         [ 1]   95 	cp a,tab_width 
      0027D2 2A 08            [ 1]   96 	jrpl 1$
      0027D4 A6 20            [ 1]   97 	ld a,#SPACE 
      0027D6 5A               [ 2]   98 	decw x
      0027D7 F7               [ 1]   99 	ld (x),a  
      0027D8 0C 01            [ 1]  100 	inc (1,sp)
      0027DA 20 F1            [ 2]  101 	jra 0$ 
      0027DC 84               [ 1]  102 1$: pop a 	
      0027DD 81               [ 4]  103 	ret 
                                    104 
                                    105 ;--------------------------
                                    106 ; print TK_QSTR
                                    107 ; converting control character
                                    108 ; to backslash sequence
                                    109 ; input:
                                    110 ;   X        char *
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                    111 ;   Y        dest. buffer 
                                    112 ; output:
                                    113 ;   X        moved forward 
                                    114 ;   Y        moved forward 
                                    115 ;-----------------------------
      0027DE                        116 cpy_quote:
      0027DE A6 22            [ 1]  117 	ld a,#'"
      0027E0 90 F7            [ 1]  118 	ld (y),a 
      0027E2 90 5C            [ 1]  119 	incw y 
      0027E4 F6               [ 1]  120 1$:	ld a,(x)
      0027E5 27 30            [ 1]  121 	jreq 9$
      0027E7 5C               [ 1]  122 	incw x 
      0027E8 A1 20            [ 1]  123 	cp a,#SPACE 
      0027EA 25 0E            [ 1]  124 	jrult 3$
      0027EC 90 F7            [ 1]  125 	ld (y),a
      0027EE 90 5C            [ 1]  126 	incw y 
      0027F0 A1 5C            [ 1]  127 	cp a,#'\ 
      0027F2 26 F0            [ 1]  128 	jrne 1$ 
      0027F4                        129 2$:
      0027F4 90 F7            [ 1]  130 	ld (y),a
      0027F6 90 5C            [ 1]  131 	incw y  
      0027F8 20 EA            [ 2]  132 	jra 1$
      0027FA 88               [ 1]  133 3$: push a 
      0027FB A6 5C            [ 1]  134 	ld a,#'\
      0027FD 90 F7            [ 1]  135 	ld (y),a 
      0027FF 90 5C            [ 1]  136 	incw y  
      002801 84               [ 1]  137 	pop a 
      002802 A0 07            [ 1]  138 	sub a,#7
      002804 C7 00 0D         [ 1]  139 	ld acc8,a 
      002807 72 5F 00 0C      [ 1]  140 	clr acc16
      00280B 89               [ 2]  141 	pushw x
      00280C AE 24 7A         [ 2]  142 	ldw x,#escaped 
      00280F 72 BB 00 0C      [ 2]  143 	addw x,acc16 
      002813 F6               [ 1]  144 	ld a,(x)
      002814 85               [ 2]  145 	popw x
      002815 20 DD            [ 2]  146 	jra 2$
      002817 A6 22            [ 1]  147 9$: ld a,#'"
      002819 90 F7            [ 1]  148 	ld (y),a 
      00281B 90 5C            [ 1]  149 	incw y  
      00281D 5C               [ 1]  150 	incw x 
      00281E 81               [ 4]  151 	ret
                                    152 
                                    153 ;--------------------------
                                    154 ; return variable name 
                                    155 ; from its address.
                                    156 ; input:
                                    157 ;   X    variable address
                                    158 ; output:
                                    159 ;   A     variable letter
                                    160 ;--------------------------
      00281F                        161 var_name::
      00281F 1D 00 2C         [ 2]  162 		subw x,#vars 
      002822 9F               [ 1]  163 		ld a,xl 
      002823 44               [ 1]  164 		srl a 
      002824 AB 41            [ 1]  165 		add a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      002826 81               [ 4]  166 		ret 
                                    167 
                                    168 ;-----------------------------
                                    169 ; return cmd  idx from its 
                                    170 ; code address 
                                    171 ; input:
                                    172 ;   X      code address 
                                    173 ; output:
                                    174 ;   X      cmd_idx
                                    175 ;-----------------------------
      002827                        176 get_cmd_idx:
      002827 90 89            [ 2]  177 	pushw y
      002829 90 AE 1F 55      [ 2]  178 	ldw y,#code_addr 
      00282D 90 CF 00 17      [ 2]  179 	ldw ptr16,y 
      002831 90 5F            [ 1]  180 	clrw y 
      002833 91 D3 17         [ 5]  181 1$:	cpw x,([ptr16],y)
      002836 27 0C            [ 1]  182 	jreq 3$ 
      002838 90 5C            [ 1]  183 	incw y 
      00283A 91 D6 17         [ 4]  184 	ld a,([ptr16],y)
      00283D 90 5C            [ 1]  185 	incw y
      00283F 91 DA 17         [ 4]  186 	or a,([ptr16],y)	
      002842 26 EF            [ 1]  187 	jrne 1$
      002844 93               [ 1]  188 3$: ldw x,y 
      002845 90 85            [ 2]  189 	popw y 
      002847 81               [ 4]  190 	ret
                                    191 
                                    192 ;-------------------------------------
                                    193 ; decompile tokens list 
                                    194 ; to original text line 
                                    195 ; input:
                                    196 ;   [basicptr]  pointer at line 
                                    197 ;   Y           destination buffer
                                    198 ; output:
                                    199 ;   A           length 
                                    200 ;   Y           after string  
                                    201 ;------------------------------------
                           000001   202 	BASE_SAV=1
                           000002   203 	WIDTH_SAV=2
                           000003   204 	STR=3
                           000004   205 	VSIZE=4 
      002848                        206 decompile::
      002848                        207 	_vars VSIZE
      002848 52 04            [ 2]    1     sub sp,#VSIZE 
      00284A C6 00 0A         [ 1]  208 	ld a,base
      00284D 6B 01            [ 1]  209 	ld (BASE_SAV,sp),a  
      00284F C6 00 21         [ 1]  210 	ld a,tab_width 
      002852 6B 02            [ 1]  211 	ld (WIDTH_SAV,sp),a 
      002854 17 03            [ 2]  212 	ldw (STR,sp),y   
      002856 72 CE 00 04      [ 5]  213 	ldw x,[basicptr] ; line number 
      00285A 35 0A 00 0A      [ 1]  214 	mov base,#10
      00285E 35 05 00 21      [ 1]  215 	mov tab_width,#5
      002862 72 5F 00 0B      [ 1]  216 	clr acc24 
      002866 CF 00 0C         [ 2]  217 	ldw acc16,x
      002869 CD 08 9A         [ 4]  218 	call itoa  
      00286C CD 27 CC         [ 4]  219 	call right_align 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      00286F 88               [ 1]  220 	push a 
      002870 90 93            [ 1]  221 1$:	ldw y,x ; source
      002872 1E 04            [ 2]  222 	ldw x,(STR+1,sp) ; destination
      002874 CD 03 B5         [ 4]  223 	call strcpy 
      002877 90 5F            [ 1]  224 	clrw y 
      002879 84               [ 1]  225 	pop a 
      00287A 90 97            [ 1]  226 	ld yl,a 
      00287C 72 F9 03         [ 2]  227 	addw y,(STR,sp)
      00287F A6 20            [ 1]  228 	ld a,#SPACE 
      002881 90 F7            [ 1]  229 	ld (y),a 
      002883 90 5C            [ 1]  230 	incw y 
      002885 72 5F 00 21      [ 1]  231 	clr tab_width
      002889 AE 00 03         [ 2]  232 	ldw x,#3
      00288C CF 00 00         [ 2]  233 	ldw in.w,x 
      00288F                        234 decomp_loop:
      00288F 90 89            [ 2]  235 	pushw y
      002891 CD 08 30         [ 4]  236 	call next_token 
      002894 90 85            [ 2]  237 	popw y 
      002896 4D               [ 1]  238 	tnz a  
      002897 26 03            [ 1]  239 	jrne 1$
      002899 CC 29 7B         [ 2]  240 	jp 20$
      00289C 2A 75            [ 1]  241 1$:	jrpl 6$
                                    242 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      00289E A1 85            [ 1]  243 	cp a,#TK_VAR 
      0028A0 26 0C            [ 1]  244 	jrne 3$
                                    245 ;; TK_VAR 
      0028A2 CD 27 BA         [ 4]  246 	call add_space  
      0028A5 CD 28 1F         [ 4]  247 	call var_name
      0028A8 90 F7            [ 1]  248 	ld (y),a 
      0028AA 90 5C            [ 1]  249 	incw y  
      0028AC 20 E1            [ 2]  250 	jra decomp_loop
      0028AE                        251 3$:
      0028AE A1 84            [ 1]  252 	cp a,#TK_INTGR
      0028B0 26 22            [ 1]  253 	jrne 4$
                                    254 ;; TK_INTGR
      0028B2 CD 27 BA         [ 4]  255 	call add_space
      0028B5 72 5F 00 0B      [ 1]  256 	clr acc24 
      0028B9 CF 00 0C         [ 2]  257 	ldw acc16,x 
      0028BC 90 89            [ 2]  258 	pushw y 
      0028BE CD 08 9A         [ 4]  259 	call itoa  
      0028C1 16 01            [ 2]  260 	ldw y,(1,sp) 
      0028C3 88               [ 1]  261 	push a 
      0028C4 51               [ 1]  262 	exgw x,y 
      0028C5 CD 03 B5         [ 4]  263 	call strcpy 
      0028C8 90 5F            [ 1]  264 	clrw y
      0028CA 84               [ 1]  265 	pop a  
      0028CB 90 97            [ 1]  266 	ld yl,a 
      0028CD 72 F9 01         [ 2]  267 	addw y,(1,sp)
      0028D0                        268 	_drop 2 
      0028D0 5B 02            [ 2]    1     addw sp,#2 
      0028D2 20 BB            [ 2]  269 	jra decomp_loop
                                    270 ;; dictionary keyword 
      0028D4                        271 4$:	
      0028D4 CD 28 27         [ 4]  272 	call get_cmd_idx 
      0028D7 A3 00 8C         [ 2]  273 	cpw x,#REM_IDX
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0028DA 26 22            [ 1]  274 	jrne 5$
      0028DC CE 00 04         [ 2]  275 	ldw x,basicptr 
                                    276 ; copy comment to buffer 
      0028DF CD 27 BA         [ 4]  277 	call add_space
      0028E2 A6 27            [ 1]  278 	ld a,#''
      0028E4 90 F7            [ 1]  279 	ld (y),a 
      0028E6 90 5C            [ 1]  280 	incw y 
      0028E8                        281 41$:
      0028E8 72 D6 00 00      [ 4]  282 	ld a,([in.w],x)
      0028EC 72 5C 00 01      [ 1]  283 	inc in  
      0028F0 90 F7            [ 1]  284 	ld (y),a 
      0028F2 90 5C            [ 1]  285 	incw y 
      0028F4 C6 00 01         [ 1]  286 	ld a,in 
      0028F7 C1 00 03         [ 1]  287 	cp a,count 
      0028FA 2B EC            [ 1]  288 	jrmi 41$
      0028FC 20 7D            [ 2]  289 	jra 20$  
      0028FE A3 00 50         [ 2]  290 5$: cpw x,#LET_IDX 
      002901 27 8C            [ 1]  291 	jreq decomp_loop ; down display LET 	
                                    292 ; insert command name 
      002903 CD 27 BA         [ 4]  293 	call add_space  
      002906 90 89            [ 2]  294 	pushw y
      002908 CD 29 B6         [ 4]  295 	call cmd_name
      00290B 90 85            [ 2]  296 	popw y 
      00290D CD 27 A5         [ 4]  297 	call cpy_cmd_name
      002910 CC 28 8F         [ 2]  298 	jp decomp_loop 
      002913                        299 6$:
      002913 A1 02            [ 1]  300 	cp a,#TK_QSTR 
      002915 26 06            [ 1]  301 	jrne 7$
                                    302 ;; TK_QSTR
      002917 CD 27 DE         [ 4]  303 	call cpy_quote  
      00291A CC 28 8F         [ 2]  304 	jp decomp_loop
      00291D                        305 7$:
      00291D A1 03            [ 1]  306 	cp a,#TK_CHAR 
      00291F 26 0E            [ 1]  307 	jrne 8$
                                    308 ;; TK_CHAR 
      002921 A6 5C            [ 1]  309 	ld a,#'\ 
      002923 90 F7            [ 1]  310 	ld (y),a 
      002925 90 5C            [ 1]  311 	incw y 
      002927 9F               [ 1]  312 	ld a,xl 
      002928 90 F7            [ 1]  313 	ld (y),a 
      00292A 90 5C            [ 1]  314 	incw y 
      00292C CC 28 8F         [ 2]  315 	jp decomp_loop
      00292F A1 0B            [ 1]  316 8$: cp a,#TK_COLON 
      002931 26 09            [ 1]  317 	jrne 9$
      002933 A6 3A            [ 1]  318 	ld a,#':
      002935                        319 81$:
      002935 90 F7            [ 1]  320 	ld (y),a 
      002937 90 5C            [ 1]  321 	incw y 
      002939                        322 82$:
      002939 CC 28 8F         [ 2]  323 	jp decomp_loop
      00293C                        324 9$: 
      00293C A1 0A            [ 1]  325 	cp a,#TK_SHARP
      00293E 22 0A            [ 1]  326 	jrugt 10$ 
      002940 A0 06            [ 1]  327 	sub a,#TK_ARRAY 
      002942 5F               [ 1]  328 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      002943 97               [ 1]  329 	ld xl,a
      002944 1C 29 91         [ 2]  330 	addw x,#single_char 
      002947 F6               [ 1]  331 	ld a,(x)
      002948 20 EB            [ 2]  332 	jra 81$ 
      00294A                        333 10$: 
      00294A A1 11            [ 1]  334 	cp a,#TK_MINUS 
      00294C 22 0A            [ 1]  335 	jrugt 11$
      00294E A0 10            [ 1]  336 	sub a,#TK_PLUS 
      002950 5F               [ 1]  337 	clrw x 
      002951 97               [ 1]  338 	ld xl,a 
      002952 1C 29 96         [ 2]  339 	addw x,#add_char 
      002955 F6               [ 1]  340 	ld a,(x)
      002956 20 DD            [ 2]  341 	jra 81$
      002958                        342 11$:
      002958 A1 22            [ 1]  343     cp a,#TK_MOD 
      00295A 22 0A            [ 1]  344 	jrugt 12$
      00295C A0 20            [ 1]  345 	sub a,#TK_MULT
      00295E 5F               [ 1]  346 	clrw x 
      00295F 97               [ 1]  347 	ld xl,a 
      002960 1C 29 98         [ 2]  348 	addw x,#mul_char
      002963 F6               [ 1]  349 	ld a,(x)
      002964 20 CF            [ 2]  350 	jra 81$
      002966                        351 12$:
      002966 A0 31            [ 1]  352 	sub a,#TK_GT  
      002968 48               [ 1]  353 	sll a 
      002969 5F               [ 1]  354 	clrw x 
      00296A 97               [ 1]  355 	ld xl,a 
      00296B 1C 29 9B         [ 2]  356 	addw x,#relop_str 
      00296E FE               [ 2]  357 	ldw x,(x)
      00296F F6               [ 1]  358 	ld a,(x)
      002970 5C               [ 1]  359 	incw x 
      002971 90 F7            [ 1]  360 	ld (y),a
      002973 90 5C            [ 1]  361 	incw y 
      002975 F6               [ 1]  362 	ld a,(x)
      002976 26 BD            [ 1]  363 	jrne 81$
      002978 CC 28 8F         [ 2]  364 	jp decomp_loop 
      00297B                        365 20$: 
      00297B 90 7F            [ 1]  366 	clr (y)
      00297D 1E 03            [ 2]  367 	ldw x,(STR,sp)
      00297F 7B 01            [ 1]  368 	ld a,(BASE_SAV,sp)
      002981 C7 00 0A         [ 1]  369 	ld base,a 
      002984 7B 02            [ 1]  370 	ld a,(WIDTH_SAV,sp)
      002986 C7 00 21         [ 1]  371 	ld tab_width,a
      002989 72 F2 03         [ 2]  372 	subw y,(STR,sp) 
      00298C 90 9F            [ 1]  373 	ld a,yl 
      00298E                        374 	_drop VSIZE 
      00298E 5B 04            [ 2]    1     addw sp,#VSIZE 
      002990 81               [ 4]  375 	ret 
                                    376 
      002991 40 28 29 2C 23         377 single_char: .byte '@','(',')',',','#'
      002996 2B 2D                  378 add_char: .byte '+','-'
      002998 2A 2F 25               379 mul_char: .byte '*','/','%'
      00299B 29 A7 29 A9 29 AB 29   380 relop_str: .word gt,equal,ge,lt,le,ne 
             AE 29 B0 29 B3
      0029A7 3E 00                  381 gt: .asciz ">"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      0029A9 3D 00                  382 equal: .asciz "="
      0029AB 3E 3D 00               383 ge: .asciz ">="
      0029AE 3C 00                  384 lt: .asciz "<"
      0029B0 3C 3D 00               385 le: .asciz "<="
      0029B3 3C 3E 00               386 ne:  .asciz "<>"
                                    387 
                                    388 ;----------------------------------
                                    389 ; search in kword_dict name
                                    390 ; from its execution address 
                                    391 ; input:
                                    392 ;   X       	cmd_index 
                                    393 ; output:
                                    394 ;   X 			cstr*  | 0 
                                    395 ;--------------------------------
                           000001   396 	CMDX=1 
                           000003   397 	LINK=3 
                           000004   398 	VSIZE=4
      0029B6                        399 cmd_name:
      0029B6                        400 	_vars VSIZE 
      0029B6 52 04            [ 2]    1     sub sp,#VSIZE 
      0029B8 72 5F 00 0C      [ 1]  401 	clr acc16 
      0029BC 1F 01            [ 2]  402 	ldw (CMDX,sp),x  
      0029BE AE 1F 4D         [ 2]  403 	ldw x,#kword_dict	
      0029C1 1F 03            [ 2]  404 1$:	ldw (LINK,sp),x
      0029C3 E6 02            [ 1]  405 	ld a,(2,x)
      0029C5 A4 0F            [ 1]  406 	and a,#15 
      0029C7 C7 00 0D         [ 1]  407 	ld acc8,a 
      0029CA 1C 00 03         [ 2]  408 	addw x,#3
      0029CD 72 BB 00 0C      [ 2]  409 	addw x,acc16
      0029D1 FE               [ 2]  410 	ldw x,(x) ; command index  
      0029D2 13 01            [ 2]  411 	cpw x,(CMDX,sp)
      0029D4 27 0A            [ 1]  412 	jreq 2$
      0029D6 1E 03            [ 2]  413 	ldw x,(LINK,sp)
      0029D8 FE               [ 2]  414 	ldw x,(x) 
      0029D9 1D 00 02         [ 2]  415 	subw x,#2  
      0029DC 26 E3            [ 1]  416 	jrne 1$
      0029DE 20 05            [ 2]  417 	jra 9$
      0029E0 1E 03            [ 2]  418 2$: ldw x,(LINK,sp)
      0029E2 1C 00 02         [ 2]  419 	addw x,#2 	
      0029E5                        420 9$:	_drop VSIZE
      0029E5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0029E7 81               [ 4]  421 	ret
                                    422 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26     .area CODE 
      002A00                         27 	.bndry 128 ; align on FLASH block.
                                     28 ; space for user application  
      002A00                         29 app_space::
      002A00 00 00                   30 app_sign: .word 0 ; .ascii "BC"  ; signature 
      002A02 00 00                   31 app_size: .word 0 ; 31 
      002A04                         32 app: 
                                     33 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     34 ;;  BASIC code demo 'BLINK.BAS' 
                                     35 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     36 ;; byte code generated by compiler.
                                     37 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     38 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     39 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     40 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   7 ABS        001F4F R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   7 ADCON      001F45 R
    ADCON_ID=  000002     |   7 ADCREAD    001F39 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  7 AND        001F31 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  7 ASC        001F29 R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   7 AWU        001F21 R   |   7 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000001 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   7 BIT        001F19 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000C 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   7 BRES       001F10 R   |     BRES_IDX=  00000E 
    BS      =  000008     |     BSAVE   =  000001     |   7 BSET       001F07 R
    BSET_IDX=  000010     |     BSIZE   =  000006     |   7 BTEST      001EFD R
    BTEST_ID=  000012     |   7 BTOGL      001EF3 R   |     BTOGL_ID=  000014 
    BTW     =  000001     |   7 BYE        001EEB R   |     BYE_IDX =  000016 
    C       =  000001     |     CAN     =  000018     |   7 CANT_DO    001545 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  7 CHAR       001EE2 R   |     CHAR_IDX=  000018     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  00002C     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   7 CRH        001EDA R
    CRH_IDX =  00001A     |   7 CRL        001ED2 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   7 DATA       001EC9 R
  7 DATALN     001EBE R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   7 DDR        001EB6 R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   7 DEC        001EAE R   |     DEC_IDX =  000024 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   7 DO         001EA7 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]

Symbol Table

  7 DREAD      001E9D R   |     DREAD_ID=  000028     |   7 DWRITE     001E92 R
    DWRITE_I=  00002A     |   7 EDIT       001E89 R   |     EDIT_IDX=  00002C 
  7 EEPROM     001E7E R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002E     |     EEPROM_S=  000800     |     EM      =  000019 
  7 END        001E76 R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   7 ERASE      001E6C R
    ERASE_ID=  000032     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   7 FCPU       001E63 R   |     FCPU_IDX=  000034 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   7 FOR        001E5B R   |     FOR_IDX =  000038 
  7 FREE       001E52 R   |     FREE_IDX=  00009A     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   7 GOSUB      001E48 R
    GOSUB_ID=  00003A     |   7 GOTO       001E3F R   |     GOTO_IDX=  00003C 
  7 GPIO       001E36 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003E     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   7 HEX        001E2E R   |     HEX_IDX =  000040 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]

Symbol Table

    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   7 IDR        001E26 R
    IDR_IDX =  000042     |   7 IF         001E1F R   |     IF_IDX  =  000044 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  7 INPUT      001E15 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000046     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   7 INVERT     001E0A R   |     INVERT_I=  000048 
    INW     =  000009     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   7 IWDGEN     001DFF R   |     IWDGEN_I=  00004A 
  7 IWDGREF    001DF3 R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  7 KEY        001DEB R   |     KEY_END =  000083     |     KEY_IDX =  00004E 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  7 LET        001DE3 R   |     LET_IDX =  000050     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |     LINK    =  000003 
  7 LIST       001DDA R   |     LIST_IDX=  000052     |     LL      =  000001 
    LLEN    =  000007     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  7 LOG        001DD2 R   |     LOG_IDX =  000054     |   7 LSHIFT     001DC7 R
    LSHIFT_I=  000056     |     MAJOR   =  000002     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
  7 MULDIV     001DBC R   |     MULDIV_I=  000058     |     MULOP   =  000003 
    N1      =  000001     |     N2      =  000003     |     NAFR    =  004804 
    NAK     =  000015     |     NCLKOPT =  004808     |     NEG     =  000001 
  7 NEW        001DB4 R   |     NEW_IDX =  00005C     |   7 NEXT       001DAB R
    NEXT_IDX=  00005A     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]

Symbol Table

    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  7 NOT        001DA3 R   |     NOT_IDX =  00005E     |   7 NOT_SAVE   000F34 R
  7 NO_APP     001584 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   7 NonHandl   000000 R   |   7 ODR        001D9B R
    ODR_IDX =  000060     |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   7 OR         001D94 R   |     OR_IDX  =  000062 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     OVRWR   =  000004     |     PA      =  000000 
  7 PAD        001D8C R   |     PAD_IDX =  000064     |     PAD_SIZE=  000080 
  7 PAUSE      001D82 R   |     PAUSE_ID=  000066     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  7 PEEK       001D79 R   |     PEEK_IDX=  00006A     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   7 PINP       001D70 R   |     PINP_IDX=  00006C 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   7 PMODE      001D66 R   |     PMODE_ID=  000068 
  7 POKE       001D5D R   |     POKE_IDX=  00006E     |     PORT    =  000003 
  7 POUT       001D54 R   |     POUT_IDX=  000070     |     PREV    =  000001 
  7 PRINT      001D4A R   |   7 PROG_ADD   000E0D R   |   7 PROG_SIZ   000E1F R
  7 PRTA       001D41 R   |     PRTA_IDX=  000074     |   7 PRTB       001D38 R
    PRTB_IDX=  000076     |   7 PRTC       001D2F R   |     PRTC_IDX=  000078 
  7 PRTD       001D26 R   |     PRTD_IDX=  00007A     |   7 PRTE       001D1D R
    PRTE_IDX=  00007C     |   7 PRTF       001D14 R   |     PRTF_IDX=  00007E 
  7 PRTG       001D0B R   |     PRTG_IDX=  000080     |   7 PRTH       001D02 R
    PRTH_IDX=  000082     |   7 PRTI       001CF9 R   |     PRTI_IDX=  000084 
    PRT_IDX =  000072     |     PSTR    =  000003     |   7 QKEY       001CF0 R
    QKEY_IDX=  000086     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |     RBT_IDX =  00008A     |   7 READ       001CE7 R
    READ_IDX=  000088     |   7 REBOOT     001CDC R   |     REG     =  000001 
    REGA    =  000001     |     REGX    =  000003     |     REGY    =  000005 
    RELOP   =  000003     |   7 REMARK     001CD1 R   |     REM_IDX =  00008C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]

Symbol Table

  7 RESTORE    001CC5 R   |     REST_IDX=  00008E     |     RETL1   =  000001 
  7 RETURN     001CBA R   |     RET_ADDR=  000003     |     RET_IDX =  000090 
    RET_INW =  000005     |   7 RND        001CB2 R   |     RND_IDX =  000092 
    ROP     =  004800     |     RS      =  00001E     |   7 RSHIFT     001CA7 R
    RSHIFT_I=  000094     |     RST_SR  =  0050B3     |   7 RUN        001C9F R
  7 RUNNING    000569 R   |     RUN_IDX =  000096     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |   7 SAVE       001C96 R   |     SAVEB   =  000002 
    SAVE_IDX=  000036     |     SDIVSR  =  000005     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   7 SHOW       001C8D R
    SHOW_IDX=  000098     |     SI      =  00000F     |     SIGN    =  000001 
  7 SIGNATUR   001543 R   |   7 SIZE       001C84 R   |     SIZE_IDX=  0000C4 
    SKIP    =  000005     |   7 SLEEP      001C7A R   |     SLEEP_ID=  00009C 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  7 SPIEN      001C70 R   |     SPIEN_ID=  0000A0     |   7 SPIRD      001C66 R
    SPIRD_ID=  00009E     |   7 SPISEL     001C5B R   |     SPISEL_I=  0000A2 
  7 SPIWR      001C51 R   |     SPIWR_ID=  0000A4     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SQUOT   =  000006     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  0000A0     |   7 STEP       001C48 R
    STEP_IDX=  0000A6     |   7 STOP       001C3F R   |     STOP_IDX=  0000A8 
    STR     =  000003     |   7 STR_BYTE   000E2E R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   7 TICKS      001C35 R
    TICKS_ID=  0000AA     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   7 TIMEOUT    001C29 R
  7 TIMER      001C1F R   |     TIMER_ID=  0000AC     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000006     |     TK_CFUNC=  000082 
    TK_CHAR =  000003     |     TK_CMD  =  000080     |     TK_COLON=  00000B 
    TK_COMMA=  000009     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LE   =  000036     |     TK_LPARE=  000007 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000008 
    TK_SHARP=  00000A     |     TK_VAR  =  000085     |     TMROUT_I=  0000AE 
  7 TO         001C18 R   |   7 TONE       001C0F R   |     TONE_IDX=  0000B2 
    TO_IDX  =  0000B0     |   7 Timer4Up   00003C R   |     U1      =  000001 
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   7 UBOUND     001C04 R   |     UBOUND_I=  0000B4 
  7 UBTN_Han   000075 R   |   7 UFLASH     001BF9 R   |     UFLASH_I=  0000B6 
  7 UNTIL      001BEF R   |     UNTIL_ID=  0000B8     |     US      =  00001F 
  7 USER_ABO   000088 R   |   7 USR        001BE7 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000BA 
  7 Uart1RxH   00000F R   |   7 UserButt   000051 R   |     VAR_ADDR=  000006 
    VSISE   =  000003     |     VSIZ    =  000002     |     VSIZE   =  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]

Symbol Table

    VT      =  00000B     |   7 WAIT       001BDE R   |     WAIT_IDX=  0000BC 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   7 WORDS      001BD4 R
    WORDS_ID=  0000BE     |   7 WRITE      001BCA R   |     WRITE_ID=  0000C0 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  7 XOR        001BC2 R   |     XOR_IDX =  0000C2     |     XREG    =  000003 
    XSAVE   =  000001     |     YSAVE   =  000004     |   7 abs        0016F2 R
  1 acc16      00000C GR  |   1 acc24      00000B GR  |   1 acc8       00000D GR
  7 accept_c   0022BB R   |   7 add_char   002996 R   |   7 add_spac   0027BA R
  7 analog_r   00134A R   |   7 app        002A04 R   |   7 app_sign   002A00 R
  7 app_size   002A02 R   |   7 app_spac   002A00 GR  |   7 arduino_   0017E8 R
  7 arg_list   000BDC R   |   1 array_si   00001E R   |   7 ascii      0015E3 R
  7 at_tst     002628 R   |   7 atoi24     000996 GR  |   7 atoi_exi   0009FC R
  7 awu        0016A3 R   |   7 awu02      0016AD R   |   7 bad_port   001644 R
  1 base       00000A GR  |   1 basicptr   000004 GR  |   7 beep       0012D7 R
  7 beep_1kh   0012C1 GR  |   7 bin_exit   0024EE R   |   7 bit_and    001706 R
  7 bit_or     00171E R   |   7 bit_rese   00109C R   |   7 bit_set    00108C R
  7 bit_test   0010BD R   |   7 bit_togg   0010AD R   |   7 bit_xor    001736 R
  7 bitmask    001954 R   |   7 bkslsh_t   0025D5 R   |   7 bksp       002059 R
  7 block_er   0001BC R   |   7 break_po   001417 R   |   7 bye        00167C R
  7 char       0015D1 R   |   7 clear_ba   0005A9 R   |   7 clear_va   000409 R
  7 clock_in   0000A3 R   |   7 cmd_end    0012BA R   |   7 cmd_line   0007C8 R
  7 cmd_name   0029B6 R   |   7 cmd_size   000DE0 R   |   7 code_add   001F55 GR
  7 cold_sta   000486 R   |   7 colon_ts   0025FC R   |   7 comma_ts   002607 R
  7 comp_msg   000720 R   |   7 compile    00272D GR  |   7 const_cr   001A08 R
  7 const_cr   001A0E R   |   7 const_dd   001A02 R   |   7 const_ee   001A20 R
  7 const_id   0019FC R   |   7 const_in   001A1A R   |   7 const_od   0019F6 R
  7 const_ou   001A14 R   |   7 const_po   0019C0 R   |   7 const_po   0019C6 R
  7 const_po   0019CC R   |   7 const_po   0019D2 R   |   7 const_po   0019D8 R
  7 const_po   0019DE R   |   7 const_po   0019E4 R   |   7 const_po   0019EA R
  7 const_po   0019F0 R   |   7 convert_   002465 R   |   7 convert_   00201D R
  7 copy_com   00265D R   |   1 count      000003 GR  |   7 cp_loop    000B8B R
  7 cpy_cmd_   0027A5 R   |   7 cpy_quot   0027DE R   |   7 create_g   00238F R
  7 cs_high    001BB5 R   |   7 cstk_pro   000D96 R   |   7 dash_tst   00261D R
  7 data       001A26 R   |   1 data_len   000009 R   |   7 data_lin   001A2C R
  1 data_ofs   000008 R   |   1 data_ptr   000006 R   |   7 data_sea   001A6D R
  7 dbl_sign   000AE5 R   |   7 dec_base   000DC2 R   |   7 decomp_l   00288F R
  7 decompil   002848 GR  |   7 del_line   002362 R   |   7 delete_l   002146 R
  7 delete_n   002069 R   |   7 delete_u   00210B R   |   7 digital_   00137E R
  7 digital_   0013AE R   |   7 div32_16   000AEF R   |   7 divide     000B46 R
  7 divu24_8   000905 R   |   7 dneg       000ADA R   |   7 do_loop    00197D R
  7 do_progr   0001AF R   |   7 edit       000F07 R   |   7 enable_i   0018FE R
  7 eql_tst    0026B2 R   |   7 equal      0029A9 R   |   7 erase      001476 R
  7 erase_ex   0001DB R   |   7 erase_fl   0001D1 R   |   7 err_bad_   00068B R
  7 err_buf_   000701 R   |   7 err_cmd_   00064F R   |   7 err_div0   000614 R
  7 err_dupl   000669 R   |   7 err_math   0005FB R   |   7 err_mem_   0005E0 R
  7 err_msg    0005C0 R   |   7 err_no_a   000697 R   |   7 err_no_d   0006CA R
  7 err_no_f   0006EE R   |   7 err_no_l   000623 R   |   7 err_no_p   0006DA R
  7 err_not_   00067A R   |   7 err_run_   000639 R   |   7 err_synt   0005ED R
  7 escaped    00247A GR  |   7 expect     000BCA R   |   7 expr_exi   000D21 R
  7 expressi   000CDB R   |   7 factor     000C2C R   |   1 farptr     000016 R
  7 fcpu       001780 R   |   7 final_te   0022B4 R   |   7 first_li   000EB4 R
  1 flags      000020 GR  |   7 for        001118 R   |   7 free       000DC7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]

Symbol Table

  3 free_ram   000080 R   |   7 func_arg   000BD7 R   |   7 func_not   0018F1 R
  7 ge         0029AB R   |   7 get_arra   000C07 R   |   7 get_cmd_   002827 R
  7 get_esca   002029 R   |   7 get_targ   0011E2 R   |   7 get_tick   0016EC R
  7 get_toke   00256E GR  |   7 getc       0002D1 GR  |   7 gosub      001223 R
  7 goto       001208 R   |   7 gpio       00161F R   |   7 gt         0029A7 R
  7 gt_tst     0026BD R   |   7 hex_base   000DBD R   |   7 hex_dump   00035A R
  7 if         001104 R   |   1 in         000001 GR  |   1 in.saved   000002 GR
  1 in.w       000000 GR  |   7 incr_far   00145A R   |   7 input_ex   00105E R
  7 input_lo   000FF3 R   |   7 input_va   000FF1 R   |   7 insert_c   0020C8 R
  7 insert_l   0023BB R   |   7 insert_l   00242A R   |   7 interp_l   000809 R
  7 interpre   0007E4 R   |   7 invert     00196E R   |   7 is_alnum   000437 GR
  7 is_alpha   00041D GR  |   7 is_digit   00042E GR  |   7 itoa       00089A GR
  7 itoa_loo   0008BF R   |   7 jp_to_ta   001216 R   |   7 key        00160A R
  7 kw_loop    00250A R   |   7 kword_di   001F4D GR  |   7 kword_en   001BC0 R
  7 le         0029B0 R   |   7 leading_   001944 R   |   7 let        000E3F GR
  7 let_arra   000E4D R   |   7 let_var    000E50 R   |   7 lines_sk   000EB7 R
  7 list       000E72 R   |   7 list_exi   000EF9 R   |   7 list_loo   000ED7 R
  7 log2       001939 R   |   7 logical_   0018E7 R   |   7 long_div   000AC2 R
  7 loop_bac   0011C5 R   |   1 loop_dep   00001D R   |   7 loop_don   0011DA R
  7 lshift     00174E R   |   7 lt         0029AE R   |   7 lt_tst     0026E6 R
  7 modulo     000B5C R   |   7 move       0003C5 GR  |   7 move_dow   0003E4 R
  7 move_era   00013E R   |   7 move_exi   000405 R   |   7 move_lef   0020A0 R
  7 move_loo   0003E9 R   |   7 move_prg   00017E R   |   7 move_rig   0020AE R
  7 move_up    0003D6 R   |   7 mul_char   002998 R   |   7 muldiv     000B61 R
  7 multiply   000A8D R   |   7 mulu24_8   00092D R   |   7 nbr_tst    0025A1 R
  7 ne         0029B3 R   |   7 neg_acc2   000967 R   |   7 new        001435 R
  7 next       001198 R   |   7 next_lin   0007EC R   |   7 next_tok   000830 GR
  7 no_match   000B9D R   |   7 other      00270F R   |   7 overwrit   0022E0 R
  5 pad        0016E0 GR  |   7 pad_ref    001BBA R   |   7 parse_bi   0024CC R
  7 parse_in   002482 R   |   7 parse_ke   002509 R   |   7 parse_qu   00242D R
  7 pause      001690 R   |   7 pause02    00169A R   |   7 peek       0010F3 R
  7 pin_mode   00178C R   |   7 plus_tst   002686 R   |   7 poke       0010E4 R
  7 power_ad   00130E R   |   7 prcnt_ts   0026A7 R   |   7 print      000F6B R
  7 print_ex   000FC5 R   |   7 print_he   002315 GR  |   7 print_in   00087E R
  7 printxy    000A00 R   |   7 prog_siz   000E6A R   |   7 program_   000158 R
  7 program_   00017E R   |   7 prt_basi   000F4B R   |   7 prt_loop   000F6F R
  7 prt_tok    0002EC R   |   7 prti24     00088E R   |   1 ptr16      000017 GR
  1 ptr8       000018 R   |   7 putc       0002C1 GR  |   7 puts       00204F GR
  7 qgetc      0002CA GR  |   7 qkey       001612 GR  |   7 qmark_ts   002633 R
  7 qsign      0014DB R   |   7 random     001808 R   |   7 read       001AA9 R
  7 read01     001AAB R   |   7 readln     002154 GR  |   7 readln_l   002161 R
  7 readln_q   0022FD R   |   7 refresh_   001934 R   |   7 rel_exit   000D79 R
  7 relation   000D24 R   |   7 relop_st   00299B R   |   7 remark     001061 GR
  7 reset_co   000F6D R   |   7 rest_con   000FE1 R   |   7 restore    001A5A R
  7 return     001243 R   |   7 right_al   0027CC GR  |   7 row_alig   00143F R
  7 row_eras   000111 R   |   7 row_eras   00013E R   |   7 row_loop   00033D R
  7 rparnt_t   0025F1 R   |   7 rshift     001767 R   |   3 rsign      00007C R
  3 rsize      00007E R   |   7 rt_msg     00070E R   |   7 run        001261 R
  7 run_app    000528 R   |   7 run_it     001293 R   |   1 rx1_head   00002A R
  1 rx1_queu   000022 R   |   1 rx1_tail   00002B R   |   7 save_app   0014E2 R
  7 save_con   000FD1 R   |   7 scan_blo   001468 R   |   7 search_d   000B7D GR
  7 search_e   000BC7 R   |   7 search_l   002337 GR  |   7 search_l   002346 R
  7 search_n   000B81 R   |   1 seedx      000012 R   |   1 seedy      000014 R
  7 select_p   0017D8 R   |   7 send_esc   002077 R   |   7 send_par   002082 R
  7 set_time   0018D5 R   |   7 sharp_ts   002612 R   |   7 show       000D7C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]

Symbol Table

  7 show_row   00032B R   |   7 single_c   002991 R   |   7 skip       00255B R
  7 slash_ts   00269C R   |   7 sleep      001685 R   |   7 software   000440 R
  7 spaces     0020BC GR  |   7 spi_clea   001B4E R   |   7 spi_disa   001B36 R
  7 spi_enab   001B03 R   |   7 spi_rcv_   001B70 R   |   7 spi_read   001B9B R
  7 spi_sele   001BA3 R   |   7 spi_send   001B5A R   |   7 spi_writ   001B7B R
  5 stack_fu   001760 GR  |   5 stack_un   001800 R   |   7 star_tst   002691 R
  7 step       001171 R   |   7 stop       0013E9 R   |   7 store_lo   001185 R
  7 str_matc   000BAA R   |   7 str_tst    002591 R   |   7 strcmp     0003A4 R
  7 strcpy     0003B5 GR  |   7 strlen     000399 GR  |   7 syntax_e   000741 GR
  1 tab_widt   000021 GR  |   7 tb_error   000743 GR  |   7 term       000C89 R
  7 term01     000C91 R   |   7 term_exi   000CD8 R   |   5 tib        001690 GR
  7 tick_tst   00264B R   |   1 ticks      00000E R   |   7 timeout    0018E4 R
  1 timer      000010 GR  |   7 timer2_i   0000B9 R   |   7 timer4_i   0000C6 R
  7 tk_id      000731 R   |   7 to         001141 R   |   7 to_eepro   0001A7 R
  7 to_flash   0001AC R   |   7 to_hex_c   00232C GR  |   7 to_upper   00098A GR
  7 token_ch   002726 R   |   7 token_ex   00272A R   |   7 token_ms   000323 R
  7 tone       0012CA R   |   7 try_next   001A99 R   |   1 txtbgn     000019 GR
  1 txtend     00001B GR  |   7 uart1_ge   0002D1 GR  |   7 uart1_in   00027C R
  7 uart1_pu   0002C1 GR  |   7 uart1_qg   0002CA GR  |   7 uart1_se   00028C R
  7 ubound     000E35 R   |   7 udiv32_1   000AB0 R   |   7 uflash     001649 R
  7 umstar     000A53 R   |   7 unlock_e   0000DB R   |   7 unlock_f   0000F6 R
  7 until      001992 R   |   7 user_int   000064 R   |   7 usr        00165F R
  7 var_name   00281F GR  |   1 vars       00002C GR  |   7 wait       001067 R
  7 warm_ini   00058B R   |   7 warm_sta   0007C5 R   |   7 words      00186F R
  7 words_co   0018BF R   |   7 write      00159A R   |   7 write_bl   000257 R
  7 write_by   0001DD R   |   7 write_ee   000219 R   |   7 write_ex   000252 R
  7 write_fl   000203 R   |   7 write_ro   000198 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     60   flags    0
   2 BTXT       size      0   flags    8
   3 BTXT0      size      4   flags    8
   4 SSEG       size      0   flags    8
   5 SSEG1      size    170   flags    8
   6 HOME       size     80   flags    0
   7 CODE       size   2A04   flags    0

