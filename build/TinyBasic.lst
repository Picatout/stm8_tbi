ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           00008C    27 	STACK_SIZE=140
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000003    29         CELL_SIZE=3
                           00003C    30         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    31         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    32 	FRUN=0 ; flags run code in variable flags
                           000001    33 	FTRAP=1 ; inside trap handler 
                           000002    34 	FLOOP=2 ; FOR loop in preparation 
                           000003    35 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    36 	FBREAK=4 ; break point flag 
                           000005    37 	FCOMP=5  ; compiling flags 
                                     38 
                                     39 
                           000006    40         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     41 
                           007FFF    42 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     43 
                           000008    44 	RX_QUEUE_SIZE=8 
                                     45 
                           00F424    46         TIM2_CLK_FREQ=62500
                                     47 
                           000050    48 	TIB_SIZE=80
                           000080    49         PAD_SIZE=BLOCK_SIZE 
                                     50 
                                     51 ;--------------------------------------
                                     52 ;   constantes related to Arduino 
                                     53 ;   API mapping 
                                     54 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000000    55         INP=0
                           000001    56         OUTP=1 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;       token attribute
                                     60 ;--------------------------------------
                                     61         ; bits 4:5 identify token group 
                                     62         ; 0x0n -> miscelinous 
                                     63         ; 0x1n -> +|- operators 
                                     64         ; 0x2n -> *|/|% operators
                                     65         ; 0x3n -> relational operators 
                           000080    66         TK_CMD=128      ; BASIC command   
                           000081    67         TK_IFUNC=129    ; BASIC integer function
                           000082    68         TK_CFUNC=130    ; BASIC character function
                           000083    69         TK_CONST=131    ; BASIC constant 
                           000084    70         TK_INTGR=132    ; 16 bits integer 
                           000085    71         TK_VAR=133
                           000086    72         TK_FLOAT=134    ; float32 
                           000000    73         TK_NONE=0       ; not a token 
                           000002    74         TK_QSTR=2       ; quoted string  
                           000003    75         TK_LABEL=3      ; used for defined, constants, variables
                           000004    76         TK_CHAR=4       ; ASCII character 
                           000005    77         TK_ARRAY=5     ; array variable '@' 
                           000006    78         TK_LPAREN=6     ; left parenthesis '('
                           000007    79         TK_RPAREN=7     ; right parenthesis ')'
                           000008    80         TK_COMMA=8     ; item separator ',' 
                           000009    81         TK_SHARP=9     ; print colon width '#' 
                           00000A    82         TK_COLON=0xa      ; command separator ':' 
                                     83         
                           000010    84         TK_PLUS=0x10    ; addition operator '+'
                           000011    85         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    86         TK_MULT=0x20    ; multiplication operator '*'
                           000021    87         TK_DIV=0x21     ; division operator '/'
                           000022    88         TK_MOD=0x22     ; modulo operator '%'
                                     89 
                                     90         ; don't change these token values 
                                     91         ; values chosen to be used as a mask.
                                     92         ; bit 7   1 for dictionary words else 0 
                                     93         ; bits 6  always 0 
                                     94         ; bits 5:4 identify group 
                                     95         ; bits 3:0 token identifier inside group  
                           000031    96         TK_GT=0x31      ; relation operator '>'
                           000032    97         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033    98         TK_GE=0x33      ; relation operator '>='
                           000034    99         TK_LT=0x34      ; relation operator '<'
                           000036   100         TK_LE=0x36      ; relation operator '<='
                           000035   101         TK_NE=0x35      ; relation operator '<>' not equal 
                                    102         ; token groups 
                           000030   103         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   104         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   105         TK_GRP_ADD=0x10  ; additive operators
                           000020   106         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   107         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   108         CMD_END=2 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                    110 ;--------------------------------------
                                    111 ;   error codes 
                                    112 ;--------------------------------------
                           000000   113     ERR_NONE=0
                           000001   114     ERR_MEM_FULL=1 
                           000002   115     ERR_SYNTAX=2
                           000003   116     ERR_MATH_OVF=3
                           000004   117     ERR_DIV0=4 
                           000005   118     ERR_NO_LINE=5
                           000006   119     ERR_RUN_ONLY=6
                           000007   120     ERR_CMD_ONLY=7
                           000008   121     ERR_DUPLICATE=8
                           000009   122     ERR_NOT_FILE=9
                           00000A   123     ERR_BAD_VALUE=10
                           00000B   124     ERR_NO_ACCESS=11
                           00000C   125     ERR_NO_DATA=12 
                           00000D   126     ERR_NO_PROG=13
                           00000E   127     ERR_NO_FSPACE=14
                           00000F   128     ERR_BUF_FULL=15
                           000010   129     ERR_OVERFLOW=16 
                                    130 
                                    131 ;--------------------------------------
                                    132 ;   assembler flags 
                                    133 ;-------------------------------------
                                    134 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    135 
                                    136      .macro _usec_dly n 
                                    137     ldw x,#(16*n-2)/4
                                    138     decw x
                                    139     nop 
                                    140     jrne .-4
                                    141     .endm 
                                    142     
                                    143     ; load X register with 
                                    144     ; entry point of dictionary
                                    145     ; before calling 'search_dict'
                                    146     .macro _ldx_dict dict_name
                                    147     ldw x,#dict_name+2
                                    148     .endm 
                                    149 
                                    150     ; reset BASIC pointer
                                    151     ; to beginning of last token
                                    152     ; extracted except if it was end of line 
                                    153     .macro _unget_token 
                                    154      mov in,in.saved  
                                    155     .endm
                                    156 
                                    157 
                                    158 ;---------------------------------------
                                    159 ;    xtack manipulation macros 
                                    160 ;    Y is used as xstack pointer  
                                    161 ;----------------------------------------
                                    162     ; pop in A:X from XSTACK 
                                    163     .macro _xpop 
                                    164     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ldw x,y 
                                    166     ldw x,(1,x)
                                    167     addw y,#CELL_SIZE 
                                    168     .endm 
                                    169 
                                    170     ; push A:X  to XSTACK 
                                    171     .macro _xpush 
                                    172     subw y,#CELL_SIZE
                                    173     ld (y),a 
                                    174     ldw (1,y),x 
                                    175     .endm 
                                    176 
                                    177     ; drop from XSTACK 
                                    178     .macro _xdrop 
                                    179     addw y,#CELL_SIZE 
                                    180     .endm 
                                    181 
                                    182     ; @T fetch top xstack 
                                    183     .macro _at_top
                                    184     ld a,(y)
                                    185     ldw x,y 
                                    186     ldw x,(1,x)
                                    187     .endm 
                                    188 
                                    189     ; @N  fetch next on xstack 
                                    190     .macro _at_next 
                                    191     ld a,(3,y)
                                    192     ldw x,y 
                                    193     ldw x,(4,x)
                                    194     .endm 
                                    195 
                                    196     ; !T put on top of xtack 
                                    197     .macro _store_top 
                                    198     ld (y),a 
                                    199     ldw (1,y),x     
                                    200     .endm 
                                    201 
                                    202     ; !N put next on xstack 
                                    203     .macro _store_next 
                                    204     ld (3,y),a 
                                    205     ldw (4,y),x 
                                    206     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DDR_IDX=DATA_IDX+2
                           000022    42     DEC_IDX=DDR_IDX+2
                           000024    43     DO_IDX=DEC_IDX+2
                           000026    44     DREAD_IDX=DO_IDX+2
                           000028    45     DWRITE_IDX=DREAD_IDX+2
                           00002A    46     EDIT_IDX=DWRITE_IDX+2
                           00002C    47     EEPROM_IDX=EDIT_IDX+2
                           00002E    48     END_IDX=EEPROM_IDX+2
                           000030    49     ERASE_IDX=END_IDX+2
                           000032    50     FCPU_IDX=ERASE_IDX+2
                           000034    51     SAVE_IDX=FCPU_IDX+2
                           000036    52     FOR_IDX=SAVE_IDX+2
                           000038    53     GOSUB_IDX=FOR_IDX+2
                           00003A    54     GOTO_IDX=GOSUB_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GPIO_IDX=GOTO_IDX+2
                           00003E    56     HEX_IDX=GPIO_IDX+2
                           000040    57     IDR_IDX=HEX_IDX+2
                           000042    58     IF_IDX=IDR_IDX+2
                           000044    59     INPUT_IDX=IF_IDX+2
                           000046    60     INVERT_IDX=INPUT_IDX+2
                           000048    61     IWDGEN_IDX=INVERT_IDX+2
                           00004A    62     IWDGREF_IDX=IWDGEN_IDX+2
                           00004C    63     KEY_IDX=IWDGREF_IDX+2
                           00004E    64     LET_IDX=KEY_IDX+2
                           000050    65     LIST_IDX=LET_IDX+2
                           000052    66     LOG_IDX=LIST_IDX+2
                           000054    67     LSHIFT_IDX=LOG_IDX+2
                                     68 ;    MULDIV_IDX=LSHIFT_IDX+2
                           000056    69     NEXT_IDX=LSHIFT_IDX+2
                           000058    70     NEW_IDX=NEXT_IDX+2
                           00005A    71     NOT_IDX=NEW_IDX+2
                           00005C    72     ODR_IDX=NOT_IDX+2
                           00005E    73     OR_IDX=ODR_IDX+2
                           000060    74     PAD_IDX=OR_IDX+2
                           000062    75     PAUSE_IDX=PAD_IDX+2
                           000064    76     PMODE_IDX=PAUSE_IDX+2
                           000066    77     PEEK_IDX=PMODE_IDX+2
                           000068    78     PINP_IDX=PEEK_IDX+2
                           00006A    79     POKE_IDX=PINP_IDX+2
                           00006C    80     POUT_IDX=POKE_IDX+2
                           00006E    81    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000070    82     PRTA_IDX=PRT_IDX+2
                           000072    83     PRTB_IDX=PRTA_IDX+2
                           000074    84     PRTC_IDX=PRTB_IDX+2
                           000076    85     PRTD_IDX=PRTC_IDX+2
                           000078    86     PRTE_IDX=PRTD_IDX+2
                           00007A    87     PRTF_IDX=PRTE_IDX+2
                           00007C    88     PRTG_IDX=PRTF_IDX+2
                           00007E    89     PRTH_IDX=PRTG_IDX+2
                           000080    90     PRTI_IDX=PRTH_IDX+2
                           000082    91     QKEY_IDX=PRTI_IDX+2
                           000084    92     READ_IDX=QKEY_IDX+2
                           000086    93     RBT_IDX=READ_IDX+2  ; REBOOT
                           000088    94 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008A    95     REST_IDX=REM_IDX+2 ; RESTORE
                           00008C    96     RET_IDX=REST_IDX+2  ; RETURN 
                           00008E    97     RND_IDX=RET_IDX+2 ; RANDOM 
                           000090    98     RSHIFT_IDX=RND_IDX+2
                           000092    99     RUN_IDX=RSHIFT_IDX+2
                           000094   100     FREE_IDX=RUN_IDX+2
                           000096   101     SLEEP_IDX=FREE_IDX+2
                           000098   102     SPIRD_IDX=SLEEP_IDX+2
                           00009A   103     SPIEN_IDX=SPIRD_IDX+2
                           00009C   104     SPISEL_IDX=SPIEN_IDX+2
                           00009E   105     SPIWR_IDX=SPISEL_IDX+2
                           0000A0   106     STEP_IDX=SPIWR_IDX+2
                           0000A2   107     STOP_IDX=STEP_IDX+2
                           0000A4   108     TICKS_IDX=STOP_IDX+2
                           0000A6   109     TIMER_IDX=TICKS_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000A8   110     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000AA   111     TO_IDX=TMROUT_IDX+2
                           0000AC   112     TONE_IDX=TO_IDX+2
                           0000AE   113     UBOUND_IDX=TONE_IDX+2
                           0000B0   114     UFLASH_IDX=UBOUND_IDX+2
                           0000B2   115     UNTIL_IDX=UFLASH_IDX+2
                           0000B4   116     USR_IDX=UNTIL_IDX+2
                           0000B6   117     WAIT_IDX=USR_IDX+2
                           0000B8   118     WORDS_IDX=WAIT_IDX+2
                           0000BA   119     WRITE_IDX=WORDS_IDX+2
                           0000BC   120     XOR_IDX=WRITE_IDX+2
                           0000BE   121     SIZE_IDX=XOR_IDX+2 
                           0000C0   122     ON_IDX=SIZE_IDX+2 
                           0000C2   123     GET_IDX=ON_IDX+2
                           0000C4   124     CONST_IDX=GET_IDX+2
                           0000C6   125     EEFREE_IDX=CONST_IDX+2 
                                    126      
                                    127         
                                    128 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 D3             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 C6         [ 4]  120 	call print_registers
      000019 CD 05 71         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 A2         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 17 1C         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5.
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 09 00         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1C 40         [ 4]  280 	call func_eefree 
      000121 CD 1B 77         [ 4]  281 	call ubound 
      000124 CD 14 EC         [ 4]  282 	call clear_basic
      000127 CD 24 7A         [ 4]  283 	call beep_1khz  
      00012A CD 14 99         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 26 AF         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 17 1C         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 CA         [ 4]  293 	call warm_init
      00013C AE 35 84         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 35 82      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 A2         [ 4]  299 	call puts 
      00014F CD 1D 64         [ 4]  300 	call program_info 
      000152 CC 24 1E         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      00016A                         35 add24: ; ( i1 i2 -- i1 + i2 )
      00016A                         36     _xpop 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000173 89               [ 2]   37     pushw x  
      000174 88               [ 1]   38     push a  
      000175                         39     _at_top  
      000175 90 F6            [ 1]    1     ld a,(y)
      000177 93               [ 1]    2     ldw x,y 
      000178 EE 01            [ 2]    3     ldw x,(1,x)
      00017A 72 FB 02         [ 2]   40     addw x,(2,sp)
      00017D 19 01            [ 1]   41     adc a, (1,sp)
      00017F                         42     _store_top 
      00017F 90 F7            [ 1]    1     ld (y),a 
      000181 90 EF 01         [ 2]    2     ldw (1,y),x     
      000184                         43     _drop 3 
      000184 5B 03            [ 2]    1     addw sp,#3 
      000186 81               [ 4]   44     ret 
                                     45 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      000187                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      000187                         51     _xpop 
      000187 90 F6            [ 1]    1     ld a,(y)
      000189 93               [ 1]    2     ldw x,y 
      00018A EE 01            [ 2]    3     ldw x,(1,x)
      00018C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000190 89               [ 2]   52     pushw x 
      000191 88               [ 1]   53     push  a
      000192                         54     _at_top  
      000192 90 F6            [ 1]    1     ld a,(y)
      000194 93               [ 1]    2     ldw x,y 
      000195 EE 01            [ 2]    3     ldw x,(1,x)
      000197 72 F0 02         [ 2]   55     subw x,(2,sp) 
      00019A 12 01            [ 1]   56     sbc a, (1,sp)
      00019C                         57     _store_top  
      00019C 90 F7            [ 1]    1     ld (y),a 
      00019E 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A1                         58     _drop 3 
      0001A1 5B 03            [ 2]    1     addw sp,#3 
      0001A3 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24  i1 i2 -- -1|0|1
                                     63 ;------------------------------
      0001A4                         64 cp24:
      0001A4                         65     _xpop 
      0001A4 90 F6            [ 1]    1     ld a,(y)
      0001A6 93               [ 1]    2     ldw x,y 
      0001A7 EE 01            [ 2]    3     ldw x,(1,x)
      0001A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AD 89               [ 2]   66     pushw x 
      0001AE 88               [ 1]   67     push a 
      0001AF                         68     _at_top 
      0001AF 90 F6            [ 1]    1     ld a,(y)
      0001B1 93               [ 1]    2     ldw x,y 
      0001B2 EE 01            [ 2]    3     ldw x,(1,x)
      0001B4 11 01            [ 1]   69     cp a,(1,sp)
      0001B6 2C 0F            [ 1]   70     jrsgt 1$
      0001B8 27 13            [ 1]   71     jreq 2$ 
      0001BA 13 02            [ 2]   72     cpw x,(2,sp)
      0001BC 2C 09            [ 1]   73     jrsgt 1$
      0001BE 27 0D            [ 1]   74     jreq 2$ 
                                     75 ; i1<ì2 
      0001C0 A6 FF            [ 1]   76     ld a,#255 
      0001C2 AE FF FF         [ 2]   77     ldw x,#0xffff 
      0001C5 20 08            [ 2]   78     jra 9$ 
      0001C7                         79 1$: ; i1 > i2 
      0001C7 AE 00 01         [ 2]   80     ldw x,#1 
      0001CA 4F               [ 1]   81     clr a 
      0001CB 20 02            [ 2]   82     jra 9$ 
      0001CD                         83 2$: ; i1 == i2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0001CD 4F               [ 1]   84     clr a 
      0001CE 5F               [ 1]   85     clrw x 
      0001CF                         86 9$:  _store_top 
      0001CF 90 F7            [ 1]    1     ld (y),a 
      0001D1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D4                         87     _drop 3
      0001D4 5B 03            [ 2]    1     addw sp,#3 
      0001D6 81               [ 4]   88     ret 
                                     89 
                                     90 ; cp24_ax 
                                     91 ; compare acc24 with A:X 
                                     92 ;-------------------------------
      0001D7                         93 cp24_ax:
      0001D7 C1 00 0C         [ 1]   94     cp a,acc24 
      0001DA 26 03            [ 1]   95     jrne 9$ 
      0001DC C3 00 0D         [ 2]   96     cpw x,acc16
      0001DF                         97 9$: 
      0001DF 81               [ 4]   98     ret 
                                     99 
                                    100 
                                    101 ;-------------------------------
                                    102 ; abs24 
                                    103 ; abolute value of top  
                                    104 ;-------------------------------
      0001E0                        105 abs24: ; ( i -- u )
      0001E0 90 F6            [ 1]  106     ld a,(y)
      0001E2 A1 80            [ 1]  107     cp a,#0x80 
      0001E4 2A 0E            [ 1]  108     jrpl neg24 ; negative integer
      0001E6 81               [ 4]  109     ret  
                                    110 
                                    111 ;----------------------------
                                    112 ;  one's compleement 
                                    113 ;----------------------------
      0001E7                        114 cpl24:  ; i -- ~i 
      0001E7                        115     _at_top 
      0001E7 90 F6            [ 1]    1     ld a,(y)
      0001E9 93               [ 1]    2     ldw x,y 
      0001EA EE 01            [ 2]    3     ldw x,(1,x)
      0001EC 43               [ 1]  116     cpl a 
      0001ED 53               [ 2]  117     cplw x 
      0001EE                        118     _store_top 
      0001EE 90 F7            [ 1]    1     ld (y),a 
      0001F0 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001F3 81               [ 4]  119     ret 
                                    120 
                                    121 ;----------------------------    
                                    122 ; two'2 complement of top  
                                    123 ;---------------------------
      0001F4                        124 neg24: ; (i -- -i )
      0001F4                        125     _at_top
      0001F4 90 F6            [ 1]    1     ld a,(y)
      0001F6 93               [ 1]    2     ldw x,y 
      0001F7 EE 01            [ 2]    3     ldw x,(1,x)
      0001F9 43               [ 1]  126     cpl  a  
      0001FA 53               [ 2]  127     cplw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0001FB 1C 00 01         [ 2]  128     addw x,#1
      0001FE A9 00            [ 1]  129     adc a,#0
      000200                        130     _store_top  
      000200 90 F7            [ 1]    1     ld (y),a 
      000202 90 EF 01         [ 2]    2     ldw (1,y),x     
      000205 81               [ 4]  131 9$: ret 
                                    132 
                                    133 ;-----------------------------
                                    134 ; negate integer in A:X 
                                    135 ;----------------------------
      000206                        136 neg_ax:
      000206 43               [ 1]  137     cpl  a  
      000207 53               [ 2]  138     cplw x 
      000208 1C 00 01         [ 2]  139     addw x,#1
      00020B A9 00            [ 1]  140     adc a,#0
      00020D 81               [ 4]  141     ret 
                                    142 
                                    143 ;------------------------------------
                                    144 ;  two's complement of acc24 
                                    145 ;-------------------------------------
      00020E                        146 neg_acc24: ; 
      00020E 72 53 00 0C      [ 1]  147     cpl acc24 
      000212 72 53 00 0D      [ 1]  148     cpl acc16 
      000216 72 53 00 0E      [ 1]  149     cpl acc8
      00021A 72 5C 00 0E      [ 1]  150     inc acc8 
      00021E 26 0A            [ 1]  151     jrne 9$
      000220 72 5C 00 0D      [ 1]  152     inc acc16 
      000224 26 04            [ 1]  153     jrne 9$
      000226 72 5C 00 0C      [ 1]  154     inc acc24 
      00022A 81               [ 4]  155 9$: ret 
                                    156 
                                    157 
                                    158 ;--------------------------------------
                                    159 ; unsigned multiply uint24_t by uint8_t
                                    160 ; input:
                                    161 ;	acc24	uint24_t 
                                    162 ;   A		uint8_t
                                    163 ; output:
                                    164 ;   acc24   A*acc24
                                    165 ;      A    overflow, bits 31..24 
                                    166 ;-------------------------------------
                                    167 ; local variables offset  on sp
                           000001   168 	U8   = 1   ; A pushed on stack
                           000001   169 	VSIZE = 1 
      00022B                        170 mulu24_8:
      00022B 89               [ 2]  171 	pushw x    ; save X
                                    172 	; local variable
      00022C 88               [ 1]  173 	push a     ; U8
      00022D 72 5F 00 0B      [ 1]  174 	clr acc32 
                                    175 ; multiply bits 7..0 * U8   	
      000231 97               [ 1]  176 	ld xl,a 
      000232 C6 00 0E         [ 1]  177 	ld a,acc8 
      000235 42               [ 4]  178 	mul x,a 
      000236 C6 00 0D         [ 1]  179 	ld a, acc16 
      000239 CF 00 0D         [ 2]  180 	ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                    181 ; multiply middle byte, bits 15..8 * U8  	
      00023C 97               [ 1]  182 	ld xl,a 
      00023D 7B 01            [ 1]  183 	ld a,(U8,sp)
      00023F 42               [ 4]  184 	mul x,a 
      000240 C6 00 0C         [ 1]  185 	ld a,acc24
      000243 72 5F 00 0C      [ 1]  186 	clr acc24  
      000247 72 BB 00 0C      [ 2]  187 	addw x,acc24
      00024B CF 00 0C         [ 2]  188 	ldw acc24,x 
                                    189 ; multiply  MSB, bits 23..16 * U8 
      00024E 97               [ 1]  190 	ld xl,a 
      00024F 7B 01            [ 1]  191 	ld a,(U8,sp)
      000251 42               [ 4]  192 	mul x,a
      000252 72 BB 00 0B      [ 2]  193 	addw x,acc32  
      000256 CF 00 0B         [ 2]  194 	ldw acc32,x 
      000259 9E               [ 1]  195 	ld a,xh 
      00025A                        196 	_drop VSIZE  
      00025A 5B 01            [ 2]    1     addw sp,#VSIZE 
      00025C 85               [ 2]  197 	popw x 
      00025D 81               [ 4]  198 	ret 
                                    199 
                                    200 
                                    201 ;-------------------------------
                                    202 ; mul24 i1 i2 -- i1*i2  
                                    203 ; multiply 24 bits integers 
                                    204 ;------------------------------
                           000001   205     PROD=1 
                           000004   206     N1=4
                           000007   207     N2=7
                           00000A   208     PROD_SIGN=10
                           00000A   209     VSIZE=10 
      00025E                        210 mul24:
      00025E                        211     _vars VSIZE
      00025E 52 0A            [ 2]    1     sub sp,#VSIZE 
      000260 0F 0A            [ 1]  212     clr (PROD_SIGN,sp)
      000262 0F 01            [ 1]  213     clr (PROD,sp)
      000264 5F               [ 1]  214     clrw x 
      000265 1F 02            [ 2]  215     ldw (PROD+1,sp),x
      000267                        216     _xpop 
      000267 90 F6            [ 1]    1     ld a,(y)
      000269 93               [ 1]    2     ldw x,y 
      00026A EE 01            [ 2]    3     ldw x,(1,x)
      00026C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000270 4D               [ 1]  217     tnz a 
      000271 2A 05            [ 1]  218     jrpl 0$
      000273 03 0A            [ 1]  219     cpl (PROD_SIGN,sp)
      000275 CD 02 06         [ 4]  220     call neg_ax 
      000278                        221 0$:    
      000278 6B 04            [ 1]  222     ld (N1,sp),a 
      00027A 1F 05            [ 2]  223     ldw (N1+1,sp),x
      00027C                        224     _at_top 
      00027C 90 F6            [ 1]    1     ld a,(y)
      00027E 93               [ 1]    2     ldw x,y 
      00027F EE 01            [ 2]    3     ldw x,(1,x)
      000281 4D               [ 1]  225     tnz a 
      000282 2A 09            [ 1]  226     jrpl 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000284 03 0A            [ 1]  227     cpl (PROD_SIGN,sp) 
      000286 CD 02 06         [ 4]  228     call neg_ax
      000289 6B 07            [ 1]  229     ld (N2,sp),a 
      00028B 1F 08            [ 2]  230     ldw (N2+1,sp),x   
      00028D                        231 2$: 
      00028D C7 00 0C         [ 1]  232     ld acc24,a 
      000290 CF 00 0D         [ 2]  233     ldw acc16,x 
      000293 7B 06            [ 1]  234     ld a,(N1+2,sp); least byte     
      000295 27 12            [ 1]  235     jreq 4$
      000297 CD 02 2B         [ 4]  236     call mulu24_8
      00029A 4D               [ 1]  237     tnz a 
      00029B 26 60            [ 1]  238     jrne 8$ ; overflow 
      00029D CE 00 0D         [ 2]  239     ldw x,acc16  
      0002A0 C6 00 0C         [ 1]  240     ld a,acc24
      0002A3 2B 58            [ 1]  241     jrmi 8$ ; overflow  
      0002A5 6B 01            [ 1]  242     ld (PROD,sp),a
      0002A7 1F 02            [ 2]  243     ldw (PROD+1,sp),x 
      0002A9                        244 4$:
      0002A9 7B 07            [ 1]  245     ld a,(N2,sp) 
      0002AB 1E 08            [ 2]  246     ldw x,(N2+1,sp)
      0002AD C7 00 0C         [ 1]  247     ld acc24,a 
      0002B0 CF 00 0D         [ 2]  248     ldw acc16,x 
      0002B3 7B 05            [ 1]  249     ld a,(N1+1,sp); middle byte     
      0002B5 27 1F            [ 1]  250     jreq 5$
      0002B7 CD 02 2B         [ 4]  251     call mulu24_8
      0002BA 4D               [ 1]  252     tnz a 
      0002BB 26 40            [ 1]  253     jrne 8$ ; overflow 
      0002BD C6 00 0C         [ 1]  254     ld a,acc24 
      0002C0 26 3B            [ 1]  255     jrne 8$  ; overflow 
      0002C2 CE 00 0D         [ 2]  256     ldw x,acc16  
      0002C5 72 FB 01         [ 2]  257     addw x,(PROD,sp)
      0002C8 29 33            [ 1]  258     jrv 8$ ; overflow
      0002CA 1F 01            [ 2]  259     ldw (PROD,sp),x 
      0002CC 7B 07            [ 1]  260     ld a,(N2,sp)
      0002CE 1E 08            [ 2]  261     ldw x,(N2+1,sp)
      0002D0 C7 00 0C         [ 1]  262     ld acc24,a 
      0002D3 CF 00 0D         [ 2]  263     ldw acc16,x 
      0002D6                        264 5$:
      0002D6 7B 04            [ 1]  265     ld a,(N1,sp) ; high byte 
      0002D8 27 16            [ 1]  266     jreq 6$
      0002DA CD 02 2B         [ 4]  267     call mulu24_8
      0002DD 4D               [ 1]  268     tnz a 
      0002DE 26 1D            [ 1]  269     jrne 8$ ; overflow 
      0002E0 CE 00 0C         [ 2]  270     ldw x,acc24 
      0002E3 26 18            [ 1]  271     jrne 8$ ; overflow 
      0002E5 C6 00 0E         [ 1]  272     ld a,acc8 
      0002E8 2B 13            [ 1]  273     jrmi 8$ ; overflow 
      0002EA 1B 01            [ 1]  274     add a,(PROD,sp)
      0002EC 6B 01            [ 1]  275     ld (PROD,sp),a 
      0002EE 29 0D            [ 1]  276     jrv 8$ ; overflow 
      0002F0                        277 6$:
      0002F0 7B 01            [ 1]  278     ld a,(PROD,sp)
      0002F2 1E 02            [ 2]  279     ldw x,(PROD+1,sp)
      0002F4 0D 0A            [ 1]  280     tnz (PROD_SIGN,sp)
      0002F6 27 0A            [ 1]  281     jreq 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002F8 CD 02 06         [ 4]  282     call neg_ax 
      0002FB 20 05            [ 2]  283     jra 9$ 
      0002FD                        284 8$: ; overflow
      0002FD A6 10            [ 1]  285     ld a,#ERR_OVERFLOW
      0002FF CC 16 92         [ 2]  286     jp tb_error 
      000302                        287 9$:    
      000302                        288     _store_top 
      000302 90 F7            [ 1]    1     ld (y),a 
      000304 90 EF 01         [ 2]    2     ldw (1,y),x     
      000307                        289     _drop VSIZE 
      000307 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000309 81               [ 4]  290     ret 
                                    291 
                                    292 ;-------------------------------------
                                    293 ; divide uint24_t by uint8_t
                                    294 ; input:
                                    295 ;	acc24	dividend
                                    296 ;   A 		divisor
                                    297 ; output:
                                    298 ;   acc24	quotient
                                    299 ;   A		remainder
                                    300 ;------------------------------------- 
                                    301 ; offset  on sp of arguments and locals
                           000001   302 	U8   = 1   ; divisor on stack
                           000001   303 	VSIZE =1
      00030A                        304 divu24_8:
      00030A 89               [ 2]  305 	pushw x ; save x
      00030B 88               [ 1]  306 	push a 
                                    307 	; ld dividend UU:MM bytes in X
      00030C CE 00 0C         [ 2]  308 	ldw x,acc24
      00030F 7B 01            [ 1]  309 	ld a,(U8,SP) ; divisor
      000311 62               [ 2]  310 	div x,a ; UU:MM/U8
      000312 88               [ 1]  311 	push a  ;save remainder
      000313 CF 00 0C         [ 2]  312     ldw acc24,x ; quotient 
      000316 84               [ 1]  313 	pop a
      000317 95               [ 1]  314 	ld xh,a
      000318 C6 00 0E         [ 1]  315 	ld a,acc8
      00031B 97               [ 1]  316 	ld xl,a
      00031C 7B 01            [ 1]  317 	ld a,(U8,sp) ; divisor
      00031E 62               [ 2]  318 	div x,a  ; R:LL/U8
      00031F 6B 01            [ 1]  319 	ld (U8,sp),a ; save remainder
      000321 9F               [ 1]  320 	ld a,xl
      000322 C7 00 0E         [ 1]  321 	ld acc8,a
      000325 84               [ 1]  322 	pop a
      000326 85               [ 2]  323 	popw x
      000327 81               [ 4]  324 	ret
                                    325 
                                    326 
                                    327 ;-------------------------------
                                    328 ; div24 N/T   
                                    329 ; divide 24 bits integers
                                    330 ;  i1 i2 -- i1/i2 
                                    331 ;------------------------------
                           000001   332     DIVISOR=1
                           000004   333     CNTR=4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           000005   334     QSIGN=5
                           000006   335     RSIGN=6 
                           000006   336     VSIZE=6 
      000328                        337 div24:
      000328                        338     _vars VSIZE 
      000328 52 06            [ 2]    1     sub sp,#VSIZE 
      00032A 0F 06            [ 1]  339     clr (RSIGN,sp)
      00032C 0F 05            [ 1]  340     clr (QSIGN,sp)
      00032E                        341     _xpop 
      00032E 90 F6            [ 1]    1     ld a,(y)
      000330 93               [ 1]    2     ldw x,y 
      000331 EE 01            [ 2]    3     ldw x,(1,x)
      000333 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000337 4D               [ 1]  342     tnz a 
      000338 2A 05            [ 1]  343     jrpl 0$ 
      00033A 03 05            [ 1]  344     cpl (QSIGN,sp)
      00033C CD 02 06         [ 4]  345     call neg_ax
      00033F                        346 0$:
      00033F 6B 01            [ 1]  347     ld  (DIVISOR,sp),a
      000341 1F 02            [ 2]  348     ldw (DIVISOR+1,sp),x
      000343 1A 02            [ 1]  349     or a,(DIVISOR+1,sp)
      000345 1A 03            [ 1]  350     or a,(DIVISOR+2,sp)
      000347 26 05            [ 1]  351     jrne 1$ 
      000349 A6 04            [ 1]  352     ld a,#ERR_DIV0 
      00034B CC 16 92         [ 2]  353     jp tb_error 
      00034E                        354 1$: 
      00034E                        355     _at_top
      00034E 90 F6            [ 1]    1     ld a,(y)
      000350 93               [ 1]    2     ldw x,y 
      000351 EE 01            [ 2]    3     ldw x,(1,x)
      000353 4D               [ 1]  356     tnz a 
      000354 2A 07            [ 1]  357     jrpl 2$
      000356 CD 02 06         [ 4]  358     call neg_ax
      000359 03 05            [ 1]  359     cpl (QSIGN,sp)
      00035B 03 06            [ 1]  360     cpl (RSIGN,sp)
      00035D                        361 2$: 
      00035D C7 00 0C         [ 1]  362     ld acc24,a 
      000360 CF 00 0D         [ 2]  363     ldw acc16,x 
      000363 A6 18            [ 1]  364     ld a,#24 
      000365 6B 04            [ 1]  365     ld (CNTR,sp),a
      000367 7B 01            [ 1]  366     ld a,(DIVISOR,sp)
      000369 1E 02            [ 2]  367     ldw x,(DIVISOR+1,sp)
      00036B CD 01 D7         [ 4]  368     call cp24_ax ; A:X-acc24 ?
      00036E 23 14            [ 2]  369     jrule 22$ 
                                    370 ; quotient=0, remainder=divisor      
      000370 C6 00 0C         [ 1]  371     ld a,acc24 
      000373 CE 00 0D         [ 2]  372     ldw x,acc16 
      000376 72 5F 00 0C      [ 1]  373     clr acc24 
      00037A 72 5F 00 0D      [ 1]  374     clr acc16 
      00037E 72 5F 00 0E      [ 1]  375     clr acc8 
      000382 20 2E            [ 2]  376     jra 6$
      000384                        377 22$:     
      000384 4F               [ 1]  378     clr a 
      000385 5F               [ 1]  379     clrw x 
      000386 98               [ 1]  380     rcf  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000387                        381 3$: 
      000387 72 59 00 0E      [ 1]  382     rlc acc8 
      00038B 72 59 00 0D      [ 1]  383     rlc acc16
      00038F 72 59 00 0C      [ 1]  384     rlc acc24 
      000393 59               [ 2]  385     rlcw x  
      000394 49               [ 1]  386     rlc a
      000395 72 F0 02         [ 2]  387 4$: subw x,(DIVISOR+1,sp) 
      000398 12 01            [ 1]  388     sbc a,(DIVISOR,sp)
      00039A 24 05            [ 1]  389     jrnc 5$
      00039C 72 FB 02         [ 2]  390     addw x,(DIVISOR+1,sp)
      00039F 19 01            [ 1]  391     adc a,(DIVISOR,sp)
      0003A1                        392 5$: ; shift carry in QUOTIENT 
      0003A1 8C               [ 1]  393     ccf
      0003A2 0A 04            [ 1]  394     dec (CNTR,sp)
      0003A4 26 E1            [ 1]  395     jrne 3$ 
      0003A6 72 59 00 0E      [ 1]  396     rlc acc8 
      0003AA 72 59 00 0D      [ 1]  397     rlc acc16 
      0003AE 72 59 00 0B      [ 1]  398     rlc acc32 
      0003B2                        399 6$:    
      0003B2 6B 01            [ 1]  400     ld (DIVISOR,sp),a 
      0003B4 1F 02            [ 2]  401     ldw (DIVISOR+1,sp),x 
      0003B6 C6 00 0C         [ 1]  402     ld a,acc24 
      0003B9 CE 00 0D         [ 2]  403     ldw x,acc16 
      0003BC 0D 05            [ 1]  404     tnz (QSIGN,sp)
      0003BE 27 03            [ 1]  405     jreq 8$
      0003C0 CD 02 06         [ 4]  406     call neg_ax 
      0003C3                        407 8$: 
      0003C3                        408     _store_top 
      0003C3 90 F7            [ 1]    1     ld (y),a 
      0003C5 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003C8 7B 01            [ 1]  409     ld a,(DIVISOR,sp)
      0003CA 1E 02            [ 2]  410     ldw x,(DIVSOR+1,sp)
      0003CC                        411 81$:
      0003CC 0D 06            [ 1]  412     tnz (RSIGN,sp)
      0003CE 27 03            [ 1]  413     jreq 9$
      0003D0 CD 02 06         [ 4]  414     call neg_ax       
      0003D3                        415 9$: _drop VSIZE 
      0003D3 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003D5 81               [ 4]  416     ret 
                                    417 
                                    418 
                                    419 ;-------------------------------
                                    420 ; mod24 A:X % acc24 
                                    421 ; remainder 24 bits integers 
                                    422 ; input:
                                    423 ;    acc24   dividend 
                                    424 ;    A:X     divisor 
                                    425 ; output:
                                    426 ;    acc24   acc24 % A:X 
                                    427 ;------------------------------
      0003D6                        428 mod24:
      0003D6 CD 03 28         [ 4]  429     call div24 
      0003D9                        430     _store_top  ; replace quotient by remainder 
      0003D9 90 F7            [ 1]    1     ld (y),a 
      0003DB 90 EF 01         [ 2]    2     ldw (1,y),x     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0003DE 81               [ 4]  431     ret 
                                    432 
                                    433 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003DF                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003DF                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003DF                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003DF                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003DF                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003DF                         37 prt_regs::
      0003DF AE 04 22         [ 2]   38 	ldw x,#regs_state 
      0003E2 CD 09 A2         [ 4]   39 	call puts
                                     40 ; register PC
      0003E5 16 01            [ 2]   41 	ldw y,(1,sp)
      0003E7 AE 05 56         [ 2]   42 	ldw x,#REG_EPC 
      0003EA CD 04 A7         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003ED 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003EF AE 05 67         [ 2]   46 	ldw x,#REG_CC 
      0003F2 CD 04 85         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003F5 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003F7 AE 05 63         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0003FA CD 04 85         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003FD 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003FF AE 05 5F         [ 2]   54 	ldw x,#REG_X 
      000402 CD 04 A7         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      000405 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      000407 AE 05 5B         [ 2]   58 	ldw x,#REG_Y 
      00040A CD 04 A7         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      00040D 90 96            [ 1]   61 	ldw y,sp
      00040F 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      000413 AE 05 6C         [ 2]   63 	ldw x,#REG_SP
      000416 CD 04 A7         [ 4]   64 	call prt_reg16
      000419 A6 0D            [ 1]   65 	ld a,#CR 
      00041B CD 09 45         [ 4]   66 	call putc
      00041E CD 09 45         [ 4]   67 	call putc   
      000421 81               [ 4]   68 	ret 
                                     69 
                                     70 
      000422 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000449                         81 prt_peek::
      000449 89               [ 2]   82 	pushw x 
      00044A 35 10 00 0A      [ 1]   83 	mov base,#16 
      00044E CD 17 E6         [ 4]   84 	call prt_i16  
      000451 A6 3A            [ 1]   85 	ld a,#': 
      000453 CD 09 45         [ 4]   86 	call putc 
      000456 A6 20            [ 1]   87 	ld a,#SPACE 
      000458 CD 09 45         [ 4]   88 	call putc 
      00045B 85               [ 2]   89 	popw x 
      00045C F6               [ 1]   90 	ld a,(x)
      00045D 5F               [ 1]   91 	clrw x 
      00045E 97               [ 1]   92 	ld xl,a 
      00045F 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000463 CD 17 E6         [ 4]   94 	call prt_i16 
      000466 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000467                        102 ledon:
      000467 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      00046B 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      00046C                        107 ledoff:
      00046C 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      000470 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000471                        112 ledtoggle:
      000471 A6 20            [ 1]  113     ld a,#LED2_MASK
      000473 C8 50 0A         [ 1]  114     xor a,PC_ODR
      000476 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000479 81               [ 4]  116     ret 
                                    117 
      00047A                        118 left_paren:
      00047A A6 20            [ 1]  119 	ld a,#SPACE 
      00047C CD 09 45         [ 4]  120 	call putc
      00047F A6 28            [ 1]  121 	ld a,#'( 
      000481 CD 09 45         [ 4]  122 	call putc 	
      000484 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000485                        133 prt_reg8:
      000485 88               [ 1]  134 	push a 
      000486 CD 09 A2         [ 4]  135 	call puts 
      000489 7B 01            [ 1]  136 	ld a,(1,sp) 
      00048B 5F               [ 1]  137 	clrw x 
      00048C 97               [ 1]  138 	ld xl,a 
      00048D 35 10 00 0A      [ 1]  139 	mov base,#16
      000491 CD 17 E6         [ 4]  140 	call prt_i16  
      000494 CD 04 7A         [ 4]  141 	call left_paren 
      000497 84               [ 1]  142 	pop a 
      000498 5F               [ 1]  143 	clrw x 
      000499 97               [ 1]  144 	ld xl,a 
      00049A 35 0A 00 0A      [ 1]  145 	mov base,#10 
      00049E CD 17 E6         [ 4]  146 	call prt_i16  
      0004A1 A6 29            [ 1]  147 	ld a,#') 
      0004A3 CD 09 45         [ 4]  148 	call putc
      0004A6 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      0004A7                        159 prt_reg16: 
      0004A7 90 89            [ 2]  160 	pushw y 
      0004A9 CD 09 A2         [ 4]  161 	call puts 
      0004AC 1E 01            [ 2]  162 	ldw x,(1,sp) 
      0004AE 35 10 00 0A      [ 1]  163 	mov base,#16 
      0004B2 CD 17 E6         [ 4]  164 	call prt_i16  
      0004B5 CD 04 7A         [ 4]  165 	call left_paren 
      0004B8 85               [ 2]  166 	popw x 
      0004B9 35 0A 00 0A      [ 1]  167 	mov base,#10 
      0004BD CD 17 E6         [ 4]  168 	call prt_i16  
      0004C0 A6 29            [ 1]  169 	ld a,#') 
      0004C2 CD 09 45         [ 4]  170 	call putc
      0004C5 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      0004C6                        177 print_registers:
      0004C6 AE 05 19         [ 2]  178 	ldw x,#STATES
      0004C9 CD 09 A2         [ 4]  179 	call puts
                                    180 ; print EPC 
      0004CC AE 05 56         [ 2]  181 	ldw x, #REG_EPC
      0004CF CD 09 A2         [ 4]  182 	call puts 
      0004D2 7B 0B            [ 1]  183 	ld a, (11,sp)
      0004D4 C7 00 0E         [ 1]  184 	ld acc8,a 
      0004D7 7B 0A            [ 1]  185 	ld a, (10,sp) 
      0004D9 C7 00 0D         [ 1]  186 	ld acc16,a 
      0004DC 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004DE C7 00 0C         [ 1]  188 	ld acc24,a
      0004E1 5F               [ 1]  189 	clrw x  
      0004E2 A6 10            [ 1]  190 	ld a,#16
      0004E4 CD 17 FD         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004E7 AE 05 5F         [ 2]  193 	ldw x,#REG_X
      0004EA 16 05            [ 2]  194 	ldw y,(5,sp)
      0004EC CD 04 A7         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004EF AE 05 5B         [ 2]  197 	ldw x,#REG_Y
      0004F2 16 07            [ 2]  198 	ldw y, (7,sp)
      0004F4 CD 04 A7         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004F7 AE 05 63         [ 2]  201 	ldw x,#REG_A
      0004FA 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004FC CD 04 85         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004FF AE 05 67         [ 2]  205 	ldw x,#REG_CC 
      000502 7B 03            [ 1]  206 	ld a, (3,sp) 
      000504 CD 04 85         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      000507 AE 05 6C         [ 2]  209 	ldw x,#REG_SP
      00050A 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00050C 72 A9 00 0C      [ 2]  211 	addw y,#12
      000510 CD 04 A7         [ 4]  212 	call prt_reg16  
      000513 A6 0A            [ 1]  213 	ld a,#'\n' 
      000515 CD 09 45         [ 4]  214 	call putc
      000518 81               [ 4]  215 	ret
                                    216 
      000519 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000556 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      00055B 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00055F 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000563 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000567 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      00056C 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000571                        235 cmd_itf:
      000571 52 01            [ 2]  236 	sub sp,#VSIZE 
      000573 72 5F 00 18      [ 1]  237 	clr farptr 
      000577 72 5F 00 19      [ 1]  238 	clr farptr+1 
      00057B 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      00057F                        240 repl:
      00057F A6 0D            [ 1]  241 	ld a,#CR 
      000581 CD 09 45         [ 4]  242 	call putc 
      000584 A6 3F            [ 1]  243 	ld a,#'? 
      000586 CD 09 45         [ 4]  244 	call putc
      000589 72 5F 00 00      [ 1]  245 	clr in.w 
      00058D 72 5F 00 01      [ 1]  246 	clr in 
      000591 CD 0A A7         [ 4]  247 	call readln
      000594 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000598 90 F6            [ 1]  249 	ld a,(y)
      00059A 27 E3            [ 1]  250 	jreq repl  
      00059C 72 5C 00 01      [ 1]  251 	inc in 
      0005A0 CD 18 7C         [ 4]  252 	call to_upper 
      0005A3 A1 51            [ 1]  253 	cp a,#'Q 
      0005A5 26 17            [ 1]  254 	jrne test_p
      0005A7                        255 repl_exit:
      0005A7 72 5F 16 68      [ 1]  256 	clr tib 
      0005AB 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0005AF 72 5F 00 01      [ 1]  258 	clr in 
      0005B3                        259 	_drop #VSIZE 	
      0005B3 5B 01            [ 2]    1     addw sp,##VSIZE 
      0005B5 81               [ 4]  260 	ret  
      0005B6                        261 invalid:
      0005B6 AE 06 37         [ 2]  262 	ldw x,#invalid_cmd 
      0005B9 CD 09 A2         [ 4]  263 	call puts 
      0005BC 20 C1            [ 2]  264 	jra repl 
      0005BE                        265 test_p:	
      0005BE A1 50            [ 1]  266     cp a,#'P 
      0005C0 27 11            [ 1]  267 	jreq mem_peek
      0005C2 A1 53            [ 1]  268     cp a,#'S 
      0005C4 26 F0            [ 1]  269 	jrne invalid 
      0005C6                        270 print_string:	
      0005C6 CD 0F 0F         [ 4]  271 	call get_token
      0005C9 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      0005CB 26 E9            [ 1]  273 	jrne invalid 
      0005CD CD 09 A2         [ 4]  274 	call puts
      0005D0 CC 05 7F         [ 2]  275 	jp repl 	
      0005D3                        276 mem_peek:
      0005D3 A6 20            [ 1]  277 	ld a,#SPACE 
      0005D5 CD 0E FC         [ 4]  278 	call skip  	 
      0005D8 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005DC AE 16 B8         [ 2]  280 	ldw x,#pad 
      0005DF CD 13 F0         [ 4]  281 	call strcpy
      0005E2 AE 16 B8         [ 2]  282 	ldw x,#pad
      0005E5 CD 18 88         [ 4]  283 	call atoi24 	
      0005E8 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005EB CA 00 0D         [ 1]  285 	or a,acc16 
      0005EE CA 00 0E         [ 1]  286 	or a,acc8 
      0005F1 26 02            [ 1]  287 	jrne 1$ 
      0005F3 20 0C            [ 2]  288 	jra peek_byte  
      0005F5 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005F8 CF 00 18         [ 2]  290 	ldw farptr,x 
      0005FB C6 00 0E         [ 1]  291 	ld a,acc8 
      0005FE C7 00 1A         [ 1]  292 	ld farptr+2,a 
      000601                        293 peek_byte:
      000601 CD 06 46         [ 4]  294 	call print_farptr 
      000604 A6 08            [ 1]  295 	ld a,#8 
      000606 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      000608 5F               [ 1]  297 	clrw x 
      000609 CD 06 61         [ 4]  298 1$:	call fetchc  
      00060C 89               [ 2]  299 	pushw x 
      00060D C7 00 0E         [ 1]  300 	ld acc8,a 
      000610 5F               [ 1]  301 	clrw x 
      000611 CF 00 0C         [ 2]  302 	ldw acc24,x 
      000614 A6 90            [ 1]  303 	ld a,#16+128
      000616 CD 17 FD         [ 4]  304 	call prt_acc24
      000619 85               [ 2]  305 	popw x 
      00061A 0A 01            [ 1]  306 	dec (PSIZE,sp)
      00061C 26 EB            [ 1]  307 	jrne 1$ 
      00061E A6 08            [ 1]  308 	ld a,#8 
      000620 CB 00 1A         [ 1]  309 	add a,farptr+2 
      000623 C7 00 1A         [ 1]  310 	ld farptr+2,a
      000626 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000627 C9 00 19         [ 1]  312 	adc a,farptr+1 
      00062A C7 00 19         [ 1]  313 	ld farptr+1,a 
      00062D 4F               [ 1]  314 	clr a 
      00062E C9 00 18         [ 1]  315 	adc a,farptr 
      000631 C7 00 18         [ 1]  316 	ld farptr,a 
      000634 CC 05 7F         [ 2]  317 	jp repl  
                                    318 
      000637 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000646                        324 print_farptr:
      000646 C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      000649 C7 00 0E         [ 1]  326 	ld acc8,a 
      00064C CE 00 18         [ 2]  327 	ldw x,farptr 
      00064F CF 00 0C         [ 2]  328 	ldw acc24,x 
      000652 5F               [ 1]  329 	clrw x 
      000653 A6 10            [ 1]  330 	ld a,#16 
      000655 CD 17 FD         [ 4]  331 	call prt_acc24
      000658 A6 20            [ 1]  332 	ld a,#SPACE 
      00065A CD 09 45         [ 4]  333 	call putc 
      00065D CD 09 45         [ 4]  334 	call putc 
      000660 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000661                        346 fetchc: ; @C
      000661 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      000665 5C               [ 1]  348 	incw x
      000666 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000667                        360 number:
      000667 CD 0F 0F         [ 4]  361 	call get_token
      00066A A1 84            [ 1]  362 	cp a,#TK_INTGR
      00066C 27 03            [ 1]  363 	jreq 1$
      00066E CC 16 90         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000671 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000672                        380 show_row:
      000672 4D               [ 1]  381 	tnz a 
      000673 26 01            [ 1]  382 	jrne 1$
      000675 81               [ 4]  383 	ret 
      000676                        384 1$:	
      000676 89               [ 2]  385 	pushw x  
      000677 88               [ 1]  386 	push a 
      000678 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      00067C CD 17 E6         [ 4]  388 	call prt_i16 
      00067F A6 20            [ 1]  389 	ld a,#SPACE  
      000681 CD 09 45         [ 4]  390 	call putc
      000684                        391 row_loop:
      000684 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000686 F6               [ 1]  393 	ld a,(x)
      000687 5F               [ 1]  394 	clrw x 
      000688 97               [ 1]  395 	ld xl,a 
      000689 CD 17 E6         [ 4]  396 	call prt_i16 
      00068C 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      00068E 5C               [ 1]  398 	incw x 
      00068F 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000691 0A 01            [ 1]  400 	dec (CNT,sp)
      000693 26 EF            [ 1]  401 	jrne row_loop
      000695                        402 	_drop VSIZE  		
      000695 5B 03            [ 2]    1     addw sp,#VSIZE 
      000697 35 04 00 23      [ 1]  403 	mov tab_width,#4
      00069B A6 0D            [ 1]  404 	ld a,#CR 
      00069D CD 09 45         [ 4]  405 	call putc 
      0006A0 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0006A1                        419 hex_dump:
      0006A1 88               [ 1]  420 	push a 
      0006A2                        421 	_vars VSIZE
      0006A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0006A4 C6 00 0A         [ 1]  422 	ld a,base
      0006A7 6B 03            [ 1]  423 	ld (BASE,sp),a 
      0006A9 35 10 00 0A      [ 1]  424 	mov base,#16
      0006AD C6 00 23         [ 1]  425 	ld a,tab_width 
      0006B0 6B 04            [ 1]  426 	ld (TABW,sp),a
      0006B2 A6 0D            [ 1]  427 	ld a,#CR 
      0006B4 CD 09 45         [ 4]  428 	call putc 
      0006B7 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      0006B9 A6 10            [ 1]  430 	ld a,#16
      0006BB 90 A3 00 10      [ 2]  431 	cpw y,#16
      0006BF 2A 02            [ 1]  432 	jrpl 2$
      0006C1 90 9F            [ 1]  433 	ld a,yl
      0006C3                        434 2$: 	
      0006C3 CD 06 72         [ 4]  435 	call show_row 
      0006C6 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      0006C8 72 A2 00 10      [ 2]  437 	subw y,#16 
      0006CC 90 A3 00 01      [ 2]  438 	cpw y,#1
      0006D0 2A E5            [ 1]  439 	jrpl 1$
      0006D2 7B 03            [ 1]  440 	ld a,(BASE,sp)
      0006D4 C7 00 0A         [ 1]  441 	ld base,a
      0006D7 7B 04            [ 1]  442 	ld a,(TABW,sp)
      0006D9 C7 00 23         [ 1]  443 	ld tab_width,a 
      0006DC                        444 	_drop VSIZE
      0006DC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006DE 84               [ 1]  445 	pop a 
      0006DF 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006E0                         45 unlock_eeprom:
      0006E0 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006E5 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006E9 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006ED 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006F1 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006F5 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006FA 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006FB                         62 unlock_flash:
      0006FB 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      000700 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000704 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000708 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00070C 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000710 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000715 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      000716                         76 row_erase:
      000716 88               [ 1]   77 	push a 
      000717 90 89            [ 2]   78 	pushw y 
      000719 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00071D 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000721 4F               [ 1]   81 	clr a 
      000722 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000724 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      000728 90 5C            [ 1]   84     incw y
      00072A 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      00072E 90 5C            [ 1]   86     incw y
      000730 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      000734 90 5C            [ 1]   88     incw y
      000736 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      00073A 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073F 90 85            [ 2]   91 	popw y 
      000741 84               [ 1]   92 	pop a 
      000742 81               [ 4]   93 	ret
      000743                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000743                         97 move_erase_to_ram:
      000743 89               [ 2]   98 	pushw x 
      000744 90 89            [ 2]   99 	pushw y 
      000746 AE 07 43         [ 2]  100 	ldw x,#row_erase_end 
      000749 1D 07 16         [ 2]  101 	subw x,#row_erase
      00074C CF 00 0D         [ 2]  102 	ldw acc16,x 
      00074F AE 16 68         [ 2]  103 	ldw x,#tib 
      000752 90 AE 07 16      [ 2]  104 	ldw y,#row_erase 
      000756 CD 14 00         [ 4]  105 	call move
      000759 90 85            [ 2]  106 	popw y
      00075B 85               [ 2]  107 	popw x
      00075C 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00075D                        123 program_row:
      00075D 88               [ 1]  124 	push a 
      00075E 90 89            [ 2]  125 	pushw y 
      000760 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000762 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000766 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00076A 90 5F            [ 1]  130 	clrw y 
      00076C F6               [ 1]  131 1$:	ld a,(x)
      00076D 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000771 5C               [ 1]  133 	incw x 
      000772 90 5C            [ 1]  134 	incw y 
      000774 0A 01            [ 1]  135 	dec (BCNT,sp)
      000776 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      000778 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00077D                        139 	_drop 1 
      00077D 5B 01            [ 2]    1     addw sp,#1 
      00077F 90 85            [ 2]  140 	popw y 
      000781 84               [ 1]  141 	pop a 
      000782 81               [ 4]  142 	ret 
      000783                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000783                        149 move_prg_to_ram:
      000783 89               [ 2]  150 	pushw x 
      000784 90 89            [ 2]  151 	pushw y 
      000786 AE 07 83         [ 2]  152 	ldw x,#program_row_end 
      000789 1D 07 5D         [ 2]  153 	subw x,#program_row 
      00078C CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00078F AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000792 90 AE 07 5D      [ 2]  156 	ldw y,#program_row ; source address 
      000796 CD 14 00         [ 4]  157 	call move
      000799 90 85            [ 2]  158 	popw y 
      00079B 85               [ 2]  159 	popw x  
      00079C 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00079D                        169 write_buffer:
      00079D 89               [ 2]  170 	pushw x 
      00079E 72 5D 00 18      [ 1]  171 	tnz farptr 
      0007A2 26 0D            [ 1]  172 	jrne to_flash 
      0007A4 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      0007A7 A3 35 80         [ 2]  174 	cpw x,#app_space  
      0007AA 24 05            [ 1]  175 	jruge to_flash 
      0007AC                        176 to_eeprom:
      0007AC CD 06 E0         [ 4]  177 	call unlock_eeprom
      0007AF 20 03            [ 2]  178 	jra do_programming
      0007B1                        179 to_flash:
      0007B1 CD 06 FB         [ 4]  180 	call unlock_flash
      0007B4                        181 do_programming:
      0007B4 85               [ 2]  182 	popw x 
      0007B5 CD 16 68         [ 4]  183 	call tib
      0007B8 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0007BC 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0007C0 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0007C1                        197 block_erase:
      0007C1 89               [ 2]  198 	pushw x 
      0007C2 C6 00 18         [ 1]  199 	ld a,farptr 
      0007C5 26 14            [ 1]  200 	jrne erase_flash
      0007C7 CE 00 19         [ 2]  201 	ldw x,farptr+1
      0007CA A3 35 80         [ 2]  202 	cpw x,#app_space 
      0007CD 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      0007CF CD 06 E0         [ 4]  205 	call unlock_eeprom 
      0007D2 CD 16 68         [ 4]  206 	call tib 
      0007D5 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007D9 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007DB                        210 erase_flash:
      0007DB CD 06 FB         [ 4]  211 	call unlock_flash 
      0007DE CD 16 68         [ 4]  212 	call tib 
      0007E1 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E5                        214 erase_exit: 
      0007E5 85               [ 2]  215 	popw x 
      0007E6 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007E7                        232 write_byte:
      0007E7 90 89            [ 2]  233 	pushw y
      0007E9                        234 	_vars VSIZE
      0007E9 52 02            [ 2]    1     sub sp,#VSIZE 
      0007EB 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007ED 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007EF 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007F3 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007F7 26 14            [ 1]  241 	jrne write_flash
      0007F9 90 A3 35 80      [ 2]  242     cpw y,#app_space 	 
      0007FD 24 0E            [ 1]  243     jruge write_flash
      0007FF 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000803 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      000805 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      000809 22 51            [ 1]  247 	jrugt write_exit
      00080B 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      00080D                        250 write_flash:
      00080D CD 06 FB         [ 4]  251 	call unlock_flash 
      000810 9B               [ 1]  252 1$:	sim 
      000811 7B 01            [ 1]  253 	ld a,(BTW,sp)
      000813 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      000817 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081C 9A               [ 1]  256     rim 
      00081D 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000821 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      000823                        260 write_eeprom:
      000823 CD 06 E0         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      000826 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      00082A 2B 08            [ 1]  264 	jrmi 1$
      00082C 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      000830 2A 02            [ 1]  266 	jrpl 1$
      000832 03 02            [ 1]  267 	cpl (OPT,sp)
      000834                        268 1$: 
      000834 0D 02            [ 1]  269     tnz (OPT,sp)
      000836 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000838 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      00083C 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000840                        274 2$: 
      000840 7B 01            [ 1]  275     ld a,(BTW,sp)
      000842 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000846 0D 02            [ 1]  277     tnz (OPT,sp)
      000848 27 08            [ 1]  278     jreq 3$
      00084A 5C               [ 1]  279     incw x
      00084B 7B 01            [ 1]  280     ld a,(BTW,sp)
      00084D 43               [ 1]  281     cpl a
      00084E 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000852 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000857 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      00085C                        285 write_exit:
      00085C                        286 	_drop VSIZE 
      00085C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00085E 90 85            [ 2]  287 	popw y
      000860 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000861                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000861                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000861                        309 write_block::
      000861 88               [ 1]  310 	push a 
      000862                        311 	_vars VSIZE
      000862 52 02            [ 2]    1     sub sp,#VSIZE 
      000864 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      000866 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000868 27 13            [ 1]  314 	jreq 9$
      00086A 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      00086C 90 F6            [ 1]  316 	ld a,(y)
      00086E CD 07 E7         [ 4]  317 	call write_byte 
      000871 5C               [ 1]  318 	incw x 
      000872 90 5C            [ 1]  319 	incw y 
      000874 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000876 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000878 5A               [ 2]  322 	decw x
      000879 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      00087B 26 ED            [ 1]  324 	jrne 1$
      00087D                        325 9$:
      00087D 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00087F CD 08 B7         [ 4]  327 	call incr_farptr
      000882                        328 	_drop VSIZE
      000882 5B 02            [ 2]    1     addw sp,#VSIZE 
      000884 84               [ 1]  329 	pop a 
      000885 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000886                        347 write_nbytes:
      000886 90 89            [ 2]  348 	pushw y
      000888 88               [ 1]  349 	push a 
      000889 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00088B 5F               [ 1]  351 	clrw x 
      00088C                        352 1$:  
      00088C 90 F6            [ 1]  353 	ld a,(y)
      00088E 90 5C            [ 1]  354 	incw y
      000890 CD 07 E7         [ 4]  355 	call write_byte 
      000893 5C               [ 1]  356 	incw x 
      000894 0A 01            [ 1]  357 	dec (1,sp)  
      000896 26 F4            [ 1]  358 	jrne 1$ 
      000898 84               [ 1]  359 9$: pop a 
      000899 90 85            [ 2]  360 	popw y 
      00089B 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      00089C                        370 row_align:
      00089C A6 7F            [ 1]  371 	ld a,#0x7f 
      00089E C4 00 1A         [ 1]  372 	and a,farptr+2 
      0008A1 27 13            [ 1]  373 	jreq 1$ 
      0008A3 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      0008A6 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      0008A9 24 04            [ 1]  376 	jrnc 0$
      0008AB 72 5C 00 18      [ 1]  377 	inc farptr 
      0008AF 9F               [ 1]  378 0$: ld a,xl 
      0008B0 A4 80            [ 1]  379 	and a,#0x80
      0008B2 97               [ 1]  380 	ld xl,a
      0008B3 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      0008B6 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      0008B7                        390 incr_farptr:
      0008B7 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      0008BB 24 04            [ 1]  392 	jrnc 1$
      0008BD 72 5C 00 18      [ 1]  393 	inc farptr 
      0008C1 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      0008C4 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      0008C5                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0008C5 5F               [ 1]  406 	clrw x 
      0008C6 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      0008CA 26 06            [ 1]  408 	jrne 2$
      0008CC 5C               [ 1]  409 	incw x 
      0008CD A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      0008D0 25 F4            [ 1]  411 	jrult 1$ 
      0008D2 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      0008D3                         66 Uart1RxHandler: ; console receive char 
      0008D3 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008D8 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008DB A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008DD 26 06            [ 1]   70 	jrne 2$
      0008DF CD 09 45         [ 4]   71 	call putc 
      0008E2 CC 00 57         [ 2]   72 	jp user_interrupted
      0008E5                         73 2$:
      0008E5 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008E7 26 03            [ 1]   75 	jrne 3$
      0008E9 CC 00 C3         [ 2]   76 	jp cold_start 	
      0008EC 88               [ 1]   77 3$:	push a 
      0008ED A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008EF CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008F2 5F               [ 1]   80 	clrw x 
      0008F3 97               [ 1]   81 	ld xl,a 
      0008F4 84               [ 1]   82 	pop a 
      0008F5 F7               [ 1]   83 	ld (x),a 
      0008F6 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008F9 4C               [ 1]   85 	inc a 
      0008FA A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008FC C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0008FF 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      000900                         97 uart1_init:
      000900 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000904 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000908 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      00090C 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000910                        103 uart1_set_baud: 
      000910 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000911 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      000913 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000916 27 0A            [ 1]  109 	jreq 2$ 
      000918                        110 1$: ; 8 Mhz 	
      000918 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      00091C 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      000920 20 08            [ 2]  113 	jra 3$
      000922                        114 2$: ; 16 Mhz 	
      000922 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      000926 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      00092A                        117 3$:
      00092A 72 5F 52 31      [ 1]  118     clr UART1_DR
      00092E 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000932 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000936 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      00093B 72 5F 00 2E      [ 1]  122     clr rx1_head 
      00093F 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000943 84               [ 1]  124 	pop a  
      000944 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000945                        133 putc:: ; console output always on UART1
      000945                        134 uart1_putc:: 
      000945 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      00094A C7 52 31         [ 1]  136 	ld UART1_DR,a 
      00094D 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      00094E                        148 qgetc::
      00094E                        149 uart1_qgetc::
      00094E C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000951 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      000954 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000955                        161 getc:: ;console input
      000955                        162 uart1_getc::
      000955 CD 09 4E         [ 4]  163 	call uart1_qgetc
      000958 27 FB            [ 1]  164 	jreq uart1_getc 
      00095A 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      00095B A6 26            [ 1]  167 	ld a,#rx1_queue
      00095D CB 00 2E         [ 1]  168 	add a,rx1_head 
      000960 5F               [ 1]  169 	clrw x  
      000961 97               [ 1]  170 	ld xl,a 
      000962 F6               [ 1]  171 	ld a,(x)
      000963 88               [ 1]  172 	push a
      000964 C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000967 4C               [ 1]  174 	inc a 
      000968 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      00096A C7 00 2E         [ 1]  176 	ld rx1_head,a 
      00096D 84               [ 1]  177 	pop a  
      00096E 85               [ 2]  178 	popw x
      00096F 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000970 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      00097C                        207 get_escape:
      00097C CD 09 55         [ 4]  208     call getc 
      00097F A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000981 27 02            [ 1]  210     jreq 1$
      000983 4F               [ 1]  211     clr a
      000984 81               [ 4]  212     ret
      000985 CD 09 55         [ 4]  213 1$: call getc 
      000988 AE 09 70         [ 2]  214     ldw x,#convert_table
      00098B                        215 2$:
      00098B F1               [ 1]  216     cp a,(x)
      00098C 27 08            [ 1]  217     jreq 4$
      00098E 1C 00 02         [ 2]  218     addw x,#2
      000991 7D               [ 1]  219     tnz (x)
      000992 26 F7            [ 1]  220     jrne 2$
      000994 4F               [ 1]  221     clr a
      000995 81               [ 4]  222     ret 
      000996 5C               [ 1]  223 4$: incw x 
      000997 F6               [ 1]  224     ld a,(x)
      000998 A1 84            [ 1]  225     cp a,#SUP
      00099A 26 05            [ 1]  226     jrne 5$
      00099C 88               [ 1]  227     push a 
      00099D CD 09 55         [ 4]  228     call getc
      0009A0 84               [ 1]  229     pop a 
      0009A1                        230 5$:
      0009A1 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      0009A2                        241 puts::
      0009A2 F6               [ 1]  242     ld a,(x)
      0009A3 27 06            [ 1]  243 	jreq 1$
      0009A5 CD 09 45         [ 4]  244 	call putc 
      0009A8 5C               [ 1]  245 	incw x 
      0009A9 20 F7            [ 2]  246 	jra puts 
      0009AB 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      0009AC                        258 bksp:
      0009AC A6 08            [ 1]  259 	ld a,#BS 
      0009AE CD 09 45         [ 4]  260 	call putc 
      0009B1 A6 20            [ 1]  261 	ld a,#SPACE 
      0009B3 CD 09 45         [ 4]  262 	call putc 
      0009B6 A6 08            [ 1]  263 	ld a,#BS 
      0009B8 CD 09 45         [ 4]  264 	call putc 
      0009BB 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      0009BC                        274 delete_nchar:
      0009BC 88               [ 1]  275 	push a 
      0009BD 0D 01            [ 1]  276 0$:	tnz (1,sp)
      0009BF 27 07            [ 1]  277 	jreq 1$
      0009C1 CD 09 AC         [ 4]  278 	call bksp 
      0009C4 0A 01            [ 1]  279 	dec (1,sp)
      0009C6 20 F5            [ 2]  280 	jra 0$
      0009C8 84               [ 1]  281 1$:	pop a 
      0009C9 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      0009CA                        290 send_escape:
      0009CA A6 1B            [ 1]  291 	ld a,#ESC 
      0009CC CD 09 45         [ 4]  292 	call putc 
      0009CF A6 5B            [ 1]  293 	ld a,#'[
      0009D1 CD 09 45         [ 4]  294 	call putc 
      0009D4 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0009D5                        311 send_parameter:
      0009D5 89               [ 2]  312 	pushw x 
      0009D6 5F               [ 1]  313 	clrw x 
      0009D7 97               [ 1]  314 	ld xl,a 
      0009D8 A6 0A            [ 1]  315 	ld a,#10 
      0009DA 62               [ 2]  316 	div x,a 
      0009DB 95               [ 1]  317 	ld xh,a 
      0009DC 9F               [ 1]  318 	ld a,xl
      0009DD 4D               [ 1]  319     tnz a 
      0009DE 27 0B            [ 1]  320     jreq 2$
      0009E0 A1 09            [ 1]  321 	cp a,#9 
      0009E2 23 02            [ 2]  322 	jrule 1$
      0009E4 A6 39            [ 1]  323 	ld a,#'9
      0009E6                        324 1$:
      0009E6 AB 30            [ 1]  325 	add a,#'0 
      0009E8 CD 09 45         [ 4]  326 	call putc
      0009EB 9E               [ 1]  327 2$:	ld a,xh 
      0009EC AB 30            [ 1]  328 	add a,#'0
      0009EE CD 09 45         [ 4]  329 	call putc 
      0009F1 85               [ 2]  330 	popw x 
      0009F2 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009F3                        344 move_left:
      0009F3 88               [ 1]  345 	push a 
      0009F4 CD 09 CA         [ 4]  346 	call send_escape
      0009F7 84               [ 1]  347     pop a
      0009F8 CD 09 D5         [ 4]  348 	call send_parameter 
      0009FB A6 44            [ 1]  349 	ld a,#'D 
      0009FD CD 09 45         [ 4]  350 	call putc 
      000A00 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A01                        362 move_right:
      000A01 88               [ 1]  363 	push a 
      000A02 CD 09 CA         [ 4]  364 	call send_escape
      000A05 84               [ 1]  365     pop a
      000A06 CD 09 D5         [ 4]  366 	call send_parameter 
      000A09 A6 43            [ 1]  367 	ld a,#'C 
      000A0B CD 09 45         [ 4]  368 	call putc 
      000A0E 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      000A0F                        379 spaces::
      000A0F A6 20            [ 1]  380 	ld a,#SPACE 
      000A11 5D               [ 2]  381 1$:	tnzw x
      000A12 27 06            [ 1]  382 	jreq 9$
      000A14 CD 09 45         [ 4]  383 	call putc 
      000A17 5A               [ 2]  384 	decw x
      000A18 20 F7            [ 2]  385 	jra 1$
      000A1A                        386 9$: 
      000A1A 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      000A1B                        404 insert_char: 
      000A1B                        405 	_vars VSIZE 
      000A1B 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1D 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      000A1F 9E               [ 1]  407     ld a,xh 
      000A20 6B 01            [ 1]  408 	ld (IPOS,sp),a
      000A22 9F               [ 1]  409     ld a,xl 
      000A23 6B 03            [ 1]  410     ld (LLEN,sp),a  
      000A25 93               [ 1]  411     ldw x,y
      000A26 5C               [ 1]  412     incw x 
      000A27 7B 03            [ 1]  413     ld a,(LLEN,sp)
      000A29 10 01            [ 1]  414     sub a,(IPOS,sp)
      000A2B 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A2C C7 00 0E         [ 1]  416     ld acc8,a 
      000A2F 72 5F 00 0D      [ 1]  417     clr acc16
      000A33 CD 14 00         [ 4]  418     call move
      000A36 90 AE 16 68      [ 2]  419     ldw y,#tib 
      000A3A 7B 01            [ 1]  420     ld a,(IPOS,sp)
      000A3C C7 00 0E         [ 1]  421     ld acc8,a 
      000A3F 72 B9 00 0D      [ 2]  422     addw y,acc16 
      000A43 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      000A45 90 F7            [ 1]  424     ld (y),a
      000A47 90 5C            [ 1]  425     incw y  
      000A49 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000A4B CD 09 F3         [ 4]  427     call move_left
      000A4E AE 16 68         [ 2]  428     ldw x,#tib 
      000A51 CD 09 A2         [ 4]  429     call puts 
      000A54 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000A56 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000A58 CD 09 F3         [ 4]  432     call move_left 
      000A5B                        433 	_drop VSIZE 
      000A5B 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5D 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      000A5E                        447 delete_under:
      000A5E                        448 	_vars VSIZE 
      000A5E 52 02            [ 2]    1     sub sp,#VSIZE 
      000A60 6B 02            [ 1]  449     ld (LLEN,sp),a 
      000A62 9F               [ 1]  450     ld a,xl 
      000A63 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000A65 93               [ 1]  452     ldw x,y ; move destination
      000A66 90 5C            [ 1]  453     incw y  ; move source 
      000A68 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000A6A 10 01            [ 1]  455     sub a,(CPOS,sp)
      000A6C 4C               [ 1]  456     inc a ; move including zero at end.
      000A6D C7 00 0E         [ 1]  457     ld acc8,a 
      000A70 72 5F 00 0D      [ 1]  458     clr acc16 
      000A74 CD 14 00         [ 4]  459 	call move 
      000A77 90 AE 16 68      [ 2]  460     ldw y,#tib 
      000A7B 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000A7D C7 00 0E         [ 1]  462     ld acc8,a 
      000A80 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000A84 93               [ 1]  464     ldw x,y 
      000A85 CD 09 A2         [ 4]  465     call puts 
      000A88 A6 20            [ 1]  466     ld a,#SPACE  
      000A8A CD 09 45         [ 4]  467     call putc
      000A8D 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000A8F 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A91 CD 09 F3         [ 4]  470     call move_left 
      000A94 0A 02            [ 1]  471     dec (LLEN,sp)
      000A96                        472 	_drop VSIZE 
      000A96 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A98 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000A99                        485 delete_line:
      000A99 CD 09 CA         [ 4]  486     call send_escape
      000A9C A6 32            [ 1]  487 	ld a,#'2
      000A9E CD 09 45         [ 4]  488 	call putc 
      000AA1 A6 4B            [ 1]  489 	ld a,#'K 
      000AA3 CD 09 45         [ 4]  490 	call putc 
      000AA6 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000AA7                        523 readln::
      000AA7                        524 	_vars VSIZE 
      000AA7 52 04            [ 2]    1     sub sp,#VSIZE 
      000AA9 5F               [ 1]  525 	clrw x 
      000AAA 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000AAC 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      000AAE 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      000AB0 90 AE 16 68      [ 2]  529  	ldw y,#tib ; input buffer
      000AB4                        530 readln_loop:
      000AB4 CD 09 55         [ 4]  531 	call getc
      000AB7 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000AB9 A1 1B            [ 1]  533     cp a,#ESC 
      000ABB 26 05            [ 1]  534     jrne 0$
      000ABD CD 09 7C         [ 4]  535     call get_escape 
      000AC0 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      000AC2 A1 0D            [ 1]  537 0$:	cp a,#CR
      000AC4 26 03            [ 1]  538 	jrne 1$
      000AC6 CC 0C 50         [ 2]  539 	jp readln_quit
      000AC9 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000ACB 26 03            [ 1]  541 	jrne 2$ 
      000ACD CC 0C 50         [ 2]  542 	jp readln_quit
      000AD0                        543 2$:
      000AD0 A1 08            [ 1]  544 	cp a,#BS
      000AD2 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000AD4 0D 03            [ 1]  547     tnz (CPOS,sp)
      000AD6 27 DC            [ 1]  548     jreq readln_loop 
      000AD8 A6 01            [ 1]  549     ld a,#1 
      000ADA CD 09 F3         [ 4]  550     call move_left
      000ADD 0A 03            [ 1]  551     dec (CPOS,sp)
      000ADF 90 5A            [ 2]  552     decw y 
      000AE1 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      000AE3 CC 0B FC         [ 2]  554     jp 12$
      000AE6                        555 3$:
      000AE6 A1 04            [ 1]  556 	cp a,#CTRL_D
      000AE8 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000AEA CD 0A 99         [ 4]  559 	call delete_line 
      000AED 7B 03            [ 1]  560     ld a,(CPOS,sp)
      000AEF 4C               [ 1]  561     inc a 
      000AF0 CD 09 F3         [ 4]  562     call move_left 
      000AF3 A6 3E            [ 1]  563 	ld a,#'> 
      000AF5 CD 09 45         [ 4]  564 	call putc 
      000AF8 90 AE 16 68      [ 2]  565 	ldw y,#tib
      000AFC 90 7F            [ 1]  566 	clr (y)
      000AFE 0F 02            [ 1]  567 	clr (LL,sp)
      000B00 0F 03            [ 1]  568 	clr (CPOS,sp)
      000B02 20 B0            [ 2]  569 	jra readln_loop
      000B04                        570 4$:
      000B04 A1 12            [ 1]  571 	cp a,#CTRL_R 
      000B06 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000B08 0D 02            [ 1]  574 	tnz (LL,sp)
      000B0A 26 A8            [ 1]  575 	jrne readln_loop
      000B0C AE 16 68         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000B0F CD 13 D4         [ 4]  577 	call strlen 
      000B12 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000B16 27 9C            [ 1]  579 	jreq readln_loop
      000B18 6B 02            [ 1]  580 	ld (LL,sp),a 
      000B1A 6B 03            [ 1]  581     ld (CPOS,sp),a
      000B1C AE 16 68         [ 2]  582 	ldw x,#tib 
      000B1F CD 09 A2         [ 4]  583 	call puts
      000B22 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000B24 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000B27 20 8B            [ 2]  586 	jra readln_loop 
      000B29                        587 5$:
      000B29 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000B2B 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      000B2D AE 16 68         [ 2]  591 	ldw x,#tib 
      000B30 CD 18 88         [ 4]  592 	call atoi24
      000B33 CE 00 0D         [ 2]  593 	ldw x,acc16
      000B36 CD 0C 8A         [ 4]  594 	call search_lineno
      000B39 5D               [ 2]  595 	tnzw x 
      000B3A 26 0B            [ 1]  596 	jrne 51$
      000B3C 0F 02            [ 1]  597 	clr (LL,sp)
      000B3E 90 AE 16 68      [ 2]  598 	ldw y,#tib
      000B42 90 7F            [ 1]  599     clr (y) 	
      000B44 CC 0C 50         [ 2]  600 	jp readln_quit  
      000B47                        601 51$:
      000B47 CF 00 04         [ 2]  602 	ldw basicptr,x
      000B4A E6 02            [ 1]  603 	ld a,(2,x)
      000B4C C7 00 03         [ 1]  604 	ld count,a 
      000B4F 90 AE 16 68      [ 2]  605 	ldw y,#tib 
      000B53 CD 11 F8         [ 4]  606 	call decompile 
      000B56 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000B58 A6 0D            [ 1]  608 	ld a,#CR 
      000B5A CD 09 45         [ 4]  609 	call putc 
      000B5D A6 3E            [ 1]  610 	ld a,#'>
      000B5F CD 09 45         [ 4]  611 	call putc
      000B62 AE 16 68         [ 2]  612     ldw x,#tib  
      000B65 CD 13 D4         [ 4]  613 	call strlen 
      000B68 6B 02            [ 1]  614 	ld (LL,sp),a 
      000B6A CD 09 A2         [ 4]  615 	call puts 
      000B6D 90 93            [ 1]  616 	ldw y,x
      000B6F 7B 02            [ 1]  617     ld a,(LL,sp)
      000B71 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000B73 CC 0A B4         [ 2]  619 	jp readln_loop
      000B76                        620 6$:
      000B76 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000B78 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000B7A 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000B7C 11 02            [ 1]  625     cp a,(LL,sp)
      000B7E 2B 03            [ 1]  626     jrmi 61$
      000B80 CC 0A B4         [ 2]  627     jp readln_loop 
      000B83                        628 61$:
      000B83 A6 01            [ 1]  629     ld a,#1 
      000B85 CD 0A 01         [ 4]  630 	call move_right 
      000B88 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000B8A 90 5C            [ 1]  632     incw y 
      000B8C CC 0A B4         [ 2]  633     jp readln_loop 
      000B8F A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      000B91 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000B93 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000B95 26 03            [ 1]  638 	jrne 71$
      000B97 CC 0A B4         [ 2]  639 	jp readln_loop
      000B9A                        640 71$:
      000B9A A6 01            [ 1]  641     ld a,#1 
      000B9C CD 09 F3         [ 4]  642 	call move_left 
      000B9F 0A 03            [ 1]  643 	dec (CPOS,sp)
      000BA1 90 5A            [ 2]  644     decw y 
      000BA3 CC 0A B4         [ 2]  645 	jp readln_loop 
      000BA6 A1 82            [ 1]  646 8$: cp a,#HOME  
      000BA8 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000BAA 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000BAC CD 09 F3         [ 4]  650     call move_left 
      000BAF 0F 03            [ 1]  651 	clr (CPOS,sp)
      000BB1 90 AE 16 68      [ 2]  652     ldw y,#tib 
      000BB5 CC 0A B4         [ 2]  653 	jp readln_loop  
      000BB8 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000BBA 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000BBC 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      000BBE 11 02            [ 1]  658 	cp a,(LL,sp)
      000BC0 26 03            [ 1]  659 	jrne 91$
      000BC2 CC 0A B4         [ 2]  660 	jp readln_loop 
      000BC5                        661 91$:
      000BC5 7B 02            [ 1]  662 	ld a,(LL,sp)
      000BC7 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000BC9 CD 0A 01         [ 4]  664 	call move_right 
      000BCC 7B 02            [ 1]  665 	ld a,(LL,sp)
      000BCE 6B 03            [ 1]  666 	ld (CPOS,sp),a
      000BD0 90 AE 16 68      [ 2]  667     ldw y,#tib
      000BD4 72 5F 00 0D      [ 1]  668     clr acc16 
      000BD8 C7 00 0E         [ 1]  669     ld acc8,a 
      000BDB 72 B9 00 0D      [ 2]  670     addw y,acc16  
      000BDF CC 0A B4         [ 2]  671 	jp readln_loop 
      000BE2 A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000BE4 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000BE6 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000BE8 90 89            [ 2]  676 	pushw y 
      000BEA CD 24 7A         [ 4]  677 	call beep_1khz
      000BED 90 85            [ 2]  678 	popw y 
      000BEF CC 0A B4         [ 2]  679 	jp readln_loop 
      000BF2 A1 84            [ 1]  680 11$: cp a,#SUP 
      000BF4 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000BF6 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000BF8 11 02            [ 1]  684     cp a,(LL,sp)
      000BFA 2A 08            [ 1]  685     jrpl 13$
      000BFC                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000BFC 97               [ 1]  687     ld xl,a    ; cursor position 
      000BFD 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      000BFF CD 0A 5E         [ 4]  689     call delete_under
      000C02 0A 02            [ 1]  690     dec (LLEN,sp)
      000C04                        691 13$:
      000C04 CC 0A B4         [ 2]  692     jp readln_loop 
      000C07                        693 final_test:
      000C07 A1 20            [ 1]  694 	cp a,#SPACE
      000C09 2A 03            [ 1]  695 	jrpl accept_char
      000C0B CC 0A B4         [ 2]  696 	jp readln_loop
      000C0E                        697 accept_char:
      000C0E A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      000C10 11 02            [ 1]  699 	cp a, (LL,sp)
      000C12 2A 03            [ 1]  700 	jrpl 1$
      000C14 CC 0A B4         [ 2]  701 	jp readln_loop
      000C17 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000C19 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000C1B 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000C1D 11 02            [ 1]  706     cp a,(LL,sp)
      000C1F 27 12            [ 1]  707     jreq overwrite
      000C21 7B 02            [ 1]  708     ld a,(LL,sp)
      000C23 97               [ 1]  709     ld xl,a 
      000C24 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000C26 95               [ 1]  711     ld xh,a
      000C27 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000C29 CD 0A 1B         [ 4]  713     call insert_char
      000C2C 0C 02            [ 1]  714     inc (LLEN,sp)
      000C2E 0C 03            [ 1]  715     inc (CPOS,sp)
      000C30 CC 0A B4         [ 2]  716     jp readln_loop 
      000C33                        717 overwrite:
      000C33 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000C35 90 F7            [ 1]  719 	ld (y),a
      000C37 90 5C            [ 1]  720     incw y
      000C39 CD 09 45         [ 4]  721     call putc 
      000C3C 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      000C3E 11 02            [ 1]  723 	cp a,(LL,sp)
      000C40 2B 09            [ 1]  724 	jrmi 1$
      000C42 90 7F            [ 1]  725 	clr (y)
      000C44 0C 02            [ 1]  726 	inc (LL,sp)
      000C46 0C 03            [ 1]  727     inc (CPOS,sp)
      000C48 CC 0A B4         [ 2]  728 	jp readln_loop 
      000C4B                        729 1$:	
      000C4B 0C 03            [ 1]  730 	inc (CPOS,sp)
      000C4D CC 0A B4         [ 2]  731 	jp readln_loop 
      000C50                        732 readln_quit:
      000C50 90 AE 16 68      [ 2]  733 	ldw y,#tib
      000C54 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000C56 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000C59 90 7F            [ 1]  736     clr (y)
      000C5B 7B 02            [ 1]  737 	ld a,(LL,sp)
      000C5D C7 00 03         [ 1]  738 	ld count,a 
      000C60 A6 0D            [ 1]  739 	ld a,#CR
      000C62 CD 09 45         [ 4]  740 	call putc
      000C65                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C65 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C67 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000C68                        750 print_hex::
      000C68 88               [ 1]  751 	push a 
      000C69 4E               [ 1]  752 	swap a 
      000C6A CD 0C 7F         [ 4]  753 	call to_hex_char 
      000C6D CD 09 45         [ 4]  754 	call putc 
      000C70 7B 01            [ 1]  755     ld a,(1,sp) 
      000C72 CD 0C 7F         [ 4]  756 	call to_hex_char
      000C75 CD 09 45         [ 4]  757 	call putc
      000C78 A6 20            [ 1]  758 	ld a,#SPACE 
      000C7A CD 09 45         [ 4]  759 	call putc 
      000C7D 84               [ 1]  760 	pop a 
      000C7E 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      000C7F                        770 to_hex_char::
      000C7F A4 0F            [ 1]  771 	and a,#15 
      000C81 A1 09            [ 1]  772 	cp a,#9 
      000C83 23 02            [ 2]  773 	jrule 1$ 
      000C85 AB 07            [ 1]  774 	add a,#7
      000C87 AB 30            [ 1]  775 1$: add a,#'0 
      000C89 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C8A                         51 search_lineno::
      000C8A                         52 	_vars VSIZE
      000C8A 52 02            [ 2]    1     sub sp,#VSIZE 
      000C8C 0F 01            [ 1]   53 	clr (LL,sp)
      000C8E 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C92 4D               [ 1]   55 	tnz a 
      000C93 27 04            [ 1]   56 	jreq search_ln_loop
      000C95 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C99                         58 search_ln_loop:
      000C99 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C9D 2A 10            [ 1]   60 	jrpl 8$
      000C9F 90 F3            [ 1]   61 	cpw x,(y)
      000CA1 27 0E            [ 1]   62 	jreq 9$
      000CA3 2B 0A            [ 1]   63 	jrmi 8$ 
      000CA5 90 E6 02         [ 1]   64 	ld a,(2,y)
      000CA8 6B 02            [ 1]   65 	ld (LB,sp),a 
      000CAA 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000CAD 20 EA            [ 2]   67 	jra search_ln_loop 
      000CAF                         68 8$: 
      000CAF 5F               [ 1]   69 	clrw x 	
      000CB0 51               [ 1]   70 	exgw x,y 
      000CB1                         71 9$: _drop VSIZE
      000CB1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CB3 51               [ 1]   72 	exgw x,y   
      000CB4 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000CB5                         83 del_line: 
      000CB5                         84 	_vars VSIZE 
      000CB5 52 04            [ 2]    1     sub sp,#VSIZE 
      000CB7 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000CB9 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000CBB 0F 01            [ 1]   87 	clr (LLEN,sp)
      000CBD 90 93            [ 1]   88 	ldw y,x  
      000CBF 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000CC2 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000CC4 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000CC8 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000CCB 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000CCF 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000CD1 CD 14 00         [ 4]   95 	call move
      000CD4 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000CD8 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000CDB 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000CDF                         99 	_drop VSIZE     
      000CDF 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CE1 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000CE2                        115 create_gap:
      000CE2                        116 	_vars VSIZE
      000CE2 52 06            [ 2]    1     sub sp,#VSIZE 
      000CE4 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CE6 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CE8 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CEC 90 93            [ 1]  120 	ldw y,x ; SRC
      000CEE 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CF2 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CF4 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CF7 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CFA CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CFD 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CFF CD 14 00         [ 4]  128 	call move
      000D02 CE 00 1D         [ 2]  129 	ldw x,txtend
      000D05 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000D08 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000D0B                        132 9$:	_drop VSIZE 
      000D0B 5B 06            [ 2]    1     addw sp,#VSIZE 
      000D0D 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000D0E                        150 insert_line:
      000D0E                        151 	_vars VSIZE 
      000D0E 52 08            [ 2]    1     sub sp,#VSIZE 
      000D10 CE 00 1D         [ 2]  152 	ldw x,txtend  
      000D13 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000D16 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000D18 AE 00 02         [ 2]  156 	ldw x,#2 
      000D1B 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000D1F A1 03            [ 1]  158 	cp a,#3
      000D21 27 5A            [ 1]  159 	jreq insert_ln_exit
      000D23 5F               [ 1]  160 	clrw x 
      000D24 97               [ 1]  161 	ld xl,a
      000D25 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000D27 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000D2A 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000D2C CE 00 1D         [ 2]  165 	ldw x,txtend 
      000D2F 20 38            [ 2]  166 	jra 4$
      000D31 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000D35 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000D37 AE 00 02         [ 2]  170 	ldw x,#2 
      000D3A 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000D3E 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000D3F 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000D41 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000D43 4F               [ 1]  177 	clr a 
      000D44 CD 0C 8A         [ 4]  178 	call search_lineno 
      000D47 5D               [ 2]  179 	tnzw x 
      000D48 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D4A 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D4C 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D4E 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D50 CD 0C B5         [ 4]  188 	call del_line
      000D53                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D53 A6 03            [ 1]  192 	ld a,#3
      000D55 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D57 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D59 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D5B C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D5E 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D60 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D62 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D64 CD 0C E2         [ 4]  204 	call create_gap
      000D67 20 06            [ 2]  205 	jra 5$
      000D69                        206 4$: 
      000D69 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D6C CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D6F 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D71 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D74 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D78 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D7A CD 14 00         [ 4]  214 	call move 
      000D7D                        215 insert_ln_exit:	
      000D7D                        216 	_drop VSIZE
      000D7D 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D7F 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D80                        233 parse_quote: 
      000D80                        234 	_vars VSIZE 
      000D80 52 02            [ 2]    1     sub sp,#VSIZE 
      000D82 4F               [ 1]  235 	clr a
      000D83 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D85                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000D85 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D88 27 24            [ 1]  239 	jreq 6$
      000D8A 72 5C 00 01      [ 1]  240 	inc in 
      000D8E 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D90 A6 5C            [ 1]  242 	ld a,#'\
      000D92 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D94 26 0A            [ 1]  244 	jrne 3$
      000D96 0F 01            [ 1]  245 	clr (PREV,sp)
      000D98 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D9A AD 1C            [ 4]  247 	callr convert_escape
      000D9C F7               [ 1]  248 	ld (x),a 
      000D9D 5C               [ 1]  249 	incw x 
      000D9E 20 E5            [ 2]  250 	jra 2$
      000DA0                        251 3$:
      000DA0 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000DA2 A1 5C            [ 1]  253 	cp a,#'\'
      000DA4 27 DD            [ 1]  254 	jreq 1$
      000DA6 A1 22            [ 1]  255 	cp a,#'"
      000DA8 27 04            [ 1]  256 	jreq 6$ 
      000DAA F7               [ 1]  257 	ld (x),a 
      000DAB 5C               [ 1]  258 	incw x 
      000DAC 20 D7            [ 2]  259 	jra 2$
      000DAE                        260 6$:
      000DAE 7F               [ 1]  261 	clr (x)
      000DAF 5C               [ 1]  262 	incw x 
      000DB0 90 93            [ 1]  263 	ldw y,x 
      000DB2 5F               [ 1]  264 	clrw x 
      000DB3 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000DB5                        266 	_drop VSIZE
      000DB5 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DB7 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000DB8                        278 convert_escape:
      000DB8 89               [ 2]  279 	pushw x 
      000DB9 AE 0D CD         [ 2]  280 	ldw x,#escaped 
      000DBC F1               [ 1]  281 1$:	cp a,(x)
      000DBD 27 06            [ 1]  282 	jreq 2$
      000DBF 7D               [ 1]  283 	tnz (x)
      000DC0 27 09            [ 1]  284 	jreq 3$
      000DC2 5C               [ 1]  285 	incw x 
      000DC3 20 F7            [ 2]  286 	jra 1$
      000DC5 1D 0D CD         [ 2]  287 2$: subw x,#escaped 
      000DC8 9F               [ 1]  288 	ld a,xl 
      000DC9 AB 07            [ 1]  289 	add a,#7
      000DCB 85               [ 2]  290 3$:	popw x 
      000DCC 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    292 
      000DCD 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000DD5                        310 parse_integer: ; { -- n }
      000DD5 89               [ 2]  311 	pushw x 	
      000DD6 4B 00            [ 1]  312 	push #0 ; TCHAR
      000DD8 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000DDA A1 24            [ 1]  314 	cp a,#'$
      000DDC 26 04            [ 1]  315 	jrne 2$ 
      000DDE                        316     _drop #1
      000DDE 5B 01            [ 2]    1     addw sp,##1 
      000DE0 4B 10            [ 1]  317 	push #16  ; BASE=16
      000DE2 F7               [ 1]  318 2$:	ld (x),a 
      000DE3 5C               [ 1]  319 	incw x 
      000DE4 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DE7 72 5C 00 01      [ 1]  321 	inc in 
      000DEB CD 18 7C         [ 4]  322 	call to_upper 
      000DEE 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DF0 CD 0E 76         [ 4]  324 	call is_digit 
      000DF3 25 ED            [ 1]  325 	jrc 2$
      000DF5 A6 10            [ 1]  326 	ld a,#16 
      000DF7 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DF9 26 0A            [ 1]  328 	jrne 3$ 
      000DFB 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DFD A1 41            [ 1]  330 	cp a,#'A 
      000DFF 2B 04            [ 1]  331 	jrmi 3$ 
      000E01 A1 47            [ 1]  332 	cp a,#'G 
      000E03 2B DD            [ 1]  333 	jrmi 2$ 
      000E05 72 5A 00 01      [ 1]  334 3$: dec in 	
      000E09 7F               [ 1]  335     clr (x)
      000E0A 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000E0C CD 18 88         [ 4]  337 	call atoi24
      000E0F 90 93            [ 1]  338 	ldw y,x
      000E11 C6 00 0C         [ 1]  339 	ld a,acc24 
      000E14 90 F7            [ 1]  340 	ld (y),a 
      000E16 72 A9 00 01      [ 2]  341 	addw y,#1  
      000E1A CE 00 0D         [ 2]  342 	ldw x,acc16 
      000E1D 90 FF            [ 2]  343 	ldw (y),x 
      000E1F 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000E23 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000E25                        346 	_drop VSIZE  
      000E25 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E27 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000E28                        364 parse_binary: ; { -- n }
      000E28 4B 00            [ 1]  365 	push #0
      000E2A 4B 00            [ 1]  366 	push #0
      000E2C 4B 00            [ 1]  367 	push #0
      000E2E                        368 2$:	
      000E2E 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000E31 72 5C 00 01      [ 1]  370 	inc in 
      000E35 A1 30            [ 1]  371 	cp a,#'0 
      000E37 27 06            [ 1]  372 	jreq 3$
      000E39 A1 31            [ 1]  373 	cp a,#'1 
      000E3B 27 02            [ 1]  374 	jreq 3$ 
      000E3D 20 0B            [ 2]  375 	jra bin_exit 
      000E3F A0 30            [ 1]  376 3$: sub a,#'0 
      000E41 46               [ 1]  377 	rrc a
      000E42 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000E44 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000E46 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E48 20 E4            [ 2]  381 	jra 2$  
      000E4A                        382 bin_exit:
      000E4A 72 5A 00 01      [ 1]  383 	dec in 
      000E4E 90 93            [ 1]  384 	ldw y,x
      000E50 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E52 C7 00 0C         [ 1]  386 	ld acc24,a 
      000E55 1E 02            [ 2]  387 	ldw x,(BINARY+1,sp)
      000E57 CF 00 0D         [ 2]  388 	ldw acc16,x
      000E5A 90 FF            [ 2]  389 	ldw (y),x 
      000E5C 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E60 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E62                        392 	_drop VSIZE 
      000E62 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E64 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E65                        402 is_alpha::
      000E65 A1 41            [ 1]  403 	cp a,#'A 
      000E67 8C               [ 1]  404 	ccf 
      000E68 24 0B            [ 1]  405 	jrnc 9$ 
      000E6A A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E6C 25 07            [ 1]  407 	jrc 9$ 
      000E6E A1 61            [ 1]  408 	cp a,#'a 
      000E70 8C               [ 1]  409 	ccf 
      000E71 24 02            [ 1]  410 	jrnc 9$
      000E73 A1 7B            [ 1]  411 	cp a,#'z+1
      000E75 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E76                        421 is_digit::
      000E76 A1 30            [ 1]  422 	cp a,#'0
      000E78 25 03            [ 1]  423 	jrc 1$
      000E7A A1 3A            [ 1]  424     cp a,#'9+1
      000E7C 8C               [ 1]  425 	ccf 
      000E7D 8C               [ 1]  426 1$:	ccf 
      000E7E 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E7F                        438 is_alnum::
      000E7F CD 0E 76         [ 4]  439 	call is_digit
      000E82 25 03            [ 1]  440 	jrc 1$ 
      000E84 CD 0E 65         [ 4]  441 	call is_alpha
      000E87 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000E88                        453 is_symbol_char: 
      000E88 A1 5F            [ 1]  454 	cp a,#'_ 
      000E8A 26 03            [ 1]  455 	jrne 1$
      000E8C 99               [ 1]  456 	scf 
      000E8D 20 03            [ 2]  457 	jra 9$ 
      000E8F CD 0E 7F         [ 4]  458 1$:	call is_alnum 
      000E92 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E93                        473 parse_symbol:
      000E93 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E94                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E94 CD 18 7C         [ 4]  477 	call to_upper  
      000E97 F7               [ 1]  478 	ld (x), a 
      000E98 5C               [ 1]  479 	incw x
      000E99 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E9C 72 5C 00 01      [ 1]  481 	inc in 
      000EA0 CD 0E 88         [ 4]  482 	call is_symbol_char 
      000EA3 25 EF            [ 1]  483 	jrc symb_loop 
      000EA5 7F               [ 1]  484 	clr (x)
      000EA6 72 5A 00 01      [ 1]  485 	dec in  
      000EAA 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000EAB                        502 parse_keyword: 
      000EAB 89               [ 2]  503 	pushw x ; preserve *symbol 
      000EAC CD 0E 93         [ 4]  504 	call parse_symbol
      000EAF 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000EB1 E6 02            [ 1]  506 	ld a,(2,x)
      000EB3 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000EB5 E6 01            [ 1]  509 	ld a,(1,x) 
      000EB7 A0 41            [ 1]  510 	sub a,#'A 
      000EB9 AE 00 03         [ 2]  511 	ldw x,#3 
      000EBC 42               [ 4]  512 	mul x,a 
      000EBD 1C 00 30         [ 2]  513 	addw x,#vars 
      000EC0 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000EC2 20 24            [ 2]  515 	jra 4$ 
      000EC4                        516 2$: ; check for keyword, otherwise syntax error.
      000EC4                        517 	_ldx_dict kword_dict ; dictionary entry point
      000EC4 AE 32 CE         [ 2]    1     ldw x,#kword_dict+2
      000EC7 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000EC9 90 5C            [ 1]  519 	incw y 
      000ECB CD 18 F2         [ 4]  520 	call search_dict
      000ECE 4D               [ 1]  521 	tnz a
      000ECF 26 17            [ 1]  522 	jrne 4$ 
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000ED1 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000ED3 A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000ED5 90 F7            [ 1]  527 	ld (y),a 
      000ED7 90 5C            [ 1]  528 	incw y
      000ED9                        529 24$:	
      000ED9 90 F6            [ 1]  530     ld a,(y)
      000EDB 27 04            [ 1]  531 	jreq 3$
      000EDD 90 5C            [ 1]  532 	incw y 
      000EDF 20 F8            [ 2]  533 	jra 24$ 
      000EE1 90 5C            [ 1]  534 3$: incw y 
      000EE3 A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000EE5 5F               [ 1]  536 	clrw x 	
      000EE6 20 11            [ 2]  537 	jra 5$ 
      000EE8                        538 4$:	
      000EE8 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000EEA A3 00 4E         [ 2]  540 	cpw x,#LET_IDX 
      000EED 27 0A            [ 1]  541 	jreq 5$  ; don't compile LET command 
      000EEF 90 F7            [ 1]  542 	ld (y),a 
      000EF1 90 5C            [ 1]  543 	incw y 
      000EF3 90 FF            [ 2]  544 	ldw (y),x
      000EF5 72 A9 00 02      [ 2]  545 	addw y,#2  
      000EF9                        546 5$:	_drop VSIZE 
      000EF9 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EFB 81               [ 4]  547 	ret  	
                                    548 
                                    549 ;------------------------------------
                                    550 ; skip character c in text starting from 'in'
                                    551 ; input:
                                    552 ;	 y 		point to text buffer
                                    553 ;    a 		character to skip
                                    554 ; output:  
                                    555 ;	'in' ajusted to new position
                                    556 ;------------------------------------
                           000001   557 	C = 1 ; local var
      000EFC                        558 skip:
      000EFC 88               [ 1]  559 	push a
      000EFD 91 D6 00         [ 4]  560 1$:	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F00 27 0A            [ 1]  561 	jreq 2$
      000F02 11 01            [ 1]  562 	cp a,(C,sp)
      000F04 26 06            [ 1]  563 	jrne 2$
      000F06 72 5C 00 01      [ 1]  564 	inc in
      000F0A 20 F1            [ 2]  565 	jra 1$
      000F0C                        566 2$: _drop 1 
      000F0C 5B 01            [ 2]    1     addw sp,#1 
      000F0E 81               [ 4]  567 	ret
                                    568 	
                                    569 
                                    570 ;------------------------------------
                                    571 ; scan text for next token
                                    572 ; input: 
                                    573 ;	X 		pointer to buffer where 
                                    574 ;	        token id and value are copied 
                                    575 ; use:
                                    576 ;	Y   pointer to text in tib 
                                    577 ; output:
                                    578 ;   A       token attribute 
                                    579 ;   X 		token value
                                    580 ;   Y       updated position in output buffer   
                                    581 ;------------------------------------
                                    582 	; use to check special character 
                                    583 	.macro _case c t  
                                    584 	ld a,#c 
                                    585 	cp a,(TCHAR,sp) 
                                    586 	jrne t
                                    587 	.endm 
                                    588 
                           000001   589 	TCHAR=1
                           000002   590 	ATTRIB=2
                           000002   591 	VSIZE=2
      000F0F                        592 get_token:: 
      000F0F                        593 	_vars VSIZE
      000F0F 52 02            [ 2]    1     sub sp,#VSIZE 
                                    594 ;	ld a,in 
                                    595 ;	sub a,count
                                    596 ;   jrmi 0$
                                    597 ;	clr a 
                                    598 ;	ret 
      000F11                        599 0$: 
      000F11 90 AE 16 68      [ 2]  600 	ldw y,#tib    	
      000F15 A6 20            [ 1]  601 	ld a,#SPACE
      000F17 CD 0E FC         [ 4]  602 	call skip
      000F1A 55 00 01 00 02   [ 1]  603 	mov in.saved,in 
      000F1F 91 D6 00         [ 4]  604 	ld a,([in.w],y)
      000F22 26 05            [ 1]  605 	jrne 1$
      000F24 90 93            [ 1]  606 	ldw y,x 
      000F26 CC 10 CB         [ 2]  607 	jp token_exit ; end of line 
      000F29 72 5C 00 01      [ 1]  608 1$:	inc in 
      000F2D CD 18 7C         [ 4]  609 	call to_upper 
      000F30 6B 01            [ 1]  610 	ld (TCHAR,sp),a 
                                    611 ; check for quoted string
      000F32                        612 str_tst:  	
      000F32                        613 	_case '"' nbr_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000F32 A6 22            [ 1]    1 	ld a,#'"' 
      000F34 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F36 26 0A            [ 1]    3 	jrne nbr_tst
      000F38 A6 02            [ 1]  614 	ld a,#TK_QSTR
      000F3A F7               [ 1]  615 	ld (x),a 
      000F3B 5C               [ 1]  616 	incw x 
      000F3C CD 0D 80         [ 4]  617 	call parse_quote
      000F3F CC 10 CB         [ 2]  618 	jp token_exit
      000F42                        619 nbr_tst:
                                    620 ; check for hexadecimal number 
      000F42 A6 24            [ 1]  621 	ld a,#'$'
      000F44 11 01            [ 1]  622 	cp a,(TCHAR,sp) 
      000F46 27 17            [ 1]  623 	jreq 1$
                                    624 ;check for binary number 
      000F48 A6 26            [ 1]  625 	ld a,#'&
      000F4A 11 01            [ 1]  626 	cp a,(TCHAR,sp)
      000F4C 26 0A            [ 1]  627 	jrne 0$
      000F4E A6 84            [ 1]  628 	ld a,#TK_INTGR
      000F50 F7               [ 1]  629 	ld (x),a 
      000F51 5C               [ 1]  630 	incw x 
      000F52 CD 0E 28         [ 4]  631 	call parse_binary ; expect binary integer 
      000F55 CC 10 CB         [ 2]  632 	jp token_exit 
                                    633 ; check for decimal number 	
      000F58 7B 01            [ 1]  634 0$:	ld a,(TCHAR,sp)
      000F5A CD 0E 76         [ 4]  635 	call is_digit
      000F5D 24 0C            [ 1]  636 	jrnc 3$
      000F5F A6 84            [ 1]  637 1$:	ld a,#TK_INTGR 
      000F61 F7               [ 1]  638 	ld (x),a 
      000F62 5C               [ 1]  639 	incw x 
      000F63 7B 01            [ 1]  640 	ld a,(TCHAR,sp)
      000F65 CD 0D D5         [ 4]  641 	call parse_integer 
      000F68 CC 10 CB         [ 2]  642 	jp token_exit 
      000F6B                        643 3$: 
      000F6B                        644 	_case '(' bkslsh_tst 
      000F6B A6 28            [ 1]    1 	ld a,#'(' 
      000F6D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F6F 26 05            [ 1]    3 	jrne bkslsh_tst
      000F71 A6 06            [ 1]  645 	ld a,#TK_LPAREN
      000F73 CC 10 C7         [ 2]  646 	jp token_char   	
      000F76                        647 bkslsh_tst: ; character token 
      000F76                        648 	_case '\',rparnt_tst
      000F76 A6 5C            [ 1]    1 	ld a,#'\' 
      000F78 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7A 26 16            [ 1]    3 	jrne rparnt_tst
      000F7C A6 04            [ 1]  649 	ld a,#TK_CHAR 
      000F7E F7               [ 1]  650 	ld (x),a 
      000F7F 5C               [ 1]  651 	incw x 
      000F80 91 D6 00         [ 4]  652 	ld a,([in.w],y)
      000F83 F7               [ 1]  653 	ld (x),a 
      000F84 5C               [ 1]  654 	incw x
      000F85 90 93            [ 1]  655 	ldw y,x 	 
      000F87 72 5C 00 01      [ 1]  656 	inc in  
      000F8B 5F               [ 1]  657 	clrw x 
      000F8C 97               [ 1]  658 	ld xl,a 
      000F8D A6 04            [ 1]  659 	ld a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000F8F CC 10 CB         [ 2]  660 	jp token_exit 
      000F92                        661 rparnt_tst:		
      000F92                        662 	_case ')' colon_tst 
      000F92 A6 29            [ 1]    1 	ld a,#')' 
      000F94 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F96 26 05            [ 1]    3 	jrne colon_tst
      000F98 A6 07            [ 1]  663 	ld a,#TK_RPAREN 
      000F9A CC 10 C7         [ 2]  664 	jp token_char
      000F9D                        665 colon_tst:
      000F9D                        666 	_case ':' comma_tst 
      000F9D A6 3A            [ 1]    1 	ld a,#':' 
      000F9F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA1 26 05            [ 1]    3 	jrne comma_tst
      000FA3 A6 0A            [ 1]  667 	ld a,#TK_COLON 
      000FA5 CC 10 C7         [ 2]  668 	jp token_char  
      000FA8                        669 comma_tst:
      000FA8                        670 	_case COMMA sharp_tst 
      000FA8 A6 2C            [ 1]    1 	ld a,#COMMA 
      000FAA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FAC 26 05            [ 1]    3 	jrne sharp_tst
      000FAE A6 08            [ 1]  671 	ld a,#TK_COMMA
      000FB0 CC 10 C7         [ 2]  672 	jp token_char
      000FB3                        673 sharp_tst:
      000FB3                        674 	_case SHARP dash_tst 
      000FB3 A6 23            [ 1]    1 	ld a,#SHARP 
      000FB5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB7 26 05            [ 1]    3 	jrne dash_tst
      000FB9 A6 09            [ 1]  675 	ld a,#TK_SHARP
      000FBB CC 10 C7         [ 2]  676 	jp token_char  	 	 
      000FBE                        677 dash_tst: 	
      000FBE                        678 	_case '-' at_tst 
      000FBE A6 2D            [ 1]    1 	ld a,#'-' 
      000FC0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC2 26 05            [ 1]    3 	jrne at_tst
      000FC4 A6 11            [ 1]  679 	ld a,#TK_MINUS  
      000FC6 CC 10 C7         [ 2]  680 	jp token_char 
      000FC9                        681 at_tst:
      000FC9                        682 	_case '@' qmark_tst 
      000FC9 A6 40            [ 1]    1 	ld a,#'@' 
      000FCB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FCD 26 05            [ 1]    3 	jrne qmark_tst
      000FCF A6 05            [ 1]  683 	ld a,#TK_ARRAY 
      000FD1 CC 10 C7         [ 2]  684 	jp token_char
      000FD4                        685 qmark_tst:
      000FD4                        686 	_case '?' tick_tst 
      000FD4 A6 3F            [ 1]    1 	ld a,#'?' 
      000FD6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD8 26 12            [ 1]    3 	jrne tick_tst
      000FDA A6 80            [ 1]  687 	ld a,#TK_CMD  
      000FDC F7               [ 1]  688 	ld (x),a 
      000FDD 5C               [ 1]  689 	incw x 
      000FDE 90 93            [ 1]  690 	ldw y,x 
      000FE0 AE 00 6E         [ 2]  691 	ldw x,#PRT_IDX 
      000FE3 90 FF            [ 2]  692 	ldw (y),x 
      000FE5 72 A9 00 02      [ 2]  693 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      000FE9 CC 10 CB         [ 2]  694 	jp token_exit
      000FEC                        695 tick_tst: ; comment 
      000FEC                        696 	_case TICK plus_tst 
      000FEC A6 27            [ 1]    1 	ld a,#TICK 
      000FEE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF0 26 35            [ 1]    3 	jrne plus_tst
      000FF2 A6 80            [ 1]  697 	ld a,#TK_CMD
      000FF4 F7               [ 1]  698 	ld (x),a 
      000FF5 5C               [ 1]  699 	incw x
      000FF6 90 AE 00 88      [ 2]  700 	ldw y,#REM_IDX
      000FFA FF               [ 2]  701 	ldw (x),y 
      000FFB 1C 00 02         [ 2]  702 	addw x,#2  
      000FFE                        703 copy_comment:
      000FFE 90 AE 16 68      [ 2]  704 	ldw y,#tib 
      001002 72 B9 00 00      [ 2]  705 	addw y,in.w
      001006 90 89            [ 2]  706 	pushw y
      001008 CD 13 F0         [ 4]  707 	call strcpy
      00100B 72 F2 01         [ 2]  708     subw y,(1,sp)
      00100E 90 9F            [ 1]  709 	ld a,yl 
      001010 CB 00 01         [ 1]  710 	add a,in
      001013 C7 00 01         [ 1]  711 	ld in,a 
      001016 1F 01            [ 2]  712 	ldw (1,sp),x
      001018 72 F9 01         [ 2]  713 	addw y,(1,sp)
      00101B 90 5C            [ 1]  714 	incw y 
      00101D                        715 	_drop 2 
      00101D 5B 02            [ 2]    1     addw sp,#2 
      00101F AE 00 88         [ 2]  716 	ldw x,#REM_IDX 
      001022 A6 80            [ 1]  717 	ld a,#TK_CMD 
      001024 CC 10 CB         [ 2]  718 	jp token_exit 
      001027                        719 plus_tst:
      001027                        720 	_case '+' star_tst 
      001027 A6 2B            [ 1]    1 	ld a,#'+' 
      001029 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00102B 26 05            [ 1]    3 	jrne star_tst
      00102D A6 10            [ 1]  721 	ld a,#TK_PLUS  
      00102F CC 10 C7         [ 2]  722 	jp token_char 
      001032                        723 star_tst:
      001032                        724 	_case '*' slash_tst 
      001032 A6 2A            [ 1]    1 	ld a,#'*' 
      001034 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001036 26 05            [ 1]    3 	jrne slash_tst
      001038 A6 20            [ 1]  725 	ld a,#TK_MULT 
      00103A CC 10 C7         [ 2]  726 	jp token_char 
      00103D                        727 slash_tst: 
      00103D                        728 	_case '/' prcnt_tst 
      00103D A6 2F            [ 1]    1 	ld a,#'/' 
      00103F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001041 26 05            [ 1]    3 	jrne prcnt_tst
      001043 A6 21            [ 1]  729 	ld a,#TK_DIV 
      001045 CC 10 C7         [ 2]  730 	jp token_char 
      001048                        731 prcnt_tst:
      001048                        732 	_case '%' eql_tst 
      001048 A6 25            [ 1]    1 	ld a,#'%' 
      00104A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00104C 26 05            [ 1]    3 	jrne eql_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00104E A6 22            [ 1]  733 	ld a,#TK_MOD
      001050 CC 10 C7         [ 2]  734 	jp token_char  
                                    735 ; 1 or 2 character tokens 	
      001053                        736 eql_tst:
      001053                        737 	_case '=' gt_tst 		
      001053 A6 3D            [ 1]    1 	ld a,#'=' 
      001055 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001057 26 05            [ 1]    3 	jrne gt_tst
      001059 A6 32            [ 1]  738 	ld a,#TK_EQUAL
      00105B CC 10 C7         [ 2]  739 	jp token_char 
      00105E                        740 gt_tst:
      00105E                        741 	_case '>' lt_tst 
      00105E A6 3E            [ 1]    1 	ld a,#'>' 
      001060 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001062 26 23            [ 1]    3 	jrne lt_tst
      001064 A6 31            [ 1]  742 	ld a,#TK_GT 
      001066 6B 02            [ 1]  743 	ld (ATTRIB,sp),a 
      001068 91 D6 00         [ 4]  744 	ld a,([in.w],y)
      00106B 72 5C 00 01      [ 1]  745 	inc in 
      00106F A1 3D            [ 1]  746 	cp a,#'=
      001071 26 04            [ 1]  747 	jrne 1$
      001073 A6 33            [ 1]  748 	ld a,#TK_GE 
      001075 20 50            [ 2]  749 	jra token_char  
      001077 A1 3C            [ 1]  750 1$: cp a,#'<
      001079 26 04            [ 1]  751 	jrne 2$
      00107B A6 35            [ 1]  752 	ld a,#TK_NE 
      00107D 20 48            [ 2]  753 	jra token_char 
      00107F 72 5A 00 01      [ 1]  754 2$: dec in
      001083 7B 02            [ 1]  755 	ld a,(ATTRIB,sp)
      001085 20 40            [ 2]  756 	jra token_char 	 
      001087                        757 lt_tst:
      001087                        758 	_case '<' other
      001087 A6 3C            [ 1]    1 	ld a,#'<' 
      001089 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00108B 26 23            [ 1]    3 	jrne other
      00108D A6 34            [ 1]  759 	ld a,#TK_LT 
      00108F 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      001091 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      001094 72 5C 00 01      [ 1]  762 	inc in 
      001098 A1 3D            [ 1]  763 	cp a,#'=
      00109A 26 04            [ 1]  764 	jrne 1$
      00109C A6 36            [ 1]  765 	ld a,#TK_LE 
      00109E 20 27            [ 2]  766 	jra token_char 
      0010A0 A1 3E            [ 1]  767 1$: cp a,#'>
      0010A2 26 04            [ 1]  768 	jrne 2$
      0010A4 A6 35            [ 1]  769 	ld a,#TK_NE 
      0010A6 20 1F            [ 2]  770 	jra token_char 
      0010A8 72 5A 00 01      [ 1]  771 2$: dec in 
      0010AC 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      0010AE 20 17            [ 2]  773 	jra token_char 	
      0010B0                        774 other: ; not a special character 	 
      0010B0 7B 01            [ 1]  775 	ld a,(TCHAR,sp)
      0010B2 CD 0E 65         [ 4]  776 	call is_alpha 
      0010B5 25 03            [ 1]  777 	jrc 30$ 
      0010B7 CC 16 90         [ 2]  778 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0010BA                        779 30$: 
      0010BA CD 0E AB         [ 4]  780 	call parse_keyword
      0010BD A3 20 2C         [ 2]  781 	cpw x,#remark 
      0010C0 26 09            [ 1]  782 	jrne token_exit 
      0010C2 90 93            [ 1]  783 	ldw y,x 
      0010C4 CC 0F FE         [ 2]  784 	jp copy_comment 
      0010C7                        785 token_char:
      0010C7 F7               [ 1]  786 	ld (x),a 
      0010C8 5C               [ 1]  787 	incw x
      0010C9 90 93            [ 1]  788 	ldw y,x 
      0010CB                        789 token_exit:
      0010CB                        790 	_drop VSIZE 
      0010CB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010CD 81               [ 4]  791 	ret
                                    792 
                                    793 
                                    794 ;-----------------------------------
                                    795 ; create token list fromm text line 
                                    796 ; save this list in pad buffer 
                                    797 ;  compiled line format: 
                                    798 ;    line_no  2 bytes {0...32767}
                                    799 ;    count    1 byte  
                                    800 ;    tokens   variable length 
                                    801 ;   
                                    802 ; input:
                                    803 ;   none
                                    804 ; modified variables:
                                    805 ;   basicptr     token list buffer address 
                                    806 ;   in.w  		 3|count, i.e. index in buffer
                                    807 ;   count        length of line | 0  
                                    808 ;-----------------------------------
                           000001   809 	XSAVE=1
                           000002   810 	VSIZE=2
      0010CE                        811 compile::
      0010CE 90 89            [ 2]  812 	pushw y 
      0010D0                        813 	_vars VSIZE 
      0010D0 52 02            [ 2]    1     sub sp,#VSIZE 
      0010D2 55 00 1B 00 04   [ 1]  814 	mov basicptr,txtbgn
      0010D7 72 1A 00 22      [ 1]  815 	bset flags,#FCOMP 
      0010DB A6 00            [ 1]  816 	ld a,#0
      0010DD AE 00 00         [ 2]  817 	ldw x,#0
      0010E0 CF 16 B8         [ 2]  818 	ldw pad,x ; destination buffer 
      0010E3 C7 16 BA         [ 1]  819 	ld pad+2,a ; count 
      0010E6 AE 16 BB         [ 2]  820 	ldw x,#pad+3
      0010E9 72 5F 00 01      [ 1]  821 	clr in 
      0010ED CD 0F 0F         [ 4]  822 	call get_token
      0010F0 A1 84            [ 1]  823 	cp a,#TK_INTGR
      0010F2 26 11            [ 1]  824 	jrne 2$
      0010F4 A3 00 01         [ 2]  825 	cpw x,#1 
      0010F7 2A 05            [ 1]  826 	jrpl 1$
      0010F9 A6 0A            [ 1]  827 	ld a,#ERR_BAD_VALUE
      0010FB CC 16 92         [ 2]  828 	jp tb_error
      0010FE CF 16 B8         [ 2]  829 1$:	ldw pad,x 
      001101 90 AE 16 BB      [ 2]  830 	ldw y,#pad+3 
      001105 90 A3 17 74      [ 2]  831 2$:	cpw y,#stack_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001109 25 05            [ 1]  832 	jrult 3$
      00110B A6 0F            [ 1]  833 	ld a,#ERR_BUF_FULL 
      00110D CC 16 92         [ 2]  834 	jp tb_error 
      001110                        835 3$:	
      001110 93               [ 1]  836 	ldw x,y 
      001111 CD 0F 0F         [ 4]  837 	call get_token 
      001114 A1 00            [ 1]  838 	cp a,#TK_NONE 
      001116 26 ED            [ 1]  839 	jrne 2$ 
                                    840 ; compilation completed  
      001118 72 A2 16 B8      [ 2]  841 	subw y,#pad
      00111C 90 9F            [ 1]  842     ld a,yl
      00111E AE 16 B8         [ 2]  843 	ldw x,#pad 
      001121 CF 00 19         [ 2]  844 	ldw ptr16,x 
      001124 E7 02            [ 1]  845 	ld (2,x),a 
      001126 FE               [ 2]  846 	ldw x,(x)
      001127 27 09            [ 1]  847 	jreq 10$
      001129 CD 0D 0E         [ 4]  848 	call insert_line
      00112C 72 5F 00 03      [ 1]  849 	clr  count 
      001130 20 0F            [ 2]  850 	jra  11$ 
      001132                        851 10$: ; line# is zero 
      001132 CE 00 19         [ 2]  852 	ldw x,ptr16  
      001135 CF 00 04         [ 2]  853 	ldw basicptr,x 
      001138 E6 02            [ 1]  854 	ld a,(2,x)
      00113A C7 00 03         [ 1]  855 	ld count,a 
      00113D 35 03 00 01      [ 1]  856 	mov in,#3 
      001141                        857 11$:
      001141                        858 	_drop VSIZE 
      001141 5B 02            [ 2]    1     addw sp,#VSIZE 
      001143 72 1B 00 22      [ 1]  859 	bres flags,#FCOMP 
      001147 90 85            [ 2]  860 	popw y 
      001149 81               [ 4]  861 	ret 
                                    862 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      00114A                         48 cpy_cmd_name:
      00114A F6               [ 1]   49 	ld a,(x)
      00114B 5C               [ 1]   50 	incw x
      00114C A4 0F            [ 1]   51 	and a,#15  
      00114E 88               [ 1]   52 	push a 
      00114F 0D 01            [ 1]   53     tnz (1,sp) 
      001151 27 0A            [ 1]   54 	jreq 9$
      001153 F6               [ 1]   55 1$:	ld a,(x)
      001154 90 F7            [ 1]   56 	ld (y),a  
      001156 5C               [ 1]   57 	incw x
      001157 90 5C            [ 1]   58 	incw y 
      001159 0A 01            [ 1]   59 	dec (1,sp)	 
      00115B 26 F6            [ 1]   60 	jrne 1$
      00115D 84               [ 1]   61 9$: pop a 
      00115E 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      00115F                         72 add_space:
      00115F 90 5A            [ 2]   73 	decw y 
      001161 90 F6            [ 1]   74 	ld a,(y)
      001163 90 5C            [ 1]   75 	incw y
      001165 A1 29            [ 1]   76 	cp a,#') 
      001167 27 05            [ 1]   77 	jreq 0$
      001169 CD 0E 7F         [ 4]   78 	call is_alnum 
      00116C 24 06            [ 1]   79 	jrnc 1$
      00116E                         80 0$: 
      00116E A6 20            [ 1]   81 	ld a,#SPACE 
      001170 90 F7            [ 1]   82 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001172 90 5C            [ 1]   83 	incw y 
      001174 81               [ 4]   84 1$: ret 
                                     85 
                                     86 ;--------------------------
                                     87 ;  align text in buffer 
                                     88 ;  to tab_width padding 
                                     89 ;  left with  SPACE 
                                     90 ; input:
                                     91 ;   X      str*
                                     92 ;   A      str_length 
                                     93 ; output:
                                     94 ;   X      ajusted
                                     95 ;--------------------------
      001175                         96 right_align::
      001175 88               [ 1]   97 	push a 
      001176 7B 01            [ 1]   98 0$: ld a,(1,sp)
      001178 C1 00 23         [ 1]   99 	cp a,tab_width 
      00117B 2A 08            [ 1]  100 	jrpl 1$
      00117D A6 20            [ 1]  101 	ld a,#SPACE 
      00117F 5A               [ 2]  102 	decw x
      001180 F7               [ 1]  103 	ld (x),a  
      001181 0C 01            [ 1]  104 	inc (1,sp)
      001183 20 F1            [ 2]  105 	jra 0$ 
      001185 84               [ 1]  106 1$: pop a 	
      001186 81               [ 4]  107 	ret 
                                    108 
                                    109 ;--------------------------
                                    110 ; print TK_QSTR
                                    111 ; converting control character
                                    112 ; to backslash sequence
                                    113 ; input:
                                    114 ;   X        char *
                                    115 ;   Y        dest. buffer 
                                    116 ; output:
                                    117 ;   X        moved forward 
                                    118 ;   Y        moved forward 
                                    119 ;-----------------------------
      001187                        120 cpy_quote:
      001187 A6 22            [ 1]  121 	ld a,#'"
      001189 90 F7            [ 1]  122 	ld (y),a 
      00118B 90 5C            [ 1]  123 	incw y 
      00118D 89               [ 2]  124 	pushw x 
      00118E CD 17 B7         [ 4]  125 	call skip_string 
      001191 85               [ 2]  126 	popw x 
      001192 F6               [ 1]  127 1$:	ld a,(x)
      001193 27 30            [ 1]  128 	jreq 9$
      001195 5C               [ 1]  129 	incw x 
      001196 A1 20            [ 1]  130 	cp a,#SPACE 
      001198 25 0E            [ 1]  131 	jrult 3$
      00119A 90 F7            [ 1]  132 	ld (y),a
      00119C 90 5C            [ 1]  133 	incw y 
      00119E A1 5C            [ 1]  134 	cp a,#'\ 
      0011A0 26 F0            [ 1]  135 	jrne 1$ 
      0011A2                        136 2$:
      0011A2 90 F7            [ 1]  137 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0011A4 90 5C            [ 1]  138 	incw y  
      0011A6 20 EA            [ 2]  139 	jra 1$
      0011A8 88               [ 1]  140 3$: push a 
      0011A9 A6 5C            [ 1]  141 	ld a,#'\
      0011AB 90 F7            [ 1]  142 	ld (y),a 
      0011AD 90 5C            [ 1]  143 	incw y  
      0011AF 84               [ 1]  144 	pop a 
      0011B0 A0 07            [ 1]  145 	sub a,#7
      0011B2 C7 00 0E         [ 1]  146 	ld acc8,a 
      0011B5 72 5F 00 0D      [ 1]  147 	clr acc16
      0011B9 89               [ 2]  148 	pushw x
      0011BA AE 0D CD         [ 2]  149 	ldw x,#escaped 
      0011BD 72 BB 00 0D      [ 2]  150 	addw x,acc16 
      0011C1 F6               [ 1]  151 	ld a,(x)
      0011C2 85               [ 2]  152 	popw x
      0011C3 20 DD            [ 2]  153 	jra 2$
      0011C5 A6 22            [ 1]  154 9$: ld a,#'"
      0011C7 90 F7            [ 1]  155 	ld (y),a 
      0011C9 90 5C            [ 1]  156 	incw y  
      0011CB 5C               [ 1]  157 	incw x 
      0011CC 81               [ 4]  158 	ret
                                    159 
                                    160 ;--------------------------
                                    161 ; return variable name 
                                    162 ; from its address.
                                    163 ; input:
                                    164 ;   X    variable address
                                    165 ; output:
                                    166 ;   A     variable letter
                                    167 ;--------------------------
      0011CD                        168 var_name::
      0011CD 1D 00 30         [ 2]  169 		subw x,#vars 
      0011D0 A6 03            [ 1]  170 		ld a,#3
      0011D2 62               [ 2]  171 		div x,a 
      0011D3 9F               [ 1]  172 		ld a,xl 
      0011D4 AB 41            [ 1]  173 		add a,#'A 
      0011D6 81               [ 4]  174 		ret 
                                    175 
                                    176 ;-----------------------------
                                    177 ; return cmd  idx from its 
                                    178 ; code address 
                                    179 ; input:
                                    180 ;   X      code address 
                                    181 ; output:
                                    182 ;   X      cmd_idx
                                    183 ;-----------------------------
      0011D7                        184 get_cmd_idx:
      0011D7 90 89            [ 2]  185 	pushw y
      0011D9 90 AE 32 D4      [ 2]  186 	ldw y,#code_addr 
      0011DD 90 CF 00 19      [ 2]  187 	ldw ptr16,y 
      0011E1 90 5F            [ 1]  188 	clrw y 
      0011E3 91 D3 19         [ 5]  189 1$:	cpw x,([ptr16],y)
      0011E6 27 0C            [ 1]  190 	jreq 3$ 
      0011E8 90 5C            [ 1]  191 	incw y 
      0011EA 91 D6 19         [ 4]  192 	ld a,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      0011ED 90 5C            [ 1]  193 	incw y
      0011EF 91 DA 19         [ 4]  194 	or a,([ptr16],y)	
      0011F2 26 EF            [ 1]  195 	jrne 1$
      0011F4 93               [ 1]  196 3$: ldw x,y 
      0011F5 90 85            [ 2]  197 	popw y 
      0011F7 81               [ 4]  198 	ret
                                    199 
                                    200 
                                    201 ;-------------------------------------
                                    202 ; decompile tokens list 
                                    203 ; to original text line 
                                    204 ; input:
                                    205 ;   [basicptr]  pointer at line 
                                    206 ;   Y           output buffer
                                    207 ; output:
                                    208 ;   A           length 
                                    209 ;   Y           after string  
                                    210 ;------------------------------------
                           000001   211 	BASE_SAV=1
                           000002   212 	WIDTH_SAV=2
                           000003   213 	STR=3
                           000004   214 	VSIZE=4 
      0011F8                        215 decompile::
      0011F8                        216 	_vars VSIZE
      0011F8 52 04            [ 2]    1     sub sp,#VSIZE 
      0011FA C6 00 0A         [ 1]  217 	ld a,base
      0011FD 6B 01            [ 1]  218 	ld (BASE_SAV,sp),a  
      0011FF C6 00 23         [ 1]  219 	ld a,tab_width 
      001202 6B 02            [ 1]  220 	ld (WIDTH_SAV,sp),a 
      001204 17 03            [ 2]  221 	ldw (STR,sp),y   
      001206 72 CE 00 04      [ 5]  222 	ldw x,[basicptr] ; line number 
      00120A 35 0A 00 0A      [ 1]  223 	mov base,#10
      00120E 35 05 00 23      [ 1]  224 	mov tab_width,#5
      001212 72 5F 00 0C      [ 1]  225 	clr acc24 
      001216 CF 00 0D         [ 2]  226 	ldw acc16,x
      001219 4F               [ 1]  227 	clr a ; unsigned conversion 
      00121A CD 18 23         [ 4]  228 	call itoa  
      00121D CD 11 75         [ 4]  229 	call right_align 
      001220 88               [ 1]  230 	push a 
      001221 90 93            [ 1]  231 1$:	ldw y,x ; source
      001223 1E 04            [ 2]  232 	ldw x,(STR+1,sp) ; destination
      001225 CD 13 F0         [ 4]  233 	call strcpy 
      001228 90 5F            [ 1]  234 	clrw y 
      00122A 84               [ 1]  235 	pop a 
      00122B 90 97            [ 1]  236 	ld yl,a 
      00122D 72 F9 03         [ 2]  237 	addw y,(STR,sp)
      001230 A6 20            [ 1]  238 	ld a,#SPACE 
      001232 90 F7            [ 1]  239 	ld (y),a 
      001234 90 5C            [ 1]  240 	incw y 
      001236 72 5F 00 23      [ 1]  241 	clr tab_width
      00123A AE 00 03         [ 2]  242 	ldw x,#3
      00123D CF 00 00         [ 2]  243 	ldw in.w,x 
      001240                        244 decomp_loop:
      001240 90 89            [ 2]  245 	pushw y
      001242 CD 17 91         [ 4]  246 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001245 90 85            [ 2]  247 	popw y 
      001247 4D               [ 1]  248 	tnz a  
      001248 26 03            [ 1]  249 	jrne 1$
      00124A CC 13 67         [ 2]  250 	jp 20$
      00124D 2B 03            [ 1]  251 1$:	jrmi 2$
      00124F CC 12 D8         [ 2]  252 	jp 6$
      001252                        253 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      001252 A1 85            [ 1]  254 	cp a,#TK_VAR 
      001254 26 0F            [ 1]  255 	jrne 3$
                                    256 ;; TK_VAR 
      001256 CD 11 5F         [ 4]  257 	call add_space
      001259 CD 17 C6         [ 4]  258 	call get_addr   
      00125C CD 11 CD         [ 4]  259 	call var_name
      00125F 90 F7            [ 1]  260 	ld (y),a 
      001261 90 5C            [ 1]  261 	incw y  
      001263 20 DB            [ 2]  262 	jra decomp_loop
      001265                        263 3$:
      001265 A1 84            [ 1]  264 	cp a,#TK_INTGR
      001267 26 26            [ 1]  265 	jrne 4$
                                    266 ;; TK_INTGR
      001269 CD 17 D0         [ 4]  267 	call get_int24 
      00126C C7 00 0C         [ 1]  268 	ld acc24,a 
      00126F CF 00 0D         [ 2]  269 	ldw acc16,x 
      001272 CD 11 5F         [ 4]  270 	call add_space
      001275 90 89            [ 2]  271 	pushw y 
      001277 A6 FF            [ 1]  272 	ld a,#255 ; signed conversion 
      001279 CD 18 23         [ 4]  273 	call itoa  
      00127C 16 01            [ 2]  274 	ldw y,(1,sp) 
      00127E 88               [ 1]  275 	push a 
      00127F 51               [ 1]  276 	exgw x,y 
      001280 CD 13 F0         [ 4]  277 	call strcpy 
      001283 90 5F            [ 1]  278 	clrw y
      001285 84               [ 1]  279 	pop a  
      001286 90 97            [ 1]  280 	ld yl,a 
      001288 72 F9 01         [ 2]  281 	addw y,(1,sp)
      00128B                        282 	_drop 2 
      00128B 5B 02            [ 2]    1     addw sp,#2 
      00128D 20 B1            [ 2]  283 	jra decomp_loop
      00128F                        284 4$: ; dictionary keyword 
      00128F FE               [ 2]  285 	ldw x,(x)
      001290 72 5C 00 01      [ 1]  286 	inc in 
      001294 72 5C 00 01      [ 1]  287 	inc in 
      001298 A3 00 88         [ 2]  288 	cpw x,#REM_IDX
      00129B 26 23            [ 1]  289 	jrne 5$
      00129D CE 00 04         [ 2]  290 	ldw x,basicptr 
                                    291 ; copy comment to buffer 
      0012A0 CD 11 5F         [ 4]  292 	call add_space
      0012A3 A6 27            [ 1]  293 	ld a,#''
      0012A5 90 F7            [ 1]  294 	ld (y),a 
      0012A7 90 5C            [ 1]  295 	incw y 
      0012A9                        296 46$:
      0012A9 72 D6 00 00      [ 4]  297 	ld a,([in.w],x)
      0012AD 72 5C 00 01      [ 1]  298 	inc in  
      0012B1 90 F7            [ 1]  299 	ld (y),a 
      0012B3 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0012B5 C6 00 01         [ 1]  301 	ld a,in 
      0012B8 C1 00 03         [ 1]  302 	cp a,count 
      0012BB 2B EC            [ 1]  303 	jrmi 46$
      0012BD CC 13 67         [ 2]  304 	jp 20$  
      0012C0 A3 00 4E         [ 2]  305 5$: cpw x,#LET_IDX 
      0012C3 26 03            [ 1]  306 	jrne 51$
      0012C5 CC 12 40         [ 2]  307 	jp decomp_loop ; down display LET 	
      0012C8                        308 51$: ; insert command name 
      0012C8 CD 11 5F         [ 4]  309 	call add_space  
      0012CB 90 89            [ 2]  310 	pushw y
      0012CD CD 13 A2         [ 4]  311 	call cmd_name
      0012D0 90 85            [ 2]  312 	popw y 
      0012D2 CD 11 4A         [ 4]  313 	call cpy_cmd_name
      0012D5 CC 12 40         [ 2]  314 	jp decomp_loop 
      0012D8                        315 6$:
                                    316 ; label?
      0012D8 A1 03            [ 1]  317 	cp a,#TK_LABEL 
      0012DA 26 1E            [ 1]  318 	jrne 64$
                                    319 ; copy label string to output buffer   	
      0012DC A6 20            [ 1]  320 	ld a,#32 
      0012DE 90 F7            [ 1]  321 	ld (y),a 
      0012E0 90 5C            [ 1]  322 	incw y 
      0012E2                        323 61$:
      0012E2 89               [ 2]  324 	pushw x 
      0012E3 CD 17 B7         [ 4]  325 	call skip_string 
      0012E6 85               [ 2]  326 	popw x 
      0012E7                        327 62$:	
      0012E7 F6               [ 1]  328 	ld a,(x)
      0012E8 27 07            [ 1]  329 	jreq 63$ 
      0012EA 5C               [ 1]  330 	incw x  
      0012EB 90 F7            [ 1]  331 	ld (y),a 
      0012ED 90 5C            [ 1]  332 	incw y 
      0012EF 20 F6            [ 2]  333 	jra 62$ 
      0012F1                        334 63$: 
      0012F1 A6 20            [ 1]  335 	ld a,#32 
      0012F3 90 F7            [ 1]  336 	ld (y),a 
      0012F5 90 5C            [ 1]  337 	incw y 
      0012F7 CC 12 40         [ 2]  338 	jp decomp_loop
      0012FA                        339 64$:
      0012FA A1 02            [ 1]  340 	cp a,#TK_QSTR 
      0012FC 26 09            [ 1]  341 	jrne 7$
                                    342 ;; TK_QSTR
      0012FE CD 11 5F         [ 4]  343 	call add_space
      001301 CD 11 87         [ 4]  344 	call cpy_quote  
      001304 CC 12 40         [ 2]  345 	jp decomp_loop
      001307                        346 7$:
      001307 A1 04            [ 1]  347 	cp a,#TK_CHAR 
      001309 26 10            [ 1]  348 	jrne 8$
                                    349 ;; TK_CHAR
      00130B CD 11 5F         [ 4]  350 	call add_space 
      00130E A6 5C            [ 1]  351 	ld a,#'\ 
      001310 90 F7            [ 1]  352 	ld (y),a 
      001312 90 5C            [ 1]  353 	incw y
      001314 F6               [ 1]  354 	ld a,(x)
      001315 72 5C 00 01      [ 1]  355 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      001319 20 06            [ 2]  356 	jra 81$
      00131B A1 0A            [ 1]  357 8$: cp a,#TK_COLON 
      00131D 26 09            [ 1]  358 	jrne 9$
      00131F A6 3A            [ 1]  359 	ld a,#':
      001321                        360 81$:
      001321 90 F7            [ 1]  361 	ld (y),a 
      001323 90 5C            [ 1]  362 	incw y 
      001325                        363 82$:
      001325 CC 12 40         [ 2]  364 	jp decomp_loop
      001328                        365 9$: 
      001328 A1 09            [ 1]  366 	cp a,#TK_SHARP
      00132A 22 0A            [ 1]  367 	jrugt 10$ 
      00132C A0 05            [ 1]  368 	sub a,#TK_ARRAY 
      00132E 5F               [ 1]  369 	clrw x 
      00132F 97               [ 1]  370 	ld xl,a
      001330 1C 13 7D         [ 2]  371 	addw x,#single_char 
      001333 F6               [ 1]  372 	ld a,(x)
      001334 20 EB            [ 2]  373 	jra 81$ 
      001336                        374 10$: 
      001336 A1 11            [ 1]  375 	cp a,#TK_MINUS 
      001338 22 0A            [ 1]  376 	jrugt 11$
      00133A A0 10            [ 1]  377 	sub a,#TK_PLUS 
      00133C 5F               [ 1]  378 	clrw x 
      00133D 97               [ 1]  379 	ld xl,a 
      00133E 1C 13 82         [ 2]  380 	addw x,#add_char 
      001341 F6               [ 1]  381 	ld a,(x)
      001342 20 DD            [ 2]  382 	jra 81$
      001344                        383 11$:
      001344 A1 22            [ 1]  384     cp a,#TK_MOD 
      001346 22 0A            [ 1]  385 	jrugt 12$
      001348 A0 20            [ 1]  386 	sub a,#TK_MULT
      00134A 5F               [ 1]  387 	clrw x 
      00134B 97               [ 1]  388 	ld xl,a 
      00134C 1C 13 84         [ 2]  389 	addw x,#mul_char
      00134F F6               [ 1]  390 	ld a,(x)
      001350 20 CF            [ 2]  391 	jra 81$
      001352                        392 12$:
      001352 A0 31            [ 1]  393 	sub a,#TK_GT  
      001354 48               [ 1]  394 	sll a 
      001355 5F               [ 1]  395 	clrw x 
      001356 97               [ 1]  396 	ld xl,a 
      001357 1C 13 87         [ 2]  397 	addw x,#relop_str 
      00135A FE               [ 2]  398 	ldw x,(x)
      00135B F6               [ 1]  399 	ld a,(x)
      00135C 5C               [ 1]  400 	incw x 
      00135D 90 F7            [ 1]  401 	ld (y),a
      00135F 90 5C            [ 1]  402 	incw y 
      001361 F6               [ 1]  403 	ld a,(x)
      001362 26 BD            [ 1]  404 	jrne 81$
      001364 CC 12 40         [ 2]  405 	jp decomp_loop 
      001367                        406 20$: 
      001367 90 7F            [ 1]  407 	clr (y)
      001369 1E 03            [ 2]  408 	ldw x,(STR,sp)
      00136B 7B 01            [ 1]  409 	ld a,(BASE_SAV,sp)
      00136D C7 00 0A         [ 1]  410 	ld base,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001370 7B 02            [ 1]  411 	ld a,(WIDTH_SAV,sp)
      001372 C7 00 23         [ 1]  412 	ld tab_width,a
      001375 72 F2 03         [ 2]  413 	subw y,(STR,sp) 
      001378 90 9F            [ 1]  414 	ld a,yl 
      00137A                        415 	_drop VSIZE 
      00137A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00137C 81               [ 4]  416 	ret 
                                    417 
      00137D 40 28 29 2C 23         418 single_char: .byte '@','(',')',',','#'
      001382 2B 2D                  419 add_char: .byte '+','-'
      001384 2A 2F 25               420 mul_char: .byte '*','/','%'
      001387 13 93 13 95 13 97 13   421 relop_str: .word gt,equal,ge,lt,le,ne 
             9A 13 9C 13 9F
      001393 3E 00                  422 gt: .asciz ">"
      001395 3D 00                  423 equal: .asciz "="
      001397 3E 3D 00               424 ge: .asciz ">="
      00139A 3C 00                  425 lt: .asciz "<"
      00139C 3C 3D 00               426 le: .asciz "<="
      00139F 3C 3E 00               427 ne:  .asciz "<>"
                                    428 
                                    429 ;----------------------------------
                                    430 ; search in kword_dict name
                                    431 ; from its execution address 
                                    432 ; input:
                                    433 ;   X       	cmd_index 
                                    434 ; output:
                                    435 ;   X 			cstr*  | 0 
                                    436 ;--------------------------------
                           000001   437 	CMDX=1 
                           000003   438 	LINK=3 
                           000004   439 	VSIZE=4
      0013A2                        440 cmd_name:
      0013A2                        441 	_vars VSIZE 
      0013A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0013A4 72 5F 00 0D      [ 1]  442 	clr acc16 
      0013A8 1F 01            [ 2]  443 	ldw (CMDX,sp),x  
      0013AA AE 32 CC         [ 2]  444 	ldw x,#kword_dict	
      0013AD 1F 03            [ 2]  445 1$:	ldw (LINK,sp),x
      0013AF E6 02            [ 1]  446 	ld a,(2,x)
      0013B1 A4 0F            [ 1]  447 	and a,#15 
      0013B3 C7 00 0E         [ 1]  448 	ld acc8,a 
      0013B6 1C 00 03         [ 2]  449 	addw x,#3
      0013B9 72 BB 00 0D      [ 2]  450 	addw x,acc16
      0013BD FE               [ 2]  451 	ldw x,(x) ; command index  
      0013BE 13 01            [ 2]  452 	cpw x,(CMDX,sp)
      0013C0 27 0A            [ 1]  453 	jreq 2$
      0013C2 1E 03            [ 2]  454 	ldw x,(LINK,sp)
      0013C4 FE               [ 2]  455 	ldw x,(x) 
      0013C5 1D 00 02         [ 2]  456 	subw x,#2  
      0013C8 26 E3            [ 1]  457 	jrne 1$
      0013CA 20 05            [ 2]  458 	jra 9$
      0013CC 1E 03            [ 2]  459 2$: ldw x,(LINK,sp)
      0013CE 1C 00 02         [ 2]  460 	addw x,#2 	
      0013D1                        461 9$:	_drop VSIZE
      0013D1 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0013D3 81               [ 4]  462 	ret
                                    463 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      0013D4                        116 strlen::
      0013D4 89               [ 2]  117 	pushw x 
      0013D5 4F               [ 1]  118 	clr a
      0013D6 7D               [ 1]  119 1$:	tnz (x) 
      0013D7 27 04            [ 1]  120 	jreq 9$ 
      0013D9 4C               [ 1]  121 	inc a 
      0013DA 5C               [ 1]  122 	incw x 
      0013DB 20 F9            [ 2]  123 	jra 1$ 
      0013DD 85               [ 2]  124 9$:	popw x 
      0013DE 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      0013DF                        135 strcmp:
      0013DF F6               [ 1]  136 	ld a,(x)
      0013E0 27 0B            [ 1]  137 	jreq 5$ 
      0013E2 90 F1            [ 1]  138 	cp a,(y) 
      0013E4 26 05            [ 1]  139 	jrne 4$ 
      0013E6 5C               [ 1]  140 	incw x 
      0013E7 90 5C            [ 1]  141 	incw y 
      0013E9 20 F4            [ 2]  142 	jra strcmp 
      0013EB                        143 4$: ; not same  
      0013EB 4F               [ 1]  144 	clr a 
      0013EC 81               [ 4]  145 	ret 
      0013ED                        146 5$: ; same 
      0013ED A6 01            [ 1]  147 	ld a,#1 
      0013EF 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      0013F0                        159 strcpy::
      0013F0 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0013F1 89               [ 2]  161 	pushw x 
      0013F2 90 F6            [ 1]  162 1$: ld a,(y)
      0013F4 27 06            [ 1]  163 	jreq 9$ 
      0013F6 F7               [ 1]  164 	ld (x),a 
      0013F7 5C               [ 1]  165 	incw x 
      0013F8 90 5C            [ 1]  166 	incw y 
      0013FA 20 F6            [ 2]  167 	jra 1$ 
      0013FC 7F               [ 1]  168 9$:	clr (x)
      0013FD 85               [ 2]  169 	popw x 
      0013FE 84               [ 1]  170 	pop a 
      0013FF 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; increament high byte 
                           000002   183 	LB=2 ; increament low byte 
                           000002   184 	VSIZE=2
      001400                        185 move::
      001400 88               [ 1]  186 	push a 
      001401                        187 	_vars VSIZE 
      001401 52 02            [ 2]    1     sub sp,#VSIZE 
      001403 0F 01            [ 1]  188 	clr (INCR,sp)
      001405 0F 02            [ 1]  189 	clr (LB,sp)
      001407 90 89            [ 2]  190 	pushw y 
      001409 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      00140B 90 85            [ 2]  192 	popw y 
      00140D 27 31            [ 1]  193 	jreq move_exit ; x==y 
      00140F 2B 0E            [ 1]  194 	jrmi move_down
      001411                        195 move_up: ; start from top address with incr=-1
      001411 72 BB 00 0D      [ 2]  196 	addw x,acc16
      001415 72 B9 00 0D      [ 2]  197 	addw y,acc16
      001419 03 01            [ 1]  198 	cpl (INCR,sp)
      00141B 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      00141D 20 05            [ 2]  200 	jra move_loop  
      00141F                        201 move_down: ; start from bottom address with incr=1 
      00141F 5A               [ 2]  202     decw x 
      001420 90 5A            [ 2]  203 	decw y
      001422 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      001424                        205 move_loop:	
      001424 C6 00 0D         [ 1]  206     ld a, acc16 
      001427 CA 00 0E         [ 1]  207 	or a, acc8
      00142A 27 14            [ 1]  208 	jreq move_exit 
      00142C 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      00142F 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      001432 90 F6            [ 1]  211 	ld a,(y)
      001434 F7               [ 1]  212 	ld (x),a 
      001435 89               [ 2]  213 	pushw x 
      001436 CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      001439 5A               [ 2]  215 	decw x 
      00143A CF 00 0D         [ 2]  216 	ldw acc16,x 
      00143D 85               [ 2]  217 	popw x 
      00143E 20 E4            [ 2]  218 	jra move_loop
      001440                        219 move_exit:
      001440                        220 	_drop VSIZE
      001440 5B 02            [ 2]    1     addw sp,#VSIZE 
      001442 84               [ 1]  221 	pop a 
      001443 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      001444                        231 clear_vars:
      001444 89               [ 2]  232 	pushw x 
      001445 88               [ 1]  233 	push a  
      001446 AE 00 30         [ 2]  234 	ldw x,#vars 
      001449 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      00144B 7F               [ 1]  236 1$:	clr (x)
      00144C 5C               [ 1]  237 	incw x 
      00144D 4A               [ 1]  238 	dec a 
      00144E 26 FB            [ 1]  239 	jrne 1$
      001450 84               [ 1]  240 	pop a 
      001451 85               [ 2]  241 	popw x 
      001452 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      001453 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      001499                        253 system_information:
      001499 AE 14 53         [ 2]  254 	ldw x,#software 
      00149C CD 09 A2         [ 4]  255 	call puts 
      00149F A6 02            [ 1]  256 	ld a,#MAJOR 
      0014A1 C7 00 0E         [ 1]  257 	ld acc8,a 
      0014A4 5F               [ 1]  258 	clrw x 
      0014A5 CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0014A8 72 5F 00 23      [ 1]  260 	clr tab_width  
      0014AC 35 0A 00 0A      [ 1]  261 	mov base, #10 
      0014B0 CD 17 FD         [ 4]  262 	call prt_acc24 
      0014B3 A6 2E            [ 1]  263 	ld a,#'.
      0014B5 CD 09 45         [ 4]  264 	call putc 
      0014B8 A6 00            [ 1]  265 	ld a,#MINOR 
      0014BA C7 00 0E         [ 1]  266 	ld acc8,a 
      0014BD 5F               [ 1]  267 	clrw x 
      0014BE CF 00 0C         [ 2]  268 	ldw acc24,x 
      0014C1 CD 17 FD         [ 4]  269 	call prt_acc24
      0014C4 A6 0D            [ 1]  270 	ld a,#CR 
      0014C6 CD 09 45         [ 4]  271 	call putc
                                    272 ;call test 
      0014C9 81               [ 4]  273 	ret
                                    274 
      0014CA                        275 warm_init:
      0014CA 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      0014CE 72 5F 00 22      [ 1]  277 	clr flags 
      0014D2 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      0014D6 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      0014DA 35 0A 00 0A      [ 1]  280 	mov base,#10 
      0014DE AE 00 00         [ 2]  281 	ldw x,#0 
      0014E1 CF 00 04         [ 2]  282 	ldw basicptr,x 
      0014E4 CF 00 00         [ 2]  283 	ldw in.w,x 
      0014E7 72 5F 00 03      [ 1]  284 	clr count
      0014EB 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014EC                        291 clear_basic:
      0014EC 89               [ 2]  292 	pushw x 
      0014ED 72 5F 00 03      [ 1]  293 	clr count
      0014F1 72 5F 00 01      [ 1]  294 	clr in  
      0014F5 AE 00 80         [ 2]  295 	ldw x,#free_ram 
      0014F8 CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      0014FB CF 00 1D         [ 2]  297 	ldw txtend,x 
      0014FE CD 14 44         [ 4]  298 	call clear_vars 
      001501 85               [ 2]  299 	popw x
      001502 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001503                        305 err_msg:
      001503 00 00 15 25 15 32 15   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             40 15 59 15 68
      00150F 15 7E 15 94 15 AE 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             BF 15 D0
      001519 15 DC 16 0F 16 1F 16   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             33 16 46
      001523 16 53                  309 	.word err_overflow 
                                    310 
      001525 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      001532 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      001540 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001559 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001568 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00157E 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001594 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0015AE 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0015BF 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015D0 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015DC 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00160F 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00161F 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001633 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001646 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001653 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      00165D 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00166F 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001680 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      001690                        332 syntax_error::
      001690 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      001692                        335 tb_error::
      001692 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      001697 88               [ 1]  337 	push a 
      001698 AE 16 5D         [ 2]  338 	ldw x, #rt_msg 
      00169B CD 09 A2         [ 4]  339 	call puts 
      00169E 84               [ 1]  340 	pop a 
      00169F AE 15 03         [ 2]  341 	ldw x, #err_msg 
      0016A2 72 5F 00 0D      [ 1]  342 	clr acc16 
      0016A6 48               [ 1]  343 	sll a
      0016A7 72 59 00 0D      [ 1]  344 	rlc acc16  
      0016AB C7 00 0E         [ 1]  345 	ld acc8, a 
      0016AE 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      0016B2 FE               [ 2]  347 	ldw x,(x)
      0016B3 CD 09 A2         [ 4]  348 	call puts
      0016B6 CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      0016B9 C6 00 03         [ 1]  351 ld a,count 
      0016BC 90 5F            [ 1]  352 clrw y 
      0016BE 90 02            [ 1]  353 rlwa y  
      0016C0 CD 06 A1         [ 4]  354 call hex_dump
      0016C3 CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      0016C6 C6 00 01         [ 1]  357 	ld a,in 
      0016C9 CD 1E D6         [ 4]  358 	call prt_basic_line
      0016CC AE 16 80         [ 2]  359 	ldw x,#tk_id 
      0016CF CD 09 A2         [ 4]  360 	call puts 
      0016D2 C6 00 02         [ 1]  361 	ld a,in.saved 
      0016D5 5F               [ 1]  362 	clrw x 
      0016D6 97               [ 1]  363 	ld xl,a 
      0016D7 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      0016DB F6               [ 1]  365 	ld a,(x)
      0016DC 5F               [ 1]  366 	clrw x 
      0016DD 97               [ 1]  367 	ld xl,a 
      0016DE CD 17 E6         [ 4]  368 	call prt_i16
      0016E1 20 35            [ 2]  369 	jra 6$
      0016E3                        370 1$:	
      0016E3 88               [ 1]  371 	push a 
      0016E4 AE 16 6F         [ 2]  372 	ldw x,#comp_msg
      0016E7 CD 09 A2         [ 4]  373 	call puts 
      0016EA 84               [ 1]  374 	pop a 
      0016EB AE 15 03         [ 2]  375 	ldw x, #err_msg 
      0016EE 72 5F 00 0D      [ 1]  376 	clr acc16 
      0016F2 48               [ 1]  377 	sll a
      0016F3 72 59 00 0D      [ 1]  378 	rlc acc16  
      0016F7 C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0016FA 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      0016FE FE               [ 2]  381 	ldw x,(x)
      0016FF CD 09 A2         [ 4]  382 	call puts
      001702 AE 16 68         [ 2]  383 	ldw x,#tib
      001705 CD 09 A2         [ 4]  384 	call puts 
      001708 A6 0D            [ 1]  385 	ld a,#CR 
      00170A CD 09 45         [ 4]  386 	call putc
      00170D CE 00 00         [ 2]  387 	ldw x,in.w
      001710 CD 0A 0F         [ 4]  388 	call spaces
      001713 A6 5E            [ 1]  389 	ld a,#'^
      001715 CD 09 45         [ 4]  390 	call putc 
      001718 AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      00171B 94               [ 1]  392     ldw sp,x
                                    393 
      00171C                        394 warm_start:
      00171C CD 14 CA         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      00171F                        399 cmd_line: ; user interface 
      00171F A6 0D            [ 1]  400 	ld a,#CR 
      001721 CD 09 45         [ 4]  401 	call putc 
      001724 A6 3E            [ 1]  402 	ld a,#'> 
      001726 CD 09 45         [ 4]  403 	call putc
      001729 CD 0A A7         [ 4]  404 	call readln
      00172C 72 5D 00 03      [ 1]  405 	tnz count 
      001730 27 ED            [ 1]  406 	jreq cmd_line
      001732 CD 10 CE         [ 4]  407 	call compile
                                    408 
                                    409 ;;;;;;;;;;;;;;;;;;;;;;	
                                    410 ;pushw y 
                                    411 ;ldw x,txtbgn  
                                    412 ;ldw y,txtend
                                    413 ;ldw acc16,x   
                                    414 ;subw y,acc16 
                                    415 ;call hex_dump
                                    416 ;popw y 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;
                                    418 
                                    419 ; if text begin with a line number
                                    420 ; the compiler set count to zero    
                                    421 ; so code is not interpreted
      001735 72 5D 00 03      [ 1]  422 	tnz count 
      001739 27 E4            [ 1]  423 	jreq cmd_line
                                    424 	
                                    425 ; if direct command 
                                    426 ; it's ready to interpret 
                                    427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    428 ;; This is the interpreter loop
                                    429 ;; for each BASIC code line. 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00173B                        431 interpreter: 
      00173B C6 00 01         [ 1]  432 	ld a,in 
      00173E C1 00 03         [ 1]  433 	cp a,count 
      001741 2B 1D            [ 1]  434 	jrmi interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001743                        435 next_line:
      001743 72 01 00 22 D7   [ 2]  436 	btjf flags, #FRUN, cmd_line
      001748 CE 00 04         [ 2]  437 	ldw x,basicptr
      00174B 72 BB 00 00      [ 2]  438 	addw x,in.w 
      00174F C3 00 1D         [ 2]  439 	cpw x,txtend 
      001752 2A C8            [ 1]  440 	jrpl warm_start
      001754 CF 00 04         [ 2]  441 	ldw basicptr,x ; start of next line  
      001757 E6 02            [ 1]  442 	ld a,(2,x)
      001759 C7 00 03         [ 1]  443 	ld count,a 
      00175C 35 03 00 01      [ 1]  444 	mov in,#3 ; skip first 3 bytes of line 
      001760                        445 interp_loop:
      001760 CD 17 91         [ 4]  446 	call next_token
      001763 A1 00            [ 1]  447 	cp a,#TK_NONE 
      001765 27 DC            [ 1]  448 	jreq next_line 
      001767 A1 80            [ 1]  449 	cp a,#TK_CMD
      001769 26 06            [ 1]  450 	jrne 1$
      00176B CD 17 AA         [ 4]  451 	call get_code_addr
      00176E FD               [ 4]  452 	call (x) 
      00176F 20 EF            [ 2]  453 	jra interp_loop 
      001771                        454 1$:	 
      001771 A1 85            [ 1]  455 	cp a,#TK_VAR
      001773 26 05            [ 1]  456 	jrne 2$
      001775 CD 1B 95         [ 4]  457 	call let_var  
      001778 20 E6            [ 2]  458 	jra interp_loop 
      00177A                        459 2$:	
      00177A A1 05            [ 1]  460 	cp a,#TK_ARRAY 
      00177C 26 05            [ 1]  461 	jrne 3$
      00177E CD 1B 90         [ 4]  462 	call let_array 
      001781 20 DD            [ 2]  463 	jra interp_loop
      001783                        464 3$:	
      001783 A1 0A            [ 1]  465 	cp a,#TK_COLON 
      001785 27 D9            [ 1]  466 	jreq interp_loop
      001787 A1 03            [ 1]  467 4$: cp a,#TK_LABEL
      001789 CD 17 B7         [ 4]  468 	call skip_string 
      00178C 20 D2            [ 2]  469 	jra interp_loop 
      00178E CC 16 90         [ 2]  470 5$:	jp syntax_error 
                                    471 
                                    472 ;--------------------------
                                    473 ; extract next token from
                                    474 ; token list 
                                    475 ; basicptr -> base address 
                                    476 ; in  -> offset in list array 
                                    477 ; output:
                                    478 ;   A 		token attribute
                                    479 ;   X 		*token_value 
                                    480 ;----------------------------------------
      001791                        481 next_token::
                                    482 ;	clrw x 
      001791 C6 00 01         [ 1]  483 	ld a,in 
      001794 C7 00 02         [ 1]  484 	ld in.saved,a ; in case "_unget_token" needed 
                                    485 ; don't replace sub by "cp a,count" 
                                    486 ; if end of line must return with A=0   	
      001797 C0 00 03         [ 1]  487 	sub a,count 
      00179A 27 0D            [ 1]  488 	jreq 9$ ; end of line 
      00179C                        489 0$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      00179C CE 00 04         [ 2]  490 	ldw x,basicptr 
      00179F 72 BB 00 00      [ 2]  491 	addw x,in.w 
      0017A3 F6               [ 1]  492 	ld a,(x)
      0017A4 5C               [ 1]  493 	incw x
      0017A5 72 5C 00 01      [ 1]  494 	inc in   
      0017A9 81               [ 4]  495 9$: ret 
                                    496 
                                    497 ;------------------------
                                    498 ; get cmd and function 
                                    499 ; code address 
                                    500 ; input:
                                    501 ;    X   * cmd|func index 
                                    502 ;        in code_addr table 
                                    503 ;------------------------
      0017AA                        504 get_code_addr:
      0017AA FE               [ 2]  505 	ldw x,(x)
      0017AB DE 32 D4         [ 2]  506 	ldw x,(code_addr,x)
      0017AE                        507 skip_2_bytes:
      0017AE 72 5C 00 01      [ 1]  508 	inc in 
      0017B2 72 5C 00 01      [ 1]  509 	inc in 
      0017B6 81               [ 4]  510 	ret
                                    511 
                                    512 ;-------------------------
                                    513 ;  skip .asciz in BASIC line 
                                    514 ;  name 
                                    515 ;  input:
                                    516 ;     x		* string 
                                    517 ;  output:
                                    518 ;     none 
                                    519 ;-------------------------
      0017B7                        520 skip_string:
      0017B7 F6               [ 1]  521 	ld a,(x)
      0017B8 27 03            [ 1]  522 	jreq 1$
      0017BA 5C               [ 1]  523 	incw x 
      0017BB 20 FA            [ 2]  524 	jra skip_string 
      0017BD 5C               [ 1]  525 1$: incw x 	
      0017BE 72 B0 00 04      [ 2]  526 	subw x,basicptr 
      0017C2 CF 00 00         [ 2]  527 	ldw in.w,x 
      0017C5 81               [ 4]  528 	ret 
                                    529 
                                    530 ;---------------------
                                    531 ; extract 16 bits  
                                    532 ; address from BASIC
                                    533 ; code 
                                    534 ; input:
                                    535 ;    X    *address
                                    536 ; output:
                                    537 ;    X    address 
                                    538 ;-------------------- 
      0017C6                        539 get_addr:
      0017C6 FE               [ 2]  540 	ldw x,(x)
      0017C7 72 5C 00 01      [ 1]  541 	inc in 
      0017CB 72 5C 00 01      [ 1]  542 	inc in 
      0017CF 81               [ 4]  543 	ret 
                                    544 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    545 ;--------------------
                                    546 ; extract int24_t  
                                    547 ; value from BASIC 
                                    548 ; code 
                                    549 ; input:
                                    550 ;    X   *integer 
                                    551 ; output:
                                    552 ;    A:X   int24  
                                    553 ;--------------------
      0017D0                        554 get_int24:
      0017D0 F6               [ 1]  555 	ld a,(x)
      0017D1 EE 01            [ 2]  556 	ldw x,(1,x)
                                    557 ; skip 3 bytes 
      0017D3 72 5C 00 01      [ 1]  558 	inc in 
      0017D7 72 5C 00 01      [ 1]  559 	inc in 
      0017DB 72 5C 00 01      [ 1]  560 	inc in 
      0017DF 81               [ 4]  561 	ret 
                                    562 
                                    563 ;-------------------------
                                    564 ; get character from 
                                    565 ; BASIC code 
                                    566 ; input:
                                    567 ;    X   *char 
                                    568 ; output:
                                    569 ;    A    char 
                                    570 ;-------------------------
      0017E0                        571 get_char:
      0017E0 F6               [ 1]  572 	ld a,(x)
      0017E1 72 5C 00 01      [ 1]  573 	inc in  
      0017E5 81               [ 4]  574     ret 
                                    575 
                                    576 ;-----------------------------------
                                    577 ; print a 16 bit integer 
                                    578 ; using variable 'base' as conversion
                                    579 ; format.
                                    580 ; input:
                                    581 ;    X       integer to print 
                                    582 ;   'base'    conversion base 
                                    583 ; output:
                                    584 ;   terminal  
                                    585 ;-----------------------------------
      0017E6                        586 prt_i16:
      0017E6 72 5F 00 0C      [ 1]  587 	clr acc24 
      0017EA CF 00 0D         [ 2]  588 	ldw acc16,x 
      0017ED A6 10            [ 1]  589 	ld a,#16
      0017EF C1 00 0A         [ 1]  590 	cp a,base
      0017F2 27 09            [ 1]  591 	jreq prt_acc24  
      0017F4 72 0F 00 0D 04   [ 2]  592 	btjf acc16,#7,prt_acc24
      0017F9 72 53 00 0C      [ 1]  593 	cpl acc24 ; sign extend 
                                    594 	
                                    595 ;------------------------------------
                                    596 ; print integer in acc24 
                                    597 ; input:
                                    598 ;	acc24 		integer to print 
                                    599 ;	'base' 		numerical base for conversion 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    600 ;   'tab_width' field width 
                                    601 ;    A 			signed||unsigned conversion
                                    602 ;  output:
                                    603 ;    A          string length
                                    604 ;------------------------------------
      0017FD                        605 prt_acc24:
      0017FD A6 FF            [ 1]  606 	ld a,#255  ; signed conversion  
      0017FF CD 18 23         [ 4]  607     call itoa  ; conversion entier en  .asciz
      001802 CD 11 75         [ 4]  608 	call right_align  
      001805 88               [ 1]  609 	push a 
      001806 CD 09 A2         [ 4]  610 	call puts
      001809 84               [ 1]  611 	pop a 
      00180A 81               [ 4]  612     ret	
                                    613 
                                    614 ;---------------------------------------
                                    615 ;  print value at xstack top 
                                    616 ;---------------------------------------
      00180B                        617 print_top: 
      00180B                        618 	_xpop 
      00180B 90 F6            [ 1]    1     ld a,(y)
      00180D 93               [ 1]    2     ldw x,y 
      00180E EE 01            [ 2]    3     ldw x,(1,x)
      001810 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001814 C7 00 0C         [ 1]  619 	ld acc24,a 
      001817 CF 00 0D         [ 2]  620 	ldw acc16,x 
      00181A CD 17 FD         [ 4]  621 	call prt_acc24 
      00181D A6 20            [ 1]  622 	ld a,#SPACE
      00181F CD 09 45         [ 4]  623 	call putc 
      001822 81               [ 4]  624 	ret 
                                    625 
                                    626 ;------------------------------------
                                    627 ; convert integer in acc24 to string
                                    628 ; input:
                                    629 ;   'base'	conversion base 
                                    630 ;	acc24	integer to convert
                                    631 ;   A       0=unsigned, else signed 
                                    632 ; output:
                                    633 ;   X  		pointer to first char of string
                                    634 ;   A       string length
                                    635 ;------------------------------------
                           000001   636 	SIGN=1  ; integer sign 
                           000002   637 	LEN=2 
                           000003   638 	PSTR=3
                           000004   639 	VSIZE=4 ;locals size
      001823                        640 itoa::
      001823                        641 	_vars VSIZE
      001823 52 04            [ 2]    1     sub sp,#VSIZE 
      001825 0F 02            [ 1]  642 	clr (LEN,sp) ; string length  
      001827 0F 01            [ 1]  643 	clr (SIGN,sp)    ; sign
      001829 4D               [ 1]  644 	tnz A
      00182A 27 11            [ 1]  645 	jreq 1$ ; unsigned conversion  
      00182C C6 00 0A         [ 1]  646 	ld a,base 
      00182F A1 0A            [ 1]  647 	cp a,#10
      001831 26 0A            [ 1]  648 	jrne 1$
                                    649 	; base 10 string display with negative sign if bit 23==1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      001833 72 0F 00 0C 05   [ 2]  650 	btjf acc24,#7,1$
      001838 03 01            [ 1]  651 	cpl (SIGN,sp)
      00183A CD 02 0E         [ 4]  652 	call neg_acc24
      00183D                        653 1$:
                                    654 ; initialize string pointer 
      00183D AE 16 68         [ 2]  655 	ldw x,#tib 
      001840 1C 00 50         [ 2]  656 	addw x,#TIB_SIZE
      001843 5A               [ 2]  657 	decw x 
      001844 7F               [ 1]  658 	clr (x)
      001845                        659 itoa_loop:
      001845 C6 00 0A         [ 1]  660     ld a,base
                                    661 ;	ldw (PSTR,sp),x 
      001848 CD 03 0A         [ 4]  662     call divu24_8 ; acc24/A 
                                    663 ;	ldw x,(PSTR,sp)
      00184B AB 30            [ 1]  664     add a,#'0  ; remainder of division
      00184D A1 3A            [ 1]  665     cp a,#'9+1
      00184F 2B 02            [ 1]  666     jrmi 2$
      001851 AB 07            [ 1]  667     add a,#7 
      001853                        668 2$:	
      001853 5A               [ 2]  669 	decw x
      001854 F7               [ 1]  670     ld (x),a
      001855 0C 02            [ 1]  671 	inc (LEN,sp)
                                    672 	; if acc24==0 conversion done
      001857 C6 00 0C         [ 1]  673 	ld a,acc24
      00185A CA 00 0D         [ 1]  674 	or a,acc16
      00185D CA 00 0E         [ 1]  675 	or a,acc8
      001860 26 E3            [ 1]  676     jrne itoa_loop
                                    677 	;conversion done, next add '$' or '-' as required
      001862 C6 00 0A         [ 1]  678 	ld a,base 
      001865 A1 10            [ 1]  679 	cp a,#16
      001867 27 08            [ 1]  680 	jreq 8$
      001869 7B 01            [ 1]  681 	ld a,(SIGN,sp)
      00186B 27 0A            [ 1]  682     jreq 10$
      00186D A6 2D            [ 1]  683     ld a,#'-
      00186F 20 02            [ 2]  684 	jra 9$ 
      001871                        685 8$:	
      001871 A6 24            [ 1]  686 	ld a,#'$ 
      001873 5A               [ 2]  687 9$: decw x
      001874 F7               [ 1]  688     ld (x),a
      001875 0C 02            [ 1]  689 	inc (LEN,sp)
      001877                        690 10$:
      001877 7B 02            [ 1]  691 	ld a,(LEN,sp)
      001879                        692 	_drop VSIZE
      001879 5B 04            [ 2]    1     addw sp,#VSIZE 
      00187B 81               [ 4]  693 	ret
                                    694 
                                    695 ;------------------------------------
                                    696 ; convert alpha to uppercase
                                    697 ; input:
                                    698 ;    a  character to convert
                                    699 ; output:
                                    700 ;    a  uppercase character
                                    701 ;------------------------------------
      00187C                        702 to_upper::
      00187C A1 61            [ 1]  703 	cp a,#'a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      00187E 2A 01            [ 1]  704 	jrpl 1$
      001880 81               [ 4]  705 0$:	ret
      001881 A1 7A            [ 1]  706 1$: cp a,#'z	
      001883 22 FB            [ 1]  707 	jrugt 0$
      001885 A0 20            [ 1]  708 	sub a,#32
      001887 81               [ 4]  709 	ret
                                    710 	
                                    711 ;------------------------------------
                                    712 ; convert pad content in integer
                                    713 ; input:
                                    714 ;    x		* .asciz to convert
                                    715 ; output:
                                    716 ;    acc24      int24_t
                                    717 ;------------------------------------
                                    718 	; local variables
                           000001   719 	SIGN=1 ; 1 byte, 
                           000002   720 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   721 	TEMP=3 ; 1 byte, temporary storage
                           000003   722 	VSIZE=3 ; 3 bytes reserved for local storage
      001888                        723 atoi24::
      001888 89               [ 2]  724 	pushw x 
      001889                        725 	_vars VSIZE
      001889 52 03            [ 2]    1     sub sp,#VSIZE 
                                    726 	; acc24=0 
      00188B 72 5F 00 0C      [ 1]  727 	clr acc24    
      00188F 72 5F 00 0D      [ 1]  728 	clr acc16
      001893 72 5F 00 0E      [ 1]  729 	clr acc8 
      001897 0F 01            [ 1]  730 	clr (SIGN,sp)
      001899 A6 0A            [ 1]  731 	ld a,#10
      00189B 6B 02            [ 1]  732 	ld (BASE,sp),a ; default base decimal
      00189D F6               [ 1]  733 	ld a,(x)
      00189E 27 47            [ 1]  734 	jreq 9$  ; completed if 0
      0018A0 A1 2D            [ 1]  735 	cp a,#'-
      0018A2 26 04            [ 1]  736 	jrne 1$
      0018A4 03 01            [ 1]  737 	cpl (SIGN,sp)
      0018A6 20 08            [ 2]  738 	jra 2$
      0018A8 A1 24            [ 1]  739 1$: cp a,#'$
      0018AA 26 06            [ 1]  740 	jrne 3$
      0018AC A6 10            [ 1]  741 	ld a,#16
      0018AE 6B 02            [ 1]  742 	ld (BASE,sp),a
      0018B0 5C               [ 1]  743 2$:	incw x
      0018B1 F6               [ 1]  744 	ld a,(x)
      0018B2                        745 3$:	
      0018B2 A1 61            [ 1]  746 	cp a,#'a
      0018B4 2B 02            [ 1]  747 	jrmi 4$
      0018B6 A0 20            [ 1]  748 	sub a,#32
      0018B8 A1 30            [ 1]  749 4$:	cp a,#'0
      0018BA 2B 2B            [ 1]  750 	jrmi 9$
      0018BC A0 30            [ 1]  751 	sub a,#'0
      0018BE A1 0A            [ 1]  752 	cp a,#10
      0018C0 2B 06            [ 1]  753 	jrmi 5$
      0018C2 A0 07            [ 1]  754 	sub a,#7
      0018C4 11 02            [ 1]  755 	cp a,(BASE,sp)
      0018C6 2A 1F            [ 1]  756 	jrpl 9$
      0018C8 6B 03            [ 1]  757 5$:	ld (TEMP,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0018CA 7B 02            [ 1]  758 	ld a,(BASE,sp)
      0018CC CD 02 2B         [ 4]  759 	call mulu24_8
      0018CF 7B 03            [ 1]  760 	ld a,(TEMP,sp)
      0018D1 CB 00 0E         [ 1]  761 	add a,acc24+2
      0018D4 C7 00 0E         [ 1]  762 	ld acc24+2,a
      0018D7 4F               [ 1]  763 	clr a
      0018D8 C9 00 0D         [ 1]  764 	adc a,acc24+1
      0018DB C7 00 0D         [ 1]  765 	ld acc24+1,a
      0018DE 4F               [ 1]  766 	clr a
      0018DF C9 00 0C         [ 1]  767 	adc a,acc24
      0018E2 C7 00 0C         [ 1]  768 	ld acc24,a
      0018E5 20 C9            [ 2]  769 	jra 2$
      0018E7 0D 01            [ 1]  770 9$:	tnz (SIGN,sp)
      0018E9 27 03            [ 1]  771     jreq atoi_exit
      0018EB CD 02 0E         [ 4]  772     call neg_acc24
      0018EE                        773 atoi_exit: 
      0018EE                        774 	_drop VSIZE
      0018EE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0018F0 85               [ 2]  775 	popw x ; restore x
      0018F1 81               [ 4]  776 	ret
                                    777 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    780 ;;   TINY BASIC  operators,
                                    781 ;;   commands and functions 
                                    782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    783 
                                    784 ;---------------------------------
                                    785 ; dictionary search 
                                    786 ; input:
                                    787 ;	X 		dictionary entry point, name field  
                                    788 ;   y		.asciz name to search 
                                    789 ; output:
                                    790 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    791 ;  X		cmd_index
                                    792 ;---------------------------------
                           000001   793 	NLEN=1 ; cmd length 
                           000002   794 	XSAVE=2
                           000004   795 	YSAVE=4
                           000005   796 	VSIZE=5 
      0018F2                        797 search_dict::
      0018F2                        798 	_vars VSIZE 
      0018F2 52 05            [ 2]    1     sub sp,#VSIZE 
      0018F4 17 04            [ 2]  799 	ldw (YSAVE,sp),y 
      0018F6                        800 search_next:
      0018F6 1F 02            [ 2]  801 	ldw (XSAVE,sp),x 
                                    802 ; get name length in dictionary	
      0018F8 F6               [ 1]  803 	ld a,(x)
      0018F9 A4 0F            [ 1]  804 	and a,#0xf 
      0018FB 6B 01            [ 1]  805 	ld (NLEN,sp),a  
      0018FD 16 04            [ 2]  806 	ldw y,(YSAVE,sp) ; name pointer 
      0018FF 5C               [ 1]  807 	incw x 
      001900                        808 cp_loop:
      001900 90 F6            [ 1]  809 	ld a,(y)
      001902 27 1B            [ 1]  810 	jreq str_match 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001904 0D 01            [ 1]  811 	tnz (NLEN,sp)
      001906 27 0A            [ 1]  812 	jreq no_match  
      001908 F1               [ 1]  813 	cp a,(x)
      001909 26 07            [ 1]  814 	jrne no_match 
      00190B 90 5C            [ 1]  815 	incw y 
      00190D 5C               [ 1]  816 	incw x
      00190E 0A 01            [ 1]  817 	dec (NLEN,sp)
      001910 20 EE            [ 2]  818 	jra cp_loop 
      001912                        819 no_match:
      001912 1E 02            [ 2]  820 	ldw x,(XSAVE,sp) 
      001914 1D 00 02         [ 2]  821 	subw x,#2 ; move X to link field
      001917 4B 00            [ 1]  822 	push #TK_NONE 
      001919 FE               [ 2]  823 	ldw x,(x) ; next word link 
      00191A 84               [ 1]  824 	pop a ; TK_NONE 
      00191B 27 1F            [ 1]  825 	jreq search_exit  ; not found  
                                    826 ;try next 
      00191D 20 D7            [ 2]  827 	jra search_next
      00191F                        828 str_match:
      00191F 1E 02            [ 2]  829 	ldw x,(XSAVE,sp)
      001921 F6               [ 1]  830 	ld a,(X)
      001922 6B 01            [ 1]  831 	ld (NLEN,sp),a ; needed to test keyword type  
      001924 A4 0F            [ 1]  832 	and a,#0xf 
                                    833 ; move x to procedure address field 	
      001926 4C               [ 1]  834 	inc a 
      001927 C7 00 0E         [ 1]  835 	ld acc8,a 
      00192A 72 5F 00 0D      [ 1]  836 	clr acc16 
      00192E 72 BB 00 0D      [ 2]  837 	addw x,acc16 
      001932 FE               [ 2]  838 	ldw x,(x) ; routine index  
                                    839 ;determine keyword type bits 7:6 
      001933 7B 01            [ 1]  840 	ld a,(NLEN,sp)
      001935 4E               [ 1]  841 	swap a 
      001936 A4 0C            [ 1]  842 	and a,#0xc
      001938 44               [ 1]  843 	srl a
      001939 44               [ 1]  844 	srl a 
      00193A AB 80            [ 1]  845 	add a,#128
      00193C                        846 search_exit: 
      00193C                        847 	_drop VSIZE 
      00193C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00193E 81               [ 4]  848 	ret 
                                    849 
                                    850 ;---------------------
                                    851 ; check if next token
                                    852 ;  is of expected type 
                                    853 ; input:
                                    854 ;   A 		 expected token attribute
                                    855 ;  ouput:
                                    856 ;   none     if fail call syntax_error 
                                    857 ;--------------------
      00193F                        858 expect:
      00193F 88               [ 1]  859 	push a 
      001940 CD 17 91         [ 4]  860 	call next_token 
      001943 11 01            [ 1]  861 	cp a,(1,sp)
      001945 27 03            [ 1]  862 	jreq 1$
      001947 CC 16 90         [ 2]  863 	jp syntax_error
      00194A 84               [ 1]  864 1$: pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00194B 81               [ 4]  865 	ret 
                                    866 
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    868 ; parse arguments list 
                                    869 ; between ()
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00194C                        871 func_args:
      00194C A6 06            [ 1]  872 	ld a,#TK_LPAREN 
      00194E CD 19 3F         [ 4]  873 	call expect 
                                    874 ; expected to continue in arg_list 
                                    875 ; caller must check for TK_RPAREN 
                                    876 
                                    877 ;-------------------------------
                                    878 ; parse embedded BASIC routines 
                                    879 ; arguments list.
                                    880 ; arg_list::=  expr[','expr]*
                                    881 ; all arguments are of int24_t type
                                    882 ; and pushed on stack 
                                    883 ; input:
                                    884 ;   none
                                    885 ; output:
                                    886 ;   xstack{n}   arguments pushed on xstack
                                    887 ;   A 	number of arguments pushed on xstack  
                                    888 ;--------------------------------
      001951                        889 arg_list:
      001951 4B 00            [ 1]  890 	push #0  
      001953 CD 1A 88         [ 4]  891 1$: call expression
      001956 A1 00            [ 1]  892 	cp a,#TK_NONE 
      001958 27 1A            [ 1]  893 	jreq 5$
      00195A A1 84            [ 1]  894 	cp a,#TK_INTGR
      00195C 26 0D            [ 1]  895 	jrne 4$
      00195E                        896 3$: 
      00195E 0C 01            [ 1]  897 	inc (1,sp)
      001960 CD 17 91         [ 4]  898 	call next_token 
      001963 A1 08            [ 1]  899 	cp a,#TK_COMMA 
      001965 27 EC            [ 1]  900 	jreq 1$ 
      001967 A1 00            [ 1]  901 	cp a,#TK_NONE 
      001969 27 09            [ 1]  902 	jreq 5$ 
      00196B A1 07            [ 1]  903 4$:	cp a,#TK_RPAREN 
      00196D 27 05            [ 1]  904 	jreq 5$
      00196F                        905 	_unget_token 
      00196F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001974 84               [ 1]  906 5$:	pop a  
      001975 81               [ 4]  907 	ret 
                                    908 
                                    909 ;--------------------------------
                                    910 ;   BASIC commnands 
                                    911 ;--------------------------------
                                    912 
                                    913 ;--------------------------------
                                    914 ;  arithmetic and relational 
                                    915 ;  routines
                                    916 ;  operators precedence
                                    917 ;  highest to lowest
                                    918 ;  operators on same row have 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                    919 ;  same precedence and are executed
                                    920 ;  from left to right.
                                    921 ;	'*','/','%'
                                    922 ;   '-','+'
                                    923 ;   '=','>','<','>=','<=','<>','><'
                                    924 ;   '<>' and '><' are equivalent for not equal.
                                    925 ;--------------------------------
                                    926 
                                    927 ;---------------------
                                    928 ; return array element
                                    929 ; address from @(expr)
                                    930 ; input:
                                    931 ;   A 		TK_ARRAY
                                    932 ; output:
                                    933 ;	X 		element address 
                                    934 ;----------------------
      001976                        935 get_array_element:
      001976 CD 19 4C         [ 4]  936 	call func_args 
      001979 A1 01            [ 1]  937 	cp a,#1
      00197B 27 03            [ 1]  938 	jreq 1$
      00197D CC 16 90         [ 2]  939 	jp syntax_error
      001980                        940 1$: _xpop 
      001980 90 F6            [ 1]    1     ld a,(y)
      001982 93               [ 1]    2     ldw x,y 
      001983 EE 01            [ 2]    3     ldw x,(1,x)
      001985 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    941     ; ignore A, index < 65536 in any case 
                                    942 	; check for bounds 
      001989 C3 00 20         [ 2]  943 	cpw x,array_size 
      00198C 23 05            [ 2]  944 	jrule 3$
                                    945 ; bounds {1..array_size}	
      00198E A6 0A            [ 1]  946 2$: ld a,#ERR_BAD_VALUE 
      001990 CC 16 92         [ 2]  947 	jp tb_error 
      001993 5D               [ 2]  948 3$: tnzw  x
      001994 27 F8            [ 1]  949 	jreq 2$ 
      001996 89               [ 2]  950 	pushw x 
      001997 58               [ 2]  951 	sllw x 
      001998 72 FB 01         [ 2]  952 	addw x,(1,sp) ; index*size_of(int24)
      00199B 1F 01            [ 2]  953 	ldw (1,sp),x  
      00199D AE 16 68         [ 2]  954 	ldw x,#tib ; array is below tib 
      0019A0 72 F0 01         [ 2]  955 	subw x,(1,sp)
      0019A3                        956 	_drop 2   
      0019A3 5B 02            [ 2]    1     addw sp,#2 
      0019A5 81               [ 4]  957 	ret 
                                    958 
                                    959 
                                    960 ;***********************************
                                    961 ;   expression parse,execute 
                                    962 ;***********************************
                                    963 ;-----------------------------------
                                    964 ; factor ::= ['+'|'-'|e]  var | @ |
                                    965 ;			 integer | function |
                                    966 ;			 '('relation')' 
                                    967 ; output:
                                    968 ;   A       token attribute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



                                    969 ;   xstack  value  
                                    970 ; ---------------------------------
                           000001   971 	NEG=1
                           000001   972 	VSIZE=1
      0019A6                        973 factor:
      0019A6                        974 	_vars VSIZE 
      0019A6 52 01            [ 2]    1     sub sp,#VSIZE 
      0019A8 0F 01            [ 1]  975 	clr (NEG,sp)
      0019AA CD 17 91         [ 4]  976 	call next_token
      0019AD A1 02            [ 1]  977 	cp a,#CMD_END  
      0019AF 25 6D            [ 1]  978 	jrult 16$
      0019B1 A1 10            [ 1]  979 1$:	cp a,#TK_PLUS 
      0019B3 27 06            [ 1]  980 	jreq 2$
      0019B5 A1 11            [ 1]  981 	cp a,#TK_MINUS 
      0019B7 26 05            [ 1]  982 	jrne 4$ 
      0019B9 03 01            [ 1]  983 	cpl (NEG,sp)
      0019BB                        984 2$:	
      0019BB CD 17 91         [ 4]  985 	call next_token 
      0019BE                        986 4$:	
      0019BE A1 81            [ 1]  987 	cp a,#TK_IFUNC 
      0019C0 26 06            [ 1]  988 	jrne 5$ 
      0019C2 CD 17 AA         [ 4]  989 	call get_code_addr 
      0019C5 FD               [ 4]  990 	call (x); result in A:X  
      0019C6 20 61            [ 2]  991 	jra 18$ 
      0019C8                        992 5$:
      0019C8 A1 84            [ 1]  993 	cp a,#TK_INTGR
      0019CA 26 05            [ 1]  994 	jrne 6$
      0019CC CD 17 D0         [ 4]  995 	call get_int24 
      0019CF 20 58            [ 2]  996 	jra 18$
      0019D1                        997 6$:
      0019D1 A1 05            [ 1]  998 	cp a,#TK_ARRAY
      0019D3 26 05            [ 1]  999 	jrne 7$
      0019D5 CD 19 76         [ 4] 1000 	call get_array_element
      0019D8 20 07            [ 2] 1001     jra 71$
      0019DA                       1002 7$:
      0019DA A1 85            [ 1] 1003 	cp a,#TK_VAR 
      0019DC 26 08            [ 1] 1004 	jrne 8$
      0019DE CD 17 C6         [ 4] 1005 	call get_addr 
      0019E1                       1006 71$:
      0019E1 F6               [ 1] 1007 	ld a,(x)
      0019E2 EE 01            [ 2] 1008 	ldw x,(1,x)
      0019E4 20 43            [ 2] 1009 	jra 18$
      0019E6                       1010 8$:
      0019E6 A1 03            [ 1] 1011 	cp a,#TK_LABEL 
      0019E8 26 11            [ 1] 1012 	jrne 9$ 
      0019EA 89               [ 2] 1013 	pushw x 
      0019EB CD 17 B7         [ 4] 1014 	call skip_string
      0019EE 85               [ 2] 1015 	popw x 
      0019EF CD 1C 69         [ 4] 1016 	call search_const 
      0019F2 4F               [ 1] 1017 	clr a 
      0019F3 5D               [ 2] 1018 	tnzw x 
      0019F4 27 28            [ 1] 1019 	jreq 16$
      0019F6 CD 1B C5         [ 4] 1020 	call get_const_value 
      0019F9 20 2E            [ 2] 1021 	jra 18$
      0019FB                       1022 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      0019FB A1 82            [ 1] 1023 	cp a,#TK_CFUNC 
      0019FD 26 08            [ 1] 1024 	jrne 12$
      0019FF CD 17 AA         [ 4] 1025 	call get_code_addr 
      001A02 FD               [ 4] 1026 	call(x)
      001A03 5F               [ 1] 1027 	clrw x 
      001A04 02               [ 1] 1028 	rlwa x 
      001A05 20 22            [ 2] 1029 	jra 18$ 	 
      001A07                       1030 12$:			
      001A07 A1 06            [ 1] 1031 	cp a,#TK_LPAREN
      001A09 26 13            [ 1] 1032 	jrne 16$
      001A0B CD 1A 88         [ 4] 1033 	call expression
      001A0E A6 07            [ 1] 1034 	ld a,#TK_RPAREN 
      001A10 CD 19 3F         [ 4] 1035 	call expect
      001A13                       1036 	_xpop 
      001A13 90 F6            [ 1]    1     ld a,(y)
      001A15 93               [ 1]    2     ldw x,y 
      001A16 EE 01            [ 2]    3     ldw x,(1,x)
      001A18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A1C 20 0B            [ 2] 1037 	jra 18$	
      001A1E                       1038 16$:
      001A1E 4D               [ 1] 1039 	tnz a 
      001A1F 27 1A            [ 1] 1040 	jreq 20$ 
      001A21                       1041 	_unget_token
      001A21 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A26 4F               [ 1] 1042 	clr a 
      001A27 20 12            [ 2] 1043 	jra 20$ 
      001A29                       1044 18$: 
      001A29 0D 01            [ 1] 1045 	tnz (NEG,sp)
      001A2B 27 03            [ 1] 1046 	jreq 19$
      001A2D CD 02 06         [ 4] 1047 	call neg_ax   
      001A30                       1048 19$: _xpush 
      001A30 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A34 90 F7            [ 1]    2     ld (y),a 
      001A36 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A39 A6 84            [ 1] 1049      ld a,#TK_INTGR
      001A3B                       1050 20$:
      001A3B                       1051 	_drop VSIZE
      001A3B 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A3D 81               [ 4] 1052 	ret
                                   1053 
                                   1054 
                                   1055 ;-----------------------------------
                                   1056 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1057 ; output:
                                   1058 ;   A    	token attribute 
                                   1059 ;	xstack		value 
                                   1060 ;-----------------------------------
                           000001  1061 	MULOP=1
                           000001  1062 	VSIZE=1
      001A3E                       1063 term:
      001A3E                       1064 	_vars VSIZE
      001A3E 52 01            [ 2]    1     sub sp,#VSIZE 
      001A40 CD 19 A6         [ 4] 1065 	call factor
      001A43 4D               [ 1] 1066 	tnz a 
      001A44 27 3F            [ 1] 1067 	jreq term_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A46                       1068 term01:	 ; check for  operator 
      001A46 CD 17 91         [ 4] 1069 	call next_token
      001A49 6B 01            [ 1] 1070 	ld (MULOP,sp),a
      001A4B A1 02            [ 1] 1071 	cp a,#CMD_END
      001A4D 25 2B            [ 1] 1072 	jrult 8$
      001A4F A4 30            [ 1] 1073 	and a,#TK_GRP_MASK
      001A51 A1 20            [ 1] 1074 	cp a,#TK_GRP_MULT
      001A53 27 02            [ 1] 1075 	jreq 1$
      001A55 20 23            [ 2] 1076 	jra 8$
      001A57                       1077 1$:	; got *|/|%
      001A57 CD 19 A6         [ 4] 1078 	call factor
      001A5A A1 84            [ 1] 1079 	cp a,#TK_INTGR
      001A5C 27 03            [ 1] 1080 	jreq 2$
      001A5E CC 16 90         [ 2] 1081 	jp syntax_error
      001A61                       1082 2$:	
      001A61 7B 01            [ 1] 1083 	ld a,(MULOP,sp) 
      001A63 A1 20            [ 1] 1084 	cp a,#TK_MULT 
      001A65 26 05            [ 1] 1085 	jrne 3$
      001A67 CD 02 5E         [ 4] 1086 	call mul24 
      001A6A 20 DA            [ 2] 1087 	jra term01
      001A6C A1 21            [ 1] 1088 3$: cp a,#TK_DIV 
      001A6E 26 05            [ 1] 1089 	jrne 4$ 
      001A70 CD 03 28         [ 4] 1090 	call div24 
      001A73 20 D1            [ 2] 1091 	jra term01 
      001A75 CD 03 D6         [ 4] 1092 4$: call mod24
      001A78 20 CC            [ 2] 1093 	jra term01 
      001A7A 7B 01            [ 1] 1094 8$: ld a,(MULOP,sp)
      001A7C 27 05            [ 1] 1095 	jreq 9$ 
      001A7E                       1096 	_unget_token
      001A7E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A83                       1097 9$: 
      001A83 A6 84            [ 1] 1098 	ld a,#TK_INTGR 	
      001A85                       1099 term_exit:
      001A85                       1100 	_drop VSIZE 
      001A85 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A87 81               [ 4] 1101 	ret 
                                   1102 
                                   1103 ;-------------------------------
                                   1104 ;  expr ::= term [['+'|'-'] term]*
                                   1105 ;  result range {-32768..32767}
                                   1106 ;  output:
                                   1107 ;   A    token attribute 
                                   1108 ;   xstack	 result    
                                   1109 ;-------------------------------
                           000001  1110 	OP=1 
                           000001  1111 	VSIZE=1 
      001A88                       1112 expression:
      001A88                       1113 	_vars VSIZE 
      001A88 52 01            [ 2]    1     sub sp,#VSIZE 
      001A8A CD 1A 3E         [ 4] 1114 	call term
      001A8D 4D               [ 1] 1115 	tnz a 
      001A8E 27 36            [ 1] 1116 	jreq expr_exit 
      001A90                       1117 1$:	
      001A90 CD 17 91         [ 4] 1118 	call next_token
      001A93 6B 01            [ 1] 1119 	ld (OP,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001A95 A1 02            [ 1] 1120 	cp a,#CMD_END 
      001A97 25 22            [ 1] 1121 	jrult 8$ 
      001A99 A4 30            [ 1] 1122 	and a,#TK_GRP_MASK
      001A9B A1 10            [ 1] 1123 	cp a,#TK_GRP_ADD 
      001A9D 27 02            [ 1] 1124 	jreq 2$ 
      001A9F 20 1A            [ 2] 1125 	jra 8$
      001AA1                       1126 2$: 
      001AA1 CD 1A 3E         [ 4] 1127 	call term
      001AA4 A1 84            [ 1] 1128 	cp a,#TK_INTGR
      001AA6 27 03            [ 1] 1129 	jreq 3$
      001AA8 CC 16 90         [ 2] 1130 	jp syntax_error
      001AAB                       1131 3$:	
      001AAB 7B 01            [ 1] 1132 	ld a,(OP,sp)
      001AAD A1 10            [ 1] 1133 	cp a,#TK_PLUS 
      001AAF 26 05            [ 1] 1134 	jrne 4$
      001AB1 CD 01 6A         [ 4] 1135 	call add24
      001AB4 20 DA            [ 2] 1136 	jra 1$ 
      001AB6                       1137 4$:	
      001AB6 CD 01 87         [ 4] 1138 	call sub24
      001AB9 20 D5            [ 2] 1139 	jra 1$
      001ABB 7B 01            [ 1] 1140 8$: ld a,(OP,sp)
      001ABD 27 05            [ 1] 1141 	jreq 9$ 
      001ABF                       1142 	_unget_token	
      001ABF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AC4                       1143 9$: 
      001AC4 A6 84            [ 1] 1144 	ld a,#TK_INTGR	
      001AC6                       1145 expr_exit:
      001AC6                       1146 	_drop VSIZE 
      001AC6 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AC8 81               [ 4] 1147 	ret 
                                   1148 
                                   1149 ;---------------------------------------------
                                   1150 ; rel ::= expr rel_op expr
                                   1151 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1152 ;  relation return  integer , zero is false 
                                   1153 ;  output:
                                   1154 ;    A 		token attribute  
                                   1155 ;	 xstack		value  
                                   1156 ;---------------------------------------------
                           000001  1157 	RELOP=1
                           000001  1158 	VSIZE=1 
      001AC9                       1159 relation: 
      001AC9                       1160 	_vars VSIZE
      001AC9 52 01            [ 2]    1     sub sp,#VSIZE 
      001ACB CD 1A 88         [ 4] 1161 	call expression
      001ACE 4D               [ 1] 1162 	tnz a 
      001ACF 26 03            [ 1] 1163 	jrne 1$
      001AD1 CC 1B 21         [ 2] 1164 	jp rel_exit
      001AD4                       1165 1$:	
                                   1166 ; expect rel_op or leave 
      001AD4 CD 17 91         [ 4] 1167 	call next_token 
      001AD7 6B 01            [ 1] 1168 	ld (RELOP,sp),a 
      001AD9 A4 30            [ 1] 1169 	and a,#TK_GRP_MASK
      001ADB A1 30            [ 1] 1170 	cp a,#TK_GRP_RELOP 
      001ADD 26 37            [ 1] 1171 	jrne 8$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001ADF                       1172 2$:	; expect another expression
      001ADF CD 1A 88         [ 4] 1173 	call expression
      001AE2 A1 84            [ 1] 1174 	cp a,#TK_INTGR
      001AE4 27 03            [ 1] 1175 	jreq 3$
      001AE6 CC 16 90         [ 2] 1176 	jp syntax_error 
      001AE9                       1177 3$:	
      001AE9 CD 01 A4         [ 4] 1178 	call cp24 
      001AEC                       1179 	_at_top 
      001AEC 90 F6            [ 1]    1     ld a,(y)
      001AEE 93               [ 1]    2     ldw x,y 
      001AEF EE 01            [ 2]    3     ldw x,(1,x)
      001AF1 4D               [ 1] 1180 	tnz a 
      001AF2 2B 08            [ 1] 1181 	jrmi 4$
      001AF4 26 0C            [ 1] 1182 	jrne 5$
      001AF6 35 02 00 0E      [ 1] 1183 	mov acc8,#2 ; n1==n2
      001AFA 20 0A            [ 2] 1184 	jra 6$ 
      001AFC                       1185 4$: 
      001AFC 35 04 00 0E      [ 1] 1186 	mov acc8,#4 ; n1<2 
      001B00 20 04            [ 2] 1187 	jra 6$
      001B02                       1188 5$:
      001B02 35 01 00 0E      [ 1] 1189 	mov acc8,#1 ; n1>n2 
      001B06                       1190 6$:
      001B06 5F               [ 1] 1191 	clrw x 
      001B07 C6 00 0E         [ 1] 1192 	ld a, acc8  
      001B0A 14 01            [ 1] 1193 	and a,(RELOP,sp)
      001B0C 27 01            [ 1] 1194 	jreq 7$
      001B0E 5C               [ 1] 1195 	incw x
      001B0F                       1196 7$:	_store_top   
      001B0F 90 F7            [ 1]    1     ld (y),a 
      001B11 90 EF 01         [ 2]    2     ldw (1,y),x     
      001B14 20 09            [ 2] 1197 	jra 10$  	
      001B16 7B 01            [ 1] 1198 8$: ld a,(RELOP,sp)
      001B18 27 05            [ 1] 1199 	jreq 10$
      001B1A                       1200 	_unget_token
      001B1A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B1F                       1201 10$:
      001B1F A6 84            [ 1] 1202 	ld a,#TK_INTGR
      001B21                       1203 rel_exit:
      001B21                       1204 	_drop VSIZE
      001B21 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B23 81               [ 4] 1205 	ret 
                                   1206 
                                   1207 ;--------------------------------------------
                                   1208 ; BASIC: HEX 
                                   1209 ; select hexadecimal base for integer print
                                   1210 ;---------------------------------------------
      001B24                       1211 hex_base:
      001B24 35 10 00 0A      [ 1] 1212 	mov base,#16 
      001B28 81               [ 4] 1213 	ret 
                                   1214 
                                   1215 ;--------------------------------------------
                                   1216 ; BASIC: DEC 
                                   1217 ; select decimal base for integer print
                                   1218 ;---------------------------------------------
      001B29                       1219 dec_base:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B29 35 0A 00 0A      [ 1] 1220 	mov base,#10
      001B2D 81               [ 4] 1221 	ret 
                                   1222 
                                   1223 ;------------------------
                                   1224 ; BASIC: FREE 
                                   1225 ; return free size in RAM 
                                   1226 ; output:
                                   1227 ;   A:x		size 
                                   1228 ;--------------------------
      001B2E                       1229 free:
      001B2E 90 89            [ 2] 1230 	pushw y 
      001B30 4F               [ 1] 1231 	clr a 
      001B31 AE 16 68         [ 2] 1232 	ldw x,#tib 
      001B34 90 CE 00 1B      [ 2] 1233 	ldw y,txtbgn 
      001B38 90 A3 35 80      [ 2] 1234 	cpw y,#app_space
      001B3C 25 05            [ 1] 1235 	jrult 1$
      001B3E 1D 00 80         [ 2] 1236 	subw x,#free_ram 
      001B41 20 04            [ 2] 1237 	jra 2$ 
      001B43                       1238 1$:	
      001B43 72 B0 00 1D      [ 2] 1239 	subw x,txtend
      001B47 90 85            [ 2] 1240 2$:	popw y 
      001B49 81               [ 4] 1241 	ret 
                                   1242 
                                   1243 ;------------------------------
                                   1244 ; BASIC: SIZE 
                                   1245 ; command that print 
                                   1246 ; program start addres and size 
                                   1247 ;------------------------------
      001B4A                       1248 cmd_size:
      001B4A 3B 00 0A         [ 1] 1249 	push base 
      001B4D AE 1D A3         [ 2] 1250 	ldw x,#PROG_ADDR 
      001B50 CD 09 A2         [ 4] 1251 	call puts 
      001B53 CE 00 1B         [ 2] 1252 	ldw x,txtbgn     
      001B56 35 10 00 0A      [ 1] 1253 	mov base,#16 
      001B5A CD 17 E6         [ 4] 1254 	call prt_i16
      001B5D 32 00 0A         [ 1] 1255 	pop base 
      001B60 AE 1D B5         [ 2] 1256 	ldw x,#PROG_SIZE 
      001B63 CD 09 A2         [ 4] 1257 	call puts 
      001B66 CE 00 1D         [ 2] 1258 	ldw x,txtend 
      001B69 72 B0 00 1B      [ 2] 1259 	subw x,txtbgn 
      001B6D CD 17 E6         [ 4] 1260 	call prt_i16
      001B70 AE 1D C6         [ 2] 1261 	ldw x,#STR_BYTES 
      001B73 CD 09 A2         [ 4] 1262 	call puts  
      001B76 81               [ 4] 1263 	ret 
                                   1264 
                                   1265 
                                   1266 ;------------------------
                                   1267 ; BASIC: UBOUND  
                                   1268 ; return array variable size 
                                   1269 ; and set 'array_size' variable 
                                   1270 ; output:
                                   1271 ;   A:X 	array_size
                                   1272 ;--------------------------
      001B77                       1273 ubound:
      001B77 CD 1B 2E         [ 4] 1274 	call free 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001B7A A6 03            [ 1] 1275 	ld a,#CELL_SIZE 
      001B7C 42               [ 4] 1276 	mul x,a 
      001B7D CF 00 20         [ 2] 1277 	ldw array_size,x
      001B80 4F               [ 1] 1278 	clr a 
      001B81 81               [ 4] 1279 	ret 
                                   1280 
                                   1281 ;-----------------------------
                                   1282 ; BASIC: LET var=expr 
                                   1283 ; variable assignement 
                                   1284 ; output:
                                   1285 ;   A 		TK_NONE 
                                   1286 ;-----------------------------
      001B82                       1287 let::
      001B82 CD 17 91         [ 4] 1288 	call next_token 
      001B85 A1 85            [ 1] 1289 	cp a,#TK_VAR 
      001B87 27 0C            [ 1] 1290 	jreq let_var
      001B89 A1 05            [ 1] 1291 	cp a,#TK_ARRAY 
      001B8B 27 03            [ 1] 1292 	jreq  let_array
      001B8D CC 16 90         [ 2] 1293 	jp syntax_error
      001B90                       1294 let_array:
      001B90 CD 19 76         [ 4] 1295 	call get_array_element
      001B93 20 03            [ 2] 1296 	jra let_eval 
      001B95                       1297 let_var:
      001B95 CD 17 C6         [ 4] 1298 	call get_addr
      001B98                       1299 let_eval:
      001B98 CF 00 19         [ 2] 1300 	ldw ptr16,x  ; variable address 
      001B9B CD 17 91         [ 4] 1301 	call next_token 
      001B9E A1 32            [ 1] 1302 	cp a,#TK_EQUAL
      001BA0 27 03            [ 1] 1303 	jreq 1$
      001BA2 CC 16 90         [ 2] 1304 	jp syntax_error
      001BA5                       1305 1$:	
      001BA5 CD 1A 88         [ 4] 1306 	call expression    
      001BA8 A1 84            [ 1] 1307 	cp a,#TK_INTGR 
      001BAA 27 03            [ 1] 1308 	jreq 2$
      001BAC CC 16 90         [ 2] 1309 	jp syntax_error
      001BAF                       1310 2$:	
      001BAF                       1311 	_xpop ; value 
      001BAF 90 F6            [ 1]    1     ld a,(y)
      001BB1 93               [ 1]    2     ldw x,y 
      001BB2 EE 01            [ 2]    3     ldw x,(1,x)
      001BB4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BB8                       1312 3$:
      001BB8 72 C7 00 19      [ 4] 1313 	ld [ptr16],a
      001BBC 72 5C 00 1A      [ 1] 1314 	inc ptr8  
      001BC0 72 CF 00 19      [ 5] 1315 	ldw [ptr16],x 
      001BC4 81               [ 4] 1316 	ret 
                                   1317 
                                   1318 
                                   1319 ;--------------------------
                                   1320 ; return constant value 
                                   1321 ; from it's record address
                                   1322 ; input:
                                   1323 ;	X	*const record 
                                   1324 ; output:
                                   1325 ;   A:X   const  value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1326 ;--------------------------
      001BC5                       1327 get_const_value: ; -- i 
      001BC5 F6               [ 1] 1328 	ld a,(x) ; record size 
      001BC6 A0 03            [ 1] 1329 	sub a,#3 ; * value 
      001BC8 88               [ 1] 1330 	push a 
      001BC9 4B 00            [ 1] 1331 	push #0 
      001BCB 72 FB 01         [ 2] 1332 	addw x,(1,sp)
      001BCE F6               [ 1] 1333 	ld a,(x)
      001BCF EE 01            [ 2] 1334 	ldw x,(1,x)
      001BD1                       1335 	_drop 2
      001BD1 5B 02            [ 2]    1     addw sp,#2 
      001BD3 81               [ 4] 1336 	ret 
                                   1337 
                                   1338 
                                   1339 ;--------------------------
                                   1340 ; list constants in EEPROM 
                                   1341 ; call when using LIST \C 
                                   1342 ;-------------------------
                           000001  1343 	COUNT=1
                           000003  1344 	YTEMP=3
                           000004  1345 	VSIZE=4 
      001BD4                       1346 list_const:
      001BD4 90 89            [ 2] 1347 	pushw y 
      001BD6                       1348 	_vars 4 
      001BD6 52 04            [ 2]    1     sub sp,#4 
      001BD8 5F               [ 1] 1349 	clrw x 
      001BD9 1F 01            [ 2] 1350 	ldw (COUNT,sp),x  
      001BDB 90 AE 40 00      [ 2] 1351 	ldw Y,#EEPROM_BASE 
      001BDF 90 C3 00 24      [ 2] 1352 1$:	cpw y,free_eeprom 
      001BE3 24 35            [ 1] 1353 	jruge 9$
      001BE5 17 03            [ 2] 1354     ldw (YTEMP,sp),y 
      001BE7 93               [ 1] 1355 	ldw x,y
      001BE8 5C               [ 1] 1356 	incw x 
      001BE9 CD 09 A2         [ 4] 1357 	call puts  
      001BEC A6 3D            [ 1] 1358 	ld a,#'= 
      001BEE CD 09 45         [ 4] 1359 	call putc 
      001BF1 1E 03            [ 2] 1360 	ldw x,(YTEMP,sp)
      001BF3 CD 1B C5         [ 4] 1361 	call get_const_value 
      001BF6 C7 00 0C         [ 1] 1362 	ld acc24,a 
      001BF9 CF 00 0D         [ 2] 1363 	ldw acc16,x 
      001BFC CD 17 FD         [ 4] 1364 	call prt_acc24
      001BFF A6 0D            [ 1] 1365 	ld a,#CR 
      001C01 CD 09 45         [ 4] 1366 	call putc 
      001C04 1E 01            [ 2] 1367 	ldw x,(COUNT,sp)
      001C06 5C               [ 1] 1368 	incw x 
      001C07 1F 01            [ 2] 1369 	ldw (COUNT,sp),x 
      001C09 72 5F 00 0D      [ 1] 1370 	clr acc16 
      001C0D 16 03            [ 2] 1371 	ldw y,(YTEMP,sp)
      001C0F 90 F6            [ 1] 1372 	ld a,(y)
      001C11 C7 00 0E         [ 1] 1373 	ld acc8,a
      001C14 72 B9 00 0D      [ 2] 1374 	addw y,acc16 
      001C18 20 C5            [ 2] 1375 	jra 1$ 
      001C1A                       1376 9$:	
      001C1A 1E 01            [ 2] 1377 	ldw x,(COUNT,sp)
      001C1C CD 17 E6         [ 4] 1378 	call prt_i16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C1F AE 1C 2A         [ 2] 1379 	ldw x,#CONST_COUNT 
      001C22 CD 09 A2         [ 4] 1380 	call puts 
      001C25                       1381 	_drop VSIZE 
      001C25 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C27 90 85            [ 2] 1382 	popw y 
      001C29 81               [ 4] 1383 	ret 
                                   1384 
      001C2A 20 63 6F 6E 73 74 61  1385 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1386 
                                   1387 
                                   1388 ;--------------------------
                                   1389 ; BASIC: EEFREE 
                                   1390 ; eeprom_free 
                                   1391 ; search end of data  
                                   1392 ; in EEPROM 
                                   1393 ; input:
                                   1394 ;    none 
                                   1395 ; output:
                                   1396 ;    A:X     address free
                                   1397 ;-------------------------
      001C40                       1398 func_eefree:
      001C40 AE 40 00         [ 2] 1399 	ldw x,#EEPROM_BASE 
      001C43 35 08 00 0E      [ 1] 1400 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001C47 A3 47 F8         [ 2] 1401     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001C4A 24 17            [ 1] 1402 	jruge 8$ ; no free space 
      001C4C F6               [ 1] 1403 2$: ld a,(x)
      001C4D 26 0C            [ 1] 1404 	jrne 3$
      001C4F 5C               [ 1] 1405 	incw x 
      001C50 72 5A 00 0E      [ 1] 1406 	dec acc8 
      001C54 26 F6            [ 1] 1407 	jrne 2$
      001C56 1D 00 08         [ 2] 1408 	subw x,#8 
      001C59 20 09            [ 2] 1409 	jra 9$  
      001C5B F6               [ 1] 1410 3$: ld a,(x)
      001C5C 5C               [ 1] 1411 	incw x
      001C5D 4D               [ 1] 1412 	tnz a  
      001C5E 26 FB            [ 1] 1413 	jrne 3$
      001C60 5A               [ 2] 1414 	decw x   
      001C61 20 E0            [ 2] 1415 	jra 1$ 
      001C63 5F               [ 1] 1416 8$: clrw x ; no free space 
      001C64 4F               [ 1] 1417 9$: clr a 
      001C65 CF 00 24         [ 2] 1418 	ldw free_eeprom,x ; save in system variable 
      001C68 81               [ 4] 1419 	ret 
                                   1420 
                           000005  1421 CONST_REC_XTRA_BYTES=5 
                                   1422 ;--------------------------
                                   1423 ; search constant name 
                                   1424 ; format of constant record  
                                   1425 ;   .byte record length 
                                   1426 ;         = strlen(name)+5 
                                   1427 ;   .asciz name (variable length)
                                   1428 ;   .int24 value (3 bytes )
                                   1429 ; a constant record use 7+ bytes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1430 ; constants are saved in EEPROM  
                                   1431 ; input:
                                   1432 ;    X     *name
                                   1433 ; output:
                                   1434 ;    X     address|0
                                   1435 ; use:
                                   1436 ;   A,Y, acc16 
                                   1437 ;-------------------------
                           000001  1438 	NAMEPTR=1 ; target name pointer 
                           000003  1439 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1440 	RECLEN=5  ; record length of target
                           000005  1441 	VSIZE=5
      001C69                       1442 search_const:
      001C69 90 89            [ 2] 1443 	pushw y 
      001C6B                       1444 	_vars VSIZE
      001C6B 52 05            [ 2]    1     sub sp,#VSIZE 
      001C6D 72 5F 00 0D      [ 1] 1445 	clr acc16 
      001C71 CD 13 D4         [ 4] 1446 	call strlen 
      001C74 AB 05            [ 1] 1447 	add a,#CONST_REC_XTRA_BYTES
      001C76 6B 05            [ 1] 1448 	ld (RECLEN,sp),a    
      001C78 1F 01            [ 2] 1449 	ldw (NAMEPTR,sp),x
      001C7A 90 AE 40 00      [ 2] 1450 	ldw y,#EEPROM_BASE 
      001C7E 1E 01            [ 2] 1451 1$:	ldw x,(NAMEPTR,sp)
      001C80 17 03            [ 2] 1452 	ldw (EEPTR,sp),y
      001C82 90 C3 00 24      [ 2] 1453 	cpw y, free_eeprom 
      001C86 24 1A            [ 1] 1454 	jruge 7$ ; no match found 
      001C88 90 F6            [ 1] 1455 	ld a,(y)
      001C8A 11 05            [ 1] 1456 	cp a,(RECLEN,sp)
      001C8C 26 07            [ 1] 1457 	jrne 2$ 
      001C8E 90 5C            [ 1] 1458 	incw y 
      001C90 CD 13 DF         [ 4] 1459 	call strcmp
      001C93 26 11            [ 1] 1460 	jrne 8$ ; match found 
      001C95                       1461 2$: ; skip this one 	
      001C95 16 03            [ 2] 1462 	ldW Y,(EEPTR,sp)
      001C97 90 F6            [ 1] 1463 	ld a,(y)
      001C99 C7 00 0E         [ 1] 1464 	ld acc8,a 
      001C9C 72 B9 00 0D      [ 2] 1465 	addw y,acc16 
      001CA0 20 DC            [ 2] 1466 	jra 1$  
      001CA2                       1467 7$: ; no match found 
      001CA2 0F 03            [ 1] 1468 	clr (EEPTR,sp)
      001CA4 0F 04            [ 1] 1469 	clr (EEPTR+1,sp)
      001CA6                       1470 8$: ; match found 
      001CA6 1E 03            [ 2] 1471 	ldw x,(EEPTR,sp) ; record address 
      001CA8                       1472 9$:	_DROP VSIZE
      001CA8 5B 05            [ 2]    1     addw sp,#VSIZE 
      001CAA 90 85            [ 2] 1473 	 popw y 
      001CAC 81               [ 4] 1474 	 ret 
                                   1475 
                                   1476 
                                   1477 ;--------------------------------------------
                                   1478 ; BASIC: CONST name=value [, name=value]*
                                   1479 ; define constant(s) saved in EEPROM
                                   1480 ;--------------------------------------------
                           000001  1481 	CNAME=1 
                           000003  1482 	BUFPTR=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                           000005  1483 	RECLEN=5
                           000006  1484 	UPDATE=6
                           000007  1485 	YSAVE=7
                           000008  1486 	VSIZE=8 
      001CAD                       1487 cmd_const:
      001CAD 90 89            [ 2] 1488 	pushw y 
      001CAF                       1489 	_vars VSIZE 
      001CAF 52 08            [ 2]    1     sub sp,#VSIZE 
      001CB1 0F 06            [ 1] 1490 	clr (UPDATE,sp)
      001CB3 CD 17 91         [ 4] 1491 	call next_token 
      001CB6 A1 04            [ 1] 1492 	cp a,#TK_CHAR 
      001CB8 26 0D            [ 1] 1493 	jrne 0$
      001CBA CD 17 E0         [ 4] 1494 	call get_char 
      001CBD A4 DF            [ 1] 1495 	and a,#0xDF 
      001CBF A1 55            [ 1] 1496 	cp a,#'U 
      001CC1 26 08            [ 1] 1497 	jrne 1$
      001CC3 03 06            [ 1] 1498 	cpl (UPDATE,sp)
      001CC5 20 07            [ 2] 1499 	jra const_loop 
      001CC7 A1 03            [ 1] 1500 0$: cp a,#TK_LABEL 
      001CC9 27 08            [ 1] 1501 	jreq cloop_1
      001CCB CC 16 90         [ 2] 1502 1$: jp syntax_error
      001CCE                       1503 const_loop: 
      001CCE A6 03            [ 1] 1504 	ld a,#TK_LABEL 
      001CD0 CD 19 3F         [ 4] 1505 	call expect  
      001CD3                       1506 cloop_1: 
      001CD3 1F 01            [ 2] 1507 	ldw (CNAME,sp),x ; *const_name
      001CD5 CD 17 B7         [ 4] 1508 	call skip_string
      001CD8 1E 01            [ 2] 1509 	ldw x,(CNAME,sp)
      001CDA CD 13 D4         [ 4] 1510 	call strlen  
      001CDD AB 05            [ 1] 1511 	add a,#CONST_REC_XTRA_BYTES 
      001CDF 6B 05            [ 1] 1512 	ld (RECLEN,sp),a 
                                   1513 ; copy name in buffer  
      001CE1 16 01            [ 2] 1514 	ldw y,(CNAME,sp) 
      001CE3 AE 16 68         [ 2] 1515 	ldw x,#tib  
      001CE6 7B 05            [ 1] 1516 	ld a,(RECLEN,sp)
      001CE8 F7               [ 1] 1517 	ld (x),a 
      001CE9 5C               [ 1] 1518 	incw x  
      001CEA CD 13 F0         [ 4] 1519 	call strcpy 
      001CED 1F 03            [ 2] 1520 	ldw (BUFPTR,sp),x 
                                   1521 ; x not updated by strcpy 
                                   1522 ; BUFPTR must be incremented 
                                   1523 ; to point after name 
      001CEF 5F               [ 1] 1524 	clrw x 
      001CF0 7B 05            [ 1] 1525 	ld a,(RECLEN,sp)
      001CF2 A0 04            [ 1] 1526 	sub a,#CONST_REC_XTRA_BYTES-1
      001CF4 97               [ 1] 1527 	ld xl,a  
      001CF5 72 FB 03         [ 2] 1528 	addw x,(BUFPTR,sp)
      001CF8 1F 03            [ 2] 1529 	ldw (BUFPTR,sp),x 
      001CFA A6 32            [ 1] 1530 	ld a,#TK_EQUAL 
      001CFC CD 19 3F         [ 4] 1531 	call expect 
      001CFF 16 07            [ 2] 1532 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001D01 CD 1A 88         [ 4] 1533 	call expression 
      001D04 A1 84            [ 1] 1534 	cp a,#TK_INTGR 
      001D06 27 03            [ 1] 1535 	jreq 5$ 
      001D08 CC 16 90         [ 2] 1536 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D0B                       1537 5$:	_xpop 
      001D0B 90 F6            [ 1]    1     ld a,(y)
      001D0D 93               [ 1]    2     ldw x,y 
      001D0E EE 01            [ 2]    3     ldw x,(1,x)
      001D10 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D14 17 07            [ 2] 1538 	ldw (YSAVE,sp),y ; save xtack pointer 
      001D16 16 03            [ 2] 1539 	ldw y,(BUFPTR,sp)
      001D18 90 F7            [ 1] 1540 	ld (y),a 
      001D1A 90 EF 01         [ 2] 1541 	ldw (1,y),x 
                                   1542 ; record completed in buffer 
                                   1543 ; check if constant already exist 
                                   1544 ; if exist and \U option then update  
      001D1D 72 5F 00 18      [ 1] 1545 	clr farptr 
      001D21 1E 01            [ 2] 1546 	ldw x,(CNAME,sp)
      001D23 CD 1C 69         [ 4] 1547 	call search_const 
      001D26 5D               [ 2] 1548 	tnzw x 
      001D27 27 06            [ 1] 1549 	jreq 6$ ; new constant  
      001D29 0D 06            [ 1] 1550 	tnz (UPDATE,sp)
      001D2B 27 1B            [ 1] 1551 	jreq 8$ 
      001D2D 20 03            [ 2] 1552 	jra 7$	
      001D2F                       1553 6$:	
      001D2F CE 00 24         [ 2] 1554 	ldw x,free_eeprom  
      001D32                       1555 7$:	
      001D32 CF 00 19         [ 2] 1556 	ldw farptr+1,x 
      001D35 AE 16 68         [ 2] 1557 	ldw x,#tib 
      001D38 7B 05            [ 1] 1558 	ld a,(RECLEN,sp)
      001D3A CD 08 86         [ 4] 1559 	call write_nbytes
                                   1560 ; update free_eeprom 
      001D3D 5F               [ 1] 1561 	clrw x 
      001D3E 7B 05            [ 1] 1562 	ld a,(RECLEN,sp)
      001D40 97               [ 1] 1563 	ld xl,a 
      001D41 72 BB 00 24      [ 2] 1564 	addw x,free_eeprom 
      001D45 CF 00 24         [ 2] 1565 	ldw free_eeprom,x
      001D48                       1566 8$: ; check for next constant 
      001D48 CD 17 91         [ 4] 1567 	call next_token 
      001D4B A1 08            [ 1] 1568 	cp a,#TK_COMMA 
      001D4D 26 03            [ 1] 1569 	jrne 9$ ; no other constant 
      001D4F CC 1C CE         [ 2] 1570 	jp const_loop 
      001D52                       1571 9$: 
      001D52                       1572 	_unget_token    
      001D52 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001D57                       1573 10$: 
      001D57                       1574 	_drop VSIZE 
      001D57 5B 08            [ 2]    1     addw sp,#VSIZE 
      001D59 90 85            [ 2] 1575 	popw y ; restore xstack pointer 
      001D5B 81               [ 4] 1576 	ret 
                                   1577 
                                   1578 
                                   1579 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1580 ; return program size 
                                   1581 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001D5C                       1582 prog_size:
      001D5C CE 00 1D         [ 2] 1583 	ldw x,txtend 
      001D5F 72 B0 00 1B      [ 2] 1584 	subw x,txtbgn 
      001D63 81               [ 4] 1585 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1586 
                                   1587 ;----------------------------
                                   1588 ; print program information 
                                   1589 ;---------------------------
      001D64                       1590 program_info: 
      001D64 AE 1D A3         [ 2] 1591 	ldw x,#PROG_ADDR 
      001D67 CD 09 A2         [ 4] 1592 	call puts 
      001D6A CE 00 1B         [ 2] 1593 	ldw x,txtbgn 
      001D6D 35 10 00 0A      [ 1] 1594 	mov base,#16 
      001D71 CD 17 E6         [ 4] 1595 	call prt_i16
      001D74 35 0A 00 0A      [ 1] 1596 	mov base,#10  
      001D78 AE 1D B5         [ 2] 1597 	ldw x,#PROG_SIZE
      001D7B CD 09 A2         [ 4] 1598 	call puts 
      001D7E CD 1D 5C         [ 4] 1599 	call prog_size 
      001D81 CD 17 E6         [ 4] 1600 	call prt_i16 
      001D84 AE 1D C6         [ 2] 1601 	ldw x,#STR_BYTES 
      001D87 CD 09 A2         [ 4] 1602 	call puts
      001D8A CE 00 1B         [ 2] 1603 	ldw x,txtbgn
      001D8D A3 35 84         [ 2] 1604 	cpw x,#app 
      001D90 25 05            [ 1] 1605 	jrult 2$
      001D92 AE 1D CD         [ 2] 1606 	ldw x,#FLASH_MEM 
      001D95 20 03            [ 2] 1607 	jra 3$
      001D97 AE 1D DE         [ 2] 1608 2$: ldw x,#RAM_MEM 	 
      001D9A CD 09 A2         [ 4] 1609 3$:	call puts 
      001D9D A6 0D            [ 1] 1610 	ld a,#CR 
      001D9F CD 09 45         [ 4] 1611 	call putc
      001DA2 81               [ 4] 1612 	ret 
                                   1613 
      001DA3 70 72 6F 67 72 61 6D  1614 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001DB5 2C 20 70 72 6F 67 72  1615 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001DC6 20 62 79 74 65 73 00  1616 STR_BYTES: .asciz " bytes" 
      001DCD 20 69 6E 20 46 4C 41  1617 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001DDE 20 69 6E 20 52 41 4D  1618 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1619 
                                   1620 
                                   1621 ;----------------------------
                                   1622 ; BASIC: LIST [[start][,end]]
                                   1623 ; list program lines 
                                   1624 ; form start to end 
                                   1625 ; if empty argument list then 
                                   1626 ; list all.
                                   1627 ;----------------------------
                           000001  1628 	FIRST=1
                           000003  1629 	LAST=3 
                           000005  1630 	LN_PTR=5
                           000006  1631 	VSIZE=6 
      001DED                       1632 list:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001DED 72 01 00 22 05   [ 2] 1633 	btjf flags,#FRUN,0$
      001DF2 A6 07            [ 1] 1634 	ld a,#ERR_CMD_ONLY
      001DF4 CC 16 92         [ 2] 1635 	jp tb_error
      001DF7                       1636 0$:	 
      001DF7 CD 17 91         [ 4] 1637 	call next_token 
      001DFA A1 04            [ 1] 1638 	cp a,#TK_CHAR 
      001DFC 26 10            [ 1] 1639 	jrne 2$
      001DFE CD 17 E0         [ 4] 1640 	call get_char 
      001E01 A4 DF            [ 1] 1641 	and a,#0xDF 
      001E03 A1 43            [ 1] 1642 	cp a,#'C 
      001E05 26 04            [ 1] 1643 	jrne 1$
      001E07 CD 1B D4         [ 4] 1644 	call list_const
      001E0A 81               [ 4] 1645 	ret 
      001E0B CC 16 90         [ 2] 1646 1$: jp syntax_error 
      001E0E                       1647 2$:	_unget_token 
      001E0E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E13 CD 1D 5C         [ 4] 1648 	call prog_size 
      001E16 22 01            [ 1] 1649 	jrugt 3$
      001E18 81               [ 4] 1650 	ret 
      001E19                       1651 3$: _vars VSIZE
      001E19 52 06            [ 2]    1     sub sp,#VSIZE 
      001E1B CE 00 1B         [ 2] 1652 	ldw x,txtbgn 
      001E1E 1F 05            [ 2] 1653 	ldw (LN_PTR,sp),x 
      001E20 FE               [ 2] 1654 	ldw x,(x) 
      001E21 1F 01            [ 2] 1655 	ldw (FIRST,sp),x ; list from first line 
      001E23 AE 7F FF         [ 2] 1656 	ldw x,#MAX_LINENO ; biggest line number 
      001E26 1F 03            [ 2] 1657 	ldw (LAST,sp),x 
      001E28 CD 19 51         [ 4] 1658 	call arg_list
      001E2B 4D               [ 1] 1659 	tnz a
      001E2C 27 31            [ 1] 1660 	jreq list_loop 
      001E2E A1 02            [ 1] 1661 	cp a,#2 
      001E30 27 07            [ 1] 1662 	jreq 4$
      001E32 A1 01            [ 1] 1663 	cp a,#1 
      001E34 27 06            [ 1] 1664 	jreq first_line 
      001E36 CC 16 90         [ 2] 1665 	jp syntax_error 
      001E39 85               [ 2] 1666 4$:	popw x 
      001E3A 1F 05            [ 2] 1667 	ldw (LAST+2,sp),x 
      001E3C                       1668 first_line:
      001E3C 85               [ 2] 1669 	popw x
      001E3D 1F 01            [ 2] 1670 	ldw (FIRST,sp),x 
      001E3F                       1671 lines_skip:
      001E3F CE 00 1B         [ 2] 1672 	ldw x,txtbgn
      001E42 1F 05            [ 2] 1673 2$:	ldw (LN_PTR,sp),x 
      001E44 C3 00 1D         [ 2] 1674 	cpw x,txtend 
      001E47 2A 38            [ 1] 1675 	jrpl list_exit 
      001E49 FE               [ 2] 1676 	ldw x,(x) ;line# 
      001E4A 13 01            [ 2] 1677 	cpw x,(FIRST,sp)
      001E4C 2A 11            [ 1] 1678 	jrpl list_loop 
      001E4E 1E 05            [ 2] 1679 	ldw x,(LN_PTR,sp) 
      001E50 E6 02            [ 1] 1680 	ld a,(2,x)
      001E52 C7 00 0E         [ 1] 1681 	ld acc8,a 
      001E55 72 5F 00 0D      [ 1] 1682 	clr acc16 
      001E59 72 BB 00 0D      [ 2] 1683 	addw x,acc16
      001E5D 20 E3            [ 2] 1684 	jra 2$ 
                                   1685 ; print loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001E5F                       1686 list_loop:
      001E5F 1E 05            [ 2] 1687 	ldw x,(LN_PTR,sp)
      001E61 E6 02            [ 1] 1688 	ld a,(2,x) 
      001E63 CD 1E D6         [ 4] 1689 	call prt_basic_line
      001E66 1E 05            [ 2] 1690 	ldw x,(LN_PTR,sp)
      001E68 E6 02            [ 1] 1691 	ld a,(2,x)
      001E6A C7 00 0E         [ 1] 1692 	ld acc8,a 
      001E6D 72 5F 00 0D      [ 1] 1693 	clr acc16 
      001E71 72 BB 00 0D      [ 2] 1694 	addw x,acc16
      001E75 C3 00 1D         [ 2] 1695 	cpw x,txtend 
      001E78 2A 07            [ 1] 1696 	jrpl list_exit
      001E7A 1F 05            [ 2] 1697 	ldw (LN_PTR,sp),x
      001E7C FE               [ 2] 1698 	ldw x,(x)
      001E7D 13 03            [ 2] 1699 	cpw x,(LAST,sp)  
      001E7F 2F DE            [ 1] 1700 	jrslt list_loop
      001E81                       1701 list_exit:
      001E81 55 00 03 00 01   [ 1] 1702 	mov in,count 
      001E86 AE 16 B8         [ 2] 1703 	ldw x,#pad 
      001E89 CF 00 04         [ 2] 1704 	ldw basicptr,x 
      001E8C                       1705 	_drop VSIZE 
      001E8C 5B 06            [ 2]    1     addw sp,#VSIZE 
      001E8E CD 1D 64         [ 4] 1706 	call program_info 
      001E91 81               [ 4] 1707 	ret
                                   1708 
                                   1709 
                                   1710 ;--------------------------
                                   1711 ; BASIC: EDIT 
                                   1712 ;  copy program in FLASH 
                                   1713 ;  to RAM for edition 
                                   1714 ;-------------------------
      001E92                       1715 edit:
      001E92 CD 26 AF         [ 4] 1716 	call qsign 
      001E95 27 07            [ 1] 1717 	jreq 1$ 
      001E97 AE 1E BF         [ 2] 1718 	ldw x,#NOT_SAVED 
      001E9A CD 09 A2         [ 4] 1719 	call puts 
      001E9D 81               [ 4] 1720 	ret 
      001E9E                       1721 1$: 
      001E9E 90 AE 35 80      [ 2] 1722 	ldw y,#app_sign ; source address 
      001EA2 CE 35 82         [ 2] 1723     ldw x,app_size  
      001EA5 1C 00 04         [ 2] 1724 	addw x,#4 
      001EA8 CF 00 0D         [ 2] 1725 	ldw acc16,x  ; bytes to copy 
      001EAB AE 00 7C         [ 2] 1726 	ldw x,#rsign ; destination address 
      001EAE CD 14 00         [ 4] 1727 	call move  
      001EB1 AE 00 80         [ 2] 1728 	ldw x,#free_ram 
      001EB4 CF 00 1B         [ 2] 1729 	ldw txtbgn,x 
      001EB7 72 BB 00 7E      [ 2] 1730 	addw x,rsize  
      001EBB CF 00 1D         [ 2] 1731 	ldw txtend,x 
      001EBE 81               [ 4] 1732 	ret 
                                   1733 
      001EBF 4E 6F 20 61 70 70 6C  1734 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1735 
                                   1736 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   1737 ;--------------------------
                                   1738 ; decompile line from token list
                                   1739 ; and print it. 
                                   1740 ; input:
                                   1741 ;   A       stop at this position 
                                   1742 ;   X 		pointer at line
                                   1743 ; output:
                                   1744 ;   none 
                                   1745 ;--------------------------	
      001ED6                       1746 prt_basic_line:
      001ED6 90 89            [ 2] 1747 	pushw y 
      001ED8 C7 00 03         [ 1] 1748 	ld count,a 
      001EDB E6 02            [ 1] 1749 	ld a,(2,x)
      001EDD C1 00 03         [ 1] 1750 	cp a,count 
      001EE0 2A 03            [ 1] 1751 	jrpl 1$ 
      001EE2 C7 00 03         [ 1] 1752 	ld count,a 
      001EE5 CF 00 04         [ 2] 1753 1$:	ldw basicptr,x 
      001EE8 90 AE 16 68      [ 2] 1754 	ldw y,#tib  
      001EEC CD 11 F8         [ 4] 1755 	call decompile 
      001EEF CD 09 A2         [ 4] 1756 	call puts 
      001EF2 A6 0D            [ 1] 1757 	ld a,#CR 
      001EF4 CD 09 45         [ 4] 1758 	call putc 
      001EF7 90 85            [ 2] 1759 	popw y 
      001EF9 81               [ 4] 1760 	ret 
                                   1761 
                                   1762 
                                   1763 
                                   1764 ;---------------------------------
                                   1765 ; BASIC: PRINT|? arg_list 
                                   1766 ; print values from argument list
                                   1767 ;----------------------------------
                           000001  1768 	CCOMMA=1
                           000001  1769 	VSIZE=1
      001EFA                       1770 print:
      001EFA                       1771 	_vars VSIZE 
      001EFA 52 01            [ 2]    1     sub sp,#VSIZE 
      001EFC                       1772 reset_comma:
      001EFC 0F 01            [ 1] 1773 	clr (CCOMMA,sp)
      001EFE                       1774 prt_loop:
      001EFE CD 17 91         [ 4] 1775 	call next_token
      001F01 A1 02            [ 1] 1776 	cp a,#CMD_END 
      001F03 25 5E            [ 1] 1777 	jrult print_exit ; colon or end of line 
      001F05 A1 02            [ 1] 1778 	cp a,#TK_QSTR
      001F07 27 12            [ 1] 1779 	jreq 1$
      001F09 A1 04            [ 1] 1780 	cp a,#TK_CHAR 
      001F0B 27 1B            [ 1] 1781 	jreq 2$ 
      001F0D A1 82            [ 1] 1782 	cp a,#TK_CFUNC 
      001F0F 27 1F            [ 1] 1783 	jreq 3$
      001F11 A1 08            [ 1] 1784 	cp a,#TK_COMMA 
      001F13 27 24            [ 1] 1785 	jreq 4$
      001F15 A1 09            [ 1] 1786 	cp a,#TK_SHARP 
      001F17 27 24            [ 1] 1787 	jreq 5$
      001F19 20 37            [ 2] 1788 	jra 7$ 
      001F1B                       1789 1$:	; print string 
      001F1B CD 09 A2         [ 4] 1790 	call puts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001F1E 5C               [ 1] 1791 	incw x
      001F1F 72 B0 00 04      [ 2] 1792 	subw x,basicptr 
      001F23 CF 00 00         [ 2] 1793 	ldw in.w,x  
      001F26 20 D4            [ 2] 1794 	jra reset_comma
      001F28                       1795 2$:	; print character 
      001F28 CD 17 E0         [ 4] 1796 	call get_char 
      001F2B CD 09 45         [ 4] 1797 	call putc 
      001F2E 20 CC            [ 2] 1798 	jra reset_comma 
      001F30                       1799 3$: ; print character function value  	
      001F30 CD 17 AA         [ 4] 1800 	call get_code_addr 
      001F33 FD               [ 4] 1801 	call (x)
      001F34 CD 09 45         [ 4] 1802 	call putc
      001F37 20 C3            [ 2] 1803 	jra reset_comma 
      001F39                       1804 4$: ; set comma state 
      001F39 03 01            [ 1] 1805 	cpl (CCOMMA,sp)
      001F3B 20 C1            [ 2] 1806 	jra prt_loop   
      001F3D                       1807 5$: ; # character must be followed by an integer   
      001F3D CD 17 91         [ 4] 1808 	call next_token
      001F40 A1 84            [ 1] 1809 	cp a,#TK_INTGR 
      001F42 27 03            [ 1] 1810 	jreq 6$
      001F44 CC 16 90         [ 2] 1811 	jp syntax_error 
      001F47                       1812 6$: ; set tab width
      001F47 CD 17 D0         [ 4] 1813 	call get_int24 
      001F4A 9F               [ 1] 1814 	ld a,xl 
      001F4B A4 0F            [ 1] 1815 	and a,#15 
      001F4D C7 00 23         [ 1] 1816 	ld tab_width,a 
      001F50 20 AA            [ 2] 1817 	jra reset_comma 
      001F52                       1818 7$:	
      001F52                       1819 	_unget_token 
      001F52 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F57 CD 1A 88         [ 4] 1820 	call expression  
      001F5A A1 84            [ 1] 1821 	cp a,#TK_INTGR 
      001F5C 26 05            [ 1] 1822 	jrne print_exit 
      001F5E CD 18 0B         [ 4] 1823     call print_top
      001F61 20 99            [ 2] 1824 	jra reset_comma 
      001F63                       1825 print_exit:
      001F63 0D 01            [ 1] 1826 	tnz (CCOMMA,sp)
      001F65 26 05            [ 1] 1827 	jrne 9$
      001F67 A6 0D            [ 1] 1828 	ld a,#CR 
      001F69 CD 09 45         [ 4] 1829     call putc 
      001F6C                       1830 9$:	_drop VSIZE 
      001F6C 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F6E 81               [ 4] 1831 	ret 
                                   1832 
                                   1833 ;----------------------
                                   1834 ; 'save_context' and
                                   1835 ; 'rest_context' must be 
                                   1836 ; called at the same 
                                   1837 ; call stack depth 
                                   1838 ; i.e. SP must have the 
                                   1839 ; save value at  
                                   1840 ; entry point of both 
                                   1841 ; routine. 
                                   1842 ;---------------------
                           000004  1843 	CTXT_SIZE=4 ; size of saved data 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                   1844 ;--------------------
                                   1845 ; save current BASIC
                                   1846 ; interpreter context 
                                   1847 ; on stack 
                                   1848 ;--------------------
      001F6F                       1849 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001F6F                       1850 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001F6F                       1851 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001F6F                       1852 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001F6F                       1853 save_context:
      001F6F CE 00 04         [ 2] 1854 	ldw x,basicptr 
      001F72 1F 03            [ 2] 1855 	ldw (BPTR,sp),x
      001F74 C6 00 01         [ 1] 1856 	ld a,in 
      001F77 6B 05            [ 1] 1857 	ld (IN,sp),a
      001F79 C6 00 03         [ 1] 1858 	ld a,count 
      001F7C 6B 06            [ 1] 1859 	ld (CNT,sp),a  
      001F7E 81               [ 4] 1860 	ret
                                   1861 
                                   1862 ;-----------------------
                                   1863 ; restore previously saved 
                                   1864 ; BASIC interpreter context 
                                   1865 ; from stack 
                                   1866 ;-------------------------
      001F7F                       1867 rest_context:
      001F7F 1E 03            [ 2] 1868 	ldw x,(BPTR,sp)
      001F81 CF 00 04         [ 2] 1869 	ldw basicptr,x 
      001F84 7B 05            [ 1] 1870 	ld a,(IN,sp)
      001F86 C7 00 01         [ 1] 1871 	ld in,a
      001F89 7B 06            [ 1] 1872 	ld a,(CNT,sp)
      001F8B C7 00 03         [ 1] 1873 	ld count,a  
      001F8E 81               [ 4] 1874 	ret
                                   1875 
                                   1876 
                                   1877 
                                   1878 ;------------------------------------------
                                   1879 ; BASIC: INPUT [string]var[,[string]var]
                                   1880 ; input value in variables 
                                   1881 ; [string] optionally can be used as prompt 
                                   1882 ;-----------------------------------------
                           000001  1883 	CX_BPTR=1
                           000003  1884 	CX_IN=3
                           000004  1885 	CX_CNT=4
                           000005  1886 	SKIP=5
                           000005  1887 	VSIZE=5
      001F8F                       1888 input_var:
      001F8F 90 89            [ 2] 1889 	pushw y 
      001F91                       1890 	_vars VSIZE 
      001F91 52 05            [ 2]    1     sub sp,#VSIZE 
      001F93                       1891 input_loop:
      001F93 0F 05            [ 1] 1892 	clr (SKIP,sp)
      001F95 CD 17 91         [ 4] 1893 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      001F98 A1 02            [ 1] 1894 	cp a,#TK_QSTR 
      001F9A 26 10            [ 1] 1895 	jrne 1$ 
      001F9C CD 09 A2         [ 4] 1896 	call puts 
      001F9F 5C               [ 1] 1897 	incw x 
      001FA0 72 B0 00 04      [ 2] 1898 	subw x,basicptr 
      001FA4 CF 00 00         [ 2] 1899 	ldw in.w,x 
      001FA7 03 05            [ 1] 1900 	cpl (SKIP,sp)
      001FA9 CD 17 91         [ 4] 1901 	call next_token 
      001FAC A1 85            [ 1] 1902 1$: cp a,#TK_VAR  
      001FAE 27 03            [ 1] 1903 	jreq 2$ 
      001FB0 CC 16 90         [ 2] 1904 	jp syntax_error
      001FB3 CD 17 C6         [ 4] 1905 2$:	call get_addr
      001FB6 CF 00 19         [ 2] 1906 	ldw ptr16,x 
      001FB9 0D 05            [ 1] 1907 	tnz (SKIP,sp)
      001FBB 26 06            [ 1] 1908 	jrne 21$ 
      001FBD CD 11 CD         [ 4] 1909 	call var_name 
      001FC0 CD 09 45         [ 4] 1910 	call putc   
      001FC3                       1911 21$:
      001FC3 A6 3A            [ 1] 1912 	ld a,#':
      001FC5 CD 09 45         [ 4] 1913 	call putc 
      001FC8 CD 1F 6F         [ 4] 1914 	call save_context 
      001FCB 72 5F 00 03      [ 1] 1915 	clr count  
      001FCF CD 0A A7         [ 4] 1916 	call readln 
      001FD2 AE 16 68         [ 2] 1917 	ldw x,#tib 
      001FD5 3B 00 03         [ 1] 1918 	push count
      001FD8 4B 00            [ 1] 1919 	push #0 
      001FDA 72 FB 01         [ 2] 1920 	addw x,(1,sp)
      001FDD 5C               [ 1] 1921 	incw x 
      001FDE                       1922 	_drop 2 
      001FDE 5B 02            [ 2]    1     addw sp,#2 
      001FE0 72 5F 00 01      [ 1] 1923 	clr in 
      001FE4 CD 0F 0F         [ 4] 1924 	call get_token
      001FE7 A1 84            [ 1] 1925 	cp a,#TK_INTGR
      001FE9 27 12            [ 1] 1926 	jreq 3$ 
      001FEB A1 11            [ 1] 1927 	cp a,#TK_MINUS
      001FED CD 0F 0F         [ 4] 1928 	call get_token 
      001FF0 A1 84            [ 1] 1929 	cp a,#TK_INTGR 
      001FF2 27 06            [ 1] 1930 	jreq 22$
      001FF4 CD 1F 7F         [ 4] 1931 	call rest_context 
      001FF7 CC 16 90         [ 2] 1932 	jp syntax_error
      001FFA                       1933 22$:
      001FFA CD 02 0E         [ 4] 1934 	call neg_acc24	
      001FFD                       1935 3$: 
      001FFD C6 00 0C         [ 1] 1936 	ld a,acc24 
      002000 CE 00 0D         [ 2] 1937 	ldw x,acc16 
      002003 72 C7 00 19      [ 4] 1938 	ld [ptr16],a
      002007 72 5C 00 1A      [ 1] 1939 	inc ptr8  
      00200B 72 CF 00 19      [ 5] 1940 	ldw [ptr16],x 
      00200F CD 1F 7F         [ 4] 1941 	call rest_context
      002012 CD 17 91         [ 4] 1942 	call next_token 
      002015 A1 08            [ 1] 1943 	cp a,#TK_COMMA
      002017 26 03            [ 1] 1944 	jrne 4$ 
      002019 CC 1F 93         [ 2] 1945 	jp input_loop
      00201C                       1946 4$:
      00201C A1 00            [ 1] 1947 	cp a,#TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      00201E 27 07            [ 1] 1948 	jreq input_exit  
      002020 A1 0A            [ 1] 1949 	cp a,#TK_COLON 
      002022 27 03            [ 1] 1950     jreq input_exit 
      002024 CC 16 90         [ 2] 1951 	jp syntax_error 
      002027                       1952 input_exit:
      002027                       1953 	_drop VSIZE 
      002027 5B 05            [ 2]    1     addw sp,#VSIZE 
      002029 90 85            [ 2] 1954 	popw y 
      00202B 81               [ 4] 1955 	ret 
                                   1956 
                                   1957 
                                   1958 ;---------------------
                                   1959 ; BASIC: REM | ' 
                                   1960 ; skip comment to end of line 
                                   1961 ;---------------------- 
      00202C                       1962 remark::
      00202C 55 00 03 00 01   [ 1] 1963 	mov in,count 
      002031 81               [ 4] 1964  	ret 
                                   1965 
                                   1966 
                                   1967 ;---------------------
                                   1968 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   1969 ; read in loop 'addr'  
                                   1970 ; apply & 'mask' to value 
                                   1971 ; loop while result==0.  
                                   1972 ; 'xor_mask' is used to 
                                   1973 ; invert the wait logic.
                                   1974 ; i.e. loop while not 0.
                                   1975 ;---------------------
                           000001  1976 	XMASK=1 
                           000002  1977 	MASK=2
                           000003  1978 	ADDR=3
                           000004  1979 	VSIZE=4
      002032                       1980 wait: 
      002032                       1981 	_vars VSIZE
      002032 52 04            [ 2]    1     sub sp,#VSIZE 
      002034 0F 01            [ 1] 1982 	clr (XMASK,sp) 
      002036 CD 19 51         [ 4] 1983 	call arg_list 
      002039 A1 02            [ 1] 1984 	cp a,#2
      00203B 24 03            [ 1] 1985 	jruge 0$
      00203D CC 16 90         [ 2] 1986 	jp syntax_error 
      002040 A1 03            [ 1] 1987 0$:	cp a,#3
      002042 25 0C            [ 1] 1988 	jrult 1$
      002044                       1989 	_xpop  ; xor mask 
      002044 90 F6            [ 1]    1     ld a,(y)
      002046 93               [ 1]    2     ldw x,y 
      002047 EE 01            [ 2]    3     ldw x,(1,x)
      002049 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00204D 9F               [ 1] 1990 	ld a,xl 
      00204E 6B 01            [ 1] 1991 	ld (XMASK,sp),a 
      002050                       1992 1$: _xpop ; mask
      002050 90 F6            [ 1]    1     ld a,(y)
      002052 93               [ 1]    2     ldw x,y 
      002053 EE 01            [ 2]    3     ldw x,(1,x)
      002055 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002059 9F               [ 1] 1993     ld a,xl  
      00205A 6B 02            [ 1] 1994 	ld (MASK,sp),a 
      00205C                       1995 	_xpop ; address 
      00205C 90 F6            [ 1]    1     ld a,(y)
      00205E 93               [ 1]    2     ldw x,y 
      00205F EE 01            [ 2]    3     ldw x,(1,x)
      002061 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002065 F6               [ 1] 1996 2$:	ld a,(x)
      002066 14 02            [ 1] 1997 	and a,(MASK,sp)
      002068 18 01            [ 1] 1998 	xor a,(XMASK,sp)
      00206A 27 F9            [ 1] 1999 	jreq 2$ 
      00206C                       2000 	_drop VSIZE 
      00206C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00206E 81               [ 4] 2001 	ret 
                                   2002 
                                   2003 ;---------------------
                                   2004 ; BASIC: BSET addr,mask
                                   2005 ; set bits at 'addr' corresponding 
                                   2006 ; to those of 'mask' that are at 1.
                                   2007 ; arguments:
                                   2008 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2009 ;   mask        mask|addr
                                   2010 ; output:
                                   2011 ;	none 
                                   2012 ;--------------------------
      00206F                       2013 bit_set:
      00206F CD 19 51         [ 4] 2014 	call arg_list 
      002072 A1 02            [ 1] 2015 	cp a,#2	 
      002074 27 03            [ 1] 2016 	jreq 1$ 
      002076 CC 16 90         [ 2] 2017 	jp syntax_error
      002079                       2018 1$: 
      002079                       2019 	_xpop ; mask 
      002079 90 F6            [ 1]    1     ld a,(y)
      00207B 93               [ 1]    2     ldw x,y 
      00207C EE 01            [ 2]    3     ldw x,(1,x)
      00207E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002082 9F               [ 1] 2020 	ld a,xl
      002083 88               [ 1] 2021 	push a  
      002084                       2022 	_xpop ; addr  
      002084 90 F6            [ 1]    1     ld a,(y)
      002086 93               [ 1]    2     ldw x,y 
      002087 EE 01            [ 2]    3     ldw x,(1,x)
      002089 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00208D 84               [ 1] 2023 	pop a 
      00208E FA               [ 1] 2024 	or a,(x)
      00208F F7               [ 1] 2025 	ld (x),a
      002090 81               [ 4] 2026 	ret 
                                   2027 
                                   2028 ;---------------------
                                   2029 ; BASIC: BRES addr,mask
                                   2030 ; reset bits at 'addr' corresponding 
                                   2031 ; to those of 'mask' that are at 1.
                                   2032 ; arguments:
                                   2033 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2034 ;   mask	    ~mask&*addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2035 ; output:
                                   2036 ;	none 
                                   2037 ;--------------------------
      002091                       2038 bit_reset:
      002091 CD 19 51         [ 4] 2039 	call arg_list 
      002094 A1 02            [ 1] 2040 	cp a,#2  
      002096 27 03            [ 1] 2041 	jreq 1$ 
      002098 CC 16 90         [ 2] 2042 	jp syntax_error
      00209B                       2043 1$: 
      00209B                       2044 	_xpop ; mask 
      00209B 90 F6            [ 1]    1     ld a,(y)
      00209D 93               [ 1]    2     ldw x,y 
      00209E EE 01            [ 2]    3     ldw x,(1,x)
      0020A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020A4 9F               [ 1] 2045 	ld a,xl 
      0020A5 43               [ 1] 2046 	cpl a
      0020A6 88               [ 1] 2047 	push a  
      0020A7                       2048 	_xpop ; addr  
      0020A7 90 F6            [ 1]    1     ld a,(y)
      0020A9 93               [ 1]    2     ldw x,y 
      0020AA EE 01            [ 2]    3     ldw x,(1,x)
      0020AC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020B0 84               [ 1] 2049 	pop a 
      0020B1 F4               [ 1] 2050 	and a,(x)
      0020B2 F7               [ 1] 2051 	ld (x),a 
      0020B3 81               [ 4] 2052 	ret 
                                   2053 
                                   2054 ;---------------------
                                   2055 ; BASIC: BTOGL addr,mask
                                   2056 ; toggle bits at 'addr' corresponding 
                                   2057 ; to those of 'mask' that are at 1.
                                   2058 ; arguments:
                                   2059 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2060 ;   mask	    mask^*addr  
                                   2061 ; output:
                                   2062 ;	none 
                                   2063 ;--------------------------
      0020B4                       2064 bit_toggle:
      0020B4 CD 19 51         [ 4] 2065 	call arg_list 
      0020B7 A1 02            [ 1] 2066 	cp a,#2 
      0020B9 27 03            [ 1] 2067 	jreq 1$ 
      0020BB CC 16 90         [ 2] 2068 	jp syntax_error
      0020BE                       2069 1$: _xpop ; mask 
      0020BE 90 F6            [ 1]    1     ld a,(y)
      0020C0 93               [ 1]    2     ldw x,y 
      0020C1 EE 01            [ 2]    3     ldw x,(1,x)
      0020C3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020C7 9F               [ 1] 2070 	ld a,xl
      0020C8 88               [ 1] 2071 	push a 
      0020C9                       2072 	_xpop  ; addr  
      0020C9 90 F6            [ 1]    1     ld a,(y)
      0020CB 93               [ 1]    2     ldw x,y 
      0020CC EE 01            [ 2]    3     ldw x,(1,x)
      0020CE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020D2 84               [ 1] 2073 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      0020D3 F8               [ 1] 2074 	xor a,(x)
      0020D4 F7               [ 1] 2075 	ld (x),a 
      0020D5 81               [ 4] 2076 	ret 
                                   2077 
                                   2078 
                                   2079 ;---------------------
                                   2080 ; BASIC: BTEST(addr,bit)
                                   2081 ; return bit value at 'addr' 
                                   2082 ; bit is in range {0..7}.
                                   2083 ; arguments:
                                   2084 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2085 ;   bit 	    bit position {0..7}  
                                   2086 ; output:
                                   2087 ;	A:X       bit value  
                                   2088 ;--------------------------
      0020D6                       2089 bit_test:
      0020D6 CD 19 4C         [ 4] 2090 	call func_args 
      0020D9 A1 02            [ 1] 2091 	cp a,#2
      0020DB 27 03            [ 1] 2092 	jreq 0$
      0020DD CC 16 90         [ 2] 2093 	jp syntax_error
      0020E0                       2094 0$:	
      0020E0                       2095 	_xpop 
      0020E0 90 F6            [ 1]    1     ld a,(y)
      0020E2 93               [ 1]    2     ldw x,y 
      0020E3 EE 01            [ 2]    3     ldw x,(1,x)
      0020E5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020E9 9F               [ 1] 2096 	ld a,xl 
      0020EA A4 07            [ 1] 2097 	and a,#7
      0020EC 88               [ 1] 2098 	push a   
      0020ED A6 01            [ 1] 2099 	ld a,#1 
      0020EF 0D 01            [ 1] 2100 1$: tnz (1,sp)
      0020F1 27 05            [ 1] 2101 	jreq 2$
      0020F3 48               [ 1] 2102 	sll a 
      0020F4 0A 01            [ 1] 2103 	dec (1,sp)
      0020F6 20 F7            [ 2] 2104 	jra 1$
      0020F8 6B 01            [ 1] 2105 2$: ld (1,sp),a  
      0020FA                       2106 	_xpop ; address  
      0020FA 90 F6            [ 1]    1     ld a,(y)
      0020FC 93               [ 1]    2     ldw x,y 
      0020FD EE 01            [ 2]    3     ldw x,(1,x)
      0020FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002103 84               [ 1] 2107 	pop a 
      002104 F4               [ 1] 2108 	and a,(x)
      002105 27 02            [ 1] 2109 	jreq 3$
      002107 A6 01            [ 1] 2110 	ld a,#1 
      002109 5F               [ 1] 2111 3$:	clrw x 
      00210A 97               [ 1] 2112 	ld xl,a
      00210B 4F               [ 1] 2113 	clr a  
      00210C 81               [ 4] 2114 	ret
                                   2115 
                                   2116 ;--------------------
                                   2117 ; BASIC: POKE addr,byte
                                   2118 ; put a byte at addr 
                                   2119 ;--------------------
      00210D                       2120 poke:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      00210D CD 19 51         [ 4] 2121 	call arg_list 
      002110 A1 02            [ 1] 2122 	cp a,#2
      002112 27 03            [ 1] 2123 	jreq 1$
      002114 CC 16 90         [ 2] 2124 	jp syntax_error
      002117                       2125 1$:	
      002117                       2126 	_xpop ; byte   
      002117 90 F6            [ 1]    1     ld a,(y)
      002119 93               [ 1]    2     ldw x,y 
      00211A EE 01            [ 2]    3     ldw x,(1,x)
      00211C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002120 9F               [ 1] 2127     ld a,xl 
      002121 88               [ 1] 2128 	push a 
      002122                       2129 	_xpop ; address 
      002122 90 F6            [ 1]    1     ld a,(y)
      002124 93               [ 1]    2     ldw x,y 
      002125 EE 01            [ 2]    3     ldw x,(1,x)
      002127 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00212B 84               [ 1] 2130 	pop a 
      00212C F7               [ 1] 2131 	ld (x),a 
      00212D 81               [ 4] 2132 	ret 
                                   2133 
                                   2134 ;-----------------------
                                   2135 ; BASIC: PEEK(addr)
                                   2136 ; get the byte at addr 
                                   2137 ; input:
                                   2138 ;	none 
                                   2139 ; output:
                                   2140 ;	X 		value 
                                   2141 ;-----------------------
      00212E                       2142 peek:
      00212E CD 19 4C         [ 4] 2143 	call func_args
      002131 A1 01            [ 1] 2144 	cp a,#1 
      002133 27 03            [ 1] 2145 	jreq 1$
      002135 CC 16 90         [ 2] 2146 	jp syntax_error
      002138                       2147 1$: _xpop ; address  
      002138 90 F6            [ 1]    1     ld a,(y)
      00213A 93               [ 1]    2     ldw x,y 
      00213B EE 01            [ 2]    3     ldw x,(1,x)
      00213D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002141 C7 00 18         [ 1] 2148 	ld farptr,a 
      002144 CF 00 19         [ 2] 2149 	ldw ptr16,x 
      002147 92 BC 00 18      [ 5] 2150 	ldf a,[farptr]
      00214B 5F               [ 1] 2151 	clrw x 
      00214C 97               [ 1] 2152 	ld xl,a 
      00214D 4F               [ 1] 2153 	clr a 
      00214E 81               [ 4] 2154 	ret 
                                   2155 
                                   2156 ;---------------------------
                                   2157 ; BASIC IF expr : instructions
                                   2158 ; evaluate expr and if true 
                                   2159 ; execute instructions on same line. 
                                   2160 ;----------------------------
      00214F                       2161 if: 
      00214F CD 1A C9         [ 4] 2162 	call relation 
      002152 A1 84            [ 1] 2163 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002154 27 03            [ 1] 2164 	jreq 1$ 
      002156 CC 16 90         [ 2] 2165 	jp syntax_error
      002159                       2166 1$:	_xpop 
      002159 90 F6            [ 1]    1     ld a,(y)
      00215B 93               [ 1]    2     ldw x,y 
      00215C EE 01            [ 2]    3     ldw x,(1,x)
      00215E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002162 5D               [ 2] 2167 	tnzw x 
      002163 26 0A            [ 1] 2168 	jrne 9$ 
                                   2169 ;skip to next line
      002165 55 00 03 00 01   [ 1] 2170 	mov in,count
      00216A                       2171 	_drop 2 
      00216A 5B 02            [ 2]    1     addw sp,#2 
      00216C CC 17 43         [ 2] 2172 	jp next_line
      00216F 81               [ 4] 2173 9$:	ret 
                                   2174 
                                   2175 ;------------------------
                                   2176 ; BASIC: FOR var=expr 
                                   2177 ; set variable to expression 
                                   2178 ; leave variable address 
                                   2179 ; on stack and set
                                   2180 ; FLOOP bit in 'flags'
                                   2181 ;-----------------
                           000001  2182 	RETL1=1 ; return address  
                           000003  2183 	FSTEP=3  ; variable increment int24
                           000006  2184 	LIMIT=6 ; loop limit, int24  
                           000009  2185 	CVAR=9   ; control variable 
                           00000B  2186 	INW=11   ;  in.w saved
                           00000D  2187 	BPTR=13 ; baseptr saved
                           00000D  2188 	VSIZE=13  
      002170                       2189 for: ; { -- var_addr }
      002170 85               [ 2] 2190 	popw x ; call return address 
      002171                       2191 	_vars VSIZE 
      002171 52 0D            [ 2]    1     sub sp,#VSIZE 
      002173 89               [ 2] 2192 	pushw x  ; RETL1 
      002174 A6 85            [ 1] 2193 	ld a,#TK_VAR 
      002176 CD 19 3F         [ 4] 2194 	call expect
      002179 CD 17 C6         [ 4] 2195 	call get_addr
      00217C 1F 09            [ 2] 2196 	ldw (CVAR,sp),x  ; control variable 
      00217E CD 1B 98         [ 4] 2197 	call let_eval 
      002181 72 14 00 22      [ 1] 2198 	bset flags,#FLOOP 
      002185 CD 17 91         [ 4] 2199 	call next_token 
      002188 A1 80            [ 1] 2200 	cp a,#TK_CMD 
      00218A 27 03            [ 1] 2201 	jreq 1$
      00218C CC 16 90         [ 2] 2202 	jp syntax_error
      00218F                       2203 1$:  
      00218F CD 17 AA         [ 4] 2204 	call get_code_addr
      002192 A3 21 9A         [ 2] 2205 	cpw x,#to   
      002195 27 03            [ 1] 2206 	jreq to
      002197 CC 16 90         [ 2] 2207 	jp syntax_error 
                                   2208 
                                   2209 ;-----------------------------------
                                   2210 ; BASIC: TO expr 
                                   2211 ; second part of FOR loop initilization
                                   2212 ; leave limit on stack and set 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



                                   2213 ; FTO bit in 'flags'
                                   2214 ;-----------------------------------
      00219A                       2215 to: ; { var_addr -- var_addr limit step }
      00219A 72 04 00 22 03   [ 2] 2216 	btjt flags,#FLOOP,1$
      00219F CC 16 90         [ 2] 2217 	jp syntax_error
      0021A2 CD 1A 88         [ 4] 2218 1$: call expression   
      0021A5 A1 84            [ 1] 2219 	cp a,#TK_INTGR 
      0021A7 27 03            [ 1] 2220 	jreq 2$ 
      0021A9 CC 16 90         [ 2] 2221 	jp syntax_error
      0021AC                       2222 2$: _xpop
      0021AC 90 F6            [ 1]    1     ld a,(y)
      0021AE 93               [ 1]    2     ldw x,y 
      0021AF EE 01            [ 2]    3     ldw x,(1,x)
      0021B1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B5 6B 06            [ 1] 2223 	ld (LIMIT,sp),a 
      0021B7 1F 07            [ 2] 2224 	ldw (LIMIT+1,sp),x
      0021B9 CD 17 91         [ 4] 2225 	call next_token
      0021BC A1 00            [ 1] 2226 	cp a,#TK_NONE  
      0021BE 27 11            [ 1] 2227 	jreq 4$ 
      0021C0 A1 80            [ 1] 2228 	cp a,#TK_CMD
      0021C2 26 08            [ 1] 2229 	jrne 3$
      0021C4 CD 17 AA         [ 4] 2230 	call get_code_addr
      0021C7 A3 21 DA         [ 2] 2231 	cpw x,#step 
      0021CA 27 0E            [ 1] 2232 	jreq step
      0021CC                       2233 3$:	
      0021CC                       2234 	_unget_token   	 
      0021CC 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0021D1                       2235 4$:	
      0021D1 0F 03            [ 1] 2236 	clr (FSTEP,sp) 
      0021D3 AE 00 01         [ 2] 2237 	ldw x,#1   ; default step  
      0021D6 1F 04            [ 2] 2238 	ldw (FSTEP+1,sp),x 
      0021D8 20 2F            [ 2] 2239 	jra store_loop_addr 
                                   2240 
                                   2241 
                                   2242 ;----------------------------------
                                   2243 ; BASIC: STEP expr 
                                   2244 ; optional third par of FOR loop
                                   2245 ; initialization. 	
                                   2246 ;------------------------------------
      0021DA                       2247 step: ; {var limit -- var limit step}
      0021DA 72 04 00 22 03   [ 2] 2248 	btjt flags,#FLOOP,1$
      0021DF CC 16 90         [ 2] 2249 	jp syntax_error
      0021E2 CD 1A 88         [ 4] 2250 1$: call expression 
      0021E5 A1 84            [ 1] 2251 	cp a,#TK_INTGR
      0021E7 27 03            [ 1] 2252 	jreq 2$
      0021E9 CC 16 90         [ 2] 2253 	jp syntax_error
      0021EC                       2254 2$:	
      0021EC                       2255 	_xpop 
      0021EC 90 F6            [ 1]    1     ld a,(y)
      0021EE 93               [ 1]    2     ldw x,y 
      0021EF EE 01            [ 2]    3     ldw x,(1,x)
      0021F1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F5 6B 03            [ 1] 2256 	ld (FSTEP,sp),a 
      0021F7 1F 04            [ 2] 2257 	ldw (FSTEP+1,sp),x ; step
                                   2258 ; if step < 0 decrement LIMIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      0021F9 4D               [ 1] 2259 	tnz a
      0021FA 2A 0D            [ 1] 2260 	jrpl store_loop_addr 
      0021FC 7B 06            [ 1] 2261 	ld a,(LIMIT,sp)
      0021FE 1E 07            [ 2] 2262 	ldw x,(LIMIT+1,sp)
      002200 1D 00 01         [ 2] 2263 	subw x,#1 
      002203 A2 00            [ 1] 2264 	sbc a,#0 
      002205 6B 06            [ 1] 2265 	ld (LIMIT,sp),a 
      002207 1F 07            [ 2] 2266 	ldw (LIMIT+1,sp),x 
                                   2267 ; leave loop back entry point on cstack 
                                   2268 ; cstack is 1 call deep from interpreter
      002209                       2269 store_loop_addr:
      002209 CE 00 04         [ 2] 2270 	ldw x,basicptr
      00220C 1F 0D            [ 2] 2271 	ldw (BPTR,sp),x 
      00220E CE 00 00         [ 2] 2272 	ldw x,in.w 
      002211 1F 0B            [ 2] 2273 	ldw (INW,sp),x   
      002213 72 15 00 22      [ 1] 2274 	bres flags,#FLOOP 
      002217 72 5C 00 1F      [ 1] 2275 	inc loop_depth  
      00221B 81               [ 4] 2276 	ret 
                                   2277 
                                   2278 ;--------------------------------
                                   2279 ; BASIC: NEXT var 
                                   2280 ; FOR loop control 
                                   2281 ; increment variable with step 
                                   2282 ; and compare with limit 
                                   2283 ; loop if threshold not crossed.
                                   2284 ; else stack. 
                                   2285 ; and decrement 'loop_depth' 
                                   2286 ;--------------------------------
      00221C                       2287 next: ; {var limit step retl1 -- [var limit step ] }
      00221C 72 5D 00 1F      [ 1] 2288 	tnz loop_depth 
      002220 26 03            [ 1] 2289 	jrne 1$ 
      002222 CC 16 90         [ 2] 2290 	jp syntax_error 
      002225                       2291 1$: 
      002225 A6 85            [ 1] 2292 	ld a,#TK_VAR 
      002227 CD 19 3F         [ 4] 2293 	call expect
      00222A CD 17 C6         [ 4] 2294 	call get_addr 
                                   2295 ; check for good variable after NEXT 	 
      00222D 13 09            [ 2] 2296 	cpw x,(CVAR,sp)
      00222F 27 03            [ 1] 2297 	jreq 2$  
      002231 CC 16 90         [ 2] 2298 	jp syntax_error ; not the good one 
      002234                       2299 2$: 
      002234 CF 00 19         [ 2] 2300 	ldw ptr16,x 
                                   2301 	; increment variable 
      002237 F6               [ 1] 2302 	ld a,(x)
      002238 EE 01            [ 2] 2303 	ldw x,(1,x)  ; get var value 
      00223A 72 FB 04         [ 2] 2304 	addw x,(FSTEP+1,sp) ; var+step 
      00223D 19 03            [ 1] 2305 	adc a,(FSTEP,sp)
      00223F 72 C7 00 19      [ 4] 2306 	ld [ptr16],a
      002243 72 5C 00 1A      [ 1] 2307 	inc ptr8  
      002247 72 CF 00 19      [ 5] 2308 	ldw [ptr16],x 
      00224B C7 00 0C         [ 1] 2309 	ld acc24,a 
      00224E CF 00 0D         [ 2] 2310 	ldw acc16,x 
      002251 7B 06            [ 1] 2311 	ld a,(LIMIT,sp)
      002253 1E 07            [ 2] 2312 	ldw x,(LIMIT+1,sp)
      002255 72 B0 00 0D      [ 2] 2313 	subw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002259 C2 00 0C         [ 1] 2314 	sbc a,acc24
      00225C 18 03            [ 1] 2315 	xor a,(FSTEP,sp)
      00225E A8 80            [ 1] 2316 	xor a,#0x80
      002260 2B 12            [ 1] 2317 	jrmi loop_back  
      002262 20 25            [ 2] 2318 	jra loop_done   
                                   2319 ; check sign of STEP  
      002264 7B 03            [ 1] 2320 	ld a,(FSTEP,sp)
      002266 2A 07            [ 1] 2321 	jrpl 4$
                                   2322 ;negative step
      002268 C6 00 0E         [ 1] 2323     ld a,acc8 
      00226B 2F 07            [ 1] 2324 	jrslt loop_back   
      00226D 20 1A            [ 2] 2325 	jra loop_done  
      00226F                       2326 4$: ; positive step
      00226F 72 0E 00 0E 15   [ 2] 2327 	btjt acc8,#7,loop_done 
      002274                       2328 loop_back:
      002274 1E 0D            [ 2] 2329 	ldw x,(BPTR,sp)
      002276 CF 00 04         [ 2] 2330 	ldw basicptr,x 
      002279 72 01 00 22 05   [ 2] 2331 	btjf flags,#FRUN,1$ 
      00227E E6 02            [ 1] 2332 	ld a,(2,x)
      002280 C7 00 03         [ 1] 2333 	ld count,a
      002283 1E 0B            [ 2] 2334 1$:	ldw x,(INW,sp)
      002285 CF 00 00         [ 2] 2335 	ldw in.w,x 
      002288 81               [ 4] 2336 	ret 
      002289                       2337 loop_done:
                                   2338 	; remove loop data from stack  
      002289 85               [ 2] 2339 	popw x
      00228A                       2340 	_drop VSIZE 
      00228A 5B 0D            [ 2]    1     addw sp,#VSIZE 
      00228C 72 5A 00 1F      [ 1] 2341 	dec loop_depth 
      002290 FC               [ 2] 2342 	jp (x)
                                   2343 
                                   2344 ;----------------------------
                                   2345 ; called by goto/gosub
                                   2346 ; to get target line number 
                                   2347 ; output:
                                   2348 ;    x    line address 
                                   2349 ;---------------------------
      002291                       2350 get_target_line:
      002291 CD 17 91         [ 4] 2351 	call next_token  
      002294 A1 84            [ 1] 2352 	cp a,#TK_INTGR
      002296 27 07            [ 1] 2353 	jreq get_target_line_addr 
      002298 A1 03            [ 1] 2354 	cp a,#TK_LABEL 
      00229A 27 26            [ 1] 2355 	jreq look_target_symbol 
      00229C CC 16 90         [ 2] 2356 	jp syntax_error
                                   2357 ; the target is a line number 
                                   2358 ; search it. 
      00229F                       2359 get_target_line_addr:
      00229F 90 89            [ 2] 2360 	pushw y 
      0022A1 CD 17 D0         [ 4] 2361 	call get_int24 ; line # 
      0022A4 4F               [ 1] 2362 	clr a
      0022A5 90 CE 00 04      [ 2] 2363 	ldw y,basicptr 
      0022A9 90 FE            [ 2] 2364 	ldw y,(y)
      0022AB 90 89            [ 2] 2365 	pushw y 
      0022AD 13 01            [ 2] 2366 	cpw x,(1,sp)
      0022AF                       2367 	_drop 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      0022AF 5B 02            [ 2]    1     addw sp,#2 
      0022B1 25 01            [ 1] 2368 	jrult 11$
      0022B3 4C               [ 1] 2369 	inc a 
      0022B4                       2370 11$: ; scan program for this line# 	
      0022B4 CD 0C 8A         [ 4] 2371 	call search_lineno  
      0022B7 5D               [ 2] 2372 	tnzw x ; 0| line# address 
      0022B8 26 05            [ 1] 2373 	jrne 2$ 
      0022BA A6 05            [ 1] 2374 	ld a,#ERR_NO_LINE 
      0022BC CC 16 92         [ 2] 2375 	jp tb_error 
      0022BF 90 85            [ 2] 2376 2$:	popw y  
      0022C1 81               [ 4] 2377 	ret 
                                   2378 
                                   2379 ; the GOTO|GOSUB target is a symbol.
      0022C2                       2380 look_target_symbol:
      0022C2 90 89            [ 2] 2381 	pushw y 
      0022C4 89               [ 2] 2382 	pushw x 
      0022C5 72 5F 00 0D      [ 1] 2383 	clr acc16 
      0022C9 90 CE 00 1B      [ 2] 2384 	ldw y,txtbgn 
      0022CD 90 E6 03         [ 1] 2385 1$:	ld a,(3,y) ; first TK_ID on line 
      0022D0 A1 03            [ 1] 2386 	cp a,#TK_LABEL 
      0022D2 27 15            [ 1] 2387 	jreq 3$ 
      0022D4 90 E6 02         [ 1] 2388 2$:	ld a,(2,y); line length 
      0022D7 C7 00 0E         [ 1] 2389 	ld acc8,a 
      0022DA 72 B9 00 0D      [ 2] 2390 	addw y,acc16 ;point to next line 
      0022DE 90 C3 00 1D      [ 2] 2391 	cpw y,txtend 
      0022E2 25 E9            [ 1] 2392 	jrult 1$
      0022E4 A6 0A            [ 1] 2393 	ld a,#ERR_BAD_VALUE
      0022E6 CC 16 92         [ 2] 2394 	jp tb_error 
      0022E9                       2395 3$: ; found a TK_LABEL 
                                   2396 	; compare with GOTO|GOSUB target 
      0022E9 90 89            [ 2] 2397 	pushw y ; line address 
      0022EB 72 A9 00 04      [ 2] 2398 	addw y,#4 ; label string 
      0022EF 1E 03            [ 2] 2399 	ldw x,(3,sp) ; target string 
      0022F1 CD 13 DF         [ 4] 2400 	call strcmp
      0022F4 26 04            [ 1] 2401 	jrne 4$
      0022F6 90 85            [ 2] 2402 	popw y 
      0022F8 20 DA            [ 2] 2403 	jra 2$ 
      0022FA                       2404 4$: ; target found 
      0022FA 85               [ 2] 2405 	popw x ;  address line target  
      0022FB                       2406 	_drop 2 ; target string 
      0022FB 5B 02            [ 2]    1     addw sp,#2 
      0022FD 90 85            [ 2] 2407 	popw y 
      0022FF 81               [ 4] 2408 	ret
                                   2409 
                                   2410 
                                   2411 ;--------------------------------
                                   2412 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2413 ; selective goto or gosub 
                                   2414 ;--------------------------------
      002300                       2415 cmd_on:
      002300 72 00 00 22 05   [ 2] 2416 	btjt flags,#FRUN,0$ 
      002305 A6 06            [ 1] 2417 	ld a,#ERR_RUN_ONLY
      002307 CC 16 92         [ 2] 2418 	jp tb_error 
      00230A CD 1A 88         [ 4] 2419 0$:	call expression 
      00230D A1 84            [ 1] 2420 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      00230F 27 03            [ 1] 2421 	jreq 1$
      002311 CC 16 90         [ 2] 2422 	jp syntax_error
      002314                       2423 1$: _xpop
      002314 90 F6            [ 1]    1     ld a,(y)
      002316 93               [ 1]    2     ldw x,y 
      002317 EE 01            [ 2]    3     ldw x,(1,x)
      002319 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2424 ; the selector is the element indice 
                                   2425 ; in the list of arguments. {1..#elements} 
      00231D 9F               [ 1] 2426 	ld a,xl ; keep only bits 7..0
      00231E 27 62            [ 1] 2427 	jreq 9$ ; element # begin at 1. 
      002320 88               [ 1] 2428 	push a  ; selector  
      002321 CD 17 91         [ 4] 2429 	call next_token
      002324 A1 80            [ 1] 2430 	cp a,#TK_CMD 
      002326 27 03            [ 1] 2431 	jreq 2$ 
      002328 CC 16 90         [ 2] 2432 	jp syntax_error 
      00232B CD 17 AA         [ 4] 2433 2$: call get_code_addr
                                   2434 ;; must be a GOTO or GOSUB 
      00232E A3 23 8C         [ 2] 2435 	cpw x,#goto 
      002331 27 08            [ 1] 2436 	jreq 4$
      002333 A3 23 A6         [ 2] 2437 	cpw x,#gosub 
      002336 27 03            [ 1] 2438 	jreq 4$ 
      002338 CC 16 90         [ 2] 2439 	jp syntax_error 
      00233B                       2440 4$: 
      00233B 84               [ 1] 2441 	pop a 
      00233C 89               [ 2] 2442 	pushw x ; save routine address 	
      00233D 88               [ 1] 2443 	push a  ; selector  
      00233E                       2444 5$: ; skip elements in list until selector==0 
      00233E 0A 01            [ 1] 2445 	dec (1,sp)
      002340 27 26            [ 1] 2446 	jreq 6$ 
                                   2447 ; can be a line# or a label 
      002342 CD 17 91         [ 4] 2448 	call next_token 
      002345 A1 84            [ 1] 2449 	cp a,#TK_INTGR 
      002347 27 07            [ 1] 2450 	jreq 52$
      002349 A1 03            [ 1] 2451 	cp a,#TK_LABEL 
      00234B 27 0D            [ 1] 2452 	jreq 54$
      00234D CC 16 90         [ 2] 2453 	jp syntax_error 
      002350                       2454 52$: ; got a line number 
      002350 C6 00 01         [ 1] 2455 	ld a,in ; skip over int24 value 
      002353 AB 03            [ 1] 2456 	add a,#CELL_SIZE ; integer size  
      002355 C7 00 01         [ 1] 2457 	ld in,a 
      002358 20 03            [ 2] 2458 	jra 56$
      00235A CD 17 B7         [ 4] 2459 54$: call skip_string ; skip over label 	
      00235D                       2460 56$: ; if another element comma present 
      00235D CD 17 91         [ 4] 2461 	call next_token
      002360 A1 08            [ 1] 2462 	cp a,#TK_COMMA 
      002362 27 DA            [ 1] 2463 	jreq 5$ 
                                   2464 ; arg list exhausted, selector to big 
                                   2465 ; continue execution on next line 
      002364                       2466 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002364 5B 03            [ 2]    1     addw sp,#3 
      002366 20 1A            [ 2] 2467 	jra 9$
      002368                       2468 6$: ;at selected position  
      002368                       2469 	_drop 1 ; discard selector
      002368 5B 01            [ 2]    1     addw sp,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2470 ; here only the routine address 
                                   2471 ; of GOTO|GOSUB is on stack 
      00236A CD 22 91         [ 4] 2472     call get_target_line
      00236D CF 00 19         [ 2] 2473 	ldw ptr16,x 	
      002370 55 00 03 00 01   [ 1] 2474 	mov in,count ; move to end of line  
      002375 85               [ 2] 2475 	popw x ; cmd address, GOTO||GOSUB 
      002376 A3 23 8C         [ 2] 2476 	cpw x,#goto 
      002379 26 05            [ 1] 2477 	jrne 7$ 
      00237B CE 00 19         [ 2] 2478 	ldw x,ptr16 
      00237E 20 19            [ 2] 2479 	jra jp_to_target
      002380                       2480 7$: 
      002380 20 35            [ 2] 2481 	jra gosub_2 ; target in ptr16 
      002382                       2482 9$: ; expr out of range skip to end of line
                                   2483     ; this will force a fall to next line  
      002382 55 00 03 00 01   [ 1] 2484 	mov in,count
      002387                       2485 	_drop 2
      002387 5B 02            [ 2]    1     addw sp,#2 
      002389 CC 17 43         [ 2] 2486 	jp next_line  
                                   2487 
                                   2488 
                                   2489 ;------------------------
                                   2490 ; BASIC: GOTO line# 
                                   2491 ; jump to line# 
                                   2492 ; here cstack is 2 call deep from interpreter 
                                   2493 ;------------------------
      00238C                       2494 goto:
      00238C 72 00 00 22 05   [ 2] 2495 	btjt flags,#FRUN,goto_1  
      002391 A6 06            [ 1] 2496 	ld a,#ERR_RUN_ONLY
      002393 CC 16 92         [ 2] 2497 	jp tb_error 
      002396                       2498 goto_1:
      002396 CD 22 91         [ 4] 2499 	call get_target_line
      002399                       2500 jp_to_target:
      002399 CF 00 04         [ 2] 2501 	ldw basicptr,x 
      00239C E6 02            [ 1] 2502 	ld a,(2,x)
      00239E C7 00 03         [ 1] 2503 	ld count,a 
      0023A1 35 03 00 01      [ 1] 2504 	mov in,#3 
      0023A5 81               [ 4] 2505 	ret 
                                   2506 
                                   2507 
                                   2508 ;--------------------
                                   2509 ; BASIC: GOSUB line#
                                   2510 ; basic subroutine call
                                   2511 ; actual line# and basicptr 
                                   2512 ; are saved on cstack
                                   2513 ; here cstack is 2 call deep from interpreter 
                                   2514 ;--------------------
                           000001  2515 	TARGET=1   ; target address 
                           000003  2516 	RET_ADDR=3 ; subroutine return address 
                           000005  2517 	RET_BPTR=5 ; basicptr return point 
                           000007  2518 	RET_INW=7  ; in.w return point 
                           000004  2519 	VSIZE=4  
      0023A6                       2520 gosub:
      0023A6 72 00 00 22 06   [ 2] 2521 	btjt flags,#FRUN,gosub_1 
      0023AB A6 06            [ 1] 2522 	ld a,#ERR_RUN_ONLY
      0023AD CC 16 92         [ 2] 2523 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      0023B0 81               [ 4] 2524 	ret 
      0023B1                       2525 gosub_1:
      0023B1 CD 22 91         [ 4] 2526 	call get_target_line 
      0023B4 CF 00 19         [ 2] 2527 	ldw ptr16,x 
      0023B7                       2528 gosub_2: 
      0023B7 85               [ 2] 2529 	popw x 
      0023B8                       2530 	_vars VSIZE  
      0023B8 52 04            [ 2]    1     sub sp,#VSIZE 
      0023BA 89               [ 2] 2531 	pushw x ; RET_ADDR 
      0023BB CE 00 19         [ 2] 2532 	ldw x,ptr16 
      0023BE 89               [ 2] 2533 	pushw x ; TARGET
                                   2534 ; save BASIC subroutine return point.   
      0023BF CE 00 04         [ 2] 2535 	ldw x,basicptr
      0023C2 1F 05            [ 2] 2536 	ldw (RET_BPTR,sp),x 
      0023C4 CE 00 00         [ 2] 2537 	ldw x,in.w 
      0023C7 1F 07            [ 2] 2538 	ldw (RET_INW,sp),x
      0023C9 85               [ 2] 2539 	popw x 
      0023CA 20 CD            [ 2] 2540 	jra jp_to_target
                                   2541 
                                   2542 ;------------------------
                                   2543 ; BASIC: RETURN 
                                   2544 ; exit from BASIC subroutine 
                                   2545 ;------------------------
                           000003  2546 	RET_BPTR=3 ; basicptr return point 
                           000005  2547 	RET_INW=5  ; in.w return point 
                           000004  2548 	VSIZE=4  
      0023CC                       2549 return:
      0023CC 72 00 00 22 05   [ 2] 2550 	btjt flags,#FRUN,0$ 
      0023D1 A6 06            [ 1] 2551 	ld a,#ERR_RUN_ONLY
      0023D3 CC 16 92         [ 2] 2552 	jp tb_error 
      0023D6                       2553 0$:	
      0023D6 1E 03            [ 2] 2554 	ldw x,(RET_ADDR,sp) 
      0023D8 CF 00 04         [ 2] 2555 	ldw basicptr,x
      0023DB E6 02            [ 1] 2556 	ld a,(2,x)
      0023DD C7 00 03         [ 1] 2557 	ld count,a  
      0023E0 1E 05            [ 2] 2558 	ldw x,(RET_INW,sp)
      0023E2 CF 00 00         [ 2] 2559 	ldw in.w,x 
      0023E5 85               [ 2] 2560 	popw x 
      0023E6                       2561 	_drop VSIZE 
      0023E6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0023E8 89               [ 2] 2562 	pushw x
      0023E9 81               [ 4] 2563 	ret  
                                   2564 
                                   2565 ;----------------------------------
                                   2566 ; BASIC: RUN
                                   2567 ; run BASIC program in RAM
                                   2568 ;----------------------------------- 
      0023EA                       2569 run: 
      0023EA 72 01 00 22 02   [ 2] 2570 	btjf flags,#FRUN,0$  
      0023EF 4F               [ 1] 2571 	clr a 
      0023F0 81               [ 4] 2572 	ret
      0023F1                       2573 0$: 
      0023F1 72 09 00 22 12   [ 2] 2574 	btjf flags,#FBREAK,1$
      0023F6                       2575 	_drop 2 
      0023F6 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0023F8 CD 1F 7F         [ 4] 2576 	call rest_context
      0023FB                       2577 	_drop CTXT_SIZE 
      0023FB 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0023FD 72 19 00 22      [ 1] 2578 	bres flags,#FBREAK 
      002401 72 10 00 22      [ 1] 2579 	bset flags,#FRUN 
      002405 CC 17 3B         [ 2] 2580 	jp interpreter 
      002408 CE 00 1B         [ 2] 2581 1$:	ldw x,txtbgn
      00240B C3 00 1D         [ 2] 2582 	cpw x,txtend 
      00240E 2B 0C            [ 1] 2583 	jrmi run_it 
      002410 AE 16 1F         [ 2] 2584 	ldw x,#err_no_prog
      002413 CD 09 A2         [ 4] 2585 	call puts 
      002416 55 00 03 00 01   [ 1] 2586 	mov in,count
      00241B 81               [ 4] 2587 	ret 
      00241C                       2588 run_it:	 
      00241C                       2589 	_drop 2 ; drop return address 
      00241C 5B 02            [ 2]    1     addw sp,#2 
      00241E                       2590 run_it_02: 
      00241E CD 1B 77         [ 4] 2591     call ubound 
      002421 CD 14 44         [ 4] 2592 	call clear_vars 
                                   2593 ; clear data pointer 
      002424 5F               [ 1] 2594 	clrw x 
      002425 CF 00 06         [ 2] 2595 	ldw data_ptr,x 
      002428 72 5F 00 08      [ 1] 2596 	clr data_ofs 
      00242C 72 5F 00 09      [ 1] 2597 	clr data_len 
                                   2598 ; initialize BASIC pointer 
      002430 CE 00 1B         [ 2] 2599 	ldw x,txtbgn 
      002433 CF 00 04         [ 2] 2600 	ldw basicptr,x 
      002436 E6 02            [ 1] 2601 	ld a,(2,x)
      002438 C7 00 03         [ 1] 2602 	ld count,a
      00243B 35 03 00 01      [ 1] 2603 	mov in,#3	
      00243F 72 10 00 22      [ 1] 2604 	bset flags,#FRUN 
      002443 CC 17 3B         [ 2] 2605 	jp interpreter 
                                   2606 
                                   2607 
                                   2608 ;----------------------
                                   2609 ; BASIC: END
                                   2610 ; end running program
                                   2611 ;---------------------- 
      002446                       2612 cmd_end: 
                                   2613 ; clean stack 
      002446 AE 17 FF         [ 2] 2614 	ldw x,#STACK_EMPTY
      002449 94               [ 1] 2615 	ldw sp,x 
      00244A CC 17 1C         [ 2] 2616 	jp warm_start
                                   2617 
                                   2618 ;---------------------------
                                   2619 ; BASIC: GET var 
                                   2620 ; receive a key in variable 
                                   2621 ; don't wait 
                                   2622 ;---------------------------
      00244D                       2623 cmd_get:
      00244D CD 17 91         [ 4] 2624 	call next_token 
      002450 A1 85            [ 1] 2625 	cp a,#TK_VAR 
      002452 27 03            [ 1] 2626 	jreq 0$
      002454 CC 16 90         [ 2] 2627 	jp syntax_error 
      002457 CD 17 C6         [ 4] 2628 0$: call get_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00245A CF 00 19         [ 2] 2629 	ldw ptr16,x 
      00245D CD 09 4E         [ 4] 2630 	call qgetc 
      002460 27 03            [ 1] 2631 	jreq 2$
      002462 CD 09 55         [ 4] 2632 	call getc  
      002465 72 3F 00 19      [ 4] 2633 2$: clr [ptr16]
      002469 72 5C 00 1A      [ 1] 2634 	inc ptr8 
      00246D 72 3F 00 19      [ 4] 2635 	clr [ptr16]
      002471 72 5C 00 1A      [ 1] 2636 	inc ptr8 
      002475 72 C7 00 19      [ 4] 2637 	ld [ptr16],a 
      002479 81               [ 4] 2638 	ret 
                                   2639 
                                   2640 
                                   2641 ;-----------------
                                   2642 ; 1 Khz beep 
                                   2643 ;-----------------
      00247A                       2644 beep_1khz:: 
      00247A AE 00 64         [ 2] 2645 	ldw x,#100
      00247D 90 AE 03 E8      [ 2] 2646 	ldw y,#1000
      002481 20 20            [ 2] 2647 	jra beep
                                   2648 
                                   2649 ;-----------------------
                                   2650 ; BASIC: TONE expr1,expr2
                                   2651 ; used TIMER2 channel 1
                                   2652 ; to produce a tone 
                                   2653 ; arguments:
                                   2654 ;    expr1   frequency 
                                   2655 ;    expr2   duration msec.
                                   2656 ;---------------------------
      002483                       2657 tone:
      002483 CD 19 51         [ 4] 2658 	call arg_list 
      002486 A1 02            [ 1] 2659 	cp a,#2 
      002488 27 03            [ 1] 2660 	jreq 1$
      00248A CC 16 90         [ 2] 2661 	jp syntax_error 
      00248D                       2662 1$: 
      00248D                       2663 	_xpop 
      00248D 90 F6            [ 1]    1     ld a,(y)
      00248F 93               [ 1]    2     ldw x,y 
      002490 EE 01            [ 2]    3     ldw x,(1,x)
      002492 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002496 89               [ 2] 2664 	pushw x ; duration 
      002497                       2665 	_xpop ; frequency
      002497 90 F6            [ 1]    1     ld a,(y)
      002499 93               [ 1]    2     ldw x,y 
      00249A EE 01            [ 2]    3     ldw x,(1,x)
      00249C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0024A0 90 93            [ 1] 2666 	ldw y,x ; frequency 
      0024A2 85               [ 2] 2667 	popw x  ; duration 
      0024A3                       2668 beep:  
      0024A3 89               [ 2] 2669 	pushw x 
      0024A4 AE F4 24         [ 2] 2670 	ldw x,#TIM2_CLK_FREQ
      0024A7 65               [ 2] 2671 	divw x,y ; cntr=Fclk/freq 
                                   2672 ; round to nearest integer 
      0024A8 90 A3 7A 12      [ 2] 2673 	cpw y,#TIM2_CLK_FREQ/2
      0024AC 2B 01            [ 1] 2674 	jrmi 2$
      0024AE 5C               [ 1] 2675 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      0024AF                       2676 2$:	 
      0024AF 9E               [ 1] 2677 	ld a,xh 
      0024B0 C7 53 0D         [ 1] 2678 	ld TIM2_ARRH,a 
      0024B3 9F               [ 1] 2679 	ld a,xl 
      0024B4 C7 53 0E         [ 1] 2680 	ld TIM2_ARRL,a 
                                   2681 ; 50% duty cycle 
      0024B7 8C               [ 1] 2682 	ccf 
      0024B8 56               [ 2] 2683 	rrcw x 
      0024B9 9E               [ 1] 2684 	ld a,xh 
      0024BA C7 53 0F         [ 1] 2685 	ld TIM2_CCR1H,a 
      0024BD 9F               [ 1] 2686 	ld a,xl
      0024BE C7 53 10         [ 1] 2687 	ld TIM2_CCR1L,a
      0024C1 72 10 53 08      [ 1] 2688 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0024C5 72 10 53 00      [ 1] 2689 	bset TIM2_CR1,#TIM2_CR1_CEN
      0024C9 72 10 53 04      [ 1] 2690 	bset TIM2_EGR,#TIM2_EGR_UG
      0024CD 85               [ 2] 2691 	popw x 
      0024CE CD 29 1E         [ 4] 2692 	call pause02
      0024D1 72 11 53 08      [ 1] 2693 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0024D5 72 11 53 00      [ 1] 2694 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0024D9 81               [ 4] 2695 	ret 
                                   2696 
                                   2697 ;-------------------------------
                                   2698 ; BASIC: ADCON 0|1 [,divisor]  
                                   2699 ; disable/enanble ADC 
                                   2700 ;-------------------------------
                           000003  2701 	ONOFF=3 
                           000001  2702 	DIVSOR=1
                           000004  2703 	VSIZE=4 
      0024DA                       2704 power_adc:
      0024DA CD 19 51         [ 4] 2705 	call arg_list 
      0024DD A1 02            [ 1] 2706 	cp a,#2	
      0024DF 27 12            [ 1] 2707 	jreq 1$
      0024E1 A1 01            [ 1] 2708 	cp a,#1 
      0024E3 27 03            [ 1] 2709 	jreq 0$ 
      0024E5 CC 16 90         [ 2] 2710 	jp syntax_error 
      0024E8 4F               [ 1] 2711 0$:	clr a 
      0024E9 5F               [ 1] 2712 	clrw x
      0024EA                       2713 	_xpush   ; divisor  
      0024EA 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0024EE 90 F7            [ 1]    2     ld (y),a 
      0024F0 90 EF 01         [ 2]    3     ldw (1,y),x 
      0024F3                       2714 1$: _at_next 
      0024F3 90 E6 03         [ 1]    1     ld a,(3,y)
      0024F6 93               [ 1]    2     ldw x,y 
      0024F7 EE 04            [ 2]    3     ldw x,(4,x)
      0024F9 5D               [ 2] 2715 	tnzw x 
      0024FA 27 25            [ 1] 2716 	jreq 2$ 
      0024FC                       2717 	_xpop
      0024FC 90 F6            [ 1]    1     ld a,(y)
      0024FE 93               [ 1]    2     ldw x,y 
      0024FF EE 01            [ 2]    3     ldw x,(1,x)
      002501 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002505                       2718 	_xdrop  
      002505 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      002509 9F               [ 1] 2719 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00250A A4 07            [ 1] 2720 	and a,#7
      00250C 4E               [ 1] 2721 	swap a 
      00250D C7 54 01         [ 1] 2722 	ld ADC_CR1,a
      002510 72 16 50 CA      [ 1] 2723 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002514 72 10 54 01      [ 1] 2724 	bset ADC_CR1,#ADC_CR1_ADON 
      002518                       2725 	_usec_dly 7 
      002518 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00251B 5A               [ 2]    2     decw x
      00251C 9D               [ 1]    3     nop 
      00251D 26 FA            [ 1]    4     jrne .-4
      00251F 20 08            [ 2] 2726 	jra 3$
      002521 72 11 54 01      [ 1] 2727 2$: bres ADC_CR1,#ADC_CR1_ADON
      002525 72 17 50 CA      [ 1] 2728 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002529                       2729 3$:	
      002529 81               [ 4] 2730 	ret
                                   2731 
                                   2732 ;-----------------------------
                                   2733 ; BASIC: ADCREAD (channel)
                                   2734 ; read adc channel {0..5}
                                   2735 ; output:
                                   2736 ;   A 		TK_INTGR 
                                   2737 ;   X 		value 
                                   2738 ;-----------------------------
      00252A                       2739 analog_read:
      00252A CD 19 4C         [ 4] 2740 	call func_args 
      00252D A1 01            [ 1] 2741 	cp a,#1 
      00252F 27 03            [ 1] 2742 	jreq 1$
      002531 CC 16 90         [ 2] 2743 	jp syntax_error
      002534                       2744 1$: _xpop 
      002534 90 F6            [ 1]    1     ld a,(y)
      002536 93               [ 1]    2     ldw x,y 
      002537 EE 01            [ 2]    3     ldw x,(1,x)
      002539 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00253D A3 00 05         [ 2] 2745 	cpw x,#5 
      002540 23 05            [ 2] 2746 	jrule 2$
      002542 A6 0A            [ 1] 2747 	ld a,#ERR_BAD_VALUE
      002544 CC 16 92         [ 2] 2748 	jp tb_error 
      002547 9F               [ 1] 2749 2$: ld a,xl
      002548 C7 00 0E         [ 1] 2750 	ld acc8,a 
      00254B A6 05            [ 1] 2751 	ld a,#5
      00254D C0 00 0E         [ 1] 2752 	sub a,acc8 
      002550 C7 54 00         [ 1] 2753 	ld ADC_CSR,a
      002553 72 16 54 02      [ 1] 2754 	bset ADC_CR2,#ADC_CR2_ALIGN
      002557 72 10 54 01      [ 1] 2755 	bset ADC_CR1,#ADC_CR1_ADON
      00255B 72 0F 54 00 FB   [ 2] 2756 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002560 CE 54 04         [ 2] 2757 	ldw x,ADC_DRH
      002563 A6 84            [ 1] 2758 	ld a,#TK_INTGR
      002565 81               [ 4] 2759 	ret 
                                   2760 
                                   2761 ;-----------------------
                                   2762 ; BASIC: DREAD(pin)
                                   2763 ; Arduino pins 
                                   2764 ; read state of a digital pin 
                                   2765 ; pin# {0..15}
                                   2766 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   2767 ;    A 		TK_INTGR
                                   2768 ;    X      0|1 
                                   2769 ;-------------------------
                           000001  2770 	PINNO=1
                           000001  2771 	VSIZE=1
      002566                       2772 digital_read:
      002566                       2773 	_vars VSIZE 
      002566 52 01            [ 2]    1     sub sp,#VSIZE 
      002568 CD 19 4C         [ 4] 2774 	call func_args
      00256B A1 01            [ 1] 2775 	cp a,#1
      00256D 27 03            [ 1] 2776 	jreq 1$
      00256F CC 16 90         [ 2] 2777 	jp syntax_error
      002572                       2778 1$: _xpop 
      002572 90 F6            [ 1]    1     ld a,(y)
      002574 93               [ 1]    2     ldw x,y 
      002575 EE 01            [ 2]    3     ldw x,(1,x)
      002577 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00257B A3 00 0F         [ 2] 2779 	cpw x,#15 
      00257E 23 05            [ 2] 2780 	jrule 2$
      002580 A6 0A            [ 1] 2781 	ld a,#ERR_BAD_VALUE
      002582 CC 16 92         [ 2] 2782 	jp tb_error 
      002585 CD 2A F3         [ 4] 2783 2$:	call select_pin 
      002588 6B 01            [ 1] 2784 	ld (PINNO,sp),a
      00258A E6 01            [ 1] 2785 	ld a,(GPIO_IDR,x)
      00258C 0D 01            [ 1] 2786 	tnz (PINNO,sp)
      00258E 27 05            [ 1] 2787 	jreq 8$
      002590 44               [ 1] 2788 3$: srl a 
      002591 0A 01            [ 1] 2789 	dec (PINNO,sp)
      002593 26 FB            [ 1] 2790 	jrne 3$ 
      002595 A4 01            [ 1] 2791 8$: and a,#1 
      002597 5F               [ 1] 2792 	clrw x 
      002598 97               [ 1] 2793 	ld xl,a 
      002599 4F               [ 1] 2794 	clr a 
      00259A                       2795 	_drop VSIZE
      00259A 5B 01            [ 2]    1     addw sp,#VSIZE 
      00259C 81               [ 4] 2796 	ret
                                   2797 
                                   2798 
                                   2799 ;-----------------------
                                   2800 ; BASIC: DWRITE pin,0|1
                                   2801 ; Arduino pins 
                                   2802 ; write to a digital pin 
                                   2803 ; pin# {0..15}
                                   2804 ; output:
                                   2805 ;    A 		TK_INTGR
                                   2806 ;    X      0|1 
                                   2807 ;-------------------------
                           000001  2808 	PINNO=1
                           000002  2809 	PINVAL=2
                           000002  2810 	VSIZE=2
      00259D                       2811 digital_write:
      00259D                       2812 	_vars VSIZE 
      00259D 52 02            [ 2]    1     sub sp,#VSIZE 
      00259F CD 19 51         [ 4] 2813 	call arg_list  
      0025A2 A1 02            [ 1] 2814 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0025A4 27 03            [ 1] 2815 	jreq 1$
      0025A6 CC 16 90         [ 2] 2816 	jp syntax_error
      0025A9                       2817 1$: _xpop 
      0025A9 90 F6            [ 1]    1     ld a,(y)
      0025AB 93               [ 1]    2     ldw x,y 
      0025AC EE 01            [ 2]    3     ldw x,(1,x)
      0025AE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025B2 9F               [ 1] 2818 	ld a,xl 
      0025B3 6B 02            [ 1] 2819 	ld (PINVAL,sp),a
      0025B5                       2820 	_xpop 
      0025B5 90 F6            [ 1]    1     ld a,(y)
      0025B7 93               [ 1]    2     ldw x,y 
      0025B8 EE 01            [ 2]    3     ldw x,(1,x)
      0025BA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025BE A3 00 0F         [ 2] 2821 	cpw x,#15 
      0025C1 23 05            [ 2] 2822 	jrule 2$
      0025C3 A6 0A            [ 1] 2823 	ld a,#ERR_BAD_VALUE
      0025C5 CC 16 92         [ 2] 2824 	jp tb_error 
      0025C8 CD 2A F3         [ 4] 2825 2$:	call select_pin 
      0025CB 6B 01            [ 1] 2826 	ld (PINNO,sp),a 
      0025CD A6 01            [ 1] 2827 	ld a,#1
      0025CF 0D 01            [ 1] 2828 	tnz (PINNO,sp)
      0025D1 27 05            [ 1] 2829 	jreq 4$
      0025D3 48               [ 1] 2830 3$: sll a
      0025D4 0A 01            [ 1] 2831 	dec (PINNO,sp)
      0025D6 26 FB            [ 1] 2832 	jrne 3$
      0025D8 0D 02            [ 1] 2833 4$: tnz (PINVAL,sp)
      0025DA 26 05            [ 1] 2834 	jrne 5$
      0025DC 43               [ 1] 2835 	cpl a 
      0025DD E4 00            [ 1] 2836 	and a,(GPIO_ODR,x)
      0025DF 20 02            [ 2] 2837 	jra 8$
      0025E1 EA 00            [ 1] 2838 5$: or a,(GPIO_ODR,x)
      0025E3 E7 00            [ 1] 2839 8$: ld (GPIO_ODR,x),a 
      0025E5                       2840 	_drop VSIZE 
      0025E5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0025E7 81               [ 4] 2841 	ret
                                   2842 
                                   2843 
                                   2844 ;-----------------------
                                   2845 ; BASIC: STOP
                                   2846 ; stop progam execution  
                                   2847 ; without resetting pointers 
                                   2848 ; the program is resumed
                                   2849 ; with RUN 
                                   2850 ;-------------------------
      0025E8                       2851 stop:
      0025E8 72 00 00 22 02   [ 2] 2852 	btjt flags,#FRUN,2$
      0025ED 4F               [ 1] 2853 	clr a
      0025EE 81               [ 4] 2854 	ret 
      0025EF                       2855 2$:	 
                                   2856 ; create space on cstack to save context 
      0025EF AE 26 16         [ 2] 2857 	ldw x,#break_point 
      0025F2 CD 09 A2         [ 4] 2858 	call puts 
      0025F5                       2859 	_drop 2 ;drop return address 
      0025F5 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0025F7                       2860 	_vars CTXT_SIZE ; context size 
      0025F7 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0025F9 CD 1F 6F         [ 4] 2861 	call save_context 
      0025FC AE 16 68         [ 2] 2862 	ldw x,#tib 
      0025FF CF 00 04         [ 2] 2863 	ldw basicptr,x
      002602 7F               [ 1] 2864 	clr (x)
      002603 72 5F 00 03      [ 1] 2865 	clr count  
      002607 5F               [ 1] 2866 	clrw x 
      002608 CF 00 00         [ 2] 2867 	ldw in.w,x
      00260B 72 11 00 22      [ 1] 2868 	bres flags,#FRUN 
      00260F 72 18 00 22      [ 1] 2869 	bset flags,#FBREAK
      002613 CC 17 3B         [ 2] 2870 	jp interpreter 
      002616 0A 62 72 65 61 6B 20  2871 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2872 
                                   2873 ;-----------------------
                                   2874 ; BASIC: NEW
                                   2875 ; from command line only 
                                   2876 ; free program memory
                                   2877 ; and clear variables 
                                   2878 ;------------------------
      002634                       2879 new: 
      002634 72 01 00 22 01   [ 2] 2880 	btjf flags,#FRUN,0$ 
      002639 81               [ 4] 2881 	ret 
      00263A                       2882 0$:	
      00263A CD 14 EC         [ 4] 2883 	call clear_basic 
      00263D 81               [ 4] 2884 	ret 
                                   2885 
                                   2886 ;-----------------------------------
                                   2887 ; BASIC: ERASE \E | \F 
                                   2888 ; erase all block in range from 
                                   2889 ;  'app_space' to FLASH end (0x20000)
                                   2890 ;  or all EEPROM 
                                   2891 ; that contains a non zero byte.  
                                   2892 ;-----------------------------------
                           000001  2893 	LIMIT=1 
                           000003  2894 	VSIZE = 3 
      00263E                       2895 erase:
      00263E 72 5F 00 18      [ 1] 2896 	clr farptr 
      002642                       2897 	_vars VSIZE 
      002642 52 03            [ 2]    1     sub sp,#VSIZE 
      002644 CD 17 91         [ 4] 2898 	call next_token 
      002647 A1 04            [ 1] 2899 	cp a,#TK_CHAR 
      002649 27 03            [ 1] 2900 	jreq 0$ 
      00264B CC 16 90         [ 2] 2901 	jp syntax_error
      00264E CD 17 E0         [ 4] 2902 0$: call get_char 
      002651 A4 DF            [ 1] 2903 	and a,#0XDF 
      002653 A1 45            [ 1] 2904 	cp a,#'E
      002655 26 0C            [ 1] 2905 	jrne 1$
      002657 AE 40 00         [ 2] 2906 	ldw x,#EEPROM_BASE 
      00265A CF 00 19         [ 2] 2907 	ldw farptr+1,x 
      00265D AE 47 FF         [ 2] 2908 	ldw x,#EEPROM_END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      002660 4F               [ 1] 2909 	clr a 
      002661 20 15            [ 2] 2910 	jra 3$ 
      002663 A1 46            [ 1] 2911 1$: cp a,#'F 
      002665 27 06            [ 1] 2912 	jreq 2$
      002667 AE 15 D0         [ 2] 2913 	ldw x,#err_bad_value
      00266A CC 16 92         [ 2] 2914 	jp tb_error
      00266D                       2915 2$:
      00266D AE 35 80         [ 2] 2916 	ldw x,#app_space  
      002670 CF 00 19         [ 2] 2917 	ldw farptr+1,x 
      002673 A6 02            [ 1] 2918 	ld a,#(FLASH_END>>16)&0XFF 
      002675 AE 7F FF         [ 2] 2919 	ldw x,#FLASH_END&0xffff
      002678                       2920 3$:
      002678 6B 01            [ 1] 2921 	ld (LIMIT,sp),a 
      00267A 1F 02            [ 2] 2922 	ldw (LIMIT+1,sp),x 
                                   2923  ; operation done from RAM
                                   2924  ; copy code to RAM in tib   
      00267C CD 07 43         [ 4] 2925 	call move_erase_to_ram
      00267F                       2926 4$:	 
      00267F CD 08 C5         [ 4] 2927     call scan_block 
      002682 27 08            [ 1] 2928 	jreq 5$  ; block already erased 
      002684 A6 45            [ 1] 2929     ld a,#'E 
      002686 CD 09 45         [ 4] 2930     call putc 
      002689 CD 07 C1         [ 4] 2931 	call block_erase   
                                   2932 ; this block is clean, next  
      00268C AE 00 80         [ 2] 2933 5$:	ldw x,#BLOCK_SIZE
      00268F CD 08 B7         [ 4] 2934 	call incr_farptr
                                   2935 ; check limit, 24 bit substraction  	
      002692 7B 01            [ 1] 2936 	ld a,(LIMIT,sp)
      002694 1E 02            [ 2] 2937 	ldw x,(LIMIT+1,sp)
      002696 72 B0 00 19      [ 2] 2938 	subw x,farptr+1
      00269A C2 00 18         [ 1] 2939 	sbc a,farptr 
      00269D 22 E0            [ 1] 2940 	jrugt 4$ 
      00269F CD 14 EC         [ 4] 2941 9$: call clear_basic
      0026A2 1E 02            [ 2] 2942 	ldw x,(LIMIT+1,sp)
      0026A4 A3 47 FF         [ 2] 2943 	cpw x,#EEPROM_END
      0026A7 26 03            [ 1] 2944 	jrne 10$
      0026A9 CD 1C 40         [ 4] 2945 	call func_eefree 
      0026AC                       2946 10$:
      0026AC                       2947 	_drop VSIZE 
      0026AC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0026AE 81               [ 4] 2948 	ret 
                                   2949 	
                                   2950 
                                   2951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2952 ;  check for application signature 
                                   2953 ; output:
                                   2954 ;   Carry    0 app present 
                                   2955 ;            1 no app installed  
                                   2956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026AF                       2957 qsign: 
      0026AF CE 35 80         [ 2] 2958 	ldw x,app_sign 
      0026B2 C3 27 6F         [ 2] 2959 	cpw x,SIGNATURE ; "BC" 
      0026B5 81               [ 4] 2960 	ret 
                                   2961 
                                   2962 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



                                   2963 ;  fill write buffer 
                                   2964 ;  input:
                                   2965 ;    y  point to output buffer 
                                   2966 ;    x  point to source 
                                   2967 ;    a  bytes to write in buffer 
                                   2968 ;  output:
                                   2969 ;    y   += A 
                                   2970 ;    X   += A 
                                   2971 ;    A   0 
                                   2972 ;---------------------------------------
      0026B6                       2973 fill_write_buffer:
      0026B6 88               [ 1] 2974 	push a 
      0026B7 4D               [ 1] 2975 	tnz a 
      0026B8 27 0A            [ 1] 2976 	jreq 9$ 
      0026BA F6               [ 1] 2977 1$: ld a,(x)
      0026BB 5C               [ 1] 2978 	incw x 
      0026BC 90 F7            [ 1] 2979 	ld (y),a 
      0026BE 90 5C            [ 1] 2980 	incw y 
      0026C0 0A 01            [ 1] 2981 	dec (1,sp) 
      0026C2 26 F6            [ 1] 2982 	jrne 1$ 
      0026C4 84               [ 1] 2983 9$:	pop a 
      0026C5 81               [ 4] 2984     ret 	
                                   2985 
                                   2986 ;--------------------------------------
                                   2987 ;  fill pad buffer with zero 
                                   2988 ;  input:
                                   2989 ;	none 
                                   2990 ;  output:
                                   2991 ;    y     buffer address  
                                   2992 ;--------------------------------------
      0026C6                       2993 clear_block_buffer:
      0026C6 88               [ 1] 2994 	push a 
      0026C7 90 AE 16 B8      [ 2] 2995 	ldw y,#block_buffer 
      0026CB 90 89            [ 2] 2996 	pushw y
      0026CD A6 80            [ 1] 2997 	ld a,#BLOCK_SIZE   
      0026CF 90 7F            [ 1] 2998 1$:	clr (y)
      0026D1 90 5C            [ 1] 2999 	incw y
      0026D3 4A               [ 1] 3000 	dec a  
      0026D4 26 F9            [ 1] 3001 	jrne 1$ 	
      0026D6 90 85            [ 2] 3002 9$: popw y 
      0026D8 84               [ 1] 3003 	pop a 			
      0026D9 81               [ 4] 3004 	ret 
                                   3005 
                                   3006 
                                   3007 ;---------------------------------------
                                   3008 ; BASIC: SAVE
                                   3009 ; write application from RAM to FLASH
                                   3010 ;--------------------------------------
                           000001  3011 	XTEMP=1
                           000003  3012 	COUNT=3  ; last count bytes written 
                           000004  3013 	CNT_LO=4 ; count low byte 
                           000005  3014 	TOWRITE=5 ; how bytes left to write  
                           000006  3015 	VSIZE=6 
      0026DA                       3016 save_app:
      0026DA 89               [ 2] 3017 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      0026DB 90 89            [ 2] 3018 	pushw y 
      0026DD                       3019 	_vars VSIZE
      0026DD 52 06            [ 2]    1     sub sp,#VSIZE 
      0026DF CD 26 AF         [ 4] 3020 	call qsign 
      0026E2 26 09            [ 1] 3021 	jrne 1$
      0026E4 AE 27 71         [ 2] 3022 	ldw x,#CANT_DO 
      0026E7 CD 09 A2         [ 4] 3023 	call puts 
      0026EA CC 27 69         [ 2] 3024 	jp 9$
      0026ED                       3025 1$: 
      0026ED CE 00 1B         [ 2] 3026 	ldw x,txtbgn
      0026F0 C3 00 1D         [ 2] 3027 	cpw x,txtend 
      0026F3 25 09            [ 1] 3028 	jrult 2$ 
      0026F5 AE 27 B3         [ 2] 3029 	ldw x,#NO_APP
      0026F8 CD 09 A2         [ 4] 3030 	call puts 
      0026FB CC 27 69         [ 2] 3031 	jp 9$
      0026FE                       3032 2$: 
                                   3033 ; block programming flash
                                   3034 ; must be done from RAM
                                   3035 ; moved in tib  
      0026FE CD 07 83         [ 4] 3036 	call move_prg_to_ram
                                   3037 ; initialize farptr 
                                   3038 ; to app_sign address 
      002701 72 5F 00 18      [ 1] 3039 	clr farptr 
      002705 AE 35 80         [ 2] 3040 	ldw x,#app_sign 
      002708 CF 00 19         [ 2] 3041 	ldw farptr+1,x
                                   3042 ; initialize local variables 
      00270B CD 1D 5C         [ 4] 3043 	call prog_size
      00270E 1F 05            [ 2] 3044 	ldw (TOWRITE,sp),x
      002710 0F 03            [ 1] 3045 	clr (COUNT,sp)
                                   3046 ; first bock 
                                   3047 ; containt signature 2 bytes 
                                   3048 ; and size 	2 bytes 
                                   3049 ; use Y as pointer to block_buffer
      002712 CD 26 C6         [ 4] 3050 	call clear_block_buffer ; -- y=*block_buffer	
                                   3051 ; write signature
      002715 CE 27 6F         [ 2] 3052 	ldw x,SIGNATURE ; "BC" 
      002718 90 FF            [ 2] 3053 	ldw (y),x 
      00271A 72 A9 00 02      [ 2] 3054 	addw y,#2
      00271E 1E 05            [ 2] 3055 	ldw x,(TOWRITE,sp)
      002720 90 FF            [ 2] 3056 	ldw (y),x
      002722 72 A9 00 02      [ 2] 3057 	addw y,#2   
      002726 A6 7C            [ 1] 3058 	ld a,#(BLOCK_SIZE-4)
      002728 6B 04            [ 1] 3059 	ld (CNT_LO,sp),a 
      00272A A3 00 7C         [ 2] 3060 	cpw x,#(BLOCK_SIZE-4) 
      00272D 22 01            [ 1] 3061 	jrugt 3$
      00272F 9F               [ 1] 3062 	ld a,xl 
      002730 6B 04            [ 1] 3063 3$:	ld (CNT_LO,sp),a   
      002732 CE 00 1B         [ 2] 3064 	ldw x,txtbgn 
      002735 1F 01            [ 2] 3065 	ldw (XTEMP,sp),x 
      002737                       3066 32$: 
      002737 1E 01            [ 2] 3067 	ldw x,(XTEMP,sp)
      002739 7B 04            [ 1] 3068 	ld a,(CNT_LO,sp)
      00273B CD 26 B6         [ 4] 3069 	call fill_write_buffer 
      00273E 1F 01            [ 2] 3070 	ldw (XTEMP,sp),x 
      002740 AE 16 B8         [ 2] 3071 	ldw x,#block_buffer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      002743 CD 07 9D         [ 4] 3072 	call write_buffer
      002746 AE 00 80         [ 2] 3073 	ldw x,#BLOCK_SIZE 
      002749 CD 08 B7         [ 4] 3074 	call incr_farptr  
                                   3075 ; following blocks 
      00274C 1E 01            [ 2] 3076 	ldw x,(XTEMP,sp)
      00274E C3 00 1D         [ 2] 3077 	cpw x,txtend 
      002751 24 16            [ 1] 3078 	jruge 9$ 
      002753 1E 05            [ 2] 3079 	ldw x,(TOWRITE,sp)
      002755 72 F0 03         [ 2] 3080 	subw x,(COUNT,sp)
      002758 1F 05            [ 2] 3081 	ldw (TOWRITE,sp),x 
      00275A A6 80            [ 1] 3082 	ld a,#BLOCK_SIZE 
      00275C A3 00 80         [ 2] 3083 	cpw x,#BLOCK_SIZE 
      00275F 24 01            [ 1] 3084 	jruge 4$ 
      002761 9F               [ 1] 3085 	ld a,xl 
      002762 6B 04            [ 1] 3086 4$:	ld (CNT_LO,sp),a 
      002764 CD 26 C6         [ 4] 3087 	call clear_block_buffer 
      002767 20 CE            [ 2] 3088 	jra 32$ 
      002769                       3089 9$:	_drop VSIZE 
      002769 5B 06            [ 2]    1     addw sp,#VSIZE 
      00276B 90 85            [ 2] 3090     popw y 
      00276D 85               [ 2] 3091 	popw x 
      00276E 81               [ 4] 3092 	ret 
                                   3093 
                                   3094 
      00276F 42 43                 3095 SIGNATURE: .ascii "BC"
      002771 43 61 6E 27 74 20 66  3096 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0027B3 4E 6F 20 61 70 70 6C  3097 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3098 
                                   3099 ;---------------------
                                   3100 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3101 ; write 1 or more byte to FLASH or EEPROM
                                   3102 ; starting at address  
                                   3103 ; input:
                                   3104 ;   expr1  	is address 
                                   3105 ;   expr2,...,exprn   are bytes to write
                                   3106 ; output:
                                   3107 ;   none 
                                   3108 ;---------------------
      0027C9                       3109 write:
      0027C9 CD 1A 88         [ 4] 3110 	call expression
      0027CC A1 84            [ 1] 3111 	cp a,#TK_INTGR 
      0027CE 27 03            [ 1] 3112 	jreq 0$
      0027D0 CC 16 90         [ 2] 3113 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0027D3                       3114 0$: _xpop 
      0027D3 90 F6            [ 1]    1     ld a,(y)
      0027D5 93               [ 1]    2     ldw x,y 
      0027D6 EE 01            [ 2]    3     ldw x,(1,x)
      0027D8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027DC C7 00 18         [ 1] 3115 	ld farptr,a 
      0027DF CF 00 19         [ 2] 3116 	ldw ptr16,x 
      0027E2                       3117 1$:	
      0027E2 CD 17 91         [ 4] 3118 	call next_token 
      0027E5 A1 08            [ 1] 3119 	cp a,#TK_COMMA 
      0027E7 27 02            [ 1] 3120 	jreq 2$ 
      0027E9 20 20            [ 2] 3121 	jra 9$ ; no more data 
      0027EB CD 1A 88         [ 4] 3122 2$:	call expression
      0027EE A1 84            [ 1] 3123 	cp a,#TK_INTGR
      0027F0 27 03            [ 1] 3124 	jreq 3$
      0027F2 CC 16 90         [ 2] 3125 	jp syntax_error
      0027F5                       3126 3$:	_xpop 
      0027F5 90 F6            [ 1]    1     ld a,(y)
      0027F7 93               [ 1]    2     ldw x,y 
      0027F8 EE 01            [ 2]    3     ldw x,(1,x)
      0027FA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027FE 9F               [ 1] 3127 	ld a,xl 
      0027FF 5F               [ 1] 3128 	clrw x 
      002800 CD 07 E7         [ 4] 3129 	call write_byte
      002803 AE 00 01         [ 2] 3130 	ldw x,#1 
      002806 CD 08 B7         [ 4] 3131 	call incr_farptr 
      002809 20 D7            [ 2] 3132 	jra 1$ 
      00280B                       3133 9$:
      00280B 81               [ 4] 3134 	ret 
                                   3135 
                                   3136 
                                   3137 ;---------------------
                                   3138 ;BASIC: CHAR(expr)
                                   3139 ; évaluate expression 
                                   3140 ; and take the 7 least 
                                   3141 ; bits as ASCII character
                                   3142 ; output: 
                                   3143 ; 	A char 
                                   3144 ;---------------------
      00280C                       3145 char:
      00280C CD 19 4C         [ 4] 3146 	call func_args 
      00280F A1 01            [ 1] 3147 	cp a,#1
      002811 27 03            [ 1] 3148 	jreq 1$
      002813 CC 16 90         [ 2] 3149 	jp syntax_error
      002816                       3150 1$:	_xpop
      002816 90 F6            [ 1]    1     ld a,(y)
      002818 93               [ 1]    2     ldw x,y 
      002819 EE 01            [ 2]    3     ldw x,(1,x)
      00281B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00281F 9F               [ 1] 3151 	ld a,xl
      002820 A4 7F            [ 1] 3152 	and a,#0x7f 
      002822 81               [ 4] 3153 	ret
                                   3154 
                                   3155 ;---------------------
                                   3156 ; BASIC: ASC(string|char|TK_CFUNC)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   3157 ; extract first character 
                                   3158 ; of string argument 
                                   3159 ; output:
                                   3160 ;    A:X    int24 
                                   3161 ;---------------------
      002823                       3162 ascii:
      002823 A6 06            [ 1] 3163 	ld a,#TK_LPAREN
      002825 CD 19 3F         [ 4] 3164 	call expect 
      002828 CD 17 91         [ 4] 3165 	call next_token 
      00282B A1 02            [ 1] 3166 	cp a,#TK_QSTR 
      00282D 27 0E            [ 1] 3167 	jreq 1$
      00282F A1 04            [ 1] 3168 	cp a,#TK_CHAR 
      002831 27 12            [ 1] 3169 	jreq 2$ 
      002833 A1 82            [ 1] 3170 	cp a,#TK_CFUNC 
      002835 27 03            [ 1] 3171 	jreq 0$
      002837 CC 16 90         [ 2] 3172 	jp syntax_error
      00283A                       3173 0$: ; cfunc 
      00283A FD               [ 4] 3174 	call (x)
      00283B 20 0B            [ 2] 3175 	jra 3$
      00283D                       3176 1$: ; quoted string 
      00283D F6               [ 1] 3177 	ld a,(x)
      00283E 88               [ 1] 3178 	push a  
      00283F CD 17 B7         [ 4] 3179 	call skip_string
      002842 84               [ 1] 3180 	pop a  	
      002843 20 03            [ 2] 3181 	jra 3$ 
      002845                       3182 2$: ; character 
      002845 CD 17 E0         [ 4] 3183 	call get_char 
      002848 5F               [ 1] 3184 3$:	clrw x 
      002849 02               [ 1] 3185 	rlwa x   
      00284A                       3186 4$:	_xpush  
      00284A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00284E 90 F7            [ 1]    2     ld (y),a 
      002850 90 EF 01         [ 2]    3     ldw (1,y),x 
      002853 A6 07            [ 1] 3187 	ld a,#TK_RPAREN 
      002855 CD 19 3F         [ 4] 3188 	call expect
      002858                       3189 9$:	
      002858                       3190 	_xpop  
      002858 90 F6            [ 1]    1     ld a,(y)
      00285A 93               [ 1]    2     ldw x,y 
      00285B EE 01            [ 2]    3     ldw x,(1,x)
      00285D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002861 81               [ 4] 3191 	ret 
                                   3192 
                                   3193 ;---------------------
                                   3194 ;BASIC: KEY
                                   3195 ; wait for a character 
                                   3196 ; received from STDIN 
                                   3197 ; input:
                                   3198 ;	none 
                                   3199 ; output:
                                   3200 ;	a	 character 
                                   3201 ;---------------------
      002862                       3202 key:
      002862 CD 09 55         [ 4] 3203 	call getc 
      002865 81               [ 4] 3204 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3205 
                                   3206 ;----------------------
                                   3207 ; BASIC: QKEY
                                   3208 ; Return true if there 
                                   3209 ; is a character in 
                                   3210 ; waiting in STDIN 
                                   3211 ; input:
                                   3212 ;  none 
                                   3213 ; output:
                                   3214 ;   A     0|-1
                                   3215 ;-----------------------
      002866                       3216 qkey:: 
      002866 5F               [ 1] 3217 	clrw x 
      002867 C6 00 2E         [ 1] 3218 	ld a,rx1_head
      00286A C0 00 2F         [ 1] 3219 	sub a,rx1_tail 
      00286D 27 03            [ 1] 3220 	jreq 9$ 
      00286F 53               [ 2] 3221 	cplw x
      002870 A6 FF            [ 1] 3222 	ld a,#255    
      002872                       3223 9$: 
      002872 81               [ 4] 3224 	ret 
                                   3225 
                                   3226 ;---------------------
                                   3227 ; BASIC: GPIO(port,reg)
                                   3228 ; return gpio register address 
                                   3229 ; expr {PORTA..PORTI}
                                   3230 ; input:
                                   3231 ;   none 
                                   3232 ; output:
                                   3233 ;   A:X 	gpio register address
                                   3234 ;----------------------------
                                   3235 ;	N=PORT
                                   3236 ;	T=REG 
      002873                       3237 gpio:
      002873 CD 19 4C         [ 4] 3238 	call func_args 
      002876 A1 02            [ 1] 3239 	cp a,#2
      002878 27 03            [ 1] 3240 	jreq 1$
      00287A CC 16 90         [ 2] 3241 	jp syntax_error  
      00287D                       3242 1$:	_at_next 
      00287D 90 E6 03         [ 1]    1     ld a,(3,y)
      002880 93               [ 1]    2     ldw x,y 
      002881 EE 04            [ 2]    3     ldw x,(4,x)
      002883 A3 50 00         [ 2] 3243 	cpw x,#PA_BASE 
      002886 2B 16            [ 1] 3244 	jrmi bad_port
      002888 A3 50 29         [ 2] 3245 	cpw x,#PI_BASE+1 
      00288B 2A 11            [ 1] 3246 	jrpl bad_port
      00288D 89               [ 2] 3247 	pushw x 
      00288E                       3248 	_xpop
      00288E 90 F6            [ 1]    1     ld a,(y)
      002890 93               [ 1]    2     ldw x,y 
      002891 EE 01            [ 2]    3     ldw x,(1,x)
      002893 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002897 72 FB 01         [ 2] 3249 	addw x,(1,sp)
      00289A                       3250 	_drop 2 
      00289A 5B 02            [ 2]    1     addw sp,#2 
      00289C 4F               [ 1] 3251 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      00289D 81               [ 4] 3252 	ret
      00289E                       3253 bad_port:
      00289E A6 0A            [ 1] 3254 	ld a,#ERR_BAD_VALUE
      0028A0 CC 16 92         [ 2] 3255 	jp tb_error
                                   3256 
                                   3257 
                                   3258 ;-------------------------
                                   3259 ; BASIC: UFLASH 
                                   3260 ; return free flash address
                                   3261 ; input:
                                   3262 ;  none 
                                   3263 ; output:
                                   3264 ;	A		TK_INTGR
                                   3265 ;   xstack	free address 
                                   3266 ;---------------------------
      0028A3                       3267 uflash:
      0028A3 CE 35 80         [ 2] 3268 	ldw x,app_sign
      0028A6 A3 10 93         [ 2] 3269 	cpw x,#4243 ; signature "BC" 
      0028A9 27 08            [ 1] 3270 	jreq 1$
      0028AB CE 35 82         [ 2] 3271 	ldw x,app_size 
      0028AE 1C 35 84         [ 2] 3272 	addw x,#app
      0028B1 20 03            [ 2] 3273 	jra 2$
      0028B3 AE 35 80         [ 2] 3274 1$:	ldw x,#app_space 
      0028B6 4F               [ 1] 3275 2$:	clr a 
      0028B7 81               [ 4] 3276 	ret 
                                   3277 
                                   3278 
                                   3279 ;---------------------
                                   3280 ; BASIC: USR(addr[,arg])
                                   3281 ; execute a function written 
                                   3282 ; in binary code.
                                   3283 ; binary fonction should 
                                   3284 ; return token attribute in A 
                                   3285 ; and value in YL:X. 
                                   3286 ; input:
                                   3287 ;   addr	routine address 
                                   3288 ;   arg 	is an optional argument 
                                   3289 ; output:
                                   3290 ;   A 		token attribute 
                                   3291 ;   xstack  returned value 
                                   3292 ;---------------------
      0028B8                       3293 usr:
      0028B8 89               [ 2] 3294 	pushw x 
      0028B9 90 89            [ 2] 3295 	pushw y 	
      0028BB CD 19 4C         [ 4] 3296 	call func_args 
      0028BE A1 01            [ 1] 3297 	cp a,#1 
      0028C0 27 07            [ 1] 3298 	jreq 1$
      0028C2 A1 02            [ 1] 3299 	cp a,#2
      0028C4 27 03            [ 1] 3300 	jreq 1$  
      0028C6 CC 16 90         [ 2] 3301 	jp syntax_error 
      0028C9 88               [ 1] 3302 1$: push a 
      0028CA                       3303 	_xpop 
      0028CA 90 F6            [ 1]    1     ld a,(y)
      0028CC 93               [ 1]    2     ldw x,y 
      0028CD EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0028CF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028D3 90 93            [ 1] 3304 	ldw y,x  ; arg|addr 
      0028D5 84               [ 1] 3305     pop a 
      0028D6 A1 01            [ 1] 3306 	cp a,#1 
      0028D8 27 0A            [ 1] 3307 	jreq 3$
      0028DA                       3308 	_xpop  ; x=code addr  
      0028DA 90 F6            [ 1]    1     ld a,(y)
      0028DC 93               [ 1]    2     ldw x,y 
      0028DD EE 01            [ 2]    3     ldw x,(1,x)
      0028DF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028E3 51               [ 1] 3309 	exgw x,y ; y=code addr, x=arg 
      0028E4 90 FD            [ 4] 3310 3$: call (y)
      0028E6 88               [ 1] 3311 	push a 
      0028E7 90 9F            [ 1] 3312 	ld a,yl  
      0028E9                       3313 	_xpush 
      0028E9 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0028ED 90 F7            [ 1]    2     ld (y),a 
      0028EF 90 EF 01         [ 2]    3     ldw (1,y),x 
      0028F2 84               [ 1] 3314 	pop a 
      0028F3 90 85            [ 2] 3315 	popw y 
      0028F5 85               [ 2] 3316 	popw x 
      0028F6 81               [ 4] 3317 	ret 
                                   3318 
                                   3319 
                                   3320 ;------------------------------
                                   3321 ; BASIC: BYE 
                                   3322 ; halt mcu in its lowest power mode 
                                   3323 ; wait for reset or external interrupt
                                   3324 ; do a cold start on wakeup.
                                   3325 ;------------------------------
      0028F7                       3326 bye:
      0028F7 72 0D 52 30 FB   [ 2] 3327 	btjf UART1_SR,#UART_SR_TC,.
      0028FC 8E               [10] 3328 	halt
      0028FD CC 00 C3         [ 2] 3329 	jp cold_start  
                                   3330 
                                   3331 ;----------------------------------
                                   3332 ; BASIC: SLEEP 
                                   3333 ; halt mcu until reset or external
                                   3334 ; interrupt.
                                   3335 ; Resume progam after SLEEP command
                                   3336 ;----------------------------------
      002900                       3337 sleep:
      002900 72 0D 52 30 FB   [ 2] 3338 	btjf UART1_SR,#UART_SR_TC,.
      002905 72 16 00 22      [ 1] 3339 	bset flags,#FSLEEP
      002909 8E               [10] 3340 	halt 
      00290A 81               [ 4] 3341 	ret 
                                   3342 
                                   3343 ;-------------------------------
                                   3344 ; BASIC: PAUSE expr 
                                   3345 ; suspend execution for n msec.
                                   3346 ; input:
                                   3347 ;	none
                                   3348 ; output:
                                   3349 ;	none 
                                   3350 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      00290B                       3351 pause:
      00290B CD 1A 88         [ 4] 3352 	call expression
      00290E A1 84            [ 1] 3353 	cp a,#TK_INTGR
      002910 27 03            [ 1] 3354 	jreq 1$ 
      002912 CC 16 90         [ 2] 3355 	jp syntax_error
      002915                       3356 1$: _xpop 
      002915 90 F6            [ 1]    1     ld a,(y)
      002917 93               [ 1]    2     ldw x,y 
      002918 EE 01            [ 2]    3     ldw x,(1,x)
      00291A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00291E                       3357 pause02:
      00291E CF 00 12         [ 2] 3358 	ldw timer,x 
      002921 CE 00 12         [ 2] 3359 1$: ldw x,timer 
      002924 5D               [ 2] 3360 	tnzw x 
      002925 27 03            [ 1] 3361 	jreq 2$
      002927 8F               [10] 3362 	wfi 
      002928 26 F7            [ 1] 3363 	jrne 1$
      00292A 4F               [ 1] 3364 2$:	clr a 
      00292B 81               [ 4] 3365 	ret 
                                   3366 
                                   3367 ;------------------------------
                                   3368 ; BASIC: AWU expr
                                   3369 ; halt mcu for 'expr' milliseconds
                                   3370 ; use Auto wakeup peripheral
                                   3371 ; all oscillators stopped except LSI
                                   3372 ; range: 1ms - 511ms
                                   3373 ; input:
                                   3374 ;  none
                                   3375 ; output:
                                   3376 ;  none:
                                   3377 ;------------------------------
      00292C                       3378 awu:
      00292C CD 1A 88         [ 4] 3379   call expression
      00292F A1 84            [ 1] 3380   cp a,#TK_INTGR
      002931 27 03            [ 1] 3381   jreq 1$
      002933 CC 16 90         [ 2] 3382   jp syntax_error
      002936                       3383 1$: _xpop 
      002936 90 F6            [ 1]    1     ld a,(y)
      002938 93               [ 1]    2     ldw x,y 
      002939 EE 01            [ 2]    3     ldw x,(1,x)
      00293B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00293F                       3384 awu02:
      00293F A3 14 00         [ 2] 3385   cpw x,#5120
      002942 2B 0C            [ 1] 3386   jrmi 1$ 
      002944 35 0F 50 F2      [ 1] 3387   mov AWU_TBR,#15 
      002948 A6 1E            [ 1] 3388   ld a,#30
      00294A 62               [ 2] 3389   div x,a
      00294B A6 10            [ 1] 3390   ld a,#16
      00294D 62               [ 2] 3391   div x,a 
      00294E 20 1E            [ 2] 3392   jra 4$
      002950                       3393 1$: 
      002950 A3 08 00         [ 2] 3394   cpw x,#2048
      002953 2B 09            [ 1] 3395   jrmi 2$ 
      002955 35 0E 50 F2      [ 1] 3396   mov AWU_TBR,#14
      002959 A6 50            [ 1] 3397   ld a,#80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      00295B 62               [ 2] 3398   div x,a 
      00295C 20 10            [ 2] 3399   jra 4$   
      00295E                       3400 2$:
      00295E 35 07 50 F2      [ 1] 3401   mov AWU_TBR,#7
      002962                       3402 3$:  
                                   3403 ; while X > 64  divide by 2 and increment AWU_TBR 
      002962 A3 00 40         [ 2] 3404   cpw x,#64 
      002965 23 07            [ 2] 3405   jrule 4$ 
      002967 72 5C 50 F2      [ 1] 3406   inc AWU_TBR 
      00296B 54               [ 2] 3407   srlw x 
      00296C 20 F4            [ 2] 3408   jra 3$ 
      00296E                       3409 4$:
      00296E 9F               [ 1] 3410   ld a, xl
      00296F 4A               [ 1] 3411   dec a 
      002970 27 01            [ 1] 3412   jreq 5$
      002972 4A               [ 1] 3413   dec a 	
      002973                       3414 5$: 
      002973 A4 3E            [ 1] 3415   and a,#0x3e 
      002975 C7 50 F1         [ 1] 3416   ld AWU_APR,a 
      002978 72 18 50 F0      [ 1] 3417   bset AWU_CSR,#AWU_CSR_AWUEN
      00297C 8E               [10] 3418   halt 
                                   3419 
      00297D 81               [ 4] 3420   ret 
                                   3421 
                                   3422 ;------------------------------
                                   3423 ; BASIC: TICKS
                                   3424 ; return msec ticks counter value 
                                   3425 ; input:
                                   3426 ; 	none 
                                   3427 ; output:
                                   3428 ;	X 		TK_INTGR
                                   3429 ;-------------------------------
      00297E                       3430 get_ticks:
      00297E C6 00 0F         [ 1] 3431 	ld a,ticks 
      002981 CE 00 10         [ 2] 3432 	ldw x,ticks+1 
      002984 81               [ 4] 3433 	ret 
                                   3434 
                                   3435 ;------------------------------
                                   3436 ; BASIC: ABS(expr)
                                   3437 ; return absolute value of expr.
                                   3438 ; input:
                                   3439 ;   none
                                   3440 ; output:
                                   3441 ;   xstack    positive int24 
                                   3442 ;-------------------------------
      002985                       3443 abs:
      002985 CD 19 4C         [ 4] 3444 	call func_args 
      002988 A1 01            [ 1] 3445 	cp a,#1 
      00298A 27 03            [ 1] 3446 	jreq 0$ 
      00298C CC 16 90         [ 2] 3447 	jp syntax_error
      00298F                       3448 0$:  
      00298F CD 01 E0         [ 4] 3449 	call abs24 
      002992                       3450 	_xpop 
      002992 90 F6            [ 1]    1     ld a,(y)
      002994 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002995 EE 01            [ 2]    3     ldw x,(1,x)
      002997 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00299B 81               [ 4] 3451 	ret 
                                   3452 
                                   3453 ;------------------------------
                                   3454 ; BASIC: AND(expr1,expr2)
                                   3455 ; Apply bit AND relation between
                                   3456 ; the 2 arguments, i.e expr1 & expr2 
                                   3457 ; output:
                                   3458 ; 	A 		TK_INTGR
                                   3459 ;   X 		result 
                                   3460 ;------------------------------
      00299C                       3461 bit_and: ; i1 i2 -- i1 & i2 
      00299C CD 19 4C         [ 4] 3462 	call func_args 
      00299F A1 02            [ 1] 3463 	cp a,#2
      0029A1 27 03            [ 1] 3464 	jreq 1$
      0029A3 CC 16 90         [ 2] 3465 	jp syntax_error 
      0029A6                       3466 1$:	_xpop 
      0029A6 90 F6            [ 1]    1     ld a,(y)
      0029A8 93               [ 1]    2     ldw x,y 
      0029A9 EE 01            [ 2]    3     ldw x,(1,x)
      0029AB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029AF 89               [ 2] 3467     pushw x 
      0029B0 88               [ 1] 3468 	push  a 
      0029B1                       3469 	_at_top 
      0029B1 90 F6            [ 1]    1     ld a,(y)
      0029B3 93               [ 1]    2     ldw x,y 
      0029B4 EE 01            [ 2]    3     ldw x,(1,x)
      0029B6 14 01            [ 1] 3470 	and a,(1,sp)
      0029B8 02               [ 1] 3471 	rlwa x 
      0029B9 14 02            [ 1] 3472 	and a,(2,sp)
      0029BB 02               [ 1] 3473 	rlwa x 
      0029BC 14 03            [ 1] 3474 	and a,(3,sp)
      0029BE 02               [ 1] 3475 	rlwa x 
      0029BF                       3476 	_drop 3 
      0029BF 5B 03            [ 2]    1     addw sp,#3 
      0029C1                       3477 	_store_top 
      0029C1 90 F7            [ 1]    1     ld (y),a 
      0029C3 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029C6 A6 84            [ 1] 3478 	ld a,#TK_INTGR
      0029C8 81               [ 4] 3479 	ret
                                   3480 
                                   3481 ;------------------------------
                                   3482 ; BASIC: OR(expr1,expr2)
                                   3483 ; Apply bit OR relation between
                                   3484 ; the 2 arguments, i.e expr1 | expr2 
                                   3485 ; output:
                                   3486 ; 	A 		TK_INTGR
                                   3487 ;   X 		result 
                                   3488 ;------------------------------
      0029C9                       3489 bit_or:
      0029C9 CD 19 4C         [ 4] 3490 	call func_args 
      0029CC A1 02            [ 1] 3491 	cp a,#2
      0029CE 27 03            [ 1] 3492 	jreq 1$
      0029D0 CC 16 90         [ 2] 3493 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      0029D3                       3494 1$:	_xpop 
      0029D3 90 F6            [ 1]    1     ld a,(y)
      0029D5 93               [ 1]    2     ldw x,y 
      0029D6 EE 01            [ 2]    3     ldw x,(1,x)
      0029D8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029DC 89               [ 2] 3495     pushw x 
      0029DD 88               [ 1] 3496 	push  a 
      0029DE                       3497 	_at_top 
      0029DE 90 F6            [ 1]    1     ld a,(y)
      0029E0 93               [ 1]    2     ldw x,y 
      0029E1 EE 01            [ 2]    3     ldw x,(1,x)
      0029E3 1A 01            [ 1] 3498 	or a,(1,sp)
      0029E5 90 97            [ 1] 3499 	ld yl,a 
      0029E7 9E               [ 1] 3500 	ld a,xh 
      0029E8 1A 02            [ 1] 3501 	or a,(2,sp)
      0029EA 95               [ 1] 3502 	ld xh,a 
      0029EB 9F               [ 1] 3503 	ld a,xl 
      0029EC 1A 03            [ 1] 3504 	or a,(3,sp)
      0029EE 97               [ 1] 3505 	ld xl,a 
      0029EF 90 9F            [ 1] 3506 	ld a,yl 
      0029F1                       3507 	_drop 3 
      0029F1 5B 03            [ 2]    1     addw sp,#3 
      0029F3                       3508 	_store_top 
      0029F3 90 F7            [ 1]    1     ld (y),a 
      0029F5 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029F8 A6 84            [ 1] 3509 	ld a,#TK_INTGR
      0029FA 81               [ 4] 3510 	ret
                                   3511 
                                   3512 ;------------------------------
                                   3513 ; BASIC: XOR(expr1,expr2)
                                   3514 ; Apply bit XOR relation between
                                   3515 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3516 ; output:
                                   3517 ; 	A 		TK_INTGR
                                   3518 ;   X 		result 
                                   3519 ;------------------------------
      0029FB                       3520 bit_xor:
      0029FB CD 19 4C         [ 4] 3521 	call func_args 
      0029FE A1 02            [ 1] 3522 	cp a,#2
      002A00 27 03            [ 1] 3523 	jreq 1$
      002A02 CC 16 90         [ 2] 3524 	jp syntax_error 
      002A05                       3525 1$:	_xpop 
      002A05 90 F6            [ 1]    1     ld a,(y)
      002A07 93               [ 1]    2     ldw x,y 
      002A08 EE 01            [ 2]    3     ldw x,(1,x)
      002A0A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A0E 89               [ 2] 3526     pushw x 
      002A0F 88               [ 1] 3527 	push  a 
      002A10                       3528 	_at_top 
      002A10 90 F6            [ 1]    1     ld a,(y)
      002A12 93               [ 1]    2     ldw x,y 
      002A13 EE 01            [ 2]    3     ldw x,(1,x)
      002A15 18 01            [ 1] 3529 	xor a,(1,sp)
      002A17 90 97            [ 1] 3530 	ld yl,a 
      002A19 9E               [ 1] 3531 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002A1A 18 02            [ 1] 3532 	xor a,(2,sp)
      002A1C 95               [ 1] 3533 	ld xh,a 
      002A1D 9F               [ 1] 3534 	ld a,xl 
      002A1E 18 03            [ 1] 3535 	xor a,(3,sp)
      002A20 97               [ 1] 3536 	ld xl,a 
      002A21 90 9F            [ 1] 3537 	ld a,yl 
      002A23                       3538 	_drop 3 
      002A23 5B 03            [ 2]    1     addw sp,#3 
      002A25                       3539 	_store_top 
      002A25 90 F7            [ 1]    1     ld (y),a 
      002A27 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A2A A6 84            [ 1] 3540 	ld a,#TK_INTGR
      002A2C 81               [ 4] 3541 	ret
                                   3542 
                                   3543 ;------------------------------
                                   3544 ; BASIC: LSHIFT(expr1,expr2)
                                   3545 ; logical shift left expr1 by 
                                   3546 ; expr2 bits 
                                   3547 ; output:
                                   3548 ; 	A 		TK_INTGR
                                   3549 ;   X 		result 
                                   3550 ;------------------------------
      002A2D                       3551 lshift:
      002A2D CD 19 4C         [ 4] 3552 	call func_args
      002A30 A1 02            [ 1] 3553 	cp a,#2 
      002A32 27 03            [ 1] 3554 	jreq 1$
      002A34 CC 16 90         [ 2] 3555 	jp syntax_error
      002A37                       3556 1$: _xpop 
      002A37 90 F6            [ 1]    1     ld a,(y)
      002A39 93               [ 1]    2     ldw x,y 
      002A3A EE 01            [ 2]    3     ldw x,(1,x)
      002A3C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A40 90 93            [ 1] 3557     ldw y,x    
      002A42                       3558 	_at_top  ; T@ 
      002A42 90 F6            [ 1]    1     ld a,(y)
      002A44 93               [ 1]    2     ldw x,y 
      002A45 EE 01            [ 2]    3     ldw x,(1,x)
      002A47 90 5D            [ 2] 3559 	tnzw y 
      002A49 27 07            [ 1] 3560 	jreq 4$
      002A4B 98               [ 1] 3561 2$:	rcf 
      002A4C 59               [ 2] 3562 	rlcw x 
      002A4D 49               [ 1] 3563 	rlc a 
      002A4E 90 5A            [ 2] 3564 	decw y 
      002A50 26 F9            [ 1] 3565 	jrne 2$
      002A52                       3566 4$: _store_top  ; T! 
      002A52 90 F7            [ 1]    1     ld (y),a 
      002A54 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A57 A6 84            [ 1] 3567 	ld a,#TK_INTGR
      002A59 81               [ 4] 3568 	ret
                                   3569 
                                   3570 ;------------------------------
                                   3571 ; BASIC: RSHIFT(expr1,expr2)
                                   3572 ; logical shift right expr1 by 
                                   3573 ; expr2 bits.
                                   3574 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3575 ; 	A 		TK_INTGR
                                   3576 ;   X 		result 
                                   3577 ;------------------------------
      002A5A                       3578 rshift:
      002A5A CD 19 4C         [ 4] 3579 	call func_args
      002A5D A1 02            [ 1] 3580 	cp a,#2 
      002A5F 27 03            [ 1] 3581 	jreq 1$
      002A61 CC 16 90         [ 2] 3582 	jp syntax_error
      002A64                       3583 1$: _xpop 
      002A64 90 F6            [ 1]    1     ld a,(y)
      002A66 93               [ 1]    2     ldw x,y 
      002A67 EE 01            [ 2]    3     ldw x,(1,x)
      002A69 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A6D 90 93            [ 1] 3584     ldw y,x   
      002A6F                       3585 	_at_top  ; T@  
      002A6F 90 F6            [ 1]    1     ld a,(y)
      002A71 93               [ 1]    2     ldw x,y 
      002A72 EE 01            [ 2]    3     ldw x,(1,x)
      002A74 90 5D            [ 2] 3586 	tnzw y 
      002A76 27 07            [ 1] 3587 	jreq 4$
      002A78 98               [ 1] 3588 2$:	rcf 
      002A79 56               [ 2] 3589 	rrcw x
      002A7A 46               [ 1] 3590 	rrc a  
      002A7B 90 5A            [ 2] 3591 	decw y 
      002A7D 26 F9            [ 1] 3592 	jrne 2$
      002A7F                       3593 4$: _store_top  ; T! 
      002A7F 90 F7            [ 1]    1     ld (y),a 
      002A81 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A84 A6 84            [ 1] 3594 	ld a,#TK_INTGR
      002A86 81               [ 4] 3595 	ret
                                   3596 
                                   3597 ;--------------------------
                                   3598 ; BASIC: FCPU integer
                                   3599 ; set CPU frequency 
                                   3600 ;-------------------------- 
                                   3601 
      002A87                       3602 fcpu:
      002A87 A6 84            [ 1] 3603 	ld a,#TK_INTGR
      002A89 CD 19 3F         [ 4] 3604 	call expect 
      002A8C CD 17 D0         [ 4] 3605 	call get_int24 
      002A8F 9F               [ 1] 3606 	ld a,xl 
      002A90 A4 07            [ 1] 3607 	and a,#7 
      002A92 C7 50 C6         [ 1] 3608 	ld CLK_CKDIVR,a 
      002A95 81               [ 4] 3609 	ret 
                                   3610 
                                   3611 ;------------------------------
                                   3612 ; BASIC: PMODE pin#, mode 
                                   3613 ; Arduino pin. 
                                   3614 ; define pin as input or output
                                   3615 ; pin#: {0..15}
                                   3616 ; mode: INPUT|OUTPUT  
                                   3617 ;------------------------------
                           000001  3618 	PINNO=1
                           000001  3619 	VSIZE=1
      002A96                       3620 pin_mode:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002A96                       3621 	_vars VSIZE 
      002A96 52 01            [ 2]    1     sub sp,#VSIZE 
      002A98 CD 19 51         [ 4] 3622 	call arg_list 
      002A9B A1 02            [ 1] 3623 	cp a,#2 
      002A9D 27 03            [ 1] 3624 	jreq 1$
      002A9F CC 16 90         [ 2] 3625 	jp syntax_error 
      002AA2                       3626 1$: _xpop 
      002AA2 90 F6            [ 1]    1     ld a,(y)
      002AA4 93               [ 1]    2     ldw x,y 
      002AA5 EE 01            [ 2]    3     ldw x,(1,x)
      002AA7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AAB 90 93            [ 1] 3627 	ldw y,x ; mode 
      002AAD                       3628 	_xpop ; Dx pin 
      002AAD 90 F6            [ 1]    1     ld a,(y)
      002AAF 93               [ 1]    2     ldw x,y 
      002AB0 EE 01            [ 2]    3     ldw x,(1,x)
      002AB2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AB6 CD 2A F3         [ 4] 3629 	call select_pin 
      002AB9 6B 01            [ 1] 3630 	ld (PINNO,sp),a  
      002ABB A6 01            [ 1] 3631 	ld a,#1 
      002ABD 0D 01            [ 1] 3632 	tnz (PINNO,sp)
      002ABF 27 0D            [ 1] 3633 	jreq 4$
      002AC1 48               [ 1] 3634 2$:	sll a 
      002AC2 0A 01            [ 1] 3635 	dec (PINNO,sp)
      002AC4 26 FB            [ 1] 3636 	jrne 2$ 
      002AC6 6B 01            [ 1] 3637 	ld (PINNO,sp),a
      002AC8 7B 01            [ 1] 3638 	ld a,(PINNO,sp)
      002ACA EA 03            [ 1] 3639 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002ACC E7 03            [ 1] 3640 	ld (GPIO_CR1,x),a 
      002ACE 90 A3 00 01      [ 2] 3641 4$:	cpw y,#OUTP 
      002AD2 27 10            [ 1] 3642 	jreq 6$
                                   3643 ; input mode
                                   3644 ; disable external interrupt 
      002AD4 7B 01            [ 1] 3645 	ld a,(PINNO,sp)
      002AD6 43               [ 1] 3646 	cpl a 
      002AD7 E4 04            [ 1] 3647 	and a,(GPIO_CR2,x)
      002AD9 E7 04            [ 1] 3648 	ld (GPIO_CR2,x),a 
                                   3649 ;clear bit in DDR for input mode 
      002ADB 7B 01            [ 1] 3650 	ld a,(PINNO,sp)
      002ADD 43               [ 1] 3651 	cpl a 
      002ADE E4 02            [ 1] 3652 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002AE0 E7 02            [ 1] 3653 	ld (GPIO_DDR,x),a 
      002AE2 20 0C            [ 2] 3654 	jra 9$
      002AE4                       3655 6$: ;output mode  
      002AE4 7B 01            [ 1] 3656 	ld a,(PINNO,sp)
      002AE6 EA 02            [ 1] 3657 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002AE8 E7 02            [ 1] 3658 	ld (GPIO_DDR,x),a 
      002AEA 7B 01            [ 1] 3659 	ld a,(PINNO,sp)
      002AEC EA 04            [ 1] 3660 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002AEE E7 04            [ 1] 3661 	ld (GPIO_CR2,x),a 
      002AF0                       3662 9$:	
      002AF0                       3663 	_drop VSIZE 
      002AF0 5B 01            [ 2]    1     addw sp,#VSIZE 
      002AF2 81               [ 4] 3664 	ret
                                   3665 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                   3666 ;------------------------
                                   3667 ; select Arduino pin 
                                   3668 ; input:
                                   3669 ;   X 	 {0..15} Arduino Dx 
                                   3670 ; output:
                                   3671 ;   A     stm8s208 pin 
                                   3672 ;   X     base address s208 GPIO port 
                                   3673 ;---------------------------
      002AF3                       3674 select_pin:
      002AF3 58               [ 2] 3675 	sllw x 
      002AF4 1C 2B 03         [ 2] 3676 	addw x,#arduino_to_8s208 
      002AF7 FE               [ 2] 3677 	ldw x,(x)
      002AF8 9F               [ 1] 3678 	ld a,xl 
      002AF9 88               [ 1] 3679 	push a 
      002AFA 5E               [ 1] 3680 	swapw x 
      002AFB A6 05            [ 1] 3681 	ld a,#5 
      002AFD 42               [ 4] 3682 	mul x,a 
      002AFE 1C 50 00         [ 2] 3683 	addw x,#GPIO_BASE 
      002B01 84               [ 1] 3684 	pop a 
      002B02 81               [ 4] 3685 	ret 
                                   3686 ; translation from Arduino D0..D15 to stm8s208rb 
      002B03                       3687 arduino_to_8s208:
      002B03 03 06                 3688 .byte 3,6 ; D0 
      002B05 03 05                 3689 .byte 3,5 ; D1 
      002B07 04 00                 3690 .byte 4,0 ; D2 
      002B09 02 01                 3691 .byte 2,1 ; D3
      002B0B 06 00                 3692 .byte 6,0 ; D4
      002B0D 02 02                 3693 .byte 2,2 ; D5
      002B0F 02 03                 3694 .byte 2,3 ; D6
      002B11 03 01                 3695 .byte 3,1 ; D7
      002B13 03 03                 3696 .byte 3,3 ; D8
      002B15 02 04                 3697 .byte 2,4 ; D9
      002B17 04 05                 3698 .byte 4,5 ; D10
      002B19 02 06                 3699 .byte 2,6 ; D11
      002B1B 02 07                 3700 .byte 2,7 ; D12
      002B1D 02 05                 3701 .byte 2,5 ; D13
      002B1F 04 02                 3702 .byte 4,2 ; D14
      002B21 04 01                 3703 .byte 4,1 ; D15
                                   3704 
                                   3705 
                                   3706 ;------------------------------
                                   3707 ; BASIC: RND(expr)
                                   3708 ; return random number 
                                   3709 ; between 1 and expr inclusive
                                   3710 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3711 ; input:
                                   3712 ; 	none 
                                   3713 ; output:
                                   3714 ;	xstack 	random positive integer 
                                   3715 ;------------------------------
      002B23                       3716 random:
      002B23 CD 19 4C         [ 4] 3717 	call func_args 
      002B26 A1 01            [ 1] 3718 	cp a,#1
      002B28 27 03            [ 1] 3719 	jreq 1$
      002B2A CC 16 90         [ 2] 3720 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002B2D                       3721 1$:  
      002B2D                       3722 	_xpop   
      002B2D 90 F6            [ 1]    1     ld a,(y)
      002B2F 93               [ 1]    2     ldw x,y 
      002B30 EE 01            [ 2]    3     ldw x,(1,x)
      002B32 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B36 89               [ 2] 3723 	pushw x 
      002B37 88               [ 1] 3724 	push a  
      002B38 A6 80            [ 1] 3725 	ld a,#0x80 
      002B3A 15 01            [ 1] 3726 	bcp a,(1,sp)
      002B3C 27 05            [ 1] 3727 	jreq 2$
      002B3E A6 0A            [ 1] 3728 	ld a,#ERR_BAD_VALUE
      002B40 CC 16 92         [ 2] 3729 	jp tb_error
      002B43                       3730 2$: 
                                   3731 ; acc16=(x<<5)^x 
      002B43 CE 00 14         [ 2] 3732 	ldw x,seedx 
      002B46 58               [ 2] 3733 	sllw x 
      002B47 58               [ 2] 3734 	sllw x 
      002B48 58               [ 2] 3735 	sllw x 
      002B49 58               [ 2] 3736 	sllw x 
      002B4A 58               [ 2] 3737 	sllw x 
      002B4B 9E               [ 1] 3738 	ld a,xh 
      002B4C C8 00 14         [ 1] 3739 	xor a,seedx 
      002B4F C7 00 0D         [ 1] 3740 	ld acc16,a 
      002B52 9F               [ 1] 3741 	ld a,xl 
      002B53 C8 00 15         [ 1] 3742 	xor a,seedx+1 
      002B56 C7 00 0E         [ 1] 3743 	ld acc8,a 
                                   3744 ; seedx=seedy 
      002B59 CE 00 16         [ 2] 3745 	ldw x,seedy 
      002B5C CF 00 14         [ 2] 3746 	ldw seedx,x  
                                   3747 ; seedy=seedy^(seedy>>1)
      002B5F CE 00 16         [ 2] 3748 	ldw x,seedy 
      002B62 54               [ 2] 3749 	srlw x 
      002B63 9E               [ 1] 3750 	ld a,xh 
      002B64 C8 00 16         [ 1] 3751 	xor a,seedy 
      002B67 C7 00 16         [ 1] 3752 	ld seedy,a  
      002B6A 9F               [ 1] 3753 	ld a,xl 
      002B6B C8 00 17         [ 1] 3754 	xor a,seedy+1 
      002B6E C7 00 17         [ 1] 3755 	ld seedy+1,a 
                                   3756 ; acc16>>3 
      002B71 CE 00 0D         [ 2] 3757 	ldw x,acc16 
      002B74 54               [ 2] 3758 	srlw x 
      002B75 54               [ 2] 3759 	srlw x 
      002B76 54               [ 2] 3760 	srlw x 
                                   3761 ; x=acc16^x 
      002B77 9E               [ 1] 3762 	ld a,xh 
      002B78 C8 00 0D         [ 1] 3763 	xor a,acc16 
      002B7B C7 00 0D         [ 1] 3764 	ld acc16,a 
      002B7E 9F               [ 1] 3765 	ld a,xl 
      002B7F C8 00 0E         [ 1] 3766 	xor a,acc8 
      002B82 C7 00 0E         [ 1] 3767 	ld acc8,a 
                                   3768 ; seedy=acc16^seedy 
      002B85 C8 00 17         [ 1] 3769 	xor a,seedy+1
      002B88 97               [ 1] 3770 	ld xl,a 
      002B89 C6 00 0D         [ 1] 3771 	ld a,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002B8C C8 00 16         [ 1] 3772 	xor a,seedy
      002B8F 95               [ 1] 3773 	ld xh,a 
      002B90 CF 00 16         [ 2] 3774 	ldw seedy,x 
                                   3775 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002B93 C6 00 15         [ 1] 3776 	ld a,seedx+1
      002B96 A4 7F            [ 1] 3777 	and a,#127
      002B98                       3778 	_xpush 
      002B98 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002B9C 90 F7            [ 1]    2     ld (y),a 
      002B9E 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BA1 84               [ 1] 3779 	pop a 
      002BA2 85               [ 2] 3780 	popw x 
      002BA3                       3781 	_xpush 
      002BA3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BA7 90 F7            [ 1]    2     ld (y),a 
      002BA9 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BAC CD 03 D6         [ 4] 3782 	call mod24 
      002BAF                       3783 	_xpop
      002BAF 90 F6            [ 1]    1     ld a,(y)
      002BB1 93               [ 1]    2     ldw x,y 
      002BB2 EE 01            [ 2]    3     ldw x,(1,x)
      002BB4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BB8 1C 00 01         [ 2] 3784 	addw x,#1 
      002BBB A9 00            [ 1] 3785 	adc a,#0  
      002BBD 81               [ 4] 3786 	ret 
                                   3787 
                                   3788 ;---------------------------------
                                   3789 ; BASIC: WORDS 
                                   3790 ; affiche la listes des mots du
                                   3791 ; dictionnaire ainsi que le nombre
                                   3792 ; de mots.
                                   3793 ;---------------------------------
                           000001  3794 	WLEN=1 ; word length
                           000002  3795 	LLEN=2 ; character sent to console
                           000003  3796 	WCNT=3 ; count words printed 
                           000003  3797 	VSIZE=3 
      002BBE                       3798 words:
      002BBE                       3799 	_vars VSIZE
      002BBE 52 03            [ 2]    1     sub sp,#VSIZE 
      002BC0 0F 02            [ 1] 3800 	clr (LLEN,sp)
      002BC2 0F 03            [ 1] 3801 	clr (WCNT,sp)
      002BC4 90 AE 32 CE      [ 2] 3802 	ldw y,#kword_dict+2
      002BC8 93               [ 1] 3803 0$:	ldw x,y
      002BC9 F6               [ 1] 3804 	ld a,(x)
      002BCA A4 0F            [ 1] 3805 	and a,#15 
      002BCC 6B 01            [ 1] 3806 	ld (WLEN,sp),a 
      002BCE 0C 03            [ 1] 3807 	inc (WCNT,sp)
      002BD0 5C               [ 1] 3808 1$:	incw x 
      002BD1 F6               [ 1] 3809 	ld a,(x)
      002BD2 CD 09 45         [ 4] 3810 	call putc 
      002BD5 0C 02            [ 1] 3811 	inc (LLEN,sp)
      002BD7 0A 01            [ 1] 3812 	dec (WLEN,sp)
      002BD9 26 F5            [ 1] 3813 	jrne 1$
      002BDB A6 46            [ 1] 3814 	ld a,#70
      002BDD 11 02            [ 1] 3815 	cp a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002BDF 2B 09            [ 1] 3816 	jrmi 2$   
      002BE1 A6 20            [ 1] 3817 	ld a,#SPACE 
      002BE3 CD 09 45         [ 4] 3818 	call putc 
      002BE6 0C 02            [ 1] 3819 	inc (LLEN,sp) 
      002BE8 20 07            [ 2] 3820 	jra 3$
      002BEA A6 0D            [ 1] 3821 2$: ld a,#CR 
      002BEC CD 09 45         [ 4] 3822 	call putc 
      002BEF 0F 02            [ 1] 3823 	clr (LLEN,sp)
      002BF1 72 A2 00 02      [ 2] 3824 3$:	subw y,#2 
      002BF5 90 FE            [ 2] 3825 	ldw y,(y)
      002BF7 26 CF            [ 1] 3826 	jrne 0$ 
      002BF9 A6 0D            [ 1] 3827 	ld a,#CR 
      002BFB CD 09 45         [ 4] 3828 	call putc  
      002BFE 5F               [ 1] 3829 	clrw x 
      002BFF 7B 03            [ 1] 3830 	ld a,(WCNT,sp)
      002C01 97               [ 1] 3831 	ld xl,a 
      002C02 CD 17 E6         [ 4] 3832 	call prt_i16 
      002C05 AE 2C 0E         [ 2] 3833 	ldw x,#words_count_msg
      002C08 CD 09 A2         [ 4] 3834 	call puts 
      002C0B                       3835 	_drop VSIZE 
      002C0B 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C0D 81               [ 4] 3836 	ret 
      002C0E 20 77 6F 72 64 73 20  3837 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3838 
                                   3839 
                                   3840 ;-----------------------------
                                   3841 ; BASIC: TIMER expr 
                                   3842 ; initialize count down timer 
                                   3843 ;-----------------------------
      002C24                       3844 set_timer:
      002C24 CD 19 51         [ 4] 3845 	call arg_list
      002C27 A1 01            [ 1] 3846 	cp a,#1 
      002C29 27 03            [ 1] 3847 	jreq 1$
      002C2B CC 16 90         [ 2] 3848 	jp syntax_error
      002C2E                       3849 1$: 
      002C2E                       3850 	_xpop  
      002C2E 90 F6            [ 1]    1     ld a,(y)
      002C30 93               [ 1]    2     ldw x,y 
      002C31 EE 01            [ 2]    3     ldw x,(1,x)
      002C33 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C37 CF 00 12         [ 2] 3851 	ldw timer,x 
      002C3A 81               [ 4] 3852 	ret 
                                   3853 
                                   3854 ;------------------------------
                                   3855 ; BASIC: TIMEOUT 
                                   3856 ; return state of timer 
                                   3857 ; output:
                                   3858 ;   A:X     0 not timeout 
                                   3859 ;   A:X     -1 timeout 
                                   3860 ;------------------------------
      002C3B                       3861 timeout:
      002C3B CE 00 12         [ 2] 3862 	ldw x,timer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002C3E 4F               [ 1] 3863 	clr a 
      002C3F 20 13            [ 2] 3864 	jra logical_not 
                                   3865 
                                   3866 ;--------------------------------
                                   3867 ; BASIC NOT(expr) 
                                   3868 ; return logical complement of expr
                                   3869 ;--------------------------------
      002C41                       3870 func_not:
      002C41 CD 19 4C         [ 4] 3871 	call func_args  
      002C44 A1 01            [ 1] 3872 	cp a,#1
      002C46 27 03            [ 1] 3873 	jreq 1$
      002C48 CC 16 90         [ 2] 3874 	jp syntax_error
      002C4B                       3875 1$: _xpop 
      002C4B 90 F6            [ 1]    1     ld a,(y)
      002C4D 93               [ 1]    2     ldw x,y 
      002C4E EE 01            [ 2]    3     ldw x,(1,x)
      002C50 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C54                       3876 logical_not: 
      002C54 4D               [ 1] 3877 	tnz a 
      002C55 26 06            [ 1] 3878 	jrne 2$
      002C57 5D               [ 2] 3879 	tnzw x 
      002C58 26 03            [ 1] 3880 	jrne 2$  
      002C5A 43               [ 1] 3881 	cpl a 
      002C5B 53               [ 2] 3882 	cplw x  
      002C5C 81               [ 4] 3883 	ret 
      002C5D 4F               [ 1] 3884 2$: clr a 
      002C5E 5F               [ 1] 3885 	clrw x 
      002C5F 81               [ 4] 3886 	ret 
                                   3887 
                                   3888 
                                   3889 ;-----------------------------------
                                   3890 ; BASIC: IWDGEN expr1 
                                   3891 ; enable independant watchdog timer
                                   3892 ; expr1 is delay in multiple of 62.5µsec
                                   3893 ; expr1 -> {1..16383}
                                   3894 ;-----------------------------------
      002C60                       3895 enable_iwdg:
      002C60 CD 19 51         [ 4] 3896 	call arg_list
      002C63 A1 01            [ 1] 3897 	cp a,#1 
      002C65 27 03            [ 1] 3898 	jreq 1$
      002C67 CC 16 90         [ 2] 3899 	jp syntax_error 
      002C6A                       3900 1$: _xpop  
      002C6A 90 F6            [ 1]    1     ld a,(y)
      002C6C 93               [ 1]    2     ldw x,y 
      002C6D EE 01            [ 2]    3     ldw x,(1,x)
      002C6F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C73 4B 00            [ 1] 3901 	push #0
      002C75 35 CC 50 E0      [ 1] 3902 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002C79 9E               [ 1] 3903 	ld a,xh 
      002C7A A4 3F            [ 1] 3904 	and a,#0x3f
      002C7C 95               [ 1] 3905 	ld xh,a  
      002C7D A3 00 FF         [ 2] 3906 2$:	cpw x,#255
      002C80 23 06            [ 2] 3907 	jrule 3$
      002C82 0C 01            [ 1] 3908 	inc (1,sp)
      002C84 98               [ 1] 3909 	rcf 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002C85 56               [ 2] 3910 	rrcw x 
      002C86 20 F5            [ 2] 3911 	jra 2$
      002C88 35 55 50 E0      [ 1] 3912 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002C8C 84               [ 1] 3913 	pop a  
      002C8D C7 50 E1         [ 1] 3914 	ld IWDG_PR,a 
      002C90 9F               [ 1] 3915 	ld a,xl
      002C91 4A               [ 1] 3916 	dec a 
      002C92 35 55 50 E0      [ 1] 3917 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002C96 C7 50 E2         [ 1] 3918 	ld IWDG_RLR,a 
      002C99 35 AA 50 E0      [ 1] 3919 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002C9D 81               [ 4] 3920 	ret 
                                   3921 
                                   3922 
                                   3923 ;-----------------------------------
                                   3924 ; BASIC: IWDGREF  
                                   3925 ; refresh independant watchdog count down 
                                   3926 ; timer before it reset MCU. 
                                   3927 ;-----------------------------------
      002C9E                       3928 refresh_iwdg:
      002C9E 35 AA 50 E0      [ 1] 3929 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CA2 81               [ 4] 3930 	ret 
                                   3931 
                                   3932 
                                   3933 ;-------------------------------------
                                   3934 ; BASIC: LOG(expr)
                                   3935 ; return logarithm base 2 of expr 
                                   3936 ; this is the position of most significant
                                   3937 ; bit set. 
                                   3938 ; input: 
                                   3939 ; output:
                                   3940 ;   A     TK_INTGR 
                                   3941 ;   xstack log2 
                                   3942 ;*********************************
      002CA3                       3943 log2:
      002CA3 CD 19 4C         [ 4] 3944 	call func_args 
      002CA6 A1 01            [ 1] 3945 	cp a,#1 
      002CA8 27 03            [ 1] 3946 	jreq 1$
      002CAA CC 16 90         [ 2] 3947 	jp syntax_error 
      002CAD                       3948 1$: 
      002CAD                       3949 	_xpop    
      002CAD 90 F6            [ 1]    1     ld a,(y)
      002CAF 93               [ 1]    2     ldw x,y 
      002CB0 EE 01            [ 2]    3     ldw x,(1,x)
      002CB2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CB6 4D               [ 1] 3950 	tnz a
      002CB7 26 08            [ 1] 3951 	jrne 2$ 
      002CB9 5D               [ 2] 3952 	tnzw x 
      002CBA 26 05            [ 1] 3953 	jrne 2$
      002CBC A6 0A            [ 1] 3954 	ld a,#ERR_BAD_VALUE
      002CBE CC 16 92         [ 2] 3955 	jp tb_error 
      002CC1 4B 18            [ 1] 3956 2$: push #24 
      002CC3 59               [ 2] 3957 3$: rlcw x 
      002CC4 49               [ 1] 3958     rlc a 
      002CC5 25 04            [ 1] 3959 	jrc 4$
      002CC7 0A 01            [ 1] 3960 	dec (1,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002CC9 26 F8            [ 1] 3961 	jrne 3$
      002CCB 5F               [ 1] 3962 4$: clrw x 
      002CCC 84               [ 1] 3963     pop a 
      002CCD 4A               [ 1] 3964 	dec a
      002CCE 02               [ 1] 3965 	rlwa x  
      002CCF                       3966 9$:	
      002CCF 81               [ 4] 3967 	ret 
                                   3968 
                                   3969 ;-----------------------------------
                                   3970 ; BASIC: BIT(expr) 
                                   3971 ; expr ->{0..23}
                                   3972 ; return 2^expr 
                                   3973 ; output:
                                   3974 ;    A:X    2^expr 
                                   3975 ;-----------------------------------
      002CD0                       3976 bitmask:
      002CD0 CD 19 4C         [ 4] 3977     call func_args 
      002CD3 A1 01            [ 1] 3978 	cp a,#1
      002CD5 27 03            [ 1] 3979 	jreq 1$
      002CD7 CC 16 90         [ 2] 3980 	jp syntax_error 
      002CDA                       3981 1$: _xpop 
      002CDA 90 F6            [ 1]    1     ld a,(y)
      002CDC 93               [ 1]    2     ldw x,y 
      002CDD EE 01            [ 2]    3     ldw x,(1,x)
      002CDF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CE3 9F               [ 1] 3982 	ld a,xl 
      002CE4 AE 00 01         [ 2] 3983 	ldw x,#1 
      002CE7 A4 17            [ 1] 3984 	and a,#23
      002CE9 27 0A            [ 1] 3985 	jreq 9$
      002CEB 88               [ 1] 3986 	push a 
      002CEC 4F               [ 1] 3987 	clr a 
      002CED                       3988 2$: 
      002CED 58               [ 2] 3989 	slaw x 
      002CEE 49               [ 1] 3990 	rlc a 	
      002CEF 0A 01            [ 1] 3991 	dec (1,sp)
      002CF1 26 FA            [ 1] 3992 	jrne 2$ 
      002CF3                       3993 4$:
      002CF3                       3994     _drop 1 
      002CF3 5B 01            [ 2]    1     addw sp,#1 
      002CF5 81               [ 4] 3995 9$:	ret 
                                   3996 
                                   3997 ;------------------------------
                                   3998 ; BASIC: INVERT(expr)
                                   3999 ; 1's complement 
                                   4000 ;--------------------------------
      002CF6                       4001 invert:
      002CF6 CD 19 4C         [ 4] 4002 	call func_args
      002CF9 A1 01            [ 1] 4003 	cp a,#1 
      002CFB 27 03            [ 1] 4004 	jreq 1$
      002CFD CC 16 90         [ 2] 4005 	jp syntax_error
      002D00                       4006 1$: _xpop 
      002D00 90 F6            [ 1]    1     ld a,(y)
      002D02 93               [ 1]    2     ldw x,y 
      002D03 EE 01            [ 2]    3     ldw x,(1,x)
      002D05 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D09 43               [ 1] 4007 	cpl a 
      002D0A 53               [ 2] 4008 	cplw x 
      002D0B 81               [ 4] 4009 	ret 
                                   4010 
                                   4011 ;------------------------------
                                   4012 ; BASIC: DO 
                                   4013 ; initiate a DO ... UNTIL loop 
                                   4014 ;------------------------------
                           000003  4015 	DOLP_ADR=3 
                           000005  4016 	DOLP_INW=5
                           000004  4017 	VSIZE=4 
      002D0C                       4018 do_loop:
      002D0C 85               [ 2] 4019 	popw x 
      002D0D                       4020 	_vars VSIZE 
      002D0D 52 04            [ 2]    1     sub sp,#VSIZE 
      002D0F 89               [ 2] 4021 	pushw x 
      002D10 CE 00 04         [ 2] 4022 	ldw x,basicptr 
      002D13 1F 03            [ 2] 4023 	ldw (DOLP_ADR,sp),x
      002D15 CE 00 00         [ 2] 4024 	ldw x,in.w 
      002D18 1F 05            [ 2] 4025 	ldw (DOLP_INW,sp),x
      002D1A 72 5C 00 1F      [ 1] 4026 	inc loop_depth 
      002D1E 81               [ 4] 4027 	ret 
                                   4028 
                                   4029 ;--------------------------------
                                   4030 ; BASIC: UNTIL expr 
                                   4031 ; loop if exprssion is false 
                                   4032 ; else terminate loop
                                   4033 ;--------------------------------
      002D1F                       4034 until: 
      002D1F 72 5D 00 1F      [ 1] 4035 	tnz loop_depth 
      002D23 26 03            [ 1] 4036 	jrne 1$ 
      002D25 CC 16 90         [ 2] 4037 	jp syntax_error 
      002D28                       4038 1$: 
      002D28 CD 1A C9         [ 4] 4039 	call relation 
      002D2B A1 84            [ 1] 4040 	cp a,#TK_INTGR
      002D2D 27 03            [ 1] 4041 	jreq 2$
      002D2F CC 16 90         [ 2] 4042 	jp syntax_error
      002D32                       4043 2$: 
      002D32                       4044 	_xpop
      002D32 90 F6            [ 1]    1     ld a,(y)
      002D34 93               [ 1]    2     ldw x,y 
      002D35 EE 01            [ 2]    3     ldw x,(1,x)
      002D37 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D3B 4D               [ 1] 4045 	tnz a 
      002D3C 26 13            [ 1] 4046 	jrne 9$ 
      002D3E 5D               [ 2] 4047 	tnzw x   
      002D3F 26 10            [ 1] 4048 	jrne 9$
      002D41 1E 03            [ 2] 4049 	ldw x,(DOLP_ADR,sp)
      002D43 CF 00 04         [ 2] 4050 	ldw basicptr,x 
      002D46 E6 02            [ 1] 4051 	ld a,(2,x)
      002D48 C7 00 03         [ 1] 4052 	ld count,a 
      002D4B 1E 05            [ 2] 4053 	ldw x,(DOLP_INW,sp)
      002D4D CF 00 00         [ 2] 4054 	ldw in.w,x 
      002D50 81               [ 4] 4055 	ret 
      002D51                       4056 9$:	; remove loop data from stack  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002D51 85               [ 2] 4057 	popw x
      002D52                       4058 	_drop VSIZE
      002D52 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D54 72 5A 00 1F      [ 1] 4059 	dec loop_depth 
      002D58 FC               [ 2] 4060 	jp (x)
                                   4061 
                                   4062 ;--------------------------
                                   4063 ; BASIC: PORTA...PORTI  
                                   4064 ;  return constant value 
                                   4065 ;  PORT  base address 
                                   4066 ;---------------------------
      002D59                       4067 const_porta:
      002D59 AE 50 00         [ 2] 4068 	ldw x,#PA_BASE 
      002D5C 4F               [ 1] 4069 	clr a 
      002D5D 81               [ 4] 4070 	ret 
      002D5E                       4071 const_portb:
      002D5E AE 50 05         [ 2] 4072 	ldw x,#PB_BASE 
      002D61 4F               [ 1] 4073 	clr a 
      002D62 81               [ 4] 4074 	ret 
      002D63                       4075 const_portc:
      002D63 AE 50 0A         [ 2] 4076 	ldw x,#PC_BASE 
      002D66 4F               [ 1] 4077 	clr a 
      002D67 81               [ 4] 4078 	ret 
      002D68                       4079 const_portd:
      002D68 AE 50 0F         [ 2] 4080 	ldw x,#PD_BASE 
      002D6B 4F               [ 1] 4081 	clr a 
      002D6C 81               [ 4] 4082 	ret 
      002D6D                       4083 const_porte:
      002D6D AE 50 14         [ 2] 4084 	ldw x,#PE_BASE 
      002D70 4F               [ 1] 4085 	clr a 
      002D71 81               [ 4] 4086 	ret 
      002D72                       4087 const_portf:
      002D72 AE 50 19         [ 2] 4088 	ldw x,#PF_BASE 
      002D75 4F               [ 1] 4089 	clr a 
      002D76 81               [ 4] 4090 	ret 
      002D77                       4091 const_portg:
      002D77 AE 50 1E         [ 2] 4092 	ldw x,#PG_BASE 
      002D7A 4F               [ 1] 4093 	clr a 
      002D7B 81               [ 4] 4094 	ret 
      002D7C                       4095 const_porth:
      002D7C AE 50 23         [ 2] 4096 	ldw x,#PH_BASE 
      002D7F 4F               [ 1] 4097 	clr a 
      002D80 81               [ 4] 4098 	ret 
      002D81                       4099 const_porti:
      002D81 AE 50 28         [ 2] 4100 	ldw x,#PI_BASE 
      002D84 4F               [ 1] 4101 	clr a 
      002D85 81               [ 4] 4102 	ret 
                                   4103 
                                   4104 ;-------------------------------
                                   4105 ; following return constant 
                                   4106 ; related to GPIO register offset 
                                   4107 ;---------------------------------
      002D86                       4108 const_odr:
      002D86 4F               [ 1] 4109 	clr a 
      002D87 AE 00 00         [ 2] 4110 	ldw x,#GPIO_ODR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002D8A 81               [ 4] 4111 	ret 
      002D8B                       4112 const_idr:
      002D8B 4F               [ 1] 4113 	clr a 
      002D8C AE 00 01         [ 2] 4114 	ldw x,#GPIO_IDR
      002D8F 81               [ 4] 4115 	ret 
      002D90                       4116 const_ddr:
      002D90 4F               [ 1] 4117 	clr a
      002D91 AE 00 02         [ 2] 4118 	ldw x,#GPIO_DDR
      002D94 81               [ 4] 4119 	ret 
      002D95                       4120 const_cr1:
      002D95 4F               [ 1] 4121 	clr a 
      002D96 AE 00 03         [ 2] 4122 	ldw x,#GPIO_CR1
      002D99 81               [ 4] 4123 	ret 
      002D9A                       4124 const_cr2:
      002D9A 4F               [ 1] 4125 	clr a
      002D9B AE 00 04         [ 2] 4126 	ldw x,#GPIO_CR2
      002D9E 81               [ 4] 4127 	ret 
                                   4128 ;-------------------------
                                   4129 ; BASIC: POUT 
                                   4130 ;  constant for port mode
                                   4131 ;  used by PMODE 
                                   4132 ;  to set pin as output
                                   4133 ;------------------------
      002D9F                       4134 const_output:
      002D9F 4F               [ 1] 4135 	clr a 
      002DA0 AE 00 01         [ 2] 4136 	ldw x,#OUTP
      002DA3 81               [ 4] 4137 	ret 
                                   4138 
                                   4139 ;-------------------------
                                   4140 ; BASIC: PINP 
                                   4141 ;  constant for port mode
                                   4142 ;  used by PMODE 
                                   4143 ;  to set pin as input
                                   4144 ;------------------------
      002DA4                       4145 const_input:
      002DA4 4F               [ 1] 4146 	clr a  
      002DA5 AE 00 00         [ 2] 4147 	ldw x,#INP 
      002DA8 81               [ 4] 4148 	ret 
                                   4149 	
                                   4150 ;-----------------------
                                   4151 ; memory area constants
                                   4152 ;-----------------------
      002DA9                       4153 const_eeprom_base:
      002DA9 4F               [ 1] 4154 	clr a  
      002DAA AE 40 00         [ 2] 4155 	ldw x,#EEPROM_BASE 
      002DAD 81               [ 4] 4156 	ret 
                                   4157 
                                   4158 ;---------------------------
                                   4159 ; BASIC: DATA 
                                   4160 ; when the interpreter find 
                                   4161 ; a DATA line it skip it.
                                   4162 ;---------------------------
      002DAE                       4163 data:
      002DAE 55 00 03 00 01   [ 1] 4164 	mov in,count 
      002DB3 81               [ 4] 4165 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4166 
                                   4167 ;------------------------------
                                   4168 ; check if it is a DATA line 
                                   4169 ; input: 
                                   4170 ;    X    line address 
                                   4171 ; output:
                                   4172 ;    Z    set if DATA line 
                                   4173 ;----------------------------
      002DB4                       4174 is_data_line:
      002DB4 EE 04            [ 2] 4175 	ldw x,(4,x)
      002DB6 DE 32 D4         [ 2] 4176 	ldw x,(code_addr,x)
      002DB9 A3 2D AE         [ 2] 4177 	cpw x,#data 
      002DBC 81               [ 4] 4178 	ret 
                                   4179 
                                   4180 ;---------------------------
                                   4181 ; set DATA pointer at line# 
                                   4182 ; specified by X 
                                   4183 ;---------------------------
      002DBD                       4184 data_line:
      002DBD 4F               [ 1] 4185     clr a 
      002DBE CD 0C 8A         [ 4] 4186 	call search_lineno
      002DC1 5D               [ 2] 4187 	tnzw x 
      002DC2 26 05            [ 1] 4188 	jrne 3$
      002DC4 A6 05            [ 1] 4189 2$:	ld a,#ERR_NO_LINE 
      002DC6 CC 16 92         [ 2] 4190 	jp tb_error
      002DC9                       4191 3$: ; check if valid data line 
      002DC9 90 93            [ 1] 4192     ldw y,x 
      002DCB CD 2D B4         [ 4] 4193 	call is_data_line 
      002DCE 26 F4            [ 1] 4194 	jrne 2$ 
      002DD0                       4195 set_data_ptr: 	
      002DD0 90 CF 00 06      [ 2] 4196 	ldw data_ptr,y
      002DD4 90 E6 02         [ 1] 4197 	ld a,(2,y)
      002DD7 C7 00 09         [ 1] 4198 	ld data_len,a 
      002DDA 35 06 00 08      [ 1] 4199 	mov data_ofs,#FIRST_DATA_ITEM 
      002DDE 81               [ 4] 4200 	ret
                                   4201 
                                   4202 ;---------------------------------
                                   4203 ; BASIC: RESTORE [line#]
                                   4204 ; set data_ptr to first data line
                                   4205 ; if no DATA found pointer set to
                                   4206 ; zero.
                                   4207 ; if a line# is given as argument 
                                   4208 ; a data line with that number 
                                   4209 ; is searched and the data pointer 
                                   4210 ; is set to it. If there is no 
                                   4211 ; data line with that number 
                                   4212 ; the program is interrupted. 
                                   4213 ;---------------------------------
      002DDF                       4214 restore:
      002DDF 72 5F 00 06      [ 1] 4215 	clr data_ptr 
      002DE3 72 5F 00 07      [ 1] 4216 	clr data_ptr+1
      002DE7 72 5F 00 08      [ 1] 4217 	clr data_ofs 
      002DEB 72 5F 00 09      [ 1] 4218 	clr data_len
      002DEF CD 17 91         [ 4] 4219 	call next_token 
      002DF2 A1 84            [ 1] 4220 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002DF4 27 C7            [ 1] 4221 	jreq data_line
      002DF6                       4222 	_unget_token 
      002DF6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002DFB CE 00 1B         [ 2] 4223 	ldw x,txtbgn
                                   4224 ; search first DATA line 
      002DFE                       4225 data_search_loop: 	
      002DFE C3 00 1D         [ 2] 4226 	cpw x,txtend
      002E01 24 17            [ 1] 4227 	jruge restore_error 
      002E03 90 93            [ 1] 4228 	ldw y,x 
      002E05 CD 2D B4         [ 4] 4229 	call is_data_line 
      002E08 27 C6            [ 1] 4230 	jreq set_data_ptr
      002E0A                       4231 try_next_line: 
      002E0A 93               [ 1] 4232 	ldw x,y 
      002E0B E6 02            [ 1] 4233 	ld a,(2,x)
      002E0D C7 00 0E         [ 1] 4234 	ld acc8,a 
      002E10 72 5F 00 0D      [ 1] 4235 	clr acc16 
      002E14 72 BB 00 0D      [ 2] 4236 	addw x,acc16 
      002E18 20 E4            [ 2] 4237 	jra data_search_loop
      002E1A                       4238 restore_error:	
      002E1A A6 0C            [ 1] 4239     ld a,#ERR_NO_DATA 
      002E1C CC 16 92         [ 2] 4240 	jp tb_error 
                                   4241 
                                   4242 
                                   4243 ;---------------------------------
                                   4244 ; BASIC: READ 
                                   4245 ; return next data item | 0 
                                   4246 ;---------------------------------
                           000001  4247 	CTX_BPTR=1 
                           000003  4248 	CTX_IN=3 
                           000004  4249 	CTX_COUNT=4 
                           000005  4250 	XSAVE=5
                           000006  4251 	VSIZE=6
      002E1F                       4252 read:
      002E1F                       4253 	_vars  VSIZE 
      002E1F 52 06            [ 2]    1     sub sp,#VSIZE 
      002E21                       4254 read01:	
      002E21 C6 00 08         [ 1] 4255 	ld a,data_ofs
      002E24 C1 00 09         [ 1] 4256 	cp a,data_len 
      002E27 27 37            [ 1] 4257 	jreq 2$ ; end of line  
      002E29 CD 1F 6F         [ 4] 4258 	call save_context
      002E2C CE 00 06         [ 2] 4259 	ldw x,data_ptr 
      002E2F CF 00 04         [ 2] 4260 	ldw basicptr,x 
      002E32 55 00 08 00 01   [ 1] 4261 	mov in,data_ofs 
      002E37 55 00 09 00 03   [ 1] 4262 	mov count,data_len  
      002E3C CD 1A 88         [ 4] 4263 	call expression 
      002E3F A1 84            [ 1] 4264 	cp a,#TK_INTGR 
      002E41 27 03            [ 1] 4265 	jreq 1$ 
      002E43 CC 16 90         [ 2] 4266 	jp syntax_error 
      002E46                       4267 1$:
      002E46 1F 05            [ 2] 4268 	ldw (XSAVE,SP),x
      002E48 CD 17 91         [ 4] 4269 	call next_token ; skip comma
      002E4B CE 00 04         [ 2] 4270 	ldw x,basicptr 
      002E4E CF 00 06         [ 2] 4271 	ldw data_ptr,x 
      002E51 55 00 01 00 08   [ 1] 4272 	mov data_ofs,in 
      002E56 CD 1F 7F         [ 4] 4273 	call rest_context
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002E59 1E 05            [ 2] 4274 	ldw x,(XSAVE,sp)
      002E5B A6 84            [ 1] 4275 	ld a,#TK_INTGR
      002E5D                       4276 	_drop VSIZE 
      002E5D 5B 06            [ 2]    1     addw sp,#VSIZE 
      002E5F 81               [ 4] 4277 	ret 
      002E60                       4278 2$: ; end of line reached 
      002E60 90 CE 00 06      [ 2] 4279 	ldw y, data_ptr 
      002E64 72 5F 00 06      [ 1] 4280 	clr data_ptr
      002E68 72 5F 00 07      [ 1] 4281 	clr data_ptr+1   
      002E6C 72 5F 00 08      [ 1] 4282 	clr data_ofs 
      002E70 72 5F 00 09      [ 1] 4283 	clr data_len 
      002E74 CD 2E 0A         [ 4] 4284 	call try_next_line 
      002E77 20 A8            [ 2] 4285 	jra read01
                                   4286 
                                   4287 
                                   4288 ;---------------------------------
                                   4289 ; BASIC: SPIEN clkdiv, 0|1  
                                   4290 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4291 ; if clkdiv==-1 disable SPI
                                   4292 ; 0|1 -> disable|enable  
                                   4293 ;--------------------------------- 
                           000005  4294 SPI_CS_BIT=5
      002E79                       4295 spi_enable:
      002E79 CD 19 51         [ 4] 4296 	call arg_list 
      002E7C A1 02            [ 1] 4297 	cp a,#2
      002E7E 27 03            [ 1] 4298 	jreq 1$
      002E80 CC 16 90         [ 2] 4299 	jp syntax_error 
      002E83                       4300 1$: 
      002E83 72 12 50 C7      [ 1] 4301 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002E87 85               [ 2] 4302 	popw x  
      002E88 5D               [ 2] 4303 	tnzw x 
      002E89 27 21            [ 1] 4304 	jreq spi_disable 
      002E8B 85               [ 2] 4305 	popw x 
      002E8C A6 08            [ 1] 4306 	ld a,#(1<<SPI_CR1_BR)
      002E8E 42               [ 4] 4307 	mul x,a 
      002E8F 9F               [ 1] 4308 	ld a,xl 
      002E90 C7 52 00         [ 1] 4309 	ld SPI_CR1,a 
                                   4310 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002E93 72 1A 50 14      [ 1] 4311 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002E97 72 1A 50 16      [ 1] 4312 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4313 ; configure SPI as master mode 0.	
      002E9B 72 14 52 00      [ 1] 4314 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4315 ; ~CS line controlled by sofware 	
      002E9F 72 12 52 01      [ 1] 4316 	bset SPI_CR2,#SPI_CR2_SSM 
      002EA3 72 10 52 01      [ 1] 4317     bset SPI_CR2,#SPI_CR2_SSI 
                                   4318 ; enable SPI
      002EA7 72 1C 52 00      [ 1] 4319 	bset SPI_CR1,#SPI_CR1_SPE 	
      002EAB 81               [ 4] 4320 	ret 
      002EAC                       4321 spi_disable:
      002EAC                       4322 	_drop #2; throw first argument.
      002EAC 5B 02            [ 2]    1     addw sp,##2 
                                   4323 ; wait spi idle 
      002EAE A6 82            [ 1] 4324 1$:	ld a,#0x82 
      002EB0 C4 52 03         [ 1] 4325 	and a,SPI_SR
      002EB3 A1 02            [ 1] 4326 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002EB5 26 F7            [ 1] 4327 	jrne 1$
      002EB7 72 1D 52 00      [ 1] 4328 	bres SPI_CR1,#SPI_CR1_SPE
      002EBB 72 13 50 C7      [ 1] 4329 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002EBF 72 1B 50 16      [ 1] 4330 	bres PE_DDR,#SPI_CS_BIT 
      002EC3 81               [ 4] 4331 	ret 
                                   4332 
      002EC4                       4333 spi_clear_error:
      002EC4 A6 78            [ 1] 4334 	ld a,#0x78 
      002EC6 C5 52 03         [ 1] 4335 	bcp a,SPI_SR 
      002EC9 27 04            [ 1] 4336 	jreq 1$
      002ECB 72 5F 52 03      [ 1] 4337 	clr SPI_SR 
      002ECF 81               [ 4] 4338 1$: ret 
                                   4339 
      002ED0                       4340 spi_send_byte:
      002ED0 88               [ 1] 4341 	push a 
      002ED1 CD 2E C4         [ 4] 4342 	call spi_clear_error
      002ED4 84               [ 1] 4343 	pop a 
      002ED5 72 03 52 03 FB   [ 2] 4344 	btjf SPI_SR,#SPI_SR_TXE,.
      002EDA C7 52 04         [ 1] 4345 	ld SPI_DR,a
      002EDD 72 01 52 03 FB   [ 2] 4346 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002EE2 C6 52 04         [ 1] 4347 	ld a,SPI_DR 
      002EE5 81               [ 4] 4348 	ret 
                                   4349 
      002EE6                       4350 spi_rcv_byte:
      002EE6 A6 FF            [ 1] 4351 	ld a,#255
      002EE8 72 01 52 03 E3   [ 2] 4352 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002EED C6 52 04         [ 1] 4353 	ld a,SPI_DR 
      002EF0 81               [ 4] 4354 	ret
                                   4355 
                                   4356 ;------------------------------
                                   4357 ; BASIC: SPIWR byte [,byte]
                                   4358 ; write 1 or more byte
                                   4359 ;------------------------------
      002EF1                       4360 spi_write:
      002EF1 CD 1A 88         [ 4] 4361 	call expression
      002EF4 A1 84            [ 1] 4362 	cp a,#TK_INTGR 
      002EF6 27 03            [ 1] 4363 	jreq 1$
      002EF8 CC 16 90         [ 2] 4364 	jp syntax_error 
      002EFB                       4365 1$:	
      002EFB 9F               [ 1] 4366 	ld a,xl 
      002EFC CD 2E D0         [ 4] 4367 	call spi_send_byte 
      002EFF CD 17 91         [ 4] 4368 	call next_token 
      002F02 A1 08            [ 1] 4369 	cp a,#TK_COMMA 
      002F04 26 02            [ 1] 4370 	jrne 2$ 
      002F06 20 E9            [ 2] 4371 	jra spi_write 
      002F08 4D               [ 1] 4372 2$:	tnz a 
      002F09 27 05            [ 1] 4373 	jreq 3$
      002F0B                       4374 	_unget_token  
      002F0B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F10 81               [ 4] 4375 3$:	ret 
                                   4376 
                                   4377 
                                   4378 ;-------------------------------
                                   4379 ; BASIC: SPIRD 	
                                   4380 ; read one byte from SPI 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4381 ;-------------------------------
      002F11                       4382 spi_read:
      002F11 CD 2E E6         [ 4] 4383 	call spi_rcv_byte 
      002F14 5F               [ 1] 4384 	clrw x 
      002F15 97               [ 1] 4385 	ld xl,a 
      002F16 4F               [ 1] 4386 	clr a  
      002F17 81               [ 4] 4387 	ret 
                                   4388 
                                   4389 ;------------------------------
                                   4390 ; BASIC: SPISEL 0|1 
                                   4391 ; set state of ~CS line
                                   4392 ; 0|1 deselect|select  
                                   4393 ;------------------------------
      002F18                       4394 spi_select:
      002F18 CD 17 91         [ 4] 4395 	call next_token 
      002F1B A1 84            [ 1] 4396 	cp a,#TK_INTGR 
      002F1D 27 03            [ 1] 4397 	jreq 1$
      002F1F CC 16 90         [ 2] 4398 	jp syntax_error 
      002F22 5D               [ 2] 4399 1$: tnzw x  
      002F23 27 05            [ 1] 4400 	jreq cs_high 
      002F25 72 1B 50 14      [ 1] 4401 	bres PE_ODR,#SPI_CS_BIT
      002F29 81               [ 4] 4402 	ret 
      002F2A                       4403 cs_high: 
      002F2A 72 1A 50 14      [ 1] 4404 	bset PE_ODR,#SPI_CS_BIT
      002F2E 81               [ 4] 4405 	ret 
                                   4406 
                                   4407 ;-------------------------------
                                   4408 ; BASIC: PAD 
                                   4409 ; Return pad buffer address.
                                   4410 ;------------------------------
      002F2F                       4411 pad_ref:
      002F2F AE 16 B8         [ 2] 4412 	ldw x,#pad 
      002F32 4F               [ 1] 4413 	clr a
      002F33 81               [ 4] 4414 	ret 
                                   4415 
                                   4416 
                                   4417 ;------------------------------
                                   4418 ;      dictionary 
                                   4419 ; format:
                                   4420 ;   link:   2 bytes 
                                   4421 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4422 ;   cmd_name: 16 byte max 
                                   4423 ;   cmd_index: 2 bytes 
                                   4424 ;------------------------------
                                   4425 	.macro _dict_entry len,name,cmd_idx 
                                   4426 	.word LINK 
                                   4427 	LINK=.
                                   4428 name:
                                   4429 	.byte len 	
                                   4430 	.ascii "name"
                                   4431 	.word cmd_idx 
                                   4432 	.endm 
                                   4433 
                           000000  4434 	LINK=0
                                   4435 ; respect alphabetic order for BASIC names from Z-A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



                                   4436 ; this sort order is for a cleaner WORDS cmd output. 	
      002F34                       4437 kword_end:
      002F34                       4438 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002F34 00 00                    1 	.word LINK 
                           002F36     2 	LINK=.
      002F36                          3 XOR:
      002F36 43                       4 	.byte 3+F_IFUNC 	
      002F37 58 4F 52                 5 	.ascii "XOR"
      002F3A 00 BC                    6 	.word XOR_IDX 
      002F3C                       4439 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002F3C 2F 36                    1 	.word LINK 
                           002F3E     2 	LINK=.
      002F3E                          3 WRITE:
      002F3E 05                       4 	.byte 5 	
      002F3F 57 52 49 54 45           5 	.ascii "WRITE"
      002F44 00 BA                    6 	.word WRITE_IDX 
      002F46                       4440 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002F46 2F 3E                    1 	.word LINK 
                           002F48     2 	LINK=.
      002F48                          3 WORDS:
      002F48 05                       4 	.byte 5 	
      002F49 57 4F 52 44 53           5 	.ascii "WORDS"
      002F4E 00 B8                    6 	.word WORDS_IDX 
      002F50                       4441 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002F50 2F 48                    1 	.word LINK 
                           002F52     2 	LINK=.
      002F52                          3 WAIT:
      002F52 04                       4 	.byte 4 	
      002F53 57 41 49 54              5 	.ascii "WAIT"
      002F57 00 B6                    6 	.word WAIT_IDX 
      002F59                       4442 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002F59 2F 52                    1 	.word LINK 
                           002F5B     2 	LINK=.
      002F5B                          3 USR:
      002F5B 43                       4 	.byte 3+F_IFUNC 	
      002F5C 55 53 52                 5 	.ascii "USR"
      002F5F 00 B4                    6 	.word USR_IDX 
      002F61                       4443 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      002F61 2F 5B                    1 	.word LINK 
                           002F63     2 	LINK=.
      002F63                          3 UNTIL:
      002F63 05                       4 	.byte 5 	
      002F64 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002F69 00 B2                    6 	.word UNTIL_IDX 
      002F6B                       4444 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002F6B 2F 63                    1 	.word LINK 
                           002F6D     2 	LINK=.
      002F6D                          3 UFLASH:
      002F6D 46                       4 	.byte 6+F_IFUNC 	
      002F6E 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002F74 00 B0                    6 	.word UFLASH_IDX 
      002F76                       4445 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002F76 2F 6D                    1 	.word LINK 
                           002F78     2 	LINK=.
      002F78                          3 UBOUND:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      002F78 46                       4 	.byte 6+F_IFUNC 	
      002F79 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002F7F 00 AE                    6 	.word UBOUND_IDX 
      002F81                       4446 	_dict_entry,4,TONE,TONE_IDX;tone  
      002F81 2F 78                    1 	.word LINK 
                           002F83     2 	LINK=.
      002F83                          3 TONE:
      002F83 04                       4 	.byte 4 	
      002F84 54 4F 4E 45              5 	.ascii "TONE"
      002F88 00 AC                    6 	.word TONE_IDX 
      002F8A                       4447 	_dict_entry,2,TO,TO_IDX;to
      002F8A 2F 83                    1 	.word LINK 
                           002F8C     2 	LINK=.
      002F8C                          3 TO:
      002F8C 02                       4 	.byte 2 	
      002F8D 54 4F                    5 	.ascii "TO"
      002F8F 00 AA                    6 	.word TO_IDX 
      002F91                       4448 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      002F91 2F 8C                    1 	.word LINK 
                           002F93     2 	LINK=.
      002F93                          3 TIMER:
      002F93 05                       4 	.byte 5 	
      002F94 54 49 4D 45 52           5 	.ascii "TIMER"
      002F99 00 A6                    6 	.word TIMER_IDX 
      002F9B                       4449 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      002F9B 2F 93                    1 	.word LINK 
                           002F9D     2 	LINK=.
      002F9D                          3 TIMEOUT:
      002F9D 47                       4 	.byte 7+F_IFUNC 	
      002F9E 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002FA5 00 A8                    6 	.word TMROUT_IDX 
      002FA7                       4450 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002FA7 2F 9D                    1 	.word LINK 
                           002FA9     2 	LINK=.
      002FA9                          3 TICKS:
      002FA9 45                       4 	.byte 5+F_IFUNC 	
      002FAA 54 49 43 4B 53           5 	.ascii "TICKS"
      002FAF 00 A4                    6 	.word TICKS_IDX 
      002FB1                       4451 	_dict_entry,4,STOP,STOP_IDX;stop 
      002FB1 2F A9                    1 	.word LINK 
                           002FB3     2 	LINK=.
      002FB3                          3 STOP:
      002FB3 04                       4 	.byte 4 	
      002FB4 53 54 4F 50              5 	.ascii "STOP"
      002FB8 00 A2                    6 	.word STOP_IDX 
      002FBA                       4452 	_dict_entry,4,STEP,STEP_IDX;step 
      002FBA 2F B3                    1 	.word LINK 
                           002FBC     2 	LINK=.
      002FBC                          3 STEP:
      002FBC 04                       4 	.byte 4 	
      002FBD 53 54 45 50              5 	.ascii "STEP"
      002FC1 00 A0                    6 	.word STEP_IDX 
      002FC3                       4453 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002FC3 2F BC                    1 	.word LINK 
                           002FC5     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      002FC5                          3 SPIWR:
      002FC5 05                       4 	.byte 5 	
      002FC6 53 50 49 57 52           5 	.ascii "SPIWR"
      002FCB 00 9E                    6 	.word SPIWR_IDX 
      002FCD                       4454 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      002FCD 2F C5                    1 	.word LINK 
                           002FCF     2 	LINK=.
      002FCF                          3 SPISEL:
      002FCF 06                       4 	.byte 6 	
      002FD0 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002FD6 00 9C                    6 	.word SPISEL_IDX 
      002FD8                       4455 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      002FD8 2F CF                    1 	.word LINK 
                           002FDA     2 	LINK=.
      002FDA                          3 SPIRD:
      002FDA 45                       4 	.byte 5+F_IFUNC 	
      002FDB 53 50 49 52 44           5 	.ascii "SPIRD"
      002FE0 00 98                    6 	.word SPIRD_IDX 
      002FE2                       4456 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      002FE2 2F DA                    1 	.word LINK 
                           002FE4     2 	LINK=.
      002FE4                          3 SPIEN:
      002FE4 05                       4 	.byte 5 	
      002FE5 53 50 49 45 4E           5 	.ascii "SPIEN"
      002FEA 00 9A                    6 	.word SPIEN_IDX 
      002FEC                       4457 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      002FEC 2F E4                    1 	.word LINK 
                           002FEE     2 	LINK=.
      002FEE                          3 SLEEP:
      002FEE 05                       4 	.byte 5 	
      002FEF 53 4C 45 45 50           5 	.ascii "SLEEP"
      002FF4 00 96                    6 	.word SLEEP_IDX 
      002FF6                       4458     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      002FF6 2F EE                    1 	.word LINK 
                           002FF8     2 	LINK=.
      002FF8                          3 SIZE:
      002FF8 04                       4 	.byte 4 	
      002FF9 53 49 5A 45              5 	.ascii "SIZE"
      002FFD 00 BE                    6 	.word SIZE_IDX 
      002FFF                       4459 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      002FFF 2F F8                    1 	.word LINK 
                           003001     2 	LINK=.
      003001                          3 SAVE:
      003001 04                       4 	.byte 4 	
      003002 53 41 56 45              5 	.ascii "SAVE"
      003006 00 34                    6 	.word SAVE_IDX 
      003008                       4460 	_dict_entry 3,RUN,RUN_IDX;run
      003008 30 01                    1 	.word LINK 
                           00300A     2 	LINK=.
      00300A                          3 RUN:
      00300A 03                       4 	.byte 3 	
      00300B 52 55 4E                 5 	.ascii "RUN"
      00300E 00 92                    6 	.word RUN_IDX 
      003010                       4461 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      003010 30 0A                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



                           003012     2 	LINK=.
      003012                          3 RSHIFT:
      003012 46                       4 	.byte 6+F_IFUNC 	
      003013 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      003019 00 90                    6 	.word RSHIFT_IDX 
      00301B                       4462 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      00301B 30 12                    1 	.word LINK 
                           00301D     2 	LINK=.
      00301D                          3 RND:
      00301D 43                       4 	.byte 3+F_IFUNC 	
      00301E 52 4E 44                 5 	.ascii "RND"
      003021 00 8E                    6 	.word RND_IDX 
      003023                       4463 	_dict_entry,6,RETURN,RET_IDX;return 
      003023 30 1D                    1 	.word LINK 
                           003025     2 	LINK=.
      003025                          3 RETURN:
      003025 06                       4 	.byte 6 	
      003026 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00302C 00 8C                    6 	.word RET_IDX 
      00302E                       4464 	_dict_entry,7,RESTORE,REST_IDX;restore 
      00302E 30 25                    1 	.word LINK 
                           003030     2 	LINK=.
      003030                          3 RESTORE:
      003030 07                       4 	.byte 7 	
      003031 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003038 00 8A                    6 	.word REST_IDX 
      00303A                       4465 	_dict_entry 3,REM,REM_IDX;remark 
      00303A 30 30                    1 	.word LINK 
                           00303C     2 	LINK=.
      00303C                          3 REM:
      00303C 03                       4 	.byte 3 	
      00303D 52 45 4D                 5 	.ascii "REM"
      003040 00 88                    6 	.word REM_IDX 
      003042                       4466 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      003042 30 3C                    1 	.word LINK 
                           003044     2 	LINK=.
      003044                          3 REBOOT:
      003044 06                       4 	.byte 6 	
      003045 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00304B 00 86                    6 	.word RBT_IDX 
      00304D                       4467 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      00304D 30 44                    1 	.word LINK 
                           00304F     2 	LINK=.
      00304F                          3 READ:
      00304F 44                       4 	.byte 4+F_IFUNC 	
      003050 52 45 41 44              5 	.ascii "READ"
      003054 00 84                    6 	.word READ_IDX 
      003056                       4468 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      003056 30 4F                    1 	.word LINK 
                           003058     2 	LINK=.
      003058                          3 QKEY:
      003058 44                       4 	.byte 4+F_IFUNC 	
      003059 51 4B 45 59              5 	.ascii "QKEY"
      00305D 00 82                    6 	.word QKEY_IDX 
      00305F                       4469 	_dict_entry,5+F_IFUNC,PORTI,PRTI_IDX;const_porti 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00305F 30 58                    1 	.word LINK 
                           003061     2 	LINK=.
      003061                          3 PORTI:
      003061 45                       4 	.byte 5+F_IFUNC 	
      003062 50 4F 52 54 49           5 	.ascii "PORTI"
      003067 00 80                    6 	.word PRTI_IDX 
      003069                       4470 	_dict_entry,5+F_IFUNC,PORTH,PRTH_IDX;const_porth 
      003069 30 61                    1 	.word LINK 
                           00306B     2 	LINK=.
      00306B                          3 PORTH:
      00306B 45                       4 	.byte 5+F_IFUNC 	
      00306C 50 4F 52 54 48           5 	.ascii "PORTH"
      003071 00 7E                    6 	.word PRTH_IDX 
      003073                       4471 	_dict_entry,5+F_IFUNC,PORTG,PRTG_IDX;const_portg 
      003073 30 6B                    1 	.word LINK 
                           003075     2 	LINK=.
      003075                          3 PORTG:
      003075 45                       4 	.byte 5+F_IFUNC 	
      003076 50 4F 52 54 47           5 	.ascii "PORTG"
      00307B 00 7C                    6 	.word PRTG_IDX 
      00307D                       4472 	_dict_entry,5+F_IFUNC,PORTF,PRTF_IDX;const_portf
      00307D 30 75                    1 	.word LINK 
                           00307F     2 	LINK=.
      00307F                          3 PORTF:
      00307F 45                       4 	.byte 5+F_IFUNC 	
      003080 50 4F 52 54 46           5 	.ascii "PORTF"
      003085 00 7A                    6 	.word PRTF_IDX 
      003087                       4473 	_dict_entry,5+F_IFUNC,PORTE,PRTE_IDX;const_porte
      003087 30 7F                    1 	.word LINK 
                           003089     2 	LINK=.
      003089                          3 PORTE:
      003089 45                       4 	.byte 5+F_IFUNC 	
      00308A 50 4F 52 54 45           5 	.ascii "PORTE"
      00308F 00 78                    6 	.word PRTE_IDX 
      003091                       4474 	_dict_entry,5+F_IFUNC,PORTD,PRTD_IDX;const_portd
      003091 30 89                    1 	.word LINK 
                           003093     2 	LINK=.
      003093                          3 PORTD:
      003093 45                       4 	.byte 5+F_IFUNC 	
      003094 50 4F 52 54 44           5 	.ascii "PORTD"
      003099 00 76                    6 	.word PRTD_IDX 
      00309B                       4475 	_dict_entry,5+F_IFUNC,PORTC,PRTC_IDX;const_portc
      00309B 30 93                    1 	.word LINK 
                           00309D     2 	LINK=.
      00309D                          3 PORTC:
      00309D 45                       4 	.byte 5+F_IFUNC 	
      00309E 50 4F 52 54 43           5 	.ascii "PORTC"
      0030A3 00 74                    6 	.word PRTC_IDX 
      0030A5                       4476 	_dict_entry,5+F_IFUNC,PORTB,PRTB_IDX;const_portb
      0030A5 30 9D                    1 	.word LINK 
                           0030A7     2 	LINK=.
      0030A7                          3 PORTB:
      0030A7 45                       4 	.byte 5+F_IFUNC 	
      0030A8 50 4F 52 54 42           5 	.ascii "PORTB"
      0030AD 00 72                    6 	.word PRTB_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0030AF                       4477 	_dict_entry,5+F_IFUNC,PORTA,PRTA_IDX;const_porta 
      0030AF 30 A7                    1 	.word LINK 
                           0030B1     2 	LINK=.
      0030B1                          3 PORTA:
      0030B1 45                       4 	.byte 5+F_IFUNC 	
      0030B2 50 4F 52 54 41           5 	.ascii "PORTA"
      0030B7 00 70                    6 	.word PRTA_IDX 
      0030B9                       4478 	_dict_entry 5,PRINT,PRT_IDX;print 
      0030B9 30 B1                    1 	.word LINK 
                           0030BB     2 	LINK=.
      0030BB                          3 PRINT:
      0030BB 05                       4 	.byte 5 	
      0030BC 50 52 49 4E 54           5 	.ascii "PRINT"
      0030C1 00 6E                    6 	.word PRT_IDX 
      0030C3                       4479 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      0030C3 30 BB                    1 	.word LINK 
                           0030C5     2 	LINK=.
      0030C5                          3 POUT:
      0030C5 44                       4 	.byte 4+F_IFUNC 	
      0030C6 50 4F 55 54              5 	.ascii "POUT"
      0030CA 00 6C                    6 	.word POUT_IDX 
      0030CC                       4480 	_dict_entry,4,POKE,POKE_IDX;poke 
      0030CC 30 C5                    1 	.word LINK 
                           0030CE     2 	LINK=.
      0030CE                          3 POKE:
      0030CE 04                       4 	.byte 4 	
      0030CF 50 4F 4B 45              5 	.ascii "POKE"
      0030D3 00 6A                    6 	.word POKE_IDX 
      0030D5                       4481 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      0030D5 30 CE                    1 	.word LINK 
                           0030D7     2 	LINK=.
      0030D7                          3 PMODE:
      0030D7 05                       4 	.byte 5 	
      0030D8 50 4D 4F 44 45           5 	.ascii "PMODE"
      0030DD 00 64                    6 	.word PMODE_IDX 
      0030DF                       4482 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      0030DF 30 D7                    1 	.word LINK 
                           0030E1     2 	LINK=.
      0030E1                          3 PINP:
      0030E1 44                       4 	.byte 4+F_IFUNC 	
      0030E2 50 49 4E 50              5 	.ascii "PINP"
      0030E6 00 68                    6 	.word PINP_IDX 
      0030E8                       4483 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      0030E8 30 E1                    1 	.word LINK 
                           0030EA     2 	LINK=.
      0030EA                          3 PEEK:
      0030EA 44                       4 	.byte 4+F_IFUNC 	
      0030EB 50 45 45 4B              5 	.ascii "PEEK"
      0030EF 00 66                    6 	.word PEEK_IDX 
      0030F1                       4484 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      0030F1 30 EA                    1 	.word LINK 
                           0030F3     2 	LINK=.
      0030F3                          3 PAUSE:
      0030F3 05                       4 	.byte 5 	
      0030F4 50 41 55 53 45           5 	.ascii "PAUSE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      0030F9 00 62                    6 	.word PAUSE_IDX 
      0030FB                       4485 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      0030FB 30 F3                    1 	.word LINK 
                           0030FD     2 	LINK=.
      0030FD                          3 PAD:
      0030FD 43                       4 	.byte 3+F_IFUNC 	
      0030FE 50 41 44                 5 	.ascii "PAD"
      003101 00 60                    6 	.word PAD_IDX 
      003103                       4486 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      003103 30 FD                    1 	.word LINK 
                           003105     2 	LINK=.
      003105                          3 OR:
      003105 42                       4 	.byte 2+F_IFUNC 	
      003106 4F 52                    5 	.ascii "OR"
      003108 00 5E                    6 	.word OR_IDX 
      00310A                       4487 	_dict_entry,2,ON,ON_IDX; cmd_on 
      00310A 31 05                    1 	.word LINK 
                           00310C     2 	LINK=.
      00310C                          3 ON:
      00310C 02                       4 	.byte 2 	
      00310D 4F 4E                    5 	.ascii "ON"
      00310F 00 C0                    6 	.word ON_IDX 
      003111                       4488 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      003111 31 0C                    1 	.word LINK 
                           003113     2 	LINK=.
      003113                          3 ODR:
      003113 43                       4 	.byte 3+F_IFUNC 	
      003114 4F 44 52                 5 	.ascii "ODR"
      003117 00 5C                    6 	.word ODR_IDX 
      003119                       4489 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      003119 31 13                    1 	.word LINK 
                           00311B     2 	LINK=.
      00311B                          3 NOT:
      00311B 43                       4 	.byte 3+F_IFUNC 	
      00311C 4E 4F 54                 5 	.ascii "NOT"
      00311F 00 5A                    6 	.word NOT_IDX 
      003121                       4490 	_dict_entry,4,NEXT,NEXT_IDX;next 
      003121 31 1B                    1 	.word LINK 
                           003123     2 	LINK=.
      003123                          3 NEXT:
      003123 04                       4 	.byte 4 	
      003124 4E 45 58 54              5 	.ascii "NEXT"
      003128 00 56                    6 	.word NEXT_IDX 
      00312A                       4491 	_dict_entry,3,NEW,NEW_IDX;new
      00312A 31 23                    1 	.word LINK 
                           00312C     2 	LINK=.
      00312C                          3 NEW:
      00312C 03                       4 	.byte 3 	
      00312D 4E 45 57                 5 	.ascii "NEW"
      003130 00 58                    6 	.word NEW_IDX 
                                   4492 ;	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      003132                       4493 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      003132 31 2C                    1 	.word LINK 
                           003134     2 	LINK=.
      003134                          3 LSHIFT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003134 46                       4 	.byte 6+F_IFUNC 	
      003135 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00313B 00 54                    6 	.word LSHIFT_IDX 
      00313D                       4494 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      00313D 31 34                    1 	.word LINK 
                           00313F     2 	LINK=.
      00313F                          3 LOG:
      00313F 43                       4 	.byte 3+F_IFUNC 	
      003140 4C 4F 47                 5 	.ascii "LOG"
      003143 00 52                    6 	.word LOG_IDX 
      003145                       4495 	_dict_entry 4,LIST,LIST_IDX;list
      003145 31 3F                    1 	.word LINK 
                           003147     2 	LINK=.
      003147                          3 LIST:
      003147 04                       4 	.byte 4 	
      003148 4C 49 53 54              5 	.ascii "LIST"
      00314C 00 50                    6 	.word LIST_IDX 
      00314E                       4496 	_dict_entry 3,LET,LET_IDX;let 
      00314E 31 47                    1 	.word LINK 
                           003150     2 	LINK=.
      003150                          3 LET:
      003150 03                       4 	.byte 3 	
      003151 4C 45 54                 5 	.ascii "LET"
      003154 00 4E                    6 	.word LET_IDX 
      003156                       4497 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      003156 31 50                    1 	.word LINK 
                           003158     2 	LINK=.
      003158                          3 KEY:
      003158 83                       4 	.byte 3+F_CFUNC 	
      003159 4B 45 59                 5 	.ascii "KEY"
      00315C 00 4C                    6 	.word KEY_IDX 
      00315E                       4498 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      00315E 31 58                    1 	.word LINK 
                           003160     2 	LINK=.
      003160                          3 IWDGREF:
      003160 07                       4 	.byte 7 	
      003161 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003168 00 4A                    6 	.word IWDGREF_IDX 
      00316A                       4499 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      00316A 31 60                    1 	.word LINK 
                           00316C     2 	LINK=.
      00316C                          3 IWDGEN:
      00316C 06                       4 	.byte 6 	
      00316D 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003173 00 48                    6 	.word IWDGEN_IDX 
      003175                       4500 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      003175 31 6C                    1 	.word LINK 
                           003177     2 	LINK=.
      003177                          3 INVERT:
      003177 46                       4 	.byte 6+F_IFUNC 	
      003178 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00317E 00 46                    6 	.word INVERT_IDX 
      003180                       4501 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      003180 31 77                    1 	.word LINK 
                           003182     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      003182                          3 INPUT:
      003182 05                       4 	.byte 5 	
      003183 49 4E 50 55 54           5 	.ascii "INPUT"
      003188 00 44                    6 	.word INPUT_IDX 
      00318A                       4502 	_dict_entry,2,IF,IF_IDX;if 
      00318A 31 82                    1 	.word LINK 
                           00318C     2 	LINK=.
      00318C                          3 IF:
      00318C 02                       4 	.byte 2 	
      00318D 49 46                    5 	.ascii "IF"
      00318F 00 42                    6 	.word IF_IDX 
      003191                       4503 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      003191 31 8C                    1 	.word LINK 
                           003193     2 	LINK=.
      003193                          3 IDR:
      003193 43                       4 	.byte 3+F_IFUNC 	
      003194 49 44 52                 5 	.ascii "IDR"
      003197 00 40                    6 	.word IDR_IDX 
      003199                       4504 	_dict_entry,3,HEX,HEX_IDX;hex_base
      003199 31 93                    1 	.word LINK 
                           00319B     2 	LINK=.
      00319B                          3 HEX:
      00319B 03                       4 	.byte 3 	
      00319C 48 45 58                 5 	.ascii "HEX"
      00319F 00 3E                    6 	.word HEX_IDX 
      0031A1                       4505 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      0031A1 31 9B                    1 	.word LINK 
                           0031A3     2 	LINK=.
      0031A3                          3 GPIO:
      0031A3 44                       4 	.byte 4+F_IFUNC 	
      0031A4 47 50 49 4F              5 	.ascii "GPIO"
      0031A8 00 3C                    6 	.word GPIO_IDX 
      0031AA                       4506 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0031AA 31 A3                    1 	.word LINK 
                           0031AC     2 	LINK=.
      0031AC                          3 GOTO:
      0031AC 04                       4 	.byte 4 	
      0031AD 47 4F 54 4F              5 	.ascii "GOTO"
      0031B1 00 3A                    6 	.word GOTO_IDX 
      0031B3                       4507 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0031B3 31 AC                    1 	.word LINK 
                           0031B5     2 	LINK=.
      0031B5                          3 GOSUB:
      0031B5 05                       4 	.byte 5 	
      0031B6 47 4F 53 55 42           5 	.ascii "GOSUB"
      0031BB 00 38                    6 	.word GOSUB_IDX 
      0031BD                       4508 	_dict_entry,3,GET,GET_IDX; cmd_get 
      0031BD 31 B5                    1 	.word LINK 
                           0031BF     2 	LINK=.
      0031BF                          3 GET:
      0031BF 03                       4 	.byte 3 	
      0031C0 47 45 54                 5 	.ascii "GET"
      0031C3 00 C2                    6 	.word GET_IDX 
      0031C5                       4509 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      0031C5 31 BF                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



                           0031C7     2 	LINK=.
      0031C7                          3 FREE:
      0031C7 44                       4 	.byte 4+F_IFUNC 	
      0031C8 46 52 45 45              5 	.ascii "FREE"
      0031CC 00 94                    6 	.word FREE_IDX 
      0031CE                       4510 	_dict_entry,3,FOR,FOR_IDX;for 
      0031CE 31 C7                    1 	.word LINK 
                           0031D0     2 	LINK=.
      0031D0                          3 FOR:
      0031D0 03                       4 	.byte 3 	
      0031D1 46 4F 52                 5 	.ascii "FOR"
      0031D4 00 36                    6 	.word FOR_IDX 
      0031D6                       4511 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      0031D6 31 D0                    1 	.word LINK 
                           0031D8     2 	LINK=.
      0031D8                          3 FCPU:
      0031D8 04                       4 	.byte 4 	
      0031D9 46 43 50 55              5 	.ascii "FCPU"
      0031DD 00 32                    6 	.word FCPU_IDX 
      0031DF                       4512 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      0031DF 31 D8                    1 	.word LINK 
                           0031E1     2 	LINK=.
      0031E1                          3 ERASE:
      0031E1 05                       4 	.byte 5 	
      0031E2 45 52 41 53 45           5 	.ascii "ERASE"
      0031E7 00 30                    6 	.word ERASE_IDX 
      0031E9                       4513 	_dict_entry,3,END,END_IDX;cmd_end  
      0031E9 31 E1                    1 	.word LINK 
                           0031EB     2 	LINK=.
      0031EB                          3 END:
      0031EB 03                       4 	.byte 3 	
      0031EC 45 4E 44                 5 	.ascii "END"
      0031EF 00 2E                    6 	.word END_IDX 
      0031F1                       4514 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      0031F1 31 EB                    1 	.word LINK 
                           0031F3     2 	LINK=.
      0031F3                          3 EEPROM:
      0031F3 46                       4 	.byte 6+F_IFUNC 	
      0031F4 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0031FA 00 2C                    6 	.word EEPROM_IDX 
      0031FC                       4515 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      0031FC 31 F3                    1 	.word LINK 
                           0031FE     2 	LINK=.
      0031FE                          3 EEFREE:
      0031FE 46                       4 	.byte 6+F_IFUNC 	
      0031FF 45 45 46 52 45 45        5 	.ascii "EEFREE"
      003205 00 C6                    6 	.word EEFREE_IDX 
      003207                       4516 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      003207 31 FE                    1 	.word LINK 
                           003209     2 	LINK=.
      003209                          3 EDIT:
      003209 04                       4 	.byte 4 	
      00320A 45 44 49 54              5 	.ascii "EDIT"
      00320E 00 2A                    6 	.word EDIT_IDX 
      003210                       4517 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003210 32 09                    1 	.word LINK 
                           003212     2 	LINK=.
      003212                          3 DWRITE:
      003212 06                       4 	.byte 6+F_CMD 	
      003213 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003219 00 28                    6 	.word DWRITE_IDX 
      00321B                       4518 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      00321B 32 12                    1 	.word LINK 
                           00321D     2 	LINK=.
      00321D                          3 DREAD:
      00321D 45                       4 	.byte 5+F_IFUNC 	
      00321E 44 52 45 41 44           5 	.ascii "DREAD"
      003223 00 26                    6 	.word DREAD_IDX 
      003225                       4519 	_dict_entry,2,DO,DO_IDX;do_loop
      003225 32 1D                    1 	.word LINK 
                           003227     2 	LINK=.
      003227                          3 DO:
      003227 02                       4 	.byte 2 	
      003228 44 4F                    5 	.ascii "DO"
      00322A 00 24                    6 	.word DO_IDX 
      00322C                       4520 	_dict_entry,3,DEC,DEC_IDX;dec_base
      00322C 32 27                    1 	.word LINK 
                           00322E     2 	LINK=.
      00322E                          3 DEC:
      00322E 03                       4 	.byte 3 	
      00322F 44 45 43                 5 	.ascii "DEC"
      003232 00 22                    6 	.word DEC_IDX 
      003234                       4521 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      003234 32 2E                    1 	.word LINK 
                           003236     2 	LINK=.
      003236                          3 DDR:
      003236 43                       4 	.byte 3+F_IFUNC 	
      003237 44 44 52                 5 	.ascii "DDR"
      00323A 00 20                    6 	.word DDR_IDX 
      00323C                       4522 	_dict_entry,4,DATA,DATA_IDX;data  
      00323C 32 36                    1 	.word LINK 
                           00323E     2 	LINK=.
      00323E                          3 DATA:
      00323E 04                       4 	.byte 4 	
      00323F 44 41 54 41              5 	.ascii "DATA"
      003243 00 1E                    6 	.word DATA_IDX 
      003245                       4523 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      003245 32 3E                    1 	.word LINK 
                           003247     2 	LINK=.
      003247                          3 CRL:
      003247 43                       4 	.byte 3+F_IFUNC 	
      003248 43 52 4C                 5 	.ascii "CRL"
      00324B 00 1C                    6 	.word CRL_IDX 
      00324D                       4524 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      00324D 32 47                    1 	.word LINK 
                           00324F     2 	LINK=.
      00324F                          3 CRH:
      00324F 43                       4 	.byte 3+F_IFUNC 	
      003250 43 52 48                 5 	.ascii "CRH"
      003253 00 1A                    6 	.word CRH_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      003255                       4525 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      003255 32 4F                    1 	.word LINK 
                           003257     2 	LINK=.
      003257                          3 CONST:
      003257 05                       4 	.byte 5 	
      003258 43 4F 4E 53 54           5 	.ascii "CONST"
      00325D 00 C4                    6 	.word CONST_IDX 
      00325F                       4526 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      00325F 32 57                    1 	.word LINK 
                           003261     2 	LINK=.
      003261                          3 CHAR:
      003261 84                       4 	.byte 4+F_CFUNC 	
      003262 43 48 41 52              5 	.ascii "CHAR"
      003266 00 18                    6 	.word CHAR_IDX 
      003268                       4527 	_dict_entry,3,BYE,BYE_IDX;bye 
      003268 32 61                    1 	.word LINK 
                           00326A     2 	LINK=.
      00326A                          3 BYE:
      00326A 03                       4 	.byte 3 	
      00326B 42 59 45                 5 	.ascii "BYE"
      00326E 00 16                    6 	.word BYE_IDX 
      003270                       4528 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      003270 32 6A                    1 	.word LINK 
                           003272     2 	LINK=.
      003272                          3 BTOGL:
      003272 05                       4 	.byte 5 	
      003273 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003278 00 14                    6 	.word BTOGL_IDX 
      00327A                       4529 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00327A 32 72                    1 	.word LINK 
                           00327C     2 	LINK=.
      00327C                          3 BTEST:
      00327C 45                       4 	.byte 5+F_IFUNC 	
      00327D 42 54 45 53 54           5 	.ascii "BTEST"
      003282 00 12                    6 	.word BTEST_IDX 
      003284                       4530 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      003284 32 7C                    1 	.word LINK 
                           003286     2 	LINK=.
      003286                          3 BSET:
      003286 04                       4 	.byte 4 	
      003287 42 53 45 54              5 	.ascii "BSET"
      00328B 00 10                    6 	.word BSET_IDX 
      00328D                       4531 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      00328D 32 86                    1 	.word LINK 
                           00328F     2 	LINK=.
      00328F                          3 BRES:
      00328F 04                       4 	.byte 4 	
      003290 42 52 45 53              5 	.ascii "BRES"
      003294 00 0E                    6 	.word BRES_IDX 
      003296                       4532 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      003296 32 8F                    1 	.word LINK 
                           003298     2 	LINK=.
      003298                          3 BIT:
      003298 43                       4 	.byte 3+F_IFUNC 	
      003299 42 49 54                 5 	.ascii "BIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      00329C 00 0C                    6 	.word BIT_IDX 
      00329E                       4533 	_dict_entry,3,AWU,AWU_IDX;awu 
      00329E 32 98                    1 	.word LINK 
                           0032A0     2 	LINK=.
      0032A0                          3 AWU:
      0032A0 03                       4 	.byte 3 	
      0032A1 41 57 55                 5 	.ascii "AWU"
      0032A4 00 0A                    6 	.word AWU_IDX 
      0032A6                       4534 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0032A6 32 A0                    1 	.word LINK 
                           0032A8     2 	LINK=.
      0032A8                          3 ASC:
      0032A8 43                       4 	.byte 3+F_IFUNC 	
      0032A9 41 53 43                 5 	.ascii "ASC"
      0032AC 00 08                    6 	.word ASC_IDX 
      0032AE                       4535 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0032AE 32 A8                    1 	.word LINK 
                           0032B0     2 	LINK=.
      0032B0                          3 AND:
      0032B0 43                       4 	.byte 3+F_IFUNC 	
      0032B1 41 4E 44                 5 	.ascii "AND"
      0032B4 00 06                    6 	.word AND_IDX 
      0032B6                       4536 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0032B6 32 B0                    1 	.word LINK 
                           0032B8     2 	LINK=.
      0032B8                          3 ADCREAD:
      0032B8 47                       4 	.byte 7+F_IFUNC 	
      0032B9 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0032C0 00 04                    6 	.word ADCREAD_IDX 
      0032C2                       4537 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      0032C2 32 B8                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 ADCON:
      0032C4 05                       4 	.byte 5 	
      0032C5 41 44 43 4F 4E           5 	.ascii "ADCON"
      0032CA 00 02                    6 	.word ADCON_IDX 
      0032CC                       4538 kword_dict::
      0032CC                       4539 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      0032CC 32 C4                    1 	.word LINK 
                           0032CE     2 	LINK=.
      0032CE                          3 ABS:
      0032CE 43                       4 	.byte 3+F_IFUNC 	
      0032CF 41 42 53                 5 	.ascii "ABS"
      0032D2 00 00                    6 	.word ABS_IDX 
                                   4540 
                                   4541 ;comands and fonctions address table 	
      0032D4                       4542 code_addr::
      0032D4 29 85 24 DA 25 2A 29  4543 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             9C 28 23 29 2C 2C D0
      0032E2 20 91 20 6F 20 D6 20  4544 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             B4 28 F7 28 0C 2D 9A
      0032F0 2D 95 2D AE 2D 90 1B  4545 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             29 2D 0C 25 66 25 9D
      0032FE 1E 92 2D A9 24 46 26  4546 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             3E 2A 87 26 DA 21 70
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



             23 A6 23 8C 28 73
      003312 1B 24 2D 8B 21 4F 1F  4547 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             8F 2C F6 2C 60 2C 9E
             28 62
      003322 1B 82 1D ED 2C A3 2A  4548 	.word let,list,log2,lshift,next,new ; 40..47
             2D 22 1C 26 34
      00332E 2C 41 2D 86 29 C9 2F  4549 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             2F 29 0B 2A 96 21 2E
             2D A4
      00333E 21 0D 2D 9F 1E FA 2D  4550 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             59 2D 5E 2D 63 2D 68
             2D 6D
      00334E 2D 72 2D 77 2D 7C 2D  4551 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             81 28 66 2E 1F 00 C3
             20 2C
      00335E 2D DF 23 CC 2B 23 2A  4552 	.word restore,return, random,rshift,run,free ; 72..79
             5A 23 EA 1B 2E
      00336A 29 00 2F 11 2E 79 2F  4553 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             18 2E F1 21 DA 25 E8
             29 7E
      00337A 2C 24 2C 3B 21 9A 24  4554 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             83 1B 77 28 A3 2D 1F
             28 B8
      00338A 20 32 2B BE 27 C9 29  4555 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             FB 1B 4A 23 00 24 4D
             1C AD
      00339A 1C 40 00 00           4556 	.word func_eefree,0 
                                   4557 
                                   4558 
                                   4559 
                                   4560 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      00339E                         30 test:
      00339E                         31     _vars VSIZE 
      00339E 52 08            [ 2]    1     sub sp,#VSIZE 
      0033A0 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0033A3 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0033A5 CE 00 0F         [ 2]   34     ldw x,ticks 
      0033A8 1F 01            [ 2]   35     ldw (T,sp),x
      0033AA                         36 1$: ; test add24 
      0033AA A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0033AC AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0033AF C7 00 0C         [ 1]   39     ld acc24,a 
      0033B2 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0033B5 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0033B7 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0033BA CD 01 6A         [ 4]   43     call add24 
      0033BD 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0033BF 1D 00 01         [ 2]   45     subw x,#1
      0033C2 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0033C4 26 E4            [ 1]   47     jrne 1$
      0033C6 CD 17 FD         [ 4]   48     call prt_acc24
      0033C9 A6 20            [ 1]   49     ld a,#SPACE 
      0033CB CD 09 45         [ 4]   50     call putc 
      0033CE CE 00 0F         [ 2]   51     ldw x,ticks 
      0033D1 72 F0 01         [ 2]   52     subw x,(T,sp)
      0033D4 CD 17 E6         [ 4]   53     call prt_i16  
      0033D7 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0033D9 CD 09 45         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0033DC CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0033DF 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0033E1 CE 00 0F         [ 2]   60     ldw x,ticks 
      0033E4 1F 01            [ 2]   61     ldw (T,sp),x 
      0033E6                         62 2$: 
      0033E6 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0033E8 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0033EB C7 00 0C         [ 1]   65     ld acc24,a 
      0033EE CF 00 0D         [ 2]   66     ldw acc24+1,x  
      0033F1 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      0033F3 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      0033F6 CD 02 5E         [ 4]   69     call mul24 
      0033F9 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      0033FB 1D 00 01         [ 2]   71     subw x,#1
      0033FE 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003400 26 E4            [ 1]   73     jrne 2$ 
      003402 CD 17 FD         [ 4]   74    call prt_acc24 
      003405 A6 20            [ 1]   75    ld a,#SPACE 
      003407 CD 09 45         [ 4]   76    call putc 
      00340A CE 00 0F         [ 2]   77     ldw x,ticks 
      00340D 72 F0 01         [ 2]   78     subw x,(T,sp)
      003410 CD 17 E6         [ 4]   79     call prt_i16 
      003413 A6 0D            [ 1]   80     ld a,#CR 
      003415 CD 09 45         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      003418 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00341B 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      00341D CE 00 0F         [ 2]   85     ldw x,ticks 
      003420 1F 01            [ 2]   86     ldw (T,sp),x 
      003422                         87 3$: 
      003422 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003424 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003427 C7 00 0C         [ 1]   90     ld acc24,a 
      00342A CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00342D A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      00342F AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003432 CD 02 5E         [ 4]   94     call mul24 
      003435 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003437 1D 00 01         [ 2]   96     subw x,#1
      00343A 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00343C 26 E4            [ 1]   98     jrne 3$ 
      00343E CD 17 FD         [ 4]   99     call prt_acc24    
      003441 A6 20            [ 1]  100     ld a,#SPACE 
      003443 CD 09 45         [ 4]  101     call putc 
      003446 CE 00 0F         [ 2]  102     ldw x,ticks 
      003449 72 F0 01         [ 2]  103     subw x,(T,sp)
      00344C CD 17 E6         [ 4]  104     call prt_i16 
      00344F A6 0D            [ 1]  105     ld a,#CR 
      003451 CD 09 45         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003454 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003457 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003459 CE 00 0F         [ 2]  110     ldw x,ticks 
      00345C 1F 01            [ 2]  111     ldw (T,sp),x 
      00345E                        112 4$:
      00345E A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003460 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003463 C7 00 0C         [ 1]  115     ld acc24,a 
      003466 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      003469 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      00346B AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      00346E CD 02 5E         [ 4]  119     call mul24 
      003471 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003473 1D 00 01         [ 2]  121     subw x,#1
      003476 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003478 26 E4            [ 1]  123     jrne 4$ 
      00347A CD 17 FD         [ 4]  124     call prt_acc24 
      00347D A6 20            [ 1]  125     ld a,#SPACE 
      00347F CD 09 45         [ 4]  126     call putc 
      003482 CE 00 0F         [ 2]  127     ldw x,ticks 
      003485 72 F0 01         [ 2]  128     subw x,(T,sp)
      003488 CD 17 E6         [ 4]  129     call prt_i16 
      00348B A6 0D            [ 1]  130     ld a,#CR 
      00348D CD 09 45         [ 4]  131     call putc 
                                    132 ; test abs24 
      003490 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      003493 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      003495 CE 00 0F         [ 2]  135     ldw x,ticks 
      003498 1F 01            [ 2]  136     ldw (T,sp),x 
      00349A                        137 5$: 
      00349A A6 FF            [ 1]  138     ld a,#0xff
      00349C AE FF FF         [ 2]  139     ldw x,#0xffff
      00349F CD 01 E0         [ 4]  140     call abs24 
      0034A2 C7 00 0C         [ 1]  141     ld acc24,a 
      0034A5 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0034A8 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0034AA 1D 00 01         [ 2]  144     subw x,#1
      0034AD 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0034AF 26 E9            [ 1]  146     jrne 5$ 
      0034B1 CD 17 FD         [ 4]  147     call prt_acc24 
      0034B4 A6 20            [ 1]  148     ld a,#SPACE 
      0034B6 CD 09 45         [ 4]  149     call putc 
      0034B9 CE 00 0F         [ 2]  150     ldw x,ticks 
      0034BC 72 F0 01         [ 2]  151     subw x,(T,sp)
      0034BF CD 17 E6         [ 4]  152     call prt_i16 
      0034C2                        153 6$:
      0034C2 A6 0D            [ 1]  154     ld a,#CR 
      0034C4 CD 09 45         [ 4]  155     call putc 
      0034C7 CD 35 0D         [ 4]  156     call read_integer 
      0034CA 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0034CF 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0034D4 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0034D9 CD 35 0D         [ 4]  160     call read_integer 
      0034DC C6 00 0C         [ 1]  161     ld a,acc24 
      0034DF CE 00 0D         [ 2]  162     ldw x,acc16 
      0034E2 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      0034E7 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      0034EC 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      0034F1 CD 03 28         [ 4]  166     call div24 
      0034F4 88               [ 1]  167     push a 
      0034F5 89               [ 2]  168     pushw x 
      0034F6 CD 17 FD         [ 4]  169     call prt_acc24 
      0034F9 A6 20            [ 1]  170     ld a,#SPACE 
      0034FB CD 09 45         [ 4]  171     call putc 
      0034FE 85               [ 2]  172     popw x
      0034FF CF 00 0D         [ 2]  173     ldw acc16,x  
      003502 32 00 0C         [ 1]  174     pop acc24 
      003505 CD 17 FD         [ 4]  175     call prt_acc24
      003508 20 B8            [ 2]  176     jra 6$
      00350A                        177     _drop VSIZE 
      00350A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00350C 81               [ 4]  178     ret 
                                    179 
                                    180 
      00350D                        181 read_integer:
      00350D A6 3F            [ 1]  182     ld a,#'? 
      00350F CD 09 45         [ 4]  183     call putc  
      003512 72 5F 00 03      [ 1]  184 	clr count  
      003516 CD 0A A7         [ 4]  185 	call readln 
      003519 AE 16 68         [ 2]  186 	ldw x,#tib 
      00351C 3B 00 03         [ 1]  187 	push count
      00351F 4B 00            [ 1]  188 	push #0 
      003521 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003524 5C               [ 1]  190 	incw x 
      003525                        191 	_drop 2 
      003525 5B 02            [ 2]    1     addw sp,#2 
      003527 72 5F 00 01      [ 1]  192 	clr in 
      00352B CD 0F 0F         [ 4]  193 	call get_token
      00352E A1 84            [ 1]  194 	cp a,#TK_INTGR
      003530 27 0F            [ 1]  195 	jreq 3$ 
      003532 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003534 CD 0F 0F         [ 4]  197 	call get_token 
      003537 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      003539 27 03            [ 1]  199 	jreq 2$
      00353B CC 16 90         [ 2]  200 	jp syntax_error
      00353E                        201 2$:
      00353E CD 02 0E         [ 4]  202 	call neg_acc24  	
      003541                        203 3$: 
      003541 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003580                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003580                         30 app_space::
      003580 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003582 00 00                   32 app_size: .word 0 
      003584                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0032CE R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0032C4 R
    ADCON_ID=  000002     |   4 ADCREAD    0032B8 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        0032B0 R   |     AND_IDX =  000006     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        0032A8 R
    ASC_IDX =  000008     |     ATTRIB  =  000002     |   4 AUTO_RUN   000157 R
  4 AWU        0032A0 R   |   4 AWUHandl   000004 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000A 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   4 BIT        003298 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BIT_IDX =  00000C     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000D 
  4 BRES       00328F R   |     BRES_IDX=  00000E     |     BS      =  000008 
  4 BSET       003286 R   |     BSET_IDX=  000010     |     BSIZE   =  000006 
  4 BTEST      00327C R   |     BTEST_ID=  000012     |   4 BTOGL      003272 R
    BTOGL_ID=  000014     |     BTW     =  000001     |     BUFPTR  =  000003 
  4 BYE        00326A R   |     BYE_IDX =  000016     |     C       =  000001 
    CAN     =  000018     |   4 CANT_DO    002771 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       003261 R
    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     COMMA   =  00002C     |   4 CONST      003257 R
  4 CONST_CO   001C2A R   |     CONST_ID=  0000C4     |     CONST_RE=  000005 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        00324F R
    CRH_IDX =  00001A     |   4 CRL        003247 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       00323E R
    DATA_IDX=  00001E     |     DBG_A   =  000008     |     DBG_CC  =  000009 
    DBG_X   =  000006     |     DBG_Y   =  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        003236 R   |     DDR_IDX =  000020     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        00322E R
    DEC_IDX =  000022     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |     DIVISOR =  000001     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  4 DO         003227 R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
    DO_IDX  =  000024     |   4 DREAD      00321D R   |     DREAD_ID=  000026 
  4 DWRITE     003212 R   |     DWRITE_I=  000028     |   4 EDIT       003209 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    EDIT_IDX=  00002A     |   4 EEFREE     0031FE R   |     EEFREE_I=  0000C6 
  4 EEPROM     0031F3 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002C     |     EEPROM_S=  000800     |     EEPTR   =  000003 
    EM      =  000019     |   4 END        0031EB R   |     END_IDX =  00002E 
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
  4 ERASE      0031E1 R   |     ERASE_ID=  000030     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_OVER=  000010     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       0031D8 R
    FCPU_IDX=  000032     |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |   4 FLASH_ME   001DCD R
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        0031D0 R   |     FOR_IDX =  000036     |   4 FREE       0031C7 R
    FREE_IDX=  000094     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   4 GET        0031BF R   |     GET_IDX =  0000C2 
  4 GOSUB      0031B5 R   |     GOSUB_ID=  000038     |   4 GOTO       0031AC R
    GOTO_IDX=  00003A     |   4 GPIO       0031A3 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_IDX=  00003C     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        00319B R
    HEX_IDX =  00003E     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        003193 R   |     IDR_IDX =  000040     |   4 IF         00318C R
    IF_IDX  =  000042     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      003182 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000044 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   4 INVERT     003177 R
    INVERT_I=  000046     |     INW     =  00000B     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   4 IWDGEN     00316C R
    IWDGEN_I=  000048     |   4 IWDGREF    003160 R   |     IWDGREF_=  00004A 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    KCHAR   =  000002     |   4 KEY        003158 R   |     KEY_END =  000083 
    KEY_IDX =  00004C     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        003150 R   |     LET_IDX =  00004E 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  0032CE R   |   4 LIST       003147 R   |     LIST_IDX=  000050 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG        00313F R   |     LOG_IDX =  000052 
    LOOP_CNT=  002710     |   4 LSHIFT     003134 R   |     LSHIFT_I=  000054 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000004 
    N2      =  000007     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        00312C R   |     NEW_IDX =  000058     |   4 NEXT       003123 R
    NEXT_IDX=  000056     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        00311B R   |     NOT_IDX =  00005A     |   4 NOT_SAVE   001EBF R
  4 NO_APP     0027B3 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        003113 R
    ODR_IDX =  00005C     |   4 ON         00310C R   |     ONOFF   =  000003 
    ON_IDX  =  0000C0     |     OP      =  000001     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         003105 R   |     OR_IDX  =  00005E     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        0030FD R   |     PAD_IDX =  000060     |     PAD_SIZE=  000080 
  4 PAUSE      0030F3 R   |     PAUSE_ID=  000062     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       0030EA R   |     PEEK_IDX=  000066     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   4 PINP       0030E1 R   |     PINP_IDX=  000068 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      0030D7 R   |     PMODE_ID=  000064 
  4 POKE       0030CE R   |     POKE_IDX=  00006A     |   4 PORTA      0030B1 R
  4 PORTB      0030A7 R   |   4 PORTC      00309D R   |   4 PORTD      003093 R
  4 PORTE      003089 R   |   4 PORTF      00307F R   |   4 PORTG      003075 R
  4 PORTH      00306B R   |   4 PORTI      003061 R   |   4 POUT       0030C5 R
    POUT_IDX=  00006C     |     PREV    =  000001     |   4 PRINT      0030BB R
    PROD    =  000001     |     PROD_SIG=  00000A     |   4 PROG_ADD   001DA3 R
  4 PROG_SIZ   001DB5 R   |     PRTA_IDX=  000070     |     PRTB_IDX=  000072 
    PRTC_IDX=  000074     |     PRTD_IDX=  000076     |     PRTE_IDX=  000078 
    PRTF_IDX=  00007A     |     PRTG_IDX=  00007C     |     PRTH_IDX=  00007E 
    PRTI_IDX=  000080     |     PRT_IDX =  00006E     |     PSIZE   =  000001 
    PSTR    =  000003     |   4 QKEY       003058 R   |     QKEY_IDX=  000082 
    QSIGN   =  000005     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
  4 RAM_MEM    001DDE R   |     RAM_SIZE=  001800     |     RBT_IDX =  000086 
  4 READ       00304F R   |     READ_IDX=  000084     |   4 REBOOT     003044 R
    RECLEN  =  000005     |   4 REG_A      000563 R   |   4 REG_CC     000567 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

  4 REG_EPC    000556 R   |   4 REG_SP     00056C R   |   4 REG_X      00055F R
  4 REG_Y      00055B R   |     RELOP   =  000001     |   4 REM        00303C R
    REM_IDX =  000088     |   4 RESTORE    003030 R   |     REST_IDX=  00008A 
    RETL1   =  000001     |   4 RETURN     003025 R   |     RET_ADDR=  000003 
    RET_BPTR=  000003     |     RET_IDX =  00008C     |     RET_INW =  000005 
  4 RND        00301D R   |     RND_IDX =  00008E     |     ROP     =  004800 
    RS      =  00001E     |   4 RSHIFT     003012 R   |     RSHIFT_I=  000090 
    RSIGN   =  000006     |     RST_SR  =  0050B3     |   4 RUN        00300A R
    RUN_IDX =  000092     |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
    R_A     =  000007     |     R_CC    =  000008     |     R_X     =  000005 
    R_Y     =  000003     |   4 SAVE       003001 R   |     SAVE_IDX=  000034 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   00276F R   |   4 SIZE       002FF8 R   |     SIZE_IDX=  0000BE 
    SKIP    =  000005     |   4 SLEEP      002FEE R   |     SLEEP_ID=  000096 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      002FE4 R   |     SPIEN_ID=  00009A     |   4 SPIRD      002FDA R
    SPIRD_ID=  000098     |   4 SPISEL     002FCF R   |     SPISEL_I=  00009C 
  4 SPIWR      002FC5 R   |     SPIWR_ID=  00009E     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  00008C     |   4 STATES     000519 R   |   4 STEP       002FBC R
    STEP_IDX=  0000A0     |   4 STOP       002FB3 R   |     STOP_IDX=  0000A2 
    STR     =  000003     |   4 STR_BYTE   001DC6 R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     T       =  000001     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TARGET  =  000001 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      002FA9 R   |     TICKS_ID=  0000A4 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    002F9D R   |   4 TIMER      002F93 R
    TIMER_ID=  0000A6     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TMROUT_I=  0000A8     |   4 TO         002F8C R   |   4 TONE       002F83 R
    TONE_IDX=  0000AC     |     TOWRITE =  000005     |     TO_IDX  =  0000AA 
  4 Timer4Up   000021 R   |   4 TrapHand   000012 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     002F78 R   |     UBOUND_I=  0000AE     |   4 UBTN_Han   000068 R
  4 UFLASH     002F6D R   |     UFLASH_I=  0000B0     |   4 UNTIL      002F63 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    UNTIL_ID=  0000B2     |     UPDATE  =  000006     |     US      =  00001F 
  4 USER_ABO   000070 R   |   4 USR        002F5B R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000B4 
  4 Uart1RxH   0008D3 R   |   4 UserButt   000044 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VSISE   =  000003     |     VSIZE   =  000008 
    VT      =  00000B     |   4 WAIT       002F52 R   |     WAIT_IDX=  0000B6 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   4 WORDS      002F48 R
    WORDS_ID=  0000B8     |   4 WRITE      002F3E R   |     WRITE_ID=  0000BA 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        002F36 R   |     XOR_IDX =  0000BC     |     XSAVE   =  000005 
    XSTACK_E=  001773     |     XSTACK_S=  00003C     |     XTEMP   =  000001 
    YSAVE   =  000007     |     YTEMP   =  000003     |   4 abs        002985 R
  4 abs24      0001E0 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   000C0E R
  4 add24      00016A R   |   4 add_char   001382 R   |   4 add_spac   00115F R
  4 analog_r   00252A R   |   4 app        003584 R   |   4 app_sign   003580 R
  4 app_size   003582 R   |   4 app_spac   003580 GR  |   4 arduino_   002B03 R
  4 arg_list   001951 R   |   5 array_si   000020 R   |   4 ascii      002823 R
  4 at_tst     000FC9 R   |   4 atoi24     001888 GR  |   4 atoi_exi   0018EE R
  4 awu        00292C R   |   4 awu02      00293F R   |   4 bad_port   00289E R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       0024A3 R
  4 beep_1kh   00247A GR  |   4 bin_exit   000E4A R   |   4 bit_and    00299C R
  4 bit_or     0029C9 R   |   4 bit_rese   002091 R   |   4 bit_set    00206F R
  4 bit_test   0020D6 R   |   4 bit_togg   0020B4 R   |   4 bit_xor    0029FB R
  4 bitmask    002CD0 R   |   4 bkslsh_t   000F76 R   |   4 bksp       0009AC R
  2 block_bu   0016B8 GR  |   4 block_er   0007C1 R   |   4 break_po   002616 R
  4 bye        0028F7 R   |   4 char       00280C R   |   4 clear_ba   0014EC R
  4 clear_bl   0026C6 R   |   4 clear_va   001444 R   |   4 clock_in   00008B R
  4 cloop_1    001CD3 R   |   4 cmd_cons   001CAD R   |   4 cmd_end    002446 R
  4 cmd_get    00244D R   |   4 cmd_itf    000571 R   |   4 cmd_line   00171F R
  4 cmd_name   0013A2 R   |   4 cmd_on     002300 R   |   4 cmd_size   001B4A R
  4 code_add   0032D4 GR  |   4 cold_sta   0000C3 R   |   4 colon_ts   000F9D R
  4 comma_ts   000FA8 R   |   4 comp_msg   00166F R   |   4 compile    0010CE GR
  4 const_cr   002D95 R   |   4 const_cr   002D9A R   |   4 const_dd   002D90 R
  4 const_ee   002DA9 R   |   4 const_id   002D8B R   |   4 const_in   002DA4 R
  4 const_lo   001CCE R   |   4 const_od   002D86 R   |   4 const_ou   002D9F R
  4 const_po   002D59 R   |   4 const_po   002D5E R   |   4 const_po   002D63 R
  4 const_po   002D68 R   |   4 const_po   002D6D R   |   4 const_po   002D72 R
  4 const_po   002D77 R   |   4 const_po   002D7C R   |   4 const_po   002D81 R
  4 convert_   000DB8 R   |   4 convert_   000970 R   |   4 copy_com   000FFE R
  5 count      000003 GR  |   4 cp24       0001A4 R   |   4 cp24_ax    0001D7 R
  4 cp_loop    001900 R   |   4 cpl24      0001E7 R   |   4 cpy_cmd_   00114A R
  4 cpy_quot   001187 R   |   4 create_g   000CE2 R   |   4 cs_high    002F2A R
  4 dash_tst   000FBE R   |   4 data       002DAE R   |   5 data_len   000009 R
  4 data_lin   002DBD R   |   5 data_ofs   000008 R   |   5 data_ptr   000006 R
  4 data_sea   002DFE R   |   4 dec_base   001B29 R   |   4 decomp_l   001240 R
  4 decompil   0011F8 GR  |   4 del_line   000CB5 R   |   4 delete_l   000A99 R
  4 delete_n   0009BC R   |   4 delete_u   000A5E R   |   4 digital_   002566 R
  4 digital_   00259D R   |   4 div24      000328 R   |   4 divu24_8   00030A R
  4 do_loop    002D0C R   |   4 do_progr   0007B4 R   |   4 edit       001E92 R
  4 enable_i   002C60 R   |   4 eql_tst    001053 R   |   4 equal      001395 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 erase      00263E R   |   4 erase_ex   0007E5 R   |   4 erase_fl   0007DB R
  4 err_bad_   0015D0 R   |   4 err_buf_   001646 R   |   4 err_cmd_   001594 R
  4 err_div0   001559 R   |   4 err_dupl   0015AE R   |   4 err_math   001540 R
  4 err_mem_   001525 R   |   4 err_msg    001503 R   |   4 err_no_a   0015DC R
  4 err_no_d   00160F R   |   4 err_no_f   001633 R   |   4 err_no_l   001568 R
  4 err_no_p   00161F R   |   4 err_not_   0015BF R   |   4 err_over   001653 R
  4 err_run_   00157E R   |   4 err_synt   001532 R   |   4 escaped    000DCD GR
  4 expect     00193F R   |   4 expr_exi   001AC6 R   |   4 expressi   001A88 R
  4 factor     0019A6 R   |   5 farptr     000018 R   |   4 fcpu       002A87 R
  4 fetchc     000661 R   |   4 fill_wri   0026B6 R   |   4 final_te   000C07 R
  4 first_li   001E3C R   |   5 flags      000022 GR  |   4 for        002170 R
  4 free       001B2E R   |   5 free_eep   000024 R   |   7 free_ram   000080 R
  4 func_arg   00194C R   |   4 func_eef   001C40 R   |   4 func_not   002C41 R
  4 ge         001397 R   |   4 get_addr   0017C6 R   |   4 get_arra   001976 R
  4 get_char   0017E0 R   |   4 get_cmd_   0011D7 R   |   4 get_code   0017AA R
  4 get_cons   001BC5 R   |   4 get_esca   00097C R   |   4 get_int2   0017D0 R
  4 get_targ   002291 R   |   4 get_targ   00229F R   |   4 get_tick   00297E R
  4 get_toke   000F0F GR  |   4 getc       000955 GR  |   4 gosub      0023A6 R
  4 gosub_1    0023B1 R   |   4 gosub_2    0023B7 R   |   4 goto       00238C R
  4 goto_1     002396 R   |   4 gpio       002873 R   |   4 gt         001393 R
  4 gt_tst     00105E R   |   4 hex_base   001B24 R   |   4 hex_dump   0006A1 R
  4 if         00214F R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   0008B7 R   |   4 input_ex   002027 R
  4 input_lo   001F93 R   |   4 input_va   001F8F R   |   4 insert_c   000A1B R
  4 insert_l   000D0E R   |   4 insert_l   000D7D R   |   4 interp_l   001760 R
  4 interpre   00173B R   |   4 invalid    0005B6 R   |   4 invalid_   000637 R
  4 invert     002CF6 R   |   4 is_alnum   000E7F GR  |   4 is_alpha   000E65 GR
  4 is_data_   002DB4 R   |   4 is_digit   000E76 GR  |   4 is_symbo   000E88 R
  4 itoa       001823 GR  |   4 itoa_loo   001845 R   |   4 jp_to_ta   002399 R
  4 key        002862 R   |   4 kword_di   0032CC GR  |   4 kword_en   002F34 R
  4 le         00139C R   |   4 ledoff     00046C R   |   4 ledon      000467 R
  4 ledtoggl   000471 R   |   4 left_par   00047A R   |   4 let        001B82 GR
  4 let_arra   001B90 R   |   4 let_eval   001B98 R   |   4 let_var    001B95 R
  4 lines_sk   001E3F R   |   4 list       001DED R   |   4 list_con   001BD4 R
  4 list_exi   001E81 R   |   4 list_loo   001E5F R   |   4 log2       002CA3 R
  4 logical_   002C54 R   |   4 look_tar   0022C2 R   |   4 loop_bac   002274 R
  5 loop_dep   00001F R   |   4 loop_don   002289 R   |   4 lshift     002A2D R
  4 lt         00139A R   |   4 lt_tst     001087 R   |   4 mem_peek   0005D3 R
  4 mod24      0003D6 R   |   4 move       001400 GR  |   4 move_dow   00141F R
  4 move_era   000743 R   |   4 move_exi   001440 R   |   4 move_lef   0009F3 R
  4 move_loo   001424 R   |   4 move_prg   000783 R   |   4 move_rig   000A01 R
  4 move_up    001411 R   |   4 mul24      00025E R   |   4 mul_char   001384 R
  4 mulu24_8   00022B R   |   4 nbr_tst    000F42 R   |   4 ne         00139F R
  4 neg24      0001F4 R   |   4 neg_acc2   00020E R   |   4 neg_ax     000206 R
  4 new        002634 R   |   4 next       00221C R   |   4 next_lin   001743 R
  4 next_tok   001791 GR  |   4 no_match   001912 R   |   4 number     000667 R
  4 other      0010B0 R   |   4 overwrit   000C33 R   |   2 pad        0016B8 GR
  4 pad_ref    002F2F R   |   4 parse_bi   000E28 R   |   4 parse_in   000DD5 R
  4 parse_ke   000EAB R   |   4 parse_qu   000D80 R   |   4 parse_sy   000E93 R
  4 pause      00290B R   |   4 pause02    00291E R   |   4 peek       00212E R
  4 peek_byt   000601 R   |   4 pin_mode   002A96 R   |   4 plus_tst   001027 R
  4 poke       00210D R   |   4 power_ad   0024DA R   |   4 prcnt_ts   001048 R
  4 print      001EFA R   |   4 print_ex   001F63 R   |   4 print_fa   000646 R
  4 print_he   000C68 GR  |   4 print_re   0004C6 R   |   4 print_st   0005C6 R
  4 print_to   00180B R   |   4 prog_siz   001D5C R   |   4 program_   001D64 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

  4 program_   00075D R   |   4 program_   000783 R   |   4 prt_acc2   0017FD R
  4 prt_basi   001ED6 R   |   4 prt_i16    0017E6 R   |   4 prt_loop   001EFE R
  4 prt_peek   000449 GR  |   4 prt_reg1   0004A7 R   |   4 prt_reg8   000485 R
  4 prt_regs   0003DF GR  |   5 ptr16      000019 GR  |   5 ptr8       00001A R
  4 putc       000945 GR  |   4 puts       0009A2 GR  |   4 qgetc      00094E GR
  4 qkey       002866 GR  |   4 qmark_ts   000FD4 R   |   4 qsign      0026AF R
  4 random     002B23 R   |   4 read       002E1F R   |   4 read01     002E21 R
  4 read_int   00350D R   |   4 readln     000AA7 GR  |   4 readln_l   000AB4 R
  4 readln_q   000C50 R   |   4 refresh_   002C9E R   |   4 regs_sta   000422 R
  4 rel_exit   001B21 R   |   4 relation   001AC9 R   |   4 relop_st   001387 R
  4 remark     00202C GR  |   4 repl       00057F R   |   4 repl_exi   0005A7 R
  4 reset_co   001EFC R   |   4 rest_con   001F7F R   |   4 restore    002DDF R
  4 restore_   002E1A R   |   4 return     0023CC R   |   4 right_al   001175 GR
  4 row_alig   00089C R   |   4 row_eras   000716 R   |   4 row_eras   000743 R
  4 row_loop   000684 R   |   4 rparnt_t   000F92 R   |   4 rshift     002A5A R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     00165D R
  4 run        0023EA R   |   4 run_app    000135 R   |   4 run_it     00241C R
  4 run_it_0   00241E R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   0026DA R   |   4 save_con   001F6F R
  4 scan_blo   0008C5 R   |   4 search_c   001C69 R   |   4 search_d   0018F2 GR
  4 search_e   00193C R   |   4 search_l   000C8A GR  |   4 search_l   000C99 R
  4 search_n   0018F6 R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002AF3 R   |   4 send_esc   0009CA R   |   4 send_par   0009D5 R
  4 set_data   002DD0 R   |   4 set_time   002C24 R   |   4 sharp_ts   000FB3 R
  4 show_row   000672 R   |   4 single_c   00137D R   |   4 skip       000EFC R
  4 skip_2_b   0017AE R   |   4 skip_str   0017B7 R   |   4 slash_ts   00103D R
  4 sleep      002900 R   |   4 software   001453 R   |   4 spaces     000A0F GR
  4 spi_clea   002EC4 R   |   4 spi_disa   002EAC R   |   4 spi_enab   002E79 R
  4 spi_rcv_   002EE6 R   |   4 spi_read   002F11 R   |   4 spi_sele   002F18 R
  4 spi_send   002ED0 R   |   4 spi_writ   002EF1 R   |   2 stack_fu   001774 GR
  2 stack_un   001800 R   |   4 star_tst   001032 R   |   4 step       0021DA R
  4 stop       0025E8 R   |   4 store_lo   002209 R   |   4 str_matc   00191F R
  4 str_tst    000F32 R   |   4 strcmp     0013DF R   |   4 strcpy     0013F0 GR
  4 strlen     0013D4 GR  |   4 sub24      000187 R   |   4 symb_loo   000E94 R
  4 syntax_e   001690 GR  |   4 system_i   001499 R   |   5 tab_widt   000023 GR
  4 tb_error   001692 GR  |   4 term       001A3E R   |   4 term01     001A46 R
  4 term_exi   001A85 R   |   4 test       00339E R   |   4 test_p     0005BE R
  2 tib        001668 GR  |   4 tick_tst   000FEC R   |   5 ticks      00000F R
  4 timeout    002C3B R   |   5 timer      000012 GR  |   4 timer2_i   0000A1 R
  4 timer4_i   0000AE R   |   4 tk_id      001680 R   |   4 to         00219A R
  4 to_eepro   0007AC R   |   4 to_flash   0007B1 R   |   4 to_hex_c   000C7F GR
  4 to_upper   00187C GR  |   4 token_ch   0010C7 R   |   4 token_ex   0010CB R
  4 tone       002483 R   |   4 try_next   002E0A R   |   5 txtbgn     00001B GR
  5 txtend     00001D GR  |   4 uart1_ge   000955 GR  |   4 uart1_in   000900 R
  4 uart1_pu   000945 GR  |   4 uart1_qg   00094E GR  |   4 uart1_se   000910 R
  4 ubound     001B77 R   |   4 uflash     0028A3 R   |   4 unlock_e   0006E0 R
  4 unlock_f   0006FB R   |   4 until      002D1F R   |   4 user_int   000057 R
  4 usr        0028B8 R   |   4 var_name   0011CD GR  |   5 vars       000030 GR
  4 wait       002032 R   |   4 warm_ini   0014CA R   |   4 warm_sta   00171C R
  4 words      002BBE R   |   4 words_co   002C0E R   |   4 write      0027C9 R
  4 write_bl   000861 GR  |   4 write_bu   00079D R   |   4 write_by   0007E7 R
  4 write_ee   000823 R   |   4 write_ex   00085C R   |   4 write_fl   00080D R
  4 write_nb   000886 R   |   2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3584   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

