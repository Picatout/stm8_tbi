ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                                
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001B                         65 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001D                         66 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001E                         67 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000020                         68 flags:: .blkb 1 ; various boolean flags
      000021                         69 tab_width:: .blkb 1 ; print colon width (default 6)
      000022                         70 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002A                         71 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002B                         72 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     73 
      000030                         74 	.bndry 16 
      000030                         75 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     76 ; keep 'free_ram' as last variable 
      000064                         77 free_ram: ; from here RAM free for BASIC text 
                                     78 
                                     79 ;;-----------------------------------
                                     80     .area SSEG (ABS)
                                     81 ;; working buffers and stack at end of RAM. 	
                                     82 ;;-----------------------------------
      001690                         83     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         84 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         85 pad:: .ds PAD_SIZE             ; working buffer
      001760                         86 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         87 stack_unf: ; stack underflow ; control_stack bottom 
                                     88 
                                     89 ;;--------------------------------------
                                     90     .area HOME 
                                     91 ;; interrupt vector table at 0x8000
                                     92 ;;--------------------------------------
      000000 82 00 04 6F             93     int cold_start			; RESET vector 
                           000000    94 .if DEBUG
                                     95 	int TrapHandler 		;TRAP  software interrupt
                           000001    96 .else
      000004 82 00 00 00             97 	int NonHandledInterrupt ;TRAP  software interrupt
                                     98 .endif
      000008 82 00 00 00             99 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            100 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            101 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            102 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000018 82 00 00 00            103 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            104 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            105 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 55            106 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            107 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            108 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            109 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            110 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            111 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            112 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            113 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            114 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            115 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            116 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            117 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            118 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            119 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00            120 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00            121 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 40            122 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            123 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            124 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            125 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            126 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            127 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            128 	int NonHandledInterrupt ;int29  not used
                                    129 
                                    130 ;---------------------------------------
                                    131     .area CODE
                                    132 ;---------------------------------------
                           000000   133 .if DEBUG
                                    134 .asciz "STM8_TBI" ; I like to put module name here.
                                    135 .endif 
                                    136 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    138 ; non handled interrupt 
                                    139 ; reset MCU
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        141 NonHandledInterrupt:
      000000 71                     142     .byte 0x71  ; invalid opcode reinitialize MCU
                                    143 
                                    144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    145 ; auto wakeup from halt
                                    146 ; at iret, program continue 
                                    147 ; after hatl instruction
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        149 AWUHandler:
      000001 72 19 50 F0      [ 1]  150 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  151 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  152 	clr AWU_TBR 
      00000E 80               [11]  153 	iret
                                    154 
                                    155 ;--------------------------
                                    156 ; UART1 receive character
                                    157 ; CTRL-C (ASCII 3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    158 ; cancel program execution
                                    159 ; and fall back to command line
                                    160 ;--------------------------
      00000F                        161 Uart1RxHandler: ; console receive char 
      00000F 72 0B 52 30 2B   [ 2]  162 	btjf UART1_SR,#UART_SR_RXNE,5$
      000014 C6 52 31         [ 1]  163 	ld a,UART1_DR 
      000017 A1 03            [ 1]  164 	cp a,#CTRL_C 
      000019 26 06            [ 1]  165 	jrne 2$
      00001B CD 02 B2         [ 4]  166 	call putc 
      00001E CC 00 68         [ 2]  167 	jp user_interrupted
      000021                        168 2$:
      000021 A1 18            [ 1]  169 	cp a,#CAN ; CTRL_X 
      000023 26 03            [ 1]  170 	jrne 3$
      000025 CC 04 6F         [ 2]  171 	jp cold_start 	
      000028 AE 00 22         [ 2]  172 3$:	ldw x,#rx1_queue  
      00002B 88               [ 1]  173 	push a 
      00002C 9F               [ 1]  174 	ld a,xl 
      00002D CB 00 2B         [ 1]  175 	add a,rx1_tail 
      000030 97               [ 1]  176 	ld xl,a
      000031 84               [ 1]  177 	pop a  
      000032 F7               [ 1]  178 	ld (x),a
      000033 72 5C 00 2B      [ 1]  179 	inc rx1_tail 
      000037 A6 07            [ 1]  180 	ld a,#RX_QUEUE_SIZE-1
      000039 C4 00 2B         [ 1]  181 	and a,rx1_tail 
      00003C C7 00 2B         [ 1]  182 	ld rx1_tail,a  
      00003F                        183 5$:
      00003F 80               [11]  184 	iret 
                                    185 
                                    186 ;------------------------------------
                                    187 ; software interrupt handler  
                                    188 ;------------------------------------
                           000000   189 .if DEBUG 
                                    190 TrapHandler:
                                    191 	bset flags,#FTRAP 
                                    192 	call print_registers
                                    193 	call cmd_itf
                                    194 	bres flags,#FTRAP 	
                                    195 	iret
                                    196 .endif 
                                    197 
                                    198 ;------------------------------
                                    199 ; TIMER 4 is used to maintain 
                                    200 ; a milliseconds 'ticks' counter
                                    201 ; and decrement 'timer' varaiable
                                    202 ;--------------------------------
      000040                        203 Timer4UpdateHandler:
      000040 72 5F 53 42      [ 1]  204 	clr TIM4_SR 
      000044 CE 00 0E         [ 2]  205 	ldw x,ticks
      000047 5C               [ 1]  206 	incw x
      000048 CF 00 0E         [ 2]  207 	ldw ticks,x 
      00004B CE 00 10         [ 2]  208 	ldw x,timer
                                    209 ;	tnzw x 
      00004E 27 04            [ 1]  210 	jreq 1$
      000050 5A               [ 2]  211 	decw x 
      000051 CF 00 10         [ 2]  212 	ldw timer,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000054                        213 1$:	
      000054 80               [11]  214 	iret 
                                    215 
                                    216 
                                    217 ;------------------------------------
                                    218 ; Triggered by pressing USER UserButton 
                                    219 ; on NUCLEO card.
                                    220 ; This is used to abort a progam lock 
                                    221 ; in infinite loop. 
                                    222 ;------------------------------------
      000055                        223 UserButtonHandler:
                                    224 ; wait button release
      000055 5F               [ 1]  225 	clrw x
      000056 5A               [ 2]  226 1$: decw x 
      000057 26 FD            [ 1]  227 	jrne 1$
      000059 72 09 50 15 F8   [ 2]  228 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    229 ; if MCU suspended by SLEEP resume program
      00005E 72 07 00 20 05   [ 2]  230     btjf flags,#FSLEEP,2$
      000063 72 17 00 20      [ 1]  231 	bres flags,#FSLEEP 
      000067 80               [11]  232 	iret
      000068                        233 2$:	
      000068                        234 user_interrupted:
      000068 72 00 00 20 02   [ 2]  235     btjt flags,#FRUN,4$
      00006D 20 0A            [ 2]  236 	jra UBTN_Handler_exit 
      00006F                        237 4$:	; program interrupted by user 
      00006F 72 11 00 20      [ 1]  238 	bres flags,#FRUN 
      000073 AE 00 8C         [ 2]  239 	ldw x,#USER_ABORT
      000076 CD 1E 8C         [ 4]  240 	call puts 
      000079                        241 UBTN_Handler_exit:
      000079 AE 17 FF         [ 2]  242     ldw x,#STACK_EMPTY 
      00007C 94               [ 1]  243     ldw sp,x
      00007D 9A               [ 1]  244 	rim 
      00007E CE 00 19         [ 2]  245 	ldw x,txtbgn 
      000081 A3 28 80         [ 2]  246 	cpw x,#app_space 
      000084 22 03            [ 1]  247 	jrugt 5$
      000086 CD 05 90         [ 4]  248 	call clear_basic 
      000089 CC 07 AA         [ 2]  249 5$:	jp warm_start
                                    250 
      00008C 0A 50 72 6F 67 72 61   251 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    252 
                                    253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    254 ;    peripherals initialization
                                    255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    256 
                                    257 ;----------------------------------------
                                    258 ; inialize MCU clock 
                                    259 ; input:
                                    260 ;   A 		source  HSI | 1 HSE 
                                    261 ;   XL      CLK_CKDIVR , clock divisor 
                                    262 ; output:
                                    263 ;   none 
                                    264 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000A7                        265 clock_init:	
      0000A7 C1 50 C3         [ 1]  266 	cp a,CLK_CMSR 
      0000AA 27 0C            [ 1]  267 	jreq 2$ ; no switching required 
                                    268 ; select clock source 
      0000AC 72 12 50 C5      [ 1]  269 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000B0 C7 50 C4         [ 1]  270 	ld CLK_SWR,a
      0000B3 C1 50 C3         [ 1]  271 1$:	cp a,CLK_CMSR
      0000B6 26 FB            [ 1]  272 	jrne 1$
      0000B8                        273 2$: 	
                                    274 ; HSI and cpu clock divisor 
      0000B8 9F               [ 1]  275 	ld a,xl 
      0000B9 C7 50 C6         [ 1]  276 	ld CLK_CKDIVR,a  
      0000BC 81               [ 4]  277 	ret
                                    278 
                                    279 ;----------------------------------
                                    280 ; TIMER2 used as audio tone output 
                                    281 ; on port D:5.
                                    282 ; channel 1 configured as PWM mode 1 
                                    283 ;-----------------------------------  
                           00F424   284 TIM2_CLK_FREQ=62500
      0000BD                        285 timer2_init:
      0000BD 72 1A 50 C7      [ 1]  286 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000C1 35 60 53 05      [ 1]  287  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C5 35 08 53 0C      [ 1]  288 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C9 81               [ 4]  289 	ret 
                                    290 
                                    291 ;---------------------------------
                                    292 ; TIM4 is configured to generate an 
                                    293 ; interrupt every millisecond 
                                    294 ;----------------------------------
      0000CA                        295 timer4_init:
      0000CA 72 18 50 C7      [ 1]  296 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CE 35 07 53 45      [ 1]  297 	mov TIM4_PSCR,#7 ; prescale 128  
      0000D2 35 7D 53 46      [ 1]  298 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D6 35 05 53 40      [ 1]  299 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000DA 72 10 53 41      [ 1]  300 	bset TIM4_IER,#TIM4_IER_UIE
      0000DE 81               [ 4]  301 	ret
                                    302 
                                    303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    304 ;  routines to write to FLASH, EEPROM 
                                    305 ;  and OPTION 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 
                                    308 ;----------------------------------
                                    309 ; unlock EEPROM/OPT for writing/erasing
                                    310 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    311 ; input:
                                    312 ;  none
                                    313 ; output:
                                    314 ;  none 
                                    315 ;----------------------------------
      0000DF                        316 unlock_eeprom:
      0000DF 35 00 50 5B      [ 1]  317 	mov FLASH_CR2,#0 
      0000E3 35 FF 50 5C      [ 1]  318 	mov FLASH_NCR2,#0xFF 
      0000E7 35 AE 50 64      [ 1]  319 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0000EB 35 56 50 64      [ 1]  320     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000EF 72 07 50 5F FB   [ 2]  321 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000F4 81               [ 4]  322 	ret
                                    323 
                                    324 ;----------------------------------
                                    325 ; unlock FLASH for writing/erasing
                                    326 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    327 ; input:
                                    328 ;  none
                                    329 ; output:
                                    330 ;  none
                                    331 ;----------------------------------
      0000F5                        332 unlock_flash:
      0000F5 35 00 50 5B      [ 1]  333 	mov FLASH_CR2,#0 
      0000F9 35 FF 50 5C      [ 1]  334 	mov FLASH_NCR2,#0xFF 
      0000FD 35 56 50 62      [ 1]  335 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000101 35 AE 50 62      [ 1]  336 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000105 72 03 50 5F FB   [ 2]  337 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      00010A 81               [ 4]  338 	ret
                                    339 
                                    340 ;----------------------------
                                    341 ; erase block code must be 
                                    342 ; executed from RAM
                                    343 ; input:
                                    344 ;-----------------------------
      00010B                        345 row_erase:
      00010B 35 20 50 5B      [ 1]  346 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00010F 35 DF 50 5C      [ 1]  347 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000113 4F               [ 1]  348 	clr a 
      000114 90 5F            [ 1]  349 	clrw y 
      000116 91 A7 00 16      [ 1]  350 	ldf ([farptr],y),a
      00011A 90 5C            [ 1]  351     incw y
      00011C 91 A7 00 16      [ 1]  352 	ldf ([farptr],y),a
      000120 90 5C            [ 1]  353     incw y
      000122 91 A7 00 16      [ 1]  354 	ldf ([farptr],y),a
      000126 90 5C            [ 1]  355     incw y
      000128 91 A7 00 16      [ 1]  356 	ldf ([farptr],y),a
      00012C 72 05 50 5F FB   [ 2]  357 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000131 81               [ 4]  358 	ret
      000132                        359 row_erase_end:
                                    360 
                                    361 ; copy erase_start in RAM 
      000132                        362 move_erase_to_ram:
      000132 AE 01 32         [ 2]  363 	ldw x,#row_erase_end 
      000135 1D 01 0B         [ 2]  364 	subw x,#row_erase
      000138 CF 00 0C         [ 2]  365 	ldw acc16,x 
      00013B AE 16 90         [ 2]  366 	ldw x,#tib 
      00013E 90 AE 01 0B      [ 2]  367 	ldw y,#row_erase 
      000142 CD 03 B6         [ 4]  368 	call move 
      000145 81               [ 4]  369 	ret 
                                    370 
                                    371 ;-----------------------------------
                                    372 ; block programming must be 
                                    373 ; executed from RAM 
                                    374 ; initial contidions: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    375 ; 	memory unlocked
                                    376 ;   bit PRG set in 
                                    377 ; input:
                                    378 ;   x        128 bytes row to program 
                                    379 ;   farptr   row address 
                                    380 ; output:
                                    381 ;   none 
                                    382 ;----------------------------------
                           000001   383 	BCNT=1 
      000146                        384 program_row:
      000146 4B 80            [ 1]  385 	push #BLOCK_SIZE  
                                    386 ;enable block programming 
      000148 72 10 50 5B      [ 1]  387 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00014C 72 11 50 5C      [ 1]  388 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000150 90 5F            [ 1]  389 	clrw y 
      000152 F6               [ 1]  390 1$:	ld a,(x)
      000153 91 A7 00 16      [ 1]  391 	ldf ([farptr],y),a
      000157 5C               [ 1]  392 	incw x 
      000158 90 5C            [ 1]  393 	incw y 
      00015A 0A 01            [ 1]  394 	dec (BCNT,sp)
      00015C 26 F4            [ 1]  395 	jrne 1$
                                    396 ; wait EOP bit 
      00015E 72 05 50 5F FB   [ 2]  397 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000163                        398 	_drop 1 
      000163 5B 01            [ 2]    1     addw sp,#1 
      000165 81               [ 4]  399 	ret 
      000166                        400 program_row_end:
                                    401 
                                    402 ;-------------------------
                                    403 ; move program_row to RAM 
                                    404 ; at txtubound address 
                                    405 ;------------------------
      000166                        406 move_prg_to_ram:
      000166 AE 01 66         [ 2]  407 	ldw x,#program_row_end 
      000169 1D 01 46         [ 2]  408 	subw x,#program_row 
      00016C CF 00 0C         [ 2]  409 	ldw acc16,x 
      00016F AE 16 90         [ 2]  410 	ldw x,#tib 
      000172 90 AE 01 46      [ 2]  411 	ldw y,#program_row 
      000176 CD 03 B6         [ 4]  412 	call move 
      000179 81               [ 4]  413 	ret 
                                    414 
                                    415 
                                    416 ;-----------------------------
                                    417 ; write a row in FLASH/EEPROM 
                                    418 ; input:
                                    419 ;    farptr   destination address 
                                    420 ;    x        source address 
                                    421 ;-----------------------------
      00017A                        422 write_row:
      00017A 89               [ 2]  423 	pushw x 
      00017B 72 5D 00 16      [ 1]  424 	tnz farptr 
      00017F 26 1C            [ 1]  425 	jrne to_flash 
      000181 AE 80 00         [ 2]  426 	ldw x,#FLASH_BASE 
      000184 C3 00 17         [ 2]  427 	cpw x,farptr+1 
      000187 24 14            [ 1]  428 	jruge to_flash 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000189                        429 to_eeprom:
      000189 AE 40 00         [ 2]  430 	ldw x,#EEPROM_BASE 
      00018C C3 00 17         [ 2]  431 	cpw x,farptr+1 
      00018F 24 01            [ 1]  432 	jruge 1$
      000191 81               [ 4]  433 	ret ; bad address 
      000192 AE 47 FF         [ 2]  434 1$: ldw x,#EEPROM_END 
      000195 23 01            [ 2]  435 	jrule 2$ 
      000197 81               [ 4]  436 	ret ; bad address 
      000198 CD 00 DF         [ 4]  437 2$:	call unlock_eeprom
      00019B 20 03            [ 2]  438 	jra do_programming
      00019D                        439 to_flash:
      00019D CD 00 F5         [ 4]  440 	call unlock_flash 
      0001A0                        441 do_programming:
      0001A0 85               [ 2]  442 	popw x 
      0001A1 CD 16 90         [ 4]  443 	call tib
      0001A4 72 13 50 5F      [ 1]  444 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001A8 72 17 50 5F      [ 1]  445 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001AC 81               [ 4]  446 	ret 
                                    447 
                                    448 
                                    449 ;-----------------------------------
                                    450 ; erase flash or EEPROM block
                                    451 ; a block is 128 bytes 
                                    452 ; input:
                                    453 ;   farptr  address row begin
                                    454 ; output:
                                    455 ;   none
                                    456 ;--------------------------------------
      0001AD                        457 block_erase:
      0001AD CE 00 17         [ 2]  458 	ldw x,farptr+1
      0001B0 A3 28 80         [ 2]  459 	cpw x,#app_space 
      0001B3 2A 17            [ 1]  460 	jrpl erase_flash 
                                    461 ; erase eeprom block
      0001B5 A3 40 00         [ 2]  462 	cpw x,#EEPROM_BASE 
      0001B8 24 01            [ 1]  463 	jruge 1$
      0001BA 81               [ 4]  464 	ret ; bad address 
      0001BB AE 47 FF         [ 2]  465 1$: ldw x,#EEPROM_END 
      0001BE 23 01            [ 2]  466 	jrule 2$ 
      0001C0 81               [ 4]  467 	ret ; bad address 
      0001C1 CD 00 DF         [ 4]  468 2$:	call unlock_eeprom 
      0001C4 CD 16 90         [ 4]  469 	call tib 
      0001C7 72 17 50 5F      [ 1]  470 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001CB 81               [ 4]  471 	ret 
                                    472 ; erase flash block:
      0001CC                        473 erase_flash:
      0001CC CD 00 F5         [ 4]  474 	call unlock_flash 
      0001CF CD 16 90         [ 4]  475 	call tib 
      0001D2 72 13 50 5F      [ 1]  476     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001D6 81               [ 4]  477 	ret 
                                    478 
                                    479 
                                    480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    481 ; write a byte to FLASH or EEPROM/OPTION  
                                    482 ; input:
                                    483 ;    a  		byte to write
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    484 ;    farptr  	address
                                    485 ;    x          farptr[x]
                                    486 ; output:
                                    487 ;    none
                                    488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    489 	; variables locales
                           000001   490 	BTW = 1   ; byte to write offset on stack
                           000002   491 	OPT = 2   ; OPTION flag offset on stack
                           000002   492 	VSIZE = 2
      0001D7                        493 write_byte:
      0001D7 90 89            [ 2]  494 	pushw y
      0001D9                        495 	_vars VSIZE
      0001D9 52 02            [ 2]    1     sub sp,#VSIZE 
      0001DB 6B 01            [ 1]  496 	ld (BTW,sp),a ; byte to write 
      0001DD 0F 02            [ 1]  497 	clr (OPT,sp)  ; OPTION flag
                                    498 ; put addr[15:0] in Y, for bounds check.
      0001DF 90 CE 00 17      [ 2]  499 	ldw y,farptr+1   ; Y=addr15:0
                                    500 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001E3 72 5D 00 16      [ 1]  501 	tnz farptr 
      0001E7 26 14            [ 1]  502 	jrne write_flash
      0001E9 90 A3 28 80      [ 2]  503     cpw y,#app_space 	 
      0001ED 24 0E            [ 1]  504     jruge write_flash
      0001EF 90 A3 40 00      [ 2]  505 	cpw y,#EEPROM_BASE  
      0001F3 25 52            [ 1]  506     jrult write_exit
      0001F5 90 A3 48 7F      [ 2]  507 	cpw y,#OPTION_END 
      0001F9 22 4C            [ 1]  508 	jrugt write_exit
      0001FB 20 16            [ 2]  509 	jra write_eeprom 
                                    510 ; write program memory
      0001FD                        511 write_flash:
      0001FD CD 00 F5         [ 4]  512 	call unlock_flash 
      000200 9B               [ 1]  513 1$:	sim 
      000201 7B 01            [ 1]  514 	ld a,(BTW,sp)
      000203 92 A7 00 16      [ 4]  515 	ldf ([farptr],x),a ; farptr[x]=A
      000207 72 05 50 5F FB   [ 2]  516 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00020C 9A               [ 1]  517     rim 
      00020D 72 13 50 5F      [ 1]  518     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000211 20 34            [ 2]  519     jra write_exit
                                    520 ; write eeprom and option
      000213                        521 write_eeprom:
      000213 CD 00 DF         [ 4]  522 	call unlock_eeprom
                                    523 	; check for data eeprom or option eeprom
      000216 90 A3 48 00      [ 2]  524 	cpw y,#OPTION_BASE
      00021A 2B 08            [ 1]  525 	jrmi 1$
      00021C 90 A3 48 80      [ 2]  526 	cpw y,#OPTION_END+1
      000220 2A 02            [ 1]  527 	jrpl 1$
      000222 03 02            [ 1]  528 	cpl (OPT,sp)
      000224                        529 1$: 
      000224 0D 02            [ 1]  530     tnz (OPT,sp)
      000226 27 08            [ 1]  531     jreq 2$
                                    532 	; pour modifier une option il faut modifier ces 2 bits
      000228 72 1E 50 5B      [ 1]  533     bset FLASH_CR2,#FLASH_CR2_OPT
      00022C 72 1F 50 5C      [ 1]  534     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000230                        535 2$: 
      000230 7B 01            [ 1]  536     ld a,(BTW,sp)
      000232 92 A7 00 16      [ 4]  537     ldf ([farptr],x),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000236 0D 02            [ 1]  538     tnz (OPT,sp)
      000238 27 08            [ 1]  539     jreq 3$
      00023A 5C               [ 1]  540     incw x
      00023B 7B 01            [ 1]  541     ld a,(BTW,sp)
      00023D 43               [ 1]  542     cpl a
      00023E 92 A7 00 16      [ 4]  543     ldf ([farptr],x),a
      000242 72 05 50 5F FB   [ 2]  544 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000247                        545 write_exit:
      000247                        546 	_drop VSIZE 
      000247 5B 02            [ 2]    1     addw sp,#VSIZE 
      000249 90 85            [ 2]  547 	popw y
      00024B 81               [ 4]  548     ret
                                    549 
                                    550 ;--------------------------------------------
                                    551 ; write a data block to eeprom or flash 
                                    552 ; input:
                                    553 ;   Y        source address   
                                    554 ;   X        array index  destination  farptr[x]
                                    555 ;   BSIZE    block size bytes 
                                    556 ;   farptr   write address , byte* 
                                    557 ; output:
                                    558 ;	X 		after last byte written 
                                    559 ;   Y 		after last byte read 
                                    560 ;  farptr   point after block
                                    561 ;---------------------------------------------
      00024C                        562 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00024C                        563 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    564 	; local var 
                           000001   565 	XSAVE=1 
                           000002   566 	VSIZE=2 
      00024C                        567 write_block:
      00024C                        568 	_vars VSIZE
      00024C 52 02            [ 2]    1     sub sp,#VSIZE 
      00024E 1F 01            [ 2]  569 	ldw (XSAVE,sp),x 
      000250 1E 05            [ 2]  570 	ldw x,(BSIZE,sp) 
      000252 27 13            [ 1]  571 	jreq 9$
      000254 1E 01            [ 2]  572 1$:	ldw x,(XSAVE,sp)
      000256 90 F6            [ 1]  573 	ld a,(y)
      000258 CD 01 D7         [ 4]  574 	call write_byte 
      00025B 5C               [ 1]  575 	incw x 
      00025C 90 5C            [ 1]  576 	incw y 
      00025E 1F 01            [ 2]  577 	ldw (XSAVE,sp),x
      000260 1E 05            [ 2]  578 	ldw x,(BSIZE,sp)
      000262 5A               [ 2]  579 	decw x
      000263 1F 05            [ 2]  580 	ldw (BSIZE,sp),x 
      000265 26 ED            [ 1]  581 	jrne 1$
      000267                        582 9$:
      000267 1E 01            [ 2]  583 	ldw x,(XSAVE,sp)
      000269 CD 13 B9         [ 4]  584 	call incr_farptr
      00026C                        585 	_drop VSIZE
      00026C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00026E 81               [ 4]  586 	ret 
                                    587 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    588 
                                    589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    590 ;;   UART1 subroutines
                                    591 ;;   used for user interface 
                                    592 ;;   communication channel.
                                    593 ;;   settings: 
                                    594 ;;		115200 8N1 no flow control
                                    595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    596 
                                    597 ;---------------------------------------------
                                    598 ; initialize UART1, 115200 8N1
                                    599 ; input:
                                    600 ;	none
                                    601 ; output:
                                    602 ;   none
                                    603 ;---------------------------------------------
      00026F                        604 uart1_init:
      00026F 72 1A 50 02      [ 1]  605     bset PA_DDR,#UART1_TX_PIN
      000273 72 1A 50 03      [ 1]  606     bset PA_CR1,#UART1_TX_PIN 
      000277 72 1A 50 04      [ 1]  607     bset PA_CR2,#UART1_TX_PIN 
                                    608 ; enable UART1 clock
      00027B 72 14 50 C7      [ 1]  609 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00027F                        610 uart1_set_baud: 
                                    611 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    612 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00027F A6 E1            [ 1]  613 	ld a,#CLK_SWR_HSI
      000281 C1 50 C3         [ 1]  614 	cp a,CLK_CMSR 
      000284 27 0A            [ 1]  615 	jreq 2$ 
      000286                        616 1$: ; 8 Mhz 	
      000286 35 05 52 33      [ 1]  617 	mov UART1_BRR2,#0x05 ; must be loaded first
      00028A 35 04 52 32      [ 1]  618 	mov UART1_BRR1,#0x4
      00028E 20 08            [ 2]  619 	jra 3$
      000290                        620 2$: ; 16 Mhz 	
      000290 35 0B 52 33      [ 1]  621 	mov UART1_BRR2,#0x0b ; must be loaded first
      000294 35 08 52 32      [ 1]  622 	mov UART1_BRR1,#0x08
      000298                        623 3$:
      000298 72 5F 52 31      [ 1]  624     clr UART1_DR
      00029C 35 2C 52 35      [ 1]  625 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002A0 72 10 52 35      [ 1]  626 	bset UART1_CR2,#UART_CR2_SBK
      0002A4 72 0D 52 30 FB   [ 2]  627     btjf UART1_SR,#UART_SR_TC,.
      0002A9 72 5F 00 2A      [ 1]  628     clr rx1_head 
      0002AD 72 5F 00 2B      [ 1]  629 	clr rx1_tail 
      0002B1 81               [ 4]  630 	ret
                                    631 
                                    632 ;---------------------------------
                                    633 ; uart1_putc
                                    634 ; send a character via UART1
                                    635 ; input:
                                    636 ;    A  	character to send
                                    637 ;---------------------------------
      0002B2                        638 putc:: ; console output always on UART1
      0002B2                        639 uart1_putc:: 
      0002B2 72 0F 52 30 FB   [ 2]  640 	btjf UART1_SR,#UART_SR_TXE,.
      0002B7 C7 52 31         [ 1]  641 	ld UART1_DR,a 
      0002BA 81               [ 4]  642 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    643 
                                    644 
                                    645 ;---------------------------------
                                    646 ; Query for character in rx1_queue
                                    647 ; input:
                                    648 ;   none 
                                    649 ; output:
                                    650 ;   A     0 no charcter available
                                    651 ;   Z     1 no character available
                                    652 ;---------------------------------
      0002BB                        653 qgetc::
      0002BB                        654 uart1_qgetc::
      0002BB C6 00 2A         [ 1]  655 	ld a,rx1_head 
      0002BE C0 00 2B         [ 1]  656 	sub a,rx1_tail 
      0002C1 81               [ 4]  657 	ret 
                                    658 
                                    659 ;---------------------------------
                                    660 ; wait character from UART1 
                                    661 ; input:
                                    662 ;   none
                                    663 ; output:
                                    664 ;   A 			char  
                                    665 ;--------------------------------	
      0002C2                        666 getc:: ;console input
      0002C2                        667 uart1_getc::
      0002C2 CD 02 BB         [ 4]  668 	call uart1_qgetc
      0002C5 27 FB            [ 1]  669 	jreq uart1_getc 
      0002C7 89               [ 2]  670 	pushw x 
      0002C8 AE 00 22         [ 2]  671 	ldw x,#rx1_queue
      0002CB 9F               [ 1]  672 	ld a,xl 
      0002CC CB 00 2A         [ 1]  673 	add a,rx1_head 
      0002CF 97               [ 1]  674 	ld xl,a 
      0002D0 F6               [ 1]  675 	ld a,(x)
      0002D1 85               [ 2]  676 	popw x
      0002D2 88               [ 1]  677 	push a
      0002D3 72 5C 00 2A      [ 1]  678 	inc rx1_head 
      0002D7 A6 07            [ 1]  679 	ld a,#RX_QUEUE_SIZE-1 
      0002D9 C4 00 2A         [ 1]  680 	and a,rx1_head 
      0002DC C7 00 2A         [ 1]  681 	ld rx1_head,a 
      0002DF 84               [ 1]  682 	pop a  
      0002E0 81               [ 4]  683 	ret 
                                    684 
                                    685 ;----------------------
                                    686 ; print token id && value
                                    687 ; input:
                                    688 ;   A     token id 
                                    689 ;   X     token value 
                                    690 ;---------------------
                           000001   691 	BSAVE=1
                           000002   692 	AREG=2
                           000003   693 	XREG=3
                           000004   694 	VSIZE=4
      0002E1                        695 prt_tok:
      0002E1                        696 	_vars VSIZE 
      0002E1 52 04            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002E3 6B 02            [ 1]  697 	ld (AREG,sp),a 
      0002E5 1F 03            [ 2]  698 	ldw (XREG,sp),x 
      0002E7 C6 00 0A         [ 1]  699 	ld a, base
      0002EA 6B 01            [ 1]  700 	ld (BSAVE,sp),a 
      0002EC 35 10 00 0A      [ 1]  701 	mov base,#16  
      0002F0 AE 03 18         [ 2]  702 	ldw x,#token_msg
      0002F3 CD 1E 8C         [ 4]  703 	call puts 
      0002F6 5F               [ 1]  704 	clrw x 
      0002F7 7B 02            [ 1]  705 	ld a,(AREG,sp)
      0002F9 97               [ 1]  706 	ld xl,a 
      0002FA CD 08 70         [ 4]  707 	call print_int 
      0002FD A6 20            [ 1]  708 	ld a,#SPACE
      0002FF CD 02 B2         [ 4]  709 	call putc 
      000302 1E 03            [ 2]  710 	ldw x,(XREG,sp)
      000304 CD 08 70         [ 4]  711 	call print_int 
      000307 A6 0D            [ 1]  712 	ld a,#CR 
      000309 CD 02 B2         [ 4]  713 	call putc 
      00030C 7B 01            [ 1]  714 	ld a,(BSAVE,sp)
      00030E C7 00 0A         [ 1]  715 	ld base,a 
      000311 7B 02            [ 1]  716 	ld a,(AREG,sp)
      000313 1E 03            [ 2]  717 	ldw x,(XREG,sp)
      000315                        718 	_drop VSIZE 
      000315 5B 04            [ 2]    1     addw sp,#VSIZE 
      000317 81               [ 4]  719 	ret 
      000318 74 6F 6B 65 6E 3A 20   720 token_msg: .asciz "token: "
             00
                                    721 
                                    722 
                                    723 ;---------------------
                                    724 ; display n bytes row 
                                    725 ; from memory.
                                    726 ; input:
                                    727 ;   A   bytes to print 
                                    728 ;	X   start address 
                                    729 ; output:
                                    730 ;   X   address after last shown  
                                    731 ;---------------------
                           000001   732 	CNT=1 
                           000002   733 	ADR=2 
                           000003   734 	VSIZE=3 
      000320                        735 show_row:
      000320 4D               [ 1]  736 	tnz a 
      000321 26 01            [ 1]  737 	jrne 1$
      000323 81               [ 4]  738 	ret 
      000324                        739 1$:	
      000324 89               [ 2]  740 	pushw x  
      000325 88               [ 1]  741 	push a 
      000326 35 04 00 21      [ 1]  742 	mov tab_width,#4 
      00032A CD 08 70         [ 4]  743 	call print_int 
      00032D A6 20            [ 1]  744 	ld a,#SPACE  
      00032F CD 02 B2         [ 4]  745 	call putc
      000332                        746 row_loop:
      000332 1E 02            [ 2]  747 	ldw x,(ADR,sp)
      000334 F6               [ 1]  748 	ld a,(x)
      000335 5F               [ 1]  749 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000336 97               [ 1]  750 	ld xl,a 
      000337 CD 08 70         [ 4]  751 	call print_int 
      00033A 1E 02            [ 2]  752 	ldw x,(ADR,sp)
      00033C 5C               [ 1]  753 	incw x 
      00033D 1F 02            [ 2]  754 	ldw (ADR,sp),x 
      00033F 0A 01            [ 1]  755 	dec (CNT,sp)
      000341 26 EF            [ 1]  756 	jrne row_loop
      000343                        757 	_drop VSIZE  		
      000343 5B 03            [ 2]    1     addw sp,#VSIZE 
      000345 35 04 00 21      [ 1]  758 	mov tab_width,#4
      000349 A6 0D            [ 1]  759 	ld a,#CR 
      00034B CD 02 B2         [ 4]  760 	call putc 
      00034E 81               [ 4]  761 	ret 
                                    762 
                                    763 ;--------------------------
                                    764 ; print memory content 
                                    765 ; in hexadecimal format
                                    766 ;  input:
                                    767 ;    X    start address 
                                    768 ;    Y    count 
                                    769 ;--------------------------
                           000001   770 	BCNT=1
                           000003   771 	BASE=3
                           000004   772 	TABW=4
                           000004   773 	VSIZE=4   
      00034F                        774 hex_dump:
      00034F                        775 	_vars VSIZE
      00034F 52 04            [ 2]    1     sub sp,#VSIZE 
      000351 C6 00 0A         [ 1]  776 	ld a,base
      000354 6B 03            [ 1]  777 	ld (BASE,sp),a 
      000356 35 10 00 0A      [ 1]  778 	mov base,#16
      00035A C6 00 21         [ 1]  779 	ld a,tab_width 
      00035D 6B 04            [ 1]  780 	ld (TABW,sp),a
      00035F A6 0D            [ 1]  781 	ld a,#CR 
      000361 CD 02 B2         [ 4]  782 	call putc 
      000364 17 01            [ 2]  783 1$: ldw (BCNT,sp),y
      000366 A6 10            [ 1]  784 	ld a,#16
      000368 90 A3 00 10      [ 2]  785 	cpw y,#16
      00036C 2A 02            [ 1]  786 	jrpl 2$
      00036E 90 9F            [ 1]  787 	ld a,yl
      000370                        788 2$: 	
      000370 CD 03 20         [ 4]  789 	call show_row 
      000373 16 01            [ 2]  790 	ldw y,(BCNT,sp) 
      000375 72 A2 00 10      [ 2]  791 	subw y,#16 
      000379 90 A3 00 01      [ 2]  792 	cpw y,#1
      00037D 2A E5            [ 1]  793 	jrpl 1$
      00037F 7B 03            [ 1]  794 	ld a,(BASE,sp)
      000381 C7 00 0A         [ 1]  795 	ld base,a
      000384 7B 04            [ 1]  796 	ld a,(TABW,sp)
      000386 C7 00 21         [ 1]  797 	ld tab_width,a 
      000389                        798 	_drop VSIZE
      000389 5B 04            [ 2]    1     addw sp,#VSIZE 
      00038B 81               [ 4]  799 	ret 
                                    800 
                                    801 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    802 ; retrun string length
                                    803 ; input:
                                    804 ;   X         .asciz  pointer 
                                    805 ; output:
                                    806 ;   X         not affected 
                                    807 ;   A         length 
                                    808 ;-------------------------------------
      00038C                        809 strlen::
      00038C 89               [ 2]  810 	pushw x 
      00038D 4F               [ 1]  811 	clr a
      00038E 7D               [ 1]  812 1$:	tnz (x) 
      00038F 27 04            [ 1]  813 	jreq 9$ 
      000391 4C               [ 1]  814 	inc a 
      000392 5C               [ 1]  815 	incw x 
      000393 20 F9            [ 2]  816 	jra 1$ 
      000395 85               [ 2]  817 9$:	popw x 
      000396 81               [ 4]  818 	ret 
                                    819 
                                    820 ;------------------------------------
                                    821 ; compare 2 strings
                                    822 ; input:
                                    823 ;   X 		char* first string 
                                    824 ;   Y       char* second string 
                                    825 ; output:
                                    826 ;   A 		0|1 
                                    827 ;-------------------------------------
      000397                        828 strcmp:
      000397 F6               [ 1]  829 	ld a,(x)
      000398 27 0B            [ 1]  830 	jreq 5$ 
      00039A 90 F1            [ 1]  831 	cp a,(y) 
      00039C 26 05            [ 1]  832 	jrne 4$ 
      00039E 5C               [ 1]  833 	incw x 
      00039F 90 5C            [ 1]  834 	incw y 
      0003A1 20 F4            [ 2]  835 	jra strcmp 
      0003A3                        836 4$: ; not same  
      0003A3 4F               [ 1]  837 	clr a 
      0003A4 81               [ 4]  838 	ret 
      0003A5                        839 5$: ; same 
      0003A5 A6 01            [ 1]  840 	ld a,#1 
      0003A7 81               [ 4]  841 	ret 
                                    842 
                                    843 
                                    844 ;---------------------------------------
                                    845 ;  copy src to dest 
                                    846 ; input:
                                    847 ;   X 		dest 
                                    848 ;   Y 		src 
                                    849 ; output: 
                                    850 ;   X 		dest 
                                    851 ;----------------------------------
      0003A8                        852 strcpy::
      0003A8 89               [ 2]  853 	pushw x 
      0003A9 90 F6            [ 1]  854 1$: ld a,(y)
      0003AB 27 06            [ 1]  855 	jreq 9$ 
      0003AD F7               [ 1]  856 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AE 5C               [ 1]  857 	incw x 
      0003AF 90 5C            [ 1]  858 	incw y 
      0003B1 20 F6            [ 2]  859 	jra 1$ 
      0003B3 7F               [ 1]  860 9$:	clr (x)
      0003B4 85               [ 2]  861 	popw x 
      0003B5 81               [ 4]  862 	ret 
                                    863 
                                    864 ;---------------------------------------
                                    865 ; move memory block 
                                    866 ; input:
                                    867 ;   X 		destination 
                                    868 ;   Y 	    source 
                                    869 ;   acc16	bytes count 
                                    870 ; output:
                                    871 ;   none 
                                    872 ;--------------------------------------
                           000001   873 	INCR=1 ; increament high byte 
                           000002   874 	LB=2 ; increament low byte 
                           000002   875 	VSIZE=2
      0003B6                        876 move::
      0003B6                        877 	_vars VSIZE 
      0003B6 52 02            [ 2]    1     sub sp,#VSIZE 
      0003B8 0F 01            [ 1]  878 	clr (INCR,sp)
      0003BA 0F 02            [ 1]  879 	clr (LB,sp)
      0003BC 90 89            [ 2]  880 	pushw y 
      0003BE 13 01            [ 2]  881 	cpw x,(1,sp) ; compare DEST to SRC 
      0003C0 90 85            [ 2]  882 	popw y 
      0003C2 27 31            [ 1]  883 	jreq move_exit ; x==y 
      0003C4 2B 0E            [ 1]  884 	jrmi move_down
      0003C6                        885 move_up: ; start from top address with incr=-1
      0003C6 72 BB 00 0C      [ 2]  886 	addw x,acc16
      0003CA 72 B9 00 0C      [ 2]  887 	addw y,acc16
      0003CE 03 01            [ 1]  888 	cpl (INCR,sp)
      0003D0 03 02            [ 1]  889 	cpl (LB,sp)   ; increment = -1 
      0003D2 20 05            [ 2]  890 	jra move_loop  
      0003D4                        891 move_down: ; start from bottom address with incr=1 
      0003D4 5A               [ 2]  892     decw x 
      0003D5 90 5A            [ 2]  893 	decw y
      0003D7 0C 02            [ 1]  894 	inc (LB,sp) ; incr=1 
      0003D9                        895 move_loop:	
      0003D9 C6 00 0C         [ 1]  896     ld a, acc16 
      0003DC CA 00 0D         [ 1]  897 	or a, acc8
      0003DF 27 14            [ 1]  898 	jreq move_exit 
      0003E1 72 FB 01         [ 2]  899 	addw x,(INCR,sp)
      0003E4 72 F9 01         [ 2]  900 	addw y,(INCR,sp) 
      0003E7 90 F6            [ 1]  901 	ld a,(y)
      0003E9 F7               [ 1]  902 	ld (x),a 
      0003EA 89               [ 2]  903 	pushw x 
      0003EB CE 00 0C         [ 2]  904 	ldw x,acc16 
      0003EE 5A               [ 2]  905 	decw x 
      0003EF CF 00 0C         [ 2]  906 	ldw acc16,x 
      0003F2 85               [ 2]  907 	popw x 
      0003F3 20 E4            [ 2]  908 	jra move_loop
      0003F5                        909 move_exit:
      0003F5                        910 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003F7 81               [ 4]  911 	ret 	
                                    912 
                                    913 ;------------------------------------
                                    914 ;  set all variables to zero 
                                    915 ; input:
                                    916 ;   none 
                                    917 ; output:
                                    918 ;	none
                                    919 ;------------------------------------
      0003F8                        920 clear_vars:
      0003F8 AE 00 30         [ 2]  921 	ldw x,#vars 
      0003FB 90 AE 00 34      [ 2]  922 	ldw y,#2*26 
      0003FF 7F               [ 1]  923 1$:	clr (x)
      000400 5C               [ 1]  924 	incw x 
      000401 90 5A            [ 2]  925 	decw y 
      000403 26 FA            [ 1]  926 	jrne 1$
      000405 81               [ 4]  927 	ret 
                                    928 
                                    929 ;-------------------------------------
                                    930 ; check if A is a letter 
                                    931 ; input:
                                    932 ;   A 			character to test 
                                    933 ; output:
                                    934 ;   C flag      1 true, 0 false 
                                    935 ;-------------------------------------
      000406                        936 is_alpha::
      000406 A1 41            [ 1]  937 	cp a,#'A 
      000408 8C               [ 1]  938 	ccf 
      000409 24 0B            [ 1]  939 	jrnc 9$ 
      00040B A1 5B            [ 1]  940 	cp a,#'Z+1 
      00040D 25 07            [ 1]  941 	jrc 9$ 
      00040F A1 61            [ 1]  942 	cp a,#'a 
      000411 8C               [ 1]  943 	ccf 
      000412 24 02            [ 1]  944 	jrnc 9$
      000414 A1 7B            [ 1]  945 	cp a,#'z+1
      000416 81               [ 4]  946 9$: ret 	
                                    947 
                                    948 ;------------------------------------
                                    949 ; check if character in {'0'..'9'}
                                    950 ; input:
                                    951 ;    A  character to test
                                    952 ; output:
                                    953 ;    Carry  0 not digit | 1 digit
                                    954 ;------------------------------------
      000417                        955 is_digit::
      000417 A1 30            [ 1]  956 	cp a,#'0
      000419 25 03            [ 1]  957 	jrc 1$
      00041B A1 3A            [ 1]  958     cp a,#'9+1
      00041D 8C               [ 1]  959 	ccf 
      00041E 8C               [ 1]  960 1$:	ccf 
      00041F 81               [ 4]  961     ret
                                    962 
                                    963 ;-------------------------------------
                                    964 ; return true if character in  A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    965 ; is letter or digit.
                                    966 ; input:
                                    967 ;   A     ASCII character 
                                    968 ; output:
                                    969 ;   A     no change 
                                    970 ;   Carry    0 false| 1 true 
                                    971 ;--------------------------------------
      000420                        972 is_alnum::
      000420 CD 04 17         [ 4]  973 	call is_digit
      000423 25 03            [ 1]  974 	jrc 1$ 
      000425 CD 04 06         [ 4]  975 	call is_alpha
      000428 81               [ 4]  976 1$:	ret 
                                    977 
                                    978 
                                    979 ;-------------------------------------
                                    980 ;  program initialization entry point 
                                    981 ;-------------------------------------
                           000001   982 	MAJOR=1
                           000002   983 	MINOR=2 
      000429 0A 0A 54 69 6E 79 20   984 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      00046F                        985 cold_start:
                                    986 ;set stack 
      00046F AE 17 FF         [ 2]  987 	ldw x,#STACK_EMPTY
      000472 94               [ 1]  988 	ldw sp,x   
                                    989 ; clear all ram 
      000473 7F               [ 1]  990 0$: clr (x)
      000474 5A               [ 2]  991 	decw x 
      000475 26 FC            [ 1]  992 	jrne 0$
                                    993 ; activate pull up on all inputs 
      000477 A6 FF            [ 1]  994 	ld a,#255 
      000479 C7 50 03         [ 1]  995 	ld PA_CR1,a 
      00047C C7 50 08         [ 1]  996 	ld PB_CR1,a 
      00047F C7 50 0D         [ 1]  997 	ld PC_CR1,a 
      000482 C7 50 12         [ 1]  998 	ld PD_CR1,a 
      000485 C7 50 17         [ 1]  999 	ld PE_CR1,a 
      000488 C7 50 1C         [ 1] 1000 	ld PF_CR1,a 
      00048B C7 50 21         [ 1] 1001 	ld PG_CR1,a 
      00048E C7 50 2B         [ 1] 1002 	ld PI_CR1,a
                                   1003 ; set LD2 pin as output 
      000491 72 1A 50 0D      [ 1] 1004     bset PC_CR1,#LED2_BIT
      000495 72 1A 50 0E      [ 1] 1005     bset PC_CR2,#LED2_BIT
      000499 72 1A 50 0C      [ 1] 1006     bset PC_DDR,#LED2_BIT
      00049D 72 1B 50 0A      [ 1] 1007 	bres PC_ODR,#LED2_BIT 
                                   1008 ; disable schmitt triggers on Arduino CN4 analog inputs
      0004A1 55 00 3F 54 07   [ 1] 1009 	mov ADC_TDRL,0x3f
                                   1010 ; disable peripherals clocks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1011 ;	clr CLK_PCKENR1 
                                   1012 ;	clr CLK_PCKENR2
      0004A6 72 5F 50 F2      [ 1] 1013 	clr AWU_TBR 
      0004AA 72 14 50 CA      [ 1] 1014 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1015 ; select internal clock no divisor: 16 Mhz 	
      0004AE A6 E1            [ 1] 1016 	ld a,#CLK_SWR_HSI 
      0004B0 5F               [ 1] 1017 	clrw x  
      0004B1 CD 00 A7         [ 4] 1018     call clock_init 
      0004B4 CD 00 CA         [ 4] 1019 	call timer4_init
      0004B7 CD 00 BD         [ 4] 1020 	call timer2_init
                                   1021 ; UART1 at 115200 BAUD
      0004BA CD 02 6F         [ 4] 1022 	call uart1_init
                                   1023 ; activate PE_4 (user button interrupt)
      0004BD 72 18 50 18      [ 1] 1024     bset PE_CR2,#USR_BTN_BIT 
                                   1025 ; display system information
      0004C1 AE 04 29         [ 2] 1026 	ldw x,#software 
      0004C4 CD 1E 8C         [ 4] 1027 	call puts 
      0004C7 A6 01            [ 1] 1028 	ld a,#MAJOR 
      0004C9 C7 00 0D         [ 1] 1029 	ld acc8,a 
      0004CC 5F               [ 1] 1030 	clrw x 
      0004CD CF 00 0B         [ 2] 1031 	ldw acc24,x
      0004D0 72 5F 00 21      [ 1] 1032 	clr tab_width  
      0004D4 35 0A 00 0A      [ 1] 1033 	mov base, #10 
      0004D8 CD 08 80         [ 4] 1034 	call prti24 
      0004DB A6 2E            [ 1] 1035 	ld a,#'.
      0004DD CD 02 B2         [ 4] 1036 	call putc 
      0004E0 A6 02            [ 1] 1037 	ld a,#MINOR 
      0004E2 C7 00 0D         [ 1] 1038 	ld acc8,a 
      0004E5 5F               [ 1] 1039 	clrw x 
      0004E6 CF 00 0B         [ 2] 1040 	ldw acc24,x 
      0004E9 CD 08 80         [ 4] 1041 	call prti24
      0004EC A6 0D            [ 1] 1042 	ld a,#CR 
      0004EE CD 02 B2         [ 4] 1043 	call putc
      0004F1 9A               [ 1] 1044 	rim 
      0004F2 72 5C 00 15      [ 1] 1045 	inc seedy+1 
      0004F6 72 5C 00 13      [ 1] 1046 	inc seedx+1 
      0004FA CD 05 90         [ 4] 1047 	call clear_basic
      0004FD CD 0D E1         [ 4] 1048 	call ubound 
      000500 CD 12 20         [ 4] 1049 	call beep_1khz  
      000503                       1050 2$:	
      000503 CD 05 72         [ 4] 1051 	call warm_init
                                   1052 ; check for application in flash memory 
      000506 CE 28 80         [ 2] 1053 	ldw x,app_sign 
      000509 A3 42 43         [ 2] 1054 	cpw x,#0x4243 ; signature "BC" 
      00050C 27 03            [ 1] 1055 	jreq 3$
      00050E CC 07 AD         [ 2] 1056 	jp cmd_line 
      000511                       1057 3$:	 
      000511 AE 05 47         [ 2] 1058 	ldw x,#running 
      000514 CD 1E 8C         [ 4] 1059 	call puts 
                                   1060 ;	jra 4$
      000517 AE 28 84         [ 2] 1061 	ldw x,#app
      00051A 35 10 00 0A      [ 1] 1062 	mov base,#16 
      00051E CD 08 70         [ 4] 1063 	call print_int
      000521 35 0A 00 0A      [ 1] 1064 	mov base,#10  
      000525 AE 28 84         [ 2] 1065 4$:	ldw x,#app  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000528 CF 00 04         [ 2] 1066 	ldw basicptr,x
      00052B CF 00 19         [ 2] 1067 	ldw txtbgn,x 
      00052E E6 02            [ 1] 1068 	ld a,(2,x)
      000530 C7 00 03         [ 1] 1069 	ld count,a 
      000533 A6 03            [ 1] 1070 	ld a,#3 
      000535 C7 00 01         [ 1] 1071 	ld in,a 
      000538 CE 28 82         [ 2] 1072 	ldw x,app_size 
      00053B 72 BB 00 19      [ 2] 1073 	addw x,txtbgn 
      00053F CF 00 1B         [ 2] 1074 	ldw txtend,x  
      000542 CC 07 EE         [ 2] 1075 	jp interp_loop 
      000545 20 FE            [ 2] 1076     jra .  
                                   1077 
      000547 0A 72 75 6E 6E 69 6E  1078 running: .asciz "\nrunning application in FLASH at address: " 
             67 20 61 70 70 6C 69
             63 61 74 69 6F 6E 20
             69 6E 20 46 4C 41 53
             48 20 61 74 20 61 64
             64 72 65 73 73 3A 20
             00
                                   1079 
      000572                       1080 warm_init:
      000572 72 5F 00 20      [ 1] 1081 	clr flags 
      000576 72 5F 00 1D      [ 1] 1082 	clr loop_depth 
      00057A 35 04 00 21      [ 1] 1083 	mov tab_width,#TAB_WIDTH 
      00057E 35 0A 00 0A      [ 1] 1084 	mov base,#10 
      000582 AE 00 00         [ 2] 1085 	ldw x,#0 
      000585 CF 00 04         [ 2] 1086 	ldw basicptr,x 
      000588 CF 00 00         [ 2] 1087 	ldw in.w,x 
      00058B 72 5F 00 03      [ 1] 1088 	clr count
      00058F 81               [ 4] 1089 	ret 
                                   1090 
                                   1091 
                                   1092 ;---------------------------
                                   1093 ; reset BASIC text variables 
                                   1094 ; and clear variables 
                                   1095 ;---------------------------
      000590                       1096 clear_basic:
      000590 72 5F 00 03      [ 1] 1097 	clr count
      000594 72 5F 00 01      [ 1] 1098 	clr in  
      000598 AE 00 64         [ 2] 1099 	ldw x,#free_ram 
      00059B CF 00 19         [ 2] 1100 	ldw txtbgn,x 
      00059E CF 00 1B         [ 2] 1101 	ldw txtend,x 
      0005A1 CD 03 F8         [ 4] 1102 	call clear_vars 
      0005A4 81               [ 4] 1103 	ret 
                                   1104 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1106 ;;   Tiny BASIC error messages     ;;
                                   1107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005A5                       1108 err_msg:
      0005A5 00 00 05 C5 05 D2 05  1109 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             E0 05 F9 06 08
      0005B1 06 1E 06 34 06 4E 06  1110 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             5F 06 70
      0005BB 06 7C 06 AF 06 BF 06  1111 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             D3 06 E6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1112 
      0005C5 4D 65 6D 6F 72 79 20  1113 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0005D2 73 79 6E 74 61 78 20  1114 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0005E0 6D 61 74 68 20 6F 70  1115 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0005F9 64 69 76 69 73 69 6F  1116 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000608 69 6E 76 61 6C 69 64  1117 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00061E 72 75 6E 20 74 69 6D  1118 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      000634 63 6F 6D 6D 61 6E 64  1119 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00064E 64 75 70 6C 69 63 61  1120 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00065F 46 69 6C 65 20 6E 6F  1121 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000670 62 61 64 20 76 61 6C  1122 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      00067C 46 69 6C 65 20 69 6E  1123 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0006AF 4E 6F 20 64 61 74 61  1124 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0006BF 4E 6F 20 70 72 6F 67  1125 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0006D3 46 69 6C 65 20 73 79  1126 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0006E6 42 75 66 66 65 72 20  1127 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1128 
      0006F3 0A 72 75 6E 20 74 69  1129 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000705 0A 63 6F 6D 70 69 6C  1130 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000716 6C 61 73 74 20 74 6F  1131 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1132 
      000726                       1133 syntax_error::
      000726 A6 02            [ 1] 1134 	ld a,#ERR_SYNTAX 
                                   1135 
      000728                       1136 tb_error::
      000728 72 0A 00 20 44   [ 2] 1137 	btjt flags,#FCOMP,1$
      00072D 88               [ 1] 1138 	push a 
      00072E AE 06 F3         [ 2] 1139 	ldw x, #rt_msg 
      000731 CD 1E 8C         [ 4] 1140 	call puts 
      000734 84               [ 1] 1141 	pop a 
      000735 AE 05 A5         [ 2] 1142 	ldw x, #err_msg 
      000738 72 5F 00 0C      [ 1] 1143 	clr acc16 
      00073C 48               [ 1] 1144 	sll a
      00073D 72 59 00 0C      [ 1] 1145 	rlc acc16  
      000741 C7 00 0D         [ 1] 1146 	ld acc8, a 
      000744 72 BB 00 0C      [ 2] 1147 	addw x,acc16 
      000748 FE               [ 2] 1148 	ldw x,(x)
      000749 CD 1E 8C         [ 4] 1149 	call puts
      00074C CE 00 04         [ 2] 1150 	ldw x,basicptr
      00074F C6 00 01         [ 1] 1151 	ld a,in 
      000752 CD 0E AA         [ 4] 1152 	call prt_basic_line
      000755 AE 07 16         [ 2] 1153 	ldw x,#tk_id 
      000758 CD 1E 8C         [ 4] 1154 	call puts 
      00075B C6 00 02         [ 1] 1155 	ld a,in.saved 
      00075E 5F               [ 1] 1156 	clrw x 
      00075F 97               [ 1] 1157 	ld xl,a 
      000760 72 BB 00 04      [ 2] 1158 	addw x,basicptr 
      000764 F6               [ 1] 1159 	ld a,(x)
      000765 5F               [ 1] 1160 	clrw x 
      000766 97               [ 1] 1161 	ld xl,a 
      000767 CD 08 70         [ 4] 1162 	call print_int
      00076A 72 0D 00 20 37   [ 2] 1163 	btjf flags,#FAUTORUN ,6$
      00076F 20 35            [ 2] 1164 	jra 6$
      000771                       1165 1$:	
      000771 88               [ 1] 1166 	push a 
      000772 AE 07 05         [ 2] 1167 	ldw x,#comp_msg
      000775 CD 1E 8C         [ 4] 1168 	call puts 
      000778 84               [ 1] 1169 	pop a 
      000779 AE 05 A5         [ 2] 1170 	ldw x, #err_msg 
      00077C 72 5F 00 0C      [ 1] 1171 	clr acc16 
      000780 48               [ 1] 1172 	sll a
      000781 72 59 00 0C      [ 1] 1173 	rlc acc16  
      000785 C7 00 0D         [ 1] 1174 	ld acc8, a 
      000788 72 BB 00 0C      [ 2] 1175 	addw x,acc16 
      00078C FE               [ 2] 1176 	ldw x,(x)
      00078D CD 1E 8C         [ 4] 1177 	call puts
      000790 AE 16 90         [ 2] 1178 	ldw x,#tib
      000793 CD 1E 8C         [ 4] 1179 	call puts 
      000796 A6 0D            [ 1] 1180 	ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000798 CD 02 B2         [ 4] 1181 	call putc
      00079B CE 00 00         [ 2] 1182 	ldw x,in.w
      00079E CD 1E F9         [ 4] 1183 	call spaces
      0007A1 A6 5E            [ 1] 1184 	ld a,#'^
      0007A3 CD 02 B2         [ 4] 1185 	call putc 
      0007A6 AE 17 FF         [ 2] 1186 6$: ldw x,#STACK_EMPTY 
      0007A9 94               [ 1] 1187     ldw sp,x
      0007AA                       1188 warm_start:
      0007AA CD 05 72         [ 4] 1189 	call warm_init
                                   1190 ;----------------------------
                                   1191 ;   BASIC interpreter
                                   1192 ;----------------------------
      0007AD                       1193 cmd_line: ; user interface 
      0007AD A6 0D            [ 1] 1194 	ld a,#CR 
      0007AF CD 02 B2         [ 4] 1195 	call putc 
      0007B2 A6 3E            [ 1] 1196 	ld a,#'> 
      0007B4 CD 02 B2         [ 4] 1197 	call putc
      0007B7 CD 1F 91         [ 4] 1198 	call readln
      0007BA 72 5D 00 03      [ 1] 1199 	tnz count 
      0007BE 27 ED            [ 1] 1200 	jreq cmd_line
      0007C0 CD 25 6A         [ 4] 1201 	call compile
                                   1202 ; if text begin with a line number
                                   1203 ; the compiler set count to zero    
                                   1204 ; so code is not interpreted
      0007C3 72 5D 00 03      [ 1] 1205 	tnz count 
      0007C7 27 E4            [ 1] 1206 	jreq cmd_line
                                   1207 
                                   1208 ; if direct command 
                                   1209 ; it's ready to interpret 
                                   1210 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1211 ;; This is the interpreter loop
                                   1212 ;; for each BASIC code line. 
                                   1213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0007C9                       1214 interpreter: 
      0007C9 C6 00 01         [ 1] 1215 	ld a,in 
      0007CC C1 00 03         [ 1] 1216 	cp a,count 
      0007CF 2B 1D            [ 1] 1217 	jrmi interp_loop
      0007D1                       1218 next_line:
      0007D1 72 01 00 20 D7   [ 2] 1219 	btjf flags, #FRUN, cmd_line
      0007D6 CE 00 04         [ 2] 1220 	ldw x,basicptr
      0007D9 72 BB 00 00      [ 2] 1221 	addw x,in.w 
      0007DD C3 00 1B         [ 2] 1222 	cpw x,txtend 
      0007E0 2A C8            [ 1] 1223 	jrpl warm_start
      0007E2 CF 00 04         [ 2] 1224 	ldw basicptr,x ; start of next line  
      0007E5 E6 02            [ 1] 1225 	ld a,(2,x)
      0007E7 C7 00 03         [ 1] 1226 	ld count,a 
      0007EA 35 03 00 01      [ 1] 1227 	mov in,#3 ; skip first 3 bytes of line 
      0007EE                       1228 interp_loop: 
      0007EE CD 08 15         [ 4] 1229 	call next_token
      0007F1 A1 00            [ 1] 1230 	cp a,#TK_NONE 
      0007F3 27 DC            [ 1] 1231 	jreq next_line 
      0007F5 A1 80            [ 1] 1232 	cp a,#TK_CMD
      0007F7 26 03            [ 1] 1233 	jrne 1$
      0007F9 FD               [ 4] 1234 	call (x) 
      0007FA 20 F2            [ 2] 1235 	jra interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0007FC                       1236 1$:	 
      0007FC A1 85            [ 1] 1237 	cp a,#TK_VAR
      0007FE 26 05            [ 1] 1238 	jrne 2$
      000800 CD 0E 14         [ 4] 1239 	call let_var  
      000803 20 E9            [ 2] 1240 	jra interp_loop 
      000805                       1241 2$:	
      000805 A1 06            [ 1] 1242 	cp a,#TK_ARRAY 
      000807 26 05            [ 1] 1243 	jrne 3$
      000809 CD 0E 11         [ 4] 1244 	call let_array 
      00080C 20 E0            [ 2] 1245 	jra interp_loop
      00080E                       1246 3$:	
      00080E A1 0B            [ 1] 1247 	cp a,#TK_COLON 
      000810 27 DC            [ 1] 1248 	jreq interp_loop 
      000812 CC 07 26         [ 2] 1249 	jp syntax_error 
                                   1250 
                                   1251 		
                                   1252 ;--------------------------
                                   1253 ; extract next token from
                                   1254 ; token list 
                                   1255 ; basicptr -> base address 
                                   1256 ; in  -> offset in list array 
                                   1257 ; output:
                                   1258 ;   A 		token attribute
                                   1259 ;   X 		token value if there is one
                                   1260 ;----------------------------------------
      000815                       1261 next_token::
      000815 5F               [ 1] 1262 	clrw x 
      000816 C6 00 01         [ 1] 1263 	ld a,in 
                                   1264 ; don't replace sub by "cp a,count" 
                                   1265 ; if end of line must return with A=0   	
      000819 C0 00 03         [ 1] 1266 	sub a,count 
      00081C 27 51            [ 1] 1267 	jreq 9$ ; end of line 
      00081E                       1268 0$: 
      00081E 55 00 01 00 02   [ 1] 1269 	mov in.saved,in ; in case "_unget_token" needed 
      000823 90 CE 00 04      [ 2] 1270 	ldw y,basicptr 
      000827 91 D6 00         [ 4] 1271 	ld a,([in.w],y)
      00082A 72 5C 00 01      [ 1] 1272 	inc in  
      00082E 4D               [ 1] 1273 	tnz a 
      00082F 2B 27            [ 1] 1274 	jrmi 6$
      000831 A1 06            [ 1] 1275 	cp a,#TK_ARRAY
      000833 2A 3A            [ 1] 1276 	jrpl 9$  ; no attribute for these
      000835                       1277 1$: ; 
      000835 A1 03            [ 1] 1278 	cp a,#TK_CHAR
      000837 26 0B            [ 1] 1279 	jrne 2$
      000839 41               [ 1] 1280 	exg a,xl
      00083A 91 D6 00         [ 4] 1281 	ld a,([in.w],y)
      00083D 72 5C 00 01      [ 1] 1282 	inc in 
      000841 41               [ 1] 1283 	exg a,xl  
      000842 20 2B            [ 2] 1284 	jra 9$ 
      000844 A1 02            [ 1] 1285 2$:	cp a,#TK_QSTR 
      000846 26 27            [ 1] 1286 	jrne 9$
      000848 93               [ 1] 1287 	ldw x,y 
      000849 72 BB 00 00      [ 2] 1288 	addw x,in.w ; pointer to string 
                                   1289 ; move pointer after string 
      00084D 91 6D 00         [ 4] 1290 3$:	tnz ([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000850 27 19            [ 1] 1291 	jreq 8$
      000852 72 5C 00 01      [ 1] 1292 	inc in 
      000856 20 F5            [ 2] 1293 	jra 3$
      000858                       1294 6$: 
      000858 72 B9 00 00      [ 2] 1295 	addw y,in.w 
      00085C 90 FE            [ 2] 1296 	ldw y,(y)
      00085E A1 84            [ 1] 1297 	cp a,#TK_INTGR
      000860 2A 04            [ 1] 1298 	jrpl 7$
      000862 90 DE 1D 98      [ 2] 1299 	ldw y,(code_addr,y) 
      000866 51               [ 1] 1300 7$:	exgw x,y 
      000867 72 5C 00 01      [ 1] 1301 	inc in
      00086B 72 5C 00 01      [ 1] 1302 8$:	inc in 
      00086F                       1303 9$: 
      00086F 81               [ 4] 1304 	ret	
                                   1305 
                                   1306 ;-----------------------------------
                                   1307 ; print a 16 bit integer 
                                   1308 ; using variable 'base' as conversion
                                   1309 ; format.
                                   1310 ; input:
                                   1311 ;   X       integer to print 
                                   1312 ;   'base'    conversion base 
                                   1313 ; output:
                                   1314 ;   none 
                                   1315 ;-----------------------------------
      000870                       1316 print_int:
      000870 72 5F 00 0B      [ 1] 1317 	clr acc24 
      000874 CF 00 0C         [ 2] 1318 	ldw acc16,x 
      000877 72 0F 00 0C 04   [ 2] 1319 	btjf acc16,#7,prti24
      00087C 72 53 00 0B      [ 1] 1320 	cpl acc24 
                                   1321 	
                                   1322 ;------------------------------------
                                   1323 ; print integer in acc24 
                                   1324 ; input:
                                   1325 ;	acc24 		integer to print 
                                   1326 ;	'base' 		numerical base for conversion 
                                   1327 ;   'tab_width' field width 
                                   1328 ;  output:
                                   1329 ;    A          string length
                                   1330 ;------------------------------------
      000880                       1331 prti24:
      000880 CD 08 8C         [ 4] 1332     call itoa  ; conversion entier en  .asciz
      000883 CD 26 09         [ 4] 1333 	call right_align  
      000886 88               [ 1] 1334 	push a 
      000887 CD 1E 8C         [ 4] 1335 	call puts
      00088A 84               [ 1] 1336 	pop a 
      00088B 81               [ 4] 1337     ret	
                                   1338 
                                   1339 ;------------------------------------
                                   1340 ; convert integer in acc24 to string
                                   1341 ; input:
                                   1342 ;   'base'	conversion base 
                                   1343 ;	acc24	integer to convert
                                   1344 ; output:
                                   1345 ;   X  		pointer to first char of string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1346 ;   A       string length
                                   1347 ;------------------------------------
                           000001  1348 	SIGN=1  ; integer sign 
                           000002  1349 	LEN=2 
                           000003  1350 	PSTR=3
                           000004  1351 	VSIZE=4 ;locals size
      00088C                       1352 itoa::
      00088C                       1353 	_vars VSIZE
      00088C 52 04            [ 2]    1     sub sp,#VSIZE 
      00088E 0F 02            [ 1] 1354 	clr (LEN,sp) ; string length  
      000890 0F 01            [ 1] 1355 	clr (SIGN,sp)    ; sign
      000892 C6 00 0A         [ 1] 1356 	ld a,base 
      000895 A1 0A            [ 1] 1357 	cp a,#10
      000897 26 0A            [ 1] 1358 	jrne 1$
                                   1359 	; base 10 string display with negative sign if bit 23==1
      000899 72 0F 00 0B 05   [ 2] 1360 	btjf acc24,#7,1$
      00089E 03 01            [ 1] 1361 	cpl (SIGN,sp)
      0008A0 CD 09 59         [ 4] 1362 	call neg_acc24
      0008A3                       1363 1$:
                                   1364 ; initialize string pointer 
      0008A3 AE 16 90         [ 2] 1365 	ldw x,#tib 
      0008A6 1C 00 50         [ 2] 1366 	addw x,#TIB_SIZE
      0008A9 5A               [ 2] 1367 	decw x 
      0008AA 7F               [ 1] 1368 	clr (x)
      0008AB 5A               [ 2] 1369 	decw x 
      0008AC A6 20            [ 1] 1370 	ld a,#32
      0008AE F7               [ 1] 1371 	ld (x),a
      0008AF 0C 02            [ 1] 1372 	inc (LEN,sp)
      0008B1                       1373 itoa_loop:
      0008B1 C6 00 0A         [ 1] 1374     ld a,base
      0008B4 1F 03            [ 2] 1375 	ldw (PSTR,sp),x 
      0008B6 CD 08 F7         [ 4] 1376     call divu24_8 ; acc24/A 
      0008B9 1E 03            [ 2] 1377 	ldw x,(PSTR,sp)
      0008BB AB 30            [ 1] 1378     add a,#'0  ; remainder of division
      0008BD A1 3A            [ 1] 1379     cp a,#'9+1
      0008BF 2B 02            [ 1] 1380     jrmi 2$
      0008C1 AB 07            [ 1] 1381     add a,#7 
      0008C3                       1382 2$:	
      0008C3 5A               [ 2] 1383 	decw x
      0008C4 F7               [ 1] 1384     ld (x),a
      0008C5 0C 02            [ 1] 1385 	inc (LEN,sp)
                                   1386 	; if acc24==0 conversion done
      0008C7 C6 00 0B         [ 1] 1387 	ld a,acc24
      0008CA CA 00 0C         [ 1] 1388 	or a,acc16
      0008CD CA 00 0D         [ 1] 1389 	or a,acc8
      0008D0 26 DF            [ 1] 1390     jrne itoa_loop
                                   1391 	;conversion done, next add '$' or '-' as required
      0008D2 C6 00 0A         [ 1] 1392 	ld a,base 
      0008D5 A1 10            [ 1] 1393 	cp a,#16
      0008D7 27 08            [ 1] 1394 	jreq 8$
      0008D9 7B 01            [ 1] 1395 	ld a,(SIGN,sp)
      0008DB 27 15            [ 1] 1396     jreq 10$
      0008DD A6 2D            [ 1] 1397     ld a,#'-
      0008DF 20 0D            [ 2] 1398 	jra 9$ 
                                   1399 ; don't print more than 4 digits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1400 ; in hexadecimal to avoid '-' sign 
                                   1401 ; extend display 	
      0008E1 7B 02            [ 1] 1402 8$: ld a,(LEN,sp) 
      0008E3 A1 06            [ 1] 1403 	cp a,#6 
      0008E5 2B 05            [ 1] 1404 	jrmi 81$
      0008E7 5C               [ 1] 1405 	incw x
      0008E8 0A 02            [ 1] 1406 	dec (LEN,sp)
      0008EA 20 F5            [ 2] 1407 	jra 8$
      0008EC                       1408 81$:	
      0008EC A6 24            [ 1] 1409 	ld a,#'$ 
      0008EE 5A               [ 2] 1410 9$: decw x
      0008EF F7               [ 1] 1411     ld (x),a
      0008F0 0C 02            [ 1] 1412 	inc (LEN,sp)
      0008F2                       1413 10$:
      0008F2 7B 02            [ 1] 1414 	ld a,(LEN,sp)
      0008F4                       1415 	_drop VSIZE
      0008F4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0008F6 81               [ 4] 1416 	ret
                                   1417 
                                   1418 ;-------------------------------------
                                   1419 ; divide uint24_t by uint8_t
                                   1420 ; used to convert uint24_t to string
                                   1421 ; input:
                                   1422 ;	acc24	dividend
                                   1423 ;   A 		divisor
                                   1424 ; output:
                                   1425 ;   acc24	quotient
                                   1426 ;   A		remainder
                                   1427 ;------------------------------------- 
                                   1428 ; offset  on sp of arguments and locals
                           000001  1429 	U8   = 1   ; divisor on stack
                           000001  1430 	VSIZE =1
      0008F7                       1431 divu24_8:
      0008F7 89               [ 2] 1432 	pushw x ; save x
      0008F8 88               [ 1] 1433 	push a 
                                   1434 	; ld dividend UU:MM bytes in X
      0008F9 C6 00 0B         [ 1] 1435 	ld a, acc24
      0008FC 95               [ 1] 1436 	ld xh,a
      0008FD C6 00 0C         [ 1] 1437 	ld a,acc24+1
      000900 97               [ 1] 1438 	ld xl,a
      000901 7B 01            [ 1] 1439 	ld a,(U8,SP) ; divisor
      000903 62               [ 2] 1440 	div x,a ; UU:MM/U8
      000904 88               [ 1] 1441 	push a  ;save remainder
      000905 9E               [ 1] 1442 	ld a,xh
      000906 C7 00 0B         [ 1] 1443 	ld acc24,a
      000909 9F               [ 1] 1444 	ld a,xl
      00090A C7 00 0C         [ 1] 1445 	ld acc24+1,a
      00090D 84               [ 1] 1446 	pop a
      00090E 95               [ 1] 1447 	ld xh,a
      00090F C6 00 0D         [ 1] 1448 	ld a,acc24+2
      000912 97               [ 1] 1449 	ld xl,a
      000913 7B 01            [ 1] 1450 	ld a,(U8,sp) ; divisor
      000915 62               [ 2] 1451 	div x,a  ; R:LL/U8
      000916 6B 01            [ 1] 1452 	ld (U8,sp),a ; save remainder
      000918 9F               [ 1] 1453 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000919 C7 00 0D         [ 1] 1454 	ld acc24+2,a
      00091C 84               [ 1] 1455 	pop a
      00091D 85               [ 2] 1456 	popw x
      00091E 81               [ 4] 1457 	ret
                                   1458 
                                   1459 ;--------------------------------------
                                   1460 ; unsigned multiply uint24_t by uint8_t
                                   1461 ; use to convert numerical string to uint24_t
                                   1462 ; input:
                                   1463 ;	acc24	uint24_t 
                                   1464 ;   A		uint8_t
                                   1465 ; output:
                                   1466 ;   acc24   A*acc24
                                   1467 ;-------------------------------------
                                   1468 ; local variables offset  on sp
                           000003  1469 	U8   = 3   ; A pushed on stack
                           000002  1470 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1471 	OVFH = 1  ; multiplication overflow high byte
                           000003  1472 	VSIZE = 3
      00091F                       1473 mulu24_8:
      00091F 89               [ 2] 1474 	pushw x    ; save X
                                   1475 	; local variables
      000920 88               [ 1] 1476 	push a     ; U8
      000921 5F               [ 1] 1477 	clrw x     ; initialize overflow to 0
      000922 89               [ 2] 1478 	pushw x    ; multiplication overflow
                                   1479 ; multiply low byte.
      000923 C6 00 0D         [ 1] 1480 	ld a,acc24+2
      000926 97               [ 1] 1481 	ld xl,a
      000927 7B 03            [ 1] 1482 	ld a,(U8,sp)
      000929 42               [ 4] 1483 	mul x,a
      00092A 9F               [ 1] 1484 	ld a,xl
      00092B C7 00 0D         [ 1] 1485 	ld acc24+2,a
      00092E 9E               [ 1] 1486 	ld a, xh
      00092F 6B 02            [ 1] 1487 	ld (OVFL,sp),a
                                   1488 ; multipy middle byte
      000931 C6 00 0C         [ 1] 1489 	ld a,acc24+1
      000934 97               [ 1] 1490 	ld xl,a
      000935 7B 03            [ 1] 1491 	ld a, (U8,sp)
      000937 42               [ 4] 1492 	mul x,a
                                   1493 ; add overflow to this partial product
      000938 72 FB 01         [ 2] 1494 	addw x,(OVFH,sp)
      00093B 9F               [ 1] 1495 	ld a,xl
      00093C C7 00 0C         [ 1] 1496 	ld acc24+1,a
      00093F 4F               [ 1] 1497 	clr a
      000940 A9 00            [ 1] 1498 	adc a,#0
      000942 6B 01            [ 1] 1499 	ld (OVFH,sp),a
      000944 9E               [ 1] 1500 	ld a,xh
      000945 6B 02            [ 1] 1501 	ld (OVFL,sp),a
                                   1502 ; multiply most signficant byte	
      000947 C6 00 0B         [ 1] 1503 	ld a, acc24
      00094A 97               [ 1] 1504 	ld xl, a
      00094B 7B 03            [ 1] 1505 	ld a, (U8,sp)
      00094D 42               [ 4] 1506 	mul x,a
      00094E 72 FB 01         [ 2] 1507 	addw x, (OVFH,sp)
      000951 9F               [ 1] 1508 	ld a, xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000952 C7 00 0B         [ 1] 1509 	ld acc24,a
      000955 5B 03            [ 2] 1510     addw sp,#VSIZE
      000957 85               [ 2] 1511 	popw x
      000958 81               [ 4] 1512 	ret
                                   1513 
                                   1514 ;------------------------------------
                                   1515 ;  two's complement acc24
                                   1516 ;  input:
                                   1517 ;		acc24 variable
                                   1518 ;  output:
                                   1519 ;		acc24 variable
                                   1520 ;-------------------------------------
      000959                       1521 neg_acc24:
      000959 72 53 00 0D      [ 1] 1522 	cpl acc24+2
      00095D 72 53 00 0C      [ 1] 1523 	cpl acc24+1
      000961 72 53 00 0B      [ 1] 1524 	cpl acc24
      000965 A6 01            [ 1] 1525 	ld a,#1
      000967 CB 00 0D         [ 1] 1526 	add a,acc24+2
      00096A C7 00 0D         [ 1] 1527 	ld acc24+2,a
      00096D 4F               [ 1] 1528 	clr a
      00096E C9 00 0C         [ 1] 1529 	adc a,acc24+1
      000971 C7 00 0C         [ 1] 1530 	ld acc24+1,a 
      000974 4F               [ 1] 1531 	clr a 
      000975 C9 00 0B         [ 1] 1532 	adc a,acc24 
      000978 C7 00 0B         [ 1] 1533 	ld acc24,a 
      00097B 81               [ 4] 1534 	ret
                                   1535 
                                   1536 
                                   1537 
                                   1538 
                                   1539 ;------------------------------------
                                   1540 ; convert alpha to uppercase
                                   1541 ; input:
                                   1542 ;    a  character to convert
                                   1543 ; output:
                                   1544 ;    a  uppercase character
                                   1545 ;------------------------------------
      00097C                       1546 to_upper::
      00097C A1 61            [ 1] 1547 	cp a,#'a
      00097E 2A 01            [ 1] 1548 	jrpl 1$
      000980 81               [ 4] 1549 0$:	ret
      000981 A1 7A            [ 1] 1550 1$: cp a,#'z	
      000983 22 FB            [ 1] 1551 	jrugt 0$
      000985 A0 20            [ 1] 1552 	sub a,#32
      000987 81               [ 4] 1553 	ret
                                   1554 	
                                   1555 ;------------------------------------
                                   1556 ; convert pad content in integer
                                   1557 ; input:
                                   1558 ;    x		.asciz to convert
                                   1559 ; output:
                                   1560 ;    acc24      int24_t
                                   1561 ;------------------------------------
                                   1562 	; local variables
                           000001  1563 	SIGN=1 ; 1 byte, 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000002  1564 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1565 	TEMP=3 ; 1 byte, temporary storage
                           000003  1566 	VSIZE=3 ; 3 bytes reserved for local storage
      000988                       1567 atoi24::
      000988 89               [ 2] 1568 	pushw x 
      000989                       1569 	_vars VSIZE
      000989 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1570 	; acc24=0 
      00098B 72 5F 00 0B      [ 1] 1571 	clr acc24    
      00098F 72 5F 00 0C      [ 1] 1572 	clr acc16
      000993 72 5F 00 0D      [ 1] 1573 	clr acc8 
      000997 0F 01            [ 1] 1574 	clr (SIGN,sp)
      000999 A6 0A            [ 1] 1575 	ld a,#10
      00099B 6B 02            [ 1] 1576 	ld (BASE,sp),a ; default base decimal
      00099D F6               [ 1] 1577 	ld a,(x)
      00099E 27 47            [ 1] 1578 	jreq 9$  ; completed if 0
      0009A0 A1 2D            [ 1] 1579 	cp a,#'-
      0009A2 26 04            [ 1] 1580 	jrne 1$
      0009A4 03 01            [ 1] 1581 	cpl (SIGN,sp)
      0009A6 20 08            [ 2] 1582 	jra 2$
      0009A8 A1 24            [ 1] 1583 1$: cp a,#'$
      0009AA 26 06            [ 1] 1584 	jrne 3$
      0009AC A6 10            [ 1] 1585 	ld a,#16
      0009AE 6B 02            [ 1] 1586 	ld (BASE,sp),a
      0009B0 5C               [ 1] 1587 2$:	incw x
      0009B1 F6               [ 1] 1588 	ld a,(x)
      0009B2                       1589 3$:	
      0009B2 A1 61            [ 1] 1590 	cp a,#'a
      0009B4 2B 02            [ 1] 1591 	jrmi 4$
      0009B6 A0 20            [ 1] 1592 	sub a,#32
      0009B8 A1 30            [ 1] 1593 4$:	cp a,#'0
      0009BA 2B 2B            [ 1] 1594 	jrmi 9$
      0009BC A0 30            [ 1] 1595 	sub a,#'0
      0009BE A1 0A            [ 1] 1596 	cp a,#10
      0009C0 2B 06            [ 1] 1597 	jrmi 5$
      0009C2 A0 07            [ 1] 1598 	sub a,#7
      0009C4 11 02            [ 1] 1599 	cp a,(BASE,sp)
      0009C6 2A 1F            [ 1] 1600 	jrpl 9$
      0009C8 6B 03            [ 1] 1601 5$:	ld (TEMP,sp),a
      0009CA 7B 02            [ 1] 1602 	ld a,(BASE,sp)
      0009CC CD 09 1F         [ 4] 1603 	call mulu24_8
      0009CF 7B 03            [ 1] 1604 	ld a,(TEMP,sp)
      0009D1 CB 00 0D         [ 1] 1605 	add a,acc24+2
      0009D4 C7 00 0D         [ 1] 1606 	ld acc24+2,a
      0009D7 4F               [ 1] 1607 	clr a
      0009D8 C9 00 0C         [ 1] 1608 	adc a,acc24+1
      0009DB C7 00 0C         [ 1] 1609 	ld acc24+1,a
      0009DE 4F               [ 1] 1610 	clr a
      0009DF C9 00 0B         [ 1] 1611 	adc a,acc24
      0009E2 C7 00 0B         [ 1] 1612 	ld acc24,a
      0009E5 20 C9            [ 2] 1613 	jra 2$
      0009E7 0D 01            [ 1] 1614 9$:	tnz (SIGN,sp)
      0009E9 27 03            [ 1] 1615     jreq atoi_exit
      0009EB CD 09 59         [ 4] 1616     call neg_acc24
      0009EE                       1617 atoi_exit: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009EE                       1618 	_drop VSIZE
      0009EE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009F0 85               [ 2] 1619 	popw x ; restore x
      0009F1 81               [ 4] 1620 	ret
                                   1621 
                                   1622 
                                   1623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1624 ;;   TINY BASIC  operators,
                                   1625 ;;   commands and functions 
                                   1626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1627 
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1629 ;;  Arithmetic operators
                                   1630 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1631 
                                   1632 ;debug support
                           000001  1633 DEBUG_PRT=1
                           000001  1634 .if DEBUG_PRT 
                           000001  1635 	REGA=1
                           000002  1636 	SAVEB=2
                           000003  1637 	REGX=3
                           000005  1638 	REGY=5
                           000007  1639 	ACC24=7
                           000009  1640 	VSIZE=9 
      0009F2                       1641 printxy:
      0009F2                       1642 	_vars VSIZE 
      0009F2 52 09            [ 2]    1     sub sp,#VSIZE 
      0009F4 6B 01            [ 1] 1643 	ld (REGA,sp),a 
      0009F6 C6 00 0A         [ 1] 1644 	ld a,base 
      0009F9 6B 02            [ 1] 1645 	ld (SAVEB,sp),a
      0009FB 1F 03            [ 2] 1646 	ldw (REGX,sp),x
      0009FD 17 05            [ 2] 1647 	ldw (REGY,sp),y
      0009FF CE 00 0B         [ 2] 1648 	ldw x,acc24 
      000A02 C6 00 0D         [ 1] 1649 	ld a,acc8 
      000A05 1F 07            [ 2] 1650 	ldw (ACC24,sp),x 
      000A07 6B 09            [ 1] 1651 	ld (ACC24+2,sp),a 
      000A09 35 10 00 0A      [ 1] 1652 	mov base,#16 
      000A0D 5F               [ 1] 1653 	clrw x 
      000A0E 7B 01            [ 1] 1654 	ld a,(REGA,sp)
      000A10 97               [ 1] 1655 	ld xl,a 
      000A11 CD 08 70         [ 4] 1656 	call print_int
      000A14 A6 20            [ 1] 1657 	ld a,#SPACE 
      000A16 CD 02 B2         [ 4] 1658 	call putc  
      000A19 1E 03            [ 2] 1659 	ldw x,(REGX,sp)
      000A1B CD 08 70         [ 4] 1660 	call print_int 
      000A1E A6 20            [ 1] 1661 	ld a,#SPACE 
      000A20 CD 02 B2         [ 4] 1662 	call putc  
      000A23 1E 05            [ 2] 1663 	ldw x,(REGY,sp)
      000A25 CD 08 70         [ 4] 1664 	call print_int 
      000A28 A6 0D            [ 1] 1665 	ld a,#CR 
      000A2A CD 02 B2         [ 4] 1666 	call putc 
      000A2D 7B 09            [ 1] 1667 	ld a,(ACC24+2,sp)
      000A2F 1E 07            [ 2] 1668 	ldw x,(ACC24,sp)
      000A31 CF 00 0B         [ 2] 1669 	ldw acc24,x 
      000A34 C7 00 0D         [ 1] 1670 	ld acc8,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A37 7B 02            [ 1] 1671 	ld a,(SAVEB,sp)
      000A39 C7 00 0A         [ 1] 1672 	ld base,a 
      000A3C 7B 01            [ 1] 1673 	ld a,(REGA,sp)
      000A3E 1E 03            [ 2] 1674 	ldw x,(REGX,sp)
      000A40 16 05            [ 2] 1675 	ldw y,(REGY,sp)
      000A42                       1676 	_drop VSIZE 
      000A42 5B 09            [ 2]    1     addw sp,#VSIZE 
      000A44 81               [ 4] 1677 	ret 
                                   1678 .endif 
                                   1679 
                                   1680 
                                   1681 ;--------------------------------------
                                   1682 ;  multiply 2 uint16_t return uint32_t
                                   1683 ;  input:
                                   1684 ;     x       uint16_t 
                                   1685 ;     y       uint16_t 
                                   1686 ;  output:
                                   1687 ;     x       product bits 15..0
                                   1688 ;     y       product bits 31..16 
                                   1689 ;---------------------------------------
                           000001  1690 		U1=1  ; uint16_t 
                           000003  1691 		DBL=3 ; uint32_t
                           000006  1692 		VSIZE=6
      000A45                       1693 umstar:
      000A45                       1694 	_vars VSIZE 
      000A45 52 06            [ 2]    1     sub sp,#VSIZE 
      000A47 1F 01            [ 2] 1695 	ldw (U1,sp),x 
                                   1696 ;initialize bits 31..16 of 
                                   1697 ;product to zero 
      000A49 0F 03            [ 1] 1698 	clr (DBL,sp)
      000A4B 0F 04            [ 1] 1699 	clr (DBL+1,sp)
                                   1700 ; produc U1L*U2L 
      000A4D 90 9F            [ 1] 1701 	ld a,yl 
      000A4F 42               [ 4] 1702 	mul x,a 
      000A50 1F 05            [ 2] 1703 	ldw (DBL+2,sp),x
                                   1704 ; product U1H*U2L 
      000A52 7B 01            [ 1] 1705 	ld a,(U1,sp) ; xh 
      000A54 93               [ 1] 1706 	ldw x,y
      000A55 42               [ 4] 1707 	mul x,a 
      000A56 4F               [ 1] 1708 	clr a 
      000A57 72 FB 04         [ 2] 1709 	addw x,(DBL+1,sp) 
      000A5A 4F               [ 1] 1710 	clr a 
      000A5B 19 03            [ 1] 1711 	adc a,(DBL,sp) 
      000A5D 6B 03            [ 1] 1712 	ld (DBL,sp),a ; bits 23..17 
      000A5F 1F 04            [ 2] 1713 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1714 ; product U1L*U2H
      000A61 90 5E            [ 1] 1715 	swapw y 
      000A63 93               [ 1] 1716 	ldw x,y
      000A64 7B 02            [ 1] 1717 	ld a,(U1+1,sp)
      000A66 42               [ 4] 1718 	mul x,a
      000A67 72 FB 04         [ 2] 1719 	addw x,(DBL+1,sp)
      000A6A 4F               [ 1] 1720 	clr a 
      000A6B 19 03            [ 1] 1721 	adc a,(DBL,sp)
      000A6D 6B 03            [ 1] 1722 	ld (DBL,sp),a 
      000A6F 1F 04            [ 2] 1723 	ldw (DBL+1,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1724 ; product U1H*U2H 	
      000A71 7B 01            [ 1] 1725 	ld a,(U1,sp)
      000A73 93               [ 1] 1726 	ldw x,y  
      000A74 42               [ 4] 1727 	mul x,a 
      000A75 72 FB 03         [ 2] 1728 	addw x,(DBL,sp)
      000A78 90 93            [ 1] 1729 	ldw y,x 
      000A7A 1E 05            [ 2] 1730 	ldw x,(DBL+2,sp)
      000A7C                       1731 	_drop VSIZE 
      000A7C 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A7E 81               [ 4] 1732 	ret
                                   1733 
                                   1734 
                                   1735 ;-------------------------------------
                                   1736 ; multiply 2 integers
                                   1737 ; input:
                                   1738 ;  	x       n1 
                                   1739 ;   y 		n2 
                                   1740 ; output:
                                   1741 ;	X        N1*N2 bits 15..0
                                   1742 ;   Y        N1*N2 bits 31..16 
                                   1743 ;-------------------------------------
                           000001  1744 	SIGN=1
                           000001  1745 	VSIZE=1
      000A7F                       1746 multiply:
      000A7F                       1747 	_vars VSIZE 
      000A7F 52 01            [ 2]    1     sub sp,#VSIZE 
      000A81 0F 01            [ 1] 1748 	clr (SIGN,sp)
      000A83 9E               [ 1] 1749 	ld a,xh 
      000A84 A4 80            [ 1] 1750 	and a,#0x80
      000A86 2A 03            [ 1] 1751 	jrpl 1$
      000A88 03 01            [ 1] 1752 	cpl (SIGN,sp)
      000A8A 50               [ 2] 1753 	negw x 
      000A8B                       1754 1$:	
      000A8B 90 9E            [ 1] 1755 	ld a,yh
      000A8D A4 80            [ 1] 1756 	and a,#0x80  
      000A8F 2A 04            [ 1] 1757 	jrpl 2$ 
      000A91 03 01            [ 1] 1758 	cpl (SIGN,sp)
      000A93 90 50            [ 2] 1759 	negw y 
      000A95                       1760 2$:	
      000A95 CD 0A 45         [ 4] 1761 	call umstar
      000A98 7B 01            [ 1] 1762 	ld a,(SIGN,sp)
      000A9A 27 03            [ 1] 1763 	jreq 3$
      000A9C CD 0A CC         [ 4] 1764 	call dneg 
      000A9F                       1765 3$:	
      000A9F                       1766 	_drop VSIZE 
      000A9F 5B 01            [ 2]    1     addw sp,#VSIZE 
      000AA1 81               [ 4] 1767 	ret
                                   1768 
                                   1769 ;--------------------------------------
                                   1770 ; divide uint32_t/uint16_t
                                   1771 ; return:  quotient and remainder 
                                   1772 ; quotient expected to be uint16_t 
                                   1773 ; input:
                                   1774 ;   DBLDIVDND    on stack 
                                   1775 ;   X            divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1776 ; output:
                                   1777 ;   X            quotient 
                                   1778 ;   Y            remainder 
                                   1779 ;---------------------------------------
                           000003  1780 	VSIZE=3
      000AA2                       1781 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000AA2                       1782 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1783 	; local variables 
                           000001  1784 	DIVISOR=1 
                           000003  1785 	CNTR=3 
      000AA2                       1786 udiv32_16:
      000AA2                       1787 	_vars VSIZE 
      000AA2 52 03            [ 2]    1     sub sp,#VSIZE 
      000AA4 1F 01            [ 2] 1788 	ldw (DIVISOR,sp),x	; save divisor 
      000AA6 1E 08            [ 2] 1789 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000AA8 16 06            [ 2] 1790 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000AAA 90 5D            [ 2] 1791 	tnzw y
      000AAC 26 06            [ 1] 1792 	jrne long_division 
      000AAE 16 01            [ 2] 1793 	ldw y,(DIVISOR,sp)
      000AB0 65               [ 2] 1794 	divw x,y
      000AB1                       1795 	_drop VSIZE 
      000AB1 5B 03            [ 2]    1     addw sp,#VSIZE 
      000AB3 81               [ 4] 1796 	ret
      000AB4                       1797 long_division:
      000AB4 51               [ 1] 1798 	exgw x,y ; hi in x, lo in y 
      000AB5 A6 11            [ 1] 1799 	ld a,#17 
      000AB7 6B 03            [ 1] 1800 	ld (CNTR,sp),a
      000AB9                       1801 1$:
      000AB9 13 01            [ 2] 1802 	cpw x,(DIVISOR,sp)
      000ABB 2B 03            [ 1] 1803 	jrmi 2$
      000ABD 72 F0 01         [ 2] 1804 	subw x,(DIVISOR,sp)
      000AC0 8C               [ 1] 1805 2$:	ccf 
      000AC1 90 59            [ 2] 1806 	rlcw y 
      000AC3 59               [ 2] 1807 	rlcw x 
      000AC4 0A 03            [ 1] 1808 	dec (CNTR,sp)
      000AC6 26 F1            [ 1] 1809 	jrne 1$
      000AC8 51               [ 1] 1810 	exgw x,y 
      000AC9                       1811 	_drop VSIZE 
      000AC9 5B 03            [ 2]    1     addw sp,#VSIZE 
      000ACB 81               [ 4] 1812 	ret
                                   1813 
                                   1814 ;-----------------------------
                                   1815 ; negate double int.
                                   1816 ; input:
                                   1817 ;   x     bits 15..0
                                   1818 ;   y     bits 31..16
                                   1819 ; output: 
                                   1820 ;   x     bits 15..0
                                   1821 ;   y     bits 31..16
                                   1822 ;-----------------------------
      000ACC                       1823 dneg:
      000ACC 53               [ 2] 1824 	cplw x 
      000ACD 90 53            [ 2] 1825 	cplw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000ACF 1C 00 01         [ 2] 1826 	addw x,#1 
      000AD2 24 02            [ 1] 1827 	jrnc 1$
      000AD4 90 5C            [ 1] 1828 	incw y 
      000AD6 81               [ 4] 1829 1$: ret 
                                   1830 
                                   1831 
                                   1832 ;--------------------------------
                                   1833 ; sign extend single to double
                                   1834 ; input:
                                   1835 ;   x    int16_t
                                   1836 ; output:
                                   1837 ;   x    int32_t bits 15..0
                                   1838 ;   y    int32_t bits 31..16
                                   1839 ;--------------------------------
      000AD7                       1840 dbl_sign_extend:
      000AD7 90 5F            [ 1] 1841 	clrw y
      000AD9 9E               [ 1] 1842 	ld a,xh 
      000ADA A4 80            [ 1] 1843 	and a,#0x80 
      000ADC 27 02            [ 1] 1844 	jreq 1$
      000ADE 90 53            [ 2] 1845 	cplw y
      000AE0 81               [ 4] 1846 1$: ret 	
                                   1847 
                                   1848 
                                   1849 ;----------------------------------
                                   1850 ;  euclidian divide dbl/n1 
                                   1851 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1852 ; input:
                                   1853 ;    dbl    int32_t on stack 
                                   1854 ;    x 		n1   int16_t  disivor  
                                   1855 ; output:
                                   1856 ;    X      dbl/x  int16_t 
                                   1857 ;    Y      remainder int16_t 
                                   1858 ;----------------------------------
                           000008  1859 	VSIZE=8
      000AE1                       1860 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000AE1                       1861 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000AE1                       1862 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1863 	; local variables
                           000001  1864 	DBLHI=1
                           000003  1865 	DBLLO=3 
                           000005  1866 	SDIVSR=5 ; sign divisor
                           000006  1867 	SQUOT=6 ; sign dividend 
                           000007  1868 	DIVISR=7 ; divisor 
      000AE1                       1869 div32_16:
      000AE1                       1870 	_vars VSIZE 
      000AE1 52 08            [ 2]    1     sub sp,#VSIZE 
      000AE3 0F 05            [ 1] 1871 	clr (SDIVSR,sp)
      000AE5 0F 06            [ 1] 1872 	clr (SQUOT,sp)
                                   1873 ; copy arguments 
      000AE7 16 0B            [ 2] 1874 	ldw y,(DIVDNDHI,sp)
      000AE9 17 01            [ 2] 1875 	ldw (DBLHI,sp),y
      000AEB 16 0D            [ 2] 1876 	ldw y,(DIVDNDLO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000AED 17 03            [ 2] 1877 	ldw (DBLLO,sp),y 
                                   1878 ; check for 0 divisor
      000AEF 5D               [ 2] 1879 	tnzw x 
      000AF0 26 05            [ 1] 1880     jrne 0$
      000AF2 A6 04            [ 1] 1881 	ld a,#ERR_DIV0 
      000AF4 CC 07 28         [ 2] 1882 	jp tb_error 
                                   1883 ; check divisor sign 	
      000AF7 9E               [ 1] 1884 0$:	ld a,xh 
      000AF8 A4 80            [ 1] 1885 	and a,#0x80 
      000AFA 27 05            [ 1] 1886 	jreq 1$
      000AFC 03 05            [ 1] 1887 	cpl (SDIVSR,sp)
      000AFE 03 06            [ 1] 1888 	cpl (SQUOT,sp)
      000B00 50               [ 2] 1889 	negw x
      000B01 1F 07            [ 2] 1890 1$:	ldw (DIVISR,sp),x
                                   1891 ; check dividend sign 	 
      000B03 7B 01            [ 1] 1892  	ld a,(DBLHI,sp) 
      000B05 A4 80            [ 1] 1893 	and a,#0x80 
      000B07 27 0D            [ 1] 1894 	jreq 2$ 
      000B09 03 06            [ 1] 1895 	cpl (SQUOT,sp)
      000B0B 1E 03            [ 2] 1896 	ldw x,(DBLLO,sp)
      000B0D 16 01            [ 2] 1897 	ldw y,(DBLHI,sp)
      000B0F CD 0A CC         [ 4] 1898 	call dneg 
      000B12 1F 03            [ 2] 1899 	ldw (DBLLO,sp),x 
      000B14 17 01            [ 2] 1900 	ldw (DBLHI,sp),y 
      000B16 1E 07            [ 2] 1901 2$:	ldw x,(DIVISR,sp)
      000B18 CD 0A A2         [ 4] 1902 	call udiv32_16
      000B1B 90 5D            [ 2] 1903 	tnzw y 
      000B1D 27 11            [ 1] 1904 	jreq 3$ 
                                   1905 ; x=quotient 
                                   1906 ; y=remainder 
                                   1907 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000B1F 7B 06            [ 1] 1908 	ld a,(SQUOT,sp)
      000B21 18 05            [ 1] 1909 	xor a,(SDIVSR,sp)
      000B23 27 0B            [ 1] 1910 	jreq 3$
      000B25 5C               [ 1] 1911 	incw x 
      000B26 90 CF 00 0C      [ 2] 1912 	ldw acc16,y 
      000B2A 16 07            [ 2] 1913 	ldw y,(DIVISR,sp)
      000B2C 72 B2 00 0C      [ 2] 1914 	subw y,acc16
                                   1915 ; sign quotient
      000B30 7B 06            [ 1] 1916 3$:	ld a,(SQUOT,sp)
      000B32 27 01            [ 1] 1917 	jreq 4$
      000B34 50               [ 2] 1918 	negw x 
      000B35                       1919 4$:	
      000B35                       1920 	_drop VSIZE 
      000B35 5B 08            [ 2]    1     addw sp,#VSIZE 
      000B37 81               [ 4] 1921 	ret 
                                   1922 
                                   1923 
                                   1924 
                                   1925 ;----------------------------------
                                   1926 ; division x/y 
                                   1927 ; input:
                                   1928 ;    X       dividend
                                   1929 ;    Y       divisor 
                                   1930 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1931 ;    X       quotient
                                   1932 ;    Y       remainder 
                                   1933 ;-----------------------------------
                           000004  1934 	VSIZE=4 
                                   1935 	; local variables 
                           000001  1936 	DBLHI=1
                           000003  1937 	DBLLO=3
      000B38                       1938 divide: 
      000B38                       1939 	_vars VSIZE 
      000B38 52 04            [ 2]    1     sub sp,#VSIZE 
      000B3A 90 CF 00 0C      [ 2] 1940 	ldw acc16,y
      000B3E CD 0A D7         [ 4] 1941 	call dbl_sign_extend
      000B41 1F 03            [ 2] 1942 	ldw (DBLLO,sp),x 
      000B43 17 01            [ 2] 1943 	ldw (DBLHI,sp),y 
      000B45 CE 00 0C         [ 2] 1944 	ldw x,acc16 
      000B48 CD 0A E1         [ 4] 1945 	call div32_16 
      000B4B                       1946 	_drop VSIZE 
      000B4B 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B4D 81               [ 4] 1947 	ret
                                   1948 
                                   1949 
                                   1950 ;----------------------------------
                                   1951 ;  remainder resulting from euclidian 
                                   1952 ;  division of x/y 
                                   1953 ; input:
                                   1954 ;   x   	dividend int16_t 
                                   1955 ;   y 		divisor int16_t
                                   1956 ; output:
                                   1957 ;   X       n1%n2 
                                   1958 ;----------------------------------
      000B4E                       1959 modulo:
      000B4E CD 0B 38         [ 4] 1960 	call divide
      000B51 93               [ 1] 1961 	ldw x,y 
      000B52 81               [ 4] 1962 	ret 
                                   1963 
                                   1964 ;----------------------------------
                                   1965 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1966 ; return expr1*expr2/expr3 
                                   1967 ; product result is int32_t and 
                                   1968 ; divisiont is int32_t/int16_t
                                   1969 ;----------------------------------
                           000004  1970 	DBL_SIZE=4 
      000B53                       1971 muldiv:
      000B53 CD 0B C9         [ 4] 1972 	call func_args 
      000B56 A1 03            [ 1] 1973 	cp a,#3 
      000B58 27 03            [ 1] 1974 	jreq 1$
      000B5A CC 07 26         [ 2] 1975 	jp syntax_error
      000B5D                       1976 1$: 
      000B5D 1E 05            [ 2] 1977 	ldw x,(5,sp) ; expr1
      000B5F 16 03            [ 2] 1978 	ldw y,(3,sp) ; expr2
      000B61 CD 0A 7F         [ 4] 1979 	call multiply 
      000B64 1F 05            [ 2] 1980 	ldw (5,sp),x  ;int32_t 15..0
      000B66 17 03            [ 2] 1981 	ldw (3,sp),y  ;int32_t 31..16
      000B68 85               [ 2] 1982 	popw x        ; expr3 
      000B69 CD 0A E1         [ 4] 1983 	call div32_16 ; int32_t/expr3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B6C                       1984 	_drop DBL_SIZE
      000B6C 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000B6E 81               [ 4] 1985 	ret 
                                   1986 
                                   1987 
                                   1988 ;---------------------------------
                                   1989 ; dictionary search 
                                   1990 ; input:
                                   1991 ;	X 		dictionary entry point, name field  
                                   1992 ;   y		.asciz name to search 
                                   1993 ; output:
                                   1994 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   1995 ;  X		cmd_index
                                   1996 ;---------------------------------
                           000001  1997 	NLEN=1 ; cmd length 
                           000002  1998 	XSAVE=2
                           000004  1999 	YSAVE=4
                           000005  2000 	VSIZE=5 
      000B6F                       2001 search_dict::
      000B6F                       2002 	_vars VSIZE 
      000B6F 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2003 
      000B71 17 04            [ 2] 2004 	ldw (YSAVE,sp),y 
      000B73                       2005 search_next:
      000B73 1F 02            [ 2] 2006 	ldw (XSAVE,sp),x 
                                   2007 ; get name length in dictionary	
      000B75 F6               [ 1] 2008 	ld a,(x)
      000B76 A4 0F            [ 1] 2009 	and a,#0xf 
      000B78 6B 01            [ 1] 2010 	ld (NLEN,sp),a  
      000B7A 16 04            [ 2] 2011 	ldw y,(YSAVE,sp) ; name pointer 
      000B7C 5C               [ 1] 2012 	incw x 
      000B7D                       2013 cp_loop:
      000B7D 90 F6            [ 1] 2014 	ld a,(y)
      000B7F 27 1B            [ 1] 2015 	jreq str_match 
      000B81 0D 01            [ 1] 2016 	tnz (NLEN,sp)
      000B83 27 0A            [ 1] 2017 	jreq no_match  
      000B85 F1               [ 1] 2018 	cp a,(x)
      000B86 26 07            [ 1] 2019 	jrne no_match 
      000B88 90 5C            [ 1] 2020 	incw y 
      000B8A 5C               [ 1] 2021 	incw x
      000B8B 0A 01            [ 1] 2022 	dec (NLEN,sp)
      000B8D 20 EE            [ 2] 2023 	jra cp_loop 
      000B8F                       2024 no_match:
      000B8F 1E 02            [ 2] 2025 	ldw x,(XSAVE,sp) 
      000B91 1D 00 02         [ 2] 2026 	subw x,#2 ; move X to link field
      000B94 4B 00            [ 1] 2027 	push #TK_NONE 
      000B96 FE               [ 2] 2028 	ldw x,(x) ; next word link 
      000B97 84               [ 1] 2029 	pop a ; TK_NONE 
      000B98 27 1F            [ 1] 2030 	jreq search_exit  ; not found  
                                   2031 ;try next 
      000B9A 20 D7            [ 2] 2032 	jra search_next
      000B9C                       2033 str_match:
      000B9C 1E 02            [ 2] 2034 	ldw x,(XSAVE,sp)
      000B9E F6               [ 1] 2035 	ld a,(X)
      000B9F 6B 01            [ 1] 2036 	ld (NLEN,sp),a ; needed to test keyword type  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000BA1 A4 0F            [ 1] 2037 	and a,#0xf 
                                   2038 ; move x to procedure address field 	
      000BA3 4C               [ 1] 2039 	inc a 
      000BA4 C7 00 0D         [ 1] 2040 	ld acc8,a 
      000BA7 72 5F 00 0C      [ 1] 2041 	clr acc16 
      000BAB 72 BB 00 0C      [ 2] 2042 	addw x,acc16 
      000BAF FE               [ 2] 2043 	ldw x,(x) ; routine index  
                                   2044 ;determine keyword type bits 7:6 
      000BB0 7B 01            [ 1] 2045 	ld a,(NLEN,sp)
      000BB2 4E               [ 1] 2046 	swap a 
      000BB3 A4 0C            [ 1] 2047 	and a,#0xc
      000BB5 44               [ 1] 2048 	srl a
      000BB6 44               [ 1] 2049 	srl a 
      000BB7 AB 80            [ 1] 2050 	add a,#128
      000BB9                       2051 search_exit: 
      000BB9                       2052 	_drop VSIZE 	 
      000BB9 5B 05            [ 2]    1     addw sp,#VSIZE 
      000BBB 81               [ 4] 2053 	ret 
                                   2054 
                                   2055 ;---------------------
                                   2056 ; check if next token
                                   2057 ;  is of expected type 
                                   2058 ; input:
                                   2059 ;   A 		 expected token attribute
                                   2060 ;  ouput:
                                   2061 ;   none     if fail call syntax_error 
                                   2062 ;--------------------
      000BBC                       2063 expect:
      000BBC 88               [ 1] 2064 	push a 
      000BBD CD 08 15         [ 4] 2065 	call next_token 
      000BC0 11 01            [ 1] 2066 	cp a,(1,sp)
      000BC2 27 03            [ 1] 2067 	jreq 1$
      000BC4 CC 07 26         [ 2] 2068 	jp syntax_error
      000BC7 84               [ 1] 2069 1$: pop a 
      000BC8 81               [ 4] 2070 	ret 
                                   2071 
                                   2072 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2073 ; parse arguments list 
                                   2074 ; between ()
                                   2075 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC9                       2076 func_args:
      000BC9 A6 07            [ 1] 2077 	ld a,#TK_LPAREN 
      000BCB CD 0B BC         [ 4] 2078 	call expect 
                                   2079 ; expected to continue in arg_list 
                                   2080 ; caller must check for TK_RPAREN 
                                   2081 
                                   2082 ;-------------------------------
                                   2083 ; parse embedded BASIC routines 
                                   2084 ; arguments list.
                                   2085 ; arg_list::=  rel[','rel]*
                                   2086 ; all arguments are of integer type
                                   2087 ; and pushed on stack 
                                   2088 ; input:
                                   2089 ;   none
                                   2090 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2091 ;   stack{n}   arguments pushed on stack
                                   2092 ;   A 	number of arguments pushed on stack  
                                   2093 ;--------------------------------
      000BCE                       2094 arg_list:
      000BCE 4B 00            [ 1] 2095 	push #0  
      000BD0 CD 0D 16         [ 4] 2096 1$: call relation
      000BD3 A1 00            [ 1] 2097 	cp a,#TK_NONE 
      000BD5 27 20            [ 1] 2098 	jreq 5$
      000BD7 A1 84            [ 1] 2099 	cp a,#TK_INTGR
      000BD9 26 13            [ 1] 2100 	jrne 4$
      000BDB                       2101 3$: 
                                   2102 ; swap return address with argument
      000BDB 84               [ 1] 2103 	pop a ; arg_count
      000BDC 90 85            [ 2] 2104 	popw y ; return address 
      000BDE 89               [ 2] 2105 	pushw x ; new argument 
      000BDF 90 89            [ 2] 2106 	pushw y 
      000BE1 4C               [ 1] 2107     inc a
      000BE2 88               [ 1] 2108 	push a 
      000BE3 CD 08 15         [ 4] 2109 	call next_token 
      000BE6 A1 09            [ 1] 2110 	cp a,#TK_COMMA 
      000BE8 27 E6            [ 1] 2111 	jreq 1$ 
      000BEA A1 00            [ 1] 2112 	cp a,#TK_NONE 
      000BEC 27 09            [ 1] 2113 	jreq 5$ 
      000BEE A1 08            [ 1] 2114 4$:	cp a,#TK_RPAREN 
      000BF0 27 05            [ 1] 2115 	jreq 5$
      000BF2                       2116 	_unget_token 
      000BF2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000BF7 84               [ 1] 2117 5$:	pop a  
      000BF8 81               [ 4] 2118 	ret 
                                   2119 
                                   2120 ;--------------------------------
                                   2121 ;   BASIC commnands 
                                   2122 ;--------------------------------
                                   2123 
                                   2124 ;--------------------------------
                                   2125 ;  arithmetic and relational 
                                   2126 ;  routines
                                   2127 ;  operators precedence
                                   2128 ;  highest to lowest
                                   2129 ;  operators on same row have 
                                   2130 ;  same precedence and are executed
                                   2131 ;  from left to right.
                                   2132 ;	'*','/','%'
                                   2133 ;   '-','+'
                                   2134 ;   '=','>','<','>=','<=','<>','><'
                                   2135 ;   '<>' and '><' are equivalent for not equal.
                                   2136 ;--------------------------------
                                   2137 
                                   2138 ;---------------------
                                   2139 ; return array element
                                   2140 ; address from @(expr)
                                   2141 ; input:
                                   2142 ;   A 		TK_ARRAY
                                   2143 ; output:
                                   2144 ;   A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2145 ;	X 		element address 
                                   2146 ;----------------------
      000BF9                       2147 get_array_element:
      000BF9 CD 0B C9         [ 4] 2148 	call func_args 
      000BFC A1 01            [ 1] 2149 	cp a,#1
      000BFE 27 03            [ 1] 2150 	jreq 1$
      000C00 CC 07 26         [ 2] 2151 	jp syntax_error
      000C03 85               [ 2] 2152 1$: popw x 
                                   2153 	; check for bounds 
      000C04 C3 00 1E         [ 2] 2154 	cpw x,array_size 
      000C07 23 05            [ 2] 2155 	jrule 3$
                                   2156 ; bounds {1..array_size}	
      000C09 A6 0A            [ 1] 2157 2$: ld a,#ERR_BAD_VALUE 
      000C0B CC 07 28         [ 2] 2158 	jp tb_error 
      000C0E 5D               [ 2] 2159 3$: tnzw  x
      000C0F 27 F8            [ 1] 2160 	jreq 2$ 
      000C11 58               [ 2] 2161 	sllw x 
      000C12 89               [ 2] 2162 	pushw x 
      000C13 AE 16 90         [ 2] 2163 	ldw x,#tib
      000C16 72 F0 01         [ 2] 2164 	subw x,(1,sp)
      000C19                       2165 	_drop 2   
      000C19 5B 02            [ 2]    1     addw sp,#2 
      000C1B A6 84            [ 1] 2166 	ld a,#TK_INTGR
      000C1D 81               [ 4] 2167 	ret 
                                   2168 
                                   2169 
                                   2170 ;***********************************
                                   2171 ;   expression parse,execute 
                                   2172 ;***********************************
                                   2173 ;-----------------------------------
                                   2174 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2175 ;			 integer | function |
                                   2176 ;			 '('relation')' 
                                   2177 ; output:
                                   2178 ;   A    token attribute 
                                   2179 ;   X 	 integer
                                   2180 ; ---------------------------------
                           000001  2181 	NEG=1
                           000001  2182 	VSIZE=1
      000C1E                       2183 factor:
      000C1E                       2184 	_vars VSIZE 
      000C1E 52 01            [ 2]    1     sub sp,#VSIZE 
      000C20 CD 08 15         [ 4] 2185 	call next_token
      000C23 A1 02            [ 1] 2186 	cp a,#CMD_END  
      000C25 25 3D            [ 1] 2187 	jrult 16$
      000C27 6B 01            [ 1] 2188 1$:	ld (NEG,sp),a 
      000C29 A4 30            [ 1] 2189 	and a,#TK_GRP_MASK
      000C2B A1 10            [ 1] 2190 	cp a,#TK_GRP_ADD 
      000C2D 27 04            [ 1] 2191 	jreq 2$
      000C2F 7B 01            [ 1] 2192 	ld a,(NEG,sp)
      000C31 20 03            [ 2] 2193 	jra 4$  
      000C33                       2194 2$:	
      000C33 CD 08 15         [ 4] 2195 	call next_token 
      000C36                       2196 4$:	
      000C36 A1 81            [ 1] 2197 	cp a,#TK_IFUNC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000C38 26 03            [ 1] 2198 	jrne 5$ 
      000C3A FD               [ 4] 2199 	call (x) 
      000C3B 20 32            [ 2] 2200 	jra 18$ 
      000C3D                       2201 5$:
      000C3D A1 84            [ 1] 2202 	cp a,#TK_INTGR
      000C3F 26 02            [ 1] 2203 	jrne 6$
      000C41 20 2C            [ 2] 2204 	jra 18$
      000C43                       2205 6$:
      000C43 A1 06            [ 1] 2206 	cp a,#TK_ARRAY
      000C45 26 06            [ 1] 2207 	jrne 10$
      000C47 CD 0B F9         [ 4] 2208 	call get_array_element
      000C4A FE               [ 2] 2209 	ldw x,(x)
      000C4B 20 22            [ 2] 2210 	jra 18$ 
      000C4D                       2211 10$:
      000C4D A1 85            [ 1] 2212 	cp a,#TK_VAR 
      000C4F 26 03            [ 1] 2213 	jrne 12$
      000C51 FE               [ 2] 2214 	ldw x,(x)
      000C52 20 1B            [ 2] 2215 	jra 18$
      000C54                       2216 12$:			
      000C54 A1 07            [ 1] 2217 	cp a,#TK_LPAREN
      000C56 26 0C            [ 1] 2218 	jrne 16$
      000C58 CD 0D 16         [ 4] 2219 	call relation
      000C5B 89               [ 2] 2220 	pushw x 
      000C5C A6 08            [ 1] 2221 	ld a,#TK_RPAREN 
      000C5E CD 0B BC         [ 4] 2222 	call expect
      000C61 85               [ 2] 2223 	popw x 
      000C62 20 0B            [ 2] 2224 	jra 18$	
      000C64                       2225 16$:
      000C64 4D               [ 1] 2226 	tnz a 
      000C65 27 11            [ 1] 2227 	jreq 20$ 
      000C67                       2228 	_unget_token
      000C67 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C6C 4F               [ 1] 2229 	clr a 
      000C6D 20 09            [ 2] 2230 	jra 20$ 
      000C6F                       2231 18$: 
      000C6F A6 11            [ 1] 2232 	ld a,#TK_MINUS 
      000C71 11 01            [ 1] 2233 	cp a,(NEG,sp)
      000C73 26 01            [ 1] 2234 	jrne 19$
      000C75 50               [ 2] 2235 	negw x
      000C76                       2236 19$:
      000C76 A6 84            [ 1] 2237 	ld a,#TK_INTGR
      000C78                       2238 20$:
      000C78                       2239 	_drop VSIZE
      000C78 5B 01            [ 2]    1     addw sp,#VSIZE 
      000C7A 81               [ 4] 2240 	ret
                                   2241 
                                   2242 ;-----------------------------------
                                   2243 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2244 ; output:
                                   2245 ;   A    	token attribute 
                                   2246 ;	X		integer
                                   2247 ;-----------------------------------
                           000001  2248 	N1=1   ; int16_t
                           000003  2249 	MULOP=3
                           000003  2250 	VSIZE=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C7B                       2251 term:
      000C7B                       2252 	_vars VSIZE
      000C7B 52 03            [ 2]    1     sub sp,#VSIZE 
      000C7D CD 0C 1E         [ 4] 2253 	call factor
      000C80 4D               [ 1] 2254 	tnz a 
      000C81 27 47            [ 1] 2255 	jreq term_exit 
      000C83                       2256 term01:	 ; check for  operator 
      000C83 1F 01            [ 2] 2257 	ldw (N1,sp),x  ; save first factor 
      000C85 CD 08 15         [ 4] 2258 	call next_token
      000C88 6B 03            [ 1] 2259 	ld (MULOP,sp),a
      000C8A A1 02            [ 1] 2260 	cp a,#CMD_END
      000C8C 25 2F            [ 1] 2261 	jrult 8$
      000C8E A4 30            [ 1] 2262 	and a,#TK_GRP_MASK
      000C90 A1 20            [ 1] 2263 	cp a,#TK_GRP_MULT
      000C92 27 02            [ 1] 2264 	jreq 1$
      000C94 20 27            [ 2] 2265 	jra 8$
      000C96                       2266 1$:	; got *|/|%
      000C96 CD 0C 1E         [ 4] 2267 	call factor
      000C99 A1 84            [ 1] 2268 	cp a,#TK_INTGR
      000C9B 27 03            [ 1] 2269 	jreq 2$
      000C9D CC 07 26         [ 2] 2270 	jp syntax_error
      000CA0 90 93            [ 1] 2271 2$:	ldw y,x 
      000CA2 1E 01            [ 2] 2272 	ldw x,(N1,sp)
      000CA4 7B 03            [ 1] 2273 	ld a,(MULOP,sp) 
      000CA6 A1 20            [ 1] 2274 	cp a,#TK_MULT 
      000CA8 26 05            [ 1] 2275 	jrne 3$
      000CAA CD 0A 7F         [ 4] 2276 	call multiply 
      000CAD 20 D4            [ 2] 2277 	jra term01
      000CAF A1 21            [ 1] 2278 3$: cp a,#TK_DIV 
      000CB1 26 05            [ 1] 2279 	jrne 4$ 
      000CB3 CD 0B 38         [ 4] 2280 	call divide 
      000CB6 20 CB            [ 2] 2281 	jra term01 
      000CB8 CD 0B 4E         [ 4] 2282 4$: call modulo
      000CBB 20 C6            [ 2] 2283 	jra term01 
      000CBD 7B 03            [ 1] 2284 8$: ld a,(MULOP,sp)
      000CBF 27 05            [ 1] 2285 	jreq 9$ 
      000CC1                       2286 	_unget_token
      000CC1 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000CC6 1E 01            [ 2] 2287 9$: ldw x,(N1,sp)
      000CC8 A6 84            [ 1] 2288 	ld a,#TK_INTGR 	
      000CCA                       2289 term_exit:
      000CCA                       2290 	_drop VSIZE 
      000CCA 5B 03            [ 2]    1     addw sp,#VSIZE 
      000CCC 81               [ 4] 2291 	ret 
                                   2292 
                                   2293 ;-------------------------------
                                   2294 ;  expr ::= term [['+'|'-'] term]*
                                   2295 ;  result range {-32768..32767}
                                   2296 ;  output:
                                   2297 ;   A    token attribute 
                                   2298 ;   X	 integer   
                                   2299 ;-------------------------------
                           000001  2300 	N1=1
                           000003  2301 	N2=3 
                           000005  2302 	OP=5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                           000005  2303 	VSIZE=5 
      000CCD                       2304 expression:
      000CCD                       2305 	_vars VSIZE 
      000CCD 52 05            [ 2]    1     sub sp,#VSIZE 
      000CCF CD 0C 7B         [ 4] 2306 	call term
      000CD2 4D               [ 1] 2307 	tnz a 
      000CD3 27 3E            [ 1] 2308 	jreq expr_exit 
      000CD5 1F 01            [ 2] 2309 1$:	ldw (N1,sp),x 
      000CD7 CD 08 15         [ 4] 2310 	call next_token
      000CDA 6B 05            [ 1] 2311 	ld (OP,sp),a 
      000CDC A1 02            [ 1] 2312 	cp a,#CMD_END 
      000CDE 25 26            [ 1] 2313 	jrult 8$ 
      000CE0 A4 30            [ 1] 2314 	and a,#TK_GRP_MASK
      000CE2 A1 10            [ 1] 2315 	cp a,#TK_GRP_ADD 
      000CE4 27 02            [ 1] 2316 	jreq 2$ 
      000CE6 20 1E            [ 2] 2317 	jra 8$
      000CE8                       2318 2$: 
      000CE8 CD 0C 7B         [ 4] 2319 	call term
      000CEB A1 84            [ 1] 2320 	cp a,#TK_INTGR
      000CED 27 03            [ 1] 2321 	jreq 3$
      000CEF CC 07 26         [ 2] 2322 	jp syntax_error
      000CF2 1F 03            [ 2] 2323 3$:	ldw (N2,sp),x 
      000CF4 1E 01            [ 2] 2324 	ldw x,(N1,sp)
      000CF6 7B 05            [ 1] 2325 	ld a,(OP,sp)
      000CF8 A1 10            [ 1] 2326 	cp a,#TK_PLUS 
      000CFA 26 05            [ 1] 2327 	jrne 4$
      000CFC 72 FB 03         [ 2] 2328 	addw x,(N2,sp)
      000CFF 20 D4            [ 2] 2329 	jra 1$ 
      000D01 72 F0 03         [ 2] 2330 4$:	subw x,(N2,sp)
      000D04 20 CF            [ 2] 2331 	jra 1$
      000D06 7B 05            [ 1] 2332 8$: ld a,(OP,sp)
      000D08 27 05            [ 1] 2333 	jreq 9$ 
      000D0A                       2334 	_unget_token	
      000D0A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D0F 1E 01            [ 2] 2335 9$: ldw x,(N1,sp)
      000D11 A6 84            [ 1] 2336 	ld a,#TK_INTGR	
      000D13                       2337 expr_exit:
      000D13                       2338 	_drop VSIZE 
      000D13 5B 05            [ 2]    1     addw sp,#VSIZE 
      000D15 81               [ 4] 2339 	ret 
                                   2340 
                                   2341 ;---------------------------------------------
                                   2342 ; rel ::= expr rel_op expr
                                   2343 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   2344 ;  relation return  integer , zero is false 
                                   2345 ;  output:
                                   2346 ;    A 		token attribute  
                                   2347 ;	 X		integer 
                                   2348 ;---------------------------------------------
                           000001  2349 	N1=1
                           000003  2350 	RELOP=3
                           000003  2351 	VSIZE=3 
      000D16                       2352 relation: 
      000D16                       2353 	_vars VSIZE
      000D16 52 03            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000D18 CD 0C CD         [ 4] 2354 	call expression
      000D1B 4D               [ 1] 2355 	tnz a 
      000D1C 27 4D            [ 1] 2356 	jreq rel_exit
      000D1E 1F 01            [ 2] 2357 	ldw (N1,sp),x 
                                   2358 ; expect rel_op or leave 
      000D20 CD 08 15         [ 4] 2359 	call next_token 
      000D23 6B 03            [ 1] 2360 	ld (RELOP,sp),a 
      000D25 A4 30            [ 1] 2361 	and a,#TK_GRP_MASK
      000D27 A1 30            [ 1] 2362 	cp a,#TK_GRP_RELOP 
      000D29 26 33            [ 1] 2363 	jrne 8$
      000D2B                       2364 2$:	; expect another expression
      000D2B CD 0C CD         [ 4] 2365 	call expression
      000D2E A1 84            [ 1] 2366 	cp a,#TK_INTGR
      000D30 27 03            [ 1] 2367 	jreq 3$
      000D32 CC 07 26         [ 2] 2368 	jp syntax_error 
      000D35 CF 00 0C         [ 2] 2369 3$:	ldw acc16,x 
      000D38 1E 01            [ 2] 2370 	ldw x,(N1,sp) 
      000D3A 72 B0 00 0C      [ 2] 2371 	subw x,acc16
      000D3E 26 06            [ 1] 2372 	jrne 4$
      000D40 35 02 00 0D      [ 1] 2373 	mov acc8,#2 ; n1==n2
      000D44 20 0C            [ 2] 2374 	jra 6$ 
      000D46                       2375 4$: 
      000D46 2C 06            [ 1] 2376 	jrsgt 5$  
      000D48 35 04 00 0D      [ 1] 2377 	mov acc8,#4 ; n1<2 
      000D4C 20 04            [ 2] 2378 	jra 6$
      000D4E                       2379 5$:
      000D4E 35 01 00 0D      [ 1] 2380 	mov acc8,#1 ; n1>n2 
      000D52                       2381 6$:
      000D52 5F               [ 1] 2382 	clrw x 
      000D53 C6 00 0D         [ 1] 2383 	ld a, acc8  
      000D56 14 03            [ 1] 2384 	and a,(RELOP,sp)
      000D58 4D               [ 1] 2385 	tnz a 
      000D59 27 0E            [ 1] 2386 	jreq 10$
      000D5B 5C               [ 1] 2387 	incw x 
      000D5C 20 0B            [ 2] 2388 	jra 10$  	
      000D5E 7B 03            [ 1] 2389 8$: ld a,(RELOP,sp)
      000D60 27 05            [ 1] 2390 	jreq 9$
      000D62                       2391 	_unget_token
      000D62 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D67                       2392 9$: 
      000D67 1E 01            [ 2] 2393 	ldw x,(N1,sp)
      000D69                       2394 10$:
      000D69 A6 84            [ 1] 2395 	ld a,#TK_INTGR
      000D6B                       2396 rel_exit:
      000D6B                       2397 	_drop VSIZE
      000D6B 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D6D 81               [ 4] 2398 	ret 
                                   2399 
                                   2400 ;--------------------------------
                                   2401 ; BASIC: SHOW 
                                   2402 ; print stack content in hexadecimal bytes 
                                   2403 ; 16 bytes per row 
                                   2404 ;--------------------------------
      000D6E                       2405 show:
      000D6E AE 0D 88         [ 2] 2406 	ldw x,#cstk_prompt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D71 CD 1E 8C         [ 4] 2407 	call puts 
      000D74 96               [ 1] 2408 	ldw x,sp 
      000D75 1C 00 03         [ 2] 2409 	addw x,#3 ; ignore return address
      000D78 90 AE 18 00      [ 2] 2410 	ldw y,#RAM_SIZE  
      000D7C CF 00 0C         [ 2] 2411 	ldw acc16,x 
      000D7F 72 B2 00 0C      [ 2] 2412 	subw y,acc16
      000D83 CD 03 4F         [ 4] 2413 	call hex_dump
      000D86 4F               [ 1] 2414 	clr a 
      000D87 81               [ 4] 2415 	ret
                                   2416 
      000D88 0A 63 6F 6E 74 65 6E  2417 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   2418 
                                   2419 
                                   2420 ;--------------------------------------------
                                   2421 ; BASIC: HEX 
                                   2422 ; select hexadecimal base for integer print
                                   2423 ;---------------------------------------------
      000DAF                       2424 hex_base:
      000DAF 35 10 00 0A      [ 1] 2425 	mov base,#16 
      000DB3 81               [ 4] 2426 	ret 
                                   2427 
                                   2428 ;--------------------------------------------
                                   2429 ; BASIC: DEC 
                                   2430 ; select decimal base for integer print
                                   2431 ;---------------------------------------------
      000DB4                       2432 dec_base:
      000DB4 35 0A 00 0A      [ 1] 2433 	mov base,#10
      000DB8 81               [ 4] 2434 	ret 
                                   2435 
                                   2436 ;------------------------
                                   2437 ; BASIC: FREE 
                                   2438 ; return free size in text area
                                   2439 ; output:
                                   2440 ;   A 		TK_INTGR
                                   2441 ;   X 	    size integer
                                   2442 ;--------------------------
      000DB9                       2443 free:
      000DB9 CE 00 19         [ 2] 2444 	ldw x,txtbgn 
      000DBC C3 28 80         [ 2] 2445 	cpw x,app_space
      000DBF 25 16            [ 1] 2446 	jrult 1$
      000DC1 AE FF FF         [ 2] 2447 	ldw x,#0xffff 
      000DC4 90 AE 28 84      [ 2] 2448 	ldw y,#app
      000DC8 72 B9 28 82      [ 2] 2449 	addw y,app_size
      000DCC 90 CF 00 0C      [ 2] 2450 	ldw acc16,y 
      000DD0 72 B0 00 0C      [ 2] 2451 	subw x,acc16 
      000DD4 5C               [ 1] 2452 	incw x 
      000DD5 20 07            [ 2] 2453 	jra 2$ 
      000DD7 AE 16 90         [ 2] 2454 1$:	ldw x,#tib 
      000DDA 72 B0 00 1B      [ 2] 2455 	subw x,txtend 
      000DDE A6 84            [ 1] 2456 2$:	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000DE0 81               [ 4] 2457 	ret 
                                   2458 
                                   2459 
                                   2460 ;------------------------
                                   2461 ; BASIC: UBOUND  
                                   2462 ; return array variable size 
                                   2463 ; output:
                                   2464 ;   A 		TK_INTGR
                                   2465 ;   X 	    array size 
                                   2466 ;--------------------------
      000DE1                       2467 ubound:
      000DE1 AE 16 90         [ 2] 2468 	ldw x,#tib
      000DE4 72 B0 00 1B      [ 2] 2469 	subw x,txtend 
      000DE8 90 CE 00 04      [ 2] 2470 	ldw y,basicptr 
      000DEC 90 C3 00 1B      [ 2] 2471 	cpw y,txtend 
      000DF0 25 0A            [ 1] 2472 	jrult 1$
      000DF2 3B 00 03         [ 1] 2473 	push count 
      000DF5 4B 00            [ 1] 2474 	push #0 
      000DF7 72 F0 01         [ 2] 2475 	subw x,(1,sp)
      000DFA                       2476 	_drop 2 
      000DFA 5B 02            [ 2]    1     addw sp,#2 
      000DFC 54               [ 2] 2477 1$:	srlw x 
      000DFD CF 00 1E         [ 2] 2478 	ldw array_size,x
      000E00 A6 84            [ 1] 2479 	ld a,#TK_INTGR
      000E02 81               [ 4] 2480 	ret 
                                   2481 
                                   2482 ;-----------------------------
                                   2483 ; BASIC: LET var=expr 
                                   2484 ; variable assignement 
                                   2485 ; output:
                                   2486 ;   A 		TK_NONE 
                                   2487 ;-----------------------------
      000E03                       2488 let::
      000E03 CD 08 15         [ 4] 2489 	call next_token 
      000E06 A1 85            [ 1] 2490 	cp a,#TK_VAR 
      000E08 27 0A            [ 1] 2491 	jreq let_var
      000E0A A1 06            [ 1] 2492 	cp a,#TK_ARRAY 
      000E0C 27 03            [ 1] 2493 	jreq  let_array
      000E0E CC 07 26         [ 2] 2494 	jp syntax_error
      000E11                       2495 let_array:
      000E11 CD 0B F9         [ 4] 2496 	call get_array_element
      000E14                       2497 let_var:
      000E14 89               [ 2] 2498 	pushw x  
      000E15 CD 08 15         [ 4] 2499 	call next_token 
      000E18 A1 32            [ 1] 2500 	cp a,#TK_EQUAL
      000E1A 27 03            [ 1] 2501 	jreq 1$
      000E1C CC 07 26         [ 2] 2502 	jp syntax_error
      000E1F                       2503 1$:	
      000E1F CD 0D 16         [ 4] 2504 	call relation   
      000E22 A1 84            [ 1] 2505 	cp a,#TK_INTGR 
      000E24 27 03            [ 1] 2506 	jreq 2$
      000E26 CC 07 26         [ 2] 2507 	jp syntax_error
      000E29                       2508 2$:	
      000E29 90 93            [ 1] 2509 	ldw y,x 
      000E2B 85               [ 2] 2510 	popw x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E2C FF               [ 2] 2511 	ldw (x),y   
      000E2D 81               [ 4] 2512 	ret 
                                   2513 
                                   2514 ;----------------------------
                                   2515 ; BASIC: LIST [[start][,end]]
                                   2516 ; list program lines 
                                   2517 ; form start to end 
                                   2518 ; if empty argument list then 
                                   2519 ; list all.
                                   2520 ;----------------------------
                           000001  2521 	FIRST=1
                           000003  2522 	LAST=3 
                           000005  2523 	LN_PTR=5
                           000006  2524 	VSIZE=6 
      000E2E                       2525 list:
      000E2E CE 00 19         [ 2] 2526 	ldw x,txtbgn 
      000E31 C3 00 1B         [ 2] 2527 	cpw x,txtend 
      000E34 2B 01            [ 1] 2528 	jrmi 1$
      000E36 81               [ 4] 2529 	ret 
      000E37                       2530 1$:	
      000E37                       2531 	_vars VSIZE
      000E37 52 06            [ 2]    1     sub sp,#VSIZE 
      000E39 1F 05            [ 2] 2532 	ldw (LN_PTR,sp),x 
      000E3B FE               [ 2] 2533 	ldw x,(x) 
      000E3C 1F 01            [ 2] 2534 	ldw (FIRST,sp),x ; list from first line 
      000E3E AE 7F FF         [ 2] 2535 	ldw x,#MAX_LINENO ; biggest line number 
      000E41 1F 03            [ 2] 2536 	ldw (LAST,sp),x 
      000E43 CD 0B CE         [ 4] 2537 	call arg_list
      000E46 4D               [ 1] 2538 	tnz a
      000E47 27 31            [ 1] 2539 	jreq list_loop 
      000E49 A1 02            [ 1] 2540 	cp a,#2 
      000E4B 27 07            [ 1] 2541 	jreq 4$
      000E4D A1 01            [ 1] 2542 	cp a,#1 
      000E4F 27 06            [ 1] 2543 	jreq first_line 
      000E51 CC 07 26         [ 2] 2544 	jp syntax_error 
      000E54 85               [ 2] 2545 4$:	popw x 
      000E55 1F 05            [ 2] 2546 	ldw (LAST+2,sp),x 
      000E57                       2547 first_line:
      000E57 85               [ 2] 2548 	popw x
      000E58 1F 01            [ 2] 2549 	ldw (FIRST,sp),x 
      000E5A                       2550 lines_skip:
      000E5A CE 00 19         [ 2] 2551 	ldw x,txtbgn
      000E5D 1F 05            [ 2] 2552 2$:	ldw (LN_PTR,sp),x 
      000E5F C3 00 1B         [ 2] 2553 	cpw x,txtend 
      000E62 2A 38            [ 1] 2554 	jrpl list_exit 
      000E64 FE               [ 2] 2555 	ldw x,(x) ;line# 
      000E65 13 01            [ 2] 2556 	cpw x,(FIRST,sp)
      000E67 2A 11            [ 1] 2557 	jrpl list_loop 
      000E69 1E 05            [ 2] 2558 	ldw x,(LN_PTR,sp) 
      000E6B E6 02            [ 1] 2559 	ld a,(2,x)
      000E6D C7 00 0D         [ 1] 2560 	ld acc8,a 
      000E70 72 5F 00 0C      [ 1] 2561 	clr acc16 
      000E74 72 BB 00 0C      [ 2] 2562 	addw x,acc16
      000E78 20 E3            [ 2] 2563 	jra 2$ 
                                   2564 ; print loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E7A                       2565 list_loop:
      000E7A 1E 05            [ 2] 2566 	ldw x,(LN_PTR,sp)
      000E7C E6 02            [ 1] 2567 	ld a,(2,x) 
      000E7E CD 0E AA         [ 4] 2568 	call prt_basic_line
      000E81 1E 05            [ 2] 2569 	ldw x,(LN_PTR,sp)
      000E83 E6 02            [ 1] 2570 	ld a,(2,x)
      000E85 C7 00 0D         [ 1] 2571 	ld acc8,a 
      000E88 72 5F 00 0C      [ 1] 2572 	clr acc16 
      000E8C 72 BB 00 0C      [ 2] 2573 	addw x,acc16
      000E90 C3 00 1B         [ 2] 2574 	cpw x,txtend 
      000E93 2A 07            [ 1] 2575 	jrpl list_exit
      000E95 1F 05            [ 2] 2576 	ldw (LN_PTR,sp),x
      000E97 FE               [ 2] 2577 	ldw x,(x)
      000E98 13 03            [ 2] 2578 	cpw x,(LAST,sp)  
      000E9A 2F DE            [ 1] 2579 	jrslt list_loop
      000E9C                       2580 list_exit:
      000E9C 55 00 03 00 01   [ 1] 2581 	mov in,count 
      000EA1 AE 16 E0         [ 2] 2582 	ldw x,#pad 
      000EA4 CF 00 04         [ 2] 2583 	ldw basicptr,x 
      000EA7                       2584 	_drop VSIZE 
      000EA7 5B 06            [ 2]    1     addw sp,#VSIZE 
      000EA9 81               [ 4] 2585 	ret
                                   2586 
                                   2587 
                                   2588 ;--------------------------
                                   2589 ; decompile line from token list
                                   2590 ; and print it. 
                                   2591 ; input:
                                   2592 ;   A       stop at this position 
                                   2593 ;   X 		pointer at line
                                   2594 ; output:
                                   2595 ;   none 
                                   2596 ;--------------------------	
      000EAA                       2597 prt_basic_line:
      000EAA C7 00 03         [ 1] 2598 	ld count,a 
      000EAD E6 02            [ 1] 2599 	ld a,(2,x)
      000EAF C1 00 03         [ 1] 2600 	cp a,count 
      000EB2 2A 03            [ 1] 2601 	jrpl 1$ 
      000EB4 C7 00 03         [ 1] 2602 	ld count,a 
      000EB7 CF 00 04         [ 2] 2603 1$:	ldw basicptr,x 
      000EBA 90 AE 16 90      [ 2] 2604 	ldw y,#tib  
      000EBE CD 26 85         [ 4] 2605 	call decompile 
      000EC1 CD 1E 8C         [ 4] 2606 	call puts 
      000EC4 A6 0D            [ 1] 2607 	ld a,#CR 
      000EC6 CD 02 B2         [ 4] 2608 	call putc 
      000EC9 81               [ 4] 2609 	ret 
                                   2610 
                                   2611 
                                   2612 
                                   2613 ;---------------------------------
                                   2614 ; BASIC: PRINT|? arg_list 
                                   2615 ; print values from argument list
                                   2616 ;----------------------------------
                           000001  2617 	CCOMMA=1
                           000001  2618 	VSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000ECA                       2619 print:
      000ECA                       2620 	_vars VSIZE 
      000ECA 52 01            [ 2]    1     sub sp,#VSIZE 
      000ECC                       2621 reset_comma:
      000ECC 0F 01            [ 1] 2622 	clr (CCOMMA,sp)
      000ECE                       2623 prt_loop:
      000ECE CD 08 15         [ 4] 2624 	call next_token
      000ED1 A1 02            [ 1] 2625 	cp a,#CMD_END 
      000ED3 25 4F            [ 1] 2626 	jrult print_exit ; colon or end of line 
      000ED5 A1 02            [ 1] 2627 	cp a,#TK_QSTR
      000ED7 27 12            [ 1] 2628 	jreq 1$
      000ED9 A1 03            [ 1] 2629 	cp a,#TK_CHAR 
      000EDB 27 13            [ 1] 2630 	jreq 2$ 
      000EDD A1 82            [ 1] 2631 	cp a,#TK_CFUNC 
      000EDF 27 15            [ 1] 2632 	jreq 3$
      000EE1 A1 09            [ 1] 2633 	cp a,#TK_COMMA 
      000EE3 27 18            [ 1] 2634 	jreq 4$
      000EE5 A1 0A            [ 1] 2635 	cp a,#TK_SHARP 
      000EE7 27 18            [ 1] 2636 	jreq 5$
      000EE9 20 28            [ 2] 2637 	jra 7$ 
      000EEB                       2638 1$:	; print string 
      000EEB CD 1E 8C         [ 4] 2639 	call puts
      000EEE 20 DC            [ 2] 2640 	jra reset_comma
      000EF0                       2641 2$:	; print character 
      000EF0 9F               [ 1] 2642 	ld a,xl 
      000EF1 CD 02 B2         [ 4] 2643 	call putc 
      000EF4 20 D6            [ 2] 2644 	jra reset_comma 
      000EF6                       2645 3$: ; print character function value  	
      000EF6 FD               [ 4] 2646 	call (x)
      000EF7 9F               [ 1] 2647 	ld a,xl 
      000EF8 CD 02 B2         [ 4] 2648 	call putc
      000EFB 20 CF            [ 2] 2649 	jra reset_comma 
      000EFD                       2650 4$: ; set comma state 
      000EFD 03 01            [ 1] 2651 	cpl (CCOMMA,sp)
      000EFF 20 CD            [ 2] 2652 	jra prt_loop   
      000F01                       2653 5$: ; # character must be followed by an integer   
      000F01 CD 08 15         [ 4] 2654 	call next_token
      000F04 A1 84            [ 1] 2655 	cp a,#TK_INTGR 
      000F06 27 03            [ 1] 2656 	jreq 6$
      000F08 CC 07 26         [ 2] 2657 	jp syntax_error 
      000F0B                       2658 6$: ; set tab width
      000F0B 9F               [ 1] 2659 	ld a,xl 
      000F0C A4 0F            [ 1] 2660 	and a,#15 
      000F0E C7 00 21         [ 1] 2661 	ld tab_width,a 
      000F11 20 B9            [ 2] 2662 	jra reset_comma 
      000F13                       2663 7$:	
      000F13                       2664 	_unget_token 
      000F13 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000F18 CD 0D 16         [ 4] 2665 	call relation 
      000F1B A1 84            [ 1] 2666 	cp a,#TK_INTGR 
      000F1D 26 05            [ 1] 2667 	jrne print_exit 
      000F1F CD 08 70         [ 4] 2668     call print_int 
      000F22 20 A8            [ 2] 2669 	jra reset_comma 
      000F24                       2670 print_exit:
      000F24 0D 01            [ 1] 2671 	tnz (CCOMMA,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F26 26 05            [ 1] 2672 	jrne 9$
      000F28 A6 0D            [ 1] 2673 	ld a,#CR 
      000F2A CD 02 B2         [ 4] 2674     call putc 
      000F2D                       2675 9$:	_drop VSIZE 
      000F2D 5B 01            [ 2]    1     addw sp,#VSIZE 
      000F2F 81               [ 4] 2676 	ret 
                                   2677 
                                   2678 ;----------------------
                                   2679 ; 'save_context' and
                                   2680 ; 'rest_context' must be 
                                   2681 ; called at the same 
                                   2682 ; call stack depth 
                                   2683 ; i.e. SP must have the 
                                   2684 ; save value at  
                                   2685 ; entry point of both 
                                   2686 ; routine. 
                                   2687 ;---------------------
                           000004  2688 	CTXT_SIZE=4 ; size of saved data 
                                   2689 ;--------------------
                                   2690 ; save current BASIC
                                   2691 ; interpreter context 
                                   2692 ; on stack 
                                   2693 ;--------------------
      000F30                       2694 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000F30                       2695 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000F30                       2696 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000F30                       2697 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000F30                       2698 save_context:
      000F30 CE 00 04         [ 2] 2699 	ldw x,basicptr 
      000F33 1F 03            [ 2] 2700 	ldw (BPTR,sp),x
      000F35 C6 00 01         [ 1] 2701 	ld a,in 
      000F38 6B 05            [ 1] 2702 	ld (IN,sp),a
      000F3A C6 00 03         [ 1] 2703 	ld a,count 
      000F3D 6B 06            [ 1] 2704 	ld (CNT,sp),a  
      000F3F 81               [ 4] 2705 	ret
                                   2706 
                                   2707 ;-----------------------
                                   2708 ; restore previously saved 
                                   2709 ; BASIC interpreter context 
                                   2710 ; from stack 
                                   2711 ;-------------------------
      000F40                       2712 rest_context:
      000F40 1E 03            [ 2] 2713 	ldw x,(BPTR,sp)
      000F42 CF 00 04         [ 2] 2714 	ldw basicptr,x 
      000F45 7B 05            [ 1] 2715 	ld a,(IN,sp)
      000F47 C7 00 01         [ 1] 2716 	ld in,a
      000F4A 7B 06            [ 1] 2717 	ld a,(CNT,sp)
      000F4C C7 00 03         [ 1] 2718 	ld count,a  
      000F4F 81               [ 4] 2719 	ret
                                   2720 
                                   2721 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2722 
                                   2723 ;------------------------------------------
                                   2724 ; BASIC: INPUT [string]var[,[string]var]
                                   2725 ; input value in variables 
                                   2726 ; [string] optionally can be used as prompt 
                                   2727 ;-----------------------------------------
                           000001  2728 	CX_BPTR=1
                           000003  2729 	CX_IN=3
                           000004  2730 	CX_CNT=4
                           000005  2731 	SKIP=5
                           000006  2732 	VAR_ADDR=6
                           000007  2733 	VSIZE=7
      000F50                       2734 input_var:
      000F50                       2735 	_vars VSIZE 
      000F50 52 07            [ 2]    1     sub sp,#VSIZE 
      000F52                       2736 input_loop:
      000F52 0F 05            [ 1] 2737 	clr (SKIP,sp)
      000F54 CD 08 15         [ 4] 2738 	call next_token 
      000F57 A1 02            [ 1] 2739 	cp a,#TK_QSTR 
      000F59 26 08            [ 1] 2740 	jrne 1$ 
      000F5B CD 1E 8C         [ 4] 2741 	call puts 
      000F5E 03 05            [ 1] 2742 	cpl (SKIP,sp)
      000F60 CD 08 15         [ 4] 2743 	call next_token 
      000F63 A1 85            [ 1] 2744 1$: cp a,#TK_VAR  
      000F65 27 03            [ 1] 2745 	jreq 2$ 
      000F67 CC 07 26         [ 2] 2746 	jp syntax_error
      000F6A 1F 06            [ 2] 2747 2$:	ldw (VAR_ADDR,sp),x 
      000F6C 0D 05            [ 1] 2748 	tnz (SKIP,sp)
      000F6E 26 06            [ 1] 2749 	jrne 21$ 
      000F70 CD 26 5C         [ 4] 2750 	call var_name 
      000F73 CD 02 B2         [ 4] 2751 	call putc   
      000F76                       2752 21$:
      000F76 A6 3A            [ 1] 2753 	ld a,#':
      000F78 CD 02 B2         [ 4] 2754 	call putc 
      000F7B CD 0F 30         [ 4] 2755 	call save_context 
      000F7E 72 5F 00 03      [ 1] 2756 	clr count  
      000F82 CD 1F 91         [ 4] 2757 	call readln 
      000F85 AE 16 90         [ 2] 2758 	ldw x,#tib 
      000F88 3B 00 03         [ 1] 2759 	push count
      000F8B 4B 00            [ 1] 2760 	push #0 
      000F8D 72 FB 01         [ 2] 2761 	addw x,(1,sp)
      000F90 5C               [ 1] 2762 	incw x 
      000F91                       2763 	_drop 2 
      000F91 5B 02            [ 2]    1     addw sp,#2 
      000F93 72 5F 00 01      [ 1] 2764 	clr in 
      000F97 CD 23 AB         [ 4] 2765 	call get_token
      000F9A A1 84            [ 1] 2766 	cp a,#TK_INTGR
      000F9C 27 06            [ 1] 2767 	jreq 3$ 
      000F9E CD 0F 40         [ 4] 2768 	call rest_context 
      000FA1 CC 07 26         [ 2] 2769 	jp syntax_error
      000FA4 16 06            [ 2] 2770 3$: ldw y,(VAR_ADDR,sp) 
      000FA6 90 FF            [ 2] 2771 	ldw (y),x 
      000FA8 CD 0F 40         [ 4] 2772 	call rest_context
      000FAB CD 08 15         [ 4] 2773 	call next_token 
      000FAE A1 09            [ 1] 2774 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FB0 27 A0            [ 1] 2775 	jreq input_loop
      000FB2 A1 00            [ 1] 2776 	cp a,#TK_NONE 
      000FB4 27 07            [ 1] 2777 	jreq input_exit  
      000FB6 A1 0B            [ 1] 2778 	cp a,#TK_COLON 
      000FB8 27 03            [ 1] 2779     jreq input_exit 
      000FBA CC 07 26         [ 2] 2780 	jp syntax_error 
      000FBD                       2781 input_exit:
      000FBD                       2782 	_drop VSIZE 
      000FBD 5B 07            [ 2]    1     addw sp,#VSIZE 
      000FBF 81               [ 4] 2783 	ret 
                                   2784 
                                   2785 
                                   2786 ;---------------------
                                   2787 ; BASIC: REMARK | ' 
                                   2788 ; skip comment to end of line 
                                   2789 ;---------------------- 
      000FC0                       2790 remark::
      000FC0 55 00 03 00 01   [ 1] 2791 	mov in,count 
      000FC5 81               [ 4] 2792  	ret 
                                   2793 
                                   2794 
                                   2795 ;---------------------
                                   2796 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2797 ; read in loop 'addr'  
                                   2798 ; apply & 'mask' to value 
                                   2799 ; loop while result==0.  
                                   2800 ; 'xor_mask' is used to 
                                   2801 ; invert the wait logic.
                                   2802 ; i.e. loop while not 0.
                                   2803 ;---------------------
                           000001  2804 	XMASK=1 
                           000002  2805 	MASK=2
                           000003  2806 	ADDR=3
                           000004  2807 	VSIZE=4
      000FC6                       2808 wait: 
      000FC6                       2809 	_vars VSIZE
      000FC6 52 04            [ 2]    1     sub sp,#VSIZE 
      000FC8 0F 01            [ 1] 2810 	clr (XMASK,sp) 
      000FCA CD 0B CE         [ 4] 2811 	call arg_list 
      000FCD A1 02            [ 1] 2812 	cp a,#2
      000FCF 24 03            [ 1] 2813 	jruge 0$
      000FD1 CC 07 26         [ 2] 2814 	jp syntax_error 
      000FD4 A1 03            [ 1] 2815 0$:	cp a,#3
      000FD6 25 04            [ 1] 2816 	jrult 1$
      000FD8 85               [ 2] 2817 	popw x 
      000FD9 9F               [ 1] 2818 	ld a,xl
      000FDA 6B 01            [ 1] 2819 	ld (XMASK,sp),a 
      000FDC 85               [ 2] 2820 1$: popw x ; mask 
      000FDD 9F               [ 1] 2821 	ld a,xl 
      000FDE 6B 02            [ 1] 2822 	ld (MASK,sp),a 
      000FE0 85               [ 2] 2823 	popw x ; address 
      000FE1 F6               [ 1] 2824 2$:	ld a,(x)
      000FE2 14 02            [ 1] 2825 	and a,(MASK,sp)
      000FE4 18 01            [ 1] 2826 	xor a,(XMASK,sp)
      000FE6 27 F9            [ 1] 2827 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FE8                       2828 	_drop VSIZE 
      000FE8 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FEA 81               [ 4] 2829 	ret 
                                   2830 
                                   2831 ;---------------------
                                   2832 ; BASIC: BSET addr,mask
                                   2833 ; set bits at 'addr' corresponding 
                                   2834 ; to those of 'mask' that are at 1.
                                   2835 ; arguments:
                                   2836 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2837 ;   mask        mask|addr
                                   2838 ; output:
                                   2839 ;	none 
                                   2840 ;--------------------------
      000FEB                       2841 bit_set:
      000FEB CD 0B CE         [ 4] 2842 	call arg_list 
      000FEE A1 02            [ 1] 2843 	cp a,#2	 
      000FF0 27 03            [ 1] 2844 	jreq 1$ 
      000FF2 CC 07 26         [ 2] 2845 	jp syntax_error
      000FF5                       2846 1$: 
      000FF5 85               [ 2] 2847 	popw x ; mask 
      000FF6 9F               [ 1] 2848 	ld a,xl 
      000FF7 85               [ 2] 2849 	popw x ; addr  
      000FF8 FA               [ 1] 2850 	or a,(x)
      000FF9 F7               [ 1] 2851 	ld (x),a
      000FFA 81               [ 4] 2852 	ret 
                                   2853 
                                   2854 ;---------------------
                                   2855 ; BASIC: BRES addr,mask
                                   2856 ; reset bits at 'addr' corresponding 
                                   2857 ; to those of 'mask' that are at 1.
                                   2858 ; arguments:
                                   2859 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2860 ;   mask	    ~mask&*addr  
                                   2861 ; output:
                                   2862 ;	none 
                                   2863 ;--------------------------
      000FFB                       2864 bit_reset:
      000FFB CD 0B CE         [ 4] 2865 	call arg_list 
      000FFE A1 02            [ 1] 2866 	cp a,#2  
      001000 27 03            [ 1] 2867 	jreq 1$ 
      001002 CC 07 26         [ 2] 2868 	jp syntax_error
      001005                       2869 1$: 
      001005 85               [ 2] 2870 	popw x ; mask 
      001006 9F               [ 1] 2871 	ld a,xl 
      001007 43               [ 1] 2872 	cpl a 
      001008 85               [ 2] 2873 	popw x ; addr  
      001009 F4               [ 1] 2874 	and a,(x)
      00100A F7               [ 1] 2875 	ld (x),a 
      00100B 81               [ 4] 2876 	ret 
                                   2877 
                                   2878 ;---------------------
                                   2879 ; BASIC: BTOGL addr,mask
                                   2880 ; toggle bits at 'addr' corresponding 
                                   2881 ; to those of 'mask' that are at 1.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2882 ; arguments:
                                   2883 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2884 ;   mask	    mask^*addr  
                                   2885 ; output:
                                   2886 ;	none 
                                   2887 ;--------------------------
      00100C                       2888 bit_toggle:
      00100C CD 0B CE         [ 4] 2889 	call arg_list 
      00100F A1 02            [ 1] 2890 	cp a,#2 
      001011 27 03            [ 1] 2891 	jreq 1$ 
      001013 CC 07 26         [ 2] 2892 	jp syntax_error
      001016 85               [ 2] 2893 1$: popw x ; mask 
      001017 9F               [ 1] 2894 	ld a,xl 
      001018 85               [ 2] 2895 	popw x ; addr  
      001019 F8               [ 1] 2896 	xor a,(x)
      00101A F7               [ 1] 2897 	ld (x),a 
      00101B 81               [ 4] 2898 	ret 
                                   2899 
                                   2900 
                                   2901 ;---------------------
                                   2902 ; BASIC: BTEST(addr,bit)
                                   2903 ; return bit value at 'addr' 
                                   2904 ; bit is in range {0..7}.
                                   2905 ; arguments:
                                   2906 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2907 ;   bit 	    bit position {0..7}  
                                   2908 ; output:
                                   2909 ;	none 
                                   2910 ;--------------------------
      00101C                       2911 bit_test:
      00101C CD 0B C9         [ 4] 2912 	call func_args 
      00101F A1 02            [ 1] 2913 	cp a,#2
      001021 27 03            [ 1] 2914 	jreq 0$
      001023 CC 07 26         [ 2] 2915 	jp syntax_error
      001026                       2916 0$:	
      001026 85               [ 2] 2917 	popw x 
      001027 9F               [ 1] 2918 	ld a,xl 
      001028 A4 07            [ 1] 2919 	and a,#7
      00102A 88               [ 1] 2920 	push a   
      00102B A6 01            [ 1] 2921 	ld a,#1 
      00102D 0D 01            [ 1] 2922 1$: tnz (1,sp)
      00102F 27 05            [ 1] 2923 	jreq 2$
      001031 48               [ 1] 2924 	sll a 
      001032 0A 01            [ 1] 2925 	dec (1,sp)
      001034 20 F7            [ 2] 2926 	jra 1$
      001036                       2927 2$: _drop 1 
      001036 5B 01            [ 2]    1     addw sp,#1 
      001038 85               [ 2] 2928 	popw x 
      001039 F4               [ 1] 2929 	and a,(x)
      00103A 27 02            [ 1] 2930 	jreq 3$
      00103C A6 01            [ 1] 2931 	ld a,#1 
      00103E 5F               [ 1] 2932 3$:	clrw x 
      00103F 97               [ 1] 2933 	ld xl,a 
      001040 A6 84            [ 1] 2934 	ld a,#TK_INTGR
      001042 81               [ 4] 2935 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2936 
                                   2937 
                                   2938 ;--------------------
                                   2939 ; BASIC: POKE addr,byte
                                   2940 ; put a byte at addr 
                                   2941 ;--------------------
      001043                       2942 poke:
      001043 CD 0B CE         [ 4] 2943 	call arg_list 
      001046 A1 02            [ 1] 2944 	cp a,#2
      001048 27 03            [ 1] 2945 	jreq 1$
      00104A CC 07 26         [ 2] 2946 	jp syntax_error
      00104D                       2947 1$:	
      00104D 85               [ 2] 2948 	popw x  
      00104E 9F               [ 1] 2949     ld a,xl 
      00104F 85               [ 2] 2950 	popw x 
      001050 F7               [ 1] 2951 	ld (x),a 
      001051 81               [ 4] 2952 	ret 
                                   2953 
                                   2954 ;-----------------------
                                   2955 ; BASIC: PEEK(addr)
                                   2956 ; get the byte at addr 
                                   2957 ; input:
                                   2958 ;	none 
                                   2959 ; output:
                                   2960 ;	X 		value 
                                   2961 ;-----------------------
      001052                       2962 peek:
      001052 CD 0B C9         [ 4] 2963 	call func_args
      001055 A1 01            [ 1] 2964 	cp a,#1 
      001057 27 03            [ 1] 2965 	jreq 1$
      001059 CC 07 26         [ 2] 2966 	jp syntax_error
      00105C 85               [ 2] 2967 1$: popw x 
      00105D F6               [ 1] 2968 	ld a,(x)
      00105E 5F               [ 1] 2969 	clrw x 
      00105F 97               [ 1] 2970 	ld xl,a 
      001060 A6 84            [ 1] 2971 	ld a,#TK_INTGR
      001062 81               [ 4] 2972 	ret 
                                   2973 
                                   2974 ;---------------------------
                                   2975 ; BASIC IF expr : instructions
                                   2976 ; evaluate expr and if true 
                                   2977 ; execute instructions on same line. 
                                   2978 ;----------------------------
      001063                       2979 if: 
      001063 CD 0D 16         [ 4] 2980 	call relation 
      001066 A1 84            [ 1] 2981 	cp a,#TK_INTGR
      001068 27 03            [ 1] 2982 	jreq 1$ 
      00106A CC 07 26         [ 2] 2983 	jp syntax_error
      00106D 4F               [ 1] 2984 1$:	clr a 
      00106E 5D               [ 2] 2985 	tnzw x 
      00106F 26 05            [ 1] 2986 	jrne 9$  
                                   2987 ;skip to next line
      001071 55 00 03 00 01   [ 1] 2988 	mov in,count
      001076 81               [ 4] 2989 9$:	ret 
                                   2990 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2991 ;------------------------
                                   2992 ; BASIC: FOR var=expr 
                                   2993 ; set variable to expression 
                                   2994 ; leave variable address 
                                   2995 ; on stack and set
                                   2996 ; FLOOP bit in 'flags'
                                   2997 ;-----------------
                           000001  2998 	RETL1=1 ; return address  
                           000003  2999 	FSTEP=3  ; variable increment
                           000005  3000 	LIMIT=5 ; loop limit 
                           000007  3001 	CVAR=7   ; control variable 
                           000009  3002 	INW=9   ;  in.w saved
                           00000B  3003 	BPTR=11 ; baseptr saved
                           00000A  3004 	VSIZE=10  
      001077                       3005 for: ; { -- var_addr }
      001077 85               [ 2] 3006 	popw x ; call return address 
      001078                       3007 	_vars VSIZE 
      001078 52 0A            [ 2]    1     sub sp,#VSIZE 
      00107A 89               [ 2] 3008 	pushw x  ; RETL1 
      00107B A6 85            [ 1] 3009 	ld a,#TK_VAR 
      00107D CD 0B BC         [ 4] 3010 	call expect
      001080 1F 07            [ 2] 3011 	ldw (CVAR,sp),x  ; control variable 
      001082 CD 0E 14         [ 4] 3012 	call let_var 
      001085 72 14 00 20      [ 1] 3013 	bset flags,#FLOOP 
                                   3014 ; open space on stack for loop data 
      001089 5F               [ 1] 3015 	clrw x 
      00108A 1F 0B            [ 2] 3016 	ldw (BPTR,sp),x 
      00108C 1F 09            [ 2] 3017 	ldw (INW,sp),x 
      00108E CD 08 15         [ 4] 3018 	call next_token 
      001091 A1 80            [ 1] 3019 	cp a,#TK_CMD 
      001093 27 03            [ 1] 3020 	jreq 1$
      001095 CC 07 26         [ 2] 3021 	jp syntax_error
      001098                       3022 1$:  
      001098 A3 10 A0         [ 2] 3023 	cpw x,#to 
      00109B 27 03            [ 1] 3024 	jreq to
      00109D CC 07 26         [ 2] 3025 	jp syntax_error 
                                   3026 
                                   3027 ;-----------------------------------
                                   3028 ; BASIC: TO expr 
                                   3029 ; second part of FOR loop initilization
                                   3030 ; leave limit on stack and set 
                                   3031 ; FTO bit in 'flags'
                                   3032 ;-----------------------------------
      0010A0                       3033 to: ; { var_addr -- var_addr limit step }
      0010A0 72 04 00 20 03   [ 2] 3034 	btjt flags,#FLOOP,1$
      0010A5 CC 07 26         [ 2] 3035 	jp syntax_error
      0010A8 CD 0D 16         [ 4] 3036 1$: call relation  
      0010AB A1 84            [ 1] 3037 	cp a,#TK_INTGR 
      0010AD 27 03            [ 1] 3038 	jreq 2$ 
      0010AF CC 07 26         [ 2] 3039 	jp syntax_error
      0010B2 1F 05            [ 2] 3040 2$: ldw (LIMIT,sp),x
                                   3041 ;	ldw x,in.w 
      0010B4 CD 08 15         [ 4] 3042 	call next_token
      0010B7 A1 00            [ 1] 3043 	cp a,#TK_NONE  
      0010B9 27 0E            [ 1] 3044 	jreq 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010BB A1 80            [ 1] 3045 	cp a,#TK_CMD
      0010BD 26 05            [ 1] 3046 	jrne 3$
      0010BF A3 10 D0         [ 2] 3047 	cpw x,#step 
      0010C2 27 0C            [ 1] 3048 	jreq step
      0010C4                       3049 3$:	
      0010C4                       3050 	_unget_token   	 
      0010C4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0010C9                       3051 4$:	
      0010C9 AE 00 01         [ 2] 3052 	ldw x,#1   ; default step  
      0010CC 1F 03            [ 2] 3053 	ldw (FSTEP,sp),x 
      0010CE 20 14            [ 2] 3054 	jra store_loop_addr 
                                   3055 
                                   3056 
                                   3057 ;----------------------------------
                                   3058 ; BASIC: STEP expr 
                                   3059 ; optional third par of FOR loop
                                   3060 ; initialization. 	
                                   3061 ;------------------------------------
      0010D0                       3062 step: ; {var limit -- var limit step}
      0010D0 72 04 00 20 03   [ 2] 3063 	btjt flags,#FLOOP,1$
      0010D5 CC 07 26         [ 2] 3064 	jp syntax_error
      0010D8 CD 0D 16         [ 4] 3065 1$: call relation
      0010DB A1 84            [ 1] 3066 	cp a,#TK_INTGR
      0010DD 27 03            [ 1] 3067 	jreq 2$
      0010DF CC 07 26         [ 2] 3068 	jp syntax_error
      0010E2 1F 03            [ 2] 3069 2$:	ldw (FSTEP,sp),x ; step
                                   3070 ; leave loop back entry point on cstack 
                                   3071 ; cstack is 1 call deep from interpreter
      0010E4                       3072 store_loop_addr:
      0010E4 CE 00 04         [ 2] 3073 	ldw x,basicptr  
      0010E7 1F 0B            [ 2] 3074 	ldw (BPTR,sp),x 
      0010E9 CE 00 00         [ 2] 3075 	ldw x,in.w 
      0010EC 1F 09            [ 2] 3076 	ldw (INW,sp),x   
      0010EE 72 15 00 20      [ 1] 3077 	bres flags,#FLOOP 
      0010F2 72 5C 00 1D      [ 1] 3078 	inc loop_depth  
      0010F6 81               [ 4] 3079 	ret 
                                   3080 
                                   3081 ;--------------------------------
                                   3082 ; BASIC: NEXT var 
                                   3083 ; FOR loop control 
                                   3084 ; increment variable with step 
                                   3085 ; and compare with limit 
                                   3086 ; loop if threshold not crossed.
                                   3087 ; else stack. 
                                   3088 ; and decrement 'loop_depth' 
                                   3089 ;--------------------------------
      0010F7                       3090 next: ; {var limit step retl1 -- [var limit step ] }
      0010F7 72 5D 00 1D      [ 1] 3091 	tnz loop_depth 
      0010FB 26 03            [ 1] 3092 	jrne 1$ 
      0010FD CC 07 26         [ 2] 3093 	jp syntax_error 
      001100                       3094 1$: 
      001100 A6 85            [ 1] 3095 	ld a,#TK_VAR 
      001102 CD 0B BC         [ 4] 3096 	call expect
                                   3097 ; check for good variable after NEXT 	 
      001105 13 07            [ 2] 3098 	cpw x,(CVAR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001107 27 03            [ 1] 3099 	jreq 2$  
      001109 CC 07 26         [ 2] 3100 	jp syntax_error ; not the good one 
      00110C                       3101 2$: ; increment variable 
      00110C FE               [ 2] 3102 	ldw x,(x)  ; get var value 
      00110D 72 FB 03         [ 2] 3103 	addw x,(FSTEP,sp) ; var+step 
      001110 16 07            [ 2] 3104 	ldw y,(CVAR,sp)
      001112 90 FF            [ 2] 3105 	ldw (y),x ; save var new value 
                                   3106 ; check sign of STEP  
      001114 A6 80            [ 1] 3107 	ld a,#0x80
      001116 15 03            [ 1] 3108 	bcp a,(FSTEP,sp)
      001118 2A 06            [ 1] 3109 	jrpl 4$
                                   3110 ;negative step 
      00111A 13 05            [ 2] 3111 	cpw x,(LIMIT,sp)
      00111C 2F 1B            [ 1] 3112 	jrslt loop_done
      00111E 20 04            [ 2] 3113 	jra loop_back 
      001120                       3114 4$: ; positive step
      001120 13 05            [ 2] 3115 	cpw x,(LIMIT,sp)
      001122 2C 15            [ 1] 3116 	jrsgt loop_done
      001124                       3117 loop_back:
      001124 1E 0B            [ 2] 3118 	ldw x,(BPTR,sp)
      001126 CF 00 04         [ 2] 3119 	ldw basicptr,x 
      001129 72 01 00 20 05   [ 2] 3120 	btjf flags,#FRUN,1$ 
      00112E E6 02            [ 1] 3121 	ld a,(2,x)
      001130 C7 00 03         [ 1] 3122 	ld count,a
      001133 1E 09            [ 2] 3123 1$:	ldw x,(INW,sp)
      001135 CF 00 00         [ 2] 3124 	ldw in.w,x 
      001138 81               [ 4] 3125 	ret 
      001139                       3126 loop_done:
                                   3127 	; remove loop data from stack  
      001139 85               [ 2] 3128 	popw x
      00113A                       3129 	_drop VSIZE 
      00113A 5B 0A            [ 2]    1     addw sp,#VSIZE 
      00113C 72 5A 00 1D      [ 1] 3130 	dec loop_depth 
                                   3131 ;	pushw x 
                                   3132 ;	ret 
      001140 FC               [ 2] 3133 	jp (x)
                                   3134 
                                   3135 ;----------------------------
                                   3136 ; called by goto/gosub
                                   3137 ; to get target line number 
                                   3138 ;---------------------------
      001141                       3139 get_target_line:
      001141 CD 0D 16         [ 4] 3140 	call relation 
      001144 A1 84            [ 1] 3141 	cp a,#TK_INTGR
      001146 27 03            [ 1] 3142 	jreq 1$
      001148 CC 07 26         [ 2] 3143 	jp syntax_error
      00114B 4F               [ 1] 3144 1$:	clr a
      00114C 90 CE 00 04      [ 2] 3145 	ldw y,basicptr 
      001150 90 FE            [ 2] 3146 	ldw y,(y)
      001152 90 89            [ 2] 3147 	pushw y 
      001154 13 01            [ 2] 3148 	cpw x,(1,sp)
      001156 5B 02            [ 2] 3149 	addw sp,#2 
      001158 25 01            [ 1] 3150 	jrult 11$
      00115A 4C               [ 1] 3151 	inc a 
      00115B                       3152 11$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      00115B CD 21 74         [ 4] 3153 	call search_lineno  
      00115E 5D               [ 2] 3154 	tnzw x 
      00115F 26 05            [ 1] 3155 	jrne 2$ 
      001161 A6 05            [ 1] 3156 	ld a,#ERR_NO_LINE 
      001163 CC 07 28         [ 2] 3157 	jp tb_error 
      001166 81               [ 4] 3158 2$:	ret 
                                   3159 
                                   3160 ;------------------------
                                   3161 ; BASIC: GOTO line# 
                                   3162 ; jump to line# 
                                   3163 ; here cstack is 2 call deep from interpreter 
                                   3164 ;------------------------
      001167                       3165 goto:
      001167 72 00 00 20 06   [ 2] 3166 	btjt flags,#FRUN,0$ 
      00116C A6 06            [ 1] 3167 	ld a,#ERR_RUN_ONLY
      00116E CC 07 28         [ 2] 3168 	jp tb_error 
      001171 81               [ 4] 3169 	ret 
      001172 CD 11 41         [ 4] 3170 0$:	call get_target_line
      001175                       3171 jp_to_target:
      001175 CF 00 04         [ 2] 3172 	ldw basicptr,x 
      001178 E6 02            [ 1] 3173 	ld a,(2,x)
      00117A C7 00 03         [ 1] 3174 	ld count,a 
      00117D 35 03 00 01      [ 1] 3175 	mov in,#3 
      001181 81               [ 4] 3176 	ret 
                                   3177 
                                   3178 
                                   3179 ;--------------------
                                   3180 ; BASIC: GOSUB line#
                                   3181 ; basic subroutine call
                                   3182 ; actual line# and basicptr 
                                   3183 ; are saved on cstack
                                   3184 ; here cstack is 2 call deep from interpreter 
                                   3185 ;--------------------
                           000003  3186 	RET_ADDR=3
                           000005  3187 	RET_INW=5
                           000004  3188 	VSIZE=4  
      001182                       3189 gosub:
      001182 72 00 00 20 06   [ 2] 3190 	btjt flags,#FRUN,0$ 
      001187 A6 06            [ 1] 3191 	ld a,#ERR_RUN_ONLY
      001189 CC 07 28         [ 2] 3192 	jp tb_error 
      00118C 81               [ 4] 3193 	ret 
      00118D 85               [ 2] 3194 0$:	popw x 
      00118E                       3195 	_vars VSIZE  
      00118E 52 04            [ 2]    1     sub sp,#VSIZE 
      001190 89               [ 2] 3196 	pushw x 
      001191 CE 00 04         [ 2] 3197 	ldw x,basicptr
      001194 1F 03            [ 2] 3198 	ldw (RET_ADDR,sp),x 
      001196 CD 11 41         [ 4] 3199 	call get_target_line  
      001199 89               [ 2] 3200 	pushw x 
      00119A CE 00 00         [ 2] 3201 	ldw x,in.w 
      00119D 1F 07            [ 2] 3202 	ldw (RET_INW+2,sp),x
      00119F 85               [ 2] 3203 	popw x 
      0011A0 20 D3            [ 2] 3204 	jra jp_to_target
                                   3205 
                                   3206 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3207 ; BASIC: RETURN 
                                   3208 ; exit from a subroutine 
                                   3209 ; 
                                   3210 ;------------------------
      0011A2                       3211 return:
      0011A2 72 00 00 20 05   [ 2] 3212 	btjt flags,#FRUN,0$ 
      0011A7 A6 06            [ 1] 3213 	ld a,#ERR_RUN_ONLY
      0011A9 CC 07 28         [ 2] 3214 	jp tb_error 
      0011AC                       3215 0$:	
      0011AC 1E 03            [ 2] 3216 	ldw x,(RET_ADDR,sp) 
      0011AE CF 00 04         [ 2] 3217 	ldw basicptr,x
      0011B1 E6 02            [ 1] 3218 	ld a,(2,x)
      0011B3 C7 00 03         [ 1] 3219 	ld count,a  
      0011B6 1E 05            [ 2] 3220 	ldw x,(RET_INW,sp)
      0011B8 CF 00 00         [ 2] 3221 	ldw in.w,x 
      0011BB 85               [ 2] 3222 	popw x 
      0011BC                       3223 	_drop VSIZE 
      0011BC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0011BE 89               [ 2] 3224 	pushw x
      0011BF 81               [ 4] 3225 	ret  
                                   3226 
                                   3227 
                                   3228 ;----------------------------------
                                   3229 ; BASIC: RUN
                                   3230 ; run BASIC program in RAM
                                   3231 ;----------------------------------- 
      0011C0                       3232 run: 
      0011C0 72 01 00 20 02   [ 2] 3233 	btjf flags,#FRUN,0$  
      0011C5 4F               [ 1] 3234 	clr a 
      0011C6 81               [ 4] 3235 	ret
      0011C7                       3236 0$: 
      0011C7 72 09 00 20 12   [ 2] 3237 	btjf flags,#FBREAK,1$
      0011CC                       3238 	_drop 2 
      0011CC 5B 02            [ 2]    1     addw sp,#2 
      0011CE CD 0F 40         [ 4] 3239 	call rest_context
      0011D1                       3240 	_drop CTXT_SIZE 
      0011D1 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0011D3 72 19 00 20      [ 1] 3241 	bres flags,#FBREAK 
      0011D7 72 10 00 20      [ 1] 3242 	bset flags,#FRUN 
      0011DB CC 07 C9         [ 2] 3243 	jp interpreter 
      0011DE CE 00 19         [ 2] 3244 1$:	ldw x,txtbgn
      0011E1 C3 00 1B         [ 2] 3245 	cpw x,txtend 
      0011E4 2B 0C            [ 1] 3246 	jrmi run_it 
      0011E6 AE 06 BF         [ 2] 3247 	ldw x,#err_no_prog
      0011E9 CD 1E 8C         [ 4] 3248 	call puts 
      0011EC 55 00 03 00 01   [ 1] 3249 	mov in,count
      0011F1 81               [ 4] 3250 	ret 
      0011F2                       3251 run_it:	 
      0011F2 CD 0D E1         [ 4] 3252     call ubound 
      0011F5                       3253 	_drop 2 ; drop return address 
      0011F5 5B 02            [ 2]    1     addw sp,#2 
                                   3254 ; clear data pointer 
      0011F7 5F               [ 1] 3255 	clrw x 
      0011F8 CF 00 06         [ 2] 3256 	ldw data_ptr,x 
      0011FB 72 5F 00 08      [ 1] 3257 	clr data_ofs 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0011FF 72 5F 00 09      [ 1] 3258 	clr data_len 
                                   3259 ; initialize BASIC pointer 
      001203 CE 00 19         [ 2] 3260 	ldw x,txtbgn 
      001206 CF 00 04         [ 2] 3261 	ldw basicptr,x 
      001209 E6 02            [ 1] 3262 	ld a,(2,x)
      00120B C7 00 03         [ 1] 3263 	ld count,a
      00120E 35 03 00 01      [ 1] 3264 	mov in,#3	
      001212 72 10 00 20      [ 1] 3265 	bset flags,#FRUN 
      001216 CC 07 C9         [ 2] 3266 	jp interpreter 
                                   3267 
                                   3268 
                                   3269 ;----------------------
                                   3270 ; BASIC: END
                                   3271 ; end running program
                                   3272 ;---------------------- 
      001219                       3273 cmd_end: 
                                   3274 ; clean stack 
      001219 AE 17 FF         [ 2] 3275 	ldw x,#STACK_EMPTY
      00121C 94               [ 1] 3276 	ldw sp,x 
      00121D CC 07 AA         [ 2] 3277 	jp warm_start
                                   3278 
                                   3279 ;-----------------
                                   3280 ; 1 Khz beep 
                                   3281 ;-----------------
      001220                       3282 beep_1khz:: 
      001220 AE 00 64         [ 2] 3283 	ldw x,#100
      001223 90 AE 03 E8      [ 2] 3284 	ldw y,#1000
      001227 20 0D            [ 2] 3285 	jra beep
                                   3286 
                                   3287 ;-----------------------
                                   3288 ; BASIC: TONE expr1,expr2
                                   3289 ; used TIMER2 channel 1
                                   3290 ; to produce a tone 
                                   3291 ; arguments:
                                   3292 ;    expr1   frequency 
                                   3293 ;    expr2   duration msec.
                                   3294 ;---------------------------
      001229                       3295 tone:
      001229 CD 0B CE         [ 4] 3296 	call arg_list 
      00122C A1 02            [ 1] 3297 	cp a,#2 
      00122E 27 03            [ 1] 3298 	jreq 1$
      001230 CC 07 26         [ 2] 3299 	jp syntax_error 
      001233                       3300 1$: 
      001233 85               [ 2] 3301 	popw x ; duration
      001234 90 85            [ 2] 3302 	popw y ; frequency 
      001236                       3303 beep:  
      001236 89               [ 2] 3304 	pushw x 
      001237 AE F4 24         [ 2] 3305 	ldw x,#TIM2_CLK_FREQ
      00123A 65               [ 2] 3306 	divw x,y 
                                   3307 ; round to nearest integer 
      00123B 90 A3 7A 12      [ 2] 3308 	cpw y,#TIM2_CLK_FREQ/2
      00123F 2B 01            [ 1] 3309 	jrmi 2$
      001241 5C               [ 1] 3310 	incw x 
      001242                       3311 2$:	 
      001242 9E               [ 1] 3312 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001243 C7 53 0D         [ 1] 3313 	ld TIM2_ARRH,a 
      001246 9F               [ 1] 3314 	ld a,xl 
      001247 C7 53 0E         [ 1] 3315 	ld TIM2_ARRL,a 
                                   3316 ; 50% duty cycle 
      00124A 8C               [ 1] 3317 	ccf 
      00124B 56               [ 2] 3318 	rrcw x 
      00124C 9E               [ 1] 3319 	ld a,xh 
      00124D C7 53 0F         [ 1] 3320 	ld TIM2_CCR1H,a 
      001250 9F               [ 1] 3321 	ld a,xl
      001251 C7 53 10         [ 1] 3322 	ld TIM2_CCR1L,a
      001254 72 10 53 08      [ 1] 3323 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001258 72 10 53 00      [ 1] 3324 	bset TIM2_CR1,#TIM2_CR1_CEN
      00125C 72 10 53 04      [ 1] 3325 	bset TIM2_EGR,#TIM2_EGR_UG
      001260 85               [ 2] 3326 	popw x 
      001261 CD 14 F8         [ 4] 3327 	call pause02
      001264 72 11 53 08      [ 1] 3328 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001268 72 11 53 00      [ 1] 3329 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00126C 81               [ 4] 3330 	ret 
                                   3331 
                                   3332 ;-------------------------------
                                   3333 ; BASIC: ADCON 0|1 [,divisor]  
                                   3334 ; disable/enanble ADC 
                                   3335 ;-------------------------------
                           000003  3336 	ONOFF=3 
                           000001  3337 	DIVSOR=1
                           000004  3338 	VSIZE=4 
      00126D                       3339 power_adc:
      00126D CD 0B CE         [ 4] 3340 	call arg_list 
      001270 A1 02            [ 1] 3341 	cp a,#2	
      001272 27 0B            [ 1] 3342 	jreq 1$
      001274 A1 01            [ 1] 3343 	cp a,#1 
      001276 27 03            [ 1] 3344 	jreq 0$ 
      001278 CC 07 26         [ 2] 3345 	jp syntax_error 
      00127B AE 00 00         [ 2] 3346 0$: ldw x,#0
      00127E 89               [ 2] 3347 	pushw x  ; divisor 
      00127F 1E 03            [ 2] 3348 1$: ldw x,(ONOFF,sp)
      001281 5D               [ 2] 3349 	tnzw x 
      001282 27 1A            [ 1] 3350 	jreq 2$ 
      001284 1E 01            [ 2] 3351 	ldw x,(DIVSOR,sp) ; divisor 
      001286 9F               [ 1] 3352 	ld a,xl
      001287 A4 07            [ 1] 3353 	and a,#7
      001289 4E               [ 1] 3354 	swap a 
      00128A C7 54 01         [ 1] 3355 	ld ADC_CR1,a
      00128D 72 16 50 CA      [ 1] 3356 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001291 72 10 54 01      [ 1] 3357 	bset ADC_CR1,#ADC_CR1_ADON 
      001295                       3358 	_usec_dly 7 
      001295 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001298 5A               [ 2]    2     decw x
      001299 9D               [ 1]    3     nop 
      00129A 26 FA            [ 1]    4     jrne .-4
      00129C 20 08            [ 2] 3359 	jra 3$
      00129E 72 11 54 01      [ 1] 3360 2$: bres ADC_CR1,#ADC_CR1_ADON
      0012A2 72 17 50 CA      [ 1] 3361 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0012A6                       3362 3$:	_drop VSIZE 
      0012A6 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012A8 81               [ 4] 3363 	ret
                                   3364 
                                   3365 ;-----------------------------
                                   3366 ; BASIC: ADCREAD (channel)
                                   3367 ; read adc channel {0..5}
                                   3368 ; output:
                                   3369 ;   A 		TK_INTGR 
                                   3370 ;   X 		value 
                                   3371 ;-----------------------------
      0012A9                       3372 analog_read:
      0012A9 CD 0B C9         [ 4] 3373 	call func_args 
      0012AC A1 01            [ 1] 3374 	cp a,#1 
      0012AE 27 03            [ 1] 3375 	jreq 1$
      0012B0 CC 07 26         [ 2] 3376 	jp syntax_error
      0012B3 85               [ 2] 3377 1$: popw x 
      0012B4 A3 00 05         [ 2] 3378 	cpw x,#5 
      0012B7 23 05            [ 2] 3379 	jrule 2$
      0012B9 A6 0A            [ 1] 3380 	ld a,#ERR_BAD_VALUE
      0012BB CC 07 28         [ 2] 3381 	jp tb_error 
      0012BE 9F               [ 1] 3382 2$: ld a,xl
      0012BF C7 00 0D         [ 1] 3383 	ld acc8,a 
      0012C2 A6 05            [ 1] 3384 	ld a,#5
      0012C4 C0 00 0D         [ 1] 3385 	sub a,acc8 
      0012C7 C7 54 00         [ 1] 3386 	ld ADC_CSR,a
      0012CA 72 16 54 02      [ 1] 3387 	bset ADC_CR2,#ADC_CR2_ALIGN
      0012CE 72 10 54 01      [ 1] 3388 	bset ADC_CR1,#ADC_CR1_ADON
      0012D2 72 0F 54 00 FB   [ 2] 3389 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0012D7 CE 54 04         [ 2] 3390 	ldw x,ADC_DRH
      0012DA A6 84            [ 1] 3391 	ld a,#TK_INTGR
      0012DC 81               [ 4] 3392 	ret 
                                   3393 
                                   3394 ;-----------------------
                                   3395 ; BASIC: DREAD(pin)
                                   3396 ; Arduino pins 
                                   3397 ; read state of a digital pin 
                                   3398 ; pin# {0..15}
                                   3399 ; output:
                                   3400 ;    A 		TK_INTGR
                                   3401 ;    X      0|1 
                                   3402 ;-------------------------
                           000001  3403 	PINNO=1
                           000001  3404 	VSIZE=1
      0012DD                       3405 digital_read:
      0012DD                       3406 	_vars VSIZE 
      0012DD 52 01            [ 2]    1     sub sp,#VSIZE 
      0012DF CD 0B C9         [ 4] 3407 	call func_args
      0012E2 A1 01            [ 1] 3408 	cp a,#1
      0012E4 27 03            [ 1] 3409 	jreq 1$
      0012E6 CC 07 26         [ 2] 3410 	jp syntax_error
      0012E9 85               [ 2] 3411 1$: popw x 
      0012EA A3 00 0F         [ 2] 3412 	cpw x,#15 
      0012ED 23 05            [ 2] 3413 	jrule 2$
      0012EF A6 0A            [ 1] 3414 	ld a,#ERR_BAD_VALUE
      0012F1 CC 07 28         [ 2] 3415 	jp tb_error 
      0012F4 CD 16 36         [ 4] 3416 2$:	call select_pin 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0012F7 6B 01            [ 1] 3417 	ld (PINNO,sp),a
      0012F9 E6 01            [ 1] 3418 	ld a,(GPIO_IDR,x)
      0012FB 0D 01            [ 1] 3419 	tnz (PINNO,sp)
      0012FD 27 05            [ 1] 3420 	jreq 8$
      0012FF 44               [ 1] 3421 3$: srl a 
      001300 0A 01            [ 1] 3422 	dec (PINNO,sp)
      001302 26 FB            [ 1] 3423 	jrne 3$ 
      001304 A4 01            [ 1] 3424 8$: and a,#1 
      001306 5F               [ 1] 3425 	clrw x 
      001307 97               [ 1] 3426 	ld xl,a 
      001308 A6 84            [ 1] 3427 	ld a,#TK_INTGR
      00130A                       3428 	_drop VSIZE
      00130A 5B 01            [ 2]    1     addw sp,#VSIZE 
      00130C 81               [ 4] 3429 	ret
                                   3430 
                                   3431 
                                   3432 ;-----------------------
                                   3433 ; BASIC: DWRITE pin,0|1
                                   3434 ; Arduino pins 
                                   3435 ; write to a digital pin 
                                   3436 ; pin# {0..15}
                                   3437 ; output:
                                   3438 ;    A 		TK_INTGR
                                   3439 ;    X      0|1 
                                   3440 ;-------------------------
                           000001  3441 	PINNO=1
                           000002  3442 	PINVAL=2
                           000002  3443 	VSIZE=2
      00130D                       3444 digital_write:
      00130D                       3445 	_vars VSIZE 
      00130D 52 02            [ 2]    1     sub sp,#VSIZE 
      00130F CD 0B CE         [ 4] 3446 	call arg_list  
      001312 A1 02            [ 1] 3447 	cp a,#2 
      001314 27 03            [ 1] 3448 	jreq 1$
      001316 CC 07 26         [ 2] 3449 	jp syntax_error
      001319 85               [ 2] 3450 1$: popw x 
      00131A 9F               [ 1] 3451 	ld a,xl 
      00131B 6B 02            [ 1] 3452 	ld (PINVAL,sp),a
      00131D 85               [ 2] 3453 	popw x 
      00131E A3 00 0F         [ 2] 3454 	cpw x,#15 
      001321 23 05            [ 2] 3455 	jrule 2$
      001323 A6 0A            [ 1] 3456 	ld a,#ERR_BAD_VALUE
      001325 CC 07 28         [ 2] 3457 	jp tb_error 
      001328 CD 16 36         [ 4] 3458 2$:	call select_pin 
      00132B 6B 01            [ 1] 3459 	ld (PINNO,sp),a 
      00132D A6 01            [ 1] 3460 	ld a,#1
      00132F 0D 01            [ 1] 3461 	tnz (PINNO,sp)
      001331 27 05            [ 1] 3462 	jreq 4$
      001333 48               [ 1] 3463 3$: sll a
      001334 0A 01            [ 1] 3464 	dec (PINNO,sp)
      001336 26 FB            [ 1] 3465 	jrne 3$
      001338 0D 02            [ 1] 3466 4$: tnz (PINVAL,sp)
      00133A 26 05            [ 1] 3467 	jrne 5$
      00133C 43               [ 1] 3468 	cpl a 
      00133D E4 00            [ 1] 3469 	and a,(GPIO_ODR,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00133F 20 02            [ 2] 3470 	jra 8$
      001341 EA 00            [ 1] 3471 5$: or a,(GPIO_ODR,x)
      001343 E7 00            [ 1] 3472 8$: ld (GPIO_ODR,x),a 
      001345                       3473 	_drop VSIZE 
      001345 5B 02            [ 2]    1     addw sp,#VSIZE 
      001347 81               [ 4] 3474 	ret
                                   3475 
                                   3476 
                                   3477 ;-----------------------
                                   3478 ; BASIC: STOP
                                   3479 ; stop progam execution  
                                   3480 ; without resetting pointers 
                                   3481 ; the program is resumed
                                   3482 ; with RUN 
                                   3483 ;-------------------------
      001348                       3484 stop:
      001348 72 00 00 20 02   [ 2] 3485 	btjt flags,#FRUN,2$
      00134D 4F               [ 1] 3486 	clr a
      00134E 81               [ 4] 3487 	ret 
      00134F                       3488 2$:	 
                                   3489 ; create space on cstack to save context 
      00134F AE 13 76         [ 2] 3490 	ldw x,#break_point 
      001352 CD 1E 8C         [ 4] 3491 	call puts 
      001355                       3492 	_drop 2 ;drop return address 
      001355 5B 02            [ 2]    1     addw sp,#2 
      001357                       3493 	_vars CTXT_SIZE ; context size 
      001357 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001359 CD 0F 30         [ 4] 3494 	call save_context 
      00135C AE 16 90         [ 2] 3495 	ldw x,#tib 
      00135F CF 00 04         [ 2] 3496 	ldw basicptr,x
      001362 7F               [ 1] 3497 	clr (x)
      001363 72 5F 00 03      [ 1] 3498 	clr count  
      001367 5F               [ 1] 3499 	clrw x 
      001368 CF 00 00         [ 2] 3500 	ldw in.w,x
      00136B 72 11 00 20      [ 1] 3501 	bres flags,#FRUN 
      00136F 72 18 00 20      [ 1] 3502 	bset flags,#FBREAK
      001373 CC 07 C9         [ 2] 3503 	jp interpreter 
      001376 0A 62 72 65 61 6B 20  3504 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3505 
                                   3506 ;-----------------------
                                   3507 ; BASIC: NEW
                                   3508 ; from command line only 
                                   3509 ; free program memory
                                   3510 ; and clear variables 
                                   3511 ;------------------------
      001394                       3512 new: 
      001394 72 01 00 20 01   [ 2] 3513 	btjf flags,#FRUN,0$ 
      001399 81               [ 4] 3514 	ret 
      00139A                       3515 0$:	
      00139A CD 05 90         [ 4] 3516 	call clear_basic 
      00139D 81               [ 4] 3517 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3518 
                                   3519 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3520 ;;;  flash memory operations
                                   3521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3522 
                                   3523 ;--------------------------
                                   3524 ; align farptr to BLOCK_SIZE 
                                   3525 ;---------------------------
      00139E                       3526 row_align:
      00139E A6 7F            [ 1] 3527 	ld a,#0x7f 
      0013A0 C4 00 18         [ 1] 3528 	and a,farptr+2 
      0013A3 27 13            [ 1] 3529 	jreq 1$ 
      0013A5 CE 00 17         [ 2] 3530 	ldw x,farptr+1 
      0013A8 1C 00 80         [ 2] 3531 	addw x,#BLOCK_SIZE 
      0013AB 24 04            [ 1] 3532 	jrnc 0$
      0013AD 72 5C 00 16      [ 1] 3533 	inc farptr 
      0013B1 9F               [ 1] 3534 0$: ld a,xl 
      0013B2 A4 80            [ 1] 3535 	and a,#0x80
      0013B4 97               [ 1] 3536 	ld xl,a
      0013B5 CF 00 17         [ 2] 3537 	ldw farptr+1,x  	
      0013B8 81               [ 4] 3538 1$:	ret
                                   3539 
                                   3540 ;--------------------
                                   3541 ; input:
                                   3542 ;   X     increment 
                                   3543 ; output:
                                   3544 ;   farptr  incremented 
                                   3545 ;---------------------
      0013B9                       3546 incr_farptr:
      0013B9 72 BB 00 17      [ 2] 3547 	addw x,farptr+1 
      0013BD 24 04            [ 1] 3548 	jrnc 1$
      0013BF 72 5C 00 16      [ 1] 3549 	inc farptr 
      0013C3 CF 00 17         [ 2] 3550 1$:	ldw farptr+1,x  
      0013C6 81               [ 4] 3551 	ret 
                                   3552 
                                   3553 ;-----------------------------------
                                   3554 ; scan block for non zero byte 
                                   3555 ; block are 128 bytes 
                                   3556 ; input:
                                   3557 ;    farptr     address block  
                                   3558 ; output:
                                   3559 ;     A     0 cleared, other not cleared  
                                   3560 ;-----------------------------------
      0013C7                       3561 scan_block:
      0013C7 5F               [ 1] 3562 	clrw x 
      0013C8 92 AF 00 16      [ 5] 3563 1$: ldf a,([farptr],x) 
      0013CC 26 06            [ 1] 3564 	jrne 2$
      0013CE 5C               [ 1] 3565 	incw x 
      0013CF A3 00 80         [ 2] 3566 	cpw x,#BLOCK_SIZE 
      0013D2 25 F4            [ 1] 3567 	jrult 1$ 
      0013D4 81               [ 4] 3568 2$:	ret 
                                   3569 
                                   3570 
                                   3571 
                                   3572 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3573 ; BASIC: ERASE
                                   3574 ; erase all block in range from 
                                   3575 ;  'app_space' to RAM end (0x20000)
                                   3576 ; that contains a non zero byte.  
                                   3577 ;-----------------------------------
      0013D5                       3578 erase:
                                   3579  ; operation done from RAM
                                   3580  ; copy code to RAM in tib   
      0013D5 CD 01 32         [ 4] 3581 	call move_erase_to_ram
                                   3582 	; first block 
      0013D8 72 5F 00 16      [ 1] 3583 	clr farptr 
      0013DC AE 28 80         [ 2] 3584 	ldw x,#app_space
      0013DF CF 00 17         [ 2] 3585 	ldw farptr+1,x
      0013E2                       3586 1$:	 
      0013E2 CD 13 C7         [ 4] 3587     call scan_block 
      0013E5 27 03            [ 1] 3588 	jreq 2$
      0013E7 CD 01 AD         [ 4] 3589 	call block_erase   
                                   3590 ; this block is clean, next  
      0013EA AE 00 80         [ 2] 3591 2$:	ldw x,#BLOCK_SIZE
      0013ED CD 13 B9         [ 4] 3592 	call incr_farptr
      0013F0 C6 00 16         [ 1] 3593 	ld a,farptr
      0013F3 A1 02            [ 1] 3594 	cp a,#2 
      0013F5 25 EB            [ 1] 3595 	jrult 1$ 
      0013F7                       3596 9$: 
      0013F7 81               [ 4] 3597 	 ret 
                                   3598 
                                   3599 
                                   3600 ;---------------------
                                   3601 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3602 ; write 1 or more byte to FLASH or EEPROM
                                   3603 ; starting at address  
                                   3604 ; input:
                                   3605 ;   expr1  	is address 
                                   3606 ;   expr2,...,exprn   are bytes to write
                                   3607 ; output:
                                   3608 ;   none 
                                   3609 ;---------------------
                           000001  3610 	ADDR=1
                           000002  3611 	VSIZ=2 
      0013F8                       3612 write:
      0013F8                       3613 	_vars VSIZE 
      0013F8 52 02            [ 2]    1     sub sp,#VSIZE 
      0013FA 72 5F 00 16      [ 1] 3614 	clr farptr ; expect 16 bits address 
      0013FE CD 0C CD         [ 4] 3615 	call expression
      001401 A1 84            [ 1] 3616 	cp a,#TK_INTGR 
      001403 27 03            [ 1] 3617 	jreq 0$
      001405 CC 07 26         [ 2] 3618 	jp syntax_error
      001408 1F 01            [ 2] 3619 0$: ldw (ADDR,sp),x 
      00140A CD 08 15         [ 4] 3620 	call next_token 
      00140D A1 09            [ 1] 3621 	cp a,#TK_COMMA 
      00140F 27 02            [ 1] 3622 	jreq 1$ 
      001411 20 19            [ 2] 3623 	jra 9$ 
      001413 CD 0C CD         [ 4] 3624 1$:	call expression
      001416 A1 84            [ 1] 3625 	cp a,#TK_INTGR
      001418 27 03            [ 1] 3626 	jreq 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00141A CC 07 26         [ 2] 3627 	jp syntax_error
      00141D 9F               [ 1] 3628 2$:	ld a,xl 
      00141E 1E 01            [ 2] 3629 	ldw x,(ADDR,sp) 
      001420 CF 00 17         [ 2] 3630 	ldw farptr+1,x 
      001423 5F               [ 1] 3631 	clrw x 
      001424 CD 01 D7         [ 4] 3632 	call write_byte
      001427 1E 01            [ 2] 3633 	ldw x,(ADDR,sp)
      001429 5C               [ 1] 3634 	incw x 
      00142A 20 DC            [ 2] 3635 	jra 0$ 
      00142C                       3636 9$:
      00142C                       3637 	_drop VSIZE
      00142C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00142E 81               [ 4] 3638 	ret 
                                   3639 
                                   3640 
                                   3641 ;---------------------
                                   3642 ;BASIC: CHAR(expr)
                                   3643 ; évaluate expression 
                                   3644 ; and take the 7 least 
                                   3645 ; bits as ASCII character
                                   3646 ; return a TK_CHAR 
                                   3647 ;---------------------
      00142F                       3648 char:
      00142F CD 0B C9         [ 4] 3649 	call func_args 
      001432 A1 01            [ 1] 3650 	cp a,#1
      001434 27 03            [ 1] 3651 	jreq 1$
      001436 CC 07 26         [ 2] 3652 	jp syntax_error
      001439 85               [ 2] 3653 1$:	popw x 
      00143A 9F               [ 1] 3654 	ld a,xl 
      00143B A4 7F            [ 1] 3655 	and a,#0x7f 
      00143D 97               [ 1] 3656 	ld xl,a
      00143E A6 03            [ 1] 3657 	ld a,#TK_CHAR
      001440 81               [ 4] 3658 	ret
                                   3659 
                                   3660 ;---------------------
                                   3661 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3662 ; extract first character 
                                   3663 ; of string argument 
                                   3664 ; return it as TK_INTGR 
                                   3665 ;---------------------
      001441                       3666 ascii:
      001441 A6 07            [ 1] 3667 	ld a,#TK_LPAREN
      001443 CD 0B BC         [ 4] 3668 	call expect 
      001446 CD 08 15         [ 4] 3669 	call next_token 
      001449 A1 02            [ 1] 3670 	cp a,#TK_QSTR 
      00144B 27 0E            [ 1] 3671 	jreq 1$
      00144D A1 03            [ 1] 3672 	cp a,#TK_CHAR 
      00144F 27 0D            [ 1] 3673 	jreq 2$ 
      001451 A1 82            [ 1] 3674 	cp a,#TK_CFUNC 
      001453 27 03            [ 1] 3675 	jreq 0$
      001455 CC 07 26         [ 2] 3676 	jp syntax_error
      001458 FD               [ 4] 3677 0$: call (x)
      001459 20 03            [ 2] 3678 	jra 2$
      00145B                       3679 1$: 
      00145B F6               [ 1] 3680 	ld a,(x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00145C 5F               [ 1] 3681 	clrw x
      00145D 97               [ 1] 3682 	ld xl,a 
      00145E                       3683 2$: 
      00145E 89               [ 2] 3684 	pushw x 
      00145F A6 08            [ 1] 3685 	ld a,#TK_RPAREN 
      001461 CD 0B BC         [ 4] 3686 	call expect
      001464 85               [ 2] 3687 	popw x 
      001465 A6 84            [ 1] 3688 	ld a,#TK_INTGR 
      001467 81               [ 4] 3689 	ret 
                                   3690 
                                   3691 ;---------------------
                                   3692 ;BASIC: KEY
                                   3693 ; wait for a character 
                                   3694 ; received from STDIN 
                                   3695 ; input:
                                   3696 ;	none 
                                   3697 ; output:
                                   3698 ;	X 		ASCII character 
                                   3699 ;---------------------
      001468                       3700 key:
      001468 CD 02 C2         [ 4] 3701 	call getc 
      00146B 5F               [ 1] 3702 	clrw x 
      00146C 97               [ 1] 3703 	ld xl,a 
      00146D A6 84            [ 1] 3704 	ld a,#TK_INTGR
      00146F 81               [ 4] 3705 	ret
                                   3706 
                                   3707 ;----------------------
                                   3708 ; BASIC: QKEY
                                   3709 ; Return true if there 
                                   3710 ; is a character in 
                                   3711 ; waiting in STDIN 
                                   3712 ; input:
                                   3713 ;  none 
                                   3714 ; output:
                                   3715 ;   X 		0|-1 
                                   3716 ;-----------------------
      001470                       3717 qkey:: 
      001470 5F               [ 1] 3718 	clrw x 
      001471 C6 00 2A         [ 1] 3719 	ld a,rx1_head
      001474 C1 00 2B         [ 1] 3720 	cp a,rx1_tail 
      001477 27 01            [ 1] 3721 	jreq 9$ 
      001479 53               [ 2] 3722 	cplw x 
      00147A A6 84            [ 1] 3723 9$: ld a,#TK_INTGR
      00147C 81               [ 4] 3724 	ret 
                                   3725 
                                   3726 ;---------------------
                                   3727 ; BASIC: GPIO(expr,reg)
                                   3728 ; return gpio address 
                                   3729 ; expr {0..8}
                                   3730 ; input:
                                   3731 ;   none 
                                   3732 ; output:
                                   3733 ;   X 		gpio register address
                                   3734 ;----------------------------
                           000003  3735 	PORT=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                           000001  3736 	REG=1 
                           000004  3737 	VSIZE=4 
      00147D                       3738 gpio:
      00147D CD 0B C9         [ 4] 3739 	call func_args 
      001480 A1 02            [ 1] 3740 	cp a,#2
      001482 27 03            [ 1] 3741 	jreq 1$
      001484 CC 07 26         [ 2] 3742 	jp syntax_error  
      001487                       3743 1$:	
      001487 1E 03            [ 2] 3744 	ldw x,(PORT,sp)
      001489 2B 17            [ 1] 3745 	jrmi bad_port
      00148B A3 00 09         [ 2] 3746 	cpw x,#9
      00148E 2A 12            [ 1] 3747 	jrpl bad_port
      001490 A6 05            [ 1] 3748 	ld a,#5
      001492 42               [ 4] 3749 	mul x,a
      001493 1C 50 00         [ 2] 3750 	addw x,#GPIO_BASE 
      001496 1F 03            [ 2] 3751 	ldw (PORT,sp),x  
      001498 1E 01            [ 2] 3752 	ldw x,(REG,sp) 
      00149A 72 FB 03         [ 2] 3753 	addw x,(PORT,sp)
      00149D A6 84            [ 1] 3754 	ld a,#TK_INTGR
      00149F                       3755 	_drop VSIZE 
      00149F 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014A1 81               [ 4] 3756 	ret
      0014A2                       3757 bad_port:
      0014A2 A6 0A            [ 1] 3758 	ld a,#ERR_BAD_VALUE
      0014A4 CC 07 28         [ 2] 3759 	jp tb_error
                                   3760 
                                   3761 
                                   3762 ;-------------------------
                                   3763 ; BASIC: UFLASH 
                                   3764 ; return free flash address
                                   3765 ; input:
                                   3766 ;  none 
                                   3767 ; output:
                                   3768 ;	A		TK_INTGR
                                   3769 ;   X 		free address 
                                   3770 ;---------------------------
      0014A7                       3771 uflash:
      0014A7 CE 28 80         [ 2] 3772 	ldw x,app_sign
      0014AA A3 10 93         [ 2] 3773 	cpw x,#4243 ; signature "BC" 
      0014AD 27 08            [ 1] 3774 	jreq 1$
      0014AF CE 28 82         [ 2] 3775 	ldw x,app_size 
      0014B2 1C 28 84         [ 2] 3776 	addw x,#app
      0014B5 20 03            [ 2] 3777 	jra 2$
      0014B7 AE 28 80         [ 2] 3778 1$:	ldw x,#app_space 
      0014BA A6 84            [ 1] 3779 2$:	ld a,#TK_INTGR 
      0014BC 81               [ 4] 3780 	ret 
                                   3781 
                                   3782 
                                   3783 ;---------------------
                                   3784 ; BASIC: USR(addr[,arg])
                                   3785 ; execute a function written 
                                   3786 ; in binary code.
                                   3787 ; binary fonction should 
                                   3788 ; return token attribute in A 
                                   3789 ; and value in X. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3790 ; input:
                                   3791 ;   addr	routine address 
                                   3792 ;   arg 	is an optional argument 
                                   3793 ; output:
                                   3794 ;   A 		token attribute 
                                   3795 ;   X       returned value 
                                   3796 ;---------------------
      0014BD                       3797 usr:
      0014BD 90 89            [ 2] 3798 	pushw y 	
      0014BF CD 0B C9         [ 4] 3799 	call func_args 
      0014C2 A1 01            [ 1] 3800 	cp a,#1 
      0014C4 27 07            [ 1] 3801 	jreq 2$
      0014C6 A1 02            [ 1] 3802 	cp a,#2
      0014C8 27 03            [ 1] 3803 	jreq 2$  
      0014CA CC 07 26         [ 2] 3804 	jp syntax_error 
      0014CD 90 85            [ 2] 3805 2$: popw y  ; arg|addr 
      0014CF A1 01            [ 1] 3806 	cp a,#1
      0014D1 27 02            [ 1] 3807 	jreq 3$
      0014D3 85               [ 2] 3808 	popw x ; addr
      0014D4 51               [ 1] 3809 	exgw x,y 
      0014D5 90 FD            [ 4] 3810 3$: call (y)
      0014D7 90 85            [ 2] 3811 	popw y 
      0014D9 81               [ 4] 3812 	ret 
                                   3813 
                                   3814 ;------------------------------
                                   3815 ; BASIC: BYE 
                                   3816 ; halt mcu in its lowest power mode 
                                   3817 ; wait for reset or external interrupt
                                   3818 ; do a cold start on wakeup.
                                   3819 ;------------------------------
      0014DA                       3820 bye:
      0014DA 72 0D 52 30 FB   [ 2] 3821 	btjf UART1_SR,#UART_SR_TC,.
      0014DF 8E               [10] 3822 	halt
      0014E0 CC 04 6F         [ 2] 3823 	jp cold_start  
                                   3824 
                                   3825 ;----------------------------------
                                   3826 ; BASIC: SLEEP 
                                   3827 ; halt mcu until reset or external
                                   3828 ; interrupt.
                                   3829 ; Resume progam after SLEEP command
                                   3830 ;----------------------------------
      0014E3                       3831 sleep:
      0014E3 72 0D 52 30 FB   [ 2] 3832 	btjf UART1_SR,#UART_SR_TC,.
      0014E8 72 16 00 20      [ 1] 3833 	bset flags,#FSLEEP
      0014EC 8E               [10] 3834 	halt 
      0014ED 81               [ 4] 3835 	ret 
                                   3836 
                                   3837 ;-------------------------------
                                   3838 ; BASIC: PAUSE expr 
                                   3839 ; suspend execution for n msec.
                                   3840 ; input:
                                   3841 ;	none
                                   3842 ; output:
                                   3843 ;	none 
                                   3844 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0014EE                       3845 pause:
      0014EE CD 0C CD         [ 4] 3846 	call expression
      0014F1 A1 84            [ 1] 3847 	cp a,#TK_INTGR
      0014F3 27 03            [ 1] 3848 	jreq pause02 
      0014F5 CC 07 26         [ 2] 3849 	jp syntax_error
      0014F8                       3850 pause02: 
      0014F8 5D               [ 2] 3851 1$: tnzw x 
      0014F9 27 04            [ 1] 3852 	jreq 2$
      0014FB 8F               [10] 3853 	wfi 
      0014FC 5A               [ 2] 3854 	decw x 
      0014FD 26 F9            [ 1] 3855 	jrne 1$
      0014FF 4F               [ 1] 3856 2$:	clr a 
      001500 81               [ 4] 3857 	ret 
                                   3858 
                                   3859 ;------------------------------
                                   3860 ; BASIC: AWU expr
                                   3861 ; halt mcu for 'expr' milliseconds
                                   3862 ; use Auto wakeup peripheral
                                   3863 ; all oscillators stopped except LSI
                                   3864 ; range: 1ms - 511ms
                                   3865 ; input:
                                   3866 ;  none
                                   3867 ; output:
                                   3868 ;  none:
                                   3869 ;------------------------------
      001501                       3870 awu:
      001501 CD 0C CD         [ 4] 3871   call expression
      001504 A1 84            [ 1] 3872   cp a,#TK_INTGR
      001506 27 03            [ 1] 3873   jreq awu02
      001508 CC 07 26         [ 2] 3874   jp syntax_error
      00150B                       3875 awu02:
      00150B A3 14 00         [ 2] 3876   cpw x,#5120
      00150E 2B 0C            [ 1] 3877   jrmi 1$ 
      001510 35 0F 50 F2      [ 1] 3878   mov AWU_TBR,#15 
      001514 A6 1E            [ 1] 3879   ld a,#30
      001516 62               [ 2] 3880   div x,a
      001517 A6 10            [ 1] 3881   ld a,#16
      001519 62               [ 2] 3882   div x,a 
      00151A 20 1E            [ 2] 3883   jra 4$
      00151C                       3884 1$: 
      00151C A3 08 00         [ 2] 3885   cpw x,#2048
      00151F 2B 09            [ 1] 3886   jrmi 2$ 
      001521 35 0E 50 F2      [ 1] 3887   mov AWU_TBR,#14
      001525 A6 50            [ 1] 3888   ld a,#80
      001527 62               [ 2] 3889   div x,a 
      001528 20 10            [ 2] 3890   jra 4$   
      00152A                       3891 2$:
      00152A 35 07 50 F2      [ 1] 3892   mov AWU_TBR,#7
      00152E                       3893 3$:  
                                   3894 ; while X > 64  divide by 2 and increment AWU_TBR 
      00152E A3 00 40         [ 2] 3895   cpw x,#64 
      001531 23 07            [ 2] 3896   jrule 4$ 
      001533 72 5C 50 F2      [ 1] 3897   inc AWU_TBR 
      001537 54               [ 2] 3898   srlw x 
      001538 20 F4            [ 2] 3899   jra 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00153A                       3900 4$:
      00153A 9F               [ 1] 3901   ld a, xl
      00153B 4A               [ 1] 3902   dec a 
      00153C 27 01            [ 1] 3903   jreq 5$
      00153E 4A               [ 1] 3904   dec a 	
      00153F                       3905 5$: 
      00153F A4 3E            [ 1] 3906   and a,#0x3e 
      001541 C7 50 F1         [ 1] 3907   ld AWU_APR,a 
      001544 72 18 50 F0      [ 1] 3908   bset AWU_CSR,#AWU_CSR_AWUEN
      001548 8E               [10] 3909   halt 
                                   3910 
      001549 81               [ 4] 3911   ret 
                                   3912 
                                   3913 ;------------------------------
                                   3914 ; BASIC: TICKS
                                   3915 ; return msec ticks counter value 
                                   3916 ; input:
                                   3917 ; 	none 
                                   3918 ; output:
                                   3919 ;	X 		TK_INTGR
                                   3920 ;-------------------------------
      00154A                       3921 get_ticks:
      00154A CE 00 0E         [ 2] 3922 	ldw x,ticks 
      00154D A6 84            [ 1] 3923 	ld a,#TK_INTGR
      00154F 81               [ 4] 3924 	ret 
                                   3925 
                                   3926 
                                   3927 
                                   3928 ;------------------------------
                                   3929 ; BASIC: ABS(expr)
                                   3930 ; return absolute value of expr.
                                   3931 ; input:
                                   3932 ;   none
                                   3933 ; output:
                                   3934 ;   X     	positive integer
                                   3935 ;-------------------------------
      001550                       3936 abs:
      001550 CD 0B C9         [ 4] 3937 	call func_args 
      001553 A1 01            [ 1] 3938 	cp a,#1 
      001555 27 03            [ 1] 3939 	jreq 0$ 
      001557 CC 07 26         [ 2] 3940 	jp syntax_error
      00155A                       3941 0$:  
      00155A 85               [ 2] 3942     popw x   
      00155B 9E               [ 1] 3943 	ld a,xh 
      00155C A5 80            [ 1] 3944 	bcp a,#0x80 
      00155E 27 01            [ 1] 3945 	jreq 2$ 
      001560 50               [ 2] 3946 	negw x 
      001561 A6 84            [ 1] 3947 2$: ld a,#TK_INTGR 
      001563 81               [ 4] 3948 	ret 
                                   3949 
                                   3950 ;------------------------------
                                   3951 ; BASIC: AND(expr1,expr2)
                                   3952 ; Apply bit AND relation between
                                   3953 ; the 2 arguments, i.e expr1 & expr2 
                                   3954 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3955 ; 	A 		TK_INTGR
                                   3956 ;   X 		result 
                                   3957 ;------------------------------
      001564                       3958 bit_and:
      001564 CD 0B C9         [ 4] 3959 	call func_args 
      001567 A1 02            [ 1] 3960 	cp a,#2
      001569 27 03            [ 1] 3961 	jreq 1$
      00156B CC 07 26         [ 2] 3962 	jp syntax_error 
      00156E 85               [ 2] 3963 1$:	popw x 
      00156F 9E               [ 1] 3964 	ld a,xh 
      001570 14 01            [ 1] 3965 	and a,(1,sp)
      001572 95               [ 1] 3966 	ld xh,a 
      001573 9F               [ 1] 3967 	ld a,xl
      001574 14 02            [ 1] 3968 	and a,(2,sp)
      001576 97               [ 1] 3969 	ld xl,a 
      001577                       3970 	_drop 2 
      001577 5B 02            [ 2]    1     addw sp,#2 
      001579 A6 84            [ 1] 3971 	ld a,#TK_INTGR
      00157B 81               [ 4] 3972 	ret
                                   3973 
                                   3974 ;------------------------------
                                   3975 ; BASIC: OR(expr1,expr2)
                                   3976 ; Apply bit OR relation between
                                   3977 ; the 2 arguments, i.e expr1 | expr2 
                                   3978 ; output:
                                   3979 ; 	A 		TK_INTGR
                                   3980 ;   X 		result 
                                   3981 ;------------------------------
      00157C                       3982 bit_or:
      00157C CD 0B C9         [ 4] 3983 	call func_args 
      00157F A1 02            [ 1] 3984 	cp a,#2
      001581 27 03            [ 1] 3985 	jreq 1$
      001583 CC 07 26         [ 2] 3986 	jp syntax_error 
      001586                       3987 1$: 
      001586 85               [ 2] 3988 	popw x 
      001587 9E               [ 1] 3989 	ld a,xh 
      001588 1A 01            [ 1] 3990 	or a,(1,sp)
      00158A 95               [ 1] 3991 	ld xh,a 
      00158B 9F               [ 1] 3992 	ld a,xl 
      00158C 1A 02            [ 1] 3993 	or a,(2,sp)
      00158E 97               [ 1] 3994 	ld xl,a 
      00158F                       3995 	_drop 2 
      00158F 5B 02            [ 2]    1     addw sp,#2 
      001591 A6 84            [ 1] 3996 	ld a,#TK_INTGR 
      001593 81               [ 4] 3997 	ret
                                   3998 
                                   3999 ;------------------------------
                                   4000 ; BASIC: XOR(expr1,expr2)
                                   4001 ; Apply bit XOR relation between
                                   4002 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4003 ; output:
                                   4004 ; 	A 		TK_INTGR
                                   4005 ;   X 		result 
                                   4006 ;------------------------------
      001594                       4007 bit_xor:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001594 CD 0B C9         [ 4] 4008 	call func_args 
      001597 A1 02            [ 1] 4009 	cp a,#2
      001599 27 03            [ 1] 4010 	jreq 1$
      00159B CC 07 26         [ 2] 4011 	jp syntax_error 
      00159E                       4012 1$: 
      00159E 85               [ 2] 4013 	popw x 
      00159F 9E               [ 1] 4014 	ld a,xh 
      0015A0 18 01            [ 1] 4015 	xor a,(1,sp)
      0015A2 95               [ 1] 4016 	ld xh,a 
      0015A3 9F               [ 1] 4017 	ld a,xl 
      0015A4 18 02            [ 1] 4018 	xor a,(2,sp)
      0015A6 97               [ 1] 4019 	ld xl,a 
      0015A7                       4020 	_drop 2 
      0015A7 5B 02            [ 2]    1     addw sp,#2 
      0015A9 A6 84            [ 1] 4021 	ld a,#TK_INTGR 
      0015AB 81               [ 4] 4022 	ret 
                                   4023 
                                   4024 ;------------------------------
                                   4025 ; BASIC: LSHIFT(expr1,expr2)
                                   4026 ; logical shift left expr1 by 
                                   4027 ; expr2 bits 
                                   4028 ; output:
                                   4029 ; 	A 		TK_INTGR
                                   4030 ;   X 		result 
                                   4031 ;------------------------------
      0015AC                       4032 lshift:
      0015AC CD 0B C9         [ 4] 4033 	call func_args
      0015AF A1 02            [ 1] 4034 	cp a,#2 
      0015B1 27 03            [ 1] 4035 	jreq 1$
      0015B3 CC 07 26         [ 2] 4036 	jp syntax_error
      0015B6 90 85            [ 2] 4037 1$: popw y   
      0015B8 85               [ 2] 4038 	popw x 
      0015B9 90 5D            [ 2] 4039 	tnzw y 
      0015BB 27 05            [ 1] 4040 	jreq 4$
      0015BD 58               [ 2] 4041 2$:	sllw x 
      0015BE 90 5A            [ 2] 4042 	decw y 
      0015C0 26 FB            [ 1] 4043 	jrne 2$
      0015C2                       4044 4$:  
      0015C2 A6 84            [ 1] 4045 	ld a,#TK_INTGR
      0015C4 81               [ 4] 4046 	ret
                                   4047 
                                   4048 ;------------------------------
                                   4049 ; BASIC: RSHIFT(expr1,expr2)
                                   4050 ; logical shift right expr1 by 
                                   4051 ; expr2 bits.
                                   4052 ; output:
                                   4053 ; 	A 		TK_INTGR
                                   4054 ;   X 		result 
                                   4055 ;------------------------------
      0015C5                       4056 rshift:
      0015C5 CD 0B C9         [ 4] 4057 	call func_args
      0015C8 A1 02            [ 1] 4058 	cp a,#2 
      0015CA 27 03            [ 1] 4059 	jreq 1$
      0015CC CC 07 26         [ 2] 4060 	jp syntax_error
      0015CF 90 85            [ 2] 4061 1$: popw y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0015D1 85               [ 2] 4062 	popw x
      0015D2 90 5D            [ 2] 4063 	tnzw y 
      0015D4 27 05            [ 1] 4064 	jreq 4$
      0015D6 54               [ 2] 4065 2$:	srlw x 
      0015D7 90 5A            [ 2] 4066 	decw y 
      0015D9 26 FB            [ 1] 4067 	jrne 2$
      0015DB                       4068 4$:  
      0015DB A6 84            [ 1] 4069 	ld a,#TK_INTGR
      0015DD 81               [ 4] 4070 	ret
                                   4071 
                                   4072 ;--------------------------
                                   4073 ; BASIC: FCPU integer
                                   4074 ; set CPU frequency 
                                   4075 ;-------------------------- 
                                   4076 
      0015DE                       4077 fcpu:
      0015DE A6 84            [ 1] 4078 	ld a,#TK_INTGR
      0015E0 CD 0B BC         [ 4] 4079 	call expect 
      0015E3 9F               [ 1] 4080 	ld a,xl 
      0015E4 A4 07            [ 1] 4081 	and a,#7 
      0015E6 C7 50 C6         [ 1] 4082 	ld CLK_CKDIVR,a 
      0015E9 81               [ 4] 4083 	ret 
                                   4084 
                                   4085 ;------------------------------
                                   4086 ; BASIC: PMODE pin#, mode 
                                   4087 ; Arduino pin. 
                                   4088 ; define pin as input or output
                                   4089 ; pin#: {0..15}
                                   4090 ; mode: INPUT|OUTPUT  
                                   4091 ;------------------------------
                           000001  4092 	PINNO=1
                           000001  4093 	VSIZE=1
      0015EA                       4094 pin_mode:
      0015EA                       4095 	_vars VSIZE 
      0015EA 52 01            [ 2]    1     sub sp,#VSIZE 
      0015EC CD 0B CE         [ 4] 4096 	call arg_list 
      0015EF A1 02            [ 1] 4097 	cp a,#2 
      0015F1 27 03            [ 1] 4098 	jreq 1$
      0015F3 CC 07 26         [ 2] 4099 	jp syntax_error 
      0015F6 90 85            [ 2] 4100 1$: popw y ; mode 
      0015F8 85               [ 2] 4101 	popw x ; Dx pin 
      0015F9 CD 16 36         [ 4] 4102 	call select_pin 
      0015FC 6B 01            [ 1] 4103 	ld (PINNO,sp),a  
      0015FE A6 01            [ 1] 4104 	ld a,#1 
      001600 0D 01            [ 1] 4105 	tnz (PINNO,sp)
      001602 27 0D            [ 1] 4106 	jreq 4$
      001604 48               [ 1] 4107 2$:	sll a 
      001605 0A 01            [ 1] 4108 	dec (PINNO,sp)
      001607 26 FB            [ 1] 4109 	jrne 2$ 
      001609 6B 01            [ 1] 4110 	ld (PINNO,sp),a
      00160B 7B 01            [ 1] 4111 	ld a,(PINNO,sp)
      00160D EA 03            [ 1] 4112 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      00160F E7 03            [ 1] 4113 	ld (GPIO_CR1,x),a 
      001611 90 A3 00 01      [ 2] 4114 4$:	cpw y,#OUTP 
      001615 27 10            [ 1] 4115 	jreq 6$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4116 ; input mode
                                   4117 ; disable external interrupt 
      001617 7B 01            [ 1] 4118 	ld a,(PINNO,sp)
      001619 43               [ 1] 4119 	cpl a 
      00161A E4 04            [ 1] 4120 	and a,(GPIO_CR2,x)
      00161C E7 04            [ 1] 4121 	ld (GPIO_CR2,x),a 
                                   4122 ;clear bit in DDR for input mode 
      00161E 7B 01            [ 1] 4123 	ld a,(PINNO,sp)
      001620 43               [ 1] 4124 	cpl a 
      001621 E4 02            [ 1] 4125 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001623 E7 02            [ 1] 4126 	ld (GPIO_DDR,x),a 
      001625 20 0C            [ 2] 4127 	jra 9$
      001627                       4128 6$: ;output mode  
      001627 7B 01            [ 1] 4129 	ld a,(PINNO,sp)
      001629 EA 02            [ 1] 4130 	or a,(GPIO_DDR,x) ; bit==1 for output 
      00162B E7 02            [ 1] 4131 	ld (GPIO_DDR,x),a 
      00162D 7B 01            [ 1] 4132 	ld a,(PINNO,sp)
      00162F EA 04            [ 1] 4133 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001631 E7 04            [ 1] 4134 	ld (GPIO_CR2,x),a 
      001633                       4135 9$:	
      001633                       4136 	_drop VSIZE 
      001633 5B 01            [ 2]    1     addw sp,#VSIZE 
      001635 81               [ 4] 4137 	ret
                                   4138 
                                   4139 ;------------------------
                                   4140 ; select Arduino pin 
                                   4141 ; input:
                                   4142 ;   X 	 {0..15} Arduino Dx 
                                   4143 ; output:
                                   4144 ;   A     stm8s208 pin 
                                   4145 ;   X     base address s208 GPIO port 
                                   4146 ;---------------------------
      001636                       4147 select_pin:
      001636 58               [ 2] 4148 	sllw x 
      001637 1C 16 46         [ 2] 4149 	addw x,#arduino_to_8s208 
      00163A FE               [ 2] 4150 	ldw x,(x)
      00163B 9F               [ 1] 4151 	ld a,xl 
      00163C 88               [ 1] 4152 	push a 
      00163D 5E               [ 1] 4153 	swapw x 
      00163E A6 05            [ 1] 4154 	ld a,#5 
      001640 42               [ 4] 4155 	mul x,a 
      001641 1C 50 00         [ 2] 4156 	addw x,#GPIO_BASE 
      001644 84               [ 1] 4157 	pop a 
      001645 81               [ 4] 4158 	ret 
                                   4159 ; translation from Arduino D0..D15 to stm8s208rb 
      001646                       4160 arduino_to_8s208:
      001646 03 06                 4161 .byte 3,6 ; D0 
      001648 03 05                 4162 .byte 3,5 ; D1 
      00164A 04 00                 4163 .byte 4,0 ; D2 
      00164C 02 01                 4164 .byte 2,1 ; D3
      00164E 06 00                 4165 .byte 6,0 ; D4
      001650 02 02                 4166 .byte 2,2 ; D5
      001652 02 03                 4167 .byte 2,3 ; D6
      001654 03 01                 4168 .byte 3,1 ; D7
      001656 03 03                 4169 .byte 3,3 ; D8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001658 02 04                 4170 .byte 2,4 ; D9
      00165A 04 05                 4171 .byte 4,5 ; D10
      00165C 02 06                 4172 .byte 2,6 ; D11
      00165E 02 07                 4173 .byte 2,7 ; D12
      001660 02 05                 4174 .byte 2,5 ; D13
      001662 04 02                 4175 .byte 4,2 ; D14
      001664 04 01                 4176 .byte 4,1 ; D15
                                   4177 
                                   4178 
                                   4179 ;------------------------------
                                   4180 ; BASIC: RND(expr)
                                   4181 ; return random number 
                                   4182 ; between 1 and expr inclusive
                                   4183 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4184 ; input:
                                   4185 ; 	none 
                                   4186 ; output:
                                   4187 ;	X 		random positive integer 
                                   4188 ;------------------------------
      001666                       4189 random:
      001666 CD 0B C9         [ 4] 4190 	call func_args 
      001669 A1 01            [ 1] 4191 	cp a,#1
      00166B 27 03            [ 1] 4192 	jreq 1$
      00166D CC 07 26         [ 2] 4193 	jp syntax_error
      001670                       4194 1$:  
      001670 A6 80            [ 1] 4195 	ld a,#0x80 
      001672 15 01            [ 1] 4196 	bcp a,(1,sp)
      001674 27 05            [ 1] 4197 	jreq 2$
      001676 A6 0A            [ 1] 4198 	ld a,#ERR_BAD_VALUE
      001678 CC 07 28         [ 2] 4199 	jp tb_error
      00167B                       4200 2$: 
                                   4201 ; acc16=(x<<5)^x 
      00167B CE 00 12         [ 2] 4202 	ldw x,seedx 
      00167E 58               [ 2] 4203 	sllw x 
      00167F 58               [ 2] 4204 	sllw x 
      001680 58               [ 2] 4205 	sllw x 
      001681 58               [ 2] 4206 	sllw x 
      001682 58               [ 2] 4207 	sllw x 
      001683 9E               [ 1] 4208 	ld a,xh 
      001684 C8 00 12         [ 1] 4209 	xor a,seedx 
      001687 C7 00 0C         [ 1] 4210 	ld acc16,a 
      00168A 9F               [ 1] 4211 	ld a,xl 
      00168B C8 00 13         [ 1] 4212 	xor a,seedx+1 
      00168E C7 00 0D         [ 1] 4213 	ld acc8,a 
                                   4214 ; seedx=seedy 
      001691 CE 00 14         [ 2] 4215 	ldw x,seedy 
      001694 CF 00 12         [ 2] 4216 	ldw seedx,x  
                                   4217 ; seedy=seedy^(seedy>>1)
      001697 90 54            [ 2] 4218 	srlw y 
      001699 90 9E            [ 1] 4219 	ld a,yh 
      00169B C8 00 14         [ 1] 4220 	xor a,seedy 
      00169E C7 00 14         [ 1] 4221 	ld seedy,a  
      0016A1 90 9F            [ 1] 4222 	ld a,yl 
      0016A3 C8 00 15         [ 1] 4223 	xor a,seedy+1 
      0016A6 C7 00 15         [ 1] 4224 	ld seedy+1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4225 ; acc16>>3 
      0016A9 CE 00 0C         [ 2] 4226 	ldw x,acc16 
      0016AC 54               [ 2] 4227 	srlw x 
      0016AD 54               [ 2] 4228 	srlw x 
      0016AE 54               [ 2] 4229 	srlw x 
                                   4230 ; x=acc16^x 
      0016AF 9E               [ 1] 4231 	ld a,xh 
      0016B0 C8 00 0C         [ 1] 4232 	xor a,acc16 
      0016B3 95               [ 1] 4233 	ld xh,a 
      0016B4 9F               [ 1] 4234 	ld a,xl 
      0016B5 C8 00 0D         [ 1] 4235 	xor a,acc8 
      0016B8 97               [ 1] 4236 	ld xl,a 
                                   4237 ; seedy=x^seedy 
      0016B9 C8 00 15         [ 1] 4238 	xor a,seedy+1
      0016BC 97               [ 1] 4239 	ld xl,a 
      0016BD 9E               [ 1] 4240 	ld a,xh 
      0016BE C8 00 14         [ 1] 4241 	xor a,seedy
      0016C1 95               [ 1] 4242 	ld xh,a 
      0016C2 CF 00 14         [ 2] 4243 	ldw seedy,x 
                                   4244 ; return seedy modulo expr + 1 
      0016C5 90 85            [ 2] 4245 	popw y 
      0016C7 65               [ 2] 4246 	divw x,y 
      0016C8 93               [ 1] 4247 	ldw x,y 
      0016C9 5C               [ 1] 4248 	incw x 
      0016CA                       4249 10$:
      0016CA A6 84            [ 1] 4250 	ld a,#TK_INTGR
      0016CC 81               [ 4] 4251 	ret 
                                   4252 
                                   4253 ;---------------------------------
                                   4254 ; BASIC: WORDS 
                                   4255 ; affiche la listes des mots du
                                   4256 ; dictionnaire ainsi que le nombre
                                   4257 ; de mots.
                                   4258 ;---------------------------------
                           000001  4259 	WLEN=1 ; word length
                           000002  4260 	LLEN=2 ; character sent to console
                           000003  4261 	WCNT=3 ; count words printed 
                           000003  4262 	VSIZE=3 
      0016CD                       4263 words:
      0016CD                       4264 	_vars VSIZE
      0016CD 52 03            [ 2]    1     sub sp,#VSIZE 
      0016CF 0F 02            [ 1] 4265 	clr (LLEN,sp)
      0016D1 0F 03            [ 1] 4266 	clr (WCNT,sp)
      0016D3 90 AE 1D 92      [ 2] 4267 	ldw y,#kword_dict+2
      0016D7 93               [ 1] 4268 0$:	ldw x,y
      0016D8 F6               [ 1] 4269 	ld a,(x)
      0016D9 A4 0F            [ 1] 4270 	and a,#15 
      0016DB 6B 01            [ 1] 4271 	ld (WLEN,sp),a 
      0016DD 0C 03            [ 1] 4272 	inc (WCNT,sp)
      0016DF 5C               [ 1] 4273 1$:	incw x 
      0016E0 F6               [ 1] 4274 	ld a,(x)
      0016E1 CD 02 B2         [ 4] 4275 	call putc 
      0016E4 0C 02            [ 1] 4276 	inc (LLEN,sp)
      0016E6 0A 01            [ 1] 4277 	dec (WLEN,sp)
      0016E8 26 F5            [ 1] 4278 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0016EA A6 46            [ 1] 4279 	ld a,#70
      0016EC 11 02            [ 1] 4280 	cp a,(LLEN,sp)
      0016EE 2B 09            [ 1] 4281 	jrmi 2$   
      0016F0 A6 20            [ 1] 4282 	ld a,#SPACE 
      0016F2 CD 02 B2         [ 4] 4283 	call putc 
      0016F5 0C 02            [ 1] 4284 	inc (LLEN,sp) 
      0016F7 20 07            [ 2] 4285 	jra 3$
      0016F9 A6 0D            [ 1] 4286 2$: ld a,#CR 
      0016FB CD 02 B2         [ 4] 4287 	call putc 
      0016FE 0F 02            [ 1] 4288 	clr (LLEN,sp)
      001700 72 A2 00 02      [ 2] 4289 3$:	subw y,#2 
      001704 90 FE            [ 2] 4290 	ldw y,(y)
      001706 26 CF            [ 1] 4291 	jrne 0$ 
      001708 A6 0D            [ 1] 4292 	ld a,#CR 
      00170A CD 02 B2         [ 4] 4293 	call putc  
      00170D 5F               [ 1] 4294 	clrw x 
      00170E 7B 03            [ 1] 4295 	ld a,(WCNT,sp)
      001710 97               [ 1] 4296 	ld xl,a 
      001711 CD 08 70         [ 4] 4297 	call print_int 
      001714 AE 17 1D         [ 2] 4298 	ldw x,#words_count_msg
      001717 CD 1E 8C         [ 4] 4299 	call puts 
      00171A                       4300 	_drop VSIZE 
      00171A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00171C 81               [ 4] 4301 	ret 
      00171D 20 77 6F 72 64 73 20  4302 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4303 
                                   4304 
                                   4305 ;-----------------------------
                                   4306 ; BASIC: TIMER expr 
                                   4307 ; initialize count down timer 
                                   4308 ;-----------------------------
      001733                       4309 set_timer:
      001733 CD 0B CE         [ 4] 4310 	call arg_list
      001736 A1 01            [ 1] 4311 	cp a,#1 
      001738 27 03            [ 1] 4312 	jreq 1$
      00173A CC 07 26         [ 2] 4313 	jp syntax_error
      00173D                       4314 1$: 
      00173D 85               [ 2] 4315 	popw x 
      00173E CF 00 10         [ 2] 4316 	ldw timer,x 
      001741 81               [ 4] 4317 	ret 
                                   4318 
                                   4319 ;------------------------------
                                   4320 ; BASIC: TIMEOUT 
                                   4321 ; return state of timer 
                                   4322 ;------------------------------
      001742                       4323 timeout:
      001742 CE 00 10         [ 2] 4324 	ldw x,timer 
      001745                       4325 logical_complement:
      001745 53               [ 2] 4326 	cplw x 
      001746 A3 FF FF         [ 2] 4327 	cpw x,#-1
      001749 27 01            [ 1] 4328 	jreq 2$
      00174B 5F               [ 1] 4329 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00174C A6 84            [ 1] 4330 2$:	ld a,#TK_INTGR
      00174E 81               [ 4] 4331 	ret 
                                   4332 
                                   4333 ;--------------------------------
                                   4334 ; BASIC NOT(expr) 
                                   4335 ; return logical complement of expr
                                   4336 ;--------------------------------
      00174F                       4337 func_not:
      00174F CD 0B C9         [ 4] 4338 	call func_args  
      001752 A1 01            [ 1] 4339 	cp a,#1
      001754 27 03            [ 1] 4340 	jreq 1$
      001756 CC 07 26         [ 2] 4341 	jp syntax_error
      001759 85               [ 2] 4342 1$:	popw x 
      00175A 20 E9            [ 2] 4343 	jra logical_complement
                                   4344 
                                   4345 
                                   4346 
                                   4347 ;-----------------------------------
                                   4348 ; BASIC: IWDGEN expr1 
                                   4349 ; enable independant watchdog timer
                                   4350 ; expr1 is delay in multiple of 62.5µsec
                                   4351 ; expr1 -> {1..16383}
                                   4352 ;-----------------------------------
      00175C                       4353 enable_iwdg:
      00175C CD 0B CE         [ 4] 4354 	call arg_list
      00175F A1 01            [ 1] 4355 	cp a,#1 
      001761 27 03            [ 1] 4356 	jreq 1$
      001763 CC 07 26         [ 2] 4357 	jp syntax_error 
      001766 85               [ 2] 4358 1$: popw x 
      001767 4B 00            [ 1] 4359 	push #0
      001769 35 CC 50 E0      [ 1] 4360 	mov IWDG_KR,#IWDG_KEY_ENABLE
      00176D 9E               [ 1] 4361 	ld a,xh 
      00176E A4 3F            [ 1] 4362 	and a,#0x3f
      001770 95               [ 1] 4363 	ld xh,a  
      001771 A3 00 FF         [ 2] 4364 2$:	cpw x,#255
      001774 23 06            [ 2] 4365 	jrule 3$
      001776 0C 01            [ 1] 4366 	inc (1,sp)
      001778 98               [ 1] 4367 	rcf 
      001779 56               [ 2] 4368 	rrcw x 
      00177A 20 F5            [ 2] 4369 	jra 2$
      00177C 35 55 50 E0      [ 1] 4370 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001780 84               [ 1] 4371 	pop a  
      001781 C7 50 E1         [ 1] 4372 	ld IWDG_PR,a 
      001784 9F               [ 1] 4373 	ld a,xl
      001785 4A               [ 1] 4374 	dec a 
      001786 35 55 50 E0      [ 1] 4375 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      00178A C7 50 E2         [ 1] 4376 	ld IWDG_RLR,a 
      00178D 35 AA 50 E0      [ 1] 4377 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001791 81               [ 4] 4378 	ret 
                                   4379 
                                   4380 
                                   4381 ;-----------------------------------
                                   4382 ; BASIC: IWDGREF  
                                   4383 ; refresh independant watchdog count down 
                                   4384 ; timer before it reset MCU. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4385 ;-----------------------------------
      001792                       4386 refresh_iwdg:
      001792 35 AA 50 E0      [ 1] 4387 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001796 81               [ 4] 4388 	ret 
                                   4389 
                                   4390 
                                   4391 ;-------------------------------------
                                   4392 ; BASIC: LOG(expr)
                                   4393 ; return logarithm base 2 of expr 
                                   4394 ; this is the position of most significant
                                   4395 ; bit set. 
                                   4396 ; input: 
                                   4397 ; output:
                                   4398 ;   X     log2 
                                   4399 ;   A     TK_INTGR 
                                   4400 ;*********************************
      001797                       4401 log2:
      001797 CD 0B C9         [ 4] 4402 	call func_args 
      00179A A1 01            [ 1] 4403 	cp a,#1 
      00179C 27 03            [ 1] 4404 	jreq 1$
      00179E CC 07 26         [ 2] 4405 	jp syntax_error 
      0017A1 85               [ 2] 4406 1$: popw x 
      0017A2                       4407 leading_one:
      0017A2 5D               [ 2] 4408 	tnzw x 
      0017A3 27 0A            [ 1] 4409 	jreq 4$
      0017A5 A6 0F            [ 1] 4410 	ld a,#15 
      0017A7 59               [ 2] 4411 2$: rlcw x 
      0017A8 25 03            [ 1] 4412     jrc 3$
      0017AA 4A               [ 1] 4413 	dec a 
      0017AB 20 FA            [ 2] 4414 	jra 2$
      0017AD 5F               [ 1] 4415 3$: clrw x 
      0017AE 97               [ 1] 4416     ld xl,a
      0017AF A6 84            [ 1] 4417 4$:	ld a,#TK_INTGR
      0017B1 81               [ 4] 4418 	ret 
                                   4419 
                                   4420 ;-----------------------------------
                                   4421 ; BASIC: BIT(expr) 
                                   4422 ; expr ->{0..15}
                                   4423 ; return 2^expr 
                                   4424 ; output:
                                   4425 ;    x    2^expr 
                                   4426 ;-----------------------------------
      0017B2                       4427 bitmask:
      0017B2 CD 0B C9         [ 4] 4428     call func_args 
      0017B5 A1 01            [ 1] 4429 	cp a,#1
      0017B7 27 03            [ 1] 4430 	jreq 1$
      0017B9 CC 07 26         [ 2] 4431 	jp syntax_error 
      0017BC 85               [ 2] 4432 1$: popw x 
      0017BD 9F               [ 1] 4433 	ld a,xl 
      0017BE A4 0F            [ 1] 4434 	and a,#15
      0017C0 5F               [ 1] 4435 	clrw x 
      0017C1 5C               [ 1] 4436 	incw x 
      0017C2 4D               [ 1] 4437 2$: tnz a 
      0017C3 27 04            [ 1] 4438 	jreq 3$
      0017C5 58               [ 2] 4439 	slaw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0017C6 4A               [ 1] 4440 	dec a 
      0017C7 20 F9            [ 2] 4441 	jra 2$ 
      0017C9 A6 84            [ 1] 4442 3$: ld a,#TK_INTGR
      0017CB 81               [ 4] 4443 	ret 
                                   4444 
                                   4445 ;------------------------------
                                   4446 ; BASIC: INVERT(expr)
                                   4447 ; 1's complement 
                                   4448 ;--------------------------------
      0017CC                       4449 invert:
      0017CC CD 0B C9         [ 4] 4450 	call func_args
      0017CF A1 01            [ 1] 4451 	cp a,#1 
      0017D1 27 03            [ 1] 4452 	jreq 1$
      0017D3 CC 07 26         [ 2] 4453 	jp syntax_error
      0017D6 85               [ 2] 4454 1$: popw x  
      0017D7 53               [ 2] 4455 	cplw x 
      0017D8 A6 84            [ 1] 4456 	ld a,#TK_INTGR 
      0017DA 81               [ 4] 4457 	ret 
                                   4458 
                                   4459 ;------------------------------
                                   4460 ; BASIC: DO 
                                   4461 ; initiate a DO ... UNTIL loop 
                                   4462 ;------------------------------
                           000003  4463 	DOLP_ADR=3 
                           000005  4464 	DOLP_INW=5
                           000004  4465 	VSIZE=4 
      0017DB                       4466 do_loop:
      0017DB 85               [ 2] 4467 	popw x 
      0017DC                       4468 	_vars VSIZE 
      0017DC 52 04            [ 2]    1     sub sp,#VSIZE 
      0017DE 89               [ 2] 4469 	pushw x 
      0017DF 90 CE 00 04      [ 2] 4470 	ldw y,basicptr 
      0017E3 17 03            [ 2] 4471 	ldw (DOLP_ADR,sp),y
      0017E5 90 CE 00 00      [ 2] 4472 	ldw y,in.w 
      0017E9 17 05            [ 2] 4473 	ldw (DOLP_INW,sp),y
      0017EB 72 5C 00 1D      [ 1] 4474 	inc loop_depth 
      0017EF 81               [ 4] 4475 	ret 
                                   4476 
                                   4477 ;--------------------------------
                                   4478 ; BASIC: UNTIL expr 
                                   4479 ; loop if exprssion is false 
                                   4480 ; else terminate loop
                                   4481 ;--------------------------------
      0017F0                       4482 until: 
      0017F0 72 5D 00 1D      [ 1] 4483 	tnz loop_depth 
      0017F4 26 03            [ 1] 4484 	jrne 1$ 
      0017F6 CC 07 26         [ 2] 4485 	jp syntax_error 
      0017F9                       4486 1$: 
      0017F9 CD 0D 16         [ 4] 4487 	call relation 
      0017FC A1 84            [ 1] 4488 	cp a,#TK_INTGR
      0017FE 27 03            [ 1] 4489 	jreq 2$
      001800 CC 07 26         [ 2] 4490 	jp syntax_error
      001803                       4491 2$: 
      001803 5D               [ 2] 4492 	tnzw x 
      001804 26 10            [ 1] 4493 	jrne 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001806 1E 03            [ 2] 4494 	ldw x,(DOLP_ADR,sp)
      001808 CF 00 04         [ 2] 4495 	ldw basicptr,x 
      00180B E6 02            [ 1] 4496 	ld a,(2,x)
      00180D C7 00 03         [ 1] 4497 	ld count,a 
      001810 1E 05            [ 2] 4498 	ldw x,(DOLP_INW,sp)
      001812 CF 00 00         [ 2] 4499 	ldw in.w,x 
      001815 81               [ 4] 4500 	ret 
      001816                       4501 9$:	; remove loop data from stack  
      001816 85               [ 2] 4502 	popw x
      001817                       4503 	_drop VSIZE
      001817 5B 04            [ 2]    1     addw sp,#VSIZE 
      001819 72 5A 00 1D      [ 1] 4504 	dec loop_depth 
      00181D FC               [ 2] 4505 	jp (x)
                                   4506 
                                   4507 ;--------------------------
                                   4508 ; BASIC: PRTA...PRTI  
                                   4509 ;  return constant value 
                                   4510 ;  PORT  offset in GPIO
                                   4511 ;  array
                                   4512 ;---------------------------
      00181E                       4513 const_porta:
      00181E AE 00 00         [ 2] 4514 	ldw x,#0
      001821 A6 84            [ 1] 4515 	ld a,#TK_INTGR 
      001823 81               [ 4] 4516 	ret 
      001824                       4517 const_portb:
      001824 AE 00 01         [ 2] 4518 	ldw x,#1
      001827 A6 84            [ 1] 4519 	ld a,#TK_INTGR 
      001829 81               [ 4] 4520 	ret 
      00182A                       4521 const_portc:
      00182A AE 00 02         [ 2] 4522 	ldw x,#2
      00182D A6 84            [ 1] 4523 	ld a,#TK_INTGR 
      00182F 81               [ 4] 4524 	ret 
      001830                       4525 const_portd:
      001830 AE 00 03         [ 2] 4526 	ldw x,#3
      001833 A6 84            [ 1] 4527 	ld a,#TK_INTGR 
      001835 81               [ 4] 4528 	ret 
      001836                       4529 const_porte:
      001836 AE 00 04         [ 2] 4530 	ldw x,#4
      001839 A6 84            [ 1] 4531 	ld a,#TK_INTGR 
      00183B 81               [ 4] 4532 	ret 
      00183C                       4533 const_portf:
      00183C AE 00 05         [ 2] 4534 	ldw x,#5
      00183F A6 84            [ 1] 4535 	ld a,#TK_INTGR 
      001841 81               [ 4] 4536 	ret 
      001842                       4537 const_portg:
      001842 AE 00 06         [ 2] 4538 	ldw x,#6
      001845 A6 84            [ 1] 4539 	ld a,#TK_INTGR 
      001847 81               [ 4] 4540 	ret 
      001848                       4541 const_porth:
      001848 AE 00 07         [ 2] 4542 	ldw x,#7
      00184B A6 84            [ 1] 4543 	ld a,#TK_INTGR 
      00184D 81               [ 4] 4544 	ret 
      00184E                       4545 const_porti:
      00184E AE 00 08         [ 2] 4546 	ldw x,#8
      001851 A6 84            [ 1] 4547 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001853 81               [ 4] 4548 	ret 
                                   4549 
                                   4550 ;-------------------------------
                                   4551 ; following return constant 
                                   4552 ; related to GPIO register offset 
                                   4553 ;---------------------------------
      001854                       4554 const_odr:
      001854 A6 84            [ 1] 4555 	ld a,#TK_INTGR 
      001856 AE 00 00         [ 2] 4556 	ldw x,#GPIO_ODR
      001859 81               [ 4] 4557 	ret 
      00185A                       4558 const_idr:
      00185A A6 84            [ 1] 4559 	ld a,#TK_INTGR 
      00185C AE 00 01         [ 2] 4560 	ldw x,#GPIO_IDR
      00185F 81               [ 4] 4561 	ret 
      001860                       4562 const_ddr:
      001860 A6 84            [ 1] 4563 	ld a,#TK_INTGR 
      001862 AE 00 02         [ 2] 4564 	ldw x,#GPIO_DDR
      001865 81               [ 4] 4565 	ret 
      001866                       4566 const_cr1:
      001866 A6 84            [ 1] 4567 	ld a,#TK_INTGR 
      001868 AE 00 03         [ 2] 4568 	ldw x,#GPIO_CR1
      00186B 81               [ 4] 4569 	ret 
      00186C                       4570 const_cr2:
      00186C A6 84            [ 1] 4571 	ld a,#TK_INTGR 
      00186E AE 00 04         [ 2] 4572 	ldw x,#GPIO_CR2
      001871 81               [ 4] 4573 	ret 
                                   4574 ;-------------------------
                                   4575 ; BASIC: POUT 
                                   4576 ;  constant for port mode
                                   4577 ;  used by PMODE 
                                   4578 ;  to set pin as output
                                   4579 ;------------------------
      001872                       4580 const_output:
      001872 A6 84            [ 1] 4581 	ld a,#TK_INTGR 
      001874 AE 00 01         [ 2] 4582 	ldw x,#OUTP
      001877 81               [ 4] 4583 	ret 
                                   4584 
                                   4585 ;-------------------------
                                   4586 ; BASIC: PINP 
                                   4587 ;  constant for port mode
                                   4588 ;  used by PMODE 
                                   4589 ;  to set pin as input
                                   4590 ;------------------------
      001878                       4591 const_input:
      001878 A6 84            [ 1] 4592 	ld a,#TK_INTGR 
      00187A AE 00 00         [ 2] 4593 	ldw x,#INP 
      00187D 81               [ 4] 4594 	ret 
                                   4595 	
                                   4596 ;-----------------------
                                   4597 ; memory area constants
                                   4598 ;-----------------------
      00187E                       4599 const_eeprom_base:
      00187E A6 84            [ 1] 4600 	ld a,#TK_INTGR 
      001880 AE 40 00         [ 2] 4601 	ldw x,#EEPROM_BASE 
      001883 81               [ 4] 4602 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4603 
                                   4604 ;---------------------------
                                   4605 ; BASIC: DATA 
                                   4606 ; when the interpreter find 
                                   4607 ; a DATA line it skip it.
                                   4608 ;---------------------------
      001884                       4609 data:
      001884 55 00 03 00 01   [ 1] 4610 	mov in,count 
      001889 81               [ 4] 4611 	ret 
                                   4612 
                                   4613 ;---------------------------
                                   4614 ; BASIC: DATLN  *expr*
                                   4615 ; set DATA pointer at line# 
                                   4616 ; specified by *expr* 
                                   4617 ;---------------------------
      00188A                       4618 data_line:
      00188A CD 0C CD         [ 4] 4619 	call expression
      00188D A1 84            [ 1] 4620 	cp a,#TK_INTGR
      00188F 27 03            [ 1] 4621 	jreq 1$
      001891 CC 07 26         [ 2] 4622 	jp syntax_error  
      001894 4F               [ 1] 4623 1$: clr a 
      001895 CD 21 74         [ 4] 4624 	call search_lineno
      001898 5D               [ 2] 4625 	tnzw x 
      001899 26 05            [ 1] 4626 	jrne 3$
      00189B A6 05            [ 1] 4627 2$:	ld a,#ERR_NO_LINE 
      00189D CC 07 28         [ 2] 4628 	jp tb_error
      0018A0                       4629 3$: ; check if valid data line 
      0018A0 90 93            [ 1] 4630     ldw y,x 
      0018A2 EE 04            [ 2] 4631 	ldw x,(4,x)
      0018A4 A3 18 84         [ 2] 4632 	cpw x,#data 
      0018A7 26 F2            [ 1] 4633 	jrne 2$ 
      0018A9 90 CF 00 06      [ 2] 4634 	ldw data_ptr,y
      0018AD 90 E6 02         [ 1] 4635 	ld a,(2,y)
      0018B0 C7 00 09         [ 1] 4636 	ld data_len,a 
      0018B3 35 06 00 08      [ 1] 4637 	mov data_ofs,#FIRST_DATA_ITEM 
      0018B7 81               [ 4] 4638 	ret
                                   4639 
                                   4640 ;---------------------------------
                                   4641 ; BASIC: RESTORE 
                                   4642 ; set data_ptr to first data line
                                   4643 ; if not DATA found pointer set to
                                   4644 ; zero 
                                   4645 ;---------------------------------
      0018B8                       4646 restore:
      0018B8 72 5F 00 06      [ 1] 4647 	clr data_ptr 
      0018BC 72 5F 00 07      [ 1] 4648 	clr data_ptr+1
      0018C0 72 5F 00 08      [ 1] 4649 	clr data_ofs 
      0018C4 72 5F 00 09      [ 1] 4650 	clr data_len
      0018C8 CE 00 19         [ 2] 4651 	ldw x,txtbgn
      0018CB                       4652 data_search_loop: 	
      0018CB C3 00 1B         [ 2] 4653 	cpw x,txtend
      0018CE 24 1B            [ 1] 4654 	jruge 9$
      0018D0 90 93            [ 1] 4655 	ldw y,x 
      0018D2 EE 04            [ 2] 4656 	ldw x,(4,x)
      0018D4 1C 1D 98         [ 2] 4657 	addw x,#code_addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0018D7 FE               [ 2] 4658 	ldw x,(x)
      0018D8 A3 18 84         [ 2] 4659 	cpw x,#data 
      0018DB 26 1A            [ 1] 4660 	jrne try_next_line 
      0018DD 90 CF 00 06      [ 2] 4661 	ldw data_ptr,y 
      0018E1 90 E6 02         [ 1] 4662 	ld a,(2,y)
      0018E4 C7 00 09         [ 1] 4663 	ld data_len,a 
      0018E7 35 06 00 08      [ 1] 4664 	mov data_ofs,#FIRST_DATA_ITEM
      0018EB 72 5D 00 09      [ 1] 4665 9$:	tnz data_len 
      0018EF 26 05            [ 1] 4666     jrne 10$
      0018F1 A6 0C            [ 1] 4667 	ld a,#ERR_NO_DATA 
      0018F3 CC 07 28         [ 2] 4668 	jp tb_error 
      0018F6 81               [ 4] 4669 10$:ret
      0018F7                       4670 try_next_line:
      0018F7 93               [ 1] 4671 	ldw x,y 
      0018F8 E6 02            [ 1] 4672 	ld a,(2,x)
      0018FA C7 00 0D         [ 1] 4673 	ld acc8,a 
      0018FD 72 5F 00 0C      [ 1] 4674 	clr acc16 
      001901 72 BB 00 0C      [ 2] 4675 	addw x,acc16 
      001905 20 C4            [ 2] 4676 	jra data_search_loop
                                   4677 
                                   4678 
                                   4679 ;---------------------------------
                                   4680 ; BASIC: READ 
                                   4681 ; return next data item | 0 
                                   4682 ;---------------------------------
                           000001  4683 	CTX_BPTR=1 
                           000003  4684 	CTX_IN=3 
                           000004  4685 	CTX_COUNT=4 
                           000005  4686 	XSAVE=5
                           000006  4687 	VSIZE=6
      001907                       4688 read:
      001907                       4689 	_vars  VSIZE 
      001907 52 06            [ 2]    1     sub sp,#VSIZE 
      001909                       4690 read01:	
      001909 C6 00 08         [ 1] 4691 	ld a,data_ofs
      00190C C1 00 09         [ 1] 4692 	cp a,data_len 
      00190F 27 37            [ 1] 4693 	jreq 2$ ; end of line  
      001911 CD 0F 30         [ 4] 4694 	call save_context
      001914 CE 00 06         [ 2] 4695 	ldw x,data_ptr 
      001917 CF 00 04         [ 2] 4696 	ldw basicptr,x 
      00191A 55 00 08 00 01   [ 1] 4697 	mov in,data_ofs 
      00191F 55 00 09 00 03   [ 1] 4698 	mov count,data_len  
      001924 CD 0C CD         [ 4] 4699 	call expression 
      001927 A1 84            [ 1] 4700 	cp a,#TK_INTGR 
      001929 27 03            [ 1] 4701 	jreq 1$ 
      00192B CC 07 26         [ 2] 4702 	jp syntax_error 
      00192E                       4703 1$:
      00192E 1F 05            [ 2] 4704 	ldw (XSAVE,SP),x
      001930 CD 08 15         [ 4] 4705 	call next_token ; skip comma
      001933 CE 00 04         [ 2] 4706 	ldw x,basicptr 
      001936 CF 00 06         [ 2] 4707 	ldw data_ptr,x 
      001939 55 00 01 00 08   [ 1] 4708 	mov data_ofs,in 
      00193E CD 0F 40         [ 4] 4709 	call rest_context
      001941 1E 05            [ 2] 4710 	ldw x,(XSAVE,sp)
      001943 A6 84            [ 1] 4711 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001945                       4712 	_drop VSIZE 
      001945 5B 06            [ 2]    1     addw sp,#VSIZE 
      001947 81               [ 4] 4713 	ret 
      001948                       4714 2$: ; end of line reached 
      001948 90 CE 00 06      [ 2] 4715 	ldw y, data_ptr 
      00194C 72 5F 00 06      [ 1] 4716 	clr data_ptr
      001950 72 5F 00 07      [ 1] 4717 	clr data_ptr+1   
      001954 72 5F 00 08      [ 1] 4718 	clr data_ofs 
      001958 72 5F 00 09      [ 1] 4719 	clr data_len 
      00195C CD 18 F7         [ 4] 4720 	call try_next_line 
      00195F 20 A8            [ 2] 4721 	jra read01
                                   4722 
                                   4723 
                                   4724 ;---------------------------------
                                   4725 ; BASIC: SPIEN clkdiv, 0|1  
                                   4726 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4727 ; if clkdiv==-1 disable SPI
                                   4728 ; 0|1 -> disable|enable  
                                   4729 ;--------------------------------- 
                           000005  4730 SPI_CS_BIT=5
      001961                       4731 spi_enable:
      001961 CD 0B CE         [ 4] 4732 	call arg_list 
      001964 A1 02            [ 1] 4733 	cp a,#2
      001966 27 03            [ 1] 4734 	jreq 1$
      001968 CC 07 26         [ 2] 4735 	jp syntax_error 
      00196B                       4736 1$: 
      00196B 72 12 50 C7      [ 1] 4737 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      00196F 85               [ 2] 4738 	popw x  
      001970 5D               [ 2] 4739 	tnzw x 
      001971 27 21            [ 1] 4740 	jreq spi_disable 
      001973 85               [ 2] 4741 	popw x 
      001974 A6 08            [ 1] 4742 	ld a,#(1<<SPI_CR1_BR)
      001976 42               [ 4] 4743 	mul x,a 
      001977 9F               [ 1] 4744 	ld a,xl 
      001978 C7 52 00         [ 1] 4745 	ld SPI_CR1,a 
                                   4746 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00197B 72 1A 50 14      [ 1] 4747 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      00197F 72 1A 50 16      [ 1] 4748 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4749 ; configure SPI as master mode 0.	
      001983 72 14 52 00      [ 1] 4750 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4751 ; ~CS line controlled by sofware 	
      001987 72 12 52 01      [ 1] 4752 	bset SPI_CR2,#SPI_CR2_SSM 
      00198B 72 10 52 01      [ 1] 4753     bset SPI_CR2,#SPI_CR2_SSI 
                                   4754 ; enable SPI
      00198F 72 1C 52 00      [ 1] 4755 	bset SPI_CR1,#SPI_CR1_SPE 	
      001993 81               [ 4] 4756 	ret 
      001994                       4757 spi_disable:
      001994                       4758 	_drop #2; throw first argument.
      001994 5B 02            [ 2]    1     addw sp,##2 
                                   4759 ; wait spi idle 
      001996 A6 82            [ 1] 4760 1$:	ld a,#0x82 
      001998 C4 52 03         [ 1] 4761 	and a,SPI_SR
      00199B A1 02            [ 1] 4762 	cp a,#2 
      00199D 26 F7            [ 1] 4763 	jrne 1$
      00199F 72 1D 52 00      [ 1] 4764 	bres SPI_CR1,#SPI_CR1_SPE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0019A3 72 13 50 C7      [ 1] 4765 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      0019A7 72 1B 50 16      [ 1] 4766 	bres PE_DDR,#SPI_CS_BIT 
      0019AB 81               [ 4] 4767 	ret 
                                   4768 
      0019AC                       4769 spi_clear_error:
      0019AC A6 78            [ 1] 4770 	ld a,#0x78 
      0019AE C5 52 03         [ 1] 4771 	bcp a,SPI_SR 
      0019B1 27 04            [ 1] 4772 	jreq 1$
      0019B3 72 5F 52 03      [ 1] 4773 	clr SPI_SR 
      0019B7 81               [ 4] 4774 1$: ret 
                                   4775 
      0019B8                       4776 spi_send_byte:
      0019B8 88               [ 1] 4777 	push a 
      0019B9 CD 19 AC         [ 4] 4778 	call spi_clear_error
      0019BC 84               [ 1] 4779 	pop a 
      0019BD 72 03 52 03 FB   [ 2] 4780 	btjf SPI_SR,#SPI_SR_TXE,.
      0019C2 C7 52 04         [ 1] 4781 	ld SPI_DR,a
      0019C5 72 01 52 03 FB   [ 2] 4782 	btjf SPI_SR,#SPI_SR_RXNE,.  
      0019CA C6 52 04         [ 1] 4783 	ld a,SPI_DR 
      0019CD 81               [ 4] 4784 	ret 
                                   4785 
      0019CE                       4786 spi_rcv_byte:
      0019CE A6 FF            [ 1] 4787 	ld a,#255
      0019D0 72 01 52 03 E3   [ 2] 4788 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      0019D5 C6 52 04         [ 1] 4789 	ld a,SPI_DR 
      0019D8 81               [ 4] 4790 	ret
                                   4791 
                                   4792 ;------------------------------
                                   4793 ; BASIC: SPIWR byte [,byte]
                                   4794 ; write 1 or more byte
                                   4795 ;------------------------------
      0019D9                       4796 spi_write:
      0019D9 CD 0C CD         [ 4] 4797 	call expression
      0019DC A1 84            [ 1] 4798 	cp a,#TK_INTGR 
      0019DE 27 03            [ 1] 4799 	jreq 1$
      0019E0 CC 07 26         [ 2] 4800 	jp syntax_error 
      0019E3                       4801 1$:	
      0019E3 9F               [ 1] 4802 	ld a,xl 
      0019E4 CD 19 B8         [ 4] 4803 	call spi_send_byte 
      0019E7 CD 08 15         [ 4] 4804 	call next_token 
      0019EA A1 09            [ 1] 4805 	cp a,#TK_COMMA 
      0019EC 26 02            [ 1] 4806 	jrne 2$ 
      0019EE 20 E9            [ 2] 4807 	jra spi_write 
      0019F0 4D               [ 1] 4808 2$:	tnz a 
      0019F1 27 05            [ 1] 4809 	jreq 3$
      0019F3                       4810 	_unget_token  
      0019F3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019F8 81               [ 4] 4811 3$:	ret 
                                   4812 
                                   4813 
                                   4814 ;-------------------------------
                                   4815 ; BASIC: SPIRD 	
                                   4816 ; read one byte from SPI 
                                   4817 ;-------------------------------
      0019F9                       4818 spi_read:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      0019F9 CD 19 CE         [ 4] 4819 	call spi_rcv_byte 
      0019FC 5F               [ 1] 4820 	clrw x 
      0019FD 97               [ 1] 4821 	ld xl,a 
      0019FE A6 84            [ 1] 4822 	ld a,#TK_INTGR 
      001A00 81               [ 4] 4823 	ret 
                                   4824 
                                   4825 ;------------------------------
                                   4826 ; BASIC: SPISEL 0|1 
                                   4827 ; set state of ~CS line
                                   4828 ; 0|1 deselect|select  
                                   4829 ;------------------------------
      001A01                       4830 spi_select:
      001A01 CD 08 15         [ 4] 4831 	call next_token 
      001A04 A1 84            [ 1] 4832 	cp a,#TK_INTGR 
      001A06 27 03            [ 1] 4833 	jreq 1$
      001A08 CC 07 26         [ 2] 4834 	jp syntax_error 
      001A0B 5D               [ 2] 4835 1$: tnzw x  
      001A0C 27 05            [ 1] 4836 	jreq cs_high 
      001A0E 72 1B 50 14      [ 1] 4837 	bres PE_ODR,#SPI_CS_BIT
      001A12 81               [ 4] 4838 	ret 
      001A13                       4839 cs_high: 
      001A13 72 1A 50 14      [ 1] 4840 	bset PE_ODR,#SPI_CS_BIT
      001A17 81               [ 4] 4841 	ret 
                                   4842 
                                   4843 ;-------------------------------
                                   4844 ; BASIC: PAD 
                                   4845 ; Return pad buffer address.
                                   4846 ;------------------------------
      001A18                       4847 pad_ref:
      001A18 AE 16 E0         [ 2] 4848 	ldw x,#pad 
      001A1B B6 84            [ 1] 4849 	ld a,TK_INTGR
      001A1D 81               [ 4] 4850 	ret 
                                   4851 
                                   4852 
                                   4853 ;------------------------------
                                   4854 ;      dictionary 
                                   4855 ; format:
                                   4856 ;   link:   2 bytes 
                                   4857 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4858 ;   cmd_name: 16 byte max 
                                   4859 ;   cmd_index: 2 bytes 
                                   4860 ;------------------------------
                                   4861 	.macro _dict_entry len,name,cmd_idx 
                                   4862 	.word LINK 
                                   4863 	LINK=.
                                   4864 name:
                                   4865 	.byte len 	
                                   4866 	.ascii "name"
                                   4867 	.word cmd_idx 
                                   4868 	.endm 
                                   4869 
                           000000  4870 	LINK=0
                                   4871 ; respect alphabetic order for BASIC names from Z-A
                                   4872 ; this sort order is for a cleaner WORDS cmd output. 	
      001A1E                       4873 kword_end:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001A1E                       4874 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001A1E 00 00                    1 	.word LINK 
                           001A20     2 	LINK=.
      001A20                          3 XOR:
      001A20 43                       4 	.byte 3+F_IFUNC 	
      001A21 58 4F 52                 5 	.ascii "XOR"
      001A24 00 BE                    6 	.word XOR_IDX 
      001A26                       4875 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001A26 1A 20                    1 	.word LINK 
                           001A28     2 	LINK=.
      001A28                          3 WRITE:
      001A28 05                       4 	.byte 5 	
      001A29 57 52 49 54 45           5 	.ascii "WRITE"
      001A2E 00 BC                    6 	.word WRITE_IDX 
      001A30                       4876 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001A30 1A 28                    1 	.word LINK 
                           001A32     2 	LINK=.
      001A32                          3 WORDS:
      001A32 05                       4 	.byte 5 	
      001A33 57 4F 52 44 53           5 	.ascii "WORDS"
      001A38 00 BA                    6 	.word WORDS_IDX 
      001A3A                       4877 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001A3A 1A 32                    1 	.word LINK 
                           001A3C     2 	LINK=.
      001A3C                          3 WAIT:
      001A3C 04                       4 	.byte 4 	
      001A3D 57 41 49 54              5 	.ascii "WAIT"
      001A41 00 B8                    6 	.word WAIT_IDX 
      001A43                       4878 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001A43 1A 3C                    1 	.word LINK 
                           001A45     2 	LINK=.
      001A45                          3 USR:
      001A45 43                       4 	.byte 3+F_IFUNC 	
      001A46 55 53 52                 5 	.ascii "USR"
      001A49 00 B6                    6 	.word USR_IDX 
      001A4B                       4879 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      001A4B 1A 45                    1 	.word LINK 
                           001A4D     2 	LINK=.
      001A4D                          3 UNTIL:
      001A4D 05                       4 	.byte 5 	
      001A4E 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001A53 00 B4                    6 	.word UNTIL_IDX 
      001A55                       4880 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001A55 1A 4D                    1 	.word LINK 
                           001A57     2 	LINK=.
      001A57                          3 UFLASH:
      001A57 46                       4 	.byte 6+F_IFUNC 	
      001A58 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001A5E 00 B2                    6 	.word UFLASH_IDX 
      001A60                       4881 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001A60 1A 57                    1 	.word LINK 
                           001A62     2 	LINK=.
      001A62                          3 UBOUND:
      001A62 46                       4 	.byte 6+F_IFUNC 	
      001A63 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001A69 00 B0                    6 	.word UBOUND_IDX 
      001A6B                       4882 	_dict_entry,4,TONE,TONE_IDX;tone  
      001A6B 1A 62                    1 	.word LINK 
                           001A6D     2 	LINK=.
      001A6D                          3 TONE:
      001A6D 04                       4 	.byte 4 	
      001A6E 54 4F 4E 45              5 	.ascii "TONE"
      001A72 00 AE                    6 	.word TONE_IDX 
      001A74                       4883 	_dict_entry,2,TO,TO_IDX;to
      001A74 1A 6D                    1 	.word LINK 
                           001A76     2 	LINK=.
      001A76                          3 TO:
      001A76 02                       4 	.byte 2 	
      001A77 54 4F                    5 	.ascii "TO"
      001A79 00 AC                    6 	.word TO_IDX 
      001A7B                       4884 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001A7B 1A 76                    1 	.word LINK 
                           001A7D     2 	LINK=.
      001A7D                          3 TIMER:
      001A7D 05                       4 	.byte 5 	
      001A7E 54 49 4D 45 52           5 	.ascii "TIMER"
      001A83 00 A8                    6 	.word TIMER_IDX 
      001A85                       4885 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001A85 1A 7D                    1 	.word LINK 
                           001A87     2 	LINK=.
      001A87                          3 TIMEOUT:
      001A87 47                       4 	.byte 7+F_IFUNC 	
      001A88 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001A8F 00 AA                    6 	.word TMROUT_IDX 
      001A91                       4886 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001A91 1A 87                    1 	.word LINK 
                           001A93     2 	LINK=.
      001A93                          3 TICKS:
      001A93 45                       4 	.byte 5+F_IFUNC 	
      001A94 54 49 43 4B 53           5 	.ascii "TICKS"
      001A99 00 A6                    6 	.word TICKS_IDX 
      001A9B                       4887 	_dict_entry,4,STOP,STOP_IDX;stop 
      001A9B 1A 93                    1 	.word LINK 
                           001A9D     2 	LINK=.
      001A9D                          3 STOP:
      001A9D 04                       4 	.byte 4 	
      001A9E 53 54 4F 50              5 	.ascii "STOP"
      001AA2 00 A4                    6 	.word STOP_IDX 
      001AA4                       4888 	_dict_entry,4,STEP,STEP_IDX;step 
      001AA4 1A 9D                    1 	.word LINK 
                           001AA6     2 	LINK=.
      001AA6                          3 STEP:
      001AA6 04                       4 	.byte 4 	
      001AA7 53 54 45 50              5 	.ascii "STEP"
      001AAB 00 A2                    6 	.word STEP_IDX 
      001AAD                       4889 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001AAD 1A A6                    1 	.word LINK 
                           001AAF     2 	LINK=.
      001AAF                          3 SPIWR:
      001AAF 05                       4 	.byte 5 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001AB0 53 50 49 57 52           5 	.ascii "SPIWR"
      001AB5 00 A0                    6 	.word SPIWR_IDX 
      001AB7                       4890 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001AB7 1A AF                    1 	.word LINK 
                           001AB9     2 	LINK=.
      001AB9                          3 SPISEL:
      001AB9 06                       4 	.byte 6 	
      001ABA 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001AC0 00 9E                    6 	.word SPISEL_IDX 
      001AC2                       4891 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001AC2 1A B9                    1 	.word LINK 
                           001AC4     2 	LINK=.
      001AC4                          3 SPIRD:
      001AC4 45                       4 	.byte 5+F_IFUNC 	
      001AC5 53 50 49 52 44           5 	.ascii "SPIRD"
      001ACA 00 9A                    6 	.word SPIRD_IDX 
      001ACC                       4892 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001ACC 1A C4                    1 	.word LINK 
                           001ACE     2 	LINK=.
      001ACE                          3 SPIEN:
      001ACE 05                       4 	.byte 5 	
      001ACF 53 50 49 45 4E           5 	.ascii "SPIEN"
      001AD4 00 9C                    6 	.word SPIEN_IDX 
      001AD6                       4893 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001AD6 1A CE                    1 	.word LINK 
                           001AD8     2 	LINK=.
      001AD8                          3 SLEEP:
      001AD8 05                       4 	.byte 5 	
      001AD9 53 4C 45 45 50           5 	.ascii "SLEEP"
      001ADE 00 98                    6 	.word SLEEP_IDX 
      001AE0                       4894     _dict_entry,4,SHOW,SHOW_IDX;show 
      001AE0 1A D8                    1 	.word LINK 
                           001AE2     2 	LINK=.
      001AE2                          3 SHOW:
      001AE2 04                       4 	.byte 4 	
      001AE3 53 48 4F 57              5 	.ascii "SHOW"
      001AE7 00 94                    6 	.word SHOW_IDX 
      001AE9                       4895 	_dict_entry 3,RUN,RUN_IDX;run
      001AE9 1A E2                    1 	.word LINK 
                           001AEB     2 	LINK=.
      001AEB                          3 RUN:
      001AEB 03                       4 	.byte 3 	
      001AEC 52 55 4E                 5 	.ascii "RUN"
      001AEF 00 92                    6 	.word RUN_IDX 
      001AF1                       4896 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001AF1 1A EB                    1 	.word LINK 
                           001AF3     2 	LINK=.
      001AF3                          3 RSHIFT:
      001AF3 46                       4 	.byte 6+F_IFUNC 	
      001AF4 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001AFA 00 90                    6 	.word RSHIFT_IDX 
      001AFC                       4897 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      001AFC 1A F3                    1 	.word LINK 
                           001AFE     2 	LINK=.
      001AFE                          3 RND:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001AFE 43                       4 	.byte 3+F_IFUNC 	
      001AFF 52 4E 44                 5 	.ascii "RND"
      001B02 00 8E                    6 	.word RND_IDX 
      001B04                       4898 	_dict_entry,6,RETURN,RET_IDX;return 
      001B04 1A FE                    1 	.word LINK 
                           001B06     2 	LINK=.
      001B06                          3 RETURN:
      001B06 06                       4 	.byte 6 	
      001B07 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001B0D 00 8C                    6 	.word RET_IDX 
      001B0F                       4899 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001B0F 1B 06                    1 	.word LINK 
                           001B11     2 	LINK=.
      001B11                          3 RESTORE:
      001B11 07                       4 	.byte 7 	
      001B12 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001B19 00 8A                    6 	.word REST_IDX 
      001B1B                       4900 	_dict_entry 6,REMARK,REM_IDX;remark 
      001B1B 1B 11                    1 	.word LINK 
                           001B1D     2 	LINK=.
      001B1D                          3 REMARK:
      001B1D 06                       4 	.byte 6 	
      001B1E 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001B24 00 88                    6 	.word REM_IDX 
      001B26                       4901 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001B26 1B 1D                    1 	.word LINK 
                           001B28     2 	LINK=.
      001B28                          3 REBOOT:
      001B28 06                       4 	.byte 6 	
      001B29 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001B2F 00 86                    6 	.word RBT_IDX 
      001B31                       4902 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001B31 1B 28                    1 	.word LINK 
                           001B33     2 	LINK=.
      001B33                          3 READ:
      001B33 44                       4 	.byte 4+F_IFUNC 	
      001B34 52 45 41 44              5 	.ascii "READ"
      001B38 00 84                    6 	.word READ_IDX 
      001B3A                       4903 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001B3A 1B 33                    1 	.word LINK 
                           001B3C     2 	LINK=.
      001B3C                          3 QKEY:
      001B3C 44                       4 	.byte 4+F_IFUNC 	
      001B3D 51 4B 45 59              5 	.ascii "QKEY"
      001B41 00 82                    6 	.word QKEY_IDX 
      001B43                       4904 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001B43 1B 3C                    1 	.word LINK 
                           001B45     2 	LINK=.
      001B45                          3 PRTI:
      001B45 44                       4 	.byte 4+F_IFUNC 	
      001B46 50 52 54 49              5 	.ascii "PRTI"
      001B4A 00 80                    6 	.word PRTI_IDX 
      001B4C                       4905 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001B4C 1B 45                    1 	.word LINK 
                           001B4E     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001B4E                          3 PRTH:
      001B4E 44                       4 	.byte 4+F_IFUNC 	
      001B4F 50 52 54 48              5 	.ascii "PRTH"
      001B53 00 7E                    6 	.word PRTH_IDX 
      001B55                       4906 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001B55 1B 4E                    1 	.word LINK 
                           001B57     2 	LINK=.
      001B57                          3 PRTG:
      001B57 44                       4 	.byte 4+F_IFUNC 	
      001B58 50 52 54 47              5 	.ascii "PRTG"
      001B5C 00 7C                    6 	.word PRTG_IDX 
      001B5E                       4907 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001B5E 1B 57                    1 	.word LINK 
                           001B60     2 	LINK=.
      001B60                          3 PRTF:
      001B60 44                       4 	.byte 4+F_IFUNC 	
      001B61 50 52 54 46              5 	.ascii "PRTF"
      001B65 00 7A                    6 	.word PRTF_IDX 
      001B67                       4908 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001B67 1B 60                    1 	.word LINK 
                           001B69     2 	LINK=.
      001B69                          3 PRTE:
      001B69 44                       4 	.byte 4+F_IFUNC 	
      001B6A 50 52 54 45              5 	.ascii "PRTE"
      001B6E 00 78                    6 	.word PRTE_IDX 
      001B70                       4909 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      001B70 1B 69                    1 	.word LINK 
                           001B72     2 	LINK=.
      001B72                          3 PRTD:
      001B72 44                       4 	.byte 4+F_IFUNC 	
      001B73 50 52 54 44              5 	.ascii "PRTD"
      001B77 00 76                    6 	.word PRTD_IDX 
      001B79                       4910 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001B79 1B 72                    1 	.word LINK 
                           001B7B     2 	LINK=.
      001B7B                          3 PRTC:
      001B7B 44                       4 	.byte 4+F_IFUNC 	
      001B7C 50 52 54 43              5 	.ascii "PRTC"
      001B80 00 74                    6 	.word PRTC_IDX 
      001B82                       4911 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001B82 1B 7B                    1 	.word LINK 
                           001B84     2 	LINK=.
      001B84                          3 PRTB:
      001B84 44                       4 	.byte 4+F_IFUNC 	
      001B85 50 52 54 42              5 	.ascii "PRTB"
      001B89 00 72                    6 	.word PRTB_IDX 
      001B8B                       4912 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001B8B 1B 84                    1 	.word LINK 
                           001B8D     2 	LINK=.
      001B8D                          3 PRTA:
      001B8D 44                       4 	.byte 4+F_IFUNC 	
      001B8E 50 52 54 41              5 	.ascii "PRTA"
      001B92 00 70                    6 	.word PRTA_IDX 
      001B94                       4913 	_dict_entry 5,PRINT,PRT_IDX;print 
      001B94 1B 8D                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001B96     2 	LINK=.
      001B96                          3 PRINT:
      001B96 05                       4 	.byte 5 	
      001B97 50 52 49 4E 54           5 	.ascii "PRINT"
      001B9C 00 6E                    6 	.word PRT_IDX 
      001B9E                       4914 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001B9E 1B 96                    1 	.word LINK 
                           001BA0     2 	LINK=.
      001BA0                          3 POUT:
      001BA0 44                       4 	.byte 4+F_IFUNC 	
      001BA1 50 4F 55 54              5 	.ascii "POUT"
      001BA5 00 6C                    6 	.word POUT_IDX 
      001BA7                       4915 	_dict_entry,4,POKE,POKE_IDX;poke 
      001BA7 1B A0                    1 	.word LINK 
                           001BA9     2 	LINK=.
      001BA9                          3 POKE:
      001BA9 04                       4 	.byte 4 	
      001BAA 50 4F 4B 45              5 	.ascii "POKE"
      001BAE 00 6A                    6 	.word POKE_IDX 
      001BB0                       4916 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001BB0 1B A9                    1 	.word LINK 
                           001BB2     2 	LINK=.
      001BB2                          3 PMODE:
      001BB2 05                       4 	.byte 5 	
      001BB3 50 4D 4F 44 45           5 	.ascii "PMODE"
      001BB8 00 64                    6 	.word PMODE_IDX 
      001BBA                       4917 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001BBA 1B B2                    1 	.word LINK 
                           001BBC     2 	LINK=.
      001BBC                          3 PINP:
      001BBC 44                       4 	.byte 4+F_IFUNC 	
      001BBD 50 49 4E 50              5 	.ascii "PINP"
      001BC1 00 68                    6 	.word PINP_IDX 
      001BC3                       4918 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001BC3 1B BC                    1 	.word LINK 
                           001BC5     2 	LINK=.
      001BC5                          3 PEEK:
      001BC5 44                       4 	.byte 4+F_IFUNC 	
      001BC6 50 45 45 4B              5 	.ascii "PEEK"
      001BCA 00 66                    6 	.word PEEK_IDX 
      001BCC                       4919 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001BCC 1B C5                    1 	.word LINK 
                           001BCE     2 	LINK=.
      001BCE                          3 PAUSE:
      001BCE 05                       4 	.byte 5 	
      001BCF 50 41 55 53 45           5 	.ascii "PAUSE"
      001BD4 00 62                    6 	.word PAUSE_IDX 
      001BD6                       4920 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001BD6 1B CE                    1 	.word LINK 
                           001BD8     2 	LINK=.
      001BD8                          3 PAD:
      001BD8 43                       4 	.byte 3+F_IFUNC 	
      001BD9 50 41 44                 5 	.ascii "PAD"
      001BDC 00 60                    6 	.word PAD_IDX 
      001BDE                       4921 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001BDE 1B D8                    1 	.word LINK 
                           001BE0     2 	LINK=.
      001BE0                          3 OR:
      001BE0 42                       4 	.byte 2+F_IFUNC 	
      001BE1 4F 52                    5 	.ascii "OR"
      001BE3 00 5E                    6 	.word OR_IDX 
      001BE5                       4922 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001BE5 1B E0                    1 	.word LINK 
                           001BE7     2 	LINK=.
      001BE7                          3 ODR:
      001BE7 43                       4 	.byte 3+F_IFUNC 	
      001BE8 4F 44 52                 5 	.ascii "ODR"
      001BEB 00 5C                    6 	.word ODR_IDX 
      001BED                       4923 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001BED 1B E7                    1 	.word LINK 
                           001BEF     2 	LINK=.
      001BEF                          3 NOT:
      001BEF 43                       4 	.byte 3+F_IFUNC 	
      001BF0 4E 4F 54                 5 	.ascii "NOT"
      001BF3 00 5A                    6 	.word NOT_IDX 
      001BF5                       4924 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001BF5 1B EF                    1 	.word LINK 
                           001BF7     2 	LINK=.
      001BF7                          3 NEXT:
      001BF7 04                       4 	.byte 4 	
      001BF8 4E 45 58 54              5 	.ascii "NEXT"
      001BFC 00 56                    6 	.word NEXT_IDX 
      001BFE                       4925 	_dict_entry,3,NEW,NEW_IDX;new
      001BFE 1B F7                    1 	.word LINK 
                           001C00     2 	LINK=.
      001C00                          3 NEW:
      001C00 03                       4 	.byte 3 	
      001C01 4E 45 57                 5 	.ascii "NEW"
      001C04 00 58                    6 	.word NEW_IDX 
      001C06                       4926 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001C06 1C 00                    1 	.word LINK 
                           001C08     2 	LINK=.
      001C08                          3 MULDIV:
      001C08 46                       4 	.byte 6+F_IFUNC 	
      001C09 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001C0F 00 54                    6 	.word MULDIV_IDX 
      001C11                       4927 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001C11 1C 08                    1 	.word LINK 
                           001C13     2 	LINK=.
      001C13                          3 LSHIFT:
      001C13 46                       4 	.byte 6+F_IFUNC 	
      001C14 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001C1A 00 52                    6 	.word LSHIFT_IDX 
      001C1C                       4928 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001C1C 1C 13                    1 	.word LINK 
                           001C1E     2 	LINK=.
      001C1E                          3 LOG:
      001C1E 43                       4 	.byte 3+F_IFUNC 	
      001C1F 4C 4F 47                 5 	.ascii "LOG"
      001C22 00 50                    6 	.word LOG_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001C24                       4929 	_dict_entry 4,LIST,LIST_IDX;list
      001C24 1C 1E                    1 	.word LINK 
                           001C26     2 	LINK=.
      001C26                          3 LIST:
      001C26 04                       4 	.byte 4 	
      001C27 4C 49 53 54              5 	.ascii "LIST"
      001C2B 00 4E                    6 	.word LIST_IDX 
      001C2D                       4930 	_dict_entry 3,LET,LET_IDX;let 
      001C2D 1C 26                    1 	.word LINK 
                           001C2F     2 	LINK=.
      001C2F                          3 LET:
      001C2F 03                       4 	.byte 3 	
      001C30 4C 45 54                 5 	.ascii "LET"
      001C33 00 4C                    6 	.word LET_IDX 
      001C35                       4931 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001C35 1C 2F                    1 	.word LINK 
                           001C37     2 	LINK=.
      001C37                          3 KEY:
      001C37 43                       4 	.byte 3+F_IFUNC 	
      001C38 4B 45 59                 5 	.ascii "KEY"
      001C3B 00 4A                    6 	.word KEY_IDX 
      001C3D                       4932 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      001C3D 1C 37                    1 	.word LINK 
                           001C3F     2 	LINK=.
      001C3F                          3 IWDGREF:
      001C3F 07                       4 	.byte 7 	
      001C40 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001C47 00 48                    6 	.word IWDGREF_IDX 
      001C49                       4933 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001C49 1C 3F                    1 	.word LINK 
                           001C4B     2 	LINK=.
      001C4B                          3 IWDGEN:
      001C4B 06                       4 	.byte 6 	
      001C4C 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001C52 00 46                    6 	.word IWDGEN_IDX 
      001C54                       4934 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001C54 1C 4B                    1 	.word LINK 
                           001C56     2 	LINK=.
      001C56                          3 INVERT:
      001C56 46                       4 	.byte 6+F_IFUNC 	
      001C57 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001C5D 00 44                    6 	.word INVERT_IDX 
      001C5F                       4935 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001C5F 1C 56                    1 	.word LINK 
                           001C61     2 	LINK=.
      001C61                          3 INPUT:
      001C61 05                       4 	.byte 5 	
      001C62 49 4E 50 55 54           5 	.ascii "INPUT"
      001C67 00 42                    6 	.word INPUT_IDX 
      001C69                       4936 	_dict_entry,2,IF,IF_IDX;if 
      001C69 1C 61                    1 	.word LINK 
                           001C6B     2 	LINK=.
      001C6B                          3 IF:
      001C6B 02                       4 	.byte 2 	
      001C6C 49 46                    5 	.ascii "IF"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001C6E 00 40                    6 	.word IF_IDX 
      001C70                       4937 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001C70 1C 6B                    1 	.word LINK 
                           001C72     2 	LINK=.
      001C72                          3 IDR:
      001C72 43                       4 	.byte 3+F_IFUNC 	
      001C73 49 44 52                 5 	.ascii "IDR"
      001C76 00 3E                    6 	.word IDR_IDX 
      001C78                       4938 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001C78 1C 72                    1 	.word LINK 
                           001C7A     2 	LINK=.
      001C7A                          3 HEX:
      001C7A 03                       4 	.byte 3 	
      001C7B 48 45 58                 5 	.ascii "HEX"
      001C7E 00 3C                    6 	.word HEX_IDX 
      001C80                       4939 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001C80 1C 7A                    1 	.word LINK 
                           001C82     2 	LINK=.
      001C82                          3 GPIO:
      001C82 44                       4 	.byte 4+F_IFUNC 	
      001C83 47 50 49 4F              5 	.ascii "GPIO"
      001C87 00 3A                    6 	.word GPIO_IDX 
      001C89                       4940 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001C89 1C 82                    1 	.word LINK 
                           001C8B     2 	LINK=.
      001C8B                          3 GOTO:
      001C8B 04                       4 	.byte 4 	
      001C8C 47 4F 54 4F              5 	.ascii "GOTO"
      001C90 00 38                    6 	.word GOTO_IDX 
      001C92                       4941 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      001C92 1C 8B                    1 	.word LINK 
                           001C94     2 	LINK=.
      001C94                          3 GOSUB:
      001C94 05                       4 	.byte 5 	
      001C95 47 4F 53 55 42           5 	.ascii "GOSUB"
      001C9A 00 36                    6 	.word GOSUB_IDX 
      001C9C                       4942 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      001C9C 1C 94                    1 	.word LINK 
                           001C9E     2 	LINK=.
      001C9E                          3 FREE:
      001C9E 44                       4 	.byte 4+F_IFUNC 	
      001C9F 46 52 45 45              5 	.ascii "FREE"
      001CA3 00 96                    6 	.word FREE_IDX 
      001CA5                       4943 	_dict_entry,3,FOR,FOR_IDX;for 
      001CA5 1C 9E                    1 	.word LINK 
                           001CA7     2 	LINK=.
      001CA7                          3 FOR:
      001CA7 03                       4 	.byte 3 	
      001CA8 46 4F 52                 5 	.ascii "FOR"
      001CAB 00 34                    6 	.word FOR_IDX 
      001CAD                       4944 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      001CAD 1C A7                    1 	.word LINK 
                           001CAF     2 	LINK=.
      001CAF                          3 FCPU:
      001CAF 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001CB0 46 43 50 55              5 	.ascii "FCPU"
      001CB4 00 32                    6 	.word FCPU_IDX 
      001CB6                       4945 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      001CB6 1C AF                    1 	.word LINK 
                           001CB8     2 	LINK=.
      001CB8                          3 ERASE:
      001CB8 05                       4 	.byte 5 	
      001CB9 45 52 41 53 45           5 	.ascii "ERASE"
      001CBE 00 30                    6 	.word ERASE_IDX 
      001CC0                       4946 	_dict_entry,3,END,END_IDX;cmd_end  
      001CC0 1C B8                    1 	.word LINK 
                           001CC2     2 	LINK=.
      001CC2                          3 END:
      001CC2 03                       4 	.byte 3 	
      001CC3 45 4E 44                 5 	.ascii "END"
      001CC6 00 2E                    6 	.word END_IDX 
      001CC8                       4947 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      001CC8 1C C2                    1 	.word LINK 
                           001CCA     2 	LINK=.
      001CCA                          3 EEPROM:
      001CCA 46                       4 	.byte 6+F_IFUNC 	
      001CCB 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001CD1 00 2C                    6 	.word EEPROM_IDX 
      001CD3                       4948 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      001CD3 1C CA                    1 	.word LINK 
                           001CD5     2 	LINK=.
      001CD5                          3 DWRITE:
      001CD5 06                       4 	.byte 6+F_CMD 	
      001CD6 44 57 52 49 54 45        5 	.ascii "DWRITE"
      001CDC 00 2A                    6 	.word DWRITE_IDX 
      001CDE                       4949 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      001CDE 1C D5                    1 	.word LINK 
                           001CE0     2 	LINK=.
      001CE0                          3 DREAD:
      001CE0 45                       4 	.byte 5+F_IFUNC 	
      001CE1 44 52 45 41 44           5 	.ascii "DREAD"
      001CE6 00 28                    6 	.word DREAD_IDX 
      001CE8                       4950 	_dict_entry,2,DO,DO_IDX;do_loop
      001CE8 1C E0                    1 	.word LINK 
                           001CEA     2 	LINK=.
      001CEA                          3 DO:
      001CEA 02                       4 	.byte 2 	
      001CEB 44 4F                    5 	.ascii "DO"
      001CED 00 26                    6 	.word DO_IDX 
      001CEF                       4951 	_dict_entry,3,DEC,DEC_IDX;dec_base
      001CEF 1C EA                    1 	.word LINK 
                           001CF1     2 	LINK=.
      001CF1                          3 DEC:
      001CF1 03                       4 	.byte 3 	
      001CF2 44 45 43                 5 	.ascii "DEC"
      001CF5 00 24                    6 	.word DEC_IDX 
      001CF7                       4952 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      001CF7 1C F1                    1 	.word LINK 
                           001CF9     2 	LINK=.
      001CF9                          3 DDR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001CF9 43                       4 	.byte 3+F_IFUNC 	
      001CFA 44 44 52                 5 	.ascii "DDR"
      001CFD 00 22                    6 	.word DDR_IDX 
      001CFF                       4953 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      001CFF 1C F9                    1 	.word LINK 
                           001D01     2 	LINK=.
      001D01                          3 DATALN:
      001D01 06                       4 	.byte 6 	
      001D02 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      001D08 00 20                    6 	.word DATALN_IDX 
      001D0A                       4954 	_dict_entry,4,DATA,DATA_IDX;data  
      001D0A 1D 01                    1 	.word LINK 
                           001D0C     2 	LINK=.
      001D0C                          3 DATA:
      001D0C 04                       4 	.byte 4 	
      001D0D 44 41 54 41              5 	.ascii "DATA"
      001D11 00 1E                    6 	.word DATA_IDX 
      001D13                       4955 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      001D13 1D 0C                    1 	.word LINK 
                           001D15     2 	LINK=.
      001D15                          3 CRL:
      001D15 43                       4 	.byte 3+F_IFUNC 	
      001D16 43 52 4C                 5 	.ascii "CRL"
      001D19 00 1C                    6 	.word CRL_IDX 
      001D1B                       4956 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      001D1B 1D 15                    1 	.word LINK 
                           001D1D     2 	LINK=.
      001D1D                          3 CRH:
      001D1D 43                       4 	.byte 3+F_IFUNC 	
      001D1E 43 52 48                 5 	.ascii "CRH"
      001D21 00 1A                    6 	.word CRH_IDX 
      001D23                       4957 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      001D23 1D 1D                    1 	.word LINK 
                           001D25     2 	LINK=.
      001D25                          3 CHAR:
      001D25 84                       4 	.byte 4+F_CFUNC 	
      001D26 43 48 41 52              5 	.ascii "CHAR"
      001D2A 00 18                    6 	.word CHAR_IDX 
      001D2C                       4958 	_dict_entry,3,BYE,BYE_IDX;bye 
      001D2C 1D 25                    1 	.word LINK 
                           001D2E     2 	LINK=.
      001D2E                          3 BYE:
      001D2E 03                       4 	.byte 3 	
      001D2F 42 59 45                 5 	.ascii "BYE"
      001D32 00 16                    6 	.word BYE_IDX 
      001D34                       4959 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      001D34 1D 2E                    1 	.word LINK 
                           001D36     2 	LINK=.
      001D36                          3 BTOGL:
      001D36 05                       4 	.byte 5 	
      001D37 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001D3C 00 14                    6 	.word BTOGL_IDX 
      001D3E                       4960 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      001D3E 1D 36                    1 	.word LINK 
                           001D40     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001D40                          3 BTEST:
      001D40 45                       4 	.byte 5+F_IFUNC 	
      001D41 42 54 45 53 54           5 	.ascii "BTEST"
      001D46 00 12                    6 	.word BTEST_IDX 
      001D48                       4961 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      001D48 1D 40                    1 	.word LINK 
                           001D4A     2 	LINK=.
      001D4A                          3 BSET:
      001D4A 04                       4 	.byte 4 	
      001D4B 42 53 45 54              5 	.ascii "BSET"
      001D4F 00 10                    6 	.word BSET_IDX 
      001D51                       4962 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      001D51 1D 4A                    1 	.word LINK 
                           001D53     2 	LINK=.
      001D53                          3 BRES:
      001D53 04                       4 	.byte 4 	
      001D54 42 52 45 53              5 	.ascii "BRES"
      001D58 00 0E                    6 	.word BRES_IDX 
      001D5A                       4963 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      001D5A 1D 53                    1 	.word LINK 
                           001D5C     2 	LINK=.
      001D5C                          3 BIT:
      001D5C 43                       4 	.byte 3+F_IFUNC 	
      001D5D 42 49 54                 5 	.ascii "BIT"
      001D60 00 0C                    6 	.word BIT_IDX 
      001D62                       4964 	_dict_entry,3,AWU,AWU_IDX;awu 
      001D62 1D 5C                    1 	.word LINK 
                           001D64     2 	LINK=.
      001D64                          3 AWU:
      001D64 03                       4 	.byte 3 	
      001D65 41 57 55                 5 	.ascii "AWU"
      001D68 00 0A                    6 	.word AWU_IDX 
      001D6A                       4965 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      001D6A 1D 64                    1 	.word LINK 
                           001D6C     2 	LINK=.
      001D6C                          3 ASC:
      001D6C 43                       4 	.byte 3+F_IFUNC 	
      001D6D 41 53 43                 5 	.ascii "ASC"
      001D70 00 08                    6 	.word ASC_IDX 
      001D72                       4966 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      001D72 1D 6C                    1 	.word LINK 
                           001D74     2 	LINK=.
      001D74                          3 AND:
      001D74 43                       4 	.byte 3+F_IFUNC 	
      001D75 41 4E 44                 5 	.ascii "AND"
      001D78 00 06                    6 	.word AND_IDX 
      001D7A                       4967 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      001D7A 1D 74                    1 	.word LINK 
                           001D7C     2 	LINK=.
      001D7C                          3 ADCREAD:
      001D7C 47                       4 	.byte 7+F_IFUNC 	
      001D7D 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      001D84 00 04                    6 	.word ADCREAD_IDX 
      001D86                       4968 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      001D86 1D 7C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                           001D88     2 	LINK=.
      001D88                          3 ADCON:
      001D88 05                       4 	.byte 5 	
      001D89 41 44 43 4F 4E           5 	.ascii "ADCON"
      001D8E 00 02                    6 	.word ADCON_IDX 
      001D90                       4969 kword_dict::
      001D90                       4970 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      001D90 1D 88                    1 	.word LINK 
                           001D92     2 	LINK=.
      001D92                          3 ABS:
      001D92 43                       4 	.byte 3+F_IFUNC 	
      001D93 41 42 53                 5 	.ascii "ABS"
      001D96 00 00                    6 	.word ABS_IDX 
                                   4971 
                                   4972 ;comands and fonctions address table 	
      001D98                       4973 code_addr::
      001D98 15 50 12 6D 12 A9 15  4974 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             64 14 41 15 01 17 B2
      001DA6 0F FB 0F EB 10 1C 10  4975 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             0C 14 DA 14 2F 18 6C
      001DB4 18 66 18 84 18 8A 18  4976 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             60 0D B4 17 DB 12 DD
             13 0D
      001DC4 18 7E 12 19 13 D5 15  4977 	.word const_eeprom_base,cmd_end,erase,fcpu,for,gosub,goto,gpio ; 24..31 
             DE 10 77 11 82 11 67
             14 7D
      001DD4 0D AF 18 5A 10 63 0F  4978 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             50 17 CC 17 5C 17 92
             14 68
      001DE4 0E 03 0E 2E 17 97 15  4979 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             AC 0B 53 10 F7 13 94
      001DF2 17 4F 18 54 15 7C 1A  4980 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             18 14 EE 15 EA 10 52
             18 78
      001E02 10 43 18 72 0E CA 18  4981 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             1E 18 24 18 2A 18 30
             18 36
      001E12 18 3C 18 42 18 48 18  4982 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             4E 14 70 19 07 04 6F
             0F C0
      001E22 18 B8 11 A2 16 66 15  4983 	.word restore,return, random,rshift,run,show,free ; 72..79
             C5 11 C0 0D 6E 0D B9
      001E30 14 E3 19 F9 19 61 1A  4984 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             01 19 D9 10 D0 13 48
             15 4A
      001E40 17 33 17 42 10 A0 12  4985 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             29 0D E1 14 A7 17 F0
             14 BD
      001E50 0F C6 16 CD 13 F8 15  4986 	.word wait,words,write,bit_xor ; 96..99
             94
      001E58 00 00                 4987 	.word 0 
                                   4988 
                                   4989 
                                   4990 
                                   4991 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
                                     32 ;    .nlist
                                     33 ;	.include "inc/nucleo_8s208.inc"
                                     34 ;	.include "inc/stm8s208.inc"
                                     35 ;	.include "inc/ascii.inc"
                                     36 ;	.include "inc/gen_macros.inc" 
                                     37 ;	.include "tbi_macros.inc" 
                                     38     .list 
                                     39 
                                     40 
                                     41     .area CODE 
                                     42 
                                     43 
                                     44 ;-----------------------------
                                     45 ;  constants replacing 
                                     46 ;  ANSI sequence received 
                                     47 ;  from terminal.
                                     48 ;  These are the ANSI sequences
                                     49 ;  accepted by function readln
                                     50 ;------------------------------
                           000080    51     ARROW_LEFT=128
                           000081    52     ARROW_RIGHT=129
                           000082    53     HOME=130
                           000083    54     KEY_END=131
                           000084    55     SUP=132 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                     56 
      001E5A 43 81 44 80 48 82 46    57 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                     58 
                                     59 ;--------------------------------
                                     60 ; receive ANSI ESC 
                                     61 ; sequence and convert it
                                     62 ; to a single character code 
                                     63 ; in range {128..255}
                                     64 ; This is called after receiving 
                                     65 ; ESC character. 
                                     66 ; ignored sequence return 0 
                                     67 ; output:
                                     68 ;   A    converted character 
                                     69 ;-------------------------------
      001E66                         70 get_escape:
      001E66 CD 02 C2         [ 4]   71     call getc 
      001E69 A1 5B            [ 1]   72     cp a,#'[ ; this character is expected after ESC 
      001E6B 27 02            [ 1]   73     jreq 1$
      001E6D 4F               [ 1]   74     clr a
      001E6E 81               [ 4]   75     ret
      001E6F CD 02 C2         [ 4]   76 1$: call getc 
      001E72 AE 1E 5A         [ 2]   77     ldw x,#convert_table
      001E75                         78 2$:
      001E75 F1               [ 1]   79     cp a,(x)
      001E76 27 08            [ 1]   80     jreq 4$
      001E78 1C 00 02         [ 2]   81     addw x,#2
      001E7B 7D               [ 1]   82     tnz (x)
      001E7C 26 F7            [ 1]   83     jrne 2$
      001E7E 4F               [ 1]   84     clr a
      001E7F 81               [ 4]   85     ret 
      001E80 5C               [ 1]   86 4$: incw x 
      001E81 F6               [ 1]   87     ld a,(x)
      001E82 A1 84            [ 1]   88     cp a,#SUP
      001E84 26 05            [ 1]   89     jrne 5$
      001E86 88               [ 1]   90     push a 
      001E87 CD 02 C2         [ 4]   91     call getc
      001E8A 84               [ 1]   92     pop a 
      001E8B                         93 5$:
      001E8B 81               [ 4]   94     ret 
                                     95 
                                     96 
                                     97 ;-----------------------------
                                     98 ; send an ASCIZ string to UART1 
                                     99 ; input: 
                                    100 ;   x 		char * 
                                    101 ; output:
                                    102 ;   none 
                                    103 ;-------------------------------
      001E8C                        104 puts::
      001E8C F6               [ 1]  105     ld a,(x)
      001E8D 27 06            [ 1]  106 	jreq 1$
      001E8F CD 02 B2         [ 4]  107 	call putc 
      001E92 5C               [ 1]  108 	incw x 
      001E93 20 F7            [ 2]  109 	jra puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001E95 81               [ 4]  110 1$:	ret 
                                    111 
                                    112 
                                    113 ;---------------------------
                                    114 ; delete character at left 
                                    115 ; of cursor on terminal 
                                    116 ; input:
                                    117 ;   none 
                                    118 ; output:
                                    119 ;	none 
                                    120 ;---------------------------
      001E96                        121 bksp:
      001E96 A6 08            [ 1]  122 	ld a,#BS 
      001E98 CD 02 B2         [ 4]  123 	call putc 
      001E9B A6 20            [ 1]  124 	ld a,#SPACE 
      001E9D CD 02 B2         [ 4]  125 	call putc 
      001EA0 A6 08            [ 1]  126 	ld a,#BS 
      001EA2 CD 02 B2         [ 4]  127 	call putc 
      001EA5 81               [ 4]  128 	ret 
                                    129 ;---------------------------
                                    130 ; delete n character left of cursor 
                                    131 ; at terminal.
                                    132 ; input: 
                                    133 ;   A   number of characters to delete.
                                    134 ; output:
                                    135 ;    none 
                                    136 ;--------------------------	
      001EA6                        137 delete_nchar:
      001EA6 88               [ 1]  138 	push a 
      001EA7 0D 01            [ 1]  139 0$:	tnz (1,sp)
      001EA9 27 07            [ 1]  140 	jreq 1$
      001EAB CD 1E 96         [ 4]  141 	call bksp 
      001EAE 0A 01            [ 1]  142 	dec (1,sp)
      001EB0 20 F5            [ 2]  143 	jra 0$
      001EB2 84               [ 1]  144 1$:	pop a 
      001EB3 81               [ 4]  145 	ret
                                    146 
                                    147 ;--------------------------
                                    148 ; send ANSI escape sequence
                                    149 ; ANSI: ESC[
                                    150 ; note: ESC is ASCII 27
                                    151 ;       [   is ASCII 91  
                                    152 ;-------------------------- 
      001EB4                        153 send_escape:
      001EB4 A6 1B            [ 1]  154 	ld a,#ESC 
      001EB6 CD 02 B2         [ 4]  155 	call putc 
      001EB9 A6 5B            [ 1]  156 	ld a,#'[
      001EBB CD 02 B2         [ 4]  157 	call putc 
      001EBE 81               [ 4]  158 	ret 
                                    159 
                                    160 ;---------------------
                                    161 ;send ANSI parameter value
                                    162 ; ANSI parameter values are 
                                    163 ; sent as ASCII charater 
                                    164 ; not as binary number.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                    165 ; this routine 
                                    166 ; convert binary number to 
                                    167 ; ASCII string and send it.
                                    168 ; expected range {0..99}
                                    169 ; input: 
                                    170 ; 	A {0..99} 
                                    171 ; output:
                                    172 ;   none 
                                    173 ;---------------------
      001EBF                        174 send_parameter:
      001EBF 89               [ 2]  175 	pushw x 
      001EC0 5F               [ 1]  176 	clrw x 
      001EC1 97               [ 1]  177 	ld xl,a 
      001EC2 A6 0A            [ 1]  178 	ld a,#10 
      001EC4 62               [ 2]  179 	div x,a 
      001EC5 95               [ 1]  180 	ld xh,a 
      001EC6 9F               [ 1]  181 	ld a,xl
      001EC7 4D               [ 1]  182     tnz a 
      001EC8 27 0B            [ 1]  183     jreq 2$
      001ECA A1 09            [ 1]  184 	cp a,#9 
      001ECC 23 02            [ 2]  185 	jrule 1$
      001ECE A6 39            [ 1]  186 	ld a,#'9
      001ED0                        187 1$:
      001ED0 AB 30            [ 1]  188 	add a,#'0 
      001ED2 CD 02 B2         [ 4]  189 	call putc
      001ED5 9E               [ 1]  190 2$:	ld a,xh 
      001ED6 AB 30            [ 1]  191 	add a,#'0
      001ED8 CD 02 B2         [ 4]  192 	call putc 
      001EDB 85               [ 2]  193 	popw x 
      001EDC 81               [ 4]  194 	ret 
                                    195 
                                    196 ;--------------------------
                                    197 ; move cursor left n character
                                    198 ; ANSI: ESC[PnD 
                                    199 ; 'Pn' est a numerical parameter
                                    200 ; specifying number of characters 
                                    201 ; displacement.
                                    202 ; input:
                                    203 ;   A     character count
                                    204 ; output:
                                    205 ;   none
                                    206 ;--------------------------
      001EDD                        207 move_left:
      001EDD 88               [ 1]  208 	push a 
      001EDE CD 1E B4         [ 4]  209 	call send_escape
      001EE1 84               [ 1]  210     pop a
      001EE2 CD 1E BF         [ 4]  211 	call send_parameter 
      001EE5 A6 44            [ 1]  212 	ld a,#'D 
      001EE7 CD 02 B2         [ 4]  213 	call putc 
      001EEA 81               [ 4]  214 	ret	
                                    215 
                                    216 
                                    217 ;--------------------------
                                    218 ; move cursor right n character 
                                    219 ; ANSI: ESC[PnC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                    220 ; input:
                                    221 ;   A     character count
                                    222 ; output:
                                    223 ;   none
                                    224 ;--------------------------
      001EEB                        225 move_right:
      001EEB 88               [ 1]  226 	push a 
      001EEC CD 1E B4         [ 4]  227 	call send_escape
      001EEF 84               [ 1]  228     pop a
      001EF0 CD 1E BF         [ 4]  229 	call send_parameter 
      001EF3 A6 43            [ 1]  230 	ld a,#'C 
      001EF5 CD 02 B2         [ 4]  231 	call putc 
      001EF8 81               [ 4]  232 	ret 
                                    233 
                                    234 
                                    235 ;--------------------------
                                    236 ; print n spaces on terminal
                                    237 ; input:
                                    238 ;  X 		number of spaces 
                                    239 ; output:
                                    240 ;	none 
                                    241 ;---------------------------
      001EF9                        242 spaces::
      001EF9 A6 20            [ 1]  243 	ld a,#SPACE 
      001EFB 5D               [ 2]  244 1$:	tnzw x
      001EFC 27 06            [ 1]  245 	jreq 9$
      001EFE CD 02 B2         [ 4]  246 	call putc 
      001F01 5A               [ 2]  247 	decw x
      001F02 20 F7            [ 2]  248 	jra 1$
      001F04                        249 9$: 
      001F04 81               [ 4]  250 	ret 
                                    251 
                                    252 ;--------------------------
                                    253 ; insert character in text 
                                    254 ; line 
                                    255 ; input:
                                    256 ;   A       character to insert 
                                    257 ;   xl      line length
                                    258 ;   xh      insert position 
                                    259 ;   Y       line pointer 
                                    260 ; output:
                                    261 ;   Y       updated Y 
                                    262 ;-------------------------
                           000001   263 	IPOS=1
                           000002   264 	KCHAR=2 
                           000003   265     LLEN=3 
                           000003   266 	VSISE=3 
      001F05                        267 insert_char: 
      001F05                        268 	_vars VSIZE 
      001F05 52 06            [ 2]    1     sub sp,#VSIZE 
      001F07 6B 02            [ 1]  269     ld (KCHAR,sp),a 
      001F09 9E               [ 1]  270     ld a,xh 
      001F0A 6B 01            [ 1]  271 	ld (IPOS,sp),a
      001F0C 9F               [ 1]  272     ld a,xl 
      001F0D 6B 03            [ 1]  273     ld (LLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001F0F 93               [ 1]  274     ldw x,y
      001F10 5C               [ 1]  275     incw x 
      001F11 7B 03            [ 1]  276     ld a,(LLEN,sp)
      001F13 10 01            [ 1]  277     sub a,(IPOS,sp)
      001F15 4C               [ 1]  278     inc a 
      001F16 C7 00 0D         [ 1]  279     ld acc8,a 
      001F19 72 5F 00 0C      [ 1]  280     clr acc16
      001F1D CD 03 B6         [ 4]  281     call move
      001F20 90 AE 16 90      [ 2]  282     ldw y,#tib 
      001F24 7B 01            [ 1]  283     ld a,(IPOS,sp)
      001F26 C7 00 0D         [ 1]  284     ld acc8,a 
      001F29 72 B9 00 0C      [ 2]  285     addw y,acc16 
      001F2D 7B 02            [ 1]  286     ld a,(KCHAR,sp)
      001F2F 90 F7            [ 1]  287     ld (y),a
      001F31 90 5C            [ 1]  288     incw y  
      001F33 7B 01            [ 1]  289     ld a,(IPOS,sp)
      001F35 CD 1E DD         [ 4]  290     call move_left
      001F38 AE 16 90         [ 2]  291     ldw x,#tib 
      001F3B CD 1E 8C         [ 4]  292     call puts 
      001F3E 7B 03            [ 1]  293     ld a,(LLEN,sp)
      001F40 10 01            [ 1]  294     sub a,(IPOS,sp) 
      001F42 CD 1E DD         [ 4]  295     call move_left 
      001F45                        296 	_drop VSIZE 
      001F45 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F47 81               [ 4]  297 	ret 
                                    298 
                                    299 
                                    300 ;--------------------------
                                    301 ; delete character under cursor
                                    302 ; input:
                                    303 ;   A       line length   
                                    304 ;   xl      delete position
                                    305 ;   Y       line pointer 
                                    306 ;-------------------------
                           000001   307 	CPOS=1
                           000002   308 	LLEN=2
                           000002   309 	VSIZE=2
      001F48                        310 delete_under:
      001F48                        311 	_vars VSIZE 
      001F48 52 02            [ 2]    1     sub sp,#VSIZE 
      001F4A 6B 02            [ 1]  312     ld (LLEN,sp),a 
      001F4C 9F               [ 1]  313     ld a,xl 
      001F4D 6B 01            [ 1]  314     ld (CPOS,sp),a 
      001F4F 93               [ 1]  315     ldw x,y ; move destination
      001F50 90 5C            [ 1]  316     incw y  ; move source 
      001F52 7B 02            [ 1]  317     ld a,(LLEN,sp)
      001F54 10 01            [ 1]  318     sub a,(CPOS,sp)
      001F56 4C               [ 1]  319     inc a ; move including zero at end.
      001F57 C7 00 0D         [ 1]  320     ld acc8,a 
      001F5A 72 5F 00 0C      [ 1]  321     clr acc16 
      001F5E CD 03 B6         [ 4]  322 	call move 
      001F61 90 AE 16 90      [ 2]  323     ldw y,#tib 
      001F65 7B 01            [ 1]  324     ld a,(CPOS,sp)
      001F67 C7 00 0D         [ 1]  325     ld acc8,a 
      001F6A 72 B9 00 0C      [ 2]  326     addw y,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001F6E 93               [ 1]  327     ldw x,y 
      001F6F CD 1E 8C         [ 4]  328     call puts 
      001F72 A6 20            [ 1]  329     ld a,#SPACE  
      001F74 CD 02 B2         [ 4]  330     call putc
      001F77 7B 02            [ 1]  331     ld a,(LLEN,sp)
      001F79 10 01            [ 1]  332     sub a,(CPOS,sp)
      001F7B CD 1E DD         [ 4]  333     call move_left 
      001F7E 0A 02            [ 1]  334     dec (LLEN,sp)
      001F80                        335 	_drop VSIZE 
      001F80 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F82 81               [ 4]  336 	ret 
                                    337 
                                    338 ;-----------------------------
                                    339 ; send ANSI sequence to delete
                                    340 ; whole line. Cursor position
                                    341 ; is not updated.
                                    342 ; ANSI: ESC[2K
                                    343 ; input:
                                    344 ;   none
                                    345 ; output:
                                    346 ;   none 
                                    347 ;-----------------------------
      001F83                        348 delete_line:
      001F83 CD 1E B4         [ 4]  349     call send_escape
      001F86 A6 32            [ 1]  350 	ld a,#'2
      001F88 CD 02 B2         [ 4]  351 	call putc 
      001F8B A6 4B            [ 1]  352 	ld a,#'K 
      001F8D CD 02 B2         [ 4]  353 	call putc 
      001F90 81               [ 4]  354 	ret 
                                    355 
                                    356 
                                    357 
                                    358 ;------------------------------------
                                    359 ; read a line of text from terminal
                                    360 ;  touches de contrôle
                                    361 ;    BS   efface caractère à gauche 
                                    362 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    363 ;    CTRL_R  répète dernière ligne saisie
                                    364 ;    CTRL_D  supprime ligne 
                                    365 ;    HOME  va au début de la ligne 
                                    366 ;    KEY_END  va à la fin de la ligne 
                                    367 ;    ARROW_LEFT  un caractère vers la gauche 
                                    368 ;    ARROW_RIGHT  un caractère vers la droite 
                                    369 ;    CTRL_O  commute entre insert/overwrite
                                    370 ; input:
                                    371 ;	none
                                    372 ; local variable on stack:
                                    373 ;	LL  line length
                                    374 ;   RXCHAR last received character 
                                    375 ; output:
                                    376 ;   text in tib  buffer
                                    377 ;   count  line length 
                                    378 ;------------------------------------
                                    379 	; local variables
                           000001   380 	LL_HB=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           000001   381 	RXCHAR = 1 ; last char received
                           000002   382 	LL = 2  ; accepted line length
                           000003   383 	CPOS=3  ; cursor position 
                           000004   384 	OVRWR=4 ; overwrite flag 
                           000004   385 	VSIZE=4 
      001F91                        386 readln::
      001F91                        387 	_vars VSIZE 
      001F91 52 04            [ 2]    1     sub sp,#VSIZE 
      001F93 5F               [ 1]  388 	clrw x 
      001F94 1F 02            [ 2]  389 	ldw (LL,sp),x 
      001F96 1F 03            [ 2]  390 	ldw (CPOS,sp),x 
      001F98 03 04            [ 1]  391 	cpl (OVRWR,sp) ; default to overwrite mode 
      001F9A 90 AE 16 90      [ 2]  392  	ldw y,#tib ; input buffer
      001F9E                        393 readln_loop:
      001F9E CD 02 C2         [ 4]  394 	call getc
      001FA1 6B 01            [ 1]  395 	ld (RXCHAR,sp),a
      001FA3 A1 1B            [ 1]  396     cp a,#ESC 
      001FA5 26 05            [ 1]  397     jrne 0$
      001FA7 CD 1E 66         [ 4]  398     call get_escape 
      001FAA 6B 01            [ 1]  399     ld (RXCHAR,sp),a 
      001FAC A1 0D            [ 1]  400 0$:	cp a,#CR
      001FAE 26 03            [ 1]  401 	jrne 1$
      001FB0 CC 21 3A         [ 2]  402 	jp readln_quit
      001FB3 A1 0A            [ 1]  403 1$:	cp a,#LF 
      001FB5 26 03            [ 1]  404 	jrne 2$ 
      001FB7 CC 21 3A         [ 2]  405 	jp readln_quit
      001FBA                        406 2$:
      001FBA A1 08            [ 1]  407 	cp a,#BS
      001FBC 26 12            [ 1]  408 	jrne 3$
                                    409 ; delete left 
      001FBE 0D 03            [ 1]  410     tnz (CPOS,sp)
      001FC0 27 DC            [ 1]  411     jreq readln_loop 
      001FC2 A6 01            [ 1]  412     ld a,#1 
      001FC4 CD 1E DD         [ 4]  413     call move_left
      001FC7 0A 03            [ 1]  414     dec (CPOS,sp)
      001FC9 90 5A            [ 2]  415     decw y 
      001FCB 7B 03            [ 1]  416     ld a,(CPOS,sp) 
      001FCD CC 20 E6         [ 2]  417     jp 12$
      001FD0                        418 3$:
      001FD0 A1 04            [ 1]  419 	cp a,#CTRL_D
      001FD2 26 1A            [ 1]  420 	jrne 4$
                                    421 ;delete line 
      001FD4 CD 1F 83         [ 4]  422 	call delete_line 
      001FD7 7B 03            [ 1]  423     ld a,(CPOS,sp)
      001FD9 4C               [ 1]  424     inc a 
      001FDA CD 1E DD         [ 4]  425     call move_left 
      001FDD A6 3E            [ 1]  426 	ld a,#'> 
      001FDF CD 02 B2         [ 4]  427 	call putc 
      001FE2 90 AE 16 90      [ 2]  428 	ldw y,#tib
      001FE6 90 7F            [ 1]  429 	clr (y)
      001FE8 0F 02            [ 1]  430 	clr (LL,sp)
      001FEA 0F 03            [ 1]  431 	clr (CPOS,sp)
      001FEC 20 B0            [ 2]  432 	jra readln_loop
      001FEE                        433 4$:
      001FEE A1 12            [ 1]  434 	cp a,#CTRL_R 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001FF0 26 21            [ 1]  435 	jrne 5$
                                    436 ;reprint 
      001FF2 0D 02            [ 1]  437 	tnz (LL,sp)
      001FF4 26 A8            [ 1]  438 	jrne readln_loop
      001FF6 AE 16 90         [ 2]  439 	ldw x,#tib 
      001FF9 CD 03 8C         [ 4]  440 	call strlen 
      001FFC 90 AE 16 90      [ 2]  441 	ldw y,#tib 
      002000 27 9C            [ 1]  442 	jreq readln_loop
      002002 6B 02            [ 1]  443 	ld (LL,sp),a 
      002004 6B 03            [ 1]  444     ld (CPOS,sp),a
      002006 AE 16 90         [ 2]  445 	ldw x,#tib 
      002009 CD 1E 8C         [ 4]  446 	call puts
      00200C 0F 01            [ 1]  447 	clr (LL_HB,sp)
      00200E 72 F9 01         [ 2]  448 	addw y,(LL_HB,sp)
      002011 20 8B            [ 2]  449 	jra readln_loop 
      002013                        450 5$:
      002013 A1 05            [ 1]  451 	cp a,#CTRL_E 
      002015 26 49            [ 1]  452 	jrne 6$
                                    453 ;edit line number 
      002017 AE 16 90         [ 2]  454 	ldw x,#tib 
      00201A CD 09 88         [ 4]  455 	call atoi24
      00201D CE 00 0C         [ 2]  456 	ldw x,acc16
      002020 CD 21 74         [ 4]  457 	call search_lineno
      002023 5D               [ 2]  458 	tnzw x 
      002024 26 0B            [ 1]  459 	jrne 51$
      002026 0F 02            [ 1]  460 	clr (LL,sp)
      002028 90 AE 16 90      [ 2]  461 	ldw y,#tib
      00202C 90 7F            [ 1]  462     clr (y) 	
      00202E CC 21 3A         [ 2]  463 	jp readln_quit  
      002031                        464 51$:
      002031 CF 00 04         [ 2]  465 	ldw basicptr,x
      002034 E6 02            [ 1]  466 	ld a,(2,x)
      002036 C7 00 03         [ 1]  467 	ld count,a 
      002039 90 AE 16 90      [ 2]  468 	ldw y,#tib 
      00203D CD 26 85         [ 4]  469 	call decompile 
      002040 0F 01            [ 1]  470 	clr (LL_HB,sp)
      002042 A6 0D            [ 1]  471 	ld a,#CR 
      002044 CD 02 B2         [ 4]  472 	call putc 
      002047 A6 3E            [ 1]  473 	ld a,#'>
      002049 CD 02 B2         [ 4]  474 	call putc
      00204C AE 16 90         [ 2]  475     ldw x,#tib  
      00204F CD 03 8C         [ 4]  476 	call strlen 
      002052 6B 02            [ 1]  477 	ld (LL,sp),a 
      002054 CD 1E 8C         [ 4]  478 	call puts 
      002057 90 93            [ 1]  479 	ldw y,x
      002059 7B 02            [ 1]  480     ld a,(LL,sp)
      00205B 6B 03            [ 1]  481     ld (CPOS,sp),a  
      00205D CC 1F 9E         [ 2]  482 	jp readln_loop
      002060                        483 6$:
      002060 A1 81            [ 1]  484 	cp a,#ARROW_RIGHT
      002062 26 15            [ 1]  485    	jrne 7$ 
                                    486 ; right arrow
      002064 7B 03            [ 1]  487 	ld a,(CPOS,sp)
      002066 11 02            [ 1]  488     cp a,(LL,sp)
      002068 2B 03            [ 1]  489     jrmi 61$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00206A CC 1F 9E         [ 2]  490     jp readln_loop 
      00206D                        491 61$:
      00206D A6 01            [ 1]  492     ld a,#1 
      00206F CD 1E EB         [ 4]  493 	call move_right 
      002072 0C 03            [ 1]  494 	inc (CPOS,sp)
      002074 90 5C            [ 1]  495     incw y 
      002076 CC 1F 9E         [ 2]  496     jp readln_loop 
      002079 A1 80            [ 1]  497 7$: cp a,#ARROW_LEFT  
      00207B 26 13            [ 1]  498 	jrne 8$
                                    499 ; left arrow 
      00207D 0D 03            [ 1]  500 	tnz (CPOS,sp)
      00207F 26 03            [ 1]  501 	jrne 71$
      002081 CC 1F 9E         [ 2]  502 	jp readln_loop
      002084                        503 71$:
      002084 A6 01            [ 1]  504     ld a,#1 
      002086 CD 1E DD         [ 4]  505 	call move_left 
      002089 0A 03            [ 1]  506 	dec (CPOS,sp)
      00208B 90 5A            [ 2]  507     decw y 
      00208D CC 1F 9E         [ 2]  508 	jp readln_loop 
      002090 A1 82            [ 1]  509 8$: cp a,#HOME  
      002092 26 0E            [ 1]  510 	jrne 9$
                                    511 ; HOME 
      002094 7B 03            [ 1]  512     ld a,(CPOS,sp)
      002096 CD 1E DD         [ 4]  513     call move_left 
      002099 0F 03            [ 1]  514 	clr (CPOS,sp)
      00209B 90 AE 16 90      [ 2]  515     ldw y,#tib 
      00209F CC 1F 9E         [ 2]  516 	jp readln_loop  
      0020A2 A1 83            [ 1]  517 9$: cp a,#KEY_END  
      0020A4 26 26            [ 1]  518 	jrne 10$
                                    519 ; KEY_END 
      0020A6 7B 03            [ 1]  520 	ld a,(CPOS,sp)
      0020A8 11 02            [ 1]  521 	cp a,(LL,sp)
      0020AA 26 03            [ 1]  522 	jrne 91$
      0020AC CC 1F 9E         [ 2]  523 	jp readln_loop 
      0020AF                        524 91$:
      0020AF 7B 02            [ 1]  525 	ld a,(LL,sp)
      0020B1 10 03            [ 1]  526 	sub a,(CPOS,sp)
      0020B3 CD 1E EB         [ 4]  527 	call move_right 
      0020B6 7B 02            [ 1]  528 	ld a,(LL,sp)
      0020B8 6B 03            [ 1]  529 	ld (CPOS,sp),a
      0020BA 90 AE 16 90      [ 2]  530     ldw y,#tib
      0020BE 72 5F 00 0C      [ 1]  531     clr acc16 
      0020C2 C7 00 0D         [ 1]  532     ld acc8,a 
      0020C5 72 B9 00 0C      [ 2]  533     addw y,acc16  
      0020C9 CC 1F 9E         [ 2]  534 	jp readln_loop 
      0020CC A1 0F            [ 1]  535 10$: cp a,#CTRL_O
      0020CE 26 0C            [ 1]  536 	jrne 11$ 
                                    537 ; toggle between insert/overwrite
      0020D0 03 04            [ 1]  538 	cpl (OVRWR,sp)
      0020D2 90 89            [ 2]  539 	pushw y 
      0020D4 CD 12 20         [ 4]  540 	call beep_1khz
      0020D7 90 85            [ 2]  541 	popw y 
      0020D9 CC 1F 9E         [ 2]  542 	jp readln_loop 
      0020DC A1 84            [ 1]  543 11$: cp a,#SUP 
      0020DE 26 11            [ 1]  544     jrne final_test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    545 ; del character under cursor 
      0020E0 7B 03            [ 1]  546     ld a,(CPOS,sp)
      0020E2 11 02            [ 1]  547     cp a,(LL,sp)
      0020E4 2A 08            [ 1]  548     jrpl 13$
      0020E6                        549 12$:
      0020E6 97               [ 1]  550     ld xl,a    ; cursor position 
      0020E7 7B 02            [ 1]  551     ld a,(LL,sp)  ; line length
      0020E9 CD 1F 48         [ 4]  552     call delete_under
      0020EC 0A 02            [ 1]  553     dec (LLEN,sp)
      0020EE                        554 13$:
      0020EE CC 1F 9E         [ 2]  555     jp readln_loop 
      0020F1                        556 final_test:
      0020F1 A1 20            [ 1]  557 	cp a,#SPACE
      0020F3 2A 03            [ 1]  558 	jrpl accept_char
      0020F5 CC 1F 9E         [ 2]  559 	jp readln_loop
      0020F8                        560 accept_char:
      0020F8 A6 4F            [ 1]  561 	ld a,#TIB_SIZE-1
      0020FA 11 02            [ 1]  562 	cp a, (LL,sp)
      0020FC 2A 03            [ 1]  563 	jrpl 1$
      0020FE CC 1F 9E         [ 2]  564 	jp readln_loop
      002101 0D 04            [ 1]  565 1$:	tnz (OVRWR,sp)
      002103 26 18            [ 1]  566 	jrne overwrite
                                    567 ; insert mode 
      002105 7B 03            [ 1]  568     ld a,(CPOS,sp)
      002107 11 02            [ 1]  569     cp a,(LL,sp)
      002109 27 12            [ 1]  570     jreq overwrite
      00210B 7B 02            [ 1]  571     ld a,(LL,sp)
      00210D 97               [ 1]  572     ld xl,a 
      00210E 7B 03            [ 1]  573     ld a,(CPOS,sp)
      002110 95               [ 1]  574     ld xh,a
      002111 7B 01            [ 1]  575     ld a,(RXCHAR,sp)
      002113 CD 1F 05         [ 4]  576     call insert_char
      002116 0C 02            [ 1]  577     inc (LLEN,sp)
      002118 0C 03            [ 1]  578     inc (CPOS,sp)
      00211A CC 1F 9E         [ 2]  579     jp readln_loop 
      00211D                        580 overwrite:
      00211D 7B 01            [ 1]  581 	ld a,(RXCHAR,sp)
      00211F 90 F7            [ 1]  582 	ld (y),a
      002121 90 5C            [ 1]  583     incw y
      002123 CD 02 B2         [ 4]  584     call putc 
      002126 7B 03            [ 1]  585 	ld a,(CPOS,sp)
      002128 11 02            [ 1]  586 	cp a,(LL,sp)
      00212A 2B 09            [ 1]  587 	jrmi 1$
      00212C 90 7F            [ 1]  588 	clr (y)
      00212E 0C 02            [ 1]  589 	inc (LL,sp)
      002130 0C 03            [ 1]  590     inc (CPOS,sp)
      002132 CC 1F 9E         [ 2]  591 	jp readln_loop 
      002135                        592 1$:	
      002135 0C 03            [ 1]  593 	inc (CPOS,sp)
      002137 CC 1F 9E         [ 2]  594 	jp readln_loop 
      00213A                        595 readln_quit:
      00213A 90 AE 16 90      [ 2]  596 	ldw y,#tib
      00213E 0F 01            [ 1]  597     clr (LL_HB,sp) 
      002140 72 F9 01         [ 2]  598     addw y,(LL_HB,sp)
      002143 90 7F            [ 1]  599     clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002145 7B 02            [ 1]  600 	ld a,(LL,sp)
      002147 C7 00 03         [ 1]  601 	ld count,a 
      00214A A6 0D            [ 1]  602 	ld a,#CR
      00214C CD 02 B2         [ 4]  603 	call putc
      00214F                        604 	_drop VSIZE 
      00214F 5B 04            [ 2]    1     addw sp,#VSIZE 
      002151 81               [ 4]  605 	ret
                                    606 
                                    607 ;------------------------------
                                    608 ; print byte  in hexadecimal 
                                    609 ; on console
                                    610 ; input:
                                    611 ;    A		byte to print
                                    612 ;------------------------------
      002152                        613 print_hex::
      002152 88               [ 1]  614 	push a 
      002153 4E               [ 1]  615 	swap a 
      002154 CD 21 69         [ 4]  616 	call to_hex_char 
      002157 CD 02 B2         [ 4]  617 	call putc 
      00215A 7B 01            [ 1]  618     ld a,(1,sp) 
      00215C CD 21 69         [ 4]  619 	call to_hex_char
      00215F CD 02 B2         [ 4]  620 	call putc
      002162 A6 20            [ 1]  621 	ld a,#SPACE 
      002164 CD 02 B2         [ 4]  622 	call putc 
      002167 84               [ 1]  623 	pop a 
      002168 81               [ 4]  624 	ret 
                                    625 
                                    626 ;----------------------------------
                                    627 ; convert to hexadecimal digit 
                                    628 ; input:
                                    629 ;   A       digit to convert 
                                    630 ; output:
                                    631 ;   A       hexdecimal character 
                                    632 ;----------------------------------
      002169                        633 to_hex_char::
      002169 A4 0F            [ 1]  634 	and a,#15 
      00216B A1 09            [ 1]  635 	cp a,#9 
      00216D 23 02            [ 2]  636 	jrule 1$ 
      00216F AB 07            [ 1]  637 	add a,#7
      002171 AB 30            [ 1]  638 1$: add a,#'0 
      002173 81               [ 4]  639 	ret 
                                    640 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
                                     26 ;    .nlist
                                     27 ;	.include "inc/nucleo_8s208.inc"
                                     28 ;	.include "inc/stm8s208.inc"
                                     29 ;	.include "inc/ascii.inc"
                                     30 ;	.include "inc/gen_macros.inc" 
                                     31 ;	.include "tbi_macros.inc" 
                                     32 ;	.include "cmd_index.inc"
                                     33     .list 
                                     34 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      002174                         51 search_lineno::
      002174                         52 	_vars VSIZE
      002174 52 02            [ 2]    1     sub sp,#VSIZE 
      002176 0F 01            [ 1]   53 	clr (LL,sp)
      002178 90 CE 00 19      [ 2]   54 	ldw y,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      00217C 4D               [ 1]   55 	tnz a 
      00217D 27 04            [ 1]   56 	jreq search_ln_loop
      00217F 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      002183                         58 search_ln_loop:
      002183 90 C3 00 1B      [ 2]   59 	cpw y,txtend 
      002187 2A 10            [ 1]   60 	jrpl 8$
      002189 90 F3            [ 1]   61 	cpw x,(y)
      00218B 27 0E            [ 1]   62 	jreq 9$
      00218D 2B 0A            [ 1]   63 	jrmi 8$ 
      00218F 90 E6 02         [ 1]   64 	ld a,(2,y)
      002192 6B 02            [ 1]   65 	ld (LB,sp),a 
      002194 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      002197 20 EA            [ 2]   67 	jra search_ln_loop 
      002199                         68 8$: 
      002199 5F               [ 1]   69 	clrw x 	
      00219A 51               [ 1]   70 	exgw x,y 
      00219B                         71 9$: _drop VSIZE
      00219B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00219D 51               [ 1]   72 	exgw x,y   
      00219E 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      00219F                         83 del_line: 
      00219F                         84 	_vars VSIZE 
      00219F 52 04            [ 2]    1     sub sp,#VSIZE 
      0021A1 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      0021A3 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      0021A5 0F 01            [ 1]   87 	clr (LLEN,sp)
      0021A7 90 93            [ 1]   88 	ldw y,x  
      0021A9 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      0021AC 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      0021AE 90 CE 00 1B      [ 2]   91 	ldw y,txtend 
      0021B2 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      0021B5 90 CF 00 0C      [ 2]   93 	ldw acc16,y 
      0021B9 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      0021BB CD 03 B6         [ 4]   95 	call move
      0021BE 90 CE 00 1B      [ 2]   96 	ldw y,txtend 
      0021C2 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      0021C5 90 CF 00 1B      [ 2]   98 	ldw txtend,y  
      0021C9                         99 	_drop VSIZE     
      0021C9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021CB 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      0021CC                        115 create_gap:
      0021CC                        116 	_vars VSIZE
      0021CC 52 06            [ 2]    1     sub sp,#VSIZE 
      0021CE 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      0021D0 17 05            [ 2]  118 	ldw (LEN,sp),y 
      0021D2 90 CF 00 0C      [ 2]  119 	ldw acc16,y 
      0021D6 90 93            [ 1]  120 	ldw y,x ; SRC
      0021D8 72 BB 00 0C      [ 2]  121 	addw x,acc16  
      0021DC 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      0021DE CE 00 1B         [ 2]  124 	ldw x,txtend 
      0021E1 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      0021E4 CF 00 0C         [ 2]  126 	ldw acc16,x ; size to move
      0021E7 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      0021E9 CD 03 B6         [ 4]  128 	call move
      0021EC CE 00 1B         [ 2]  129 	ldw x,txtend
      0021EF 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      0021F2 CF 00 1B         [ 2]  131 	ldw txtend,x
      0021F5                        132 9$:	_drop VSIZE 
      0021F5 5B 06            [ 2]    1     addw sp,#VSIZE 
      0021F7 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      0021F8                        150 insert_line:
      0021F8                        151 	_vars VSIZE 
      0021F8 52 08            [ 2]    1     sub sp,#VSIZE 
      0021FA CE 00 1B         [ 2]  152 	ldw x,txtend  
      0021FD C3 00 19         [ 2]  153 	cpw x,txtbgn 
      002200 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      002202 AE 00 02         [ 2]  156 	ldw x,#2 
      002205 72 D6 00 17      [ 4]  157 	ld a,([ptr16],x)
      002209 A1 03            [ 1]  158 	cp a,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      00220B 27 5A            [ 1]  159 	jreq insert_ln_exit
      00220D 5F               [ 1]  160 	clrw x 
      00220E 97               [ 1]  161 	ld xl,a
      00220F 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      002211 CE 00 19         [ 2]  163 	ldw x,txtbgn
      002214 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      002216 CE 00 1B         [ 2]  165 	ldw x,txtend 
      002219 20 38            [ 2]  166 	jra 4$
      00221B 72 CE 00 17      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      00221F 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      002221 AE 00 02         [ 2]  170 	ldw x,#2 
      002224 72 D6 00 17      [ 4]  171 	ld a,([ptr16],x)
      002228 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      002229 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      00222B 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      00222D 4F               [ 1]  177 	clr a 
      00222E CD 21 74         [ 4]  178 	call search_lineno 
      002231 5D               [ 2]  179 	tnzw x 
      002232 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      002234 17 01            [ 2]  183 	ldw (DEST,sp),y 
      002236 20 05            [ 2]  184 	jra 3$
                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      002238 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      00223A CD 21 9F         [ 4]  188 	call del_line
      00223D                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      00223D A6 03            [ 1]  192 	ld a,#3
      00223F 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      002241 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      002243 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      002245 C3 00 1B         [ 2]  198 	cpw x,txtend 
      002248 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      00224A 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      00224C 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      00224E CD 21 CC         [ 4]  204 	call create_gap
      002251 20 06            [ 2]  205 	jra 5$
      002253                        206 4$: 
      002253 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      002256 CF 00 1B         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      002259 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      00225B CF 00 0C         [ 2]  211 	ldw acc16,x 
      00225E 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      002262 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002264 CD 03 B6         [ 4]  214 	call move 
      002267                        215 insert_ln_exit:	
      002267                        216 	_drop VSIZE
      002267 5B 08            [ 2]    1     addw sp,#VSIZE 
      002269 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      00226A                        233 parse_quote: 
      00226A                        234 	_vars VSIZE 
      00226A 52 02            [ 2]    1     sub sp,#VSIZE 
      00226C 4F               [ 1]  235 	clr a
      00226D 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      00226F                        237 2$:	
      00226F 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      002272 27 24            [ 1]  239 	jreq 6$
      002274 72 5C 00 01      [ 1]  240 	inc in 
      002278 6B 02            [ 1]  241 	ld (CURR,sp),a 
      00227A A6 5C            [ 1]  242 	ld a,#'\
      00227C 11 01            [ 1]  243 	cp a, (PREV,sp)
      00227E 26 0A            [ 1]  244 	jrne 3$
      002280 0F 01            [ 1]  245 	clr (PREV,sp)
      002282 7B 02            [ 1]  246 	ld a,(CURR,sp)
      002284 AD 1C            [ 4]  247 	callr convert_escape
      002286 F7               [ 1]  248 	ld (x),a 
      002287 5C               [ 1]  249 	incw x 
      002288 20 E5            [ 2]  250 	jra 2$
      00228A                        251 3$:
      00228A 7B 02            [ 1]  252 	ld a,(CURR,sp)
      00228C A1 5C            [ 1]  253 	cp a,#'\'
      00228E 27 DD            [ 1]  254 	jreq 1$
      002290 A1 22            [ 1]  255 	cp a,#'"
      002292 27 04            [ 1]  256 	jreq 6$ 
      002294 F7               [ 1]  257 	ld (x),a 
      002295 5C               [ 1]  258 	incw x 
      002296 20 D7            [ 2]  259 	jra 2$
      002298                        260 6$:
      002298 7F               [ 1]  261 	clr (x)
      002299 5C               [ 1]  262 	incw x 
      00229A 90 93            [ 1]  263 	ldw y,x 
      00229C 5F               [ 1]  264 	clrw x 
      00229D A6 02            [ 1]  265 	ld a,#TK_QSTR  
      00229F                        266 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00229F 5B 02            [ 2]    1     addw sp,#VSIZE 
      0022A1 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      0022A2                        278 convert_escape:
      0022A2 89               [ 2]  279 	pushw x 
      0022A3 AE 22 B7         [ 2]  280 	ldw x,#escaped 
      0022A6 F1               [ 1]  281 1$:	cp a,(x)
      0022A7 27 06            [ 1]  282 	jreq 2$
      0022A9 7D               [ 1]  283 	tnz (x)
      0022AA 27 09            [ 1]  284 	jreq 3$
      0022AC 5C               [ 1]  285 	incw x 
      0022AD 20 F7            [ 2]  286 	jra 1$
      0022AF 1D 22 B7         [ 2]  287 2$: subw x,#escaped 
      0022B2 9F               [ 1]  288 	ld a,xl 
      0022B3 AB 07            [ 1]  289 	add a,#7
      0022B5 85               [ 2]  290 3$:	popw x 
      0022B6 81               [ 4]  291 	ret 
                                    292 
      0022B7 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      0022BF                        310 parse_integer: ; { -- n }
      0022BF 89               [ 2]  311 	pushw x 	
      0022C0 4B 00            [ 1]  312 	push #0 ; TCHAR
      0022C2 4B 0A            [ 1]  313 	push #10 ; BASE=10
      0022C4 A1 24            [ 1]  314 	cp a,#'$
      0022C6 26 04            [ 1]  315 	jrne 2$ 
      0022C8                        316     _drop #1
      0022C8 5B 01            [ 2]    1     addw sp,##1 
      0022CA 4B 10            [ 1]  317 	push #16  ; BASE=16
      0022CC F7               [ 1]  318 2$:	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0022CD 5C               [ 1]  319 	incw x 
      0022CE 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      0022D1 72 5C 00 01      [ 1]  321 	inc in 
      0022D5 CD 09 7C         [ 4]  322 	call to_upper 
      0022D8 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      0022DA CD 04 17         [ 4]  324 	call is_digit 
      0022DD 25 ED            [ 1]  325 	jrc 2$
      0022DF A6 10            [ 1]  326 	ld a,#16 
      0022E1 11 01            [ 1]  327 	cp a,(BASE,sp)
      0022E3 26 0A            [ 1]  328 	jrne 3$ 
      0022E5 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      0022E7 A1 41            [ 1]  330 	cp a,#'A 
      0022E9 2B 04            [ 1]  331 	jrmi 3$ 
      0022EB A1 47            [ 1]  332 	cp a,#'G 
      0022ED 2B DD            [ 1]  333 	jrmi 2$ 
      0022EF 72 5A 00 01      [ 1]  334 3$: dec in 	
      0022F3 7F               [ 1]  335     clr (x)
      0022F4 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      0022F6 CD 09 88         [ 4]  337 	call atoi24
      0022F9 90 93            [ 1]  338 	ldw y,x 
      0022FB CE 00 0C         [ 2]  339 	ldw x,acc16 
      0022FE A6 84            [ 1]  340 	ld a,#TK_INTGR
      002300 90 FF            [ 2]  341 	ldw (y),x 
      002302 72 A9 00 02      [ 2]  342 	addw y,#2
      002306                        343 	_drop VSIZE  
      002306 5B 04            [ 2]    1     addw sp,#VSIZE 
      002308 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      002309                        361 parse_binary: ; { -- n }
      002309 4B 00            [ 1]  362 	push #0
      00230B 4B 00            [ 1]  363 	push #0
      00230D 4B 00            [ 1]  364 	push #0
      00230F                        365 2$:	
      00230F 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      002312 72 5C 00 01      [ 1]  367 	inc in 
      002316 A1 30            [ 1]  368 	cp a,#'0 
      002318 27 06            [ 1]  369 	jreq 3$
      00231A A1 31            [ 1]  370 	cp a,#'1 
      00231C 27 02            [ 1]  371 	jreq 3$ 
      00231E 20 0B            [ 2]  372 	jra bin_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002320 A0 30            [ 1]  373 3$: sub a,#'0 
      002322 46               [ 1]  374 	rrc a
      002323 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      002325 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      002327 09 01            [ 1]  377 	rlc (BINARY,sp) 
      002329 20 E4            [ 2]  378 	jra 2$  
      00232B                        379 bin_exit:
      00232B 72 5A 00 01      [ 1]  380 	dec in 
      00232F 90 93            [ 1]  381 	ldw y,x
      002331 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      002333 C7 00 0B         [ 1]  383 	ld acc24,a 
      002336 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      002338 CF 00 0C         [ 2]  385 	ldw acc16,x
      00233B 90 FF            [ 2]  386 	ldw (y),x 
      00233D 72 A9 00 02      [ 2]  387 	addw y,#2  
      002341 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      002343                        389 	_drop VSIZE 
      002343 5B 03            [ 2]    1     addw sp,#VSIZE 
      002345 81               [ 4]  390 	ret
                                    391 
                                    392 ;---------------------------
                                    393 ;  token begin with a letter,
                                    394 ;  is keyword or variable. 	
                                    395 ; input:
                                    396 ;   X 		point to pad 
                                    397 ;   Y 		point to text
                                    398 ;   A 	    first letter  
                                    399 ; output:
                                    400 ;   X		exec_addr|var_addr 
                                    401 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    402 ;   pad 	keyword|var_name  
                                    403 ;--------------------------  
                           000001   404 	XFIRST=1
                           000002   405 	VSIZE=2
      002346                        406 parse_keyword: 
      002346 89               [ 2]  407 	pushw x 
      002347                        408 kw_loop:	
      002347 CD 09 7C         [ 4]  409 	call to_upper 
      00234A F7               [ 1]  410 	ld (x),a 
      00234B 5C               [ 1]  411 	incw x 
      00234C 91 D6 00         [ 4]  412 	ld a,([in.w],y)
      00234F 72 5C 00 01      [ 1]  413 	inc in 
      002353 CD 04 06         [ 4]  414 	call is_alpha 
      002356 25 EF            [ 1]  415 	jrc kw_loop
      002358 72 5A 00 01      [ 1]  416 	dec in   
      00235C 7F               [ 1]  417 1$: clr (x)
      00235D 1E 01            [ 2]  418 	ldw x,(XFIRST,sp) 
      00235F E6 01            [ 1]  419 	ld a,(1,x)
      002361 26 13            [ 1]  420 	jrne 2$
                                    421 ; one letter variable name 
      002363 F6               [ 1]  422 	ld a,(x) 
      002364 A0 41            [ 1]  423 	sub a,#'A 
      002366 48               [ 1]  424 	sll a 
      002367 88               [ 1]  425 	push a 
      002368 4B 00            [ 1]  426 	push #0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00236A AE 00 30         [ 2]  427 	ldw x,#vars 
      00236D 72 FB 01         [ 2]  428 	addw x,(1,sp) ; X=var address 
      002370                        429 	_drop 2 
      002370 5B 02            [ 2]    1     addw sp,#2 
      002372 A6 85            [ 1]  430 	ld a,#TK_VAR 
      002374 20 0E            [ 2]  431 	jra 4$ 
      002376                        432 2$: ; check for keyword, otherwise syntax error.
      002376                        433 	_ldx_dict kword_dict ; dictionary entry point
      002376 AE 1D 92         [ 2]    1     ldw x,#kword_dict+2
      002379 16 01            [ 2]  434 	ldw y,(XFIRST,sp) ; name to search for
      00237B CD 0B 6F         [ 4]  435 	call search_dict
      00237E 4D               [ 1]  436 	tnz a
      00237F 26 03            [ 1]  437 	jrne 4$ 
      002381 CC 07 26         [ 2]  438 	jp syntax_error
      002384                        439 4$:	
      002384 16 01            [ 2]  440 	ldw y,(XFIRST,sp)
      002386 A3 00 4C         [ 2]  441 	cpw x,#LET_IDX 
      002389 27 0A            [ 1]  442 	jreq 5$  ; don't compile LET command 
      00238B 90 F7            [ 1]  443 	ld (y),a 
      00238D 90 5C            [ 1]  444 	incw y 
      00238F 90 FF            [ 2]  445 	ldw (y),x
      002391 72 A9 00 02      [ 2]  446 	addw y,#2  
      002395                        447 5$:	_drop VSIZE 
      002395 5B 02            [ 2]    1     addw sp,#VSIZE 
      002397 81               [ 4]  448 	ret  	
                                    449 
                                    450 ;------------------------------------
                                    451 ; skip character c in text starting from 'in'
                                    452 ; input:
                                    453 ;	 y 		point to text buffer
                                    454 ;    a 		character to skip
                                    455 ; output:  
                                    456 ;	'in' ajusted to new position
                                    457 ;------------------------------------
                           000001   458 	C = 1 ; local var
      002398                        459 skip:
      002398 88               [ 1]  460 	push a
      002399 91 D6 00         [ 4]  461 1$:	ld a,([in.w],y)
      00239C 27 0A            [ 1]  462 	jreq 2$
      00239E 11 01            [ 1]  463 	cp a,(C,sp)
      0023A0 26 06            [ 1]  464 	jrne 2$
      0023A2 72 5C 00 01      [ 1]  465 	inc in
      0023A6 20 F1            [ 2]  466 	jra 1$
      0023A8                        467 2$: _drop 1 
      0023A8 5B 01            [ 2]    1     addw sp,#1 
      0023AA 81               [ 4]  468 	ret
                                    469 	
                                    470 
                                    471 ;------------------------------------
                                    472 ; scan text for next token
                                    473 ; input: 
                                    474 ;	X 		pointer to buffer where 
                                    475 ;	        token id and value are copied 
                                    476 ; use:
                                    477 ;	Y   pointer to text in tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    478 ; output:
                                    479 ;   A       token attribute 
                                    480 ;   X 		token value
                                    481 ;   Y       updated position in output buffer   
                                    482 ;------------------------------------
                                    483 	; use to check special character 
                                    484 	.macro _case c t  
                                    485 	ld a,#c 
                                    486 	cp a,(TCHAR,sp) 
                                    487 	jrne t
                                    488 	.endm 
                                    489 
                           000001   490 	TCHAR=1
                           000002   491 	ATTRIB=2
                           000002   492 	VSIZE=2
      0023AB                        493 get_token:: 
      0023AB                        494 	_vars VSIZE
      0023AB 52 02            [ 2]    1     sub sp,#VSIZE 
                                    495 ;	ld a,in 
                                    496 ;	sub a,count
                                    497 ;   jrmi 0$
                                    498 ;	clr a 
                                    499 ;	ret 
      0023AD                        500 0$: 
      0023AD 90 AE 16 90      [ 2]  501 	ldw y,#tib    	
      0023B1 A6 20            [ 1]  502 	ld a,#SPACE
      0023B3 CD 23 98         [ 4]  503 	call skip
      0023B6 55 00 01 00 02   [ 1]  504 	mov in.saved,in 
      0023BB 91 D6 00         [ 4]  505 	ld a,([in.w],y)
      0023BE 26 05            [ 1]  506 	jrne 1$
      0023C0 90 93            [ 1]  507 	ldw y,x 
      0023C2 CC 25 67         [ 2]  508 	jp token_exit ; end of line 
      0023C5 72 5C 00 01      [ 1]  509 1$:	inc in 
      0023C9 CD 09 7C         [ 4]  510 	call to_upper 
      0023CC 6B 01            [ 1]  511 	ld (TCHAR,sp),a 
                                    512 ; check for quoted string
      0023CE                        513 str_tst:  	
      0023CE                        514 	_case '"' nbr_tst
      0023CE A6 22            [ 1]    1 	ld a,#'"' 
      0023D0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0023D2 26 0A            [ 1]    3 	jrne nbr_tst
      0023D4 A6 02            [ 1]  515 	ld a,#TK_QSTR
      0023D6 F7               [ 1]  516 	ld (x),a 
      0023D7 5C               [ 1]  517 	incw x 
      0023D8 CD 22 6A         [ 4]  518 	call parse_quote
      0023DB CC 25 67         [ 2]  519 	jp token_exit
      0023DE                        520 nbr_tst:
                                    521 ; check for hexadecimal number 
      0023DE A6 24            [ 1]  522 	ld a,#'$'
      0023E0 11 01            [ 1]  523 	cp a,(TCHAR,sp) 
      0023E2 27 17            [ 1]  524 	jreq 1$
                                    525 ;check for binary number 
      0023E4 A6 26            [ 1]  526 	ld a,#'&
      0023E6 11 01            [ 1]  527 	cp a,(TCHAR,sp)
      0023E8 26 0A            [ 1]  528 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0023EA A6 84            [ 1]  529 	ld a,#TK_INTGR
      0023EC F7               [ 1]  530 	ld (x),a 
      0023ED 5C               [ 1]  531 	incw x 
      0023EE CD 23 09         [ 4]  532 	call parse_binary ; expect binary integer 
      0023F1 CC 25 67         [ 2]  533 	jp token_exit 
                                    534 ; check for decimal number 	
      0023F4 7B 01            [ 1]  535 0$:	ld a,(TCHAR,sp)
      0023F6 CD 04 17         [ 4]  536 	call is_digit
      0023F9 24 0C            [ 1]  537 	jrnc 3$
      0023FB A6 84            [ 1]  538 1$:	ld a,#TK_INTGR 
      0023FD F7               [ 1]  539 	ld (x),a 
      0023FE 5C               [ 1]  540 	incw x 
      0023FF 7B 01            [ 1]  541 	ld a,(TCHAR,sp)
      002401 CD 22 BF         [ 4]  542 	call parse_integer 
      002404 CC 25 67         [ 2]  543 	jp token_exit 
      002407                        544 3$: 
      002407                        545 	_case '(' bkslsh_tst 
      002407 A6 28            [ 1]    1 	ld a,#'(' 
      002409 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00240B 26 05            [ 1]    3 	jrne bkslsh_tst
      00240D A6 07            [ 1]  546 	ld a,#TK_LPAREN
      00240F CC 25 63         [ 2]  547 	jp token_char   	
      002412                        548 bkslsh_tst: ; character token 
      002412                        549 	_case '\',rparnt_tst
      002412 A6 5C            [ 1]    1 	ld a,#'\' 
      002414 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002416 26 16            [ 1]    3 	jrne rparnt_tst
      002418 A6 03            [ 1]  550 	ld a,#TK_CHAR 
      00241A F7               [ 1]  551 	ld (x),a 
      00241B 5C               [ 1]  552 	incw x 
      00241C 91 D6 00         [ 4]  553 	ld a,([in.w],y)
      00241F F7               [ 1]  554 	ld (x),a 
      002420 5C               [ 1]  555 	incw x
      002421 90 93            [ 1]  556 	ldw y,x 	 
      002423 72 5C 00 01      [ 1]  557 	inc in  
      002427 5F               [ 1]  558 	clrw x 
      002428 97               [ 1]  559 	ld xl,a 
      002429 A6 03            [ 1]  560 	ld a,#TK_CHAR 
      00242B CC 25 67         [ 2]  561 	jp token_exit 
      00242E                        562 rparnt_tst:		
      00242E                        563 	_case ')' colon_tst 
      00242E A6 29            [ 1]    1 	ld a,#')' 
      002430 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002432 26 05            [ 1]    3 	jrne colon_tst
      002434 A6 08            [ 1]  564 	ld a,#TK_RPAREN 
      002436 CC 25 63         [ 2]  565 	jp token_char
      002439                        566 colon_tst:
      002439                        567 	_case ':' comma_tst 
      002439 A6 3A            [ 1]    1 	ld a,#':' 
      00243B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00243D 26 05            [ 1]    3 	jrne comma_tst
      00243F A6 0B            [ 1]  568 	ld a,#TK_COLON 
      002441 CC 25 63         [ 2]  569 	jp token_char  
      002444                        570 comma_tst:
      002444                        571 	_case COMMA sharp_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      002444 A6 2C            [ 1]    1 	ld a,#COMMA 
      002446 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002448 26 05            [ 1]    3 	jrne sharp_tst
      00244A A6 09            [ 1]  572 	ld a,#TK_COMMA
      00244C CC 25 63         [ 2]  573 	jp token_char
      00244F                        574 sharp_tst:
      00244F                        575 	_case SHARP dash_tst 
      00244F A6 23            [ 1]    1 	ld a,#SHARP 
      002451 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002453 26 05            [ 1]    3 	jrne dash_tst
      002455 A6 0A            [ 1]  576 	ld a,#TK_SHARP
      002457 CC 25 63         [ 2]  577 	jp token_char  	 	 
      00245A                        578 dash_tst: 	
      00245A                        579 	_case '-' at_tst 
      00245A A6 2D            [ 1]    1 	ld a,#'-' 
      00245C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00245E 26 05            [ 1]    3 	jrne at_tst
      002460 A6 11            [ 1]  580 	ld a,#TK_MINUS  
      002462 CC 25 63         [ 2]  581 	jp token_char 
      002465                        582 at_tst:
      002465                        583 	_case '@' qmark_tst 
      002465 A6 40            [ 1]    1 	ld a,#'@' 
      002467 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002469 26 05            [ 1]    3 	jrne qmark_tst
      00246B A6 06            [ 1]  584 	ld a,#TK_ARRAY 
      00246D CC 25 63         [ 2]  585 	jp token_char
      002470                        586 qmark_tst:
      002470                        587 	_case '?' tick_tst 
      002470 A6 3F            [ 1]    1 	ld a,#'?' 
      002472 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002474 26 12            [ 1]    3 	jrne tick_tst
      002476 A6 80            [ 1]  588 	ld a,#TK_CMD  
      002478 F7               [ 1]  589 	ld (x),a 
      002479 5C               [ 1]  590 	incw x 
      00247A 90 93            [ 1]  591 	ldw y,x 
      00247C AE 00 6E         [ 2]  592 	ldw x,#PRT_IDX 
      00247F 90 FF            [ 2]  593 	ldw (y),x 
      002481 72 A9 00 02      [ 2]  594 	addw y,#2
      002485 CC 25 67         [ 2]  595 	jp token_exit
      002488                        596 tick_tst: ; comment 
      002488                        597 	_case TICK plus_tst 
      002488 A6 27            [ 1]    1 	ld a,#TICK 
      00248A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00248C 26 35            [ 1]    3 	jrne plus_tst
      00248E A6 80            [ 1]  598 	ld a,#TK_CMD
      002490 F7               [ 1]  599 	ld (x),a 
      002491 5C               [ 1]  600 	incw x
      002492 90 AE 00 88      [ 2]  601 	ldw y,#REM_IDX
      002496 FF               [ 2]  602 	ldw (x),y 
      002497 1C 00 02         [ 2]  603 	addw x,#2  
      00249A                        604 copy_comment:
      00249A 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      00249E 72 B9 00 00      [ 2]  606 	addw y,in.w
      0024A2 90 89            [ 2]  607 	pushw y
      0024A4 CD 03 A8         [ 4]  608 	call strcpy
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0024A7 72 F2 01         [ 2]  609     subw y,(1,sp)
      0024AA 90 9F            [ 1]  610 	ld a,yl 
      0024AC CB 00 01         [ 1]  611 	add a,in
      0024AF C7 00 01         [ 1]  612 	ld in,a 
      0024B2 1F 01            [ 2]  613 	ldw (1,sp),x
      0024B4 72 F9 01         [ 2]  614 	addw y,(1,sp)
      0024B7 90 5C            [ 1]  615 	incw y 
      0024B9                        616 	_drop 2 
      0024B9 5B 02            [ 2]    1     addw sp,#2 
      0024BB AE 00 88         [ 2]  617 	ldw x,#REM_IDX 
      0024BE A6 80            [ 1]  618 	ld a,#TK_CMD 
      0024C0 CC 25 67         [ 2]  619 	jp token_exit 
      0024C3                        620 plus_tst:
      0024C3                        621 	_case '+' star_tst 
      0024C3 A6 2B            [ 1]    1 	ld a,#'+' 
      0024C5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0024C7 26 05            [ 1]    3 	jrne star_tst
      0024C9 A6 10            [ 1]  622 	ld a,#TK_PLUS  
      0024CB CC 25 63         [ 2]  623 	jp token_char 
      0024CE                        624 star_tst:
      0024CE                        625 	_case '*' slash_tst 
      0024CE A6 2A            [ 1]    1 	ld a,#'*' 
      0024D0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0024D2 26 05            [ 1]    3 	jrne slash_tst
      0024D4 A6 20            [ 1]  626 	ld a,#TK_MULT 
      0024D6 CC 25 63         [ 2]  627 	jp token_char 
      0024D9                        628 slash_tst: 
      0024D9                        629 	_case '/' prcnt_tst 
      0024D9 A6 2F            [ 1]    1 	ld a,#'/' 
      0024DB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0024DD 26 05            [ 1]    3 	jrne prcnt_tst
      0024DF A6 21            [ 1]  630 	ld a,#TK_DIV 
      0024E1 CC 25 63         [ 2]  631 	jp token_char 
      0024E4                        632 prcnt_tst:
      0024E4                        633 	_case '%' eql_tst 
      0024E4 A6 25            [ 1]    1 	ld a,#'%' 
      0024E6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0024E8 26 05            [ 1]    3 	jrne eql_tst
      0024EA A6 22            [ 1]  634 	ld a,#TK_MOD
      0024EC CC 25 63         [ 2]  635 	jp token_char  
                                    636 ; 1 or 2 character tokens 	
      0024EF                        637 eql_tst:
      0024EF                        638 	_case '=' gt_tst 		
      0024EF A6 3D            [ 1]    1 	ld a,#'=' 
      0024F1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0024F3 26 05            [ 1]    3 	jrne gt_tst
      0024F5 A6 32            [ 1]  639 	ld a,#TK_EQUAL
      0024F7 CC 25 63         [ 2]  640 	jp token_char 
      0024FA                        641 gt_tst:
      0024FA                        642 	_case '>' lt_tst 
      0024FA A6 3E            [ 1]    1 	ld a,#'>' 
      0024FC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0024FE 26 23            [ 1]    3 	jrne lt_tst
      002500 A6 31            [ 1]  643 	ld a,#TK_GT 
      002502 6B 02            [ 1]  644 	ld (ATTRIB,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002504 91 D6 00         [ 4]  645 	ld a,([in.w],y)
      002507 72 5C 00 01      [ 1]  646 	inc in 
      00250B A1 3D            [ 1]  647 	cp a,#'=
      00250D 26 04            [ 1]  648 	jrne 1$
      00250F A6 33            [ 1]  649 	ld a,#TK_GE 
      002511 20 50            [ 2]  650 	jra token_char  
      002513 A1 3C            [ 1]  651 1$: cp a,#'<
      002515 26 04            [ 1]  652 	jrne 2$
      002517 A6 35            [ 1]  653 	ld a,#TK_NE 
      002519 20 48            [ 2]  654 	jra token_char 
      00251B 72 5A 00 01      [ 1]  655 2$: dec in
      00251F 7B 02            [ 1]  656 	ld a,(ATTRIB,sp)
      002521 20 40            [ 2]  657 	jra token_char 	 
      002523                        658 lt_tst:
      002523                        659 	_case '<' other
      002523 A6 3C            [ 1]    1 	ld a,#'<' 
      002525 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002527 26 23            [ 1]    3 	jrne other
      002529 A6 34            [ 1]  660 	ld a,#TK_LT 
      00252B 6B 02            [ 1]  661 	ld (ATTRIB,sp),a 
      00252D 91 D6 00         [ 4]  662 	ld a,([in.w],y)
      002530 72 5C 00 01      [ 1]  663 	inc in 
      002534 A1 3D            [ 1]  664 	cp a,#'=
      002536 26 04            [ 1]  665 	jrne 1$
      002538 A6 36            [ 1]  666 	ld a,#TK_LE 
      00253A 20 27            [ 2]  667 	jra token_char 
      00253C A1 3E            [ 1]  668 1$: cp a,#'>
      00253E 26 04            [ 1]  669 	jrne 2$
      002540 A6 35            [ 1]  670 	ld a,#TK_NE 
      002542 20 1F            [ 2]  671 	jra token_char 
      002544 72 5A 00 01      [ 1]  672 2$: dec in 
      002548 7B 02            [ 1]  673 	ld a,(ATTRIB,sp)
      00254A 20 17            [ 2]  674 	jra token_char 	
      00254C                        675 other: ; not a special character 	 
      00254C 7B 01            [ 1]  676 	ld a,(TCHAR,sp)
      00254E CD 04 06         [ 4]  677 	call is_alpha 
      002551 25 03            [ 1]  678 	jrc 30$ 
      002553 CC 07 26         [ 2]  679 	jp syntax_error 
      002556                        680 30$: 
      002556 CD 23 46         [ 4]  681 	call parse_keyword
      002559 A3 0F C0         [ 2]  682 	cpw x,#remark 
      00255C 26 09            [ 1]  683 	jrne token_exit 
      00255E 90 93            [ 1]  684 	ldw y,x 
      002560 CC 24 9A         [ 2]  685 	jp copy_comment 
      002563                        686 token_char:
      002563 F7               [ 1]  687 	ld (x),a 
      002564 5C               [ 1]  688 	incw x
      002565 90 93            [ 1]  689 	ldw y,x 
      002567                        690 token_exit:
      002567                        691 	_drop VSIZE 
      002567 5B 02            [ 2]    1     addw sp,#VSIZE 
      002569 81               [ 4]  692 	ret
                                    693 
                                    694 
                                    695 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    696 ; create token list fromm text line 
                                    697 ; save this list in pad buffer 
                                    698 ;  compiled line format: 
                                    699 ;    line_no  2 bytes {0...32767}
                                    700 ;    count    1 byte  
                                    701 ;    tokens   variable length 
                                    702 ;   
                                    703 ; input:
                                    704 ;   none
                                    705 ; modified variables:
                                    706 ;   basicptr     token list buffer address 
                                    707 ;   in.w  		 3|count, i.e. index in buffer
                                    708 ;   count        length of line | 0  
                                    709 ;-----------------------------------
                           000001   710 	XSAVE=1
                           000002   711 	VSIZE=2
      00256A                        712 compile::
      00256A                        713 	_vars VSIZE 
      00256A 52 02            [ 2]    1     sub sp,#VSIZE 
      00256C 55 00 19 00 04   [ 1]  714 	mov basicptr,txtbgn
      002571 72 1A 00 20      [ 1]  715 	bset flags,#FCOMP 
      002575 A6 00            [ 1]  716 	ld a,#0
      002577 AE 00 00         [ 2]  717 	ldw x,#0
      00257A CF 16 E0         [ 2]  718 	ldw pad,x ; destination buffer 
      00257D C7 16 E2         [ 1]  719 	ld pad+2,a ; count 
      002580 AE 16 E3         [ 2]  720 	ldw x,#pad+3
      002583 72 5F 00 01      [ 1]  721 	clr in 
      002587 CD 23 AB         [ 4]  722 	call get_token
      00258A A1 84            [ 1]  723 	cp a,#TK_INTGR
      00258C 26 11            [ 1]  724 	jrne 2$
      00258E A3 00 01         [ 2]  725 	cpw x,#1 
      002591 2A 05            [ 1]  726 	jrpl 1$
      002593 A6 0A            [ 1]  727 	ld a,#ERR_BAD_VALUE
      002595 CC 07 28         [ 2]  728 	jp tb_error
      002598 CF 16 E0         [ 2]  729 1$:	ldw pad,x 
      00259B 90 AE 16 E3      [ 2]  730 	ldw y,#pad+3 
      00259F 90 A3 17 60      [ 2]  731 2$:	cpw y,#stack_full 
      0025A3 25 05            [ 1]  732 	jrult 3$
      0025A5 A6 0F            [ 1]  733 	ld a,#ERR_BUF_FULL 
      0025A7 CC 07 28         [ 2]  734 	jp tb_error 
      0025AA                        735 3$:	
      0025AA 93               [ 1]  736 	ldw x,y 
      0025AB CD 23 AB         [ 4]  737 	call get_token 
      0025AE A1 00            [ 1]  738 	cp a,#TK_NONE 
      0025B0 26 ED            [ 1]  739 	jrne 2$ 
                                    740 ; compilation completed  
      0025B2 72 A2 16 E0      [ 2]  741 	subw y,#pad
      0025B6 90 9F            [ 1]  742     ld a,yl
      0025B8 AE 16 E0         [ 2]  743 	ldw x,#pad 
      0025BB CF 00 17         [ 2]  744 	ldw ptr16,x 
      0025BE E7 02            [ 1]  745 	ld (2,x),a 
      0025C0 FE               [ 2]  746 	ldw x,(x)
      0025C1 27 09            [ 1]  747 	jreq 10$
      0025C3 CD 21 F8         [ 4]  748 	call insert_line
      0025C6 72 5F 00 03      [ 1]  749 	clr  count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0025CA 20 0F            [ 2]  750 	jra  11$ 
      0025CC                        751 10$: ; line# is zero 
      0025CC CE 00 17         [ 2]  752 	ldw x,ptr16  
      0025CF CF 00 04         [ 2]  753 	ldw basicptr,x 
      0025D2 E6 02            [ 1]  754 	ld a,(2,x)
      0025D4 C7 00 03         [ 1]  755 	ld count,a 
      0025D7 35 03 00 01      [ 1]  756 	mov in,#3 
      0025DB                        757 11$:
      0025DB                        758 	_drop VSIZE 
      0025DB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0025DD 72 1B 00 20      [ 1]  759 	bres flags,#FCOMP 
      0025E1 81               [ 4]  760 	ret 
                                    761 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
                                     27 ;    .nlist
                                     28 ;	.include "inc/nucleo_8s208.inc"
                                     29 ;	.include "inc/stm8s208.inc"
                                     30 ;	.include "inc/ascii.inc"
                                     31 ;	.include "inc/gen_macros.inc" 
                                     32 ;	.include "tbi_macros.inc" 
                                     33 ;	.include "cmd_index.inc"
                                     34     .list 
                                     35 
                                     36 
                                     37     .area  CODE 
                                     38 
                                     39 ;-------------------------
                                     40 ; copy command name to buffer  
                                     41 ; input:
                                     42 ;   X 	name address 
                                     43 ;   Y   destination buffer 
                                     44 ; output:
                                     45 ;   Y   point after name  
                                     46 ;--------------------------
      0025E2                         47 cpy_cmd_name:
      0025E2 F6               [ 1]   48 	ld a,(x)
      0025E3 5C               [ 1]   49 	incw x
      0025E4 A4 0F            [ 1]   50 	and a,#15  
      0025E6 88               [ 1]   51 	push a 
      0025E7 0D 01            [ 1]   52     tnz (1,sp) 
      0025E9 27 0A            [ 1]   53 	jreq 9$
      0025EB F6               [ 1]   54 1$:	ld a,(x)
      0025EC 90 F7            [ 1]   55 	ld (y),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0025EE 5C               [ 1]   56 	incw x
      0025EF 90 5C            [ 1]   57 	incw y 
      0025F1 0A 01            [ 1]   58 	dec (1,sp)	 
      0025F3 26 F6            [ 1]   59 	jrne 1$
      0025F5 84               [ 1]   60 9$: pop a 
      0025F6 81               [ 4]   61 	ret	
                                     62 
                                     63 ;--------------------------
                                     64 ; add a space after letter or 
                                     65 ; digit.
                                     66 ; input:
                                     67 ;   Y     pointer to buffer 
                                     68 ; output:
                                     69 ;   Y    moved to end 
                                     70 ;--------------------------
      0025F7                         71 add_space:
      0025F7 90 5A            [ 2]   72 	decw y 
      0025F9 90 F6            [ 1]   73 	ld a,(y)
      0025FB 90 5C            [ 1]   74 	incw y
      0025FD CD 04 20         [ 4]   75 	call is_alnum 
      002600 24 06            [ 1]   76 	jrnc 1$
      002602 A6 20            [ 1]   77 	ld a,#SPACE 
      002604 90 F7            [ 1]   78 	ld (y),a 
      002606 90 5C            [ 1]   79 	incw y 
      002608 81               [ 4]   80 1$: ret 
                                     81 
                                     82 ;--------------------------
                                     83 ;  align text in buffer 
                                     84 ;  to tab_width padding 
                                     85 ;  left with  SPACE 
                                     86 ; input:
                                     87 ;   X      str*
                                     88 ;   A      str_length 
                                     89 ; output:
                                     90 ;   X      ajusted
                                     91 ;--------------------------
      002609                         92 right_align::
      002609 88               [ 1]   93 	push a 
      00260A 7B 01            [ 1]   94 0$: ld a,(1,sp)
      00260C C1 00 21         [ 1]   95 	cp a,tab_width 
      00260F 2A 08            [ 1]   96 	jrpl 1$
      002611 A6 20            [ 1]   97 	ld a,#SPACE 
      002613 5A               [ 2]   98 	decw x
      002614 F7               [ 1]   99 	ld (x),a  
      002615 0C 01            [ 1]  100 	inc (1,sp)
      002617 20 F1            [ 2]  101 	jra 0$ 
      002619 84               [ 1]  102 1$: pop a 	
      00261A 81               [ 4]  103 	ret 
                                    104 
                                    105 ;--------------------------
                                    106 ; print TK_QSTR
                                    107 ; converting control character
                                    108 ; to backslash sequence
                                    109 ; input:
                                    110 ;   X        char *
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    111 ;   Y        dest. buffer 
                                    112 ; output:
                                    113 ;   X        moved forward 
                                    114 ;   Y        moved forward 
                                    115 ;-----------------------------
      00261B                        116 cpy_quote:
      00261B A6 22            [ 1]  117 	ld a,#'"
      00261D 90 F7            [ 1]  118 	ld (y),a 
      00261F 90 5C            [ 1]  119 	incw y 
      002621 F6               [ 1]  120 1$:	ld a,(x)
      002622 27 30            [ 1]  121 	jreq 9$
      002624 5C               [ 1]  122 	incw x 
      002625 A1 20            [ 1]  123 	cp a,#SPACE 
      002627 25 0E            [ 1]  124 	jrult 3$
      002629 90 F7            [ 1]  125 	ld (y),a
      00262B 90 5C            [ 1]  126 	incw y 
      00262D A1 5C            [ 1]  127 	cp a,#'\ 
      00262F 26 F0            [ 1]  128 	jrne 1$ 
      002631                        129 2$:
      002631 90 F7            [ 1]  130 	ld (y),a
      002633 90 5C            [ 1]  131 	incw y  
      002635 20 EA            [ 2]  132 	jra 1$
      002637 88               [ 1]  133 3$: push a 
      002638 A6 5C            [ 1]  134 	ld a,#'\
      00263A 90 F7            [ 1]  135 	ld (y),a 
      00263C 90 5C            [ 1]  136 	incw y  
      00263E 84               [ 1]  137 	pop a 
      00263F A0 07            [ 1]  138 	sub a,#7
      002641 C7 00 0D         [ 1]  139 	ld acc8,a 
      002644 72 5F 00 0C      [ 1]  140 	clr acc16
      002648 89               [ 2]  141 	pushw x
      002649 AE 22 B7         [ 2]  142 	ldw x,#escaped 
      00264C 72 BB 00 0C      [ 2]  143 	addw x,acc16 
      002650 F6               [ 1]  144 	ld a,(x)
      002651 85               [ 2]  145 	popw x
      002652 20 DD            [ 2]  146 	jra 2$
      002654 A6 22            [ 1]  147 9$: ld a,#'"
      002656 90 F7            [ 1]  148 	ld (y),a 
      002658 90 5C            [ 1]  149 	incw y  
      00265A 5C               [ 1]  150 	incw x 
      00265B 81               [ 4]  151 	ret
                                    152 
                                    153 ;--------------------------
                                    154 ; return variable name 
                                    155 ; from its address.
                                    156 ; input:
                                    157 ;   X    variable address
                                    158 ; output:
                                    159 ;   A     variable letter
                                    160 ;--------------------------
      00265C                        161 var_name::
      00265C 1D 00 30         [ 2]  162 		subw x,#vars 
      00265F 9F               [ 1]  163 		ld a,xl 
      002660 44               [ 1]  164 		srl a 
      002661 AB 41            [ 1]  165 		add a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002663 81               [ 4]  166 		ret 
                                    167 
                                    168 ;-----------------------------
                                    169 ; return cmd  idx from its 
                                    170 ; code address 
                                    171 ; input:
                                    172 ;   X      code address 
                                    173 ; output:
                                    174 ;   X      cmd_idx
                                    175 ;-----------------------------
      002664                        176 get_cmd_idx:
      002664 90 89            [ 2]  177 	pushw y
      002666 90 AE 1D 98      [ 2]  178 	ldw y,#code_addr 
      00266A 90 CF 00 17      [ 2]  179 	ldw ptr16,y 
      00266E 90 5F            [ 1]  180 	clrw y 
      002670 91 D3 17         [ 5]  181 1$:	cpw x,([ptr16],y)
      002673 27 0C            [ 1]  182 	jreq 3$ 
      002675 90 5C            [ 1]  183 	incw y 
      002677 91 D6 17         [ 4]  184 	ld a,([ptr16],y)
      00267A 90 5C            [ 1]  185 	incw y
      00267C 91 DA 17         [ 4]  186 	or a,([ptr16],y)	
      00267F 26 EF            [ 1]  187 	jrne 1$
      002681 93               [ 1]  188 3$: ldw x,y 
      002682 90 85            [ 2]  189 	popw y 
      002684 81               [ 4]  190 	ret
                                    191 
                                    192 ;-------------------------------------
                                    193 ; decompile tokens list 
                                    194 ; to original text line 
                                    195 ; input:
                                    196 ;   [basicptr]  pointer at line 
                                    197 ;   Y           destination buffer
                                    198 ; output:
                                    199 ;   A           length 
                                    200 ;   Y           after string  
                                    201 ;------------------------------------
                           000001   202 	BASE_SAV=1
                           000002   203 	WIDTH_SAV=2
                           000003   204 	STR=3
                           000004   205 	VSIZE=4 
      002685                        206 decompile::
      002685                        207 	_vars VSIZE
      002685 52 04            [ 2]    1     sub sp,#VSIZE 
      002687 C6 00 0A         [ 1]  208 	ld a,base
      00268A 6B 01            [ 1]  209 	ld (BASE_SAV,sp),a  
      00268C C6 00 21         [ 1]  210 	ld a,tab_width 
      00268F 6B 02            [ 1]  211 	ld (WIDTH_SAV,sp),a 
      002691 17 03            [ 2]  212 	ldw (STR,sp),y   
      002693 72 CE 00 04      [ 5]  213 	ldw x,[basicptr] ; line number 
      002697 35 0A 00 0A      [ 1]  214 	mov base,#10
      00269B 35 05 00 21      [ 1]  215 	mov tab_width,#5
      00269F 72 5F 00 0B      [ 1]  216 	clr acc24 
      0026A3 CF 00 0C         [ 2]  217 	ldw acc16,x
      0026A6 CD 08 8C         [ 4]  218 	call itoa  
      0026A9 CD 26 09         [ 4]  219 	call right_align 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0026AC 88               [ 1]  220 	push a 
      0026AD 90 93            [ 1]  221 1$:	ldw y,x ; source
      0026AF 1E 04            [ 2]  222 	ldw x,(STR+1,sp) ; destination
      0026B1 CD 03 A8         [ 4]  223 	call strcpy 
      0026B4 90 5F            [ 1]  224 	clrw y 
      0026B6 84               [ 1]  225 	pop a 
      0026B7 90 97            [ 1]  226 	ld yl,a 
      0026B9 72 F9 03         [ 2]  227 	addw y,(STR,sp)
      0026BC A6 20            [ 1]  228 	ld a,#SPACE 
      0026BE 90 F7            [ 1]  229 	ld (y),a 
      0026C0 90 5C            [ 1]  230 	incw y 
      0026C2 72 5F 00 21      [ 1]  231 	clr tab_width
      0026C6 AE 00 03         [ 2]  232 	ldw x,#3
      0026C9 CF 00 00         [ 2]  233 	ldw in.w,x 
      0026CC                        234 decomp_loop:
      0026CC 90 89            [ 2]  235 	pushw y
      0026CE CD 08 15         [ 4]  236 	call next_token 
      0026D1 90 85            [ 2]  237 	popw y 
      0026D3 4D               [ 1]  238 	tnz a  
      0026D4 26 03            [ 1]  239 	jrne 1$
      0026D6 CC 27 B8         [ 2]  240 	jp 20$
      0026D9 2A 75            [ 1]  241 1$:	jrpl 6$
                                    242 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      0026DB A1 85            [ 1]  243 	cp a,#TK_VAR 
      0026DD 26 0C            [ 1]  244 	jrne 3$
                                    245 ;; TK_VAR 
      0026DF CD 25 F7         [ 4]  246 	call add_space  
      0026E2 CD 26 5C         [ 4]  247 	call var_name
      0026E5 90 F7            [ 1]  248 	ld (y),a 
      0026E7 90 5C            [ 1]  249 	incw y  
      0026E9 20 E1            [ 2]  250 	jra decomp_loop
      0026EB                        251 3$:
      0026EB A1 84            [ 1]  252 	cp a,#TK_INTGR
      0026ED 26 22            [ 1]  253 	jrne 4$
                                    254 ;; TK_INTGR
      0026EF CD 25 F7         [ 4]  255 	call add_space
      0026F2 72 5F 00 0B      [ 1]  256 	clr acc24 
      0026F6 CF 00 0C         [ 2]  257 	ldw acc16,x 
      0026F9 90 89            [ 2]  258 	pushw y 
      0026FB CD 08 8C         [ 4]  259 	call itoa  
      0026FE 16 01            [ 2]  260 	ldw y,(1,sp) 
      002700 88               [ 1]  261 	push a 
      002701 51               [ 1]  262 	exgw x,y 
      002702 CD 03 A8         [ 4]  263 	call strcpy 
      002705 90 5F            [ 1]  264 	clrw y
      002707 84               [ 1]  265 	pop a  
      002708 90 97            [ 1]  266 	ld yl,a 
      00270A 72 F9 01         [ 2]  267 	addw y,(1,sp)
      00270D                        268 	_drop 2 
      00270D 5B 02            [ 2]    1     addw sp,#2 
      00270F 20 BB            [ 2]  269 	jra decomp_loop
                                    270 ;; dictionary keyword 
      002711                        271 4$:	
      002711 CD 26 64         [ 4]  272 	call get_cmd_idx 
      002714 A3 00 88         [ 2]  273 	cpw x,#REM_IDX
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002717 26 22            [ 1]  274 	jrne 5$
      002719 CE 00 04         [ 2]  275 	ldw x,basicptr 
                                    276 ; copy comment to buffer 
      00271C CD 25 F7         [ 4]  277 	call add_space
      00271F A6 27            [ 1]  278 	ld a,#''
      002721 90 F7            [ 1]  279 	ld (y),a 
      002723 90 5C            [ 1]  280 	incw y 
      002725                        281 41$:
      002725 72 D6 00 00      [ 4]  282 	ld a,([in.w],x)
      002729 72 5C 00 01      [ 1]  283 	inc in  
      00272D 90 F7            [ 1]  284 	ld (y),a 
      00272F 90 5C            [ 1]  285 	incw y 
      002731 C6 00 01         [ 1]  286 	ld a,in 
      002734 C1 00 03         [ 1]  287 	cp a,count 
      002737 2B EC            [ 1]  288 	jrmi 41$
      002739 20 7D            [ 2]  289 	jra 20$  
      00273B A3 00 4C         [ 2]  290 5$: cpw x,#LET_IDX 
      00273E 27 8C            [ 1]  291 	jreq decomp_loop ; down display LET 	
                                    292 ; insert command name 
      002740 CD 25 F7         [ 4]  293 	call add_space  
      002743 90 89            [ 2]  294 	pushw y
      002745 CD 27 F3         [ 4]  295 	call cmd_name
      002748 90 85            [ 2]  296 	popw y 
      00274A CD 25 E2         [ 4]  297 	call cpy_cmd_name
      00274D CC 26 CC         [ 2]  298 	jp decomp_loop 
      002750                        299 6$:
      002750 A1 02            [ 1]  300 	cp a,#TK_QSTR 
      002752 26 06            [ 1]  301 	jrne 7$
                                    302 ;; TK_QSTR
      002754 CD 26 1B         [ 4]  303 	call cpy_quote  
      002757 CC 26 CC         [ 2]  304 	jp decomp_loop
      00275A                        305 7$:
      00275A A1 03            [ 1]  306 	cp a,#TK_CHAR 
      00275C 26 0E            [ 1]  307 	jrne 8$
                                    308 ;; TK_CHAR 
      00275E A6 5C            [ 1]  309 	ld a,#'\ 
      002760 90 F7            [ 1]  310 	ld (y),a 
      002762 90 5C            [ 1]  311 	incw y 
      002764 9F               [ 1]  312 	ld a,xl 
      002765 90 F7            [ 1]  313 	ld (y),a 
      002767 90 5C            [ 1]  314 	incw y 
      002769 CC 26 CC         [ 2]  315 	jp decomp_loop
      00276C A1 0B            [ 1]  316 8$: cp a,#TK_COLON 
      00276E 26 09            [ 1]  317 	jrne 9$
      002770 A6 3A            [ 1]  318 	ld a,#':
      002772                        319 81$:
      002772 90 F7            [ 1]  320 	ld (y),a 
      002774 90 5C            [ 1]  321 	incw y 
      002776                        322 82$:
      002776 CC 26 CC         [ 2]  323 	jp decomp_loop
      002779                        324 9$: 
      002779 A1 0A            [ 1]  325 	cp a,#TK_SHARP
      00277B 22 0A            [ 1]  326 	jrugt 10$ 
      00277D A0 06            [ 1]  327 	sub a,#TK_ARRAY 
      00277F 5F               [ 1]  328 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      002780 97               [ 1]  329 	ld xl,a
      002781 1C 27 CE         [ 2]  330 	addw x,#single_char 
      002784 F6               [ 1]  331 	ld a,(x)
      002785 20 EB            [ 2]  332 	jra 81$ 
      002787                        333 10$: 
      002787 A1 11            [ 1]  334 	cp a,#TK_MINUS 
      002789 22 0A            [ 1]  335 	jrugt 11$
      00278B A0 10            [ 1]  336 	sub a,#TK_PLUS 
      00278D 5F               [ 1]  337 	clrw x 
      00278E 97               [ 1]  338 	ld xl,a 
      00278F 1C 27 D3         [ 2]  339 	addw x,#add_char 
      002792 F6               [ 1]  340 	ld a,(x)
      002793 20 DD            [ 2]  341 	jra 81$
      002795                        342 11$:
      002795 A1 22            [ 1]  343     cp a,#TK_MOD 
      002797 22 0A            [ 1]  344 	jrugt 12$
      002799 A0 20            [ 1]  345 	sub a,#TK_MULT
      00279B 5F               [ 1]  346 	clrw x 
      00279C 97               [ 1]  347 	ld xl,a 
      00279D 1C 27 D5         [ 2]  348 	addw x,#mul_char
      0027A0 F6               [ 1]  349 	ld a,(x)
      0027A1 20 CF            [ 2]  350 	jra 81$
      0027A3                        351 12$:
      0027A3 A0 31            [ 1]  352 	sub a,#TK_GT  
      0027A5 48               [ 1]  353 	sll a 
      0027A6 5F               [ 1]  354 	clrw x 
      0027A7 97               [ 1]  355 	ld xl,a 
      0027A8 1C 27 D8         [ 2]  356 	addw x,#relop_str 
      0027AB FE               [ 2]  357 	ldw x,(x)
      0027AC F6               [ 1]  358 	ld a,(x)
      0027AD 5C               [ 1]  359 	incw x 
      0027AE 90 F7            [ 1]  360 	ld (y),a
      0027B0 90 5C            [ 1]  361 	incw y 
      0027B2 F6               [ 1]  362 	ld a,(x)
      0027B3 26 BD            [ 1]  363 	jrne 81$
      0027B5 CC 26 CC         [ 2]  364 	jp decomp_loop 
      0027B8                        365 20$: 
      0027B8 90 7F            [ 1]  366 	clr (y)
      0027BA 1E 03            [ 2]  367 	ldw x,(STR,sp)
      0027BC 7B 01            [ 1]  368 	ld a,(BASE_SAV,sp)
      0027BE C7 00 0A         [ 1]  369 	ld base,a 
      0027C1 7B 02            [ 1]  370 	ld a,(WIDTH_SAV,sp)
      0027C3 C7 00 21         [ 1]  371 	ld tab_width,a
      0027C6 72 F2 03         [ 2]  372 	subw y,(STR,sp) 
      0027C9 90 9F            [ 1]  373 	ld a,yl 
      0027CB                        374 	_drop VSIZE 
      0027CB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0027CD 81               [ 4]  375 	ret 
                                    376 
      0027CE 40 28 29 2C 23         377 single_char: .byte '@','(',')',',','#'
      0027D3 2B 2D                  378 add_char: .byte '+','-'
      0027D5 2A 2F 25               379 mul_char: .byte '*','/','%'
      0027D8 27 E4 27 E6 27 E8 27   380 relop_str: .word gt,equal,ge,lt,le,ne 
             EB 27 ED 27 F0
      0027E4 3E 00                  381 gt: .asciz ">"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0027E6 3D 00                  382 equal: .asciz "="
      0027E8 3E 3D 00               383 ge: .asciz ">="
      0027EB 3C 00                  384 lt: .asciz "<"
      0027ED 3C 3D 00               385 le: .asciz "<="
      0027F0 3C 3E 00               386 ne:  .asciz "<>"
                                    387 
                                    388 ;----------------------------------
                                    389 ; search in kword_dict name
                                    390 ; from its execution address 
                                    391 ; input:
                                    392 ;   X       	cmd_index 
                                    393 ; output:
                                    394 ;   X 			cstr*  | 0 
                                    395 ;--------------------------------
                           000001   396 	CMDX=1 
                           000003   397 	LINK=3 
                           000004   398 	VSIZE=4
      0027F3                        399 cmd_name:
      0027F3                        400 	_vars VSIZE 
      0027F3 52 04            [ 2]    1     sub sp,#VSIZE 
      0027F5 72 5F 00 0C      [ 1]  401 	clr acc16 
      0027F9 1F 01            [ 2]  402 	ldw (CMDX,sp),x  
      0027FB AE 1D 90         [ 2]  403 	ldw x,#kword_dict	
      0027FE 1F 03            [ 2]  404 1$:	ldw (LINK,sp),x
      002800 E6 02            [ 1]  405 	ld a,(2,x)
      002802 A4 0F            [ 1]  406 	and a,#15 
      002804 C7 00 0D         [ 1]  407 	ld acc8,a 
      002807 1C 00 03         [ 2]  408 	addw x,#3
      00280A 72 BB 00 0C      [ 2]  409 	addw x,acc16
      00280E FE               [ 2]  410 	ldw x,(x) ; command index  
      00280F 13 01            [ 2]  411 	cpw x,(CMDX,sp)
      002811 27 0A            [ 1]  412 	jreq 2$
      002813 1E 03            [ 2]  413 	ldw x,(LINK,sp)
      002815 FE               [ 2]  414 	ldw x,(x) 
      002816 1D 00 02         [ 2]  415 	subw x,#2  
      002819 26 E3            [ 1]  416 	jrne 1$
      00281B 20 05            [ 2]  417 	jra 9$
      00281D 1E 03            [ 2]  418 2$: ldw x,(LINK,sp)
      00281F 1C 00 02         [ 2]  419 	addw x,#2 	
      002822                        420 9$:	_drop VSIZE
      002822 5B 04            [ 2]    1     addw sp,#VSIZE 
      002824 81               [ 4]  421 	ret
                                    422 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26     .area CODE 
      002880                         27 	.bndry 128 ; align on FLASH block.
                                     28 ; space for user application  
      002880                         29 app_space::
      002880 42 43                   30 app_sign: .ascii "BC"  ; signature 
      002882 00 29                   31 app_size:  .word 41
      002884                         32 app: 
                                     33 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     34 ;;  BASIC code demo 'BLINK.BAS' 
                                     35 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     36 ;; byte code generated by compiler.
                                     37 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002884 00 0A 29 80 00 26 80    38 .byte 0,10,41,128,0,38,128,0,20,132,80,10,9,132,0,32,128,0,98,132
             00 14 84 50 0A 09 84
             00 20 80 00 62 84
      002898 00 FA 80 00 B4 81 00    39 .byte 0,250,128,0,180,129,0,130,128,0,14,132,80,10,9,132,0,32,128,0,46,0
             82 80 00 0E 84 50 0A
             09 84 00 20 80 00 2E
             00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001D92 R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      001D88 R
    ADCON_ID=  000002     |   5 ADCREAD    001D7C R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        001D74 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  5 ASC        001D6C R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   5 AWU        001D64 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000001 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   5 BIT        001D5C R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000C 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   5 BRES       001D53 R   |     BRES_IDX=  00000E 
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       001D4A R
    BSET_IDX=  000010     |     BSIZE   =  000005     |   5 BTEST      001D40 R
    BTEST_ID=  000012     |   5 BTOGL      001D36 R   |     BTOGL_ID=  000014 
    BTW     =  000001     |   5 BYE        001D2E R   |     BYE_IDX =  000016 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       001D25 R
    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000003     |     COMMA   =  00002C 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   5 CRH        001D1D R   |     CRH_IDX =  00001A 
  5 CRL        001D15 R   |     CRL_IDX =  00001C     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000004     |     CTX_BPTR=  000001 
    CTX_COUN=  000004     |     CTX_IN  =  000003     |     CURR    =  000002 
    CVAR    =  000007     |     CX_BPTR =  000001     |     CX_CNT  =  000004 
    CX_IN   =  000003     |   5 DATA       001D0C R   |   5 DATALN     001D01 R
    DATALN_I=  000020     |     DATA_IDX=  00001E     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DBL     =  000003     |     DBLDIVDN=  000006     |     DBLHI   =  000001 
    DBLLO   =  000003     |     DBL_SIZE=  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        001CF9 R   |     DDR_IDX =  000022     |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |     DEBUG_PR=  000001 
  5 DEC        001CF1 R   |     DEC_IDX =  000024     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVDNDHI=  00000B 
    DIVDNDLO=  00000D     |     DIVISOR =  000001     |     DIVISR  =  000007 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   5 DO         001CEA R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000026     |   5 DREAD      001CE0 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    DREAD_ID=  000028     |   5 DWRITE     001CD5 R   |     DWRITE_I=  00002A 
  5 EEPROM     001CCA R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002C     |     EEPROM_S=  000800     |     EM      =  000019 
  5 END        001CC2 R   |     END_IDX =  00002E     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   5 ERASE      001CB8 R
    ERASE_ID=  000030     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   5 FCPU       001CAF R   |     FCPU_IDX=  000032 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   5 FOR        001CA7 R   |     FOR_IDX =  000034 
  5 FREE       001C9E R   |     FREE_IDX=  000096     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      001C94 R
    GOSUB_ID=  000036     |   5 GOTO       001C8B R   |     GOTO_IDX=  000038 
  5 GPIO       001C82 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003A     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   5 HEX        001C7A R   |     HEX_IDX =  00003C 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        001C72 R
    IDR_IDX =  00003E     |   5 IF         001C6B R   |     IF_IDX  =  000040 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  5 INPUT      001C61 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000042     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   5 INVERT     001C56 R   |     INVERT_I=  000044 
    INW     =  000009     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   5 IWDGEN     001C4B R   |     IWDGEN_I=  000046 
  5 IWDGREF    001C3F R   |     IWDGREF_=  000048     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  5 KEY        001C37 R   |     KEY_END =  000083     |     KEY_IDX =  00004A 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  5 LET        001C2F R   |     LET_IDX =  00004C     |     LF      =  00000A 
    LIMIT   =  000005     |     LINENO  =  000005     |     LINK    =  000003 
  5 LIST       001C26 R   |     LIST_IDX=  00004E     |     LL      =  000001 
    LLEN    =  000007     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  5 LOG        001C1E R   |     LOG_IDX =  000050     |   5 LSHIFT     001C13 R
    LSHIFT_I=  000052     |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000002 
  5 MULDIV     001C08 R   |     MULDIV_I=  000054     |     MULOP   =  000003 
    N1      =  000001     |     N2      =  000003     |     NAFR    =  004804 
    NAK     =  000015     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        001C00 R   |     NEW_IDX =  000058     |   5 NEXT       001BF7 R
    NEXT_IDX=  000056     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  5 NOT        001BEF R   |     NOT_IDX =  00005A     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R
  5 ODR        001BE7 R   |     ODR_IDX =  00005C     |     ONOFF   =  000003 
    OP      =  000005     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   5 OR         001BE0 R
    OR_IDX  =  00005E     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     OVRWR   =  000004 
    PA      =  000000     |   5 PAD        001BD8 R   |     PAD_IDX =  000060 
    PAD_SIZE=  000080     |   5 PAUSE      001BCE R   |     PAUSE_ID=  000062 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       001BC5 R   |     PEEK_IDX=  000066 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   5 PINP       001BBC R
    PINP_IDX=  000068     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      001BB2 R
    PMODE_ID=  000064     |   5 POKE       001BA9 R   |     POKE_IDX=  00006A 
    PORT    =  000003     |   5 POUT       001BA0 R   |     POUT_IDX=  00006C 
    PREV    =  000001     |   5 PRINT      001B96 R   |   5 PRTA       001B8D R
    PRTA_IDX=  000070     |   5 PRTB       001B84 R   |     PRTB_IDX=  000072 
  5 PRTC       001B7B R   |     PRTC_IDX=  000074     |   5 PRTD       001B72 R
    PRTD_IDX=  000076     |   5 PRTE       001B69 R   |     PRTE_IDX=  000078 
  5 PRTF       001B60 R   |     PRTF_IDX=  00007A     |   5 PRTG       001B57 R
    PRTG_IDX=  00007C     |   5 PRTH       001B4E R   |     PRTH_IDX=  00007E 
  5 PRTI       001B45 R   |     PRTI_IDX=  000080     |     PRT_IDX =  00006E 
    PSTR    =  000003     |   5 QKEY       001B3C R   |     QKEY_IDX=  000082 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
    RBT_IDX =  000086     |   5 READ       001B33 R   |     READ_IDX=  000084 
  5 REBOOT     001B28 R   |     REG     =  000001     |     REGA    =  000001 
    REGX    =  000003     |     REGY    =  000005     |     RELOP   =  000003 
  5 REMARK     001B1D R   |     REM_IDX =  000088     |   5 RESTORE    001B11 R
    REST_IDX=  00008A     |     RETL1   =  000001     |   5 RETURN     001B06 R
    RET_ADDR=  000003     |     RET_IDX =  00008C     |     RET_INW =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

  5 RND        001AFE R   |     RND_IDX =  00008E     |     ROP     =  004800 
    RS      =  00001E     |   5 RSHIFT     001AF3 R   |     RSHIFT_I=  000090 
    RST_SR  =  0050B3     |   5 RUN        001AEB R   |     RUN_IDX =  000092 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     SAVEB   =  000002 
    SDIVSR  =  000005     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001AE2 R   |     SHOW_IDX=  000094 
    SI      =  00000F     |     SIGN    =  000001     |     SKIP    =  000005 
  5 SLEEP      001AD8 R   |     SLEEP_ID=  000098     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   5 SPIEN      001ACE R
    SPIEN_ID=  00009C     |   5 SPIRD      001AC4 R   |     SPIRD_ID=  00009A 
  5 SPISEL     001AB9 R   |     SPISEL_I=  00009E     |   5 SPIWR      001AAF R
    SPIWR_ID=  0000A0     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       001AA6 R   |     STEP_IDX=  0000A2 
  5 STOP       001A9D R   |     STOP_IDX=  0000A4     |     STR     =  000003 
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      001A93 R   |     TICKS_ID=  0000A6     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    001A87 R   |   5 TIMER      001A7D R   |     TIMER_ID=  0000A8 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]

Symbol Table

    TK_CFUNC=  000082     |     TK_CHAR =  000003     |     TK_CMD  =  000080 
    TK_COLON=  00000B     |     TK_COMMA=  000009     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_VAR  =  000085 
    TMROUT_I=  0000AA     |   5 TO         001A76 R   |   5 TONE       001A6D R
    TONE_IDX=  0000AE     |     TO_IDX  =  0000AC     |   5 Timer4Up   000040 R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     001A62 R
    UBOUND_I=  0000B0     |   5 UBTN_Han   000079 R   |   5 UFLASH     001A57 R
    UFLASH_I=  0000B2     |   5 UNTIL      001A4D R   |     UNTIL_ID=  0000B4 
    US      =  00001F     |   5 USER_ABO   00008C R   |   5 USR        001A45 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000B6     |   5 Uart1RxH   00000F R   |   5 UserButt   000055 R
    VAR_ADDR=  000006     |     VSISE   =  000003     |     VSIZ    =  000002 
    VSIZE   =  000004     |     VT      =  00000B     |   5 WAIT       001A3C R
    WAIT_IDX=  0000B8     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      001A32 R   |     WORDS_ID=  0000BA     |   5 WRITE      001A28 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]

Symbol Table

    WRITE_ID=  0000BC     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        001A20 R   |     XOR_IDX =  0000BE 
    XREG    =  000003     |     XSAVE   =  000001     |     YSAVE   =  000004 
  5 abs        001550 R   |   1 acc16      00000C GR  |   1 acc24      00000B GR
  1 acc8       00000D GR  |   5 accept_c   0020F8 R   |   5 add_char   0027D3 R
  5 add_spac   0025F7 R   |   5 analog_r   0012A9 R   |   5 app        002884 R
  5 app_sign   002880 R   |   5 app_size   002882 R   |   5 app_spac   002880 GR
  5 arduino_   001646 R   |   5 arg_list   000BCE R   |   1 array_si   00001E R
  5 ascii      001441 R   |   5 at_tst     002465 R   |   5 atoi24     000988 GR
  5 atoi_exi   0009EE R   |   5 awu        001501 R   |   5 awu02      00150B R
  5 bad_port   0014A2 R   |   1 base       00000A GR  |   1 basicptr   000004 GR
  5 beep       001236 R   |   5 beep_1kh   001220 GR  |   5 bin_exit   00232B R
  5 bit_and    001564 R   |   5 bit_or     00157C R   |   5 bit_rese   000FFB R
  5 bit_set    000FEB R   |   5 bit_test   00101C R   |   5 bit_togg   00100C R
  5 bit_xor    001594 R   |   5 bitmask    0017B2 R   |   5 bkslsh_t   002412 R
  5 bksp       001E96 R   |   5 block_er   0001AD R   |   5 break_po   001376 R
  5 bye        0014DA R   |   5 char       00142F R   |   5 clear_ba   000590 R
  5 clear_va   0003F8 R   |   5 clock_in   0000A7 R   |   5 cmd_end    001219 R
  5 cmd_line   0007AD R   |   5 cmd_name   0027F3 R   |   5 code_add   001D98 GR
  5 cold_sta   00046F R   |   5 colon_ts   002439 R   |   5 comma_ts   002444 R
  5 comp_msg   000705 R   |   5 compile    00256A GR  |   5 const_cr   001866 R
  5 const_cr   00186C R   |   5 const_dd   001860 R   |   5 const_ee   00187E R
  5 const_id   00185A R   |   5 const_in   001878 R   |   5 const_od   001854 R
  5 const_ou   001872 R   |   5 const_po   00181E R   |   5 const_po   001824 R
  5 const_po   00182A R   |   5 const_po   001830 R   |   5 const_po   001836 R
  5 const_po   00183C R   |   5 const_po   001842 R   |   5 const_po   001848 R
  5 const_po   00184E R   |   5 convert_   0022A2 R   |   5 convert_   001E5A R
  5 copy_com   00249A R   |   1 count      000003 GR  |   5 cp_loop    000B7D R
  5 cpy_cmd_   0025E2 R   |   5 cpy_quot   00261B R   |   5 create_g   0021CC R
  5 cs_high    001A13 R   |   5 cstk_pro   000D88 R   |   5 dash_tst   00245A R
  5 data       001884 R   |   1 data_len   000009 R   |   5 data_lin   00188A R
  1 data_ofs   000008 R   |   1 data_ptr   000006 R   |   5 data_sea   0018CB R
  5 dbl_sign   000AD7 R   |   5 dec_base   000DB4 R   |   5 decomp_l   0026CC R
  5 decompil   002685 GR  |   5 del_line   00219F R   |   5 delete_l   001F83 R
  5 delete_n   001EA6 R   |   5 delete_u   001F48 R   |   5 digital_   0012DD R
  5 digital_   00130D R   |   5 div32_16   000AE1 R   |   5 divide     000B38 R
  5 divu24_8   0008F7 R   |   5 dneg       000ACC R   |   5 do_loop    0017DB R
  5 do_progr   0001A0 R   |   5 enable_i   00175C R   |   5 eql_tst    0024EF R
  5 equal      0027E6 R   |   5 erase      0013D5 R   |   5 erase_fl   0001CC R
  5 err_bad_   000670 R   |   5 err_buf_   0006E6 R   |   5 err_cmd_   000634 R
  5 err_div0   0005F9 R   |   5 err_dupl   00064E R   |   5 err_math   0005E0 R
  5 err_mem_   0005C5 R   |   5 err_msg    0005A5 R   |   5 err_no_a   00067C R
  5 err_no_d   0006AF R   |   5 err_no_f   0006D3 R   |   5 err_no_l   000608 R
  5 err_no_p   0006BF R   |   5 err_not_   00065F R   |   5 err_run_   00061E R
  5 err_synt   0005D2 R   |   5 escaped    0022B7 GR  |   5 expect     000BBC R
  5 expr_exi   000D13 R   |   5 expressi   000CCD R   |   5 factor     000C1E R
  1 farptr     000016 R   |   5 fcpu       0015DE R   |   5 final_te   0020F1 R
  5 first_li   000E57 R   |   1 flags      000020 GR  |   5 for        001077 R
  5 free       000DB9 R   |   1 free_ram   000064 R   |   5 func_arg   000BC9 R
  5 func_not   00174F R   |   5 ge         0027E8 R   |   5 get_arra   000BF9 R
  5 get_cmd_   002664 R   |   5 get_esca   001E66 R   |   5 get_targ   001141 R
  5 get_tick   00154A R   |   5 get_toke   0023AB GR  |   5 getc       0002C2 GR
  5 gosub      001182 R   |   5 goto       001167 R   |   5 gpio       00147D R
  5 gt         0027E4 R   |   5 gt_tst     0024FA R   |   5 hex_base   000DAF R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]

Symbol Table

  5 hex_dump   00034F R   |   5 if         001063 R   |   1 in         000001 GR
  1 in.saved   000002 GR  |   1 in.w       000000 GR  |   5 incr_far   0013B9 R
  5 input_ex   000FBD R   |   5 input_lo   000F52 R   |   5 input_va   000F50 R
  5 insert_c   001F05 R   |   5 insert_l   0021F8 R   |   5 insert_l   002267 R
  5 interp_l   0007EE R   |   5 interpre   0007C9 R   |   5 invert     0017CC R
  5 is_alnum   000420 GR  |   5 is_alpha   000406 GR  |   5 is_digit   000417 GR
  5 itoa       00088C GR  |   5 itoa_loo   0008B1 R   |   5 jp_to_ta   001175 R
  5 key        001468 R   |   5 kw_loop    002347 R   |   5 kword_di   001D90 GR
  5 kword_en   001A1E R   |   5 le         0027ED R   |   5 leading_   0017A2 R
  5 let        000E03 GR  |   5 let_arra   000E11 R   |   5 let_var    000E14 R
  5 lines_sk   000E5A R   |   5 list       000E2E R   |   5 list_exi   000E9C R
  5 list_loo   000E7A R   |   5 log2       001797 R   |   5 logical_   001745 R
  5 long_div   000AB4 R   |   5 loop_bac   001124 R   |   1 loop_dep   00001D R
  5 loop_don   001139 R   |   5 lshift     0015AC R   |   5 lt         0027EB R
  5 lt_tst     002523 R   |   5 modulo     000B4E R   |   5 move       0003B6 GR
  5 move_dow   0003D4 R   |   5 move_era   000132 R   |   5 move_exi   0003F5 R
  5 move_lef   001EDD R   |   5 move_loo   0003D9 R   |   5 move_prg   000166 R
  5 move_rig   001EEB R   |   5 move_up    0003C6 R   |   5 mul_char   0027D5 R
  5 muldiv     000B53 R   |   5 multiply   000A7F R   |   5 mulu24_8   00091F R
  5 nbr_tst    0023DE R   |   5 ne         0027F0 R   |   5 neg_acc2   000959 R
  5 new        001394 R   |   5 next       0010F7 R   |   5 next_lin   0007D1 R
  5 next_tok   000815 GR  |   5 no_match   000B8F R   |   5 other      00254C R
  5 overwrit   00211D R   |   3 pad        0016E0 GR  |   5 pad_ref    001A18 R
  5 parse_bi   002309 R   |   5 parse_in   0022BF R   |   5 parse_ke   002346 R
  5 parse_qu   00226A R   |   5 pause      0014EE R   |   5 pause02    0014F8 R
  5 peek       001052 R   |   5 pin_mode   0015EA R   |   5 plus_tst   0024C3 R
  5 poke       001043 R   |   5 power_ad   00126D R   |   5 prcnt_ts   0024E4 R
  5 print      000ECA R   |   5 print_ex   000F24 R   |   5 print_he   002152 GR
  5 print_in   000870 R   |   5 printxy    0009F2 R   |   5 program_   000146 R
  5 program_   000166 R   |   5 prt_basi   000EAA R   |   5 prt_loop   000ECE R
  5 prt_tok    0002E1 R   |   5 prti24     000880 R   |   1 ptr16      000017 GR
  1 ptr8       000018 R   |   5 putc       0002B2 GR  |   5 puts       001E8C GR
  5 qgetc      0002BB GR  |   5 qkey       001470 GR  |   5 qmark_ts   002470 R
  5 random     001666 R   |   5 read       001907 R   |   5 read01     001909 R
  5 readln     001F91 GR  |   5 readln_l   001F9E R   |   5 readln_q   00213A R
  5 refresh_   001792 R   |   5 rel_exit   000D6B R   |   5 relation   000D16 R
  5 relop_st   0027D8 R   |   5 remark     000FC0 GR  |   5 reset_co   000ECC R
  5 rest_con   000F40 R   |   5 restore    0018B8 R   |   5 return     0011A2 R
  5 right_al   002609 GR  |   5 row_alig   00139E R   |   5 row_eras   00010B R
  5 row_eras   000132 R   |   5 row_loop   000332 R   |   5 rparnt_t   00242E R
  5 rshift     0015C5 R   |   5 rt_msg     0006F3 R   |   5 run        0011C0 R
  5 run_it     0011F2 R   |   5 running    000547 R   |   1 rx1_head   00002A R
  1 rx1_queu   000022 R   |   1 rx1_tail   00002B R   |   5 save_con   000F30 R
  5 scan_blo   0013C7 R   |   5 search_d   000B6F GR  |   5 search_e   000BB9 R
  5 search_l   002174 GR  |   5 search_l   002183 R   |   5 search_n   000B73 R
  1 seedx      000012 R   |   1 seedy      000014 R   |   5 select_p   001636 R
  5 send_esc   001EB4 R   |   5 send_par   001EBF R   |   5 set_time   001733 R
  5 sharp_ts   00244F R   |   5 show       000D6E R   |   5 show_row   000320 R
  5 single_c   0027CE R   |   5 skip       002398 R   |   5 slash_ts   0024D9 R
  5 sleep      0014E3 R   |   5 software   000429 R   |   5 spaces     001EF9 GR
  5 spi_clea   0019AC R   |   5 spi_disa   001994 R   |   5 spi_enab   001961 R
  5 spi_rcv_   0019CE R   |   5 spi_read   0019F9 R   |   5 spi_sele   001A01 R
  5 spi_send   0019B8 R   |   5 spi_writ   0019D9 R   |   3 stack_fu   001760 GR
  3 stack_un   001800 R   |   5 star_tst   0024CE R   |   5 step       0010D0 R
  5 stop       001348 R   |   5 store_lo   0010E4 R   |   5 str_matc   000B9C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]

Symbol Table

  5 str_tst    0023CE R   |   5 strcmp     000397 R   |   5 strcpy     0003A8 GR
  5 strlen     00038C GR  |   5 syntax_e   000726 GR  |   1 tab_widt   000021 GR
  5 tb_error   000728 GR  |   5 term       000C7B R   |   5 term01     000C83 R
  5 term_exi   000CCA R   |   3 tib        001690 GR  |   5 tick_tst   002488 R
  1 ticks      00000E R   |   5 timeout    001742 R   |   1 timer      000010 GR
  5 timer2_i   0000BD R   |   5 timer4_i   0000CA R   |   5 tk_id      000716 R
  5 to         0010A0 R   |   5 to_eepro   000189 R   |   5 to_flash   00019D R
  5 to_hex_c   002169 GR  |   5 to_upper   00097C GR  |   5 token_ch   002563 R
  5 token_ex   002567 R   |   5 token_ms   000318 R   |   5 tone       001229 R
  5 try_next   0018F7 R   |   1 txtbgn     000019 GR  |   1 txtend     00001B GR
  5 uart1_ge   0002C2 GR  |   5 uart1_in   00026F R   |   5 uart1_pu   0002B2 GR
  5 uart1_qg   0002BB GR  |   5 uart1_se   00027F R   |   5 ubound     000DE1 R
  5 udiv32_1   000AA2 R   |   5 uflash     0014A7 R   |   5 umstar     000A45 R
  5 unlock_e   0000DF R   |   5 unlock_f   0000F5 R   |   5 until      0017F0 R
  5 user_int   000068 R   |   5 usr        0014BD R   |   5 var_name   00265C GR
  1 vars       000030 GR  |   5 wait       000FC6 R   |   5 warm_ini   000572 R
  5 warm_sta   0007AA R   |   5 words      0016CD R   |   5 words_co   00171D R
  5 write      0013F8 R   |   5 write_bl   00024C R   |   5 write_by   0001D7 R
  5 write_ee   000213 R   |   5 write_ex   000247 R   |   5 write_fl   0001FD R
  5 write_ro   00017A R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     64   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   28AE   flags    0

