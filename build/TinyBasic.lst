ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                           000006    45         FLN_REJECTED=6 ; a memory full error occured while in *insert_line*. 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                           000012   144     ERR_NO_PROGRAM=18
                                    145 
                                    146 ;--------------------------------------
                                    147 ;   assembler flags 
                                    148 ;-------------------------------------
                                    149 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    150 
                                    151      .macro _usec_dly n 
                                    152     ldw x,#(16*n-2)/4
                                    153     decw x
                                    154     nop 
                                    155     jrne .-4
                                    156     .endm 
                                    157     
                                    158     ; load X register with 
                                    159     ; entry point of dictionary
                                    160     ; before calling 'search_dict'
                                    161     .macro _ldx_dict dict_name
                                    162     ldw x,#dict_name+2
                                    163     .endm 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; reset BASIC pointer
                                    166     ; to beginning of last token
                                    167     ; extracted except if it was end of line 
                                    168     .macro _unget_token 
                                    169      mov in,in.saved  
                                    170     .endm
                                    171 
                                    172 
                                    173     ; extract code address for 
                                    174     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    175     .macro _get_code_addr
                                    176         ldw x,(x)
                                    177         inc in 
                                    178         inc in 
                                    179     .endm 
                                    180 
                                    181 
                                    182 
                                    183 ;---------------------------------------
                                    184 ;    xtack manipulation macros 
                                    185 ;    Y is used as xstack pointer  
                                    186 ;----------------------------------------
                                    187     ; pop in A:X from XSTACK 
                                    188     .macro _xpop 
                                    189     ld a,(y)
                                    190     ldw x,y 
                                    191     ldw x,(1,x)
                                    192     addw y,#CELL_SIZE 
                                    193     .endm 
                                    194 
                                    195     ; push A:X  to XSTACK 
                                    196     .macro _xpush 
                                    197     subw y,#CELL_SIZE
                                    198     ld (y),a 
                                    199     ldw (1,y),x 
                                    200     .endm 
                                    201 
                                    202     ; drop from XSTACK 
                                    203     .macro _xdrop 
                                    204     addw y,#CELL_SIZE 
                                    205     .endm 
                                    206 
                                    207     ; @T fetch top xstack 
                                    208     .macro _at_top
                                    209     ld a,(y)
                                    210     ldw x,y 
                                    211     ldw x,(1,x)
                                    212     .endm 
                                    213 
                                    214     ; @N  fetch next on xstack 
                                    215     .macro _at_next 
                                    216     ld a,(3,y)
                                    217     ldw x,y 
                                    218     ldw x,(4,x)
                                    219     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220 
                                    221     ; !T put on top of xtack 
                                    222     .macro _store_top 
                                    223     ld (y),a 
                                    224     ldw (1,y),x     
                                    225     .endm 
                                    226 
                                    227     ; !N put next on xstack 
                                    228     .macro _store_next 
                                    229     ld (3,y),a 
                                    230     ldw (4,y),x 
                                    231     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001668                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE*CELL_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         43 pad:: .ds PAD_SIZE             ; working buffer
      001738                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      001774                         45 xstack_unf:: ; xstack underflow 
      001774                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 7C             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 5C         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 17 31         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 BA         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1D 42         [ 4]  270 	call func_eefree 
      000113 CD 1C E3         [ 4]  271 	call ubound 
      000116 CD 14 B1         [ 4]  272 	call clear_basic
      000119 CD 26 28         [ 4]  273 	call beep_1khz  
      00011C CD 14 5E         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for autorun application
      00011F CE 40 00         [ 2]  277 	ldw x,EEPROM_BASE 
      000122 C3 32 41         [ 2]  278 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  279 	jreq run_app
      000127 CC 17 31         [ 2]  280 	jp warm_start 
      00012A                        281 run_app:
      00012A 4F               [ 1]  282 	clr a 
      00012B CE 40 02         [ 2]  283 	ldw x,EEPROM_BASE+2
      00012E CD 25 2E         [ 4]  284 	call is_program_addr 
      000131 27 03            [ 1]  285 	jreq 1$
      000133 CC 17 31         [ 2]  286 	jp warm_start
      000136                        287 1$:	
                                    288 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  289 	ldw y,XSTACK_EMPTY
      00013A CD 14 8F         [ 4]  290 	call warm_init
      00013D CE 40 02         [ 2]  291 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  292 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  293 	subw x,#2 
      000146 FE               [ 2]  294 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  295 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  296 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  297 	ldw x,#AUTO_RUN 
      000151 CD 09 5C         [ 4]  298 	call puts 
      000154 CD 1E 64         [ 4]  299 	call program_info 
      000157 CC 25 9E         [ 2]  300 	jp run_it_02  
      00015A 20 FE            [ 2]  301     jra .  
                                    302 
      00015C 20 61 75 74 6F 20 72   303 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    304 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 16 A7         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002E6 CC 16 A7         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 16 A7         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      0003AA                         48 prt_peek::
      0003AA 89               [ 2]   49 	pushw x 
      0003AB 35 10 00 0A      [ 1]   50 	mov base,#16 
      0003AF CD 18 54         [ 4]   51 	call prt_i16  
      0003B2 A6 3A            [ 1]   52 	ld a,#': 
      0003B4 CD 08 FF         [ 4]   53 	call putc 
      0003B7 A6 20            [ 1]   54 	ld a,#SPACE 
      0003B9 CD 08 FF         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003BC 85               [ 2]   56 	popw x 
      0003BD F6               [ 1]   57 	ld a,(x)
      0003BE 5F               [ 1]   58 	clrw x 
      0003BF 97               [ 1]   59 	ld xl,a 
      0003C0 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003C4 CD 18 54         [ 4]   61 	call prt_i16 
      0003C7 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003C8                         69 ledon:
      0003C8 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003CC 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003CD                         74 ledoff:
      0003CD 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003D1 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003D2                         79 ledtoggle:
      0003D2 A6 20            [ 1]   80     ld a,#LED2_MASK
      0003D4 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003D7 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003DA 81               [ 4]   83     ret 
                                     84 
      0003DB                         85 left_paren:
      0003DB A6 20            [ 1]   86 	ld a,#SPACE 
      0003DD CD 08 FF         [ 4]   87 	call putc
      0003E0 A6 28            [ 1]   88 	ld a,#'( 
      0003E2 CD 08 FF         [ 4]   89 	call putc 	
      0003E5 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003E6                        100 prt_reg8:
      0003E6 88               [ 1]  101 	push a 
      0003E7 CD 09 5C         [ 4]  102 	call puts 
      0003EA 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003EC 5F               [ 1]  104 	clrw x 
      0003ED 97               [ 1]  105 	ld xl,a 
      0003EE 35 10 00 0A      [ 1]  106 	mov base,#16
      0003F2 CD 18 54         [ 4]  107 	call prt_i16  
      0003F5 CD 03 DB         [ 4]  108 	call left_paren 
      0003F8 84               [ 1]  109 	pop a 
      0003F9 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0003FA 97               [ 1]  111 	ld xl,a 
      0003FB 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003FF CD 18 54         [ 4]  113 	call prt_i16  
      000402 A6 29            [ 1]  114 	ld a,#') 
      000404 CD 08 FF         [ 4]  115 	call putc
      000407 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      000408                        126 prt_reg16: 
      000408 90 89            [ 2]  127 	pushw y 
      00040A CD 09 5C         [ 4]  128 	call puts 
      00040D 1E 01            [ 2]  129 	ldw x,(1,sp) 
      00040F 35 10 00 0A      [ 1]  130 	mov base,#16 
      000413 CD 18 54         [ 4]  131 	call prt_i16  
      000416 CD 03 DB         [ 4]  132 	call left_paren 
      000419 85               [ 2]  133 	popw x 
      00041A 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00041E CD 18 54         [ 4]  135 	call prt_i16  
      000421 A6 29            [ 1]  136 	ld a,#') 
      000423 CD 08 FF         [ 4]  137 	call putc
      000426 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000427                        152 print_registers:
      000427 8A               [ 1]  153 	push cc 
      000428                        154 	_vars VSIZE 
      000428 52 08            [ 2]    1     sub sp,#VSIZE 
      00042A 6B 01            [ 1]  155 	ld (R_A,sp),a 
      00042C 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00042E 17 04            [ 2]  157 	ldw (R_Y,sp),y
      000430 C6 00 0C         [ 1]  158 	ld a,acc24 
      000433 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000436 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000438 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      00043A AE 04 91         [ 2]  162 	ldw x,#STATES
      00043D CD 09 5C         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000440 AE 04 CE         [ 2]  165 	ldw x, #REG_PC
      000443 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000445 72 A2 00 03      [ 2]  167 	subw y,#3
      000449 CD 04 08         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      00044C AE 04 D6         [ 2]  170 	ldw x,#REG_X
      00044F 16 02            [ 2]  171 	ldw y,(R_X,sp)
      000451 CD 04 08         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000454 AE 04 D2         [ 2]  174 	ldw x,#REG_Y
      000457 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000459 CD 04 08         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      00045C AE 04 DA         [ 2]  178 	ldw x,#REG_A
      00045F 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      000461 CD 03 E6         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000464 AE 04 DE         [ 2]  182 	ldw x,#REG_CC 
      000467 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000469 CD 03 E6         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      00046C AE 04 E3         [ 2]  186 	ldw x,#REG_SP
      00046F 90 96            [ 1]  187 	ldw y,sp 
      000471 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000475 CD 04 08         [ 4]  189 	call prt_reg16  
      000478 A6 0A            [ 1]  190 	ld a,#'\n' 
      00047A CD 08 FF         [ 4]  191 	call putc
      00047D 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00047F 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      000481 C7 00 0C         [ 1]  194 	ld acc24,a 
      000484 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000487 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000489 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      00048B 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00048D                        199 	_drop VSIZE
      00048D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00048F 86               [ 1]  200 	pop cc   	
      000490 81               [ 4]  201 	ret
                                    202 
      000491 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004CE 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004D2 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004D6 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004DA 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004DE 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004E3 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004E8                        217 parse_addr:
      0004E8 A6 20            [ 1]  218 	ld a,#SPACE 
      0004EA CD 0E E2         [ 4]  219 	call skip  	 
      0004ED 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004F1 AE 16 B8         [ 2]  221 	ldw x,#pad 
      0004F4 CD 13 B5         [ 4]  222 	call strcpy
      0004F7 AE 16 B8         [ 2]  223 	ldw x,#pad
      0004FA CD 18 F6         [ 4]  224 	call atoi24 	
      0004FD 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004FE                        244 cmd_itf:
      0004FE 8A               [ 1]  245 	push cc 
      0004FF                        246 	_vars VSIZE
      0004FF 52 0B            [ 2]    1     sub sp,#VSIZE 
      000501 6B 01            [ 1]  247 	ld (R_A,sp),a
      000503 C6 00 02         [ 1]  248 	ld a,count 
      000506 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      000508 C6 00 01         [ 1]  250 	ld a,in 
      00050B 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      00050D 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      00050F 17 04            [ 2]  253 	ldw (R_Y,sp),y
      000511 C6 00 0C         [ 1]  254 	ld a,acc24 
      000514 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000517 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000519 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      00051B 72 5F 00 18      [ 1]  258 	clr farptr 
      00051F 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000523 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000527                        261 repl:
      000527 A6 0D            [ 1]  262 	ld a,#CR 
      000529 CD 08 FF         [ 4]  263 	call putc 
      00052C A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00052E CD 08 FF         [ 4]  265 	call putc
      000531 72 5F 00 00      [ 1]  266 	clr in.w 
      000535 72 5F 00 01      [ 1]  267 	clr in 
      000539 CD 0A 61         [ 4]  268 	call readln
      00053C 90 AE 16 68      [ 2]  269 	ldw y,#tib  
      000540 90 F6            [ 1]  270 	ld a,(y)
      000542 27 E3            [ 1]  271 	jreq repl  
      000544 72 5C 00 01      [ 1]  272 	inc in 
      000548 CD 18 EA         [ 4]  273 	call to_upper 
      00054B A1 51            [ 1]  274 	cp a,#'Q 
      00054D 26 26            [ 1]  275 	jrne test_p
      00054F                        276 repl_exit:
                                    277 ; restore original context 
      00054F 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      000551 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000553 C7 00 0C         [ 1]  280 	ld acc24,a 
      000556 CF 00 0D         [ 2]  281 	ldw acc16,x
      000559 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      00055B C7 00 02         [ 1]  283 	ld count,a 
      00055E 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      000560 C7 00 01         [ 1]  285 	ld in,a 
      000563 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000565 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000567 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000569                        289 	_drop VSIZE
      000569 5B 0B            [ 2]    1     addw sp,#VSIZE 
      00056B 86               [ 1]  290 	pop cc 
      00056C 81               [ 4]  291 	ret  
      00056D                        292 invalid:
      00056D AE 05 DB         [ 2]  293 	ldw x,#invalid_cmd 
      000570 CD 09 5C         [ 4]  294 	call puts 
      000573 20 B2            [ 2]  295 	jra repl 
      000575                        296 test_p:	
      000575 A1 50            [ 1]  297     cp a,#'P 
      000577 27 10            [ 1]  298 	jreq mem_peek
      000579 A1 53            [ 1]  299     cp a,#'S 
      00057B 26 F0            [ 1]  300 	jrne invalid 
      00057D                        301 print_string:
      00057D CD 04 E8         [ 4]  302 	call parse_addr 	
      000580 CE 00 0D         [ 2]  303 	ldw x,acc16
      000583 CD 09 5C         [ 4]  304 	call puts
      000586 CC 05 27         [ 2]  305 	jp repl 	
      000589                        306 mem_peek:
      000589 CD 04 E8         [ 4]  307 	call parse_addr 
      00058C C6 00 0C         [ 1]  308 	ld a, acc24 
      00058F CA 00 0D         [ 1]  309 	or a,acc16 
      000592 CA 00 0E         [ 1]  310 	or a,acc8 
      000595 26 02            [ 1]  311 	jrne 1$ 
      000597 20 0C            [ 2]  312 	jra peek_byte  
      000599 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      00059C CF 00 18         [ 2]  314 	ldw farptr,x 
      00059F C6 00 0E         [ 1]  315 	ld a,acc8 
      0005A2 C7 00 1A         [ 1]  316 	ld farptr+2,a 
      0005A5                        317 peek_byte:
      0005A5 CD 05 EA         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005A8 A6 08            [ 1]  319 	ld a,#8 
      0005AA 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      0005AC 5F               [ 1]  321 	clrw x 
      0005AD CD 06 05         [ 4]  322 1$:	call fetchc  
      0005B0 89               [ 2]  323 	pushw x 
      0005B1 C7 00 0E         [ 1]  324 	ld acc8,a 
      0005B4 5F               [ 1]  325 	clrw x 
      0005B5 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005B8 A6 90            [ 1]  327 	ld a,#16+128
      0005BA CD 18 6B         [ 4]  328 	call prt_acc24
      0005BD 85               [ 2]  329 	popw x 
      0005BE 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005C0 26 EB            [ 1]  331 	jrne 1$ 
      0005C2 A6 08            [ 1]  332 	ld a,#8 
      0005C4 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005C7 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005CA 4F               [ 1]  335 	clr a 
      0005CB C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005CE C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005D1 4F               [ 1]  338 	clr a 
      0005D2 C9 00 18         [ 1]  339 	adc a,farptr 
      0005D5 C7 00 18         [ 1]  340 	ld farptr,a 
      0005D8 CC 05 27         [ 2]  341 	jp repl  
                                    342 
      0005DB 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005EA                        348 print_farptr:
      0005EA C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005ED C7 00 0E         [ 1]  350 	ld acc8,a 
      0005F0 CE 00 18         [ 2]  351 	ldw x,farptr 
      0005F3 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005F6 5F               [ 1]  353 	clrw x 
      0005F7 A6 10            [ 1]  354 	ld a,#16 
      0005F9 CD 18 6B         [ 4]  355 	call prt_acc24
      0005FC A6 20            [ 1]  356 	ld a,#SPACE 
      0005FE CD 08 FF         [ 4]  357 	call putc 
      000601 CD 08 FF         [ 4]  358 	call putc 
      000604 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      000605                        370 fetchc: ; @C
      000605 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000609 5C               [ 1]  372 	incw x
      00060A 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      00060B                        384 number:
      00060B CD 0E F5         [ 4]  385 	call get_token
      00060E A1 84            [ 1]  386 	cp a,#TK_INTGR
      000610 27 03            [ 1]  387 	jreq 1$
      000612 CC 16 A5         [ 2]  388 	jp syntax_error
      000615 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000616                        404 show_row:
      000616 4D               [ 1]  405 	tnz a 
      000617 26 01            [ 1]  406 	jrne 1$
      000619 81               [ 4]  407 	ret 
      00061A                        408 1$:	
      00061A 89               [ 2]  409 	pushw x  
      00061B 88               [ 1]  410 	push a 
      00061C 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      000620 CD 18 54         [ 4]  412 	call prt_i16 
      000623 A6 20            [ 1]  413 	ld a,#SPACE  
      000625 CD 08 FF         [ 4]  414 	call putc
      000628                        415 row_loop:
      000628 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      00062A F6               [ 1]  417 	ld a,(x)
      00062B 5F               [ 1]  418 	clrw x 
      00062C 97               [ 1]  419 	ld xl,a 
      00062D CD 18 54         [ 4]  420 	call prt_i16 
      000630 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      000632 5C               [ 1]  422 	incw x 
      000633 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000635 0A 01            [ 1]  424 	dec (CNT,sp)
      000637 26 EF            [ 1]  425 	jrne row_loop
      000639                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000639 5B 03            [ 2]    1     addw sp,#VSIZE 
      00063B 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00063F A6 0D            [ 1]  428 	ld a,#CR 
      000641 CD 08 FF         [ 4]  429 	call putc 
      000644 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000645                        443 hex_dump:
      000645 88               [ 1]  444 	push a 
      000646                        445 	_vars VSIZE
      000646 52 04            [ 2]    1     sub sp,#VSIZE 
      000648 C6 00 0A         [ 1]  446 	ld a,base
      00064B 6B 03            [ 1]  447 	ld (BASE,sp),a 
      00064D 35 10 00 0A      [ 1]  448 	mov base,#16
      000651 C6 00 23         [ 1]  449 	ld a,tab_width 
      000654 6B 04            [ 1]  450 	ld (TABW,sp),a
      000656 A6 0D            [ 1]  451 	ld a,#CR 
      000658 CD 08 FF         [ 4]  452 	call putc 
      00065B 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      00065D A6 10            [ 1]  454 	ld a,#16
      00065F 90 A3 00 10      [ 2]  455 	cpw y,#16
      000663 2A 02            [ 1]  456 	jrpl 2$
      000665 90 9F            [ 1]  457 	ld a,yl
      000667                        458 2$: 	
      000667 CD 06 16         [ 4]  459 	call show_row 
      00066A 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      00066C 72 A2 00 10      [ 2]  461 	subw y,#16 
      000670 90 A3 00 01      [ 2]  462 	cpw y,#1
      000674 2A E5            [ 1]  463 	jrpl 1$
      000676 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000678 C7 00 0A         [ 1]  465 	ld base,a
      00067B 7B 04            [ 1]  466 	ld a,(TABW,sp)
      00067D C7 00 23         [ 1]  467 	ld tab_width,a 
      000680                        468 	_drop VSIZE
      000680 5B 04            [ 2]    1     addw sp,#VSIZE 
      000682 84               [ 1]  469 	pop a 
      000683 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000684                         45 unlock_eeprom:
      000684 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000689 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      00068D 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000691 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000695 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000699 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00069E 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00069F                         62 unlock_flash:
      00069F 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006A4 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006A8 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006AC 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006B0 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006B4 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006B9 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006BA                         76 row_erase:
      0006BA 88               [ 1]   77 	push a 
      0006BB 90 89            [ 2]   78 	pushw y 
      0006BD 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006C1 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006C5 4F               [ 1]   81 	clr a 
      0006C6 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0006C8 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006CC 90 5C            [ 1]   84     incw y
      0006CE 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006D2 90 5C            [ 1]   86     incw y
      0006D4 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006D8 90 5C            [ 1]   88     incw y
      0006DA 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006DE 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006E3 90 85            [ 2]   91 	popw y 
      0006E5 84               [ 1]   92 	pop a 
      0006E6 81               [ 4]   93 	ret
      0006E7                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006E7                         97 move_erase_to_ram:
      0006E7 89               [ 2]   98 	pushw x 
      0006E8 90 89            [ 2]   99 	pushw y 
      0006EA AE 06 E7         [ 2]  100 	ldw x,#row_erase_end 
      0006ED 1D 06 BA         [ 2]  101 	subw x,#row_erase
      0006F0 CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006F3 AE 16 68         [ 2]  103 	ldw x,#tib 
      0006F6 90 AE 06 BA      [ 2]  104 	ldw y,#row_erase 
      0006FA CD 13 C5         [ 4]  105 	call move
      0006FD 90 85            [ 2]  106 	popw y
      0006FF 85               [ 2]  107 	popw x
      000700 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000701                        123 program_row:
      000701 88               [ 1]  124 	push a 
      000702 90 89            [ 2]  125 	pushw y 
      000704 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000706 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00070A 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00070E 90 5F            [ 1]  130 	clrw y 
      000710 F6               [ 1]  131 1$:	ld a,(x)
      000711 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000715 5C               [ 1]  133 	incw x 
      000716 90 5C            [ 1]  134 	incw y 
      000718 0A 01            [ 1]  135 	dec (BCNT,sp)
      00071A 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00071C 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000721                        139 	_drop 1 
      000721 5B 01            [ 2]    1     addw sp,#1 
      000723 90 85            [ 2]  140 	popw y 
      000725 84               [ 1]  141 	pop a 
      000726 81               [ 4]  142 	ret 
      000727                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000727                        149 move_prg_to_ram:
      000727 89               [ 2]  150 	pushw x 
      000728 90 89            [ 2]  151 	pushw y 
      00072A AE 07 27         [ 2]  152 	ldw x,#program_row_end 
      00072D 1D 07 01         [ 2]  153 	subw x,#program_row 
      000730 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000733 AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000736 90 AE 07 01      [ 2]  156 	ldw y,#program_row ; source address 
      00073A CD 13 C5         [ 4]  157 	call move
      00073D 90 85            [ 2]  158 	popw y 
      00073F 85               [ 2]  159 	popw x  
      000740 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000741                        169 write_buffer:
      000741 89               [ 2]  170 	pushw x 
      000742 72 5D 00 18      [ 1]  171 	tnz farptr 
      000746 26 0D            [ 1]  172 	jrne to_flash 
      000748 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00074B A3 39 00         [ 2]  174 	cpw x,#app_space  
      00074E 24 05            [ 1]  175 	jruge to_flash 
      000750                        176 to_eeprom:
      000750 CD 06 84         [ 4]  177 	call unlock_eeprom
      000753 20 03            [ 2]  178 	jra do_programming
      000755                        179 to_flash:
      000755 CD 06 9F         [ 4]  180 	call unlock_flash
      000758                        181 do_programming:
      000758 85               [ 2]  182 	popw x 
      000759 CD 16 68         [ 4]  183 	call tib
      00075C 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000760 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000764 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000765                        197 block_erase:
      000765 89               [ 2]  198 	pushw x 
      000766 C6 00 18         [ 1]  199 	ld a,farptr 
      000769 26 14            [ 1]  200 	jrne erase_flash
      00076B CE 00 19         [ 2]  201 	ldw x,farptr+1
      00076E A3 39 00         [ 2]  202 	cpw x,#app_space 
      000771 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000773 CD 06 84         [ 4]  205 	call unlock_eeprom 
      000776 CD 16 68         [ 4]  206 	call tib 
      000779 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00077D 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00077F                        210 erase_flash:
      00077F CD 06 9F         [ 4]  211 	call unlock_flash 
      000782 CD 16 68         [ 4]  212 	call tib 
      000785 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000789                        214 erase_exit: 
      000789 85               [ 2]  215 	popw x 
      00078A 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      00078B                        232 write_byte:
      00078B 90 89            [ 2]  233 	pushw y
      00078D                        234 	_vars VSIZE
      00078D 52 02            [ 2]    1     sub sp,#VSIZE 
      00078F 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      000791 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000793 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000797 72 5D 00 18      [ 1]  240 	tnz farptr 
      00079B 26 14            [ 1]  241 	jrne write_flash
      00079D 90 A3 39 00      [ 2]  242     cpw y,#app_space 	 
      0007A1 24 0E            [ 1]  243     jruge write_flash
      0007A3 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007A7 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0007A9 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007AD 22 51            [ 1]  247 	jrugt write_exit
      0007AF 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007B1                        250 write_flash:
      0007B1 CD 06 9F         [ 4]  251 	call unlock_flash 
      0007B4 9B               [ 1]  252 1$:	sim 
      0007B5 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007B7 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007BB 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007C0 9A               [ 1]  256     rim 
      0007C1 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007C5 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007C7                        260 write_eeprom:
      0007C7 CD 06 84         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007CA 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007CE 2B 08            [ 1]  264 	jrmi 1$
      0007D0 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007D4 2A 02            [ 1]  266 	jrpl 1$
      0007D6 03 02            [ 1]  267 	cpl (OPT,sp)
      0007D8                        268 1$: 
      0007D8 0D 02            [ 1]  269     tnz (OPT,sp)
      0007DA 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007DC 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007E0 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007E4                        274 2$: 
      0007E4 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007E6 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007EA 0D 02            [ 1]  277     tnz (OPT,sp)
      0007EC 27 08            [ 1]  278     jreq 3$
      0007EE 5C               [ 1]  279     incw x
      0007EF 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007F1 43               [ 1]  281     cpl a
      0007F2 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007F6 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007FB 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000800                        285 write_exit:
      000800 5C               [ 1]  286 	incw x 
      000801 CD 08 60         [ 4]  287 	call incr_farptr
      000804 5F               [ 1]  288 	clrw x 
      000805                        289 	_drop VSIZE 
      000805 5B 02            [ 2]    1     addw sp,#VSIZE 
      000807 90 85            [ 2]  290 	popw y
      000809 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      00080A                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00080A                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      00080A                        312 write_block::
      00080A 88               [ 1]  313 	push a 
      00080B                        314 	_vars VSIZE
      00080B 52 02            [ 2]    1     sub sp,#VSIZE 
      00080D 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      00080F 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000811 27 13            [ 1]  317 	jreq 9$
      000813 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      000815 90 F6            [ 1]  319 	ld a,(y)
      000817 CD 07 8B         [ 4]  320 	call write_byte 
      00081A 5C               [ 1]  321 	incw x 
      00081B 90 5C            [ 1]  322 	incw y 
      00081D 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      00081F 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000821 5A               [ 2]  325 	decw x
      000822 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      000824 26 ED            [ 1]  327 	jrne 1$
      000826                        328 9$:
      000826 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      000828 CD 08 60         [ 4]  330 	call incr_farptr
      00082B                        331 	_drop VSIZE
      00082B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00082D 84               [ 1]  332 	pop a 
      00082E 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      00082F                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00082F 90 89            [ 2]  351 	pushw y
      000831 88               [ 1]  352 	push a 
      000832 90 93            [ 1]  353 	ldw y,x
      000834 5F               [ 1]  354 	clrw x 
      000835                        355 1$:  
      000835 90 F6            [ 1]  356 	ld a,(y)
      000837 90 5C            [ 1]  357 	incw y
      000839 CD 07 8B         [ 4]  358 	call write_byte 
      00083C 5C               [ 1]  359 	incw x 
      00083D 0A 01            [ 1]  360 	dec (1,sp)  
      00083F 26 F4            [ 1]  361 	jrne 1$ 
      000841 84               [ 1]  362 9$: pop a 
      000842 90 85            [ 2]  363 	popw y 
      000844 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      000845                        373 row_align:
      000845 A6 7F            [ 1]  374 	ld a,#0x7f 
      000847 C4 00 1A         [ 1]  375 	and a,farptr+2 
      00084A 27 13            [ 1]  376 	jreq 1$ 
      00084C CE 00 19         [ 2]  377 	ldw x,farptr+1 
      00084F 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      000852 24 04            [ 1]  379 	jrnc 0$
      000854 72 5C 00 18      [ 1]  380 	inc farptr 
      000858 9F               [ 1]  381 0$: ld a,xl 
      000859 A4 80            [ 1]  382 	and a,#0x80
      00085B 97               [ 1]  383 	ld xl,a
      00085C CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      00085F 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      000860                        393 incr_farptr:
      000860 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      000864 24 04            [ 1]  395 	jrnc 1$
      000866 72 5C 00 18      [ 1]  396 	inc farptr 
      00086A CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      00086D 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      00086E                        408 scan_block:
      00086E 5F               [ 1]  409 	clrw x 
      00086F 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      000873 26 06            [ 1]  411 	jrne 2$
      000875 5C               [ 1]  412 	incw x 
      000876 A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      000879 25 F4            [ 1]  414 	jrult 1$ 
      00087B 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00087C                         66 Uart1RxHandler: ; console receive char 
      00087C 72 0B 52 30 31   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000881 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000884 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000886 26 06            [ 1]   70 	jrne 2$
      000888 CD 08 FF         [ 4]   71 	call putc 
      00088B CC 00 49         [ 2]   72 	jp user_interrupted
      00088E                         73 2$:
      00088E A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000890 26 03            [ 1]   75 	jrne 3$
      000892 CC 00 B5         [ 2]   76 	jp cold_start 	
      000895 A1 1A            [ 1]   77 3$:	cp a,#CTRL_Z 
      000897 26 06            [ 1]   78 	jrne 4$
      000899 CD 08 B3         [ 4]   79 	call clear_autorun
      00089C CC 00 B5         [ 2]   80 	jp cold_start 
      00089F                         81 4$:
      00089F 88               [ 1]   82 	push a 
      0008A0 A6 26            [ 1]   83 	ld a,#rx1_queue 
      0008A2 CB 00 2F         [ 1]   84 	add a,rx1_tail 
      0008A5 5F               [ 1]   85 	clrw x 
      0008A6 97               [ 1]   86 	ld xl,a 
      0008A7 84               [ 1]   87 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0008A8 F7               [ 1]   88 	ld (x),a 
      0008A9 C6 00 2F         [ 1]   89 	ld a,rx1_tail 
      0008AC 4C               [ 1]   90 	inc a 
      0008AD A4 07            [ 1]   91 	and a,#RX_QUEUE_SIZE-1
      0008AF C7 00 2F         [ 1]   92 	ld rx1_tail,a 
      0008B2 80               [11]   93 5$:	iret 
                                     94 
      0008B3                         95 clear_autorun:
      0008B3 AE 40 00         [ 2]   96 	ldw x,#EEPROM_BASE 
      0008B6 CD 29 2D         [ 4]   97 	call erase_header 
      0008B9 81               [ 4]   98 	ret 
                                     99 
                                    100 ;---------------------------------------------
                                    101 ; initialize UART1, 115200 8N1
                                    102 ; input:
                                    103 ;	none
                                    104 ; output:
                                    105 ;   none
                                    106 ;---------------------------------------------
      0008BA                        107 uart1_init:
      0008BA 72 1A 50 02      [ 1]  108     bset PA_DDR,#UART1_TX_PIN
      0008BE 72 1A 50 03      [ 1]  109     bset PA_CR1,#UART1_TX_PIN 
      0008C2 72 1A 50 04      [ 1]  110     bset PA_CR2,#UART1_TX_PIN 
                                    111 ; enable UART1 clock
      0008C6 72 14 50 C7      [ 1]  112 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008CA                        113 uart1_set_baud: 
      0008CA 88               [ 1]  114 	push a 
                                    115 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    116 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008CB A6 E1            [ 1]  117 	ld a,#CLK_SWR_HSI
      0008CD C1 50 C3         [ 1]  118 	cp a,CLK_CMSR 
      0008D0 27 0A            [ 1]  119 	jreq 2$ 
      0008D2                        120 1$: ; 8 Mhz 	
      0008D2 35 05 52 33      [ 1]  121 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008D6 35 04 52 32      [ 1]  122 	mov UART1_BRR1,#0x4
      0008DA 20 08            [ 2]  123 	jra 3$
      0008DC                        124 2$: ; 16 Mhz 	
      0008DC 35 0B 52 33      [ 1]  125 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008E0 35 08 52 32      [ 1]  126 	mov UART1_BRR1,#0x08
      0008E4                        127 3$:
      0008E4 72 5F 52 31      [ 1]  128     clr UART1_DR
      0008E8 35 2C 52 35      [ 1]  129 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008EC 72 10 52 35      [ 1]  130 	bset UART1_CR2,#UART_CR2_SBK
      0008F0 72 0D 52 30 FB   [ 2]  131     btjf UART1_SR,#UART_SR_TC,.
      0008F5 72 5F 00 2E      [ 1]  132     clr rx1_head 
      0008F9 72 5F 00 2F      [ 1]  133 	clr rx1_tail
      0008FD 84               [ 1]  134 	pop a  
      0008FE 81               [ 4]  135 	ret
                                    136 
                                    137 ;---------------------------------
                                    138 ; uart1_putc
                                    139 ; send a character via UART1
                                    140 ; input:
                                    141 ;    A  	character to send
                                    142 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0008FF                        143 putc:: ; console output always on UART1
      0008FF                        144 uart1_putc:: 
      0008FF 72 0F 52 30 FB   [ 2]  145 	btjf UART1_SR,#UART_SR_TXE,.
      000904 C7 52 31         [ 1]  146 	ld UART1_DR,a 
      000907 81               [ 4]  147 	ret 
                                    148 
                                    149 
                                    150 ;---------------------------------
                                    151 ; Query for character in rx1_queue
                                    152 ; input:
                                    153 ;   none 
                                    154 ; output:
                                    155 ;   A     0 no charcter available
                                    156 ;   Z     1 no character available
                                    157 ;---------------------------------
      000908                        158 qgetc::
      000908                        159 uart1_qgetc::
      000908 C6 00 2E         [ 1]  160 	ld a,rx1_head 
      00090B C0 00 2F         [ 1]  161 	sub a,rx1_tail 
      00090E 81               [ 4]  162 	ret 
                                    163 
                                    164 ;---------------------------------
                                    165 ; wait character from UART1 
                                    166 ; input:
                                    167 ;   none
                                    168 ; output:
                                    169 ;   A 			char  
                                    170 ;--------------------------------	
      00090F                        171 getc:: ;console input
      00090F                        172 uart1_getc::
      00090F CD 09 08         [ 4]  173 	call uart1_qgetc
      000912 27 FB            [ 1]  174 	jreq uart1_getc 
      000914 89               [ 2]  175 	pushw x 
                                    176 ;; rx1_queue must be in page 0 	
      000915 A6 26            [ 1]  177 	ld a,#rx1_queue
      000917 CB 00 2E         [ 1]  178 	add a,rx1_head 
      00091A 5F               [ 1]  179 	clrw x  
      00091B 97               [ 1]  180 	ld xl,a 
      00091C F6               [ 1]  181 	ld a,(x)
      00091D 88               [ 1]  182 	push a
      00091E C6 00 2E         [ 1]  183 	ld a,rx1_head 
      000921 4C               [ 1]  184 	inc a 
      000922 A4 07            [ 1]  185 	and a,#RX_QUEUE_SIZE-1
      000924 C7 00 2E         [ 1]  186 	ld rx1_head,a 
      000927 84               [ 1]  187 	pop a  
      000928 85               [ 2]  188 	popw x
      000929 81               [ 4]  189 	ret 
                                    190 
                                    191 ;-----------------------------
                                    192 ;  constants replacing 
                                    193 ;  ANSI sequence received 
                                    194 ;  from terminal.
                                    195 ;  These are the ANSI sequences
                                    196 ;  accepted by function readln
                                    197 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                           000080   198     ARROW_LEFT=128
                           000081   199     ARROW_RIGHT=129
                           000082   200     HOME=130
                           000083   201     KEY_END=131
                           000084   202     SUP=132 
                                    203 
      00092A 43 81 44 80 48 82 46   204 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    205 
                                    206 ;--------------------------------
                                    207 ; receive ANSI ESC 
                                    208 ; sequence and convert it
                                    209 ; to a single character code 
                                    210 ; in range {128..255}
                                    211 ; This is called after receiving 
                                    212 ; ESC character. 
                                    213 ; ignored sequence return 0 
                                    214 ; output:
                                    215 ;   A    converted character 
                                    216 ;-------------------------------
      000936                        217 get_escape:
      000936 CD 09 0F         [ 4]  218     call getc 
      000939 A1 5B            [ 1]  219     cp a,#'[ ; this character is expected after ESC 
      00093B 27 02            [ 1]  220     jreq 1$
      00093D 4F               [ 1]  221     clr a
      00093E 81               [ 4]  222     ret
      00093F CD 09 0F         [ 4]  223 1$: call getc 
      000942 AE 09 2A         [ 2]  224     ldw x,#convert_table
      000945                        225 2$:
      000945 F1               [ 1]  226     cp a,(x)
      000946 27 08            [ 1]  227     jreq 4$
      000948 1C 00 02         [ 2]  228     addw x,#2
      00094B 7D               [ 1]  229     tnz (x)
      00094C 26 F7            [ 1]  230     jrne 2$
      00094E 4F               [ 1]  231     clr a
      00094F 81               [ 4]  232     ret 
      000950 5C               [ 1]  233 4$: incw x 
      000951 F6               [ 1]  234     ld a,(x)
      000952 A1 84            [ 1]  235     cp a,#SUP
      000954 26 05            [ 1]  236     jrne 5$
      000956 88               [ 1]  237     push a 
      000957 CD 09 0F         [ 4]  238     call getc
      00095A 84               [ 1]  239     pop a 
      00095B                        240 5$:
      00095B 81               [ 4]  241     ret 
                                    242 
                                    243 
                                    244 ;-----------------------------
                                    245 ; send an ASCIZ string to UART1 
                                    246 ; input: 
                                    247 ;   x 		char * 
                                    248 ; output:
                                    249 ;   none 
                                    250 ;-------------------------------
      00095C                        251 puts::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00095C F6               [ 1]  252     ld a,(x)
      00095D 27 06            [ 1]  253 	jreq 1$
      00095F CD 08 FF         [ 4]  254 	call putc 
      000962 5C               [ 1]  255 	incw x 
      000963 20 F7            [ 2]  256 	jra puts 
      000965 81               [ 4]  257 1$:	ret 
                                    258 
                                    259 
                                    260 ;---------------------------
                                    261 ; delete character at left 
                                    262 ; of cursor on terminal 
                                    263 ; input:
                                    264 ;   none 
                                    265 ; output:
                                    266 ;	none 
                                    267 ;---------------------------
      000966                        268 bksp:
      000966 A6 08            [ 1]  269 	ld a,#BS 
      000968 CD 08 FF         [ 4]  270 	call putc 
      00096B A6 20            [ 1]  271 	ld a,#SPACE 
      00096D CD 08 FF         [ 4]  272 	call putc 
      000970 A6 08            [ 1]  273 	ld a,#BS 
      000972 CD 08 FF         [ 4]  274 	call putc 
      000975 81               [ 4]  275 	ret 
                                    276 ;---------------------------
                                    277 ; delete n character left of cursor 
                                    278 ; at terminal.
                                    279 ; input: 
                                    280 ;   A   number of characters to delete.
                                    281 ; output:
                                    282 ;    none 
                                    283 ;--------------------------	
      000976                        284 delete_nchar:
      000976 88               [ 1]  285 	push a 
      000977 0D 01            [ 1]  286 0$:	tnz (1,sp)
      000979 27 07            [ 1]  287 	jreq 1$
      00097B CD 09 66         [ 4]  288 	call bksp 
      00097E 0A 01            [ 1]  289 	dec (1,sp)
      000980 20 F5            [ 2]  290 	jra 0$
      000982 84               [ 1]  291 1$:	pop a 
      000983 81               [ 4]  292 	ret
                                    293 
                                    294 ;--------------------------
                                    295 ; send ANSI escape sequence
                                    296 ; ANSI: ESC[
                                    297 ; note: ESC is ASCII 27
                                    298 ;       [   is ASCII 91  
                                    299 ;-------------------------- 
      000984                        300 send_escape:
      000984 A6 1B            [ 1]  301 	ld a,#ESC 
      000986 CD 08 FF         [ 4]  302 	call putc 
      000989 A6 5B            [ 1]  303 	ld a,#'[
      00098B CD 08 FF         [ 4]  304 	call putc 
      00098E 81               [ 4]  305 	ret 
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    307 ;---------------------
                                    308 ;send ANSI parameter value
                                    309 ; ANSI parameter values are 
                                    310 ; sent as ASCII charater 
                                    311 ; not as binary number.
                                    312 ; this routine 
                                    313 ; convert binary number to 
                                    314 ; ASCII string and send it.
                                    315 ; expected range {0..99}
                                    316 ; input: 
                                    317 ; 	A {0..99} 
                                    318 ; output:
                                    319 ;   none 
                                    320 ;---------------------
      00098F                        321 send_parameter:
      00098F 89               [ 2]  322 	pushw x 
      000990 5F               [ 1]  323 	clrw x 
      000991 97               [ 1]  324 	ld xl,a 
      000992 A6 0A            [ 1]  325 	ld a,#10 
      000994 62               [ 2]  326 	div x,a 
      000995 95               [ 1]  327 	ld xh,a 
      000996 9F               [ 1]  328 	ld a,xl
      000997 4D               [ 1]  329     tnz a 
      000998 27 0B            [ 1]  330     jreq 2$
      00099A A1 09            [ 1]  331 	cp a,#9 
      00099C 23 02            [ 2]  332 	jrule 1$
      00099E A6 09            [ 1]  333 	ld a,#9
      0009A0                        334 1$:
      0009A0 AB 30            [ 1]  335 	add a,#'0 
      0009A2 CD 08 FF         [ 4]  336 	call putc
      0009A5 9E               [ 1]  337 2$:	ld a,xh 
      0009A6 AB 30            [ 1]  338 	add a,#'0
      0009A8 CD 08 FF         [ 4]  339 	call putc 
      0009AB 85               [ 2]  340 	popw x 
      0009AC 81               [ 4]  341 	ret 
                                    342 
                                    343 ;--------------------------
                                    344 ; move cursor left n character
                                    345 ; ANSI: ESC[PnD 
                                    346 ; 'Pn' est a numerical parameter
                                    347 ; specifying number of characters 
                                    348 ; displacement.
                                    349 ; input:
                                    350 ;   A     character count
                                    351 ; output:
                                    352 ;   none
                                    353 ;--------------------------
      0009AD                        354 move_left:
      0009AD 88               [ 1]  355 	push a 
      0009AE CD 09 84         [ 4]  356 	call send_escape
      0009B1 84               [ 1]  357     pop a
      0009B2 CD 09 8F         [ 4]  358 	call send_parameter 
      0009B5 A6 44            [ 1]  359 	ld a,#'D 
      0009B7 CD 08 FF         [ 4]  360 	call putc 
      0009BA 81               [ 4]  361 	ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    362 
                                    363 
                                    364 ;--------------------------
                                    365 ; move cursor right n character 
                                    366 ; ANSI: ESC[PnC 
                                    367 ; input:
                                    368 ;   A     character count
                                    369 ; output:
                                    370 ;   none
                                    371 ;--------------------------
      0009BB                        372 move_right:
      0009BB 88               [ 1]  373 	push a 
      0009BC CD 09 84         [ 4]  374 	call send_escape
      0009BF 84               [ 1]  375     pop a
      0009C0 CD 09 8F         [ 4]  376 	call send_parameter 
      0009C3 A6 43            [ 1]  377 	ld a,#'C 
      0009C5 CD 08 FF         [ 4]  378 	call putc 
      0009C8 81               [ 4]  379 	ret 
                                    380 
                                    381 
                                    382 ;--------------------------
                                    383 ; print n spaces on terminal
                                    384 ; input:
                                    385 ;  X 		number of spaces 
                                    386 ; output:
                                    387 ;	none 
                                    388 ;---------------------------
      0009C9                        389 spaces::
      0009C9 A6 20            [ 1]  390 	ld a,#SPACE 
      0009CB 5D               [ 2]  391 1$:	tnzw x
      0009CC 27 06            [ 1]  392 	jreq 9$
      0009CE CD 08 FF         [ 4]  393 	call putc 
      0009D1 5A               [ 2]  394 	decw x
      0009D2 20 F7            [ 2]  395 	jra 1$
      0009D4                        396 9$: 
      0009D4 81               [ 4]  397 	ret 
                                    398 
                                    399 ;--------------------------
                                    400 ; insert character in text 
                                    401 ; line 
                                    402 ; input:
                                    403 ;   A       character to insert 
                                    404 ;   xl      line length
                                    405 ;   xh      insert position 
                                    406 ;   Y       line pointer 
                                    407 ; output:
                                    408 ;   tib     updated 
                                    409 ;   Y       updated  
                                    410 ;-------------------------
                           000001   411 	IPOS=1
                           000002   412 	KCHAR=2 
                           000003   413     LLEN=3 
                           000003   414 	VSIZE=3 
      0009D5                        415 insert_char: 
      0009D5                        416 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0009D5 52 03            [ 2]    1     sub sp,#VSIZE 
      0009D7 6B 02            [ 1]  417     ld (KCHAR,sp),a 
      0009D9 9E               [ 1]  418     ld a,xh 
      0009DA 6B 01            [ 1]  419 	ld (IPOS,sp),a
      0009DC 9F               [ 1]  420     ld a,xl 
      0009DD 6B 03            [ 1]  421     ld (LLEN,sp),a  
      0009DF 93               [ 1]  422     ldw x,y
      0009E0 5C               [ 1]  423     incw x 
      0009E1 7B 03            [ 1]  424     ld a,(LLEN,sp)
      0009E3 10 01            [ 1]  425     sub a,(IPOS,sp)
      0009E5 4C               [ 1]  426     inc a 
      0009E6 C7 00 0E         [ 1]  427     ld acc8,a 
      0009E9 72 5F 00 0D      [ 1]  428     clr acc16
      0009ED CD 13 C5         [ 4]  429     call move
      0009F0 90 AE 16 68      [ 2]  430     ldw y,#tib 
      0009F4 7B 01            [ 1]  431     ld a,(IPOS,sp)
      0009F6 C7 00 0E         [ 1]  432     ld acc8,a 
      0009F9 72 B9 00 0D      [ 2]  433     addw y,acc16 
      0009FD 7B 02            [ 1]  434     ld a,(KCHAR,sp)
      0009FF 90 F7            [ 1]  435     ld (y),a
      000A01 90 5C            [ 1]  436     incw y  
      000A03 7B 01            [ 1]  437     ld a,(IPOS,sp)
      000A05 CD 09 AD         [ 4]  438     call move_left
      000A08 AE 16 68         [ 2]  439     ldw x,#tib 
      000A0B CD 09 5C         [ 4]  440     call puts 
      000A0E 7B 03            [ 1]  441     ld a,(LLEN,sp)
      000A10 10 01            [ 1]  442     sub a,(IPOS,sp) 
      000A12 CD 09 AD         [ 4]  443     call move_left 
      000A15                        444 	_drop VSIZE 
      000A15 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A17 81               [ 4]  445 	ret 
                                    446 
                                    447 
                                    448 ;--------------------------
                                    449 ; delete character under cursor
                                    450 ; input:
                                    451 ;   A       line length   
                                    452 ;   xl      delete position
                                    453 ;   Y       line pointer 
                                    454 ;-------------------------
                           000001   455 	CPOS=1
                           000002   456 	LLEN=2
                           000002   457 	VSIZE=2
      000A18                        458 delete_under:
      000A18                        459 	_vars VSIZE 
      000A18 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1A 6B 02            [ 1]  460     ld (LLEN,sp),a 
      000A1C 9F               [ 1]  461     ld a,xl 
      000A1D 6B 01            [ 1]  462     ld (CPOS,sp),a 
      000A1F 93               [ 1]  463     ldw x,y ; move destination
      000A20 90 5C            [ 1]  464     incw y  ; move source 
      000A22 7B 02            [ 1]  465     ld a,(LLEN,sp)
      000A24 10 01            [ 1]  466     sub a,(CPOS,sp)
      000A26 4C               [ 1]  467     inc a ; move including zero at end.
      000A27 C7 00 0E         [ 1]  468     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000A2A 72 5F 00 0D      [ 1]  469     clr acc16 
      000A2E CD 13 C5         [ 4]  470 	call move 
      000A31 90 AE 16 68      [ 2]  471     ldw y,#tib 
      000A35 7B 01            [ 1]  472     ld a,(CPOS,sp)
      000A37 C7 00 0E         [ 1]  473     ld acc8,a 
      000A3A 72 B9 00 0D      [ 2]  474     addw y,acc16 
      000A3E 93               [ 1]  475     ldw x,y 
      000A3F CD 09 5C         [ 4]  476     call puts 
      000A42 A6 20            [ 1]  477     ld a,#SPACE  
      000A44 CD 08 FF         [ 4]  478     call putc
      000A47 7B 02            [ 1]  479     ld a,(LLEN,sp)
      000A49 10 01            [ 1]  480     sub a,(CPOS,sp)
      000A4B CD 09 AD         [ 4]  481     call move_left 
      000A4E 0A 02            [ 1]  482     dec (LLEN,sp)
      000A50                        483 	_drop VSIZE 
      000A50 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A52 81               [ 4]  484 	ret 
                                    485 
                                    486 ;-----------------------------
                                    487 ; send ANSI sequence to delete
                                    488 ; whole line. Cursor position
                                    489 ; is not updated.
                                    490 ; ANSI: ESC[2K
                                    491 ; input:
                                    492 ;   none
                                    493 ; output:
                                    494 ;   none 
                                    495 ;-----------------------------
      000A53                        496 delete_line:
      000A53 CD 09 84         [ 4]  497     call send_escape
      000A56 A6 32            [ 1]  498 	ld a,#'2
      000A58 CD 08 FF         [ 4]  499 	call putc 
      000A5B A6 4B            [ 1]  500 	ld a,#'K 
      000A5D CD 08 FF         [ 4]  501 	call putc 
      000A60 81               [ 4]  502 	ret 
                                    503 
                                    504 
                                    505 
                                    506 ;------------------------------------
                                    507 ; read a line of text from terminal
                                    508 ;  control keys: 
                                    509 ;    BS   efface caractère à gauche 
                                    510 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    511 ;    CTRL_R  edit previous line.
                                    512 ;    CTRL_D  delete line  
                                    513 ;    HOME  go to start of line  
                                    514 ;    KEY_END  go to end of line 
                                    515 ;    ARROW_LEFT  move cursor left 
                                    516 ;    ARROW_RIGHT  move cursor right 
                                    517 ;    CTRL_O  toggle between insert/overwrite
                                    518 ; input:
                                    519 ;	none
                                    520 ; local variable on stack:
                                    521 ;	LL  line length
                                    522 ;   RXCHAR last received character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    523 ; output:
                                    524 ;   text in tib  buffer
                                    525 ;   count  line length 
                                    526 ;------------------------------------
                                    527 	; local variables
                           000001   528 	LL_HB=1  ; line length high byte 
                           000001   529 	RXCHAR = 1 ; last char received
                           000002   530 	LL = 2  ; accepted line length
                           000003   531 	CPOS=3  ; cursor position 
                           000004   532 	OVRWR=4 ; overwrite flag 
                           000005   533 	YTEMP=5 ; 
                           000006   534 	VSIZE=6 
      000A61                        535 readln::
      000A61 90 89            [ 2]  536 	pushw y 
      000A63                        537 	_vars VSIZE 
      000A63 52 06            [ 2]    1     sub sp,#VSIZE 
      000A65 5F               [ 1]  538 	clrw x 
      000A66 1F 02            [ 2]  539 	ldw (LL,sp),x 
      000A68 1F 03            [ 2]  540 	ldw (CPOS,sp),x 
      000A6A 03 04            [ 1]  541 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A6C 90 AE 16 68      [ 2]  542  	ldw y,#tib ; terminal input buffer
      000A70                        543 readln_loop:
      000A70 CD 09 0F         [ 4]  544 	call getc
      000A73 6B 01            [ 1]  545 	ld (RXCHAR,sp),a
      000A75 A1 1B            [ 1]  546     cp a,#ESC 
      000A77 26 05            [ 1]  547     jrne 0$
      000A79 CD 09 36         [ 4]  548     call get_escape 
      000A7C 6B 01            [ 1]  549     ld (RXCHAR,sp),a 
      000A7E A1 0D            [ 1]  550 0$:	cp a,#CR
      000A80 26 03            [ 1]  551 	jrne 1$
      000A82 CC 0C 09         [ 2]  552 	jp readln_quit
      000A85 A1 0A            [ 1]  553 1$:	cp a,#LF 
      000A87 26 03            [ 1]  554 	jrne 2$ 
      000A89 CC 0C 09         [ 2]  555 	jp readln_quit
      000A8C                        556 2$:
      000A8C A1 08            [ 1]  557 	cp a,#BS
      000A8E 26 12            [ 1]  558 	jrne 3$
                                    559 ; delete left 
      000A90 0D 03            [ 1]  560     tnz (CPOS,sp)
      000A92 27 DC            [ 1]  561     jreq readln_loop 
      000A94 A6 01            [ 1]  562     ld a,#1 
      000A96 CD 09 AD         [ 4]  563     call move_left
      000A99 0A 03            [ 1]  564     dec (CPOS,sp)
      000A9B 90 5A            [ 2]  565     decw y 
      000A9D 7B 03            [ 1]  566     ld a,(CPOS,sp) 
      000A9F CC 0B B5         [ 2]  567     jp 12$
      000AA2                        568 3$:
      000AA2 A1 04            [ 1]  569 	cp a,#CTRL_D
      000AA4 26 1A            [ 1]  570 	jrne 4$
                                    571 ;delete line 
      000AA6 CD 0A 53         [ 4]  572 	call delete_line 
      000AA9 7B 03            [ 1]  573     ld a,(CPOS,sp)
      000AAB 4C               [ 1]  574     inc a 
      000AAC CD 09 AD         [ 4]  575     call move_left 
      000AAF A6 3E            [ 1]  576 	ld a,#'> 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AB1 CD 08 FF         [ 4]  577 	call putc 
      000AB4 90 AE 16 68      [ 2]  578 	ldw y,#tib
      000AB8 90 7F            [ 1]  579 	clr (y)
      000ABA 0F 02            [ 1]  580 	clr (LL,sp)
      000ABC 0F 03            [ 1]  581 	clr (CPOS,sp)
      000ABE 20 B0            [ 2]  582 	jra readln_loop
      000AC0                        583 4$:
      000AC0 A1 12            [ 1]  584 	cp a,#CTRL_R 
      000AC2 26 1E            [ 1]  585 	jrne 5$
                                    586 ;repeat line 
      000AC4 0D 02            [ 1]  587 	tnz (LL,sp)
      000AC6 26 A8            [ 1]  588 	jrne readln_loop
      000AC8 90 AE 16 68      [ 2]  589 	ldw y,#tib 
      000ACC 93               [ 1]  590 	ldw x,y
      000ACD CD 13 99         [ 4]  591 	call strlen
      000AD0 4D               [ 1]  592 	tnz a  
      000AD1 27 9D            [ 1]  593 	jreq readln_loop
      000AD3 6B 02            [ 1]  594 	ld (LL,sp),a 
      000AD5 6B 03            [ 1]  595     ld (CPOS,sp),a
      000AD7 93               [ 1]  596 	ldw x,y  
      000AD8 CD 09 5C         [ 4]  597 	call puts
      000ADB 0F 01            [ 1]  598 	clr (LL_HB,sp)
      000ADD 72 F9 01         [ 2]  599 	addw y,(LL_HB,sp)
      000AE0 20 8E            [ 2]  600 	jra readln_loop 
      000AE2                        601 5$:
      000AE2 A1 05            [ 1]  602 	cp a,#CTRL_E 
      000AE4 26 4D            [ 1]  603 	jrne 6$
                                    604 ;edit line number 
      000AE6 AE 16 68         [ 2]  605 	ldw x,#tib 
      000AE9 17 05            [ 2]  606 	ldw (YTEMP,sp),y  
      000AEB 16 07            [ 2]  607 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000AED CD 18 F6         [ 4]  608 	call atoi24
      000AF0 16 05            [ 2]  609 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000AF2 4F               [ 1]  610 	clr a
      000AF3 CD 0C 45         [ 4]  611 	call search_lineno
      000AF6 5D               [ 2]  612 	tnzw x 
      000AF7 26 0B            [ 1]  613 	jrne 51$
      000AF9 0F 02            [ 1]  614 	clr (LL,sp)
      000AFB 90 AE 16 68      [ 2]  615 	ldw y,#tib
      000AFF 90 7F            [ 1]  616     clr (y) 	
      000B01 CC 0C 09         [ 2]  617 	jp readln_quit  
      000B04                        618 51$:
      000B04 CF 00 04         [ 2]  619 	ldw basicptr,x
      000B07 E6 02            [ 1]  620 	ld a,(2,x)
      000B09 C7 00 02         [ 1]  621 	ld count,a 
      000B0C 90 AE 16 68      [ 2]  622 	ldw y,#tib 
      000B10 CD 11 B5         [ 4]  623 	call decompile 
      000B13 0F 01            [ 1]  624 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  625 	ld a,#CR 
      000B17 CD 08 FF         [ 4]  626 	call putc 
      000B1A A6 3E            [ 1]  627 	ld a,#'>
      000B1C CD 08 FF         [ 4]  628 	call putc
      000B1F AE 16 68         [ 2]  629     ldw x,#tib  
      000B22 CD 13 99         [ 4]  630 	call strlen 
      000B25 6B 02            [ 1]  631 	ld (LL,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B27 CD 09 5C         [ 4]  632 	call puts 
      000B2A 90 93            [ 1]  633 	ldw y,x
      000B2C 7B 02            [ 1]  634     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  635     ld (CPOS,sp),a  
      000B30 CC 0A 70         [ 2]  636 	jp readln_loop
      000B33                        637 6$:
      000B33 A1 81            [ 1]  638 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  639    	jrne 7$ 
                                    640 ; right arrow
      000B37 7B 03            [ 1]  641 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  642     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  643     jrmi 61$
      000B3D CC 0A 70         [ 2]  644     jp readln_loop 
      000B40                        645 61$:
      000B40 A6 01            [ 1]  646     ld a,#1 
      000B42 CD 09 BB         [ 4]  647 	call move_right 
      000B45 0C 03            [ 1]  648 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  649     incw y 
      000B49 CC 0A 70         [ 2]  650     jp readln_loop 
      000B4C A1 80            [ 1]  651 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  652 	jrne 8$
                                    653 ; left arrow 
      000B50 0D 03            [ 1]  654 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  655 	jrne 71$
      000B54 CC 0A 70         [ 2]  656 	jp readln_loop
      000B57                        657 71$:
      000B57 A6 01            [ 1]  658     ld a,#1 
      000B59 CD 09 AD         [ 4]  659 	call move_left 
      000B5C 0A 03            [ 1]  660 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  661     decw y 
      000B60 CC 0A 70         [ 2]  662 	jp readln_loop 
      000B63 A1 82            [ 1]  663 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  664 	jrne 9$
                                    665 ; HOME 
      000B67 7B 03            [ 1]  666     ld a,(CPOS,sp)
      000B69 CD 09 AD         [ 4]  667     call move_left 
      000B6C 0F 03            [ 1]  668 	clr (CPOS,sp)
      000B6E 90 AE 16 68      [ 2]  669     ldw y,#tib 
      000B72 CC 0A 70         [ 2]  670 	jp readln_loop  
      000B75 A1 83            [ 1]  671 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  672 	jrne 10$
                                    673 ; KEY_END 
      000B79 7B 03            [ 1]  674 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  675 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  676 	jrne 91$
      000B7F CC 0A 70         [ 2]  677 	jp readln_loop 
      000B82                        678 91$:
      000B82 7B 02            [ 1]  679 	ld a,(LL,sp)
      000B84 10 03            [ 1]  680 	sub a,(CPOS,sp)
      000B86 CD 09 BB         [ 4]  681 	call move_right 
      000B89 7B 02            [ 1]  682 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  683 	ld (CPOS,sp),a
      000B8D 90 AE 16 68      [ 2]  684     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  685     clr acc16 
      000B95 C7 00 0E         [ 1]  686     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000B98 72 B9 00 0D      [ 2]  687     addw y,acc16  
      000B9C CC 0A 70         [ 2]  688 	jp readln_loop 
      000B9F A1 0F            [ 1]  689 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  690 	jrne 11$ 
                                    691 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  692 	cpl (OVRWR,sp)
      000BA5 CD 26 28         [ 4]  693 	call beep_1khz
      000BA8 CC 0A 70         [ 2]  694 	jp readln_loop 
      000BAB A1 84            [ 1]  695 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  696     jrne final_test 
                                    697 ; del character under cursor 
      000BAF 7B 03            [ 1]  698     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  699     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  700     jrpl 13$
      000BB5                        701 12$:
      000BB5 97               [ 1]  702     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  703     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 18         [ 4]  704     call delete_under
      000BBB 0A 02            [ 1]  705     dec (LLEN,sp)
      000BBD                        706 13$:
      000BBD CC 0A 70         [ 2]  707     jp readln_loop 
      000BC0                        708 final_test:
      000BC0 A1 20            [ 1]  709 	cp a,#SPACE
      000BC2 2A 03            [ 1]  710 	jrpl accept_char
      000BC4 CC 0A 70         [ 2]  711 	jp readln_loop
      000BC7                        712 accept_char:
      000BC7 A6 4F            [ 1]  713 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  714 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  715 	jrpl 1$
      000BCD CC 0A 70         [ 2]  716 	jp readln_loop
      000BD0 0D 04            [ 1]  717 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  718 	jrne overwrite
                                    719 ; insert mode 
      000BD4 7B 03            [ 1]  720     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  721     cp a,(LL,sp)
      000BD8 27 12            [ 1]  722     jreq overwrite
      000BDA 7B 02            [ 1]  723     ld a,(LL,sp)
      000BDC 97               [ 1]  724     ld xl,a 
      000BDD 7B 03            [ 1]  725     ld a,(CPOS,sp)
      000BDF 95               [ 1]  726     ld xh,a
      000BE0 7B 01            [ 1]  727     ld a,(RXCHAR,sp)
      000BE2 CD 09 D5         [ 4]  728     call insert_char
      000BE5 0C 02            [ 1]  729     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  730     inc (CPOS,sp)	
      000BE9 CC 0A 70         [ 2]  731     jp readln_loop 
      000BEC                        732 overwrite:
      000BEC 7B 01            [ 1]  733 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  734 	ld (y),a
      000BF0 90 5C            [ 1]  735     incw y
      000BF2 CD 08 FF         [ 4]  736     call putc 
      000BF5 7B 03            [ 1]  737 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  738 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  739 	jrmi 1$
      000BFB 90 7F            [ 1]  740 	clr (y)
      000BFD 0C 02            [ 1]  741 	inc (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000BFF 0C 03            [ 1]  742     inc (CPOS,sp)
      000C01 CC 0A 70         [ 2]  743 	jp readln_loop 
      000C04                        744 1$:	
      000C04 0C 03            [ 1]  745 	inc (CPOS,sp)
      000C06 CC 0A 70         [ 2]  746 	jp readln_loop 
      000C09                        747 readln_quit:
      000C09 90 AE 16 68      [ 2]  748 	ldw y,#tib
      000C0D 0F 01            [ 1]  749     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  750     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  751     clr (y)
      000C14 7B 02            [ 1]  752 	ld a,(LL,sp)
      000C16 C7 00 02         [ 1]  753 	ld count,a 
      000C19 A6 0D            [ 1]  754 	ld a,#CR
      000C1B CD 08 FF         [ 4]  755 	call putc
      000C1E                        756 	_drop VSIZE 
      000C1E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  757 	popw y 
      000C22 81               [ 4]  758 	ret
                                    759 
                                    760 ;------------------------------
                                    761 ; print byte  in hexadecimal 
                                    762 ; on console
                                    763 ; input:
                                    764 ;    A		byte to print
                                    765 ;------------------------------
      000C23                        766 print_hex::
      000C23 88               [ 1]  767 	push a 
      000C24 4E               [ 1]  768 	swap a 
      000C25 CD 0C 3A         [ 4]  769 	call to_hex_char 
      000C28 CD 08 FF         [ 4]  770 	call putc 
      000C2B 7B 01            [ 1]  771     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  772 	call to_hex_char
      000C30 CD 08 FF         [ 4]  773 	call putc
      000C33 A6 20            [ 1]  774 	ld a,#SPACE 
      000C35 CD 08 FF         [ 4]  775 	call putc 
      000C38 84               [ 1]  776 	pop a 
      000C39 81               [ 4]  777 	ret 
                                    778 
                                    779 ;----------------------------------
                                    780 ; convert to hexadecimal digit 
                                    781 ; input:
                                    782 ;   A       digit to convert 
                                    783 ; output:
                                    784 ;   A       hexdecimal character 
                                    785 ;----------------------------------
      000C3A                        786 to_hex_char::
      000C3A A4 0F            [ 1]  787 	and a,#15 
      000C3C A1 09            [ 1]  788 	cp a,#9 
      000C3E 23 02            [ 2]  789 	jrule 1$ 
      000C40 AB 07            [ 1]  790 	add a,#7
      000C42 AB 30            [ 1]  791 1$: add a,#'0 
      000C44 81               [ 4]  792 	ret 
                                    793 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 C5         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y
      000C9A 90 CF 00 30      [ 2]   99 	ldw dvar_bgn,y 
      000C9E 90 CF 00 32      [ 2]  100 	ldw dvar_end,y   
      000CA2                        101 	_drop VSIZE     
      000CA2 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CA4 81               [ 4]  102 	ret 
                                    103 
                                    104 ;---------------------------------------------
                                    105 ; open a gap in text area to 
                                    106 ; move new line in this gap
                                    107 ; input:
                                    108 ;    X 			addr gap start 
                                    109 ;    Y 			gap length 
                                    110 ; output:
                                    111 ;    X 			addr gap start 
                                    112 ;--------------------------------------------
                           000001   113 	DEST=1
                           000003   114 	SRC=3
                           000005   115 	LEN=5
                           000006   116 	VSIZE=6 
      000CA5                        117 open_gap:
      000CA5 C3 00 1D         [ 2]  118 	cpw x,txtend 
      000CA8 24 31            [ 1]  119 	jruge 9$
      000CAA                        120 	_vars VSIZE
      000CAA 52 06            [ 2]    1     sub sp,#VSIZE 
      000CAC 1F 03            [ 2]  121 	ldw (SRC,sp),x 
      000CAE 17 05            [ 2]  122 	ldw (LEN,sp),y 
      000CB0 90 CF 00 0D      [ 2]  123 	ldw acc16,y 
      000CB4 90 93            [ 1]  124 	ldw y,x ; SRC
      000CB6 72 BB 00 0D      [ 2]  125 	addw x,acc16  
      000CBA 1F 01            [ 2]  126 	ldw (DEST,sp),x 
                                    127 ;compute size to move 	
      000CBC CE 00 1D         [ 2]  128 	ldw x,txtend 
      000CBF 72 F0 03         [ 2]  129 	subw x,(SRC,sp)
      000CC2 CF 00 0D         [ 2]  130 	ldw acc16,x ; size to move
      000CC5 1E 01            [ 2]  131 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000CC7 CD 13 C5         [ 4]  132 	call move
      000CCA CE 00 1D         [ 2]  133 	ldw x,txtend
      000CCD 72 FB 05         [ 2]  134 	addw x,(LEN,sp)
      000CD0 CF 00 1D         [ 2]  135 	ldw txtend,x
      000CD3 CF 00 30         [ 2]  136 	ldw dvar_bgn,x 
      000CD6 CF 00 32         [ 2]  137 	ldw dvar_end,x 
      000CD9                        138 	_drop VSIZE 
      000CD9 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CDB 81               [ 4]  139 9$:	ret 
                                    140 
                                    141 ;--------------------------------------------
                                    142 ; insert line in pad into text area 
                                    143 ; first search for already existing 
                                    144 ; replace existing 
                                    145 ; if new line empty delete existing one. 
                                    146 ; input:
                                    147 ;   ptr16		pointer to tokenized line  
                                    148 ; output:
                                    149 ;   none
                                    150 ;---------------------------------------------
                           000001   151 	DEST=1  ; text area insertion address 
                           000003   152 	SRC=3   ; str to insert address 
                           000005   153 	LINENO=5 ; line number 
                           000007   154 	LLEN=7 ; line length 
                           000008   155 	VSIZE=8  
      000CDC                        156 insert_line:
      000CDC                        157 	_vars VSIZE 
      000CDC 52 08            [ 2]    1     sub sp,#VSIZE 
      000CDE 72 CE 00 19      [ 5]  158 	ldw x,[ptr16]
      000CE2 1F 05            [ 2]  159 	ldw (LINENO,sp),x 
      000CE4 0F 07            [ 1]  160 	clr (LLEN,sp)
      000CE6 CE 00 19         [ 2]  161 	ldw x,ptr16 
      000CE9 E6 02            [ 1]  162 	ld a,(2,x)
      000CEB 6B 08            [ 1]  163 	ld (LLEN+1,sp),a 
      000CED 4F               [ 1]  164 	clr a 
      000CEE 1E 05            [ 2]  165 	ldw x,(LINENO,sp)
      000CF0 CD 0C 45         [ 4]  166 	call search_lineno
      000CF3 5D               [ 2]  167 	tnzw x 
      000CF4 27 07            [ 1]  168 	jreq 0$ 
      000CF6 1F 01            [ 2]  169 	ldw (DEST,sp),x 
      000CF8 CD 0C 70         [ 4]  170 	call del_line 
      000CFB 20 02            [ 2]  171 	jra 1$
      000CFD 17 01            [ 2]  172 0$: ldw (DEST,sp),y
      000CFF A6 03            [ 1]  173 1$: ld a,#3 
      000D01 11 08            [ 1]  174 	cp a,(LLEN+1,sp)
      000D03 27 42            [ 1]  175 	jreq 9$
                                    176 ; check for space 
      000D05 CE 00 1D         [ 2]  177 	ldw x,txtend 
      000D08 72 FB 07         [ 2]  178 	addw x,(LLEN,sp)
      000D0B A3 16 4A         [ 2]  179 	cpw x,#tib-10*CELL_SIZE ; keep 10 slots space for @() array.  
      000D0E 25 0C            [ 1]  180 	jrult 3$
      000D10 72 1C 00 22      [ 1]  181 	bset flags,#FLN_REJECTED
      000D14 AE 14 F8         [ 2]  182 	ldw x,#err_mem_full 
      000D17 CD 09 5C         [ 4]  183 	call puts 
      000D1A 20 2B            [ 2]  184 	jra 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000D1C                        185 3$: ; create gap to insert line 
      000D1C 1E 01            [ 2]  186 	ldw x,(DEST,sp) 
      000D1E 16 07            [ 2]  187 	ldw y,(LLEN,sp)
      000D20 CD 0C A5         [ 4]  188 	call open_gap 
                                    189 ; move new line in gap 
      000D23 1E 07            [ 2]  190 	ldw x,(LLEN,sp)
      000D25 CF 00 0D         [ 2]  191 	ldw acc16,x 
      000D28 90 AE 16 B8      [ 2]  192 	ldw y,#pad ;SRC 
      000D2C 1E 01            [ 2]  193 	ldw x,(DEST,sp) ; dest address 
      000D2E CD 13 C5         [ 4]  194 	call move
      000D31 1E 01            [ 2]  195 	ldw x,(DEST,sp)
      000D33 C3 00 1D         [ 2]  196 	cpw x,txtend 
      000D36 25 0F            [ 1]  197 	jrult 9$ 
      000D38 1E 07            [ 2]  198 	ldw x,(LLEN,sp)
      000D3A 72 BB 00 1D      [ 2]  199 	addw x,txtend 
      000D3E CF 00 1D         [ 2]  200 	ldw txtend,x 
      000D41 CF 00 30         [ 2]  201 	ldw dvar_bgn,x 
      000D44 CF 00 32         [ 2]  202 	ldw dvar_end,x 
      000D47                        203 9$:	
      000D47                        204 	_drop VSIZE
      000D47 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D49 81               [ 4]  205 	ret
                                    206 
                                    207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    208 ;; compiler routines        ;;
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;------------------------------------
                                    211 ; parse quoted string 
                                    212 ; input:
                                    213 ;   Y 	pointer to tib 
                                    214 ;   X   pointer to output buffer 
                                    215 ; output:
                                    216 ;	buffer   parsed string
                                    217 ;------------------------------------
                           000001   218 	PREV = 1
                           000002   219 	CURR =2
                           000002   220 	VSIZE=2
      000D4A                        221 parse_quote: 
      000D4A                        222 	_vars VSIZE 
      000D4A 52 02            [ 2]    1     sub sp,#VSIZE 
      000D4C 4F               [ 1]  223 	clr a
      000D4D 6B 01            [ 1]  224 1$:	ld (PREV,sp),a 
      000D4F                        225 2$:	
      000D4F 91 D6 00         [ 4]  226 	ld a,([in.w],y)
      000D52 27 24            [ 1]  227 	jreq 6$
      000D54 72 5C 00 01      [ 1]  228 	inc in 
      000D58 6B 02            [ 1]  229 	ld (CURR,sp),a 
      000D5A A6 5C            [ 1]  230 	ld a,#'\
      000D5C 11 01            [ 1]  231 	cp a, (PREV,sp)
      000D5E 26 0A            [ 1]  232 	jrne 3$
      000D60 0F 01            [ 1]  233 	clr (PREV,sp)
      000D62 7B 02            [ 1]  234 	ld a,(CURR,sp)
      000D64 AD 1C            [ 4]  235 	callr convert_escape
      000D66 F7               [ 1]  236 	ld (x),a 
      000D67 5C               [ 1]  237 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D68 20 E5            [ 2]  238 	jra 2$
      000D6A                        239 3$:
      000D6A 7B 02            [ 1]  240 	ld a,(CURR,sp)
      000D6C A1 5C            [ 1]  241 	cp a,#'\'
      000D6E 27 DD            [ 1]  242 	jreq 1$
      000D70 A1 22            [ 1]  243 	cp a,#'"
      000D72 27 04            [ 1]  244 	jreq 6$ 
      000D74 F7               [ 1]  245 	ld (x),a 
      000D75 5C               [ 1]  246 	incw x 
      000D76 20 D7            [ 2]  247 	jra 2$
      000D78                        248 6$:
      000D78 7F               [ 1]  249 	clr (x)
      000D79 5C               [ 1]  250 	incw x 
      000D7A 90 93            [ 1]  251 	ldw y,x 
      000D7C 5F               [ 1]  252 	clrw x 
      000D7D A6 02            [ 1]  253 	ld a,#TK_QSTR  
      000D7F                        254 	_drop VSIZE
      000D7F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D81 81               [ 4]  255 	ret 
                                    256 
                                    257 ;---------------------------------------
                                    258 ; called by parse_quote
                                    259 ; subtitute escaped character 
                                    260 ; by their ASCII value .
                                    261 ; input:
                                    262 ;   A  character following '\'
                                    263 ; output:
                                    264 ;   A  substitued char or same if not valid.
                                    265 ;---------------------------------------
      000D82                        266 convert_escape:
      000D82 89               [ 2]  267 	pushw x 
      000D83 AE 0D 97         [ 2]  268 	ldw x,#escaped 
      000D86 F1               [ 1]  269 1$:	cp a,(x)
      000D87 27 06            [ 1]  270 	jreq 2$
      000D89 7D               [ 1]  271 	tnz (x)
      000D8A 27 09            [ 1]  272 	jreq 3$
      000D8C 5C               [ 1]  273 	incw x 
      000D8D 20 F7            [ 2]  274 	jra 1$
      000D8F 1D 0D 97         [ 2]  275 2$: subw x,#escaped 
      000D92 9F               [ 1]  276 	ld a,xl 
      000D93 AB 07            [ 1]  277 	add a,#7
      000D95 85               [ 2]  278 3$:	popw x 
      000D96 81               [ 4]  279 	ret 
                                    280 
      000D97 61 62 74 6E 76 66 72   281 escaped:: .asciz "abtnvfr"
             00
                                    282 
                                    283 ;-------------------------
                                    284 ; integer parser 
                                    285 ; input:
                                    286 ;   X 		point to output buffer  
                                    287 ;   Y 		point to tib 
                                    288 ;   A 	    first digit|'$' 
                                    289 ; output:  
                                    290 ;   X 		integer bits 15..0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    291 ;   A 		TK_INTGR
                                    292 ;   acc24   24 bits integer 
                                    293 ;-------------------------
                           000001   294 	BASE=1
                           000002   295 	TCHAR=2 
                           000003   296 	XSAVE=3
                           000004   297 	VSIZE=4 
      000D9F                        298 parse_integer: ; { -- n }
      000D9F 89               [ 2]  299 	pushw x 	
      000DA0 4B 00            [ 1]  300 	push #0 ; TCHAR
      000DA2 4B 0A            [ 1]  301 	push #10 ; BASE=10
      000DA4 A1 24            [ 1]  302 	cp a,#'$
      000DA6 26 04            [ 1]  303 	jrne 2$ 
      000DA8                        304     _drop #1
      000DA8 5B 01            [ 2]    1     addw sp,##1 
      000DAA 4B 10            [ 1]  305 	push #16  ; BASE=16
      000DAC F7               [ 1]  306 2$:	ld (x),a 
      000DAD 5C               [ 1]  307 	incw x 
      000DAE 91 D6 00         [ 4]  308 	ld a,([in.w],y)
      000DB1 72 5C 00 01      [ 1]  309 	inc in 
      000DB5 CD 18 EA         [ 4]  310 	call to_upper 
      000DB8 6B 02            [ 1]  311 	ld (TCHAR,sp),a 
      000DBA CD 0E 40         [ 4]  312 	call is_digit 
      000DBD 25 ED            [ 1]  313 	jrc 2$
      000DBF A6 10            [ 1]  314 	ld a,#16 
      000DC1 11 01            [ 1]  315 	cp a,(BASE,sp)
      000DC3 26 0A            [ 1]  316 	jrne 3$ 
      000DC5 7B 02            [ 1]  317 	ld a,(TCHAR,sp)
      000DC7 A1 41            [ 1]  318 	cp a,#'A 
      000DC9 2B 04            [ 1]  319 	jrmi 3$ 
      000DCB A1 47            [ 1]  320 	cp a,#'G 
      000DCD 2B DD            [ 1]  321 	jrmi 2$ 
      000DCF 72 5A 00 01      [ 1]  322 3$: dec in 	
      000DD3 7F               [ 1]  323     clr (x)
      000DD4 1E 03            [ 2]  324 	ldw x,(XSAVE,sp)
      000DD6 90 AE 17 73      [ 2]  325 	ldw y,#XSTACK_EMPTY 
      000DDA CD 18 F6         [ 4]  326 	call atoi24
      000DDD 16 03            [ 2]  327 	ldw y,(XSAVE,sp)
      000DDF C6 00 0C         [ 1]  328 	ld a,acc24 
      000DE2 90 F7            [ 1]  329 	ld (y),a 
      000DE4 90 5C            [ 1]  330 	incw y  
      000DE6 CE 00 0D         [ 2]  331 	ldw x,acc16 
      000DE9 90 FF            [ 2]  332 	ldw (y),x 
      000DEB 72 A9 00 02      [ 2]  333 	addw y,#2
      000DEF A6 84            [ 1]  334 	ld a,#TK_INTGR
      000DF1                        335 	_drop VSIZE  
      000DF1 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DF3 81               [ 4]  336 	ret 	
                                    337 
                                    338 ;-------------------------
                                    339 ; binary integer parser
                                    340 ; build integer in acc24  
                                    341 ; input:
                                    342 ;   X 		point to output buffer  
                                    343 ;   Y 		point to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    344 ;   A 	    '&' 
                                    345 ; output:  
                                    346 ;   buffer  TK_INTGR integer  
                                    347 ;   X 		int16 
                                    348 ;   A 		TK_INTGR
                                    349 ;   acc24    int24 
                                    350 ;-------------------------
                           000001   351 	BINARY=1 ; 24 bits integer 
                           000003   352 	VSIZE=3
      000DF4                        353 parse_binary: ; { -- n }
      000DF4 4B 00            [ 1]  354 	push #0
      000DF6 4B 00            [ 1]  355 	push #0
      000DF8 4B 00            [ 1]  356 	push #0
      000DFA                        357 2$:	
      000DFA 91 D6 00         [ 4]  358 	ld a,([in.w],y)
      000DFD 72 5C 00 01      [ 1]  359 	inc in 
      000E01 A1 30            [ 1]  360 	cp a,#'0 
      000E03 27 06            [ 1]  361 	jreq 3$
      000E05 A1 31            [ 1]  362 	cp a,#'1 
      000E07 27 02            [ 1]  363 	jreq 3$ 
      000E09 20 0B            [ 2]  364 	jra bin_exit 
      000E0B A0 30            [ 1]  365 3$: sub a,#'0 
      000E0D 46               [ 1]  366 	rrc a
      000E0E 09 03            [ 1]  367 	rlc (BINARY+2,sp) 
      000E10 09 02            [ 1]  368 	rlc (BINARY+1,sp)
      000E12 09 01            [ 1]  369 	rlc (BINARY,sp) 
      000E14 20 E4            [ 2]  370 	jra 2$  
      000E16                        371 bin_exit:
      000E16 72 5A 00 01      [ 1]  372 	dec in 
      000E1A 90 93            [ 1]  373 	ldw y,x
      000E1C 7B 01            [ 1]  374 	ld a,(BINARY,sp)
      000E1E 90 F7            [ 1]  375 	ld (y),a 
      000E20 90 5C            [ 1]  376 	incw y 
      000E22 1E 02            [ 2]  377 	ldw x,(BINARY+1,sp)
      000E24 90 FF            [ 2]  378 	ldw (y),x 
      000E26 72 A9 00 02      [ 2]  379 	addw y,#2  
      000E2A A6 84            [ 1]  380 	ld a,#TK_INTGR 	
      000E2C                        381 	_drop VSIZE 
      000E2C 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E2E 81               [ 4]  382 	ret
                                    383 
                                    384 ;-------------------------------------
                                    385 ; check if A is a letter 
                                    386 ; input:
                                    387 ;   A 			character to test 
                                    388 ; output:
                                    389 ;   C flag      1 true, 0 false 
                                    390 ;-------------------------------------
      000E2F                        391 is_alpha::
      000E2F A1 41            [ 1]  392 	cp a,#'A 
      000E31 8C               [ 1]  393 	ccf 
      000E32 24 0B            [ 1]  394 	jrnc 9$ 
      000E34 A1 5B            [ 1]  395 	cp a,#'Z+1 
      000E36 25 07            [ 1]  396 	jrc 9$ 
      000E38 A1 61            [ 1]  397 	cp a,#'a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000E3A 8C               [ 1]  398 	ccf 
      000E3B 24 02            [ 1]  399 	jrnc 9$
      000E3D A1 7B            [ 1]  400 	cp a,#'z+1
      000E3F 81               [ 4]  401 9$: ret 	
                                    402 
                                    403 ;------------------------------------
                                    404 ; check if character in {'0'..'9'}
                                    405 ; input:
                                    406 ;    A  character to test
                                    407 ; output:
                                    408 ;    Carry  0 not digit | 1 digit
                                    409 ;------------------------------------
      000E40                        410 is_digit::
      000E40 A1 30            [ 1]  411 	cp a,#'0
      000E42 25 03            [ 1]  412 	jrc 1$
      000E44 A1 3A            [ 1]  413     cp a,#'9+1
      000E46 8C               [ 1]  414 	ccf 
      000E47 8C               [ 1]  415 1$:	ccf 
      000E48 81               [ 4]  416     ret
                                    417 
                                    418 ;-------------------------------------
                                    419 ; return true if character in  A 
                                    420 ; is letter or digit.
                                    421 ; input:
                                    422 ;   A     ASCII character 
                                    423 ; output:
                                    424 ;   A     no change 
                                    425 ;   Carry    0 false| 1 true 
                                    426 ;--------------------------------------
      000E49                        427 is_alnum::
      000E49 CD 0E 40         [ 4]  428 	call is_digit
      000E4C 25 03            [ 1]  429 	jrc 1$ 
      000E4E CD 0E 2F         [ 4]  430 	call is_alpha
      000E51 81               [ 4]  431 1$:	ret 
                                    432 
                                    433 ;-----------------------------
                                    434 ; check if character in A 
                                    435 ; is a valid symbol character 
                                    436 ; valid: Upper case LETTER,DIGIT,'_' 
                                    437 ; input:
                                    438 ;    A   character to validate
                                    439 ; output:
                                    440 ;    Carry   set if valid 
                                    441 ;----------------------------
      000E52                        442 is_symbol_char: 
      000E52 A1 5F            [ 1]  443 	cp a,#'_ 
      000E54 26 03            [ 1]  444 	jrne 1$
      000E56 99               [ 1]  445 	scf 
      000E57 20 03            [ 2]  446 	jra 9$ 
      000E59 CD 0E 49         [ 4]  447 1$:	call is_alnum 
      000E5C 81               [ 4]  448 9$: ret 
                                    449 
                                    450 ;---------------------------
                                    451 ;  when lexical unit begin 
                                    452 ;  with a letter a symbol 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    453 ;  is expected.
                                    454 ; input:
                                    455 ;   A   first character of symbol 
                                    456 ;	X   point to output buffer 
                                    457 ;   Y   point to input text 
                                    458 ; output:
                                    459 ;	X   after symbol 
                                    460 ;   Y   point after lexical unit 
                                    461 ;---------------------------
      000E5D                        462 parse_symbol:
      000E5D 5C               [ 1]  463 	incw x ; keep space for TK_ID 
      000E5E                        464 symb_loop: 
                                    465 ; symbol are converted to upper case 
      000E5E CD 18 EA         [ 4]  466 	call to_upper  
      000E61 F7               [ 1]  467 	ld (x), a 
      000E62 5C               [ 1]  468 	incw x
      000E63 91 D6 00         [ 4]  469 	ld a,([in.w],y)
      000E66 72 5C 00 01      [ 1]  470 	inc in 
      000E6A CD 0E 52         [ 4]  471 	call is_symbol_char 
      000E6D 25 EF            [ 1]  472 	jrc symb_loop 
      000E6F 7F               [ 1]  473 	clr (x)
      000E70 72 5A 00 01      [ 1]  474 	dec in  
      000E74 81               [ 4]  475 	ret 
                                    476 
                                    477 ;---------------------------
                                    478 ;  token begin with a letter,
                                    479 ;  is keyword or variable. 	
                                    480 ; input:
                                    481 ;   X 		point to pad 
                                    482 ;   Y 		point to text
                                    483 ;   A 	    first letter  
                                    484 ; output:
                                    485 ;   X		exec_addr|var_addr 
                                    486 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    487 ;   pad 	keyword|var_name  
                                    488 ;--------------------------  
                           000001   489 	XFIRST=1
                           000002   490 	VSIZE=2
      000E75                        491 parse_keyword: 
      000E75 89               [ 2]  492 	pushw x ; preserve *symbol 
      000E76 CD 0E 5D         [ 4]  493 	call parse_symbol
      000E79 1E 01            [ 2]  494 	ldw x,(XFIRST,sp) 
      000E7B E6 02            [ 1]  495 	ld a,(2,x)
      000E7D 26 0F            [ 1]  496 	jrne 2$
                                    497 ; one letter variable name 
      000E7F E6 01            [ 1]  498 	ld a,(1,x) 
      000E81 A0 41            [ 1]  499 	sub a,#'A 
      000E83 AE 00 03         [ 2]  500 	ldw x,#3 
      000E86 42               [ 4]  501 	mul x,a 
      000E87 1C 00 35         [ 2]  502 	addw x,#vars 
      000E8A A6 85            [ 1]  503 	ld a,#TK_VAR 
      000E8C 20 36            [ 2]  504 	jra 4$ 
      000E8E                        505 2$: ; check for keyword, otherwise syntax error.
      000E8E                        506 	_ldx_dict kword_dict ; dictionary entry point
      000E8E AE 36 DD         [ 2]    1     ldw x,#kword_dict+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E91 16 01            [ 2]  507 	ldw y,(XFIRST,sp) ; name to search for
      000E93 90 5C            [ 1]  508 	incw y 
      000E95 CD 19 77         [ 4]  509 	call search_dict
      000E98 4D               [ 1]  510 	tnz a
      000E99 26 29            [ 1]  511 	jrne 4$
                                    512 ; not in dictionary
                                    513 ; compile it as TK_LABEL
      000E9B 16 01            [ 2]  514 	ldw y,(XFIRST,sp)
      000E9D A6 03            [ 1]  515 	ld a,#TK_LABEL 
      000E9F 90 F7            [ 1]  516 	ld (y),a 
      000EA1 90 5C            [ 1]  517 	incw y
      000EA3 93               [ 1]  518 	ldw x,y 
      000EA4 CD 13 99         [ 4]  519 	call strlen
      000EA7 A1 0F            [ 1]  520 	cp a,#NAME_MAX_LEN 
      000EA9 23 02            [ 2]  521 	jrule 22$ 
      000EAB A6 0F            [ 1]  522 	ld a,#NAME_MAX_LEN 
      000EAD                        523 22$:	
      000EAD 88               [ 1]  524 	push a 
      000EAE                        525 24$:
      000EAE 90 F6            [ 1]  526     ld a,(y)
      000EB0 27 09            [ 1]  527 	jreq 3$
      000EB2 90 5C            [ 1]  528 	incw y
      000EB4 0A 01            [ 1]  529 	dec (1,sp) 
      000EB6 26 F6            [ 1]  530 	jrne 24$
      000EB8 4F               [ 1]  531 	clr a 
      000EB9 90 F7            [ 1]  532 	ld (y),a 
      000EBB 90 5C            [ 1]  533 3$: incw y 
      000EBD                        534 	_drop 1 
      000EBD 5B 01            [ 2]    1     addw sp,#1 
      000EBF A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000EC1 5F               [ 1]  536 	clrw x 
      000EC2 20 1B            [ 2]  537 	jra 5$ 
      000EC4                        538 4$:	
      000EC4 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000EC6 A1 87            [ 1]  540 	cp a,#TK_NOT 
      000EC8 2B 06            [ 1]  541 	jrmi 41$
      000ECA 90 F7            [ 1]  542 	ld (y),a 
      000ECC 90 5C            [ 1]  543 	incw y 
      000ECE 20 0F            [ 2]  544 	jra 5$ 
      000ED0                        545 41$:	
      000ED0 A3 1C EE         [ 2]  546 	cpw x,#let  
      000ED3 27 0A            [ 1]  547 	jreq 5$  ; don't compile LET command 
      000ED5 90 F7            [ 1]  548 	ld (y),a 
      000ED7 90 5C            [ 1]  549 	incw y 
      000ED9 90 FF            [ 2]  550 	ldw (y),x
      000EDB 72 A9 00 02      [ 2]  551 	addw y,#2  
      000EDF                        552 5$:	_drop VSIZE 
      000EDF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EE1 81               [ 4]  553 	ret  	
                                    554 
                                    555 ;------------------------------------
                                    556 ; skip character c in text starting from 'in'
                                    557 ; input:
                                    558 ;	 y 		point to text buffer
                                    559 ;    a 		character to skip
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    560 ; output:  
                                    561 ;	'in' ajusted to new position
                                    562 ;------------------------------------
                           000001   563 	C = 1 ; local var
      000EE2                        564 skip:
      000EE2 88               [ 1]  565 	push a
      000EE3 91 D6 00         [ 4]  566 1$:	ld a,([in.w],y)
      000EE6 27 0A            [ 1]  567 	jreq 2$
      000EE8 11 01            [ 1]  568 	cp a,(C,sp)
      000EEA 26 06            [ 1]  569 	jrne 2$
      000EEC 72 5C 00 01      [ 1]  570 	inc in
      000EF0 20 F1            [ 2]  571 	jra 1$
      000EF2                        572 2$: _drop 1 
      000EF2 5B 01            [ 2]    1     addw sp,#1 
      000EF4 81               [ 4]  573 	ret
                                    574 	
                                    575 
                                    576 ;------------------------------------
                                    577 ; scan text for next token
                                    578 ; input: 
                                    579 ;	X 		pointer to buffer where 
                                    580 ;	        token id and value are copied 
                                    581 ; use:
                                    582 ;	Y   pointer to text in tib 
                                    583 ; output:
                                    584 ;   A       token attribute 
                                    585 ;   X 		token value
                                    586 ;   Y       updated position in output buffer   
                                    587 ;------------------------------------
                                    588 	; use to check special character 
                                    589 	.macro _case c t  
                                    590 	ld a,#c 
                                    591 	cp a,(TCHAR,sp) 
                                    592 	jrne t
                                    593 	.endm 
                                    594 
                           000001   595 	TCHAR=1
                           000002   596 	ATTRIB=2
                           000002   597 	VSIZE=2
      000EF5                        598 get_token:: 
      000EF5                        599 	_vars VSIZE
      000EF5 52 02            [ 2]    1     sub sp,#VSIZE 
                                    600 ;	ld a,in 
                                    601 ;	sub a,count
                                    602 ;   jrmi 0$
                                    603 ;	clr a 
                                    604 ;	ret 
      000EF7                        605 0$: 
      000EF7 90 AE 16 68      [ 2]  606 	ldw y,#tib    	
      000EFB A6 20            [ 1]  607 	ld a,#SPACE
      000EFD CD 0E E2         [ 4]  608 	call skip
      000F00 55 00 01 00 03   [ 1]  609 	mov in.saved,in 
      000F05 91 D6 00         [ 4]  610 	ld a,([in.w],y)
      000F08 26 05            [ 1]  611 	jrne 1$
      000F0A 90 93            [ 1]  612 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000F0C CC 10 A6         [ 2]  613 	jp token_exit ; end of line 
      000F0F 72 5C 00 01      [ 1]  614 1$:	inc in 
      000F13 CD 18 EA         [ 4]  615 	call to_upper 
      000F16 6B 01            [ 1]  616 	ld (TCHAR,sp),a 
                                    617 ; check for quoted string
      000F18                        618 str_tst:  	
      000F18                        619 	_case '"' nbr_tst
      000F18 A6 22            [ 1]    1 	ld a,#'"' 
      000F1A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F1C 26 0A            [ 1]    3 	jrne nbr_tst
      000F1E A6 02            [ 1]  620 	ld a,#TK_QSTR
      000F20 F7               [ 1]  621 	ld (x),a 
      000F21 5C               [ 1]  622 	incw x 
      000F22 CD 0D 4A         [ 4]  623 	call parse_quote
      000F25 CC 10 A6         [ 2]  624 	jp token_exit
      000F28                        625 nbr_tst:
                                    626 ; check for hexadecimal number 
      000F28 A6 24            [ 1]  627 	ld a,#'$'
      000F2A 11 01            [ 1]  628 	cp a,(TCHAR,sp) 
      000F2C 27 17            [ 1]  629 	jreq 1$
                                    630 ;check for binary number 
      000F2E A6 26            [ 1]  631 	ld a,#'&
      000F30 11 01            [ 1]  632 	cp a,(TCHAR,sp)
      000F32 26 0A            [ 1]  633 	jrne 0$
      000F34 A6 84            [ 1]  634 	ld a,#TK_INTGR
      000F36 F7               [ 1]  635 	ld (x),a 
      000F37 5C               [ 1]  636 	incw x 
      000F38 CD 0D F4         [ 4]  637 	call parse_binary ; expect binary integer 
      000F3B CC 10 A6         [ 2]  638 	jp token_exit 
                                    639 ; check for decimal number 	
      000F3E 7B 01            [ 1]  640 0$:	ld a,(TCHAR,sp)
      000F40 CD 0E 40         [ 4]  641 	call is_digit
      000F43 24 0C            [ 1]  642 	jrnc 3$
      000F45 A6 84            [ 1]  643 1$:	ld a,#TK_INTGR 
      000F47 F7               [ 1]  644 	ld (x),a 
      000F48 5C               [ 1]  645 	incw x 
      000F49 7B 01            [ 1]  646 	ld a,(TCHAR,sp)
      000F4B CD 0D 9F         [ 4]  647 	call parse_integer 
      000F4E CC 10 A6         [ 2]  648 	jp token_exit 
      000F51                        649 3$: 
      000F51                        650 	_case '(' bkslsh_tst 
      000F51 A6 28            [ 1]    1 	ld a,#'(' 
      000F53 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F55 26 05            [ 1]    3 	jrne bkslsh_tst
      000F57 A6 06            [ 1]  651 	ld a,#TK_LPAREN
      000F59 CC 10 A2         [ 2]  652 	jp token_char   	
      000F5C                        653 bkslsh_tst: ; character token 
      000F5C                        654 	_case '\',rparnt_tst
      000F5C A6 5C            [ 1]    1 	ld a,#'\' 
      000F5E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F60 26 16            [ 1]    3 	jrne rparnt_tst
      000F62 A6 04            [ 1]  655 	ld a,#TK_CHAR 
      000F64 F7               [ 1]  656 	ld (x),a 
      000F65 5C               [ 1]  657 	incw x 
      000F66 91 D6 00         [ 4]  658 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F69 F7               [ 1]  659 	ld (x),a 
      000F6A 5C               [ 1]  660 	incw x
      000F6B 90 93            [ 1]  661 	ldw y,x 	 
      000F6D 72 5C 00 01      [ 1]  662 	inc in  
      000F71 5F               [ 1]  663 	clrw x 
      000F72 97               [ 1]  664 	ld xl,a 
      000F73 A6 04            [ 1]  665 	ld a,#TK_CHAR 
      000F75 CC 10 A6         [ 2]  666 	jp token_exit 
      000F78                        667 rparnt_tst:		
      000F78                        668 	_case ')' colon_tst 
      000F78 A6 29            [ 1]    1 	ld a,#')' 
      000F7A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7C 26 05            [ 1]    3 	jrne colon_tst
      000F7E A6 07            [ 1]  669 	ld a,#TK_RPAREN 
      000F80 CC 10 A2         [ 2]  670 	jp token_char
      000F83                        671 colon_tst:
      000F83                        672 	_case ':' comma_tst 
      000F83 A6 3A            [ 1]    1 	ld a,#':' 
      000F85 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F87 26 05            [ 1]    3 	jrne comma_tst
      000F89 A6 0A            [ 1]  673 	ld a,#TK_COLON 
      000F8B CC 10 A2         [ 2]  674 	jp token_char  
      000F8E                        675 comma_tst:
      000F8E                        676 	_case COMMA sharp_tst 
      000F8E A6 2C            [ 1]    1 	ld a,#COMMA 
      000F90 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F92 26 05            [ 1]    3 	jrne sharp_tst
      000F94 A6 08            [ 1]  677 	ld a,#TK_COMMA
      000F96 CC 10 A2         [ 2]  678 	jp token_char
      000F99                        679 sharp_tst:
      000F99                        680 	_case SHARP dash_tst 
      000F99 A6 23            [ 1]    1 	ld a,#SHARP 
      000F9B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F9D 26 05            [ 1]    3 	jrne dash_tst
      000F9F A6 09            [ 1]  681 	ld a,#TK_SHARP
      000FA1 CC 10 A2         [ 2]  682 	jp token_char  	 	 
      000FA4                        683 dash_tst: 	
      000FA4                        684 	_case '-' at_tst 
      000FA4 A6 2D            [ 1]    1 	ld a,#'-' 
      000FA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA8 26 05            [ 1]    3 	jrne at_tst
      000FAA A6 11            [ 1]  685 	ld a,#TK_MINUS  
      000FAC CC 10 A2         [ 2]  686 	jp token_char 
      000FAF                        687 at_tst:
      000FAF                        688 	_case '@' qmark_tst 
      000FAF A6 40            [ 1]    1 	ld a,#'@' 
      000FB1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB3 26 05            [ 1]    3 	jrne qmark_tst
      000FB5 A6 05            [ 1]  689 	ld a,#TK_ARRAY 
      000FB7 CC 10 A2         [ 2]  690 	jp token_char
      000FBA                        691 qmark_tst:
      000FBA                        692 	_case '?' tick_tst 
      000FBA A6 3F            [ 1]    1 	ld a,#'?' 
      000FBC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBE 26 12            [ 1]    3 	jrne tick_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000FC0 A6 80            [ 1]  693 	ld a,#TK_CMD  
      000FC2 F7               [ 1]  694 	ld (x),a 
      000FC3 5C               [ 1]  695 	incw x 
      000FC4 90 93            [ 1]  696 	ldw y,x 
      000FC6 AE 20 1A         [ 2]  697 	ldw x,#print
      000FC9 90 FF            [ 2]  698 	ldw (y),x 
      000FCB 72 A9 00 02      [ 2]  699 	addw y,#2
      000FCF CC 10 A6         [ 2]  700 	jp token_exit
      000FD2                        701 tick_tst: ; comment 
      000FD2                        702 	_case TICK plus_tst 
      000FD2 A6 27            [ 1]    1 	ld a,#TICK 
      000FD4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD6 26 2B            [ 1]    3 	jrne plus_tst
      000FD8 A6 80            [ 1]  703 	ld a,#TK_CMD
      000FDA F7               [ 1]  704 	ld (x),a 
      000FDB 5C               [ 1]  705 	incw x
      000FDC 90 AE 21 62      [ 2]  706 	ldw y,#remark 
      000FE0 FF               [ 2]  707 	ldw (x),y 
      000FE1 1C 00 02         [ 2]  708 	addw x,#2  
      000FE4                        709 copy_comment:
      000FE4 90 AE 16 68      [ 2]  710 	ldw y,#tib 
      000FE8 72 B9 00 00      [ 2]  711 	addw y,in.w
      000FEC 90 89            [ 2]  712 	pushw y 
      000FEE CD 13 B5         [ 4]  713 	call strcpy
      000FF1 72 F2 01         [ 2]  714 	subw y,(1,sp)
      000FF4 90 5C            [ 1]  715 	incw y ; strlen+1 
      000FF6 17 01            [ 2]  716 	ldw (1,sp),y 
      000FF8 72 FB 01         [ 2]  717 	addw x,(1,sp) 
      000FFB                        718 	_drop 2 
      000FFB 5B 02            [ 2]    1     addw sp,#2 
      000FFD 4F               [ 1]  719 	clr a 
      000FFE 90 93            [ 1]  720 	ldw y,x 
      001000 CC 10 A6         [ 2]  721 	jp token_exit 
      001003                        722 plus_tst:
      001003                        723 	_case '+' star_tst 
      001003 A6 2B            [ 1]    1 	ld a,#'+' 
      001005 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001007 26 05            [ 1]    3 	jrne star_tst
      001009 A6 10            [ 1]  724 	ld a,#TK_PLUS  
      00100B CC 10 A2         [ 2]  725 	jp token_char 
      00100E                        726 star_tst:
      00100E                        727 	_case '*' slash_tst 
      00100E A6 2A            [ 1]    1 	ld a,#'*' 
      001010 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001012 26 05            [ 1]    3 	jrne slash_tst
      001014 A6 20            [ 1]  728 	ld a,#TK_MULT 
      001016 CC 10 A2         [ 2]  729 	jp token_char 
      001019                        730 slash_tst: 
      001019                        731 	_case '/' prcnt_tst 
      001019 A6 2F            [ 1]    1 	ld a,#'/' 
      00101B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101D 26 05            [ 1]    3 	jrne prcnt_tst
      00101F A6 21            [ 1]  732 	ld a,#TK_DIV 
      001021 CC 10 A2         [ 2]  733 	jp token_char 
      001024                        734 prcnt_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001024                        735 	_case '%' eql_tst 
      001024 A6 25            [ 1]    1 	ld a,#'%' 
      001026 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001028 26 05            [ 1]    3 	jrne eql_tst
      00102A A6 22            [ 1]  736 	ld a,#TK_MOD
      00102C CC 10 A2         [ 2]  737 	jp token_char  
                                    738 ; 1 or 2 character tokens 	
      00102F                        739 eql_tst:
      00102F                        740 	_case '=' gt_tst 		
      00102F A6 3D            [ 1]    1 	ld a,#'=' 
      001031 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001033 26 05            [ 1]    3 	jrne gt_tst
      001035 A6 32            [ 1]  741 	ld a,#TK_EQUAL
      001037 CC 10 A2         [ 2]  742 	jp token_char 
      00103A                        743 gt_tst:
      00103A                        744 	_case '>' lt_tst 
      00103A A6 3E            [ 1]    1 	ld a,#'>' 
      00103C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00103E 26 23            [ 1]    3 	jrne lt_tst
      001040 A6 31            [ 1]  745 	ld a,#TK_GT 
      001042 6B 02            [ 1]  746 	ld (ATTRIB,sp),a 
      001044 91 D6 00         [ 4]  747 	ld a,([in.w],y)
      001047 72 5C 00 01      [ 1]  748 	inc in 
      00104B A1 3D            [ 1]  749 	cp a,#'=
      00104D 26 04            [ 1]  750 	jrne 1$
      00104F A6 33            [ 1]  751 	ld a,#TK_GE 
      001051 20 4F            [ 2]  752 	jra token_char  
      001053 A1 3C            [ 1]  753 1$: cp a,#'<
      001055 26 04            [ 1]  754 	jrne 2$
      001057 A6 35            [ 1]  755 	ld a,#TK_NE 
      001059 20 47            [ 2]  756 	jra token_char 
      00105B 72 5A 00 01      [ 1]  757 2$: dec in
      00105F 7B 02            [ 1]  758 	ld a,(ATTRIB,sp)
      001061 20 3F            [ 2]  759 	jra token_char 	 
      001063                        760 lt_tst:
      001063                        761 	_case '<' other
      001063 A6 3C            [ 1]    1 	ld a,#'<' 
      001065 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001067 26 23            [ 1]    3 	jrne other
      001069 A6 34            [ 1]  762 	ld a,#TK_LT 
      00106B 6B 02            [ 1]  763 	ld (ATTRIB,sp),a 
      00106D 91 D6 00         [ 4]  764 	ld a,([in.w],y)
      001070 72 5C 00 01      [ 1]  765 	inc in 
      001074 A1 3D            [ 1]  766 	cp a,#'=
      001076 26 04            [ 1]  767 	jrne 1$
      001078 A6 36            [ 1]  768 	ld a,#TK_LE 
      00107A 20 26            [ 2]  769 	jra token_char 
      00107C A1 3E            [ 1]  770 1$: cp a,#'>
      00107E 26 04            [ 1]  771 	jrne 2$
      001080 A6 35            [ 1]  772 	ld a,#TK_NE 
      001082 20 1E            [ 2]  773 	jra token_char 
      001084 72 5A 00 01      [ 1]  774 2$: dec in 
      001088 7B 02            [ 1]  775 	ld a,(ATTRIB,sp)
      00108A 20 16            [ 2]  776 	jra token_char 	
      00108C                        777 other: ; not a special character 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00108C 7B 01            [ 1]  778 	ld a,(TCHAR,sp)
      00108E CD 0E 2F         [ 4]  779 	call is_alpha 
      001091 25 03            [ 1]  780 	jrc 30$ 
      001093 CC 16 A5         [ 2]  781 	jp syntax_error 
      001096                        782 30$: 
      001096 CD 0E 75         [ 4]  783 	call parse_keyword
      001099 A3 21 62         [ 2]  784 	cpw x,#remark 
      00109C 26 08            [ 1]  785 	jrne token_exit 
      00109E 93               [ 1]  786 	ldw x,y 
      00109F CC 0F E4         [ 2]  787 	jp copy_comment 
      0010A2                        788 token_char:
      0010A2 F7               [ 1]  789 	ld (x),a 
      0010A3 5C               [ 1]  790 	incw x
      0010A4 90 93            [ 1]  791 	ldw y,x 
      0010A6                        792 token_exit:
      0010A6                        793 	_drop VSIZE 
      0010A6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010A8 81               [ 4]  794 	ret
                                    795 
                                    796 
                                    797 ;-----------------------------------
                                    798 ; create token list fromm text line 
                                    799 ; save this list in pad buffer 
                                    800 ;  compiled line format: 
                                    801 ;    line_no  2 bytes {0...32767}
                                    802 ;    count    1 byte  
                                    803 ;    tokens   variable length 
                                    804 ;   
                                    805 ; input:
                                    806 ;   none
                                    807 ; modified variables:
                                    808 ;   basicptr     token list buffer address 
                                    809 ;   in.w  		 3|count, i.e. index in buffer
                                    810 ;   count        length of line | 0  
                                    811 ;-----------------------------------
                           000001   812 	XSAVE=1
                           000002   813 	VSIZE=2
      0010A9                        814 compile::
      0010A9 90 89            [ 2]  815 	pushw y 
      0010AB                        816 	_vars VSIZE 
      0010AB 52 02            [ 2]    1     sub sp,#VSIZE 
      0010AD 55 00 1B 00 04   [ 1]  817 	mov basicptr,txtbgn
      0010B2 72 1A 00 22      [ 1]  818 	bset flags,#FCOMP 
      0010B6 A6 00            [ 1]  819 	ld a,#0
      0010B8 AE 00 00         [ 2]  820 	ldw x,#0
      0010BB CF 16 B8         [ 2]  821 	ldw pad,x ; destination buffer 
      0010BE C7 16 BA         [ 1]  822 	ld pad+2,a ; count 
      0010C1 AE 16 BB         [ 2]  823 	ldw x,#pad+3
      0010C4 72 5F 00 01      [ 1]  824 	clr in 
      0010C8 CD 0E F5         [ 4]  825 	call get_token
      0010CB A1 84            [ 1]  826 	cp a,#TK_INTGR
      0010CD 26 11            [ 1]  827 	jrne 2$
      0010CF A3 00 01         [ 2]  828 	cpw x,#1 
      0010D2 2A 05            [ 1]  829 	jrpl 1$
      0010D4 A6 0A            [ 1]  830 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0010D6 CC 16 A7         [ 2]  831 	jp tb_error
      0010D9 CF 16 B8         [ 2]  832 1$:	ldw pad,x ; line# 
      0010DC 90 AE 16 BB      [ 2]  833 	ldw y,#pad+3 
      0010E0 90 A3 17 38      [ 2]  834 2$:	cpw y,#xstack_full 
      0010E4 25 05            [ 1]  835 	jrult 3$
      0010E6 A6 0F            [ 1]  836 	ld a,#ERR_BUF_FULL 
      0010E8 CC 16 A7         [ 2]  837 	jp tb_error 
      0010EB                        838 3$:	
      0010EB 93               [ 1]  839 	ldw x,y 
      0010EC CD 0E F5         [ 4]  840 	call get_token 
      0010EF A1 00            [ 1]  841 	cp a,#TK_NONE 
      0010F1 26 ED            [ 1]  842 	jrne 2$ 
                                    843 ; compilation completed  
      0010F3 72 A2 16 B8      [ 2]  844 	subw y,#pad ; compiled line length 
      0010F7 90 9F            [ 1]  845     ld a,yl
      0010F9 AE 16 B8         [ 2]  846 	ldw x,#pad 
      0010FC CF 00 19         [ 2]  847 	ldw ptr16,x 
      0010FF E7 02            [ 1]  848 	ld (2,x),a 
      001101 FE               [ 2]  849 	ldw x,(x)  ; line# 
      001102 27 09            [ 1]  850 	jreq 10$
      001104 CD 0C DC         [ 4]  851 	call insert_line
      001107 72 5F 00 02      [ 1]  852 	clr  count 
      00110B 20 0F            [ 2]  853 	jra  11$ 
      00110D                        854 10$: ; line# is zero 
      00110D CE 00 19         [ 2]  855 	ldw x,ptr16  
      001110 CF 00 04         [ 2]  856 	ldw basicptr,x 
      001113 E6 02            [ 1]  857 	ld a,(2,x)
      001115 C7 00 02         [ 1]  858 	ld count,a 
      001118 35 03 00 01      [ 1]  859 	mov in,#3 
      00111C                        860 11$:
      00111C                        861 	_drop VSIZE 
      00111C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00111E 72 1B 00 22      [ 1]  862 	bres flags,#FCOMP 
      001122 90 85            [ 2]  863 	popw y 
      001124 81               [ 4]  864 	ret 
                                    865 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001125                         48 cpy_cmd_name:
      001125 5D               [ 2]   49 	tnzw x 
      001126 27 14            [ 1]   50 	jreq 10$
      001128 F6               [ 1]   51 	ld a,(x)
      001129 5C               [ 1]   52 	incw x
      00112A A4 0F            [ 1]   53 	and a,#15  
      00112C 88               [ 1]   54 	push a 
      00112D 0D 01            [ 1]   55     tnz (1,sp) 
      00112F 27 0A            [ 1]   56 	jreq 9$
      001131 F6               [ 1]   57 1$:	ld a,(x)
      001132 90 F7            [ 1]   58 	ld (y),a  
      001134 5C               [ 1]   59 	incw x
      001135 90 5C            [ 1]   60 	incw y 
      001137 0A 01            [ 1]   61 	dec (1,sp)	 
      001139 26 F6            [ 1]   62 	jrne 1$
      00113B 84               [ 1]   63 9$: pop a 
      00113C                         64 10$: 
      00113C 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00113D                         75 add_space:
      00113D 90 5A            [ 2]   76 	decw y 
      00113F 90 F6            [ 1]   77 	ld a,(y)
      001141 90 5C            [ 1]   78 	incw y
      001143 A1 29            [ 1]   79 	cp a,#') 
      001145 27 05            [ 1]   80 	jreq 0$
      001147 CD 0E 49         [ 4]   81 	call is_alnum 
      00114A 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00114C                         83 0$: 
      00114C A6 20            [ 1]   84 	ld a,#SPACE 
      00114E 90 F7            [ 1]   85 	ld (y),a 
      001150 90 5C            [ 1]   86 	incw y 
      001152 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001153                         99 right_align::
      001153 88               [ 1]  100 	push a 
      001154 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001156 C1 00 23         [ 1]  102 	cp a,tab_width 
      001159 2A 08            [ 1]  103 	jrpl 1$
      00115B A6 20            [ 1]  104 	ld a,#SPACE 
      00115D 5A               [ 2]  105 	decw x
      00115E F7               [ 1]  106 	ld (x),a  
      00115F 0C 01            [ 1]  107 	inc (1,sp)
      001161 20 F1            [ 2]  108 	jra 0$ 
      001163 84               [ 1]  109 1$: pop a 	
      001164 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001165                        123 cpy_quote:
      001165 A6 22            [ 1]  124 	ld a,#'"
      001167 90 F7            [ 1]  125 	ld (y),a 
      001169 90 5C            [ 1]  126 	incw y 
      00116B 89               [ 2]  127 	pushw x 
      00116C CD 18 25         [ 4]  128 	call skip_string 
      00116F 85               [ 2]  129 	popw x 
      001170 F6               [ 1]  130 1$:	ld a,(x)
      001171 27 30            [ 1]  131 	jreq 9$
      001173 5C               [ 1]  132 	incw x 
      001174 A1 20            [ 1]  133 	cp a,#SPACE 
      001176 25 0E            [ 1]  134 	jrult 3$
      001178 90 F7            [ 1]  135 	ld (y),a
      00117A 90 5C            [ 1]  136 	incw y 
      00117C A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00117E 26 F0            [ 1]  138 	jrne 1$ 
      001180                        139 2$:
      001180 90 F7            [ 1]  140 	ld (y),a
      001182 90 5C            [ 1]  141 	incw y  
      001184 20 EA            [ 2]  142 	jra 1$
      001186 88               [ 1]  143 3$: push a 
      001187 A6 5C            [ 1]  144 	ld a,#'\
      001189 90 F7            [ 1]  145 	ld (y),a 
      00118B 90 5C            [ 1]  146 	incw y  
      00118D 84               [ 1]  147 	pop a 
      00118E A0 07            [ 1]  148 	sub a,#7
      001190 C7 00 0E         [ 1]  149 	ld acc8,a 
      001193 72 5F 00 0D      [ 1]  150 	clr acc16
      001197 89               [ 2]  151 	pushw x
      001198 AE 0D 97         [ 2]  152 	ldw x,#escaped 
      00119B 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00119F F6               [ 1]  154 	ld a,(x)
      0011A0 85               [ 2]  155 	popw x
      0011A1 20 DD            [ 2]  156 	jra 2$
      0011A3 A6 22            [ 1]  157 9$: ld a,#'"
      0011A5 90 F7            [ 1]  158 	ld (y),a 
      0011A7 90 5C            [ 1]  159 	incw y  
      0011A9 5C               [ 1]  160 	incw x 
      0011AA 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      0011AB                        171 var_name::
      0011AB 1D 00 35         [ 2]  172 		subw x,#vars 
      0011AE A6 03            [ 1]  173 		ld a,#3
      0011B0 62               [ 2]  174 		div x,a 
      0011B1 9F               [ 1]  175 		ld a,xl 
      0011B2 AB 41            [ 1]  176 		add a,#'A 
      0011B4 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011B5                        195 decompile::
      0011B5                        196 	_vars VSIZE
      0011B5 52 04            [ 2]    1     sub sp,#VSIZE 
      0011B7 C6 00 0A         [ 1]  197 	ld a,base
      0011BA 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011BC C6 00 23         [ 1]  199 	ld a,tab_width 
      0011BF 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011C1 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011C3 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011C7 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011CB 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011CF 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011D3 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011D6 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011D7 CD 18 91         [ 4]  208 	call itoa  
      0011DA CD 11 53         [ 4]  209 	call right_align 
      0011DD 88               [ 1]  210 	push a 
      0011DE 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011E0 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011E2 CD 13 B5         [ 4]  213 	call strcpy 
      0011E5 90 5F            [ 1]  214 	clrw y 
      0011E7 84               [ 1]  215 	pop a 
      0011E8 90 97            [ 1]  216 	ld yl,a 
      0011EA 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011ED A6 20            [ 1]  218 	ld a,#SPACE 
      0011EF 90 F7            [ 1]  219 	ld (y),a 
      0011F1 90 5C            [ 1]  220 	incw y 
      0011F3 72 5F 00 23      [ 1]  221 	clr tab_width
      0011F7 AE 00 03         [ 2]  222 	ldw x,#3
      0011FA CF 00 00         [ 2]  223 	ldw in.w,x 
      0011FD                        224 decomp_loop:
      0011FD 90 89            [ 2]  225 	pushw y
      0011FF CD 18 0C         [ 4]  226 	call next_token 
      001202 90 85            [ 2]  227 	popw y 
      001204 4D               [ 1]  228 	tnz a  
      001205 26 03            [ 1]  229 	jrne 1$
      001207 CC 13 2A         [ 2]  230 	jp 20$
      00120A 2B 03            [ 1]  231 1$:	jrmi 2$
      00120C CC 12 9B         [ 2]  232 	jp 6$
      00120F                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      00120F A1 85            [ 1]  234 	cp a,#TK_VAR 
      001211 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001213 CD 11 3D         [ 4]  237 	call add_space
      001216 CD 18 34         [ 4]  238 	call get_addr   
      001219 CD 11 AB         [ 4]  239 	call var_name
      00121C 90 F7            [ 1]  240 	ld (y),a 
      00121E 90 5C            [ 1]  241 	incw y  
      001220 20 DB            [ 2]  242 	jra decomp_loop
      001222                        243 3$:
      001222 A1 84            [ 1]  244 	cp a,#TK_INTGR
      001224 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001226 CD 18 3E         [ 4]  247 	call get_int24 
      001229 C7 00 0C         [ 1]  248 	ld acc24,a 
      00122C CF 00 0D         [ 2]  249 	ldw acc16,x 
      00122F CD 11 3D         [ 4]  250 	call add_space
      001232 90 89            [ 2]  251 	pushw y 
      001234 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001236 CD 18 91         [ 4]  253 	call itoa  
      001239 16 01            [ 2]  254 	ldw y,(1,sp) 
      00123B 88               [ 1]  255 	push a 
      00123C 51               [ 1]  256 	exgw x,y 
      00123D CD 13 B5         [ 4]  257 	call strcpy 
      001240 90 5F            [ 1]  258 	clrw y
      001242 84               [ 1]  259 	pop a  
      001243 90 97            [ 1]  260 	ld yl,a 
      001245 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001248                        262 	_drop 2 
      001248 5B 02            [ 2]    1     addw sp,#2 
      00124A 20 B1            [ 2]  263 	jra decomp_loop
      00124C                        264 4$: ; dictionary keyword
      00124C A1 87            [ 1]  265 	cp a,#TK_NOT 
      00124E 24 39            [ 1]  266 	jruge 50$ 
      001250 FE               [ 2]  267 	ldw x,(x)
      001251 72 5C 00 01      [ 1]  268 	inc in 
      001255 72 5C 00 01      [ 1]  269 	inc in 
      001259 A3 21 62         [ 2]  270 	cpw x,#remark 
      00125C 26 23            [ 1]  271 	jrne 5$
      00125E CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      001261 CD 11 3D         [ 4]  274 	call add_space
      001264 A6 27            [ 1]  275 	ld a,#''
      001266 90 F7            [ 1]  276 	ld (y),a 
      001268 90 5C            [ 1]  277 	incw y 
      00126A                        278 46$:
      00126A 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00126E 72 5C 00 01      [ 1]  280 	inc in  
      001272 90 F7            [ 1]  281 	ld (y),a 
      001274 90 5C            [ 1]  282 	incw y 
      001276 C6 00 01         [ 1]  283 	ld a,in 
      001279 C1 00 02         [ 1]  284 	cp a,count 
      00127C 2B EC            [ 1]  285 	jrmi 46$
      00127E CC 13 2A         [ 2]  286 	jp 20$  
      001281 A3 1C EE         [ 2]  287 5$: cpw x,#let  
      001284 26 05            [ 1]  288 	jrne 54$
      001286 CC 11 FD         [ 2]  289 	jp decomp_loop ; down display LET
      001289                        290 50$:
      001289 5F               [ 1]  291 	clrw x 
      00128A 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      00128B                        297 54$: ; insert command name 
      00128B CD 11 3D         [ 4]  298 	call add_space  
      00128E 90 89            [ 2]  299 	pushw y
      001290 CD 13 65         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001293 90 85            [ 2]  301 	popw y 
      001295 CD 11 25         [ 4]  302 	call cpy_cmd_name
      001298 CC 11 FD         [ 2]  303 	jp decomp_loop 
      00129B                        304 6$:
                                    305 ; label?
      00129B A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00129D 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00129F A6 20            [ 1]  309 	ld a,#32 
      0012A1 90 F7            [ 1]  310 	ld (y),a 
      0012A3 90 5C            [ 1]  311 	incw y 
      0012A5                        312 61$:
      0012A5 89               [ 2]  313 	pushw x 
      0012A6 CD 18 25         [ 4]  314 	call skip_string 
      0012A9 85               [ 2]  315 	popw x 
      0012AA                        316 62$:	
      0012AA F6               [ 1]  317 	ld a,(x)
      0012AB 27 07            [ 1]  318 	jreq 63$ 
      0012AD 5C               [ 1]  319 	incw x  
      0012AE 90 F7            [ 1]  320 	ld (y),a 
      0012B0 90 5C            [ 1]  321 	incw y 
      0012B2 20 F6            [ 2]  322 	jra 62$ 
      0012B4                        323 63$: 
      0012B4 A6 20            [ 1]  324 	ld a,#32 
      0012B6 90 F7            [ 1]  325 	ld (y),a 
      0012B8 90 5C            [ 1]  326 	incw y 
      0012BA CC 11 FD         [ 2]  327 	jp decomp_loop
      0012BD                        328 64$:
      0012BD A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012BF 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012C1 CD 11 3D         [ 4]  332 	call add_space
      0012C4 CD 11 65         [ 4]  333 	call cpy_quote  
      0012C7 CC 11 FD         [ 2]  334 	jp decomp_loop
      0012CA                        335 7$:
      0012CA A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012CC 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012CE CD 11 3D         [ 4]  339 	call add_space 
      0012D1 A6 5C            [ 1]  340 	ld a,#'\ 
      0012D3 90 F7            [ 1]  341 	ld (y),a 
      0012D5 90 5C            [ 1]  342 	incw y
      0012D7 F6               [ 1]  343 	ld a,(x)
      0012D8 72 5C 00 01      [ 1]  344 	inc in  
      0012DC 20 06            [ 2]  345 	jra 81$
      0012DE A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012E0 26 09            [ 1]  347 	jrne 9$
      0012E2 A6 3A            [ 1]  348 	ld a,#':
      0012E4                        349 81$:
      0012E4 90 F7            [ 1]  350 	ld (y),a 
      0012E6 90 5C            [ 1]  351 	incw y 
      0012E8                        352 82$:
      0012E8 CC 11 FD         [ 2]  353 	jp decomp_loop
      0012EB                        354 9$: 
      0012EB A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0012ED 22 0A            [ 1]  356 	jrugt 10$ 
      0012EF A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012F1 5F               [ 1]  358 	clrw x 
      0012F2 97               [ 1]  359 	ld xl,a
      0012F3 1C 13 40         [ 2]  360 	addw x,#single_char 
      0012F6 F6               [ 1]  361 	ld a,(x)
      0012F7 20 EB            [ 2]  362 	jra 81$ 
      0012F9                        363 10$: 
      0012F9 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012FB 22 0A            [ 1]  365 	jrugt 11$
      0012FD A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012FF 5F               [ 1]  367 	clrw x 
      001300 97               [ 1]  368 	ld xl,a 
      001301 1C 13 45         [ 2]  369 	addw x,#add_char 
      001304 F6               [ 1]  370 	ld a,(x)
      001305 20 DD            [ 2]  371 	jra 81$
      001307                        372 11$:
      001307 A1 22            [ 1]  373     cp a,#TK_MOD 
      001309 22 0A            [ 1]  374 	jrugt 12$
      00130B A0 20            [ 1]  375 	sub a,#TK_MULT
      00130D 5F               [ 1]  376 	clrw x 
      00130E 97               [ 1]  377 	ld xl,a 
      00130F 1C 13 47         [ 2]  378 	addw x,#mul_char
      001312 F6               [ 1]  379 	ld a,(x)
      001313 20 CF            [ 2]  380 	jra 81$
      001315                        381 12$:
      001315 A0 31            [ 1]  382 	sub a,#TK_GT  
      001317 48               [ 1]  383 	sll a 
      001318 5F               [ 1]  384 	clrw x 
      001319 97               [ 1]  385 	ld xl,a 
      00131A 1C 13 4A         [ 2]  386 	addw x,#relop_str 
      00131D FE               [ 2]  387 	ldw x,(x)
      00131E F6               [ 1]  388 	ld a,(x)
      00131F 5C               [ 1]  389 	incw x 
      001320 90 F7            [ 1]  390 	ld (y),a
      001322 90 5C            [ 1]  391 	incw y 
      001324 F6               [ 1]  392 	ld a,(x)
      001325 26 BD            [ 1]  393 	jrne 81$
      001327 CC 11 FD         [ 2]  394 	jp decomp_loop 
      00132A                        395 20$: 
      00132A 90 7F            [ 1]  396 	clr (y)
      00132C 1E 03            [ 2]  397 	ldw x,(STR,sp)
      00132E 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      001330 C7 00 0A         [ 1]  399 	ld base,a 
      001333 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001335 C7 00 23         [ 1]  401 	ld tab_width,a
      001338 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      00133B 90 9F            [ 1]  403 	ld a,yl 
      00133D                        404 	_drop VSIZE 
      00133D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00133F 81               [ 4]  405 	ret 
                                    406 
      001340 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001345 2B 2D                  408 add_char: .byte '+','-'
      001347 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00134A 13 56 13 58 13 5A 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             5D 13 62 13 5F
      001356 3E 00                  411 gt: .asciz ">"
      001358 3D 00                  412 equal: .asciz "="
      00135A 3E 3D 00               413 ge: .asciz ">="
      00135D 3C 00                  414 lt: .asciz "<"
      00135F 3C 3D 00               415 le: .asciz "<="
      001362 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001365                        429 cmd_name:
      001365                        430 	_vars VSIZE 
      001365 52 04            [ 2]    1     sub sp,#VSIZE 
      001367 72 5F 00 0D      [ 1]  431 	clr acc16 
      00136B 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00136D AE 36 DB         [ 2]  433 	ldw x,#kword_dict	
      001370 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      001372 E6 02            [ 1]  435 	ld a,(2,x)
      001374 A4 0F            [ 1]  436 	and a,#15 
      001376 C7 00 0E         [ 1]  437 	ld acc8,a 
      001379 1C 00 03         [ 2]  438 	addw x,#3
      00137C 72 BB 00 0D      [ 2]  439 	addw x,acc16
      001380 FE               [ 2]  440 	ldw x,(x) ; code address   
      001381 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001383 27 0C            [ 1]  442 	jreq 2$
      001385 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001387 FE               [ 2]  444 	ldw x,(x) 
      001388 1D 00 02         [ 2]  445 	subw x,#2  
      00138B 26 E3            [ 1]  446 	jrne 1$
      00138D 4F               [ 1]  447 	clr a 
      00138E 5F               [ 1]  448 	clrw x 
      00138F 20 05            [ 2]  449 	jra 9$
      001391 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001393 1C 00 02         [ 2]  451 	addw x,#2 	
      001396                        452 9$:	_drop VSIZE
      001396 5B 04            [ 2]    1     addw sp,#VSIZE 
      001398 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
                                     64 ; keep the following 3 variables in this order 
      000000                         65 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         66 in::    .blkb 1 ; low byte of in.w 
      000002                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000003                         68 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000004                         69 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         70 data_ptr:  .blkw 1  ; point to DATA address
      000008                         71 data_ofs:  .blkb 1  ; index to next data item 
      000009                         72 data_len:  .blkb 1  ; length of data line 
      00000A                         73 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         74 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         75 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         76 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         77 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         78 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         79 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         80 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         81 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         82 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         83 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         84 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         85 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         86 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         87 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         88 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         89 flags:: .blkb 1 ; various boolean flags
      000023                         90 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         91 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         92 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         93 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         94 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         95 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         96 dvar_end:: .blkw 1 ; DIM variables end address 
      000034                         97 chain_level: .blkb 1 ; increment for each CHAIN command 
                                     98 ; 24 bits integer variables 
      000035                         99 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                    100 
                                    101 	.area BTXT (ABS)
      00008C                        102 	.org 0x8C  
                                    103 ; keep 'free_ram' as last variable 
                                    104 ; basic code compiled here. 
      00008C                        105 rsign: .blkw 1 ; "TB" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      00008E                        106 rsize: .blkw 1 ; code size 	 
      000090                        107 free_ram: ; from here RAM free for BASIC text 
                                    108 
                                    109 	.area CODE 
                                    110 
                                    111 
                                    112 ;-------------------------------------
                                    113 ; retrun string length
                                    114 ; input:
                                    115 ;   X         .asciz  pointer 
                                    116 ; output:
                                    117 ;   X         not affected 
                                    118 ;   A         length 
                                    119 ;-------------------------------------
      001399                        120 strlen::
      001399 89               [ 2]  121 	pushw x 
      00139A 4F               [ 1]  122 	clr a
      00139B 7D               [ 1]  123 1$:	tnz (x) 
      00139C 27 04            [ 1]  124 	jreq 9$ 
      00139E 4C               [ 1]  125 	inc a 
      00139F 5C               [ 1]  126 	incw x 
      0013A0 20 F9            [ 2]  127 	jra 1$ 
      0013A2 85               [ 2]  128 9$:	popw x 
      0013A3 81               [ 4]  129 	ret 
                                    130 
                                    131 ;------------------------------------
                                    132 ; compare 2 strings
                                    133 ; input:
                                    134 ;   X 		char* first string 
                                    135 ;   Y       char* second string 
                                    136 ; output:
                                    137 ;   A 		0 not == |1 ==  
                                    138 ;-------------------------------------
      0013A4                        139 strcmp:
      0013A4 F6               [ 1]  140 	ld a,(x)
      0013A5 27 0B            [ 1]  141 	jreq 5$ 
      0013A7 90 F1            [ 1]  142 	cp a,(y) 
      0013A9 26 05            [ 1]  143 	jrne 4$ 
      0013AB 5C               [ 1]  144 	incw x 
      0013AC 90 5C            [ 1]  145 	incw y 
      0013AE 20 F4            [ 2]  146 	jra strcmp 
      0013B0                        147 4$: ; not same  
      0013B0 4F               [ 1]  148 	clr a 
      0013B1 81               [ 4]  149 	ret 
      0013B2                        150 5$: ; same 
      0013B2 A6 01            [ 1]  151 	ld a,#1 
      0013B4 81               [ 4]  152 	ret 
                                    153 
                                    154 
                                    155 ;---------------------------------------
                                    156 ;  copy src to dest 
                                    157 ; input:
                                    158 ;   X 		dest 
                                    159 ;   Y 		src 
                                    160 ; output: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    161 ;   X 		dest 
                                    162 ;----------------------------------
      0013B5                        163 strcpy::
      0013B5 88               [ 1]  164 	push a 
      0013B6 89               [ 2]  165 	pushw x 
      0013B7 90 F6            [ 1]  166 1$: ld a,(y)
      0013B9 27 06            [ 1]  167 	jreq 9$ 
      0013BB F7               [ 1]  168 	ld (x),a 
      0013BC 5C               [ 1]  169 	incw x 
      0013BD 90 5C            [ 1]  170 	incw y 
      0013BF 20 F6            [ 2]  171 	jra 1$ 
      0013C1 7F               [ 1]  172 9$:	clr (x)
      0013C2 85               [ 2]  173 	popw x 
      0013C3 84               [ 1]  174 	pop a 
      0013C4 81               [ 4]  175 	ret 
                                    176 
                                    177 ;---------------------------------------
                                    178 ; move memory block 
                                    179 ; input:
                                    180 ;   X 		destination 
                                    181 ;   Y 	    source 
                                    182 ;   acc16	bytes count 
                                    183 ; output:
                                    184 ;   none 
                                    185 ;--------------------------------------
                           000001   186 	INCR=1 ; incrament high byte 
                           000002   187 	LB=2 ; increment low byte 
                           000002   188 	VSIZE=2
      0013C5                        189 move::
      0013C5 88               [ 1]  190 	push a 
      0013C6                        191 	_vars VSIZE 
      0013C6 52 02            [ 2]    1     sub sp,#VSIZE 
      0013C8 0F 01            [ 1]  192 	clr (INCR,sp)
      0013CA 0F 02            [ 1]  193 	clr (LB,sp)
      0013CC 90 89            [ 2]  194 	pushw y 
      0013CE 13 01            [ 2]  195 	cpw x,(1,sp) ; compare DEST to SRC 
      0013D0 90 85            [ 2]  196 	popw y 
      0013D2 27 31            [ 1]  197 	jreq move_exit ; x==y 
      0013D4 2B 0E            [ 1]  198 	jrmi move_down
      0013D6                        199 move_up: ; start from top address with incr=-1
      0013D6 72 BB 00 0D      [ 2]  200 	addw x,acc16
      0013DA 72 B9 00 0D      [ 2]  201 	addw y,acc16
      0013DE 03 01            [ 1]  202 	cpl (INCR,sp)
      0013E0 03 02            [ 1]  203 	cpl (LB,sp)   ; increment = -1 
      0013E2 20 05            [ 2]  204 	jra move_loop  
      0013E4                        205 move_down: ; start from bottom address with incr=1 
      0013E4 5A               [ 2]  206     decw x 
      0013E5 90 5A            [ 2]  207 	decw y
      0013E7 0C 02            [ 1]  208 	inc (LB,sp) ; incr=1 
      0013E9                        209 move_loop:	
      0013E9 C6 00 0D         [ 1]  210     ld a, acc16 
      0013EC CA 00 0E         [ 1]  211 	or a, acc8
      0013EF 27 14            [ 1]  212 	jreq move_exit 
      0013F1 72 FB 01         [ 2]  213 	addw x,(INCR,sp)
      0013F4 72 F9 01         [ 2]  214 	addw y,(INCR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0013F7 90 F6            [ 1]  215 	ld a,(y)
      0013F9 F7               [ 1]  216 	ld (x),a 
      0013FA 89               [ 2]  217 	pushw x 
      0013FB CE 00 0D         [ 2]  218 	ldw x,acc16 
      0013FE 5A               [ 2]  219 	decw x 
      0013FF CF 00 0D         [ 2]  220 	ldw acc16,x 
      001402 85               [ 2]  221 	popw x 
      001403 20 E4            [ 2]  222 	jra move_loop
      001405                        223 move_exit:
      001405                        224 	_drop VSIZE
      001405 5B 02            [ 2]    1     addw sp,#VSIZE 
      001407 84               [ 1]  225 	pop a 
      001408 81               [ 4]  226 	ret 	
                                    227 
                                    228 ;------------------------------------
                                    229 ;  set all variables to zero 
                                    230 ; input:
                                    231 ;   none 
                                    232 ; output:
                                    233 ;	none
                                    234 ;------------------------------------
      001409                        235 clear_vars:
      001409 89               [ 2]  236 	pushw x 
      00140A 88               [ 1]  237 	push a  
      00140B AE 00 35         [ 2]  238 	ldw x,#vars 
      00140E A6 4E            [ 1]  239 	ld a,#CELL_SIZE*26 
      001410 7F               [ 1]  240 1$:	clr (x)
      001411 5C               [ 1]  241 	incw x 
      001412 4A               [ 1]  242 	dec a 
      001413 26 FB            [ 1]  243 	jrne 1$
      001415 84               [ 1]  244 	pop a 
      001416 85               [ 2]  245 	popw x 
      001417 81               [ 4]  246 	ret 
                                    247 
                                    248 
                                    249 ;-----------------------
                                    250 ;  display system 
                                    251 ;  information 
                                    252 ;-----------------------
                           000002   253 	MAJOR=2
                           000000   254 	MINOR=0 
      001418 0A 0A 54 69 6E 79 20   255 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    256 
      00145E                        257 system_information:
      00145E AE 14 18         [ 2]  258 	ldw x,#software 
      001461 CD 09 5C         [ 4]  259 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001464 A6 02            [ 1]  260 	ld a,#MAJOR 
      001466 C7 00 0E         [ 1]  261 	ld acc8,a 
      001469 5F               [ 1]  262 	clrw x 
      00146A CF 00 0C         [ 2]  263 	ldw acc24,x
      00146D 72 5F 00 23      [ 1]  264 	clr tab_width  
      001471 35 0A 00 0A      [ 1]  265 	mov base, #10 
      001475 CD 18 6B         [ 4]  266 	call prt_acc24 
      001478 A6 2E            [ 1]  267 	ld a,#'.
      00147A CD 08 FF         [ 4]  268 	call putc 
      00147D A6 00            [ 1]  269 	ld a,#MINOR 
      00147F C7 00 0E         [ 1]  270 	ld acc8,a 
      001482 5F               [ 1]  271 	clrw x 
      001483 CF 00 0C         [ 2]  272 	ldw acc24,x 
      001486 CD 18 6B         [ 4]  273 	call prt_acc24
      001489 A6 0D            [ 1]  274 	ld a,#CR 
      00148B CD 08 FF         [ 4]  275 	call putc
                                    276 ;call test 
      00148E 81               [ 4]  277 	ret
                                    278 
      00148F                        279 warm_init:
      00148F 90 AE 17 73      [ 2]  280 	ldw y,#XSTACK_EMPTY  
      001493 72 5F 00 22      [ 1]  281 	clr flags 
      001497 72 5F 00 1F      [ 1]  282 	clr loop_depth 
      00149B 35 04 00 23      [ 1]  283 	mov tab_width,#TAB_WIDTH 
      00149F 35 0A 00 0A      [ 1]  284 	mov base,#10 
      0014A3 AE 00 00         [ 2]  285 	ldw x,#0 
      0014A6 CF 00 04         [ 2]  286 	ldw basicptr,x 
      0014A9 CF 00 00         [ 2]  287 	ldw in.w,x 
      0014AC 72 5F 00 02      [ 1]  288 	clr count
      0014B0 81               [ 4]  289 	ret 
                                    290 
                                    291 ;---------------------------
                                    292 ; reset BASIC text variables 
                                    293 ; and clear variables 
                                    294 ;---------------------------
      0014B1                        295 clear_basic:
      0014B1 89               [ 2]  296 	pushw x 
      0014B2 72 5F 00 02      [ 1]  297 	clr count
      0014B6 72 5F 00 01      [ 1]  298 	clr in  
      0014BA AE 00 90         [ 2]  299 	ldw x,#free_ram 
      0014BD CF 00 1B         [ 2]  300 	ldw txtbgn,x 
      0014C0 CF 00 1D         [ 2]  301 	ldw txtend,x 
      0014C3 CF 00 30         [ 2]  302 	ldw dvar_bgn,x 
      0014C6 CF 00 32         [ 2]  303 	ldw dvar_end,x 
      0014C9 CD 14 09         [ 4]  304 	call clear_vars 
      0014CC 72 5F 00 34      [ 1]  305 	clr chain_level
      0014D0 85               [ 2]  306 	popw x
      0014D1 81               [ 4]  307 	ret 
                                    308 
                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 ;;   Tiny BASIC error messages     ;;
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014D2                        312 err_msg:
      0014D2 00 00 14 F8 15 0F 15   313 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             1D 15 36 15 45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0014DE 15 5B 15 71 15 8B 15   314 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             9C 15 AD
      0014E8 15 B9 15 EC 15 FC 16   315 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             10 16 23
      0014F2 16 30 16 3A 16 56      316 	.word err_overflow,err_read_only,err_not_program  
                                    317 
      0014F8 52 65 6A 65 63 74 65   318 err_mem_full: .asciz "Rejected, memory full\n" 
             64 2C 20 6D 65 6D 6F
             72 79 20 66 75 6C 6C
             0A 00
      00150F 73 79 6E 74 61 78 20   319 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00151D 6D 61 74 68 20 6F 70   320 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001536 64 69 76 69 73 69 6F   321 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001545 69 6E 76 61 6C 69 64   322 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00155B 72 75 6E 20 74 69 6D   323 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001571 63 6F 6D 6D 61 6E 64   324 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00158B 64 75 70 6C 69 63 61   325 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00159C 46 69 6C 65 20 6E 6F   326 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015AD 62 61 64 20 76 61 6C   327 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015B9 46 69 6C 65 20 69 6E   328 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015EC 4E 6F 20 64 61 74 61   329 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015FC 4E 6F 20 70 72 6F 67   330 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001610 46 69 6C 65 20 73 79   331 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



             6C 6C 2E 0A 00
      001623 42 75 66 66 65 72 20   332 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001630 6F 76 65 72 66 6C 6F   333 err_overflow: .asciz "overflow\n" 
             77 0A 00
      00163A 63 6F 6E 73 74 61 6E   334 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      001656 6E 6F 20 70 72 6F 67   335 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    336 
                                    337 ;-------------------------------------
      001672 0A 72 75 6E 20 74 69   338 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001684 0A 63 6F 6D 70 69 6C   339 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001695 6C 61 73 74 20 74 6F   340 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    341 
      0016A5                        342 syntax_error::
      0016A5 A6 02            [ 1]  343 	ld a,#ERR_SYNTAX 
                                    344 
      0016A7                        345 tb_error::
      0016A7 72 0A 00 22 4C   [ 2]  346 	btjt flags,#FCOMP,1$
      0016AC 88               [ 1]  347 	push a 
      0016AD AE 16 72         [ 2]  348 	ldw x, #rt_msg 
      0016B0 CD 09 5C         [ 4]  349 	call puts 
      0016B3 84               [ 1]  350 	pop a 
      0016B4 AE 14 D2         [ 2]  351 	ldw x, #err_msg 
      0016B7 72 5F 00 0D      [ 1]  352 	clr acc16 
      0016BB 48               [ 1]  353 	sll a
      0016BC 72 59 00 0D      [ 1]  354 	rlc acc16  
      0016C0 C7 00 0E         [ 1]  355 	ld acc8, a 
      0016C3 72 BB 00 0D      [ 2]  356 	addw x,acc16 
      0016C7 FE               [ 2]  357 	ldw x,(x)
      0016C8 CD 09 5C         [ 4]  358 	call puts
      0016CB CE 00 04         [ 2]  359 	ldw x,basicptr 
                           000001   360 .if DEBUG 
      0016CE C6 00 02         [ 1]  361 ld a,count 
      0016D1 90 5F            [ 1]  362 clrw y 
      0016D3 90 02            [ 1]  363 rlwa y  
      0016D5 CD 06 45         [ 4]  364 call hex_dump
      0016D8 CE 00 04         [ 2]  365 ldw x,basicptr
                                    366 .endif 
      0016DB C6 00 01         [ 1]  367 	ld a,in 
      0016DE CD 1F F6         [ 4]  368 	call prt_basic_line
      0016E1 AE 16 95         [ 2]  369 	ldw x,#tk_id 
      0016E4 CD 09 5C         [ 4]  370 	call puts 
      0016E7 C6 00 03         [ 1]  371 	ld a,in.saved 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0016EA 5F               [ 1]  372 	clrw x 
      0016EB 97               [ 1]  373 	ld xl,a 
      0016EC 72 BB 00 04      [ 2]  374 	addw x,basicptr 
      0016F0 F6               [ 1]  375 	ld a,(x)
      0016F1 5F               [ 1]  376 	clrw x 
      0016F2 97               [ 1]  377 	ld xl,a 
      0016F3 CD 18 54         [ 4]  378 	call prt_i16
      0016F6 20 35            [ 2]  379 	jra 6$
      0016F8                        380 1$:	
      0016F8 88               [ 1]  381 	push a 
      0016F9 AE 16 84         [ 2]  382 	ldw x,#comp_msg
      0016FC CD 09 5C         [ 4]  383 	call puts 
      0016FF 84               [ 1]  384 	pop a 
      001700 AE 14 D2         [ 2]  385 	ldw x, #err_msg 
      001703 72 5F 00 0D      [ 1]  386 	clr acc16 
      001707 48               [ 1]  387 	sll a
      001708 72 59 00 0D      [ 1]  388 	rlc acc16  
      00170C C7 00 0E         [ 1]  389 	ld acc8, a 
      00170F 72 BB 00 0D      [ 2]  390 	addw x,acc16 
      001713 FE               [ 2]  391 	ldw x,(x)
      001714 CD 09 5C         [ 4]  392 	call puts
      001717 AE 16 68         [ 2]  393 	ldw x,#tib
      00171A CD 09 5C         [ 4]  394 	call puts 
      00171D A6 0D            [ 1]  395 	ld a,#CR 
      00171F CD 08 FF         [ 4]  396 	call putc
      001722 CE 00 00         [ 2]  397 	ldw x,in.w
      001725 CD 09 C9         [ 4]  398 	call spaces
      001728 A6 5E            [ 1]  399 	ld a,#'^
      00172A CD 08 FF         [ 4]  400 	call putc 
      00172D AE 17 FF         [ 2]  401 6$: ldw x,#STACK_EMPTY 
      001730 94               [ 1]  402     ldw sp,x
                                    403 
      001731                        404 warm_start:
      001731 CD 14 8F         [ 4]  405 	call warm_init
                                    406 ;----------------------------
                                    407 ;   BASIC interpreter
                                    408 ;----------------------------
      001734                        409 cmd_line: ; user interface 
      001734 A6 0D            [ 1]  410 	ld a,#CR 
      001736 CD 08 FF         [ 4]  411 	call putc 
      001739 A6 3E            [ 1]  412 	ld a,#'> 
      00173B CD 08 FF         [ 4]  413 	call putc
      00173E CD 0A 61         [ 4]  414 	call readln
      001741 72 5D 00 02      [ 1]  415 	tnz count 
      001745 27 ED            [ 1]  416 	jreq cmd_line
      001747 CD 10 A9         [ 4]  417 	call compile
                                    418 ;;;;;;;;;;;;;;;;;;;;;;	
                                    419 ;pushw y 
                                    420 ;ldw x,txtbgn  
                                    421 ;ldw y,txtend
                                    422 ;ldw acc16,x   
                                    423 ;subw y,acc16 
                                    424 ;call hex_dump
                                    425 ;popw y 
                                    426 ;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    427 
                                    428 ; if text begin with a line number
                                    429 ; the compiler set count to zero    
                                    430 ; so code is not interpreted
      00174A 72 5D 00 02      [ 1]  431 	tnz count 
      00174E 27 E4            [ 1]  432 	jreq cmd_line
                                    433 	
                                    434 ; if direct command 
                                    435 ; it's ready to interpret 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ;; This is the interpreter loop
                                    438 ;; for each BASIC code line. 
                                    439 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001750                        440 interpreter: 
      001750 C6 00 01         [ 1]  441 	ld a,in 
      001753 C1 00 02         [ 1]  442 	cp a,count 
      001756 2B 20            [ 1]  443 	jrmi interp_loop
      001758                        444 next_line:
      001758 72 01 00 22 D7   [ 2]  445 	btjf flags, #FRUN, cmd_line
      00175D CE 00 04         [ 2]  446 	ldw x,basicptr
      001760 72 BB 00 00      [ 2]  447 	addw x,in.w 
      001764 C3 00 1D         [ 2]  448 	cpw x,txtend 
      001767 2B 03            [ 1]  449 	jrmi 0$
      001769 CD 25 CF         [ 4]  450 	call cmd_end 
      00176C CF 00 04         [ 2]  451 0$:	ldw basicptr,x ; start of next line  
      00176F E6 02            [ 1]  452 	ld a,(2,x)
      001771 C7 00 02         [ 1]  453 	ld count,a 
      001774 35 03 00 01      [ 1]  454 	mov in,#3 ; skip first 3 bytes of line 
      001778                        455 interp_loop:
      001778 CD 18 0C         [ 4]  456 	call next_token
      00177B A1 00            [ 1]  457 	cp a,#TK_NONE 
      00177D 27 D9            [ 1]  458 	jreq next_line 
      00177F A1 80            [ 1]  459 	cp a,#TK_CMD
      001781 26 0C            [ 1]  460 	jrne 1$
      001783                        461 	_get_code_addr
      001783 FE               [ 2]    1         ldw x,(x)
      001784 72 5C 00 01      [ 1]    2         inc in 
      001788 72 5C 00 01      [ 1]    3         inc in 
      00178C FD               [ 4]  462 	call(x)
      00178D 20 E9            [ 2]  463 	jra interp_loop 
      00178F                        464 1$:	 
      00178F A1 85            [ 1]  465 	cp a,#TK_VAR
      001791 26 05            [ 1]  466 	jrne 2$
      001793 CD 1D 01         [ 4]  467 	call let_var  
      001796 20 E0            [ 2]  468 	jra interp_loop 
      001798                        469 2$:	
      001798 A1 05            [ 1]  470 	cp a,#TK_ARRAY 
      00179A 26 05            [ 1]  471 	jrne 3$
      00179C CD 1C FC         [ 4]  472 	call let_array 
      00179F 20 D7            [ 2]  473 	jra interp_loop
      0017A1                        474 3$:	
      0017A1 A1 03            [ 1]  475 	cp a,#TK_LABEL
      0017A3 26 05            [ 1]  476 	jrne 4$
      0017A5 CD 17 B1         [ 4]  477 	call let_dvar  
      0017A8 20 CE            [ 2]  478 	jra interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0017AA                        479 4$: 
      0017AA A1 0A            [ 1]  480 	cp a,#TK_COLON 
      0017AC 27 CA            [ 1]  481 	jreq interp_loop
      0017AE CC 16 A5         [ 2]  482 5$:	jp syntax_error 
                                    483 
                                    484 
                                    485 ;----------------------
                                    486 ; when a label is met 
                                    487 ; at interp_loop
                                    488 ; it may be a variable 
                                    489 ; assignement to DIM 
                                    490 ; variable 
                                    491 ;----------------------
                           000001   492 	VAR_NAME=1 
                           000003   493 	REC_LEN=3
                           000004   494 	VSIZE=4 
      0017B1                        495 let_dvar:
      0017B1                        496 	_vars VSIZE 
      0017B1 52 04            [ 2]    1     sub sp,#VSIZE 
      0017B3 1F 01            [ 2]  497 	ldw (VAR_NAME,sp),x
      0017B5 0F 03            [ 1]  498 	clr (REC_LEN,sp) 
      0017B7 CD 18 25         [ 4]  499 	call skip_string 
      0017BA CE 00 04         [ 2]  500 	ldw x,basicptr 
      0017BD 72 BB 00 00      [ 2]  501 	addw x,in.w 
      0017C1 F6               [ 1]  502 	ld a,(x)
      0017C2 A1 32            [ 1]  503 	cp a,#TK_EQUAL 
      0017C4 26 43            [ 1]  504 	jrne 9$ 
                                    505 ; dvar assignment 
      0017C6 72 5C 00 01      [ 1]  506 	inc in  
      0017CA CD 1C 2F         [ 4]  507 	call condition  
      0017CD A1 84            [ 1]  508 	cp a,#TK_INTGR 
      0017CF 27 03            [ 1]  509 	jreq 1$ 
      0017D1 CC 16 A5         [ 2]  510 0$:	jp syntax_error 
      0017D4                        511 1$: 
      0017D4 1E 01            [ 2]  512 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      0017D6 CD 13 99         [ 4]  513 	call strlen 
      0017D9 AB 05            [ 1]  514 	add a,#REC_XTRA_BYTES
      0017DB 6B 04            [ 1]  515 	ld (REC_LEN+1,sp),a 
      0017DD CD 1D 6B         [ 4]  516 	call search_name 
      0017E0 5D               [ 2]  517 	tnzw x 
      0017E1 27 EE            [ 1]  518 	jreq 0$ 
      0017E3 F6               [ 1]  519 	ld a,(x)
      0017E4 2A 05            [ 1]  520 	jrpl 2$
      0017E6 A6 11            [ 1]  521 	ld a,#ERR_RD_ONLY 
      0017E8 CC 16 A7         [ 2]  522 	jp tb_error 
      0017EB                        523 2$:
      0017EB 72 FB 03         [ 2]  524 	addw x,(REC_LEN,sp)
      0017EE 1D 00 03         [ 2]  525 	subw x,#CELL_SIZE 
      0017F1 CF 00 19         [ 2]  526 	ldw ptr16,x
      0017F4                        527 	_xpop 
      0017F4 90 F6            [ 1]    1     ld a,(y)
      0017F6 93               [ 1]    2     ldw x,y 
      0017F7 EE 01            [ 2]    3     ldw x,(1,x)
      0017F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017FD 72 C7 00 19      [ 4]  528 	ld [ptr16],a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001801 72 5C 00 1A      [ 1]  529 	inc ptr8 
      001805 72 CF 00 19      [ 5]  530 	ldw [ptr16],x 
      001809                        531 9$: _drop VSIZE 	
      001809 5B 04            [ 2]    1     addw sp,#VSIZE 
      00180B 81               [ 4]  532 	ret 
                                    533 
                                    534 
                                    535 ;--------------------------
                                    536 ; extract next token from
                                    537 ; token list 
                                    538 ; basicptr -> base address 
                                    539 ; in  -> offset in list array 
                                    540 ; output:
                                    541 ;   A 		token attribute
                                    542 ;   X 		*token_value 
                                    543 ;----------------------------------------
      00180C                        544 next_token::
                                    545 ;	clrw x 
      00180C C6 00 01         [ 1]  546 	ld a,in 
      00180F C7 00 03         [ 1]  547 	ld in.saved,a ; in case "_unget_token" needed 
                                    548 ; don't replace sub by "cp a,count" 
                                    549 ; if end of line must return with A=0   	
      001812 C0 00 02         [ 1]  550 	sub a,count 
      001815 27 0D            [ 1]  551 	jreq 9$ ; end of line 
      001817                        552 0$: 
      001817 CE 00 04         [ 2]  553 	ldw x,basicptr 
      00181A 72 BB 00 00      [ 2]  554 	addw x,in.w 
      00181E F6               [ 1]  555 	ld a,(x)
      00181F 5C               [ 1]  556 	incw x
      001820 72 5C 00 01      [ 1]  557 	inc in   
      001824 81               [ 4]  558 9$: ret 
                                    559 
                                    560 ;-------------------------
                                    561 ;  skip .asciz in BASIC line 
                                    562 ;  name 
                                    563 ;  input:
                                    564 ;     x		* string 
                                    565 ;  output:
                                    566 ;     none 
                                    567 ;-------------------------
      001825                        568 skip_string:
      001825 F6               [ 1]  569 	ld a,(x)
      001826 27 03            [ 1]  570 	jreq 1$
      001828 5C               [ 1]  571 	incw x 
      001829 20 FA            [ 2]  572 	jra skip_string 
      00182B 5C               [ 1]  573 1$: incw x 	
      00182C 72 B0 00 04      [ 2]  574 	subw x,basicptr 
      001830 CF 00 00         [ 2]  575 	ldw in.w,x 
      001833 81               [ 4]  576 	ret 
                                    577 
                                    578 ;---------------------
                                    579 ; extract 16 bits  
                                    580 ; address from BASIC
                                    581 ; code 
                                    582 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    583 ;    X    *address
                                    584 ; output:
                                    585 ;    X    address 
                                    586 ;-------------------- 
      001834                        587 get_addr:
      001834 FE               [ 2]  588 	ldw x,(x)
      001835 72 5C 00 01      [ 1]  589 	inc in 
      001839 72 5C 00 01      [ 1]  590 	inc in 
      00183D 81               [ 4]  591 	ret 
                                    592 
                                    593 ;--------------------
                                    594 ; extract int24_t  
                                    595 ; value from BASIC 
                                    596 ; code 
                                    597 ; input:
                                    598 ;    X   *integer 
                                    599 ; output:
                                    600 ;    A:X   int24  
                                    601 ;--------------------
      00183E                        602 get_int24:
      00183E F6               [ 1]  603 	ld a,(x)
      00183F EE 01            [ 2]  604 	ldw x,(1,x)
                                    605 ; skip 3 bytes 
      001841 72 5C 00 01      [ 1]  606 	inc in 
      001845 72 5C 00 01      [ 1]  607 	inc in 
      001849 72 5C 00 01      [ 1]  608 	inc in 
      00184D 81               [ 4]  609 	ret 
                                    610 
                                    611 ;-------------------------
                                    612 ; get character from 
                                    613 ; BASIC code 
                                    614 ; input:
                                    615 ;    X   *char 
                                    616 ; output:
                                    617 ;    A    char 
                                    618 ;-------------------------
      00184E                        619 get_char:
      00184E F6               [ 1]  620 	ld a,(x)
      00184F 72 5C 00 01      [ 1]  621 	inc in  
      001853 81               [ 4]  622     ret 
                                    623 
                                    624 ;-----------------------------------
                                    625 ; print a 16 bit integer 
                                    626 ; using variable 'base' as conversion
                                    627 ; format.
                                    628 ; input:
                                    629 ;    X       integer to print 
                                    630 ;   'base'    conversion base 
                                    631 ; output:
                                    632 ;   terminal  
                                    633 ;-----------------------------------
      001854                        634 prt_i16:
      001854 72 5F 00 0C      [ 1]  635 	clr acc24 
      001858 CF 00 0D         [ 2]  636 	ldw acc16,x 
      00185B A6 10            [ 1]  637 	ld a,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      00185D C1 00 0A         [ 1]  638 	cp a,base
      001860 27 09            [ 1]  639 	jreq prt_acc24  
      001862 72 0F 00 0D 04   [ 2]  640 	btjf acc16,#7,prt_acc24
      001867 72 53 00 0C      [ 1]  641 	cpl acc24 ; sign extend 
                                    642 	
                                    643 ;------------------------------------
                                    644 ; print integer in acc24 
                                    645 ; input:
                                    646 ;	acc24 		integer to print 
                                    647 ;	'base' 		numerical base for conversion 
                                    648 ;   'tab_width' field width 
                                    649 ;    A 			signed||unsigned conversion
                                    650 ;  output:
                                    651 ;    A          string length
                                    652 ;------------------------------------
      00186B                        653 prt_acc24:
      00186B A6 FF            [ 1]  654 	ld a,#255  ; signed conversion  
      00186D CD 18 91         [ 4]  655     call itoa  ; conversion entier en  .asciz
      001870 CD 11 53         [ 4]  656 	call right_align  
      001873 88               [ 1]  657 	push a 
      001874 CD 09 5C         [ 4]  658 	call puts
      001877 84               [ 1]  659 	pop a 
      001878 81               [ 4]  660     ret	
                                    661 
                                    662 ;---------------------------------------
                                    663 ;  print value at xstack top 
                                    664 ;---------------------------------------
      001879                        665 print_top: 
      001879                        666 	_xpop 
      001879 90 F6            [ 1]    1     ld a,(y)
      00187B 93               [ 1]    2     ldw x,y 
      00187C EE 01            [ 2]    3     ldw x,(1,x)
      00187E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001882 C7 00 0C         [ 1]  667 	ld acc24,a 
      001885 CF 00 0D         [ 2]  668 	ldw acc16,x 
      001888 CD 18 6B         [ 4]  669 	call prt_acc24 
      00188B A6 20            [ 1]  670 	ld a,#SPACE
      00188D CD 08 FF         [ 4]  671 	call putc 
      001890 81               [ 4]  672 	ret 
                                    673 
                                    674 ;------------------------------------
                                    675 ; convert integer in acc24 to string
                                    676 ; input:
                                    677 ;   'base'	conversion base 
                                    678 ;	acc24	integer to convert
                                    679 ;   A       0=unsigned, else signed 
                                    680 ; output:
                                    681 ;   X  		pointer to first char of string
                                    682 ;   A       string length
                                    683 ;------------------------------------
                           000001   684 	SIGN=1  ; integer sign 
                           000002   685 	LEN=2 
                           000003   686 	PSTR=3
                           000004   687 	VSIZE=4 ;locals size
      001891                        688 itoa::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001891                        689 	_vars VSIZE
      001891 52 04            [ 2]    1     sub sp,#VSIZE 
      001893 0F 02            [ 1]  690 	clr (LEN,sp) ; string length  
      001895 0F 01            [ 1]  691 	clr (SIGN,sp)    ; sign
      001897 4D               [ 1]  692 	tnz A
      001898 27 11            [ 1]  693 	jreq 1$ ; unsigned conversion  
      00189A C6 00 0A         [ 1]  694 	ld a,base 
      00189D A1 0A            [ 1]  695 	cp a,#10
      00189F 26 0A            [ 1]  696 	jrne 1$
                                    697 	; base 10 string display with negative sign if bit 23==1
      0018A1 72 0F 00 0C 05   [ 2]  698 	btjf acc24,#7,1$
      0018A6 03 01            [ 1]  699 	cpl (SIGN,sp)
      0018A8 CD 02 1D         [ 4]  700 	call neg_acc24
      0018AB                        701 1$:
                                    702 ; initialize string pointer 
      0018AB AE 16 68         [ 2]  703 	ldw x,#tib 
      0018AE 1C 00 50         [ 2]  704 	addw x,#TIB_SIZE
      0018B1 5A               [ 2]  705 	decw x 
      0018B2 7F               [ 1]  706 	clr (x)
      0018B3                        707 itoa_loop:
      0018B3 C6 00 0A         [ 1]  708     ld a,base
      0018B6 CD 02 E9         [ 4]  709     call divu24_8 ; acc24/A 
      0018B9 AB 30            [ 1]  710     add a,#'0  ; remainder of division
      0018BB A1 3A            [ 1]  711     cp a,#'9+1
      0018BD 2B 02            [ 1]  712     jrmi 2$
      0018BF AB 07            [ 1]  713     add a,#7 
      0018C1                        714 2$:	
      0018C1 5A               [ 2]  715 	decw x
      0018C2 F7               [ 1]  716     ld (x),a
      0018C3 0C 02            [ 1]  717 	inc (LEN,sp)
                                    718 	; if acc24==0 conversion done
      0018C5 C6 00 0C         [ 1]  719 	ld a,acc24
      0018C8 CA 00 0D         [ 1]  720 	or a,acc16
      0018CB CA 00 0E         [ 1]  721 	or a,acc8
      0018CE 26 E3            [ 1]  722     jrne itoa_loop
                                    723 	;conversion done, next add '$' or '-' as required
      0018D0 C6 00 0A         [ 1]  724 	ld a,base 
      0018D3 A1 10            [ 1]  725 	cp a,#16
      0018D5 27 08            [ 1]  726 	jreq 8$
      0018D7 7B 01            [ 1]  727 	ld a,(SIGN,sp)
      0018D9 27 0A            [ 1]  728     jreq 10$
      0018DB A6 2D            [ 1]  729     ld a,#'-
      0018DD 20 02            [ 2]  730 	jra 9$ 
      0018DF                        731 8$:	
      0018DF A6 24            [ 1]  732 	ld a,#'$ 
      0018E1 5A               [ 2]  733 9$: decw x
      0018E2 F7               [ 1]  734     ld (x),a
      0018E3 0C 02            [ 1]  735 	inc (LEN,sp)
      0018E5                        736 10$:
      0018E5 7B 02            [ 1]  737 	ld a,(LEN,sp)
      0018E7                        738 	_drop VSIZE
      0018E7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018E9 81               [ 4]  739 	ret
                                    740 
                                    741 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    742 ; convert alpha to uppercase
                                    743 ; input:
                                    744 ;    a  character to convert
                                    745 ; output:
                                    746 ;    a  uppercase character
                                    747 ;------------------------------------
      0018EA                        748 to_upper::
      0018EA A1 61            [ 1]  749 	cp a,#'a
      0018EC 2A 01            [ 1]  750 	jrpl 1$
      0018EE 81               [ 4]  751 0$:	ret
      0018EF A1 7A            [ 1]  752 1$: cp a,#'z	
      0018F1 22 FB            [ 1]  753 	jrugt 0$
      0018F3 A0 20            [ 1]  754 	sub a,#32
      0018F5 81               [ 4]  755 	ret
                                    756 	
                                    757 ;------------------------------------
                                    758 ; convert pad content in integer
                                    759 ; input:
                                    760 ;    x		* .asciz to convert
                                    761 ; output:
                                    762 ;    A:X        int24_t 
                                    763 ;    acc24      int24_t
                                    764 ;------------------------------------
                                    765 	; local variables
                           000001   766 	SIGN=1 ; 1 byte, 
                           000002   767 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   768 	TEMP=3 ; 1 byte, temporary storage
                           000004   769 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   770 	VSIZE=5 ; 5 bytes reserved for local storage
      0018F6                        771 atoi24::
      0018F6                        772 	_vars VSIZE
      0018F6 52 05            [ 2]    1     sub sp,#VSIZE 
      0018F8 1F 04            [ 2]  773 	ldw (XTEMP,sp),x 
                                    774 ; conversion made on xstack 
      0018FA 4F               [ 1]  775 	clr a 
      0018FB 5F               [ 1]  776 	clrw x 
      0018FC                        777 	_xpush 
      0018FC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001900 90 F7            [ 1]    2     ld (y),a 
      001902 90 EF 01         [ 2]    3     ldw (1,y),x 
      001905 0F 01            [ 1]  778 	clr (SIGN,sp)
      001907 A6 0A            [ 1]  779 	ld a,#10
      001909 6B 02            [ 1]  780 	ld (BASE,sp),a ; default base decimal
      00190B 1E 04            [ 2]  781 	ldw x,(XTEMP,sp)
      00190D F6               [ 1]  782 	ld a,(x)
      00190E 27 4E            [ 1]  783 	jreq 9$  ; completed if 0
      001910 A1 2D            [ 1]  784 	cp a,#'-
      001912 26 04            [ 1]  785 	jrne 1$
      001914 03 01            [ 1]  786 	cpl (SIGN,sp)
      001916 20 08            [ 2]  787 	jra 2$
      001918 A1 24            [ 1]  788 1$: cp a,#'$
      00191A 26 08            [ 1]  789 	jrne 3$
      00191C A6 10            [ 1]  790 	ld a,#16
      00191E 6B 02            [ 1]  791 	ld (BASE,sp),a
      001920 5C               [ 1]  792 2$:	incw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001921 1F 04            [ 2]  793 	ldw (XTEMP,sp),x 
      001923 F6               [ 1]  794 	ld a,(x)
      001924                        795 3$:	; char to digit 
      001924 A1 61            [ 1]  796 	cp a,#'a
      001926 2B 02            [ 1]  797 	jrmi 4$
      001928 A0 20            [ 1]  798 	sub a,#32
      00192A A1 30            [ 1]  799 4$:	cp a,#'0
      00192C 2B 30            [ 1]  800 	jrmi 9$
      00192E A0 30            [ 1]  801 	sub a,#'0
      001930 A1 0A            [ 1]  802 	cp a,#10
      001932 2B 06            [ 1]  803 	jrmi 5$
      001934 A0 07            [ 1]  804 	sub a,#7
      001936 11 02            [ 1]  805 	cp a,(BASE,sp)
      001938 2A 24            [ 1]  806 	jrpl 9$
      00193A 6B 03            [ 1]  807 5$:	ld (TEMP,sp),a
      00193C 7B 02            [ 1]  808 	ld a,(BASE,sp)
      00193E CD 02 3A         [ 4]  809 	call mulu24_8
      001941                        810 	_xpush 
      001941 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001945 90 F7            [ 1]    2     ld (y),a 
      001947 90 EF 01         [ 2]    3     ldw (1,y),x 
      00194A 5F               [ 1]  811 	clrw x 
      00194B 7B 03            [ 1]  812 	ld a,(TEMP,sp)
      00194D 02               [ 1]  813 	rlwa x 
      00194E                        814 	_xpush 
      00194E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001952 90 F7            [ 1]    2     ld (y),a 
      001954 90 EF 01         [ 2]    3     ldw (1,y),x 
      001957 CD 01 7E         [ 4]  815 	call add24 
      00195A 1E 04            [ 2]  816 	ldw x,(XTEMP,sp)
      00195C 20 C2            [ 2]  817 	jra 2$
      00195E 0D 01            [ 1]  818 9$:	tnz (SIGN,sp)
      001960 27 03            [ 1]  819     jreq atoi_exit
      001962 CD 02 03         [ 4]  820     call neg24
      001965                        821 atoi_exit:
      001965                        822 	_xpop 
      001965 90 F6            [ 1]    1     ld a,(y)
      001967 93               [ 1]    2     ldw x,y 
      001968 EE 01            [ 2]    3     ldw x,(1,x)
      00196A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00196E C7 00 0C         [ 1]  823 	ld acc24,a 
      001971 CF 00 0D         [ 2]  824 	ldw acc16,x  
      001974                        825 	_drop VSIZE
      001974 5B 05            [ 2]    1     addw sp,#VSIZE 
      001976 81               [ 4]  826 	ret
                                    827 
                                    828 
                                    829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    830 ;;   TINY BASIC  operators,
                                    831 ;;   commands and functions 
                                    832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    833 
                                    834 ;---------------------------------
                                    835 ; dictionary search 
                                    836 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    837 ;	X 		dictionary entry point, name field  
                                    838 ;   y		.asciz name to search 
                                    839 ; output:
                                    840 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    841 ;  X		routine address|TK_OP 
                                    842 ;---------------------------------
                           000001   843 	NLEN=1 ; cmd length 
                           000002   844 	XSAVE=2
                           000004   845 	YSAVE=4
                           000005   846 	VSIZE=5 
      001977                        847 search_dict::
      001977                        848 	_vars VSIZE 
      001977 52 05            [ 2]    1     sub sp,#VSIZE 
      001979 17 04            [ 2]  849 	ldw (YSAVE,sp),y 
      00197B                        850 search_next:
      00197B 1F 02            [ 2]  851 	ldw (XSAVE,sp),x 
                                    852 ; get name length in dictionary	
      00197D F6               [ 1]  853 	ld a,(x)
      00197E A4 0F            [ 1]  854 	and a,#0xf 
      001980 6B 01            [ 1]  855 	ld (NLEN,sp),a  
      001982 16 04            [ 2]  856 	ldw y,(YSAVE,sp) ; name pointer 
      001984 5C               [ 1]  857 	incw x 
      001985                        858 cp_loop:
      001985 90 F6            [ 1]  859 	ld a,(y)
      001987 27 1B            [ 1]  860 	jreq str_match 
      001989 0D 01            [ 1]  861 	tnz (NLEN,sp)
      00198B 27 0A            [ 1]  862 	jreq no_match  
      00198D F1               [ 1]  863 	cp a,(x)
      00198E 26 07            [ 1]  864 	jrne no_match 
      001990 90 5C            [ 1]  865 	incw y 
      001992 5C               [ 1]  866 	incw x
      001993 0A 01            [ 1]  867 	dec (NLEN,sp)
      001995 20 EE            [ 2]  868 	jra cp_loop 
      001997                        869 no_match:
      001997 1E 02            [ 2]  870 	ldw x,(XSAVE,sp) 
      001999 1D 00 02         [ 2]  871 	subw x,#2 ; move X to link field
      00199C 4B 00            [ 1]  872 	push #TK_NONE 
      00199E FE               [ 2]  873 	ldw x,(x) ; next word link 
      00199F 84               [ 1]  874 	pop a ; TK_NONE 
      0019A0 27 1D            [ 1]  875 	jreq search_exit  ; not found  
                                    876 ;try next 
      0019A2 20 D7            [ 2]  877 	jra search_next
      0019A4                        878 str_match:
      0019A4 1E 02            [ 2]  879 	ldw x,(XSAVE,sp)
      0019A6 F6               [ 1]  880 	ld a,(X)
      0019A7 6B 01            [ 1]  881 	ld (NLEN,sp),a ; needed to test keyword type  
      0019A9 A4 0F            [ 1]  882 	and a,#NLEN_MASK 
                                    883 ; move x to procedure address field 	
      0019AB 4C               [ 1]  884 	inc a 
      0019AC C7 00 0E         [ 1]  885 	ld acc8,a 
      0019AF 72 5F 00 0D      [ 1]  886 	clr acc16 
      0019B3 72 BB 00 0D      [ 2]  887 	addw x,acc16 
      0019B7 FE               [ 2]  888 	ldw x,(x) ; routine address  
                                    889 ;determine keyword type bits 7:4 
      0019B8 7B 01            [ 1]  890 	ld a,(NLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0019BA A4 F0            [ 1]  891 	and a,#KW_TYPE_MASK 
      0019BC 4E               [ 1]  892 	swap a 
      0019BD AB 80            [ 1]  893 	add a,#128
      0019BF                        894 search_exit: 
      0019BF                        895 	_drop VSIZE 
      0019BF 5B 05            [ 2]    1     addw sp,#VSIZE 
      0019C1 81               [ 4]  896 	ret 
                                    897 
                                    898 ;---------------------
                                    899 ; check if next token
                                    900 ;  is of expected type 
                                    901 ; input:
                                    902 ;   A 		 expected token attribute
                                    903 ;  ouput:
                                    904 ;   none     if fail call syntax_error 
                                    905 ;--------------------
      0019C2                        906 expect:
      0019C2 88               [ 1]  907 	push a 
      0019C3 CD 18 0C         [ 4]  908 	call next_token 
      0019C6 11 01            [ 1]  909 	cp a,(1,sp)
      0019C8 27 03            [ 1]  910 	jreq 1$
      0019CA CC 16 A5         [ 2]  911 	jp syntax_error
      0019CD 84               [ 1]  912 1$: pop a 
      0019CE 81               [ 4]  913 	ret 
                                    914 
                                    915 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    916 ; parse arguments list 
                                    917 ; between ()
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019CF                        919 func_args:
      0019CF A6 06            [ 1]  920 	ld a,#TK_LPAREN 
      0019D1 CD 19 C2         [ 4]  921 	call expect 
                                    922 ; expected to continue in arg_list 
                                    923 ; caller must check for TK_RPAREN 
                                    924 
                                    925 ;-------------------------------
                                    926 ; parse embedded BASIC routines 
                                    927 ; arguments list.
                                    928 ; arg_list::=  expr[','expr]*
                                    929 ; all arguments are of int24_t type
                                    930 ; and pushed on stack 
                                    931 ; input:
                                    932 ;   none
                                    933 ; output:
                                    934 ;   xstack{n}   arguments pushed on xstack
                                    935 ;   A 	number of arguments pushed on xstack  
                                    936 ;--------------------------------
      0019D4                        937 arg_list:
      0019D4 4B 00            [ 1]  938 	push #0
      0019D6 CD 1C 2F         [ 4]  939 1$:	call condition 
      0019D9 4D               [ 1]  940 	tnz a 
      0019DA 27 12            [ 1]  941 	jreq 7$  
      0019DC 0C 01            [ 1]  942 	inc (1,sp)
      0019DE CD 18 0C         [ 4]  943 	call next_token 
      0019E1 A1 08            [ 1]  944 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0019E3 27 F1            [ 1]  945 	jreq 1$ 
      0019E5 A1 07            [ 1]  946 	cp a,#TK_RPAREN
      0019E7 27 05            [ 1]  947 	jreq 7$
      0019E9                        948 	_unget_token 
      0019E9 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0019EE 84               [ 1]  949 7$:	pop a  
      0019EF 81               [ 4]  950 	ret 
                                    951 
                                    952 ;--------------------------------
                                    953 ;   BASIC commnands 
                                    954 ;--------------------------------
                                    955 
                                    956 ;--------------------------------
                                    957 ;  arithmetic and relational 
                                    958 ;  routines
                                    959 ;  operators precedence
                                    960 ;  highest to lowest
                                    961 ;  operators on same row have 
                                    962 ;  same precedence and are executed
                                    963 ;  from left to right.
                                    964 ;	'*','/','%'
                                    965 ;   '-','+'
                                    966 ;   '=','>','<','>=','<=','<>','><'
                                    967 ;   '<>' and '><' are equivalent for not equal.
                                    968 ;--------------------------------
                                    969 
                                    970 ;---------------------
                                    971 ; return array element
                                    972 ; address from @(expr)
                                    973 ; input:
                                    974 ;   A 		TK_ARRAY
                                    975 ; output:
                                    976 ;	X 		element address 
                                    977 ;----------------------
      0019F0                        978 get_array_element:
      0019F0 CD 19 CF         [ 4]  979 	call func_args 
      0019F3 A1 01            [ 1]  980 	cp a,#1
      0019F5 27 03            [ 1]  981 	jreq 1$
      0019F7 CC 16 A5         [ 2]  982 	jp syntax_error
      0019FA                        983 1$: _xpop 
      0019FA 90 F6            [ 1]    1     ld a,(y)
      0019FC 93               [ 1]    2     ldw x,y 
      0019FD EE 01            [ 2]    3     ldw x,(1,x)
      0019FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    984     ; ignore A, index < 65536 in any case 
                                    985 	; check for bounds 
      001A03 C3 00 20         [ 2]  986 	cpw x,array_size 
      001A06 23 05            [ 2]  987 	jrule 3$
                                    988 ; bounds {1..array_size}	
      001A08 A6 0A            [ 1]  989 2$: ld a,#ERR_BAD_VALUE 
      001A0A CC 16 A7         [ 2]  990 	jp tb_error 
      001A0D 5D               [ 2]  991 3$: tnzw  x
      001A0E 27 F8            [ 1]  992 	jreq 2$ 
      001A10 A6 03            [ 1]  993 	ld a,#CELL_SIZE  
      001A12 42               [ 4]  994 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001A13 CF 00 0D         [ 2]  995 	ldw acc16,x   
      001A16 AE 16 68         [ 2]  996 	ldw x,#tib ; array is below tib 
      001A19 72 B0 00 0D      [ 2]  997 	subw x,acc16 
      001A1D 81               [ 4]  998 	ret 
                                    999 
                                   1000 
                                   1001 ;***********************************
                                   1002 ;   expression parse,execute 
                                   1003 ;***********************************
                                   1004 ;-----------------------------------
                                   1005 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1006 ;			 integer | function |
                                   1007 ;			 '('relation')' 
                                   1008 ; output:
                                   1009 ;   A       token attribute 
                                   1010 ;   xstack  value  
                                   1011 ; ---------------------------------
                           000001  1012 	NEG=1
                           000001  1013 	VSIZE=1
      001A1E                       1014 factor:
      001A1E                       1015 	_vars VSIZE 
      001A1E 52 01            [ 2]    1     sub sp,#VSIZE 
      001A20 0F 01            [ 1] 1016 	clr (NEG,sp)
      001A22 CD 18 0C         [ 4] 1017 	call next_token
      001A25 4D               [ 1] 1018 	tnz a 
      001A26 26 03            [ 1] 1019 	jrne 1$ 
      001A28 CC 1A D0         [ 2] 1020 	jp 22$ 
      001A2B A1 10            [ 1] 1021 1$:	cp a,#TK_PLUS 
      001A2D 27 06            [ 1] 1022 	jreq 2$
      001A2F A1 11            [ 1] 1023 	cp a,#TK_MINUS 
      001A31 26 05            [ 1] 1024 	jrne 4$ 
      001A33 03 01            [ 1] 1025 	cpl (NEG,sp)
      001A35                       1026 2$:	
      001A35 CD 18 0C         [ 4] 1027 	call next_token
      001A38                       1028 4$:
      001A38 4D               [ 1] 1029 	tnz a 
      001A39 26 03            [ 1] 1030 	jrne 41$ 
      001A3B CC 16 A5         [ 2] 1031 	jp syntax_error  
      001A3E                       1032 41$:	
      001A3E A1 81            [ 1] 1033 	cp a,#TK_IFUNC 
      001A40 26 0C            [ 1] 1034 	jrne 5$ 
      001A42                       1035 	_get_code_addr 
      001A42 FE               [ 2]    1         ldw x,(x)
      001A43 72 5C 00 01      [ 1]    2         inc in 
      001A47 72 5C 00 01      [ 1]    3         inc in 
      001A4B FD               [ 4] 1036 	call (x); result in A:X  
      001A4C 20 70            [ 2] 1037 	jra 18$ 
      001A4E                       1038 5$:
      001A4E A1 84            [ 1] 1039 	cp a,#TK_INTGR
      001A50 26 05            [ 1] 1040 	jrne 6$
      001A52 CD 18 3E         [ 4] 1041 	call get_int24 ; A:X
      001A55 20 67            [ 2] 1042 	jra 18$
      001A57                       1043 6$:
      001A57 A1 05            [ 1] 1044 	cp a,#TK_ARRAY
      001A59 26 05            [ 1] 1045 	jrne 7$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A5B CD 19 F0         [ 4] 1046 	call get_array_element
      001A5E 20 07            [ 2] 1047     jra 71$
      001A60                       1048 7$:
      001A60 A1 85            [ 1] 1049 	cp a,#TK_VAR 
      001A62 26 08            [ 1] 1050 	jrne 8$
      001A64 CD 18 34         [ 4] 1051 	call get_addr 
      001A67                       1052 71$: ; put value in A:X
      001A67 F6               [ 1] 1053 	ld a,(x)
      001A68 EE 01            [ 2] 1054 	ldw x,(1,x)
      001A6A 20 52            [ 2] 1055 	jra 18$
      001A6C                       1056 8$:
      001A6C A1 03            [ 1] 1057 	cp a,#TK_LABEL 
      001A6E 26 1D            [ 1] 1058 	jrne 9$
      001A70 90 89            [ 2] 1059 	pushw y  
      001A72 89               [ 2] 1060 	pushw x 
      001A73 CD 18 25         [ 4] 1061 	call skip_string
      001A76 85               [ 2] 1062 	popw x  
      001A77 CD 13 99         [ 4] 1063 	call strlen 
      001A7A AB 05            [ 1] 1064 	add a,#REC_XTRA_BYTES
      001A7C CD 1D 6B         [ 4] 1065 	call search_name
      001A7F 5D               [ 2] 1066 	tnzw x 
      001A80 26 04            [ 1] 1067 	jrne 82$ 
      001A82 90 85            [ 2] 1068 	popw y 
      001A84 20 30            [ 2] 1069 	jra 16$
      001A86                       1070 82$:
      001A86 90 85            [ 2] 1071 	popw y   
      001A88 CD 1D 31         [ 4] 1072 	call get_value ; in A:X 
      001A8B 20 31            [ 2] 1073 	jra 18$
      001A8D                       1074 9$: 
      001A8D A1 82            [ 1] 1075 	cp a,#TK_CFUNC 
      001A8F 26 0E            [ 1] 1076 	jrne 12$
      001A91                       1077 	_get_code_addr 
      001A91 FE               [ 2]    1         ldw x,(x)
      001A92 72 5C 00 01      [ 1]    2         inc in 
      001A96 72 5C 00 01      [ 1]    3         inc in 
      001A9A FD               [ 4] 1078 	call(x)
      001A9B 5F               [ 1] 1079 	clrw x 
      001A9C 02               [ 1] 1080 	rlwa x  ; char>int24 in A:X 
      001A9D 20 1F            [ 2] 1081 	jra 18$ 	 
      001A9F                       1082 12$:			
      001A9F A1 06            [ 1] 1083 	cp a,#TK_LPAREN
      001AA1 26 13            [ 1] 1084 	jrne 16$
      001AA3 CD 1B 16         [ 4] 1085 	call expression
      001AA6 A6 07            [ 1] 1086 	ld a,#TK_RPAREN 
      001AA8 CD 19 C2         [ 4] 1087 	call expect
      001AAB                       1088 	_xpop 
      001AAB 90 F6            [ 1]    1     ld a,(y)
      001AAD 93               [ 1]    2     ldw x,y 
      001AAE EE 01            [ 2]    3     ldw x,(1,x)
      001AB0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AB4 20 08            [ 2] 1089 	jra 18$	
      001AB6                       1090 16$:
      001AB6                       1091 	_unget_token 
      001AB6 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001ABB 4F               [ 1] 1092 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001ABC 20 12            [ 2] 1093 	jra 22$ 
      001ABE                       1094 18$: 
      001ABE 0D 01            [ 1] 1095 	tnz (NEG,sp)
      001AC0 27 03            [ 1] 1096 	jreq 20$
      001AC2 CD 02 15         [ 4] 1097 	call neg_ax   
      001AC5                       1098 20$:
      001AC5                       1099 	_xpush 
      001AC5 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001AC9 90 F7            [ 1]    2     ld (y),a 
      001ACB 90 EF 01         [ 2]    3     ldw (1,y),x 
      001ACE A6 84            [ 1] 1100 	ld a,#TK_INTGR
      001AD0                       1101 22$:
      001AD0                       1102 	_drop VSIZE
      001AD0 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AD2 81               [ 4] 1103 	ret
                                   1104 
                                   1105 
                                   1106 ;-----------------------------------
                                   1107 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1108 ; output:
                                   1109 ;   A    	token attribute 
                                   1110 ;	xstack		value 
                                   1111 ;-----------------------------------
                           000001  1112 	MULOP=1
                           000001  1113 	VSIZE=1
      001AD3                       1114 term:
      001AD3                       1115 	_vars VSIZE
      001AD3 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1116 ; first factor 	
      001AD5 CD 1A 1E         [ 4] 1117 	call factor
      001AD8 4D               [ 1] 1118 	tnz a 
      001AD9 27 38            [ 1] 1119 	jreq term_exit  
      001ADB                       1120 term01:	 ; check for  operator '*'|'/'|'%' 
      001ADB CD 18 0C         [ 4] 1121 	call next_token
      001ADE 6B 01            [ 1] 1122 	ld (MULOP,sp),a
      001AE0 A4 30            [ 1] 1123 	and a,#TK_GRP_MASK
      001AE2 A1 20            [ 1] 1124 	cp a,#TK_GRP_MULT
      001AE4 27 09            [ 1] 1125 	jreq 1$
      001AE6 A6 84            [ 1] 1126 	ld a,#TK_INTGR
      001AE8                       1127 	_unget_token 
      001AE8 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001AED 20 24            [ 2] 1128 	jra term_exit 
      001AEF                       1129 1$:	; got *|/|%
                                   1130 ;second factor
      001AEF CD 1A 1E         [ 4] 1131 	call factor
      001AF2 4D               [ 1] 1132 	tnz a 
      001AF3 26 03            [ 1] 1133 	jrne 2$ 
      001AF5 CC 16 A5         [ 2] 1134 	jp syntax_error 
      001AF8                       1135 2$: ; select operation 	
      001AF8 7B 01            [ 1] 1136 	ld a,(MULOP,sp) 
      001AFA A1 20            [ 1] 1137 	cp a,#TK_MULT 
      001AFC 26 05            [ 1] 1138 	jrne 3$
                                   1139 ; '*' operator
      001AFE CD 02 79         [ 4] 1140 	call mul24 
      001B01 20 D8            [ 2] 1141 	jra term01
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001B03 A1 21            [ 1] 1142 3$: cp a,#TK_DIV 
      001B05 26 05            [ 1] 1143 	jrne 4$ 
                                   1144 ; '/' operator	
      001B07 CD 03 07         [ 4] 1145 	call div24 
      001B0A 20 CF            [ 2] 1146 	jra term01 
      001B0C                       1147 4$: ; '%' operator
      001B0C CD 03 A1         [ 4] 1148 	call mod24
      001B0F 20 CA            [ 2] 1149 	jra term01 
      001B11                       1150 9$: 
      001B11 A6 84            [ 1] 1151 	ld a,#TK_INTGR
      001B13                       1152 term_exit:
      001B13                       1153 	_drop VSIZE 
      001B13 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B15 81               [ 4] 1154 	ret 
                                   1155 
                                   1156 ;-------------------------------
                                   1157 ;  expr ::= term [['+'|'-'] term]*
                                   1158 ;  result range {-32768..32767}
                                   1159 ;  output:
                                   1160 ;   A    token attribute 
                                   1161 ;   xstack	 result    
                                   1162 ;-------------------------------
                           000001  1163 	OP=1 
                           000001  1164 	VSIZE=1 
      001B16                       1165 expression:
      001B16                       1166 	_vars VSIZE 
      001B16 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1167 ; first term 	
      001B18 CD 1A D3         [ 4] 1168 	call term
      001B1B 4D               [ 1] 1169 	tnz a 
      001B1C 27 2D            [ 1] 1170 	jreq 9$
      001B1E                       1171 1$:	; operator '+'|'-'
      001B1E CD 18 0C         [ 4] 1172 	call next_token
      001B21 6B 01            [ 1] 1173 	ld (OP,sp),a 
      001B23 A4 30            [ 1] 1174 	and a,#TK_GRP_MASK
      001B25 A1 10            [ 1] 1175 	cp a,#TK_GRP_ADD 
      001B27 27 09            [ 1] 1176 	jreq 2$ 
      001B29                       1177 	_unget_token 
      001B29 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B2E A6 84            [ 1] 1178 	ld a,#TK_INTGR
      001B30 20 19            [ 2] 1179 	jra 9$ 
      001B32                       1180 2$: ; second term 
      001B32 CD 1A D3         [ 4] 1181 	call term
      001B35 4D               [ 1] 1182 	tnz a 
      001B36 26 03            [ 1] 1183 	jrne 3$
      001B38 CC 16 A5         [ 2] 1184 	jp syntax_error
      001B3B                       1185 3$:
      001B3B 7B 01            [ 1] 1186 	ld a,(OP,sp)
      001B3D A1 10            [ 1] 1187 	cp a,#TK_PLUS 
      001B3F 26 05            [ 1] 1188 	jrne 4$
                                   1189 ; '+' operator	
      001B41 CD 01 7E         [ 4] 1190 	call add24
      001B44 20 D8            [ 2] 1191 	jra 1$ 
      001B46                       1192 4$:	; '-' operator 
      001B46 CD 01 9B         [ 4] 1193 	call sub24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B49 20 D3            [ 2] 1194 	jra 1$
      001B4B                       1195 9$:
      001B4B                       1196 	_drop VSIZE 
      001B4B 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B4D 81               [ 4] 1197 	ret 
                                   1198 
                                   1199 ;---------------------------------------------
                                   1200 ; rel ::= expr rel_op expr
                                   1201 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1202 ;  relation return  integer , zero is false 
                                   1203 ;  output:
                                   1204 ;	 xstack		value  
                                   1205 ;---------------------------------------------
                           000001  1206 	RELOP=1
                           000001  1207 	VSIZE=1 
      001B4E                       1208 relation: 
      001B4E                       1209 	_vars VSIZE
      001B4E 52 01            [ 2]    1     sub sp,#VSIZE 
      001B50 CD 1B 16         [ 4] 1210 	call expression
      001B53 4D               [ 1] 1211 	tnz a 
      001B54 27 54            [ 1] 1212 	jreq 9$ 
                                   1213 ; expect rel_op or leave 
      001B56 CD 18 0C         [ 4] 1214 	call next_token 
      001B59 6B 01            [ 1] 1215 	ld (RELOP,sp),a 
      001B5B A4 30            [ 1] 1216 	and a,#TK_GRP_MASK
      001B5D A1 30            [ 1] 1217 	cp a,#TK_GRP_RELOP 
      001B5F 27 09            [ 1] 1218 	jreq 2$
      001B61 A6 84            [ 1] 1219 	ld a,#TK_INTGR 
      001B63                       1220 	_unget_token 
      001B63 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B68 20 40            [ 2] 1221 	jra 9$ 
      001B6A                       1222 2$:	; expect another expression
      001B6A CD 1B 16         [ 4] 1223 	call expression
      001B6D 4D               [ 1] 1224 	tnz a 
      001B6E 26 03            [ 1] 1225 	jrne 3$
      001B70 CC 16 A5         [ 2] 1226 	jp syntax_error 
      001B73                       1227 3$: 
      001B73 CD 01 B8         [ 4] 1228 	call cp24 
      001B76                       1229 	_xpop  
      001B76 90 F6            [ 1]    1     ld a,(y)
      001B78 93               [ 1]    2     ldw x,y 
      001B79 EE 01            [ 2]    3     ldw x,(1,x)
      001B7B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B7F 4D               [ 1] 1230 	tnz a 
      001B80 2B 08            [ 1] 1231 	jrmi 4$
      001B82 26 0C            [ 1] 1232 	jrne 5$
      001B84 35 02 00 0E      [ 1] 1233 	mov acc8,#2 ; i1==i2
      001B88 20 0A            [ 2] 1234 	jra 6$ 
      001B8A                       1235 4$: ; i1<i2
      001B8A 35 04 00 0E      [ 1] 1236 	mov acc8,#4 
      001B8E 20 04            [ 2] 1237 	jra 6$
      001B90                       1238 5$: ; i1>i2
      001B90 35 01 00 0E      [ 1] 1239 	mov acc8,#1  
      001B94                       1240 6$: ; 0=false, -1=true 
      001B94 5F               [ 1] 1241 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B95 C6 00 0E         [ 1] 1242 	ld a, acc8  
      001B98 14 01            [ 1] 1243 	and a,(RELOP,sp)
      001B9A 27 03            [ 1] 1244 	jreq 7$
      001B9C 53               [ 2] 1245 	cplw x 
      001B9D A6 FF            [ 1] 1246 	ld a,#255 
      001B9F                       1247 7$:	_xpush 
      001B9F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BA3 90 F7            [ 1]    2     ld (y),a 
      001BA5 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BA8 A6 84            [ 1] 1248 	ld a,#TK_INTGR
      001BAA                       1249 9$: 
      001BAA                       1250 	_drop VSIZE
      001BAA 5B 01            [ 2]    1     addw sp,#VSIZE 
      001BAC 81               [ 4] 1251 	ret 
                                   1252 
                                   1253 ;-------------------------------------------
                                   1254 ;  AND factor:  [NOT] relation | (condition)
                                   1255 ;  output:
                                   1256 ;     A      TK_INTGR|0
                                   1257 ;-------------------------------------------
                           000001  1258 	NOT_OP=1
      001BAD                       1259 and_factor:
      001BAD 4B 00            [ 1] 1260 	push #0 
      001BAF CD 18 0C         [ 4] 1261 0$:	call next_token  
      001BB2 4D               [ 1] 1262 	tnz a 
      001BB3 27 25            [ 1] 1263 	jreq 8$ 
      001BB5 A1 87            [ 1] 1264 	cp a,#TK_NOT 
      001BB7 26 04            [ 1] 1265 	jrne 1$ 
      001BB9 03 01            [ 1] 1266 	cpl (NOT_OP,sp)
      001BBB 20 F2            [ 2] 1267 	jra 0$ 
      001BBD                       1268 1$:	
      001BBD A1 06            [ 1] 1269 	cp a,#TK_LPAREN 
      001BBF 26 0A            [ 1] 1270 	jrne 2$
      001BC1 CD 1C 2F         [ 4] 1271 	call condition
      001BC4 A6 07            [ 1] 1272 	ld a,#TK_RPAREN 
      001BC6 CD 19 C2         [ 4] 1273 	call expect
      001BC9 20 08            [ 2] 1274 	jra 3$
      001BCB                       1275 2$: _unget_token 
      001BCB 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001BD0 CD 1B 4E         [ 4] 1276 	call relation
      001BD3                       1277 3$:
      001BD3 0D 01            [ 1] 1278 	tnz (NOT_OP,sp)
      001BD5 27 03            [ 1] 1279 	jreq 8$ 
      001BD7 CD 01 FA         [ 4] 1280 	call cpl24
      001BDA                       1281 8$:
      001BDA                       1282 	_drop 1  
      001BDA 5B 01            [ 2]    1     addw sp,#1 
      001BDC 81               [ 4] 1283     ret 
                                   1284 
                                   1285 
                                   1286 ;--------------------------------------------
                                   1287 ;  AND operator as priority over OR||XOR 
                                   1288 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1289 ;          
                                   1290 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



                                   1291 ;     A     TK_INTGR|0
                                   1292 ;    xtack   value 
                                   1293 ;--------------------------------------------
      001BDD                       1294 and_cond:
      001BDD CD 1B AD         [ 4] 1295 	call and_factor
      001BE0 4D               [ 1] 1296 	tnz a 
      001BE1 27 4B            [ 1] 1297 	jreq 9$  
      001BE3 CD 18 0C         [ 4] 1298 1$: call next_token 
      001BE6 4D               [ 1] 1299 	tnz a 
      001BE7 27 43            [ 1] 1300 	jreq 6$ 
      001BE9 A1 88            [ 1] 1301 	cp a,#TK_AND 
      001BEB 27 07            [ 1] 1302 	jreq 3$
      001BED                       1303 	_unget_token 
      001BED 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001BF2 20 38            [ 2] 1304 	jra 6$ 
      001BF4 CD 1B AD         [ 4] 1305 3$:	call and_factor  
      001BF7 4D               [ 1] 1306 	tnz a 
      001BF8 26 03            [ 1] 1307 	jrne 4$
      001BFA CC 16 A5         [ 2] 1308 	jp syntax_error 
      001BFD                       1309 4$:	
      001BFD                       1310 	_xpop 
      001BFD 90 F6            [ 1]    1     ld a,(y)
      001BFF 93               [ 1]    2     ldw x,y 
      001C00 EE 01            [ 2]    3     ldw x,(1,x)
      001C02 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C06 C7 00 0C         [ 1] 1311 	ld acc24,a 
      001C09 CF 00 0D         [ 2] 1312 	ldw acc16,x
      001C0C                       1313 	_xpop 
      001C0C 90 F6            [ 1]    1     ld a,(y)
      001C0E 93               [ 1]    2     ldw x,y 
      001C0F EE 01            [ 2]    3     ldw x,(1,x)
      001C11 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C15 C4 00 0C         [ 1] 1314 	and a,acc24 
      001C18 02               [ 1] 1315 	rlwa x 
      001C19 C4 00 0D         [ 1] 1316 	and a,acc16 
      001C1C 02               [ 1] 1317 	rlwa x 
      001C1D C4 00 0E         [ 1] 1318 	and a,acc8 
      001C20 02               [ 1] 1319 	rlwa x
      001C21                       1320 	_xpush
      001C21 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C25 90 F7            [ 1]    2     ld (y),a 
      001C27 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C2A 20 B7            [ 2] 1321 	jra 1$  
      001C2C A6 84            [ 1] 1322 6$: ld a,#TK_INTGR 
      001C2E 81               [ 4] 1323 9$:	ret 	 
                                   1324 
                                   1325 
                                   1326 ;--------------------------------------------
                                   1327 ; condition for IF and UNTIL 
                                   1328 ; operators: OR,XOR 
                                   1329 ; format:  and_cond [ OP and_cond ]* 
                                   1330 ; output:
                                   1331 ;    A        INTGR|0 
                                   1332 ;    xstack   value 
                                   1333 ;--------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                           000001  1334 	ATMP=1
                           000002  1335 	OP=2
                           000002  1336 	VSIZE=2 
      001C2F                       1337 condition:
      001C2F                       1338 	_vars VSIZE 
      001C2F 52 02            [ 2]    1     sub sp,#VSIZE 
      001C31 CD 1B DD         [ 4] 1339 	call and_cond
      001C34 4D               [ 1] 1340 	tnz a 
      001C35 27 69            [ 1] 1341 	jreq 9$ 
      001C37 CD 18 0C         [ 4] 1342 1$:	call next_token 
      001C3A A1 89            [ 1] 1343 	cp a,#TK_OR 
      001C3C 27 0B            [ 1] 1344 	jreq 2$
      001C3E A1 8A            [ 1] 1345 	cp a,#TK_XOR
      001C40 27 07            [ 1] 1346 	jreq 2$ 
      001C42                       1347 	_unget_token 
      001C42 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C47 20 55            [ 2] 1348 	jra 8$ 
      001C49 6B 02            [ 1] 1349 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001C4B CD 1B DD         [ 4] 1350 	call and_cond
      001C4E A1 84            [ 1] 1351 	cp a,#TK_INTGR 
      001C50 27 03            [ 1] 1352 	jreq 3$
      001C52 CC 16 A5         [ 2] 1353 	jp syntax_error 
      001C55                       1354 3$:	 
      001C55                       1355 	_xpop  ; rigth arg 
      001C55 90 F6            [ 1]    1     ld a,(y)
      001C57 93               [ 1]    2     ldw x,y 
      001C58 EE 01            [ 2]    3     ldw x,(1,x)
      001C5A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C5E C7 00 0C         [ 1] 1356 	ld acc24,a 
      001C61 CF 00 0D         [ 2] 1357 	ldw acc16,x 
      001C64                       1358 	_xpop  ; left arg  
      001C64 90 F6            [ 1]    1     ld a,(y)
      001C66 93               [ 1]    2     ldw x,y 
      001C67 EE 01            [ 2]    3     ldw x,(1,x)
      001C69 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C6D 6B 01            [ 1] 1359 	ld (ATMP,sp),a 
      001C6F 7B 02            [ 1] 1360 	ld a,(OP,sp)
      001C71 A1 8A            [ 1] 1361 	cp a,#TK_XOR 
      001C73 27 10            [ 1] 1362 	jreq 5$ 
      001C75                       1363 4$: ; A:X OR acc24   
      001C75 7B 01            [ 1] 1364 	ld a,(ATMP,sp)
      001C77 CA 00 0C         [ 1] 1365 	or a,acc24 
      001C7A 02               [ 1] 1366 	rlwa x 
      001C7B CA 00 0D         [ 1] 1367 	or a,acc16 
      001C7E 02               [ 1] 1368 	rlwa x 
      001C7F CA 00 0E         [ 1] 1369 	or a,acc8 
      001C82 02               [ 1] 1370 	rlwa x 
      001C83 20 0E            [ 2] 1371 	jra 6$  
      001C85                       1372 5$: ; A:X XOR acc24 
      001C85 7B 01            [ 1] 1373 	ld a,(ATMP,sp)
      001C87 C8 00 0C         [ 1] 1374 	xor a,acc24 
      001C8A 02               [ 1] 1375 	rlwa x 
      001C8B C8 00 0D         [ 1] 1376 	xor a,acc16 
      001C8E 02               [ 1] 1377 	rlwa x 
      001C8F C8 00 0E         [ 1] 1378 	xor a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C92 02               [ 1] 1379 	rlwa x 
      001C93                       1380 6$: _xpush
      001C93 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C97 90 F7            [ 1]    2     ld (y),a 
      001C99 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C9C 20 99            [ 2] 1381 	jra 1$ 
      001C9E A6 84            [ 1] 1382 8$:	ld a,#TK_INTGR 
      001CA0                       1383 9$:	_drop VSIZE 
      001CA0 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CA2 81               [ 4] 1384 	ret 
                                   1385 
                                   1386 
                                   1387 ;--------------------------------------------
                                   1388 ; BASIC: HEX 
                                   1389 ; select hexadecimal base for integer print
                                   1390 ;---------------------------------------------
      001CA3                       1391 hex_base:
      001CA3 35 10 00 0A      [ 1] 1392 	mov base,#16 
      001CA7 81               [ 4] 1393 	ret 
                                   1394 
                                   1395 ;--------------------------------------------
                                   1396 ; BASIC: DEC 
                                   1397 ; select decimal base for integer print
                                   1398 ;---------------------------------------------
      001CA8                       1399 dec_base:
      001CA8 35 0A 00 0A      [ 1] 1400 	mov base,#10
      001CAC 81               [ 4] 1401 	ret 
                                   1402 
                                   1403 ;------------------------
                                   1404 ; BASIC: FREE 
                                   1405 ; return free size in RAM 
                                   1406 ; output:
                                   1407 ;   A:x		size 
                                   1408 ;--------------------------
      001CAD                       1409 free:
      001CAD 4F               [ 1] 1410 	clr a 
      001CAE AE 16 68         [ 2] 1411 	ldw x,#tib 
      001CB1 72 B0 00 32      [ 2] 1412 	subw x,dvar_end 
      001CB5 81               [ 4] 1413 	ret 
                                   1414 
                                   1415 ;------------------------------
                                   1416 ; BASIC: SIZE 
                                   1417 ; command that print 
                                   1418 ; program start addres and size 
                                   1419 ;------------------------------
      001CB6                       1420 cmd_size:
      001CB6 3B 00 0A         [ 1] 1421 	push base 
      001CB9 AE 1E A3         [ 2] 1422 	ldw x,#PROG_ADDR 
      001CBC CD 09 5C         [ 4] 1423 	call puts 
      001CBF CE 00 1B         [ 2] 1424 	ldw x,txtbgn     
      001CC2 35 10 00 0A      [ 1] 1425 	mov base,#16 
      001CC6 CD 18 54         [ 4] 1426 	call prt_i16
      001CC9 32 00 0A         [ 1] 1427 	pop base 
      001CCC AE 1E B5         [ 2] 1428 	ldw x,#PROG_SIZE 
      001CCF CD 09 5C         [ 4] 1429 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001CD2 CE 00 1D         [ 2] 1430 	ldw x,txtend 
      001CD5 72 B0 00 1B      [ 2] 1431 	subw x,txtbgn 
      001CD9 CD 18 54         [ 4] 1432 	call prt_i16
      001CDC AE 1E C6         [ 2] 1433 	ldw x,#STR_BYTES 
      001CDF CD 09 5C         [ 4] 1434 	call puts  
      001CE2 81               [ 4] 1435 	ret 
                                   1436 
                                   1437 
                                   1438 ;------------------------
                                   1439 ; BASIC: UBOUND  
                                   1440 ; return array variable size 
                                   1441 ; and set 'array_size' variable 
                                   1442 ; output:
                                   1443 ;   A:X 	array_size
                                   1444 ;--------------------------
      001CE3                       1445 ubound:
      001CE3 CD 1C AD         [ 4] 1446 	call free 
      001CE6 A6 03            [ 1] 1447 	ld a,#CELL_SIZE 
      001CE8 62               [ 2] 1448 	div x,a 
      001CE9 CF 00 20         [ 2] 1449 	ldw array_size,x
      001CEC 4F               [ 1] 1450 	clr a 
      001CED 81               [ 4] 1451 	ret 
                                   1452 
                                   1453 ;-----------------------------
                                   1454 ; BASIC: LET var=expr 
                                   1455 ; variable assignement 
                                   1456 ; output:
                                   1457 ;   A 		TK_NONE 
                                   1458 ;-----------------------------
      001CEE                       1459 let::
      001CEE CD 18 0C         [ 4] 1460 	call next_token 
      001CF1 A1 85            [ 1] 1461 	cp a,#TK_VAR 
      001CF3 27 0C            [ 1] 1462 	jreq let_var
      001CF5 A1 05            [ 1] 1463 	cp a,#TK_ARRAY 
      001CF7 27 03            [ 1] 1464 	jreq  let_array
      001CF9 CC 16 A5         [ 2] 1465 	jp syntax_error
      001CFC                       1466 let_array:
      001CFC CD 19 F0         [ 4] 1467 	call get_array_element
      001CFF 20 03            [ 2] 1468 	jra let_eval 
      001D01                       1469 let_var:
      001D01 CD 18 34         [ 4] 1470 	call get_addr
      001D04                       1471 let_eval:
      001D04 CF 00 19         [ 2] 1472 	ldw ptr16,x  ; variable address 
      001D07 CD 18 0C         [ 4] 1473 	call next_token 
      001D0A A1 32            [ 1] 1474 	cp a,#TK_EQUAL
      001D0C 27 03            [ 1] 1475 	jreq 1$
      001D0E CC 16 A5         [ 2] 1476 	jp syntax_error
      001D11                       1477 1$:	
      001D11 CD 1C 2F         [ 4] 1478 	call condition   
      001D14 A1 84            [ 1] 1479 	cp a,#TK_INTGR 
      001D16 27 03            [ 1] 1480 	jreq 2$
      001D18 CC 16 A5         [ 2] 1481 	jp syntax_error
      001D1B                       1482 2$:	
      001D1B                       1483 	_xpop ; value 
      001D1B 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D1D 93               [ 1]    2     ldw x,y 
      001D1E EE 01            [ 2]    3     ldw x,(1,x)
      001D20 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D24                       1484 3$:
      001D24 72 C7 00 19      [ 4] 1485 	ld [ptr16],a
      001D28 72 5C 00 1A      [ 1] 1486 	inc ptr8  
      001D2C 72 CF 00 19      [ 5] 1487 	ldw [ptr16],x 
      001D30 81               [ 4] 1488 	ret 
                                   1489 
                                   1490 
                                   1491 ;--------------------------
                                   1492 ; return constant/dvar value 
                                   1493 ; from it's record address
                                   1494 ; input:
                                   1495 ;	X	*const record 
                                   1496 ; output:
                                   1497 ;   A:X   const  value
                                   1498 ;--------------------------
      001D31                       1499 get_value: ; -- i 
      001D31 F6               [ 1] 1500 	ld a,(x) ; record size 
      001D32 A4 0F            [ 1] 1501 	and a,#NAME_MAX_LEN
      001D34 A0 03            [ 1] 1502 	sub a,#CELL_SIZE ; * value 
      001D36 88               [ 1] 1503 	push a 
      001D37 4B 00            [ 1] 1504 	push #0 
      001D39 72 FB 01         [ 2] 1505 	addw x,(1,sp)
      001D3C F6               [ 1] 1506 	ld a,(x)
      001D3D EE 01            [ 2] 1507 	ldw x,(1,x)
      001D3F                       1508 	_drop 2
      001D3F 5B 02            [ 2]    1     addw sp,#2 
      001D41 81               [ 4] 1509 	ret 
                                   1510 
                                   1511 
                                   1512 ;--------------------------
                                   1513 ; BASIC: EEFREE 
                                   1514 ; eeprom_free 
                                   1515 ; search end of data  
                                   1516 ; in EEPROM 
                                   1517 ; input:
                                   1518 ;    none 
                                   1519 ; output:
                                   1520 ;    A:X     address free
                                   1521 ;-------------------------
      001D42                       1522 func_eefree:
      001D42 AE 40 00         [ 2] 1523 	ldw x,#EEPROM_BASE 
      001D45 35 08 00 0E      [ 1] 1524 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D49 A3 47 F8         [ 2] 1525     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D4C 24 17            [ 1] 1526 	jruge 8$ ; no free space 
      001D4E F6               [ 1] 1527 2$: ld a,(x)
      001D4F 26 0C            [ 1] 1528 	jrne 3$
      001D51 5C               [ 1] 1529 	incw x 
      001D52 72 5A 00 0E      [ 1] 1530 	dec acc8 
      001D56 26 F6            [ 1] 1531 	jrne 2$
      001D58 1D 00 08         [ 2] 1532 	subw x,#8 
      001D5B 20 09            [ 2] 1533 	jra 9$  
      001D5D F6               [ 1] 1534 3$: ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D5E 5C               [ 1] 1535 	incw x
      001D5F 4D               [ 1] 1536 	tnz a  
      001D60 26 FB            [ 1] 1537 	jrne 3$
      001D62 5A               [ 2] 1538 	decw x   
      001D63 20 E0            [ 2] 1539 	jra 1$ 
      001D65 5F               [ 1] 1540 8$: clrw x ; no free space 
      001D66 4F               [ 1] 1541 9$: clr a 
      001D67 CF 00 24         [ 2] 1542 	ldw free_eeprom,x ; save in system variable 
      001D6A 81               [ 4] 1543 	ret 
                                   1544 
                           000005  1545 REC_XTRA_BYTES=5 
                                   1546 ;--------------------------
                                   1547 ; search constant/dim_var name 
                                   1548 ; format of record  
                                   1549 ;   .byte record length 
                                   1550 ;         = strlen(name)+5 
                                   1551 ;   .asciz name (variable length)
                                   1552 ;   .int24 value (3 bytes )
                                   1553 ; a constant record use 7+ bytes
                                   1554 ; constants are saved in EEPROM  
                                   1555 ; input:
                                   1556 ;    A     record_len 
                                   1557 ;    X     *name
                                   1558 ; output:
                                   1559 ;    X     address|0
                                   1560 ; use:
                                   1561 ;   A,Y, acc16 
                                   1562 ;-------------------------
                           000001  1563 	NAMEPTR=1 ; target name pointer 
                           000003  1564 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1565 	RECLEN=5  ; record length of target
                           000007  1566 	LIMIT=7   ; search area limit 
                           000008  1567 	VSIZE=8  
      001D6B                       1568 search_name:
      001D6B 90 89            [ 2] 1569 	pushw y 
      001D6D                       1570 	_vars VSIZE
      001D6D 52 08            [ 2]    1     sub sp,#VSIZE 
      001D6F 72 5F 00 0D      [ 1] 1571 	clr acc16 
      001D73 6B 05            [ 1] 1572 	ld (RECLEN,sp),a    
      001D75 1F 01            [ 2] 1573 	ldw (NAMEPTR,sp),x
      001D77 CE 00 32         [ 2] 1574 	ldw x,dvar_end 
      001D7A 1F 07            [ 2] 1575 	ldw (LIMIT,sp),x 
      001D7C 90 CE 00 30      [ 2] 1576 	ldw y,dvar_bgn
      001D80 17 03            [ 2] 1577 1$:	ldw (WLKPTR,sp),y
      001D82 93               [ 1] 1578 	ldw x,y 
      001D83 13 07            [ 2] 1579 	cpw x, (LIMIT,sp) 
      001D85 24 20            [ 1] 1580 	jruge 7$ ; no match found 
      001D87 90 F6            [ 1] 1581 	ld a,(y)
      001D89 A4 0F            [ 1] 1582 	and a,#NAME_MAX_LEN
      001D8B 11 05            [ 1] 1583 	cp a,(RECLEN,sp)
      001D8D 26 09            [ 1] 1584 	jrne 2$ 
      001D8F 90 5C            [ 1] 1585 	incw y 
      001D91 1E 01            [ 2] 1586 	ldw x,(NAMEPTR,sp)
      001D93 CD 13 A4         [ 4] 1587 	call strcmp
      001D96 26 13            [ 1] 1588 	jrne 8$ ; match found 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001D98                       1589 2$: ; skip this one 	
      001D98 16 03            [ 2] 1590 	ldW Y,(WLKPTR,sp)
      001D9A 90 F6            [ 1] 1591 	ld a,(y)
      001D9C A4 0F            [ 1] 1592 	and a,#NAME_MAX_LEN 
      001D9E C7 00 0E         [ 1] 1593 	ld acc8,a 
      001DA1 72 B9 00 0D      [ 2] 1594 	addw y,acc16 
      001DA5 20 D9            [ 2] 1595 	jra 1$  
      001DA7                       1596 7$: ; no match found 
      001DA7 0F 03            [ 1] 1597 	clr (WLKPTR,sp)
      001DA9 0F 04            [ 1] 1598 	clr (WLKPTR+1,sp)
      001DAB                       1599 8$: ; match found 
      001DAB 1E 03            [ 2] 1600 	ldw x,(WLKPTR,sp) ; record address 
      001DAD                       1601 9$:	_DROP VSIZE
      001DAD 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DAF 90 85            [ 2] 1602 	popw y 
      001DB1 81               [ 4] 1603 	 ret 
                                   1604 
                                   1605 ;--------------------------------------------
                                   1606 ; BASIC: CONST name=value [, name=value]*
                                   1607 ; define constant(s) saved in EEPROM
                                   1608 ; share most of his code with cmd_dim 
                                   1609 ;--------------------------------------------
                           000001  1610 	VAR_NAME=1 
                           000003  1611 	REC_LEN=3
                           000005  1612 	RONLY=5
                           000005  1613 	VSIZE=5
      001DB2                       1614 cmd_const:
      001DB2 72 00 00 22 05   [ 2] 1615 	btjt flags,#FRUN,0$
      001DB7 A6 06            [ 1] 1616 	ld a,#ERR_RUN_ONLY
      001DB9 CC 16 A7         [ 2] 1617 	jp tb_error 
      001DBC                       1618 0$: 
      001DBC                       1619 	_vars VSIZE 
      001DBC 52 05            [ 2]    1     sub sp,#VSIZE 
      001DBE A6 80            [ 1] 1620 	ld a,#128 
      001DC0 6B 05            [ 1] 1621 	ld (RONLY,sp),a 
      001DC2 0F 03            [ 1] 1622 	clr (REC_LEN,sp)
      001DC4 20 10            [ 2] 1623 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1624 
                                   1625 ;---------------------------------
                                   1626 ; BASIC: DIM var_name [var_name]* 
                                   1627 ; create named variables at end 
                                   1628 ; of BASIC program. 
                                   1629 ; These variables are initialized 
                                   1630 ; to 0. 
                                   1631 ; record format same ast CONST 
                                   1632 ; but r/w because stored in RAM 
                                   1633 ;---------------------------------
      001DC6                       1634 cmd_dim:
      001DC6 72 00 00 22 05   [ 2] 1635 	btjt flags,#FRUN,cmd_dim1
      001DCB A6 06            [ 1] 1636 	ld a,#ERR_RUN_ONLY
      001DCD CC 16 A7         [ 2] 1637 	jp tb_error 
      001DD0                       1638 cmd_dim1:	
      001DD0                       1639 	_vars VSIZE
      001DD0 52 05            [ 2]    1     sub sp,#VSIZE 
      001DD2 0F 03            [ 1] 1640 	clr (REC_LEN,sp )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001DD4 0F 05            [ 1] 1641 	clr (RONLY,sp)
      001DD6                       1642 cmd_dim2: 
      001DD6 CD 18 0C         [ 4] 1643 0$:	call next_token 
      001DD9 A1 03            [ 1] 1644 	cp a,#TK_LABEL  
      001DDB 27 03            [ 1] 1645 	jreq 1$ 
      001DDD CC 16 A5         [ 2] 1646 	jp syntax_error 
      001DE0 1F 01            [ 2] 1647 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001DE2 CD 13 99         [ 4] 1648 	call strlen
      001DE5 AB 05            [ 1] 1649 	add a,#REC_XTRA_BYTES
      001DE7 6B 04            [ 1] 1650 	ld (REC_LEN+1,sp),a
      001DE9 CD 18 25         [ 4] 1651 	call skip_string 
      001DEC 7B 04            [ 1] 1652 	ld a,(REC_LEN+1,sp)
      001DEE 1E 01            [ 2] 1653 	ldw x,(VAR_NAME,sp) 
      001DF0 CD 1D 6B         [ 4] 1654 	call search_name  
      001DF3 5D               [ 2] 1655 	tnzw x 
      001DF4 27 05            [ 1] 1656 	jreq 2$
      001DF6 A6 08            [ 1] 1657 	ld a,#ERR_DUPLICATE
      001DF8 CC 16 A7         [ 2] 1658 	jp tb_error  
      001DFB CE 00 32         [ 2] 1659 2$:	ldw x,dvar_end 
      001DFE 7B 04            [ 1] 1660 	ld a,(REC_LEN+1,sp)
      001E00 1A 05            [ 1] 1661 	or a,(RONLY,sp)
      001E02 F7               [ 1] 1662 	ld (x),a 
      001E03 5C               [ 1] 1663 	incw x 
      001E04 90 89            [ 2] 1664 	pushw y 
      001E06 16 03            [ 2] 1665 	ldw y,(VAR_NAME+2,sp)
      001E08 CD 13 B5         [ 4] 1666 	call strcpy
      001E0B 90 85            [ 2] 1667 	popw y 
      001E0D 5A               [ 2] 1668 	decw x
      001E0E 72 FB 03         [ 2] 1669 	addw x,(REC_LEN,sp)
      001E11 CF 00 32         [ 2] 1670 	ldw dvar_end,x 
      001E14 1D 00 03         [ 2] 1671 	subw x,#CELL_SIZE  
      001E17 7F               [ 1] 1672 	clr (x)
      001E18 6F 01            [ 1] 1673 	clr (1,x)  
      001E1A 6F 02            [ 1] 1674 	clr (2,x)
      001E1C CD 18 0C         [ 4] 1675 4$: call next_token 
      001E1F A1 08            [ 1] 1676 	cp a,#TK_COMMA 
      001E21 27 B3            [ 1] 1677 	jreq 0$ 
      001E23 A1 32            [ 1] 1678 	cp a,#TK_EQUAL 
      001E25 26 2A            [ 1] 1679 	jrne 8$
                                   1680 ; initialize variable 
      001E27 CD 1C 2F         [ 4] 1681 	call condition 
      001E2A A1 84            [ 1] 1682 	cp a,#TK_INTGR
      001E2C 27 03            [ 1] 1683 	jreq 5$
      001E2E CC 16 A5         [ 2] 1684 	jp syntax_error
      001E31 CE 00 32         [ 2] 1685 5$: ldw x,dvar_end 
      001E34 1D 00 03         [ 2] 1686 	subw x,#CELL_SIZE 
      001E37 CF 00 19         [ 2] 1687 	ldw ptr16,x 
      001E3A                       1688 	_xpop 
      001E3A 90 F6            [ 1]    1     ld a,(y)
      001E3C 93               [ 1]    2     ldw x,y 
      001E3D EE 01            [ 2]    3     ldw x,(1,x)
      001E3F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E43 72 C7 00 19      [ 4] 1689 	ld [ptr16],a 
      001E47 72 5C 00 1A      [ 1] 1690 	inc ptr8 
      001E4B 72 CF 00 19      [ 5] 1691 	ldw [ptr16],x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E4F 20 CB            [ 2] 1692 	jra 4$ 
      001E51                       1693 8$:	
      001E51                       1694 	_unget_token 	
      001E51 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001E56                       1695 	_drop VSIZE 
      001E56 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E58 CD 1C E3         [ 4] 1696 	call ubound 
      001E5B 81               [ 4] 1697 	ret 
                                   1698 
                                   1699 
                                   1700 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1701 ; return program size 
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E5C                       1703 prog_size:
      001E5C CE 00 1D         [ 2] 1704 	ldw x,txtend 
      001E5F 72 B0 00 1B      [ 2] 1705 	subw x,txtbgn 
      001E63 81               [ 4] 1706 	ret 
                                   1707 
                                   1708 ;----------------------------
                                   1709 ; print program information 
                                   1710 ;---------------------------
      001E64                       1711 program_info: 
      001E64 AE 1E A3         [ 2] 1712 	ldw x,#PROG_ADDR 
      001E67 CD 09 5C         [ 4] 1713 	call puts 
      001E6A CE 00 1B         [ 2] 1714 	ldw x,txtbgn 
      001E6D 35 10 00 0A      [ 1] 1715 	mov base,#16 
      001E71 CD 18 54         [ 4] 1716 	call prt_i16
      001E74 35 0A 00 0A      [ 1] 1717 	mov base,#10  
      001E78 AE 1E B5         [ 2] 1718 	ldw x,#PROG_SIZE
      001E7B CD 09 5C         [ 4] 1719 	call puts 
      001E7E CD 1E 5C         [ 4] 1720 	call prog_size 
      001E81 CD 18 54         [ 4] 1721 	call prt_i16 
      001E84 AE 1E C6         [ 2] 1722 	ldw x,#STR_BYTES 
      001E87 CD 09 5C         [ 4] 1723 	call puts
      001E8A CE 00 1B         [ 2] 1724 	ldw x,txtbgn
      001E8D A3 39 04         [ 2] 1725 	cpw x,#app 
      001E90 25 05            [ 1] 1726 	jrult 2$
      001E92 AE 1E CD         [ 2] 1727 	ldw x,#FLASH_MEM 
      001E95 20 03            [ 2] 1728 	jra 3$
      001E97 AE 1E DE         [ 2] 1729 2$: ldw x,#RAM_MEM 	 
      001E9A CD 09 5C         [ 4] 1730 3$:	call puts 
      001E9D A6 0D            [ 1] 1731 	ld a,#CR 
      001E9F CD 08 FF         [ 4] 1732 	call putc
      001EA2 81               [ 4] 1733 	ret 
                                   1734 
      001EA3 70 72 6F 67 72 61 6D  1735 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EB5 2C 20 70 72 6F 67 72  1736 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EC6 20 62 79 74 65 73 00  1737 STR_BYTES: .asciz " bytes" 
      001ECD 20 69 6E 20 46 4C 41  1738 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001EDE 20 69 6E 20 52 41 4D  1739 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1740 
                                   1741 
                                   1742 ;----------------------------
                                   1743 ; BASIC: LIST [[start][-end]]
                                   1744 ; list program lines 
                                   1745 ; form start to end 
                                   1746 ; if empty argument list then 
                                   1747 ; list all.
                                   1748 ;----------------------------
                           000001  1749 	FIRST=1
                           000003  1750 	LAST=3 
                           000005  1751 	LN_PTR=5
                           000006  1752 	VSIZE=6 
      001EED                       1753 cmd_list:
      001EED 72 01 00 22 05   [ 2] 1754 	btjf flags,#FRUN,0$
      001EF2 A6 07            [ 1] 1755 	ld a,#ERR_CMD_ONLY
      001EF4 CC 16 A7         [ 2] 1756 	jp tb_error
      001EF7                       1757 0$:	 
      001EF7 CD 1E 5C         [ 4] 1758 	call prog_size 
      001EFA 22 01            [ 1] 1759 	jrugt 3$
      001EFC 81               [ 4] 1760 	ret 
      001EFD                       1761 3$: _vars VSIZE
      001EFD 52 06            [ 2]    1     sub sp,#VSIZE 
      001EFF CE 00 1B         [ 2] 1762 	ldw x,txtbgn 
      001F02 1F 05            [ 2] 1763 	ldw (LN_PTR,sp),x 
      001F04 FE               [ 2] 1764 	ldw x,(x) 
      001F05 1F 01            [ 2] 1765 	ldw (FIRST,sp),x ; list from first line 
      001F07 AE 7F FF         [ 2] 1766 	ldw x,#MAX_LINENO ; biggest line number 
      001F0A 1F 03            [ 2] 1767 	ldw (LAST,sp),x 
      001F0C CD 18 0C         [ 4] 1768 	call next_token 
      001F0F A1 84            [ 1] 1769 	cp a,#TK_INTGR
      001F11 27 0B            [ 1] 1770 	jreq start_from 
      001F13                       1771 is_minus: 	
      001F13 A1 11            [ 1] 1772 	cp a,#TK_MINUS 
      001F15 27 27            [ 1] 1773 	jreq end_at_line
      001F17                       1774 	_unget_token 
      001F17 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F1C 20 33            [ 2] 1775 	jra list_loop 
      001F1E                       1776 start_from:	 
      001F1E CD 18 3E         [ 4] 1777 	call get_int24
      001F21 1F 01            [ 2] 1778 	ldw (FIRST,sp),x	
      001F23                       1779 lines_skip:
      001F23 90 89            [ 2] 1780 	pushw y 
      001F25 4F               [ 1] 1781 	clr a 
      001F26 CD 0C 45         [ 4] 1782 	call search_lineno 
      001F29 5D               [ 2] 1783 	tnzw x 
      001F2A 26 01            [ 1] 1784 	jrne 1$
      001F2C 93               [ 1] 1785 	ldw x,y 
      001F2D 90 85            [ 2] 1786 1$:	popw y 
      001F2F 1F 05            [ 2] 1787 	ldw (LN_PTR,sp),x 
      001F31 CD 18 0C         [ 4] 1788 	call next_token 
      001F34 A1 11            [ 1] 1789 	cp a,#TK_MINUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F36 27 06            [ 1] 1790 	jreq end_at_line 
      001F38 1E 01            [ 2] 1791 	ldw x,(FIRST,sp)
      001F3A 1F 03            [ 2] 1792 	ldw (LAST,sp),x 
      001F3C 20 13            [ 2] 1793 	jra list_loop 
      001F3E                       1794 end_at_line:
                                   1795 ; expect ending line# 
      001F3E CD 18 0C         [ 4] 1796     call next_token 
      001F41 A1 84            [ 1] 1797 	cp a,#TK_INTGR
      001F43 27 07            [ 1] 1798 	jreq 1$
      001F45                       1799 	_unget_token 
      001F45 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F4A 20 05            [ 2] 1800 	jra list_loop
      001F4C                       1801 1$:
      001F4C CD 18 3E         [ 4] 1802 	call get_int24 
      001F4F 1F 03            [ 2] 1803 	ldw (LAST,sp),x 
                                   1804 ; print loop
      001F51                       1805 list_loop:
      001F51 1E 05            [ 2] 1806 	ldw x,(LN_PTR,sp)
      001F53 E6 02            [ 1] 1807 	ld a,(2,x) 
      001F55 CD 1F F6         [ 4] 1808 	call prt_basic_line
      001F58 1E 05            [ 2] 1809 	ldw x,(LN_PTR,sp)
      001F5A E6 02            [ 1] 1810 	ld a,(2,x)
      001F5C C7 00 0E         [ 1] 1811 	ld acc8,a 
      001F5F 72 5F 00 0D      [ 1] 1812 	clr acc16 
      001F63 72 BB 00 0D      [ 2] 1813 	addw x,acc16
      001F67 C3 00 1D         [ 2] 1814 	cpw x,txtend 
      001F6A 2A 07            [ 1] 1815 	jrpl list_exit
      001F6C 1F 05            [ 2] 1816 	ldw (LN_PTR,sp),x
      001F6E FE               [ 2] 1817 	ldw x,(x)
      001F6F 13 03            [ 2] 1818 	cpw x,(LAST,sp)  
      001F71 2D DE            [ 1] 1819 	jrsle list_loop
      001F73                       1820 list_exit:
      001F73 55 00 02 00 01   [ 1] 1821 	mov in,count 
      001F78 AE 16 B8         [ 2] 1822 	ldw x,#pad 
      001F7B CF 00 04         [ 2] 1823 	ldw basicptr,x 
      001F7E                       1824 	_drop VSIZE 
      001F7E 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F80 CD 1E 64         [ 4] 1825 	call program_info
      001F83 72 0D 00 22 06   [ 2] 1826 	btjf flags,#FLN_REJECTED,9$
      001F88 AE 1F 8F         [ 2] 1827 	ldw x,#LINES_REJECTED
      001F8B CD 09 5C         [ 4] 1828 	call puts
      001F8E                       1829 9$: 
      001F8E 81               [ 4] 1830 	ret
      001F8F 57 41 52 4E 49 4E 47  1831 LINES_REJECTED: .asciz "WARNING: lines missing in this program.\n"
             3A 20 6C 69 6E 65 73
             20 6D 69 73 73 69 6E
             67 20 69 6E 20 74 68
             69 73 20 70 72 6F 67
             72 61 6D 2E 0A 00
                                   1832 
                                   1833 ;--------------------------
                                   1834 ; BASIC: EDIT label 
                                   1835 ;  copy program in FLASH 
                                   1836 ;  to RAM for edition 
                                   1837 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001FB8                       1838 cmd_edit:
      001FB8 A6 03            [ 1] 1839 	ld a,#TK_LABEL 
      001FBA CD 19 C2         [ 4] 1840 	call expect  
      001FBD 89               [ 2] 1841 	pushw x 
      001FBE CD 18 25         [ 4] 1842 	call skip_string
      001FC1 85               [ 2] 1843 	popw x 
      001FC2 CD 32 43         [ 4] 1844 	call search_program 
      001FC5 26 06            [ 1] 1845     jrne 1$ 
      001FC7 AE 00 12         [ 2] 1846 	ldw x,#ERR_NO_PROGRAM
      001FCA CC 16 A7         [ 2] 1847 	jp tb_error 
      001FCD 90 89            [ 2] 1848 1$: pushw y 
      001FCF 90 93            [ 1] 1849 	ldw y,x ; source address 
      001FD1 1D 00 04         [ 2] 1850 	subw x,#4
      001FD4 EE 02            [ 2] 1851 	ldw x,(2,x) ; program size 
      001FD6 1C 00 04         [ 2] 1852 	addw x,#4 
      001FD9 CF 00 0D         [ 2] 1853 	ldw acc16,x  ; bytes to copy 
      001FDC AE 00 8C         [ 2] 1854 	ldw x,#rsign ; destination address 
      001FDF 72 A2 00 04      [ 2] 1855 	subw y,#4 
      001FE3 CD 13 C5         [ 4] 1856 	call move  
      001FE6 AE 00 90         [ 2] 1857 	ldw x,#free_ram 
      001FE9 CF 00 1B         [ 2] 1858 	ldw txtbgn,x 
      001FEC 72 BB 00 8E      [ 2] 1859 	addw x,rsize  
      001FF0 CF 00 1D         [ 2] 1860 	ldw txtend,x
      001FF3 90 85            [ 2] 1861 	popw y  
      001FF5 81               [ 4] 1862 	ret 
                                   1863 
                                   1864 ;--------------------------
                                   1865 ; decompile line from token list
                                   1866 ; and print it. 
                                   1867 ; input:
                                   1868 ;   A       stop at this position 
                                   1869 ;   X 		pointer at line
                                   1870 ; output:
                                   1871 ;   none 
                                   1872 ;--------------------------	
      001FF6                       1873 prt_basic_line:
      001FF6 90 89            [ 2] 1874 	pushw y 
      001FF8 C7 00 02         [ 1] 1875 	ld count,a 
      001FFB E6 02            [ 1] 1876 	ld a,(2,x)
      001FFD C1 00 02         [ 1] 1877 	cp a,count 
      002000 2A 03            [ 1] 1878 	jrpl 1$ 
      002002 C7 00 02         [ 1] 1879 	ld count,a 
      002005 CF 00 04         [ 2] 1880 1$:	ldw basicptr,x 
      002008 90 AE 16 68      [ 2] 1881 	ldw y,#tib  
      00200C CD 11 B5         [ 4] 1882 	call decompile 
      00200F CD 09 5C         [ 4] 1883 	call puts 
      002012 A6 0D            [ 1] 1884 	ld a,#CR 
      002014 CD 08 FF         [ 4] 1885 	call putc 
      002017 90 85            [ 2] 1886 	popw y 
      002019 81               [ 4] 1887 	ret 
                                   1888 
                                   1889 
                                   1890 ;---------------------------------
                                   1891 ; BASIC: PRINT|? arg_list 
                                   1892 ; print values from argument list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1893 ;----------------------------------
                           000001  1894 	CCOMMA=1
                           000001  1895 	VSIZE=1
      00201A                       1896 print:
      00201A                       1897 	_vars VSIZE 
      00201A 52 01            [ 2]    1     sub sp,#VSIZE 
      00201C                       1898 reset_comma:
      00201C 0F 01            [ 1] 1899 	clr (CCOMMA,sp)
      00201E                       1900 prt_loop:
      00201E CD 18 0C         [ 4] 1901 	call next_token
      002021 A1 02            [ 1] 1902 	cp a,#CMD_END 
      002023 25 08            [ 1] 1903 	jrult 0$
      002025 A1 0A            [ 1] 1904 	cp a,#TK_COLON 
      002027 27 04            [ 1] 1905 	jreq 0$
      002029 A1 80            [ 1] 1906 	cp a,#TK_CMD
      00202B 26 07            [ 1] 1907 	jrne 10$
      00202D                       1908 0$:
      00202D                       1909 	_unget_token 
      00202D 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002032 20 63            [ 2] 1910 	jra 8$ 
      002034                       1911 10$:	
      002034 A1 02            [ 1] 1912 	cp a,#TK_QSTR
      002036 27 12            [ 1] 1913 	jreq 1$
      002038 A1 04            [ 1] 1914 	cp a,#TK_CHAR 
      00203A 27 1B            [ 1] 1915 	jreq 2$ 
      00203C A1 82            [ 1] 1916 	cp a,#TK_CFUNC 
      00203E 27 1F            [ 1] 1917 	jreq 3$
      002040 A1 08            [ 1] 1918 	cp a,#TK_COMMA 
      002042 27 2A            [ 1] 1919 	jreq 4$
      002044 A1 09            [ 1] 1920 	cp a,#TK_SHARP 
      002046 27 2A            [ 1] 1921 	jreq 5$
      002048 20 3D            [ 2] 1922 	jra 7$ 
      00204A                       1923 1$:	; print string 
      00204A CD 09 5C         [ 4] 1924 	call puts
      00204D 5C               [ 1] 1925 	incw x
      00204E 72 B0 00 04      [ 2] 1926 	subw x,basicptr 
      002052 CF 00 00         [ 2] 1927 	ldw in.w,x  
      002055 20 C5            [ 2] 1928 	jra reset_comma
      002057                       1929 2$:	; print character 
      002057 CD 18 4E         [ 4] 1930 	call get_char 
      00205A CD 08 FF         [ 4] 1931 	call putc 
      00205D 20 BD            [ 2] 1932 	jra reset_comma 
      00205F                       1933 3$: ; print character function value  	
      00205F                       1934 	_get_code_addr 
      00205F FE               [ 2]    1         ldw x,(x)
      002060 72 5C 00 01      [ 1]    2         inc in 
      002064 72 5C 00 01      [ 1]    3         inc in 
      002068 FD               [ 4] 1935 	call (x)
      002069 CD 08 FF         [ 4] 1936 	call putc
      00206C 20 AE            [ 2] 1937 	jra reset_comma 
      00206E                       1938 4$: ; set comma state 
      00206E 03 01            [ 1] 1939 	cpl (CCOMMA,sp)
      002070 20 AC            [ 2] 1940 	jra prt_loop   
      002072                       1941 5$: ; # character must be followed by an integer   
      002072 CD 18 0C         [ 4] 1942 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002075 A1 84            [ 1] 1943 	cp a,#TK_INTGR 
      002077 27 03            [ 1] 1944 	jreq 6$
      002079 CC 16 A5         [ 2] 1945 	jp syntax_error 
      00207C                       1946 6$: ; set tab width
      00207C CD 18 3E         [ 4] 1947 	call get_int24 
      00207F 9F               [ 1] 1948 	ld a,xl 
      002080 A4 0F            [ 1] 1949 	and a,#15 
      002082 C7 00 23         [ 1] 1950 	ld tab_width,a 
      002085 20 95            [ 2] 1951 	jra reset_comma 
      002087                       1952 7$:	
      002087                       1953 	_unget_token 
      002087 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00208C CD 1C 2F         [ 4] 1954 	call condition
      00208F 4D               [ 1] 1955 	tnz a 
      002090 27 05            [ 1] 1956 	jreq 8$    
      002092 CD 18 79         [ 4] 1957     call print_top
      002095 20 85            [ 2] 1958 	jra reset_comma 
      002097                       1959 8$:
      002097 0D 01            [ 1] 1960 	tnz (CCOMMA,sp)
      002099 26 05            [ 1] 1961 	jrne 9$
      00209B A6 0D            [ 1] 1962 	ld a,#CR 
      00209D CD 08 FF         [ 4] 1963     call putc 
      0020A0                       1964 9$:	_drop VSIZE 
      0020A0 5B 01            [ 2]    1     addw sp,#VSIZE 
      0020A2 81               [ 4] 1965 	ret 
                                   1966 
                                   1967 ;----------------------
                                   1968 ; 'save_context' and
                                   1969 ; 'rest_context' must be 
                                   1970 ; called at the same 
                                   1971 ; call stack depth 
                                   1972 ; i.e. SP must have the 
                                   1973 ; save value at  
                                   1974 ; entry point of both 
                                   1975 ; routine. 
                                   1976 ;---------------------
                           000004  1977 	CTXT_SIZE=4 ; size of saved data 
                                   1978 ;--------------------
                                   1979 ; save current BASIC
                                   1980 ; interpreter context 
                                   1981 ; on stack 
                                   1982 ;--------------------
      0020A3                       1983 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0020A3                       1984 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0020A3                       1985 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      0020A3                       1986 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      0020A3                       1987 save_context:
      0020A3 CE 00 04         [ 2] 1988 	ldw x,basicptr 
      0020A6 1F 03            [ 2] 1989 	ldw (BPTR,sp),x
      0020A8 C6 00 01         [ 1] 1990 	ld a,in 
      0020AB 6B 05            [ 1] 1991 	ld (IN,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      0020AD C6 00 02         [ 1] 1992 	ld a,count 
      0020B0 6B 06            [ 1] 1993 	ld (CNT,sp),a  
      0020B2 81               [ 4] 1994 	ret
                                   1995 
                                   1996 ;-----------------------
                                   1997 ; restore previously saved 
                                   1998 ; BASIC interpreter context 
                                   1999 ; from stack 
                                   2000 ;-------------------------
      0020B3                       2001 rest_context:
      0020B3 1E 03            [ 2] 2002 	ldw x,(BPTR,sp)
      0020B5 CF 00 04         [ 2] 2003 	ldw basicptr,x 
      0020B8 7B 05            [ 1] 2004 	ld a,(IN,sp)
      0020BA C7 00 01         [ 1] 2005 	ld in,a
      0020BD 7B 06            [ 1] 2006 	ld a,(CNT,sp)
      0020BF C7 00 02         [ 1] 2007 	ld count,a  
      0020C2 81               [ 4] 2008 	ret
                                   2009 
                                   2010 
                                   2011 
                                   2012 ;------------------------------------------
                                   2013 ; BASIC: INPUT [string]var[,[string]var]
                                   2014 ; input value in variables 
                                   2015 ; [string] optionally can be used as prompt 
                                   2016 ;-----------------------------------------
                           000001  2017 	CX_BPTR=1
                           000003  2018 	CX_IN=3
                           000004  2019 	CX_CNT=4
                           000005  2020 	SKIP=5
                           000005  2021 	VSIZE=5
      0020C3                       2022 input_var:
      0020C3 90 89            [ 2] 2023 	pushw y 
      0020C5                       2024 	_vars VSIZE 
      0020C5 52 05            [ 2]    1     sub sp,#VSIZE 
      0020C7                       2025 input_loop:
      0020C7 0F 05            [ 1] 2026 	clr (SKIP,sp)
      0020C9 CD 18 0C         [ 4] 2027 	call next_token 
      0020CC A1 02            [ 1] 2028 	cp a,#TK_QSTR 
      0020CE 26 10            [ 1] 2029 	jrne 1$ 
      0020D0 CD 09 5C         [ 4] 2030 	call puts 
      0020D3 5C               [ 1] 2031 	incw x 
      0020D4 72 B0 00 04      [ 2] 2032 	subw x,basicptr 
      0020D8 CF 00 00         [ 2] 2033 	ldw in.w,x 
      0020DB 03 05            [ 1] 2034 	cpl (SKIP,sp)
      0020DD CD 18 0C         [ 4] 2035 	call next_token 
      0020E0 A1 85            [ 1] 2036 1$: cp a,#TK_VAR  
      0020E2 27 03            [ 1] 2037 	jreq 2$ 
      0020E4 CC 16 A5         [ 2] 2038 	jp syntax_error
      0020E7 CD 18 34         [ 4] 2039 2$:	call get_addr
      0020EA CF 00 19         [ 2] 2040 	ldw ptr16,x 
      0020ED 0D 05            [ 1] 2041 	tnz (SKIP,sp)
      0020EF 26 06            [ 1] 2042 	jrne 21$ 
      0020F1 CD 11 AB         [ 4] 2043 	call var_name 
      0020F4 CD 08 FF         [ 4] 2044 	call putc   
      0020F7                       2045 21$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020F7 A6 3A            [ 1] 2046 	ld a,#':
      0020F9 CD 08 FF         [ 4] 2047 	call putc 
      0020FC CD 20 A3         [ 4] 2048 	call save_context 
      0020FF 72 5F 00 02      [ 1] 2049 	clr count  
      002103 CD 0A 61         [ 4] 2050 	call readln 
      002106 AE 16 68         [ 2] 2051 	ldw x,#tib 
      002109 3B 00 02         [ 1] 2052 	push count
      00210C 4B 00            [ 1] 2053 	push #0 
      00210E 72 FB 01         [ 2] 2054 	addw x,(1,sp)
      002111 5C               [ 1] 2055 	incw x 
      002112                       2056 	_drop 2 
      002112 5B 02            [ 2]    1     addw sp,#2 
      002114 72 5F 00 01      [ 1] 2057 	clr in 
      002118 CD 0E F5         [ 4] 2058 	call get_token
      00211B A1 84            [ 1] 2059 	cp a,#TK_INTGR
      00211D 27 14            [ 1] 2060 	jreq 3$ 
      00211F A1 11            [ 1] 2061 	cp a,#TK_MINUS
      002121 26 07            [ 1] 2062 	jrne 22$
      002123 CD 0E F5         [ 4] 2063 	call get_token 
      002126 A1 84            [ 1] 2064 	cp a,#TK_INTGR 
      002128 27 06            [ 1] 2065 	jreq 23$
      00212A                       2066 22$:
      00212A CD 20 B3         [ 4] 2067 	call rest_context 
      00212D CC 16 A5         [ 2] 2068 	jp syntax_error
      002130                       2069 23$:
      002130 CD 02 1D         [ 4] 2070 	call neg_acc24	
      002133                       2071 3$: 
      002133 C6 00 0C         [ 1] 2072 	ld a,acc24 
      002136 CE 00 0D         [ 2] 2073 	ldw x,acc16 
      002139 72 C7 00 19      [ 4] 2074 	ld [ptr16],a
      00213D 72 5C 00 1A      [ 1] 2075 	inc ptr8  
      002141 72 CF 00 19      [ 5] 2076 	ldw [ptr16],x 
      002145 CD 20 B3         [ 4] 2077 	call rest_context
      002148 CD 18 0C         [ 4] 2078 	call next_token 
      00214B A1 08            [ 1] 2079 	cp a,#TK_COMMA
      00214D 26 03            [ 1] 2080 	jrne 4$ 
      00214F CC 20 C7         [ 2] 2081 	jp input_loop
      002152                       2082 4$:
      002152 A1 00            [ 1] 2083 	cp a,#TK_NONE 
      002154 27 07            [ 1] 2084 	jreq input_exit  
      002156 A1 0A            [ 1] 2085 	cp a,#TK_COLON 
      002158 27 03            [ 1] 2086     jreq input_exit 
      00215A CC 16 A5         [ 2] 2087 	jp syntax_error 
      00215D                       2088 input_exit:
      00215D                       2089 	_drop VSIZE 
      00215D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00215F 90 85            [ 2] 2090 	popw y 
      002161 81               [ 4] 2091 	ret 
                                   2092 
                                   2093 
                                   2094 ;---------------------
                                   2095 ; BASIC: REM | ' 
                                   2096 ; skip comment to end of line 
                                   2097 ;---------------------- 
      002162                       2098 remark::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002162 55 00 02 00 01   [ 1] 2099 	mov in,count 
      002167 81               [ 4] 2100  	ret 
                                   2101 
                                   2102 
                                   2103 ;---------------------
                                   2104 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2105 ; read in loop 'addr'  
                                   2106 ; apply & 'mask' to value 
                                   2107 ; loop while result==0.  
                                   2108 ; 'xor_mask' is used to 
                                   2109 ; invert the wait logic.
                                   2110 ; i.e. loop while not 0.
                                   2111 ;---------------------
                           000001  2112 	XMASK=1 
                           000002  2113 	MASK=2
                           000003  2114 	ADDR=3
                           000004  2115 	VSIZE=4
      002168                       2116 wait: 
      002168                       2117 	_vars VSIZE
      002168 52 04            [ 2]    1     sub sp,#VSIZE 
      00216A 0F 01            [ 1] 2118 	clr (XMASK,sp) 
      00216C CD 19 D4         [ 4] 2119 	call arg_list 
      00216F A1 02            [ 1] 2120 	cp a,#2
      002171 24 03            [ 1] 2121 	jruge 0$
      002173 CC 16 A5         [ 2] 2122 	jp syntax_error 
      002176 A1 03            [ 1] 2123 0$:	cp a,#3
      002178 25 0C            [ 1] 2124 	jrult 1$
      00217A                       2125 	_xpop  ; xor mask 
      00217A 90 F6            [ 1]    1     ld a,(y)
      00217C 93               [ 1]    2     ldw x,y 
      00217D EE 01            [ 2]    3     ldw x,(1,x)
      00217F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002183 9F               [ 1] 2126 	ld a,xl 
      002184 6B 01            [ 1] 2127 	ld (XMASK,sp),a 
      002186                       2128 1$: _xpop ; mask
      002186 90 F6            [ 1]    1     ld a,(y)
      002188 93               [ 1]    2     ldw x,y 
      002189 EE 01            [ 2]    3     ldw x,(1,x)
      00218B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00218F 9F               [ 1] 2129     ld a,xl  
      002190 6B 02            [ 1] 2130 	ld (MASK,sp),a 
      002192                       2131 	_xpop ; address 
      002192 90 F6            [ 1]    1     ld a,(y)
      002194 93               [ 1]    2     ldw x,y 
      002195 EE 01            [ 2]    3     ldw x,(1,x)
      002197 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00219B F6               [ 1] 2132 2$:	ld a,(x)
      00219C 14 02            [ 1] 2133 	and a,(MASK,sp)
      00219E 18 01            [ 1] 2134 	xor a,(XMASK,sp)
      0021A0 27 F9            [ 1] 2135 	jreq 2$ 
      0021A2                       2136 	_drop VSIZE 
      0021A2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021A4 81               [ 4] 2137 	ret 
                                   2138 
                                   2139 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   2140 ; BASIC: BSET addr,mask
                                   2141 ; set bits at 'addr' corresponding 
                                   2142 ; to those of 'mask' that are at 1.
                                   2143 ; arguments:
                                   2144 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2145 ;   mask        mask|addr
                                   2146 ; output:
                                   2147 ;	none 
                                   2148 ;--------------------------
      0021A5                       2149 bit_set:
      0021A5 CD 19 D4         [ 4] 2150 	call arg_list 
      0021A8 A1 02            [ 1] 2151 	cp a,#2	 
      0021AA 27 03            [ 1] 2152 	jreq 1$ 
      0021AC CC 16 A5         [ 2] 2153 	jp syntax_error
      0021AF                       2154 1$: 
      0021AF                       2155 	_xpop ; mask 
      0021AF 90 F6            [ 1]    1     ld a,(y)
      0021B1 93               [ 1]    2     ldw x,y 
      0021B2 EE 01            [ 2]    3     ldw x,(1,x)
      0021B4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B8 9F               [ 1] 2156 	ld a,xl
      0021B9 88               [ 1] 2157 	push a  
      0021BA                       2158 	_xpop ; addr  
      0021BA 90 F6            [ 1]    1     ld a,(y)
      0021BC 93               [ 1]    2     ldw x,y 
      0021BD EE 01            [ 2]    3     ldw x,(1,x)
      0021BF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C3 84               [ 1] 2159 	pop a 
      0021C4 FA               [ 1] 2160 	or a,(x)
      0021C5 F7               [ 1] 2161 	ld (x),a
      0021C6 81               [ 4] 2162 	ret 
                                   2163 
                                   2164 ;---------------------
                                   2165 ; BASIC: BRES addr,mask
                                   2166 ; reset bits at 'addr' corresponding 
                                   2167 ; to those of 'mask' that are at 1.
                                   2168 ; arguments:
                                   2169 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2170 ;   mask	    ~mask&*addr  
                                   2171 ; output:
                                   2172 ;	none 
                                   2173 ;--------------------------
      0021C7                       2174 bit_reset:
      0021C7 CD 19 D4         [ 4] 2175 	call arg_list 
      0021CA A1 02            [ 1] 2176 	cp a,#2  
      0021CC 27 03            [ 1] 2177 	jreq 1$ 
      0021CE CC 16 A5         [ 2] 2178 	jp syntax_error
      0021D1                       2179 1$: 
      0021D1                       2180 	_xpop ; mask 
      0021D1 90 F6            [ 1]    1     ld a,(y)
      0021D3 93               [ 1]    2     ldw x,y 
      0021D4 EE 01            [ 2]    3     ldw x,(1,x)
      0021D6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021DA 9F               [ 1] 2181 	ld a,xl 
      0021DB 43               [ 1] 2182 	cpl a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0021DC 88               [ 1] 2183 	push a  
      0021DD                       2184 	_xpop ; addr  
      0021DD 90 F6            [ 1]    1     ld a,(y)
      0021DF 93               [ 1]    2     ldw x,y 
      0021E0 EE 01            [ 2]    3     ldw x,(1,x)
      0021E2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E6 84               [ 1] 2185 	pop a 
      0021E7 F4               [ 1] 2186 	and a,(x)
      0021E8 F7               [ 1] 2187 	ld (x),a 
      0021E9 81               [ 4] 2188 	ret 
                                   2189 
                                   2190 ;---------------------
                                   2191 ; BASIC: BTOGL addr,mask
                                   2192 ; toggle bits at 'addr' corresponding 
                                   2193 ; to those of 'mask' that are at 1.
                                   2194 ; arguments:
                                   2195 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2196 ;   mask	    mask^*addr  
                                   2197 ; output:
                                   2198 ;	none 
                                   2199 ;--------------------------
      0021EA                       2200 bit_toggle:
      0021EA CD 19 D4         [ 4] 2201 	call arg_list 
      0021ED A1 02            [ 1] 2202 	cp a,#2 
      0021EF 27 03            [ 1] 2203 	jreq 1$ 
      0021F1 CC 16 A5         [ 2] 2204 	jp syntax_error
      0021F4                       2205 1$: _xpop ; mask 
      0021F4 90 F6            [ 1]    1     ld a,(y)
      0021F6 93               [ 1]    2     ldw x,y 
      0021F7 EE 01            [ 2]    3     ldw x,(1,x)
      0021F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021FD 9F               [ 1] 2206 	ld a,xl
      0021FE 88               [ 1] 2207 	push a 
      0021FF                       2208 	_xpop  ; addr  
      0021FF 90 F6            [ 1]    1     ld a,(y)
      002201 93               [ 1]    2     ldw x,y 
      002202 EE 01            [ 2]    3     ldw x,(1,x)
      002204 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002208 84               [ 1] 2209 	pop a 
      002209 F8               [ 1] 2210 	xor a,(x)
      00220A F7               [ 1] 2211 	ld (x),a 
      00220B 81               [ 4] 2212 	ret 
                                   2213 
                                   2214 
                                   2215 ;---------------------
                                   2216 ; BASIC: BTEST(addr,bit)
                                   2217 ; return bit value at 'addr' 
                                   2218 ; bit is in range {0..7}.
                                   2219 ; arguments:
                                   2220 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2221 ;   bit 	    bit position {0..7}  
                                   2222 ; output:
                                   2223 ;	A:X       bit value  
                                   2224 ;--------------------------
      00220C                       2225 bit_test:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      00220C CD 19 CF         [ 4] 2226 	call func_args 
      00220F A1 02            [ 1] 2227 	cp a,#2
      002211 27 03            [ 1] 2228 	jreq 0$
      002213 CC 16 A5         [ 2] 2229 	jp syntax_error
      002216                       2230 0$:	
      002216                       2231 	_xpop 
      002216 90 F6            [ 1]    1     ld a,(y)
      002218 93               [ 1]    2     ldw x,y 
      002219 EE 01            [ 2]    3     ldw x,(1,x)
      00221B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00221F 9F               [ 1] 2232 	ld a,xl 
      002220 A4 07            [ 1] 2233 	and a,#7
      002222 88               [ 1] 2234 	push a   
      002223 A6 01            [ 1] 2235 	ld a,#1 
      002225 0D 01            [ 1] 2236 1$: tnz (1,sp)
      002227 27 05            [ 1] 2237 	jreq 2$
      002229 48               [ 1] 2238 	sll a 
      00222A 0A 01            [ 1] 2239 	dec (1,sp)
      00222C 20 F7            [ 2] 2240 	jra 1$
      00222E 6B 01            [ 1] 2241 2$: ld (1,sp),a  
      002230                       2242 	_xpop ; address  
      002230 90 F6            [ 1]    1     ld a,(y)
      002232 93               [ 1]    2     ldw x,y 
      002233 EE 01            [ 2]    3     ldw x,(1,x)
      002235 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002239 84               [ 1] 2243 	pop a 
      00223A F4               [ 1] 2244 	and a,(x)
      00223B 27 02            [ 1] 2245 	jreq 3$
      00223D A6 01            [ 1] 2246 	ld a,#1 
      00223F 5F               [ 1] 2247 3$:	clrw x 
      002240 97               [ 1] 2248 	ld xl,a
      002241 4F               [ 1] 2249 	clr a  
      002242 81               [ 4] 2250 	ret
                                   2251 
                                   2252 ;--------------------
                                   2253 ; BASIC: POKE addr,byte
                                   2254 ; put a byte at addr 
                                   2255 ;--------------------
      002243                       2256 poke:
      002243 CD 19 D4         [ 4] 2257 	call arg_list 
      002246 A1 02            [ 1] 2258 	cp a,#2
      002248 27 03            [ 1] 2259 	jreq 1$
      00224A CC 16 A5         [ 2] 2260 	jp syntax_error
      00224D                       2261 1$:	
      00224D                       2262 	_xpop ; byte   
      00224D 90 F6            [ 1]    1     ld a,(y)
      00224F 93               [ 1]    2     ldw x,y 
      002250 EE 01            [ 2]    3     ldw x,(1,x)
      002252 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002256 9F               [ 1] 2263     ld a,xl 
      002257 88               [ 1] 2264 	push a 
      002258                       2265 	_xpop ; address 
      002258 90 F6            [ 1]    1     ld a,(y)
      00225A 93               [ 1]    2     ldw x,y 
      00225B EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00225D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002261 84               [ 1] 2266 	pop a 
      002262 F7               [ 1] 2267 	ld (x),a 
      002263 81               [ 4] 2268 	ret 
                                   2269 
                                   2270 ;-----------------------
                                   2271 ; BASIC: PEEK(addr)
                                   2272 ; get the byte at addr 
                                   2273 ; input:
                                   2274 ;	none 
                                   2275 ; output:
                                   2276 ;	X 		value 
                                   2277 ;-----------------------
      002264                       2278 peek:
      002264 CD 19 CF         [ 4] 2279 	call func_args
      002267 A1 01            [ 1] 2280 	cp a,#1 
      002269 27 03            [ 1] 2281 	jreq 1$
      00226B CC 16 A5         [ 2] 2282 	jp syntax_error
      00226E                       2283 1$: _xpop ; address  
      00226E 90 F6            [ 1]    1     ld a,(y)
      002270 93               [ 1]    2     ldw x,y 
      002271 EE 01            [ 2]    3     ldw x,(1,x)
      002273 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002277 C7 00 18         [ 1] 2284 	ld farptr,a 
      00227A CF 00 19         [ 2] 2285 	ldw ptr16,x 
      00227D 92 BC 00 18      [ 5] 2286 	ldf a,[farptr]
      002281 5F               [ 1] 2287 	clrw x 
      002282 97               [ 1] 2288 	ld xl,a 
      002283 4F               [ 1] 2289 	clr a 
      002284 81               [ 4] 2290 	ret 
                                   2291 
                                   2292 ;---------------------------
                                   2293 ; BASIC IF expr : instructions
                                   2294 ; evaluate expr and if true 
                                   2295 ; execute instructions on same line. 
                                   2296 ;----------------------------
      002285                       2297 if: 
      002285 CD 1C 2F         [ 4] 2298 	call condition  
      002288                       2299 	_xpop 
      002288 90 F6            [ 1]    1     ld a,(y)
      00228A 93               [ 1]    2     ldw x,y 
      00228B EE 01            [ 2]    3     ldw x,(1,x)
      00228D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002291 4D               [ 1] 2300 	tnz  a  
      002292 26 0D            [ 1] 2301 	jrne 9$
      002294 5D               [ 2] 2302 	tnzw x 
      002295 26 0A            [ 1] 2303 	jrne 9$  
                                   2304 ;skip to next line
      002297 55 00 02 00 01   [ 1] 2305 	mov in,count
      00229C                       2306 	_drop 2 
      00229C 5B 02            [ 2]    1     addw sp,#2 
      00229E CC 17 58         [ 2] 2307 	jp next_line
      0022A1 81               [ 4] 2308 9$:	ret 
                                   2309 
                                   2310 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                                   2311 ; BASIC: FOR var=expr 
                                   2312 ; set variable to expression 
                                   2313 ; leave variable address 
                                   2314 ; on stack and set
                                   2315 ; FLOOP bit in 'flags'
                                   2316 ;-----------------
                           000001  2317 	RETL1=1 ; return address  
                           000003  2318 	FSTEP=3  ; variable increment int24
                           000006  2319 	LIMIT=6 ; loop limit, int24  
                           000009  2320 	CVAR=9   ; control variable 
                           00000B  2321 	INW=11   ;  in.w saved
                           00000D  2322 	BPTR=13 ; baseptr saved
                           00000D  2323 	VSIZE=13  
      0022A2                       2324 for: ; { -- var_addr }
      0022A2 85               [ 2] 2325 	popw x ; call return address 
      0022A3                       2326 	_vars VSIZE 
      0022A3 52 0D            [ 2]    1     sub sp,#VSIZE 
      0022A5 89               [ 2] 2327 	pushw x  ; RETL1 
      0022A6 A6 85            [ 1] 2328 	ld a,#TK_VAR 
      0022A8 CD 19 C2         [ 4] 2329 	call expect
      0022AB CD 18 34         [ 4] 2330 	call get_addr
      0022AE 1F 09            [ 2] 2331 	ldw (CVAR,sp),x  ; control variable 
      0022B0 CD 1D 04         [ 4] 2332 	call let_eval 
      0022B3 72 14 00 22      [ 1] 2333 	bset flags,#FLOOP 
      0022B7 CD 18 0C         [ 4] 2334 	call next_token 
      0022BA A1 80            [ 1] 2335 	cp a,#TK_CMD 
      0022BC 27 03            [ 1] 2336 	jreq 1$
      0022BE CC 16 A5         [ 2] 2337 	jp syntax_error
      0022C1                       2338 1$:  
      0022C1                       2339 	_get_code_addr
      0022C1 FE               [ 2]    1         ldw x,(x)
      0022C2 72 5C 00 01      [ 1]    2         inc in 
      0022C6 72 5C 00 01      [ 1]    3         inc in 
      0022CA A3 22 D2         [ 2] 2340 	cpw x,#to   
      0022CD 27 03            [ 1] 2341 	jreq to
      0022CF CC 16 A5         [ 2] 2342 	jp syntax_error 
                                   2343 
                                   2344 ;-----------------------------------
                                   2345 ; BASIC: TO expr 
                                   2346 ; second part of FOR loop initilization
                                   2347 ; leave limit on stack and set 
                                   2348 ; FTO bit in 'flags'
                                   2349 ;-----------------------------------
      0022D2                       2350 to: ; { var_addr -- var_addr limit step }
      0022D2 72 04 00 22 03   [ 2] 2351 	btjt flags,#FLOOP,1$
      0022D7 CC 16 A5         [ 2] 2352 	jp syntax_error
      0022DA CD 1B 16         [ 4] 2353 1$: call expression   
      0022DD A1 84            [ 1] 2354 	cp a,#TK_INTGR 
      0022DF 27 03            [ 1] 2355 	jreq 2$ 
      0022E1 CC 16 A5         [ 2] 2356 	jp syntax_error
      0022E4                       2357 2$: _xpop
      0022E4 90 F6            [ 1]    1     ld a,(y)
      0022E6 93               [ 1]    2     ldw x,y 
      0022E7 EE 01            [ 2]    3     ldw x,(1,x)
      0022E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0022ED 6B 06            [ 1] 2358 	ld (LIMIT,sp),a 
      0022EF 1F 07            [ 2] 2359 	ldw (LIMIT+1,sp),x
      0022F1 CD 18 0C         [ 4] 2360 	call next_token
      0022F4 A1 00            [ 1] 2361 	cp a,#TK_NONE  
      0022F6 27 17            [ 1] 2362 	jreq 4$ 
      0022F8 A1 80            [ 1] 2363 	cp a,#TK_CMD
      0022FA 26 0E            [ 1] 2364 	jrne 3$
      0022FC                       2365 	_get_code_addr
      0022FC FE               [ 2]    1         ldw x,(x)
      0022FD 72 5C 00 01      [ 1]    2         inc in 
      002301 72 5C 00 01      [ 1]    3         inc in 
      002305 A3 23 18         [ 2] 2366 	cpw x,#step 
      002308 27 0E            [ 1] 2367 	jreq step
      00230A                       2368 3$:	
      00230A                       2369 	_unget_token   	 
      00230A 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00230F                       2370 4$:	
      00230F 0F 03            [ 1] 2371 	clr (FSTEP,sp) 
      002311 AE 00 01         [ 2] 2372 	ldw x,#1   ; default step  
      002314 1F 04            [ 2] 2373 	ldw (FSTEP+1,sp),x 
      002316 20 2F            [ 2] 2374 	jra store_loop_addr 
                                   2375 
                                   2376 
                                   2377 ;----------------------------------
                                   2378 ; BASIC: STEP expr 
                                   2379 ; optional third par of FOR loop
                                   2380 ; initialization. 	
                                   2381 ;------------------------------------
      002318                       2382 step: ; {var limit -- var limit step}
      002318 72 04 00 22 03   [ 2] 2383 	btjt flags,#FLOOP,1$
      00231D CC 16 A5         [ 2] 2384 	jp syntax_error
      002320 CD 1B 16         [ 4] 2385 1$: call expression 
      002323 A1 84            [ 1] 2386 	cp a,#TK_INTGR
      002325 27 03            [ 1] 2387 	jreq 2$
      002327 CC 16 A5         [ 2] 2388 	jp syntax_error
      00232A                       2389 2$:	
      00232A                       2390 	_xpop 
      00232A 90 F6            [ 1]    1     ld a,(y)
      00232C 93               [ 1]    2     ldw x,y 
      00232D EE 01            [ 2]    3     ldw x,(1,x)
      00232F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002333 6B 03            [ 1] 2391 	ld (FSTEP,sp),a 
      002335 1F 04            [ 2] 2392 	ldw (FSTEP+1,sp),x ; step
                                   2393 ; if step < 0 decrement LIMIT 
      002337 4D               [ 1] 2394 	tnz a
      002338 2A 0D            [ 1] 2395 	jrpl store_loop_addr 
      00233A 7B 06            [ 1] 2396 	ld a,(LIMIT,sp)
      00233C 1E 07            [ 2] 2397 	ldw x,(LIMIT+1,sp)
      00233E 1D 00 01         [ 2] 2398 	subw x,#1 
      002341 A2 00            [ 1] 2399 	sbc a,#0 
      002343 6B 06            [ 1] 2400 	ld (LIMIT,sp),a 
      002345 1F 07            [ 2] 2401 	ldw (LIMIT+1,sp),x 
                                   2402 ; leave loop back entry point on cstack 
                                   2403 ; cstack is 1 call deep from interpreter
      002347                       2404 store_loop_addr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002347 CE 00 04         [ 2] 2405 	ldw x,basicptr
      00234A 1F 0D            [ 2] 2406 	ldw (BPTR,sp),x 
      00234C CE 00 00         [ 2] 2407 	ldw x,in.w 
      00234F 1F 0B            [ 2] 2408 	ldw (INW,sp),x   
      002351 72 15 00 22      [ 1] 2409 	bres flags,#FLOOP 
      002355 72 5C 00 1F      [ 1] 2410 	inc loop_depth  
      002359 81               [ 4] 2411 	ret 
                                   2412 
                                   2413 ;--------------------------------
                                   2414 ; BASIC: NEXT var 
                                   2415 ; FOR loop control 
                                   2416 ; increment variable with step 
                                   2417 ; and compare with limit 
                                   2418 ; loop if threshold not crossed.
                                   2419 ; else stack. 
                                   2420 ; and decrement 'loop_depth' 
                                   2421 ;--------------------------------
      00235A                       2422 next: ; {var limit step retl1 -- [var limit step ] }
      00235A 72 5D 00 1F      [ 1] 2423 	tnz loop_depth 
      00235E 26 03            [ 1] 2424 	jrne 1$ 
      002360 CC 16 A5         [ 2] 2425 	jp syntax_error 
      002363                       2426 1$: 
      002363 A6 85            [ 1] 2427 	ld a,#TK_VAR 
      002365 CD 19 C2         [ 4] 2428 	call expect
      002368 CD 18 34         [ 4] 2429 	call get_addr 
                                   2430 ; check for good variable after NEXT 	 
      00236B 13 09            [ 2] 2431 	cpw x,(CVAR,sp)
      00236D 27 03            [ 1] 2432 	jreq 2$  
      00236F CC 16 A5         [ 2] 2433 	jp syntax_error ; not the good one 
      002372                       2434 2$: 
      002372 CF 00 19         [ 2] 2435 	ldw ptr16,x 
                                   2436 	; increment variable 
      002375 F6               [ 1] 2437 	ld a,(x)
      002376 EE 01            [ 2] 2438 	ldw x,(1,x)  ; get var value 
      002378 72 FB 04         [ 2] 2439 	addw x,(FSTEP+1,sp) ; var+step 
      00237B 19 03            [ 1] 2440 	adc a,(FSTEP,sp)
      00237D 72 C7 00 19      [ 4] 2441 	ld [ptr16],a
      002381 72 5C 00 1A      [ 1] 2442 	inc ptr8  
      002385 72 CF 00 19      [ 5] 2443 	ldw [ptr16],x 
      002389 C7 00 0C         [ 1] 2444 	ld acc24,a 
      00238C CF 00 0D         [ 2] 2445 	ldw acc16,x 
      00238F 7B 06            [ 1] 2446 	ld a,(LIMIT,sp)
      002391 1E 07            [ 2] 2447 	ldw x,(LIMIT+1,sp)
      002393 72 B0 00 0D      [ 2] 2448 	subw x,acc16 
      002397 C2 00 0C         [ 1] 2449 	sbc a,acc24
      00239A 18 03            [ 1] 2450 	xor a,(FSTEP,sp)
      00239C A8 80            [ 1] 2451 	xor a,#0x80
      00239E 2B 12            [ 1] 2452 	jrmi loop_back  
      0023A0 20 25            [ 2] 2453 	jra loop_done   
                                   2454 ; check sign of STEP  
      0023A2 7B 03            [ 1] 2455 	ld a,(FSTEP,sp)
      0023A4 2A 07            [ 1] 2456 	jrpl 4$
                                   2457 ;negative step
      0023A6 C6 00 0E         [ 1] 2458     ld a,acc8 
      0023A9 2F 07            [ 1] 2459 	jrslt loop_back   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      0023AB 20 1A            [ 2] 2460 	jra loop_done  
      0023AD                       2461 4$: ; positive step
      0023AD 72 0E 00 0E 15   [ 2] 2462 	btjt acc8,#7,loop_done 
      0023B2                       2463 loop_back:
      0023B2 1E 0D            [ 2] 2464 	ldw x,(BPTR,sp)
      0023B4 CF 00 04         [ 2] 2465 	ldw basicptr,x 
      0023B7 72 01 00 22 05   [ 2] 2466 	btjf flags,#FRUN,1$ 
      0023BC E6 02            [ 1] 2467 	ld a,(2,x)
      0023BE C7 00 02         [ 1] 2468 	ld count,a
      0023C1 1E 0B            [ 2] 2469 1$:	ldw x,(INW,sp)
      0023C3 CF 00 00         [ 2] 2470 	ldw in.w,x 
      0023C6 81               [ 4] 2471 	ret 
      0023C7                       2472 loop_done:
                                   2473 	; remove loop data from stack  
      0023C7 85               [ 2] 2474 	popw x
      0023C8                       2475 	_drop VSIZE 
      0023C8 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0023CA 72 5A 00 1F      [ 1] 2476 	dec loop_depth 
      0023CE FC               [ 2] 2477 	jp (x)
                                   2478 
                                   2479 ;----------------------------
                                   2480 ; called by goto/gosub
                                   2481 ; to get target line number 
                                   2482 ; output:
                                   2483 ;    x    line address 
                                   2484 ;---------------------------
      0023CF                       2485 get_target_line:
      0023CF CD 18 0C         [ 4] 2486 	call next_token  
      0023D2 A1 84            [ 1] 2487 	cp a,#TK_INTGR
      0023D4 27 07            [ 1] 2488 	jreq get_target_line_addr 
      0023D6 A1 03            [ 1] 2489 	cp a,#TK_LABEL 
      0023D8 27 26            [ 1] 2490 	jreq look_target_symbol 
      0023DA CC 16 A5         [ 2] 2491 	jp syntax_error
                                   2492 ; the target is a line number 
                                   2493 ; search it. 
      0023DD                       2494 get_target_line_addr:
      0023DD 90 89            [ 2] 2495 	pushw y 
      0023DF CD 18 3E         [ 4] 2496 	call get_int24 ; line # 
      0023E2 4F               [ 1] 2497 	clr a
      0023E3 90 CE 00 04      [ 2] 2498 	ldw y,basicptr 
      0023E7 90 FE            [ 2] 2499 	ldw y,(y)
      0023E9 90 89            [ 2] 2500 	pushw y 
      0023EB 13 01            [ 2] 2501 	cpw x,(1,sp)
      0023ED                       2502 	_drop 2  
      0023ED 5B 02            [ 2]    1     addw sp,#2 
      0023EF 25 01            [ 1] 2503 	jrult 11$
      0023F1 4C               [ 1] 2504 	inc a 
      0023F2                       2505 11$: ; scan program for this line# 	
      0023F2 CD 0C 45         [ 4] 2506 	call search_lineno  
      0023F5 5D               [ 2] 2507 	tnzw x ; 0| line# address 
      0023F6 26 05            [ 1] 2508 	jrne 2$ 
      0023F8 A6 05            [ 1] 2509 	ld a,#ERR_NO_LINE 
      0023FA CC 16 A7         [ 2] 2510 	jp tb_error 
      0023FD 90 85            [ 2] 2511 2$:	popw y  
      0023FF 81               [ 4] 2512 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



                                   2513 
                                   2514 ; the GOTO|GOSUB target is a symbol.
                                   2515 ; output:
                                   2516 ;    X    line address|0 
      002400                       2517 look_target_symbol:
      002400 90 89            [ 2] 2518 	pushw y 
      002402 89               [ 2] 2519 	pushw x 
      002403 CD 18 25         [ 4] 2520 	call skip_string 
      002406 72 5F 00 0D      [ 1] 2521 	clr acc16 
      00240A 90 CE 00 1B      [ 2] 2522 	ldw y,txtbgn 
      00240E 90 E6 03         [ 1] 2523 1$:	ld a,(3,y) ; first TK_ID on line 
      002411 A1 03            [ 1] 2524 	cp a,#TK_LABEL 
      002413 27 15            [ 1] 2525 	jreq 3$ 
      002415 90 E6 02         [ 1] 2526 2$:	ld a,(2,y); line length 
      002418 C7 00 0E         [ 1] 2527 	ld acc8,a 
      00241B 72 B9 00 0D      [ 2] 2528 	addw y,acc16 ;point to next line 
      00241F 90 C3 00 1D      [ 2] 2529 	cpw y,txtend 
      002423 25 E9            [ 1] 2530 	jrult 1$
      002425 A6 0A            [ 1] 2531 	ld a,#ERR_BAD_VALUE
      002427 CC 16 A7         [ 2] 2532 	jp tb_error 
      00242A                       2533 3$: ; found a TK_LABEL 
                                   2534 	; compare with GOTO|GOSUB target 
      00242A 90 89            [ 2] 2535 	pushw y ; line address 
      00242C 72 A9 00 04      [ 2] 2536 	addw y,#4 ; label string 
      002430 1E 03            [ 2] 2537 	ldw x,(3,sp) ; target string 
      002432 CD 13 A4         [ 4] 2538 	call strcmp
      002435 26 04            [ 1] 2539 	jrne 4$
      002437 90 85            [ 2] 2540 	popw y 
      002439 20 DA            [ 2] 2541 	jra 2$ 
      00243B                       2542 4$: ; target found 
      00243B 85               [ 2] 2543 	popw x ;  address line target  
      00243C                       2544 	_drop 2 ; target string 
      00243C 5B 02            [ 2]    1     addw sp,#2 
      00243E 90 85            [ 2] 2545 	popw y 
      002440 81               [ 4] 2546 	ret
                                   2547 
                                   2548 
                                   2549 ;--------------------------------
                                   2550 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2551 ; selective goto or gosub 
                                   2552 ;--------------------------------
      002441                       2553 cmd_on:
      002441 72 00 00 22 05   [ 2] 2554 	btjt flags,#FRUN,0$ 
      002446 A6 06            [ 1] 2555 	ld a,#ERR_RUN_ONLY
      002448 CC 16 A7         [ 2] 2556 	jp tb_error 
      00244B CD 1B 16         [ 4] 2557 0$:	call expression 
      00244E A1 84            [ 1] 2558 	cp a,#TK_INTGR
      002450 27 03            [ 1] 2559 	jreq 1$
      002452 CC 16 A5         [ 2] 2560 	jp syntax_error
      002455                       2561 1$: _xpop
      002455 90 F6            [ 1]    1     ld a,(y)
      002457 93               [ 1]    2     ldw x,y 
      002458 EE 01            [ 2]    3     ldw x,(1,x)
      00245A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2562 ; the selector is the element indice 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2563 ; in the list of arguments. {1..#elements} 
      00245E 9F               [ 1] 2564 	ld a,xl ; keep only bits 7..0
      00245F 27 68            [ 1] 2565 	jreq 9$ ; element # begin at 1. 
      002461 88               [ 1] 2566 	push a  ; selector  
      002462 CD 18 0C         [ 4] 2567 	call next_token
      002465 A1 80            [ 1] 2568 	cp a,#TK_CMD 
      002467 27 03            [ 1] 2569 	jreq 2$ 
      002469 CC 16 A5         [ 2] 2570 	jp syntax_error 
      00246C                       2571 2$: _get_code_addr
      00246C FE               [ 2]    1         ldw x,(x)
      00246D 72 5C 00 01      [ 1]    2         inc in 
      002471 72 5C 00 01      [ 1]    3         inc in 
                                   2572 ;; must be a GOTO or GOSUB 
      002475 A3 24 D3         [ 2] 2573 	cpw x,#goto 
      002478 27 08            [ 1] 2574 	jreq 4$
      00247A A3 24 ED         [ 2] 2575 	cpw x,#gosub 
      00247D 27 03            [ 1] 2576 	jreq 4$ 
      00247F CC 16 A5         [ 2] 2577 	jp syntax_error 
      002482                       2578 4$: 
      002482 84               [ 1] 2579 	pop a 
      002483 89               [ 2] 2580 	pushw x ; save routine address 	
      002484 88               [ 1] 2581 	push a  ; selector  
      002485                       2582 5$: ; skip elements in list until selector==0 
      002485 0A 01            [ 1] 2583 	dec (1,sp)
      002487 27 26            [ 1] 2584 	jreq 6$ 
                                   2585 ; can be a line# or a label 
      002489 CD 18 0C         [ 4] 2586 	call next_token 
      00248C A1 84            [ 1] 2587 	cp a,#TK_INTGR 
      00248E 27 07            [ 1] 2588 	jreq 52$
      002490 A1 03            [ 1] 2589 	cp a,#TK_LABEL 
      002492 27 0D            [ 1] 2590 	jreq 54$
      002494 CC 16 A5         [ 2] 2591 	jp syntax_error 
      002497                       2592 52$: ; got a line number 
      002497 C6 00 01         [ 1] 2593 	ld a,in ; skip over int24 value 
      00249A AB 03            [ 1] 2594 	add a,#CELL_SIZE ; integer size  
      00249C C7 00 01         [ 1] 2595 	ld in,a 
      00249F 20 03            [ 2] 2596 	jra 56$
      0024A1 CD 18 25         [ 4] 2597 54$: call skip_string ; skip over label 	
      0024A4                       2598 56$: ; if another element comma present 
      0024A4 CD 18 0C         [ 4] 2599 	call next_token
      0024A7 A1 08            [ 1] 2600 	cp a,#TK_COMMA 
      0024A9 27 DA            [ 1] 2601 	jreq 5$ 
                                   2602 ; arg list exhausted, selector to big 
                                   2603 ; continue execution on next line 
      0024AB                       2604 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0024AB 5B 03            [ 2]    1     addw sp,#3 
      0024AD 20 1A            [ 2] 2605 	jra 9$
      0024AF                       2606 6$: ;at selected position  
      0024AF                       2607 	_drop 1 ; discard selector
      0024AF 5B 01            [ 2]    1     addw sp,#1 
                                   2608 ; here only the routine address 
                                   2609 ; of GOTO|GOSUB is on stack 
      0024B1 CD 23 CF         [ 4] 2610     call get_target_line
      0024B4 CF 00 19         [ 2] 2611 	ldw ptr16,x 	
      0024B7 55 00 02 00 01   [ 1] 2612 	mov in,count ; move to end of line  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0024BC 85               [ 2] 2613 	popw x ; cmd address, GOTO||GOSUB 
      0024BD A3 24 D3         [ 2] 2614 	cpw x,#goto 
      0024C0 26 05            [ 1] 2615 	jrne 7$ 
      0024C2 CE 00 19         [ 2] 2616 	ldw x,ptr16 
      0024C5 20 19            [ 2] 2617 	jra jp_to_target
      0024C7                       2618 7$: 
      0024C7 20 35            [ 2] 2619 	jra gosub_2 ; target in ptr16 
      0024C9                       2620 9$: ; expr out of range skip to end of line
                                   2621     ; this will force a fall to next line  
      0024C9 55 00 02 00 01   [ 1] 2622 	mov in,count
      0024CE                       2623 	_drop 2
      0024CE 5B 02            [ 2]    1     addw sp,#2 
      0024D0 CC 17 58         [ 2] 2624 	jp next_line  
                                   2625 
                                   2626 
                                   2627 ;------------------------
                                   2628 ; BASIC: GOTO line# 
                                   2629 ; jump to line# 
                                   2630 ; here cstack is 2 call deep from interpreter 
                                   2631 ;------------------------
      0024D3                       2632 goto:
      0024D3 72 00 00 22 05   [ 2] 2633 	btjt flags,#FRUN,goto_1  
      0024D8 A6 06            [ 1] 2634 	ld a,#ERR_RUN_ONLY
      0024DA CC 16 A7         [ 2] 2635 	jp tb_error 
      0024DD                       2636 goto_1:
      0024DD CD 23 CF         [ 4] 2637 	call get_target_line
      0024E0                       2638 jp_to_target:
      0024E0 CF 00 04         [ 2] 2639 	ldw basicptr,x 
      0024E3 E6 02            [ 1] 2640 	ld a,(2,x)
      0024E5 C7 00 02         [ 1] 2641 	ld count,a 
      0024E8 35 03 00 01      [ 1] 2642 	mov in,#3 
      0024EC 81               [ 4] 2643 	ret 
                                   2644 
                                   2645 
                                   2646 ;--------------------
                                   2647 ; BASIC: GOSUB line#
                                   2648 ; basic subroutine call
                                   2649 ; actual line# and basicptr 
                                   2650 ; are saved on cstack
                                   2651 ; here cstack is 2 call deep from interpreter 
                                   2652 ;--------------------
                           000001  2653 	RET_ADDR=1 ; subroutine return address 
                           000003  2654 	RET_BPTR=3 ; basicptr return point 
                           000005  2655 	RET_INW=5  ; in.w return point 
                           000004  2656 	VSIZE=4 
      0024ED                       2657 gosub:
      0024ED 72 00 00 22 06   [ 2] 2658 	btjt flags,#FRUN,gosub_1 
      0024F2 A6 06            [ 1] 2659 	ld a,#ERR_RUN_ONLY
      0024F4 CC 16 A7         [ 2] 2660 	jp tb_error 
      0024F7 81               [ 4] 2661 	ret 
      0024F8                       2662 gosub_1:
      0024F8 CD 23 CF         [ 4] 2663 	call get_target_line 
      0024FB CF 00 19         [ 2] 2664 	ldw ptr16,x
      0024FE                       2665 gosub_2: 
      0024FE 85               [ 2] 2666 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0024FF                       2667 	_vars VSIZE  
      0024FF 52 04            [ 2]    1     sub sp,#VSIZE 
      002501 89               [ 2] 2668 	pushw x ; RET_ADDR 
                                   2669 ; save BASIC subroutine return point.   
      002502 CE 00 04         [ 2] 2670 	ldw x,basicptr
      002505 1F 03            [ 2] 2671 	ldw (RET_BPTR,sp),x 
      002507 CE 00 00         [ 2] 2672 	ldw x,in.w 
      00250A 1F 05            [ 2] 2673 	ldw (RET_INW,sp),x
      00250C CE 00 19         [ 2] 2674 	ldw x,ptr16  
      00250F 20 CF            [ 2] 2675 	jra jp_to_target
                                   2676 
                                   2677 ;------------------------
                                   2678 ; BASIC: RETURN 
                                   2679 ; exit from BASIC subroutine 
                                   2680 ;------------------------
      002511                       2681 return:
      002511 72 00 00 22 05   [ 2] 2682 	btjt flags,#FRUN,0$ 
      002516 A6 06            [ 1] 2683 	ld a,#ERR_RUN_ONLY
      002518 CC 16 A7         [ 2] 2684 	jp tb_error 
      00251B                       2685 0$:	
      00251B 1E 03            [ 2] 2686 	ldw x,(RET_BPTR,sp) 
      00251D CF 00 04         [ 2] 2687 	ldw basicptr,x
      002520 E6 02            [ 1] 2688 	ld a,(2,x)
      002522 C7 00 02         [ 1] 2689 	ld count,a  
      002525 1E 05            [ 2] 2690 	ldw x,(RET_INW,sp)
      002527 CF 00 00         [ 2] 2691 	ldw in.w,x 
      00252A 85               [ 2] 2692 	popw x 
      00252B                       2693 	_drop VSIZE 
      00252B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00252D FC               [ 2] 2694 	jp (x)
                                   2695 
                                   2696 
                                   2697 ;---------------------------------
                                   2698 ; check if A:X contain the address 
                                   2699 ; of a program in FLASH 
                                   2700 ; output:
                                   2701 ;     Z    set is progam 
                                   2702 ;----------------------------------
      00252E                       2703 is_program_addr:
      00252E 4D               [ 1] 2704 	tnz a 
      00252F 26 0D            [ 1] 2705 	jrne 9$
      002531 A3 39 00         [ 2] 2706 	cpw x,#app_space 
      002534 25 07            [ 1] 2707 	jrult 8$
      002536 89               [ 2] 2708 	pushw x 
      002537 CD 28 CA         [ 4] 2709 	call qsign 
      00253A 85               [ 2] 2710 	popw x 
      00253B 27 01            [ 1] 2711 	jreq 9$ 
      00253D 43               [ 1] 2712 8$:	cpl a ; clr Z bit  
      00253E 81               [ 4] 2713 9$:	ret 
                                   2714 
                                   2715 ;----------------------------------
                                   2716 ; BASIC: RUN [label]
                                   2717 ; run BASIC program in RAM
                                   2718 ;----------------------------------- 
      00253F                       2719 cmd_run: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      00253F 72 01 00 22 02   [ 2] 2720 	btjf flags,#FRUN,0$  
      002544 4F               [ 1] 2721 	clr a 
      002545 81               [ 4] 2722 	ret
      002546                       2723 0$: ; check for STOP condition 
      002546 72 09 00 22 12   [ 2] 2724 	btjf flags,#FBREAK,1$
      00254B                       2725 	_drop 2 
      00254B 5B 02            [ 2]    1     addw sp,#2 
      00254D CD 20 B3         [ 4] 2726 	call rest_context
      002550                       2727 	_drop CTXT_SIZE 
      002550 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002552 72 19 00 22      [ 1] 2728 	bres flags,#FBREAK 
      002556 72 10 00 22      [ 1] 2729 	bset flags,#FRUN 
      00255A CC 17 50         [ 2] 2730 	jp interpreter 
      00255D                       2731 1$:	; check for label option 
      00255D CD 18 0C         [ 4] 2732 	call next_token 
      002560 A1 03            [ 1] 2733 	cp a,#TK_LABEL 
      002562 26 1F            [ 1] 2734 	jrne 3$
      002564 89               [ 2] 2735 	pushw x 
      002565 CD 18 25         [ 4] 2736 	call skip_string 
      002568 85               [ 2] 2737 	popw x  
      002569 CD 32 43         [ 4] 2738 	call search_program
      00256C 26 05            [ 1] 2739 	jrne 2$
      00256E A6 12            [ 1] 2740 	ld a,#ERR_NO_PROGRAM
      002570 CC 16 A7         [ 2] 2741 	jp tb_error 
      002573 CF 00 1B         [ 2] 2742 2$: ldw txtbgn,x 
      002576 1D 00 02         [ 2] 2743 	subw x,#2 
      002579 FE               [ 2] 2744 	ldw x,(x)
      00257A 72 BB 00 1B      [ 2] 2745 	addw x,txtbgn 
      00257E CF 00 1D         [ 2] 2746 	ldw txtend,x 
      002581 20 19            [ 2] 2747 	jra run_it 	
      002583                       2748 3$:	_unget_token 
      002583 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002588 CE 00 1B         [ 2] 2749 	ldw x,txtbgn
      00258B C3 00 1D         [ 2] 2750 	cpw x,txtend 
      00258E 2B 0C            [ 1] 2751 	jrmi run_it 
      002590 AE 15 FC         [ 2] 2752 	ldw x,#err_no_prog
      002593 CD 09 5C         [ 4] 2753 	call puts 
      002596 55 00 02 00 01   [ 1] 2754 	mov in,count
      00259B 81               [ 4] 2755 	ret 
      00259C                       2756 run_it:	 
      00259C                       2757 	_drop 2 ; drop return address 
      00259C 5B 02            [ 2]    1     addw sp,#2 
      00259E                       2758 run_it_02: 
      00259E CD 1C E3         [ 4] 2759     call ubound 
      0025A1 CD 14 09         [ 4] 2760 	call clear_vars
                                   2761 ; initialize DIM variables pointers 
      0025A4 CE 00 1D         [ 2] 2762 	ldw x,txtend 
      0025A7 CF 00 30         [ 2] 2763 	ldw dvar_bgn,x 
      0025AA CF 00 32         [ 2] 2764 	ldw dvar_end,x 	 
                                   2765 ; clear data pointer 
      0025AD 5F               [ 1] 2766 	clrw x 
      0025AE CF 00 06         [ 2] 2767 	ldw data_ptr,x 
      0025B1 72 5F 00 08      [ 1] 2768 	clr data_ofs 
      0025B5 72 5F 00 09      [ 1] 2769 	clr data_len 
                                   2770 ; initialize BASIC pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0025B9 CE 00 1B         [ 2] 2771 	ldw x,txtbgn 
      0025BC CF 00 04         [ 2] 2772 	ldw basicptr,x 
      0025BF E6 02            [ 1] 2773 	ld a,(2,x)
      0025C1 C7 00 02         [ 1] 2774 	ld count,a
      0025C4 35 03 00 01      [ 1] 2775 	mov in,#3	
      0025C8 72 10 00 22      [ 1] 2776 	bset flags,#FRUN 
      0025CC CC 17 50         [ 2] 2777 	jp interpreter 
                                   2778 
                                   2779 
                                   2780 ;----------------------
                                   2781 ; BASIC: END
                                   2782 ; end running program
                                   2783 ;---------------------- 
                           000001  2784 	CHAIN_BP=1 
                           000003  2785 	CHAIN_IN=3
                           000005  2786 	CHAIN_TXTBGN=5
                           000007  2787 	CHAIN_TXTEND=7
                           000008  2788 	CHAIN_CNTX_SIZE=8  
      0025CF                       2789 cmd_end: 
      0025CF                       2790 	_drop 2 ; no need for return address 
      0025CF 5B 02            [ 2]    1     addw sp,#2 
                                   2791 ; check for chained program 
      0025D1 72 5D 00 34      [ 1] 2792 	tnz chain_level
      0025D5 27 1D            [ 1] 2793 	jreq 8$
                                   2794 ; restore chain context 
      0025D7 72 5A 00 34      [ 1] 2795 	dec chain_level 
      0025DB 1E 01            [ 2] 2796 	ldw x,(CHAIN_BP,sp) ; chain saved basicptr 
      0025DD CF 00 04         [ 2] 2797 	ldw basicptr,x 
      0025E0 1E 03            [ 2] 2798 	ldw x,(CHAIN_IN,sp) ; chain saved in and count  
      0025E2 CF 00 01         [ 2] 2799 	ldw in,x 
      0025E5 1E 05            [ 2] 2800 	ldw x,(CHAIN_TXTBGN,sp)
      0025E7 CF 00 1B         [ 2] 2801 	ldw txtbgn,x 
      0025EA 1E 07            [ 2] 2802 	ldw x,(CHAIN_TXTEND,sp)
      0025EC CF 00 1D         [ 2] 2803 	ldw txtend,x 
      0025EF                       2804 	_drop CHAIN_CNTX_SIZE ; CHAIN saved data size  
      0025EF 5B 08            [ 2]    1     addw sp,#CHAIN_CNTX_SIZE 
      0025F1 CC 17 50         [ 2] 2805 	jp interpreter 
      0025F4                       2806 8$: ; clean stack 
      0025F4 AE 17 FF         [ 2] 2807 	ldw x,#STACK_EMPTY
      0025F7 94               [ 1] 2808 	ldw sp,x 
      0025F8 CC 17 31         [ 2] 2809 	jp warm_start
                                   2810 
                                   2811 ;---------------------------
                                   2812 ; BASIC: GET var 
                                   2813 ; receive a key in variable 
                                   2814 ; don't wait 
                                   2815 ;---------------------------
      0025FB                       2816 cmd_get:
      0025FB CD 18 0C         [ 4] 2817 	call next_token 
      0025FE A1 85            [ 1] 2818 	cp a,#TK_VAR 
      002600 27 03            [ 1] 2819 	jreq 0$
      002602 CC 16 A5         [ 2] 2820 	jp syntax_error 
      002605 CD 18 34         [ 4] 2821 0$: call get_addr 
      002608 CF 00 19         [ 2] 2822 	ldw ptr16,x 
      00260B CD 09 08         [ 4] 2823 	call qgetc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00260E 27 03            [ 1] 2824 	jreq 2$
      002610 CD 09 0F         [ 4] 2825 	call getc  
      002613 72 3F 00 19      [ 4] 2826 2$: clr [ptr16]
      002617 72 5C 00 1A      [ 1] 2827 	inc ptr8 
      00261B 72 3F 00 19      [ 4] 2828 	clr [ptr16]
      00261F 72 5C 00 1A      [ 1] 2829 	inc ptr8 
      002623 72 C7 00 19      [ 4] 2830 	ld [ptr16],a 
      002627 81               [ 4] 2831 	ret 
                                   2832 
                                   2833 
                                   2834 ;-----------------
                                   2835 ; 1 Khz beep 
                                   2836 ;-----------------
      002628                       2837 beep_1khz:: 
      002628 90 89            [ 2] 2838 	pushw y 
      00262A AE 00 64         [ 2] 2839 	ldw x,#100
      00262D 90 AE 03 E8      [ 2] 2840 	ldw y,#1000
      002631 20 22            [ 2] 2841 	jra beep
                                   2842 
                                   2843 ;-----------------------
                                   2844 ; BASIC: TONE expr1,expr2
                                   2845 ; used TIMER2 channel 1
                                   2846 ; to produce a tone 
                                   2847 ; arguments:
                                   2848 ;    expr1   frequency 
                                   2849 ;    expr2   duration msec.
                                   2850 ;---------------------------
      002633                       2851 tone:
      002633 90 89            [ 2] 2852 	pushw y 
      002635 CD 19 D4         [ 4] 2853 	call arg_list 
      002638 A1 02            [ 1] 2854 	cp a,#2 
      00263A 27 03            [ 1] 2855 	jreq 1$
      00263C CC 16 A5         [ 2] 2856 	jp syntax_error 
      00263F                       2857 1$: 
      00263F                       2858 	_xpop 
      00263F 90 F6            [ 1]    1     ld a,(y)
      002641 93               [ 1]    2     ldw x,y 
      002642 EE 01            [ 2]    3     ldw x,(1,x)
      002644 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002648 89               [ 2] 2859 	pushw x ; duration 
      002649                       2860 	_xpop ; frequency
      002649 90 F6            [ 1]    1     ld a,(y)
      00264B 93               [ 1]    2     ldw x,y 
      00264C EE 01            [ 2]    3     ldw x,(1,x)
      00264E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002652 90 93            [ 1] 2861 	ldw y,x ; frequency 
      002654 85               [ 2] 2862 	popw x  ; duration 
      002655                       2863 beep:  
      002655 89               [ 2] 2864 	pushw x 
      002656 AE F4 24         [ 2] 2865 	ldw x,#TIM2_CLK_FREQ
      002659 65               [ 2] 2866 	divw x,y ; cntr=Fclk/freq 
                                   2867 ; round to nearest integer 
      00265A 90 A3 7A 12      [ 2] 2868 	cpw y,#TIM2_CLK_FREQ/2
      00265E 2B 01            [ 1] 2869 	jrmi 2$
      002660 5C               [ 1] 2870 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002661                       2871 2$:	 
      002661 9E               [ 1] 2872 	ld a,xh 
      002662 C7 53 0D         [ 1] 2873 	ld TIM2_ARRH,a 
      002665 9F               [ 1] 2874 	ld a,xl 
      002666 C7 53 0E         [ 1] 2875 	ld TIM2_ARRL,a 
                                   2876 ; 50% duty cycle 
      002669 8C               [ 1] 2877 	ccf 
      00266A 56               [ 2] 2878 	rrcw x 
      00266B 9E               [ 1] 2879 	ld a,xh 
      00266C C7 53 0F         [ 1] 2880 	ld TIM2_CCR1H,a 
      00266F 9F               [ 1] 2881 	ld a,xl
      002670 C7 53 10         [ 1] 2882 	ld TIM2_CCR1L,a
      002673 72 10 53 08      [ 1] 2883 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002677 72 10 53 00      [ 1] 2884 	bset TIM2_CR1,#TIM2_CR1_CEN
      00267B 72 10 53 04      [ 1] 2885 	bset TIM2_EGR,#TIM2_EGR_UG
      00267F 85               [ 2] 2886 	popw x 
      002680 CD 2B C4         [ 4] 2887 	call pause02
      002683 72 11 53 08      [ 1] 2888 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002687 72 11 53 00      [ 1] 2889 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00268B 90 85            [ 2] 2890 	popw y 
      00268D 81               [ 4] 2891 	ret 
                                   2892 
                                   2893 ;-------------------------------
                                   2894 ; BASIC: ADCON 0|1 [,divisor]  
                                   2895 ; disable/enanble ADC 
                                   2896 ;-------------------------------
                           000003  2897 	ONOFF=3 
                           000001  2898 	DIVSOR=1
                           000004  2899 	VSIZE=4 
      00268E                       2900 power_adc:
      00268E CD 19 D4         [ 4] 2901 	call arg_list 
      002691 A1 02            [ 1] 2902 	cp a,#2	
      002693 27 12            [ 1] 2903 	jreq 1$
      002695 A1 01            [ 1] 2904 	cp a,#1 
      002697 27 03            [ 1] 2905 	jreq 0$ 
      002699 CC 16 A5         [ 2] 2906 	jp syntax_error 
      00269C 4F               [ 1] 2907 0$:	clr a 
      00269D 5F               [ 1] 2908 	clrw x
      00269E                       2909 	_xpush   ; divisor  
      00269E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0026A2 90 F7            [ 1]    2     ld (y),a 
      0026A4 90 EF 01         [ 2]    3     ldw (1,y),x 
      0026A7                       2910 1$: _at_next 
      0026A7 90 E6 03         [ 1]    1     ld a,(3,y)
      0026AA 93               [ 1]    2     ldw x,y 
      0026AB EE 04            [ 2]    3     ldw x,(4,x)
      0026AD 5D               [ 2] 2911 	tnzw x 
      0026AE 27 25            [ 1] 2912 	jreq 2$ 
      0026B0                       2913 	_xpop
      0026B0 90 F6            [ 1]    1     ld a,(y)
      0026B2 93               [ 1]    2     ldw x,y 
      0026B3 EE 01            [ 2]    3     ldw x,(1,x)
      0026B5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026B9                       2914 	_xdrop  
      0026B9 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0026BD 9F               [ 1] 2915 	ld a,xl
      0026BE A4 07            [ 1] 2916 	and a,#7
      0026C0 4E               [ 1] 2917 	swap a 
      0026C1 C7 54 01         [ 1] 2918 	ld ADC_CR1,a
      0026C4 72 16 50 CA      [ 1] 2919 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026C8 72 10 54 01      [ 1] 2920 	bset ADC_CR1,#ADC_CR1_ADON 
      0026CC                       2921 	_usec_dly 7 
      0026CC AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0026CF 5A               [ 2]    2     decw x
      0026D0 9D               [ 1]    3     nop 
      0026D1 26 FA            [ 1]    4     jrne .-4
      0026D3 20 08            [ 2] 2922 	jra 3$
      0026D5 72 11 54 01      [ 1] 2923 2$: bres ADC_CR1,#ADC_CR1_ADON
      0026D9 72 17 50 CA      [ 1] 2924 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026DD                       2925 3$:	
      0026DD 81               [ 4] 2926 	ret
                                   2927 
                                   2928 ;-----------------------------
                                   2929 ; BASIC: ADCREAD (channel)
                                   2930 ; read adc channel {0..5}
                                   2931 ; output:
                                   2932 ;   A 		TK_INTGR 
                                   2933 ;   X 		value 
                                   2934 ;-----------------------------
      0026DE                       2935 analog_read:
      0026DE CD 19 CF         [ 4] 2936 	call func_args 
      0026E1 A1 01            [ 1] 2937 	cp a,#1 
      0026E3 27 03            [ 1] 2938 	jreq 1$
      0026E5 CC 16 A5         [ 2] 2939 	jp syntax_error
      0026E8                       2940 1$: _xpop 
      0026E8 90 F6            [ 1]    1     ld a,(y)
      0026EA 93               [ 1]    2     ldw x,y 
      0026EB EE 01            [ 2]    3     ldw x,(1,x)
      0026ED 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026F1 A3 00 05         [ 2] 2941 	cpw x,#5 
      0026F4 23 05            [ 2] 2942 	jrule 2$
      0026F6 A6 0A            [ 1] 2943 	ld a,#ERR_BAD_VALUE
      0026F8 CC 16 A7         [ 2] 2944 	jp tb_error 
      0026FB 9F               [ 1] 2945 2$: ld a,xl
      0026FC C7 00 0E         [ 1] 2946 	ld acc8,a 
      0026FF A6 05            [ 1] 2947 	ld a,#5
      002701 C0 00 0E         [ 1] 2948 	sub a,acc8 
      002704 C7 54 00         [ 1] 2949 	ld ADC_CSR,a
      002707 72 16 54 02      [ 1] 2950 	bset ADC_CR2,#ADC_CR2_ALIGN
      00270B 72 10 54 01      [ 1] 2951 	bset ADC_CR1,#ADC_CR1_ADON
      00270F 72 0F 54 00 FB   [ 2] 2952 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002714 CE 54 04         [ 2] 2953 	ldw x,ADC_DRH
      002717 A6 84            [ 1] 2954 	ld a,#TK_INTGR
      002719 81               [ 4] 2955 	ret 
                                   2956 
                                   2957 ;-----------------------
                                   2958 ; BASIC: DREAD(pin)
                                   2959 ; Arduino pins 
                                   2960 ; read state of a digital pin 
                                   2961 ; pin# {0..15}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   2962 ; output:
                                   2963 ;    A 		TK_INTGR
                                   2964 ;    X      0|1 
                                   2965 ;-------------------------
                           000001  2966 	PINNO=1
                           000001  2967 	VSIZE=1
      00271A                       2968 digital_read:
      00271A                       2969 	_vars VSIZE 
      00271A 52 01            [ 2]    1     sub sp,#VSIZE 
      00271C CD 19 CF         [ 4] 2970 	call func_args
      00271F A1 01            [ 1] 2971 	cp a,#1
      002721 27 03            [ 1] 2972 	jreq 1$
      002723 CC 16 A5         [ 2] 2973 	jp syntax_error
      002726                       2974 1$: _xpop 
      002726 90 F6            [ 1]    1     ld a,(y)
      002728 93               [ 1]    2     ldw x,y 
      002729 EE 01            [ 2]    3     ldw x,(1,x)
      00272B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00272F A3 00 0F         [ 2] 2975 	cpw x,#15 
      002732 23 05            [ 2] 2976 	jrule 2$
      002734 A6 0A            [ 1] 2977 	ld a,#ERR_BAD_VALUE
      002736 CC 16 A7         [ 2] 2978 	jp tb_error 
      002739 CD 2D 07         [ 4] 2979 2$:	call select_pin 
      00273C 6B 01            [ 1] 2980 	ld (PINNO,sp),a
      00273E E6 01            [ 1] 2981 	ld a,(GPIO_IDR,x)
      002740 0D 01            [ 1] 2982 	tnz (PINNO,sp)
      002742 27 05            [ 1] 2983 	jreq 8$
      002744 44               [ 1] 2984 3$: srl a 
      002745 0A 01            [ 1] 2985 	dec (PINNO,sp)
      002747 26 FB            [ 1] 2986 	jrne 3$ 
      002749 A4 01            [ 1] 2987 8$: and a,#1 
      00274B 5F               [ 1] 2988 	clrw x 
      00274C 97               [ 1] 2989 	ld xl,a 
      00274D 4F               [ 1] 2990 	clr a 
      00274E                       2991 	_drop VSIZE
      00274E 5B 01            [ 2]    1     addw sp,#VSIZE 
      002750 81               [ 4] 2992 	ret
                                   2993 
                                   2994 
                                   2995 ;-----------------------
                                   2996 ; BASIC: DWRITE pin,0|1
                                   2997 ; Arduino pins 
                                   2998 ; write to a digital pin 
                                   2999 ; pin# {0..15}
                                   3000 ; output:
                                   3001 ;    A 		TK_INTGR
                                   3002 ;    X      0|1 
                                   3003 ;-------------------------
                           000001  3004 	PINNO=1
                           000002  3005 	PINVAL=2
                           000002  3006 	VSIZE=2
      002751                       3007 digital_write:
      002751                       3008 	_vars VSIZE 
      002751 52 02            [ 2]    1     sub sp,#VSIZE 
      002753 CD 19 D4         [ 4] 3009 	call arg_list  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002756 A1 02            [ 1] 3010 	cp a,#2 
      002758 27 03            [ 1] 3011 	jreq 1$
      00275A CC 16 A5         [ 2] 3012 	jp syntax_error
      00275D                       3013 1$: _xpop 
      00275D 90 F6            [ 1]    1     ld a,(y)
      00275F 93               [ 1]    2     ldw x,y 
      002760 EE 01            [ 2]    3     ldw x,(1,x)
      002762 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002766 9F               [ 1] 3014 	ld a,xl 
      002767 6B 02            [ 1] 3015 	ld (PINVAL,sp),a
      002769                       3016 	_xpop 
      002769 90 F6            [ 1]    1     ld a,(y)
      00276B 93               [ 1]    2     ldw x,y 
      00276C EE 01            [ 2]    3     ldw x,(1,x)
      00276E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002772 A3 00 0F         [ 2] 3017 	cpw x,#15 
      002775 23 05            [ 2] 3018 	jrule 2$
      002777 A6 0A            [ 1] 3019 	ld a,#ERR_BAD_VALUE
      002779 CC 16 A7         [ 2] 3020 	jp tb_error 
      00277C CD 2D 07         [ 4] 3021 2$:	call select_pin 
      00277F 6B 01            [ 1] 3022 	ld (PINNO,sp),a 
      002781 A6 01            [ 1] 3023 	ld a,#1
      002783 0D 01            [ 1] 3024 	tnz (PINNO,sp)
      002785 27 05            [ 1] 3025 	jreq 4$
      002787 48               [ 1] 3026 3$: sll a
      002788 0A 01            [ 1] 3027 	dec (PINNO,sp)
      00278A 26 FB            [ 1] 3028 	jrne 3$
      00278C 0D 02            [ 1] 3029 4$: tnz (PINVAL,sp)
      00278E 26 05            [ 1] 3030 	jrne 5$
      002790 43               [ 1] 3031 	cpl a 
      002791 E4 00            [ 1] 3032 	and a,(GPIO_ODR,x)
      002793 20 02            [ 2] 3033 	jra 8$
      002795 EA 00            [ 1] 3034 5$: or a,(GPIO_ODR,x)
      002797 E7 00            [ 1] 3035 8$: ld (GPIO_ODR,x),a 
      002799                       3036 	_drop VSIZE 
      002799 5B 02            [ 2]    1     addw sp,#VSIZE 
      00279B 81               [ 4] 3037 	ret
                                   3038 
                                   3039 
                                   3040 ;-----------------------
                                   3041 ; BASIC: STOP
                                   3042 ; stop progam execution  
                                   3043 ; without resetting pointers 
                                   3044 ; the program is resumed
                                   3045 ; with RUN 
                                   3046 ;-------------------------
      00279C                       3047 stop:
      00279C 72 00 00 22 02   [ 2] 3048 	btjt flags,#FRUN,2$
      0027A1 4F               [ 1] 3049 	clr a
      0027A2 81               [ 4] 3050 	ret 
      0027A3                       3051 2$:	 
                                   3052 ; create space on cstack to save context 
      0027A3 AE 27 CA         [ 2] 3053 	ldw x,#break_point 
      0027A6 CD 09 5C         [ 4] 3054 	call puts 
      0027A9                       3055 	_drop 2 ;drop return address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0027A9 5B 02            [ 2]    1     addw sp,#2 
      0027AB                       3056 	_vars CTXT_SIZE ; context size 
      0027AB 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0027AD CD 20 A3         [ 4] 3057 	call save_context 
      0027B0 AE 16 68         [ 2] 3058 	ldw x,#tib 
      0027B3 CF 00 04         [ 2] 3059 	ldw basicptr,x
      0027B6 7F               [ 1] 3060 	clr (x)
      0027B7 72 5F 00 02      [ 1] 3061 	clr count  
      0027BB 5F               [ 1] 3062 	clrw x 
      0027BC CF 00 00         [ 2] 3063 	ldw in.w,x
      0027BF 72 11 00 22      [ 1] 3064 	bres flags,#FRUN 
      0027C3 72 18 00 22      [ 1] 3065 	bset flags,#FBREAK
      0027C7 CC 17 50         [ 2] 3066 	jp interpreter 
      0027CA 0A 62 72 65 61 6B 20  3067 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3068 
                                   3069 ;-----------------------
                                   3070 ; BASIC: NEW
                                   3071 ; from command line only 
                                   3072 ; free program memory
                                   3073 ; and clear variables 
                                   3074 ;------------------------
      0027E8                       3075 new: 
      0027E8 72 01 00 22 01   [ 2] 3076 	btjf flags,#FRUN,0$ 
      0027ED 81               [ 4] 3077 	ret 
      0027EE 72 5F 00 22      [ 1] 3078 0$:	clr flags 
      0027F2 CD 14 B1         [ 4] 3079 	call clear_basic 
      0027F5 81               [ 4] 3080 	ret 
                                   3081 
                                   3082 ;-----------------------------------
                                   3083 ; erase program at specified address
                                   3084 ; keep signature and size fields. 
                                   3085 ; signature replaced by "XX"
                                   3086 ; input:
                                   3087 ;    X    address 
                                   3088 ;-----------------------------------
                           000001  3089 	ADDR=1    ; program address
                           000003  3090 	PRG_SIZE=3    ; program size 
                           000005  3091 	BLOCKS=5 ; blocks to erase 
                           000006  3092 	VSIZE=6
      0027F6                       3093 erase_program:
      0027F6 89               [ 2] 3094 	pushw x 
      0027F7 CD 18 25         [ 4] 3095 	call skip_string 
      0027FA 85               [ 2] 3096 	popw x 
      0027FB CD 32 43         [ 4] 3097 	call search_program 
      0027FE 27 4A            [ 1] 3098 	jreq 9$
      002800 CD 06 E7         [ 4] 3099 	call move_erase_to_ram
      002803 72 5F 00 18      [ 1] 3100 	clr farptr 
      002807                       3101 	_vars VSIZE 
      002807 52 06            [ 2]    1     sub sp,#VSIZE 
      002809 1D 00 04         [ 2] 3102 1$:	subw x,#4 
      00280C 1F 01            [ 2] 3103 	ldw (ADDR,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      00280E EE 02            [ 2] 3104 	ldw x,(2,x)
      002810 1F 03            [ 2] 3105 	ldw (PRG_SIZE,sp),x
      002812 A6 80            [ 1] 3106 	ld a,#BLOCK_SIZE 
      002814 62               [ 2] 3107 	div x,a 
      002815 4D               [ 1] 3108 	tnz a 
      002816 27 01            [ 1] 3109 	jreq 2$ 
      002818 5C               [ 1] 3110 	incw x 
      002819 1F 05            [ 2] 3111 2$:	ldw (BLOCKS,sp),x 
      00281B 1E 01            [ 2] 3112 	ldw x,(ADDR,sp)
      00281D CF 00 19         [ 2] 3113 	ldw ptr16,x 
      002820 CD 07 65         [ 4] 3114 3$:	call block_erase
      002823 AE 00 80         [ 2] 3115 	ldw x,#BLOCK_SIZE 
      002826 CD 08 60         [ 4] 3116 	call incr_farptr
      002829 1E 05            [ 2] 3117 	ldw x,(BLOCKS,sp)
      00282B 5A               [ 2] 3118 	decw x 
      00282C 1F 05            [ 2] 3119 	ldw (BLOCKS,sp),x 
      00282E 26 F0            [ 1] 3120 	jrne 3$ 
                                   3121 ; write XX and size at addr 
      002830 1E 01            [ 2] 3122 	ldw x,(ADDR,sp)
      002832 CF 00 19         [ 2] 3123 	ldw ptr16,x 
      002835 A6 58            [ 1] 3124 	ld a,#'X 
      002837 5F               [ 1] 3125 	clrw x 
      002838 CD 07 8B         [ 4] 3126 	call write_byte 
      00283B CD 07 8B         [ 4] 3127 	call write_byte 
      00283E 7B 03            [ 1] 3128 	ld a,(PRG_SIZE,sp)
      002840 CD 07 8B         [ 4] 3129 	call write_byte 
      002843 7B 04            [ 1] 3130 	ld a,(PRG_SIZE+1,sp)
      002845 CD 07 8B         [ 4] 3131 	call write_byte 
      002848                       3132 	_drop VSIZE 
      002848 5B 06            [ 2]    1     addw sp,#VSIZE 
      00284A                       3133 9$:	
      00284A 81               [ 4] 3134 	ret 
                                   3135 
                                   3136 ;-----------------------------------
                                   3137 ; BASIC: ERASE \E | \F || address
                                   3138 ; erase all block in range from 
                                   3139 ;  'app_space' to FLASH end (0x27fff)
                                   3140 ;  or all EEPROM 
                                   3141 ; that contains a non zero byte. 
                                   3142 ; if the argument is an address  
                                   3143 ; mark the program at this address 
                                   3144 ; as erased. Erase the blocks 
                                   3145 ; replace signature by 'XX' and 
                                   3146 ; keep size field.  
                                   3147 ;-----------------------------------
                           000001  3148 	LIMIT=1 
                           000003  3149 	VSIZE = 3 
      00284B                       3150 cmd_erase:
      00284B 72 01 00 22 05   [ 2] 3151 	btjf flags,#FRUN,eras0
      002850 A6 07            [ 1] 3152 	ld a,#ERR_CMD_ONLY
      002852 CC 16 A7         [ 2] 3153 	jp tb_error 
      002855                       3154 eras0:	
      002855 72 5F 00 18      [ 1] 3155 	clr farptr 
      002859 CD 18 0C         [ 4] 3156 	call next_token
      00285C A1 03            [ 1] 3157 	cp a,#TK_LABEL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00285E 27 96            [ 1] 3158 	jreq erase_program  
      002860                       3159 	_vars VSIZE 
      002860 52 03            [ 2]    1     sub sp,#VSIZE 
      002862 A1 04            [ 1] 3160 	cp a,#TK_CHAR 
      002864 27 03            [ 1] 3161 	jreq 0$ 
      002866 CC 16 A5         [ 2] 3162 	jp syntax_error
      002869 CD 18 4E         [ 4] 3163 0$: call get_char 
      00286C A4 DF            [ 1] 3164 	and a,#0XDF 
      00286E A1 45            [ 1] 3165 	cp a,#'E
      002870 26 0C            [ 1] 3166 	jrne 1$
      002872 AE 40 00         [ 2] 3167 	ldw x,#EEPROM_BASE 
      002875 CF 00 19         [ 2] 3168 	ldw farptr+1,x 
      002878 AE 47 FF         [ 2] 3169 	ldw x,#EEPROM_END
      00287B 4F               [ 1] 3170 	clr a 
      00287C 20 15            [ 2] 3171 	jra 3$ 
      00287E A1 46            [ 1] 3172 1$: cp a,#'F 
      002880 27 06            [ 1] 3173 	jreq 2$
      002882 AE 15 AD         [ 2] 3174 	ldw x,#err_bad_value
      002885 CC 16 A7         [ 2] 3175 	jp tb_error
      002888                       3176 2$:
      002888 AE 39 00         [ 2] 3177 	ldw x,#app_space  
      00288B CF 00 19         [ 2] 3178 	ldw farptr+1,x 
      00288E A6 02            [ 1] 3179 	ld a,#(FLASH_END>>16)&0XFF 
      002890 AE 7F FF         [ 2] 3180 	ldw x,#FLASH_END&0xffff
      002893                       3181 3$:
      002893 6B 01            [ 1] 3182 	ld (LIMIT,sp),a 
      002895 1F 02            [ 2] 3183 	ldw (LIMIT+1,sp),x 
                                   3184 ; operation done from RAM
                                   3185 ; copy code to RAM in tib   
      002897 CD 06 E7         [ 4] 3186 	call move_erase_to_ram
      00289A                       3187 4$:	 
      00289A CD 08 6E         [ 4] 3188     call scan_block 
      00289D 27 08            [ 1] 3189 	jreq 5$  ; block already erased 
      00289F A6 45            [ 1] 3190     ld a,#'E 
      0028A1 CD 08 FF         [ 4] 3191     call putc 
      0028A4 CD 07 65         [ 4] 3192 	call block_erase   
                                   3193 ; this block is clean, next  
      0028A7 AE 00 80         [ 2] 3194 5$:	ldw x,#BLOCK_SIZE
      0028AA CD 08 60         [ 4] 3195 	call incr_farptr
                                   3196 ; check limit, 24 bit substraction  	
      0028AD 7B 01            [ 1] 3197 	ld a,(LIMIT,sp)
      0028AF 1E 02            [ 2] 3198 	ldw x,(LIMIT+1,sp)
      0028B1 72 B0 00 19      [ 2] 3199 	subw x,farptr+1
      0028B5 C2 00 18         [ 1] 3200 	sbc a,farptr 
      0028B8 22 E0            [ 1] 3201 	jrugt 4$ 
      0028BA CD 14 B1         [ 4] 3202 9$: call clear_basic
      0028BD 1E 02            [ 2] 3203 	ldw x,(LIMIT+1,sp)
      0028BF A3 47 FF         [ 2] 3204 	cpw x,#EEPROM_END
      0028C2 26 03            [ 1] 3205 	jrne 10$
      0028C4 CD 1D 42         [ 4] 3206 	call func_eefree 
      0028C7                       3207 10$:
      0028C7                       3208 	_drop VSIZE 
      0028C7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0028C9 81               [ 4] 3209 	ret 
                                   3210 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3211 
                                   3212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3213 ;  check for application signature 
                                   3214 ; input:
                                   3215 ;	x       address to check 
                                   3216 ; output:
                                   3217 ;   Z      1  signature present 
                                   3218 ;          0 not app signature  
                                   3219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028CA                       3220 qsign: 
      0028CA 89               [ 2] 3221 	pushw x 
                                   3222 ; align to block 
      0028CB 9F               [ 1] 3223 	ld a,xl 
      0028CC A4 80            [ 1] 3224 	and a,#BLOCK_SIZE 
      0028CE 97               [ 1] 3225 	ld xl,a 
      0028CF FE               [ 2] 3226 	ldw x,(x)
      0028D0 C3 29 E2         [ 2] 3227 	cpw x,SIGNATURE ; "TB" 
      0028D3 85               [ 2] 3228 	popw x 
      0028D4 81               [ 4] 3229 	ret 
                                   3230 
                                   3231 ;--------------------------------------
                                   3232 ;  fill write buffer 
                                   3233 ;  input:
                                   3234 ;    y  point to output buffer 
                                   3235 ;    x  point to source 
                                   3236 ;    a  bytes to write in buffer 
                                   3237 ;  output:
                                   3238 ;    y   += A 
                                   3239 ;    X   += A 
                                   3240 ;    A   0 
                                   3241 ;---------------------------------------
      0028D5                       3242 fill_write_buffer:
      0028D5 88               [ 1] 3243 	push a 
      0028D6 4D               [ 1] 3244 	tnz a 
      0028D7 27 0A            [ 1] 3245 	jreq 9$ 
      0028D9 F6               [ 1] 3246 1$: ld a,(x)
      0028DA 5C               [ 1] 3247 	incw x 
      0028DB 90 F7            [ 1] 3248 	ld (y),a 
      0028DD 90 5C            [ 1] 3249 	incw y 
      0028DF 0A 01            [ 1] 3250 	dec (1,sp) 
      0028E1 26 F6            [ 1] 3251 	jrne 1$ 
      0028E3 84               [ 1] 3252 9$:	pop a 
      0028E4 81               [ 4] 3253     ret 	
                                   3254 
                                   3255 ;--------------------------------------
                                   3256 ;  fill pad buffer with zero 
                                   3257 ;  input:
                                   3258 ;	none 
                                   3259 ;  output:
                                   3260 ;    y     buffer address  
                                   3261 ;--------------------------------------
      0028E5                       3262 clear_block_buffer:
      0028E5 88               [ 1] 3263 	push a 
      0028E6 90 AE 16 B8      [ 2] 3264 	ldw y,#block_buffer 
      0028EA 90 89            [ 2] 3265 	pushw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      0028EC A6 80            [ 1] 3266 	ld a,#BLOCK_SIZE   
      0028EE 90 7F            [ 1] 3267 1$:	clr (y)
      0028F0 90 5C            [ 1] 3268 	incw y
      0028F2 4A               [ 1] 3269 	dec a  
      0028F3 26 F9            [ 1] 3270 	jrne 1$ 	
      0028F5 90 85            [ 2] 3271 9$: popw y 
      0028F7 84               [ 1] 3272 	pop a 			
      0028F8 81               [ 4] 3273 	ret 
                                   3274 
                                   3275 
                                   3276 ;----------------------------------
                                   3277 ;  search  a free space space that 
                                   3278 ;  fit program size 
                                   3279 ; input:
                                   3280 ;    X    program size 
                                   3281 ; output:
                                   3282 ;    X    address | 0 
                                   3283 ;------------------------------------
                           000001  3284 	PG_SIZE=1 
                           000002  3285 	VSIZE=2 
      0028F9                       3286 search_fit:
      0028F9 89               [ 2] 3287 	pushw x; PG_SIZE 
      0028FA AE 39 00         [ 2] 3288 	ldw x,#app_space 
      0028FD CD 29 E6         [ 4] 3289 1$:	call is_erased 
      002900 27 0D            [ 1] 3290 	jreq 4$
      002902 F6               [ 1] 3291 	ld a,(x)
      002903 EA 01            [ 1] 3292 	or a,(1,x)
      002905 27 23            [ 1] 3293 	jreq 9$ ; free space 
      002907 CD 29 F1         [ 4] 3294 2$:	call skip_to_next
      00290A 5D               [ 2] 3295 	tnzw x 
      00290B 26 F0            [ 1] 3296 	jrne 1$
      00290D 20 1B            [ 2] 3297 	jra 9$
      00290F                       3298 4$: ; erased program 
                                   3299     ; does it fit? 
      00290F CF 00 0D         [ 2] 3300 	ldw acc16,x 
      002912 EE 02            [ 2] 3301 	ldw x,(2,x) ; size erased program
                                   3302 ; top multiple of BLOCK_SIZE 
      002914 1C 00 04         [ 2] 3303 	addw x,#4 
      002917 1C 00 7F         [ 2] 3304 	addw x,#BLOCK_SIZE-1 
      00291A 9F               [ 1] 3305 	ld a,xl 
      00291B A4 80            [ 1] 3306 	and a,#BLOCK_SIZE 
      00291D 97               [ 1] 3307 	ld xl,a  
      00291E 13 01            [ 2] 3308 	cpw x,(1,sp) ; size program to save 
      002920 24 05            [ 1] 3309 	jruge 8$   ; fit 
      002922 CE 00 0D         [ 2] 3310 	ldw x,acc16 
      002925 20 E0            [ 2] 3311 	jra 2$ 
      002927 CE 00 0D         [ 2] 3312 8$: ldw x,acc16 ; fit in this one 	
      00292A                       3313 9$:	_drop VSIZE 
      00292A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00292C 81               [ 4] 3314 	ret  
                                   3315 
                                   3316 ;-------------------------
                                   3317 ; erase header and 
                                   3318 ; size fields 
                                   3319 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3320 ;    X    program address 
                                   3321 ; output:
                                   3322 ;    X    unchanged 
                                   3323 ;-------------------------
                           000001  3324 	COUNT=1 
      00292D                       3325 erase_header:
      00292D 89               [ 2] 3326 	pushw x 
      00292E 4B 04            [ 1] 3327 	push #4 ; COUNT 
      002930 72 5F 00 18      [ 1] 3328 	clr farptr 
      002934 CF 00 19         [ 2] 3329 	ldw ptr16,x 
      002937 4F               [ 1] 3330 	clr a 
      002938 5F               [ 1] 3331 	clrw x 
      002939 CD 07 8B         [ 4] 3332 1$:	call write_byte 
      00293C 0A 01            [ 1] 3333 	dec (COUNT,sp)
      00293E 26 F9            [ 1] 3334 	jrne 1$
      002940                       3335 	_drop 1 
      002940 5B 01            [ 2]    1     addw sp,#1 
      002942 85               [ 2] 3336 	popw x 
      002943 CF 00 19         [ 2] 3337 	ldw ptr16,x 
      002946 81               [ 4] 3338 	ret 
                                   3339 
                                   3340 ;---------------------------------------
                                   3341 ; BASIC: SAVE
                                   3342 ; write application from RAM to FLASH
                                   3343 ; at UFLASH address
                                   3344 ;--------------------------------------
                           000001  3345 	XTEMP=1
                           000003  3346 	COUNT=3  ; last count bytes written 
                           000004  3347 	CNT_LO=4 ; count low byte 
                           000005  3348 	TOWRITE=5 ; how bytes left to write  
                           000006  3349 	VSIZE=6 
      002947                       3350 cmd_save:
      002947 89               [ 2] 3351 	pushw x 
      002948 90 89            [ 2] 3352 	pushw y 
      00294A                       3353 	_vars VSIZE
      00294A 52 06            [ 2]    1     sub sp,#VSIZE 
      00294C CD 1E 5C         [ 4] 3354 	call prog_size 
      00294F 26 03            [ 1] 3355 	jrne 0$ 
      002951 CC 29 DC         [ 2] 3356 	jp 9$ ; no program to save 
      002954 1F 05            [ 2] 3357 0$:	ldw (TOWRITE,sp),x ; program size
      002956 72 5F 00 18      [ 1] 3358 	clr farptr 
      00295A CD 28 F9         [ 4] 3359 	call search_fit
      00295D CF 00 19         [ 2] 3360 	ldw ptr16,x 
      002960 AE FF FF         [ 2] 3361 	ldw x,#0xFFFF
      002963 72 B0 00 19      [ 2] 3362 	subw x,ptr16 ; free flash 
      002967 1D 00 04         [ 2] 3363 	subw x,#4 ; signature and size field 
      00296A 13 05            [ 2] 3364 	cpw x,(TOWRITE,sp)
      00296C 24 05            [ 1] 3365 	jruge 1$
      00296E A6 01            [ 1] 3366 	ld a,#ERR_MEM_FULL
      002970 CC 16 A7         [ 2] 3367 	jp tb_error 
      002973                       3368 1$: ; check if header bytes are zero's 
      002973 CE 00 19         [ 2] 3369 	ldw x,ptr16 
      002976 F6               [ 1] 3370 	ld a,(x)
      002977 EA 01            [ 1] 3371 	or a,(1,x)
      002979 EA 02            [ 1] 3372 	or a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00297B EA 03            [ 1] 3373 	or a,(3,x)
      00297D 27 03            [ 1] 3374 	jreq 2$
      00297F CD 29 2D         [ 4] 3375 	call erase_header ; preserve X and farptr 
      002982                       3376 2$: 
                                   3377 ; block programming flash
                                   3378 ; must be done from RAM
                                   3379 ; moved in tib  
      002982 CD 07 27         [ 4] 3380 	call move_prg_to_ram
                                   3381 ; initialize written bytes count  
      002985 0F 03            [ 1] 3382 	clr (COUNT,sp)
                                   3383 ; first bock 
                                   3384 ; containt signature 2 bytes 
                                   3385 ; and size 	2 bytes 
                                   3386 ; use Y as pointer to block_buffer
      002987 CD 28 E5         [ 4] 3387 	call clear_block_buffer ; -- y=*block_buffer	
                                   3388 ; write signature
      00298A CE 29 E2         [ 2] 3389 	ldw x,SIGNATURE ; "TB" 
      00298D 90 FF            [ 2] 3390 	ldw (y),x 
      00298F 72 A9 00 02      [ 2] 3391 	addw y,#2
      002993 1E 05            [ 2] 3392 	ldw x,(TOWRITE,sp)
      002995 90 FF            [ 2] 3393 	ldw (y),x
      002997 72 A9 00 02      [ 2] 3394 	addw y,#2   
      00299B A6 7C            [ 1] 3395 	ld a,#(BLOCK_SIZE-4)
      00299D A3 00 7C         [ 2] 3396 	cpw x,#(BLOCK_SIZE-4) 
      0029A0 22 01            [ 1] 3397 	jrugt 3$
      0029A2 9F               [ 1] 3398 	ld a,xl 
      0029A3 6B 04            [ 1] 3399 3$:	ld (CNT_LO,sp),a   
      0029A5 CE 00 1B         [ 2] 3400 	ldw x,txtbgn 
      0029A8 1F 01            [ 2] 3401 	ldw (XTEMP,sp),x 
      0029AA                       3402 32$: 
      0029AA 1E 01            [ 2] 3403 	ldw x,(XTEMP,sp)
      0029AC 7B 04            [ 1] 3404 	ld a,(CNT_LO,sp)
      0029AE CD 28 D5         [ 4] 3405 	call fill_write_buffer 
      0029B1 1F 01            [ 2] 3406 	ldw (XTEMP,sp),x 
      0029B3 AE 16 B8         [ 2] 3407 	ldw x,#block_buffer
      0029B6 CD 07 41         [ 4] 3408 	call write_buffer
      0029B9 AE 00 80         [ 2] 3409 	ldw x,#BLOCK_SIZE 
      0029BC CD 08 60         [ 4] 3410 	call incr_farptr  
                                   3411 ; following blocks 
      0029BF 1E 01            [ 2] 3412 	ldw x,(XTEMP,sp)
      0029C1 C3 00 1D         [ 2] 3413 	cpw x,txtend 
      0029C4 24 16            [ 1] 3414 	jruge 9$ 
      0029C6 1E 05            [ 2] 3415 	ldw x,(TOWRITE,sp)
      0029C8 72 F0 03         [ 2] 3416 	subw x,(COUNT,sp)
      0029CB 1F 05            [ 2] 3417 	ldw (TOWRITE,sp),x 
      0029CD A6 80            [ 1] 3418 	ld a,#BLOCK_SIZE 
      0029CF A3 00 80         [ 2] 3419 	cpw x,#BLOCK_SIZE 
      0029D2 24 01            [ 1] 3420 	jruge 4$ 
      0029D4 9F               [ 1] 3421 	ld a,xl 
      0029D5 6B 04            [ 1] 3422 4$:	ld (CNT_LO,sp),a 
      0029D7 CD 28 E5         [ 4] 3423 	call clear_block_buffer 
      0029DA 20 CE            [ 2] 3424 	jra 32$ 
      0029DC                       3425 9$:	_drop VSIZE 
      0029DC 5B 06            [ 2]    1     addw sp,#VSIZE 
      0029DE 90 85            [ 2] 3426     popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0029E0 85               [ 2] 3427 	popw x 
      0029E1 81               [ 4] 3428 	ret 
                                   3429 
      0029E2 54 42                 3430 SIGNATURE: .ascii "TB"
      0029E4 58 58                 3431 ERASED: .ascii "XX" 
                                   3432 
                                   3433 ;---------------------
                                   3434 ; check if there is 
                                   3435 ; an erased program 
                                   3436 ; at this address 
                                   3437 ; input:
                                   3438 ;    X    address 
                                   3439 ; output:
                                   3440 ;    Z    Set=erased program 
                                   3441 ;--------------------
      0029E6                       3442 is_erased:
      0029E6 89               [ 2] 3443 	pushw x 
                                   3444 ; align to BLOCK 
      0029E7 9F               [ 1] 3445 	ld a,xl 
      0029E8 A4 80            [ 1] 3446 	and a,#BLOCK_SIZE 
      0029EA 97               [ 1] 3447 	ld xl,a 
      0029EB FE               [ 2] 3448 	ldw x,(x)
      0029EC C3 29 E4         [ 2] 3449 	cpw x,ERASED 
      0029EF 85               [ 2] 3450 	popw x 
      0029F0 81               [ 4] 3451 	ret 
                                   3452 
                                   3453 ;----------------------------
                                   3454 ;  skip to next program
                                   3455 ;  block 
                                   3456 ; input:
                                   3457 ;    X   actual program addr
                                   3458 ; output:
                                   3459 ;    X   next block 
                                   3460 ;        after program 
                                   3461 ;----------------------------
      0029F1                       3462 skip_to_next:
                                   3463 ; align to block 
      0029F1 9F               [ 1] 3464 	ld a,xl 
      0029F2 A4 80            [ 1] 3465 	and a,#BLOCK_SIZE 
      0029F4 97               [ 1] 3466 	ld xl,a 
      0029F5 CF 00 0D         [ 2] 3467 	ldw acc16,x 
      0029F8 EE 02            [ 2] 3468 	ldw x,(2,x)
      0029FA 72 BB 00 0D      [ 2] 3469 	addw x,acc16 ; blk_addr+prg_size 
      0029FE 1C 00 04         [ 2] 3470 	addw x,#4 ; +header fields 
                                   3471 ; align to next block 
      002A01 1C 00 7F         [ 2] 3472 	addw x,#BLOCK_SIZE-1 
      002A04 9F               [ 1] 3473 	ld a,xl 
      002A05 A4 80            [ 1] 3474 	and a,#0x80 
      002A07 97               [ 1] 3475 	ld xl,a  
      002A08 81               [ 4] 3476 	ret 
                                   3477 
                                   3478 
                                   3479 ;---------------------
                                   3480 ; BASIC: DIR 
                                   3481 ; list programs saved 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3482 ; in flash 
                                   3483 ;--------------------
                           000001  3484 	XTEMP=1 
      002A09                       3485 cmd_dir:
      002A09 AE 39 00         [ 2] 3486 	ldw x,#app_space 
      002A0C 89               [ 2] 3487 	pushw x 
      002A0D                       3488 1$: 
      002A0D CD 28 CA         [ 4] 3489 	call qsign 
      002A10 26 3B            [ 1] 3490 	jrne 4$
      002A12 1C 00 04         [ 2] 3491 	addw x,#4
      002A15 35 10 00 0A      [ 1] 3492 	mov base,#16
      002A19 CD 18 54         [ 4] 3493 	call prt_i16
      002A1C A6 20            [ 1] 3494 	ld a,#SPACE 
      002A1E CD 08 FF         [ 4] 3495 	call putc 
      002A21 1E 01            [ 2] 3496 	ldw x,(1,sp)
      002A23 EE 02            [ 2] 3497 	ldw x,(2,x)
      002A25 35 0A 00 0A      [ 1] 3498 	mov base,#10  
      002A29 CD 18 54         [ 4] 3499 	call prt_i16 
      002A2C AE 1E C6         [ 2] 3500 	ldw x,#STR_BYTES
      002A2F CD 09 5C         [ 4] 3501 	call puts
      002A32 A6 2C            [ 1] 3502 	ld a,#', 
      002A34 CD 08 FF         [ 4] 3503 	call putc
      002A37 1E 01            [ 2] 3504 	ldw x,(1,sp)
      002A39 1C 00 08         [ 2] 3505 	addw x,#8
      002A3C CD 09 5C         [ 4] 3506 	call puts 
      002A3F A6 0D            [ 1] 3507 	ld a,#CR 
      002A41 CD 08 FF         [ 4] 3508 	call putc
      002A44 1E 01            [ 2] 3509 	ldw x,(1,sp)
      002A46 CD 29 F1         [ 4] 3510 3$:	call skip_to_next
      002A49 1F 01            [ 2] 3511 	ldw (1,sp),x 
      002A4B 20 C0            [ 2] 3512 	jra 1$
      002A4D                       3513 4$: ; check if it is an erased program 
      002A4D CD 29 E6         [ 4] 3514 	call is_erased 
      002A50 27 F4            [ 1] 3515 	jreq 3$ 
      002A52                       3516 8$: ; done 
      002A52                       3517 	_drop 2 
      002A52 5B 02            [ 2]    1     addw sp,#2 
      002A54 81               [ 4] 3518 	ret 
                                   3519 
                                   3520 ;---------------------
                                   3521 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3522 ; write 1 or more byte to FLASH or EEPROM
                                   3523 ; starting at address  
                                   3524 ; input:
                                   3525 ;   expr1  	is address 
                                   3526 ;   expr2,...,exprn   are bytes to write
                                   3527 ; output:
                                   3528 ;   none 
                                   3529 ;---------------------
      002A55                       3530 write:
      002A55 CD 1B 16         [ 4] 3531 	call expression
      002A58 A1 84            [ 1] 3532 	cp a,#TK_INTGR 
      002A5A 27 03            [ 1] 3533 	jreq 0$
      002A5C CC 16 A5         [ 2] 3534 	jp syntax_error
      002A5F                       3535 0$: _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002A5F 90 F6            [ 1]    1     ld a,(y)
      002A61 93               [ 1]    2     ldw x,y 
      002A62 EE 01            [ 2]    3     ldw x,(1,x)
      002A64 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A68 C7 00 18         [ 1] 3536 	ld farptr,a 
      002A6B CF 00 19         [ 2] 3537 	ldw ptr16,x 
      002A6E                       3538 1$:	
      002A6E CD 18 0C         [ 4] 3539 	call next_token 
      002A71 A1 08            [ 1] 3540 	cp a,#TK_COMMA 
      002A73 27 02            [ 1] 3541 	jreq 2$ 
      002A75 20 46            [ 2] 3542 	jra 9$ ; no more data 
      002A77 CD 18 0C         [ 4] 3543 2$:	call next_token 
      002A7A A1 04            [ 1] 3544 	cp a,#TK_CHAR 
      002A7C 27 23            [ 1] 3545 	jreq 4$ 
      002A7E A1 02            [ 1] 3546 	cp a,#TK_QSTR
      002A80 27 2A            [ 1] 3547 	jreq 6$
      002A82                       3548 	_unget_token 
      002A82 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002A87 CD 1B 16         [ 4] 3549 	call expression
      002A8A A1 84            [ 1] 3550 	cp a,#TK_INTGR
      002A8C 27 03            [ 1] 3551 	jreq 3$
      002A8E CC 16 A5         [ 2] 3552 	jp syntax_error
      002A91                       3553 3$:	_xpop 
      002A91 90 F6            [ 1]    1     ld a,(y)
      002A93 93               [ 1]    2     ldw x,y 
      002A94 EE 01            [ 2]    3     ldw x,(1,x)
      002A96 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A9A 9F               [ 1] 3554 	ld a,xl 
      002A9B 5F               [ 1] 3555 	clrw x 
      002A9C CD 07 8B         [ 4] 3556 	call write_byte
      002A9F 20 CD            [ 2] 3557 	jra 1$ 
      002AA1                       3558 4$: ; write character 
      002AA1 F6               [ 1] 3559 	ld a,(x)
      002AA2 72 5C 00 01      [ 1] 3560 	inc in 
      002AA6 5F               [ 1] 3561 	clrw x 
      002AA7 CD 07 8B         [ 4] 3562 	call write_byte 
      002AAA 20 C2            [ 2] 3563 	jra 1$ 
      002AAC                       3564 6$: ; write string 
      002AAC 89               [ 2] 3565 	pushw x 
      002AAD F6               [ 1] 3566 	ld a,(x)
      002AAE 72 5C 00 01      [ 1] 3567 	inc in 
      002AB2 5F               [ 1] 3568 	clrw x 
      002AB3 CD 07 8B         [ 4] 3569 	call write_byte 
      002AB6 85               [ 2] 3570 	popw x 
      002AB7 F6               [ 1] 3571 	ld a,(x)
      002AB8 27 B4            [ 1] 3572 	jreq 1$
      002ABA 5C               [ 1] 3573 	incw x 
      002ABB 20 EF            [ 2] 3574 	jra 6$ 	
      002ABD                       3575 9$:
      002ABD 81               [ 4] 3576 	ret 
                                   3577 
                                   3578 
                                   3579 ;---------------------
                                   3580 ;BASIC: CHAR(expr)
                                   3581 ; évaluate expression 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3582 ; and take the 7 least 
                                   3583 ; bits as ASCII character
                                   3584 ; output: 
                                   3585 ; 	A char 
                                   3586 ;---------------------
      002ABE                       3587 func_char:
      002ABE CD 19 CF         [ 4] 3588 	call func_args 
      002AC1 A1 01            [ 1] 3589 	cp a,#1
      002AC3 27 03            [ 1] 3590 	jreq 1$
      002AC5 CC 16 A5         [ 2] 3591 	jp syntax_error
      002AC8                       3592 1$:	_xpop
      002AC8 90 F6            [ 1]    1     ld a,(y)
      002ACA 93               [ 1]    2     ldw x,y 
      002ACB EE 01            [ 2]    3     ldw x,(1,x)
      002ACD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AD1 9F               [ 1] 3593 	ld a,xl
      002AD2 A4 7F            [ 1] 3594 	and a,#0x7f 
      002AD4 81               [ 4] 3595 	ret
                                   3596 
                                   3597 ;---------------------
                                   3598 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3599 ; extract first character 
                                   3600 ; of string argument 
                                   3601 ; output:
                                   3602 ;    A:X    int24 
                                   3603 ;---------------------
      002AD5                       3604 ascii:
      002AD5 A6 06            [ 1] 3605 	ld a,#TK_LPAREN
      002AD7 CD 19 C2         [ 4] 3606 	call expect 
      002ADA CD 18 0C         [ 4] 3607 	call next_token 
      002ADD A1 02            [ 1] 3608 	cp a,#TK_QSTR 
      002ADF 27 0E            [ 1] 3609 	jreq 1$
      002AE1 A1 04            [ 1] 3610 	cp a,#TK_CHAR 
      002AE3 27 12            [ 1] 3611 	jreq 2$ 
      002AE5 A1 82            [ 1] 3612 	cp a,#TK_CFUNC 
      002AE7 27 03            [ 1] 3613 	jreq 0$
      002AE9 CC 16 A5         [ 2] 3614 	jp syntax_error
      002AEC                       3615 0$: ; cfunc 
      002AEC FD               [ 4] 3616 	call (x)
      002AED 20 0B            [ 2] 3617 	jra 3$
      002AEF                       3618 1$: ; quoted string 
      002AEF F6               [ 1] 3619 	ld a,(x)
      002AF0 88               [ 1] 3620 	push a  
      002AF1 CD 18 25         [ 4] 3621 	call skip_string
      002AF4 84               [ 1] 3622 	pop a  	
      002AF5 20 03            [ 2] 3623 	jra 3$ 
      002AF7                       3624 2$: ; character 
      002AF7 CD 18 4E         [ 4] 3625 	call get_char 
      002AFA 5F               [ 1] 3626 3$:	clrw x 
      002AFB 02               [ 1] 3627 	rlwa x   
      002AFC                       3628 4$:	_xpush  
      002AFC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002B00 90 F7            [ 1]    2     ld (y),a 
      002B02 90 EF 01         [ 2]    3     ldw (1,y),x 
      002B05 A6 07            [ 1] 3629 	ld a,#TK_RPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002B07 CD 19 C2         [ 4] 3630 	call expect
      002B0A                       3631 9$:	
      002B0A                       3632 	_xpop  
      002B0A 90 F6            [ 1]    1     ld a,(y)
      002B0C 93               [ 1]    2     ldw x,y 
      002B0D EE 01            [ 2]    3     ldw x,(1,x)
      002B0F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B13 81               [ 4] 3633 	ret 
                                   3634 
                                   3635 ;---------------------
                                   3636 ;BASIC: KEY
                                   3637 ; wait for a character 
                                   3638 ; received from STDIN 
                                   3639 ; input:
                                   3640 ;	none 
                                   3641 ; output:
                                   3642 ;	a	 character 
                                   3643 ;---------------------
      002B14                       3644 key:
      002B14 CD 09 0F         [ 4] 3645 	call getc 
      002B17 81               [ 4] 3646 	ret
                                   3647 
                                   3648 ;----------------------
                                   3649 ; BASIC: QKEY
                                   3650 ; Return true if there 
                                   3651 ; is a character in 
                                   3652 ; waiting in STDIN 
                                   3653 ; input:
                                   3654 ;  none 
                                   3655 ; output:
                                   3656 ;   A     0|-1
                                   3657 ;-----------------------
      002B18                       3658 qkey:: 
      002B18 5F               [ 1] 3659 	clrw x 
      002B19 C6 00 2E         [ 1] 3660 	ld a,rx1_head
      002B1C C0 00 2F         [ 1] 3661 	sub a,rx1_tail 
      002B1F 27 03            [ 1] 3662 	jreq 9$ 
      002B21 53               [ 2] 3663 	cplw x
      002B22 A6 FF            [ 1] 3664 	ld a,#255    
      002B24                       3665 9$: 
      002B24 81               [ 4] 3666 	ret 
                                   3667 
                                   3668 ;---------------------
                                   3669 ; BASIC: GPIO(port,reg)
                                   3670 ; return gpio register address 
                                   3671 ; expr {PORTA..PORTI}
                                   3672 ; input:
                                   3673 ;   none 
                                   3674 ; output:
                                   3675 ;   A:X 	gpio register address
                                   3676 ;----------------------------
                                   3677 ;	N=PORT
                                   3678 ;	T=REG 
      002B25                       3679 gpio:
      002B25 CD 19 CF         [ 4] 3680 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002B28 A1 02            [ 1] 3681 	cp a,#2
      002B2A 27 03            [ 1] 3682 	jreq 1$
      002B2C CC 16 A5         [ 2] 3683 	jp syntax_error  
      002B2F                       3684 1$:	_at_next 
      002B2F 90 E6 03         [ 1]    1     ld a,(3,y)
      002B32 93               [ 1]    2     ldw x,y 
      002B33 EE 04            [ 2]    3     ldw x,(4,x)
      002B35 A3 50 00         [ 2] 3685 	cpw x,#PA_BASE 
      002B38 2B 16            [ 1] 3686 	jrmi bad_port
      002B3A A3 50 29         [ 2] 3687 	cpw x,#PI_BASE+1 
      002B3D 2A 11            [ 1] 3688 	jrpl bad_port
      002B3F 89               [ 2] 3689 	pushw x 
      002B40                       3690 	_xpop
      002B40 90 F6            [ 1]    1     ld a,(y)
      002B42 93               [ 1]    2     ldw x,y 
      002B43 EE 01            [ 2]    3     ldw x,(1,x)
      002B45 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B49 72 FB 01         [ 2] 3691 	addw x,(1,sp)
      002B4C                       3692 	_drop 2 
      002B4C 5B 02            [ 2]    1     addw sp,#2 
      002B4E 4F               [ 1] 3693 	clr a 
      002B4F 81               [ 4] 3694 	ret
      002B50                       3695 bad_port:
      002B50 A6 0A            [ 1] 3696 	ld a,#ERR_BAD_VALUE
      002B52 CC 16 A7         [ 2] 3697 	jp tb_error
                                   3698 
                                   3699 
                                   3700 ;-------------------------
                                   3701 ; BASIC: UFLASH 
                                   3702 ; return free flash address
                                   3703 ; scan all block starting at 
                                   3704 ; app_space and return 
                                   3705 ; address of first free block 
                                   3706 ; below extended memory.  
                                   3707 ; return 0 if no free block 
                                   3708 ; input:
                                   3709 ;  none 
                                   3710 ; output:
                                   3711 ;	A:X		FLASH free address
                                   3712 ;---------------------------
      002B55                       3713 uflash:
      002B55 72 5F 00 18      [ 1] 3714 	clr farptr 
      002B59 AE 39 00         [ 2] 3715 	ldw x,#app_space 
      002B5C 89               [ 2] 3716 	pushw x 
      002B5D CF 00 19         [ 2] 3717 1$:	ldw ptr16,x 
      002B60 CD 08 6E         [ 4] 3718 	call scan_block 
      002B63 27 0F            [ 1] 3719 	jreq 8$
      002B65 1E 01            [ 2] 3720 	ldw x,(1,sp)
      002B67 1C 00 80         [ 2] 3721 	addw x,#BLOCK_SIZE 
      002B6A 27 04            [ 1] 3722 	jreq 7$ 
      002B6C 1F 01            [ 2] 3723 	ldw (1,sp),x 
      002B6E 20 ED            [ 2] 3724 	jra 1$ 
      002B70                       3725 7$: ; no free block 
      002B70 0F 01            [ 1] 3726 	clr (1,sp) 
      002B72 0F 02            [ 1] 3727 	clr (2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002B74 85               [ 2] 3728 8$: popw x 
      002B75 4F               [ 1] 3729 	clr a 
      002B76 81               [ 4] 3730 	ret 
                                   3731 
                                   3732 
                                   3733 ;---------------------
                                   3734 ; BASIC: USR(addr,arg)
                                   3735 ; execute a function written 
                                   3736 ; in binary code.
                                   3737 ; input:
                                   3738 ;   addr	routine address 
                                   3739 ;   arg 	is an argument
                                   3740 ;           it can be ignore 
                                   3741 ;           by cally. 
                                   3742 ; output:
                                   3743 ;   xstack 	value returned by cally  
                                   3744 ;---------------------
      002B77                       3745 usr:
      002B77 CD 19 CF         [ 4] 3746 	call func_args 
      002B7A A1 02            [ 1] 3747 	cp a,#2
      002B7C 27 03            [ 1] 3748 	jreq 1$  
      002B7E CC 16 A5         [ 2] 3749 	jp syntax_error 
      002B81                       3750 1$: 
      002B81                       3751 	_at_next ; A:X addr 
      002B81 90 E6 03         [ 1]    1     ld a,(3,y)
      002B84 93               [ 1]    2     ldw x,y 
      002B85 EE 04            [ 2]    3     ldw x,(4,x)
      002B87 CF 00 19         [ 2] 3752 	ldw ptr16,X 
      002B8A                       3753 	_xpop  ; arg 
      002B8A 90 F6            [ 1]    1     ld a,(y)
      002B8C 93               [ 1]    2     ldw x,y 
      002B8D EE 01            [ 2]    3     ldw x,(1,x)
      002B8F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B93                       3754 	_store_top ; overwrite addr 
      002B93 90 F7            [ 1]    1     ld (y),a 
      002B95 90 EF 01         [ 2]    2     ldw (1,y),x     
      002B98 72 CD 00 19      [ 6] 3755     call [ptr16]
      002B9C 81               [ 4] 3756 	ret 
                                   3757 
                                   3758 
                                   3759 ;------------------------------
                                   3760 ; BASIC: BYE 
                                   3761 ; halt mcu in its lowest power mode 
                                   3762 ; wait for reset or external interrupt
                                   3763 ; do a cold start on wakeup.
                                   3764 ;------------------------------
      002B9D                       3765 bye:
      002B9D 72 0D 52 30 FB   [ 2] 3766 	btjf UART1_SR,#UART_SR_TC,.
      002BA2 8E               [10] 3767 	halt
      002BA3 CC 00 B5         [ 2] 3768 	jp cold_start  
                                   3769 
                                   3770 ;----------------------------------
                                   3771 ; BASIC: SLEEP 
                                   3772 ; halt mcu until reset or external
                                   3773 ; interrupt.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3774 ; Resume progam after SLEEP command
                                   3775 ;----------------------------------
      002BA6                       3776 sleep:
      002BA6 72 0D 52 30 FB   [ 2] 3777 	btjf UART1_SR,#UART_SR_TC,.
      002BAB 72 16 00 22      [ 1] 3778 	bset flags,#FSLEEP
      002BAF 8E               [10] 3779 	halt 
      002BB0 81               [ 4] 3780 	ret 
                                   3781 
                                   3782 ;-------------------------------
                                   3783 ; BASIC: PAUSE expr 
                                   3784 ; suspend execution for n msec.
                                   3785 ; input:
                                   3786 ;	none
                                   3787 ; output:
                                   3788 ;	none 
                                   3789 ;------------------------------
      002BB1                       3790 pause:
      002BB1 CD 1B 16         [ 4] 3791 	call expression
      002BB4 A1 84            [ 1] 3792 	cp a,#TK_INTGR
      002BB6 27 03            [ 1] 3793 	jreq 1$ 
      002BB8 CC 16 A5         [ 2] 3794 	jp syntax_error
      002BBB                       3795 1$: _xpop 
      002BBB 90 F6            [ 1]    1     ld a,(y)
      002BBD 93               [ 1]    2     ldw x,y 
      002BBE EE 01            [ 2]    3     ldw x,(1,x)
      002BC0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BC4                       3796 pause02:
      002BC4 CF 00 12         [ 2] 3797 	ldw timer,x 
      002BC7 CE 00 12         [ 2] 3798 1$: ldw x,timer 
      002BCA 5D               [ 2] 3799 	tnzw x 
      002BCB 27 03            [ 1] 3800 	jreq 2$
      002BCD 8F               [10] 3801 	wfi 
      002BCE 26 F7            [ 1] 3802 	jrne 1$
      002BD0                       3803 2$:	
      002BD0 81               [ 4] 3804 	ret 
                                   3805 
                                   3806 ;------------------------------
                                   3807 ; BASIC: AWU expr
                                   3808 ; halt mcu for 'expr' milliseconds
                                   3809 ; use Auto wakeup peripheral
                                   3810 ; all oscillators stopped except LSI
                                   3811 ; range: 1ms - 511ms
                                   3812 ; input:
                                   3813 ;  none
                                   3814 ; output:
                                   3815 ;  none:
                                   3816 ;------------------------------
      002BD1                       3817 awu:
      002BD1 CD 1B 16         [ 4] 3818   call expression
      002BD4 A1 84            [ 1] 3819   cp a,#TK_INTGR
      002BD6 27 03            [ 1] 3820   jreq 1$
      002BD8 CC 16 A5         [ 2] 3821   jp syntax_error
      002BDB                       3822 1$: _xpop 
      002BDB 90 F6            [ 1]    1     ld a,(y)
      002BDD 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002BDE EE 01            [ 2]    3     ldw x,(1,x)
      002BE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BE4                       3823 awu02:
      002BE4 A3 14 00         [ 2] 3824   cpw x,#5120
      002BE7 2B 0C            [ 1] 3825   jrmi 1$ 
      002BE9 35 0F 50 F2      [ 1] 3826   mov AWU_TBR,#15 
      002BED A6 1E            [ 1] 3827   ld a,#30
      002BEF 62               [ 2] 3828   div x,a
      002BF0 A6 10            [ 1] 3829   ld a,#16
      002BF2 62               [ 2] 3830   div x,a 
      002BF3 20 1E            [ 2] 3831   jra 4$
      002BF5                       3832 1$: 
      002BF5 A3 08 00         [ 2] 3833   cpw x,#2048
      002BF8 2B 09            [ 1] 3834   jrmi 2$ 
      002BFA 35 0E 50 F2      [ 1] 3835   mov AWU_TBR,#14
      002BFE A6 50            [ 1] 3836   ld a,#80
      002C00 62               [ 2] 3837   div x,a 
      002C01 20 10            [ 2] 3838   jra 4$   
      002C03                       3839 2$:
      002C03 35 07 50 F2      [ 1] 3840   mov AWU_TBR,#7
      002C07                       3841 3$:  
                                   3842 ; while X > 64  divide by 2 and increment AWU_TBR 
      002C07 A3 00 40         [ 2] 3843   cpw x,#64 
      002C0A 23 07            [ 2] 3844   jrule 4$ 
      002C0C 72 5C 50 F2      [ 1] 3845   inc AWU_TBR 
      002C10 54               [ 2] 3846   srlw x 
      002C11 20 F4            [ 2] 3847   jra 3$ 
      002C13                       3848 4$:
      002C13 9F               [ 1] 3849   ld a, xl
      002C14 4A               [ 1] 3850   dec a 
      002C15 27 01            [ 1] 3851   jreq 5$
      002C17 4A               [ 1] 3852   dec a 	
      002C18                       3853 5$: 
      002C18 A4 3E            [ 1] 3854   and a,#0x3e 
      002C1A C7 50 F1         [ 1] 3855   ld AWU_APR,a 
      002C1D 72 18 50 F0      [ 1] 3856   bset AWU_CSR,#AWU_CSR_AWUEN
      002C21 8E               [10] 3857   halt 
                                   3858 
      002C22 81               [ 4] 3859   ret 
                                   3860 
                                   3861 ;------------------------------
                                   3862 ; BASIC: TICKS
                                   3863 ; return msec ticks counter value 
                                   3864 ; input:
                                   3865 ; 	none 
                                   3866 ; output:
                                   3867 ;	X 		TK_INTGR
                                   3868 ;-------------------------------
      002C23                       3869 get_ticks:
      002C23 C6 00 0F         [ 1] 3870 	ld a,ticks 
      002C26 CE 00 10         [ 2] 3871 	ldw x,ticks+1 
      002C29 81               [ 4] 3872 	ret 
                                   3873 
                                   3874 ;------------------------------
                                   3875 ; BASIC: ABS(expr)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                                   3876 ; return absolute value of expr.
                                   3877 ; input:
                                   3878 ;   none
                                   3879 ; output:
                                   3880 ;   xstack    positive int24 
                                   3881 ;-------------------------------
      002C2A                       3882 abs:
      002C2A CD 19 CF         [ 4] 3883 	call func_args 
      002C2D A1 01            [ 1] 3884 	cp a,#1 
      002C2F 27 03            [ 1] 3885 	jreq 0$ 
      002C31 CC 16 A5         [ 2] 3886 	jp syntax_error
      002C34                       3887 0$:  
      002C34 CD 01 F3         [ 4] 3888 	call abs24 
      002C37                       3889 	_xpop 
      002C37 90 F6            [ 1]    1     ld a,(y)
      002C39 93               [ 1]    2     ldw x,y 
      002C3A EE 01            [ 2]    3     ldw x,(1,x)
      002C3C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C40 81               [ 4] 3890 	ret 
                                   3891 
                                   3892 ;------------------------------
                                   3893 ; BASIC: LSHIFT(expr1,expr2)
                                   3894 ; logical shift left expr1 by 
                                   3895 ; expr2 bits 
                                   3896 ; output:
                                   3897 ; 	A:x 	result 
                                   3898 ;------------------------------
      002C41                       3899 lshift:
      002C41 CD 19 CF         [ 4] 3900 	call func_args
      002C44 A1 02            [ 1] 3901 	cp a,#2 
      002C46 27 03            [ 1] 3902 	jreq 1$
      002C48 CC 16 A5         [ 2] 3903 	jp syntax_error
      002C4B                       3904 1$: _xpop 
      002C4B 90 F6            [ 1]    1     ld a,(y)
      002C4D 93               [ 1]    2     ldw x,y 
      002C4E EE 01            [ 2]    3     ldw x,(1,x)
      002C50 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C54 9F               [ 1] 3905 	ld a,xl 
      002C55 88               [ 1] 3906 	push a      
      002C56                       3907 	_xpop  ; T>A:X 
      002C56 90 F6            [ 1]    1     ld a,(y)
      002C58 93               [ 1]    2     ldw x,y 
      002C59 EE 01            [ 2]    3     ldw x,(1,x)
      002C5B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C5F 0D 01            [ 1] 3908 	tnz (1,sp) 
      002C61 27 07            [ 1] 3909 	jreq 4$
      002C63 98               [ 1] 3910 2$:	rcf 
      002C64 59               [ 2] 3911 	rlcw x 
      002C65 49               [ 1] 3912 	rlc a 
      002C66 0A 01            [ 1] 3913 	dec (1,sp) 
      002C68 26 F9            [ 1] 3914 	jrne 2$
      002C6A                       3915 4$: _drop 1 
      002C6A 5B 01            [ 2]    1     addw sp,#1 
      002C6C 81               [ 4] 3916 	ret
                                   3917 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                   3918 ;------------------------------
                                   3919 ; BASIC: RSHIFT(expr1,expr2)
                                   3920 ; logical shift right expr1 by 
                                   3921 ; expr2 bits.
                                   3922 ; output:
                                   3923 ; 	A 		TK_INTGR
                                   3924 ;   X 		result 
                                   3925 ;------------------------------
      002C6D                       3926 rshift:
      002C6D CD 19 CF         [ 4] 3927 	call func_args
      002C70 A1 02            [ 1] 3928 	cp a,#2 
      002C72 27 03            [ 1] 3929 	jreq 1$
      002C74 CC 16 A5         [ 2] 3930 	jp syntax_error
      002C77                       3931 1$: _xpop ; T>A:X
      002C77 90 F6            [ 1]    1     ld a,(y)
      002C79 93               [ 1]    2     ldw x,y 
      002C7A EE 01            [ 2]    3     ldw x,(1,x)
      002C7C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C80 9F               [ 1] 3932     ld a,xl 
      002C81 88               [ 1] 3933 	push a    
      002C82                       3934 	_xpop  
      002C82 90 F6            [ 1]    1     ld a,(y)
      002C84 93               [ 1]    2     ldw x,y 
      002C85 EE 01            [ 2]    3     ldw x,(1,x)
      002C87 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C8B 0D 01            [ 1] 3935 	tnz (1,sp)
      002C8D 27 07            [ 1] 3936 	jreq 4$
      002C8F 98               [ 1] 3937 2$:	rcf 
      002C90 46               [ 1] 3938 	rrc a 
      002C91 56               [ 2] 3939 	rrcw x 
      002C92 0A 01            [ 1] 3940 	dec (1,sp) 
      002C94 26 F9            [ 1] 3941 	jrne 2$
      002C96                       3942 4$: _drop 1 
      002C96 5B 01            [ 2]    1     addw sp,#1 
      002C98 81               [ 4] 3943 	ret
                                   3944 
                                   3945 ;--------------------------
                                   3946 ; BASIC: FCPU integer
                                   3947 ; set CPU frequency 
                                   3948 ;-------------------------- 
                                   3949 
      002C99                       3950 fcpu:
      002C99 A6 84            [ 1] 3951 	ld a,#TK_INTGR
      002C9B CD 19 C2         [ 4] 3952 	call expect 
      002C9E CD 18 3E         [ 4] 3953 	call get_int24 
      002CA1 9F               [ 1] 3954 	ld a,xl 
      002CA2 A4 07            [ 1] 3955 	and a,#7 
      002CA4 C7 50 C6         [ 1] 3956 	ld CLK_CKDIVR,a 
      002CA7 81               [ 4] 3957 	ret 
                                   3958 
                                   3959 ;------------------------------
                                   3960 ; BASIC: PMODE pin#, mode 
                                   3961 ; Arduino pin. 
                                   3962 ; define pin as input or output
                                   3963 ; pin#: {0..15}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                                   3964 ; mode: INPUT|OUTPUT  
                                   3965 ;------------------------------
                           000001  3966 	PINNO=1
                           000001  3967 	VSIZE=1
      002CA8                       3968 pin_mode:
      002CA8                       3969 	_vars VSIZE 
      002CA8 52 01            [ 2]    1     sub sp,#VSIZE 
      002CAA CD 19 D4         [ 4] 3970 	call arg_list 
      002CAD A1 02            [ 1] 3971 	cp a,#2 
      002CAF 27 03            [ 1] 3972 	jreq 1$
      002CB1 CC 16 A5         [ 2] 3973 	jp syntax_error 
      002CB4                       3974 1$: _xpop 
      002CB4 90 F6            [ 1]    1     ld a,(y)
      002CB6 93               [ 1]    2     ldw x,y 
      002CB7 EE 01            [ 2]    3     ldw x,(1,x)
      002CB9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CBD CF 00 19         [ 2] 3975 	ldw ptr16,x ; mode 
      002CC0                       3976 	_xpop ; Dx pin 
      002CC0 90 F6            [ 1]    1     ld a,(y)
      002CC2 93               [ 1]    2     ldw x,y 
      002CC3 EE 01            [ 2]    3     ldw x,(1,x)
      002CC5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CC9 CD 2D 07         [ 4] 3977 	call select_pin 
      002CCC 6B 01            [ 1] 3978 	ld (PINNO,sp),a  
      002CCE A6 01            [ 1] 3979 	ld a,#1 
      002CD0 0D 01            [ 1] 3980 	tnz (PINNO,sp)
      002CD2 27 0D            [ 1] 3981 	jreq 4$
      002CD4 48               [ 1] 3982 2$:	sll a 
      002CD5 0A 01            [ 1] 3983 	dec (PINNO,sp)
      002CD7 26 FB            [ 1] 3984 	jrne 2$ 
      002CD9 6B 01            [ 1] 3985 	ld (PINNO,sp),a
      002CDB 7B 01            [ 1] 3986 	ld a,(PINNO,sp)
      002CDD EA 03            [ 1] 3987 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002CDF E7 03            [ 1] 3988 	ld (GPIO_CR1,x),a 
      002CE1 A6 01            [ 1] 3989 4$:	ld a,#OUTP
      002CE3 C1 00 0E         [ 1] 3990 	cp a,acc8 
      002CE6 27 10            [ 1] 3991 	jreq 6$
                                   3992 ; input mode
                                   3993 ; disable external interrupt 
      002CE8 7B 01            [ 1] 3994 	ld a,(PINNO,sp)
      002CEA 43               [ 1] 3995 	cpl a 
      002CEB E4 04            [ 1] 3996 	and a,(GPIO_CR2,x)
      002CED E7 04            [ 1] 3997 	ld (GPIO_CR2,x),a 
                                   3998 ;clear bit in DDR for input mode 
      002CEF 7B 01            [ 1] 3999 	ld a,(PINNO,sp)
      002CF1 43               [ 1] 4000 	cpl a 
      002CF2 E4 02            [ 1] 4001 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002CF4 E7 02            [ 1] 4002 	ld (GPIO_DDR,x),a 
      002CF6 20 0C            [ 2] 4003 	jra 9$
      002CF8                       4004 6$: ;output mode  
      002CF8 7B 01            [ 1] 4005 	ld a,(PINNO,sp)
      002CFA EA 02            [ 1] 4006 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002CFC E7 02            [ 1] 4007 	ld (GPIO_DDR,x),a 
      002CFE 7B 01            [ 1] 4008 	ld a,(PINNO,sp)
      002D00 EA 04            [ 1] 4009 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002D02 E7 04            [ 1] 4010 	ld (GPIO_CR2,x),a 
      002D04                       4011 9$:	
      002D04                       4012 	_drop VSIZE 
      002D04 5B 01            [ 2]    1     addw sp,#VSIZE 
      002D06 81               [ 4] 4013 	ret
                                   4014 
                                   4015 ;------------------------
                                   4016 ; select Arduino pin 
                                   4017 ; input:
                                   4018 ;   X 	 {0..15} Arduino Dx 
                                   4019 ; output:
                                   4020 ;   A     stm8s208 pin 
                                   4021 ;   X     base address s208 GPIO port 
                                   4022 ;---------------------------
      002D07                       4023 select_pin:
      002D07 58               [ 2] 4024 	sllw x 
      002D08 1C 2D 17         [ 2] 4025 	addw x,#arduino_to_8s208 
      002D0B FE               [ 2] 4026 	ldw x,(x)
      002D0C 9F               [ 1] 4027 	ld a,xl 
      002D0D 88               [ 1] 4028 	push a 
      002D0E 5E               [ 1] 4029 	swapw x 
      002D0F A6 05            [ 1] 4030 	ld a,#5 
      002D11 42               [ 4] 4031 	mul x,a 
      002D12 1C 50 00         [ 2] 4032 	addw x,#GPIO_BASE 
      002D15 84               [ 1] 4033 	pop a 
      002D16 81               [ 4] 4034 	ret 
                                   4035 ; translation from Arduino D0..D15 to stm8s208rb 
      002D17                       4036 arduino_to_8s208:
      002D17 03 06                 4037 .byte 3,6 ; D0 
      002D19 03 05                 4038 .byte 3,5 ; D1 
      002D1B 04 00                 4039 .byte 4,0 ; D2 
      002D1D 02 01                 4040 .byte 2,1 ; D3
      002D1F 06 00                 4041 .byte 6,0 ; D4
      002D21 02 02                 4042 .byte 2,2 ; D5
      002D23 02 03                 4043 .byte 2,3 ; D6
      002D25 03 01                 4044 .byte 3,1 ; D7
      002D27 03 03                 4045 .byte 3,3 ; D8
      002D29 02 04                 4046 .byte 2,4 ; D9
      002D2B 04 05                 4047 .byte 4,5 ; D10
      002D2D 02 06                 4048 .byte 2,6 ; D11
      002D2F 02 07                 4049 .byte 2,7 ; D12
      002D31 02 05                 4050 .byte 2,5 ; D13
      002D33 04 02                 4051 .byte 4,2 ; D14
      002D35 04 01                 4052 .byte 4,1 ; D15
                                   4053 
                                   4054 
                                   4055 ;------------------------------
                                   4056 ; BASIC: RND(expr)
                                   4057 ; return random number 
                                   4058 ; between 1 and expr inclusive
                                   4059 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4060 ; input:
                                   4061 ; 	none 
                                   4062 ; output:
                                   4063 ;	xstack 	random positive integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



                                   4064 ;------------------------------
      002D37                       4065 random:
      002D37 CD 19 CF         [ 4] 4066 	call func_args 
      002D3A A1 01            [ 1] 4067 	cp a,#1
      002D3C 27 03            [ 1] 4068 	jreq 1$
      002D3E CC 16 A5         [ 2] 4069 	jp syntax_error
      002D41                       4070 1$:  
      002D41                       4071 	_xpop   
      002D41 90 F6            [ 1]    1     ld a,(y)
      002D43 93               [ 1]    2     ldw x,y 
      002D44 EE 01            [ 2]    3     ldw x,(1,x)
      002D46 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D4A 89               [ 2] 4072 	pushw x 
      002D4B 88               [ 1] 4073 	push a  
      002D4C A6 80            [ 1] 4074 	ld a,#0x80 
      002D4E 15 01            [ 1] 4075 	bcp a,(1,sp)
      002D50 27 05            [ 1] 4076 	jreq 2$
      002D52 A6 0A            [ 1] 4077 	ld a,#ERR_BAD_VALUE
      002D54 CC 16 A7         [ 2] 4078 	jp tb_error
      002D57                       4079 2$: 
                                   4080 ; acc16=(x<<5)^x 
      002D57 CE 00 14         [ 2] 4081 	ldw x,seedx 
      002D5A 58               [ 2] 4082 	sllw x 
      002D5B 58               [ 2] 4083 	sllw x 
      002D5C 58               [ 2] 4084 	sllw x 
      002D5D 58               [ 2] 4085 	sllw x 
      002D5E 58               [ 2] 4086 	sllw x 
      002D5F 9E               [ 1] 4087 	ld a,xh 
      002D60 C8 00 14         [ 1] 4088 	xor a,seedx 
      002D63 C7 00 0D         [ 1] 4089 	ld acc16,a 
      002D66 9F               [ 1] 4090 	ld a,xl 
      002D67 C8 00 15         [ 1] 4091 	xor a,seedx+1 
      002D6A C7 00 0E         [ 1] 4092 	ld acc8,a 
                                   4093 ; seedx=seedy 
      002D6D CE 00 16         [ 2] 4094 	ldw x,seedy 
      002D70 CF 00 14         [ 2] 4095 	ldw seedx,x  
                                   4096 ; seedy=seedy^(seedy>>1)
      002D73 CE 00 16         [ 2] 4097 	ldw x,seedy 
      002D76 54               [ 2] 4098 	srlw x 
      002D77 9E               [ 1] 4099 	ld a,xh 
      002D78 C8 00 16         [ 1] 4100 	xor a,seedy 
      002D7B C7 00 16         [ 1] 4101 	ld seedy,a  
      002D7E 9F               [ 1] 4102 	ld a,xl 
      002D7F C8 00 17         [ 1] 4103 	xor a,seedy+1 
      002D82 C7 00 17         [ 1] 4104 	ld seedy+1,a 
                                   4105 ; acc16>>3 
      002D85 CE 00 0D         [ 2] 4106 	ldw x,acc16 
      002D88 54               [ 2] 4107 	srlw x 
      002D89 54               [ 2] 4108 	srlw x 
      002D8A 54               [ 2] 4109 	srlw x 
                                   4110 ; x=acc16^x 
      002D8B 9E               [ 1] 4111 	ld a,xh 
      002D8C C8 00 0D         [ 1] 4112 	xor a,acc16 
      002D8F C7 00 0D         [ 1] 4113 	ld acc16,a 
      002D92 9F               [ 1] 4114 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002D93 C8 00 0E         [ 1] 4115 	xor a,acc8 
      002D96 C7 00 0E         [ 1] 4116 	ld acc8,a 
                                   4117 ; seedy=acc16^seedy 
      002D99 C8 00 17         [ 1] 4118 	xor a,seedy+1
      002D9C 97               [ 1] 4119 	ld xl,a 
      002D9D C6 00 0D         [ 1] 4120 	ld a,acc16 
      002DA0 C8 00 16         [ 1] 4121 	xor a,seedy
      002DA3 95               [ 1] 4122 	ld xh,a 
      002DA4 CF 00 16         [ 2] 4123 	ldw seedy,x 
                                   4124 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002DA7 C6 00 15         [ 1] 4125 	ld a,seedx+1
      002DAA A4 7F            [ 1] 4126 	and a,#127
      002DAC                       4127 	_xpush 
      002DAC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002DB0 90 F7            [ 1]    2     ld (y),a 
      002DB2 90 EF 01         [ 2]    3     ldw (1,y),x 
      002DB5 84               [ 1] 4128 	pop a 
      002DB6 85               [ 2] 4129 	popw x 
      002DB7                       4130 	_xpush 
      002DB7 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002DBB 90 F7            [ 1]    2     ld (y),a 
      002DBD 90 EF 01         [ 2]    3     ldw (1,y),x 
      002DC0 CD 03 A1         [ 4] 4131 	call mod24 
      002DC3                       4132 	_xpop
      002DC3 90 F6            [ 1]    1     ld a,(y)
      002DC5 93               [ 1]    2     ldw x,y 
      002DC6 EE 01            [ 2]    3     ldw x,(1,x)
      002DC8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DCC 1C 00 01         [ 2] 4133 	addw x,#1 
      002DCF A9 00            [ 1] 4134 	adc a,#0  
      002DD1 81               [ 4] 4135 	ret 
                                   4136 
                                   4137 ;---------------------------------
                                   4138 ; BASIC: WORDS 
                                   4139 ; affiche la listes des mots du
                                   4140 ; dictionnaire ainsi que le nombre
                                   4141 ; de mots.
                                   4142 ;---------------------------------
                           000001  4143 	WLEN=1 ; word length
                           000002  4144 	LLEN=2 ; character sent to console
                           000003  4145 	WCNT=3 ; count words printed 
                           000003  4146 	VSIZE=3 
      002DD2                       4147 words:
      002DD2 90 89            [ 2] 4148 	pushw y
      002DD4                       4149 	_vars VSIZE
      002DD4 52 03            [ 2]    1     sub sp,#VSIZE 
      002DD6 0F 02            [ 1] 4150 	clr (LLEN,sp)
      002DD8 0F 03            [ 1] 4151 	clr (WCNT,sp)
      002DDA 90 AE 36 DD      [ 2] 4152 	ldw y,#kword_dict+2
      002DDE 93               [ 1] 4153 0$:	ldw x,y
      002DDF F6               [ 1] 4154 	ld a,(x)
      002DE0 A4 0F            [ 1] 4155 	and a,#15 
      002DE2 6B 01            [ 1] 4156 	ld (WLEN,sp),a 
      002DE4 0C 03            [ 1] 4157 	inc (WCNT,sp)
      002DE6 5C               [ 1] 4158 1$:	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002DE7 F6               [ 1] 4159 	ld a,(x)
      002DE8 CD 08 FF         [ 4] 4160 	call putc 
      002DEB 0C 02            [ 1] 4161 	inc (LLEN,sp)
      002DED 0A 01            [ 1] 4162 	dec (WLEN,sp)
      002DEF 26 F5            [ 1] 4163 	jrne 1$
      002DF1 A6 46            [ 1] 4164 	ld a,#70
      002DF3 11 02            [ 1] 4165 	cp a,(LLEN,sp)
      002DF5 2B 09            [ 1] 4166 	jrmi 2$   
      002DF7 A6 20            [ 1] 4167 	ld a,#SPACE 
      002DF9 CD 08 FF         [ 4] 4168 	call putc 
      002DFC 0C 02            [ 1] 4169 	inc (LLEN,sp) 
      002DFE 20 07            [ 2] 4170 	jra 3$
      002E00 A6 0D            [ 1] 4171 2$: ld a,#CR 
      002E02 CD 08 FF         [ 4] 4172 	call putc 
      002E05 0F 02            [ 1] 4173 	clr (LLEN,sp)
      002E07 72 A2 00 02      [ 2] 4174 3$:	subw y,#2 
      002E0B 90 FE            [ 2] 4175 	ldw y,(y)
      002E0D 26 CF            [ 1] 4176 	jrne 0$ 
      002E0F A6 0D            [ 1] 4177 	ld a,#CR 
      002E11 CD 08 FF         [ 4] 4178 	call putc  
      002E14 5F               [ 1] 4179 	clrw x 
      002E15 7B 03            [ 1] 4180 	ld a,(WCNT,sp)
      002E17 97               [ 1] 4181 	ld xl,a 
      002E18 CD 18 54         [ 4] 4182 	call prt_i16 
      002E1B AE 2E 26         [ 2] 4183 	ldw x,#words_count_msg
      002E1E CD 09 5C         [ 4] 4184 	call puts 
      002E21                       4185 	_drop VSIZE 
      002E21 5B 03            [ 2]    1     addw sp,#VSIZE 
      002E23 90 85            [ 2] 4186 	popw y 
      002E25 81               [ 4] 4187 	ret 
      002E26 20 77 6F 72 64 73 20  4188 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4189 
                                   4190 
                                   4191 ;-----------------------------
                                   4192 ; BASIC: TIMER expr 
                                   4193 ; initialize count down timer 
                                   4194 ;-----------------------------
      002E3C                       4195 set_timer:
      002E3C CD 19 D4         [ 4] 4196 	call arg_list
      002E3F A1 01            [ 1] 4197 	cp a,#1 
      002E41 27 03            [ 1] 4198 	jreq 1$
      002E43 CC 16 A5         [ 2] 4199 	jp syntax_error
      002E46                       4200 1$: 
      002E46                       4201 	_xpop  
      002E46 90 F6            [ 1]    1     ld a,(y)
      002E48 93               [ 1]    2     ldw x,y 
      002E49 EE 01            [ 2]    3     ldw x,(1,x)
      002E4B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E4F CF 00 12         [ 2] 4202 	ldw timer,x 
      002E52 81               [ 4] 4203 	ret 
                                   4204 
                                   4205 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4206 ; BASIC: TIMEOUT 
                                   4207 ; return state of timer 
                                   4208 ; output:
                                   4209 ;   A:X     0 not timeout 
                                   4210 ;   A:X     -1 timeout 
                                   4211 ;------------------------------
      002E53                       4212 timeout:
      002E53 4F               [ 1] 4213 	clr a 
      002E54 CE 00 12         [ 2] 4214 	ldw x,timer 
      002E57 27 02            [ 1] 4215 	jreq 1$
      002E59 5F               [ 1] 4216 	clrw x
      002E5A 81               [ 4] 4217 	ret  
      002E5B 43               [ 1] 4218 1$:	cpl a
      002E5C 53               [ 2] 4219 	cplw x 
      002E5D 81               [ 4] 4220 	ret 
                                   4221  	
                                   4222 
                                   4223 
                                   4224 
                                   4225 ;-----------------------------------
                                   4226 ; BASIC: IWDGEN expr1 
                                   4227 ; enable independant watchdog timer
                                   4228 ; expr1 is delay in multiple of 62.5µsec
                                   4229 ; expr1 -> {1..16383}
                                   4230 ;-----------------------------------
      002E5E                       4231 enable_iwdg:
      002E5E CD 19 D4         [ 4] 4232 	call arg_list
      002E61 A1 01            [ 1] 4233 	cp a,#1 
      002E63 27 03            [ 1] 4234 	jreq 1$
      002E65 CC 16 A5         [ 2] 4235 	jp syntax_error 
      002E68                       4236 1$: _xpop  
      002E68 90 F6            [ 1]    1     ld a,(y)
      002E6A 93               [ 1]    2     ldw x,y 
      002E6B EE 01            [ 2]    3     ldw x,(1,x)
      002E6D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E71 4B 00            [ 1] 4237 	push #0
      002E73 35 CC 50 E0      [ 1] 4238 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002E77 9E               [ 1] 4239 	ld a,xh 
      002E78 A4 3F            [ 1] 4240 	and a,#0x3f
      002E7A 95               [ 1] 4241 	ld xh,a  
      002E7B A3 00 FF         [ 2] 4242 2$:	cpw x,#255
      002E7E 23 06            [ 2] 4243 	jrule 3$
      002E80 0C 01            [ 1] 4244 	inc (1,sp)
      002E82 98               [ 1] 4245 	rcf 
      002E83 56               [ 2] 4246 	rrcw x 
      002E84 20 F5            [ 2] 4247 	jra 2$
      002E86 35 55 50 E0      [ 1] 4248 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E8A 84               [ 1] 4249 	pop a  
      002E8B C7 50 E1         [ 1] 4250 	ld IWDG_PR,a 
      002E8E 9F               [ 1] 4251 	ld a,xl
      002E8F 4A               [ 1] 4252 	dec a 
      002E90 35 55 50 E0      [ 1] 4253 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E94 C7 50 E2         [ 1] 4254 	ld IWDG_RLR,a 
      002E97 35 AA 50 E0      [ 1] 4255 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002E9B 81               [ 4] 4256 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4257 
                                   4258 
                                   4259 ;-----------------------------------
                                   4260 ; BASIC: IWDGREF  
                                   4261 ; refresh independant watchdog count down 
                                   4262 ; timer before it reset MCU. 
                                   4263 ;-----------------------------------
      002E9C                       4264 refresh_iwdg:
      002E9C 35 AA 50 E0      [ 1] 4265 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002EA0 81               [ 4] 4266 	ret 
                                   4267 
                                   4268 
                                   4269 ;-------------------------------------
                                   4270 ; BASIC: LOG2(expr)
                                   4271 ; return logarithm base 2 of expr 
                                   4272 ; this is the position of most significant
                                   4273 ; bit set. 
                                   4274 ; input: 
                                   4275 ; output:
                                   4276 ;   A     TK_INTGR 
                                   4277 ;   xstack log2 
                                   4278 ;*********************************
      002EA1                       4279 log2:
      002EA1 CD 19 CF         [ 4] 4280 	call func_args 
      002EA4 A1 01            [ 1] 4281 	cp a,#1 
      002EA6 27 03            [ 1] 4282 	jreq 1$
      002EA8 CC 16 A5         [ 2] 4283 	jp syntax_error 
      002EAB                       4284 1$: 
      002EAB                       4285 	_xpop    
      002EAB 90 F6            [ 1]    1     ld a,(y)
      002EAD 93               [ 1]    2     ldw x,y 
      002EAE EE 01            [ 2]    3     ldw x,(1,x)
      002EB0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EB4 4D               [ 1] 4286 	tnz a
      002EB5 26 08            [ 1] 4287 	jrne 2$ 
      002EB7 5D               [ 2] 4288 	tnzw x 
      002EB8 26 05            [ 1] 4289 	jrne 2$
      002EBA A6 0A            [ 1] 4290 	ld a,#ERR_BAD_VALUE
      002EBC CC 16 A7         [ 2] 4291 	jp tb_error 
      002EBF 4B 18            [ 1] 4292 2$: push #24 
      002EC1 59               [ 2] 4293 3$: rlcw x 
      002EC2 49               [ 1] 4294     rlc a 
      002EC3 25 04            [ 1] 4295 	jrc 4$
      002EC5 0A 01            [ 1] 4296 	dec (1,sp) 
      002EC7 26 F8            [ 1] 4297 	jrne 3$
      002EC9 5F               [ 1] 4298 4$: clrw x 
      002ECA 84               [ 1] 4299     pop a 
      002ECB 4A               [ 1] 4300 	dec a
      002ECC 02               [ 1] 4301 	rlwa x  
      002ECD                       4302 9$:	
      002ECD 81               [ 4] 4303 	ret 
                                   4304 
                                   4305 ;-----------------------------------
                                   4306 ; BASIC: BIT(expr) 
                                   4307 ; expr ->{0..23}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



                                   4308 ; return 2^expr 
                                   4309 ; output:
                                   4310 ;    A:X    2^expr 
                                   4311 ;-----------------------------------
      002ECE                       4312 bitmask:
      002ECE CD 19 CF         [ 4] 4313     call func_args 
      002ED1 A1 01            [ 1] 4314 	cp a,#1
      002ED3 27 03            [ 1] 4315 	jreq 1$
      002ED5 CC 16 A5         [ 2] 4316 	jp syntax_error 
      002ED8                       4317 1$: _xpop 
      002ED8 90 F6            [ 1]    1     ld a,(y)
      002EDA 93               [ 1]    2     ldw x,y 
      002EDB EE 01            [ 2]    3     ldw x,(1,x)
      002EDD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EE1 9F               [ 1] 4318 	ld a,xl 
      002EE2 AE 00 01         [ 2] 4319 	ldw x,#1 
      002EE5 A4 17            [ 1] 4320 	and a,#23
      002EE7 27 0A            [ 1] 4321 	jreq 9$
      002EE9 88               [ 1] 4322 	push a 
      002EEA 4F               [ 1] 4323 	clr a 
      002EEB                       4324 2$: 
      002EEB 58               [ 2] 4325 	slaw x 
      002EEC 49               [ 1] 4326 	rlc a 	
      002EED 0A 01            [ 1] 4327 	dec (1,sp)
      002EEF 26 FA            [ 1] 4328 	jrne 2$ 
      002EF1                       4329 4$:
      002EF1                       4330     _drop 1 
      002EF1 5B 01            [ 2]    1     addw sp,#1 
      002EF3 81               [ 4] 4331 9$:	ret 
                                   4332 
                                   4333 ;------------------------------
                                   4334 ; BASIC: DO 
                                   4335 ; initiate a DO ... UNTIL loop 
                                   4336 ;------------------------------
                           000003  4337 	DOLP_ADR=3 
                           000005  4338 	DOLP_INW=5
                           000004  4339 	VSIZE=4 
      002EF4                       4340 do_loop:
      002EF4 85               [ 2] 4341 	popw x 
      002EF5                       4342 	_vars VSIZE 
      002EF5 52 04            [ 2]    1     sub sp,#VSIZE 
      002EF7 89               [ 2] 4343 	pushw x 
      002EF8 CE 00 04         [ 2] 4344 	ldw x,basicptr 
      002EFB 1F 03            [ 2] 4345 	ldw (DOLP_ADR,sp),x
      002EFD CE 00 00         [ 2] 4346 	ldw x,in.w 
      002F00 1F 05            [ 2] 4347 	ldw (DOLP_INW,sp),x
      002F02 72 5C 00 1F      [ 1] 4348 	inc loop_depth 
      002F06 81               [ 4] 4349 	ret 
                                   4350 
                                   4351 ;--------------------------------
                                   4352 ; BASIC: UNTIL expr 
                                   4353 ; loop if exprssion is false 
                                   4354 ; else terminate loop
                                   4355 ;--------------------------------
      002F07                       4356 until: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002F07 72 5D 00 1F      [ 1] 4357 	tnz loop_depth 
      002F0B 26 03            [ 1] 4358 	jrne 1$ 
      002F0D CC 16 A5         [ 2] 4359 	jp syntax_error 
      002F10                       4360 1$: 
      002F10 CD 1C 2F         [ 4] 4361 	call condition  
      002F13                       4362 	_xpop 
      002F13 90 F6            [ 1]    1     ld a,(y)
      002F15 93               [ 1]    2     ldw x,y 
      002F16 EE 01            [ 2]    3     ldw x,(1,x)
      002F18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F1C 4D               [ 1] 4363 	tnz a 
      002F1D 26 13            [ 1] 4364 	jrne 9$ 
      002F1F 5D               [ 2] 4365 	tnzw x 
      002F20 26 10            [ 1] 4366 	jrne 9$ 
      002F22 1E 03            [ 2] 4367 	ldw x,(DOLP_ADR,sp)
      002F24 CF 00 04         [ 2] 4368 	ldw basicptr,x 
      002F27 E6 02            [ 1] 4369 	ld a,(2,x)
      002F29 C7 00 02         [ 1] 4370 	ld count,a 
      002F2C 1E 05            [ 2] 4371 	ldw x,(DOLP_INW,sp)
      002F2E CF 00 00         [ 2] 4372 	ldw in.w,x 
      002F31 81               [ 4] 4373 	ret 
      002F32                       4374 9$:	; remove loop data from stack  
      002F32 85               [ 2] 4375 	popw x
      002F33                       4376 	_drop VSIZE
      002F33 5B 04            [ 2]    1     addw sp,#VSIZE 
      002F35 72 5A 00 1F      [ 1] 4377 	dec loop_depth 
      002F39 FC               [ 2] 4378 	jp (x)
                                   4379 
                                   4380 ;--------------------------
                                   4381 ; BASIC: PORTA...PORTI  
                                   4382 ;  return constant value 
                                   4383 ;  PORT  base address 
                                   4384 ;---------------------------
      002F3A                       4385 const_porta:
      002F3A AE 50 00         [ 2] 4386 	ldw x,#PA_BASE 
      002F3D 4F               [ 1] 4387 	clr a 
      002F3E 81               [ 4] 4388 	ret 
      002F3F                       4389 const_portb:
      002F3F AE 50 05         [ 2] 4390 	ldw x,#PB_BASE 
      002F42 4F               [ 1] 4391 	clr a 
      002F43 81               [ 4] 4392 	ret 
      002F44                       4393 const_portc:
      002F44 AE 50 0A         [ 2] 4394 	ldw x,#PC_BASE 
      002F47 4F               [ 1] 4395 	clr a 
      002F48 81               [ 4] 4396 	ret 
      002F49                       4397 const_portd:
      002F49 AE 50 0F         [ 2] 4398 	ldw x,#PD_BASE 
      002F4C 4F               [ 1] 4399 	clr a 
      002F4D 81               [ 4] 4400 	ret 
      002F4E                       4401 const_porte:
      002F4E AE 50 14         [ 2] 4402 	ldw x,#PE_BASE 
      002F51 4F               [ 1] 4403 	clr a 
      002F52 81               [ 4] 4404 	ret 
      002F53                       4405 const_portf:
      002F53 AE 50 19         [ 2] 4406 	ldw x,#PF_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002F56 4F               [ 1] 4407 	clr a 
      002F57 81               [ 4] 4408 	ret 
      002F58                       4409 const_portg:
      002F58 AE 50 1E         [ 2] 4410 	ldw x,#PG_BASE 
      002F5B 4F               [ 1] 4411 	clr a 
      002F5C 81               [ 4] 4412 	ret 
      002F5D                       4413 const_porti:
      002F5D AE 50 28         [ 2] 4414 	ldw x,#PI_BASE 
      002F60 4F               [ 1] 4415 	clr a 
      002F61 81               [ 4] 4416 	ret 
                                   4417 
                                   4418 ;-------------------------------
                                   4419 ; following return constant 
                                   4420 ; related to GPIO register offset 
                                   4421 ;---------------------------------
      002F62                       4422 const_odr:
      002F62 4F               [ 1] 4423 	clr a 
      002F63 AE 00 00         [ 2] 4424 	ldw x,#GPIO_ODR
      002F66 81               [ 4] 4425 	ret 
      002F67                       4426 const_idr:
      002F67 4F               [ 1] 4427 	clr a 
      002F68 AE 00 01         [ 2] 4428 	ldw x,#GPIO_IDR
      002F6B 81               [ 4] 4429 	ret 
      002F6C                       4430 const_ddr:
      002F6C 4F               [ 1] 4431 	clr a
      002F6D AE 00 02         [ 2] 4432 	ldw x,#GPIO_DDR
      002F70 81               [ 4] 4433 	ret 
      002F71                       4434 const_cr1:
      002F71 4F               [ 1] 4435 	clr a 
      002F72 AE 00 03         [ 2] 4436 	ldw x,#GPIO_CR1
      002F75 81               [ 4] 4437 	ret 
      002F76                       4438 const_cr2:
      002F76 4F               [ 1] 4439 	clr a
      002F77 AE 00 04         [ 2] 4440 	ldw x,#GPIO_CR2
      002F7A 81               [ 4] 4441 	ret 
                                   4442 ;-------------------------
                                   4443 ; BASIC: POUT 
                                   4444 ;  constant for port mode
                                   4445 ;  used by PMODE 
                                   4446 ;  to set pin as output
                                   4447 ;------------------------
      002F7B                       4448 const_output:
      002F7B 4F               [ 1] 4449 	clr a 
      002F7C AE 00 01         [ 2] 4450 	ldw x,#OUTP
      002F7F 81               [ 4] 4451 	ret 
                                   4452 
                                   4453 ;-------------------------
                                   4454 ; BASIC: PINP 
                                   4455 ;  constant for port mode
                                   4456 ;  used by PMODE 
                                   4457 ;  to set pin as input
                                   4458 ;------------------------
      002F80                       4459 const_input:
      002F80 4F               [ 1] 4460 	clr a  
      002F81 AE 00 00         [ 2] 4461 	ldw x,#INP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002F84 81               [ 4] 4462 	ret 
                                   4463 	
                                   4464 ;-----------------------
                                   4465 ; memory area constants
                                   4466 ;-----------------------
      002F85                       4467 const_eeprom_base:
      002F85 4F               [ 1] 4468 	clr a  
      002F86 AE 40 00         [ 2] 4469 	ldw x,#EEPROM_BASE 
      002F89 81               [ 4] 4470 	ret 
                                   4471 
                                   4472 ;---------------------------
                                   4473 ; BASIC: DATA 
                                   4474 ; when the interpreter find 
                                   4475 ; a DATA line it skip it.
                                   4476 ;---------------------------
      002F8A                       4477 data:
      002F8A 55 00 02 00 01   [ 1] 4478 	mov in,count 
      002F8F 81               [ 4] 4479 	ret 
                                   4480 
                                   4481 ;------------------------------
                                   4482 ; check if it is a DATA line 
                                   4483 ; input: 
                                   4484 ;    X    line address 
                                   4485 ; output:
                                   4486 ;    Z    set if DATA line 
                                   4487 ;----------------------------
      002F90                       4488 is_data_line:
      002F90 89               [ 2] 4489 	pushw x 
      002F91 E6 03            [ 1] 4490 	ld a,(3,x)
      002F93 A1 80            [ 1] 4491 	cp a,#TK_CMD 
      002F95 26 05            [ 1] 4492 	jrne 9$
      002F97 EE 04            [ 2] 4493 	ldw x,(4,x)
      002F99 A3 2F 8A         [ 2] 4494 	cpw x,#data  
      002F9C 85               [ 2] 4495 9$: popw x 
      002F9D 81               [ 4] 4496 	ret 
                                   4497 
                                   4498 ;---------------------------------
                                   4499 ; BASIC: RESTORE [line#]
                                   4500 ; set data_ptr to first data line
                                   4501 ; if no DATA found pointer set to
                                   4502 ; zero.
                                   4503 ; if a line# is given as argument 
                                   4504 ; a data line with that number 
                                   4505 ; is searched and the data pointer 
                                   4506 ; is set to it. If there is no 
                                   4507 ; data line with that number 
                                   4508 ; the program is interrupted. 
                                   4509 ;---------------------------------
      002F9E                       4510 restore:
      002F9E 5F               [ 1] 4511 	clrw x 
      002F9F CF 00 06         [ 2] 4512 	ldw data_ptr,x 
      002FA2 CF 00 08         [ 2] 4513 	ldw data_ofs,x 
      002FA5 CE 00 1B         [ 2] 4514 	ldw x,txtbgn 
      002FA8 CD 18 0C         [ 4] 4515 	call next_token 
      002FAB A1 84            [ 1] 4516 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002FAD 26 10            [ 1] 4517 	jrne 0$
      002FAF CD 18 3E         [ 4] 4518 	call get_int24
      002FB2 90 89            [ 2] 4519 	pushw y 
      002FB4 4F               [ 1] 4520 	clr a 
      002FB5 CD 0C 45         [ 4] 4521 	call search_lineno  
      002FB8 90 85            [ 2] 4522 	popw y 
      002FBA 5D               [ 2] 4523 	tnzw x 
      002FBB 26 17            [ 1] 4524 	jrne set_data_pointer 
      002FBD 20 44            [ 2] 4525 	jra data_error 
      002FBF                       4526 0$:
      002FBF                       4527 	_unget_token  
      002FBF 55 00 03 00 01   [ 1]    1      mov in,in.saved  
                                   4528 ; search first DATA line 	
      002FC4 C3 00 1D         [ 2] 4529 1$:	cpw x,txtend
      002FC7 24 3A            [ 1] 4530 	jruge data_error 
      002FC9                       4531 2$:	
      002FC9 CD 2F 90         [ 4] 4532 	call is_data_line 
      002FCC 26 00            [ 1] 4533 	jrne 4$
      002FCE CD 2F E1         [ 4] 4534 4$:	call try_next_line 
      002FD1 26 FB            [ 1] 4535 	jrne 4$ 
      002FD3 81               [ 4] 4536 	ret 
                                   4537 
                                   4538 ;---------------------
                                   4539 ; set data pointer 
                                   4540 ; variables at new line 
                                   4541 ; input:
                                   4542 ;    X    line address 
                                   4543 ;----------------------
      002FD4                       4544 set_data_pointer:
      002FD4 CF 00 06         [ 2] 4545 	ldw data_ptr,x
      002FD7 E6 02            [ 1] 4546 	ld a,(2,x)
      002FD9 C7 00 09         [ 1] 4547 	ld data_len,a 
      002FDC 35 06 00 08      [ 1] 4548 	mov data_ofs,#FIRST_DATA_ITEM
      002FE0 81               [ 4] 4549 	ret 
                                   4550 
                                   4551 
                                   4552 ;--------------------
                                   4553 ; at end of data line 
                                   4554 ; check if next line 
                                   4555 ; is a data line 
                                   4556 ; input:
                                   4557 ;    X   actual line address 
                                   4558 ;  
                                   4559 ;-------------------
      002FE1                       4560 try_next_line: 
      002FE1 E6 02            [ 1] 4561 	ld a,(2,x)
      002FE3 C7 00 0E         [ 1] 4562 	ld acc8,a 
      002FE6 72 5F 00 0D      [ 1] 4563 	clr acc16 
      002FEA 72 BB 00 0D      [ 2] 4564 	addw x,acc16 
      002FEE C3 00 1D         [ 2] 4565 	cpw x,txtend 
      002FF1 25 02            [ 1] 4566 	jrult 1$
      002FF3 20 0E            [ 2] 4567 	jra data_error 
      002FF5                       4568 1$:	
      002FF5 CD 2F 90         [ 4] 4569 	call is_data_line 
      002FF8 27 04            [ 1] 4570 	jreq 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002FFA A6 01            [ 1] 4571 	ld a,#1  
      002FFC 20 04            [ 2] 4572 	jra 9$
      002FFE CD 2F D4         [ 4] 4573 2$:	call set_data_pointer
      003001 4F               [ 1] 4574 	clr a  
      003002 81               [ 4] 4575 9$:	ret 
      003003                       4576 data_error:	
      003003 A6 0C            [ 1] 4577     ld a,#ERR_NO_DATA 
      003005 CC 16 A7         [ 2] 4578 	jp tb_error 
                                   4579 
                                   4580 
                                   4581 ;---------------------------------
                                   4582 ; BASIC: READ 
                                   4583 ; return next data item | 0 
                                   4584 ;---------------------------------
                           000001  4585 	CTX_BPTR=1 
                           000003  4586 	CTX_IN=3 
                           000004  4587 	CTX_COUNT=4 
                           000005  4588 	INT24=5
                           000007  4589 	VSIZE=7 
      003008                       4590 read:
      003008                       4591 	_vars  VSIZE 
      003008 52 07            [ 2]    1     sub sp,#VSIZE 
      00300A CD 20 A3         [ 4] 4592 	call save_context
      00300D                       4593 read01:	
      00300D C6 00 08         [ 1] 4594 	ld a,data_ofs
      003010 C1 00 09         [ 1] 4595 	cp a,data_len 
      003013 27 37            [ 1] 4596 	jreq 2$ ; end of line  
      003015                       4597 0$:
      003015 CE 00 06         [ 2] 4598 	ldw x,data_ptr 
      003018 CF 00 04         [ 2] 4599 	ldw basicptr,x 
      00301B 55 00 08 00 01   [ 1] 4600 	mov in,data_ofs 
      003020 55 00 09 00 02   [ 1] 4601 	mov count,data_len  
      003025 CD 1B 16         [ 4] 4602 	call expression 
      003028 A1 84            [ 1] 4603 	cp a,#TK_INTGR 
      00302A 27 03            [ 1] 4604 	jreq 1$ 
      00302C CC 16 A5         [ 2] 4605 	jp syntax_error 
      00302F                       4606 1$:
      00302F CD 18 0C         [ 4] 4607 	call next_token ; skip comma
      003032 CE 00 04         [ 2] 4608 	ldw x,basicptr 
      003035 CF 00 06         [ 2] 4609 	ldw data_ptr,x 
      003038 55 00 01 00 08   [ 1] 4610 	mov data_ofs,in 
      00303D CD 20 B3         [ 4] 4611 	call rest_context
      003040                       4612 	_xpop 
      003040 90 F6            [ 1]    1     ld a,(y)
      003042 93               [ 1]    2     ldw x,y 
      003043 EE 01            [ 2]    3     ldw x,(1,x)
      003045 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003049                       4613 	_drop VSIZE 
      003049 5B 07            [ 2]    1     addw sp,#VSIZE 
      00304B 81               [ 4] 4614 	ret 
      00304C                       4615 2$: ; end of line reached 
                                   4616 	; try next line 
      00304C CE 00 06         [ 2] 4617 	ldw x,data_ptr  
      00304F CD 2F E1         [ 4] 4618 	call try_next_line
      003052 27 C1            [ 1] 4619 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      003054 20 AD            [ 2] 4620 	jra data_error 
                                   4621 
                                   4622 ;---------------------------------
                                   4623 ; BASIC: SPIEN clkdiv, 0|1  
                                   4624 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4625 ; if clkdiv==-1 disable SPI
                                   4626 ; 0|1 -> disable|enable  
                                   4627 ;--------------------------------- 
                           000005  4628 SPI_CS_BIT=5
      003056                       4629 spi_enable:
      003056 CD 19 D4         [ 4] 4630 	call arg_list 
      003059 A1 02            [ 1] 4631 	cp a,#2
      00305B 27 03            [ 1] 4632 	jreq 1$
      00305D CC 16 A5         [ 2] 4633 	jp syntax_error 
      003060                       4634 1$: 
      003060 72 12 50 C7      [ 1] 4635 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      003064 85               [ 2] 4636 	popw x  
      003065 5D               [ 2] 4637 	tnzw x 
      003066 27 21            [ 1] 4638 	jreq spi_disable 
      003068 85               [ 2] 4639 	popw x 
      003069 A6 08            [ 1] 4640 	ld a,#(1<<SPI_CR1_BR)
      00306B 42               [ 4] 4641 	mul x,a 
      00306C 9F               [ 1] 4642 	ld a,xl 
      00306D C7 52 00         [ 1] 4643 	ld SPI_CR1,a 
                                   4644 ; configure ~CS on PE5 (D10 on CN8) as output. 
      003070 72 1A 50 14      [ 1] 4645 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      003074 72 1A 50 16      [ 1] 4646 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4647 ; configure SPI as master mode 0.	
      003078 72 14 52 00      [ 1] 4648 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4649 ; ~CS line controlled by sofware 	
      00307C 72 12 52 01      [ 1] 4650 	bset SPI_CR2,#SPI_CR2_SSM 
      003080 72 10 52 01      [ 1] 4651     bset SPI_CR2,#SPI_CR2_SSI 
                                   4652 ; enable SPI
      003084 72 1C 52 00      [ 1] 4653 	bset SPI_CR1,#SPI_CR1_SPE 	
      003088 81               [ 4] 4654 	ret 
      003089                       4655 spi_disable:
      003089                       4656 	_drop #2; throw first argument.
      003089 5B 02            [ 2]    1     addw sp,##2 
                                   4657 ; wait spi idle 
      00308B A6 82            [ 1] 4658 1$:	ld a,#0x82 
      00308D C4 52 03         [ 1] 4659 	and a,SPI_SR
      003090 A1 02            [ 1] 4660 	cp a,#2 
      003092 26 F7            [ 1] 4661 	jrne 1$
      003094 72 1D 52 00      [ 1] 4662 	bres SPI_CR1,#SPI_CR1_SPE
      003098 72 13 50 C7      [ 1] 4663 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      00309C 72 1B 50 16      [ 1] 4664 	bres PE_DDR,#SPI_CS_BIT 
      0030A0 81               [ 4] 4665 	ret 
                                   4666 
      0030A1                       4667 spi_clear_error:
      0030A1 A6 78            [ 1] 4668 	ld a,#0x78 
      0030A3 C5 52 03         [ 1] 4669 	bcp a,SPI_SR 
      0030A6 27 04            [ 1] 4670 	jreq 1$
      0030A8 72 5F 52 03      [ 1] 4671 	clr SPI_SR 
      0030AC 81               [ 4] 4672 1$: ret 
                                   4673 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      0030AD                       4674 spi_send_byte:
      0030AD 88               [ 1] 4675 	push a 
      0030AE CD 30 A1         [ 4] 4676 	call spi_clear_error
      0030B1 84               [ 1] 4677 	pop a 
      0030B2 72 03 52 03 FB   [ 2] 4678 	btjf SPI_SR,#SPI_SR_TXE,.
      0030B7 C7 52 04         [ 1] 4679 	ld SPI_DR,a
      0030BA 72 01 52 03 FB   [ 2] 4680 	btjf SPI_SR,#SPI_SR_RXNE,.  
      0030BF C6 52 04         [ 1] 4681 	ld a,SPI_DR 
      0030C2 81               [ 4] 4682 	ret 
                                   4683 
      0030C3                       4684 spi_rcv_byte:
      0030C3 A6 FF            [ 1] 4685 	ld a,#255
      0030C5 72 01 52 03 E3   [ 2] 4686 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      0030CA C6 52 04         [ 1] 4687 	ld a,SPI_DR 
      0030CD 81               [ 4] 4688 	ret
                                   4689 
                                   4690 ;------------------------------
                                   4691 ; BASIC: SPIWR byte [,byte]
                                   4692 ; write 1 or more byte
                                   4693 ;------------------------------
      0030CE                       4694 spi_write:
      0030CE CD 1B 16         [ 4] 4695 	call expression
      0030D1 A1 84            [ 1] 4696 	cp a,#TK_INTGR 
      0030D3 27 03            [ 1] 4697 	jreq 1$
      0030D5 CC 16 A5         [ 2] 4698 	jp syntax_error 
      0030D8                       4699 1$:	
      0030D8 9F               [ 1] 4700 	ld a,xl 
      0030D9 CD 30 AD         [ 4] 4701 	call spi_send_byte 
      0030DC CD 18 0C         [ 4] 4702 	call next_token 
      0030DF A1 08            [ 1] 4703 	cp a,#TK_COMMA 
      0030E1 26 02            [ 1] 4704 	jrne 2$ 
      0030E3 20 E9            [ 2] 4705 	jra spi_write 
      0030E5 4D               [ 1] 4706 2$:	tnz a 
      0030E6 27 05            [ 1] 4707 	jreq 3$
      0030E8                       4708 	_unget_token  
      0030E8 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0030ED 81               [ 4] 4709 3$:	ret 
                                   4710 
                                   4711 
                                   4712 ;-------------------------------
                                   4713 ; BASIC: SPIRD 	
                                   4714 ; read one byte from SPI 
                                   4715 ;-------------------------------
      0030EE                       4716 spi_read:
      0030EE CD 30 C3         [ 4] 4717 	call spi_rcv_byte 
      0030F1 5F               [ 1] 4718 	clrw x 
      0030F2 97               [ 1] 4719 	ld xl,a 
      0030F3 4F               [ 1] 4720 	clr a  
      0030F4 81               [ 4] 4721 	ret 
                                   4722 
                                   4723 ;------------------------------
                                   4724 ; BASIC: SPISEL 0|1 
                                   4725 ; set state of ~CS line
                                   4726 ; 0|1 deselect|select  
                                   4727 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      0030F5                       4728 spi_select:
      0030F5 CD 18 0C         [ 4] 4729 	call next_token 
      0030F8 A1 84            [ 1] 4730 	cp a,#TK_INTGR 
      0030FA 27 03            [ 1] 4731 	jreq 1$
      0030FC CC 16 A5         [ 2] 4732 	jp syntax_error 
      0030FF 5D               [ 2] 4733 1$: tnzw x  
      003100 27 05            [ 1] 4734 	jreq cs_high 
      003102 72 1B 50 14      [ 1] 4735 	bres PE_ODR,#SPI_CS_BIT
      003106 81               [ 4] 4736 	ret 
      003107                       4737 cs_high: 
      003107 72 1A 50 14      [ 1] 4738 	bset PE_ODR,#SPI_CS_BIT
      00310B 81               [ 4] 4739 	ret 
                                   4740 
                                   4741 ;-------------------------------
                                   4742 ; BASIC: PAD 
                                   4743 ; Return pad buffer address.
                                   4744 ;------------------------------
      00310C                       4745 pad_ref:
      00310C AE 16 B8         [ 2] 4746 	ldw x,#pad 
      00310F 4F               [ 1] 4747 	clr a
      003110 81               [ 4] 4748 	ret 
                                   4749 
                                   4750 ;****************************
                                   4751 ; expression stack 
                                   4752 ; manipulation routines
                                   4753 ;****************************
                                   4754 
                                   4755 ;-----------------------------
                                   4756 ; BASIC: PUSH expr|rel|cond 
                                   4757 ; push the result on xtack
                                   4758 ;-----------------------------
      003111                       4759 xpush:
      003111 CD 1C 2F         [ 4] 4760 	call condition 
      003114 81               [ 4] 4761 	ret 
                                   4762 
                                   4763 ;------------------------------
                                   4764 ; BASIC: POP 
                                   4765 ; pop top of xstack 
                                   4766 ;------------------------------
      003115                       4767 xpop:
      003115                       4768 	_xpop 
      003115 90 F6            [ 1]    1     ld a,(y)
      003117 93               [ 1]    2     ldw x,y 
      003118 EE 01            [ 2]    3     ldw x,(1,x)
      00311A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00311E 81               [ 4] 4769 	ret 
                                   4770 
                                   4771 
                                   4772 ;------------------------------
                                   4773 ; BASIC: ALLOC expr 
                                   4774 ; allocate expr element on xtack 
                                   4775 ;-------------------------------
      00311F                       4776 xalloc: 
      00311F CD 1B 16         [ 4] 4777 	call expression 
      003122 A1 84            [ 1] 4778 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003124 27 03            [ 1] 4779 	jreq 1$ 
      003126 CC 16 A5         [ 2] 4780 	jp syntax_error
      003129                       4781 1$: _xpop 
      003129 90 F6            [ 1]    1     ld a,(y)
      00312B 93               [ 1]    2     ldw x,y 
      00312C EE 01            [ 2]    3     ldw x,(1,x)
      00312E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003132 4D               [ 1] 4782 	tnz a 
      003133 27 05            [ 1] 4783 	jreq 3$ 
      003135 A6 0A            [ 1] 4784 2$:	ld a,#ERR_BAD_VALUE
      003137 CC 16 A7         [ 2] 4785 	jp tb_error 
      00313A A3 00 14         [ 2] 4786 3$: cpw x,#XSTACK_SIZE 
      00313D 22 F6            [ 1] 4787 	jrugt 2$
      00313F A6 03            [ 1] 4788 	ld a,#CELL_SIZE 
      003141 42               [ 4] 4789 	mul x,a 
      003142 CF 00 0D         [ 2] 4790 	ldw acc16,x 
      003145 72 B2 00 0D      [ 2] 4791 	subw y,acc16 
      003149 90 A3 17 38      [ 2] 4792 	cpw y,#xstack_full
      00314D 22 05            [ 1] 4793 	jrugt 9$
      00314F A6 01            [ 1] 4794 	ld a,#ERR_MEM_FULL
      003151 CC 16 A7         [ 2] 4795 	jp tb_error 
      003154                       4796 9$:	 
      003154 81               [ 4] 4797 	ret 
                                   4798 
                                   4799 
                                   4800 ;------------------------------
                                   4801 ;  BASIC DROP expr 
                                   4802 ;  expr in range {0..XSTACK_SIZE}
                                   4803 ;  discard n elements from xtack
                                   4804 ;------------------------------
      003155                       4805 xdrop:
      003155 CD 1B 16         [ 4] 4806 	call expression 
      003158 A1 84            [ 1] 4807 	cp a,#TK_INTGR
      00315A 27 03            [ 1] 4808 	jreq 1$ 
      00315C CC 16 A5         [ 2] 4809 	jp syntax_error 
      00315F                       4810 1$:	_xpop 
      00315F 90 F6            [ 1]    1     ld a,(y)
      003161 93               [ 1]    2     ldw x,y 
      003162 EE 01            [ 2]    3     ldw x,(1,x)
      003164 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003168 9F               [ 1] 4811 	ld a,xl 
      003169 A4 1F            [ 1] 4812 	and a,#0x1f 
      00316B 5F               [ 1] 4813 	clrw x 
      00316C 97               [ 1] 4814 	ld xl,a 
      00316D A6 03            [ 1] 4815 	ld a,#CELL_SIZE 
      00316F 42               [ 4] 4816 	mul x,a 
      003170 CF 00 0D         [ 2] 4817 	ldw acc16,x  
      003173 72 B9 00 0D      [ 2] 4818 	addw y,acc16 
      003177 90 A3 17 73      [ 2] 4819 	cpw y,#XSTACK_EMPTY 
      00317B 23 04            [ 2] 4820 	jrule 9$
      00317D 90 AE 17 73      [ 2] 4821 	ldw y,#XSTACK_EMPTY 
      003181 81               [ 4] 4822 9$:	ret 
                                   4823 
                                   4824 ;-----------------------
                                   4825 ; check if value in A:X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



                                   4826 ; is inside xstack bound
                                   4827 ; output:
                                   4828 ;    X     slot address  
                                   4829 ;-----------------------
      003182                       4830 xstack_bound:
      003182 4D               [ 1] 4831 	tnz a 
      003183 26 16            [ 1] 4832 	jrne 8$ 
      003185 A3 00 14         [ 2] 4833 1$: cpw x,#XSTACK_SIZE 
      003188 22 11            [ 1] 4834 	jrugt 8$
      00318A A6 03            [ 1] 4835 	ld a,#CELL_SIZE 
      00318C 42               [ 4] 4836 	mul x,a
      00318D CF 00 0D         [ 2] 4837 	ldw acc16,x 
      003190 93               [ 1] 4838 	ldw x,y 
      003191 72 BB 00 0D      [ 2] 4839 	addw x,acc16 
      003195 A3 17 73         [ 2] 4840 	cpw x,#XSTACK_EMPTY 
      003198 24 01            [ 1] 4841 	jruge 8$  
      00319A 81               [ 4] 4842 	ret 
      00319B A6 0A            [ 1] 4843 8$: ld a,#ERR_BAD_VALUE
      00319D CC 16 A7         [ 2] 4844 	jp tb_error 
                                   4845 
                                   4846 ;-------------------------
                                   4847 ; BASIC: PUT expr, cond 
                                   4848 ; expr -> slot 
                                   4849 ; cond -> valut to put 
                                   4850 ; on xstack 
                                   4851 ;-------------------------
      0031A0                       4852 xput:
      0031A0 CD 19 D4         [ 4] 4853 	call arg_list 
      0031A3 A1 02            [ 1] 4854 	cp a,#2 
      0031A5 27 03            [ 1] 4855 	jreq 1$ 
      0031A7 CC 16 A5         [ 2] 4856 0$:	jp syntax_error
      0031AA                       4857 1$: _xpop   ; value to put 
      0031AA 90 F6            [ 1]    1     ld a,(y)
      0031AC 93               [ 1]    2     ldw x,y 
      0031AD EE 01            [ 2]    3     ldw x,(1,x)
      0031AF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0031B3 89               [ 2] 4858 	pushw x 
      0031B4 88               [ 1] 4859 	push a 
      0031B5                       4860 	_xpop    ; slot 
      0031B5 90 F6            [ 1]    1     ld a,(y)
      0031B7 93               [ 1]    2     ldw x,y 
      0031B8 EE 01            [ 2]    3     ldw x,(1,x)
      0031BA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0031BE CD 31 82         [ 4] 4861 	call xstack_bound
      0031C1 CF 00 19         [ 2] 4862     ldw ptr16,x 
      0031C4 84               [ 1] 4863 	pop a 
      0031C5 85               [ 2] 4864 	popw x 
      0031C6 72 C7 00 19      [ 4] 4865 	ld [ptr16],a 
      0031CA 72 5C 00 1A      [ 1] 4866 	inc ptr8 
      0031CE 72 CF 00 19      [ 5] 4867 	ldw [ptr16],x 
      0031D2 81               [ 4] 4868 	ret 
                                   4869 
                                   4870 ;------------------------
                                   4871 ; BASIC: PICK expr 
                                   4872 ; get nième element on 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



                                   4873 ; xtack. 
                                   4874 ;-----------------------
      0031D3                       4875 xpick:
      0031D3 CD 19 CF         [ 4] 4876 	call func_args 
      0031D6 A1 01            [ 1] 4877 	cp a,#1 
      0031D8 27 03            [ 1] 4878 	jreq 1$
      0031DA CC 16 A5         [ 2] 4879 	jp syntax_error 
      0031DD                       4880 1$: _xpop 
      0031DD 90 F6            [ 1]    1     ld a,(y)
      0031DF 93               [ 1]    2     ldw x,y 
      0031E0 EE 01            [ 2]    3     ldw x,(1,x)
      0031E2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0031E6 CD 31 82         [ 4] 4881 	call xstack_bound
      0031E9 F6               [ 1] 4882     ld a,(x)
      0031EA EE 01            [ 2] 4883 	ldw x,(1,x)				
      0031EC 81               [ 4] 4884 	ret 
                                   4885 
                                   4886 
                                   4887 ;----------------------------
                                   4888 ; BASIC: AUTORUN \C | label  
                                   4889 ;  \C -> cancel autorun 
                                   4890 ;  addr -> register an 
                                   4891 ;    autorun program 
                                   4892 ;    this program execute at 
                                   4893 ;     reset/boot 
                                   4894 ;----------------------------
      0031ED                       4895 cmd_auto_run:
      0031ED CD 18 0C         [ 4] 4896 	call next_token 
      0031F0 A1 03            [ 1] 4897 	cp a,#TK_LABEL 
      0031F2 27 19            [ 1] 4898 	jreq 1$ 
      0031F4 A1 04            [ 1] 4899 	cp a,#TK_CHAR 
      0031F6 26 12            [ 1] 4900 	jrne 0$ 
      0031F8 F6               [ 1] 4901 	ld a,(x)
      0031F9 72 5C 00 01      [ 1] 4902 	inc in 
      0031FD A4 DF            [ 1] 4903 	and a,#0xDF 
      0031FF A1 43            [ 1] 4904 	cp a,#'C 
      003201 26 07            [ 1] 4905 	jrne 0$ 
      003203 AE 40 00         [ 2] 4906 	ldw x,#EEPROM_BASE 
      003206 CD 29 2D         [ 4] 4907 	call erase_header
      003209 81               [ 4] 4908 	ret 
      00320A CC 16 A5         [ 2] 4909 0$:	jp syntax_error
      00320D 89               [ 2] 4910 1$:	pushw x 
      00320E CD 18 25         [ 4] 4911 	call skip_string
      003211 85               [ 2] 4912 	popw x 
      003212 CD 32 43         [ 4] 4913 	call search_program
      003215 26 05            [ 1] 4914 	jrne 2$ 
      003217 A6 0A            [ 1] 4915 	ld a,#ERR_BAD_VALUE
      003219 CC 16 A7         [ 2] 4916 	jp tb_error 
      00321C 89               [ 2] 4917 2$: pushw x 
      00321D 72 5F 00 18      [ 1] 4918 	clr farptr 
      003221 AE 40 00         [ 2] 4919 	ldw x,#EEPROM_BASE
      003224 CF 00 19         [ 2] 4920 	ldw ptr16,x 
      003227 C6 32 41         [ 1] 4921 	ld a,AR_SIGN 
      00322A 5F               [ 1] 4922 	clrw x 	 
      00322B CD 07 8B         [ 4] 4923 	call write_byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      00322E C6 32 42         [ 1] 4924 	ld a,AR_SIGN+1
      003231 CD 07 8B         [ 4] 4925 	call write_byte 
      003234 7B 01            [ 1] 4926 	ld a,(1,sp)
      003236 CD 07 8B         [ 4] 4927 	call write_byte 
      003239 7B 02            [ 1] 4928 	ld a,(2,sp)
      00323B CD 07 8B         [ 4] 4929 	call write_byte 
      00323E                       4930 	_drop 2 
      00323E 5B 02            [ 2]    1     addw sp,#2 
      003240 81               [ 4] 4931 	ret 
                                   4932 
      003241 41 52                 4933 AR_SIGN: .ascii "AR" ; autorun signature 
                                   4934 
                                   4935 ;-------------------------------
                                   4936 ; search a program in flash 
                                   4937 ; memory with a label at first 
                                   4938 ; that correspond to name 
                                   4939 ; pointed by X 
                                   4940 ; input:
                                   4941 ;    x      *name 
                                   4942 ; output: 
                                   4943 ;    X     prog_addr|0
                                   4944 ;-------------------------------
                           000001  4945 	WLKPTR=1 
                           000003  4946 	PNAME=3
                           000005  4947 	LIMIT=5
                           000007  4948 	YSAVE=7
                           000006  4949 	VSIZE=6 
      003243                       4950 search_program:
      003243 90 89            [ 2] 4951 	pushw y 
      003245                       4952 	_vars VSIZE 
      003245 52 06            [ 2]    1     sub sp,#VSIZE 
      003247 1F 03            [ 2] 4953 	ldw (PNAME,sp),x 
      003249 CD 2B 55         [ 4] 4954 	call uflash 
      00324C 1F 05            [ 2] 4955 	ldw (LIMIT,sp),x 
      00324E AE 39 00         [ 2] 4956 	ldw x,#app_space 
      003251 1F 01            [ 2] 4957 1$:	ldw (WLKPTR,sp),x  
      003253 4F               [ 1] 4958 	clr a 
      003254 CD 25 2E         [ 4] 4959 	call is_program_addr
      003257 26 10            [ 1] 4960 	jrne 4$
      003259 1C 00 07         [ 2] 4961 	addw x,#7 
      00325C F6               [ 1] 4962 	ld a,(x)
      00325D A1 03            [ 1] 4963 	cp a,#TK_LABEL 
      00325F 26 08            [ 1] 4964 	jrne 4$ 
      003261 5C               [ 1] 4965 	incw x 
      003262 16 03            [ 2] 4966 	ldw y,(PNAME,sp)
      003264 CD 13 A4         [ 4] 4967 	call strcmp
      003267 26 0A            [ 1] 4968 	jrne 6$
      003269                       4969 4$: 
      003269 CD 29 F1         [ 4] 4970 	call skip_to_next
      00326C 13 05            [ 2] 4971 	cpw x,(LIMIT,sp)
      00326E 25 E1            [ 1] 4972 	jrult 1$
      003270 5F               [ 1] 4973 	clrw x 
      003271 20 05            [ 2] 4974 	jra 8$
      003273                       4975 6$: ; found label 
      003273 1E 01            [ 2] 4976 	ldw x,(WLKPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      003275 1C 00 04         [ 2] 4977 	addw x,#4 	
      003278                       4978 8$:	
      003278                       4979 	_drop VSIZE  
      003278 5B 06            [ 2]    1     addw sp,#VSIZE 
      00327A 90 85            [ 2] 4980 	popw y 
      00327C 81               [ 4] 4981 	ret 
                                   4982 
                                   4983 
                                   4984 ;-------------------------------
                                   4985 ; BASIC: CHAIN label [, line#]
                                   4986 ; Execute another program like it 
                                   4987 ; is a sub-routine. When the 
                                   4988 ; called program terminate 
                                   4989 ; execution continue at caller 
                                   4990 ; after CHAIN command. 
                                   4991 ; if a line# is given, the 
                                   4992 ; chained program start execution 
                                   4993 ; at this line#.
                                   4994 ;---------------------------------
                           000003  4995 	CHAIN_LN=3 
                           000005  4996 	CHAIN_ADDR=5 
                           000007  4997 	CHAIN_BP=7
                           000009  4998 	CHAIN_IN=9
                           00000A  4999 	CHAIN_COUNT=10 
                           00000B  5000 	CHAIN_TXTBGN=11 
                           00000D  5001 	CHAIN_TXTEND=13 
                           00000C  5002 	VSIZE=12 
                           000004  5003 	DISCARD=4 
      00327D                       5004 cmd_chain:
      00327D 85               [ 2] 5005 	popw x 
      00327E                       5006 	_vars VSIZE 
      00327E 52 0C            [ 2]    1     sub sp,#VSIZE 
      003280 89               [ 2] 5007 	pushw x
      003281 0F 03            [ 1] 5008 	clr (CHAIN_LN,sp) 
      003283 0F 04            [ 1] 5009 	clr (CHAIN_LN+1,sp)  
      003285 A6 03            [ 1] 5010 	ld a,#TK_LABEL 
      003287 CD 19 C2         [ 4] 5011 	call expect 
      00328A 89               [ 2] 5012 	pushw x 
      00328B CD 18 25         [ 4] 5013 	call skip_string
      00328E 85               [ 2] 5014 	popw x 
      00328F CD 32 43         [ 4] 5015 	call search_program 
      003292 5D               [ 2] 5016 	tnzw x  
      003293 26 05            [ 1] 5017 	jrne 1$ 
      003295 A6 0A            [ 1] 5018 0$:	ld a,#ERR_BAD_VALUE
      003297 CC 16 A7         [ 2] 5019 	jp tb_error 
      00329A 1F 05            [ 2] 5020 1$: ldw (CHAIN_ADDR,sp), x ; program addr 
      00329C CD 18 0C         [ 4] 5021     call next_token 
      00329F A1 08            [ 1] 5022 	cp a,#TK_COMMA 
      0032A1 26 0C            [ 1] 5023 	jrne 4$
      0032A3 A6 84            [ 1] 5024 	ld a,#TK_INTGR
      0032A5 CD 19 C2         [ 4] 5025 	call expect 
      0032A8 CD 18 3E         [ 4] 5026 	call get_int24 
      0032AB 1F 03            [ 2] 5027 	ldw (CHAIN_LN,sp),x
      0032AD 20 05            [ 2] 5028 	jra 6$ 
      0032AF                       5029 4$: _unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0032AF 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0032B4                       5030 6$: ; save chain context 
      0032B4 CE 00 04         [ 2] 5031 	ldw x,basicptr 
      0032B7 1F 07            [ 2] 5032 	ldw (CHAIN_BP,sp),x 
      0032B9 CE 00 01         [ 2] 5033 	ldw x,in
      0032BC 1F 09            [ 2] 5034 	ldw (CHAIN_IN,sp),x
      0032BE CE 00 1B         [ 2] 5035 	ldw x,txtbgn 
      0032C1 1F 0B            [ 2] 5036 	ldw (CHAIN_TXTBGN,sp),x
      0032C3 CE 00 1D         [ 2] 5037 	ldw x,txtend 
      0032C6 1F 0D            [ 2] 5038 	ldw (CHAIN_TXTEND,sp),x  
                                   5039 ; set chained program context 	
      0032C8 1E 05            [ 2] 5040 	ldw x,(CHAIN_ADDR,sp)
      0032CA CF 00 04         [ 2] 5041 	ldw basicptr,x 
      0032CD CF 00 1B         [ 2] 5042 	ldw txtbgn,x 
      0032D0 1D 00 02         [ 2] 5043 	subw x,#2
      0032D3 FE               [ 2] 5044 	ldw x,(x)
      0032D4 72 FB 05         [ 2] 5045 	addw x,(CHAIN_ADDR,sp)
      0032D7 CF 00 1D         [ 2] 5046 	ldw txtend,x  
      0032DA 1E 05            [ 2] 5047 	ldw x,(CHAIN_ADDR,sp)
      0032DC E6 02            [ 1] 5048 	ld a,(2,x)
      0032DE C7 00 02         [ 1] 5049 	ld count,a 
      0032E1 35 03 00 01      [ 1] 5050 	mov in,#3 
      0032E5 1E 03            [ 2] 5051 	ldw x,(CHAIN_LN,sp)
      0032E7 5D               [ 2] 5052 	tnzw x 
      0032E8 27 13            [ 1] 5053 	jreq 8$ 
      0032EA 90 89            [ 2] 5054 	pushw y
      0032EC 4F               [ 1] 5055 	clr a  
      0032ED CD 0C 45         [ 4] 5056 	call search_lineno
      0032F0 90 85            [ 2] 5057 	popw y 
      0032F2 5D               [ 2] 5058 	tnzw x 
      0032F3 27 A0            [ 1] 5059 	jreq 0$ 
      0032F5 CF 00 04         [ 2] 5060 	ldw basicptr,x 
      0032F8 E6 02            [ 1] 5061 	ld a,(2,x)
      0032FA C7 00 02         [ 1] 5062 	ld count,a 
      0032FD 72 5C 00 34      [ 1] 5063 8$: inc chain_level
      003301 85               [ 2] 5064 	popw x 
      003302                       5065 	_drop DISCARD
      003302 5B 04            [ 2]    1     addw sp,#DISCARD 
      003304 FC               [ 2] 5066 	jp (x)
                                   5067 
                                   5068 
                                   5069 ;------------------------------
                                   5070 ;      dictionary 
                                   5071 ; format:
                                   5072 ;   link:   2 bytes 
                                   5073 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   5074 ;   cmd_name: 16 byte max 
                                   5075 ;   code_addr: 2 bytes 
                                   5076 ;------------------------------
                                   5077 	.macro _dict_entry len,name,code_addr 
                                   5078 	.word LINK 
                                   5079 	LINK=.
                                   5080 name:
                                   5081 	.byte len   	
                                   5082 	.ascii "name"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



                                   5083 	.word code_addr  
                                   5084 	.endm 
                                   5085 
                           000000  5086 	LINK=0
                                   5087 ; respect alphabetic order for BASIC names from Z-A
                                   5088 ; this sort order is for a cleaner WORDS cmd output. 	
      003305                       5089 kword_end:
      003305                       5090 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      003305 00 00                    1 	.word LINK 
                           003307     2 	LINK=.
      003307                          3 XOR:
      003307 A3                       4 	.byte 3+F_XOR   	
      003308 58 4F 52                 5 	.ascii "XOR"
      00330B 00 8A                    6 	.word TK_XOR  
      00330D                       5091 	_dict_entry,5,WRITE,write  
      00330D 33 07                    1 	.word LINK 
                           00330F     2 	LINK=.
      00330F                          3 WRITE:
      00330F 05                       4 	.byte 5   	
      003310 57 52 49 54 45           5 	.ascii "WRITE"
      003315 2A 55                    6 	.word write  
      003317                       5092 	_dict_entry,5,WORDS,words 
      003317 33 0F                    1 	.word LINK 
                           003319     2 	LINK=.
      003319                          3 WORDS:
      003319 05                       4 	.byte 5   	
      00331A 57 4F 52 44 53           5 	.ascii "WORDS"
      00331F 2D D2                    6 	.word words  
      003321                       5093 	_dict_entry 4,WAIT,wait 
      003321 33 19                    1 	.word LINK 
                           003323     2 	LINK=.
      003323                          3 WAIT:
      003323 04                       4 	.byte 4   	
      003324 57 41 49 54              5 	.ascii "WAIT"
      003328 21 68                    6 	.word wait  
      00332A                       5094 	_dict_entry,3+F_IFUNC,USR,usr
      00332A 33 23                    1 	.word LINK 
                           00332C     2 	LINK=.
      00332C                          3 USR:
      00332C 13                       4 	.byte 3+F_IFUNC   	
      00332D 55 53 52                 5 	.ascii "USR"
      003330 2B 77                    6 	.word usr  
      003332                       5095 	_dict_entry,5,UNTIL,until 
      003332 33 2C                    1 	.word LINK 
                           003334     2 	LINK=.
      003334                          3 UNTIL:
      003334 05                       4 	.byte 5   	
      003335 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00333A 2F 07                    6 	.word until  
      00333C                       5096 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00333C 33 34                    1 	.word LINK 
                           00333E     2 	LINK=.
      00333E                          3 UFLASH:
      00333E 16                       4 	.byte 6+F_IFUNC   	
      00333F 55 46 4C 41 53 48        5 	.ascii "UFLASH"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003345 2B 55                    6 	.word uflash  
      003347                       5097 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003347 33 3E                    1 	.word LINK 
                           003349     2 	LINK=.
      003349                          3 UBOUND:
      003349 16                       4 	.byte 6+F_IFUNC   	
      00334A 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      003350 1C E3                    6 	.word ubound  
      003352                       5098 	_dict_entry,4,TONE,tone  
      003352 33 49                    1 	.word LINK 
                           003354     2 	LINK=.
      003354                          3 TONE:
      003354 04                       4 	.byte 4   	
      003355 54 4F 4E 45              5 	.ascii "TONE"
      003359 26 33                    6 	.word tone  
      00335B                       5099 	_dict_entry,2,TO,to
      00335B 33 54                    1 	.word LINK 
                           00335D     2 	LINK=.
      00335D                          3 TO:
      00335D 02                       4 	.byte 2   	
      00335E 54 4F                    5 	.ascii "TO"
      003360 22 D2                    6 	.word to  
      003362                       5100 	_dict_entry,5,TIMER,set_timer
      003362 33 5D                    1 	.word LINK 
                           003364     2 	LINK=.
      003364                          3 TIMER:
      003364 05                       4 	.byte 5   	
      003365 54 49 4D 45 52           5 	.ascii "TIMER"
      00336A 2E 3C                    6 	.word set_timer  
      00336C                       5101 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00336C 33 64                    1 	.word LINK 
                           00336E     2 	LINK=.
      00336E                          3 TIMEOUT:
      00336E 17                       4 	.byte 7+F_IFUNC   	
      00336F 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003376 2E 53                    6 	.word timeout  
      003378                       5102 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      003378 33 6E                    1 	.word LINK 
                           00337A     2 	LINK=.
      00337A                          3 TICKS:
      00337A 15                       4 	.byte 5+F_IFUNC   	
      00337B 54 49 43 4B 53           5 	.ascii "TICKS"
      003380 2C 23                    6 	.word get_ticks  
      003382                       5103 	_dict_entry,4,STOP,stop 
      003382 33 7A                    1 	.word LINK 
                           003384     2 	LINK=.
      003384                          3 STOP:
      003384 04                       4 	.byte 4   	
      003385 53 54 4F 50              5 	.ascii "STOP"
      003389 27 9C                    6 	.word stop  
      00338B                       5104 	_dict_entry,4,STEP,step 
      00338B 33 84                    1 	.word LINK 
                           00338D     2 	LINK=.
      00338D                          3 STEP:
      00338D 04                       4 	.byte 4   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00338E 53 54 45 50              5 	.ascii "STEP"
      003392 23 18                    6 	.word step  
      003394                       5105 	_dict_entry,5,SPIWR,spi_write
      003394 33 8D                    1 	.word LINK 
                           003396     2 	LINK=.
      003396                          3 SPIWR:
      003396 05                       4 	.byte 5   	
      003397 53 50 49 57 52           5 	.ascii "SPIWR"
      00339C 30 CE                    6 	.word spi_write  
      00339E                       5106 	_dict_entry,6,SPISEL,spi_select
      00339E 33 96                    1 	.word LINK 
                           0033A0     2 	LINK=.
      0033A0                          3 SPISEL:
      0033A0 06                       4 	.byte 6   	
      0033A1 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0033A7 30 F5                    6 	.word spi_select  
      0033A9                       5107 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      0033A9 33 A0                    1 	.word LINK 
                           0033AB     2 	LINK=.
      0033AB                          3 SPIRD:
      0033AB 15                       4 	.byte 5+F_IFUNC   	
      0033AC 53 50 49 52 44           5 	.ascii "SPIRD"
      0033B1 30 EE                    6 	.word spi_read  
      0033B3                       5108 	_dict_entry,5,SPIEN,spi_enable 
      0033B3 33 AB                    1 	.word LINK 
                           0033B5     2 	LINK=.
      0033B5                          3 SPIEN:
      0033B5 05                       4 	.byte 5   	
      0033B6 53 50 49 45 4E           5 	.ascii "SPIEN"
      0033BB 30 56                    6 	.word spi_enable  
      0033BD                       5109 	_dict_entry,5,SLEEP,sleep 
      0033BD 33 B5                    1 	.word LINK 
                           0033BF     2 	LINK=.
      0033BF                          3 SLEEP:
      0033BF 05                       4 	.byte 5   	
      0033C0 53 4C 45 45 50           5 	.ascii "SLEEP"
      0033C5 2B A6                    6 	.word sleep  
      0033C7                       5110     _dict_entry,4,SIZE,cmd_size 
      0033C7 33 BF                    1 	.word LINK 
                           0033C9     2 	LINK=.
      0033C9                          3 SIZE:
      0033C9 04                       4 	.byte 4   	
      0033CA 53 49 5A 45              5 	.ascii "SIZE"
      0033CE 1C B6                    6 	.word cmd_size  
      0033D0                       5111 	_dict_entry,4,SAVE,cmd_save 
      0033D0 33 C9                    1 	.word LINK 
                           0033D2     2 	LINK=.
      0033D2                          3 SAVE:
      0033D2 04                       4 	.byte 4   	
      0033D3 53 41 56 45              5 	.ascii "SAVE"
      0033D7 29 47                    6 	.word cmd_save  
      0033D9                       5112 	_dict_entry 3,RUN,cmd_run
      0033D9 33 D2                    1 	.word LINK 
                           0033DB     2 	LINK=.
      0033DB                          3 RUN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0033DB 03                       4 	.byte 3   	
      0033DC 52 55 4E                 5 	.ascii "RUN"
      0033DF 25 3F                    6 	.word cmd_run  
      0033E1                       5113 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0033E1 33 DB                    1 	.word LINK 
                           0033E3     2 	LINK=.
      0033E3                          3 RSHIFT:
      0033E3 16                       4 	.byte 6+F_IFUNC   	
      0033E4 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0033EA 2C 6D                    6 	.word rshift  
      0033EC                       5114 	_dict_entry,3+F_IFUNC,RND,random 
      0033EC 33 E3                    1 	.word LINK 
                           0033EE     2 	LINK=.
      0033EE                          3 RND:
      0033EE 13                       4 	.byte 3+F_IFUNC   	
      0033EF 52 4E 44                 5 	.ascii "RND"
      0033F2 2D 37                    6 	.word random  
      0033F4                       5115 	_dict_entry,6,RETURN,return 
      0033F4 33 EE                    1 	.word LINK 
                           0033F6     2 	LINK=.
      0033F6                          3 RETURN:
      0033F6 06                       4 	.byte 6   	
      0033F7 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0033FD 25 11                    6 	.word return  
      0033FF                       5116 	_dict_entry,7,RESTORE,restore 
      0033FF 33 F6                    1 	.word LINK 
                           003401     2 	LINK=.
      003401                          3 RESTORE:
      003401 07                       4 	.byte 7   	
      003402 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003409 2F 9E                    6 	.word restore  
      00340B                       5117 	_dict_entry 3,REM,remark 
      00340B 34 01                    1 	.word LINK 
                           00340D     2 	LINK=.
      00340D                          3 REM:
      00340D 03                       4 	.byte 3   	
      00340E 52 45 4D                 5 	.ascii "REM"
      003411 21 62                    6 	.word remark  
      003413                       5118 	_dict_entry,6,REBOOT,cold_start
      003413 34 0D                    1 	.word LINK 
                           003415     2 	LINK=.
      003415                          3 REBOOT:
      003415 06                       4 	.byte 6   	
      003416 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00341C 00 B5                    6 	.word cold_start  
      00341E                       5119 	_dict_entry,4+F_IFUNC,READ,read  
      00341E 34 15                    1 	.word LINK 
                           003420     2 	LINK=.
      003420                          3 READ:
      003420 14                       4 	.byte 4+F_IFUNC   	
      003421 52 45 41 44              5 	.ascii "READ"
      003425 30 08                    6 	.word read  
      003427                       5120 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003427 34 20                    1 	.word LINK 
                           003429     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      003429                          3 QKEY:
      003429 14                       4 	.byte 4+F_IFUNC   	
      00342A 51 4B 45 59              5 	.ascii "QKEY"
      00342E 2B 18                    6 	.word qkey  
      003430                       5121 	_dict_entry,3,PUT,xput 
      003430 34 29                    1 	.word LINK 
                           003432     2 	LINK=.
      003432                          3 PUT:
      003432 03                       4 	.byte 3   	
      003433 50 55 54                 5 	.ascii "PUT"
      003436 31 A0                    6 	.word xput  
      003438                       5122 	_dict_entry,4,PUSH,xpush   
      003438 34 32                    1 	.word LINK 
                           00343A     2 	LINK=.
      00343A                          3 PUSH:
      00343A 04                       4 	.byte 4   	
      00343B 50 55 53 48              5 	.ascii "PUSH"
      00343F 31 11                    6 	.word xpush  
      003441                       5123 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003441 34 3A                    1 	.word LINK 
                           003443     2 	LINK=.
      003443                          3 PORTI:
      003443 15                       4 	.byte 5+F_IFUNC   	
      003444 50 4F 52 54 49           5 	.ascii "PORTI"
      003449 2F 5D                    6 	.word const_porti  
      00344B                       5124 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      00344B 34 43                    1 	.word LINK 
                           00344D     2 	LINK=.
      00344D                          3 PORTG:
      00344D 15                       4 	.byte 5+F_IFUNC   	
      00344E 50 4F 52 54 47           5 	.ascii "PORTG"
      003453 2F 58                    6 	.word const_portg  
      003455                       5125 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003455 34 4D                    1 	.word LINK 
                           003457     2 	LINK=.
      003457                          3 PORTF:
      003457 15                       4 	.byte 5+F_IFUNC   	
      003458 50 4F 52 54 46           5 	.ascii "PORTF"
      00345D 2F 53                    6 	.word const_portf  
      00345F                       5126 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      00345F 34 57                    1 	.word LINK 
                           003461     2 	LINK=.
      003461                          3 PORTE:
      003461 15                       4 	.byte 5+F_IFUNC   	
      003462 50 4F 52 54 45           5 	.ascii "PORTE"
      003467 2F 4E                    6 	.word const_porte  
      003469                       5127 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003469 34 61                    1 	.word LINK 
                           00346B     2 	LINK=.
      00346B                          3 PORTD:
      00346B 15                       4 	.byte 5+F_IFUNC   	
      00346C 50 4F 52 54 44           5 	.ascii "PORTD"
      003471 2F 49                    6 	.word const_portd  
      003473                       5128 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003473 34 6B                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                           003475     2 	LINK=.
      003475                          3 PORTC:
      003475 15                       4 	.byte 5+F_IFUNC   	
      003476 50 4F 52 54 43           5 	.ascii "PORTC"
      00347B 2F 44                    6 	.word const_portc  
      00347D                       5129 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      00347D 34 75                    1 	.word LINK 
                           00347F     2 	LINK=.
      00347F                          3 PORTB:
      00347F 15                       4 	.byte 5+F_IFUNC   	
      003480 50 4F 52 54 42           5 	.ascii "PORTB"
      003485 2F 3F                    6 	.word const_portb  
      003487                       5130 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      003487 34 7F                    1 	.word LINK 
                           003489     2 	LINK=.
      003489                          3 PORTA:
      003489 15                       4 	.byte 5+F_IFUNC   	
      00348A 50 4F 52 54 41           5 	.ascii "PORTA"
      00348F 2F 3A                    6 	.word const_porta  
      003491                       5131 	_dict_entry 5,PRINT,print 
      003491 34 89                    1 	.word LINK 
                           003493     2 	LINK=.
      003493                          3 PRINT:
      003493 05                       4 	.byte 5   	
      003494 50 52 49 4E 54           5 	.ascii "PRINT"
      003499 20 1A                    6 	.word print  
      00349B                       5132 	_dict_entry,4+F_IFUNC,POUT,const_output
      00349B 34 93                    1 	.word LINK 
                           00349D     2 	LINK=.
      00349D                          3 POUT:
      00349D 14                       4 	.byte 4+F_IFUNC   	
      00349E 50 4F 55 54              5 	.ascii "POUT"
      0034A2 2F 7B                    6 	.word const_output  
      0034A4                       5133 	_dict_entry,3+F_IFUNC,POP,xpop 
      0034A4 34 9D                    1 	.word LINK 
                           0034A6     2 	LINK=.
      0034A6                          3 POP:
      0034A6 13                       4 	.byte 3+F_IFUNC   	
      0034A7 50 4F 50                 5 	.ascii "POP"
      0034AA 31 15                    6 	.word xpop  
      0034AC                       5134 	_dict_entry,4,POKE,poke 
      0034AC 34 A6                    1 	.word LINK 
                           0034AE     2 	LINK=.
      0034AE                          3 POKE:
      0034AE 04                       4 	.byte 4   	
      0034AF 50 4F 4B 45              5 	.ascii "POKE"
      0034B3 22 43                    6 	.word poke  
      0034B5                       5135 	_dict_entry,5,PMODE,pin_mode 
      0034B5 34 AE                    1 	.word LINK 
                           0034B7     2 	LINK=.
      0034B7                          3 PMODE:
      0034B7 05                       4 	.byte 5   	
      0034B8 50 4D 4F 44 45           5 	.ascii "PMODE"
      0034BD 2C A8                    6 	.word pin_mode  
      0034BF                       5136 	_dict_entry,4+F_IFUNC,PINP,const_input
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      0034BF 34 B7                    1 	.word LINK 
                           0034C1     2 	LINK=.
      0034C1                          3 PINP:
      0034C1 14                       4 	.byte 4+F_IFUNC   	
      0034C2 50 49 4E 50              5 	.ascii "PINP"
      0034C6 2F 80                    6 	.word const_input  
      0034C8                       5137 	_dict_entry,4+F_IFUNC,PICK,xpick 
      0034C8 34 C1                    1 	.word LINK 
                           0034CA     2 	LINK=.
      0034CA                          3 PICK:
      0034CA 14                       4 	.byte 4+F_IFUNC   	
      0034CB 50 49 43 4B              5 	.ascii "PICK"
      0034CF 31 D3                    6 	.word xpick  
      0034D1                       5138 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0034D1 34 CA                    1 	.word LINK 
                           0034D3     2 	LINK=.
      0034D3                          3 PEEK:
      0034D3 14                       4 	.byte 4+F_IFUNC   	
      0034D4 50 45 45 4B              5 	.ascii "PEEK"
      0034D8 22 64                    6 	.word peek  
      0034DA                       5139 	_dict_entry,5,PAUSE,pause 
      0034DA 34 D3                    1 	.word LINK 
                           0034DC     2 	LINK=.
      0034DC                          3 PAUSE:
      0034DC 05                       4 	.byte 5   	
      0034DD 50 41 55 53 45           5 	.ascii "PAUSE"
      0034E2 2B B1                    6 	.word pause  
      0034E4                       5140 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0034E4 34 DC                    1 	.word LINK 
                           0034E6     2 	LINK=.
      0034E6                          3 PAD:
      0034E6 13                       4 	.byte 3+F_IFUNC   	
      0034E7 50 41 44                 5 	.ascii "PAD"
      0034EA 31 0C                    6 	.word pad_ref  
      0034EC                       5141 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0034EC 34 E6                    1 	.word LINK 
                           0034EE     2 	LINK=.
      0034EE                          3 OR:
      0034EE 92                       4 	.byte 2+F_OR   	
      0034EF 4F 52                    5 	.ascii "OR"
      0034F1 00 89                    6 	.word TK_OR  
      0034F3                       5142 	_dict_entry,2,ON,cmd_on 
      0034F3 34 EE                    1 	.word LINK 
                           0034F5     2 	LINK=.
      0034F5                          3 ON:
      0034F5 02                       4 	.byte 2   	
      0034F6 4F 4E                    5 	.ascii "ON"
      0034F8 24 41                    6 	.word cmd_on  
      0034FA                       5143 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0034FA 34 F5                    1 	.word LINK 
                           0034FC     2 	LINK=.
      0034FC                          3 ODR:
      0034FC 13                       4 	.byte 3+F_IFUNC   	
      0034FD 4F 44 52                 5 	.ascii "ODR"
      003500 2F 62                    6 	.word const_odr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      003502                       5144 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      003502 34 FC                    1 	.word LINK 
                           003504     2 	LINK=.
      003504                          3 NOT:
      003504 73                       4 	.byte 3+F_NOT   	
      003505 4E 4F 54                 5 	.ascii "NOT"
      003508 00 87                    6 	.word TK_NOT  
      00350A                       5145 	_dict_entry,4,NEXT,next 
      00350A 35 04                    1 	.word LINK 
                           00350C     2 	LINK=.
      00350C                          3 NEXT:
      00350C 04                       4 	.byte 4   	
      00350D 4E 45 58 54              5 	.ascii "NEXT"
      003511 23 5A                    6 	.word next  
      003513                       5146 	_dict_entry,3,NEW,new
      003513 35 0C                    1 	.word LINK 
                           003515     2 	LINK=.
      003515                          3 NEW:
      003515 03                       4 	.byte 3   	
      003516 4E 45 57                 5 	.ascii "NEW"
      003519 27 E8                    6 	.word new  
      00351B                       5147 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00351B 35 15                    1 	.word LINK 
                           00351D     2 	LINK=.
      00351D                          3 LSHIFT:
      00351D 16                       4 	.byte 6+F_IFUNC   	
      00351E 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003524 2C 41                    6 	.word lshift  
      003526                       5148 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003526 35 1D                    1 	.word LINK 
                           003528     2 	LINK=.
      003528                          3 LOG2:
      003528 14                       4 	.byte 4+F_IFUNC   	
      003529 4C 4F 47 32              5 	.ascii "LOG2"
      00352D 2E A1                    6 	.word log2  
      00352F                       5149 	_dict_entry 4,LIST,cmd_list
      00352F 35 28                    1 	.word LINK 
                           003531     2 	LINK=.
      003531                          3 LIST:
      003531 04                       4 	.byte 4   	
      003532 4C 49 53 54              5 	.ascii "LIST"
      003536 1E ED                    6 	.word cmd_list  
      003538                       5150 	_dict_entry 3,LET,let 
      003538 35 31                    1 	.word LINK 
                           00353A     2 	LINK=.
      00353A                          3 LET:
      00353A 03                       4 	.byte 3   	
      00353B 4C 45 54                 5 	.ascii "LET"
      00353E 1C EE                    6 	.word let  
      003540                       5151 	_dict_entry,3+F_CFUNC,KEY,key 
      003540 35 3A                    1 	.word LINK 
                           003542     2 	LINK=.
      003542                          3 KEY:
      003542 23                       4 	.byte 3+F_CFUNC   	
      003543 4B 45 59                 5 	.ascii "KEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003546 2B 14                    6 	.word key  
      003548                       5152 	_dict_entry,7,IWDGREF,refresh_iwdg
      003548 35 42                    1 	.word LINK 
                           00354A     2 	LINK=.
      00354A                          3 IWDGREF:
      00354A 07                       4 	.byte 7   	
      00354B 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003552 2E 9C                    6 	.word refresh_iwdg  
      003554                       5153 	_dict_entry,6,IWDGEN,enable_iwdg
      003554 35 4A                    1 	.word LINK 
                           003556     2 	LINK=.
      003556                          3 IWDGEN:
      003556 06                       4 	.byte 6   	
      003557 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00355D 2E 5E                    6 	.word enable_iwdg  
      00355F                       5154 	_dict_entry,5,INPUT,input_var  
      00355F 35 56                    1 	.word LINK 
                           003561     2 	LINK=.
      003561                          3 INPUT:
      003561 05                       4 	.byte 5   	
      003562 49 4E 50 55 54           5 	.ascii "INPUT"
      003567 20 C3                    6 	.word input_var  
      003569                       5155 	_dict_entry,2,IF,if 
      003569 35 61                    1 	.word LINK 
                           00356B     2 	LINK=.
      00356B                          3 IF:
      00356B 02                       4 	.byte 2   	
      00356C 49 46                    5 	.ascii "IF"
      00356E 22 85                    6 	.word if  
      003570                       5156 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003570 35 6B                    1 	.word LINK 
                           003572     2 	LINK=.
      003572                          3 IDR:
      003572 13                       4 	.byte 3+F_IFUNC   	
      003573 49 44 52                 5 	.ascii "IDR"
      003576 2F 67                    6 	.word const_idr  
      003578                       5157 	_dict_entry,3,HEX,hex_base
      003578 35 72                    1 	.word LINK 
                           00357A     2 	LINK=.
      00357A                          3 HEX:
      00357A 03                       4 	.byte 3   	
      00357B 48 45 58                 5 	.ascii "HEX"
      00357E 1C A3                    6 	.word hex_base  
      003580                       5158 	_dict_entry,4,GOTO,goto 
      003580 35 7A                    1 	.word LINK 
                           003582     2 	LINK=.
      003582                          3 GOTO:
      003582 04                       4 	.byte 4   	
      003583 47 4F 54 4F              5 	.ascii "GOTO"
      003587 24 D3                    6 	.word goto  
      003589                       5159 	_dict_entry,5,GOSUB,gosub 
      003589 35 82                    1 	.word LINK 
                           00358B     2 	LINK=.
      00358B                          3 GOSUB:
      00358B 05                       4 	.byte 5   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      00358C 47 4F 53 55 42           5 	.ascii "GOSUB"
      003591 24 ED                    6 	.word gosub  
      003593                       5160 	_dict_entry,3,GET,cmd_get 
      003593 35 8B                    1 	.word LINK 
                           003595     2 	LINK=.
      003595                          3 GET:
      003595 03                       4 	.byte 3   	
      003596 47 45 54                 5 	.ascii "GET"
      003599 25 FB                    6 	.word cmd_get  
      00359B                       5161 	_dict_entry,4+F_IFUNC,FREE,free
      00359B 35 95                    1 	.word LINK 
                           00359D     2 	LINK=.
      00359D                          3 FREE:
      00359D 14                       4 	.byte 4+F_IFUNC   	
      00359E 46 52 45 45              5 	.ascii "FREE"
      0035A2 1C AD                    6 	.word free  
      0035A4                       5162 	_dict_entry,3,FOR,for 
      0035A4 35 9D                    1 	.word LINK 
                           0035A6     2 	LINK=.
      0035A6                          3 FOR:
      0035A6 03                       4 	.byte 3   	
      0035A7 46 4F 52                 5 	.ascii "FOR"
      0035AA 22 A2                    6 	.word for  
      0035AC                       5163 	_dict_entry,4,FCPU,fcpu 
      0035AC 35 A6                    1 	.word LINK 
                           0035AE     2 	LINK=.
      0035AE                          3 FCPU:
      0035AE 04                       4 	.byte 4   	
      0035AF 46 43 50 55              5 	.ascii "FCPU"
      0035B3 2C 99                    6 	.word fcpu  
      0035B5                       5164 	_dict_entry,5,ERASE,cmd_erase 
      0035B5 35 AE                    1 	.word LINK 
                           0035B7     2 	LINK=.
      0035B7                          3 ERASE:
      0035B7 05                       4 	.byte 5   	
      0035B8 45 52 41 53 45           5 	.ascii "ERASE"
      0035BD 28 4B                    6 	.word cmd_erase  
      0035BF                       5165 	_dict_entry,3,END,cmd_end  
      0035BF 35 B7                    1 	.word LINK 
                           0035C1     2 	LINK=.
      0035C1                          3 END:
      0035C1 03                       4 	.byte 3   	
      0035C2 45 4E 44                 5 	.ascii "END"
      0035C5 25 CF                    6 	.word cmd_end  
      0035C7                       5166 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0035C7 35 C1                    1 	.word LINK 
                           0035C9     2 	LINK=.
      0035C9                          3 EEPROM:
      0035C9 16                       4 	.byte 6+F_IFUNC   	
      0035CA 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0035D0 2F 85                    6 	.word const_eeprom_base  
      0035D2                       5167 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0035D2 35 C9                    1 	.word LINK 
                           0035D4     2 	LINK=.
      0035D4                          3 EEFREE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      0035D4 16                       4 	.byte 6+F_IFUNC   	
      0035D5 45 45 46 52 45 45        5 	.ascii "EEFREE"
      0035DB 1D 42                    6 	.word func_eefree  
      0035DD                       5168 	_dict_entry,4,EDIT,cmd_edit 
      0035DD 35 D4                    1 	.word LINK 
                           0035DF     2 	LINK=.
      0035DF                          3 EDIT:
      0035DF 04                       4 	.byte 4   	
      0035E0 45 44 49 54              5 	.ascii "EDIT"
      0035E4 1F B8                    6 	.word cmd_edit  
      0035E6                       5169 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0035E6 35 DF                    1 	.word LINK 
                           0035E8     2 	LINK=.
      0035E8                          3 DWRITE:
      0035E8 06                       4 	.byte 6+F_CMD   	
      0035E9 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0035EF 27 51                    6 	.word digital_write  
      0035F1                       5170 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0035F1 35 E8                    1 	.word LINK 
                           0035F3     2 	LINK=.
      0035F3                          3 DROP:
      0035F3 04                       4 	.byte 4   	
      0035F4 44 52 4F 50              5 	.ascii "DROP"
      0035F8 31 55                    6 	.word xdrop  
      0035FA                       5171 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0035FA 35 F3                    1 	.word LINK 
                           0035FC     2 	LINK=.
      0035FC                          3 DREAD:
      0035FC 15                       4 	.byte 5+F_IFUNC   	
      0035FD 44 52 45 41 44           5 	.ascii "DREAD"
      003602 27 1A                    6 	.word digital_read  
      003604                       5172 	_dict_entry,2,DO,do_loop
      003604 35 FC                    1 	.word LINK 
                           003606     2 	LINK=.
      003606                          3 DO:
      003606 02                       4 	.byte 2   	
      003607 44 4F                    5 	.ascii "DO"
      003609 2E F4                    6 	.word do_loop  
      00360B                       5173 	_dict_entry,3,DIR,cmd_dir
      00360B 36 06                    1 	.word LINK 
                           00360D     2 	LINK=.
      00360D                          3 DIR:
      00360D 03                       4 	.byte 3   	
      00360E 44 49 52                 5 	.ascii "DIR"
      003611 2A 09                    6 	.word cmd_dir  
      003613                       5174 	_dict_entry,3,DIM,cmd_dim 
      003613 36 0D                    1 	.word LINK 
                           003615     2 	LINK=.
      003615                          3 DIM:
      003615 03                       4 	.byte 3   	
      003616 44 49 4D                 5 	.ascii "DIM"
      003619 1D C6                    6 	.word cmd_dim  
      00361B                       5175 	_dict_entry,3,DEC,dec_base
      00361B 36 15                    1 	.word LINK 
                           00361D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      00361D                          3 DEC:
      00361D 03                       4 	.byte 3   	
      00361E 44 45 43                 5 	.ascii "DEC"
      003621 1C A8                    6 	.word dec_base  
      003623                       5176 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      003623 36 1D                    1 	.word LINK 
                           003625     2 	LINK=.
      003625                          3 DDR:
      003625 13                       4 	.byte 3+F_IFUNC   	
      003626 44 44 52                 5 	.ascii "DDR"
      003629 2F 6C                    6 	.word const_ddr  
      00362B                       5177 	_dict_entry,4,DATA,data  
      00362B 36 25                    1 	.word LINK 
                           00362D     2 	LINK=.
      00362D                          3 DATA:
      00362D 04                       4 	.byte 4   	
      00362E 44 41 54 41              5 	.ascii "DATA"
      003632 2F 8A                    6 	.word data  
      003634                       5178 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003634 36 2D                    1 	.word LINK 
                           003636     2 	LINK=.
      003636                          3 CR2:
      003636 13                       4 	.byte 3+F_IFUNC   	
      003637 43 52 32                 5 	.ascii "CR2"
      00363A 2F 76                    6 	.word const_cr2  
      00363C                       5179 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00363C 36 36                    1 	.word LINK 
                           00363E     2 	LINK=.
      00363E                          3 CR1:
      00363E 13                       4 	.byte 3+F_IFUNC   	
      00363F 43 52 31                 5 	.ascii "CR1"
      003642 2F 71                    6 	.word const_cr1  
      003644                       5180 	_dict_entry,5,CONST,cmd_const 
      003644 36 3E                    1 	.word LINK 
                           003646     2 	LINK=.
      003646                          3 CONST:
      003646 05                       4 	.byte 5   	
      003647 43 4F 4E 53 54           5 	.ascii "CONST"
      00364C 1D B2                    6 	.word cmd_const  
      00364E                       5181 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00364E 36 46                    1 	.word LINK 
                           003650     2 	LINK=.
      003650                          3 CHAR:
      003650 24                       4 	.byte 4+F_CFUNC   	
      003651 43 48 41 52              5 	.ascii "CHAR"
      003655 2A BE                    6 	.word func_char  
      003657                       5182 	_dict_entry,5,CHAIN,cmd_chain
      003657 36 50                    1 	.word LINK 
                           003659     2 	LINK=.
      003659                          3 CHAIN:
      003659 05                       4 	.byte 5   	
      00365A 43 48 41 49 4E           5 	.ascii "CHAIN"
      00365F 32 7D                    6 	.word cmd_chain  
      003661                       5183 	_dict_entry,3,BYE,bye 
      003661 36 59                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



                           003663     2 	LINK=.
      003663                          3 BYE:
      003663 03                       4 	.byte 3   	
      003664 42 59 45                 5 	.ascii "BYE"
      003667 2B 9D                    6 	.word bye  
      003669                       5184 	_dict_entry,5,BTOGL,bit_toggle
      003669 36 63                    1 	.word LINK 
                           00366B     2 	LINK=.
      00366B                          3 BTOGL:
      00366B 05                       4 	.byte 5   	
      00366C 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003671 21 EA                    6 	.word bit_toggle  
      003673                       5185 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      003673 36 6B                    1 	.word LINK 
                           003675     2 	LINK=.
      003675                          3 BTEST:
      003675 15                       4 	.byte 5+F_IFUNC   	
      003676 42 54 45 53 54           5 	.ascii "BTEST"
      00367B 22 0C                    6 	.word bit_test  
      00367D                       5186 	_dict_entry,4,BSET,bit_set 
      00367D 36 75                    1 	.word LINK 
                           00367F     2 	LINK=.
      00367F                          3 BSET:
      00367F 04                       4 	.byte 4   	
      003680 42 53 45 54              5 	.ascii "BSET"
      003684 21 A5                    6 	.word bit_set  
      003686                       5187 	_dict_entry,4,BRES,bit_reset
      003686 36 7F                    1 	.word LINK 
                           003688     2 	LINK=.
      003688                          3 BRES:
      003688 04                       4 	.byte 4   	
      003689 42 52 45 53              5 	.ascii "BRES"
      00368D 21 C7                    6 	.word bit_reset  
      00368F                       5188 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00368F 36 88                    1 	.word LINK 
                           003691     2 	LINK=.
      003691                          3 BIT:
      003691 13                       4 	.byte 3+F_IFUNC   	
      003692 42 49 54                 5 	.ascii "BIT"
      003695 2E CE                    6 	.word bitmask  
      003697                       5189 	_dict_entry,3,AWU,awu 
      003697 36 91                    1 	.word LINK 
                           003699     2 	LINK=.
      003699                          3 AWU:
      003699 03                       4 	.byte 3   	
      00369A 41 57 55                 5 	.ascii "AWU"
      00369D 2B D1                    6 	.word awu  
      00369F                       5190 	_dict_entry,7,AUTORUN,cmd_auto_run
      00369F 36 99                    1 	.word LINK 
                           0036A1     2 	LINK=.
      0036A1                          3 AUTORUN:
      0036A1 07                       4 	.byte 7   	
      0036A2 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      0036A9 31 ED                    6 	.word cmd_auto_run  
      0036AB                       5191 	_dict_entry,3+F_IFUNC,ASC,ascii
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      0036AB 36 A1                    1 	.word LINK 
                           0036AD     2 	LINK=.
      0036AD                          3 ASC:
      0036AD 13                       4 	.byte 3+F_IFUNC   	
      0036AE 41 53 43                 5 	.ascii "ASC"
      0036B1 2A D5                    6 	.word ascii  
      0036B3                       5192 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0036B3 36 AD                    1 	.word LINK 
                           0036B5     2 	LINK=.
      0036B5                          3 AND:
      0036B5 83                       4 	.byte 3+F_AND   	
      0036B6 41 4E 44                 5 	.ascii "AND"
      0036B9 00 88                    6 	.word TK_AND  
      0036BB                       5193 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      0036BB 36 B5                    1 	.word LINK 
                           0036BD     2 	LINK=.
      0036BD                          3 ALLOC:
      0036BD 05                       4 	.byte 5   	
      0036BE 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      0036C3 31 1F                    6 	.word xalloc  
      0036C5                       5194 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0036C5 36 BD                    1 	.word LINK 
                           0036C7     2 	LINK=.
      0036C7                          3 ADCREAD:
      0036C7 17                       4 	.byte 7+F_IFUNC   	
      0036C8 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0036CF 26 DE                    6 	.word analog_read  
      0036D1                       5195 	_dict_entry,5,ADCON,power_adc 
      0036D1 36 C7                    1 	.word LINK 
                           0036D3     2 	LINK=.
      0036D3                          3 ADCON:
      0036D3 05                       4 	.byte 5   	
      0036D4 41 44 43 4F 4E           5 	.ascii "ADCON"
      0036D9 26 8E                    6 	.word power_adc  
      0036DB                       5196 kword_dict::
      0036DB                       5197 	_dict_entry,3+F_IFUNC,ABS,abs
      0036DB 36 D3                    1 	.word LINK 
                           0036DD     2 	LINK=.
      0036DD                          3 ABS:
      0036DD 13                       4 	.byte 3+F_IFUNC   	
      0036DE 41 42 53                 5 	.ascii "ABS"
      0036E1 2C 2A                    6 	.word abs  
                                   5198 
                                   5199 
                                   5200 
                                   5201 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0036E3                         30 test:
      0036E3                         31     _vars VSIZE 
      0036E3 52 08            [ 2]    1     sub sp,#VSIZE 
      0036E5 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0036E8 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0036EA CE 00 0F         [ 2]   34     ldw x,ticks 
      0036ED 1F 01            [ 2]   35     ldw (T,sp),x
      0036EF                         36 1$: ; test add24 
      0036EF A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0036F1 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0036F4 C7 00 0C         [ 1]   39     ld acc24,a 
      0036F7 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0036FA A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0036FC AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0036FF CD 01 7E         [ 4]   43     call add24 
      003702 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003704 1D 00 01         [ 2]   45     subw x,#1
      003707 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      003709 26 E4            [ 1]   47     jrne 1$
      00370B CD 18 6B         [ 4]   48     call prt_acc24
      00370E A6 20            [ 1]   49     ld a,#SPACE 
      003710 CD 08 FF         [ 4]   50     call putc 
      003713 CE 00 0F         [ 2]   51     ldw x,ticks 
      003716 72 F0 01         [ 2]   52     subw x,(T,sp)
      003719 CD 18 54         [ 4]   53     call prt_i16  
      00371C A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



      00371E CD 08 FF         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003721 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003724 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003726 CE 00 0F         [ 2]   60     ldw x,ticks 
      003729 1F 01            [ 2]   61     ldw (T,sp),x 
      00372B                         62 2$: 
      00372B A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00372D AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003730 C7 00 0C         [ 1]   65     ld acc24,a 
      003733 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003736 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003738 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00373B CD 02 79         [ 4]   69     call mul24 
      00373E 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003740 1D 00 01         [ 2]   71     subw x,#1
      003743 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003745 26 E4            [ 1]   73     jrne 2$ 
      003747 CD 18 6B         [ 4]   74    call prt_acc24 
      00374A A6 20            [ 1]   75    ld a,#SPACE 
      00374C CD 08 FF         [ 4]   76    call putc 
      00374F CE 00 0F         [ 2]   77     ldw x,ticks 
      003752 72 F0 01         [ 2]   78     subw x,(T,sp)
      003755 CD 18 54         [ 4]   79     call prt_i16 
      003758 A6 0D            [ 1]   80     ld a,#CR 
      00375A CD 08 FF         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00375D CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003760 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003762 CE 00 0F         [ 2]   85     ldw x,ticks 
      003765 1F 01            [ 2]   86     ldw (T,sp),x 
      003767                         87 3$: 
      003767 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003769 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      00376C C7 00 0C         [ 1]   90     ld acc24,a 
      00376F CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003772 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003774 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003777 CD 02 79         [ 4]   94     call mul24 
      00377A 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      00377C 1D 00 01         [ 2]   96     subw x,#1
      00377F 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      003781 26 E4            [ 1]   98     jrne 3$ 
      003783 CD 18 6B         [ 4]   99     call prt_acc24    
      003786 A6 20            [ 1]  100     ld a,#SPACE 
      003788 CD 08 FF         [ 4]  101     call putc 
      00378B CE 00 0F         [ 2]  102     ldw x,ticks 
      00378E 72 F0 01         [ 2]  103     subw x,(T,sp)
      003791 CD 18 54         [ 4]  104     call prt_i16 
      003794 A6 0D            [ 1]  105     ld a,#CR 
      003796 CD 08 FF         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003799 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00379C 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]



      00379E CE 00 0F         [ 2]  110     ldw x,ticks 
      0037A1 1F 01            [ 2]  111     ldw (T,sp),x 
      0037A3                        112 4$:
      0037A3 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0037A5 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0037A8 C7 00 0C         [ 1]  115     ld acc24,a 
      0037AB CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0037AE A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0037B0 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0037B3 CD 02 79         [ 4]  119     call mul24 
      0037B6 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0037B8 1D 00 01         [ 2]  121     subw x,#1
      0037BB 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0037BD 26 E4            [ 1]  123     jrne 4$ 
      0037BF CD 18 6B         [ 4]  124     call prt_acc24 
      0037C2 A6 20            [ 1]  125     ld a,#SPACE 
      0037C4 CD 08 FF         [ 4]  126     call putc 
      0037C7 CE 00 0F         [ 2]  127     ldw x,ticks 
      0037CA 72 F0 01         [ 2]  128     subw x,(T,sp)
      0037CD CD 18 54         [ 4]  129     call prt_i16 
      0037D0 A6 0D            [ 1]  130     ld a,#CR 
      0037D2 CD 08 FF         [ 4]  131     call putc 
                                    132 ; test abs24 
      0037D5 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0037D8 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0037DA CE 00 0F         [ 2]  135     ldw x,ticks 
      0037DD 1F 01            [ 2]  136     ldw (T,sp),x 
      0037DF                        137 5$: 
      0037DF A6 FF            [ 1]  138     ld a,#0xff
      0037E1 AE FF FF         [ 2]  139     ldw x,#0xffff
      0037E4 CD 01 F3         [ 4]  140     call abs24 
      0037E7 C7 00 0C         [ 1]  141     ld acc24,a 
      0037EA CF 00 0D         [ 2]  142     ldw acc24+1,x
      0037ED 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0037EF 1D 00 01         [ 2]  144     subw x,#1
      0037F2 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0037F4 26 E9            [ 1]  146     jrne 5$ 
      0037F6 CD 18 6B         [ 4]  147     call prt_acc24 
      0037F9 A6 20            [ 1]  148     ld a,#SPACE 
      0037FB CD 08 FF         [ 4]  149     call putc 
      0037FE CE 00 0F         [ 2]  150     ldw x,ticks 
      003801 72 F0 01         [ 2]  151     subw x,(T,sp)
      003804 CD 18 54         [ 4]  152     call prt_i16 
      003807                        153 6$:
      003807 A6 0D            [ 1]  154     ld a,#CR 
      003809 CD 08 FF         [ 4]  155     call putc 
      00380C CD 38 52         [ 4]  156     call read_integer 
      00380F 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003814 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      003819 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      00381E CD 38 52         [ 4]  160     call read_integer 
      003821 C6 00 0C         [ 1]  161     ld a,acc24 
      003824 CE 00 0D         [ 2]  162     ldw x,acc16 
      003827 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      00382C 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]



      003831 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003836 CD 03 07         [ 4]  166     call div24 
      003839 88               [ 1]  167     push a 
      00383A 89               [ 2]  168     pushw x 
      00383B CD 18 6B         [ 4]  169     call prt_acc24 
      00383E A6 20            [ 1]  170     ld a,#SPACE 
      003840 CD 08 FF         [ 4]  171     call putc 
      003843 85               [ 2]  172     popw x
      003844 CF 00 0D         [ 2]  173     ldw acc16,x  
      003847 32 00 0C         [ 1]  174     pop acc24 
      00384A CD 18 6B         [ 4]  175     call prt_acc24
      00384D 20 B8            [ 2]  176     jra 6$
      00384F                        177     _drop VSIZE 
      00384F 5B 08            [ 2]    1     addw sp,#VSIZE 
      003851 81               [ 4]  178     ret 
                                    179 
                                    180 
      003852                        181 read_integer:
      003852 A6 3F            [ 1]  182     ld a,#'? 
      003854 CD 08 FF         [ 4]  183     call putc  
      003857 72 5F 00 02      [ 1]  184 	clr count  
      00385B CD 0A 61         [ 4]  185 	call readln 
      00385E AE 16 68         [ 2]  186 	ldw x,#tib 
      003861 3B 00 02         [ 1]  187 	push count
      003864 4B 00            [ 1]  188 	push #0 
      003866 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003869 5C               [ 1]  190 	incw x 
      00386A                        191 	_drop 2 
      00386A 5B 02            [ 2]    1     addw sp,#2 
      00386C 72 5F 00 01      [ 1]  192 	clr in 
      003870 CD 0E F5         [ 4]  193 	call get_token
      003873 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003875 27 0F            [ 1]  195 	jreq 3$ 
      003877 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003879 CD 0E F5         [ 4]  197 	call get_token 
      00387C A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00387E 27 03            [ 1]  199 	jreq 2$
      003880 CC 16 A5         [ 2]  200 	jp syntax_error
      003883                        201 2$:
      003883 CD 02 1D         [ 4]  202 	call neg_acc24  	
      003886                        203 3$: 
      003886 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003900                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003900                         30 app_space::
      003900 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003902 00 00                   32 app_size: .word 0 
      003904                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0036DD R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0036D3 R
    ADCON_ID=  000002     |   4 ADCREAD    0036C7 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      0036BD R   |   4 AND        0036B5 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 AR_SIGN    003241 R   |   4 ASC        0036AD R   |     ASC_IDX =  000006 
    ATMP    =  000001     |     ATTRIB  =  000002     |   4 AUTORUN    0036A1 R
  4 AUTO_RUN   00015C R   |   4 AWU        003699 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        003691 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCKS  =  000005     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       003688 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       00367F R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      003675 R
    BTEST_ID=  000010     |   4 BTOGL      00366B R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        003663 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAIN      003659 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    CHAIN_AD=  000005     |     CHAIN_BP=  000007     |     CHAIN_CN=  000008 
    CHAIN_CO=  00000A     |     CHAIN_IN=  000009     |     CHAIN_LN=  000003 
    CHAIN_TX=  00000B     |     CHAIN_TX=  00000D     |   4 CHAR       003650 R
    CHAR_IDX=  000016     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     CODE_ADD=  000001 
    COMMA   =  00002C     |   4 CONST      003646 R   |     CONST_ID=  0000B6 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CR1        00363E R
    CR1_IDX =  00001A     |   4 CR2        003636 R   |     CR2_IDX =  000018 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       00362D R
    DATA_IDX=  00001C     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   4 DDR        003625 R
    DDR_IDX =  00001E     |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   4 DEC        00361D R   |     DEC_IDX =  000020 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        003615 R   |   4 DIR        00360D R   |     DISCARD =  000004 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         003606 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      0035FC R   |     DREAD_ID=  000024     |   4 DROP       0035F3 R
  4 DWRITE     0035E8 R   |     DWRITE_I=  000026     |   4 EDIT       0035DF R
    EDIT_IDX=  000028     |   4 EEFREE     0035D4 R   |     EEFREE_I=  0000B8 
  4 EEPROM     0035C9 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        0035C1 R   |     END_IDX =  00002C     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      0035B7 R
  4 ERASED     0029E4 R   |     ERASE_ID=  00002E     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_NO_P=  000012     |     ERR_OVER=  000010 
    ERR_RD_O=  000011     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       0035AE R   |     FCPU_IDX=  000030 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001ECD R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLN_REJE=  000006     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        0035A6 R   |     FOR_IDX =  000034     |   4 FREE       00359D R
    FREE_IDX=  000088     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_AND   =  000080     |     F_CFUNC =  000020     |     F_CMD   =  000000 
    F_CONST =  000030     |     F_IFUNC =  000010     |     F_NOT   =  000070 
    F_OR    =  000090     |     F_XOR   =  0000A0     |   4 GET        003595 R
    GET_IDX =  0000B4     |   4 GOSUB      00358B R   |     GOSUB_ID=  000036 
  4 GOTO       003582 R   |     GOTO_IDX=  000038     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        00357A R   |     HEX_IDX =  00003A 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        003572 R
    IDR_IDX =  00003C     |   4 IF         00356B R   |     IF_IDX  =  00003E 
    IN      =  000005     |     INCR    =  000001     |     INP     =  000000 
  4 INPUT      003561 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000040     |     INPUT_PU=  000001 
    INT24   =  000005     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     003556 R   |     IWDGEN_I=  000042     |   4 IWDGREF    00354A R
    IWDGREF_=  000044     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        003542 R
    KEY_END =  000083     |     KEY_IDX =  000046     |     KW_TYPE_=  0000F0 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        00353A R   |     LET_IDX =  000048     |     LF      =  00000A 
    LIMIT   =  000005     |     LINENO  =  000005     |   4 LINES_RE   001F8F R
  4 LINK    =  0036DD R   |   4 LIST       003531 R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       003528 R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     00351D R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000001 
    NAME_MAX=  00000F     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        003515 R   |     NEW_IDX =  000052     |   4 NEXT       00350C R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        003504 R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        0034FC R
    ODR_IDX =  000054     |   4 ON         0034F5 R   |     ONOFF   =  000003 
    ON_IDX  =  0000B2     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         0034EE R   |     OR_IDX  =  0000FC     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        0034E6 R   |     PAD_IDX =  000056     |     PAD_SIZE=  000080 
  4 PAUSE      0034DC R   |     PAUSE_ID=  000058     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       0034D3 R   |     PEEK_IDX=  00005C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PG_SIZE =  000001     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   4 PICK       0034CA R   |     PINNO   =  000001 
  4 PINP       0034C1 R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      0034B7 R   |     PMODE_ID=  00005A     |     PNAME   =  000003 
  4 POKE       0034AE R   |     POKE_IDX=  000060     |   4 POP        0034A6 R
  4 PORTA      003489 R   |   4 PORTB      00347F R   |   4 PORTC      003475 R
  4 PORTD      00346B R   |   4 PORTE      003461 R   |   4 PORTF      003457 R
  4 PORTG      00344D R   |   4 PORTI      003443 R   |   4 POUT       00349D R
    POUT_IDX=  000062     |     PREV    =  000001     |     PRG_SIZE=  000003 
  4 PRINT      003493 R   |     PROD    =  000001     |     PROD_SIG=  000004 
  4 PROG_ADD   001EA3 R   |   4 PROG_SIZ   001EB5 R   |     PRTA_IDX=  000066 
    PRTB_IDX=  000068     |     PRTC_IDX=  00006A     |     PRTD_IDX=  00006C 
    PRTE_IDX=  00006E     |     PRTF_IDX=  000070     |     PRTG_IDX=  000072 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    PRTI_IDX=  000074     |     PRT_IDX =  000064     |     PSIZE   =  00000B 
    PSTR    =  000003     |   4 PUSH       00343A R   |   4 PUT        003432 R
  4 QKEY       003429 R   |     QKEY_IDX=  000076     |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001EDE R
    RAM_SIZE=  001800     |     RBT_IDX =  00007A     |   4 READ       003420 R
    READ_IDX=  000078     |   4 REBOOT     003415 R   |     RECLEN  =  000005 
    REC_LEN =  000003     |     REC_XTRA=  000005     |   4 REG_A      0004DA R
  4 REG_CC     0004DE R   |   4 REG_PC     0004CE R   |   4 REG_SP     0004E3 R
  4 REG_X      0004D6 R   |   4 REG_Y      0004D2 R   |     RELOP   =  000001 
  4 REM        00340D R   |     REM_IDX =  00007C     |   4 RESTORE    003401 R
    REST_IDX=  00007E     |     RETL1   =  000001     |   4 RETURN     0033F6 R
    RET_ADDR=  000001     |     RET_BPTR=  000003     |     RET_IDX =  000080 
    RET_INW =  000005     |   4 RND        0033EE R   |     RND_IDX =  000082 
    RONLY   =  000005     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     0033E3 R   |     RSHIFT_I=  000084     |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        0033DB R   |     RUN_IDX =  000086 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     R_A     =  000001 
    R_CC    =  000009     |     R_PC    =  00000A     |     R_X     =  000002 
    R_Y     =  000004     |   4 SAVE       0033D2 R   |     SAVE_IDX=  000032 
    SAV_ACC1=  000006     |     SAV_ACC2=  000008     |     SAV_COUN=  00000A 
    SAV_IN  =  000009     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   0029E2 R   |   4 SIZE       0033C9 R
    SIZE_IDX=  0000B0     |     SKIP    =  000005     |   4 SLEEP      0033BF R
    SLEEP_ID=  00008A     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      0033B5 R   |     SPIEN_ID=  00008E 
  4 SPIRD      0033AB R   |     SPIRD_ID=  00008C     |   4 SPISEL     0033A0 R
    SPISEL_I=  000090     |   4 SPIWR      003396 R   |     SPIWR_ID=  000092 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     000491 R
  4 STEP       00338D R   |     STEP_IDX=  000094     |   4 STOP       003384 R
    STOP_IDX=  000096     |     STR     =  000003     |   4 STR_BYTE   001EC6 R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |   4 SysCall    000012 R
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      00337A R
    TICKS_ID=  000098     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    00336E R
  4 TIMER      003364 R   |     TIMER_ID=  00009A     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000088     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_NOT  =  000087     |     TK_OR   =  000089     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000007     |     TK_SHARP=  000009 
    TK_VAR  =  000085     |     TK_XOR  =  00008A     |     TMROUT_I=  00009C 
  4 TO         00335D R   |   4 TONE       003354 R   |     TONE_IDX=  0000A0 
    TOWRITE =  000005     |     TO_IDX  =  00009E     |   4 Timer4Up   000013 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     003349 R   |     UBOUND_I=  0000A2 
  4 UBTN_Han   00005A R   |   4 UFLASH     00333E R   |     UFLASH_I=  0000A4 
  4 UNTIL      003334 R   |     UNTIL_ID=  0000A6     |     US      =  00001F 
  4 USER_ABO   000062 R   |   4 USR        00332C R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000A8 
  4 Uart1RxH   00087C R   |   4 UserButt   000036 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VAR_NAME=  000001     |     VSIZE   =  000008 
    VT      =  00000B     |   4 WAIT       003323 R   |     WAIT_IDX=  0000AA 
    WCNT    =  000003     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |     WLKPTR  =  000001 
  4 WORDS      003319 R   |     WORDS_ID=  0000AC     |   4 WRITE      00330F R
    WRITE_ID=  0000AE     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        003307 R   |     XOR_IDX =  0000FE 
    XSAVE   =  000002     |     XSTACK_E=  001773     |     XSTACK_S=  000014 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000005 
  4 abs        002C2A R   |   4 abs24      0001F3 R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000BC7 R   |   4 add24      00017E R   |   4 add_char   001345 R
  4 add_spac   00113D R   |   4 analog_r   0026DE R   |   4 and_cond   001BDD R
  4 and_fact   001BAD R   |   4 app        003904 R   |   4 app_sign   003900 R
  4 app_size   003902 R   |   4 app_spac   003900 GR  |   4 arduino_   002D17 R
  4 arg_list   0019D4 R   |   5 array_si   000020 R   |   4 ascii      002AD5 R
  4 at_tst     000FAF R   |   4 atoi24     0018F6 GR  |   4 atoi_exi   001965 R
  4 awu        002BD1 R   |   4 awu02      002BE4 R   |   4 bad_port   002B50 R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       002655 R
  4 beep_1kh   002628 GR  |   4 bin_exit   000E16 R   |   4 bit_rese   0021C7 R
  4 bit_set    0021A5 R   |   4 bit_test   00220C R   |   4 bit_togg   0021EA R
  4 bitmask    002ECE R   |   4 bkslsh_t   000F5C R   |   4 bksp       000966 R
  2 block_bu   0016B8 GR  |   4 block_er   000765 R   |   4 break_po   0027CA R
  4 bye        002B9D R   |   5 chain_le   000034 R   |   4 clear_au   0008B3 R
  4 clear_ba   0014B1 R   |   4 clear_bl   0028E5 R   |   4 clear_va   001409 R
  4 clock_in   00007D R   |   4 cmd_auto   0031ED R   |   4 cmd_chai   00327D R
  4 cmd_cons   001DB2 R   |   4 cmd_dim    001DC6 R   |   4 cmd_dim1   001DD0 R
  4 cmd_dim2   001DD6 R   |   4 cmd_dir    002A09 R   |   4 cmd_edit   001FB8 R
  4 cmd_end    0025CF R   |   4 cmd_eras   00284B R   |   4 cmd_get    0025FB R
  4 cmd_itf    0004FE R   |   4 cmd_line   001734 R   |   4 cmd_list   001EED R
  4 cmd_name   001365 R   |   4 cmd_on     002441 R   |   4 cmd_run    00253F R
  4 cmd_save   002947 R   |   4 cmd_size   001CB6 R   |   4 cold_sta   0000B5 R
  4 colon_ts   000F83 R   |   4 comma_ts   000F8E R   |   4 comp_msg   001684 R
  4 compile    0010A9 GR  |   4 conditio   001C2F R   |   4 const_cr   002F71 R
  4 const_cr   002F76 R   |   4 const_dd   002F6C R   |   4 const_ee   002F85 R
  4 const_id   002F67 R   |   4 const_in   002F80 R   |   4 const_od   002F62 R
  4 const_ou   002F7B R   |   4 const_po   002F3A R   |   4 const_po   002F3F R
  4 const_po   002F44 R   |   4 const_po   002F49 R   |   4 const_po   002F4E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Symbol Table

  4 const_po   002F53 R   |   4 const_po   002F58 R   |   4 const_po   002F5D R
  4 convert_   000D82 R   |   4 convert_   00092A R   |   4 copy_com   000FE4 R
  5 count      000002 GR  |   4 cp24       0001B8 R   |   4 cp24_ax    0001EA R
  4 cp_loop    001985 R   |   4 cpl24      0001FA R   |   4 cpy_cmd_   001125 R
  4 cpy_quot   001165 R   |   4 cs_high    003107 R   |   4 dash_tst   000FA4 R
  4 data       002F8A R   |   4 data_err   003003 R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001CA8 R
  4 decomp_l   0011FD R   |   4 decompil   0011B5 GR  |   4 del_line   000C70 R
  4 delete_l   000A53 R   |   4 delete_n   000976 R   |   4 delete_u   000A18 R
  4 digital_   00271A R   |   4 digital_   002751 R   |   4 div24      000307 R
  4 divu24_8   0002E9 R   |   4 do_loop    002EF4 R   |   4 do_progr   000758 R
  4 dup24      00016F R   |   5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR
  4 enable_i   002E5E R   |   4 end_at_l   001F3E R   |   4 eql_tst    00102F R
  4 equal      001358 R   |   4 eras0      002855 R   |   4 erase_ex   000789 R
  4 erase_fl   00077F R   |   4 erase_he   00292D R   |   4 erase_pr   0027F6 R
  4 err_bad_   0015AD R   |   4 err_buf_   001623 R   |   4 err_cmd_   001571 R
  4 err_div0   001536 R   |   4 err_dupl   00158B R   |   4 err_math   00151D R
  4 err_mem_   0014F8 R   |   4 err_msg    0014D2 R   |   4 err_no_a   0015B9 R
  4 err_no_d   0015EC R   |   4 err_no_f   001610 R   |   4 err_no_l   001545 R
  4 err_no_p   0015FC R   |   4 err_not_   00159C R   |   4 err_not_   001656 R
  4 err_over   001630 R   |   4 err_read   00163A R   |   4 err_run_   00155B R
  4 err_synt   00150F R   |   4 escaped    000D97 GR  |   4 expect     0019C2 R
  4 expressi   001B16 R   |   4 factor     001A1E R   |   5 farptr     000018 R
  4 fcpu       002C99 R   |   4 fetchc     000605 R   |   4 fill_wri   0028D5 R
  4 final_te   000BC0 R   |   5 flags      000022 GR  |   4 for        0022A2 R
  4 free       001CAD R   |   5 free_eep   000024 R   |   7 free_ram   000090 R
  4 func_arg   0019CF R   |   4 func_cha   002ABE R   |   4 func_eef   001D42 R
  4 ge         00135A R   |   4 get_addr   001834 R   |   4 get_arra   0019F0 R
  4 get_char   00184E R   |   4 get_esca   000936 R   |   4 get_int2   00183E R
  4 get_targ   0023CF R   |   4 get_targ   0023DD R   |   4 get_tick   002C23 R
  4 get_toke   000EF5 GR  |   4 get_valu   001D31 R   |   4 getc       00090F GR
  4 gosub      0024ED R   |   4 gosub_1    0024F8 R   |   4 gosub_2    0024FE R
  4 goto       0024D3 R   |   4 goto_1     0024DD R   |   4 gpio       002B25 R
  4 gt         001356 R   |   4 gt_tst     00103A R   |   4 hex_base   001CA3 R
  4 hex_dump   000645 R   |   4 if         002285 R   |   5 in         000001 GR
  5 in.saved   000003 GR  |   5 in.w       000000 GR  |   4 incr_far   000860 R
  4 input_ex   00215D R   |   4 input_lo   0020C7 R   |   4 input_va   0020C3 R
  4 insert_c   0009D5 R   |   4 insert_l   000CDC R   |   4 interp_l   001778 R
  4 interpre   001750 R   |   4 invalid    00056D R   |   4 invalid_   0005DB R
  4 is_alnum   000E49 GR  |   4 is_alpha   000E2F GR  |   4 is_data_   002F90 R
  4 is_digit   000E40 GR  |   4 is_erase   0029E6 R   |   4 is_minus   001F13 R
  4 is_progr   00252E R   |   4 is_symbo   000E52 R   |   4 itoa       001891 GR
  4 itoa_loo   0018B3 R   |   4 jp_to_ta   0024E0 R   |   4 key        002B14 R
  4 kword_di   0036DB GR  |   4 kword_en   003305 R   |   4 le         00135F R
  4 ledoff     0003CD R   |   4 ledon      0003C8 R   |   4 ledtoggl   0003D2 R
  4 left_par   0003DB R   |   4 let        001CEE GR  |   4 let_arra   001CFC R
  4 let_dvar   0017B1 R   |   4 let_eval   001D04 R   |   4 let_var    001D01 R
  4 lines_sk   001F23 R   |   4 list_exi   001F73 R   |   4 list_loo   001F51 R
  4 log2       002EA1 R   |   4 look_tar   002400 R   |   4 loop_bac   0023B2 R
  5 loop_dep   00001F R   |   4 loop_don   0023C7 R   |   4 lshift     002C41 R
  4 lt         00135D R   |   4 lt_tst     001063 R   |   4 mem_peek   000589 R
  4 mod24      0003A1 R   |   4 move       0013C5 GR  |   4 move_dow   0013E4 R
  4 move_era   0006E7 R   |   4 move_exi   001405 R   |   4 move_lef   0009AD R
  4 move_loo   0013E9 R   |   4 move_prg   000727 R   |   4 move_rig   0009BB R
  4 move_up    0013D6 R   |   4 mul24      000279 R   |   4 mul_char   001347 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 251.
Hexadecimal [24-Bits]

Symbol Table

  4 mulu24_8   00023A R   |   4 nbr_tst    000F28 R   |   4 ne         001362 R
  4 neg24      000203 R   |   4 neg_acc2   00021D R   |   4 neg_ax     000215 R
  4 new        0027E8 R   |   4 next       00235A R   |   4 next_lin   001758 R
  4 next_tok   00180C GR  |   4 no_match   001997 R   |   4 number     00060B R
  4 open_gap   000CA5 R   |   4 other      00108C R   |   4 overwrit   000BEC R
  2 pad        0016B8 GR  |   4 pad_ref    00310C R   |   4 parse_ad   0004E8 R
  4 parse_bi   000DF4 R   |   4 parse_in   000D9F R   |   4 parse_ke   000E75 R
  4 parse_qu   000D4A R   |   4 parse_sy   000E5D R   |   4 pause      002BB1 R
  4 pause02    002BC4 R   |   4 peek       002264 R   |   4 peek_byt   0005A5 R
  4 pin_mode   002CA8 R   |   4 plus_tst   001003 R   |   4 poke       002243 R
  4 power_ad   00268E R   |   4 prcnt_ts   001024 R   |   4 print      00201A R
  4 print_fa   0005EA R   |   4 print_he   000C23 GR  |   4 print_re   000427 R
  4 print_st   00057D R   |   4 print_to   001879 R   |   4 prog_siz   001E5C R
  4 program_   001E64 R   |   4 program_   000701 R   |   4 program_   000727 R
  4 prt_acc2   00186B R   |   4 prt_basi   001FF6 R   |   4 prt_i16    001854 R
  4 prt_loop   00201E R   |   4 prt_peek   0003AA GR  |   4 prt_reg1   000408 R
  4 prt_reg8   0003E6 R   |   5 ptr16      000019 GR  |   5 ptr8       00001A R
  4 putc       0008FF GR  |   4 puts       00095C GR  |   4 qgetc      000908 GR
  4 qkey       002B18 GR  |   4 qmark_ts   000FBA R   |   4 qsign      0028CA R
  4 random     002D37 R   |   4 read       003008 R   |   4 read01     00300D R
  4 read_int   003852 R   |   4 readln     000A61 GR  |   4 readln_l   000A70 R
  4 readln_q   000C09 R   |   4 refresh_   002E9C R   |   4 relation   001B4E R
  4 relop_st   00134A R   |   4 remark     002162 GR  |   4 repl       000527 R
  4 repl_exi   00054F R   |   4 reset_co   00201C R   |   4 rest_con   0020B3 R
  4 restore    002F9E R   |   4 return     002511 R   |   4 right_al   001153 GR
  4 row_alig   000845 R   |   4 row_eras   0006BA R   |   4 row_eras   0006E7 R
  4 row_loop   000628 R   |   4 rparnt_t   000F78 R   |   4 rshift     002C6D R
  7 rsign      00008C R   |   7 rsize      00008E R   |   4 rt_msg     001672 R
  4 run_app    00012A R   |   4 run_it     00259C R   |   4 run_it_0   00259E R
  5 rx1_head   00002E R   |   5 rx1_queu   000026 R   |   5 rx1_tail   00002F R
  4 save_con   0020A3 R   |   4 scan_blo   00086E R   |   4 search_d   001977 GR
  4 search_e   0019BF R   |   4 search_f   0028F9 R   |   4 search_l   000C45 GR
  4 search_l   000C54 R   |   4 search_n   001D6B R   |   4 search_n   00197B R
  4 search_p   003243 R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002D07 R   |   4 send_esc   000984 R   |   4 send_par   00098F R
  4 set_data   002FD4 R   |   4 set_time   002E3C R   |   4 sharp_ts   000F99 R
  4 show_row   000616 R   |   4 single_c   001340 R   |   4 skip       000EE2 R
  4 skip_str   001825 R   |   4 skip_to_   0029F1 R   |   4 slash_ts   001019 R
  4 sleep      002BA6 R   |   4 software   001418 R   |   4 spaces     0009C9 GR
  4 spi_clea   0030A1 R   |   4 spi_disa   003089 R   |   4 spi_enab   003056 R
  4 spi_rcv_   0030C3 R   |   4 spi_read   0030EE R   |   4 spi_sele   0030F5 R
  4 spi_send   0030AD R   |   4 spi_writ   0030CE R   |   2 stack_fu   001774 GR
  2 stack_un   001800 R   |   4 star_tst   00100E R   |   4 start_fr   001F1E R
  4 step       002318 R   |   4 stop       00279C R   |   4 store_lo   002347 R
  4 str_matc   0019A4 R   |   4 str_tst    000F18 R   |   4 strcmp     0013A4 R
  4 strcpy     0013B5 GR  |   4 strlen     001399 GR  |   4 sub24      00019B R
  4 symb_loo   000E5E R   |   4 syntax_e   0016A5 GR  |   4 system_i   00145E R
  5 tab_widt   000023 GR  |   4 tb_error   0016A7 GR  |   4 term       001AD3 R
  4 term01     001ADB R   |   4 term_exi   001B13 R   |   4 test       0036E3 R
  4 test_p     000575 R   |   2 tib        001668 GR  |   4 tick_tst   000FD2 R
  5 ticks      00000F R   |   4 timeout    002E53 R   |   5 timer      000012 GR
  4 timer2_i   000093 R   |   4 timer4_i   0000A0 R   |   4 tk_id      001695 R
  4 to         0022D2 R   |   4 to_eepro   000750 R   |   4 to_flash   000755 R
  4 to_hex_c   000C3A GR  |   4 to_upper   0018EA GR  |   4 token_ch   0010A2 R
  4 token_ex   0010A6 R   |   4 tone       002633 R   |   4 try_next   002FE1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 252.
Hexadecimal [24-Bits]

Symbol Table

  5 txtbgn     00001B GR  |   5 txtend     00001D GR  |   4 uart1_ge   00090F GR
  4 uart1_in   0008BA R   |   4 uart1_pu   0008FF GR  |   4 uart1_qg   000908 GR
  4 uart1_se   0008CA R   |   4 ubound     001CE3 R   |   4 uflash     002B55 R
  4 unlock_e   000684 R   |   4 unlock_f   00069F R   |   4 until      002F07 R
  4 user_int   000049 R   |   4 usr        002B77 R   |   4 var_name   0011AB GR
  5 vars       000035 GR  |   4 wait       002168 R   |   4 warm_ini   00148F R
  4 warm_sta   001731 R   |   4 words      002DD2 R   |   4 words_co   002E26 R
  4 write      002A55 R   |   4 write_bl   00080A GR  |   4 write_bu   000741 R
  4 write_by   00078B R   |   4 write_ee   0007C7 R   |   4 write_ex   000800 R
  4 write_fl   0007B1 R   |   4 write_nb   00082F R   |   4 xalloc     00311F R
  4 xdrop      003155 R   |   4 xpick      0031D3 R   |   4 xpop       003115 R
  4 xpush      003111 R   |   4 xput       0031A0 R   |   4 xstack_b   003182 R
  2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 253.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3904   flags    0
   5 DATA       size     83   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

