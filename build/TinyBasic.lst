ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                                
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001B                         65 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001D                         66 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001E                         67 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000020                         68 flags:: .blkb 1 ; various boolean flags
      000021                         69 tab_width:: .blkb 1 ; print colon width (default 6)
      000022                         70 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002A                         71 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002B                         72 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     73 
      000030                         74 	.bndry 16 
      000030                         75 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     76 ; keep 'free_ram' as last variable 
      000064                         77 free_ram: ; from here RAM free for BASIC text 
                                     78 
                                     79 ;;-----------------------------------
                                     80     .area SSEG (ABS)
                                     81 ;; working buffers and stack at end of RAM. 	
                                     82 ;;-----------------------------------
      001690                         83     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         84 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         85 pad:: .ds PAD_SIZE             ; working buffer
      001760                         86 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         87 stack_unf: ; stack underflow ; control_stack bottom 
                                     88 
                                     89 ;;--------------------------------------
                                     90     .area HOME 
                                     91 ;; interrupt vector table at 0x8000
                                     92 ;;--------------------------------------
      000000 82 00 04 6F             93     int cold_start			; RESET vector 
                           000000    94 .if DEBUG
                                     95 	int TrapHandler 		;TRAP  software interrupt
                           000001    96 .else
      000004 82 00 00 00             97 	int NonHandledInterrupt ;TRAP  software interrupt
                                     98 .endif
      000008 82 00 00 00             99 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            100 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            101 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            102 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000018 82 00 00 00            103 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            104 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            105 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 55            106 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            107 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            108 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            109 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            110 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            111 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            112 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            113 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            114 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            115 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            116 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            117 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            118 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            119 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00            120 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00            121 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 40            122 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            123 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            124 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            125 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            126 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            127 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            128 	int NonHandledInterrupt ;int29  not used
                                    129 
                                    130 ;---------------------------------------
                                    131     .area CODE
                                    132 ;---------------------------------------
                           000000   133 .if DEBUG
                                    134 .asciz "STM8_TBI" ; I like to put module name here.
                                    135 .endif 
                                    136 
                                    137 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    138 ; non handled interrupt 
                                    139 ; reset MCU
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        141 NonHandledInterrupt:
      000000 71                     142     .byte 0x71  ; invalid opcode reinitialize MCU
                                    143 
                                    144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    145 ; auto wakeup from halt
                                    146 ; at iret, program continue 
                                    147 ; after hatl instruction
                                    148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        149 AWUHandler:
      000001 72 19 50 F0      [ 1]  150 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  151 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  152 	clr AWU_TBR 
      00000E 80               [11]  153 	iret
                                    154 
                                    155 ;--------------------------
                                    156 ; UART1 receive character
                                    157 ; CTRL-C (ASCII 3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    158 ; cancel program execution
                                    159 ; and fall back to command line
                                    160 ;--------------------------
      00000F                        161 Uart1RxHandler: ; console receive char 
      00000F 72 0B 52 30 2B   [ 2]  162 	btjf UART1_SR,#UART_SR_RXNE,5$
      000014 C6 52 31         [ 1]  163 	ld a,UART1_DR 
      000017 A1 03            [ 1]  164 	cp a,#CTRL_C 
      000019 26 06            [ 1]  165 	jrne 2$
      00001B CD 02 B2         [ 4]  166 	call putc 
      00001E CC 00 68         [ 2]  167 	jp user_interrupted
      000021                        168 2$:
      000021 A1 18            [ 1]  169 	cp a,#CAN ; CTRL_X 
      000023 26 03            [ 1]  170 	jrne 3$
      000025 CC 04 6F         [ 2]  171 	jp cold_start 	
      000028 AE 00 22         [ 2]  172 3$:	ldw x,#rx1_queue  
      00002B 88               [ 1]  173 	push a 
      00002C 9F               [ 1]  174 	ld a,xl 
      00002D CB 00 2B         [ 1]  175 	add a,rx1_tail 
      000030 97               [ 1]  176 	ld xl,a
      000031 84               [ 1]  177 	pop a  
      000032 F7               [ 1]  178 	ld (x),a
      000033 72 5C 00 2B      [ 1]  179 	inc rx1_tail 
      000037 A6 07            [ 1]  180 	ld a,#RX_QUEUE_SIZE-1
      000039 C4 00 2B         [ 1]  181 	and a,rx1_tail 
      00003C C7 00 2B         [ 1]  182 	ld rx1_tail,a  
      00003F                        183 5$:
      00003F 80               [11]  184 	iret 
                                    185 
                                    186 ;------------------------------------
                                    187 ; software interrupt handler  
                                    188 ;------------------------------------
                           000000   189 .if DEBUG 
                                    190 TrapHandler:
                                    191 	bset flags,#FTRAP 
                                    192 	call print_registers
                                    193 	call cmd_itf
                                    194 	bres flags,#FTRAP 	
                                    195 	iret
                                    196 .endif 
                                    197 
                                    198 ;------------------------------
                                    199 ; TIMER 4 is used to maintain 
                                    200 ; a milliseconds 'ticks' counter
                                    201 ; and decrement 'timer' varaiable
                                    202 ;--------------------------------
      000040                        203 Timer4UpdateHandler:
      000040 72 5F 53 42      [ 1]  204 	clr TIM4_SR 
      000044 CE 00 0E         [ 2]  205 	ldw x,ticks
      000047 5C               [ 1]  206 	incw x
      000048 CF 00 0E         [ 2]  207 	ldw ticks,x 
      00004B CE 00 10         [ 2]  208 	ldw x,timer
                                    209 ;	tnzw x 
      00004E 27 04            [ 1]  210 	jreq 1$
      000050 5A               [ 2]  211 	decw x 
      000051 CF 00 10         [ 2]  212 	ldw timer,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000054                        213 1$:	
      000054 80               [11]  214 	iret 
                                    215 
                                    216 
                                    217 ;------------------------------------
                                    218 ; Triggered by pressing USER UserButton 
                                    219 ; on NUCLEO card.
                                    220 ; This is used to abort a progam lock 
                                    221 ; in infinite loop. 
                                    222 ;------------------------------------
      000055                        223 UserButtonHandler:
                                    224 ; wait button release
      000055 5F               [ 1]  225 	clrw x
      000056 5A               [ 2]  226 1$: decw x 
      000057 26 FD            [ 1]  227 	jrne 1$
      000059 72 09 50 15 F8   [ 2]  228 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    229 ; if MCU suspended by SLEEP resume program
      00005E 72 07 00 20 05   [ 2]  230     btjf flags,#FSLEEP,2$
      000063 72 17 00 20      [ 1]  231 	bres flags,#FSLEEP 
      000067 80               [11]  232 	iret
      000068                        233 2$:	
      000068                        234 user_interrupted:
      000068 72 00 00 20 02   [ 2]  235     btjt flags,#FRUN,4$
      00006D 20 0A            [ 2]  236 	jra UBTN_Handler_exit 
      00006F                        237 4$:	; program interrupted by user 
      00006F 72 11 00 20      [ 1]  238 	bres flags,#FRUN 
      000073 AE 00 8C         [ 2]  239 	ldw x,#USER_ABORT
      000076 CD 00 00         [ 4]  240 	call puts 
      000079                        241 UBTN_Handler_exit:
      000079 AE 17 FF         [ 2]  242     ldw x,#STACK_EMPTY 
      00007C 94               [ 1]  243     ldw sp,x
      00007D 9A               [ 1]  244 	rim 
      00007E CE 00 19         [ 2]  245 	ldw x,txtbgn 
      000081 A3 1E 80         [ 2]  246 	cpw x,#app_space 
      000084 22 03            [ 1]  247 	jrugt 5$
      000086 CD 05 51         [ 4]  248 	call clear_basic 
      000089 CC 07 6B         [ 2]  249 5$:	jp warm_start
                                    250 
      00008C 0A 50 72 6F 67 72 61   251 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    252 
                                    253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    254 ;    peripherals initialization
                                    255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    256 
                                    257 ;----------------------------------------
                                    258 ; inialize MCU clock 
                                    259 ; input:
                                    260 ;   A 		source  HSI | 1 HSE 
                                    261 ;   XL      CLK_CKDIVR , clock divisor 
                                    262 ; output:
                                    263 ;   none 
                                    264 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000A7                        265 clock_init:	
      0000A7 C1 50 C3         [ 1]  266 	cp a,CLK_CMSR 
      0000AA 27 0C            [ 1]  267 	jreq 2$ ; no switching required 
                                    268 ; select clock source 
      0000AC 72 12 50 C5      [ 1]  269 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000B0 C7 50 C4         [ 1]  270 	ld CLK_SWR,a
      0000B3 C1 50 C3         [ 1]  271 1$:	cp a,CLK_CMSR
      0000B6 26 FB            [ 1]  272 	jrne 1$
      0000B8                        273 2$: 	
                                    274 ; HSI and cpu clock divisor 
      0000B8 9F               [ 1]  275 	ld a,xl 
      0000B9 C7 50 C6         [ 1]  276 	ld CLK_CKDIVR,a  
      0000BC 81               [ 4]  277 	ret
                                    278 
                                    279 ;----------------------------------
                                    280 ; TIMER2 used as audio tone output 
                                    281 ; on port D:5.
                                    282 ; channel 1 configured as PWM mode 1 
                                    283 ;-----------------------------------  
                           00F424   284 TIM2_CLK_FREQ=62500
      0000BD                        285 timer2_init:
      0000BD 72 1A 50 C7      [ 1]  286 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000C1 35 60 53 05      [ 1]  287  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C5 35 08 53 0C      [ 1]  288 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C9 81               [ 4]  289 	ret 
                                    290 
                                    291 ;---------------------------------
                                    292 ; TIM4 is configured to generate an 
                                    293 ; interrupt every millisecond 
                                    294 ;----------------------------------
      0000CA                        295 timer4_init:
      0000CA 72 18 50 C7      [ 1]  296 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CE 35 07 53 45      [ 1]  297 	mov TIM4_PSCR,#7 ; prescale 128  
      0000D2 35 7D 53 46      [ 1]  298 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D6 35 05 53 40      [ 1]  299 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000DA 72 10 53 41      [ 1]  300 	bset TIM4_IER,#TIM4_IER_UIE
      0000DE 81               [ 4]  301 	ret
                                    302 
                                    303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    304 ;  routines to write to FLASH, EEPROM 
                                    305 ;  and OPTION 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 
                                    308 ;----------------------------------
                                    309 ; unlock EEPROM/OPT for writing/erasing
                                    310 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    311 ; input:
                                    312 ;  none
                                    313 ; output:
                                    314 ;  none 
                                    315 ;----------------------------------
      0000DF                        316 unlock_eeprom:
      0000DF 35 00 50 5B      [ 1]  317 	mov FLASH_CR2,#0 
      0000E3 35 FF 50 5C      [ 1]  318 	mov FLASH_NCR2,#0xFF 
      0000E7 35 AE 50 64      [ 1]  319 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0000EB 35 56 50 64      [ 1]  320     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000EF 72 07 50 5F FB   [ 2]  321 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000F4 81               [ 4]  322 	ret
                                    323 
                                    324 ;----------------------------------
                                    325 ; unlock FLASH for writing/erasing
                                    326 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    327 ; input:
                                    328 ;  none
                                    329 ; output:
                                    330 ;  none
                                    331 ;----------------------------------
      0000F5                        332 unlock_flash:
      0000F5 35 00 50 5B      [ 1]  333 	mov FLASH_CR2,#0 
      0000F9 35 FF 50 5C      [ 1]  334 	mov FLASH_NCR2,#0xFF 
      0000FD 35 56 50 62      [ 1]  335 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000101 35 AE 50 62      [ 1]  336 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000105 72 03 50 5F FB   [ 2]  337 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      00010A 81               [ 4]  338 	ret
                                    339 
                                    340 ;----------------------------
                                    341 ; erase block code must be 
                                    342 ; executed from RAM
                                    343 ; input:
                                    344 ;-----------------------------
      00010B                        345 row_erase:
      00010B 35 20 50 5B      [ 1]  346 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00010F 35 DF 50 5C      [ 1]  347 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000113 4F               [ 1]  348 	clr a 
      000114 90 5F            [ 1]  349 	clrw y 
      000116 91 A7 00 16      [ 1]  350 	ldf ([farptr],y),a
      00011A 90 5C            [ 1]  351     incw y
      00011C 91 A7 00 16      [ 1]  352 	ldf ([farptr],y),a
      000120 90 5C            [ 1]  353     incw y
      000122 91 A7 00 16      [ 1]  354 	ldf ([farptr],y),a
      000126 90 5C            [ 1]  355     incw y
      000128 91 A7 00 16      [ 1]  356 	ldf ([farptr],y),a
      00012C 72 05 50 5F FB   [ 2]  357 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000131 81               [ 4]  358 	ret
      000132                        359 row_erase_end:
                                    360 
                                    361 ; copy erase_start in RAM 
      000132                        362 move_erase_to_ram:
      000132 AE 01 32         [ 2]  363 	ldw x,#row_erase_end 
      000135 1D 01 0B         [ 2]  364 	subw x,#row_erase
      000138 CF 00 0C         [ 2]  365 	ldw acc16,x 
      00013B AE 16 90         [ 2]  366 	ldw x,#tib 
      00013E 90 AE 01 0B      [ 2]  367 	ldw y,#row_erase 
      000142 CD 03 B6         [ 4]  368 	call move 
      000145 81               [ 4]  369 	ret 
                                    370 
                                    371 ;-----------------------------------
                                    372 ; block programming must be 
                                    373 ; executed from RAM 
                                    374 ; initial contidions: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    375 ; 	memory unlocked
                                    376 ;   bit PRG set in 
                                    377 ; input:
                                    378 ;   x        128 bytes row to program 
                                    379 ;   farptr   row address 
                                    380 ; output:
                                    381 ;   none 
                                    382 ;----------------------------------
                           000001   383 	BCNT=1 
      000146                        384 program_row:
      000146 4B 80            [ 1]  385 	push #BLOCK_SIZE  
                                    386 ;enable block programming 
      000148 72 10 50 5B      [ 1]  387 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00014C 72 11 50 5C      [ 1]  388 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000150 90 5F            [ 1]  389 	clrw y 
      000152 F6               [ 1]  390 1$:	ld a,(x)
      000153 91 A7 00 16      [ 1]  391 	ldf ([farptr],y),a
      000157 5C               [ 1]  392 	incw x 
      000158 90 5C            [ 1]  393 	incw y 
      00015A 0A 01            [ 1]  394 	dec (BCNT,sp)
      00015C 26 F4            [ 1]  395 	jrne 1$
                                    396 ; wait EOP bit 
      00015E 72 05 50 5F FB   [ 2]  397 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000163                        398 	_drop 1 
      000163 5B 01            [ 2]    1     addw sp,#1 
      000165 81               [ 4]  399 	ret 
      000166                        400 program_row_end:
                                    401 
                                    402 ;-------------------------
                                    403 ; move program_row to RAM 
                                    404 ; at txtubound address 
                                    405 ;------------------------
      000166                        406 move_prg_to_ram:
      000166 AE 01 66         [ 2]  407 	ldw x,#program_row_end 
      000169 1D 01 46         [ 2]  408 	subw x,#program_row 
      00016C CF 00 0C         [ 2]  409 	ldw acc16,x 
      00016F AE 16 90         [ 2]  410 	ldw x,#tib 
      000172 90 AE 01 46      [ 2]  411 	ldw y,#program_row 
      000176 CD 03 B6         [ 4]  412 	call move 
      000179 81               [ 4]  413 	ret 
                                    414 
                                    415 
                                    416 ;-----------------------------
                                    417 ; write a row in FLASH/EEPROM 
                                    418 ; input:
                                    419 ;    farptr   destination address 
                                    420 ;    x        source address 
                                    421 ;-----------------------------
      00017A                        422 write_row:
      00017A 89               [ 2]  423 	pushw x 
      00017B 72 5D 00 16      [ 1]  424 	tnz farptr 
      00017F 26 1C            [ 1]  425 	jrne to_flash 
      000181 AE 80 00         [ 2]  426 	ldw x,#FLASH_BASE 
      000184 C3 00 17         [ 2]  427 	cpw x,farptr+1 
      000187 24 14            [ 1]  428 	jruge to_flash 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000189                        429 to_eeprom:
      000189 AE 40 00         [ 2]  430 	ldw x,#EEPROM_BASE 
      00018C C3 00 17         [ 2]  431 	cpw x,farptr+1 
      00018F 24 01            [ 1]  432 	jruge 1$
      000191 81               [ 4]  433 	ret ; bad address 
      000192 AE 47 FF         [ 2]  434 1$: ldw x,#EEPROM_END 
      000195 23 01            [ 2]  435 	jrule 2$ 
      000197 81               [ 4]  436 	ret ; bad address 
      000198 CD 00 DF         [ 4]  437 2$:	call unlock_eeprom
      00019B 20 03            [ 2]  438 	jra do_programming
      00019D                        439 to_flash:
      00019D CD 00 F5         [ 4]  440 	call unlock_flash 
      0001A0                        441 do_programming:
      0001A0 85               [ 2]  442 	popw x 
      0001A1 CD 16 90         [ 4]  443 	call tib
      0001A4 72 13 50 5F      [ 1]  444 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001A8 72 17 50 5F      [ 1]  445 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001AC 81               [ 4]  446 	ret 
                                    447 
                                    448 
                                    449 ;-----------------------------------
                                    450 ; erase flash or EEPROM block
                                    451 ; a blow is 128 bytes 
                                    452 ; input:
                                    453 ;   farptr  address row begin
                                    454 ; output:
                                    455 ;   none
                                    456 ;--------------------------------------
      0001AD                        457 block_erase:
      0001AD CE 00 17         [ 2]  458 	ldw x,farptr+1
      0001B0 A3 1E 80         [ 2]  459 	cpw x,#app_space 
      0001B3 2A 17            [ 1]  460 	jrpl erase_flash 
                                    461 ; erase eeprom block
      0001B5 A3 40 00         [ 2]  462 	cpw x,#EEPROM_BASE 
      0001B8 24 01            [ 1]  463 	jruge 1$
      0001BA 81               [ 4]  464 	ret ; bad address 
      0001BB AE 47 FF         [ 2]  465 1$: ldw x,#EEPROM_END 
      0001BE 23 01            [ 2]  466 	jrule 2$ 
      0001C0 81               [ 4]  467 	ret ; bad address 
      0001C1 CD 00 DF         [ 4]  468 2$:	call unlock_eeprom 
      0001C4 CD 16 90         [ 4]  469 	call tib 
      0001C7 72 17 50 5F      [ 1]  470 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001CB 81               [ 4]  471 	ret 
                                    472 ; erase flash block:
      0001CC                        473 erase_flash:
      0001CC CD 00 F5         [ 4]  474 	call unlock_flash 
      0001CF CD 16 90         [ 4]  475 	call tib 
      0001D2 72 13 50 5F      [ 1]  476     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001D6 81               [ 4]  477 	ret 
                                    478 
                                    479 
                                    480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    481 ; write a byte to FLASH or EEPROM/OPTION  
                                    482 ; input:
                                    483 ;    a  		byte to write
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    484 ;    farptr  	address
                                    485 ;    x          farptr[x]
                                    486 ; output:
                                    487 ;    none
                                    488 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    489 	; variables locales
                           000001   490 	BTW = 1   ; byte to write offset on stack
                           000002   491 	OPT = 2   ; OPTION flag offset on stack
                           000002   492 	VSIZE = 2
      0001D7                        493 write_byte:
      0001D7 90 89            [ 2]  494 	pushw y
      0001D9                        495 	_vars VSIZE
      0001D9 52 02            [ 2]    1     sub sp,#VSIZE 
      0001DB 6B 01            [ 1]  496 	ld (BTW,sp),a ; byte to write 
      0001DD 0F 02            [ 1]  497 	clr (OPT,sp)  ; OPTION flag
                                    498 ; put addr[15:0] in Y, for bounds check.
      0001DF 90 CE 00 17      [ 2]  499 	ldw y,farptr+1   ; Y=addr15:0
                                    500 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001E3 72 5D 00 16      [ 1]  501 	tnz farptr 
      0001E7 26 14            [ 1]  502 	jrne write_flash
      0001E9 90 A3 1E 80      [ 2]  503     cpw y,#app_space 	 
      0001ED 24 0E            [ 1]  504     jruge write_flash
      0001EF 90 A3 40 00      [ 2]  505 	cpw y,#EEPROM_BASE  
      0001F3 25 52            [ 1]  506     jrult write_exit
      0001F5 90 A3 48 7F      [ 2]  507 	cpw y,#OPTION_END 
      0001F9 22 4C            [ 1]  508 	jrugt write_exit
      0001FB 20 16            [ 2]  509 	jra write_eeprom 
                                    510 ; write program memory
      0001FD                        511 write_flash:
      0001FD CD 00 F5         [ 4]  512 	call unlock_flash 
      000200 9B               [ 1]  513 1$:	sim 
      000201 7B 01            [ 1]  514 	ld a,(BTW,sp)
      000203 92 A7 00 16      [ 4]  515 	ldf ([farptr],x),a ; farptr[x]=A
      000207 72 05 50 5F FB   [ 2]  516 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00020C 9A               [ 1]  517     rim 
      00020D 72 13 50 5F      [ 1]  518     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000211 20 34            [ 2]  519     jra write_exit
                                    520 ; write eeprom and option
      000213                        521 write_eeprom:
      000213 CD 00 DF         [ 4]  522 	call unlock_eeprom
                                    523 	; check for data eeprom or option eeprom
      000216 90 A3 48 00      [ 2]  524 	cpw y,#OPTION_BASE
      00021A 2B 08            [ 1]  525 	jrmi 1$
      00021C 90 A3 48 80      [ 2]  526 	cpw y,#OPTION_END+1
      000220 2A 02            [ 1]  527 	jrpl 1$
      000222 03 02            [ 1]  528 	cpl (OPT,sp)
      000224                        529 1$: 
      000224 0D 02            [ 1]  530     tnz (OPT,sp)
      000226 27 08            [ 1]  531     jreq 2$
                                    532 	; pour modifier une option il faut modifier ces 2 bits
      000228 72 1E 50 5B      [ 1]  533     bset FLASH_CR2,#FLASH_CR2_OPT
      00022C 72 1F 50 5C      [ 1]  534     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000230                        535 2$: 
      000230 7B 01            [ 1]  536     ld a,(BTW,sp)
      000232 92 A7 00 16      [ 4]  537     ldf ([farptr],x),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000236 0D 02            [ 1]  538     tnz (OPT,sp)
      000238 27 08            [ 1]  539     jreq 3$
      00023A 5C               [ 1]  540     incw x
      00023B 7B 01            [ 1]  541     ld a,(BTW,sp)
      00023D 43               [ 1]  542     cpl a
      00023E 92 A7 00 16      [ 4]  543     ldf ([farptr],x),a
      000242 72 05 50 5F FB   [ 2]  544 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000247                        545 write_exit:
      000247                        546 	_drop VSIZE 
      000247 5B 02            [ 2]    1     addw sp,#VSIZE 
      000249 90 85            [ 2]  547 	popw y
      00024B 81               [ 4]  548     ret
                                    549 
                                    550 ;--------------------------------------------
                                    551 ; write a data block to eeprom or flash 
                                    552 ; input:
                                    553 ;   Y        source address   
                                    554 ;   X        array index  destination  farptr[x]
                                    555 ;   BSIZE    block size bytes 
                                    556 ;   farptr   write address , byte* 
                                    557 ; output:
                                    558 ;	X 		after last byte written 
                                    559 ;   Y 		after last byte read 
                                    560 ;  farptr   point after block
                                    561 ;---------------------------------------------
      00024C                        562 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00024C                        563 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    564 	; local var 
                           000001   565 	XSAVE=1 
                           000002   566 	VSIZE=2 
      00024C                        567 write_block:
      00024C                        568 	_vars VSIZE
      00024C 52 02            [ 2]    1     sub sp,#VSIZE 
      00024E 1F 01            [ 2]  569 	ldw (XSAVE,sp),x 
      000250 1E 05            [ 2]  570 	ldw x,(BSIZE,sp) 
      000252 27 13            [ 1]  571 	jreq 9$
      000254 1E 01            [ 2]  572 1$:	ldw x,(XSAVE,sp)
      000256 90 F6            [ 1]  573 	ld a,(y)
      000258 CD 01 D7         [ 4]  574 	call write_byte 
      00025B 5C               [ 1]  575 	incw x 
      00025C 90 5C            [ 1]  576 	incw y 
      00025E 1F 01            [ 2]  577 	ldw (XSAVE,sp),x
      000260 1E 05            [ 2]  578 	ldw x,(BSIZE,sp)
      000262 5A               [ 2]  579 	decw x
      000263 1F 05            [ 2]  580 	ldw (BSIZE,sp),x 
      000265 26 ED            [ 1]  581 	jrne 1$
      000267                        582 9$:
      000267 1E 01            [ 2]  583 	ldw x,(XSAVE,sp)
      000269 CD 13 79         [ 4]  584 	call incr_farptr
      00026C                        585 	_drop VSIZE
      00026C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00026E 81               [ 4]  586 	ret 
                                    587 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    588 
                                    589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    590 ;;   UART1 subroutines
                                    591 ;;   used for user interface 
                                    592 ;;   communication channel.
                                    593 ;;   settings: 
                                    594 ;;		115200 8N1 no flow control
                                    595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    596 
                                    597 ;---------------------------------------------
                                    598 ; initialize UART1, 115200 8N1
                                    599 ; input:
                                    600 ;	none
                                    601 ; output:
                                    602 ;   none
                                    603 ;---------------------------------------------
      00026F                        604 uart1_init:
      00026F 72 1A 50 02      [ 1]  605     bset PA_DDR,#UART1_TX_PIN
      000273 72 1A 50 03      [ 1]  606     bset PA_CR1,#UART1_TX_PIN 
      000277 72 1A 50 04      [ 1]  607     bset PA_CR2,#UART1_TX_PIN 
                                    608 ; enable UART1 clock
      00027B 72 14 50 C7      [ 1]  609 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00027F                        610 uart1_set_baud: 
                                    611 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    612 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00027F A6 E1            [ 1]  613 	ld a,#CLK_SWR_HSI
      000281 C1 50 C3         [ 1]  614 	cp a,CLK_CMSR 
      000284 27 0A            [ 1]  615 	jreq 2$ 
      000286                        616 1$: ; 8 Mhz 	
      000286 35 05 52 33      [ 1]  617 	mov UART1_BRR2,#0x05 ; must be loaded first
      00028A 35 04 52 32      [ 1]  618 	mov UART1_BRR1,#0x4
      00028E 20 08            [ 2]  619 	jra 3$
      000290                        620 2$: ; 16 Mhz 	
      000290 35 0B 52 33      [ 1]  621 	mov UART1_BRR2,#0x0b ; must be loaded first
      000294 35 08 52 32      [ 1]  622 	mov UART1_BRR1,#0x08
      000298                        623 3$:
      000298 72 5F 52 31      [ 1]  624     clr UART1_DR
      00029C 35 2C 52 35      [ 1]  625 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002A0 72 10 52 35      [ 1]  626 	bset UART1_CR2,#UART_CR2_SBK
      0002A4 72 0D 52 30 FB   [ 2]  627     btjf UART1_SR,#UART_SR_TC,.
      0002A9 72 5F 00 2A      [ 1]  628     clr rx1_head 
      0002AD 72 5F 00 2B      [ 1]  629 	clr rx1_tail 
      0002B1 81               [ 4]  630 	ret
                                    631 
                                    632 ;---------------------------------
                                    633 ; uart1_putc
                                    634 ; send a character via UART1
                                    635 ; input:
                                    636 ;    A  	character to send
                                    637 ;---------------------------------
      0002B2                        638 putc:: ; console output always on UART1
      0002B2                        639 uart1_putc:: 
      0002B2 72 0F 52 30 FB   [ 2]  640 	btjf UART1_SR,#UART_SR_TXE,.
      0002B7 C7 52 31         [ 1]  641 	ld UART1_DR,a 
      0002BA 81               [ 4]  642 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    643 
                                    644 
                                    645 ;---------------------------------
                                    646 ; Query for character in rx1_queue
                                    647 ; input:
                                    648 ;   none 
                                    649 ; output:
                                    650 ;   A     0 no charcter available
                                    651 ;   Z     1 no character available
                                    652 ;---------------------------------
      0002BB                        653 qgetc::
      0002BB                        654 uart1_qgetc::
      0002BB C6 00 2A         [ 1]  655 	ld a,rx1_head 
      0002BE C0 00 2B         [ 1]  656 	sub a,rx1_tail 
      0002C1 81               [ 4]  657 	ret 
                                    658 
                                    659 ;---------------------------------
                                    660 ; wait character from UART1 
                                    661 ; input:
                                    662 ;   none
                                    663 ; output:
                                    664 ;   A 			char  
                                    665 ;--------------------------------	
      0002C2                        666 getc:: ;console input
      0002C2                        667 uart1_getc::
      0002C2 CD 02 BB         [ 4]  668 	call uart1_qgetc
      0002C5 27 FB            [ 1]  669 	jreq uart1_getc 
      0002C7 89               [ 2]  670 	pushw x 
      0002C8 AE 00 22         [ 2]  671 	ldw x,#rx1_queue
      0002CB 9F               [ 1]  672 	ld a,xl 
      0002CC CB 00 2A         [ 1]  673 	add a,rx1_head 
      0002CF 97               [ 1]  674 	ld xl,a 
      0002D0 F6               [ 1]  675 	ld a,(x)
      0002D1 85               [ 2]  676 	popw x
      0002D2 88               [ 1]  677 	push a
      0002D3 72 5C 00 2A      [ 1]  678 	inc rx1_head 
      0002D7 A6 07            [ 1]  679 	ld a,#RX_QUEUE_SIZE-1 
      0002D9 C4 00 2A         [ 1]  680 	and a,rx1_head 
      0002DC C7 00 2A         [ 1]  681 	ld rx1_head,a 
      0002DF 84               [ 1]  682 	pop a  
      0002E0 81               [ 4]  683 	ret 
                                    684 
                                    685 ;----------------------
                                    686 ; print token id && value
                                    687 ; input:
                                    688 ;   A     token id 
                                    689 ;   X     token value 
                                    690 ;---------------------
                           000001   691 	BSAVE=1
                           000002   692 	AREG=2
                           000003   693 	XREG=3
                           000004   694 	VSIZE=4
      0002E1                        695 prt_tok:
      0002E1                        696 	_vars VSIZE 
      0002E1 52 04            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002E3 6B 02            [ 1]  697 	ld (AREG,sp),a 
      0002E5 1F 03            [ 2]  698 	ldw (XREG,sp),x 
      0002E7 C6 00 0A         [ 1]  699 	ld a, base
      0002EA 6B 01            [ 1]  700 	ld (BSAVE,sp),a 
      0002EC 35 10 00 0A      [ 1]  701 	mov base,#16  
      0002F0 AE 03 18         [ 2]  702 	ldw x,#token_msg
      0002F3 CD 00 00         [ 4]  703 	call puts 
      0002F6 5F               [ 1]  704 	clrw x 
      0002F7 7B 02            [ 1]  705 	ld a,(AREG,sp)
      0002F9 97               [ 1]  706 	ld xl,a 
      0002FA CD 08 31         [ 4]  707 	call print_int 
      0002FD A6 20            [ 1]  708 	ld a,#SPACE
      0002FF CD 02 B2         [ 4]  709 	call putc 
      000302 1E 03            [ 2]  710 	ldw x,(XREG,sp)
      000304 CD 08 31         [ 4]  711 	call print_int 
      000307 A6 0D            [ 1]  712 	ld a,#CR 
      000309 CD 02 B2         [ 4]  713 	call putc 
      00030C 7B 01            [ 1]  714 	ld a,(BSAVE,sp)
      00030E C7 00 0A         [ 1]  715 	ld base,a 
      000311 7B 02            [ 1]  716 	ld a,(AREG,sp)
      000313 1E 03            [ 2]  717 	ldw x,(XREG,sp)
      000315                        718 	_drop VSIZE 
      000315 5B 04            [ 2]    1     addw sp,#VSIZE 
      000317 81               [ 4]  719 	ret 
      000318 74 6F 6B 65 6E 3A 20   720 token_msg: .asciz "token: "
             00
                                    721 
                                    722 
                                    723 ;---------------------
                                    724 ; display n bytes row 
                                    725 ; from memory.
                                    726 ; input:
                                    727 ;   A   bytes to print 
                                    728 ;	X   start address 
                                    729 ; output:
                                    730 ;   X   address after last shown  
                                    731 ;---------------------
                           000001   732 	CNT=1 
                           000002   733 	ADR=2 
                           000003   734 	VSIZE=3 
      000320                        735 show_row:
      000320 4D               [ 1]  736 	tnz a 
      000321 26 01            [ 1]  737 	jrne 1$
      000323 81               [ 4]  738 	ret 
      000324                        739 1$:	
      000324 89               [ 2]  740 	pushw x  
      000325 88               [ 1]  741 	push a 
      000326 35 04 00 21      [ 1]  742 	mov tab_width,#4 
      00032A CD 08 31         [ 4]  743 	call print_int 
      00032D A6 20            [ 1]  744 	ld a,#SPACE  
      00032F CD 02 B2         [ 4]  745 	call putc
      000332                        746 row_loop:
      000332 1E 02            [ 2]  747 	ldw x,(ADR,sp)
      000334 F6               [ 1]  748 	ld a,(x)
      000335 5F               [ 1]  749 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000336 97               [ 1]  750 	ld xl,a 
      000337 CD 08 31         [ 4]  751 	call print_int 
      00033A 1E 02            [ 2]  752 	ldw x,(ADR,sp)
      00033C 5C               [ 1]  753 	incw x 
      00033D 1F 02            [ 2]  754 	ldw (ADR,sp),x 
      00033F 0A 01            [ 1]  755 	dec (CNT,sp)
      000341 26 EF            [ 1]  756 	jrne row_loop
      000343                        757 	_drop VSIZE  		
      000343 5B 03            [ 2]    1     addw sp,#VSIZE 
      000345 35 04 00 21      [ 1]  758 	mov tab_width,#4
      000349 A6 0D            [ 1]  759 	ld a,#CR 
      00034B CD 02 B2         [ 4]  760 	call putc 
      00034E 81               [ 4]  761 	ret 
                                    762 
                                    763 ;--------------------------
                                    764 ; print memory content 
                                    765 ; in hexadecimal format
                                    766 ;  input:
                                    767 ;    X    start address 
                                    768 ;    Y    count 
                                    769 ;--------------------------
                           000001   770 	BCNT=1
                           000003   771 	BASE=3
                           000004   772 	TABW=4
                           000004   773 	VSIZE=4   
      00034F                        774 hex_dump:
      00034F                        775 	_vars VSIZE
      00034F 52 04            [ 2]    1     sub sp,#VSIZE 
      000351 C6 00 0A         [ 1]  776 	ld a,base
      000354 6B 03            [ 1]  777 	ld (BASE,sp),a 
      000356 35 10 00 0A      [ 1]  778 	mov base,#16
      00035A C6 00 21         [ 1]  779 	ld a,tab_width 
      00035D 6B 04            [ 1]  780 	ld (TABW,sp),a
      00035F A6 0D            [ 1]  781 	ld a,#CR 
      000361 CD 02 B2         [ 4]  782 	call putc 
      000364 17 01            [ 2]  783 1$: ldw (BCNT,sp),y
      000366 A6 10            [ 1]  784 	ld a,#16
      000368 90 A3 00 10      [ 2]  785 	cpw y,#16
      00036C 2A 02            [ 1]  786 	jrpl 2$
      00036E 90 9F            [ 1]  787 	ld a,yl
      000370                        788 2$: 	
      000370 CD 03 20         [ 4]  789 	call show_row 
      000373 16 01            [ 2]  790 	ldw y,(BCNT,sp) 
      000375 72 A2 00 10      [ 2]  791 	subw y,#16 
      000379 90 A3 00 01      [ 2]  792 	cpw y,#1
      00037D 2A E5            [ 1]  793 	jrpl 1$
      00037F 7B 03            [ 1]  794 	ld a,(BASE,sp)
      000381 C7 00 0A         [ 1]  795 	ld base,a
      000384 7B 04            [ 1]  796 	ld a,(TABW,sp)
      000386 C7 00 21         [ 1]  797 	ld tab_width,a 
      000389                        798 	_drop VSIZE
      000389 5B 04            [ 2]    1     addw sp,#VSIZE 
      00038B 81               [ 4]  799 	ret 
                                    800 
                                    801 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    802 ; retrun string length
                                    803 ; input:
                                    804 ;   X         .asciz  pointer 
                                    805 ; output:
                                    806 ;   X         not affected 
                                    807 ;   A         length 
                                    808 ;-------------------------------------
      00038C                        809 strlen::
      00038C 89               [ 2]  810 	pushw x 
      00038D 4F               [ 1]  811 	clr a
      00038E 7D               [ 1]  812 1$:	tnz (x) 
      00038F 27 04            [ 1]  813 	jreq 9$ 
      000391 4C               [ 1]  814 	inc a 
      000392 5C               [ 1]  815 	incw x 
      000393 20 F9            [ 2]  816 	jra 1$ 
      000395 85               [ 2]  817 9$:	popw x 
      000396 81               [ 4]  818 	ret 
                                    819 
                                    820 ;------------------------------------
                                    821 ; compare 2 strings
                                    822 ; input:
                                    823 ;   X 		char* first string 
                                    824 ;   Y       char* second string 
                                    825 ; output:
                                    826 ;   A 		0|1 
                                    827 ;-------------------------------------
      000397                        828 strcmp:
      000397 F6               [ 1]  829 	ld a,(x)
      000398 27 0B            [ 1]  830 	jreq 5$ 
      00039A 90 F1            [ 1]  831 	cp a,(y) 
      00039C 26 05            [ 1]  832 	jrne 4$ 
      00039E 5C               [ 1]  833 	incw x 
      00039F 90 5C            [ 1]  834 	incw y 
      0003A1 20 F4            [ 2]  835 	jra strcmp 
      0003A3                        836 4$: ; not same  
      0003A3 4F               [ 1]  837 	clr a 
      0003A4 81               [ 4]  838 	ret 
      0003A5                        839 5$: ; same 
      0003A5 A6 01            [ 1]  840 	ld a,#1 
      0003A7 81               [ 4]  841 	ret 
                                    842 
                                    843 
                                    844 ;---------------------------------------
                                    845 ;  copy src to dest 
                                    846 ; input:
                                    847 ;   X 		dest 
                                    848 ;   Y 		src 
                                    849 ; output: 
                                    850 ;   X 		dest 
                                    851 ;----------------------------------
      0003A8                        852 strcpy::
      0003A8 89               [ 2]  853 	pushw x 
      0003A9 90 F6            [ 1]  854 1$: ld a,(y)
      0003AB 27 06            [ 1]  855 	jreq 9$ 
      0003AD F7               [ 1]  856 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AE 5C               [ 1]  857 	incw x 
      0003AF 90 5C            [ 1]  858 	incw y 
      0003B1 20 F6            [ 2]  859 	jra 1$ 
      0003B3 7F               [ 1]  860 9$:	clr (x)
      0003B4 85               [ 2]  861 	popw x 
      0003B5 81               [ 4]  862 	ret 
                                    863 
                                    864 ;---------------------------------------
                                    865 ; move memory block 
                                    866 ; input:
                                    867 ;   X 		destination 
                                    868 ;   Y 	    source 
                                    869 ;   acc16	bytes count 
                                    870 ; output:
                                    871 ;   none 
                                    872 ;--------------------------------------
                           000001   873 	INCR=1 ; increament high byte 
                           000002   874 	LB=2 ; increament low byte 
                           000002   875 	VSIZE=2
      0003B6                        876 move::
      0003B6                        877 	_vars VSIZE 
      0003B6 52 02            [ 2]    1     sub sp,#VSIZE 
      0003B8 0F 01            [ 1]  878 	clr (INCR,sp)
      0003BA 0F 02            [ 1]  879 	clr (LB,sp)
      0003BC 90 89            [ 2]  880 	pushw y 
      0003BE 13 01            [ 2]  881 	cpw x,(1,sp) ; compare DEST to SRC 
      0003C0 90 85            [ 2]  882 	popw y 
      0003C2 27 31            [ 1]  883 	jreq move_exit ; x==y 
      0003C4 2B 0E            [ 1]  884 	jrmi move_down
      0003C6                        885 move_up: ; start from top address with incr=-1
      0003C6 72 BB 00 0C      [ 2]  886 	addw x,acc16
      0003CA 72 B9 00 0C      [ 2]  887 	addw y,acc16
      0003CE 03 01            [ 1]  888 	cpl (INCR,sp)
      0003D0 03 02            [ 1]  889 	cpl (LB,sp)   ; increment = -1 
      0003D2 20 05            [ 2]  890 	jra move_loop  
      0003D4                        891 move_down: ; start from bottom address with incr=1 
      0003D4 5A               [ 2]  892     decw x 
      0003D5 90 5A            [ 2]  893 	decw y
      0003D7 0C 02            [ 1]  894 	inc (LB,sp) ; incr=1 
      0003D9                        895 move_loop:	
      0003D9 C6 00 0C         [ 1]  896     ld a, acc16 
      0003DC CA 00 0D         [ 1]  897 	or a, acc8
      0003DF 27 14            [ 1]  898 	jreq move_exit 
      0003E1 72 FB 01         [ 2]  899 	addw x,(INCR,sp)
      0003E4 72 F9 01         [ 2]  900 	addw y,(INCR,sp) 
      0003E7 90 F6            [ 1]  901 	ld a,(y)
      0003E9 F7               [ 1]  902 	ld (x),a 
      0003EA 89               [ 2]  903 	pushw x 
      0003EB CE 00 0C         [ 2]  904 	ldw x,acc16 
      0003EE 5A               [ 2]  905 	decw x 
      0003EF CF 00 0C         [ 2]  906 	ldw acc16,x 
      0003F2 85               [ 2]  907 	popw x 
      0003F3 20 E4            [ 2]  908 	jra move_loop
      0003F5                        909 move_exit:
      0003F5                        910 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003F7 81               [ 4]  911 	ret 	
                                    912 
                                    913 ;------------------------------------
                                    914 ;  set all variables to zero 
                                    915 ; input:
                                    916 ;   none 
                                    917 ; output:
                                    918 ;	none
                                    919 ;------------------------------------
      0003F8                        920 clear_vars:
      0003F8 AE 00 30         [ 2]  921 	ldw x,#vars 
      0003FB 90 AE 00 34      [ 2]  922 	ldw y,#2*26 
      0003FF 7F               [ 1]  923 1$:	clr (x)
      000400 5C               [ 1]  924 	incw x 
      000401 90 5A            [ 2]  925 	decw y 
      000403 26 FA            [ 1]  926 	jrne 1$
      000405 81               [ 4]  927 	ret 
                                    928 
                                    929 ;-------------------------------------
                                    930 ; check if A is a letter 
                                    931 ; input:
                                    932 ;   A 			character to test 
                                    933 ; output:
                                    934 ;   C flag      1 true, 0 false 
                                    935 ;-------------------------------------
      000406                        936 is_alpha::
      000406 A1 41            [ 1]  937 	cp a,#'A 
      000408 8C               [ 1]  938 	ccf 
      000409 24 0B            [ 1]  939 	jrnc 9$ 
      00040B A1 5B            [ 1]  940 	cp a,#'Z+1 
      00040D 25 07            [ 1]  941 	jrc 9$ 
      00040F A1 61            [ 1]  942 	cp a,#'a 
      000411 8C               [ 1]  943 	ccf 
      000412 24 02            [ 1]  944 	jrnc 9$
      000414 A1 7B            [ 1]  945 	cp a,#'z+1
      000416 81               [ 4]  946 9$: ret 	
                                    947 
                                    948 ;------------------------------------
                                    949 ; check if character in {'0'..'9'}
                                    950 ; input:
                                    951 ;    A  character to test
                                    952 ; output:
                                    953 ;    Carry  0 not digit | 1 digit
                                    954 ;------------------------------------
      000417                        955 is_digit::
      000417 A1 30            [ 1]  956 	cp a,#'0
      000419 25 03            [ 1]  957 	jrc 1$
      00041B A1 3A            [ 1]  958     cp a,#'9+1
      00041D 8C               [ 1]  959 	ccf 
      00041E 8C               [ 1]  960 1$:	ccf 
      00041F 81               [ 4]  961     ret
                                    962 
                                    963 ;-------------------------------------
                                    964 ; return true if character in  A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    965 ; is letter or digit.
                                    966 ; input:
                                    967 ;   A     ASCII character 
                                    968 ; output:
                                    969 ;   A     no change 
                                    970 ;   Carry    0 false| 1 true 
                                    971 ;--------------------------------------
      000420                        972 is_alnum::
      000420 CD 04 17         [ 4]  973 	call is_digit
      000423 25 03            [ 1]  974 	jrc 1$ 
      000425 CD 04 06         [ 4]  975 	call is_alpha
      000428 81               [ 4]  976 1$:	ret 
                                    977 
                                    978 
                                    979 ;-------------------------------------
                                    980 ;  program initialization entry point 
                                    981 ;-------------------------------------
                           000001   982 	MAJOR=1
                           000002   983 	MINOR=2 
      000429 0A 0A 54 69 6E 79 20   984 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00046F                        985 cold_start:
                                    986 ;set stack 
      00046F AE 17 FF         [ 2]  987 	ldw x,#STACK_EMPTY
      000472 94               [ 1]  988 	ldw sp,x   
                                    989 ; clear all ram 
      000473 7F               [ 1]  990 0$: clr (x)
      000474 5A               [ 2]  991 	decw x 
      000475 26 FC            [ 1]  992 	jrne 0$
                                    993 ; activate pull up on all inputs 
      000477 A6 FF            [ 1]  994 	ld a,#255 
      000479 C7 50 03         [ 1]  995 	ld PA_CR1,a 
      00047C C7 50 08         [ 1]  996 	ld PB_CR1,a 
      00047F C7 50 0D         [ 1]  997 	ld PC_CR1,a 
      000482 C7 50 12         [ 1]  998 	ld PD_CR1,a 
      000485 C7 50 17         [ 1]  999 	ld PE_CR1,a 
      000488 C7 50 1C         [ 1] 1000 	ld PF_CR1,a 
      00048B C7 50 21         [ 1] 1001 	ld PG_CR1,a 
      00048E C7 50 2B         [ 1] 1002 	ld PI_CR1,a
                                   1003 ; set LD2 pin as output 
      000491 72 1A 50 0D      [ 1] 1004     bset PC_CR1,#LED2_BIT
      000495 72 1A 50 0E      [ 1] 1005     bset PC_CR2,#LED2_BIT
      000499 72 1A 50 0C      [ 1] 1006     bset PC_DDR,#LED2_BIT
      00049D 72 1B 50 0A      [ 1] 1007 	bres PC_ODR,#LED2_BIT 
                                   1008 ; disable schmitt triggers on Arduino CN4 analog inputs
      0004A1 55 00 3F 54 07   [ 1] 1009 	mov ADC_TDRL,0x3f
                                   1010 ; disable peripherals clocks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1011 ;	clr CLK_PCKENR1 
                                   1012 ;	clr CLK_PCKENR2
      0004A6 72 5F 50 F2      [ 1] 1013 	clr AWU_TBR 
      0004AA 72 14 50 CA      [ 1] 1014 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1015 ; select internal clock no divisor: 16 Mhz 	
      0004AE A6 E1            [ 1] 1016 	ld a,#CLK_SWR_HSI 
      0004B0 5F               [ 1] 1017 	clrw x  
      0004B1 CD 00 A7         [ 4] 1018     call clock_init 
      0004B4 CD 00 CA         [ 4] 1019 	call timer4_init
      0004B7 CD 00 BD         [ 4] 1020 	call timer2_init
                                   1021 ; UART1 at 115200 BAUD
      0004BA CD 02 6F         [ 4] 1022 	call uart1_init
                                   1023 ; activate PE_4 (user button interrupt)
      0004BD 72 18 50 18      [ 1] 1024     bset PE_CR2,#USR_BTN_BIT 
                                   1025 ; display system information
      0004C1 AE 04 29         [ 2] 1026 	ldw x,#software 
      0004C4 CD 00 00         [ 4] 1027 	call puts 
      0004C7 A6 01            [ 1] 1028 	ld a,#MAJOR 
      0004C9 C7 00 0D         [ 1] 1029 	ld acc8,a 
      0004CC 5F               [ 1] 1030 	clrw x 
      0004CD CF 00 0B         [ 2] 1031 	ldw acc24,x
      0004D0 72 5F 00 21      [ 1] 1032 	clr tab_width  
      0004D4 35 0A 00 0A      [ 1] 1033 	mov base, #10 
      0004D8 CD 08 41         [ 4] 1034 	call prti24 
      0004DB A6 2E            [ 1] 1035 	ld a,#'.
      0004DD CD 02 B2         [ 4] 1036 	call putc 
      0004E0 A6 02            [ 1] 1037 	ld a,#MINOR 
      0004E2 C7 00 0D         [ 1] 1038 	ld acc8,a 
      0004E5 5F               [ 1] 1039 	clrw x 
      0004E6 CF 00 0B         [ 2] 1040 	ldw acc24,x 
      0004E9 CD 08 41         [ 4] 1041 	call prti24
      0004EC A6 0D            [ 1] 1042 	ld a,#CR 
      0004EE CD 02 B2         [ 4] 1043 	call putc
      0004F1 9A               [ 1] 1044 	rim 
      0004F2 72 5C 00 15      [ 1] 1045 	inc seedy+1 
      0004F6 72 5C 00 13      [ 1] 1046 	inc seedx+1 
      0004FA CD 05 51         [ 4] 1047 	call clear_basic
      0004FD CD 0D A1         [ 4] 1048 	call ubound 
      000500 CD 11 E0         [ 4] 1049 	call beep_1khz  
      000503                       1050 2$:	
      000503 CD 05 33         [ 4] 1051 	call warm_init
                                   1052 ; check for application in flash memory 
      000506 CE 1E 80         [ 2] 1053 	ldw x,app_sign 
      000509 A3 42 43         [ 2] 1054 	cpw x,#0x4243
      00050C 27 03            [ 1] 1055 	jreq 3$
      00050E CC 07 6E         [ 2] 1056 	jp cmd_line 
      000511                       1057 3$:	 
      000511 AE 1E 84         [ 2] 1058 	ldw x,#app 
      000514 CF 00 04         [ 2] 1059 	ldw basicptr,x
      000517 CF 00 19         [ 2] 1060 	ldw txtbgn,x 
      00051A E6 02            [ 1] 1061 	ld a,(2,x)
      00051C C7 00 03         [ 1] 1062 	ld count,a 
      00051F A6 03            [ 1] 1063 	ld a,#3 
      000521 C7 00 01         [ 1] 1064 	ld in,a 
      000524 CE 1E 82         [ 2] 1065 	ldw x,app_size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000527 72 BB 00 19      [ 2] 1066 	addw x,txtbgn 
      00052B CF 00 1B         [ 2] 1067 	ldw txtend,x  
      00052E CC 07 AF         [ 2] 1068 	jp interp_loop 
      000531 20 FE            [ 2] 1069     jra .  
                                   1070 
      000533                       1071 warm_init:
      000533 72 5F 00 20      [ 1] 1072 	clr flags 
      000537 72 5F 00 1D      [ 1] 1073 	clr loop_depth 
      00053B 35 04 00 21      [ 1] 1074 	mov tab_width,#TAB_WIDTH 
      00053F 35 0A 00 0A      [ 1] 1075 	mov base,#10 
      000543 AE 00 00         [ 2] 1076 	ldw x,#0 
      000546 CF 00 04         [ 2] 1077 	ldw basicptr,x 
      000549 CF 00 00         [ 2] 1078 	ldw in.w,x 
      00054C 72 5F 00 03      [ 1] 1079 	clr count
      000550 81               [ 4] 1080 	ret 
                                   1081 
                                   1082 
                                   1083 ;---------------------------
                                   1084 ; reset BASIC text variables 
                                   1085 ; and clear variables 
                                   1086 ;---------------------------
      000551                       1087 clear_basic:
      000551 72 5F 00 03      [ 1] 1088 	clr count
      000555 72 5F 00 01      [ 1] 1089 	clr in  
      000559 AE 00 64         [ 2] 1090 	ldw x,#free_ram 
      00055C CF 00 19         [ 2] 1091 	ldw txtbgn,x 
      00055F CF 00 1B         [ 2] 1092 	ldw txtend,x 
      000562 CD 03 F8         [ 4] 1093 	call clear_vars 
      000565 81               [ 4] 1094 	ret 
                                   1095 
                                   1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1097 ;;   Tiny BASIC error messages     ;;
                                   1098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000566                       1099 err_msg:
      000566 00 00 05 86 05 93 05  1100 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             A1 05 BA 05 C9
      000572 05 DF 05 F5 06 0F 06  1101 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             20 06 31
      00057C 06 3D 06 70 06 80 06  1102 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             94 06 A7
                                   1103 
      000586 4D 65 6D 6F 72 79 20  1104 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000593 73 79 6E 74 61 78 20  1105 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0005A1 6D 61 74 68 20 6F 70  1106 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0005BA 64 69 76 69 73 69 6F  1107 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      0005C9 69 6E 76 61 6C 69 64  1108 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



             00
      0005DF 72 75 6E 20 74 69 6D  1109 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0005F5 63 6F 6D 6D 61 6E 64  1110 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00060F 64 75 70 6C 69 63 61  1111 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      000620 46 69 6C 65 20 6E 6F  1112 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000631 62 61 64 20 76 61 6C  1113 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      00063D 46 69 6C 65 20 69 6E  1114 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000670 4E 6F 20 64 61 74 61  1115 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000680 4E 6F 20 70 72 6F 67  1116 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000694 46 69 6C 65 20 73 79  1117 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0006A7 42 75 66 66 65 72 20  1118 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1119 
      0006B4 0A 72 75 6E 20 74 69  1120 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      0006C6 0A 63 6F 6D 70 69 6C  1121 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0006D7 6C 61 73 74 20 74 6F  1122 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1123 
      0006E7                       1124 syntax_error::
      0006E7 A6 02            [ 1] 1125 	ld a,#ERR_SYNTAX 
                                   1126 
      0006E9                       1127 tb_error::
      0006E9 72 0A 00 20 44   [ 2] 1128 	btjt flags,#FCOMP,1$
      0006EE 88               [ 1] 1129 	push a 
      0006EF AE 06 B4         [ 2] 1130 	ldw x, #rt_msg 
      0006F2 CD 00 00         [ 4] 1131 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0006F5 84               [ 1] 1132 	pop a 
      0006F6 AE 05 66         [ 2] 1133 	ldw x, #err_msg 
      0006F9 72 5F 00 0C      [ 1] 1134 	clr acc16 
      0006FD 48               [ 1] 1135 	sll a
      0006FE 72 59 00 0C      [ 1] 1136 	rlc acc16  
      000702 C7 00 0D         [ 1] 1137 	ld acc8, a 
      000705 72 BB 00 0C      [ 2] 1138 	addw x,acc16 
      000709 FE               [ 2] 1139 	ldw x,(x)
      00070A CD 00 00         [ 4] 1140 	call puts
      00070D CE 00 04         [ 2] 1141 	ldw x,basicptr
      000710 C6 00 01         [ 1] 1142 	ld a,in 
      000713 CD 0E 6A         [ 4] 1143 	call prt_basic_line
      000716 AE 06 D7         [ 2] 1144 	ldw x,#tk_id 
      000719 CD 00 00         [ 4] 1145 	call puts 
      00071C C6 00 02         [ 1] 1146 	ld a,in.saved 
      00071F 5F               [ 1] 1147 	clrw x 
      000720 97               [ 1] 1148 	ld xl,a 
      000721 72 BB 00 04      [ 2] 1149 	addw x,basicptr 
      000725 F6               [ 1] 1150 	ld a,(x)
      000726 5F               [ 1] 1151 	clrw x 
      000727 97               [ 1] 1152 	ld xl,a 
      000728 CD 08 31         [ 4] 1153 	call print_int
      00072B 72 0D 00 20 37   [ 2] 1154 	btjf flags,#FAUTORUN ,6$
      000730 20 35            [ 2] 1155 	jra 6$
      000732                       1156 1$:	
      000732 88               [ 1] 1157 	push a 
      000733 AE 06 C6         [ 2] 1158 	ldw x,#comp_msg
      000736 CD 00 00         [ 4] 1159 	call puts 
      000739 84               [ 1] 1160 	pop a 
      00073A AE 05 66         [ 2] 1161 	ldw x, #err_msg 
      00073D 72 5F 00 0C      [ 1] 1162 	clr acc16 
      000741 48               [ 1] 1163 	sll a
      000742 72 59 00 0C      [ 1] 1164 	rlc acc16  
      000746 C7 00 0D         [ 1] 1165 	ld acc8, a 
      000749 72 BB 00 0C      [ 2] 1166 	addw x,acc16 
      00074D FE               [ 2] 1167 	ldw x,(x)
      00074E CD 00 00         [ 4] 1168 	call puts
      000751 AE 16 90         [ 2] 1169 	ldw x,#tib
      000754 CD 00 00         [ 4] 1170 	call puts 
      000757 A6 0D            [ 1] 1171 	ld a,#CR 
      000759 CD 02 B2         [ 4] 1172 	call putc
      00075C CE 00 00         [ 2] 1173 	ldw x,in.w
      00075F CD 00 00         [ 4] 1174 	call spaces
      000762 A6 5E            [ 1] 1175 	ld a,#'^
      000764 CD 02 B2         [ 4] 1176 	call putc 
      000767 AE 17 FF         [ 2] 1177 6$: ldw x,#STACK_EMPTY 
      00076A 94               [ 1] 1178     ldw sp,x
      00076B                       1179 warm_start:
      00076B CD 05 33         [ 4] 1180 	call warm_init
                                   1181 ;----------------------------
                                   1182 ;   BASIC interpreter
                                   1183 ;----------------------------
      00076E                       1184 cmd_line: ; user interface 
      00076E A6 0D            [ 1] 1185 	ld a,#CR 
      000770 CD 02 B2         [ 4] 1186 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000773 A6 3E            [ 1] 1187 	ld a,#'> 
      000775 CD 02 B2         [ 4] 1188 	call putc
      000778 CD 00 00         [ 4] 1189 	call readln
      00077B 72 5D 00 03      [ 1] 1190 	tnz count 
      00077F 27 ED            [ 1] 1191 	jreq cmd_line
      000781 CD 00 00         [ 4] 1192 	call compile
                                   1193 ; if text begin with a line number
                                   1194 ; the compiler set count to zero    
                                   1195 ; so code is not interpreted
      000784 72 5D 00 03      [ 1] 1196 	tnz count 
      000788 27 E4            [ 1] 1197 	jreq cmd_line
                                   1198 
                                   1199 ; if direct command 
                                   1200 ; it's ready to interpret 
                                   1201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1202 ;; This is the interpreter loop
                                   1203 ;; for each BASIC code line. 
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00078A                       1205 interpreter: 
      00078A C6 00 01         [ 1] 1206 	ld a,in 
      00078D C1 00 03         [ 1] 1207 	cp a,count 
      000790 2B 1D            [ 1] 1208 	jrmi interp_loop
      000792                       1209 next_line:
      000792 72 01 00 20 D7   [ 2] 1210 	btjf flags, #FRUN, cmd_line
      000797 CE 00 04         [ 2] 1211 	ldw x,basicptr
      00079A 72 BB 00 00      [ 2] 1212 	addw x,in.w 
      00079E C3 00 1B         [ 2] 1213 	cpw x,txtend 
      0007A1 2A C8            [ 1] 1214 	jrpl warm_start
      0007A3 CF 00 04         [ 2] 1215 	ldw basicptr,x ; start of next line  
      0007A6 E6 02            [ 1] 1216 	ld a,(2,x)
      0007A8 C7 00 03         [ 1] 1217 	ld count,a 
      0007AB 35 03 00 01      [ 1] 1218 	mov in,#3 ; skip first 3 bytes of line 
      0007AF                       1219 interp_loop: 
      0007AF CD 07 D6         [ 4] 1220 	call next_token
      0007B2 A1 00            [ 1] 1221 	cp a,#TK_NONE 
      0007B4 27 DC            [ 1] 1222 	jreq next_line 
      0007B6 A1 80            [ 1] 1223 	cp a,#TK_CMD
      0007B8 26 03            [ 1] 1224 	jrne 1$
      0007BA FD               [ 4] 1225 	call (x) 
      0007BB 20 F2            [ 2] 1226 	jra interp_loop 
      0007BD                       1227 1$:	 
      0007BD A1 85            [ 1] 1228 	cp a,#TK_VAR
      0007BF 26 05            [ 1] 1229 	jrne 2$
      0007C1 CD 0D D4         [ 4] 1230 	call let_var  
      0007C4 20 E9            [ 2] 1231 	jra interp_loop 
      0007C6                       1232 2$:	
      0007C6 A1 06            [ 1] 1233 	cp a,#TK_ARRAY 
      0007C8 26 05            [ 1] 1234 	jrne 3$
      0007CA CD 0D D1         [ 4] 1235 	call let_array 
      0007CD 20 E0            [ 2] 1236 	jra interp_loop
      0007CF                       1237 3$:	
      0007CF A1 0B            [ 1] 1238 	cp a,#TK_COLON 
      0007D1 27 DC            [ 1] 1239 	jreq interp_loop 
      0007D3 CC 06 E7         [ 2] 1240 	jp syntax_error 
                                   1241 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1242 		
                                   1243 ;--------------------------
                                   1244 ; extract next token from
                                   1245 ; token list 
                                   1246 ; basicptr -> base address 
                                   1247 ; in  -> offset in list array 
                                   1248 ; output:
                                   1249 ;   A 		token attribute
                                   1250 ;   X 		token value if there is one
                                   1251 ;----------------------------------------
      0007D6                       1252 next_token::
      0007D6 5F               [ 1] 1253 	clrw x 
      0007D7 C6 00 01         [ 1] 1254 	ld a,in 
                                   1255 ; don't replace sub by "cp a,count" 
                                   1256 ; if end of line must return with A=0   	
      0007DA C0 00 03         [ 1] 1257 	sub a,count 
      0007DD 27 51            [ 1] 1258 	jreq 9$ ; end of line 
      0007DF                       1259 0$: 
      0007DF 55 00 01 00 02   [ 1] 1260 	mov in.saved,in ; in case "_unget_token" needed 
      0007E4 90 CE 00 04      [ 2] 1261 	ldw y,basicptr 
      0007E8 91 D6 00         [ 4] 1262 	ld a,([in.w],y)
      0007EB 72 5C 00 01      [ 1] 1263 	inc in  
      0007EF 4D               [ 1] 1264 	tnz a 
      0007F0 2B 27            [ 1] 1265 	jrmi 6$
      0007F2 A1 06            [ 1] 1266 	cp a,#TK_ARRAY
      0007F4 2A 3A            [ 1] 1267 	jrpl 9$  ; no attribute for these
      0007F6                       1268 1$: ; 
      0007F6 A1 03            [ 1] 1269 	cp a,#TK_CHAR
      0007F8 26 0B            [ 1] 1270 	jrne 2$
      0007FA 41               [ 1] 1271 	exg a,xl
      0007FB 91 D6 00         [ 4] 1272 	ld a,([in.w],y)
      0007FE 72 5C 00 01      [ 1] 1273 	inc in 
      000802 41               [ 1] 1274 	exg a,xl  
      000803 20 2B            [ 2] 1275 	jra 9$ 
      000805 A1 02            [ 1] 1276 2$:	cp a,#TK_QSTR 
      000807 26 27            [ 1] 1277 	jrne 9$
      000809 93               [ 1] 1278 	ldw x,y 
      00080A 72 BB 00 00      [ 2] 1279 	addw x,in.w ; pointer to string 
                                   1280 ; move pointer after string 
      00080E 91 6D 00         [ 4] 1281 3$:	tnz ([in.w],y)
      000811 27 19            [ 1] 1282 	jreq 8$
      000813 72 5C 00 01      [ 1] 1283 	inc in 
      000817 20 F5            [ 2] 1284 	jra 3$
      000819                       1285 6$: 
      000819 72 B9 00 00      [ 2] 1286 	addw y,in.w 
      00081D 90 FE            [ 2] 1287 	ldw y,(y)
      00081F A1 84            [ 1] 1288 	cp a,#TK_INTGR
      000821 2A 04            [ 1] 1289 	jrpl 7$
      000823 90 DE 1D 81      [ 2] 1290 	ldw y,(code_addr,y) 
      000827 51               [ 1] 1291 7$:	exgw x,y 
      000828 72 5C 00 01      [ 1] 1292 	inc in
      00082C 72 5C 00 01      [ 1] 1293 8$:	inc in 
      000830                       1294 9$: 
      000830 81               [ 4] 1295 	ret	
                                   1296 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1297 ;-----------------------------------
                                   1298 ; print a 16 bit integer 
                                   1299 ; using variable 'base' as conversion
                                   1300 ; format.
                                   1301 ; input:
                                   1302 ;   X       integer to print 
                                   1303 ;   'base'    conversion base 
                                   1304 ; output:
                                   1305 ;   none 
                                   1306 ;-----------------------------------
      000831                       1307 print_int:
      000831 72 5F 00 0B      [ 1] 1308 	clr acc24 
      000835 CF 00 0C         [ 2] 1309 	ldw acc16,x 
      000838 72 0F 00 0C 04   [ 2] 1310 	btjf acc16,#7,prti24
      00083D 72 53 00 0B      [ 1] 1311 	cpl acc24 
                                   1312 
                                   1313 ;------------------------------------
                                   1314 ; print integer in acc24 
                                   1315 ; input:
                                   1316 ;	acc24 		integer to print 
                                   1317 ;	'base' 		numerical base for conversion 
                                   1318 ;   'tab_width' field width 
                                   1319 ;  output:
                                   1320 ;    A          string length
                                   1321 ;------------------------------------
      000841                       1322 prti24:
      000841 CD 08 4D         [ 4] 1323     call itoa  ; conversion entier en  .asciz
      000844 CD 00 00         [ 4] 1324 	call right_align  
      000847 88               [ 1] 1325 	push a 
      000848 CD 00 00         [ 4] 1326 	call puts
      00084B 84               [ 1] 1327 	pop a 
      00084C 81               [ 4] 1328     ret	
                                   1329 
                                   1330 ;------------------------------------
                                   1331 ; convert integer in acc24 to string
                                   1332 ; input:
                                   1333 ;   'base'	conversion base 
                                   1334 ;	acc24	integer to convert
                                   1335 ; output:
                                   1336 ;   X  		pointer to first char of string
                                   1337 ;   A       string length
                                   1338 ;------------------------------------
                           000001  1339 	SIGN=1  ; integer sign 
                           000002  1340 	LEN=2 
                           000003  1341 	PSTR=3
                           000004  1342 	VSIZE=4 ;locals size
      00084D                       1343 itoa::
      00084D                       1344 	_vars VSIZE
      00084D 52 04            [ 2]    1     sub sp,#VSIZE 
      00084F 0F 02            [ 1] 1345 	clr (LEN,sp) ; string length  
      000851 0F 01            [ 1] 1346 	clr (SIGN,sp)    ; sign
      000853 C6 00 0A         [ 1] 1347 	ld a,base 
      000856 A1 0A            [ 1] 1348 	cp a,#10
      000858 26 0A            [ 1] 1349 	jrne 1$
                                   1350 	; base 10 string display with negative sign if bit 23==1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00085A 72 0F 00 0B 05   [ 2] 1351 	btjf acc24,#7,1$
      00085F 03 01            [ 1] 1352 	cpl (SIGN,sp)
      000861 CD 09 19         [ 4] 1353 	call neg_acc24
      000864                       1354 1$:
                                   1355 ; initialize string pointer 
      000864 AE 16 90         [ 2] 1356 	ldw x,#tib 
      000867 1C 00 50         [ 2] 1357 	addw x,#TIB_SIZE
      00086A 5A               [ 2] 1358 	decw x 
      00086B 7F               [ 1] 1359 	clr (x)
      00086C A6 20            [ 1] 1360 	ld a,#32
      00086E F7               [ 1] 1361 	ld (x),a 
      00086F 0C 02            [ 1] 1362 	inc (LEN,sp)
      000871                       1363 itoa_loop:
      000871 C6 00 0A         [ 1] 1364     ld a,base
      000874 1F 03            [ 2] 1365 	ldw (PSTR,sp),x 
      000876 CD 08 B7         [ 4] 1366     call divu24_8 ; acc24/A 
      000879 1E 03            [ 2] 1367 	ldw x,(PSTR,sp)
      00087B AB 30            [ 1] 1368     add a,#'0  ; remainder of division
      00087D A1 3A            [ 1] 1369     cp a,#'9+1
      00087F 2B 02            [ 1] 1370     jrmi 2$
      000881 AB 07            [ 1] 1371     add a,#7 
      000883                       1372 2$:	
      000883 5A               [ 2] 1373 	decw x
      000884 F7               [ 1] 1374     ld (x),a
      000885 0C 02            [ 1] 1375 	inc (LEN,sp)
                                   1376 	; if acc24==0 conversion done
      000887 C6 00 0B         [ 1] 1377 	ld a,acc24
      00088A CA 00 0C         [ 1] 1378 	or a,acc16
      00088D CA 00 0D         [ 1] 1379 	or a,acc8
      000890 26 DF            [ 1] 1380     jrne itoa_loop
                                   1381 	;conversion done, next add '$' or '-' as required
      000892 C6 00 0A         [ 1] 1382 	ld a,base 
      000895 A1 10            [ 1] 1383 	cp a,#16
      000897 27 08            [ 1] 1384 	jreq 8$
      000899 7B 01            [ 1] 1385 	ld a,(SIGN,sp)
      00089B 27 15            [ 1] 1386     jreq 10$
      00089D A6 2D            [ 1] 1387     ld a,#'-
      00089F 20 0D            [ 2] 1388 	jra 9$ 
                                   1389 ; don't print more than 4 digits
                                   1390 ; in hexadecimal to avoid '-' sign 
                                   1391 ; extend display 	
      0008A1 7B 02            [ 1] 1392 8$: ld a,(LEN,sp) 
      0008A3 A1 05            [ 1] 1393 	cp a,#5 
      0008A5 2B 05            [ 1] 1394 	jrmi 81$
      0008A7 5C               [ 1] 1395 	incw x
      0008A8 0A 02            [ 1] 1396 	dec (LEN,sp)
      0008AA 20 F5            [ 2] 1397 	jra 8$
      0008AC                       1398 81$:	
      0008AC A6 24            [ 1] 1399 	ld a,#'$ 
      0008AE 5A               [ 2] 1400 9$: decw x
      0008AF F7               [ 1] 1401     ld (x),a
      0008B0 0C 02            [ 1] 1402 	inc (LEN,sp)
      0008B2                       1403 10$:
      0008B2 7B 02            [ 1] 1404 	ld a,(LEN,sp)
      0008B4                       1405 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008B4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0008B6 81               [ 4] 1406 	ret
                                   1407 
                                   1408 ;-------------------------------------
                                   1409 ; divide uint24_t by uint8_t
                                   1410 ; used to convert uint24_t to string
                                   1411 ; input:
                                   1412 ;	acc24	dividend
                                   1413 ;   A 		divisor
                                   1414 ; output:
                                   1415 ;   acc24	quotient
                                   1416 ;   A		remainder
                                   1417 ;------------------------------------- 
                                   1418 ; offset  on sp of arguments and locals
                           000001  1419 	U8   = 1   ; divisor on stack
                           000001  1420 	VSIZE =1
      0008B7                       1421 divu24_8:
      0008B7 89               [ 2] 1422 	pushw x ; save x
      0008B8 88               [ 1] 1423 	push a 
                                   1424 	; ld dividend UU:MM bytes in X
      0008B9 C6 00 0B         [ 1] 1425 	ld a, acc24
      0008BC 95               [ 1] 1426 	ld xh,a
      0008BD C6 00 0C         [ 1] 1427 	ld a,acc24+1
      0008C0 97               [ 1] 1428 	ld xl,a
      0008C1 7B 01            [ 1] 1429 	ld a,(U8,SP) ; divisor
      0008C3 62               [ 2] 1430 	div x,a ; UU:MM/U8
      0008C4 88               [ 1] 1431 	push a  ;save remainder
      0008C5 9E               [ 1] 1432 	ld a,xh
      0008C6 C7 00 0B         [ 1] 1433 	ld acc24,a
      0008C9 9F               [ 1] 1434 	ld a,xl
      0008CA C7 00 0C         [ 1] 1435 	ld acc24+1,a
      0008CD 84               [ 1] 1436 	pop a
      0008CE 95               [ 1] 1437 	ld xh,a
      0008CF C6 00 0D         [ 1] 1438 	ld a,acc24+2
      0008D2 97               [ 1] 1439 	ld xl,a
      0008D3 7B 01            [ 1] 1440 	ld a,(U8,sp) ; divisor
      0008D5 62               [ 2] 1441 	div x,a  ; R:LL/U8
      0008D6 6B 01            [ 1] 1442 	ld (U8,sp),a ; save remainder
      0008D8 9F               [ 1] 1443 	ld a,xl
      0008D9 C7 00 0D         [ 1] 1444 	ld acc24+2,a
      0008DC 84               [ 1] 1445 	pop a
      0008DD 85               [ 2] 1446 	popw x
      0008DE 81               [ 4] 1447 	ret
                                   1448 
                                   1449 ;--------------------------------------
                                   1450 ; unsigned multiply uint24_t by uint8_t
                                   1451 ; use to convert numerical string to uint24_t
                                   1452 ; input:
                                   1453 ;	acc24	uint24_t 
                                   1454 ;   A		uint8_t
                                   1455 ; output:
                                   1456 ;   acc24   A*acc24
                                   1457 ;-------------------------------------
                                   1458 ; local variables offset  on sp
                           000003  1459 	U8   = 3   ; A pushed on stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                           000002  1460 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1461 	OVFH = 1  ; multiplication overflow high byte
                           000003  1462 	VSIZE = 3
      0008DF                       1463 mulu24_8:
      0008DF 89               [ 2] 1464 	pushw x    ; save X
                                   1465 	; local variables
      0008E0 88               [ 1] 1466 	push a     ; U8
      0008E1 5F               [ 1] 1467 	clrw x     ; initialize overflow to 0
      0008E2 89               [ 2] 1468 	pushw x    ; multiplication overflow
                                   1469 ; multiply low byte.
      0008E3 C6 00 0D         [ 1] 1470 	ld a,acc24+2
      0008E6 97               [ 1] 1471 	ld xl,a
      0008E7 7B 03            [ 1] 1472 	ld a,(U8,sp)
      0008E9 42               [ 4] 1473 	mul x,a
      0008EA 9F               [ 1] 1474 	ld a,xl
      0008EB C7 00 0D         [ 1] 1475 	ld acc24+2,a
      0008EE 9E               [ 1] 1476 	ld a, xh
      0008EF 6B 02            [ 1] 1477 	ld (OVFL,sp),a
                                   1478 ; multipy middle byte
      0008F1 C6 00 0C         [ 1] 1479 	ld a,acc24+1
      0008F4 97               [ 1] 1480 	ld xl,a
      0008F5 7B 03            [ 1] 1481 	ld a, (U8,sp)
      0008F7 42               [ 4] 1482 	mul x,a
                                   1483 ; add overflow to this partial product
      0008F8 72 FB 01         [ 2] 1484 	addw x,(OVFH,sp)
      0008FB 9F               [ 1] 1485 	ld a,xl
      0008FC C7 00 0C         [ 1] 1486 	ld acc24+1,a
      0008FF 4F               [ 1] 1487 	clr a
      000900 A9 00            [ 1] 1488 	adc a,#0
      000902 6B 01            [ 1] 1489 	ld (OVFH,sp),a
      000904 9E               [ 1] 1490 	ld a,xh
      000905 6B 02            [ 1] 1491 	ld (OVFL,sp),a
                                   1492 ; multiply most signficant byte	
      000907 C6 00 0B         [ 1] 1493 	ld a, acc24
      00090A 97               [ 1] 1494 	ld xl, a
      00090B 7B 03            [ 1] 1495 	ld a, (U8,sp)
      00090D 42               [ 4] 1496 	mul x,a
      00090E 72 FB 01         [ 2] 1497 	addw x, (OVFH,sp)
      000911 9F               [ 1] 1498 	ld a, xl
      000912 C7 00 0B         [ 1] 1499 	ld acc24,a
      000915 5B 03            [ 2] 1500     addw sp,#VSIZE
      000917 85               [ 2] 1501 	popw x
      000918 81               [ 4] 1502 	ret
                                   1503 
                                   1504 ;------------------------------------
                                   1505 ;  two's complement acc24
                                   1506 ;  input:
                                   1507 ;		acc24 variable
                                   1508 ;  output:
                                   1509 ;		acc24 variable
                                   1510 ;-------------------------------------
      000919                       1511 neg_acc24:
      000919 72 53 00 0D      [ 1] 1512 	cpl acc24+2
      00091D 72 53 00 0C      [ 1] 1513 	cpl acc24+1
      000921 72 53 00 0B      [ 1] 1514 	cpl acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000925 A6 01            [ 1] 1515 	ld a,#1
      000927 CB 00 0D         [ 1] 1516 	add a,acc24+2
      00092A C7 00 0D         [ 1] 1517 	ld acc24+2,a
      00092D 4F               [ 1] 1518 	clr a
      00092E C9 00 0C         [ 1] 1519 	adc a,acc24+1
      000931 C7 00 0C         [ 1] 1520 	ld acc24+1,a 
      000934 4F               [ 1] 1521 	clr a 
      000935 C9 00 0B         [ 1] 1522 	adc a,acc24 
      000938 C7 00 0B         [ 1] 1523 	ld acc24,a 
      00093B 81               [ 4] 1524 	ret
                                   1525 
                                   1526 
                                   1527 
                                   1528 
                                   1529 ;------------------------------------
                                   1530 ; convert alpha to uppercase
                                   1531 ; input:
                                   1532 ;    a  character to convert
                                   1533 ; output:
                                   1534 ;    a  uppercase character
                                   1535 ;------------------------------------
      00093C                       1536 to_upper::
      00093C A1 61            [ 1] 1537 	cp a,#'a
      00093E 2A 01            [ 1] 1538 	jrpl 1$
      000940 81               [ 4] 1539 0$:	ret
      000941 A1 7A            [ 1] 1540 1$: cp a,#'z	
      000943 22 FB            [ 1] 1541 	jrugt 0$
      000945 A0 20            [ 1] 1542 	sub a,#32
      000947 81               [ 4] 1543 	ret
                                   1544 	
                                   1545 ;------------------------------------
                                   1546 ; convert pad content in integer
                                   1547 ; input:
                                   1548 ;    x		.asciz to convert
                                   1549 ; output:
                                   1550 ;    acc24      int24_t
                                   1551 ;------------------------------------
                                   1552 	; local variables
                           000001  1553 	SIGN=1 ; 1 byte, 
                           000002  1554 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1555 	TEMP=3 ; 1 byte, temporary storage
                           000003  1556 	VSIZE=3 ; 3 bytes reserved for local storage
      000948                       1557 atoi24::
      000948 89               [ 2] 1558 	pushw x 
      000949                       1559 	_vars VSIZE
      000949 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1560 	; acc24=0 
      00094B 72 5F 00 0B      [ 1] 1561 	clr acc24    
      00094F 72 5F 00 0C      [ 1] 1562 	clr acc16
      000953 72 5F 00 0D      [ 1] 1563 	clr acc8 
      000957 0F 01            [ 1] 1564 	clr (SIGN,sp)
      000959 A6 0A            [ 1] 1565 	ld a,#10
      00095B 6B 02            [ 1] 1566 	ld (BASE,sp),a ; default base decimal
      00095D F6               [ 1] 1567 	ld a,(x)
      00095E 27 47            [ 1] 1568 	jreq 9$  ; completed if 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000960 A1 2D            [ 1] 1569 	cp a,#'-
      000962 26 04            [ 1] 1570 	jrne 1$
      000964 03 01            [ 1] 1571 	cpl (SIGN,sp)
      000966 20 08            [ 2] 1572 	jra 2$
      000968 A1 24            [ 1] 1573 1$: cp a,#'$
      00096A 26 06            [ 1] 1574 	jrne 3$
      00096C A6 10            [ 1] 1575 	ld a,#16
      00096E 6B 02            [ 1] 1576 	ld (BASE,sp),a
      000970 5C               [ 1] 1577 2$:	incw x
      000971 F6               [ 1] 1578 	ld a,(x)
      000972                       1579 3$:	
      000972 A1 61            [ 1] 1580 	cp a,#'a
      000974 2B 02            [ 1] 1581 	jrmi 4$
      000976 A0 20            [ 1] 1582 	sub a,#32
      000978 A1 30            [ 1] 1583 4$:	cp a,#'0
      00097A 2B 2B            [ 1] 1584 	jrmi 9$
      00097C A0 30            [ 1] 1585 	sub a,#'0
      00097E A1 0A            [ 1] 1586 	cp a,#10
      000980 2B 06            [ 1] 1587 	jrmi 5$
      000982 A0 07            [ 1] 1588 	sub a,#7
      000984 11 02            [ 1] 1589 	cp a,(BASE,sp)
      000986 2A 1F            [ 1] 1590 	jrpl 9$
      000988 6B 03            [ 1] 1591 5$:	ld (TEMP,sp),a
      00098A 7B 02            [ 1] 1592 	ld a,(BASE,sp)
      00098C CD 08 DF         [ 4] 1593 	call mulu24_8
      00098F 7B 03            [ 1] 1594 	ld a,(TEMP,sp)
      000991 CB 00 0D         [ 1] 1595 	add a,acc24+2
      000994 C7 00 0D         [ 1] 1596 	ld acc24+2,a
      000997 4F               [ 1] 1597 	clr a
      000998 C9 00 0C         [ 1] 1598 	adc a,acc24+1
      00099B C7 00 0C         [ 1] 1599 	ld acc24+1,a
      00099E 4F               [ 1] 1600 	clr a
      00099F C9 00 0B         [ 1] 1601 	adc a,acc24
      0009A2 C7 00 0B         [ 1] 1602 	ld acc24,a
      0009A5 20 C9            [ 2] 1603 	jra 2$
      0009A7 0D 01            [ 1] 1604 9$:	tnz (SIGN,sp)
      0009A9 27 03            [ 1] 1605     jreq atoi_exit
      0009AB CD 09 19         [ 4] 1606     call neg_acc24
      0009AE                       1607 atoi_exit: 
      0009AE                       1608 	_drop VSIZE
      0009AE 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009B0 85               [ 2] 1609 	popw x ; restore x
      0009B1 81               [ 4] 1610 	ret
                                   1611 
                                   1612 
                                   1613 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1614 ;;   TINY BASIC  operators,
                                   1615 ;;   commands and functions 
                                   1616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1617 
                                   1618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1619 ;;  Arithmetic operators
                                   1620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1621 
                                   1622 ;debug support
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000001  1623 DEBUG_PRT=1
                           000001  1624 .if DEBUG_PRT 
                           000001  1625 	REGA=1
                           000002  1626 	SAVEB=2
                           000003  1627 	REGX=3
                           000005  1628 	REGY=5
                           000007  1629 	ACC24=7
                           000009  1630 	VSIZE=9 
      0009B2                       1631 printxy:
      0009B2                       1632 	_vars VSIZE 
      0009B2 52 09            [ 2]    1     sub sp,#VSIZE 
      0009B4 6B 01            [ 1] 1633 	ld (REGA,sp),a 
      0009B6 C6 00 0A         [ 1] 1634 	ld a,base 
      0009B9 6B 02            [ 1] 1635 	ld (SAVEB,sp),a
      0009BB 1F 03            [ 2] 1636 	ldw (REGX,sp),x
      0009BD 17 05            [ 2] 1637 	ldw (REGY,sp),y
      0009BF CE 00 0B         [ 2] 1638 	ldw x,acc24 
      0009C2 C6 00 0D         [ 1] 1639 	ld a,acc8 
      0009C5 1F 07            [ 2] 1640 	ldw (ACC24,sp),x 
      0009C7 6B 09            [ 1] 1641 	ld (ACC24+2,sp),a 
      0009C9 35 10 00 0A      [ 1] 1642 	mov base,#16 
      0009CD 5F               [ 1] 1643 	clrw x 
      0009CE 7B 01            [ 1] 1644 	ld a,(REGA,sp)
      0009D0 97               [ 1] 1645 	ld xl,a 
      0009D1 CD 08 31         [ 4] 1646 	call print_int
      0009D4 A6 20            [ 1] 1647 	ld a,#SPACE 
      0009D6 CD 02 B2         [ 4] 1648 	call putc  
      0009D9 1E 03            [ 2] 1649 	ldw x,(REGX,sp)
      0009DB CD 08 31         [ 4] 1650 	call print_int 
      0009DE A6 20            [ 1] 1651 	ld a,#SPACE 
      0009E0 CD 02 B2         [ 4] 1652 	call putc  
      0009E3 1E 05            [ 2] 1653 	ldw x,(REGY,sp)
      0009E5 CD 08 31         [ 4] 1654 	call print_int 
      0009E8 A6 0D            [ 1] 1655 	ld a,#CR 
      0009EA CD 02 B2         [ 4] 1656 	call putc 
      0009ED 7B 09            [ 1] 1657 	ld a,(ACC24+2,sp)
      0009EF 1E 07            [ 2] 1658 	ldw x,(ACC24,sp)
      0009F1 CF 00 0B         [ 2] 1659 	ldw acc24,x 
      0009F4 C7 00 0D         [ 1] 1660 	ld acc8,a
      0009F7 7B 02            [ 1] 1661 	ld a,(SAVEB,sp)
      0009F9 C7 00 0A         [ 1] 1662 	ld base,a 
      0009FC 7B 01            [ 1] 1663 	ld a,(REGA,sp)
      0009FE 1E 03            [ 2] 1664 	ldw x,(REGX,sp)
      000A00 16 05            [ 2] 1665 	ldw y,(REGY,sp)
      000A02                       1666 	_drop VSIZE 
      000A02 5B 09            [ 2]    1     addw sp,#VSIZE 
      000A04 81               [ 4] 1667 	ret 
                                   1668 .endif 
                                   1669 
                                   1670 
                                   1671 ;--------------------------------------
                                   1672 ;  multiply 2 uint16_t return uint32_t
                                   1673 ;  input:
                                   1674 ;     x       uint16_t 
                                   1675 ;     y       uint16_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1676 ;  output:
                                   1677 ;     x       product bits 15..0
                                   1678 ;     y       product bits 31..16 
                                   1679 ;---------------------------------------
                           000001  1680 		U1=1  ; uint16_t 
                           000003  1681 		DBL=3 ; uint32_t
                           000006  1682 		VSIZE=6
      000A05                       1683 umstar:
      000A05                       1684 	_vars VSIZE 
      000A05 52 06            [ 2]    1     sub sp,#VSIZE 
      000A07 1F 01            [ 2] 1685 	ldw (U1,sp),x 
                                   1686 ;initialize bits 31..16 of 
                                   1687 ;product to zero 
      000A09 0F 03            [ 1] 1688 	clr (DBL,sp)
      000A0B 0F 04            [ 1] 1689 	clr (DBL+1,sp)
                                   1690 ; produc U1L*U2L 
      000A0D 90 9F            [ 1] 1691 	ld a,yl 
      000A0F 42               [ 4] 1692 	mul x,a 
      000A10 1F 05            [ 2] 1693 	ldw (DBL+2,sp),x
                                   1694 ; product U1H*U2L 
      000A12 7B 01            [ 1] 1695 	ld a,(U1,sp) ; xh 
      000A14 93               [ 1] 1696 	ldw x,y
      000A15 42               [ 4] 1697 	mul x,a 
      000A16 4F               [ 1] 1698 	clr a 
      000A17 72 FB 04         [ 2] 1699 	addw x,(DBL+1,sp) 
      000A1A 4F               [ 1] 1700 	clr a 
      000A1B 19 03            [ 1] 1701 	adc a,(DBL,sp) 
      000A1D 6B 03            [ 1] 1702 	ld (DBL,sp),a ; bits 23..17 
      000A1F 1F 04            [ 2] 1703 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1704 ; product U1L*U2H
      000A21 90 5E            [ 1] 1705 	swapw y 
      000A23 93               [ 1] 1706 	ldw x,y
      000A24 7B 02            [ 1] 1707 	ld a,(U1+1,sp)
      000A26 42               [ 4] 1708 	mul x,a
      000A27 72 FB 04         [ 2] 1709 	addw x,(DBL+1,sp)
      000A2A 4F               [ 1] 1710 	clr a 
      000A2B 19 03            [ 1] 1711 	adc a,(DBL,sp)
      000A2D 6B 03            [ 1] 1712 	ld (DBL,sp),a 
      000A2F 1F 04            [ 2] 1713 	ldw (DBL+1,sp),x 
                                   1714 ; product U1H*U2H 	
      000A31 7B 01            [ 1] 1715 	ld a,(U1,sp)
      000A33 93               [ 1] 1716 	ldw x,y  
      000A34 42               [ 4] 1717 	mul x,a 
      000A35 72 FB 03         [ 2] 1718 	addw x,(DBL,sp)
      000A38 90 93            [ 1] 1719 	ldw y,x 
      000A3A 1E 05            [ 2] 1720 	ldw x,(DBL+2,sp)
      000A3C                       1721 	_drop VSIZE 
      000A3C 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A3E 81               [ 4] 1722 	ret
                                   1723 
                                   1724 
                                   1725 ;-------------------------------------
                                   1726 ; multiply 2 integers
                                   1727 ; input:
                                   1728 ;  	x       n1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1729 ;   y 		n2 
                                   1730 ; output:
                                   1731 ;	X        N1*N2 bits 15..0
                                   1732 ;   Y        N1*N2 bits 31..16 
                                   1733 ;-------------------------------------
                           000001  1734 	SIGN=1
                           000001  1735 	VSIZE=1
      000A3F                       1736 multiply:
      000A3F                       1737 	_vars VSIZE 
      000A3F 52 01            [ 2]    1     sub sp,#VSIZE 
      000A41 0F 01            [ 1] 1738 	clr (SIGN,sp)
      000A43 9E               [ 1] 1739 	ld a,xh 
      000A44 A4 80            [ 1] 1740 	and a,#0x80
      000A46 2A 03            [ 1] 1741 	jrpl 1$
      000A48 03 01            [ 1] 1742 	cpl (SIGN,sp)
      000A4A 50               [ 2] 1743 	negw x 
      000A4B                       1744 1$:	
      000A4B 90 9E            [ 1] 1745 	ld a,yh
      000A4D A4 80            [ 1] 1746 	and a,#0x80  
      000A4F 2A 04            [ 1] 1747 	jrpl 2$ 
      000A51 03 01            [ 1] 1748 	cpl (SIGN,sp)
      000A53 90 50            [ 2] 1749 	negw y 
      000A55                       1750 2$:	
      000A55 CD 0A 05         [ 4] 1751 	call umstar
      000A58 7B 01            [ 1] 1752 	ld a,(SIGN,sp)
      000A5A 27 03            [ 1] 1753 	jreq 3$
      000A5C CD 0A 8C         [ 4] 1754 	call dneg 
      000A5F                       1755 3$:	
      000A5F                       1756 	_drop VSIZE 
      000A5F 5B 01            [ 2]    1     addw sp,#VSIZE 
      000A61 81               [ 4] 1757 	ret
                                   1758 
                                   1759 ;--------------------------------------
                                   1760 ; divide uint32_t/uint16_t
                                   1761 ; return:  quotient and remainder 
                                   1762 ; quotient expected to be uint16_t 
                                   1763 ; input:
                                   1764 ;   DBLDIVDND    on stack 
                                   1765 ;   X            divisor 
                                   1766 ; output:
                                   1767 ;   X            quotient 
                                   1768 ;   Y            remainder 
                                   1769 ;---------------------------------------
                           000003  1770 	VSIZE=3
      000A62                       1771 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000A62                       1772 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1773 	; local variables 
                           000001  1774 	DIVISOR=1 
                           000003  1775 	CNTR=3 
      000A62                       1776 udiv32_16:
      000A62                       1777 	_vars VSIZE 
      000A62 52 03            [ 2]    1     sub sp,#VSIZE 
      000A64 1F 01            [ 2] 1778 	ldw (DIVISOR,sp),x	; save divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000A66 1E 08            [ 2] 1779 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000A68 16 06            [ 2] 1780 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000A6A 90 5D            [ 2] 1781 	tnzw y
      000A6C 26 06            [ 1] 1782 	jrne long_division 
      000A6E 16 01            [ 2] 1783 	ldw y,(DIVISOR,sp)
      000A70 65               [ 2] 1784 	divw x,y
      000A71                       1785 	_drop VSIZE 
      000A71 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A73 81               [ 4] 1786 	ret
      000A74                       1787 long_division:
      000A74 51               [ 1] 1788 	exgw x,y ; hi in x, lo in y 
      000A75 A6 11            [ 1] 1789 	ld a,#17 
      000A77 6B 03            [ 1] 1790 	ld (CNTR,sp),a
      000A79                       1791 1$:
      000A79 13 01            [ 2] 1792 	cpw x,(DIVISOR,sp)
      000A7B 2B 03            [ 1] 1793 	jrmi 2$
      000A7D 72 F0 01         [ 2] 1794 	subw x,(DIVISOR,sp)
      000A80 8C               [ 1] 1795 2$:	ccf 
      000A81 90 59            [ 2] 1796 	rlcw y 
      000A83 59               [ 2] 1797 	rlcw x 
      000A84 0A 03            [ 1] 1798 	dec (CNTR,sp)
      000A86 26 F1            [ 1] 1799 	jrne 1$
      000A88 51               [ 1] 1800 	exgw x,y 
      000A89                       1801 	_drop VSIZE 
      000A89 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A8B 81               [ 4] 1802 	ret
                                   1803 
                                   1804 ;-----------------------------
                                   1805 ; negate double int.
                                   1806 ; input:
                                   1807 ;   x     bits 15..0
                                   1808 ;   y     bits 31..16
                                   1809 ; output: 
                                   1810 ;   x     bits 15..0
                                   1811 ;   y     bits 31..16
                                   1812 ;-----------------------------
      000A8C                       1813 dneg:
      000A8C 53               [ 2] 1814 	cplw x 
      000A8D 90 53            [ 2] 1815 	cplw y 
      000A8F 1C 00 01         [ 2] 1816 	addw x,#1 
      000A92 24 02            [ 1] 1817 	jrnc 1$
      000A94 90 5C            [ 1] 1818 	incw y 
      000A96 81               [ 4] 1819 1$: ret 
                                   1820 
                                   1821 
                                   1822 ;--------------------------------
                                   1823 ; sign extend single to double
                                   1824 ; input:
                                   1825 ;   x    int16_t
                                   1826 ; output:
                                   1827 ;   x    int32_t bits 15..0
                                   1828 ;   y    int32_t bits 31..16
                                   1829 ;--------------------------------
      000A97                       1830 dbl_sign_extend:
      000A97 90 5F            [ 1] 1831 	clrw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000A99 9E               [ 1] 1832 	ld a,xh 
      000A9A A4 80            [ 1] 1833 	and a,#0x80 
      000A9C 27 02            [ 1] 1834 	jreq 1$
      000A9E 90 53            [ 2] 1835 	cplw y
      000AA0 81               [ 4] 1836 1$: ret 	
                                   1837 
                                   1838 
                                   1839 ;----------------------------------
                                   1840 ;  euclidian divide dbl/n1 
                                   1841 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1842 ; input:
                                   1843 ;    dbl    int32_t on stack 
                                   1844 ;    x 		n1   int16_t  disivor  
                                   1845 ; output:
                                   1846 ;    X      dbl/x  int16_t 
                                   1847 ;    Y      remainder int16_t 
                                   1848 ;----------------------------------
                           000008  1849 	VSIZE=8
      000AA1                       1850 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000AA1                       1851 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000AA1                       1852 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1853 	; local variables
                           000001  1854 	DBLHI=1
                           000003  1855 	DBLLO=3 
                           000005  1856 	SDIVSR=5 ; sign divisor
                           000006  1857 	SQUOT=6 ; sign dividend 
                           000007  1858 	DIVISR=7 ; divisor 
      000AA1                       1859 div32_16:
      000AA1                       1860 	_vars VSIZE 
      000AA1 52 08            [ 2]    1     sub sp,#VSIZE 
      000AA3 0F 05            [ 1] 1861 	clr (SDIVSR,sp)
      000AA5 0F 06            [ 1] 1862 	clr (SQUOT,sp)
                                   1863 ; copy arguments 
      000AA7 16 0B            [ 2] 1864 	ldw y,(DIVDNDHI,sp)
      000AA9 17 01            [ 2] 1865 	ldw (DBLHI,sp),y
      000AAB 16 0D            [ 2] 1866 	ldw y,(DIVDNDLO,sp)
      000AAD 17 03            [ 2] 1867 	ldw (DBLLO,sp),y 
                                   1868 ; check for 0 divisor
      000AAF 5D               [ 2] 1869 	tnzw x 
      000AB0 26 05            [ 1] 1870     jrne 0$
      000AB2 A6 04            [ 1] 1871 	ld a,#ERR_DIV0 
      000AB4 CC 06 E9         [ 2] 1872 	jp tb_error 
                                   1873 ; check divisor sign 	
      000AB7 9E               [ 1] 1874 0$:	ld a,xh 
      000AB8 A4 80            [ 1] 1875 	and a,#0x80 
      000ABA 27 05            [ 1] 1876 	jreq 1$
      000ABC 03 05            [ 1] 1877 	cpl (SDIVSR,sp)
      000ABE 03 06            [ 1] 1878 	cpl (SQUOT,sp)
      000AC0 50               [ 2] 1879 	negw x
      000AC1 1F 07            [ 2] 1880 1$:	ldw (DIVISR,sp),x
                                   1881 ; check dividend sign 	 
      000AC3 7B 01            [ 1] 1882  	ld a,(DBLHI,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000AC5 A4 80            [ 1] 1883 	and a,#0x80 
      000AC7 27 0D            [ 1] 1884 	jreq 2$ 
      000AC9 03 06            [ 1] 1885 	cpl (SQUOT,sp)
      000ACB 1E 03            [ 2] 1886 	ldw x,(DBLLO,sp)
      000ACD 16 01            [ 2] 1887 	ldw y,(DBLHI,sp)
      000ACF CD 0A 8C         [ 4] 1888 	call dneg 
      000AD2 1F 03            [ 2] 1889 	ldw (DBLLO,sp),x 
      000AD4 17 01            [ 2] 1890 	ldw (DBLHI,sp),y 
      000AD6 1E 07            [ 2] 1891 2$:	ldw x,(DIVISR,sp)
      000AD8 CD 0A 62         [ 4] 1892 	call udiv32_16
      000ADB 90 5D            [ 2] 1893 	tnzw y 
      000ADD 27 11            [ 1] 1894 	jreq 3$ 
                                   1895 ; x=quotient 
                                   1896 ; y=remainder 
                                   1897 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000ADF 7B 06            [ 1] 1898 	ld a,(SQUOT,sp)
      000AE1 18 05            [ 1] 1899 	xor a,(SDIVSR,sp)
      000AE3 27 0B            [ 1] 1900 	jreq 3$
      000AE5 5C               [ 1] 1901 	incw x 
      000AE6 90 CF 00 0C      [ 2] 1902 	ldw acc16,y 
      000AEA 16 07            [ 2] 1903 	ldw y,(DIVISR,sp)
      000AEC 72 B2 00 0C      [ 2] 1904 	subw y,acc16
                                   1905 ; sign quotient
      000AF0 7B 06            [ 1] 1906 3$:	ld a,(SQUOT,sp)
      000AF2 27 01            [ 1] 1907 	jreq 4$
      000AF4 50               [ 2] 1908 	negw x 
      000AF5                       1909 4$:	
      000AF5                       1910 	_drop VSIZE 
      000AF5 5B 08            [ 2]    1     addw sp,#VSIZE 
      000AF7 81               [ 4] 1911 	ret 
                                   1912 
                                   1913 
                                   1914 
                                   1915 ;----------------------------------
                                   1916 ; division x/y 
                                   1917 ; input:
                                   1918 ;    X       dividend
                                   1919 ;    Y       divisor 
                                   1920 ; output:
                                   1921 ;    X       quotient
                                   1922 ;    Y       remainder 
                                   1923 ;-----------------------------------
                           000004  1924 	VSIZE=4 
                                   1925 	; local variables 
                           000001  1926 	DBLHI=1
                           000003  1927 	DBLLO=3
      000AF8                       1928 divide: 
      000AF8                       1929 	_vars VSIZE 
      000AF8 52 04            [ 2]    1     sub sp,#VSIZE 
      000AFA 90 CF 00 0C      [ 2] 1930 	ldw acc16,y
      000AFE CD 0A 97         [ 4] 1931 	call dbl_sign_extend
      000B01 1F 03            [ 2] 1932 	ldw (DBLLO,sp),x 
      000B03 17 01            [ 2] 1933 	ldw (DBLHI,sp),y 
      000B05 CE 00 0C         [ 2] 1934 	ldw x,acc16 
      000B08 CD 0A A1         [ 4] 1935 	call div32_16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000B0B                       1936 	_drop VSIZE 
      000B0B 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B0D 81               [ 4] 1937 	ret
                                   1938 
                                   1939 
                                   1940 ;----------------------------------
                                   1941 ;  remainder resulting from euclidian 
                                   1942 ;  division of x/y 
                                   1943 ; input:
                                   1944 ;   x   	dividend int16_t 
                                   1945 ;   y 		divisor int16_t
                                   1946 ; output:
                                   1947 ;   X       n1%n2 
                                   1948 ;----------------------------------
      000B0E                       1949 modulo:
      000B0E CD 0A F8         [ 4] 1950 	call divide
      000B11 93               [ 1] 1951 	ldw x,y 
      000B12 81               [ 4] 1952 	ret 
                                   1953 
                                   1954 ;----------------------------------
                                   1955 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1956 ; return expr1*expr2/expr3 
                                   1957 ; product result is int32_t and 
                                   1958 ; divisiont is int32_t/int16_t
                                   1959 ;----------------------------------
                           000004  1960 	DBL_SIZE=4 
      000B13                       1961 muldiv:
      000B13 CD 0B 89         [ 4] 1962 	call func_args 
      000B16 A1 03            [ 1] 1963 	cp a,#3 
      000B18 27 03            [ 1] 1964 	jreq 1$
      000B1A CC 06 E7         [ 2] 1965 	jp syntax_error
      000B1D                       1966 1$: 
      000B1D 1E 05            [ 2] 1967 	ldw x,(5,sp) ; expr1
      000B1F 16 03            [ 2] 1968 	ldw y,(3,sp) ; expr2
      000B21 CD 0A 3F         [ 4] 1969 	call multiply 
      000B24 1F 05            [ 2] 1970 	ldw (5,sp),x  ;int32_t 15..0
      000B26 17 03            [ 2] 1971 	ldw (3,sp),y  ;int32_t 31..16
      000B28 85               [ 2] 1972 	popw x        ; expr3 
      000B29 CD 0A A1         [ 4] 1973 	call div32_16 ; int32_t/expr3 
      000B2C                       1974 	_drop DBL_SIZE
      000B2C 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000B2E 81               [ 4] 1975 	ret 
                                   1976 
                                   1977 
                                   1978 ;---------------------------------
                                   1979 ; dictionary search 
                                   1980 ; input:
                                   1981 ;	X 		dictionary entry point, name field  
                                   1982 ;   y		.asciz name to search 
                                   1983 ; output:
                                   1984 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   1985 ;  X		cmd_index
                                   1986 ;---------------------------------
                           000001  1987 	NLEN=1 ; cmd length 
                           000002  1988 	XSAVE=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           000004  1989 	YSAVE=4
                           000005  1990 	VSIZE=5 
      000B2F                       1991 search_dict::
      000B2F                       1992 	_vars VSIZE 
      000B2F 52 05            [ 2]    1     sub sp,#VSIZE 
                                   1993 
      000B31 17 04            [ 2] 1994 	ldw (YSAVE,sp),y 
      000B33                       1995 search_next:
      000B33 1F 02            [ 2] 1996 	ldw (XSAVE,sp),x 
                                   1997 ; get name length in dictionary	
      000B35 F6               [ 1] 1998 	ld a,(x)
      000B36 A4 0F            [ 1] 1999 	and a,#0xf 
      000B38 6B 01            [ 1] 2000 	ld (NLEN,sp),a  
      000B3A 16 04            [ 2] 2001 	ldw y,(YSAVE,sp) ; name pointer 
      000B3C 5C               [ 1] 2002 	incw x 
      000B3D                       2003 cp_loop:
      000B3D 90 F6            [ 1] 2004 	ld a,(y)
      000B3F 27 1B            [ 1] 2005 	jreq str_match 
      000B41 0D 01            [ 1] 2006 	tnz (NLEN,sp)
      000B43 27 0A            [ 1] 2007 	jreq no_match  
      000B45 F1               [ 1] 2008 	cp a,(x)
      000B46 26 07            [ 1] 2009 	jrne no_match 
      000B48 90 5C            [ 1] 2010 	incw y 
      000B4A 5C               [ 1] 2011 	incw x
      000B4B 0A 01            [ 1] 2012 	dec (NLEN,sp)
      000B4D 20 EE            [ 2] 2013 	jra cp_loop 
      000B4F                       2014 no_match:
      000B4F 1E 02            [ 2] 2015 	ldw x,(XSAVE,sp) 
      000B51 1D 00 02         [ 2] 2016 	subw x,#2 ; move X to link field
      000B54 4B 00            [ 1] 2017 	push #TK_NONE 
      000B56 FE               [ 2] 2018 	ldw x,(x) ; next word link 
      000B57 84               [ 1] 2019 	pop a ; TK_NONE 
      000B58 27 1F            [ 1] 2020 	jreq search_exit  ; not found  
                                   2021 ;try next 
      000B5A 20 D7            [ 2] 2022 	jra search_next
      000B5C                       2023 str_match:
      000B5C 1E 02            [ 2] 2024 	ldw x,(XSAVE,sp)
      000B5E F6               [ 1] 2025 	ld a,(X)
      000B5F 6B 01            [ 1] 2026 	ld (NLEN,sp),a ; needed to test keyword type  
      000B61 A4 0F            [ 1] 2027 	and a,#0xf 
                                   2028 ; move x to procedure address field 	
      000B63 4C               [ 1] 2029 	inc a 
      000B64 C7 00 0D         [ 1] 2030 	ld acc8,a 
      000B67 72 5F 00 0C      [ 1] 2031 	clr acc16 
      000B6B 72 BB 00 0C      [ 2] 2032 	addw x,acc16 
      000B6F FE               [ 2] 2033 	ldw x,(x) ; routine index  
                                   2034 ;determine keyword type bits 7:6 
      000B70 7B 01            [ 1] 2035 	ld a,(NLEN,sp)
      000B72 4E               [ 1] 2036 	swap a 
      000B73 A4 0C            [ 1] 2037 	and a,#0xc
      000B75 44               [ 1] 2038 	srl a
      000B76 44               [ 1] 2039 	srl a 
      000B77 AB 80            [ 1] 2040 	add a,#128
      000B79                       2041 search_exit: 
      000B79                       2042 	_drop VSIZE 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000B79 5B 05            [ 2]    1     addw sp,#VSIZE 
      000B7B 81               [ 4] 2043 	ret 
                                   2044 
                                   2045 ;---------------------
                                   2046 ; check if next token
                                   2047 ;  is of expected type 
                                   2048 ; input:
                                   2049 ;   A 		 expected token attribute
                                   2050 ;  ouput:
                                   2051 ;   none     if fail call syntax_error 
                                   2052 ;--------------------
      000B7C                       2053 expect:
      000B7C 88               [ 1] 2054 	push a 
      000B7D CD 07 D6         [ 4] 2055 	call next_token 
      000B80 11 01            [ 1] 2056 	cp a,(1,sp)
      000B82 27 03            [ 1] 2057 	jreq 1$
      000B84 CC 06 E7         [ 2] 2058 	jp syntax_error
      000B87 84               [ 1] 2059 1$: pop a 
      000B88 81               [ 4] 2060 	ret 
                                   2061 
                                   2062 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2063 ; parse arguments list 
                                   2064 ; between ()
                                   2065 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B89                       2066 func_args:
      000B89 A6 07            [ 1] 2067 	ld a,#TK_LPAREN 
      000B8B CD 0B 7C         [ 4] 2068 	call expect 
                                   2069 ; expected to continue in arg_list 
                                   2070 ; caller must check for TK_RPAREN 
                                   2071 
                                   2072 ;-------------------------------
                                   2073 ; parse embedded BASIC routines 
                                   2074 ; arguments list.
                                   2075 ; arg_list::=  rel[','rel]*
                                   2076 ; all arguments are of integer type
                                   2077 ; and pushed on stack 
                                   2078 ; input:
                                   2079 ;   none
                                   2080 ; output:
                                   2081 ;   stack{n}   arguments pushed on stack
                                   2082 ;   A 	number of arguments pushed on stack  
                                   2083 ;--------------------------------
      000B8E                       2084 arg_list:
      000B8E 4B 00            [ 1] 2085 	push #0  
      000B90 CD 0C D6         [ 4] 2086 1$: call relation
      000B93 A1 00            [ 1] 2087 	cp a,#TK_NONE 
      000B95 27 20            [ 1] 2088 	jreq 5$
      000B97 A1 84            [ 1] 2089 	cp a,#TK_INTGR
      000B99 26 13            [ 1] 2090 	jrne 4$
      000B9B                       2091 3$: 
                                   2092 ; swap return address with argument
      000B9B 84               [ 1] 2093 	pop a ; arg_count
      000B9C 90 85            [ 2] 2094 	popw y ; return address 
      000B9E 89               [ 2] 2095 	pushw x ; new argument 
      000B9F 90 89            [ 2] 2096 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000BA1 4C               [ 1] 2097     inc a
      000BA2 88               [ 1] 2098 	push a 
      000BA3 CD 07 D6         [ 4] 2099 	call next_token 
      000BA6 A1 09            [ 1] 2100 	cp a,#TK_COMMA 
      000BA8 27 E6            [ 1] 2101 	jreq 1$ 
      000BAA A1 00            [ 1] 2102 	cp a,#TK_NONE 
      000BAC 27 09            [ 1] 2103 	jreq 5$ 
      000BAE A1 08            [ 1] 2104 4$:	cp a,#TK_RPAREN 
      000BB0 27 05            [ 1] 2105 	jreq 5$
      000BB2                       2106 	_unget_token 
      000BB2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000BB7 84               [ 1] 2107 5$:	pop a  
      000BB8 81               [ 4] 2108 	ret 
                                   2109 
                                   2110 ;--------------------------------
                                   2111 ;   BASIC commnands 
                                   2112 ;--------------------------------
                                   2113 
                                   2114 ;--------------------------------
                                   2115 ;  arithmetic and relational 
                                   2116 ;  routines
                                   2117 ;  operators precedence
                                   2118 ;  highest to lowest
                                   2119 ;  operators on same row have 
                                   2120 ;  same precedence and are executed
                                   2121 ;  from left to right.
                                   2122 ;	'*','/','%'
                                   2123 ;   '-','+'
                                   2124 ;   '=','>','<','>=','<=','<>','><'
                                   2125 ;   '<>' and '><' are equivalent for not equal.
                                   2126 ;--------------------------------
                                   2127 
                                   2128 ;---------------------
                                   2129 ; return array element
                                   2130 ; address from @(expr)
                                   2131 ; input:
                                   2132 ;   A 		TK_ARRAY
                                   2133 ; output:
                                   2134 ;   A 		TK_INTGR
                                   2135 ;	X 		element address 
                                   2136 ;----------------------
      000BB9                       2137 get_array_element:
      000BB9 CD 0B 89         [ 4] 2138 	call func_args 
      000BBC A1 01            [ 1] 2139 	cp a,#1
      000BBE 27 03            [ 1] 2140 	jreq 1$
      000BC0 CC 06 E7         [ 2] 2141 	jp syntax_error
      000BC3 85               [ 2] 2142 1$: popw x 
                                   2143 	; check for bounds 
      000BC4 C3 00 1E         [ 2] 2144 	cpw x,array_size 
      000BC7 23 05            [ 2] 2145 	jrule 3$
                                   2146 ; bounds {1..array_size}	
      000BC9 A6 0A            [ 1] 2147 2$: ld a,#ERR_BAD_VALUE 
      000BCB CC 06 E9         [ 2] 2148 	jp tb_error 
      000BCE 5D               [ 2] 2149 3$: tnzw  x
      000BCF 27 F8            [ 1] 2150 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000BD1 58               [ 2] 2151 	sllw x 
      000BD2 89               [ 2] 2152 	pushw x 
      000BD3 AE 16 90         [ 2] 2153 	ldw x,#tib
      000BD6 72 F0 01         [ 2] 2154 	subw x,(1,sp)
      000BD9                       2155 	_drop 2   
      000BD9 5B 02            [ 2]    1     addw sp,#2 
      000BDB A6 84            [ 1] 2156 	ld a,#TK_INTGR
      000BDD 81               [ 4] 2157 	ret 
                                   2158 
                                   2159 
                                   2160 ;***********************************
                                   2161 ;   expression parse,execute 
                                   2162 ;***********************************
                                   2163 ;-----------------------------------
                                   2164 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2165 ;			 integer | function |
                                   2166 ;			 '('relation')' 
                                   2167 ; output:
                                   2168 ;   A    token attribute 
                                   2169 ;   X 	 integer
                                   2170 ; ---------------------------------
                           000001  2171 	NEG=1
                           000001  2172 	VSIZE=1
      000BDE                       2173 factor:
      000BDE                       2174 	_vars VSIZE 
      000BDE 52 01            [ 2]    1     sub sp,#VSIZE 
      000BE0 CD 07 D6         [ 4] 2175 	call next_token
      000BE3 A1 02            [ 1] 2176 	cp a,#CMD_END  
      000BE5 25 3D            [ 1] 2177 	jrult 16$
      000BE7 6B 01            [ 1] 2178 1$:	ld (NEG,sp),a 
      000BE9 A4 30            [ 1] 2179 	and a,#TK_GRP_MASK
      000BEB A1 10            [ 1] 2180 	cp a,#TK_GRP_ADD 
      000BED 27 04            [ 1] 2181 	jreq 2$
      000BEF 7B 01            [ 1] 2182 	ld a,(NEG,sp)
      000BF1 20 03            [ 2] 2183 	jra 4$  
      000BF3                       2184 2$:	
      000BF3 CD 07 D6         [ 4] 2185 	call next_token 
      000BF6                       2186 4$:	
      000BF6 A1 81            [ 1] 2187 	cp a,#TK_IFUNC 
      000BF8 26 03            [ 1] 2188 	jrne 5$ 
      000BFA FD               [ 4] 2189 	call (x) 
      000BFB 20 32            [ 2] 2190 	jra 18$ 
      000BFD                       2191 5$:
      000BFD A1 84            [ 1] 2192 	cp a,#TK_INTGR
      000BFF 26 02            [ 1] 2193 	jrne 6$
      000C01 20 2C            [ 2] 2194 	jra 18$
      000C03                       2195 6$:
      000C03 A1 06            [ 1] 2196 	cp a,#TK_ARRAY
      000C05 26 06            [ 1] 2197 	jrne 10$
      000C07 CD 0B B9         [ 4] 2198 	call get_array_element
      000C0A FE               [ 2] 2199 	ldw x,(x)
      000C0B 20 22            [ 2] 2200 	jra 18$ 
      000C0D                       2201 10$:
      000C0D A1 85            [ 1] 2202 	cp a,#TK_VAR 
      000C0F 26 03            [ 1] 2203 	jrne 12$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000C11 FE               [ 2] 2204 	ldw x,(x)
      000C12 20 1B            [ 2] 2205 	jra 18$
      000C14                       2206 12$:			
      000C14 A1 07            [ 1] 2207 	cp a,#TK_LPAREN
      000C16 26 0C            [ 1] 2208 	jrne 16$
      000C18 CD 0C D6         [ 4] 2209 	call relation
      000C1B 89               [ 2] 2210 	pushw x 
      000C1C A6 08            [ 1] 2211 	ld a,#TK_RPAREN 
      000C1E CD 0B 7C         [ 4] 2212 	call expect
      000C21 85               [ 2] 2213 	popw x 
      000C22 20 0B            [ 2] 2214 	jra 18$	
      000C24                       2215 16$:
      000C24 4D               [ 1] 2216 	tnz a 
      000C25 27 11            [ 1] 2217 	jreq 20$ 
      000C27                       2218 	_unget_token
      000C27 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C2C 4F               [ 1] 2219 	clr a 
      000C2D 20 09            [ 2] 2220 	jra 20$ 
      000C2F                       2221 18$: 
      000C2F A6 11            [ 1] 2222 	ld a,#TK_MINUS 
      000C31 11 01            [ 1] 2223 	cp a,(NEG,sp)
      000C33 26 01            [ 1] 2224 	jrne 19$
      000C35 50               [ 2] 2225 	negw x
      000C36                       2226 19$:
      000C36 A6 84            [ 1] 2227 	ld a,#TK_INTGR
      000C38                       2228 20$:
      000C38                       2229 	_drop VSIZE
      000C38 5B 01            [ 2]    1     addw sp,#VSIZE 
      000C3A 81               [ 4] 2230 	ret
                                   2231 
                                   2232 ;-----------------------------------
                                   2233 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2234 ; output:
                                   2235 ;   A    	token attribute 
                                   2236 ;	X		integer
                                   2237 ;-----------------------------------
                           000001  2238 	N1=1   ; int16_t
                           000003  2239 	MULOP=3
                           000003  2240 	VSIZE=3
      000C3B                       2241 term:
      000C3B                       2242 	_vars VSIZE
      000C3B 52 03            [ 2]    1     sub sp,#VSIZE 
      000C3D CD 0B DE         [ 4] 2243 	call factor
      000C40 4D               [ 1] 2244 	tnz a 
      000C41 27 47            [ 1] 2245 	jreq term_exit 
      000C43                       2246 term01:	 ; check for  operator 
      000C43 1F 01            [ 2] 2247 	ldw (N1,sp),x  ; save first factor 
      000C45 CD 07 D6         [ 4] 2248 	call next_token
      000C48 6B 03            [ 1] 2249 	ld (MULOP,sp),a
      000C4A A1 02            [ 1] 2250 	cp a,#CMD_END
      000C4C 25 2F            [ 1] 2251 	jrult 8$
      000C4E A4 30            [ 1] 2252 	and a,#TK_GRP_MASK
      000C50 A1 20            [ 1] 2253 	cp a,#TK_GRP_MULT
      000C52 27 02            [ 1] 2254 	jreq 1$
      000C54 20 27            [ 2] 2255 	jra 8$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C56                       2256 1$:	; got *|/|%
      000C56 CD 0B DE         [ 4] 2257 	call factor
      000C59 A1 84            [ 1] 2258 	cp a,#TK_INTGR
      000C5B 27 03            [ 1] 2259 	jreq 2$
      000C5D CC 06 E7         [ 2] 2260 	jp syntax_error
      000C60 90 93            [ 1] 2261 2$:	ldw y,x 
      000C62 1E 01            [ 2] 2262 	ldw x,(N1,sp)
      000C64 7B 03            [ 1] 2263 	ld a,(MULOP,sp) 
      000C66 A1 20            [ 1] 2264 	cp a,#TK_MULT 
      000C68 26 05            [ 1] 2265 	jrne 3$
      000C6A CD 0A 3F         [ 4] 2266 	call multiply 
      000C6D 20 D4            [ 2] 2267 	jra term01
      000C6F A1 21            [ 1] 2268 3$: cp a,#TK_DIV 
      000C71 26 05            [ 1] 2269 	jrne 4$ 
      000C73 CD 0A F8         [ 4] 2270 	call divide 
      000C76 20 CB            [ 2] 2271 	jra term01 
      000C78 CD 0B 0E         [ 4] 2272 4$: call modulo
      000C7B 20 C6            [ 2] 2273 	jra term01 
      000C7D 7B 03            [ 1] 2274 8$: ld a,(MULOP,sp)
      000C7F 27 05            [ 1] 2275 	jreq 9$ 
      000C81                       2276 	_unget_token
      000C81 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C86 1E 01            [ 2] 2277 9$: ldw x,(N1,sp)
      000C88 A6 84            [ 1] 2278 	ld a,#TK_INTGR 	
      000C8A                       2279 term_exit:
      000C8A                       2280 	_drop VSIZE 
      000C8A 5B 03            [ 2]    1     addw sp,#VSIZE 
      000C8C 81               [ 4] 2281 	ret 
                                   2282 
                                   2283 ;-------------------------------
                                   2284 ;  expr ::= term [['+'|'-'] term]*
                                   2285 ;  result range {-32768..32767}
                                   2286 ;  output:
                                   2287 ;   A    token attribute 
                                   2288 ;   X	 integer   
                                   2289 ;-------------------------------
                           000001  2290 	N1=1
                           000003  2291 	N2=3 
                           000005  2292 	OP=5 
                           000005  2293 	VSIZE=5 
      000C8D                       2294 expression:
      000C8D                       2295 	_vars VSIZE 
      000C8D 52 05            [ 2]    1     sub sp,#VSIZE 
      000C8F CD 0C 3B         [ 4] 2296 	call term
      000C92 4D               [ 1] 2297 	tnz a 
      000C93 27 3E            [ 1] 2298 	jreq expr_exit 
      000C95 1F 01            [ 2] 2299 1$:	ldw (N1,sp),x 
      000C97 CD 07 D6         [ 4] 2300 	call next_token
      000C9A 6B 05            [ 1] 2301 	ld (OP,sp),a 
      000C9C A1 02            [ 1] 2302 	cp a,#CMD_END 
      000C9E 25 26            [ 1] 2303 	jrult 8$ 
      000CA0 A4 30            [ 1] 2304 	and a,#TK_GRP_MASK
      000CA2 A1 10            [ 1] 2305 	cp a,#TK_GRP_ADD 
      000CA4 27 02            [ 1] 2306 	jreq 2$ 
      000CA6 20 1E            [ 2] 2307 	jra 8$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000CA8                       2308 2$: 
      000CA8 CD 0C 3B         [ 4] 2309 	call term
      000CAB A1 84            [ 1] 2310 	cp a,#TK_INTGR
      000CAD 27 03            [ 1] 2311 	jreq 3$
      000CAF CC 06 E7         [ 2] 2312 	jp syntax_error
      000CB2 1F 03            [ 2] 2313 3$:	ldw (N2,sp),x 
      000CB4 1E 01            [ 2] 2314 	ldw x,(N1,sp)
      000CB6 7B 05            [ 1] 2315 	ld a,(OP,sp)
      000CB8 A1 10            [ 1] 2316 	cp a,#TK_PLUS 
      000CBA 26 05            [ 1] 2317 	jrne 4$
      000CBC 72 FB 03         [ 2] 2318 	addw x,(N2,sp)
      000CBF 20 D4            [ 2] 2319 	jra 1$ 
      000CC1 72 F0 03         [ 2] 2320 4$:	subw x,(N2,sp)
      000CC4 20 CF            [ 2] 2321 	jra 1$
      000CC6 7B 05            [ 1] 2322 8$: ld a,(OP,sp)
      000CC8 27 05            [ 1] 2323 	jreq 9$ 
      000CCA                       2324 	_unget_token	
      000CCA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000CCF 1E 01            [ 2] 2325 9$: ldw x,(N1,sp)
      000CD1 A6 84            [ 1] 2326 	ld a,#TK_INTGR	
      000CD3                       2327 expr_exit:
      000CD3                       2328 	_drop VSIZE 
      000CD3 5B 05            [ 2]    1     addw sp,#VSIZE 
      000CD5 81               [ 4] 2329 	ret 
                                   2330 
                                   2331 ;---------------------------------------------
                                   2332 ; rel ::= expr rel_op expr
                                   2333 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   2334 ;  relation return  integer , zero is false 
                                   2335 ;  output:
                                   2336 ;    A 		token attribute  
                                   2337 ;	 X		integer 
                                   2338 ;---------------------------------------------
                           000001  2339 	N1=1
                           000003  2340 	RELOP=3
                           000003  2341 	VSIZE=3 
      000CD6                       2342 relation: 
      000CD6                       2343 	_vars VSIZE
      000CD6 52 03            [ 2]    1     sub sp,#VSIZE 
      000CD8 CD 0C 8D         [ 4] 2344 	call expression
      000CDB 4D               [ 1] 2345 	tnz a 
      000CDC 27 4D            [ 1] 2346 	jreq rel_exit
      000CDE 1F 01            [ 2] 2347 	ldw (N1,sp),x 
                                   2348 ; expect rel_op or leave 
      000CE0 CD 07 D6         [ 4] 2349 	call next_token 
      000CE3 6B 03            [ 1] 2350 	ld (RELOP,sp),a 
      000CE5 A4 30            [ 1] 2351 	and a,#TK_GRP_MASK
      000CE7 A1 30            [ 1] 2352 	cp a,#TK_GRP_RELOP 
      000CE9 26 33            [ 1] 2353 	jrne 8$
      000CEB                       2354 2$:	; expect another expression
      000CEB CD 0C 8D         [ 4] 2355 	call expression
      000CEE A1 84            [ 1] 2356 	cp a,#TK_INTGR
      000CF0 27 03            [ 1] 2357 	jreq 3$
      000CF2 CC 06 E7         [ 2] 2358 	jp syntax_error 
      000CF5 CF 00 0C         [ 2] 2359 3$:	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CF8 1E 01            [ 2] 2360 	ldw x,(N1,sp) 
      000CFA 72 B0 00 0C      [ 2] 2361 	subw x,acc16
      000CFE 26 06            [ 1] 2362 	jrne 4$
      000D00 35 02 00 0D      [ 1] 2363 	mov acc8,#2 ; n1==n2
      000D04 20 0C            [ 2] 2364 	jra 6$ 
      000D06                       2365 4$: 
      000D06 2C 06            [ 1] 2366 	jrsgt 5$  
      000D08 35 04 00 0D      [ 1] 2367 	mov acc8,#4 ; n1<2 
      000D0C 20 04            [ 2] 2368 	jra 6$
      000D0E                       2369 5$:
      000D0E 35 01 00 0D      [ 1] 2370 	mov acc8,#1 ; n1>n2 
      000D12                       2371 6$:
      000D12 5F               [ 1] 2372 	clrw x 
      000D13 C6 00 0D         [ 1] 2373 	ld a, acc8  
      000D16 14 03            [ 1] 2374 	and a,(RELOP,sp)
      000D18 4D               [ 1] 2375 	tnz a 
      000D19 27 0E            [ 1] 2376 	jreq 10$
      000D1B 5C               [ 1] 2377 	incw x 
      000D1C 20 0B            [ 2] 2378 	jra 10$  	
      000D1E 7B 03            [ 1] 2379 8$: ld a,(RELOP,sp)
      000D20 27 05            [ 1] 2380 	jreq 9$
      000D22                       2381 	_unget_token
      000D22 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D27                       2382 9$: 
      000D27 1E 01            [ 2] 2383 	ldw x,(N1,sp)
      000D29                       2384 10$:
      000D29 A6 84            [ 1] 2385 	ld a,#TK_INTGR
      000D2B                       2386 rel_exit:
      000D2B                       2387 	_drop VSIZE
      000D2B 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D2D 81               [ 4] 2388 	ret 
                                   2389 
                                   2390 ;--------------------------------
                                   2391 ; BASIC: SHOW 
                                   2392 ; print stack content in hexadecimal bytes 
                                   2393 ; 16 bytes per row 
                                   2394 ;--------------------------------
      000D2E                       2395 show:
      000D2E AE 0D 48         [ 2] 2396 	ldw x,#cstk_prompt
      000D31 CD 00 00         [ 4] 2397 	call puts 
      000D34 96               [ 1] 2398 	ldw x,sp 
      000D35 1C 00 03         [ 2] 2399 	addw x,#3 ; ignore return address
      000D38 90 AE 18 00      [ 2] 2400 	ldw y,#RAM_SIZE  
      000D3C CF 00 0C         [ 2] 2401 	ldw acc16,x 
      000D3F 72 B2 00 0C      [ 2] 2402 	subw y,acc16
      000D43 CD 03 4F         [ 4] 2403 	call hex_dump
      000D46 4F               [ 1] 2404 	clr a 
      000D47 81               [ 4] 2405 	ret
                                   2406 
      000D48 0A 63 6F 6E 74 65 6E  2407 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2408 
                                   2409 
                                   2410 ;--------------------------------------------
                                   2411 ; BASIC: HEX 
                                   2412 ; select hexadecimal base for integer print
                                   2413 ;---------------------------------------------
      000D6F                       2414 hex_base:
      000D6F 35 10 00 0A      [ 1] 2415 	mov base,#16 
      000D73 81               [ 4] 2416 	ret 
                                   2417 
                                   2418 ;--------------------------------------------
                                   2419 ; BASIC: DEC 
                                   2420 ; select decimal base for integer print
                                   2421 ;---------------------------------------------
      000D74                       2422 dec_base:
      000D74 35 0A 00 0A      [ 1] 2423 	mov base,#10
      000D78 81               [ 4] 2424 	ret 
                                   2425 
                                   2426 ;------------------------
                                   2427 ; BASIC: FREE 
                                   2428 ; return free size in text area
                                   2429 ; output:
                                   2430 ;   A 		TK_INTGR
                                   2431 ;   X 	    size integer
                                   2432 ;--------------------------
      000D79                       2433 free:
      000D79 CE 00 19         [ 2] 2434 	ldw x,txtbgn 
      000D7C C3 1E 80         [ 2] 2435 	cpw x,app_space
      000D7F 25 16            [ 1] 2436 	jrult 1$
      000D81 AE FF FF         [ 2] 2437 	ldw x,#0xffff 
      000D84 90 AE 1E 84      [ 2] 2438 	ldw y,#app
      000D88 72 B9 1E 82      [ 2] 2439 	addw y,app_size
      000D8C 90 CF 00 0C      [ 2] 2440 	ldw acc16,y 
      000D90 72 B0 00 0C      [ 2] 2441 	subw x,acc16 
      000D94 5C               [ 1] 2442 	incw x 
      000D95 20 07            [ 2] 2443 	jra 2$ 
      000D97 AE 16 90         [ 2] 2444 1$:	ldw x,#tib 
      000D9A 72 B0 00 1B      [ 2] 2445 	subw x,txtend 
      000D9E A6 84            [ 1] 2446 2$:	ld a,#TK_INTGR
      000DA0 81               [ 4] 2447 	ret 
                                   2448 
                                   2449 
                                   2450 ;------------------------
                                   2451 ; BASIC: UBOUND  
                                   2452 ; return array variable size 
                                   2453 ; output:
                                   2454 ;   A 		TK_INTGR
                                   2455 ;   X 	    array size 
                                   2456 ;--------------------------
      000DA1                       2457 ubound:
      000DA1 AE 16 90         [ 2] 2458 	ldw x,#tib
      000DA4 72 B0 00 1B      [ 2] 2459 	subw x,txtend 
      000DA8 90 CE 00 04      [ 2] 2460 	ldw y,basicptr 
      000DAC 90 C3 00 1B      [ 2] 2461 	cpw y,txtend 
      000DB0 25 0A            [ 1] 2462 	jrult 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000DB2 3B 00 03         [ 1] 2463 	push count 
      000DB5 4B 00            [ 1] 2464 	push #0 
      000DB7 72 F0 01         [ 2] 2465 	subw x,(1,sp)
      000DBA                       2466 	_drop 2 
      000DBA 5B 02            [ 2]    1     addw sp,#2 
      000DBC 54               [ 2] 2467 1$:	srlw x 
      000DBD CF 00 1E         [ 2] 2468 	ldw array_size,x
      000DC0 A6 84            [ 1] 2469 	ld a,#TK_INTGR
      000DC2 81               [ 4] 2470 	ret 
                                   2471 
                                   2472 ;-----------------------------
                                   2473 ; BASIC: LET var=expr 
                                   2474 ; variable assignement 
                                   2475 ; output:
                                   2476 ;   A 		TK_NONE 
                                   2477 ;-----------------------------
      000DC3                       2478 let::
      000DC3 CD 07 D6         [ 4] 2479 	call next_token 
      000DC6 A1 85            [ 1] 2480 	cp a,#TK_VAR 
      000DC8 27 0A            [ 1] 2481 	jreq let_var
      000DCA A1 06            [ 1] 2482 	cp a,#TK_ARRAY 
      000DCC 27 03            [ 1] 2483 	jreq  let_array
      000DCE CC 06 E7         [ 2] 2484 	jp syntax_error
      000DD1                       2485 let_array:
      000DD1 CD 0B B9         [ 4] 2486 	call get_array_element
      000DD4                       2487 let_var:
      000DD4 89               [ 2] 2488 	pushw x  
      000DD5 CD 07 D6         [ 4] 2489 	call next_token 
      000DD8 A1 32            [ 1] 2490 	cp a,#TK_EQUAL
      000DDA 27 03            [ 1] 2491 	jreq 1$
      000DDC CC 06 E7         [ 2] 2492 	jp syntax_error
      000DDF                       2493 1$:	
      000DDF CD 0C D6         [ 4] 2494 	call relation   
      000DE2 A1 84            [ 1] 2495 	cp a,#TK_INTGR 
      000DE4 27 03            [ 1] 2496 	jreq 2$
      000DE6 CC 06 E7         [ 2] 2497 	jp syntax_error
      000DE9                       2498 2$:	
      000DE9 90 93            [ 1] 2499 	ldw y,x 
      000DEB 85               [ 2] 2500 	popw x   
      000DEC FF               [ 2] 2501 	ldw (x),y   
      000DED 81               [ 4] 2502 	ret 
                                   2503 
                                   2504 ;----------------------------
                                   2505 ; BASIC: LIST [[start][,end]]
                                   2506 ; list program lines 
                                   2507 ; form start to end 
                                   2508 ; if empty argument list then 
                                   2509 ; list all.
                                   2510 ;----------------------------
                           000001  2511 	FIRST=1
                           000003  2512 	LAST=3 
                           000005  2513 	LN_PTR=5
                           000006  2514 	VSIZE=6 
      000DEE                       2515 list:
      000DEE CE 00 19         [ 2] 2516 	ldw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000DF1 C3 00 1B         [ 2] 2517 	cpw x,txtend 
      000DF4 2B 01            [ 1] 2518 	jrmi 1$
      000DF6 81               [ 4] 2519 	ret 
      000DF7                       2520 1$:	
      000DF7                       2521 	_vars VSIZE
      000DF7 52 06            [ 2]    1     sub sp,#VSIZE 
      000DF9 1F 05            [ 2] 2522 	ldw (LN_PTR,sp),x 
      000DFB FE               [ 2] 2523 	ldw x,(x) 
      000DFC 1F 01            [ 2] 2524 	ldw (FIRST,sp),x ; list from first line 
      000DFE AE 7F FF         [ 2] 2525 	ldw x,#MAX_LINENO ; biggest line number 
      000E01 1F 03            [ 2] 2526 	ldw (LAST,sp),x 
      000E03 CD 0B 8E         [ 4] 2527 	call arg_list
      000E06 4D               [ 1] 2528 	tnz a
      000E07 27 31            [ 1] 2529 	jreq list_loop 
      000E09 A1 02            [ 1] 2530 	cp a,#2 
      000E0B 27 07            [ 1] 2531 	jreq 4$
      000E0D A1 01            [ 1] 2532 	cp a,#1 
      000E0F 27 06            [ 1] 2533 	jreq first_line 
      000E11 CC 06 E7         [ 2] 2534 	jp syntax_error 
      000E14 85               [ 2] 2535 4$:	popw x 
      000E15 1F 05            [ 2] 2536 	ldw (LAST+2,sp),x 
      000E17                       2537 first_line:
      000E17 85               [ 2] 2538 	popw x
      000E18 1F 01            [ 2] 2539 	ldw (FIRST,sp),x 
      000E1A                       2540 lines_skip:
      000E1A CE 00 19         [ 2] 2541 	ldw x,txtbgn
      000E1D 1F 05            [ 2] 2542 2$:	ldw (LN_PTR,sp),x 
      000E1F C3 00 1B         [ 2] 2543 	cpw x,txtend 
      000E22 2A 38            [ 1] 2544 	jrpl list_exit 
      000E24 FE               [ 2] 2545 	ldw x,(x) ;line# 
      000E25 13 01            [ 2] 2546 	cpw x,(FIRST,sp)
      000E27 2A 11            [ 1] 2547 	jrpl list_loop 
      000E29 1E 05            [ 2] 2548 	ldw x,(LN_PTR,sp) 
      000E2B E6 02            [ 1] 2549 	ld a,(2,x)
      000E2D C7 00 0D         [ 1] 2550 	ld acc8,a 
      000E30 72 5F 00 0C      [ 1] 2551 	clr acc16 
      000E34 72 BB 00 0C      [ 2] 2552 	addw x,acc16
      000E38 20 E3            [ 2] 2553 	jra 2$ 
                                   2554 ; print loop
      000E3A                       2555 list_loop:
      000E3A 1E 05            [ 2] 2556 	ldw x,(LN_PTR,sp)
      000E3C E6 02            [ 1] 2557 	ld a,(2,x) 
      000E3E CD 0E 6A         [ 4] 2558 	call prt_basic_line
      000E41 1E 05            [ 2] 2559 	ldw x,(LN_PTR,sp)
      000E43 E6 02            [ 1] 2560 	ld a,(2,x)
      000E45 C7 00 0D         [ 1] 2561 	ld acc8,a 
      000E48 72 5F 00 0C      [ 1] 2562 	clr acc16 
      000E4C 72 BB 00 0C      [ 2] 2563 	addw x,acc16
      000E50 C3 00 1B         [ 2] 2564 	cpw x,txtend 
      000E53 2A 07            [ 1] 2565 	jrpl list_exit
      000E55 1F 05            [ 2] 2566 	ldw (LN_PTR,sp),x
      000E57 FE               [ 2] 2567 	ldw x,(x)
      000E58 13 03            [ 2] 2568 	cpw x,(LAST,sp)  
      000E5A 2F DE            [ 1] 2569 	jrslt list_loop
      000E5C                       2570 list_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E5C 55 00 03 00 01   [ 1] 2571 	mov in,count 
      000E61 AE 16 E0         [ 2] 2572 	ldw x,#pad 
      000E64 CF 00 04         [ 2] 2573 	ldw basicptr,x 
      000E67                       2574 	_drop VSIZE 
      000E67 5B 06            [ 2]    1     addw sp,#VSIZE 
      000E69 81               [ 4] 2575 	ret
                                   2576 
                                   2577 
                                   2578 ;--------------------------
                                   2579 ; decompile line from token list
                                   2580 ; and print it. 
                                   2581 ; input:
                                   2582 ;   A       stop at this position 
                                   2583 ;   X 		pointer at line
                                   2584 ; output:
                                   2585 ;   none 
                                   2586 ;--------------------------	
      000E6A                       2587 prt_basic_line:
      000E6A C7 00 03         [ 1] 2588 	ld count,a 
      000E6D E6 02            [ 1] 2589 	ld a,(2,x)
      000E6F C1 00 03         [ 1] 2590 	cp a,count 
      000E72 2A 03            [ 1] 2591 	jrpl 1$ 
      000E74 C7 00 03         [ 1] 2592 	ld count,a 
      000E77 CF 00 04         [ 2] 2593 1$:	ldw basicptr,x 
      000E7A 90 AE 16 90      [ 2] 2594 	ldw y,#tib  
      000E7E CD 00 00         [ 4] 2595 	call decompile 
      000E81 CD 00 00         [ 4] 2596 	call puts 
      000E84 A6 0D            [ 1] 2597 	ld a,#CR 
      000E86 CD 02 B2         [ 4] 2598 	call putc 
      000E89 81               [ 4] 2599 	ret 
                                   2600 
                                   2601 
                                   2602 
                                   2603 ;---------------------------------
                                   2604 ; BASIC: PRINT|? arg_list 
                                   2605 ; print values from argument list
                                   2606 ;----------------------------------
                           000001  2607 	COMMA=1
                           000001  2608 	VSIZE=1
      000E8A                       2609 print:
      000E8A                       2610 	_vars VSIZE 
      000E8A 52 01            [ 2]    1     sub sp,#VSIZE 
      000E8C                       2611 reset_comma:
      000E8C 0F 01            [ 1] 2612 	clr (COMMA,sp)
      000E8E                       2613 prt_loop:
      000E8E CD 07 D6         [ 4] 2614 	call next_token
      000E91 A1 02            [ 1] 2615 	cp a,#CMD_END 
      000E93 25 4F            [ 1] 2616 	jrult print_exit ; colon or end of line 
      000E95 A1 02            [ 1] 2617 	cp a,#TK_QSTR
      000E97 27 12            [ 1] 2618 	jreq 1$
      000E99 A1 03            [ 1] 2619 	cp a,#TK_CHAR 
      000E9B 27 13            [ 1] 2620 	jreq 2$ 
      000E9D A1 82            [ 1] 2621 	cp a,#TK_CFUNC 
      000E9F 27 15            [ 1] 2622 	jreq 3$
      000EA1 A1 09            [ 1] 2623 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EA3 27 18            [ 1] 2624 	jreq 4$
      000EA5 A1 0A            [ 1] 2625 	cp a,#TK_SHARP 
      000EA7 27 18            [ 1] 2626 	jreq 5$
      000EA9 20 28            [ 2] 2627 	jra 7$ 
      000EAB                       2628 1$:	; print string 
      000EAB CD 00 00         [ 4] 2629 	call puts
      000EAE 20 DC            [ 2] 2630 	jra reset_comma
      000EB0                       2631 2$:	; print character 
      000EB0 9F               [ 1] 2632 	ld a,xl 
      000EB1 CD 02 B2         [ 4] 2633 	call putc 
      000EB4 20 D6            [ 2] 2634 	jra reset_comma 
      000EB6                       2635 3$: ; print character function value  	
      000EB6 FD               [ 4] 2636 	call (x)
      000EB7 9F               [ 1] 2637 	ld a,xl 
      000EB8 CD 02 B2         [ 4] 2638 	call putc
      000EBB 20 CF            [ 2] 2639 	jra reset_comma 
      000EBD                       2640 4$: ; set comma state 
      000EBD 03 01            [ 1] 2641 	cpl (COMMA,sp)
      000EBF 20 CD            [ 2] 2642 	jra prt_loop   
      000EC1                       2643 5$: ; # character must be followed by an integer   
      000EC1 CD 07 D6         [ 4] 2644 	call next_token
      000EC4 A1 84            [ 1] 2645 	cp a,#TK_INTGR 
      000EC6 27 03            [ 1] 2646 	jreq 6$
      000EC8 CC 06 E7         [ 2] 2647 	jp syntax_error 
      000ECB                       2648 6$: ; set tab width
      000ECB 9F               [ 1] 2649 	ld a,xl 
      000ECC A4 0F            [ 1] 2650 	and a,#15 
      000ECE C7 00 21         [ 1] 2651 	ld tab_width,a 
      000ED1 20 B9            [ 2] 2652 	jra reset_comma 
      000ED3                       2653 7$:	
      000ED3                       2654 	_unget_token 
      000ED3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000ED8 CD 0C D6         [ 4] 2655 	call relation 
      000EDB A1 84            [ 1] 2656 	cp a,#TK_INTGR 
      000EDD 26 05            [ 1] 2657 	jrne print_exit 
      000EDF CD 08 31         [ 4] 2658     call print_int 
      000EE2 20 A8            [ 2] 2659 	jra reset_comma 
      000EE4                       2660 print_exit:
      000EE4 0D 01            [ 1] 2661 	tnz (COMMA,sp)
      000EE6 26 05            [ 1] 2662 	jrne 9$
      000EE8 A6 0D            [ 1] 2663 	ld a,#CR 
      000EEA CD 02 B2         [ 4] 2664     call putc 
      000EED                       2665 9$:	_drop VSIZE 
      000EED 5B 01            [ 2]    1     addw sp,#VSIZE 
      000EEF 81               [ 4] 2666 	ret 
                                   2667 
                                   2668 ;----------------------
                                   2669 ; 'save_context' and
                                   2670 ; 'rest_context' must be 
                                   2671 ; called at the same 
                                   2672 ; call stack depth 
                                   2673 ; i.e. SP must have the 
                                   2674 ; save value at  
                                   2675 ; entry point of both 
                                   2676 ; routine. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2677 ;---------------------
                           000004  2678 	CTXT_SIZE=4 ; size of saved data 
                                   2679 ;--------------------
                                   2680 ; save current BASIC
                                   2681 ; interpreter context 
                                   2682 ; on stack 
                                   2683 ;--------------------
      000EF0                       2684 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000EF0                       2685 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000EF0                       2686 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000EF0                       2687 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000EF0                       2688 save_context:
      000EF0 CE 00 04         [ 2] 2689 	ldw x,basicptr 
      000EF3 1F 03            [ 2] 2690 	ldw (BPTR,sp),x
      000EF5 C6 00 01         [ 1] 2691 	ld a,in 
      000EF8 6B 05            [ 1] 2692 	ld (IN,sp),a
      000EFA C6 00 03         [ 1] 2693 	ld a,count 
      000EFD 6B 06            [ 1] 2694 	ld (CNT,sp),a  
      000EFF 81               [ 4] 2695 	ret
                                   2696 
                                   2697 ;-----------------------
                                   2698 ; restore previously saved 
                                   2699 ; BASIC interpreter context 
                                   2700 ; from stack 
                                   2701 ;-------------------------
      000F00                       2702 rest_context:
      000F00 1E 03            [ 2] 2703 	ldw x,(BPTR,sp)
      000F02 CF 00 04         [ 2] 2704 	ldw basicptr,x 
      000F05 7B 05            [ 1] 2705 	ld a,(IN,sp)
      000F07 C7 00 01         [ 1] 2706 	ld in,a
      000F0A 7B 06            [ 1] 2707 	ld a,(CNT,sp)
      000F0C C7 00 03         [ 1] 2708 	ld count,a  
      000F0F 81               [ 4] 2709 	ret
                                   2710 
                                   2711 
                                   2712 
                                   2713 ;------------------------------------------
                                   2714 ; BASIC: INPUT [string]var[,[string]var]
                                   2715 ; input value in variables 
                                   2716 ; [string] optionally can be used as prompt 
                                   2717 ;-----------------------------------------
                           000001  2718 	CX_BPTR=1
                           000003  2719 	CX_IN=3
                           000004  2720 	CX_CNT=4
                           000005  2721 	SKIP=5
                           000006  2722 	VAR_ADDR=6
                           000007  2723 	VSIZE=7
      000F10                       2724 input_var:
      000F10                       2725 	_vars VSIZE 
      000F10 52 07            [ 2]    1     sub sp,#VSIZE 
      000F12                       2726 input_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F12 0F 05            [ 1] 2727 	clr (SKIP,sp)
      000F14 CD 07 D6         [ 4] 2728 	call next_token 
      000F17 A1 02            [ 1] 2729 	cp a,#TK_QSTR 
      000F19 26 08            [ 1] 2730 	jrne 1$ 
      000F1B CD 00 00         [ 4] 2731 	call puts 
      000F1E 03 05            [ 1] 2732 	cpl (SKIP,sp)
      000F20 CD 07 D6         [ 4] 2733 	call next_token 
      000F23 A1 85            [ 1] 2734 1$: cp a,#TK_VAR  
      000F25 27 03            [ 1] 2735 	jreq 2$ 
      000F27 CC 06 E7         [ 2] 2736 	jp syntax_error
      000F2A 1F 06            [ 2] 2737 2$:	ldw (VAR_ADDR,sp),x 
      000F2C 0D 05            [ 1] 2738 	tnz (SKIP,sp)
      000F2E 26 06            [ 1] 2739 	jrne 21$ 
      000F30 CD 00 00         [ 4] 2740 	call var_name 
      000F33 CD 02 B2         [ 4] 2741 	call putc   
      000F36                       2742 21$:
      000F36 A6 3A            [ 1] 2743 	ld a,#':
      000F38 CD 02 B2         [ 4] 2744 	call putc 
      000F3B CD 0E F0         [ 4] 2745 	call save_context 
      000F3E 72 5F 00 03      [ 1] 2746 	clr count  
      000F42 CD 00 00         [ 4] 2747 	call readln 
      000F45 AE 16 90         [ 2] 2748 	ldw x,#tib 
      000F48 3B 00 03         [ 1] 2749 	push count
      000F4B 4B 00            [ 1] 2750 	push #0 
      000F4D 72 FB 01         [ 2] 2751 	addw x,(1,sp)
      000F50 5C               [ 1] 2752 	incw x 
      000F51                       2753 	_drop 2 
      000F51 5B 02            [ 2]    1     addw sp,#2 
      000F53 72 5F 00 01      [ 1] 2754 	clr in 
      000F57 CD 00 00         [ 4] 2755 	call get_token
      000F5A A1 84            [ 1] 2756 	cp a,#TK_INTGR
      000F5C 27 06            [ 1] 2757 	jreq 3$ 
      000F5E CD 0F 00         [ 4] 2758 	call rest_context 
      000F61 CC 06 E7         [ 2] 2759 	jp syntax_error
      000F64 16 06            [ 2] 2760 3$: ldw y,(VAR_ADDR,sp) 
      000F66 90 FF            [ 2] 2761 	ldw (y),x 
      000F68 CD 0F 00         [ 4] 2762 	call rest_context
      000F6B CD 07 D6         [ 4] 2763 	call next_token 
      000F6E A1 09            [ 1] 2764 	cp a,#TK_COMMA 
      000F70 27 A0            [ 1] 2765 	jreq input_loop
      000F72 A1 00            [ 1] 2766 	cp a,#TK_NONE 
      000F74 27 07            [ 1] 2767 	jreq input_exit  
      000F76 A1 0B            [ 1] 2768 	cp a,#TK_COLON 
      000F78 27 03            [ 1] 2769     jreq input_exit 
      000F7A CC 06 E7         [ 2] 2770 	jp syntax_error 
      000F7D                       2771 input_exit:
      000F7D                       2772 	_drop VSIZE 
      000F7D 5B 07            [ 2]    1     addw sp,#VSIZE 
      000F7F 81               [ 4] 2773 	ret 
                                   2774 
                                   2775 
                                   2776 ;---------------------
                                   2777 ; BASIC: REMARK | ' 
                                   2778 ; skip comment to end of line 
                                   2779 ;---------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F80                       2780 remark::
      000F80 55 00 03 00 01   [ 1] 2781 	mov in,count 
      000F85 81               [ 4] 2782  	ret 
                                   2783 
                                   2784 
                                   2785 ;---------------------
                                   2786 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2787 ; read in loop 'addr'  
                                   2788 ; apply & 'mask' to value 
                                   2789 ; loop while result==0.  
                                   2790 ; 'xor_mask' is used to 
                                   2791 ; invert the wait logic.
                                   2792 ; i.e. loop while not 0.
                                   2793 ;---------------------
                           000001  2794 	XMASK=1 
                           000002  2795 	MASK=2
                           000003  2796 	ADDR=3
                           000004  2797 	VSIZE=4
      000F86                       2798 wait: 
      000F86                       2799 	_vars VSIZE
      000F86 52 04            [ 2]    1     sub sp,#VSIZE 
      000F88 0F 01            [ 1] 2800 	clr (XMASK,sp) 
      000F8A CD 0B 8E         [ 4] 2801 	call arg_list 
      000F8D A1 02            [ 1] 2802 	cp a,#2
      000F8F 24 03            [ 1] 2803 	jruge 0$
      000F91 CC 06 E7         [ 2] 2804 	jp syntax_error 
      000F94 A1 03            [ 1] 2805 0$:	cp a,#3
      000F96 25 04            [ 1] 2806 	jrult 1$
      000F98 85               [ 2] 2807 	popw x 
      000F99 9F               [ 1] 2808 	ld a,xl
      000F9A 6B 01            [ 1] 2809 	ld (XMASK,sp),a 
      000F9C 85               [ 2] 2810 1$: popw x ; mask 
      000F9D 9F               [ 1] 2811 	ld a,xl 
      000F9E 6B 02            [ 1] 2812 	ld (MASK,sp),a 
      000FA0 85               [ 2] 2813 	popw x ; address 
      000FA1 F6               [ 1] 2814 2$:	ld a,(x)
      000FA2 14 02            [ 1] 2815 	and a,(MASK,sp)
      000FA4 18 01            [ 1] 2816 	xor a,(XMASK,sp)
      000FA6 27 F9            [ 1] 2817 	jreq 2$ 
      000FA8                       2818 	_drop VSIZE 
      000FA8 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FAA 81               [ 4] 2819 	ret 
                                   2820 
                                   2821 ;---------------------
                                   2822 ; BASIC: BSET addr,mask
                                   2823 ; set bits at 'addr' corresponding 
                                   2824 ; to those of 'mask' that are at 1.
                                   2825 ; arguments:
                                   2826 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2827 ;   mask        mask|addr
                                   2828 ; output:
                                   2829 ;	none 
                                   2830 ;--------------------------
      000FAB                       2831 bit_set:
      000FAB CD 0B 8E         [ 4] 2832 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FAE A1 02            [ 1] 2833 	cp a,#2	 
      000FB0 27 03            [ 1] 2834 	jreq 1$ 
      000FB2 CC 06 E7         [ 2] 2835 	jp syntax_error
      000FB5                       2836 1$: 
      000FB5 85               [ 2] 2837 	popw x ; mask 
      000FB6 9F               [ 1] 2838 	ld a,xl 
      000FB7 85               [ 2] 2839 	popw x ; addr  
      000FB8 FA               [ 1] 2840 	or a,(x)
      000FB9 F7               [ 1] 2841 	ld (x),a
      000FBA 81               [ 4] 2842 	ret 
                                   2843 
                                   2844 ;---------------------
                                   2845 ; BASIC: BRES addr,mask
                                   2846 ; reset bits at 'addr' corresponding 
                                   2847 ; to those of 'mask' that are at 1.
                                   2848 ; arguments:
                                   2849 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2850 ;   mask	    ~mask&*addr  
                                   2851 ; output:
                                   2852 ;	none 
                                   2853 ;--------------------------
      000FBB                       2854 bit_reset:
      000FBB CD 0B 8E         [ 4] 2855 	call arg_list 
      000FBE A1 02            [ 1] 2856 	cp a,#2  
      000FC0 27 03            [ 1] 2857 	jreq 1$ 
      000FC2 CC 06 E7         [ 2] 2858 	jp syntax_error
      000FC5                       2859 1$: 
      000FC5 85               [ 2] 2860 	popw x ; mask 
      000FC6 9F               [ 1] 2861 	ld a,xl 
      000FC7 43               [ 1] 2862 	cpl a 
      000FC8 85               [ 2] 2863 	popw x ; addr  
      000FC9 F4               [ 1] 2864 	and a,(x)
      000FCA F7               [ 1] 2865 	ld (x),a 
      000FCB 81               [ 4] 2866 	ret 
                                   2867 
                                   2868 ;---------------------
                                   2869 ; BASIC: BTOGL addr,mask
                                   2870 ; toggle bits at 'addr' corresponding 
                                   2871 ; to those of 'mask' that are at 1.
                                   2872 ; arguments:
                                   2873 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2874 ;   mask	    mask^*addr  
                                   2875 ; output:
                                   2876 ;	none 
                                   2877 ;--------------------------
      000FCC                       2878 bit_toggle:
      000FCC CD 0B 8E         [ 4] 2879 	call arg_list 
      000FCF A1 02            [ 1] 2880 	cp a,#2 
      000FD1 27 03            [ 1] 2881 	jreq 1$ 
      000FD3 CC 06 E7         [ 2] 2882 	jp syntax_error
      000FD6 85               [ 2] 2883 1$: popw x ; mask 
      000FD7 9F               [ 1] 2884 	ld a,xl 
      000FD8 85               [ 2] 2885 	popw x ; addr  
      000FD9 F8               [ 1] 2886 	xor a,(x)
      000FDA F7               [ 1] 2887 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FDB 81               [ 4] 2888 	ret 
                                   2889 
                                   2890 
                                   2891 ;---------------------
                                   2892 ; BASIC: BTEST(addr,bit)
                                   2893 ; return bit value at 'addr' 
                                   2894 ; bit is in range {0..7}.
                                   2895 ; arguments:
                                   2896 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2897 ;   bit 	    bit position {0..7}  
                                   2898 ; output:
                                   2899 ;	none 
                                   2900 ;--------------------------
      000FDC                       2901 bit_test:
      000FDC CD 0B 89         [ 4] 2902 	call func_args 
      000FDF A1 02            [ 1] 2903 	cp a,#2
      000FE1 27 03            [ 1] 2904 	jreq 0$
      000FE3 CC 06 E7         [ 2] 2905 	jp syntax_error
      000FE6                       2906 0$:	
      000FE6 85               [ 2] 2907 	popw x 
      000FE7 9F               [ 1] 2908 	ld a,xl 
      000FE8 A4 07            [ 1] 2909 	and a,#7
      000FEA 88               [ 1] 2910 	push a   
      000FEB A6 01            [ 1] 2911 	ld a,#1 
      000FED 0D 01            [ 1] 2912 1$: tnz (1,sp)
      000FEF 27 05            [ 1] 2913 	jreq 2$
      000FF1 48               [ 1] 2914 	sll a 
      000FF2 0A 01            [ 1] 2915 	dec (1,sp)
      000FF4 20 F7            [ 2] 2916 	jra 1$
      000FF6                       2917 2$: _drop 1 
      000FF6 5B 01            [ 2]    1     addw sp,#1 
      000FF8 85               [ 2] 2918 	popw x 
      000FF9 F4               [ 1] 2919 	and a,(x)
      000FFA 27 02            [ 1] 2920 	jreq 3$
      000FFC A6 01            [ 1] 2921 	ld a,#1 
      000FFE 5F               [ 1] 2922 3$:	clrw x 
      000FFF 97               [ 1] 2923 	ld xl,a 
      001000 A6 84            [ 1] 2924 	ld a,#TK_INTGR
      001002 81               [ 4] 2925 	ret
                                   2926 
                                   2927 
                                   2928 ;--------------------
                                   2929 ; BASIC: POKE addr,byte
                                   2930 ; put a byte at addr 
                                   2931 ;--------------------
      001003                       2932 poke:
      001003 CD 0B 8E         [ 4] 2933 	call arg_list 
      001006 A1 02            [ 1] 2934 	cp a,#2
      001008 27 03            [ 1] 2935 	jreq 1$
      00100A CC 06 E7         [ 2] 2936 	jp syntax_error
      00100D                       2937 1$:	
      00100D 85               [ 2] 2938 	popw x  
      00100E 9F               [ 1] 2939     ld a,xl 
      00100F 85               [ 2] 2940 	popw x 
      001010 F7               [ 1] 2941 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001011 81               [ 4] 2942 	ret 
                                   2943 
                                   2944 ;-----------------------
                                   2945 ; BASIC: PEEK(addr)
                                   2946 ; get the byte at addr 
                                   2947 ; input:
                                   2948 ;	none 
                                   2949 ; output:
                                   2950 ;	X 		value 
                                   2951 ;-----------------------
      001012                       2952 peek:
      001012 CD 0B 89         [ 4] 2953 	call func_args
      001015 A1 01            [ 1] 2954 	cp a,#1 
      001017 27 03            [ 1] 2955 	jreq 1$
      001019 CC 06 E7         [ 2] 2956 	jp syntax_error
      00101C 85               [ 2] 2957 1$: popw x 
      00101D F6               [ 1] 2958 	ld a,(x)
      00101E 5F               [ 1] 2959 	clrw x 
      00101F 97               [ 1] 2960 	ld xl,a 
      001020 A6 84            [ 1] 2961 	ld a,#TK_INTGR
      001022 81               [ 4] 2962 	ret 
                                   2963 
                                   2964 ;---------------------------
                                   2965 ; BASIC IF expr : instructions
                                   2966 ; evaluate expr and if true 
                                   2967 ; execute instructions on same line. 
                                   2968 ;----------------------------
      001023                       2969 if: 
      001023 CD 0C D6         [ 4] 2970 	call relation 
      001026 A1 84            [ 1] 2971 	cp a,#TK_INTGR
      001028 27 03            [ 1] 2972 	jreq 1$ 
      00102A CC 06 E7         [ 2] 2973 	jp syntax_error
      00102D 4F               [ 1] 2974 1$:	clr a 
      00102E 5D               [ 2] 2975 	tnzw x 
      00102F 26 05            [ 1] 2976 	jrne 9$  
                                   2977 ;skip to next line
      001031 55 00 03 00 01   [ 1] 2978 	mov in,count
      001036 81               [ 4] 2979 9$:	ret 
                                   2980 
                                   2981 ;------------------------
                                   2982 ; BASIC: FOR var=expr 
                                   2983 ; set variable to expression 
                                   2984 ; leave variable address 
                                   2985 ; on stack and set
                                   2986 ; FLOOP bit in 'flags'
                                   2987 ;-----------------
                           000001  2988 	RETL1=1 ; return address  
                           000003  2989 	FSTEP=3  ; variable increment
                           000005  2990 	LIMIT=5 ; loop limit 
                           000007  2991 	CVAR=7   ; control variable 
                           000009  2992 	INW=9   ;  in.w saved
                           00000B  2993 	BPTR=11 ; baseptr saved
                           00000A  2994 	VSIZE=10  
      001037                       2995 for: ; { -- var_addr }
      001037 85               [ 2] 2996 	popw x ; call return address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001038                       2997 	_vars VSIZE 
      001038 52 0A            [ 2]    1     sub sp,#VSIZE 
      00103A 89               [ 2] 2998 	pushw x  ; RETL1 
      00103B A6 85            [ 1] 2999 	ld a,#TK_VAR 
      00103D CD 0B 7C         [ 4] 3000 	call expect
      001040 1F 07            [ 2] 3001 	ldw (CVAR,sp),x  ; control variable 
      001042 CD 0D D4         [ 4] 3002 	call let_var 
      001045 72 14 00 20      [ 1] 3003 	bset flags,#FLOOP 
                                   3004 ; open space on stack for loop data 
      001049 5F               [ 1] 3005 	clrw x 
      00104A 1F 0B            [ 2] 3006 	ldw (BPTR,sp),x 
      00104C 1F 09            [ 2] 3007 	ldw (INW,sp),x 
      00104E CD 07 D6         [ 4] 3008 	call next_token 
      001051 A1 80            [ 1] 3009 	cp a,#TK_CMD 
      001053 27 03            [ 1] 3010 	jreq 1$
      001055 CC 06 E7         [ 2] 3011 	jp syntax_error
      001058                       3012 1$:  
      001058 A3 10 60         [ 2] 3013 	cpw x,#to 
      00105B 27 03            [ 1] 3014 	jreq to
      00105D CC 06 E7         [ 2] 3015 	jp syntax_error 
                                   3016 
                                   3017 ;-----------------------------------
                                   3018 ; BASIC: TO expr 
                                   3019 ; second part of FOR loop initilization
                                   3020 ; leave limit on stack and set 
                                   3021 ; FTO bit in 'flags'
                                   3022 ;-----------------------------------
      001060                       3023 to: ; { var_addr -- var_addr limit step }
      001060 72 04 00 20 03   [ 2] 3024 	btjt flags,#FLOOP,1$
      001065 CC 06 E7         [ 2] 3025 	jp syntax_error
      001068 CD 0C D6         [ 4] 3026 1$: call relation  
      00106B A1 84            [ 1] 3027 	cp a,#TK_INTGR 
      00106D 27 03            [ 1] 3028 	jreq 2$ 
      00106F CC 06 E7         [ 2] 3029 	jp syntax_error
      001072 1F 05            [ 2] 3030 2$: ldw (LIMIT,sp),x
                                   3031 ;	ldw x,in.w 
      001074 CD 07 D6         [ 4] 3032 	call next_token
      001077 A1 00            [ 1] 3033 	cp a,#TK_NONE  
      001079 27 0E            [ 1] 3034 	jreq 4$ 
      00107B A1 80            [ 1] 3035 	cp a,#TK_CMD
      00107D 26 05            [ 1] 3036 	jrne 3$
      00107F A3 10 90         [ 2] 3037 	cpw x,#step 
      001082 27 0C            [ 1] 3038 	jreq step
      001084                       3039 3$:	
      001084                       3040 	_unget_token   	 
      001084 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001089                       3041 4$:	
      001089 AE 00 01         [ 2] 3042 	ldw x,#1   ; default step  
      00108C 1F 03            [ 2] 3043 	ldw (FSTEP,sp),x 
      00108E 20 14            [ 2] 3044 	jra store_loop_addr 
                                   3045 
                                   3046 
                                   3047 ;----------------------------------
                                   3048 ; BASIC: STEP expr 
                                   3049 ; optional third par of FOR loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3050 ; initialization. 	
                                   3051 ;------------------------------------
      001090                       3052 step: ; {var limit -- var limit step}
      001090 72 04 00 20 03   [ 2] 3053 	btjt flags,#FLOOP,1$
      001095 CC 06 E7         [ 2] 3054 	jp syntax_error
      001098 CD 0C D6         [ 4] 3055 1$: call relation
      00109B A1 84            [ 1] 3056 	cp a,#TK_INTGR
      00109D 27 03            [ 1] 3057 	jreq 2$
      00109F CC 06 E7         [ 2] 3058 	jp syntax_error
      0010A2 1F 03            [ 2] 3059 2$:	ldw (FSTEP,sp),x ; step
                                   3060 ; leave loop back entry point on cstack 
                                   3061 ; cstack is 1 call deep from interpreter
      0010A4                       3062 store_loop_addr:
      0010A4 CE 00 04         [ 2] 3063 	ldw x,basicptr  
      0010A7 1F 0B            [ 2] 3064 	ldw (BPTR,sp),x 
      0010A9 CE 00 00         [ 2] 3065 	ldw x,in.w 
      0010AC 1F 09            [ 2] 3066 	ldw (INW,sp),x   
      0010AE 72 15 00 20      [ 1] 3067 	bres flags,#FLOOP 
      0010B2 72 5C 00 1D      [ 1] 3068 	inc loop_depth  
      0010B6 81               [ 4] 3069 	ret 
                                   3070 
                                   3071 ;--------------------------------
                                   3072 ; BASIC: NEXT var 
                                   3073 ; FOR loop control 
                                   3074 ; increment variable with step 
                                   3075 ; and compare with limit 
                                   3076 ; loop if threshold not crossed.
                                   3077 ; else stack. 
                                   3078 ; and decrement 'loop_depth' 
                                   3079 ;--------------------------------
      0010B7                       3080 next: ; {var limit step retl1 -- [var limit step ] }
      0010B7 72 5D 00 1D      [ 1] 3081 	tnz loop_depth 
      0010BB 26 03            [ 1] 3082 	jrne 1$ 
      0010BD CC 06 E7         [ 2] 3083 	jp syntax_error 
      0010C0                       3084 1$: 
      0010C0 A6 85            [ 1] 3085 	ld a,#TK_VAR 
      0010C2 CD 0B 7C         [ 4] 3086 	call expect
                                   3087 ; check for good variable after NEXT 	 
      0010C5 13 07            [ 2] 3088 	cpw x,(CVAR,sp)
      0010C7 27 03            [ 1] 3089 	jreq 2$  
      0010C9 CC 06 E7         [ 2] 3090 	jp syntax_error ; not the good one 
      0010CC                       3091 2$: ; increment variable 
      0010CC FE               [ 2] 3092 	ldw x,(x)  ; get var value 
      0010CD 72 FB 03         [ 2] 3093 	addw x,(FSTEP,sp) ; var+step 
      0010D0 16 07            [ 2] 3094 	ldw y,(CVAR,sp)
      0010D2 90 FF            [ 2] 3095 	ldw (y),x ; save var new value 
                                   3096 ; check sign of STEP  
      0010D4 A6 80            [ 1] 3097 	ld a,#0x80
      0010D6 15 03            [ 1] 3098 	bcp a,(FSTEP,sp)
      0010D8 2A 06            [ 1] 3099 	jrpl 4$
                                   3100 ;negative step 
      0010DA 13 05            [ 2] 3101 	cpw x,(LIMIT,sp)
      0010DC 2F 1B            [ 1] 3102 	jrslt loop_done
      0010DE 20 04            [ 2] 3103 	jra loop_back 
      0010E0                       3104 4$: ; positive step
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0010E0 13 05            [ 2] 3105 	cpw x,(LIMIT,sp)
      0010E2 2C 15            [ 1] 3106 	jrsgt loop_done
      0010E4                       3107 loop_back:
      0010E4 1E 0B            [ 2] 3108 	ldw x,(BPTR,sp)
      0010E6 CF 00 04         [ 2] 3109 	ldw basicptr,x 
      0010E9 72 01 00 20 05   [ 2] 3110 	btjf flags,#FRUN,1$ 
      0010EE E6 02            [ 1] 3111 	ld a,(2,x)
      0010F0 C7 00 03         [ 1] 3112 	ld count,a
      0010F3 1E 09            [ 2] 3113 1$:	ldw x,(INW,sp)
      0010F5 CF 00 00         [ 2] 3114 	ldw in.w,x 
      0010F8 81               [ 4] 3115 	ret 
      0010F9                       3116 loop_done:
                                   3117 	; remove loop data from stack  
      0010F9 85               [ 2] 3118 	popw x
      0010FA                       3119 	_drop VSIZE 
      0010FA 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0010FC 72 5A 00 1D      [ 1] 3120 	dec loop_depth 
                                   3121 ;	pushw x 
                                   3122 ;	ret 
      001100 FC               [ 2] 3123 	jp (x)
                                   3124 
                                   3125 ;----------------------------
                                   3126 ; called by goto/gosub
                                   3127 ; to get target line number 
                                   3128 ;---------------------------
      001101                       3129 get_target_line:
      001101 CD 0C D6         [ 4] 3130 	call relation 
      001104 A1 84            [ 1] 3131 	cp a,#TK_INTGR
      001106 27 03            [ 1] 3132 	jreq 1$
      001108 CC 06 E7         [ 2] 3133 	jp syntax_error
      00110B 4F               [ 1] 3134 1$:	clr a
      00110C 90 CE 00 04      [ 2] 3135 	ldw y,basicptr 
      001110 90 FE            [ 2] 3136 	ldw y,(y)
      001112 90 89            [ 2] 3137 	pushw y 
      001114 13 01            [ 2] 3138 	cpw x,(1,sp)
      001116 5B 02            [ 2] 3139 	addw sp,#2 
      001118 25 01            [ 1] 3140 	jrult 11$
      00111A 4C               [ 1] 3141 	inc a 
      00111B                       3142 11$:	
      00111B CD 00 00         [ 4] 3143 	call search_lineno  
      00111E 5D               [ 2] 3144 	tnzw x 
      00111F 26 05            [ 1] 3145 	jrne 2$ 
      001121 A6 05            [ 1] 3146 	ld a,#ERR_NO_LINE 
      001123 CC 06 E9         [ 2] 3147 	jp tb_error 
      001126 81               [ 4] 3148 2$:	ret 
                                   3149 
                                   3150 ;------------------------
                                   3151 ; BASIC: GOTO line# 
                                   3152 ; jump to line# 
                                   3153 ; here cstack is 2 call deep from interpreter 
                                   3154 ;------------------------
      001127                       3155 goto:
      001127 72 00 00 20 06   [ 2] 3156 	btjt flags,#FRUN,0$ 
      00112C A6 06            [ 1] 3157 	ld a,#ERR_RUN_ONLY
      00112E CC 06 E9         [ 2] 3158 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001131 81               [ 4] 3159 	ret 
      001132 CD 11 01         [ 4] 3160 0$:	call get_target_line
      001135                       3161 jp_to_target:
      001135 CF 00 04         [ 2] 3162 	ldw basicptr,x 
      001138 E6 02            [ 1] 3163 	ld a,(2,x)
      00113A C7 00 03         [ 1] 3164 	ld count,a 
      00113D 35 03 00 01      [ 1] 3165 	mov in,#3 
      001141 81               [ 4] 3166 	ret 
                                   3167 
                                   3168 
                                   3169 ;--------------------
                                   3170 ; BASIC: GOSUB line#
                                   3171 ; basic subroutine call
                                   3172 ; actual line# and basicptr 
                                   3173 ; are saved on cstack
                                   3174 ; here cstack is 2 call deep from interpreter 
                                   3175 ;--------------------
                           000003  3176 	RET_ADDR=3
                           000005  3177 	RET_INW=5
                           000004  3178 	VSIZE=4  
      001142                       3179 gosub:
      001142 72 00 00 20 06   [ 2] 3180 	btjt flags,#FRUN,0$ 
      001147 A6 06            [ 1] 3181 	ld a,#ERR_RUN_ONLY
      001149 CC 06 E9         [ 2] 3182 	jp tb_error 
      00114C 81               [ 4] 3183 	ret 
      00114D 85               [ 2] 3184 0$:	popw x 
      00114E                       3185 	_vars VSIZE  
      00114E 52 04            [ 2]    1     sub sp,#VSIZE 
      001150 89               [ 2] 3186 	pushw x 
      001151 CE 00 04         [ 2] 3187 	ldw x,basicptr
      001154 1F 03            [ 2] 3188 	ldw (RET_ADDR,sp),x 
      001156 CD 11 01         [ 4] 3189 	call get_target_line  
      001159 89               [ 2] 3190 	pushw x 
      00115A CE 00 00         [ 2] 3191 	ldw x,in.w 
      00115D 1F 07            [ 2] 3192 	ldw (RET_INW+2,sp),x
      00115F 85               [ 2] 3193 	popw x 
      001160 20 D3            [ 2] 3194 	jra jp_to_target
                                   3195 
                                   3196 ;------------------------
                                   3197 ; BASIC: RETURN 
                                   3198 ; exit from a subroutine 
                                   3199 ; 
                                   3200 ;------------------------
      001162                       3201 return:
      001162 72 00 00 20 05   [ 2] 3202 	btjt flags,#FRUN,0$ 
      001167 A6 06            [ 1] 3203 	ld a,#ERR_RUN_ONLY
      001169 CC 06 E9         [ 2] 3204 	jp tb_error 
      00116C                       3205 0$:	
      00116C 1E 03            [ 2] 3206 	ldw x,(RET_ADDR,sp) 
      00116E CF 00 04         [ 2] 3207 	ldw basicptr,x
      001171 E6 02            [ 1] 3208 	ld a,(2,x)
      001173 C7 00 03         [ 1] 3209 	ld count,a  
      001176 1E 05            [ 2] 3210 	ldw x,(RET_INW,sp)
      001178 CF 00 00         [ 2] 3211 	ldw in.w,x 
      00117B 85               [ 2] 3212 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00117C                       3213 	_drop VSIZE 
      00117C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00117E 89               [ 2] 3214 	pushw x
      00117F 81               [ 4] 3215 	ret  
                                   3216 
                                   3217 
                                   3218 ;----------------------------------
                                   3219 ; BASIC: RUN
                                   3220 ; run BASIC program in RAM
                                   3221 ;----------------------------------- 
      001180                       3222 run: 
      001180 72 01 00 20 02   [ 2] 3223 	btjf flags,#FRUN,0$  
      001185 4F               [ 1] 3224 	clr a 
      001186 81               [ 4] 3225 	ret
      001187                       3226 0$: 
      001187 72 09 00 20 12   [ 2] 3227 	btjf flags,#FBREAK,1$
      00118C                       3228 	_drop 2 
      00118C 5B 02            [ 2]    1     addw sp,#2 
      00118E CD 0F 00         [ 4] 3229 	call rest_context
      001191                       3230 	_drop CTXT_SIZE 
      001191 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      001193 72 19 00 20      [ 1] 3231 	bres flags,#FBREAK 
      001197 72 10 00 20      [ 1] 3232 	bset flags,#FRUN 
      00119B CC 07 8A         [ 2] 3233 	jp interpreter 
      00119E CE 00 19         [ 2] 3234 1$:	ldw x,txtbgn
      0011A1 C3 00 1B         [ 2] 3235 	cpw x,txtend 
      0011A4 2B 0C            [ 1] 3236 	jrmi run_it 
      0011A6 AE 06 80         [ 2] 3237 	ldw x,#err_no_prog
      0011A9 CD 00 00         [ 4] 3238 	call puts 
      0011AC 55 00 03 00 01   [ 1] 3239 	mov in,count
      0011B1 81               [ 4] 3240 	ret 
      0011B2                       3241 run_it:	 
      0011B2 CD 0D A1         [ 4] 3242     call ubound 
      0011B5                       3243 	_drop 2 ; drop return address 
      0011B5 5B 02            [ 2]    1     addw sp,#2 
                                   3244 ; clear data pointer 
      0011B7 5F               [ 1] 3245 	clrw x 
      0011B8 CF 00 06         [ 2] 3246 	ldw data_ptr,x 
      0011BB 72 5F 00 08      [ 1] 3247 	clr data_ofs 
      0011BF 72 5F 00 09      [ 1] 3248 	clr data_len 
                                   3249 ; initialize BASIC pointer 
      0011C3 CE 00 19         [ 2] 3250 	ldw x,txtbgn 
      0011C6 CF 00 04         [ 2] 3251 	ldw basicptr,x 
      0011C9 E6 02            [ 1] 3252 	ld a,(2,x)
      0011CB C7 00 03         [ 1] 3253 	ld count,a
      0011CE 35 03 00 01      [ 1] 3254 	mov in,#3	
      0011D2 72 10 00 20      [ 1] 3255 	bset flags,#FRUN 
      0011D6 CC 07 8A         [ 2] 3256 	jp interpreter 
                                   3257 
                                   3258 
                                   3259 ;----------------------
                                   3260 ; BASIC: END
                                   3261 ; end running program
                                   3262 ;---------------------- 
      0011D9                       3263 cmd_end: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3264 ; clean stack 
      0011D9 AE 17 FF         [ 2] 3265 	ldw x,#STACK_EMPTY
      0011DC 94               [ 1] 3266 	ldw sp,x 
      0011DD CC 07 6B         [ 2] 3267 	jp warm_start
                                   3268 
                                   3269 ;-----------------
                                   3270 ; 1 Khz beep 
                                   3271 ;-----------------
      0011E0                       3272 beep_1khz:: 
      0011E0 AE 00 64         [ 2] 3273 	ldw x,#100
      0011E3 90 AE 03 E8      [ 2] 3274 	ldw y,#1000
      0011E7 20 0D            [ 2] 3275 	jra beep
                                   3276 
                                   3277 ;-----------------------
                                   3278 ; BASIC: TONE expr1,expr2
                                   3279 ; used TIMER2 channel 1
                                   3280 ; to produce a tone 
                                   3281 ; arguments:
                                   3282 ;    expr1   frequency 
                                   3283 ;    expr2   duration msec.
                                   3284 ;---------------------------
      0011E9                       3285 tone:
      0011E9 CD 0B 8E         [ 4] 3286 	call arg_list 
      0011EC A1 02            [ 1] 3287 	cp a,#2 
      0011EE 27 03            [ 1] 3288 	jreq 1$
      0011F0 CC 06 E7         [ 2] 3289 	jp syntax_error 
      0011F3                       3290 1$: 
      0011F3 85               [ 2] 3291 	popw x ; duration
      0011F4 90 85            [ 2] 3292 	popw y ; frequency 
      0011F6                       3293 beep:  
      0011F6 89               [ 2] 3294 	pushw x 
      0011F7 AE F4 24         [ 2] 3295 	ldw x,#TIM2_CLK_FREQ
      0011FA 65               [ 2] 3296 	divw x,y 
                                   3297 ; round to nearest integer 
      0011FB 90 A3 7A 12      [ 2] 3298 	cpw y,#TIM2_CLK_FREQ/2
      0011FF 2B 01            [ 1] 3299 	jrmi 2$
      001201 5C               [ 1] 3300 	incw x 
      001202                       3301 2$:	 
      001202 9E               [ 1] 3302 	ld a,xh 
      001203 C7 53 0D         [ 1] 3303 	ld TIM2_ARRH,a 
      001206 9F               [ 1] 3304 	ld a,xl 
      001207 C7 53 0E         [ 1] 3305 	ld TIM2_ARRL,a 
                                   3306 ; 50% duty cycle 
      00120A 8C               [ 1] 3307 	ccf 
      00120B 56               [ 2] 3308 	rrcw x 
      00120C 9E               [ 1] 3309 	ld a,xh 
      00120D C7 53 0F         [ 1] 3310 	ld TIM2_CCR1H,a 
      001210 9F               [ 1] 3311 	ld a,xl
      001211 C7 53 10         [ 1] 3312 	ld TIM2_CCR1L,a
      001214 72 10 53 08      [ 1] 3313 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001218 72 10 53 00      [ 1] 3314 	bset TIM2_CR1,#TIM2_CR1_CEN
      00121C 72 10 53 04      [ 1] 3315 	bset TIM2_EGR,#TIM2_EGR_UG
      001220 85               [ 2] 3316 	popw x 
      001221 CD 14 E1         [ 4] 3317 	call pause02
      001224 72 11 53 08      [ 1] 3318 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001228 72 11 53 00      [ 1] 3319 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00122C 81               [ 4] 3320 	ret 
                                   3321 
                                   3322 ;-------------------------------
                                   3323 ; BASIC: ADCON 0|1 [,divisor]  
                                   3324 ; disable/enanble ADC 
                                   3325 ;-------------------------------
                           000003  3326 	ONOFF=3 
                           000001  3327 	DIVSOR=1
                           000004  3328 	VSIZE=4 
      00122D                       3329 power_adc:
      00122D CD 0B 8E         [ 4] 3330 	call arg_list 
      001230 A1 02            [ 1] 3331 	cp a,#2	
      001232 27 0B            [ 1] 3332 	jreq 1$
      001234 A1 01            [ 1] 3333 	cp a,#1 
      001236 27 03            [ 1] 3334 	jreq 0$ 
      001238 CC 06 E7         [ 2] 3335 	jp syntax_error 
      00123B AE 00 00         [ 2] 3336 0$: ldw x,#0
      00123E 89               [ 2] 3337 	pushw x  ; divisor 
      00123F 1E 03            [ 2] 3338 1$: ldw x,(ONOFF,sp)
      001241 5D               [ 2] 3339 	tnzw x 
      001242 27 1A            [ 1] 3340 	jreq 2$ 
      001244 1E 01            [ 2] 3341 	ldw x,(DIVSOR,sp) ; divisor 
      001246 9F               [ 1] 3342 	ld a,xl
      001247 A4 07            [ 1] 3343 	and a,#7
      001249 4E               [ 1] 3344 	swap a 
      00124A C7 54 01         [ 1] 3345 	ld ADC_CR1,a
      00124D 72 16 50 CA      [ 1] 3346 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001251 72 10 54 01      [ 1] 3347 	bset ADC_CR1,#ADC_CR1_ADON 
      001255                       3348 	_usec_dly 7 
      001255 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001258 5A               [ 2]    2     decw x
      001259 9D               [ 1]    3     nop 
      00125A 26 FA            [ 1]    4     jrne .-4
      00125C 20 08            [ 2] 3349 	jra 3$
      00125E 72 11 54 01      [ 1] 3350 2$: bres ADC_CR1,#ADC_CR1_ADON
      001262 72 17 50 CA      [ 1] 3351 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001266                       3352 3$:	_drop VSIZE 
      001266 5B 04            [ 2]    1     addw sp,#VSIZE 
      001268 81               [ 4] 3353 	ret
                                   3354 
                                   3355 ;-----------------------------
                                   3356 ; BASIC: ADCREAD (channel)
                                   3357 ; read adc channel {0..5}
                                   3358 ; output:
                                   3359 ;   A 		TK_INTGR 
                                   3360 ;   X 		value 
                                   3361 ;-----------------------------
      001269                       3362 analog_read:
      001269 CD 0B 89         [ 4] 3363 	call func_args 
      00126C A1 01            [ 1] 3364 	cp a,#1 
      00126E 27 03            [ 1] 3365 	jreq 1$
      001270 CC 06 E7         [ 2] 3366 	jp syntax_error
      001273 85               [ 2] 3367 1$: popw x 
      001274 A3 00 05         [ 2] 3368 	cpw x,#5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001277 23 05            [ 2] 3369 	jrule 2$
      001279 A6 0A            [ 1] 3370 	ld a,#ERR_BAD_VALUE
      00127B CC 06 E9         [ 2] 3371 	jp tb_error 
      00127E 9F               [ 1] 3372 2$: ld a,xl
      00127F C7 00 0D         [ 1] 3373 	ld acc8,a 
      001282 A6 05            [ 1] 3374 	ld a,#5
      001284 C0 00 0D         [ 1] 3375 	sub a,acc8 
      001287 C7 54 00         [ 1] 3376 	ld ADC_CSR,a
      00128A 72 16 54 02      [ 1] 3377 	bset ADC_CR2,#ADC_CR2_ALIGN
      00128E 72 10 54 01      [ 1] 3378 	bset ADC_CR1,#ADC_CR1_ADON
      001292 72 0F 54 00 FB   [ 2] 3379 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001297 CE 54 04         [ 2] 3380 	ldw x,ADC_DRH
      00129A A6 84            [ 1] 3381 	ld a,#TK_INTGR
      00129C 81               [ 4] 3382 	ret 
                                   3383 
                                   3384 ;-----------------------
                                   3385 ; BASIC: DREAD(pin)
                                   3386 ; Arduino pins 
                                   3387 ; read state of a digital pin 
                                   3388 ; pin# {0..15}
                                   3389 ; output:
                                   3390 ;    A 		TK_INTGR
                                   3391 ;    X      0|1 
                                   3392 ;-------------------------
                           000001  3393 	PINNO=1
                           000001  3394 	VSIZE=1
      00129D                       3395 digital_read:
      00129D                       3396 	_vars VSIZE 
      00129D 52 01            [ 2]    1     sub sp,#VSIZE 
      00129F CD 0B 89         [ 4] 3397 	call func_args
      0012A2 A1 01            [ 1] 3398 	cp a,#1
      0012A4 27 03            [ 1] 3399 	jreq 1$
      0012A6 CC 06 E7         [ 2] 3400 	jp syntax_error
      0012A9 85               [ 2] 3401 1$: popw x 
      0012AA A3 00 0F         [ 2] 3402 	cpw x,#15 
      0012AD 23 05            [ 2] 3403 	jrule 2$
      0012AF A6 0A            [ 1] 3404 	ld a,#ERR_BAD_VALUE
      0012B1 CC 06 E9         [ 2] 3405 	jp tb_error 
      0012B4 CD 16 1F         [ 4] 3406 2$:	call select_pin 
      0012B7 6B 01            [ 1] 3407 	ld (PINNO,sp),a
      0012B9 E6 01            [ 1] 3408 	ld a,(GPIO_IDR,x)
      0012BB 0D 01            [ 1] 3409 	tnz (PINNO,sp)
      0012BD 27 05            [ 1] 3410 	jreq 8$
      0012BF 44               [ 1] 3411 3$: srl a 
      0012C0 0A 01            [ 1] 3412 	dec (PINNO,sp)
      0012C2 26 FB            [ 1] 3413 	jrne 3$ 
      0012C4 A4 01            [ 1] 3414 8$: and a,#1 
      0012C6 5F               [ 1] 3415 	clrw x 
      0012C7 97               [ 1] 3416 	ld xl,a 
      0012C8 A6 84            [ 1] 3417 	ld a,#TK_INTGR
      0012CA                       3418 	_drop VSIZE
      0012CA 5B 01            [ 2]    1     addw sp,#VSIZE 
      0012CC 81               [ 4] 3419 	ret
                                   3420 
                                   3421 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3422 ;-----------------------
                                   3423 ; BASIC: DWRITE pin,0|1
                                   3424 ; Arduino pins 
                                   3425 ; write to a digital pin 
                                   3426 ; pin# {0..15}
                                   3427 ; output:
                                   3428 ;    A 		TK_INTGR
                                   3429 ;    X      0|1 
                                   3430 ;-------------------------
                           000001  3431 	PINNO=1
                           000002  3432 	PINVAL=2
                           000002  3433 	VSIZE=2
      0012CD                       3434 digital_write:
      0012CD                       3435 	_vars VSIZE 
      0012CD 52 02            [ 2]    1     sub sp,#VSIZE 
      0012CF CD 0B 8E         [ 4] 3436 	call arg_list  
      0012D2 A1 02            [ 1] 3437 	cp a,#2 
      0012D4 27 03            [ 1] 3438 	jreq 1$
      0012D6 CC 06 E7         [ 2] 3439 	jp syntax_error
      0012D9 85               [ 2] 3440 1$: popw x 
      0012DA 9F               [ 1] 3441 	ld a,xl 
      0012DB 6B 02            [ 1] 3442 	ld (PINVAL,sp),a
      0012DD 85               [ 2] 3443 	popw x 
      0012DE A3 00 0F         [ 2] 3444 	cpw x,#15 
      0012E1 23 05            [ 2] 3445 	jrule 2$
      0012E3 A6 0A            [ 1] 3446 	ld a,#ERR_BAD_VALUE
      0012E5 CC 06 E9         [ 2] 3447 	jp tb_error 
      0012E8 CD 16 1F         [ 4] 3448 2$:	call select_pin 
      0012EB 6B 01            [ 1] 3449 	ld (PINNO,sp),a 
      0012ED A6 01            [ 1] 3450 	ld a,#1
      0012EF 0D 01            [ 1] 3451 	tnz (PINNO,sp)
      0012F1 27 05            [ 1] 3452 	jreq 4$
      0012F3 48               [ 1] 3453 3$: sll a
      0012F4 0A 01            [ 1] 3454 	dec (PINNO,sp)
      0012F6 26 FB            [ 1] 3455 	jrne 3$
      0012F8 0D 02            [ 1] 3456 4$: tnz (PINVAL,sp)
      0012FA 26 05            [ 1] 3457 	jrne 5$
      0012FC 43               [ 1] 3458 	cpl a 
      0012FD E4 00            [ 1] 3459 	and a,(GPIO_ODR,x)
      0012FF 20 02            [ 2] 3460 	jra 8$
      001301 EA 00            [ 1] 3461 5$: or a,(GPIO_ODR,x)
      001303 E7 00            [ 1] 3462 8$: ld (GPIO_ODR,x),a 
      001305                       3463 	_drop VSIZE 
      001305 5B 02            [ 2]    1     addw sp,#VSIZE 
      001307 81               [ 4] 3464 	ret
                                   3465 
                                   3466 
                                   3467 ;-----------------------
                                   3468 ; BASIC: STOP
                                   3469 ; stop progam execution  
                                   3470 ; without resetting pointers 
                                   3471 ; the program is resumed
                                   3472 ; with RUN 
                                   3473 ;-------------------------
      001308                       3474 stop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001308 72 00 00 20 02   [ 2] 3475 	btjt flags,#FRUN,2$
      00130D 4F               [ 1] 3476 	clr a
      00130E 81               [ 4] 3477 	ret 
      00130F                       3478 2$:	 
                                   3479 ; create space on cstack to save context 
      00130F AE 13 36         [ 2] 3480 	ldw x,#break_point 
      001312 CD 00 00         [ 4] 3481 	call puts 
      001315                       3482 	_drop 2 ;drop return address 
      001315 5B 02            [ 2]    1     addw sp,#2 
      001317                       3483 	_vars CTXT_SIZE ; context size 
      001317 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001319 CD 0E F0         [ 4] 3484 	call save_context 
      00131C AE 16 90         [ 2] 3485 	ldw x,#tib 
      00131F CF 00 04         [ 2] 3486 	ldw basicptr,x
      001322 7F               [ 1] 3487 	clr (x)
      001323 72 5F 00 03      [ 1] 3488 	clr count  
      001327 5F               [ 1] 3489 	clrw x 
      001328 CF 00 00         [ 2] 3490 	ldw in.w,x
      00132B 72 11 00 20      [ 1] 3491 	bres flags,#FRUN 
      00132F 72 18 00 20      [ 1] 3492 	bset flags,#FBREAK
      001333 CC 07 8A         [ 2] 3493 	jp interpreter 
      001336 0A 62 72 65 61 6B 20  3494 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3495 
                                   3496 ;-----------------------
                                   3497 ; BASIC: NEW
                                   3498 ; from command line only 
                                   3499 ; free program memory
                                   3500 ; and clear variables 
                                   3501 ;------------------------
      001354                       3502 new: 
      001354 72 01 00 20 01   [ 2] 3503 	btjf flags,#FRUN,0$ 
      001359 81               [ 4] 3504 	ret 
      00135A                       3505 0$:	
      00135A CD 05 51         [ 4] 3506 	call clear_basic 
      00135D 81               [ 4] 3507 	ret 
                                   3508 
                                   3509 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3510 ;;;  flash memory operations
                                   3511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3512 
                                   3513 ;--------------------------
                                   3514 ; align farptr to BLOCK_SIZE 
                                   3515 ;---------------------------
      00135E                       3516 row_align:
      00135E A6 7F            [ 1] 3517 	ld a,#0x7f 
      001360 C4 00 18         [ 1] 3518 	and a,farptr+2 
      001363 27 13            [ 1] 3519 	jreq 1$ 
      001365 CE 00 17         [ 2] 3520 	ldw x,farptr+1 
      001368 1C 00 80         [ 2] 3521 	addw x,#BLOCK_SIZE 
      00136B 24 04            [ 1] 3522 	jrnc 0$
      00136D 72 5C 00 16      [ 1] 3523 	inc farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001371 9F               [ 1] 3524 0$: ld a,xl 
      001372 A4 80            [ 1] 3525 	and a,#0x80
      001374 97               [ 1] 3526 	ld xl,a
      001375 CF 00 17         [ 2] 3527 	ldw farptr+1,x  	
      001378 81               [ 4] 3528 1$:	ret
                                   3529 
                                   3530 ;--------------------
                                   3531 ; input:
                                   3532 ;   X     increment 
                                   3533 ; output:
                                   3534 ;   farptr  incremented 
                                   3535 ;---------------------
      001379                       3536 incr_farptr:
      001379 72 BB 00 17      [ 2] 3537 	addw x,farptr+1 
      00137D 24 04            [ 1] 3538 	jrnc 1$
      00137F 72 5C 00 16      [ 1] 3539 	inc farptr 
      001383 CF 00 17         [ 2] 3540 1$:	ldw farptr+1,x  
      001386 81               [ 4] 3541 	ret 
                                   3542 
                                   3543 ;-----------------------------------
                                   3544 ; scan block for non zero byte 
                                   3545 ; block are 128 bytes 
                                   3546 ; input:
                                   3547 ;     X     block# 
                                   3548 ; output:
                                   3549 ;     A     0 clean, other not clean 
                                   3550 ;-----------------------------------
                           000001  3551 	COUNT=1 
                           000001  3552 	VSIZE=1
      001387                       3553 scan_block:
      001387 A6 80            [ 1] 3554 	ld a, #128 ;COUNT 
      001389 88               [ 1] 3555 	push a  
      00138A 72 5F 00 0B      [ 1] 3556 	clr acc24 
      00138E CF 00 0C         [ 2] 3557 	ldw acc16,x 
      001391 CD 08 DF         [ 4] 3558 	call mulu24_8  ; block address  
      001394 55 00 0B 00 16   [ 1] 3559 	mov farptr,acc24 
      001399 CE 00 0C         [ 2] 3560 	ldw x,acc16 
      00139C CF 00 17         [ 2] 3561 	ldw farptr+1,x 
      00139F AE 00 01         [ 2] 3562 	ldw x,#1  ; farptr increment 
      0013A2 92 BC 00 16      [ 5] 3563 1$: ldf a,[farptr]
      0013A6 26 07            [ 1] 3564 	jrne 2$
      0013A8 CD 13 79         [ 4] 3565 	call incr_farptr
      0013AB 0A 01            [ 1] 3566 	dec (COUNT,sp)
      0013AD 26 F3            [ 1] 3567 	jrne 1$ 
      0013AF                       3568 2$:	_drop VSIZE 
      0013AF 5B 01            [ 2]    1     addw sp,#VSIZE 
      0013B1 81               [ 4] 3569 	ret 
                                   3570 
                                   3571 
                                   3572 ;-----------------------------------
                                   3573 ; BASIC: ERASE
                                   3574 ; erase all block in range from 
                                   3575 ;  'app_space' to RAM end (0x20000)
                                   3576 ; that contains a non zero byte.  
                                   3577 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           000001  3578 	BLOCK=1  ;block to delete 
                           000002  3579 	VSIZE=2
      0013B2                       3580 erase:
                                   3581  ; operation done from RAM  
      0013B2 CD 01 32         [ 4] 3582 	call move_erase_to_ram
      0013B5                       3583 	_vars VSIZE 
      0013B5 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B7 AE 1E 80         [ 2] 3584 	ldw x,#app_space 
      0013BA A6 80            [ 1] 3585 	ld a,#128 
      0013BC 62               [ 2] 3586 	div x,a 
      0013BD 1F 01            [ 2] 3587 1$:	ldw (BLOCK,sp),x 
      0013BF CD 13 87         [ 4] 3588     call scan_block 
      0013C2 26 0A            [ 1] 3589 	jrne 3$ 
                                   3590 ; this block is clean, next  
      0013C4 1E 01            [ 2] 3591 2$:	ldw x,(BLOCK,sp)
      0013C6 5C               [ 1] 3592 	incw x 
      0013C7 A3 04 00         [ 2] 3593 	cpw x,#1024 ; maximum block count 
      0013CA 25 F1            [ 1] 3594 	jrult 1$ 
      0013CC 20 10            [ 2] 3595 	jra 9$ ; done  
      0013CE                       3596 3$: ; acc24 still contains block address
      0013CE 55 00 0B 00 16   [ 1] 3597 	mov farptr,acc24			
      0013D3 CE 00 0C         [ 2] 3598 	ldw x,acc16 
      0013D6 CF 00 17         [ 2] 3599 	ldw farptr+1,x 
      0013D9 CD 01 AD         [ 4] 3600 	call block_erase 
      0013DC 20 E6            [ 2] 3601 	jra 2$
      0013DE                       3602 9$: _drop VSIZE 
      0013DE 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013E0 81               [ 4] 3603 	 ret 
                                   3604 
                                   3605 
                                   3606 ;---------------------
                                   3607 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3608 ; write 1 or more byte to FLASH or EEPROM
                                   3609 ; starting at address  
                                   3610 ; input:
                                   3611 ;   expr1  	is address 
                                   3612 ;   expr2,...,exprn   are bytes to write
                                   3613 ; output:
                                   3614 ;   none 
                                   3615 ;---------------------
                           000001  3616 	ADDR=1
                           000002  3617 	VSIZ=2 
      0013E1                       3618 write:
      0013E1                       3619 	_vars VSIZE 
      0013E1 52 02            [ 2]    1     sub sp,#VSIZE 
      0013E3 72 5F 00 16      [ 1] 3620 	clr farptr ; expect 16 bits address 
      0013E7 CD 0C 8D         [ 4] 3621 	call expression
      0013EA A1 84            [ 1] 3622 	cp a,#TK_INTGR 
      0013EC 27 03            [ 1] 3623 	jreq 0$
      0013EE CC 06 E7         [ 2] 3624 	jp syntax_error
      0013F1 1F 01            [ 2] 3625 0$: ldw (ADDR,sp),x 
      0013F3 CD 07 D6         [ 4] 3626 	call next_token 
      0013F6 A1 09            [ 1] 3627 	cp a,#TK_COMMA 
      0013F8 27 02            [ 1] 3628 	jreq 1$ 
      0013FA 20 19            [ 2] 3629 	jra 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0013FC CD 0C 8D         [ 4] 3630 1$:	call expression
      0013FF A1 84            [ 1] 3631 	cp a,#TK_INTGR
      001401 27 03            [ 1] 3632 	jreq 2$
      001403 CC 06 E7         [ 2] 3633 	jp syntax_error
      001406 9F               [ 1] 3634 2$:	ld a,xl 
      001407 1E 01            [ 2] 3635 	ldw x,(ADDR,sp) 
      001409 CF 00 17         [ 2] 3636 	ldw farptr+1,x 
      00140C 5F               [ 1] 3637 	clrw x 
      00140D CD 01 D7         [ 4] 3638 	call write_byte
      001410 1E 01            [ 2] 3639 	ldw x,(ADDR,sp)
      001412 5C               [ 1] 3640 	incw x 
      001413 20 DC            [ 2] 3641 	jra 0$ 
      001415                       3642 9$:
      001415                       3643 	_drop VSIZE
      001415 5B 02            [ 2]    1     addw sp,#VSIZE 
      001417 81               [ 4] 3644 	ret 
                                   3645 
                                   3646 
                                   3647 ;---------------------
                                   3648 ;BASIC: CHAR(expr)
                                   3649 ; évaluate expression 
                                   3650 ; and take the 7 least 
                                   3651 ; bits as ASCII character
                                   3652 ; return a TK_CHAR 
                                   3653 ;---------------------
      001418                       3654 char:
      001418 CD 0B 89         [ 4] 3655 	call func_args 
      00141B A1 01            [ 1] 3656 	cp a,#1
      00141D 27 03            [ 1] 3657 	jreq 1$
      00141F CC 06 E7         [ 2] 3658 	jp syntax_error
      001422 85               [ 2] 3659 1$:	popw x 
      001423 9F               [ 1] 3660 	ld a,xl 
      001424 A4 7F            [ 1] 3661 	and a,#0x7f 
      001426 97               [ 1] 3662 	ld xl,a
      001427 A6 03            [ 1] 3663 	ld a,#TK_CHAR
      001429 81               [ 4] 3664 	ret
                                   3665 
                                   3666 ;---------------------
                                   3667 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3668 ; extract first character 
                                   3669 ; of string argument 
                                   3670 ; return it as TK_INTGR 
                                   3671 ;---------------------
      00142A                       3672 ascii:
      00142A A6 07            [ 1] 3673 	ld a,#TK_LPAREN
      00142C CD 0B 7C         [ 4] 3674 	call expect 
      00142F CD 07 D6         [ 4] 3675 	call next_token 
      001432 A1 02            [ 1] 3676 	cp a,#TK_QSTR 
      001434 27 0E            [ 1] 3677 	jreq 1$
      001436 A1 03            [ 1] 3678 	cp a,#TK_CHAR 
      001438 27 0D            [ 1] 3679 	jreq 2$ 
      00143A A1 82            [ 1] 3680 	cp a,#TK_CFUNC 
      00143C 27 03            [ 1] 3681 	jreq 0$
      00143E CC 06 E7         [ 2] 3682 	jp syntax_error
      001441 FD               [ 4] 3683 0$: call (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001442 20 03            [ 2] 3684 	jra 2$
      001444                       3685 1$: 
      001444 F6               [ 1] 3686 	ld a,(x) 
      001445 5F               [ 1] 3687 	clrw x
      001446 97               [ 1] 3688 	ld xl,a 
      001447                       3689 2$: 
      001447 89               [ 2] 3690 	pushw x 
      001448 A6 08            [ 1] 3691 	ld a,#TK_RPAREN 
      00144A CD 0B 7C         [ 4] 3692 	call expect
      00144D 85               [ 2] 3693 	popw x 
      00144E A6 84            [ 1] 3694 	ld a,#TK_INTGR 
      001450 81               [ 4] 3695 	ret 
                                   3696 
                                   3697 ;---------------------
                                   3698 ;BASIC: KEY
                                   3699 ; wait for a character 
                                   3700 ; received from STDIN 
                                   3701 ; input:
                                   3702 ;	none 
                                   3703 ; output:
                                   3704 ;	X 		ASCII character 
                                   3705 ;---------------------
      001451                       3706 key:
      001451 CD 02 C2         [ 4] 3707 	call getc 
      001454 5F               [ 1] 3708 	clrw x 
      001455 97               [ 1] 3709 	ld xl,a 
      001456 A6 84            [ 1] 3710 	ld a,#TK_INTGR
      001458 81               [ 4] 3711 	ret
                                   3712 
                                   3713 ;----------------------
                                   3714 ; BASIC: QKEY
                                   3715 ; Return true if there 
                                   3716 ; is a character in 
                                   3717 ; waiting in STDIN 
                                   3718 ; input:
                                   3719 ;  none 
                                   3720 ; output:
                                   3721 ;   X 		0|-1 
                                   3722 ;-----------------------
      001459                       3723 qkey:: 
      001459 5F               [ 1] 3724 	clrw x 
      00145A C6 00 2A         [ 1] 3725 	ld a,rx1_head
      00145D C1 00 2B         [ 1] 3726 	cp a,rx1_tail 
      001460 27 01            [ 1] 3727 	jreq 9$ 
      001462 53               [ 2] 3728 	cplw x 
      001463 A6 84            [ 1] 3729 9$: ld a,#TK_INTGR
      001465 81               [ 4] 3730 	ret 
                                   3731 
                                   3732 ;---------------------
                                   3733 ; BASIC: GPIO(expr,reg)
                                   3734 ; return gpio address 
                                   3735 ; expr {0..8}
                                   3736 ; input:
                                   3737 ;   none 
                                   3738 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3739 ;   X 		gpio register address
                                   3740 ;----------------------------
                           000003  3741 	PORT=3
                           000001  3742 	REG=1 
                           000004  3743 	VSIZE=4 
      001466                       3744 gpio:
      001466 CD 0B 89         [ 4] 3745 	call func_args 
      001469 A1 02            [ 1] 3746 	cp a,#2
      00146B 27 03            [ 1] 3747 	jreq 1$
      00146D CC 06 E7         [ 2] 3748 	jp syntax_error  
      001470                       3749 1$:	
      001470 1E 03            [ 2] 3750 	ldw x,(PORT,sp)
      001472 2B 17            [ 1] 3751 	jrmi bad_port
      001474 A3 00 09         [ 2] 3752 	cpw x,#9
      001477 2A 12            [ 1] 3753 	jrpl bad_port
      001479 A6 05            [ 1] 3754 	ld a,#5
      00147B 42               [ 4] 3755 	mul x,a
      00147C 1C 50 00         [ 2] 3756 	addw x,#GPIO_BASE 
      00147F 1F 03            [ 2] 3757 	ldw (PORT,sp),x  
      001481 1E 01            [ 2] 3758 	ldw x,(REG,sp) 
      001483 72 FB 03         [ 2] 3759 	addw x,(PORT,sp)
      001486 A6 84            [ 1] 3760 	ld a,#TK_INTGR
      001488                       3761 	_drop VSIZE 
      001488 5B 04            [ 2]    1     addw sp,#VSIZE 
      00148A 81               [ 4] 3762 	ret
      00148B                       3763 bad_port:
      00148B A6 0A            [ 1] 3764 	ld a,#ERR_BAD_VALUE
      00148D CC 06 E9         [ 2] 3765 	jp tb_error
                                   3766 
                                   3767 
                                   3768 ;-------------------------
                                   3769 ; BASIC: UFLASH 
                                   3770 ; return free flash address
                                   3771 ; input:
                                   3772 ;  none 
                                   3773 ; output:
                                   3774 ;	A		TK_INTGR
                                   3775 ;   X 		free address 
                                   3776 ;---------------------------
      001490                       3777 uflash:
      001490 CE 1E 80         [ 2] 3778 	ldw x,app_sign
      001493 A3 10 93         [ 2] 3779 	cpw x,#4243 ; signature "BC" 
      001496 27 08            [ 1] 3780 	jreq 1$
      001498 CE 1E 82         [ 2] 3781 	ldw x,app_size 
      00149B 1C 1E 84         [ 2] 3782 	addw x,#app
      00149E 20 03            [ 2] 3783 	jra 2$
      0014A0 AE 1E 80         [ 2] 3784 1$:	ldw x,#app_space 
      0014A3 A6 84            [ 1] 3785 2$:	ld a,#TK_INTGR 
      0014A5 81               [ 4] 3786 	ret 
                                   3787 
                                   3788 
                                   3789 ;---------------------
                                   3790 ; BASIC: USR(addr[,arg])
                                   3791 ; execute a function written 
                                   3792 ; in binary code.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3793 ; binary fonction should 
                                   3794 ; return token attribute in A 
                                   3795 ; and value in X. 
                                   3796 ; input:
                                   3797 ;   addr	routine address 
                                   3798 ;   arg 	is an optional argument 
                                   3799 ; output:
                                   3800 ;   A 		token attribute 
                                   3801 ;   X       returned value 
                                   3802 ;---------------------
      0014A6                       3803 usr:
      0014A6 90 89            [ 2] 3804 	pushw y 	
      0014A8 CD 0B 89         [ 4] 3805 	call func_args 
      0014AB A1 01            [ 1] 3806 	cp a,#1 
      0014AD 27 07            [ 1] 3807 	jreq 2$
      0014AF A1 02            [ 1] 3808 	cp a,#2
      0014B1 27 03            [ 1] 3809 	jreq 2$  
      0014B3 CC 06 E7         [ 2] 3810 	jp syntax_error 
      0014B6 90 85            [ 2] 3811 2$: popw y  ; arg|addr 
      0014B8 A1 01            [ 1] 3812 	cp a,#1
      0014BA 27 02            [ 1] 3813 	jreq 3$
      0014BC 85               [ 2] 3814 	popw x ; addr
      0014BD 51               [ 1] 3815 	exgw x,y 
      0014BE 90 FD            [ 4] 3816 3$: call (y)
      0014C0 90 85            [ 2] 3817 	popw y 
      0014C2 81               [ 4] 3818 	ret 
                                   3819 
                                   3820 ;------------------------------
                                   3821 ; BASIC: BYE 
                                   3822 ; halt mcu in its lowest power mode 
                                   3823 ; wait for reset or external interrupt
                                   3824 ; do a cold start on wakeup.
                                   3825 ;------------------------------
      0014C3                       3826 bye:
      0014C3 72 0D 52 30 FB   [ 2] 3827 	btjf UART1_SR,#UART_SR_TC,.
      0014C8 8E               [10] 3828 	halt
      0014C9 CC 04 6F         [ 2] 3829 	jp cold_start  
                                   3830 
                                   3831 ;----------------------------------
                                   3832 ; BASIC: SLEEP 
                                   3833 ; halt mcu until reset or external
                                   3834 ; interrupt.
                                   3835 ; Resume progam after SLEEP command
                                   3836 ;----------------------------------
      0014CC                       3837 sleep:
      0014CC 72 0D 52 30 FB   [ 2] 3838 	btjf UART1_SR,#UART_SR_TC,.
      0014D1 72 16 00 20      [ 1] 3839 	bset flags,#FSLEEP
      0014D5 8E               [10] 3840 	halt 
      0014D6 81               [ 4] 3841 	ret 
                                   3842 
                                   3843 ;-------------------------------
                                   3844 ; BASIC: PAUSE expr 
                                   3845 ; suspend execution for n msec.
                                   3846 ; input:
                                   3847 ;	none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3848 ; output:
                                   3849 ;	none 
                                   3850 ;------------------------------
      0014D7                       3851 pause:
      0014D7 CD 0C 8D         [ 4] 3852 	call expression
      0014DA A1 84            [ 1] 3853 	cp a,#TK_INTGR
      0014DC 27 03            [ 1] 3854 	jreq pause02 
      0014DE CC 06 E7         [ 2] 3855 	jp syntax_error
      0014E1                       3856 pause02: 
      0014E1 5D               [ 2] 3857 1$: tnzw x 
      0014E2 27 04            [ 1] 3858 	jreq 2$
      0014E4 8F               [10] 3859 	wfi 
      0014E5 5A               [ 2] 3860 	decw x 
      0014E6 26 F9            [ 1] 3861 	jrne 1$
      0014E8 4F               [ 1] 3862 2$:	clr a 
      0014E9 81               [ 4] 3863 	ret 
                                   3864 
                                   3865 ;------------------------------
                                   3866 ; BASIC: AWU expr
                                   3867 ; halt mcu for 'expr' milliseconds
                                   3868 ; use Auto wakeup peripheral
                                   3869 ; all oscillators stopped except LSI
                                   3870 ; range: 1ms - 511ms
                                   3871 ; input:
                                   3872 ;  none
                                   3873 ; output:
                                   3874 ;  none:
                                   3875 ;------------------------------
      0014EA                       3876 awu:
      0014EA CD 0C 8D         [ 4] 3877   call expression
      0014ED A1 84            [ 1] 3878   cp a,#TK_INTGR
      0014EF 27 03            [ 1] 3879   jreq awu02
      0014F1 CC 06 E7         [ 2] 3880   jp syntax_error
      0014F4                       3881 awu02:
      0014F4 A3 14 00         [ 2] 3882   cpw x,#5120
      0014F7 2B 0C            [ 1] 3883   jrmi 1$ 
      0014F9 35 0F 50 F2      [ 1] 3884   mov AWU_TBR,#15 
      0014FD A6 1E            [ 1] 3885   ld a,#30
      0014FF 62               [ 2] 3886   div x,a
      001500 A6 10            [ 1] 3887   ld a,#16
      001502 62               [ 2] 3888   div x,a 
      001503 20 1E            [ 2] 3889   jra 4$
      001505                       3890 1$: 
      001505 A3 08 00         [ 2] 3891   cpw x,#2048
      001508 2B 09            [ 1] 3892   jrmi 2$ 
      00150A 35 0E 50 F2      [ 1] 3893   mov AWU_TBR,#14
      00150E A6 50            [ 1] 3894   ld a,#80
      001510 62               [ 2] 3895   div x,a 
      001511 20 10            [ 2] 3896   jra 4$   
      001513                       3897 2$:
      001513 35 07 50 F2      [ 1] 3898   mov AWU_TBR,#7
      001517                       3899 3$:  
                                   3900 ; while X > 64  divide by 2 and increment AWU_TBR 
      001517 A3 00 40         [ 2] 3901   cpw x,#64 
      00151A 23 07            [ 2] 3902   jrule 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00151C 72 5C 50 F2      [ 1] 3903   inc AWU_TBR 
      001520 54               [ 2] 3904   srlw x 
      001521 20 F4            [ 2] 3905   jra 3$ 
      001523                       3906 4$:
      001523 9F               [ 1] 3907   ld a, xl
      001524 4A               [ 1] 3908   dec a 
      001525 27 01            [ 1] 3909   jreq 5$
      001527 4A               [ 1] 3910   dec a 	
      001528                       3911 5$: 
      001528 A4 3E            [ 1] 3912   and a,#0x3e 
      00152A C7 50 F1         [ 1] 3913   ld AWU_APR,a 
      00152D 72 18 50 F0      [ 1] 3914   bset AWU_CSR,#AWU_CSR_AWUEN
      001531 8E               [10] 3915   halt 
                                   3916 
      001532 81               [ 4] 3917   ret 
                                   3918 
                                   3919 ;------------------------------
                                   3920 ; BASIC: TICKS
                                   3921 ; return msec ticks counter value 
                                   3922 ; input:
                                   3923 ; 	none 
                                   3924 ; output:
                                   3925 ;	X 		TK_INTGR
                                   3926 ;-------------------------------
      001533                       3927 get_ticks:
      001533 CE 00 0E         [ 2] 3928 	ldw x,ticks 
      001536 A6 84            [ 1] 3929 	ld a,#TK_INTGR
      001538 81               [ 4] 3930 	ret 
                                   3931 
                                   3932 
                                   3933 
                                   3934 ;------------------------------
                                   3935 ; BASIC: ABS(expr)
                                   3936 ; return absolute value of expr.
                                   3937 ; input:
                                   3938 ;   none
                                   3939 ; output:
                                   3940 ;   X     	positive integer
                                   3941 ;-------------------------------
      001539                       3942 abs:
      001539 CD 0B 89         [ 4] 3943 	call func_args 
      00153C A1 01            [ 1] 3944 	cp a,#1 
      00153E 27 03            [ 1] 3945 	jreq 0$ 
      001540 CC 06 E7         [ 2] 3946 	jp syntax_error
      001543                       3947 0$:  
      001543 85               [ 2] 3948     popw x   
      001544 9E               [ 1] 3949 	ld a,xh 
      001545 A5 80            [ 1] 3950 	bcp a,#0x80 
      001547 27 01            [ 1] 3951 	jreq 2$ 
      001549 50               [ 2] 3952 	negw x 
      00154A A6 84            [ 1] 3953 2$: ld a,#TK_INTGR 
      00154C 81               [ 4] 3954 	ret 
                                   3955 
                                   3956 ;------------------------------
                                   3957 ; BASIC: AND(expr1,expr2)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3958 ; Apply bit AND relation between
                                   3959 ; the 2 arguments, i.e expr1 & expr2 
                                   3960 ; output:
                                   3961 ; 	A 		TK_INTGR
                                   3962 ;   X 		result 
                                   3963 ;------------------------------
      00154D                       3964 bit_and:
      00154D CD 0B 89         [ 4] 3965 	call func_args 
      001550 A1 02            [ 1] 3966 	cp a,#2
      001552 27 03            [ 1] 3967 	jreq 1$
      001554 CC 06 E7         [ 2] 3968 	jp syntax_error 
      001557 85               [ 2] 3969 1$:	popw x 
      001558 9E               [ 1] 3970 	ld a,xh 
      001559 14 01            [ 1] 3971 	and a,(1,sp)
      00155B 95               [ 1] 3972 	ld xh,a 
      00155C 9F               [ 1] 3973 	ld a,xl
      00155D 14 02            [ 1] 3974 	and a,(2,sp)
      00155F 97               [ 1] 3975 	ld xl,a 
      001560                       3976 	_drop 2 
      001560 5B 02            [ 2]    1     addw sp,#2 
      001562 A6 84            [ 1] 3977 	ld a,#TK_INTGR
      001564 81               [ 4] 3978 	ret
                                   3979 
                                   3980 ;------------------------------
                                   3981 ; BASIC: OR(expr1,expr2)
                                   3982 ; Apply bit OR relation between
                                   3983 ; the 2 arguments, i.e expr1 | expr2 
                                   3984 ; output:
                                   3985 ; 	A 		TK_INTGR
                                   3986 ;   X 		result 
                                   3987 ;------------------------------
      001565                       3988 bit_or:
      001565 CD 0B 89         [ 4] 3989 	call func_args 
      001568 A1 02            [ 1] 3990 	cp a,#2
      00156A 27 03            [ 1] 3991 	jreq 1$
      00156C CC 06 E7         [ 2] 3992 	jp syntax_error 
      00156F                       3993 1$: 
      00156F 85               [ 2] 3994 	popw x 
      001570 9E               [ 1] 3995 	ld a,xh 
      001571 1A 01            [ 1] 3996 	or a,(1,sp)
      001573 95               [ 1] 3997 	ld xh,a 
      001574 9F               [ 1] 3998 	ld a,xl 
      001575 1A 02            [ 1] 3999 	or a,(2,sp)
      001577 97               [ 1] 4000 	ld xl,a 
      001578                       4001 	_drop 2 
      001578 5B 02            [ 2]    1     addw sp,#2 
      00157A A6 84            [ 1] 4002 	ld a,#TK_INTGR 
      00157C 81               [ 4] 4003 	ret
                                   4004 
                                   4005 ;------------------------------
                                   4006 ; BASIC: XOR(expr1,expr2)
                                   4007 ; Apply bit XOR relation between
                                   4008 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4009 ; output:
                                   4010 ; 	A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4011 ;   X 		result 
                                   4012 ;------------------------------
      00157D                       4013 bit_xor:
      00157D CD 0B 89         [ 4] 4014 	call func_args 
      001580 A1 02            [ 1] 4015 	cp a,#2
      001582 27 03            [ 1] 4016 	jreq 1$
      001584 CC 06 E7         [ 2] 4017 	jp syntax_error 
      001587                       4018 1$: 
      001587 85               [ 2] 4019 	popw x 
      001588 9E               [ 1] 4020 	ld a,xh 
      001589 18 01            [ 1] 4021 	xor a,(1,sp)
      00158B 95               [ 1] 4022 	ld xh,a 
      00158C 9F               [ 1] 4023 	ld a,xl 
      00158D 18 02            [ 1] 4024 	xor a,(2,sp)
      00158F 97               [ 1] 4025 	ld xl,a 
      001590                       4026 	_drop 2 
      001590 5B 02            [ 2]    1     addw sp,#2 
      001592 A6 84            [ 1] 4027 	ld a,#TK_INTGR 
      001594 81               [ 4] 4028 	ret 
                                   4029 
                                   4030 ;------------------------------
                                   4031 ; BASIC: LSHIFT(expr1,expr2)
                                   4032 ; logical shift left expr1 by 
                                   4033 ; expr2 bits 
                                   4034 ; output:
                                   4035 ; 	A 		TK_INTGR
                                   4036 ;   X 		result 
                                   4037 ;------------------------------
      001595                       4038 lshift:
      001595 CD 0B 89         [ 4] 4039 	call func_args
      001598 A1 02            [ 1] 4040 	cp a,#2 
      00159A 27 03            [ 1] 4041 	jreq 1$
      00159C CC 06 E7         [ 2] 4042 	jp syntax_error
      00159F 90 85            [ 2] 4043 1$: popw y   
      0015A1 85               [ 2] 4044 	popw x 
      0015A2 90 5D            [ 2] 4045 	tnzw y 
      0015A4 27 05            [ 1] 4046 	jreq 4$
      0015A6 58               [ 2] 4047 2$:	sllw x 
      0015A7 90 5A            [ 2] 4048 	decw y 
      0015A9 26 FB            [ 1] 4049 	jrne 2$
      0015AB                       4050 4$:  
      0015AB A6 84            [ 1] 4051 	ld a,#TK_INTGR
      0015AD 81               [ 4] 4052 	ret
                                   4053 
                                   4054 ;------------------------------
                                   4055 ; BASIC: RSHIFT(expr1,expr2)
                                   4056 ; logical shift right expr1 by 
                                   4057 ; expr2 bits.
                                   4058 ; output:
                                   4059 ; 	A 		TK_INTGR
                                   4060 ;   X 		result 
                                   4061 ;------------------------------
      0015AE                       4062 rshift:
      0015AE CD 0B 89         [ 4] 4063 	call func_args
      0015B1 A1 02            [ 1] 4064 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0015B3 27 03            [ 1] 4065 	jreq 1$
      0015B5 CC 06 E7         [ 2] 4066 	jp syntax_error
      0015B8 90 85            [ 2] 4067 1$: popw y  
      0015BA 85               [ 2] 4068 	popw x
      0015BB 90 5D            [ 2] 4069 	tnzw y 
      0015BD 27 05            [ 1] 4070 	jreq 4$
      0015BF 54               [ 2] 4071 2$:	srlw x 
      0015C0 90 5A            [ 2] 4072 	decw y 
      0015C2 26 FB            [ 1] 4073 	jrne 2$
      0015C4                       4074 4$:  
      0015C4 A6 84            [ 1] 4075 	ld a,#TK_INTGR
      0015C6 81               [ 4] 4076 	ret
                                   4077 
                                   4078 ;--------------------------
                                   4079 ; BASIC: FCPU integer
                                   4080 ; set CPU frequency 
                                   4081 ;-------------------------- 
                                   4082 
      0015C7                       4083 fcpu:
      0015C7 A6 84            [ 1] 4084 	ld a,#TK_INTGR
      0015C9 CD 0B 7C         [ 4] 4085 	call expect 
      0015CC 9F               [ 1] 4086 	ld a,xl 
      0015CD A4 07            [ 1] 4087 	and a,#7 
      0015CF C7 50 C6         [ 1] 4088 	ld CLK_CKDIVR,a 
      0015D2 81               [ 4] 4089 	ret 
                                   4090 
                                   4091 ;------------------------------
                                   4092 ; BASIC: PMODE pin#, mode 
                                   4093 ; Arduino pin. 
                                   4094 ; define pin as input or output
                                   4095 ; pin#: {0..15}
                                   4096 ; mode: INPUT|OUTPUT  
                                   4097 ;------------------------------
                           000001  4098 	PINNO=1
                           000001  4099 	VSIZE=1
      0015D3                       4100 pin_mode:
      0015D3                       4101 	_vars VSIZE 
      0015D3 52 01            [ 2]    1     sub sp,#VSIZE 
      0015D5 CD 0B 8E         [ 4] 4102 	call arg_list 
      0015D8 A1 02            [ 1] 4103 	cp a,#2 
      0015DA 27 03            [ 1] 4104 	jreq 1$
      0015DC CC 06 E7         [ 2] 4105 	jp syntax_error 
      0015DF 90 85            [ 2] 4106 1$: popw y ; mode 
      0015E1 85               [ 2] 4107 	popw x ; Dx pin 
      0015E2 CD 16 1F         [ 4] 4108 	call select_pin 
      0015E5 6B 01            [ 1] 4109 	ld (PINNO,sp),a  
      0015E7 A6 01            [ 1] 4110 	ld a,#1 
      0015E9 0D 01            [ 1] 4111 	tnz (PINNO,sp)
      0015EB 27 0D            [ 1] 4112 	jreq 4$
      0015ED 48               [ 1] 4113 2$:	sll a 
      0015EE 0A 01            [ 1] 4114 	dec (PINNO,sp)
      0015F0 26 FB            [ 1] 4115 	jrne 2$ 
      0015F2 6B 01            [ 1] 4116 	ld (PINNO,sp),a
      0015F4 7B 01            [ 1] 4117 	ld a,(PINNO,sp)
      0015F6 EA 03            [ 1] 4118 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0015F8 E7 03            [ 1] 4119 	ld (GPIO_CR1,x),a 
      0015FA 90 A3 00 01      [ 2] 4120 4$:	cpw y,#OUTP 
      0015FE 27 10            [ 1] 4121 	jreq 6$
                                   4122 ; input mode
                                   4123 ; disable external interrupt 
      001600 7B 01            [ 1] 4124 	ld a,(PINNO,sp)
      001602 43               [ 1] 4125 	cpl a 
      001603 E4 04            [ 1] 4126 	and a,(GPIO_CR2,x)
      001605 E7 04            [ 1] 4127 	ld (GPIO_CR2,x),a 
                                   4128 ;clear bit in DDR for input mode 
      001607 7B 01            [ 1] 4129 	ld a,(PINNO,sp)
      001609 43               [ 1] 4130 	cpl a 
      00160A E4 02            [ 1] 4131 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      00160C E7 02            [ 1] 4132 	ld (GPIO_DDR,x),a 
      00160E 20 0C            [ 2] 4133 	jra 9$
      001610                       4134 6$: ;output mode  
      001610 7B 01            [ 1] 4135 	ld a,(PINNO,sp)
      001612 EA 02            [ 1] 4136 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001614 E7 02            [ 1] 4137 	ld (GPIO_DDR,x),a 
      001616 7B 01            [ 1] 4138 	ld a,(PINNO,sp)
      001618 EA 04            [ 1] 4139 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      00161A E7 04            [ 1] 4140 	ld (GPIO_CR2,x),a 
      00161C                       4141 9$:	
      00161C                       4142 	_drop VSIZE 
      00161C 5B 01            [ 2]    1     addw sp,#VSIZE 
      00161E 81               [ 4] 4143 	ret
                                   4144 
                                   4145 ;------------------------
                                   4146 ; select Arduino pin 
                                   4147 ; input:
                                   4148 ;   X 	 {0..15} Arduino Dx 
                                   4149 ; output:
                                   4150 ;   A     stm8s208 pin 
                                   4151 ;   X     base address s208 GPIO port 
                                   4152 ;---------------------------
      00161F                       4153 select_pin:
      00161F 58               [ 2] 4154 	sllw x 
      001620 1C 16 2F         [ 2] 4155 	addw x,#arduino_to_8s208 
      001623 FE               [ 2] 4156 	ldw x,(x)
      001624 9F               [ 1] 4157 	ld a,xl 
      001625 88               [ 1] 4158 	push a 
      001626 5E               [ 1] 4159 	swapw x 
      001627 A6 05            [ 1] 4160 	ld a,#5 
      001629 42               [ 4] 4161 	mul x,a 
      00162A 1C 50 00         [ 2] 4162 	addw x,#GPIO_BASE 
      00162D 84               [ 1] 4163 	pop a 
      00162E 81               [ 4] 4164 	ret 
                                   4165 ; translation from Arduino D0..D15 to stm8s208rb 
      00162F                       4166 arduino_to_8s208:
      00162F 03 06                 4167 .byte 3,6 ; D0 
      001631 03 05                 4168 .byte 3,5 ; D1 
      001633 04 00                 4169 .byte 4,0 ; D2 
      001635 02 01                 4170 .byte 2,1 ; D3
      001637 06 00                 4171 .byte 6,0 ; D4
      001639 02 02                 4172 .byte 2,2 ; D5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00163B 02 03                 4173 .byte 2,3 ; D6
      00163D 03 01                 4174 .byte 3,1 ; D7
      00163F 03 03                 4175 .byte 3,3 ; D8
      001641 02 04                 4176 .byte 2,4 ; D9
      001643 04 05                 4177 .byte 4,5 ; D10
      001645 02 06                 4178 .byte 2,6 ; D11
      001647 02 07                 4179 .byte 2,7 ; D12
      001649 02 05                 4180 .byte 2,5 ; D13
      00164B 04 02                 4181 .byte 4,2 ; D14
      00164D 04 01                 4182 .byte 4,1 ; D15
                                   4183 
                                   4184 
                                   4185 ;------------------------------
                                   4186 ; BASIC: RND(expr)
                                   4187 ; return random number 
                                   4188 ; between 1 and expr inclusive
                                   4189 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4190 ; input:
                                   4191 ; 	none 
                                   4192 ; output:
                                   4193 ;	X 		random positive integer 
                                   4194 ;------------------------------
      00164F                       4195 random:
      00164F CD 0B 89         [ 4] 4196 	call func_args 
      001652 A1 01            [ 1] 4197 	cp a,#1
      001654 27 03            [ 1] 4198 	jreq 1$
      001656 CC 06 E7         [ 2] 4199 	jp syntax_error
      001659                       4200 1$:  
      001659 A6 80            [ 1] 4201 	ld a,#0x80 
      00165B 15 01            [ 1] 4202 	bcp a,(1,sp)
      00165D 27 05            [ 1] 4203 	jreq 2$
      00165F A6 0A            [ 1] 4204 	ld a,#ERR_BAD_VALUE
      001661 CC 06 E9         [ 2] 4205 	jp tb_error
      001664                       4206 2$: 
                                   4207 ; acc16=(x<<5)^x 
      001664 CE 00 12         [ 2] 4208 	ldw x,seedx 
      001667 58               [ 2] 4209 	sllw x 
      001668 58               [ 2] 4210 	sllw x 
      001669 58               [ 2] 4211 	sllw x 
      00166A 58               [ 2] 4212 	sllw x 
      00166B 58               [ 2] 4213 	sllw x 
      00166C 9E               [ 1] 4214 	ld a,xh 
      00166D C8 00 12         [ 1] 4215 	xor a,seedx 
      001670 C7 00 0C         [ 1] 4216 	ld acc16,a 
      001673 9F               [ 1] 4217 	ld a,xl 
      001674 C8 00 13         [ 1] 4218 	xor a,seedx+1 
      001677 C7 00 0D         [ 1] 4219 	ld acc8,a 
                                   4220 ; seedx=seedy 
      00167A CE 00 14         [ 2] 4221 	ldw x,seedy 
      00167D CF 00 12         [ 2] 4222 	ldw seedx,x  
                                   4223 ; seedy=seedy^(seedy>>1)
      001680 90 54            [ 2] 4224 	srlw y 
      001682 90 9E            [ 1] 4225 	ld a,yh 
      001684 C8 00 14         [ 1] 4226 	xor a,seedy 
      001687 C7 00 14         [ 1] 4227 	ld seedy,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00168A 90 9F            [ 1] 4228 	ld a,yl 
      00168C C8 00 15         [ 1] 4229 	xor a,seedy+1 
      00168F C7 00 15         [ 1] 4230 	ld seedy+1,a 
                                   4231 ; acc16>>3 
      001692 CE 00 0C         [ 2] 4232 	ldw x,acc16 
      001695 54               [ 2] 4233 	srlw x 
      001696 54               [ 2] 4234 	srlw x 
      001697 54               [ 2] 4235 	srlw x 
                                   4236 ; x=acc16^x 
      001698 9E               [ 1] 4237 	ld a,xh 
      001699 C8 00 0C         [ 1] 4238 	xor a,acc16 
      00169C 95               [ 1] 4239 	ld xh,a 
      00169D 9F               [ 1] 4240 	ld a,xl 
      00169E C8 00 0D         [ 1] 4241 	xor a,acc8 
      0016A1 97               [ 1] 4242 	ld xl,a 
                                   4243 ; seedy=x^seedy 
      0016A2 C8 00 15         [ 1] 4244 	xor a,seedy+1
      0016A5 97               [ 1] 4245 	ld xl,a 
      0016A6 9E               [ 1] 4246 	ld a,xh 
      0016A7 C8 00 14         [ 1] 4247 	xor a,seedy
      0016AA 95               [ 1] 4248 	ld xh,a 
      0016AB CF 00 14         [ 2] 4249 	ldw seedy,x 
                                   4250 ; return seedy modulo expr + 1 
      0016AE 90 85            [ 2] 4251 	popw y 
      0016B0 65               [ 2] 4252 	divw x,y 
      0016B1 93               [ 1] 4253 	ldw x,y 
      0016B2 5C               [ 1] 4254 	incw x 
      0016B3                       4255 10$:
      0016B3 A6 84            [ 1] 4256 	ld a,#TK_INTGR
      0016B5 81               [ 4] 4257 	ret 
                                   4258 
                                   4259 ;---------------------------------
                                   4260 ; BASIC: WORDS 
                                   4261 ; affiche la listes des mots du
                                   4262 ; dictionnaire ainsi que le nombre
                                   4263 ; de mots.
                                   4264 ;---------------------------------
                           000001  4265 	WLEN=1 ; word length
                           000002  4266 	LLEN=2 ; character sent to console
                           000003  4267 	WCNT=3 ; count words printed 
                           000003  4268 	VSIZE=3 
      0016B6                       4269 words:
      0016B6                       4270 	_vars VSIZE
      0016B6 52 03            [ 2]    1     sub sp,#VSIZE 
      0016B8 0F 02            [ 1] 4271 	clr (LLEN,sp)
      0016BA 0F 03            [ 1] 4272 	clr (WCNT,sp)
      0016BC 90 AE 1D 7B      [ 2] 4273 	ldw y,#kword_dict+2
      0016C0 93               [ 1] 4274 0$:	ldw x,y
      0016C1 F6               [ 1] 4275 	ld a,(x)
      0016C2 A4 0F            [ 1] 4276 	and a,#15 
      0016C4 6B 01            [ 1] 4277 	ld (WLEN,sp),a 
      0016C6 0C 03            [ 1] 4278 	inc (WCNT,sp)
      0016C8 5C               [ 1] 4279 1$:	incw x 
      0016C9 F6               [ 1] 4280 	ld a,(x)
      0016CA CD 02 B2         [ 4] 4281 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0016CD 0C 02            [ 1] 4282 	inc (LLEN,sp)
      0016CF 0A 01            [ 1] 4283 	dec (WLEN,sp)
      0016D1 26 F5            [ 1] 4284 	jrne 1$
      0016D3 A6 46            [ 1] 4285 	ld a,#70
      0016D5 11 02            [ 1] 4286 	cp a,(LLEN,sp)
      0016D7 2B 09            [ 1] 4287 	jrmi 2$   
      0016D9 A6 20            [ 1] 4288 	ld a,#SPACE 
      0016DB CD 02 B2         [ 4] 4289 	call putc 
      0016DE 0C 02            [ 1] 4290 	inc (LLEN,sp) 
      0016E0 20 07            [ 2] 4291 	jra 3$
      0016E2 A6 0D            [ 1] 4292 2$: ld a,#CR 
      0016E4 CD 02 B2         [ 4] 4293 	call putc 
      0016E7 0F 02            [ 1] 4294 	clr (LLEN,sp)
      0016E9 72 A2 00 02      [ 2] 4295 3$:	subw y,#2 
      0016ED 90 FE            [ 2] 4296 	ldw y,(y)
      0016EF 26 CF            [ 1] 4297 	jrne 0$ 
      0016F1 A6 0D            [ 1] 4298 	ld a,#CR 
      0016F3 CD 02 B2         [ 4] 4299 	call putc  
      0016F6 5F               [ 1] 4300 	clrw x 
      0016F7 7B 03            [ 1] 4301 	ld a,(WCNT,sp)
      0016F9 97               [ 1] 4302 	ld xl,a 
      0016FA CD 08 31         [ 4] 4303 	call print_int 
      0016FD AE 17 06         [ 2] 4304 	ldw x,#words_count_msg
      001700 CD 00 00         [ 4] 4305 	call puts 
      001703                       4306 	_drop VSIZE 
      001703 5B 03            [ 2]    1     addw sp,#VSIZE 
      001705 81               [ 4] 4307 	ret 
      001706 20 77 6F 72 64 73 20  4308 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4309 
                                   4310 
                                   4311 ;-----------------------------
                                   4312 ; BASIC: TIMER expr 
                                   4313 ; initialize count down timer 
                                   4314 ;-----------------------------
      00171C                       4315 set_timer:
      00171C CD 0B 8E         [ 4] 4316 	call arg_list
      00171F A1 01            [ 1] 4317 	cp a,#1 
      001721 27 03            [ 1] 4318 	jreq 1$
      001723 CC 06 E7         [ 2] 4319 	jp syntax_error
      001726                       4320 1$: 
      001726 85               [ 2] 4321 	popw x 
      001727 CF 00 10         [ 2] 4322 	ldw timer,x 
      00172A 81               [ 4] 4323 	ret 
                                   4324 
                                   4325 ;------------------------------
                                   4326 ; BASIC: TIMEOUT 
                                   4327 ; return state of timer 
                                   4328 ;------------------------------
      00172B                       4329 timeout:
      00172B CE 00 10         [ 2] 4330 	ldw x,timer 
      00172E                       4331 logical_complement:
      00172E 53               [ 2] 4332 	cplw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00172F A3 FF FF         [ 2] 4333 	cpw x,#-1
      001732 27 01            [ 1] 4334 	jreq 2$
      001734 5F               [ 1] 4335 	clrw x 
      001735 A6 84            [ 1] 4336 2$:	ld a,#TK_INTGR
      001737 81               [ 4] 4337 	ret 
                                   4338 
                                   4339 ;--------------------------------
                                   4340 ; BASIC NOT(expr) 
                                   4341 ; return logical complement of expr
                                   4342 ;--------------------------------
      001738                       4343 func_not:
      001738 CD 0B 89         [ 4] 4344 	call func_args  
      00173B A1 01            [ 1] 4345 	cp a,#1
      00173D 27 03            [ 1] 4346 	jreq 1$
      00173F CC 06 E7         [ 2] 4347 	jp syntax_error
      001742 85               [ 2] 4348 1$:	popw x 
      001743 20 E9            [ 2] 4349 	jra logical_complement
                                   4350 
                                   4351 
                                   4352 
                                   4353 ;-----------------------------------
                                   4354 ; BASIC: IWDGEN expr1 
                                   4355 ; enable independant watchdog timer
                                   4356 ; expr1 is delay in multiple of 62.5µsec
                                   4357 ; expr1 -> {1..16383}
                                   4358 ;-----------------------------------
      001745                       4359 enable_iwdg:
      001745 CD 0B 8E         [ 4] 4360 	call arg_list
      001748 A1 01            [ 1] 4361 	cp a,#1 
      00174A 27 03            [ 1] 4362 	jreq 1$
      00174C CC 06 E7         [ 2] 4363 	jp syntax_error 
      00174F 85               [ 2] 4364 1$: popw x 
      001750 4B 00            [ 1] 4365 	push #0
      001752 35 CC 50 E0      [ 1] 4366 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001756 9E               [ 1] 4367 	ld a,xh 
      001757 A4 3F            [ 1] 4368 	and a,#0x3f
      001759 95               [ 1] 4369 	ld xh,a  
      00175A A3 00 FF         [ 2] 4370 2$:	cpw x,#255
      00175D 23 06            [ 2] 4371 	jrule 3$
      00175F 0C 01            [ 1] 4372 	inc (1,sp)
      001761 98               [ 1] 4373 	rcf 
      001762 56               [ 2] 4374 	rrcw x 
      001763 20 F5            [ 2] 4375 	jra 2$
      001765 35 55 50 E0      [ 1] 4376 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001769 84               [ 1] 4377 	pop a  
      00176A C7 50 E1         [ 1] 4378 	ld IWDG_PR,a 
      00176D 9F               [ 1] 4379 	ld a,xl
      00176E 4A               [ 1] 4380 	dec a 
      00176F 35 55 50 E0      [ 1] 4381 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001773 C7 50 E2         [ 1] 4382 	ld IWDG_RLR,a 
      001776 35 AA 50 E0      [ 1] 4383 	mov IWDG_KR,#IWDG_KEY_REFRESH
      00177A 81               [ 4] 4384 	ret 
                                   4385 
                                   4386 
                                   4387 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4388 ; BASIC: IWDGREF  
                                   4389 ; refresh independant watchdog count down 
                                   4390 ; timer before it reset MCU. 
                                   4391 ;-----------------------------------
      00177B                       4392 refresh_iwdg:
      00177B 35 AA 50 E0      [ 1] 4393 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00177F 81               [ 4] 4394 	ret 
                                   4395 
                                   4396 
                                   4397 ;-------------------------------------
                                   4398 ; BASIC: LOG(expr)
                                   4399 ; return logarithm base 2 of expr 
                                   4400 ; this is the position of most significant
                                   4401 ; bit set. 
                                   4402 ; input: 
                                   4403 ; output:
                                   4404 ;   X     log2 
                                   4405 ;   A     TK_INTGR 
                                   4406 ;*********************************
      001780                       4407 log2:
      001780 CD 0B 89         [ 4] 4408 	call func_args 
      001783 A1 01            [ 1] 4409 	cp a,#1 
      001785 27 03            [ 1] 4410 	jreq 1$
      001787 CC 06 E7         [ 2] 4411 	jp syntax_error 
      00178A 85               [ 2] 4412 1$: popw x 
      00178B                       4413 leading_one:
      00178B 5D               [ 2] 4414 	tnzw x 
      00178C 27 0A            [ 1] 4415 	jreq 4$
      00178E A6 0F            [ 1] 4416 	ld a,#15 
      001790 59               [ 2] 4417 2$: rlcw x 
      001791 25 03            [ 1] 4418     jrc 3$
      001793 4A               [ 1] 4419 	dec a 
      001794 20 FA            [ 2] 4420 	jra 2$
      001796 5F               [ 1] 4421 3$: clrw x 
      001797 97               [ 1] 4422     ld xl,a
      001798 A6 84            [ 1] 4423 4$:	ld a,#TK_INTGR
      00179A 81               [ 4] 4424 	ret 
                                   4425 
                                   4426 ;-----------------------------------
                                   4427 ; BASIC: BIT(expr) 
                                   4428 ; expr ->{0..15}
                                   4429 ; return 2^expr 
                                   4430 ; output:
                                   4431 ;    x    2^expr 
                                   4432 ;-----------------------------------
      00179B                       4433 bitmask:
      00179B CD 0B 89         [ 4] 4434     call func_args 
      00179E A1 01            [ 1] 4435 	cp a,#1
      0017A0 27 03            [ 1] 4436 	jreq 1$
      0017A2 CC 06 E7         [ 2] 4437 	jp syntax_error 
      0017A5 85               [ 2] 4438 1$: popw x 
      0017A6 9F               [ 1] 4439 	ld a,xl 
      0017A7 A4 0F            [ 1] 4440 	and a,#15
      0017A9 5F               [ 1] 4441 	clrw x 
      0017AA 5C               [ 1] 4442 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0017AB 4D               [ 1] 4443 2$: tnz a 
      0017AC 27 04            [ 1] 4444 	jreq 3$
      0017AE 58               [ 2] 4445 	slaw x 
      0017AF 4A               [ 1] 4446 	dec a 
      0017B0 20 F9            [ 2] 4447 	jra 2$ 
      0017B2 A6 84            [ 1] 4448 3$: ld a,#TK_INTGR
      0017B4 81               [ 4] 4449 	ret 
                                   4450 
                                   4451 ;------------------------------
                                   4452 ; BASIC: INVERT(expr)
                                   4453 ; 1's complement 
                                   4454 ;--------------------------------
      0017B5                       4455 invert:
      0017B5 CD 0B 89         [ 4] 4456 	call func_args
      0017B8 A1 01            [ 1] 4457 	cp a,#1 
      0017BA 27 03            [ 1] 4458 	jreq 1$
      0017BC CC 06 E7         [ 2] 4459 	jp syntax_error
      0017BF 85               [ 2] 4460 1$: popw x  
      0017C0 53               [ 2] 4461 	cplw x 
      0017C1 A6 84            [ 1] 4462 	ld a,#TK_INTGR 
      0017C3 81               [ 4] 4463 	ret 
                                   4464 
                                   4465 ;------------------------------
                                   4466 ; BASIC: DO 
                                   4467 ; initiate a DO ... UNTIL loop 
                                   4468 ;------------------------------
                           000003  4469 	DOLP_ADR=3 
                           000005  4470 	DOLP_INW=5
                           000004  4471 	VSIZE=4 
      0017C4                       4472 do_loop:
      0017C4 85               [ 2] 4473 	popw x 
      0017C5                       4474 	_vars VSIZE 
      0017C5 52 04            [ 2]    1     sub sp,#VSIZE 
      0017C7 89               [ 2] 4475 	pushw x 
      0017C8 90 CE 00 04      [ 2] 4476 	ldw y,basicptr 
      0017CC 17 03            [ 2] 4477 	ldw (DOLP_ADR,sp),y
      0017CE 90 CE 00 00      [ 2] 4478 	ldw y,in.w 
      0017D2 17 05            [ 2] 4479 	ldw (DOLP_INW,sp),y
      0017D4 72 5C 00 1D      [ 1] 4480 	inc loop_depth 
      0017D8 81               [ 4] 4481 	ret 
                                   4482 
                                   4483 ;--------------------------------
                                   4484 ; BASIC: UNTIL expr 
                                   4485 ; loop if exprssion is false 
                                   4486 ; else terminate loop
                                   4487 ;--------------------------------
      0017D9                       4488 until: 
      0017D9 72 5D 00 1D      [ 1] 4489 	tnz loop_depth 
      0017DD 26 03            [ 1] 4490 	jrne 1$ 
      0017DF CC 06 E7         [ 2] 4491 	jp syntax_error 
      0017E2                       4492 1$: 
      0017E2 CD 0C D6         [ 4] 4493 	call relation 
      0017E5 A1 84            [ 1] 4494 	cp a,#TK_INTGR
      0017E7 27 03            [ 1] 4495 	jreq 2$
      0017E9 CC 06 E7         [ 2] 4496 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0017EC                       4497 2$: 
      0017EC 5D               [ 2] 4498 	tnzw x 
      0017ED 26 10            [ 1] 4499 	jrne 9$
      0017EF 1E 03            [ 2] 4500 	ldw x,(DOLP_ADR,sp)
      0017F1 CF 00 04         [ 2] 4501 	ldw basicptr,x 
      0017F4 E6 02            [ 1] 4502 	ld a,(2,x)
      0017F6 C7 00 03         [ 1] 4503 	ld count,a 
      0017F9 1E 05            [ 2] 4504 	ldw x,(DOLP_INW,sp)
      0017FB CF 00 00         [ 2] 4505 	ldw in.w,x 
      0017FE 81               [ 4] 4506 	ret 
      0017FF                       4507 9$:	; remove loop data from stack  
      0017FF 85               [ 2] 4508 	popw x
      001800                       4509 	_drop VSIZE
      001800 5B 04            [ 2]    1     addw sp,#VSIZE 
      001802 72 5A 00 1D      [ 1] 4510 	dec loop_depth 
      001806 FC               [ 2] 4511 	jp (x)
                                   4512 
                                   4513 ;--------------------------
                                   4514 ; BASIC: PRTA...PRTI  
                                   4515 ;  return constant value 
                                   4516 ;  PORT  offset in GPIO
                                   4517 ;  array
                                   4518 ;---------------------------
      001807                       4519 const_porta:
      001807 AE 00 00         [ 2] 4520 	ldw x,#0
      00180A A6 84            [ 1] 4521 	ld a,#TK_INTGR 
      00180C 81               [ 4] 4522 	ret 
      00180D                       4523 const_portb:
      00180D AE 00 01         [ 2] 4524 	ldw x,#1
      001810 A6 84            [ 1] 4525 	ld a,#TK_INTGR 
      001812 81               [ 4] 4526 	ret 
      001813                       4527 const_portc:
      001813 AE 00 02         [ 2] 4528 	ldw x,#2
      001816 A6 84            [ 1] 4529 	ld a,#TK_INTGR 
      001818 81               [ 4] 4530 	ret 
      001819                       4531 const_portd:
      001819 AE 00 03         [ 2] 4532 	ldw x,#3
      00181C A6 84            [ 1] 4533 	ld a,#TK_INTGR 
      00181E 81               [ 4] 4534 	ret 
      00181F                       4535 const_porte:
      00181F AE 00 04         [ 2] 4536 	ldw x,#4
      001822 A6 84            [ 1] 4537 	ld a,#TK_INTGR 
      001824 81               [ 4] 4538 	ret 
      001825                       4539 const_portf:
      001825 AE 00 05         [ 2] 4540 	ldw x,#5
      001828 A6 84            [ 1] 4541 	ld a,#TK_INTGR 
      00182A 81               [ 4] 4542 	ret 
      00182B                       4543 const_portg:
      00182B AE 00 06         [ 2] 4544 	ldw x,#6
      00182E A6 84            [ 1] 4545 	ld a,#TK_INTGR 
      001830 81               [ 4] 4546 	ret 
      001831                       4547 const_porth:
      001831 AE 00 07         [ 2] 4548 	ldw x,#7
      001834 A6 84            [ 1] 4549 	ld a,#TK_INTGR 
      001836 81               [ 4] 4550 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001837                       4551 const_porti:
      001837 AE 00 08         [ 2] 4552 	ldw x,#8
      00183A A6 84            [ 1] 4553 	ld a,#TK_INTGR 
      00183C 81               [ 4] 4554 	ret 
                                   4555 
                                   4556 ;-------------------------------
                                   4557 ; following return constant 
                                   4558 ; related to GPIO register offset 
                                   4559 ;---------------------------------
      00183D                       4560 const_odr:
      00183D A6 84            [ 1] 4561 	ld a,#TK_INTGR 
      00183F AE 00 00         [ 2] 4562 	ldw x,#GPIO_ODR
      001842 81               [ 4] 4563 	ret 
      001843                       4564 const_idr:
      001843 A6 84            [ 1] 4565 	ld a,#TK_INTGR 
      001845 AE 00 01         [ 2] 4566 	ldw x,#GPIO_IDR
      001848 81               [ 4] 4567 	ret 
      001849                       4568 const_ddr:
      001849 A6 84            [ 1] 4569 	ld a,#TK_INTGR 
      00184B AE 00 02         [ 2] 4570 	ldw x,#GPIO_DDR
      00184E 81               [ 4] 4571 	ret 
      00184F                       4572 const_cr1:
      00184F A6 84            [ 1] 4573 	ld a,#TK_INTGR 
      001851 AE 00 03         [ 2] 4574 	ldw x,#GPIO_CR1
      001854 81               [ 4] 4575 	ret 
      001855                       4576 const_cr2:
      001855 A6 84            [ 1] 4577 	ld a,#TK_INTGR 
      001857 AE 00 04         [ 2] 4578 	ldw x,#GPIO_CR2
      00185A 81               [ 4] 4579 	ret 
                                   4580 ;-------------------------
                                   4581 ; BASIC: POUT 
                                   4582 ;  constant for port mode
                                   4583 ;  used by PMODE 
                                   4584 ;  to set pin as output
                                   4585 ;------------------------
      00185B                       4586 const_output:
      00185B A6 84            [ 1] 4587 	ld a,#TK_INTGR 
      00185D AE 00 01         [ 2] 4588 	ldw x,#OUTP
      001860 81               [ 4] 4589 	ret 
                                   4590 
                                   4591 ;-------------------------
                                   4592 ; BASIC: PINP 
                                   4593 ;  constant for port mode
                                   4594 ;  used by PMODE 
                                   4595 ;  to set pin as input
                                   4596 ;------------------------
      001861                       4597 const_input:
      001861 A6 84            [ 1] 4598 	ld a,#TK_INTGR 
      001863 AE 00 00         [ 2] 4599 	ldw x,#INP 
      001866 81               [ 4] 4600 	ret 
                                   4601 	
                                   4602 ;-----------------------
                                   4603 ; memory area constants
                                   4604 ;-----------------------
      001867                       4605 const_eeprom_base:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001867 A6 84            [ 1] 4606 	ld a,#TK_INTGR 
      001869 AE 40 00         [ 2] 4607 	ldw x,#EEPROM_BASE 
      00186C 81               [ 4] 4608 	ret 
                                   4609 
                                   4610 ;---------------------------
                                   4611 ; BASIC: DATA 
                                   4612 ; when the interpreter find 
                                   4613 ; a DATA line it skip it.
                                   4614 ;---------------------------
      00186D                       4615 data:
      00186D 55 00 03 00 01   [ 1] 4616 	mov in,count 
      001872 81               [ 4] 4617 	ret 
                                   4618 
                                   4619 ;---------------------------
                                   4620 ; BASIC: DATLN  *expr*
                                   4621 ; set DATA pointer at line# 
                                   4622 ; specified by *expr* 
                                   4623 ;---------------------------
      001873                       4624 data_line:
      001873 CD 0C 8D         [ 4] 4625 	call expression
      001876 A1 84            [ 1] 4626 	cp a,#TK_INTGR
      001878 27 03            [ 1] 4627 	jreq 1$
      00187A CC 06 E7         [ 2] 4628 	jp syntax_error  
      00187D 4F               [ 1] 4629 1$: clr a 
      00187E CD 00 00         [ 4] 4630 	call search_lineno
      001881 5D               [ 2] 4631 	tnzw x 
      001882 26 05            [ 1] 4632 	jrne 3$
      001884 A6 05            [ 1] 4633 2$:	ld a,#ERR_NO_LINE 
      001886 CC 06 E9         [ 2] 4634 	jp tb_error
      001889                       4635 3$: ; check if valid data line 
      001889 90 93            [ 1] 4636     ldw y,x 
      00188B EE 04            [ 2] 4637 	ldw x,(4,x)
      00188D A3 18 6D         [ 2] 4638 	cpw x,#data 
      001890 26 F2            [ 1] 4639 	jrne 2$ 
      001892 90 CF 00 06      [ 2] 4640 	ldw data_ptr,y
      001896 90 E6 02         [ 1] 4641 	ld a,(2,y)
      001899 C7 00 09         [ 1] 4642 	ld data_len,a 
      00189C 35 06 00 08      [ 1] 4643 	mov data_ofs,#FIRST_DATA_ITEM 
      0018A0 81               [ 4] 4644 	ret
                                   4645 
                                   4646 ;---------------------------------
                                   4647 ; BASIC: RESTORE 
                                   4648 ; set data_ptr to first data line
                                   4649 ; if not DATA found pointer set to
                                   4650 ; zero 
                                   4651 ;---------------------------------
      0018A1                       4652 restore:
      0018A1 72 5F 00 06      [ 1] 4653 	clr data_ptr 
      0018A5 72 5F 00 07      [ 1] 4654 	clr data_ptr+1
      0018A9 72 5F 00 08      [ 1] 4655 	clr data_ofs 
      0018AD 72 5F 00 09      [ 1] 4656 	clr data_len
      0018B1 CE 00 19         [ 2] 4657 	ldw x,txtbgn
      0018B4                       4658 data_search_loop: 	
      0018B4 C3 00 1B         [ 2] 4659 	cpw x,txtend
      0018B7 24 1B            [ 1] 4660 	jruge 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0018B9 90 93            [ 1] 4661 	ldw y,x 
      0018BB EE 04            [ 2] 4662 	ldw x,(4,x)
      0018BD 1C 1D 81         [ 2] 4663 	addw x,#code_addr
      0018C0 FE               [ 2] 4664 	ldw x,(x)
      0018C1 A3 18 6D         [ 2] 4665 	cpw x,#data 
      0018C4 26 1A            [ 1] 4666 	jrne try_next_line 
      0018C6 90 CF 00 06      [ 2] 4667 	ldw data_ptr,y 
      0018CA 90 E6 02         [ 1] 4668 	ld a,(2,y)
      0018CD C7 00 09         [ 1] 4669 	ld data_len,a 
      0018D0 35 06 00 08      [ 1] 4670 	mov data_ofs,#FIRST_DATA_ITEM
      0018D4 72 5D 00 09      [ 1] 4671 9$:	tnz data_len 
      0018D8 26 05            [ 1] 4672     jrne 10$
      0018DA A6 0C            [ 1] 4673 	ld a,#ERR_NO_DATA 
      0018DC CC 06 E9         [ 2] 4674 	jp tb_error 
      0018DF 81               [ 4] 4675 10$:ret
      0018E0                       4676 try_next_line:
      0018E0 93               [ 1] 4677 	ldw x,y 
      0018E1 E6 02            [ 1] 4678 	ld a,(2,x)
      0018E3 C7 00 0D         [ 1] 4679 	ld acc8,a 
      0018E6 72 5F 00 0C      [ 1] 4680 	clr acc16 
      0018EA 72 BB 00 0C      [ 2] 4681 	addw x,acc16 
      0018EE 20 C4            [ 2] 4682 	jra data_search_loop
                                   4683 
                                   4684 
                                   4685 ;---------------------------------
                                   4686 ; BASIC: READ 
                                   4687 ; return next data item | 0 
                                   4688 ;---------------------------------
                           000001  4689 	CTX_BPTR=1 
                           000003  4690 	CTX_IN=3 
                           000004  4691 	CTX_COUNT=4 
                           000005  4692 	XSAVE=5
                           000006  4693 	VSIZE=6
      0018F0                       4694 read:
      0018F0                       4695 	_vars  VSIZE 
      0018F0 52 06            [ 2]    1     sub sp,#VSIZE 
      0018F2                       4696 read01:	
      0018F2 C6 00 08         [ 1] 4697 	ld a,data_ofs
      0018F5 C1 00 09         [ 1] 4698 	cp a,data_len 
      0018F8 27 37            [ 1] 4699 	jreq 2$ ; end of line  
      0018FA CD 0E F0         [ 4] 4700 	call save_context
      0018FD CE 00 06         [ 2] 4701 	ldw x,data_ptr 
      001900 CF 00 04         [ 2] 4702 	ldw basicptr,x 
      001903 55 00 08 00 01   [ 1] 4703 	mov in,data_ofs 
      001908 55 00 09 00 03   [ 1] 4704 	mov count,data_len  
      00190D CD 0C 8D         [ 4] 4705 	call expression 
      001910 A1 84            [ 1] 4706 	cp a,#TK_INTGR 
      001912 27 03            [ 1] 4707 	jreq 1$ 
      001914 CC 06 E7         [ 2] 4708 	jp syntax_error 
      001917                       4709 1$:
      001917 1F 05            [ 2] 4710 	ldw (XSAVE,SP),x
      001919 CD 07 D6         [ 4] 4711 	call next_token ; skip comma
      00191C CE 00 04         [ 2] 4712 	ldw x,basicptr 
      00191F CF 00 06         [ 2] 4713 	ldw data_ptr,x 
      001922 55 00 01 00 08   [ 1] 4714 	mov data_ofs,in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001927 CD 0F 00         [ 4] 4715 	call rest_context
      00192A 1E 05            [ 2] 4716 	ldw x,(XSAVE,sp)
      00192C A6 84            [ 1] 4717 	ld a,#TK_INTGR
      00192E                       4718 	_drop VSIZE 
      00192E 5B 06            [ 2]    1     addw sp,#VSIZE 
      001930 81               [ 4] 4719 	ret 
      001931                       4720 2$: ; end of line reached 
      001931 90 CE 00 06      [ 2] 4721 	ldw y, data_ptr 
      001935 72 5F 00 06      [ 1] 4722 	clr data_ptr
      001939 72 5F 00 07      [ 1] 4723 	clr data_ptr+1   
      00193D 72 5F 00 08      [ 1] 4724 	clr data_ofs 
      001941 72 5F 00 09      [ 1] 4725 	clr data_len 
      001945 CD 18 E0         [ 4] 4726 	call try_next_line 
      001948 20 A8            [ 2] 4727 	jra read01
                                   4728 
                                   4729 
                                   4730 ;---------------------------------
                                   4731 ; BASIC: SPIEN clkdiv, 0|1  
                                   4732 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4733 ; if clkdiv==-1 disable SPI
                                   4734 ; 0|1 -> disable|enable  
                                   4735 ;--------------------------------- 
                           000005  4736 SPI_CS_BIT=5
      00194A                       4737 spi_enable:
      00194A CD 0B 8E         [ 4] 4738 	call arg_list 
      00194D A1 02            [ 1] 4739 	cp a,#2
      00194F 27 03            [ 1] 4740 	jreq 1$
      001951 CC 06 E7         [ 2] 4741 	jp syntax_error 
      001954                       4742 1$: 
      001954 72 12 50 C7      [ 1] 4743 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      001958 85               [ 2] 4744 	popw x  
      001959 5D               [ 2] 4745 	tnzw x 
      00195A 27 21            [ 1] 4746 	jreq spi_disable 
      00195C 85               [ 2] 4747 	popw x 
      00195D A6 08            [ 1] 4748 	ld a,#(1<<SPI_CR1_BR)
      00195F 42               [ 4] 4749 	mul x,a 
      001960 9F               [ 1] 4750 	ld a,xl 
      001961 C7 52 00         [ 1] 4751 	ld SPI_CR1,a 
                                   4752 ; configure ~CS on PE5 (D10 on CN8) as output. 
      001964 72 1A 50 14      [ 1] 4753 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      001968 72 1A 50 16      [ 1] 4754 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4755 ; configure SPI as master mode 0.	
      00196C 72 14 52 00      [ 1] 4756 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4757 ; ~CS line controlled by sofware 	
      001970 72 12 52 01      [ 1] 4758 	bset SPI_CR2,#SPI_CR2_SSM 
      001974 72 10 52 01      [ 1] 4759     bset SPI_CR2,#SPI_CR2_SSI 
                                   4760 ; enable SPI
      001978 72 1C 52 00      [ 1] 4761 	bset SPI_CR1,#SPI_CR1_SPE 	
      00197C 81               [ 4] 4762 	ret 
      00197D                       4763 spi_disable:
      00197D                       4764 	_drop #2; throw first argument.
      00197D 5B 02            [ 2]    1     addw sp,##2 
                                   4765 ; wait spi idle 
      00197F A6 82            [ 1] 4766 1$:	ld a,#0x82 
      001981 C4 52 03         [ 1] 4767 	and a,SPI_SR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001984 A1 02            [ 1] 4768 	cp a,#2 
      001986 26 F7            [ 1] 4769 	jrne 1$
      001988 72 1D 52 00      [ 1] 4770 	bres SPI_CR1,#SPI_CR1_SPE
      00198C 72 13 50 C7      [ 1] 4771 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      001990 72 1B 50 16      [ 1] 4772 	bres PE_DDR,#SPI_CS_BIT 
      001994 81               [ 4] 4773 	ret 
                                   4774 
      001995                       4775 spi_clear_error:
      001995 A6 78            [ 1] 4776 	ld a,#0x78 
      001997 C5 52 03         [ 1] 4777 	bcp a,SPI_SR 
      00199A 27 04            [ 1] 4778 	jreq 1$
      00199C 72 5F 52 03      [ 1] 4779 	clr SPI_SR 
      0019A0 81               [ 4] 4780 1$: ret 
                                   4781 
      0019A1                       4782 spi_send_byte:
      0019A1 88               [ 1] 4783 	push a 
      0019A2 CD 19 95         [ 4] 4784 	call spi_clear_error
      0019A5 84               [ 1] 4785 	pop a 
      0019A6 72 03 52 03 FB   [ 2] 4786 	btjf SPI_SR,#SPI_SR_TXE,.
      0019AB C7 52 04         [ 1] 4787 	ld SPI_DR,a
      0019AE 72 01 52 03 FB   [ 2] 4788 	btjf SPI_SR,#SPI_SR_RXNE,.  
      0019B3 C6 52 04         [ 1] 4789 	ld a,SPI_DR 
      0019B6 81               [ 4] 4790 	ret 
                                   4791 
      0019B7                       4792 spi_rcv_byte:
      0019B7 A6 FF            [ 1] 4793 	ld a,#255
      0019B9 72 01 52 03 E3   [ 2] 4794 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      0019BE C6 52 04         [ 1] 4795 	ld a,SPI_DR 
      0019C1 81               [ 4] 4796 	ret
                                   4797 
                                   4798 ;------------------------------
                                   4799 ; BASIC: SPIWR byte [,byte]
                                   4800 ; write 1 or more byte
                                   4801 ;------------------------------
      0019C2                       4802 spi_write:
      0019C2 CD 0C 8D         [ 4] 4803 	call expression
      0019C5 A1 84            [ 1] 4804 	cp a,#TK_INTGR 
      0019C7 27 03            [ 1] 4805 	jreq 1$
      0019C9 CC 06 E7         [ 2] 4806 	jp syntax_error 
      0019CC                       4807 1$:	
      0019CC 9F               [ 1] 4808 	ld a,xl 
      0019CD CD 19 A1         [ 4] 4809 	call spi_send_byte 
      0019D0 CD 07 D6         [ 4] 4810 	call next_token 
      0019D3 A1 09            [ 1] 4811 	cp a,#TK_COMMA 
      0019D5 26 02            [ 1] 4812 	jrne 2$ 
      0019D7 20 E9            [ 2] 4813 	jra spi_write 
      0019D9 4D               [ 1] 4814 2$:	tnz a 
      0019DA 27 05            [ 1] 4815 	jreq 3$
      0019DC                       4816 	_unget_token  
      0019DC 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019E1 81               [ 4] 4817 3$:	ret 
                                   4818 
                                   4819 
                                   4820 ;-------------------------------
                                   4821 ; BASIC: SPIRD 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4822 ; read one byte from SPI 
                                   4823 ;-------------------------------
      0019E2                       4824 spi_read:
      0019E2 CD 19 B7         [ 4] 4825 	call spi_rcv_byte 
      0019E5 5F               [ 1] 4826 	clrw x 
      0019E6 97               [ 1] 4827 	ld xl,a 
      0019E7 A6 84            [ 1] 4828 	ld a,#TK_INTGR 
      0019E9 81               [ 4] 4829 	ret 
                                   4830 
                                   4831 ;------------------------------
                                   4832 ; BASIC: SPISEL 0|1 
                                   4833 ; set state of ~CS line
                                   4834 ; 0|1 deselect|select  
                                   4835 ;------------------------------
      0019EA                       4836 spi_select:
      0019EA CD 07 D6         [ 4] 4837 	call next_token 
      0019ED A1 84            [ 1] 4838 	cp a,#TK_INTGR 
      0019EF 27 03            [ 1] 4839 	jreq 1$
      0019F1 CC 06 E7         [ 2] 4840 	jp syntax_error 
      0019F4 5D               [ 2] 4841 1$: tnzw x  
      0019F5 27 05            [ 1] 4842 	jreq cs_high 
      0019F7 72 1B 50 14      [ 1] 4843 	bres PE_ODR,#SPI_CS_BIT
      0019FB 81               [ 4] 4844 	ret 
      0019FC                       4845 cs_high: 
      0019FC 72 1A 50 14      [ 1] 4846 	bset PE_ODR,#SPI_CS_BIT
      001A00 81               [ 4] 4847 	ret 
                                   4848 
                                   4849 ;-------------------------------
                                   4850 ; BASIC: PAD 
                                   4851 ; Return pad buffer address.
                                   4852 ;------------------------------
      001A01                       4853 pad_ref:
      001A01 AE 16 E0         [ 2] 4854 	ldw x,#pad 
      001A04 B6 84            [ 1] 4855 	ld a,TK_INTGR
      001A06 81               [ 4] 4856 	ret 
                                   4857 
                                   4858 
                                   4859 ;------------------------------
                                   4860 ;      dictionary 
                                   4861 ; format:
                                   4862 ;   link:   2 bytes 
                                   4863 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4864 ;   cmd_name: 16 byte max 
                                   4865 ;   cmd_index: 2 bytes 
                                   4866 ;------------------------------
                                   4867 	.macro _dict_entry len,name,cmd_idx 
                                   4868 	.word LINK 
                                   4869 	LINK=.
                                   4870 name:
                                   4871 	.byte len 	
                                   4872 	.ascii "name"
                                   4873 	.word cmd_idx 
                                   4874 	.endm 
                                   4875 
                           000000  4876 	LINK=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4877 ; respect alphabetic order for BASIC names from Z-A
                                   4878 ; this sort order is for a cleaner WORDS cmd output. 	
      001A07                       4879 kword_end:
      001A07                       4880 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001A07 00 00                    1 	.word LINK 
                           001A09     2 	LINK=.
      001A09                          3 XOR:
      001A09 43                       4 	.byte 3+F_IFUNC 	
      001A0A 58 4F 52                 5 	.ascii "XOR"
      001A0D 00 BE                    6 	.word XOR_IDX 
      001A0F                       4881 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001A0F 1A 09                    1 	.word LINK 
                           001A11     2 	LINK=.
      001A11                          3 WRITE:
      001A11 05                       4 	.byte 5 	
      001A12 57 52 49 54 45           5 	.ascii "WRITE"
      001A17 00 BC                    6 	.word WRITE_IDX 
      001A19                       4882 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001A19 1A 11                    1 	.word LINK 
                           001A1B     2 	LINK=.
      001A1B                          3 WORDS:
      001A1B 05                       4 	.byte 5 	
      001A1C 57 4F 52 44 53           5 	.ascii "WORDS"
      001A21 00 BA                    6 	.word WORDS_IDX 
      001A23                       4883 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001A23 1A 1B                    1 	.word LINK 
                           001A25     2 	LINK=.
      001A25                          3 WAIT:
      001A25 04                       4 	.byte 4 	
      001A26 57 41 49 54              5 	.ascii "WAIT"
      001A2A 00 B8                    6 	.word WAIT_IDX 
      001A2C                       4884 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001A2C 1A 25                    1 	.word LINK 
                           001A2E     2 	LINK=.
      001A2E                          3 USR:
      001A2E 43                       4 	.byte 3+F_IFUNC 	
      001A2F 55 53 52                 5 	.ascii "USR"
      001A32 00 B6                    6 	.word USR_IDX 
      001A34                       4885 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      001A34 1A 2E                    1 	.word LINK 
                           001A36     2 	LINK=.
      001A36                          3 UNTIL:
      001A36 05                       4 	.byte 5 	
      001A37 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001A3C 00 B4                    6 	.word UNTIL_IDX 
      001A3E                       4886 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001A3E 1A 36                    1 	.word LINK 
                           001A40     2 	LINK=.
      001A40                          3 UFLASH:
      001A40 46                       4 	.byte 6+F_IFUNC 	
      001A41 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001A47 00 B2                    6 	.word UFLASH_IDX 
      001A49                       4887 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001A49 1A 40                    1 	.word LINK 
                           001A4B     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001A4B                          3 UBOUND:
      001A4B 46                       4 	.byte 6+F_IFUNC 	
      001A4C 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001A52 00 B0                    6 	.word UBOUND_IDX 
      001A54                       4888 	_dict_entry,4,TONE,TONE_IDX;tone  
      001A54 1A 4B                    1 	.word LINK 
                           001A56     2 	LINK=.
      001A56                          3 TONE:
      001A56 04                       4 	.byte 4 	
      001A57 54 4F 4E 45              5 	.ascii "TONE"
      001A5B 00 AE                    6 	.word TONE_IDX 
      001A5D                       4889 	_dict_entry,2,TO,TO_IDX;to
      001A5D 1A 56                    1 	.word LINK 
                           001A5F     2 	LINK=.
      001A5F                          3 TO:
      001A5F 02                       4 	.byte 2 	
      001A60 54 4F                    5 	.ascii "TO"
      001A62 00 AC                    6 	.word TO_IDX 
      001A64                       4890 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001A64 1A 5F                    1 	.word LINK 
                           001A66     2 	LINK=.
      001A66                          3 TIMER:
      001A66 05                       4 	.byte 5 	
      001A67 54 49 4D 45 52           5 	.ascii "TIMER"
      001A6C 00 A8                    6 	.word TIMER_IDX 
      001A6E                       4891 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001A6E 1A 66                    1 	.word LINK 
                           001A70     2 	LINK=.
      001A70                          3 TIMEOUT:
      001A70 47                       4 	.byte 7+F_IFUNC 	
      001A71 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001A78 00 AA                    6 	.word TMROUT_IDX 
      001A7A                       4892 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001A7A 1A 70                    1 	.word LINK 
                           001A7C     2 	LINK=.
      001A7C                          3 TICKS:
      001A7C 45                       4 	.byte 5+F_IFUNC 	
      001A7D 54 49 43 4B 53           5 	.ascii "TICKS"
      001A82 00 A6                    6 	.word TICKS_IDX 
      001A84                       4893 	_dict_entry,4,STOP,STOP_IDX;stop 
      001A84 1A 7C                    1 	.word LINK 
                           001A86     2 	LINK=.
      001A86                          3 STOP:
      001A86 04                       4 	.byte 4 	
      001A87 53 54 4F 50              5 	.ascii "STOP"
      001A8B 00 A4                    6 	.word STOP_IDX 
      001A8D                       4894 	_dict_entry,4,STEP,STEP_IDX;step 
      001A8D 1A 86                    1 	.word LINK 
                           001A8F     2 	LINK=.
      001A8F                          3 STEP:
      001A8F 04                       4 	.byte 4 	
      001A90 53 54 45 50              5 	.ascii "STEP"
      001A94 00 A2                    6 	.word STEP_IDX 
      001A96                       4895 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001A96 1A 8F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           001A98     2 	LINK=.
      001A98                          3 SPIWR:
      001A98 05                       4 	.byte 5 	
      001A99 53 50 49 57 52           5 	.ascii "SPIWR"
      001A9E 00 A0                    6 	.word SPIWR_IDX 
      001AA0                       4896 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001AA0 1A 98                    1 	.word LINK 
                           001AA2     2 	LINK=.
      001AA2                          3 SPISEL:
      001AA2 06                       4 	.byte 6 	
      001AA3 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001AA9 00 9E                    6 	.word SPISEL_IDX 
      001AAB                       4897 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001AAB 1A A2                    1 	.word LINK 
                           001AAD     2 	LINK=.
      001AAD                          3 SPIRD:
      001AAD 45                       4 	.byte 5+F_IFUNC 	
      001AAE 53 50 49 52 44           5 	.ascii "SPIRD"
      001AB3 00 9A                    6 	.word SPIRD_IDX 
      001AB5                       4898 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001AB5 1A AD                    1 	.word LINK 
                           001AB7     2 	LINK=.
      001AB7                          3 SPIEN:
      001AB7 05                       4 	.byte 5 	
      001AB8 53 50 49 45 4E           5 	.ascii "SPIEN"
      001ABD 00 9C                    6 	.word SPIEN_IDX 
      001ABF                       4899 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001ABF 1A B7                    1 	.word LINK 
                           001AC1     2 	LINK=.
      001AC1                          3 SLEEP:
      001AC1 05                       4 	.byte 5 	
      001AC2 53 4C 45 45 50           5 	.ascii "SLEEP"
      001AC7 00 98                    6 	.word SLEEP_IDX 
      001AC9                       4900     _dict_entry,4,SHOW,SHOW_IDX;show 
      001AC9 1A C1                    1 	.word LINK 
                           001ACB     2 	LINK=.
      001ACB                          3 SHOW:
      001ACB 04                       4 	.byte 4 	
      001ACC 53 48 4F 57              5 	.ascii "SHOW"
      001AD0 00 94                    6 	.word SHOW_IDX 
      001AD2                       4901 	_dict_entry 3,RUN,RUN_IDX;run
      001AD2 1A CB                    1 	.word LINK 
                           001AD4     2 	LINK=.
      001AD4                          3 RUN:
      001AD4 03                       4 	.byte 3 	
      001AD5 52 55 4E                 5 	.ascii "RUN"
      001AD8 00 92                    6 	.word RUN_IDX 
      001ADA                       4902 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001ADA 1A D4                    1 	.word LINK 
                           001ADC     2 	LINK=.
      001ADC                          3 RSHIFT:
      001ADC 46                       4 	.byte 6+F_IFUNC 	
      001ADD 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001AE3 00 90                    6 	.word RSHIFT_IDX 
      001AE5                       4903 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001AE5 1A DC                    1 	.word LINK 
                           001AE7     2 	LINK=.
      001AE7                          3 RND:
      001AE7 43                       4 	.byte 3+F_IFUNC 	
      001AE8 52 4E 44                 5 	.ascii "RND"
      001AEB 00 8E                    6 	.word RND_IDX 
      001AED                       4904 	_dict_entry,6,RETURN,RET_IDX;return 
      001AED 1A E7                    1 	.word LINK 
                           001AEF     2 	LINK=.
      001AEF                          3 RETURN:
      001AEF 06                       4 	.byte 6 	
      001AF0 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001AF6 00 8C                    6 	.word RET_IDX 
      001AF8                       4905 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001AF8 1A EF                    1 	.word LINK 
                           001AFA     2 	LINK=.
      001AFA                          3 RESTORE:
      001AFA 07                       4 	.byte 7 	
      001AFB 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001B02 00 8A                    6 	.word REST_IDX 
      001B04                       4906 	_dict_entry 6,REMARK,REM_IDX;remark 
      001B04 1A FA                    1 	.word LINK 
                           001B06     2 	LINK=.
      001B06                          3 REMARK:
      001B06 06                       4 	.byte 6 	
      001B07 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001B0D 00 88                    6 	.word REM_IDX 
      001B0F                       4907 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001B0F 1B 06                    1 	.word LINK 
                           001B11     2 	LINK=.
      001B11                          3 REBOOT:
      001B11 06                       4 	.byte 6 	
      001B12 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001B18 00 86                    6 	.word RBT_IDX 
      001B1A                       4908 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001B1A 1B 11                    1 	.word LINK 
                           001B1C     2 	LINK=.
      001B1C                          3 READ:
      001B1C 44                       4 	.byte 4+F_IFUNC 	
      001B1D 52 45 41 44              5 	.ascii "READ"
      001B21 00 84                    6 	.word READ_IDX 
      001B23                       4909 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001B23 1B 1C                    1 	.word LINK 
                           001B25     2 	LINK=.
      001B25                          3 QKEY:
      001B25 44                       4 	.byte 4+F_IFUNC 	
      001B26 51 4B 45 59              5 	.ascii "QKEY"
      001B2A 00 82                    6 	.word QKEY_IDX 
      001B2C                       4910 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001B2C 1B 25                    1 	.word LINK 
                           001B2E     2 	LINK=.
      001B2E                          3 PRTI:
      001B2E 44                       4 	.byte 4+F_IFUNC 	
      001B2F 50 52 54 49              5 	.ascii "PRTI"
      001B33 00 80                    6 	.word PRTI_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001B35                       4911 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001B35 1B 2E                    1 	.word LINK 
                           001B37     2 	LINK=.
      001B37                          3 PRTH:
      001B37 44                       4 	.byte 4+F_IFUNC 	
      001B38 50 52 54 48              5 	.ascii "PRTH"
      001B3C 00 7E                    6 	.word PRTH_IDX 
      001B3E                       4912 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001B3E 1B 37                    1 	.word LINK 
                           001B40     2 	LINK=.
      001B40                          3 PRTG:
      001B40 44                       4 	.byte 4+F_IFUNC 	
      001B41 50 52 54 47              5 	.ascii "PRTG"
      001B45 00 7C                    6 	.word PRTG_IDX 
      001B47                       4913 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001B47 1B 40                    1 	.word LINK 
                           001B49     2 	LINK=.
      001B49                          3 PRTF:
      001B49 44                       4 	.byte 4+F_IFUNC 	
      001B4A 50 52 54 46              5 	.ascii "PRTF"
      001B4E 00 7A                    6 	.word PRTF_IDX 
      001B50                       4914 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001B50 1B 49                    1 	.word LINK 
                           001B52     2 	LINK=.
      001B52                          3 PRTE:
      001B52 44                       4 	.byte 4+F_IFUNC 	
      001B53 50 52 54 45              5 	.ascii "PRTE"
      001B57 00 78                    6 	.word PRTE_IDX 
      001B59                       4915 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      001B59 1B 52                    1 	.word LINK 
                           001B5B     2 	LINK=.
      001B5B                          3 PRTD:
      001B5B 44                       4 	.byte 4+F_IFUNC 	
      001B5C 50 52 54 44              5 	.ascii "PRTD"
      001B60 00 76                    6 	.word PRTD_IDX 
      001B62                       4916 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001B62 1B 5B                    1 	.word LINK 
                           001B64     2 	LINK=.
      001B64                          3 PRTC:
      001B64 44                       4 	.byte 4+F_IFUNC 	
      001B65 50 52 54 43              5 	.ascii "PRTC"
      001B69 00 74                    6 	.word PRTC_IDX 
      001B6B                       4917 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001B6B 1B 64                    1 	.word LINK 
                           001B6D     2 	LINK=.
      001B6D                          3 PRTB:
      001B6D 44                       4 	.byte 4+F_IFUNC 	
      001B6E 50 52 54 42              5 	.ascii "PRTB"
      001B72 00 72                    6 	.word PRTB_IDX 
      001B74                       4918 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001B74 1B 6D                    1 	.word LINK 
                           001B76     2 	LINK=.
      001B76                          3 PRTA:
      001B76 44                       4 	.byte 4+F_IFUNC 	
      001B77 50 52 54 41              5 	.ascii "PRTA"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001B7B 00 70                    6 	.word PRTA_IDX 
      001B7D                       4919 	_dict_entry 5,PRINT,PRT_IDX;print 
      001B7D 1B 76                    1 	.word LINK 
                           001B7F     2 	LINK=.
      001B7F                          3 PRINT:
      001B7F 05                       4 	.byte 5 	
      001B80 50 52 49 4E 54           5 	.ascii "PRINT"
      001B85 00 6E                    6 	.word PRT_IDX 
      001B87                       4920 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001B87 1B 7F                    1 	.word LINK 
                           001B89     2 	LINK=.
      001B89                          3 POUT:
      001B89 44                       4 	.byte 4+F_IFUNC 	
      001B8A 50 4F 55 54              5 	.ascii "POUT"
      001B8E 00 6C                    6 	.word POUT_IDX 
      001B90                       4921 	_dict_entry,4,POKE,POKE_IDX;poke 
      001B90 1B 89                    1 	.word LINK 
                           001B92     2 	LINK=.
      001B92                          3 POKE:
      001B92 04                       4 	.byte 4 	
      001B93 50 4F 4B 45              5 	.ascii "POKE"
      001B97 00 6A                    6 	.word POKE_IDX 
      001B99                       4922 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001B99 1B 92                    1 	.word LINK 
                           001B9B     2 	LINK=.
      001B9B                          3 PMODE:
      001B9B 05                       4 	.byte 5 	
      001B9C 50 4D 4F 44 45           5 	.ascii "PMODE"
      001BA1 00 64                    6 	.word PMODE_IDX 
      001BA3                       4923 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001BA3 1B 9B                    1 	.word LINK 
                           001BA5     2 	LINK=.
      001BA5                          3 PINP:
      001BA5 44                       4 	.byte 4+F_IFUNC 	
      001BA6 50 49 4E 50              5 	.ascii "PINP"
      001BAA 00 68                    6 	.word PINP_IDX 
      001BAC                       4924 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001BAC 1B A5                    1 	.word LINK 
                           001BAE     2 	LINK=.
      001BAE                          3 PEEK:
      001BAE 44                       4 	.byte 4+F_IFUNC 	
      001BAF 50 45 45 4B              5 	.ascii "PEEK"
      001BB3 00 66                    6 	.word PEEK_IDX 
      001BB5                       4925 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001BB5 1B AE                    1 	.word LINK 
                           001BB7     2 	LINK=.
      001BB7                          3 PAUSE:
      001BB7 05                       4 	.byte 5 	
      001BB8 50 41 55 53 45           5 	.ascii "PAUSE"
      001BBD 00 62                    6 	.word PAUSE_IDX 
      001BBF                       4926 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001BBF 1B B7                    1 	.word LINK 
                           001BC1     2 	LINK=.
      001BC1                          3 PAD:
      001BC1 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001BC2 50 41 44                 5 	.ascii "PAD"
      001BC5 00 60                    6 	.word PAD_IDX 
      001BC7                       4927 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      001BC7 1B C1                    1 	.word LINK 
                           001BC9     2 	LINK=.
      001BC9                          3 OR:
      001BC9 42                       4 	.byte 2+F_IFUNC 	
      001BCA 4F 52                    5 	.ascii "OR"
      001BCC 00 5E                    6 	.word OR_IDX 
      001BCE                       4928 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001BCE 1B C9                    1 	.word LINK 
                           001BD0     2 	LINK=.
      001BD0                          3 ODR:
      001BD0 43                       4 	.byte 3+F_IFUNC 	
      001BD1 4F 44 52                 5 	.ascii "ODR"
      001BD4 00 5C                    6 	.word ODR_IDX 
      001BD6                       4929 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001BD6 1B D0                    1 	.word LINK 
                           001BD8     2 	LINK=.
      001BD8                          3 NOT:
      001BD8 43                       4 	.byte 3+F_IFUNC 	
      001BD9 4E 4F 54                 5 	.ascii "NOT"
      001BDC 00 5A                    6 	.word NOT_IDX 
      001BDE                       4930 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001BDE 1B D8                    1 	.word LINK 
                           001BE0     2 	LINK=.
      001BE0                          3 NEXT:
      001BE0 04                       4 	.byte 4 	
      001BE1 4E 45 58 54              5 	.ascii "NEXT"
      001BE5 00 56                    6 	.word NEXT_IDX 
      001BE7                       4931 	_dict_entry,3,NEW,NEW_IDX;new
      001BE7 1B E0                    1 	.word LINK 
                           001BE9     2 	LINK=.
      001BE9                          3 NEW:
      001BE9 03                       4 	.byte 3 	
      001BEA 4E 45 57                 5 	.ascii "NEW"
      001BED 00 58                    6 	.word NEW_IDX 
      001BEF                       4932 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001BEF 1B E9                    1 	.word LINK 
                           001BF1     2 	LINK=.
      001BF1                          3 MULDIV:
      001BF1 46                       4 	.byte 6+F_IFUNC 	
      001BF2 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001BF8 00 54                    6 	.word MULDIV_IDX 
      001BFA                       4933 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001BFA 1B F1                    1 	.word LINK 
                           001BFC     2 	LINK=.
      001BFC                          3 LSHIFT:
      001BFC 46                       4 	.byte 6+F_IFUNC 	
      001BFD 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001C03 00 52                    6 	.word LSHIFT_IDX 
      001C05                       4934 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001C05 1B FC                    1 	.word LINK 
                           001C07     2 	LINK=.
      001C07                          3 LOG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001C07 43                       4 	.byte 3+F_IFUNC 	
      001C08 4C 4F 47                 5 	.ascii "LOG"
      001C0B 00 50                    6 	.word LOG_IDX 
      001C0D                       4935 	_dict_entry 4,LIST,LIST_IDX;list
      001C0D 1C 07                    1 	.word LINK 
                           001C0F     2 	LINK=.
      001C0F                          3 LIST:
      001C0F 04                       4 	.byte 4 	
      001C10 4C 49 53 54              5 	.ascii "LIST"
      001C14 00 4E                    6 	.word LIST_IDX 
      001C16                       4936 	_dict_entry 3,LET,LET_IDX;let 
      001C16 1C 0F                    1 	.word LINK 
                           001C18     2 	LINK=.
      001C18                          3 LET:
      001C18 03                       4 	.byte 3 	
      001C19 4C 45 54                 5 	.ascii "LET"
      001C1C 00 4C                    6 	.word LET_IDX 
      001C1E                       4937 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001C1E 1C 18                    1 	.word LINK 
                           001C20     2 	LINK=.
      001C20                          3 KEY:
      001C20 43                       4 	.byte 3+F_IFUNC 	
      001C21 4B 45 59                 5 	.ascii "KEY"
      001C24 00 4A                    6 	.word KEY_IDX 
      001C26                       4938 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      001C26 1C 20                    1 	.word LINK 
                           001C28     2 	LINK=.
      001C28                          3 IWDGREF:
      001C28 07                       4 	.byte 7 	
      001C29 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001C30 00 48                    6 	.word IWDGREF_IDX 
      001C32                       4939 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001C32 1C 28                    1 	.word LINK 
                           001C34     2 	LINK=.
      001C34                          3 IWDGEN:
      001C34 06                       4 	.byte 6 	
      001C35 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001C3B 00 46                    6 	.word IWDGEN_IDX 
      001C3D                       4940 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001C3D 1C 34                    1 	.word LINK 
                           001C3F     2 	LINK=.
      001C3F                          3 INVERT:
      001C3F 46                       4 	.byte 6+F_IFUNC 	
      001C40 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001C46 00 44                    6 	.word INVERT_IDX 
      001C48                       4941 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001C48 1C 3F                    1 	.word LINK 
                           001C4A     2 	LINK=.
      001C4A                          3 INPUT:
      001C4A 05                       4 	.byte 5 	
      001C4B 49 4E 50 55 54           5 	.ascii "INPUT"
      001C50 00 42                    6 	.word INPUT_IDX 
      001C52                       4942 	_dict_entry,2,IF,IF_IDX;if 
      001C52 1C 4A                    1 	.word LINK 
                           001C54     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001C54                          3 IF:
      001C54 02                       4 	.byte 2 	
      001C55 49 46                    5 	.ascii "IF"
      001C57 00 40                    6 	.word IF_IDX 
      001C59                       4943 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001C59 1C 54                    1 	.word LINK 
                           001C5B     2 	LINK=.
      001C5B                          3 IDR:
      001C5B 43                       4 	.byte 3+F_IFUNC 	
      001C5C 49 44 52                 5 	.ascii "IDR"
      001C5F 00 3E                    6 	.word IDR_IDX 
      001C61                       4944 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001C61 1C 5B                    1 	.word LINK 
                           001C63     2 	LINK=.
      001C63                          3 HEX:
      001C63 03                       4 	.byte 3 	
      001C64 48 45 58                 5 	.ascii "HEX"
      001C67 00 3C                    6 	.word HEX_IDX 
      001C69                       4945 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001C69 1C 63                    1 	.word LINK 
                           001C6B     2 	LINK=.
      001C6B                          3 GPIO:
      001C6B 44                       4 	.byte 4+F_IFUNC 	
      001C6C 47 50 49 4F              5 	.ascii "GPIO"
      001C70 00 3A                    6 	.word GPIO_IDX 
      001C72                       4946 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001C72 1C 6B                    1 	.word LINK 
                           001C74     2 	LINK=.
      001C74                          3 GOTO:
      001C74 04                       4 	.byte 4 	
      001C75 47 4F 54 4F              5 	.ascii "GOTO"
      001C79 00 38                    6 	.word GOTO_IDX 
      001C7B                       4947 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      001C7B 1C 74                    1 	.word LINK 
                           001C7D     2 	LINK=.
      001C7D                          3 GOSUB:
      001C7D 05                       4 	.byte 5 	
      001C7E 47 4F 53 55 42           5 	.ascii "GOSUB"
      001C83 00 36                    6 	.word GOSUB_IDX 
      001C85                       4948 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      001C85 1C 7D                    1 	.word LINK 
                           001C87     2 	LINK=.
      001C87                          3 FREE:
      001C87 44                       4 	.byte 4+F_IFUNC 	
      001C88 46 52 45 45              5 	.ascii "FREE"
      001C8C 00 96                    6 	.word FREE_IDX 
      001C8E                       4949 	_dict_entry,3,FOR,FOR_IDX;for 
      001C8E 1C 87                    1 	.word LINK 
                           001C90     2 	LINK=.
      001C90                          3 FOR:
      001C90 03                       4 	.byte 3 	
      001C91 46 4F 52                 5 	.ascii "FOR"
      001C94 00 34                    6 	.word FOR_IDX 
      001C96                       4950 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      001C96 1C 90                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           001C98     2 	LINK=.
      001C98                          3 FCPU:
      001C98 04                       4 	.byte 4 	
      001C99 46 43 50 55              5 	.ascii "FCPU"
      001C9D 00 32                    6 	.word FCPU_IDX 
      001C9F                       4951 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      001C9F 1C 98                    1 	.word LINK 
                           001CA1     2 	LINK=.
      001CA1                          3 ERASE:
      001CA1 05                       4 	.byte 5 	
      001CA2 45 52 41 53 45           5 	.ascii "ERASE"
      001CA7 00 30                    6 	.word ERASE_IDX 
      001CA9                       4952 	_dict_entry,3,END,END_IDX;cmd_end  
      001CA9 1C A1                    1 	.word LINK 
                           001CAB     2 	LINK=.
      001CAB                          3 END:
      001CAB 03                       4 	.byte 3 	
      001CAC 45 4E 44                 5 	.ascii "END"
      001CAF 00 2E                    6 	.word END_IDX 
      001CB1                       4953 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      001CB1 1C AB                    1 	.word LINK 
                           001CB3     2 	LINK=.
      001CB3                          3 EEPROM:
      001CB3 46                       4 	.byte 6+F_IFUNC 	
      001CB4 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001CBA 00 2C                    6 	.word EEPROM_IDX 
      001CBC                       4954 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      001CBC 1C B3                    1 	.word LINK 
                           001CBE     2 	LINK=.
      001CBE                          3 DWRITE:
      001CBE 06                       4 	.byte 6+F_CMD 	
      001CBF 44 57 52 49 54 45        5 	.ascii "DWRITE"
      001CC5 00 2A                    6 	.word DWRITE_IDX 
      001CC7                       4955 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      001CC7 1C BE                    1 	.word LINK 
                           001CC9     2 	LINK=.
      001CC9                          3 DREAD:
      001CC9 45                       4 	.byte 5+F_IFUNC 	
      001CCA 44 52 45 41 44           5 	.ascii "DREAD"
      001CCF 00 28                    6 	.word DREAD_IDX 
      001CD1                       4956 	_dict_entry,2,DO,DO_IDX;do_loop
      001CD1 1C C9                    1 	.word LINK 
                           001CD3     2 	LINK=.
      001CD3                          3 DO:
      001CD3 02                       4 	.byte 2 	
      001CD4 44 4F                    5 	.ascii "DO"
      001CD6 00 26                    6 	.word DO_IDX 
      001CD8                       4957 	_dict_entry,3,DEC,DEC_IDX;dec_base
      001CD8 1C D3                    1 	.word LINK 
                           001CDA     2 	LINK=.
      001CDA                          3 DEC:
      001CDA 03                       4 	.byte 3 	
      001CDB 44 45 43                 5 	.ascii "DEC"
      001CDE 00 24                    6 	.word DEC_IDX 
      001CE0                       4958 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001CE0 1C DA                    1 	.word LINK 
                           001CE2     2 	LINK=.
      001CE2                          3 DDR:
      001CE2 43                       4 	.byte 3+F_IFUNC 	
      001CE3 44 44 52                 5 	.ascii "DDR"
      001CE6 00 22                    6 	.word DDR_IDX 
      001CE8                       4959 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      001CE8 1C E2                    1 	.word LINK 
                           001CEA     2 	LINK=.
      001CEA                          3 DATALN:
      001CEA 06                       4 	.byte 6 	
      001CEB 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      001CF1 00 20                    6 	.word DATALN_IDX 
      001CF3                       4960 	_dict_entry,4,DATA,DATA_IDX;data  
      001CF3 1C EA                    1 	.word LINK 
                           001CF5     2 	LINK=.
      001CF5                          3 DATA:
      001CF5 04                       4 	.byte 4 	
      001CF6 44 41 54 41              5 	.ascii "DATA"
      001CFA 00 1E                    6 	.word DATA_IDX 
      001CFC                       4961 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      001CFC 1C F5                    1 	.word LINK 
                           001CFE     2 	LINK=.
      001CFE                          3 CRL:
      001CFE 43                       4 	.byte 3+F_IFUNC 	
      001CFF 43 52 4C                 5 	.ascii "CRL"
      001D02 00 1C                    6 	.word CRL_IDX 
      001D04                       4962 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      001D04 1C FE                    1 	.word LINK 
                           001D06     2 	LINK=.
      001D06                          3 CRH:
      001D06 43                       4 	.byte 3+F_IFUNC 	
      001D07 43 52 48                 5 	.ascii "CRH"
      001D0A 00 1A                    6 	.word CRH_IDX 
      001D0C                       4963 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      001D0C 1D 06                    1 	.word LINK 
                           001D0E     2 	LINK=.
      001D0E                          3 CHAR:
      001D0E 84                       4 	.byte 4+F_CFUNC 	
      001D0F 43 48 41 52              5 	.ascii "CHAR"
      001D13 00 18                    6 	.word CHAR_IDX 
      001D15                       4964 	_dict_entry,3,BYE,BYE_IDX;bye 
      001D15 1D 0E                    1 	.word LINK 
                           001D17     2 	LINK=.
      001D17                          3 BYE:
      001D17 03                       4 	.byte 3 	
      001D18 42 59 45                 5 	.ascii "BYE"
      001D1B 00 16                    6 	.word BYE_IDX 
      001D1D                       4965 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      001D1D 1D 17                    1 	.word LINK 
                           001D1F     2 	LINK=.
      001D1F                          3 BTOGL:
      001D1F 05                       4 	.byte 5 	
      001D20 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001D25 00 14                    6 	.word BTOGL_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001D27                       4966 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      001D27 1D 1F                    1 	.word LINK 
                           001D29     2 	LINK=.
      001D29                          3 BTEST:
      001D29 45                       4 	.byte 5+F_IFUNC 	
      001D2A 42 54 45 53 54           5 	.ascii "BTEST"
      001D2F 00 12                    6 	.word BTEST_IDX 
      001D31                       4967 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      001D31 1D 29                    1 	.word LINK 
                           001D33     2 	LINK=.
      001D33                          3 BSET:
      001D33 04                       4 	.byte 4 	
      001D34 42 53 45 54              5 	.ascii "BSET"
      001D38 00 10                    6 	.word BSET_IDX 
      001D3A                       4968 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      001D3A 1D 33                    1 	.word LINK 
                           001D3C     2 	LINK=.
      001D3C                          3 BRES:
      001D3C 04                       4 	.byte 4 	
      001D3D 42 52 45 53              5 	.ascii "BRES"
      001D41 00 0E                    6 	.word BRES_IDX 
      001D43                       4969 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      001D43 1D 3C                    1 	.word LINK 
                           001D45     2 	LINK=.
      001D45                          3 BIT:
      001D45 43                       4 	.byte 3+F_IFUNC 	
      001D46 42 49 54                 5 	.ascii "BIT"
      001D49 00 0C                    6 	.word BIT_IDX 
      001D4B                       4970 	_dict_entry,3,AWU,AWU_IDX;awu 
      001D4B 1D 45                    1 	.word LINK 
                           001D4D     2 	LINK=.
      001D4D                          3 AWU:
      001D4D 03                       4 	.byte 3 	
      001D4E 41 57 55                 5 	.ascii "AWU"
      001D51 00 0A                    6 	.word AWU_IDX 
      001D53                       4971 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      001D53 1D 4D                    1 	.word LINK 
                           001D55     2 	LINK=.
      001D55                          3 ASC:
      001D55 43                       4 	.byte 3+F_IFUNC 	
      001D56 41 53 43                 5 	.ascii "ASC"
      001D59 00 08                    6 	.word ASC_IDX 
      001D5B                       4972 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      001D5B 1D 55                    1 	.word LINK 
                           001D5D     2 	LINK=.
      001D5D                          3 AND:
      001D5D 43                       4 	.byte 3+F_IFUNC 	
      001D5E 41 4E 44                 5 	.ascii "AND"
      001D61 00 06                    6 	.word AND_IDX 
      001D63                       4973 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      001D63 1D 5D                    1 	.word LINK 
                           001D65     2 	LINK=.
      001D65                          3 ADCREAD:
      001D65 47                       4 	.byte 7+F_IFUNC 	
      001D66 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001D6D 00 04                    6 	.word ADCREAD_IDX 
      001D6F                       4974 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      001D6F 1D 65                    1 	.word LINK 
                           001D71     2 	LINK=.
      001D71                          3 ADCON:
      001D71 05                       4 	.byte 5 	
      001D72 41 44 43 4F 4E           5 	.ascii "ADCON"
      001D77 00 02                    6 	.word ADCON_IDX 
      001D79                       4975 kword_dict::
      001D79                       4976 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      001D79 1D 71                    1 	.word LINK 
                           001D7B     2 	LINK=.
      001D7B                          3 ABS:
      001D7B 43                       4 	.byte 3+F_IFUNC 	
      001D7C 41 42 53                 5 	.ascii "ABS"
      001D7F 00 00                    6 	.word ABS_IDX 
                                   4977 
                                   4978 ;comands and fonctions address table 	
      001D81                       4979 code_addr::
      001D81 15 39 12 2D 12 69 15  4980 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             4D 14 2A 14 EA 17 9B
      001D8F 0F BB 0F AB 0F DC 0F  4981 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             CC 14 C3 14 18 18 55
      001D9D 18 4F 18 6D 18 73 18  4982 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             49 0D 74 17 C4 12 9D
             12 CD
      001DAD 18 67 11 D9 13 B2 15  4983 	.word const_eeprom_base,cmd_end,erase,fcpu,for,gosub,goto,gpio ; 24..31 
             C7 10 37 11 42 11 27
             14 66
      001DBD 0D 6F 18 43 10 23 0F  4984 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             10 17 B5 17 45 17 7B
             14 51
      001DCD 0D C3 0D EE 17 80 15  4985 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             95 0B 13 10 B7 13 54
      001DDB 17 38 18 3D 15 65 1A  4986 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             01 14 D7 15 D3 10 12
             18 61
      001DEB 10 03 18 5B 0E 8A 18  4987 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             07 18 0D 18 13 18 19
             18 1F
      001DFB 18 25 18 2B 18 31 18  4988 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             37 14 59 18 F0 04 6F
             0F 80
      001E0B 18 A1 11 62 16 4F 15  4989 	.word restore,return, random,rshift,run,show,free ; 72..79
             AE 11 80 0D 2E 0D 79
      001E19 14 CC 19 E2 19 4A 19  4990 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             EA 19 C2 10 90 13 08
             15 33
      001E29 17 1C 17 2B 10 60 11  4991 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             E9 0D A1 14 90 17 D9
             14 A6
      001E39 0F 86 16 B6 13 E1 15  4992 	.word wait,words,write,bit_xor ; 96..99
             7D
      001E41 00 00                 4993 	.word 0 
                                   4994 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E80                       4995 	.bndry 128 ; align on FLASH block.
                                   4996 ; space for user application  
      001E80                       4997 app_space:
      001E80 42 43                 4998 app_sign: .ascii "BC"  ; signature 
      001E82 00 29                 4999 app_size:  .word 41
      001E84                       5000 app: ;  BASIC byte code for blink.bas application.
                                   5001 ; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
      001E84 00 0A 29 80 00 26 80  5002 .byte 0,10,41,128,0,38,128,0,20,132,80,10,9,132,0,32,128,0,98,132
             00 14 84 50 0A 09 84
             00 20 80 00 62 84
      001E98 00 FA 80 00 B4 81 00  5003 .byte 0,250,128,0,180,129,0,130,128,0,14,132,80,10,9,132,0,32,128,0,46,0
             82 80 00 0E 84 50 0A
             09 84 00 20 80 00 2E
             00
                                   5004 
                                   5005 
                                   5006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001D7B R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      001D71 R
    ADCON_ID=  000002     |   5 ADCREAD    001D65 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        001D5D R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |   5 ASC        001D55 R   |     ASC_IDX =  000008 
    AUTORUN_=  004000     |   5 AWU        001D4D R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
  5 BIT        001D45 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000C     |     BLOCK   =  000001     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000B 
  5 BRES       001D3C R   |     BRES_IDX=  00000E     |     BS      =  000008 
    BSAVE   =  000001     |   5 BSET       001D33 R   |     BSET_IDX=  000010 
    BSIZE   =  000005     |   5 BTEST      001D29 R   |     BTEST_ID=  000012 
  5 BTOGL      001D1F R   |     BTOGL_ID=  000014     |     BTW     =  000001 
  5 BYE        001D17 R   |     BYE_IDX =  000016     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       001D0E R
    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        001D06 R   |     CRH_IDX =  00001A     |   5 CRL        001CFE R
    CRL_IDX =  00001C     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   5 DATA       001CF5 R
  5 DATALN     001CEA R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   5 DDR        001CE2 R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   5 DEC        001CDA R   |     DEC_IDX =  000024 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVDNDHI=  00000B 
    DIVDNDLO=  00000D     |     DIVISOR =  000001     |     DIVISR  =  000007 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   5 DO         001CD3 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000026     |   5 DREAD      001CC9 R
    DREAD_ID=  000028     |   5 DWRITE     001CBE R   |     DWRITE_I=  00002A 
  5 EEPROM     001CB3 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002C     |     EEPROM_S=  000800     |     EM      =  000019 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

  5 END        001CAB R   |     END_IDX =  00002E     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   5 ERASE      001CA1 R
    ERASE_ID=  000030     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   5 FCPU       001C98 R   |     FCPU_IDX=  000032 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   5 FOR        001C90 R   |     FOR_IDX =  000034 
  5 FREE       001C87 R   |     FREE_IDX=  000096     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      001C7D R
    GOSUB_ID=  000036     |   5 GOTO       001C74 R   |     GOTO_IDX=  000038 
  5 GPIO       001C6B R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_IDX=  00003A     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   5 HEX        001C63 R   |     HEX_IDX =  00003C 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        001C5B R   |     IDR_IDX =  00003E 
  5 IF         001C54 R   |     IF_IDX  =  000040     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      001C4A R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000042     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  5 INVERT     001C3F R   |     INVERT_I=  000044     |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     001C34 R
    IWDGEN_I=  000046     |   5 IWDGREF    001C28 R   |     IWDGREF_=  000048 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        001C20 R   |     KEY_IDX =  00004A     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000002     |   5 LET        001C18 R
    LET_IDX =  00004C     |     LF      =  00000A     |     LIMIT   =  000005 
  5 LINK    =  001D7B R   |   5 LIST       001C0F R   |     LIST_IDX=  00004E 
    LLEN    =  000002     |     LN_PTR  =  000005     |   5 LOG        001C07 R
    LOG_IDX =  000050     |   5 LSHIFT     001BFC R   |     LSHIFT_I=  000052 
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000002     |   5 MULDIV     001BF1 R
    MULDIV_I=  000054     |     MULOP   =  000003     |     N1      =  000001 
    N2      =  000003     |     NAFR    =  004804     |     NAK     =  000015 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        001BE9 R
    NEW_IDX =  000058     |   5 NEXT       001BE0 R   |     NEXT_IDX=  000056 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   5 NOT        001BD8 R
    NOT_IDX =  00005A     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R   |   5 ODR        001BD0 R
    ODR_IDX =  00005C     |     ONOFF   =  000003     |     OP      =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   5 OR         001BC9 R   |     OR_IDX  =  00005E 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |   5 PAD        001BC1 R
    PAD_IDX =  000060     |     PAD_SIZE=  000080     |   5 PAUSE      001BB7 R
    PAUSE_ID=  000062     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       001BAE R
    PEEK_IDX=  000066     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       001BA5 R   |     PINP_IDX=  000068     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      001B9B R   |     PMODE_ID=  000064     |   5 POKE       001B92 R
    POKE_IDX=  00006A     |     PORT    =  000003     |   5 POUT       001B89 R
    POUT_IDX=  00006C     |   5 PRINT      001B7F R   |   5 PRTA       001B76 R
    PRTA_IDX=  000070     |   5 PRTB       001B6D R   |     PRTB_IDX=  000072 
  5 PRTC       001B64 R   |     PRTC_IDX=  000074     |   5 PRTD       001B5B R
    PRTD_IDX=  000076     |   5 PRTE       001B52 R   |     PRTE_IDX=  000078 
  5 PRTF       001B49 R   |     PRTF_IDX=  00007A     |   5 PRTG       001B40 R
    PRTG_IDX=  00007C     |   5 PRTH       001B37 R   |     PRTH_IDX=  00007E 
  5 PRTI       001B2E R   |     PRTI_IDX=  000080     |     PRT_IDX =  00006E 
    PSTR    =  000003     |   5 QKEY       001B25 R   |     QKEY_IDX=  000082 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
    RBT_IDX =  000086     |   5 READ       001B1C R   |     READ_IDX=  000084 
  5 REBOOT     001B11 R   |     REG     =  000001     |     REGA    =  000001 
    REGX    =  000003     |     REGY    =  000005     |     RELOP   =  000003 
  5 REMARK     001B06 R   |     REM_IDX =  000088     |   5 RESTORE    001AFA R
    REST_IDX=  00008A     |     RETL1   =  000001     |   5 RETURN     001AEF R
    RET_ADDR=  000003     |     RET_IDX =  00008C     |     RET_INW =  000005 
  5 RND        001AE7 R   |     RND_IDX =  00008E     |     ROP     =  004800 
    RS      =  00001E     |   5 RSHIFT     001ADC R   |     RSHIFT_I=  000090 
    RST_SR  =  0050B3     |   5 RUN        001AD4 R   |     RUN_IDX =  000092 
    RX_QUEUE=  000008     |     SAVEB   =  000002     |     SDIVSR  =  000005 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       001ACB R   |     SHOW_IDX=  000094     |     SI      =  00000F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    SIGN    =  000001     |     SKIP    =  000005     |   5 SLEEP      001AC1 R
    SLEEP_ID=  000098     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   5 SPIEN      001AB7 R   |     SPIEN_ID=  00009C 
  5 SPIRD      001AAD R   |     SPIRD_ID=  00009A     |   5 SPISEL     001AA2 R
    SPISEL_I=  00009E     |   5 SPIWR      001A98 R   |     SPIWR_ID=  0000A0 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SQUOT   =  000006 
    STACK_EM=  0017FF     |     STACK_SI=  0000A0     |   5 STEP       001A8F R
    STEP_IDX=  0000A2     |   5 STOP       001A86 R   |     STOP_IDX=  0000A4 
    STX     =  000002     |     SUB     =  00001A     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      001A7C R   |     TICKS_ID=  0000A6 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   5 TIMEOUT    001A70 R   |   5 TIMER      001A66 R
    TIMER_ID=  0000A8     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000006     |     TK_CFUNC=  000082     |     TK_CHAR =  000003 
    TK_CMD  =  000080     |     TK_COLON=  00000B     |     TK_COMMA=  000009 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LE   =  000036     |     TK_LPARE=  000007     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000008     |     TK_SHARP=  00000A 
    TK_VAR  =  000085     |     TMROUT_I=  0000AA     |   5 TO         001A5F R
  5 TONE       001A56 R   |     TONE_IDX=  0000AE     |     TO_IDX  =  0000AC 
  5 Timer4Up   000040 R   |     U1      =  000001     |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     001A4B R   |     UBOUND_I=  0000B0     |   5 UBTN_Han   000079 R
  5 UFLASH     001A40 R   |     UFLASH_I=  0000B2     |   5 UNTIL      001A36 R
    UNTIL_ID=  0000B4     |     US      =  00001F     |   5 USER_ABO   00008C R
  5 USR        001A2E R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000B6     |   5 Uart1RxH   00000F R
  5 UserButt   000055 R   |     VAR_ADDR=  000006     |     VSIZ    =  000002 
    VSIZE   =  000006     |     VT      =  00000B     |   5 WAIT       001A25 R
    WAIT_IDX=  0000B8     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WLEN    =  000001     |   5 WORDS      001A1B R
    WORDS_ID=  0000BA     |   5 WRITE      001A11 R   |     WRITE_ID=  0000BC 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        001A09 R
    XOR_IDX =  0000BE     |     XREG    =  000003     |     XSAVE   =  000005 
    YSAVE   =  000004     |   5 abs        001539 R   |   1 acc16      00000C GR
  1 acc24      00000B GR  |   1 acc8       00000D GR  |   5 analog_r   001269 R
  5 app        001E84 R   |   5 app_sign   001E80 R   |   5 app_size   001E82 R
  5 app_spac   001E80 R   |   5 arduino_   00162F R   |   5 arg_list   000B8E R
  1 array_si   00001E R   |   5 ascii      00142A R   |   5 atoi24     000948 GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

  5 atoi_exi   0009AE R   |   5 awu        0014EA R   |   5 awu02      0014F4 R
  5 bad_port   00148B R   |   1 base       00000A GR  |   1 basicptr   000004 GR
  5 beep       0011F6 R   |   5 beep_1kh   0011E0 GR  |   5 bit_and    00154D R
  5 bit_or     001565 R   |   5 bit_rese   000FBB R   |   5 bit_set    000FAB R
  5 bit_test   000FDC R   |   5 bit_togg   000FCC R   |   5 bit_xor    00157D R
  5 bitmask    00179B R   |   5 block_er   0001AD R   |   5 break_po   001336 R
  5 bye        0014C3 R   |   5 char       001418 R   |   5 clear_ba   000551 R
  5 clear_va   0003F8 R   |   5 clock_in   0000A7 R   |   5 cmd_end    0011D9 R
  5 cmd_line   00076E R   |   5 code_add   001D81 GR  |   5 cold_sta   00046F R
  5 comp_msg   0006C6 R   |     compile    ****** GX  |   5 const_cr   00184F R
  5 const_cr   001855 R   |   5 const_dd   001849 R   |   5 const_ee   001867 R
  5 const_id   001843 R   |   5 const_in   001861 R   |   5 const_od   00183D R
  5 const_ou   00185B R   |   5 const_po   001807 R   |   5 const_po   00180D R
  5 const_po   001813 R   |   5 const_po   001819 R   |   5 const_po   00181F R
  5 const_po   001825 R   |   5 const_po   00182B R   |   5 const_po   001831 R
  5 const_po   001837 R   |   1 count      000003 GR  |   5 cp_loop    000B3D R
  5 cs_high    0019FC R   |   5 cstk_pro   000D48 R   |   5 data       00186D R
  1 data_len   000009 R   |   5 data_lin   001873 R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   0018B4 R   |   5 dbl_sign   000A97 R
  5 dec_base   000D74 R   |     decompil   ****** GX  |   5 digital_   00129D R
  5 digital_   0012CD R   |   5 div32_16   000AA1 R   |   5 divide     000AF8 R
  5 divu24_8   0008B7 R   |   5 dneg       000A8C R   |   5 do_loop    0017C4 R
  5 do_progr   0001A0 R   |   5 enable_i   001745 R   |   5 erase      0013B2 R
  5 erase_fl   0001CC R   |   5 err_bad_   000631 R   |   5 err_buf_   0006A7 R
  5 err_cmd_   0005F5 R   |   5 err_div0   0005BA R   |   5 err_dupl   00060F R
  5 err_math   0005A1 R   |   5 err_mem_   000586 R   |   5 err_msg    000566 R
  5 err_no_a   00063D R   |   5 err_no_d   000670 R   |   5 err_no_f   000694 R
  5 err_no_l   0005C9 R   |   5 err_no_p   000680 R   |   5 err_not_   000620 R
  5 err_run_   0005DF R   |   5 err_synt   000593 R   |   5 expect     000B7C R
  5 expr_exi   000CD3 R   |   5 expressi   000C8D R   |   5 factor     000BDE R
  1 farptr     000016 R   |   5 fcpu       0015C7 R   |   5 first_li   000E17 R
  1 flags      000020 GR  |   5 for        001037 R   |   5 free       000D79 R
  1 free_ram   000064 R   |   5 func_arg   000B89 R   |   5 func_not   001738 R
  5 get_arra   000BB9 R   |   5 get_targ   001101 R   |   5 get_tick   001533 R
    get_toke   ****** GX  |   5 getc       0002C2 GR  |   5 gosub      001142 R
  5 goto       001127 R   |   5 gpio       001466 R   |   5 hex_base   000D6F R
  5 hex_dump   00034F R   |   5 if         001023 R   |   1 in         000001 GR
  1 in.saved   000002 GR  |   1 in.w       000000 GR  |   5 incr_far   001379 R
  5 input_ex   000F7D R   |   5 input_lo   000F12 R   |   5 input_va   000F10 R
  5 interp_l   0007AF R   |   5 interpre   00078A R   |   5 invert     0017B5 R
  5 is_alnum   000420 GR  |   5 is_alpha   000406 GR  |   5 is_digit   000417 GR
  5 itoa       00084D GR  |   5 itoa_loo   000871 R   |   5 jp_to_ta   001135 R
  5 key        001451 R   |   5 kword_di   001D79 GR  |   5 kword_en   001A07 R
  5 leading_   00178B R   |   5 let        000DC3 GR  |   5 let_arra   000DD1 R
  5 let_var    000DD4 R   |   5 lines_sk   000E1A R   |   5 list       000DEE R
  5 list_exi   000E5C R   |   5 list_loo   000E3A R   |   5 log2       001780 R
  5 logical_   00172E R   |   5 long_div   000A74 R   |   5 loop_bac   0010E4 R
  1 loop_dep   00001D R   |   5 loop_don   0010F9 R   |   5 lshift     001595 R
  5 modulo     000B0E R   |   5 move       0003B6 GR  |   5 move_dow   0003D4 R
  5 move_era   000132 R   |   5 move_exi   0003F5 R   |   5 move_loo   0003D9 R
  5 move_prg   000166 R   |   5 move_up    0003C6 R   |   5 muldiv     000B13 R
  5 multiply   000A3F R   |   5 mulu24_8   0008DF R   |   5 neg_acc2   000919 R
  5 new        001354 R   |   5 next       0010B7 R   |   5 next_lin   000792 R
  5 next_tok   0007D6 GR  |   5 no_match   000B4F R   |   3 pad        0016E0 GR
  5 pad_ref    001A01 R   |   5 pause      0014D7 R   |   5 pause02    0014E1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

  5 peek       001012 R   |   5 pin_mode   0015D3 R   |   5 poke       001003 R
  5 power_ad   00122D R   |   5 print      000E8A R   |   5 print_ex   000EE4 R
  5 print_in   000831 R   |   5 printxy    0009B2 R   |   5 program_   000146 R
  5 program_   000166 R   |   5 prt_basi   000E6A R   |   5 prt_loop   000E8E R
  5 prt_tok    0002E1 R   |   5 prti24     000841 R   |   1 ptr16      000017 GR
  1 ptr8       000018 R   |   5 putc       0002B2 GR  |     puts       ****** GX
  5 qgetc      0002BB GR  |   5 qkey       001459 GR  |   5 random     00164F R
  5 read       0018F0 R   |   5 read01     0018F2 R   |     readln     ****** GX
  5 refresh_   00177B R   |   5 rel_exit   000D2B R   |   5 relation   000CD6 R
  5 remark     000F80 GR  |   5 reset_co   000E8C R   |   5 rest_con   000F00 R
  5 restore    0018A1 R   |   5 return     001162 R   |     right_al   ****** GX
  5 row_alig   00135E R   |   5 row_eras   00010B R   |   5 row_eras   000132 R
  5 row_loop   000332 R   |   5 rshift     0015AE R   |   5 rt_msg     0006B4 R
  5 run        001180 R   |   5 run_it     0011B2 R   |   1 rx1_head   00002A R
  1 rx1_queu   000022 R   |   1 rx1_tail   00002B R   |   5 save_con   000EF0 R
  5 scan_blo   001387 R   |   5 search_d   000B2F GR  |   5 search_e   000B79 R
    search_l   ****** GX  |   5 search_n   000B33 R   |   1 seedx      000012 R
  1 seedy      000014 R   |   5 select_p   00161F R   |   5 set_time   00171C R
  5 show       000D2E R   |   5 show_row   000320 R   |   5 sleep      0014CC R
  5 software   000429 R   |     spaces     ****** GX  |   5 spi_clea   001995 R
  5 spi_disa   00197D R   |   5 spi_enab   00194A R   |   5 spi_rcv_   0019B7 R
  5 spi_read   0019E2 R   |   5 spi_sele   0019EA R   |   5 spi_send   0019A1 R
  5 spi_writ   0019C2 R   |   3 stack_fu   001760 GR  |   3 stack_un   001800 R
  5 step       001090 R   |   5 stop       001308 R   |   5 store_lo   0010A4 R
  5 str_matc   000B5C R   |   5 strcmp     000397 R   |   5 strcpy     0003A8 GR
  5 strlen     00038C GR  |   5 syntax_e   0006E7 GR  |   1 tab_widt   000021 GR
  5 tb_error   0006E9 GR  |   5 term       000C3B R   |   5 term01     000C43 R
  5 term_exi   000C8A R   |   3 tib        001690 GR  |   1 ticks      00000E R
  5 timeout    00172B R   |   1 timer      000010 GR  |   5 timer2_i   0000BD R
  5 timer4_i   0000CA R   |   5 tk_id      0006D7 R   |   5 to         001060 R
  5 to_eepro   000189 R   |   5 to_flash   00019D R   |   5 to_upper   00093C GR
  5 token_ms   000318 R   |   5 tone       0011E9 R   |   5 try_next   0018E0 R
  1 txtbgn     000019 GR  |   1 txtend     00001B GR  |   5 uart1_ge   0002C2 GR
  5 uart1_in   00026F R   |   5 uart1_pu   0002B2 GR  |   5 uart1_qg   0002BB GR
  5 uart1_se   00027F R   |   5 ubound     000DA1 R   |   5 udiv32_1   000A62 R
  5 uflash     001490 R   |   5 umstar     000A05 R   |   5 unlock_e   0000DF R
  5 unlock_f   0000F5 R   |   5 until      0017D9 R   |   5 user_int   000068 R
  5 usr        0014A6 R   |     var_name   ****** GX  |   1 vars       000030 GR
  5 wait       000F86 R   |   5 warm_ini   000533 R   |   5 warm_sta   00076B R
  5 words      0016B6 R   |   5 words_co   001706 R   |   5 write      0013E1 R
  5 write_bl   00024C R   |   5 write_by   0001D7 R   |   5 write_ee   000213 R
  5 write_ex   000247 R   |   5 write_fl   0001FD R   |   5 write_ro   00017A R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     64   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   1EAE   flags    0

