ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     35     .list 
                                     36 
                                     37 ;_dbg 
                                     38 
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
                           0000A0    43 	STACK_SIZE=160
                           0017FF    44 	STACK_EMPTY=RAM_SIZE-1  
                           000000    45 	FRUN=0 ; flags run code in variable flags
                           000001    46 	FTRAP=1 ; inside trap handler 
                           000002    47 	FLOOP=2 ; FOR loop in preparation 
                           000003    48 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    49 	FBREAK=4 ; break point flag 
                           000005    50 	FCOMP=5  ; compiling flags 
                           000006    51 	FAUTORUN=6; auto start program running 
                                     52 
                           004000    53 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     54 
                           000006    55     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     56 
                           007FFF    57 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     58 
                           000008    59 	RX_QUEUE_SIZE=8 
                                     60 
                                     61 
      000000                         62 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         63 in:    .blkb 1 ; low byte of in.w 
      000002                         64 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         65 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         66 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         67 data_ptr:  .blkw 1  ; point to DATA address
      000008                         68 data_ofs:  .blkb 1  ; index to next data item 
      000009                         69 data_len:  .blkb 1  ; length of data line 
      00000A                         70 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         71 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      00000C                         72 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         73 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         74 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         75 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         76 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         77 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         78 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         79 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         80 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         81 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         82 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         83 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         84 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         85 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         86 flags: .blkb 1 ; various boolean flags
      000024                         87 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         88 rx_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         89 rx_head:  .blkb 1 ; rx_queue head pointer
      00002E                         90 rx_tail:   .blkb 1 ; rx_queue tail pointer  
      00002F                         91 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     92 ; keep 'free_ram' as last variable 
      000063                         93 free_ram: ; from here RAM free for BASIC text 
                                     94 
                                     95 ;;-----------------------------------
                                     96     .area SSEG (ABS)
                                     97 ;; working buffers and stack at end of RAM. 	
                                     98 ;;-----------------------------------
      001690                         99     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                        100 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                        101 pad: .ds PAD_SIZE             ; working buffer
      001760                        102 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        103 stack_unf: ; stack underflow ; control_stack bottom 
                                    104 
                                    105 ;;--------------------------------------
                                    106     .area HOME 
                                    107 ;; interrupt vector table at 0x8000
                                    108 ;;--------------------------------------
      000000 82 00 05 D6            109     int cold_start			; RESET vector 
                           000000   110 .if DEBUG
                                    111 	int TrapHandler 		;TRAP  software interrupt
                           000001   112 .else
      000004 82 00 00 00            113 	int NonHandledInterrupt ;TRAP  software interrupt
                                    114 .endif
      000008 82 00 00 00            115 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            116 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            117 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            118 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            119 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            120 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            121 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 65            122 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            123 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            124 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            125 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            126 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000038 82 00 00 00            127 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            128 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            129 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            130 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            131 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            132 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            133 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            134 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            135 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            136 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            137 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 4F            138 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            139 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            140 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            141 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            142 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            143 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            144 	int NonHandledInterrupt ;int29  not used
                                    145 
                                    146 ;---------------------------------------
                                    147     .area CODE
                                    148 ;---------------------------------------
                           000000   149 .if DEBUG
                                    150 .asciz "STM8_TBI" ; I like to put module name here.
                                    151 .endif 
                                    152 
                                    153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    154 ; non handled interrupt 
                                    155 ; reset MCU
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        157 NonHandledInterrupt:
      000000 71                     158     .byte 0x71  ; invalid opcode reinitialize MCU
                                    159 
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    161 ; auto wakeup from halt
                                    162 ; at iret, program continue 
                                    163 ; after hatl instruction
                                    164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        165 AWUHandler:
      000001 72 19 50 F0      [ 1]  166 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  167 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  168 	clr AWU_TBR 
      00000E 80               [11]  169 	iret
                                    170 
                                    171 ;--------------------------
                                    172 ; UART1 receive character
                                    173 ; CTRL-C (ASCII 3)
                                    174 ; cancel program execution
                                    175 ; and fall back to command line
                                    176 ;--------------------------
      00000F                        177 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  178 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  179 	ld a,UART1_DR 
      000017 A1 03            [ 1]  180 	cp a,#CTRL_C 
      000019 26 0B            [ 1]  181 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      00001B 72 5F 00 2D      [ 1]  182 	clr rx_head 
      00001F 72 5F 00 2E      [ 1]  183 	clr rx_tail 
      000023 CC 00 78         [ 2]  184 	jp user_interrupted
      000026                        185 1$:
      000026 A1 18            [ 1]  186 	cp a,#CAN ; CTRL_X 
      000028 26 03            [ 1]  187 	jrne 2$
      00002A CC 05 D6         [ 2]  188 	jp cold_start 	
      00002D                        189 2$: 
      00002D A1 1A            [ 1]  190 	cp a,#CTRL_Z
      00002F 26 06            [ 1]  191 	jrne 3$
      000031 CD 06 98         [ 4]  192 	call cancel_autorun 
      000034 CC 05 D6         [ 2]  193 	jp cold_start 
      000037 AE 00 25         [ 2]  194 3$:	ldw x,#rx_queue  
      00003A 88               [ 1]  195 	push a 
      00003B 9F               [ 1]  196 	ld a,xl 
      00003C CB 00 2E         [ 1]  197 	add a,rx_tail 
      00003F 97               [ 1]  198 	ld xl,a
      000040 84               [ 1]  199 	pop a  
      000041 F7               [ 1]  200 	ld (x),a
      000042 72 5C 00 2E      [ 1]  201 	inc rx_tail 
      000046 A6 07            [ 1]  202 	ld a,#RX_QUEUE_SIZE-1
      000048 C4 00 2E         [ 1]  203 	and a,rx_tail 
      00004B C7 00 2E         [ 1]  204 	ld rx_tail,a  	
      00004E 80               [11]  205 	iret 
                                    206 
                                    207 ;------------------------------------
                                    208 ; software interrupt handler  
                                    209 ;------------------------------------
                           000000   210 .if DEBUG 
                                    211 TrapHandler:
                                    212 	bset flags,#FTRAP 
                                    213 	call print_registers
                                    214 	call cmd_itf
                                    215 	bres flags,#FTRAP 	
                                    216 	iret
                                    217 .endif 
                                    218 
                                    219 ;------------------------------
                                    220 ; TIMER 4 is used to maintain 
                                    221 ; a milliseconds 'ticks' counter
                                    222 ; and decrement 'timer' varaiable
                                    223 ;--------------------------------
      00004F                        224 Timer4UpdateHandler:
      00004F 72 5F 53 42      [ 1]  225 	clr TIM4_SR 
      000053 CE 00 0E         [ 2]  226 	ldw x,ticks
      000056 5C               [ 2]  227 	incw x
      000057 CF 00 0E         [ 2]  228 	ldw ticks,x 
      00005A CE 00 10         [ 2]  229 	ldw x,timer
      00005D 5D               [ 2]  230 	tnzw x 
      00005E 27 04            [ 1]  231 	jreq 1$
      000060 5A               [ 2]  232 	decw x 
      000061 CF 00 10         [ 2]  233 	ldw timer,x 
      000064                        234 1$:	
      000064 80               [11]  235 	iret 
                                    236 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    237 
                                    238 ;------------------------------------
                                    239 ; Triggered by pressing USER UserButton 
                                    240 ; on NUCLEO card.
                                    241 ; This is used to abort a progam lock 
                                    242 ; in infinite loop. 
                                    243 ;------------------------------------
      000065                        244 UserButtonHandler:
                                    245 ; wait button release
      000065 5F               [ 1]  246 	clrw x
      000066 5A               [ 2]  247 1$: decw x 
      000067 26 FD            [ 1]  248 	jrne 1$
      000069 72 09 50 15 F8   [ 2]  249 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    250 ; if MCU suspended by SLEEP resume program
      00006E 72 07 00 23 05   [ 2]  251     btjf flags,#FSLEEP,2$
      000073 72 17 00 23      [ 1]  252 	bres flags,#FSLEEP 
      000077 80               [11]  253 	iret
      000078                        254 2$:	
      000078                        255 user_interrupted:
      000078 72 00 00 23 02   [ 2]  256     btjt flags,#FRUN,4$
      00007D 20 13            [ 2]  257 	jra UBTN_Handler_exit 
      00007F                        258 4$:	; program interrupted by user 
      00007F 72 11 00 23      [ 1]  259 	bres flags,#FRUN 
      000083 AE 00 9A         [ 2]  260 	ldw x,#USER_ABORT
      000086 CD 00 00         [ 4]  261 	call puts 
      000089 CE 00 04         [ 2]  262 	ldw x,basicptr 
      00008C C6 00 01         [ 1]  263 	ld a,in 
      00008F CD 14 DE         [ 4]  264 	call prt_basic_line
      000092                        265 UBTN_Handler_exit:
      000092 AE 17 FF         [ 2]  266     ldw x,#STACK_EMPTY 
      000095 94               [ 1]  267     ldw sp,x
      000096 9A               [ 1]  268 	rim 
      000097 CC 09 00         [ 2]  269 	jp warm_start
                                    270 
      00009A 0A 50 72 6F 67 72 61   271 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    272 
                                    273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    274 ;    peripherals initialization
                                    275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    276 
                                    277 ;----------------------------------------
                                    278 ; inialize MCU clock 
                                    279 ; input:
                                    280 ;   A 		source  HSI | 1 HSE 
                                    281 ;   XL      CLK_CKDIVR , clock divisor 
                                    282 ; output:
                                    283 ;   none 
                                    284 ;----------------------------------------
      0000B5                        285 clock_init:	
      0000B5 C1 50 C3         [ 1]  286 	cp a,CLK_CMSR 
      0000B8 27 0C            [ 1]  287 	jreq 2$ ; no switching required 
                                    288 ; select clock source 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000BA 72 12 50 C5      [ 1]  289 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000BE C7 50 C4         [ 1]  290 	ld CLK_SWR,a
      0000C1 C1 50 C3         [ 1]  291 1$:	cp a,CLK_CMSR
      0000C4 26 FB            [ 1]  292 	jrne 1$
      0000C6                        293 2$: 	
                                    294 ; HSI and cpu clock divisor 
      0000C6 9F               [ 1]  295 	ld a,xl 
      0000C7 C7 50 C6         [ 1]  296 	ld CLK_CKDIVR,a  
      0000CA 81               [ 4]  297 	ret
                                    298 
                                    299 ;----------------------------------
                                    300 ; TIMER2 used as audio tone output 
                                    301 ; on port D:5.
                                    302 ; channel 1 configured as PWM mode 1 
                                    303 ;-----------------------------------  
                           00F424   304 TIM2_CLK_FREQ=62500
      0000CB                        305 timer2_init:
      0000CB 72 1A 50 C7      [ 1]  306 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000CF 35 60 53 05      [ 1]  307  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000D3 35 08 53 0C      [ 1]  308 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000D7 81               [ 4]  309 	ret 
                                    310 
                                    311 ;---------------------------------
                                    312 ; TIM4 is configured to generate an 
                                    313 ; interrupt every millisecond 
                                    314 ;----------------------------------
      0000D8                        315 timer4_init:
      0000D8 72 18 50 C7      [ 1]  316 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000DC 35 07 53 45      [ 1]  317 	mov TIM4_PSCR,#7 ; prescale 128  
      0000E0 35 7D 53 46      [ 1]  318 	mov TIM4_ARR,#125 ; set for 1msec.
      0000E4 35 05 53 40      [ 1]  319 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000E8 72 10 53 41      [ 1]  320 	bset TIM4_IER,#TIM4_IER_UIE
      0000EC 81               [ 4]  321 	ret
                                    322 
                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    324 ;  routines to write to FLASH, EEPROM 
                                    325 ;  and OPTION 
                                    326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    327 
                                    328 ;----------------------------------
                                    329 ; unlock EEPROM/OPT for writing/erasing
                                    330 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    331 ; input:
                                    332 ;  none
                                    333 ; output:
                                    334 ;  none 
                                    335 ;----------------------------------
      0000ED                        336 unlock_eeprom:
      0000ED 35 00 50 5B      [ 1]  337 	mov FLASH_CR2,#0 
      0000F1 35 FF 50 5C      [ 1]  338 	mov FLASH_NCR2,#0xFF 
      0000F5 35 AE 50 64      [ 1]  339 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000F9 35 56 50 64      [ 1]  340     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000FD 72 07 50 5F FB   [ 2]  341 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000102 81               [ 4]  342 	ret
                                    343 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    344 ;----------------------------------
                                    345 ; unlock FLASH for writing/erasing
                                    346 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    347 ; input:
                                    348 ;  none
                                    349 ; output:
                                    350 ;  none
                                    351 ;----------------------------------
      000103                        352 unlock_flash:
      000103 35 00 50 5B      [ 1]  353 	mov FLASH_CR2,#0 
      000107 35 FF 50 5C      [ 1]  354 	mov FLASH_NCR2,#0xFF 
      00010B 35 56 50 62      [ 1]  355 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00010F 35 AE 50 62      [ 1]  356 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000113 72 03 50 5F FB   [ 2]  357 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000118 81               [ 4]  358 	ret
                                    359 
                                    360 ;----------------------------
                                    361 ; erase block code must be 
                                    362 ; executed from RAM
                                    363 ; input:
                                    364 ;-----------------------------
      000119                        365 row_erase:
      000119 35 20 50 5B      [ 1]  366 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00011D 35 DF 50 5C      [ 1]  367 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000121 4F               [ 1]  368 	clr a 
      000122 90 5F            [ 1]  369 	clrw y 
      000124 91 A7 00 16      [ 1]  370 	ldf ([farptr],y),a
      000128 90 5C            [ 2]  371     incw y
      00012A 91 A7 00 16      [ 1]  372 	ldf ([farptr],y),a
      00012E 90 5C            [ 2]  373     incw y
      000130 91 A7 00 16      [ 1]  374 	ldf ([farptr],y),a
      000134 90 5C            [ 2]  375     incw y
      000136 91 A7 00 16      [ 1]  376 	ldf ([farptr],y),a
      00013A 72 05 50 5F FB   [ 2]  377 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00013F 81               [ 4]  378 	ret
      000140                        379 row_erase_end:
                                    380 
                                    381 ; copy erase_start in RAM 
      000140                        382 move_erase_to_ram:
      000140 AE 01 40         [ 2]  383 	ldw x,#row_erase_end 
      000143 1D 01 19         [ 2]  384 	subw x,#row_erase
      000146 CF 00 0C         [ 2]  385 	ldw acc16,x 
      000149 AE 16 90         [ 2]  386 	ldw x,#tib 
      00014C 90 AE 01 19      [ 2]  387 	ldw y,#row_erase 
      000150 CD 03 C0         [ 4]  388 	call move 
      000153 81               [ 4]  389 	ret 
                                    390 
                                    391 ;-----------------------------------
                                    392 ; block programming must be 
                                    393 ; executed from RAM 
                                    394 ; initial contidions: 
                                    395 ; 	memory unlocked
                                    396 ;   bit PRG set in 
                                    397 ; input:
                                    398 ;   x        128 bytes row to program 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    399 ;   farptr   row address 
                                    400 ; output:
                                    401 ;   none 
                                    402 ;----------------------------------
                           000001   403 	BCNT=1 
      000154                        404 program_row:
      000154 4B 80            [ 1]  405 	push #BLOCK_SIZE  
                                    406 ;enable block programming 
      000156 72 10 50 5B      [ 1]  407 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00015A 72 11 50 5C      [ 1]  408 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00015E 90 5F            [ 1]  409 	clrw y 
      000160 F6               [ 1]  410 1$:	ld a,(x)
      000161 91 A7 00 16      [ 1]  411 	ldf ([farptr],y),a
      000165 5C               [ 2]  412 	incw x 
      000166 90 5C            [ 2]  413 	incw y 
      000168 0A 01            [ 1]  414 	dec (BCNT,sp)
      00016A 26 F4            [ 1]  415 	jrne 1$
                                    416 ; wait EOP bit 
      00016C 72 05 50 5F FB   [ 2]  417 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      000171                        418 	_drop 1 
      000171 5B 01            [ 2]    1     addw sp,#1 
      000173 81               [ 4]  419 	ret 
      000174                        420 program_row_end:
                                    421 
                                    422 ;-------------------------
                                    423 ; move program_row to RAM 
                                    424 ; at txtubound address 
                                    425 ;------------------------
      000174                        426 move_prg_to_ram:
      000174 AE 01 74         [ 2]  427 	ldw x,#program_row_end 
      000177 1D 01 54         [ 2]  428 	subw x,#program_row 
      00017A CF 00 0C         [ 2]  429 	ldw acc16,x 
      00017D AE 16 90         [ 2]  430 	ldw x,#tib 
      000180 90 AE 01 54      [ 2]  431 	ldw y,#program_row 
      000184 CD 03 C0         [ 4]  432 	call move 
      000187 81               [ 4]  433 	ret 
                                    434 
                                    435 
                                    436 ;-----------------------------
                                    437 ; write a row in FLASH/EEPROM 
                                    438 ; input:
                                    439 ;    farptr   destination address 
                                    440 ;    x        source address 
                                    441 ;-----------------------------
      000188                        442 write_row:
      000188 89               [ 2]  443 	pushw x 
      000189 72 5D 00 16      [ 1]  444 	tnz farptr 
      00018D 26 1C            [ 1]  445 	jrne to_flash 
      00018F AE 80 00         [ 2]  446 	ldw x,#FLASH_BASE 
      000192 C3 00 17         [ 2]  447 	cpw x,farptr+1 
      000195 24 14            [ 1]  448 	jruge to_flash 
      000197                        449 to_eeprom:
      000197 AE 40 00         [ 2]  450 	ldw x,#EEPROM_BASE 
      00019A C3 00 17         [ 2]  451 	cpw x,farptr+1 
      00019D 24 01            [ 1]  452 	jruge 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00019F 81               [ 4]  453 	ret ; bad address 
      0001A0 AE 47 FF         [ 2]  454 1$: ldw x,#EEPROM_END 
      0001A3 23 01            [ 2]  455 	jrule 2$ 
      0001A5 81               [ 4]  456 	ret ; bad address 
      0001A6 CD 00 ED         [ 4]  457 2$:	call unlock_eeprom
      0001A9 20 03            [ 2]  458 	jra do_programming
      0001AB                        459 to_flash:
      0001AB CD 01 03         [ 4]  460 	call unlock_flash 
      0001AE                        461 do_programming:
      0001AE 85               [ 2]  462 	popw x 
      0001AF CD 16 90         [ 4]  463 	call tib
      0001B2 72 13 50 5F      [ 1]  464 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001B6 72 17 50 5F      [ 1]  465 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001BA 81               [ 4]  466 	ret 
                                    467 
                                    468 
                                    469 ;-----------------------------------
                                    470 ; erase flash or EEPROM block
                                    471 ; a blow is 128 bytes 
                                    472 ; input:
                                    473 ;   farptr  address row begin
                                    474 ; output:
                                    475 ;   none
                                    476 ;--------------------------------------
      0001BB                        477 block_erase:
      0001BB CE 00 17         [ 2]  478 	ldw x,farptr+1
      0001BE A3 28 00         [ 2]  479 	cpw x,#user_space 
      0001C1 2A 17            [ 1]  480 	jrpl erase_flash 
                                    481 ; erase eeprom block
      0001C3 A3 40 00         [ 2]  482 	cpw x,#EEPROM_BASE 
      0001C6 24 01            [ 1]  483 	jruge 1$
      0001C8 81               [ 4]  484 	ret ; bad address 
      0001C9 AE 47 FF         [ 2]  485 1$: ldw x,#EEPROM_END 
      0001CC 23 01            [ 2]  486 	jrule 2$ 
      0001CE 81               [ 4]  487 	ret ; bad address 
      0001CF CD 00 ED         [ 4]  488 2$:	call unlock_eeprom 
      0001D2 CD 16 90         [ 4]  489 	call tib 
      0001D5 72 17 50 5F      [ 1]  490 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001D9 81               [ 4]  491 	ret 
                                    492 ; erase flash block:
      0001DA                        493 erase_flash:
      0001DA CD 01 03         [ 4]  494 	call unlock_flash 
      0001DD CD 16 90         [ 4]  495 	call tib 
      0001E0 72 13 50 5F      [ 1]  496     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001E4 81               [ 4]  497 	ret 
                                    498 
                                    499 
                                    500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    501 ; write a byte to FLASH or EEPROM/OPTION  
                                    502 ; input:
                                    503 ;    a  		byte to write
                                    504 ;    farptr  	address
                                    505 ;    x          farptr[x]
                                    506 ; output:
                                    507 ;    none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    509 	; variables locales
                           000001   510 	BTW = 1   ; byte to write offset on stack
                           000002   511 	OPT = 2   ; OPTION flag offset on stack
                           000002   512 	VSIZE = 2
      0001E5                        513 write_byte:
      0001E5 90 89            [ 2]  514 	pushw y
      0001E7                        515 	_vars VSIZE
      0001E7 52 02            [ 2]    1     sub sp,#VSIZE 
      0001E9 6B 01            [ 1]  516 	ld (BTW,sp),a ; byte to write 
      0001EB 0F 02            [ 1]  517 	clr (OPT,sp)  ; OPTION flag
                                    518 ; put addr[15:0] in Y, for bounds check.
      0001ED 90 CE 00 17      [ 2]  519 	ldw y,farptr+1   ; Y=addr15:0
                                    520 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001F1 72 5D 00 16      [ 1]  521 	tnz farptr 
      0001F5 26 14            [ 1]  522 	jrne write_flash
      0001F7 90 A3 28 00      [ 2]  523     cpw y,#user_space
      0001FB 24 0E            [ 1]  524     jruge write_flash
      0001FD 90 A3 40 00      [ 2]  525 	cpw y,#EEPROM_BASE  
      000201 25 52            [ 1]  526     jrult write_exit
      000203 90 A3 48 7F      [ 2]  527 	cpw y,#OPTION_END 
      000207 22 4C            [ 1]  528 	jrugt write_exit
      000209 20 16            [ 2]  529 	jra write_eeprom 
                                    530 ; write program memory
      00020B                        531 write_flash:
      00020B CD 01 03         [ 4]  532 	call unlock_flash 
      00020E 9B               [ 1]  533 1$:	sim 
      00020F 7B 01            [ 1]  534 	ld a,(BTW,sp)
      000211 92 A7 00 16      [ 4]  535 	ldf ([farptr],x),a ; farptr[x]=A
      000215 72 05 50 5F FB   [ 2]  536 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00021A 9A               [ 1]  537     rim 
      00021B 72 13 50 5F      [ 1]  538     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00021F 20 34            [ 2]  539     jra write_exit
                                    540 ; write eeprom and option
      000221                        541 write_eeprom:
      000221 CD 00 ED         [ 4]  542 	call unlock_eeprom
                                    543 	; check for data eeprom or option eeprom
      000224 90 A3 48 00      [ 2]  544 	cpw y,#OPTION_BASE
      000228 2B 08            [ 1]  545 	jrmi 1$
      00022A 90 A3 48 80      [ 2]  546 	cpw y,#OPTION_END+1
      00022E 2A 02            [ 1]  547 	jrpl 1$
      000230 03 02            [ 1]  548 	cpl (OPT,sp)
      000232                        549 1$: 
      000232 0D 02            [ 1]  550     tnz (OPT,sp)
      000234 27 08            [ 1]  551     jreq 2$
                                    552 	; pour modifier une option il faut modifier ces 2 bits
      000236 72 1E 50 5B      [ 1]  553     bset FLASH_CR2,#FLASH_CR2_OPT
      00023A 72 1F 50 5C      [ 1]  554     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00023E                        555 2$: 
      00023E 7B 01            [ 1]  556     ld a,(BTW,sp)
      000240 92 A7 00 16      [ 4]  557     ldf ([farptr],x),a
      000244 0D 02            [ 1]  558     tnz (OPT,sp)
      000246 27 08            [ 1]  559     jreq 3$
      000248 5C               [ 2]  560     incw x
      000249 7B 01            [ 1]  561     ld a,(BTW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00024B 43               [ 1]  562     cpl a
      00024C 92 A7 00 16      [ 4]  563     ldf ([farptr],x),a
      000250 72 05 50 5F FB   [ 2]  564 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000255                        565 write_exit:
      000255                        566 	_drop VSIZE 
      000255 5B 02            [ 2]    1     addw sp,#VSIZE 
      000257 90 85            [ 2]  567 	popw y
      000259 81               [ 4]  568     ret
                                    569 
                                    570 ;--------------------------------------------
                                    571 ; write a data block to eeprom or flash 
                                    572 ; input:
                                    573 ;   Y        source address   
                                    574 ;   X        array index  destination  farptr[x]
                                    575 ;   BSIZE    block size bytes 
                                    576 ;   farptr   write address , byte* 
                                    577 ; output:
                                    578 ;	X 		after last byte written 
                                    579 ;   Y 		after last byte read 
                                    580 ;  farptr   point after block
                                    581 ;---------------------------------------------
      00025A                        582 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00025A                        583 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    584 	; local var 
                           000001   585 	XSAVE=1 
                           000002   586 	VSIZE=2 
      00025A                        587 write_block:
      00025A                        588 	_vars VSIZE
      00025A 52 02            [ 2]    1     sub sp,#VSIZE 
      00025C 1F 01            [ 2]  589 	ldw (XSAVE,sp),x 
      00025E 1E 05            [ 2]  590 	ldw x,(BSIZE,sp) 
      000260 27 13            [ 1]  591 	jreq 9$
      000262 1E 01            [ 2]  592 1$:	ldw x,(XSAVE,sp)
      000264 90 F6            [ 1]  593 	ld a,(y)
      000266 CD 01 E5         [ 4]  594 	call write_byte 
      000269 5C               [ 2]  595 	incw x 
      00026A 90 5C            [ 2]  596 	incw y 
      00026C 1F 01            [ 2]  597 	ldw (XSAVE,sp),x
      00026E 1E 05            [ 2]  598 	ldw x,(BSIZE,sp)
      000270 5A               [ 2]  599 	decw x
      000271 1F 05            [ 2]  600 	ldw (BSIZE,sp),x 
      000273 26 ED            [ 1]  601 	jrne 1$
      000275                        602 9$:
      000275 1E 01            [ 2]  603 	ldw x,(XSAVE,sp)
      000277 CD 19 EF         [ 4]  604 	call incr_farptr
      00027A                        605 	_drop VSIZE
      00027A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027C 81               [ 4]  606 	ret 
                                    607 
                                    608 
                                    609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    610 ;;   UART1 subroutines
                                    611 ;;   used for user interface 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    612 ;;   communication channel.
                                    613 ;;   settings: 
                                    614 ;;		115200 8N1 no flow control
                                    615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    616 
                                    617 ;---------------------------------------------
                                    618 ; initialize UART1, 115200 8N1
                                    619 ; input:
                                    620 ;	none
                                    621 ; output:
                                    622 ;   none
                                    623 ;---------------------------------------------
      00027D                        624 uart1_init:
      00027D 72 1A 50 02      [ 1]  625     bset PA_DDR,#UART1_TX_PIN
      000281 72 1A 50 03      [ 1]  626     bset PA_CR1,#UART1_TX_PIN 
      000285 72 1A 50 04      [ 1]  627     bset PA_CR2,#UART1_TX_PIN 
                                    628 ; enable UART1 clock
      000289 72 14 50 C7      [ 1]  629 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00028D                        630 uart1_set_baud: 
                                    631 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    632 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00028D A6 E1            [ 1]  633 	ld a,#CLK_SWR_HSI
      00028F C1 50 C3         [ 1]  634 	cp a,CLK_CMSR 
      000292 27 0A            [ 1]  635 	jreq 2$ 
      000294                        636 1$: ; 8 Mhz 	
      000294 35 05 52 33      [ 1]  637 	mov UART1_BRR2,#0x05 ; must be loaded first
      000298 35 04 52 32      [ 1]  638 	mov UART1_BRR1,#0x4
      00029C 20 08            [ 2]  639 	jra 3$
      00029E                        640 2$: ; 16 Mhz 	
      00029E 35 0B 52 33      [ 1]  641 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002A2 35 08 52 32      [ 1]  642 	mov UART1_BRR1,#0x08
      0002A6                        643 3$:
      0002A6 72 5F 52 31      [ 1]  644     clr UART1_DR
      0002AA 35 2C 52 35      [ 1]  645 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002AE 72 10 52 35      [ 1]  646 	bset UART1_CR2,#UART_CR2_SBK
      0002B2 72 0D 52 30 FB   [ 2]  647     btjf UART1_SR,#UART_SR_TC,.
      0002B7 72 5F 00 2D      [ 1]  648     clr rx_head 
      0002BB 72 5F 00 2E      [ 1]  649 	clr rx_tail 
      0002BF 81               [ 4]  650 	ret
                                    651 
                                    652 ;---------------------------------
                                    653 ; send character to UART1 
                                    654 ; input:
                                    655 ;   A 
                                    656 ; output:
                                    657 ;   none 
                                    658 ;--------------------------------	
      0002C0                        659 putc::
      0002C0 72 0F 52 30 FB   [ 2]  660 	btjf UART1_SR,#UART_SR_TXE,.
      0002C5 C7 52 31         [ 1]  661 	ld UART1_DR,a 
      0002C8 81               [ 4]  662 	ret 
                                    663 
                                    664 ;---------------------------------
                                    665 ; wait character from UART1 
                                    666 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    667 ;   none
                                    668 ; output:
                                    669 ;   A 			char  
                                    670 ;--------------------------------	
      0002C9                        671 getc::
      0002C9 C6 00 2D         [ 1]  672 	ld a,rx_head 
      0002CC C1 00 2E         [ 1]  673 1$:	cp a,rx_tail 
      0002CF 27 FB            [ 1]  674 	jreq 1$
      0002D1 89               [ 2]  675 	pushw x 
      0002D2 AE 00 25         [ 2]  676 	ldw x,#rx_queue
      0002D5 9F               [ 1]  677 	ld a,xl 
      0002D6 CB 00 2D         [ 1]  678 	add a,rx_head 
      0002D9 97               [ 1]  679 	ld xl,a 
      0002DA F6               [ 1]  680 	ld a,(x)
      0002DB 85               [ 2]  681 	popw x
      0002DC 88               [ 1]  682 	push a
      0002DD 72 5C 00 2D      [ 1]  683 	inc rx_head 
      0002E1 A6 07            [ 1]  684 	ld a,#RX_QUEUE_SIZE-1 
      0002E3 C4 00 2D         [ 1]  685 	and a,rx_head 
      0002E6 C7 00 2D         [ 1]  686 	ld rx_head,a 
      0002E9 84               [ 1]  687 	pop a  
      0002EA 81               [ 4]  688 	ret 
                                    689 
                                    690 ;----------------------
                                    691 ; print token id && value
                                    692 ; input:
                                    693 ;   A     token id 
                                    694 ;   X     token value 
                                    695 ;---------------------
                           000001   696 	BSAVE=1
                           000002   697 	AREG=2
                           000003   698 	XREG=3
                           000004   699 	VSIZE=4
      0002EB                        700 prt_tok:
      0002EB                        701 	_vars VSIZE 
      0002EB 52 04            [ 2]    1     sub sp,#VSIZE 
      0002ED 6B 02            [ 1]  702 	ld (AREG,sp),a 
      0002EF 1F 03            [ 2]  703 	ldw (XREG,sp),x 
      0002F1 C6 00 0A         [ 1]  704 	ld a, base
      0002F4 6B 01            [ 1]  705 	ld (BSAVE,sp),a 
      0002F6 35 10 00 0A      [ 1]  706 	mov base,#16  
      0002FA AE 03 22         [ 2]  707 	ldw x,#token_msg
      0002FD CD 00 00         [ 4]  708 	call puts 
      000300 5F               [ 1]  709 	clrw x 
      000301 7B 02            [ 1]  710 	ld a,(AREG,sp)
      000303 97               [ 1]  711 	ld xl,a 
      000304 CD 09 CC         [ 4]  712 	call print_int 
      000307 A6 20            [ 1]  713 	ld a,#SPACE
      000309 CD 02 C0         [ 4]  714 	call putc 
      00030C 1E 03            [ 2]  715 	ldw x,(XREG,sp)
      00030E CD 09 CC         [ 4]  716 	call print_int 
      000311 A6 0D            [ 1]  717 	ld a,#CR 
      000313 CD 02 C0         [ 4]  718 	call putc 
      000316 7B 01            [ 1]  719 	ld a,(BSAVE,sp)
      000318 C7 00 0A         [ 1]  720 	ld base,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00031B 7B 02            [ 1]  721 	ld a,(AREG,sp)
      00031D 1E 03            [ 2]  722 	ldw x,(XREG,sp)
      00031F                        723 	_drop VSIZE 
      00031F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000321 81               [ 4]  724 	ret 
      000322 74 6F 6B 65 6E 3A 20   725 token_msg: .asciz "token: "
             00
                                    726 
                                    727 
                                    728 ;---------------------
                                    729 ; display n bytes row 
                                    730 ; from memory.
                                    731 ; input:
                                    732 ;   A   bytes to print 
                                    733 ;	X   start address 
                                    734 ; output:
                                    735 ;   X   address after last shown  
                                    736 ;---------------------
                           000001   737 	CNT=1 
                           000002   738 	ADR=2 
                           000003   739 	VSIZE=3 
      00032A                        740 show_row:
      00032A 4D               [ 1]  741 	tnz a 
      00032B 26 01            [ 1]  742 	jrne 1$
      00032D 81               [ 4]  743 	ret 
      00032E                        744 1$:	
      00032E 89               [ 2]  745 	pushw x  
      00032F 88               [ 1]  746 	push a 
      000330 35 04 00 24      [ 1]  747 	mov tab_width,#4 
      000334 CD 09 CC         [ 4]  748 	call print_int 
      000337 A6 20            [ 1]  749 	ld a,#SPACE  
      000339 CD 02 C0         [ 4]  750 	call putc
      00033C                        751 row_loop:
      00033C 1E 02            [ 2]  752 	ldw x,(ADR,sp)
      00033E F6               [ 1]  753 	ld a,(x)
      00033F 5F               [ 1]  754 	clrw x 
      000340 97               [ 1]  755 	ld xl,a 
      000341 CD 09 CC         [ 4]  756 	call print_int 
      000344 1E 02            [ 2]  757 	ldw x,(ADR,sp)
      000346 5C               [ 2]  758 	incw x 
      000347 1F 02            [ 2]  759 	ldw (ADR,sp),x 
      000349 0A 01            [ 1]  760 	dec (CNT,sp)
      00034B 26 EF            [ 1]  761 	jrne row_loop
      00034D                        762 	_drop VSIZE  		
      00034D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00034F 35 04 00 24      [ 1]  763 	mov tab_width,#4
      000353 A6 0D            [ 1]  764 	ld a,#CR 
      000355 CD 02 C0         [ 4]  765 	call putc 
      000358 81               [ 4]  766 	ret 
                                    767 
                                    768 ;--------------------------
                                    769 ; print memory content 
                                    770 ; in hexadecimal format
                                    771 ;  input:
                                    772 ;    X    start address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    773 ;    Y    count 
                                    774 ;--------------------------
                           000001   775 	BCNT=1
                           000003   776 	BASE=3
                           000004   777 	TABW=4
                           000004   778 	VSIZE=4   
      000359                        779 hex_dump:
      000359                        780 	_vars VSIZE
      000359 52 04            [ 2]    1     sub sp,#VSIZE 
      00035B C6 00 0A         [ 1]  781 	ld a,base
      00035E 6B 03            [ 1]  782 	ld (BASE,sp),a 
      000360 35 10 00 0A      [ 1]  783 	mov base,#16
      000364 C6 00 24         [ 1]  784 	ld a,tab_width 
      000367 6B 04            [ 1]  785 	ld (TABW,sp),a
      000369 A6 0D            [ 1]  786 	ld a,#CR 
      00036B CD 02 C0         [ 4]  787 	call putc 
      00036E 17 01            [ 2]  788 1$: ldw (BCNT,sp),y
      000370 A6 10            [ 1]  789 	ld a,#16
      000372 90 A3 00 10      [ 2]  790 	cpw y,#16
      000376 2A 02            [ 1]  791 	jrpl 2$
      000378 90 9F            [ 1]  792 	ld a,yl
      00037A                        793 2$: 	
      00037A CD 03 2A         [ 4]  794 	call show_row 
      00037D 16 01            [ 2]  795 	ldw y,(BCNT,sp) 
      00037F 72 A2 00 10      [ 2]  796 	subw y,#16 
      000383 90 A3 00 01      [ 2]  797 	cpw y,#1
      000387 2A E5            [ 1]  798 	jrpl 1$
      000389 7B 03            [ 1]  799 	ld a,(BASE,sp)
      00038B C7 00 0A         [ 1]  800 	ld base,a
      00038E 7B 04            [ 1]  801 	ld a,(TABW,sp)
      000390 C7 00 24         [ 1]  802 	ld tab_width,a 
      000393                        803 	_drop VSIZE
      000393 5B 04            [ 2]    1     addw sp,#VSIZE 
      000395 81               [ 4]  804 	ret 
                                    805 
                                    806 ;-------------------------------------
                                    807 ; retrun string length
                                    808 ; input:
                                    809 ;   X         .asciz  pointer 
                                    810 ; output:
                                    811 ;   X         not affected 
                                    812 ;   A         length 
                                    813 ;-------------------------------------
      000396                        814 strlen::
      000396 89               [ 2]  815 	pushw x 
      000397 4F               [ 1]  816 	clr a
      000398 7D               [ 1]  817 1$:	tnz (x) 
      000399 27 04            [ 1]  818 	jreq 9$ 
      00039B 4C               [ 1]  819 	inc a 
      00039C 5C               [ 2]  820 	incw x 
      00039D 20 F9            [ 2]  821 	jra 1$ 
      00039F 85               [ 2]  822 9$:	popw x 
      0003A0 81               [ 4]  823 	ret 
                                    824 
                                    825 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    826 ; compare 2 strings
                                    827 ; input:
                                    828 ;   X 		char* first string 
                                    829 ;   Y       char* second string 
                                    830 ; output:
                                    831 ;   A 		0|1 
                                    832 ;-------------------------------------
      0003A1                        833 strcmp:
      0003A1 F6               [ 1]  834 	ld a,(x)
      0003A2 27 0B            [ 1]  835 	jreq 5$ 
      0003A4 90 F1            [ 1]  836 	cp a,(y) 
      0003A6 26 05            [ 1]  837 	jrne 4$ 
      0003A8 5C               [ 2]  838 	incw x 
      0003A9 90 5C            [ 2]  839 	incw y 
      0003AB 20 F4            [ 2]  840 	jra strcmp 
      0003AD                        841 4$: ; not same  
      0003AD 4F               [ 1]  842 	clr a 
      0003AE 81               [ 4]  843 	ret 
      0003AF                        844 5$: ; same 
      0003AF A6 01            [ 1]  845 	ld a,#1 
      0003B1 81               [ 4]  846 	ret 
                                    847 
                                    848 
                                    849 ;---------------------------------------
                                    850 ;  copy src to dest 
                                    851 ; input:
                                    852 ;   X 		dest 
                                    853 ;   Y 		src 
                                    854 ; output: 
                                    855 ;   X 		dest 
                                    856 ;----------------------------------
      0003B2                        857 strcpy:
      0003B2 89               [ 2]  858 	pushw x 
      0003B3 90 F6            [ 1]  859 1$: ld a,(y)
      0003B5 27 06            [ 1]  860 	jreq 9$ 
      0003B7 F7               [ 1]  861 	ld (x),a 
      0003B8 5C               [ 2]  862 	incw x 
      0003B9 90 5C            [ 2]  863 	incw y 
      0003BB 20 F6            [ 2]  864 	jra 1$ 
      0003BD 7F               [ 1]  865 9$:	clr (x)
      0003BE 85               [ 2]  866 	popw x 
      0003BF 81               [ 4]  867 	ret 
                                    868 
                                    869 ;---------------------------------------
                                    870 ; move memory block 
                                    871 ; input:
                                    872 ;   X 		destination 
                                    873 ;   Y 	    source 
                                    874 ;   acc16	bytes count 
                                    875 ; output:
                                    876 ;   none 
                                    877 ;--------------------------------------
                           000001   878 	INCR=1 ; increament high byte 
                           000002   879 	LB=2 ; increament low byte 
                           000002   880 	VSIZE=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003C0                        881 move::
      0003C0                        882 	_vars VSIZE 
      0003C0 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C2 0F 01            [ 1]  883 	clr (INCR,sp)
      0003C4 0F 02            [ 1]  884 	clr (LB,sp)
      0003C6 90 89            [ 2]  885 	pushw y 
      0003C8 13 01            [ 2]  886 	cpw x,(1,sp) ; compare DEST to SRC 
      0003CA 90 85            [ 2]  887 	popw y 
      0003CC 27 31            [ 1]  888 	jreq move_exit ; x==y 
      0003CE 2B 0E            [ 1]  889 	jrmi move_down
      0003D0                        890 move_up: ; start from top address with incr=-1
      0003D0 72 BB 00 0C      [ 2]  891 	addw x,acc16
      0003D4 72 B9 00 0C      [ 2]  892 	addw y,acc16
      0003D8 03 01            [ 1]  893 	cpl (INCR,sp)
      0003DA 03 02            [ 1]  894 	cpl (LB,sp)   ; increment = -1 
      0003DC 20 05            [ 2]  895 	jra move_loop  
      0003DE                        896 move_down: ; start from bottom address with incr=1 
      0003DE 5A               [ 2]  897     decw x 
      0003DF 90 5A            [ 2]  898 	decw y
      0003E1 0C 02            [ 1]  899 	inc (LB,sp) ; incr=1 
      0003E3                        900 move_loop:	
      0003E3 C6 00 0C         [ 1]  901     ld a, acc16 
      0003E6 CA 00 0D         [ 1]  902 	or a, acc8
      0003E9 27 14            [ 1]  903 	jreq move_exit 
      0003EB 72 FB 01         [ 2]  904 	addw x,(INCR,sp)
      0003EE 72 F9 01         [ 2]  905 	addw y,(INCR,sp) 
      0003F1 90 F6            [ 1]  906 	ld a,(y)
      0003F3 F7               [ 1]  907 	ld (x),a 
      0003F4 89               [ 2]  908 	pushw x 
      0003F5 CE 00 0C         [ 2]  909 	ldw x,acc16 
      0003F8 5A               [ 2]  910 	decw x 
      0003F9 CF 00 0C         [ 2]  911 	ldw acc16,x 
      0003FC 85               [ 2]  912 	popw x 
      0003FD 20 E4            [ 2]  913 	jra move_loop
      0003FF                        914 move_exit:
      0003FF                        915 	_drop VSIZE
      0003FF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000401 81               [ 4]  916 	ret 	
                                    917 
                                    918 ;-------------------------------------
                                    919 ; search text area for a line#
                                    920 ; input:
                                    921 ;	X 			line# 
                                    922 ; output:
                                    923 ;   X 			addr of line | 0 
                                    924 ;   Y           line#|insert address if not found  
                                    925 ;-------------------------------------
                           000001   926 	LL=1 ; line length 
                           000002   927 	LB=2 ; line length low byte 
                           000002   928 	VSIZE=2 
      000402                        929 search_lineno::
      000402                        930 	_vars VSIZE
      000402 52 02            [ 2]    1     sub sp,#VSIZE 
      000404 0F 01            [ 1]  931 	clr (LL,sp)
      000406 90 CE 00 1C      [ 2]  932 	ldw y,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00040A                        933 search_ln_loop:
      00040A 90 C3 00 1E      [ 2]  934 	cpw y,txtend 
      00040E 2A 10            [ 1]  935 	jrpl 8$
      000410 90 F3            [ 1]  936 	cpw x,(y)
      000412 27 0E            [ 1]  937 	jreq 9$
      000414 2B 0A            [ 1]  938 	jrmi 8$ 
      000416 90 E6 02         [ 1]  939 	ld a,(2,y)
      000419 6B 02            [ 1]  940 	ld (LB,sp),a 
      00041B 72 F9 01         [ 2]  941 	addw y,(LL,sp)
      00041E 20 EA            [ 2]  942 	jra search_ln_loop 
      000420                        943 8$: 
      000420 5F               [ 1]  944 	clrw x 	
      000421 51               [ 1]  945 	exgw x,y 
      000422                        946 9$: _drop VSIZE
      000422 5B 02            [ 2]    1     addw sp,#VSIZE 
      000424 51               [ 1]  947 	exgw x,y   
      000425 81               [ 4]  948 	ret 
                                    949 
                                    950 ;-------------------------------------
                                    951 ; delete line at addr
                                    952 ; input:
                                    953 ;   X 		addr of line i.e DEST for move 
                                    954 ;-------------------------------------
                           000001   955 	LLEN=1
                           000003   956 	SRC=3
                           000004   957 	VSIZE=4
      000426                        958 del_line: 
      000426                        959 	_vars VSIZE 
      000426 52 04            [ 2]    1     sub sp,#VSIZE 
      000428 E6 02            [ 1]  960 	ld a,(2,x) ; line length
      00042A 6B 02            [ 1]  961 	ld (LLEN+1,sp),a 
      00042C 0F 01            [ 1]  962 	clr (LLEN,sp)
      00042E 90 93            [ 1]  963 	ldw y,x  
      000430 72 F9 01         [ 2]  964 	addw y,(LLEN,sp) ;SRC  
      000433 17 03            [ 2]  965 	ldw (SRC,sp),y  ;save source 
      000435 90 CE 00 1E      [ 2]  966 	ldw y,txtend 
      000439 72 F2 03         [ 2]  967 	subw y,(SRC,sp) ; y=count 
      00043C 90 CF 00 0C      [ 2]  968 	ldw acc16,y 
      000440 16 03            [ 2]  969 	ldw y,(SRC,sp)    ; source
      000442 CD 03 C0         [ 4]  970 	call move
      000445 90 CE 00 1E      [ 2]  971 	ldw y,txtend 
      000449 72 F2 01         [ 2]  972 	subw y,(LLEN,sp)
      00044C 90 CF 00 1E      [ 2]  973 	ldw txtend,y  
      000450                        974 	_drop VSIZE     
      000450 5B 04            [ 2]    1     addw sp,#VSIZE 
      000452 81               [ 4]  975 	ret 
                                    976 
                                    977 ;---------------------------------------------
                                    978 ; create a gap in text area to 
                                    979 ; move new line in this gap
                                    980 ; input:
                                    981 ;    X 			addr gap start 
                                    982 ;    Y 			gap length 
                                    983 ; output:
                                    984 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    985 ;--------------------------------------------
                           000001   986 	DEST=1
                           000003   987 	SRC=3
                           000005   988 	LEN=5
                           000006   989 	VSIZE=6 
      000453                        990 create_gap:
      000453                        991 	_vars VSIZE
      000453 52 06            [ 2]    1     sub sp,#VSIZE 
      000455 1F 03            [ 2]  992 	ldw (SRC,sp),x 
      000457 17 05            [ 2]  993 	ldw (LEN,sp),y 
      000459 90 CF 00 0C      [ 2]  994 	ldw acc16,y 
      00045D 90 93            [ 1]  995 	ldw y,x ; SRC
      00045F 72 BB 00 0C      [ 2]  996 	addw x,acc16  
      000463 1F 01            [ 2]  997 	ldw (DEST,sp),x 
                                    998 ;compute size to move 	
      000465 CE 00 1E         [ 2]  999 	ldw x,txtend 
      000468 72 F0 03         [ 2] 1000 	subw x,(SRC,sp)
      00046B CF 00 0C         [ 2] 1001 	ldw acc16,x ; size to move
      00046E 1E 01            [ 2] 1002 	ldw x,(DEST,sp) 
      000470 CD 03 C0         [ 4] 1003 	call move
      000473 CE 00 1E         [ 2] 1004 	ldw x,txtend
      000476 72 FB 05         [ 2] 1005 	addw x,(LEN,sp)
      000479 CF 00 1E         [ 2] 1006 	ldw txtend,x
      00047C                       1007 9$:	_drop VSIZE 
      00047C 5B 06            [ 2]    1     addw sp,#VSIZE 
      00047E 81               [ 4] 1008 	ret 
                                   1009 
                                   1010 ;--------------------------------------------
                                   1011 ; insert line in pad into text area 
                                   1012 ; first search for already existing 
                                   1013 ; replace existing 
                                   1014 ; if new line empty delete existing one. 
                                   1015 ; input:
                                   1016 ;   ptr16		pointer to tokenized line  
                                   1017 ; output:
                                   1018 ;   none
                                   1019 ;---------------------------------------------
                           000001  1020 	DEST=1  ; text area insertion address 
                           000003  1021 	SRC=3   ; str to insert address 
                           000005  1022 	LINENO=5 ; line number 
                           000007  1023 	LLEN=7 ; line length 
                           000008  1024 	VSIZE=8  
      00047F                       1025 insert_line:
      00047F                       1026 	_vars VSIZE 
      00047F 52 08            [ 2]    1     sub sp,#VSIZE 
      000481 CE 00 1E         [ 2] 1027 	ldw x,txtend  
      000484 C3 00 1C         [ 2] 1028 	cpw x,txtbgn 
      000487 26 15            [ 1] 1029 	jrne 0$
                                   1030 ;first text line 
      000489 AE 00 02         [ 2] 1031 	ldw x,#2 
      00048C 72 D6 00 17      [ 4] 1032 	ld a,([ptr16],x)
      000490 5F               [ 1] 1033 	clrw x 
      000491 97               [ 1] 1034 	ld xl,a
      000492 1F 07            [ 2] 1035 	ldw (LLEN,sp),x 
      000494 CE 00 1C         [ 2] 1036 	ldw x,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000497 1F 01            [ 2] 1037 	ldw (DEST,sp),x 
      000499 CE 00 1E         [ 2] 1038 	ldw x,txtend 
      00049C 20 37            [ 2] 1039 	jra 4$
      00049E 72 CE 00 17      [ 5] 1040 0$:	ldw x,[ptr16]
                                   1041 ; line number
      0004A2 1F 05            [ 2] 1042 	ldw (LINENO,sp),x 
      0004A4 AE 00 02         [ 2] 1043 	ldw x,#2 
      0004A7 72 D6 00 17      [ 4] 1044 	ld a,([ptr16],x)
      0004AB 97               [ 1] 1045 	ld xl,a
                                   1046 ; line length
      0004AC 1F 07            [ 2] 1047 	ldw (LLEN,sp),x
                                   1048 ; check if that line number already exit 	
      0004AE 1E 05            [ 2] 1049 	ldw x,(LINENO,sp)
      0004B0 CD 04 02         [ 4] 1050 	call search_lineno 
      0004B3 5D               [ 2] 1051 	tnzw x 
      0004B4 26 04            [ 1] 1052 	jrne 2$
                                   1053 ; line doesn't exit
                                   1054 ; it will be inserted at this point.  	
      0004B6 17 01            [ 2] 1055 	ldw (DEST,sp),y 
      0004B8 20 05            [ 2] 1056 	jra 3$
                                   1057 ; line exit delete it.
                                   1058 ; it will be replaced by new one 	
      0004BA 1F 01            [ 2] 1059 2$: ldw (DEST,sp),x 
      0004BC CD 04 26         [ 4] 1060 	call del_line
      0004BF                       1061 3$: 
                                   1062 ; insert new line or leave if LLEN==3
                                   1063 ; LLEN==3 means empty line 
      0004BF A6 03            [ 1] 1064 	ld a,#3
      0004C1 11 08            [ 1] 1065 	cp a,(LLEN+1,sp)
      0004C3 27 24            [ 1] 1066 	jreq insert_ln_exit ; empty line exit.
                                   1067 ; if insertion point at txtend 
                                   1068 ; move no need to create a gap 
      0004C5 1E 01            [ 2] 1069 	ldw x,(DEST,sp)
      0004C7 C3 00 1E         [ 2] 1070 	cpw x,txtend 
      0004CA 27 09            [ 1] 1071 	jreq 4$ 
                                   1072 ; must create a gap
                                   1073 ; at insertion point  
      0004CC 1E 01            [ 2] 1074 	ldw x,(DEST,sp)
      0004CE 16 07            [ 2] 1075 	ldw y,(LLEN,sp)
      0004D0 CD 04 53         [ 4] 1076 	call create_gap
      0004D3 20 06            [ 2] 1077 	jra 5$
      0004D5                       1078 4$: 
      0004D5 72 FB 07         [ 2] 1079 	addw x,(LLEN,sp)
      0004D8 CF 00 1E         [ 2] 1080 	ldw txtend,x 	 
                                   1081 ; move new line in gap 
      0004DB 1E 07            [ 2] 1082 5$:	ldw x,(LLEN,sp)
      0004DD CF 00 0C         [ 2] 1083 	ldw acc16,x 
      0004E0 90 AE 16 E0      [ 2] 1084 	ldw y,#pad ;SRC 
      0004E4 1E 01            [ 2] 1085 	ldw x,(DEST,sp) ; dest address 
      0004E6 CD 03 C0         [ 4] 1086 	call move 
      0004E9                       1087 insert_ln_exit:	
      0004E9                       1088 	_drop VSIZE
      0004E9 5B 08            [ 2]    1     addw sp,#VSIZE 
      0004EB 81               [ 4] 1089 	ret
                                   1090 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1091 ;-----------------------------------
                                   1092 ; create token list fromm text line 
                                   1093 ; save this list in pad buffer 
                                   1094 ;  compiled line format: 
                                   1095 ;    line_no  2 bytes {0...32767}
                                   1096 ;    count    1 byte  
                                   1097 ;    tokens   variable length 
                                   1098 ;   
                                   1099 ; input:
                                   1100 ;   none
                                   1101 ; modified variables:
                                   1102 ;   basicptr     token list buffer address 
                                   1103 ;   in.w  		 3|count, i.e. index in buffer
                                   1104 ;   count        length of line | 0  
                                   1105 ;-----------------------------------
                           000001  1106 	XSAVE=1
                           000002  1107 	VSIZE=2
      0004EC                       1108 compile:
      0004EC                       1109 	_vars VSIZE 
      0004EC 52 02            [ 2]    1     sub sp,#VSIZE 
      0004EE 72 1A 00 23      [ 1] 1110 	bset flags,#FCOMP 
      0004F2 A6 00            [ 1] 1111 	ld a,#0
      0004F4 AE 00 00         [ 2] 1112 	ldw x,#0
      0004F7 CF 16 E0         [ 2] 1113 	ldw pad,x ; destination buffer 
      0004FA C7 16 E2         [ 1] 1114 	ld pad+2,a ; count 
      0004FD AE 16 E3         [ 2] 1115 	ldw x,#pad+3
      000500 72 5F 00 01      [ 1] 1116 	clr in 
      000504 CD 0B F0         [ 4] 1117 	call get_token
      000507 A1 84            [ 1] 1118 	cp a,#TK_INTGR
      000509 26 11            [ 1] 1119 	jrne 2$
      00050B A3 00 01         [ 2] 1120 	cpw x,#1 
      00050E 2A 05            [ 1] 1121 	jrpl 1$
      000510 A6 0A            [ 1] 1122 	ld a,#ERR_BAD_VALUE
      000512 CC 08 7B         [ 2] 1123 	jp tb_error
      000515 CF 16 E0         [ 2] 1124 1$:	ldw pad,x 
      000518 90 AE 16 E3      [ 2] 1125 	ldw y,#pad+3 
      00051C 90 A3 17 60      [ 2] 1126 2$:	cpw y,#stack_full 
      000520 25 05            [ 1] 1127 	jrult 3$
      000522 A6 0F            [ 1] 1128 	ld a,#ERR_BUF_FULL 
      000524 CC 08 7B         [ 2] 1129 	jp tb_error 
      000527                       1130 3$:	
      000527 93               [ 1] 1131 	ldw x,y 
      000528 CD 0B F0         [ 4] 1132 	call get_token 
      00052B A1 00            [ 1] 1133 	cp a,#TK_NONE 
      00052D 26 ED            [ 1] 1134 	jrne 2$ 
                                   1135 ; compilation completed  
      00052F 72 A2 16 E0      [ 2] 1136 	subw y,#pad
      000533 90 9F            [ 1] 1137     ld a,yl
      000535 AE 16 E0         [ 2] 1138 	ldw x,#pad 
      000538 CF 00 17         [ 2] 1139 	ldw ptr16,x 
      00053B E7 02            [ 1] 1140 	ld (2,x),a 
      00053D FE               [ 2] 1141 	ldw x,(x)
      00053E 27 09            [ 1] 1142 	jreq 10$
      000540 CD 04 7F         [ 4] 1143 	call insert_line
      000543 72 5F 00 03      [ 1] 1144 	clr  count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000547 20 0F            [ 2] 1145 	jra  11$ 
      000549                       1146 10$: ; line# is zero 
      000549 CE 00 17         [ 2] 1147 	ldw x,ptr16  
      00054C CF 00 04         [ 2] 1148 	ldw basicptr,x 
      00054F E6 02            [ 1] 1149 	ld a,(2,x)
      000551 C7 00 03         [ 1] 1150 	ld count,a 
      000554 35 03 00 01      [ 1] 1151 	mov in,#3 
      000558                       1152 11$:
      000558                       1153 	_drop VSIZE 
      000558 5B 02            [ 2]    1     addw sp,#VSIZE 
      00055A 72 1B 00 23      [ 1] 1154 	bres flags,#FCOMP 
      00055E 81               [ 4] 1155 	ret 
                                   1156 
                                   1157 ;------------------------------------
                                   1158 ;  set all variables to zero 
                                   1159 ; input:
                                   1160 ;   none 
                                   1161 ; output:
                                   1162 ;	none
                                   1163 ;------------------------------------
      00055F                       1164 clear_vars:
      00055F AE 00 2F         [ 2] 1165 	ldw x,#vars 
      000562 90 AE 00 34      [ 2] 1166 	ldw y,#2*26 
      000566 7F               [ 1] 1167 1$:	clr (x)
      000567 5C               [ 2] 1168 	incw x 
      000568 90 5A            [ 2] 1169 	decw y 
      00056A 26 FA            [ 1] 1170 	jrne 1$
      00056C 81               [ 4] 1171 	ret 
                                   1172 
                                   1173 ;-------------------------------------
                                   1174 ; check if A is a letter 
                                   1175 ; input:
                                   1176 ;   A 			character to test 
                                   1177 ; output:
                                   1178 ;   C flag      1 true, 0 false 
                                   1179 ;-------------------------------------
      00056D                       1180 is_alpha:
      00056D A1 41            [ 1] 1181 	cp a,#'A 
      00056F 8C               [ 1] 1182 	ccf 
      000570 24 0B            [ 1] 1183 	jrnc 9$ 
      000572 A1 5B            [ 1] 1184 	cp a,#'Z+1 
      000574 25 07            [ 1] 1185 	jrc 9$ 
      000576 A1 61            [ 1] 1186 	cp a,#'a 
      000578 8C               [ 1] 1187 	ccf 
      000579 24 02            [ 1] 1188 	jrnc 9$
      00057B A1 7B            [ 1] 1189 	cp a,#'z+1
      00057D 81               [ 4] 1190 9$: ret 	
                                   1191 
                                   1192 ;------------------------------------
                                   1193 ; check if character in {'0'..'9'}
                                   1194 ; input:
                                   1195 ;    A  character to test
                                   1196 ; output:
                                   1197 ;    Carry  0 not digit | 1 digit
                                   1198 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00057E                       1199 is_digit:
      00057E A1 30            [ 1] 1200 	cp a,#'0
      000580 25 03            [ 1] 1201 	jrc 1$
      000582 A1 3A            [ 1] 1202     cp a,#'9+1
      000584 8C               [ 1] 1203 	ccf 
      000585 8C               [ 1] 1204 1$:	ccf 
      000586 81               [ 4] 1205     ret
                                   1206 
                                   1207 ;-------------------------------------
                                   1208 ; return true if character in  A 
                                   1209 ; is letter or digit.
                                   1210 ; input:
                                   1211 ;   A     ASCII character 
                                   1212 ; output:
                                   1213 ;   A     no change 
                                   1214 ;   Carry    0 false| 1 true 
                                   1215 ;--------------------------------------
      000587                       1216 is_alnum:
      000587 CD 05 7E         [ 4] 1217 	call is_digit
      00058A 25 03            [ 1] 1218 	jrc 1$ 
      00058C CD 05 6D         [ 4] 1219 	call is_alpha
      00058F 81               [ 4] 1220 1$:	ret 
                                   1221 
                                   1222 
                                   1223 ;-------------------------------------
                                   1224 ;  program initialization entry point 
                                   1225 ;-------------------------------------
                           000001  1226 	MAJOR=1
                           000000  1227 	MINOR=0
      000590 0A 0A 54 69 6E 79 20  1228 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0005D6                       1229 cold_start:
                                   1230 ;set stack 
      0005D6 AE 17 FF         [ 2] 1231 	ldw x,#STACK_EMPTY
      0005D9 94               [ 1] 1232 	ldw sp,x   
                                   1233 ; clear all ram 
      0005DA 7F               [ 1] 1234 0$: clr (x)
      0005DB 5A               [ 2] 1235 	decw x 
      0005DC 26 FC            [ 1] 1236 	jrne 0$
                                   1237 ; activate pull up on all inputs 
      0005DE A6 FF            [ 1] 1238 	ld a,#255 
      0005E0 C7 50 03         [ 1] 1239 	ld PA_CR1,a 
      0005E3 C7 50 08         [ 1] 1240 	ld PB_CR1,a 
      0005E6 C7 50 0D         [ 1] 1241 	ld PC_CR1,a 
      0005E9 C7 50 12         [ 1] 1242 	ld PD_CR1,a 
      0005EC C7 50 17         [ 1] 1243 	ld PE_CR1,a 
      0005EF C7 50 1C         [ 1] 1244 	ld PF_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005F2 C7 50 21         [ 1] 1245 	ld PG_CR1,a 
      0005F5 C7 50 2B         [ 1] 1246 	ld PI_CR1,a
                                   1247 ; set LD2 pin as output and turn it on
      0005F8 72 1A 50 0D      [ 1] 1248     bset PC_CR1,#LED2_BIT
      0005FC 72 1A 50 0E      [ 1] 1249     bset PC_CR2,#LED2_BIT
      000600 72 1A 50 0C      [ 1] 1250     bset PC_DDR,#LED2_BIT
      000604 72 1A 50 0A      [ 1] 1251 	bset PC_ODR,#LED2_BIT 
                                   1252 ; disable schmitt triggers on Arduino CN4 analog inputs
      000608 55 00 3F 54 07   [ 1] 1253 	mov ADC_TDRL,0x3f
                                   1254 ; disable peripherals clocks
                                   1255 ;	clr CLK_PCKENR1 
                                   1256 ;	clr CLK_PCKENR2
      00060D 72 5F 50 F2      [ 1] 1257 	clr AWU_TBR 
      000611 72 14 50 CA      [ 1] 1258 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1259 ; select internal clock no divisor: 16 Mhz 	
      000615 A6 E1            [ 1] 1260 	ld a,#CLK_SWR_HSI 
      000617 5F               [ 1] 1261 	clrw x  
      000618 CD 00 B5         [ 4] 1262     call clock_init 
      00061B CD 00 D8         [ 4] 1263 	call timer4_init
      00061E CD 00 CB         [ 4] 1264 	call timer2_init
                                   1265 ; UART1 at 115200 BAUD
      000621 CD 02 7D         [ 4] 1266 	call uart1_init
                                   1267 ; activate PE_4 (user button interrupt)
      000624 72 18 50 18      [ 1] 1268     bset PE_CR2,#USR_BTN_BIT 
                                   1269 ; display system information
      000628 AE 05 90         [ 2] 1270 	ldw x,#software 
      00062B CD 00 00         [ 4] 1271 	call puts 
      00062E A6 01            [ 1] 1272 	ld a,#MAJOR 
      000630 C7 00 0D         [ 1] 1273 	ld acc8,a 
      000633 5F               [ 1] 1274 	clrw x 
      000634 CF 00 0B         [ 2] 1275 	ldw acc24,x
      000637 72 5F 00 24      [ 1] 1276 	clr tab_width  
      00063B 35 0A 00 0A      [ 1] 1277 	mov base, #10 
      00063F CD 09 DC         [ 4] 1278 	call prti24 
      000642 A6 2E            [ 1] 1279 	ld a,#'.
      000644 CD 02 C0         [ 4] 1280 	call putc 
      000647 A6 00            [ 1] 1281 	ld a,#MINOR 
      000649 C7 00 0D         [ 1] 1282 	ld acc8,a 
      00064C 5F               [ 1] 1283 	clrw x 
      00064D CF 00 0B         [ 2] 1284 	ldw acc24,x 
      000650 CD 09 DC         [ 4] 1285 	call prti24
      000653 A6 0D            [ 1] 1286 	ld a,#CR 
      000655 CD 02 C0         [ 4] 1287 	call putc
      000658 CD 19 FD         [ 4] 1288 	call seek_fdrive 
      00065B 9A               [ 1] 1289 	rim 
      00065C 72 5C 00 15      [ 1] 1290 	inc seedy+1 
      000660 72 5C 00 13      [ 1] 1291 	inc seedx+1 
      000664 CD 06 E5         [ 4] 1292 	call clear_basic
      000667 CD 12 0A         [ 4] 1293 	call ubound 
                                   1294 ;	jra 2$	
      00066A CD 18 4B         [ 4] 1295 	call beep_1khz  
      00066D 72 1B 50 0A      [ 1] 1296 2$:	bres PC_ODR,#LED2_BIT	
      000671 CD 06 7A         [ 4] 1297 	call warm_init
      000674 CD 06 A7         [ 4] 1298 	call load_autorun
      000677 CC 09 03         [ 2] 1299     jp cmd_line  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1300 
      00067A                       1301 warm_init:
      00067A 72 5F 00 23      [ 1] 1302 	clr flags 
      00067E 72 5F 00 20      [ 1] 1303 	clr loop_depth 
      000682 35 04 00 24      [ 1] 1304 	mov tab_width,#TAB_WIDTH 
      000686 35 0A 00 0A      [ 1] 1305 	mov base,#10 
      00068A AE 00 00         [ 2] 1306 	ldw x,#0 
      00068D CF 00 04         [ 2] 1307 	ldw basicptr,x 
      000690 CF 00 00         [ 2] 1308 	ldw in.w,x 
      000693 72 5F 00 03      [ 1] 1309 	clr count
      000697 81               [ 4] 1310 	ret 
                                   1311 
                                   1312 ;--------------------------
                                   1313 ; called by tb_error when
                                   1314 ; flag FAUTORUN is set.
                                   1315 ; There is a bug in autorun 
                                   1316 ; program so cancel it.
                                   1317 ;---------------------------
      000698                       1318 cancel_autorun:
      000698 AE 40 00         [ 2] 1319 	ldw x,#AUTORUN_NAME 
      00069B CF 00 17         [ 2] 1320 	ldw farptr+1,x 
      00069E 4F               [ 1] 1321 	clr a
      00069F 5F               [ 1] 1322 	clrw x  
      0006A0 C7 00 16         [ 1] 1323 	ld farptr,a 
      0006A3 CD 01 E5         [ 4] 1324 	call write_byte 
      0006A6 81               [ 4] 1325 	ret 
                                   1326 
                                   1327 
                                   1328 ;--------------------------
                                   1329 ; if autorun file defined 
                                   1330 ; in eeprom address AUTORUN_NAME 
                                   1331 ; load and run it.
                                   1332 ;-------------------------
      0006A7                       1333 load_autorun:
      0006A7 90 AE 40 00      [ 2] 1334 	ldw y,#AUTORUN_NAME
      0006AB 90 F6            [ 1] 1335 	ld a,(y)
      0006AD 27 20            [ 1] 1336 	jreq 9$
      0006AF CD 1A 63         [ 4] 1337 	call search_file
      0006B2 25 05            [ 1] 1338 	jrc 2$ 
                                   1339 ; if file doesn't exit
      0006B4 CD 06 98         [ 4] 1340 	call cancel_autorun
      0006B7 20 16            [ 2] 1341 	jra 9$ 
      0006B9 CD 1B 7C         [ 4] 1342 2$:	call load_file
      0006BC AE 40 00         [ 2] 1343 	ldw x,#AUTORUN_NAME 
      0006BF CD 00 00         [ 4] 1344 	call puts
      0006C2 AE 06 D0         [ 2] 1345 	ldw x,#autorun_msg 
      0006C5 CD 00 00         [ 4] 1346 	call puts 
      0006C8 72 1C 00 23      [ 1] 1347 	bset flags,#FAUTORUN 
      0006CC CC 18 1D         [ 2] 1348 	jp run_it    
      0006CF 81               [ 4] 1349 9$: ret 	
                                   1350 
      0006D0 20 6C 6F 61 64 65 64  1351 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1352 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1353 ; reset BASIC text variables 
                                   1354 ; and clear variables 
                                   1355 ;---------------------------
      0006E5                       1356 clear_basic:
      0006E5 72 5F 00 03      [ 1] 1357 	clr count
      0006E9 72 5F 00 01      [ 1] 1358 	clr in  
      0006ED AE 00 63         [ 2] 1359 	ldw x,#free_ram 
      0006F0 CF 00 1C         [ 2] 1360 	ldw txtbgn,x 
      0006F3 CF 00 1E         [ 2] 1361 	ldw txtend,x 
      0006F6 CD 05 5F         [ 4] 1362 	call clear_vars 
      0006F9 81               [ 4] 1363 	ret 
                                   1364 
                                   1365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1366 ;;   Tiny BASIC error messages     ;;
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006FA                       1368 err_msg:
      0006FA 00 00 07 1A 07 27 07  1369 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             35 07 4E 07 5D
      000706 07 73 07 89 07 A3 07  1370 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B4 07 C5
      000710 07 D1 08 04 08 14 08  1371 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             28 08 3B
                                   1372 
      00071A 4D 65 6D 6F 72 79 20  1373 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000727 73 79 6E 74 61 78 20  1374 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000735 6D 61 74 68 20 6F 70  1375 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00074E 64 69 76 69 73 69 6F  1376 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00075D 69 6E 76 61 6C 69 64  1377 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000773 72 75 6E 20 74 69 6D  1378 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      000789 63 6F 6D 6D 61 6E 64  1379 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0007A3 64 75 70 6C 69 63 61  1380 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0007B4 46 69 6C 65 20 6E 6F  1381 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0007C5 62 61 64 20 76 61 6C  1382 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0007D1 46 69 6C 65 20 69 6E  1383 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000804 4E 6F 20 64 61 74 61  1384 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000814 4E 6F 20 70 72 6F 67  1385 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000828 46 69 6C 65 20 73 79  1386 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      00083B 42 75 66 66 65 72 20  1387 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1388 
      000848 72 75 6E 20 74 69 6D  1389 rt_msg: .asciz "run time error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000859 63 6F 6D 70 69 6C 65  1390 comp_msg: .asciz "compile error, "
             20 65 72 72 6F 72 2C
             20 00
      000869 6C 61 73 74 20 74 6F  1391 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1392 
      000879                       1393 syntax_error:
      000879 A6 02            [ 1] 1394 	ld a,#ERR_SYNTAX 
                                   1395 
      00087B                       1396 tb_error:
      00087B 72 0A 00 23 47   [ 2] 1397 	btjt flags,#FCOMP,1$
      000880 88               [ 1] 1398 	push a 
      000881 AE 08 48         [ 2] 1399 	ldw x, #rt_msg 
      000884 CD 00 00         [ 4] 1400 	call puts 
      000887 84               [ 1] 1401 	pop a 
      000888 AE 06 FA         [ 2] 1402 	ldw x, #err_msg 
      00088B 72 5F 00 0C      [ 1] 1403 	clr acc16 
      00088F 48               [ 1] 1404 	sll a
      000890 72 59 00 0C      [ 1] 1405 	rlc acc16  
      000894 C7 00 0D         [ 1] 1406 	ld acc8, a 
      000897 72 BB 00 0C      [ 2] 1407 	addw x,acc16 
      00089B FE               [ 2] 1408 	ldw x,(x)
      00089C CD 00 00         [ 4] 1409 	call puts
      00089F CE 00 04         [ 2] 1410 	ldw x,basicptr
      0008A2 C6 00 01         [ 1] 1411 	ld a,in 
      0008A5 CD 14 DE         [ 4] 1412 	call prt_basic_line
      0008A8 AE 08 69         [ 2] 1413 	ldw x,#tk_id 
      0008AB CD 00 00         [ 4] 1414 	call puts 
      0008AE C6 00 02         [ 1] 1415 	ld a,in.saved 
      0008B1 5F               [ 1] 1416 	clrw x 
      0008B2 97               [ 1] 1417 	ld xl,a 
      0008B3 72 BB 00 04      [ 2] 1418 	addw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008B7 F6               [ 1] 1419 	ld a,(x)
      0008B8 5F               [ 1] 1420 	clrw x 
      0008B9 97               [ 1] 1421 	ld xl,a 
      0008BA CD 09 CC         [ 4] 1422 	call print_int
      0008BD 72 0D 00 23 3A   [ 2] 1423 	btjf flags,#FAUTORUN ,6$
      0008C2 CD 06 98         [ 4] 1424 	call cancel_autorun  
      0008C5 20 35            [ 2] 1425 	jra 6$
      0008C7                       1426 1$:	
      0008C7 88               [ 1] 1427 	push a 
      0008C8 AE 08 59         [ 2] 1428 	ldw x,#comp_msg
      0008CB CD 00 00         [ 4] 1429 	call puts 
      0008CE 84               [ 1] 1430 	pop a 
      0008CF AE 06 FA         [ 2] 1431 	ldw x, #err_msg 
      0008D2 72 5F 00 0C      [ 1] 1432 	clr acc16 
      0008D6 48               [ 1] 1433 	sll a
      0008D7 72 59 00 0C      [ 1] 1434 	rlc acc16  
      0008DB C7 00 0D         [ 1] 1435 	ld acc8, a 
      0008DE 72 BB 00 0C      [ 2] 1436 	addw x,acc16 
      0008E2 FE               [ 2] 1437 	ldw x,(x)
      0008E3 CD 00 00         [ 4] 1438 	call puts
      0008E6 AE 16 90         [ 2] 1439 	ldw x,#tib
      0008E9 CD 00 00         [ 4] 1440 	call puts 
      0008EC A6 0D            [ 1] 1441 	ld a,#CR 
      0008EE CD 02 C0         [ 4] 1442 	call putc
      0008F1 CE 00 00         [ 2] 1443 	ldw x,in.w
      0008F4 CD 00 00         [ 4] 1444 	call spaces
      0008F7 A6 5E            [ 1] 1445 	ld a,#'^
      0008F9 CD 02 C0         [ 4] 1446 	call putc 
      0008FC AE 17 FF         [ 2] 1447 6$: ldw x,#STACK_EMPTY 
      0008FF 94               [ 1] 1448     ldw sp,x
      000900                       1449 warm_start:
      000900 CD 06 7A         [ 4] 1450 	call warm_init
                                   1451 ;----------------------------
                                   1452 ;   BASIC interpreter
                                   1453 ;----------------------------
      000903                       1454 cmd_line: ; user interface 
      000903 A6 0D            [ 1] 1455 	ld a,#CR 
      000905 CD 02 C0         [ 4] 1456 	call putc 
      000908 A6 3E            [ 1] 1457 	ld a,#'> 
      00090A CD 02 C0         [ 4] 1458 	call putc
      00090D CD 00 00         [ 4] 1459 	call readln
      000910 72 5D 00 03      [ 1] 1460 	tnz count 
      000914 27 ED            [ 1] 1461 	jreq cmd_line
      000916 CD 04 EC         [ 4] 1462 	call compile
                                   1463 ; if text begin with a line number
                                   1464 ; the compiler set count to zero    
                                   1465 ; so code is not interpreted
      000919 72 5D 00 03      [ 1] 1466 	tnz count 
      00091D 27 E4            [ 1] 1467 	jreq cmd_line
                                   1468 
                                   1469 ; if direct command 
                                   1470 ; it's ready to interpret 
                                   1471 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1472 ;; This is the interpreter loop
                                   1473 ;; for each BASIC code line. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1474 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00091F                       1475 interpreter: 
      00091F C6 00 01         [ 1] 1476 	ld a,in 
      000922 C1 00 03         [ 1] 1477 	cp a,count 
      000925 2B 1D            [ 1] 1478 	jrmi interp_loop
      000927                       1479 next_line:
      000927 72 01 00 23 D7   [ 2] 1480 	btjf flags, #FRUN, cmd_line
      00092C CE 00 04         [ 2] 1481 	ldw x,basicptr
      00092F 72 BB 00 00      [ 2] 1482 	addw x,in.w 
      000933 C3 00 1E         [ 2] 1483 	cpw x,txtend 
      000936 2A C8            [ 1] 1484 	jrpl warm_start
      000938 CF 00 04         [ 2] 1485 	ldw basicptr,x ; start of next line  
      00093B E6 02            [ 1] 1486 	ld a,(2,x)
      00093D C7 00 03         [ 1] 1487 	ld count,a 
      000940 35 03 00 01      [ 1] 1488 	mov in,#3 ; skip first 3 bytes of line 
      000944                       1489 interp_loop: 
      000944 CD 09 6B         [ 4] 1490 	call next_token
      000947 A1 00            [ 1] 1491 	cp a,#TK_NONE 
      000949 27 DC            [ 1] 1492 	jreq next_line 
      00094B A1 80            [ 1] 1493 	cp a,#TK_CMD
      00094D 26 03            [ 1] 1494 	jrne 1$
      00094F FD               [ 4] 1495 	call (x) 
      000950 20 F2            [ 2] 1496 	jra interp_loop 
      000952                       1497 1$:	 
      000952 A1 85            [ 1] 1498 	cp a,#TK_VAR
      000954 26 05            [ 1] 1499 	jrne 2$
      000956 CD 12 3D         [ 4] 1500 	call let_var  
      000959 20 E9            [ 2] 1501 	jra interp_loop 
      00095B                       1502 2$:	
      00095B A1 06            [ 1] 1503 	cp a,#TK_ARRAY 
      00095D 26 05            [ 1] 1504 	jrne 3$
      00095F CD 12 3A         [ 4] 1505 	call let_array 
      000962 20 E0            [ 2] 1506 	jra interp_loop
      000964                       1507 3$:	
      000964 A1 01            [ 1] 1508 	cp a,#TK_COLON 
      000966 27 DC            [ 1] 1509 	jreq interp_loop 
      000968 CC 08 79         [ 2] 1510 	jp syntax_error 
                                   1511 
                                   1512 		
                                   1513 ;--------------------------
                                   1514 ; extract next token from
                                   1515 ; token list 
                                   1516 ; basicptr -> base address 
                                   1517 ; in  -> offset in list array 
                                   1518 ; output:
                                   1519 ;   A 		token attribute
                                   1520 ;   X 		token value if there is one
                                   1521 ;----------------------------------------
      00096B                       1522 next_token:
      00096B 5F               [ 1] 1523 	clrw x 
      00096C C6 00 01         [ 1] 1524 	ld a,in 
      00096F C0 00 03         [ 1] 1525 	sub a,count ; don't replace sub by cp!  
      000972 2B 01            [ 1] 1526 	jrmi 0$
      000974 81               [ 4] 1527 	ret  ; end of BASIC line 
      000975                       1528 0$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000975 55 00 01 00 02   [ 1] 1529 	mov in.saved,in 
      00097A 90 CE 00 04      [ 2] 1530 	ldw y,basicptr 
      00097E 91 D6 00         [ 4] 1531 	ld a,([in.w],y)
      000981 72 5C 00 01      [ 1] 1532 	inc in  
      000985 4D               [ 1] 1533 	tnz a 
      000986 2B 2A            [ 1] 1534 	jrmi 6$
      000988 A1 06            [ 1] 1535 	cp a,#TK_ARRAY
      00098A 2A 3F            [ 1] 1536 	jrpl 9$  ; no attribute for these
      00098C A1 01            [ 1] 1537 	cp a,#TK_COLON
      00098E 27 3B            [ 1] 1538 	jreq 9$  
      000990                       1539 1$: ; 
      000990 A1 03            [ 1] 1540 	cp a,#TK_CHAR
      000992 26 0A            [ 1] 1541 	jrne 2$
      000994 41               [ 1] 1542 	exg a,xl
      000995 91 D6 00         [ 4] 1543 	ld a,([in.w],y)
      000998 72 5C 00 01      [ 1] 1544 	inc in 
      00099C 41               [ 1] 1545 	exg a,xl  
      00099D 81               [ 4] 1546 	ret
      00099E A1 02            [ 1] 1547 2$:	cp a,#TK_QSTR 
      0009A0 26 29            [ 1] 1548 	jrne 9$
      0009A2 93               [ 1] 1549 	ldw x,y 
      0009A3 72 BB 00 00      [ 2] 1550 	addw x,in.w ; pointer to string 
                                   1551 ; move pointer after string 
      0009A7 91 6D 00         [ 4] 1552 3$:	tnz ([in.w],y)
      0009AA 27 1B            [ 1] 1553 	jreq 8$
      0009AC 72 5C 00 01      [ 1] 1554 	inc in 
      0009B0 20 F5            [ 2] 1555 	jra 3$
      0009B2                       1556 6$: 
      0009B2 72 B9 00 00      [ 2] 1557 	addw y,in.w 
      0009B6 90 FE            [ 2] 1558 	ldw y,(y)
      0009B8 A1 84            [ 1] 1559 	cp a,#TK_INTGR
      0009BA 2A 06            [ 1] 1560 	jrpl 7$
      0009BC 72 A9 26 C1      [ 2] 1561 	addw y,#code_addr
      0009C0 90 FE            [ 2] 1562 	ldw y,(y) 
      0009C2 51               [ 1] 1563 7$:	exgw x,y 
      0009C3 72 5C 00 01      [ 1] 1564 	inc in
      0009C7 72 5C 00 01      [ 1] 1565 8$:	inc in 
      0009CB                       1566 9$: 
      0009CB 81               [ 4] 1567 	ret	
                                   1568 
                                   1569 ;-----------------------------------
                                   1570 ; print a 16 bit integer 
                                   1571 ; using variable 'base' as conversion
                                   1572 ; format.
                                   1573 ; input:
                                   1574 ;   X       integer to print 
                                   1575 ;   'base'    conversion base 
                                   1576 ; output:
                                   1577 ;   none 
                                   1578 ;-----------------------------------
      0009CC                       1579 print_int:
      0009CC 72 5F 00 0B      [ 1] 1580 	clr acc24 
      0009D0 CF 00 0C         [ 2] 1581 	ldw acc16,x 
      0009D3 72 0F 00 0C 04   [ 2] 1582 	btjf acc16,#7,prti24
      0009D8 72 53 00 0B      [ 1] 1583 	cpl acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1584 
                                   1585 ;------------------------------------
                                   1586 ; print integer in acc24 
                                   1587 ; input:
                                   1588 ;	acc24 		integer to print 
                                   1589 ;	'base' 		numerical base for conversion 
                                   1590 ;   'tab_width' field width 
                                   1591 ;  output:
                                   1592 ;    A          string length
                                   1593 ;------------------------------------
      0009DC                       1594 prti24:
      0009DC CD 09 E8         [ 4] 1595     call itoa  ; conversion entier en  .asciz
      0009DF CD 12 FA         [ 4] 1596 	call right_align  
      0009E2 88               [ 1] 1597 	push a 
      0009E3 CD 00 00         [ 4] 1598 	call puts
      0009E6 84               [ 1] 1599 	pop a 
      0009E7 81               [ 4] 1600     ret	
                                   1601 
                                   1602 ;------------------------------------
                                   1603 ; convert integer in acc24 to string
                                   1604 ; input:
                                   1605 ;   'base'	conversion base 
                                   1606 ;	acc24	integer to convert
                                   1607 ; output:
                                   1608 ;   X  		pointer to first char of string
                                   1609 ;   A       string length
                                   1610 ;------------------------------------
                           000001  1611 	SIGN=1  ; integer sign 
                           000002  1612 	LEN=2 
                           000003  1613 	PSTR=3
                           000004  1614 	VSIZE=4 ;locals size
      0009E8                       1615 itoa:
      0009E8                       1616 	_vars VSIZE
      0009E8 52 04            [ 2]    1     sub sp,#VSIZE 
      0009EA 0F 02            [ 1] 1617 	clr (LEN,sp) ; string length  
      0009EC 0F 01            [ 1] 1618 	clr (SIGN,sp)    ; sign
      0009EE C6 00 0A         [ 1] 1619 	ld a,base 
      0009F1 A1 0A            [ 1] 1620 	cp a,#10
      0009F3 26 0A            [ 1] 1621 	jrne 1$
                                   1622 	; base 10 string display with negative sign if bit 23==1
      0009F5 72 0F 00 0B 05   [ 2] 1623 	btjf acc24,#7,1$
      0009FA 03 01            [ 1] 1624 	cpl (SIGN,sp)
      0009FC CD 0A A4         [ 4] 1625 	call neg_acc24
      0009FF                       1626 1$:
                                   1627 ; initialize string pointer 
      0009FF AE 16 90         [ 2] 1628 	ldw x,#tib 
      000A02 1C 00 50         [ 2] 1629 	addw x,#TIB_SIZE
      000A05 5A               [ 2] 1630 	decw x 
      000A06 7F               [ 1] 1631 	clr (x)
      000A07                       1632 itoa_loop:
      000A07 C6 00 0A         [ 1] 1633     ld a,base
      000A0A 1F 03            [ 2] 1634 	ldw (PSTR,sp),x 
      000A0C CD 0A 42         [ 4] 1635     call divu24_8 ; acc24/A 
      000A0F 1E 03            [ 2] 1636 	ldw x,(PSTR,sp)
      000A11 AB 30            [ 1] 1637     add a,#'0  ; remainder of division
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000A13 A1 3A            [ 1] 1638     cp a,#'9+1
      000A15 2B 02            [ 1] 1639     jrmi 2$
      000A17 AB 07            [ 1] 1640     add a,#7 
      000A19                       1641 2$:	
      000A19 5A               [ 2] 1642 	decw x
      000A1A F7               [ 1] 1643     ld (x),a
      000A1B 0C 02            [ 1] 1644 	inc (LEN,sp)
                                   1645 	; if acc24==0 conversion done
      000A1D C6 00 0B         [ 1] 1646 	ld a,acc24
      000A20 CA 00 0C         [ 1] 1647 	or a,acc16
      000A23 CA 00 0D         [ 1] 1648 	or a,acc8
      000A26 26 DF            [ 1] 1649     jrne itoa_loop
                                   1650 	;conversion done, next add '$' or '-' as required
      000A28 C6 00 0A         [ 1] 1651 	ld a,base 
      000A2B A1 10            [ 1] 1652 	cp a,#16
      000A2D 27 08            [ 1] 1653 	jreq 8$
      000A2F 7B 01            [ 1] 1654 	ld a,(SIGN,sp)
      000A31 27 0A            [ 1] 1655     jreq 10$
      000A33 A6 2D            [ 1] 1656     ld a,#'-
      000A35 20 02            [ 2] 1657 	jra 9$ 
      000A37 A6 24            [ 1] 1658 8$: ld a,#'$ 
      000A39 5A               [ 2] 1659 9$: decw x
      000A3A F7               [ 1] 1660     ld (x),a
      000A3B 0C 02            [ 1] 1661 	inc (LEN,sp)
      000A3D                       1662 10$:
      000A3D 7B 02            [ 1] 1663 	ld a,(LEN,sp)
      000A3F                       1664 	_drop VSIZE
      000A3F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000A41 81               [ 4] 1665 	ret
                                   1666 
                                   1667 ;-------------------------------------
                                   1668 ; divide uint24_t by uint8_t
                                   1669 ; used to convert uint24_t to string
                                   1670 ; input:
                                   1671 ;	acc24	dividend
                                   1672 ;   A 		divisor
                                   1673 ; output:
                                   1674 ;   acc24	quotient
                                   1675 ;   A		remainder
                                   1676 ;------------------------------------- 
                                   1677 ; offset  on sp of arguments and locals
                           000001  1678 	U8   = 1   ; divisor on stack
                           000001  1679 	VSIZE =1
      000A42                       1680 divu24_8:
      000A42 89               [ 2] 1681 	pushw x ; save x
      000A43 88               [ 1] 1682 	push a 
                                   1683 	; ld dividend UU:MM bytes in X
      000A44 C6 00 0B         [ 1] 1684 	ld a, acc24
      000A47 95               [ 1] 1685 	ld xh,a
      000A48 C6 00 0C         [ 1] 1686 	ld a,acc24+1
      000A4B 97               [ 1] 1687 	ld xl,a
      000A4C 7B 01            [ 1] 1688 	ld a,(U8,SP) ; divisor
      000A4E 62               [ 2] 1689 	div x,a ; UU:MM/U8
      000A4F 88               [ 1] 1690 	push a  ;save remainder
      000A50 9E               [ 1] 1691 	ld a,xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A51 C7 00 0B         [ 1] 1692 	ld acc24,a
      000A54 9F               [ 1] 1693 	ld a,xl
      000A55 C7 00 0C         [ 1] 1694 	ld acc24+1,a
      000A58 84               [ 1] 1695 	pop a
      000A59 95               [ 1] 1696 	ld xh,a
      000A5A C6 00 0D         [ 1] 1697 	ld a,acc24+2
      000A5D 97               [ 1] 1698 	ld xl,a
      000A5E 7B 01            [ 1] 1699 	ld a,(U8,sp) ; divisor
      000A60 62               [ 2] 1700 	div x,a  ; R:LL/U8
      000A61 6B 01            [ 1] 1701 	ld (U8,sp),a ; save remainder
      000A63 9F               [ 1] 1702 	ld a,xl
      000A64 C7 00 0D         [ 1] 1703 	ld acc24+2,a
      000A67 84               [ 1] 1704 	pop a
      000A68 85               [ 2] 1705 	popw x
      000A69 81               [ 4] 1706 	ret
                                   1707 
                                   1708 ;--------------------------------------
                                   1709 ; unsigned multiply uint24_t by uint8_t
                                   1710 ; use to convert numerical string to uint24_t
                                   1711 ; input:
                                   1712 ;	acc24	uint24_t 
                                   1713 ;   A		uint8_t
                                   1714 ; output:
                                   1715 ;   acc24   A*acc24
                                   1716 ;-------------------------------------
                                   1717 ; local variables offset  on sp
                           000003  1718 	U8   = 3   ; A pushed on stack
                           000002  1719 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1720 	OVFH = 1  ; multiplication overflow high byte
                           000003  1721 	VSIZE = 3
      000A6A                       1722 mulu24_8:
      000A6A 89               [ 2] 1723 	pushw x    ; save X
                                   1724 	; local variables
      000A6B 88               [ 1] 1725 	push a     ; U8
      000A6C 5F               [ 1] 1726 	clrw x     ; initialize overflow to 0
      000A6D 89               [ 2] 1727 	pushw x    ; multiplication overflow
                                   1728 ; multiply low byte.
      000A6E C6 00 0D         [ 1] 1729 	ld a,acc24+2
      000A71 97               [ 1] 1730 	ld xl,a
      000A72 7B 03            [ 1] 1731 	ld a,(U8,sp)
      000A74 42               [ 4] 1732 	mul x,a
      000A75 9F               [ 1] 1733 	ld a,xl
      000A76 C7 00 0D         [ 1] 1734 	ld acc24+2,a
      000A79 9E               [ 1] 1735 	ld a, xh
      000A7A 6B 02            [ 1] 1736 	ld (OVFL,sp),a
                                   1737 ; multipy middle byte
      000A7C C6 00 0C         [ 1] 1738 	ld a,acc24+1
      000A7F 97               [ 1] 1739 	ld xl,a
      000A80 7B 03            [ 1] 1740 	ld a, (U8,sp)
      000A82 42               [ 4] 1741 	mul x,a
                                   1742 ; add overflow to this partial product
      000A83 72 FB 01         [ 2] 1743 	addw x,(OVFH,sp)
      000A86 9F               [ 1] 1744 	ld a,xl
      000A87 C7 00 0C         [ 1] 1745 	ld acc24+1,a
      000A8A 4F               [ 1] 1746 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A8B A9 00            [ 1] 1747 	adc a,#0
      000A8D 6B 01            [ 1] 1748 	ld (OVFH,sp),a
      000A8F 9E               [ 1] 1749 	ld a,xh
      000A90 6B 02            [ 1] 1750 	ld (OVFL,sp),a
                                   1751 ; multiply most signficant byte	
      000A92 C6 00 0B         [ 1] 1752 	ld a, acc24
      000A95 97               [ 1] 1753 	ld xl, a
      000A96 7B 03            [ 1] 1754 	ld a, (U8,sp)
      000A98 42               [ 4] 1755 	mul x,a
      000A99 72 FB 01         [ 2] 1756 	addw x, (OVFH,sp)
      000A9C 9F               [ 1] 1757 	ld a, xl
      000A9D C7 00 0B         [ 1] 1758 	ld acc24,a
      000AA0 5B 03            [ 2] 1759     addw sp,#VSIZE
      000AA2 85               [ 2] 1760 	popw x
      000AA3 81               [ 4] 1761 	ret
                                   1762 
                                   1763 ;------------------------------------
                                   1764 ;  two's complement acc24
                                   1765 ;  input:
                                   1766 ;		acc24 variable
                                   1767 ;  output:
                                   1768 ;		acc24 variable
                                   1769 ;-------------------------------------
      000AA4                       1770 neg_acc24:
      000AA4 72 53 00 0D      [ 1] 1771 	cpl acc24+2
      000AA8 72 53 00 0C      [ 1] 1772 	cpl acc24+1
      000AAC 72 53 00 0B      [ 1] 1773 	cpl acc24
      000AB0 A6 01            [ 1] 1774 	ld a,#1
      000AB2 CB 00 0D         [ 1] 1775 	add a,acc24+2
      000AB5 C7 00 0D         [ 1] 1776 	ld acc24+2,a
      000AB8 4F               [ 1] 1777 	clr a
      000AB9 C9 00 0C         [ 1] 1778 	adc a,acc24+1
      000ABC C7 00 0C         [ 1] 1779 	ld acc24+1,a 
      000ABF 4F               [ 1] 1780 	clr a 
      000AC0 C9 00 0B         [ 1] 1781 	adc a,acc24 
      000AC3 C7 00 0B         [ 1] 1782 	ld acc24,a 
      000AC6 81               [ 4] 1783 	ret
                                   1784 
                                   1785 
                                   1786 
                                   1787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1788 ;; compiler routines        ;;
                                   1789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1790 ;------------------------------------
                                   1791 ; parse quoted string 
                                   1792 ; input:
                                   1793 ;   Y 	pointer to tib 
                                   1794 ;   X   pointer to output buffer 
                                   1795 ; output:
                                   1796 ;	buffer   parsed string
                                   1797 ;------------------------------------
                           000001  1798 	PREV = 1
                           000002  1799 	CURR =2
                           000002  1800 	VSIZE=2
      000AC7                       1801 parse_quote: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AC7                       1802 	_vars VSIZE 
      000AC7 52 02            [ 2]    1     sub sp,#VSIZE 
      000AC9 4F               [ 1] 1803 	clr a
      000ACA 6B 01            [ 1] 1804 1$:	ld (PREV,sp),a 
      000ACC                       1805 2$:	
      000ACC 91 D6 00         [ 4] 1806 	ld a,([in.w],y)
      000ACF 27 24            [ 1] 1807 	jreq 6$
      000AD1 72 5C 00 01      [ 1] 1808 	inc in 
      000AD5 6B 02            [ 1] 1809 	ld (CURR,sp),a 
      000AD7 A6 5C            [ 1] 1810 	ld a,#'\
      000AD9 11 01            [ 1] 1811 	cp a, (PREV,sp)
      000ADB 26 0A            [ 1] 1812 	jrne 3$
      000ADD 0F 01            [ 1] 1813 	clr (PREV,sp)
      000ADF 7B 02            [ 1] 1814 	ld a,(CURR,sp)
      000AE1 AD 1C            [ 4] 1815 	callr convert_escape
      000AE3 F7               [ 1] 1816 	ld (x),a 
      000AE4 5C               [ 2] 1817 	incw x 
      000AE5 20 E5            [ 2] 1818 	jra 2$
      000AE7                       1819 3$:
      000AE7 7B 02            [ 1] 1820 	ld a,(CURR,sp)
      000AE9 A1 5C            [ 1] 1821 	cp a,#'\'
      000AEB 27 DD            [ 1] 1822 	jreq 1$
      000AED A1 22            [ 1] 1823 	cp a,#'"
      000AEF 27 04            [ 1] 1824 	jreq 6$ 
      000AF1 F7               [ 1] 1825 	ld (x),a 
      000AF2 5C               [ 2] 1826 	incw x 
      000AF3 20 D7            [ 2] 1827 	jra 2$
      000AF5                       1828 6$:
      000AF5 7F               [ 1] 1829 	clr (x)
      000AF6 5C               [ 2] 1830 	incw x 
      000AF7 90 93            [ 1] 1831 	ldw y,x 
      000AF9 5F               [ 1] 1832 	clrw x 
      000AFA A6 02            [ 1] 1833 	ld a,#TK_QSTR  
      000AFC                       1834 	_drop VSIZE
      000AFC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AFE 81               [ 4] 1835 	ret 
                                   1836 
                                   1837 ;---------------------------------------
                                   1838 ; called by parse_quote
                                   1839 ; subtitute escaped character 
                                   1840 ; by their ASCII value .
                                   1841 ; input:
                                   1842 ;   A  character following '\'
                                   1843 ; output:
                                   1844 ;   A  substitued char or same if not valid.
                                   1845 ;---------------------------------------
      000AFF                       1846 convert_escape:
      000AFF 89               [ 2] 1847 	pushw x 
      000B00 AE 0B 14         [ 2] 1848 	ldw x,#escaped 
      000B03 F1               [ 1] 1849 1$:	cp a,(x)
      000B04 27 06            [ 1] 1850 	jreq 2$
      000B06 7D               [ 1] 1851 	tnz (x)
      000B07 27 09            [ 1] 1852 	jreq 3$
      000B09 5C               [ 2] 1853 	incw x 
      000B0A 20 F7            [ 2] 1854 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B0C 1D 0B 14         [ 2] 1855 2$: subw x,#escaped 
      000B0F 9F               [ 1] 1856 	ld a,xl 
      000B10 AB 07            [ 1] 1857 	add a,#7
      000B12 85               [ 2] 1858 3$:	popw x 
      000B13 81               [ 4] 1859 	ret 
                                   1860 
      000B14 61 62 74 6E 76 66 72  1861 escaped: .asciz "abtnvfr"
             00
                                   1862 
                                   1863 ;-------------------------
                                   1864 ; integer parser 
                                   1865 ; input:
                                   1866 ;   X 		point to output buffer  
                                   1867 ;   Y 		point to tib 
                                   1868 ;   A 	    first digit|'$' 
                                   1869 ; output:  
                                   1870 ;   X 		integer 
                                   1871 ;   A 		TK_INTGR
                                   1872 ;   acc24   24 bits integer 
                                   1873 ;-------------------------
                           000001  1874 	BASE=1
                           000002  1875 	TCHAR=2 
                           000003  1876 	XSAVE=3
                           000004  1877 	VSIZE=4 
      000B1C                       1878 parse_integer: ; { -- n }
      000B1C 89               [ 2] 1879 	pushw x 	
      000B1D 4B 00            [ 1] 1880 	push #0 ; TCHAR
      000B1F 4B 0A            [ 1] 1881 	push #10 ; BASE=10
      000B21 A1 24            [ 1] 1882 	cp a,#'$
      000B23 26 04            [ 1] 1883 	jrne 2$ 
      000B25                       1884     _drop #1
      000B25 5B 01            [ 2]    1     addw sp,##1 
      000B27 4B 10            [ 1] 1885 	push #16  ; BASE=16
      000B29 F7               [ 1] 1886 2$:	ld (x),a 
      000B2A 5C               [ 2] 1887 	incw x 
      000B2B 91 D6 00         [ 4] 1888 	ld a,([in.w],y)
      000B2E 72 5C 00 01      [ 1] 1889 	inc in 
      000B32 CD 0D AF         [ 4] 1890 	call to_upper 
      000B35 6B 02            [ 1] 1891 	ld (TCHAR,sp),a 
      000B37 CD 05 7E         [ 4] 1892 	call is_digit 
      000B3A 25 ED            [ 1] 1893 	jrc 2$
      000B3C A6 10            [ 1] 1894 	ld a,#16 
      000B3E 11 01            [ 1] 1895 	cp a,(BASE,sp)
      000B40 26 0A            [ 1] 1896 	jrne 3$ 
      000B42 7B 02            [ 1] 1897 	ld a,(TCHAR,sp)
      000B44 A1 41            [ 1] 1898 	cp a,#'A 
      000B46 2B 04            [ 1] 1899 	jrmi 3$ 
      000B48 A1 47            [ 1] 1900 	cp a,#'G 
      000B4A 2B DD            [ 1] 1901 	jrmi 2$ 
      000B4C 72 5A 00 01      [ 1] 1902 3$: dec in 	
      000B50 7F               [ 1] 1903     clr (x)
      000B51 1E 03            [ 2] 1904 	ldw x,(XSAVE,sp)
      000B53 CD 0D BB         [ 4] 1905 	call atoi24
      000B56 90 93            [ 1] 1906 	ldw y,x 
      000B58 CE 00 0C         [ 2] 1907 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B5B A6 84            [ 1] 1908 	ld a,#TK_INTGR
      000B5D 90 FF            [ 2] 1909 	ldw (y),x 
      000B5F 72 A9 00 02      [ 2] 1910 	addw y,#2
      000B63                       1911 	_drop VSIZE  
      000B63 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B65 81               [ 4] 1912 	ret 	
                                   1913 
                                   1914 ;-------------------------
                                   1915 ; binary integer parser
                                   1916 ; build integer in acc24  
                                   1917 ; input:
                                   1918 ;   X 		point to output buffer  
                                   1919 ;   Y 		point to tib 
                                   1920 ;   A 	    '&' 
                                   1921 ; output:  
                                   1922 ;   buffer  TK_INTGR integer  
                                   1923 ;   X 		int16 
                                   1924 ;   A 		TK_INTGR
                                   1925 ;   acc24    int24 
                                   1926 ;-------------------------
                           000001  1927 	BINARY=1 ; 24 bits integer 
                           000003  1928 	VSIZE=3
      000B66                       1929 parse_binary: ; { -- n }
      000B66 4B 00            [ 1] 1930 	push #0
      000B68 4B 00            [ 1] 1931 	push #0
      000B6A 4B 00            [ 1] 1932 	push #0
      000B6C                       1933 2$:	
      000B6C 91 D6 00         [ 4] 1934 	ld a,([in.w],y)
      000B6F 72 5C 00 01      [ 1] 1935 	inc in 
      000B73 A1 30            [ 1] 1936 	cp a,#'0 
      000B75 27 06            [ 1] 1937 	jreq 3$
      000B77 A1 31            [ 1] 1938 	cp a,#'1 
      000B79 27 02            [ 1] 1939 	jreq 3$ 
      000B7B 20 0B            [ 2] 1940 	jra bin_exit 
      000B7D A0 30            [ 1] 1941 3$: sub a,#'0 
      000B7F 46               [ 1] 1942 	rrc a
      000B80 09 03            [ 1] 1943 	rlc (BINARY+2,sp) 
      000B82 09 02            [ 1] 1944 	rlc (BINARY+1,sp)
      000B84 09 01            [ 1] 1945 	rlc (BINARY,sp) 
      000B86 20 E4            [ 2] 1946 	jra 2$  
      000B88                       1947 bin_exit:
      000B88 72 5A 00 01      [ 1] 1948 	dec in 
      000B8C 90 93            [ 1] 1949 	ldw y,x
      000B8E 7B 01            [ 1] 1950 	ld a,(BINARY,sp)
      000B90 C7 00 0B         [ 1] 1951 	ld acc24,a 
      000B93 1E 02            [ 2] 1952 	ldw x,(BINARY+1,sp)
      000B95 CF 00 0C         [ 2] 1953 	ldw acc16,x
      000B98 90 FF            [ 2] 1954 	ldw (y),x 
      000B9A 72 A9 00 02      [ 2] 1955 	addw y,#2  
      000B9E A6 84            [ 1] 1956 	ld a,#TK_INTGR 	
      000BA0                       1957 	_drop VSIZE 
      000BA0 5B 03            [ 2]    1     addw sp,#VSIZE 
      000BA2 81               [ 4] 1958 	ret
                                   1959 
                                   1960 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1961 ;  token begin with a letter,
                                   1962 ;  is keyword or variable. 	
                                   1963 ; input:
                                   1964 ;   X 		point to pad 
                                   1965 ;   Y 		point to text
                                   1966 ;   A 	    first letter  
                                   1967 ; output:
                                   1968 ;   X		exec_addr|var_addr 
                                   1969 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   1970 ;   pad 	keyword|var_name  
                                   1971 ;--------------------------  
                           000001  1972 	XFIRST=1
                           000002  1973 	VSIZE=2
      000BA3                       1974 parse_keyword: 
      000BA3 89               [ 2] 1975 	pushw x 
      000BA4                       1976 kw_loop:	
      000BA4 CD 0D AF         [ 4] 1977 	call to_upper 
      000BA7 F7               [ 1] 1978 	ld (x),a 
      000BA8 5C               [ 2] 1979 	incw x 
      000BA9 91 D6 00         [ 4] 1980 	ld a,([in.w],y)
      000BAC 72 5C 00 01      [ 1] 1981 	inc in 
      000BB0 CD 05 6D         [ 4] 1982 	call is_alpha 
      000BB3 25 EF            [ 1] 1983 	jrc kw_loop
      000BB5 72 5A 00 01      [ 1] 1984 	dec in   
      000BB9 7F               [ 1] 1985 1$: clr (x)
      000BBA 1E 01            [ 2] 1986 	ldw x,(XFIRST,sp) 
      000BBC E6 01            [ 1] 1987 	ld a,(1,x)
      000BBE 26 13            [ 1] 1988 	jrne 2$
                                   1989 ; one letter variable name 
      000BC0 F6               [ 1] 1990 	ld a,(x) 
      000BC1 A0 41            [ 1] 1991 	sub a,#'A 
      000BC3 48               [ 1] 1992 	sll a 
      000BC4 88               [ 1] 1993 	push a 
      000BC5 4B 00            [ 1] 1994 	push #0
      000BC7 AE 00 2F         [ 2] 1995 	ldw x,#vars 
      000BCA 72 FB 01         [ 2] 1996 	addw x,(1,sp) ; X=var address 
      000BCD                       1997 	_drop 2 
      000BCD 5B 02            [ 2]    1     addw sp,#2 
      000BCF A6 85            [ 1] 1998 	ld a,#TK_VAR 
      000BD1 20 0E            [ 2] 1999 	jra 4$ 
      000BD3                       2000 2$: ; check for keyword, otherwise syntax error.
      000BD3                       2001 	_ldx_dict kword_dict ; dictionary entry point
      000BD3 AE 26 BB         [ 2]    1     ldw x,#kword_dict+2
      000BD6 16 01            [ 2] 2002 	ldw y,(XFIRST,sp) ; name to search for
      000BD8 CD 0F B9         [ 4] 2003 	call search_dict
      000BDB 4D               [ 1] 2004 	tnz a
      000BDC 26 03            [ 1] 2005 	jrne 4$ 
      000BDE CC 08 79         [ 2] 2006 	jp syntax_error
      000BE1                       2007 4$:	
      000BE1 16 01            [ 2] 2008 	ldw y,(XFIRST,sp)
      000BE3 90 F7            [ 1] 2009 	ld (y),a 
      000BE5 90 5C            [ 2] 2010 	incw y 
      000BE7 90 FF            [ 2] 2011 	ldw (y),x
      000BE9 72 A9 00 02      [ 2] 2012 	addw y,#2  
      000BED                       2013 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BED 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BEF 81               [ 4] 2014 	ret  	
                                   2015 
                                   2016 
                                   2017 ;------------------------------------
                                   2018 ; scan text for next token
                                   2019 ; input: 
                                   2020 ;	X 		pointer to buffer where 
                                   2021 ;	        token id and value are copied 
                                   2022 ; use:
                                   2023 ;	Y   pointer to text in tib 
                                   2024 ; output:
                                   2025 ;   A       token attribute 
                                   2026 ;   X 		token value
                                   2027 ;   Y       updated position in output buffer   
                                   2028 ;------------------------------------
                                   2029 	; use to check special character 
                                   2030 	.macro _case c t  
                                   2031 	ld a,#c 
                                   2032 	cp a,(TCHAR,sp) 
                                   2033 	jrne t
                                   2034 	.endm 
                                   2035 
                           000001  2036 	TCHAR=1
                           000002  2037 	ATTRIB=2
                           000002  2038 	VSIZE=2
      000BF0                       2039 get_token: 
      000BF0                       2040 	_vars VSIZE
      000BF0 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2041 ;	ld a,in 
                                   2042 ;	sub a,count
                                   2043 ;   jrmi 0$
                                   2044 ;	clr a 
                                   2045 ;	ret 
      000BF2                       2046 0$: 
      000BF2 90 AE 16 90      [ 2] 2047 	ldw y,#tib    	
      000BF6 A6 20            [ 1] 2048 	ld a,#SPACE
      000BF8 CD 0E 25         [ 4] 2049 	call skip
      000BFB 55 00 01 00 02   [ 1] 2050 	mov in.saved,in 
      000C00 91 D6 00         [ 4] 2051 	ld a,([in.w],y)
      000C03 26 05            [ 1] 2052 	jrne 1$
      000C05 90 93            [ 1] 2053 	ldw y,x 
      000C07 CC 0D AC         [ 2] 2054 	jp token_exit ; end of line 
      000C0A 72 5C 00 01      [ 1] 2055 1$:	inc in 
      000C0E CD 0D AF         [ 4] 2056 	call to_upper 
      000C11 6B 01            [ 1] 2057 	ld (TCHAR,sp),a 
                                   2058 ; check for quoted string
      000C13                       2059 str_tst:  	
      000C13                       2060 	_case '"' nbr_tst
      000C13 A6 22            [ 1]    1 	ld a,#'"' 
      000C15 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C17 26 0A            [ 1]    3 	jrne nbr_tst
      000C19 A6 02            [ 1] 2061 	ld a,#TK_QSTR
      000C1B F7               [ 1] 2062 	ld (x),a 
      000C1C 5C               [ 2] 2063 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C1D CD 0A C7         [ 4] 2064 	call parse_quote
      000C20 CC 0D AC         [ 2] 2065 	jp token_exit
      000C23                       2066 nbr_tst:
                                   2067 ; check for hexadecimal number 
      000C23 A6 24            [ 1] 2068 	ld a,#'$'
      000C25 11 01            [ 1] 2069 	cp a,(TCHAR,sp) 
      000C27 27 17            [ 1] 2070 	jreq 1$
                                   2071 ;check for binary number 
      000C29 A6 26            [ 1] 2072 	ld a,#'&
      000C2B 11 01            [ 1] 2073 	cp a,(TCHAR,sp)
      000C2D 26 0A            [ 1] 2074 	jrne 0$
      000C2F A6 84            [ 1] 2075 	ld a,#TK_INTGR
      000C31 F7               [ 1] 2076 	ld (x),a 
      000C32 5C               [ 2] 2077 	incw x 
      000C33 CD 0B 66         [ 4] 2078 	call parse_binary ; expect binary integer 
      000C36 CC 0D AC         [ 2] 2079 	jp token_exit 
                                   2080 ; check for decimal number 	
      000C39 7B 01            [ 1] 2081 0$:	ld a,(TCHAR,sp)
      000C3B CD 05 7E         [ 4] 2082 	call is_digit
      000C3E 24 0C            [ 1] 2083 	jrnc 3$
      000C40 A6 84            [ 1] 2084 1$:	ld a,#TK_INTGR 
      000C42 F7               [ 1] 2085 	ld (x),a 
      000C43 5C               [ 2] 2086 	incw x 
      000C44 7B 01            [ 1] 2087 	ld a,(TCHAR,sp)
      000C46 CD 0B 1C         [ 4] 2088 	call parse_integer 
      000C49 CC 0D AC         [ 2] 2089 	jp token_exit 
      000C4C                       2090 3$: 
      000C4C                       2091 	_case '(' bkslsh_tst 
      000C4C A6 28            [ 1]    1 	ld a,#'(' 
      000C4E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C50 26 05            [ 1]    3 	jrne bkslsh_tst
      000C52 A6 07            [ 1] 2092 	ld a,#TK_LPAREN
      000C54 CC 0D A8         [ 2] 2093 	jp token_char   	
      000C57                       2094 bkslsh_tst: ; character token 
      000C57                       2095 	_case '\',rparnt_tst
      000C57 A6 5C            [ 1]    1 	ld a,#'\' 
      000C59 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C5B 26 16            [ 1]    3 	jrne rparnt_tst
      000C5D A6 03            [ 1] 2096 	ld a,#TK_CHAR 
      000C5F F7               [ 1] 2097 	ld (x),a 
      000C60 5C               [ 2] 2098 	incw x 
      000C61 91 D6 00         [ 4] 2099 	ld a,([in.w],y)
      000C64 F7               [ 1] 2100 	ld (x),a 
      000C65 5C               [ 2] 2101 	incw x
      000C66 90 93            [ 1] 2102 	ldw y,x 	 
      000C68 72 5C 00 01      [ 1] 2103 	inc in  
      000C6C 5F               [ 1] 2104 	clrw x 
      000C6D 97               [ 1] 2105 	ld xl,a 
      000C6E A6 03            [ 1] 2106 	ld a,#TK_CHAR 
      000C70 CC 0D AC         [ 2] 2107 	jp token_exit 
      000C73                       2108 rparnt_tst:		
      000C73                       2109 	_case ')' colon_tst 
      000C73 A6 29            [ 1]    1 	ld a,#')' 
      000C75 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C77 26 05            [ 1]    3 	jrne colon_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C79 A6 08            [ 1] 2110 	ld a,#TK_RPAREN 
      000C7B CC 0D A8         [ 2] 2111 	jp token_char
      000C7E                       2112 colon_tst:
      000C7E                       2113 	_case ':' comma_tst 
      000C7E A6 3A            [ 1]    1 	ld a,#':' 
      000C80 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C82 26 05            [ 1]    3 	jrne comma_tst
      000C84 A6 01            [ 1] 2114 	ld a,#TK_COLON 
      000C86 CC 0D A8         [ 2] 2115 	jp token_char  
      000C89                       2116 comma_tst:
      000C89                       2117 	_case COMMA sharp_tst 
      000C89 A6 2C            [ 1]    1 	ld a,#COMMA 
      000C8B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C8D 26 05            [ 1]    3 	jrne sharp_tst
      000C8F A6 09            [ 1] 2118 	ld a,#TK_COMMA
      000C91 CC 0D A8         [ 2] 2119 	jp token_char
      000C94                       2120 sharp_tst:
      000C94                       2121 	_case SHARP dash_tst 
      000C94 A6 23            [ 1]    1 	ld a,#SHARP 
      000C96 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C98 26 05            [ 1]    3 	jrne dash_tst
      000C9A A6 0A            [ 1] 2122 	ld a,#TK_SHARP
      000C9C CC 0D A8         [ 2] 2123 	jp token_char  	 	 
      000C9F                       2124 dash_tst: 	
      000C9F                       2125 	_case '-' at_tst 
      000C9F A6 2D            [ 1]    1 	ld a,#'-' 
      000CA1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA3 26 05            [ 1]    3 	jrne at_tst
      000CA5 A6 11            [ 1] 2126 	ld a,#TK_MINUS  
      000CA7 CC 0D A8         [ 2] 2127 	jp token_char 
      000CAA                       2128 at_tst:
      000CAA                       2129 	_case '@' qmark_tst 
      000CAA A6 40            [ 1]    1 	ld a,#'@' 
      000CAC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CAE 26 05            [ 1]    3 	jrne qmark_tst
      000CB0 A6 06            [ 1] 2130 	ld a,#TK_ARRAY 
      000CB2 CC 0D A8         [ 2] 2131 	jp token_char
      000CB5                       2132 qmark_tst:
      000CB5                       2133 	_case '?' tick_tst 
      000CB5 A6 3F            [ 1]    1 	ld a,#'?' 
      000CB7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB9 26 12            [ 1]    3 	jrne tick_tst
      000CBB A6 80            [ 1] 2134 	ld a,#TK_CMD  
      000CBD F7               [ 1] 2135 	ld (x),a 
      000CBE 5C               [ 2] 2136 	incw x 
      000CBF 90 93            [ 1] 2137 	ldw y,x 
      000CC1 AE 00 74         [ 2] 2138 	ldw x,#PRT_IDX 
      000CC4 90 FF            [ 2] 2139 	ldw (y),x 
      000CC6 72 A9 00 02      [ 2] 2140 	addw y,#2
      000CCA CC 0D AC         [ 2] 2141 	jp token_exit
      000CCD                       2142 tick_tst: ; comment 
      000CCD                       2143 	_case TICK plus_tst 
      000CCD A6 27            [ 1]    1 	ld a,#TICK 
      000CCF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CD1 26 35            [ 1]    3 	jrne plus_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CD3 A6 80            [ 1] 2144 	ld a,#TK_CMD
      000CD5 F7               [ 1] 2145 	ld (x),a 
      000CD6 5C               [ 2] 2146 	incw x
      000CD7 90 AE 00 8E      [ 2] 2147 	ldw y,#REM_IDX
      000CDB FF               [ 2] 2148 	ldw (x),y 
      000CDC 1C 00 02         [ 2] 2149 	addw x,#2  
      000CDF                       2150 copy_comment:
      000CDF 90 AE 16 90      [ 2] 2151 	ldw y,#tib 
      000CE3 72 B9 00 00      [ 2] 2152 	addw y,in.w
      000CE7 90 89            [ 2] 2153 	pushw y
      000CE9 CD 03 B2         [ 4] 2154 	call strcpy
      000CEC 72 F2 01         [ 2] 2155     subw y,(1,sp)
      000CEF 90 9F            [ 1] 2156 	ld a,yl 
      000CF1 CB 00 01         [ 1] 2157 	add a,in
      000CF4 C7 00 01         [ 1] 2158 	ld in,a 
      000CF7 1F 01            [ 2] 2159 	ldw (1,sp),x
      000CF9 72 F9 01         [ 2] 2160 	addw y,(1,sp)
      000CFC 90 5C            [ 2] 2161 	incw y 
      000CFE                       2162 	_drop 2 
      000CFE 5B 02            [ 2]    1     addw sp,#2 
      000D00 AE 00 8E         [ 2] 2163 	ldw x,#REM_IDX 
      000D03 A6 80            [ 1] 2164 	ld a,#TK_CMD 
      000D05 CC 0D AC         [ 2] 2165 	jp token_exit 
      000D08                       2166 plus_tst:
      000D08                       2167 	_case '+' star_tst 
      000D08 A6 2B            [ 1]    1 	ld a,#'+' 
      000D0A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D0C 26 05            [ 1]    3 	jrne star_tst
      000D0E A6 10            [ 1] 2168 	ld a,#TK_PLUS  
      000D10 CC 0D A8         [ 2] 2169 	jp token_char 
      000D13                       2170 star_tst:
      000D13                       2171 	_case '*' slash_tst 
      000D13 A6 2A            [ 1]    1 	ld a,#'*' 
      000D15 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D17 26 05            [ 1]    3 	jrne slash_tst
      000D19 A6 20            [ 1] 2172 	ld a,#TK_MULT 
      000D1B CC 0D A8         [ 2] 2173 	jp token_char 
      000D1E                       2174 slash_tst: 
      000D1E                       2175 	_case '/' prcnt_tst 
      000D1E A6 2F            [ 1]    1 	ld a,#'/' 
      000D20 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D22 26 05            [ 1]    3 	jrne prcnt_tst
      000D24 A6 21            [ 1] 2176 	ld a,#TK_DIV 
      000D26 CC 0D A8         [ 2] 2177 	jp token_char 
      000D29                       2178 prcnt_tst:
      000D29                       2179 	_case '%' eql_tst 
      000D29 A6 25            [ 1]    1 	ld a,#'%' 
      000D2B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D2D 26 05            [ 1]    3 	jrne eql_tst
      000D2F A6 22            [ 1] 2180 	ld a,#TK_MOD
      000D31 CC 0D A8         [ 2] 2181 	jp token_char  
                                   2182 ; 1 or 2 character tokens 	
      000D34                       2183 eql_tst:
      000D34                       2184 	_case '=' gt_tst 		
      000D34 A6 3D            [ 1]    1 	ld a,#'=' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D36 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D38 26 05            [ 1]    3 	jrne gt_tst
      000D3A A6 32            [ 1] 2185 	ld a,#TK_EQUAL
      000D3C CC 0D A8         [ 2] 2186 	jp token_char 
      000D3F                       2187 gt_tst:
      000D3F                       2188 	_case '>' lt_tst 
      000D3F A6 3E            [ 1]    1 	ld a,#'>' 
      000D41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D43 26 23            [ 1]    3 	jrne lt_tst
      000D45 A6 31            [ 1] 2189 	ld a,#TK_GT 
      000D47 6B 02            [ 1] 2190 	ld (ATTRIB,sp),a 
      000D49 72 5C 00 01      [ 1] 2191 	inc in 
      000D4D 91 D6 00         [ 4] 2192 	ld a,([in.w],y)
      000D50 A1 3D            [ 1] 2193 	cp a,#'=
      000D52 26 04            [ 1] 2194 	jrne 1$
      000D54 A6 33            [ 1] 2195 	ld a,#TK_GE 
      000D56 20 50            [ 2] 2196 	jra token_char  
      000D58 A1 3C            [ 1] 2197 1$: cp a,#'<
      000D5A 26 04            [ 1] 2198 	jrne 2$
      000D5C A6 35            [ 1] 2199 	ld a,#TK_NE 
      000D5E 20 48            [ 2] 2200 	jra token_char 
      000D60 72 5A 00 01      [ 1] 2201 2$: dec in
      000D64 7B 02            [ 1] 2202 	ld a,(ATTRIB,sp)
      000D66 20 40            [ 2] 2203 	jra token_char 	 
      000D68                       2204 lt_tst:
      000D68                       2205 	_case '<' other
      000D68 A6 3C            [ 1]    1 	ld a,#'<' 
      000D6A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6C 26 23            [ 1]    3 	jrne other
      000D6E A6 34            [ 1] 2206 	ld a,#TK_LT 
      000D70 6B 02            [ 1] 2207 	ld (ATTRIB,sp),a 
      000D72 72 5C 00 01      [ 1] 2208 	inc in 
      000D76 91 D6 00         [ 4] 2209 	ld a,([in.w],y)
      000D79 A1 3D            [ 1] 2210 	cp a,#'=
      000D7B 26 04            [ 1] 2211 	jrne 1$
      000D7D A6 36            [ 1] 2212 	ld a,#TK_LE 
      000D7F 20 27            [ 2] 2213 	jra token_char 
      000D81 A1 3E            [ 1] 2214 1$: cp a,#'>
      000D83 26 04            [ 1] 2215 	jrne 2$
      000D85 A6 35            [ 1] 2216 	ld a,#TK_NE 
      000D87 20 1F            [ 2] 2217 	jra token_char 
      000D89 72 5A 00 01      [ 1] 2218 2$: dec in 
      000D8D 7B 02            [ 1] 2219 	ld a,(ATTRIB,sp)
      000D8F 20 17            [ 2] 2220 	jra token_char 	
      000D91                       2221 other: ; not a special character 	 
      000D91 7B 01            [ 1] 2222 	ld a,(TCHAR,sp)
      000D93 CD 05 6D         [ 4] 2223 	call is_alpha 
      000D96 25 03            [ 1] 2224 	jrc 30$ 
      000D98 CC 08 79         [ 2] 2225 	jp syntax_error 
      000D9B                       2226 30$: 
      000D9B CD 0B A3         [ 4] 2227 	call parse_keyword
      000D9E A3 15 FB         [ 2] 2228 	cpw x,#remark 
      000DA1 26 09            [ 1] 2229 	jrne token_exit 
      000DA3 90 93            [ 1] 2230 	ldw y,x 
      000DA5 CC 0C DF         [ 2] 2231 	jp copy_comment 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000DA8                       2232 token_char:
      000DA8 F7               [ 1] 2233 	ld (x),a 
      000DA9 5C               [ 2] 2234 	incw x
      000DAA 90 93            [ 1] 2235 	ldw y,x 
      000DAC                       2236 token_exit:
      000DAC                       2237 	_drop VSIZE 
      000DAC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DAE 81               [ 4] 2238 	ret
                                   2239 
                                   2240 
                                   2241 ;------------------------------------
                                   2242 ; convert alpha to uppercase
                                   2243 ; input:
                                   2244 ;    a  character to convert
                                   2245 ; output:
                                   2246 ;    a  uppercase character
                                   2247 ;------------------------------------
      000DAF                       2248 to_upper::
      000DAF A1 61            [ 1] 2249 	cp a,#'a
      000DB1 2A 01            [ 1] 2250 	jrpl 1$
      000DB3 81               [ 4] 2251 0$:	ret
      000DB4 A1 7A            [ 1] 2252 1$: cp a,#'z	
      000DB6 22 FB            [ 1] 2253 	jrugt 0$
      000DB8 A0 20            [ 1] 2254 	sub a,#32
      000DBA 81               [ 4] 2255 	ret
                                   2256 	
                                   2257 ;------------------------------------
                                   2258 ; convert pad content in integer
                                   2259 ; input:
                                   2260 ;    x		.asciz to convert
                                   2261 ; output:
                                   2262 ;    acc24      int24_t
                                   2263 ;------------------------------------
                                   2264 	; local variables
                           000001  2265 	SIGN=1 ; 1 byte, 
                           000002  2266 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2267 	TEMP=3 ; 1 byte, temporary storage
                           000003  2268 	VSIZE=3 ; 3 bytes reserved for local storage
      000DBB                       2269 atoi24::
      000DBB 89               [ 2] 2270 	pushw x 
      000DBC                       2271 	_vars VSIZE
      000DBC 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2272 	; acc24=0 
      000DBE 72 5F 00 0B      [ 1] 2273 	clr acc24    
      000DC2 72 5F 00 0C      [ 1] 2274 	clr acc16
      000DC6 72 5F 00 0D      [ 1] 2275 	clr acc8 
      000DCA 0F 01            [ 1] 2276 	clr (SIGN,sp)
      000DCC A6 0A            [ 1] 2277 	ld a,#10
      000DCE 6B 02            [ 1] 2278 	ld (BASE,sp),a ; default base decimal
      000DD0 F6               [ 1] 2279 	ld a,(x)
      000DD1 27 47            [ 1] 2280 	jreq 9$  ; completed if 0
      000DD3 A1 2D            [ 1] 2281 	cp a,#'-
      000DD5 26 04            [ 1] 2282 	jrne 1$
      000DD7 03 01            [ 1] 2283 	cpl (SIGN,sp)
      000DD9 20 08            [ 2] 2284 	jra 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DDB A1 24            [ 1] 2285 1$: cp a,#'$
      000DDD 26 06            [ 1] 2286 	jrne 3$
      000DDF A6 10            [ 1] 2287 	ld a,#16
      000DE1 6B 02            [ 1] 2288 	ld (BASE,sp),a
      000DE3 5C               [ 2] 2289 2$:	incw x
      000DE4 F6               [ 1] 2290 	ld a,(x)
      000DE5                       2291 3$:	
      000DE5 A1 61            [ 1] 2292 	cp a,#'a
      000DE7 2B 02            [ 1] 2293 	jrmi 4$
      000DE9 A0 20            [ 1] 2294 	sub a,#32
      000DEB A1 30            [ 1] 2295 4$:	cp a,#'0
      000DED 2B 2B            [ 1] 2296 	jrmi 9$
      000DEF A0 30            [ 1] 2297 	sub a,#'0
      000DF1 A1 0A            [ 1] 2298 	cp a,#10
      000DF3 2B 06            [ 1] 2299 	jrmi 5$
      000DF5 A0 07            [ 1] 2300 	sub a,#7
      000DF7 11 02            [ 1] 2301 	cp a,(BASE,sp)
      000DF9 2A 1F            [ 1] 2302 	jrpl 9$
      000DFB 6B 03            [ 1] 2303 5$:	ld (TEMP,sp),a
      000DFD 7B 02            [ 1] 2304 	ld a,(BASE,sp)
      000DFF CD 0A 6A         [ 4] 2305 	call mulu24_8
      000E02 7B 03            [ 1] 2306 	ld a,(TEMP,sp)
      000E04 CB 00 0D         [ 1] 2307 	add a,acc24+2
      000E07 C7 00 0D         [ 1] 2308 	ld acc24+2,a
      000E0A 4F               [ 1] 2309 	clr a
      000E0B C9 00 0C         [ 1] 2310 	adc a,acc24+1
      000E0E C7 00 0C         [ 1] 2311 	ld acc24+1,a
      000E11 4F               [ 1] 2312 	clr a
      000E12 C9 00 0B         [ 1] 2313 	adc a,acc24
      000E15 C7 00 0B         [ 1] 2314 	ld acc24,a
      000E18 20 C9            [ 2] 2315 	jra 2$
      000E1A 0D 01            [ 1] 2316 9$:	tnz (SIGN,sp)
      000E1C 27 03            [ 1] 2317     jreq atoi_exit
      000E1E CD 0A A4         [ 4] 2318     call neg_acc24
      000E21                       2319 atoi_exit: 
      000E21                       2320 	_drop VSIZE
      000E21 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E23 85               [ 2] 2321 	popw x ; restore x
      000E24 81               [ 4] 2322 	ret
                                   2323 
                                   2324 
                                   2325 ;------------------------------------
                                   2326 ; skip character c in text starting from 'in'
                                   2327 ; input:
                                   2328 ;	 y 		point to text buffer
                                   2329 ;    a 		character to skip
                                   2330 ; output:  
                                   2331 ;	'in' ajusted to new position
                                   2332 ;------------------------------------
                           000001  2333 	C = 1 ; local var
      000E25                       2334 skip:
      000E25 88               [ 1] 2335 	push a
      000E26 91 D6 00         [ 4] 2336 1$:	ld a,([in.w],y)
      000E29 27 0A            [ 1] 2337 	jreq 2$
      000E2B 11 01            [ 1] 2338 	cp a,(C,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E2D 26 06            [ 1] 2339 	jrne 2$
      000E2F 72 5C 00 01      [ 1] 2340 	inc in
      000E33 20 F1            [ 2] 2341 	jra 1$
      000E35                       2342 2$: _drop 1 
      000E35 5B 01            [ 2]    1     addw sp,#1 
      000E37 81               [ 4] 2343 	ret
                                   2344 	
                                   2345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2346 ;;   TINY BASIC  operators,
                                   2347 ;;   commands and functions 
                                   2348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2349 
                                   2350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2351 ;;  Arithmetic operators
                                   2352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2353 
                                   2354 ;debug support
                           000001  2355 DEBUG_PRT=1
                           000001  2356 .if DEBUG_PRT 
      000E38                       2357 printxy:
      000E38 C6 00 0A         [ 1] 2358 	ld a,base 
      000E3B 88               [ 1] 2359 	push a 
      000E3C 89               [ 2] 2360 	pushw x 
      000E3D 90 89            [ 2] 2361 	pushw y
      000E3F 35 10 00 0A      [ 1] 2362 	mov base,#16 
      000E43 CD 09 CC         [ 4] 2363 	call print_int
      000E46 A6 20            [ 1] 2364 	ld a,#SPACE 
      000E48 CD 02 C0         [ 4] 2365 	call putc  
      000E4B 1E 01            [ 2] 2366 	ldw x,(1,sp)
      000E4D CD 09 CC         [ 4] 2367 	call print_int 
      000E50 A6 0D            [ 1] 2368 	ld a,#CR 
      000E52 CD 02 C0         [ 4] 2369 	call putc 
      000E55 90 85            [ 2] 2370 	popw y 
      000E57 85               [ 2] 2371 	popw x 
      000E58 84               [ 1] 2372 	pop a 
      000E59 C7 00 0A         [ 1] 2373 	ld base,a 
      000E5C 81               [ 4] 2374 	ret 
                                   2375 .endif 
                                   2376 
                                   2377 
                                   2378 ;--------------------------------------
                                   2379 ;  multiply 2 uint16_t return uint32_t
                                   2380 ;  input:
                                   2381 ;     x       uint16_t 
                                   2382 ;     y       uint16_t 
                                   2383 ;  output:
                                   2384 ;     x       product bits 15..0
                                   2385 ;     y       product bits 31..16 
                                   2386 ;---------------------------------------
                           000001  2387 		U1=1  ; uint16_t 
                           000003  2388 		DBL=3 ; uint32_t
                           000006  2389 		VSIZE=6
      000E5D                       2390 umstar:
      000E5D                       2391 	_vars VSIZE 
      000E5D 52 06            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E5F 1F 01            [ 2] 2392 	ldw (U1,sp),x 
                                   2393 ;initialize bits 31..16 of 
                                   2394 ;product to zero 
      000E61 0F 03            [ 1] 2395 	clr (DBL,sp)
      000E63 0F 04            [ 1] 2396 	clr (DBL+1,sp)
                                   2397 ; produc U1L*U2L 
      000E65 90 9F            [ 1] 2398 	ld a,yl 
      000E67 42               [ 4] 2399 	mul x,a 
      000E68 1F 05            [ 2] 2400 	ldw (DBL+2,sp),x
                                   2401 ; product U1H*U2L 
      000E6A 7B 01            [ 1] 2402 	ld a,(U1,sp) ; xh 
      000E6C 93               [ 1] 2403 	ldw x,y
      000E6D 42               [ 4] 2404 	mul x,a 
      000E6E 4F               [ 1] 2405 	clr a 
      000E6F 72 FB 04         [ 2] 2406 	addw x,(DBL+1,sp) 
      000E72 4F               [ 1] 2407 	clr a 
      000E73 19 03            [ 1] 2408 	adc a,(DBL,sp) 
      000E75 6B 03            [ 1] 2409 	ld (DBL,sp),a ; bits 23..17 
      000E77 1F 04            [ 2] 2410 	ldw (DBL+1,sp),x ; bits 15..0 
                                   2411 ; product U1L*U2H
      000E79 90 5E            [ 1] 2412 	swapw y 
      000E7B 93               [ 1] 2413 	ldw x,y
      000E7C 7B 02            [ 1] 2414 	ld a,(U1+1,sp)
      000E7E 42               [ 4] 2415 	mul x,a
      000E7F 72 FB 04         [ 2] 2416 	addw x,(DBL+1,sp)
      000E82 4F               [ 1] 2417 	clr a 
      000E83 19 03            [ 1] 2418 	adc a,(DBL,sp)
      000E85 6B 03            [ 1] 2419 	ld (DBL,sp),a 
      000E87 1F 04            [ 2] 2420 	ldw (DBL+1,sp),x 
                                   2421 ; product U1H*U2H 	
      000E89 7B 01            [ 1] 2422 	ld a,(U1,sp)
      000E8B 93               [ 1] 2423 	ldw x,y  
      000E8C 42               [ 4] 2424 	mul x,a 
      000E8D 72 FB 03         [ 2] 2425 	addw x,(DBL,sp)
      000E90 90 93            [ 1] 2426 	ldw y,x 
      000E92 1E 05            [ 2] 2427 	ldw x,(DBL+2,sp)
      000E94                       2428 	_drop VSIZE 
      000E94 5B 06            [ 2]    1     addw sp,#VSIZE 
      000E96 81               [ 4] 2429 	ret
                                   2430 
                                   2431 
                                   2432 ;-------------------------------------
                                   2433 ; multiply 2 integers
                                   2434 ; input:
                                   2435 ;  	x       n1 
                                   2436 ;   y 		n2 
                                   2437 ; output:
                                   2438 ;	X        N1*N2 bits 15..0
                                   2439 ;   Y        N1*N2 bits 31..16 
                                   2440 ;-------------------------------------
                           000001  2441 	SIGN=1
                           000001  2442 	VSIZE=1
      000E97                       2443 multiply:
      000E97                       2444 	_vars VSIZE 
      000E97 52 01            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000E99 0F 01            [ 1] 2445 	clr (SIGN,sp)
      000E9B 9E               [ 1] 2446 	ld a,xh 
      000E9C A4 80            [ 1] 2447 	and a,#0x80
      000E9E 2A 03            [ 1] 2448 	jrpl 1$
      000EA0 03 01            [ 1] 2449 	cpl (SIGN,sp)
      000EA2 50               [ 2] 2450 	negw x 
      000EA3                       2451 1$:	
      000EA3 90 9E            [ 1] 2452 	ld a,yh
      000EA5 A4 80            [ 1] 2453 	and a,#0x80  
      000EA7 2A 04            [ 1] 2454 	jrpl 2$ 
      000EA9 03 01            [ 1] 2455 	cpl (SIGN,sp)
      000EAB 90 50            [ 2] 2456 	negw y 
      000EAD                       2457 2$:	
      000EAD CD 0E 5D         [ 4] 2458 	call umstar
      000EB0 7B 01            [ 1] 2459 	ld a,(SIGN,sp)
      000EB2 27 03            [ 1] 2460 	jreq 3$
      000EB4 CD 0E E4         [ 4] 2461 	call dneg 
      000EB7                       2462 3$:	
      000EB7                       2463 	_drop VSIZE 
      000EB7 5B 01            [ 2]    1     addw sp,#VSIZE 
      000EB9 81               [ 4] 2464 	ret
                                   2465 
                                   2466 ;--------------------------------------
                                   2467 ; divide uint32_t/uint16_t
                                   2468 ; return:  quotient and remainder 
                                   2469 ; quotient expected to be uint16_t 
                                   2470 ; input:
                                   2471 ;   DBLDIVDND    on stack 
                                   2472 ;   X            divisor 
                                   2473 ; output:
                                   2474 ;   X            quotient 
                                   2475 ;   Y            remainder 
                                   2476 ;---------------------------------------
                           000003  2477 	VSIZE=3
      000EBA                       2478 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000EBA                       2479 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   2480 	; local variables 
                           000001  2481 	DIVISOR=1 
                           000003  2482 	CNTR=3 
      000EBA                       2483 udiv32_16:
      000EBA                       2484 	_vars VSIZE 
      000EBA 52 03            [ 2]    1     sub sp,#VSIZE 
      000EBC 1F 01            [ 2] 2485 	ldw (DIVISOR,sp),x	; save divisor 
      000EBE 1E 08            [ 2] 2486 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000EC0 16 06            [ 2] 2487 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000EC2 90 5D            [ 2] 2488 	tnzw y
      000EC4 26 06            [ 1] 2489 	jrne long_division 
      000EC6 16 01            [ 2] 2490 	ldw y,(DIVISOR,sp)
      000EC8 65               [ 2] 2491 	divw x,y
      000EC9                       2492 	_drop VSIZE 
      000EC9 5B 03            [ 2]    1     addw sp,#VSIZE 
      000ECB 81               [ 4] 2493 	ret
      000ECC                       2494 long_division:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000ECC 51               [ 1] 2495 	exgw x,y ; hi in x, lo in y 
      000ECD A6 11            [ 1] 2496 	ld a,#17 
      000ECF 6B 03            [ 1] 2497 	ld (CNTR,sp),a
      000ED1                       2498 1$:
      000ED1 13 01            [ 2] 2499 	cpw x,(DIVISOR,sp)
      000ED3 2B 03            [ 1] 2500 	jrmi 2$
      000ED5 72 F0 01         [ 2] 2501 	subw x,(DIVISOR,sp)
      000ED8 8C               [ 1] 2502 2$:	ccf 
      000ED9 90 59            [ 2] 2503 	rlcw y 
      000EDB 59               [ 2] 2504 	rlcw x 
      000EDC 0A 03            [ 1] 2505 	dec (CNTR,sp)
      000EDE 26 F1            [ 1] 2506 	jrne 1$
      000EE0 51               [ 1] 2507 	exgw x,y 
      000EE1                       2508 	_drop VSIZE 
      000EE1 5B 03            [ 2]    1     addw sp,#VSIZE 
      000EE3 81               [ 4] 2509 	ret
                                   2510 
                                   2511 ;-----------------------------
                                   2512 ; negate double int.
                                   2513 ; input:
                                   2514 ;   x     bits 15..0
                                   2515 ;   y     bits 31..16
                                   2516 ; output: 
                                   2517 ;   x     bits 15..0
                                   2518 ;   y     bits 31..16
                                   2519 ;-----------------------------
      000EE4                       2520 dneg:
      000EE4 53               [ 2] 2521 	cplw x 
      000EE5 90 53            [ 2] 2522 	cplw y 
      000EE7 1C 00 01         [ 2] 2523 	addw x,#1 
      000EEA 24 02            [ 1] 2524 	jrnc 1$
      000EEC 90 5C            [ 2] 2525 	incw y 
      000EEE 81               [ 4] 2526 1$: ret 
                                   2527 
                                   2528 
                                   2529 ;--------------------------------
                                   2530 ; sign extend single to double
                                   2531 ; input:
                                   2532 ;   x    int16_t
                                   2533 ; output:
                                   2534 ;   x    int32_t bits 15..0
                                   2535 ;   y    int32_t bits 31..16
                                   2536 ;--------------------------------
      000EEF                       2537 dbl_sign_extend:
      000EEF 90 5F            [ 1] 2538 	clrw y
      000EF1 9E               [ 1] 2539 	ld a,xh 
      000EF2 A4 80            [ 1] 2540 	and a,#0x80 
      000EF4 27 02            [ 1] 2541 	jreq 1$
      000EF6 90 53            [ 2] 2542 	cplw y
      000EF8 81               [ 4] 2543 1$: ret 	
                                   2544 
                                   2545 
                                   2546 ;----------------------------------
                                   2547 ;  euclidian divide dbl/n1 
                                   2548 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2549 ; input:
                                   2550 ;    dbl    int32_t on stack 
                                   2551 ;    x 		n1   int16_t  disivor  
                                   2552 ; output:
                                   2553 ;    X      dbl/x  int16_t 
                                   2554 ;    Y      remainder int16_t 
                                   2555 ;----------------------------------
                           000008  2556 	VSIZE=8
      000EF9                       2557 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000EF9                       2558 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000EF9                       2559 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   2560 	; local variables
                           000001  2561 	DBLHI=1
                           000003  2562 	DBLLO=3 
                           000005  2563 	SDIVSR=5 ; sign divisor
                           000006  2564 	SQUOT=6 ; sign dividend 
                           000007  2565 	DIVISR=7 ; divisor 
      000EF9                       2566 div32_16:
      000EF9                       2567 	_vars VSIZE 
      000EF9 52 08            [ 2]    1     sub sp,#VSIZE 
      000EFB 0F 05            [ 1] 2568 	clr (SDIVSR,sp)
      000EFD 0F 06            [ 1] 2569 	clr (SQUOT,sp)
                                   2570 ; copy arguments 
      000EFF 16 0B            [ 2] 2571 	ldw y,(DIVDNDHI,sp)
      000F01 17 01            [ 2] 2572 	ldw (DBLHI,sp),y
      000F03 16 0D            [ 2] 2573 	ldw y,(DIVDNDLO,sp)
      000F05 17 03            [ 2] 2574 	ldw (DBLLO,sp),y 
                                   2575 ; check for 0 divisor
      000F07 5D               [ 2] 2576 	tnzw x 
      000F08 26 05            [ 1] 2577     jrne 0$
      000F0A A6 04            [ 1] 2578 	ld a,#ERR_DIV0 
      000F0C CC 08 7B         [ 2] 2579 	jp tb_error 
                                   2580 ; check divisor sign 	
      000F0F 9E               [ 1] 2581 0$:	ld a,xh 
      000F10 A4 80            [ 1] 2582 	and a,#0x80 
      000F12 27 05            [ 1] 2583 	jreq 1$
      000F14 03 05            [ 1] 2584 	cpl (SDIVSR,sp)
      000F16 03 06            [ 1] 2585 	cpl (SQUOT,sp)
      000F18 50               [ 2] 2586 	negw x
      000F19 1F 07            [ 2] 2587 1$:	ldw (DIVISR,sp),x
                                   2588 ; check dividend sign 	 
      000F1B 7B 01            [ 1] 2589  	ld a,(DBLHI,sp) 
      000F1D A4 80            [ 1] 2590 	and a,#0x80 
      000F1F 27 0D            [ 1] 2591 	jreq 2$ 
      000F21 03 06            [ 1] 2592 	cpl (SQUOT,sp)
      000F23 1E 03            [ 2] 2593 	ldw x,(DBLLO,sp)
      000F25 16 01            [ 2] 2594 	ldw y,(DBLHI,sp)
      000F27 CD 0E E4         [ 4] 2595 	call dneg 
      000F2A 1F 03            [ 2] 2596 	ldw (DBLLO,sp),x 
      000F2C 17 01            [ 2] 2597 	ldw (DBLHI,sp),y 
      000F2E 1E 07            [ 2] 2598 2$:	ldw x,(DIVISR,sp)
      000F30 CD 0E BA         [ 4] 2599 	call udiv32_16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F33 90 5D            [ 2] 2600 	tnzw y 
      000F35 27 11            [ 1] 2601 	jreq 3$ 
                                   2602 ; x=quotient 
                                   2603 ; y=remainder 
                                   2604 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000F37 7B 06            [ 1] 2605 	ld a,(SQUOT,sp)
      000F39 18 05            [ 1] 2606 	xor a,(SDIVSR,sp)
      000F3B 27 0B            [ 1] 2607 	jreq 3$
      000F3D 5C               [ 2] 2608 	incw x 
      000F3E 90 CF 00 0C      [ 2] 2609 	ldw acc16,y 
      000F42 16 07            [ 2] 2610 	ldw y,(DIVISR,sp)
      000F44 72 B2 00 0C      [ 2] 2611 	subw y,acc16
                                   2612 ; sign quotient
      000F48 7B 06            [ 1] 2613 3$:	ld a,(SQUOT,sp)
      000F4A 27 01            [ 1] 2614 	jreq 4$
      000F4C 50               [ 2] 2615 	negw x 
      000F4D                       2616 4$:	
      000F4D                       2617 	_drop VSIZE 
      000F4D 5B 08            [ 2]    1     addw sp,#VSIZE 
      000F4F 81               [ 4] 2618 	ret 
                                   2619 
                                   2620 
                                   2621 
                                   2622 ;----------------------------------
                                   2623 ; division x/y 
                                   2624 ; input:
                                   2625 ;    X       dividend
                                   2626 ;    Y       divisor 
                                   2627 ; output:
                                   2628 ;    X       quotient
                                   2629 ;    Y       remainder 
                                   2630 ;-----------------------------------
                           000004  2631 	VSIZE=4 
                                   2632 	; local variables 
                           000001  2633 	DBLHI=1
                           000003  2634 	DBLLO=3
      000F50                       2635 divide: 
      000F50                       2636 	_vars VSIZE 
      000F50 52 04            [ 2]    1     sub sp,#VSIZE 
      000F52 90 CF 00 0C      [ 2] 2637 	ldw acc16,y
      000F56 CD 0E EF         [ 4] 2638 	call dbl_sign_extend
      000F59 1F 03            [ 2] 2639 	ldw (DBLLO,sp),x 
      000F5B 17 01            [ 2] 2640 	ldw (DBLHI,sp),y 
      000F5D CE 00 0C         [ 2] 2641 	ldw x,acc16 
      000F60 CD 0E F9         [ 4] 2642 	call div32_16 
      000F63                       2643 	_drop VSIZE 
      000F63 5B 04            [ 2]    1     addw sp,#VSIZE 
      000F65 81               [ 4] 2644 	ret
                                   2645 
                                   2646 
                                   2647 ;----------------------------------
                                   2648 ;  remainder resulting from euclidian 
                                   2649 ;  division of x/y 
                                   2650 ; input:
                                   2651 ;   x   	dividend int16_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2652 ;   y 		divisor int16_t
                                   2653 ; output:
                                   2654 ;   X       n1%n2 
                                   2655 ;----------------------------------
      000F66                       2656 modulo:
      000F66 CD 0F 50         [ 4] 2657 	call divide
      000F69 93               [ 1] 2658 	ldw x,y 
      000F6A 81               [ 4] 2659 	ret 
                                   2660 
                                   2661 ;----------------------------------
                                   2662 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   2663 ; return expr1*expr2/expr3 
                                   2664 ; product result is int32_t and 
                                   2665 ; divisiont is int32_t/int16_t
                                   2666 ;----------------------------------
                           000004  2667 	DBL_SIZE=4 
      000F6B                       2668 muldiv:
      000F6B CD 10 13         [ 4] 2669 	call func_args 
      000F6E A1 03            [ 1] 2670 	cp a,#3 
      000F70 27 03            [ 1] 2671 	jreq 1$
      000F72 CC 08 79         [ 2] 2672 	jp syntax_error
      000F75                       2673 1$: 
      000F75 1E 05            [ 2] 2674 	ldw x,(5,sp) ; expr1
      000F77 16 03            [ 2] 2675 	ldw y,(3,sp) ; expr2
      000F79 CD 0E 97         [ 4] 2676 	call multiply 
      000F7C 1F 05            [ 2] 2677 	ldw (5,sp),x  ;int32_t 15..0
      000F7E 17 03            [ 2] 2678 	ldw (3,sp),y  ;int32_t 31..16
      000F80 85               [ 2] 2679 	popw x        ; expr3 
      000F81 CD 0E F9         [ 4] 2680 	call div32_16 ; int32_t/expr3 
      000F84                       2681 	_drop DBL_SIZE
      000F84 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000F86 81               [ 4] 2682 	ret 
                                   2683 
                                   2684 
                                   2685 ;----------------------------------
                                   2686 ; search in kword_dict name
                                   2687 ; from its execution address 
                                   2688 ; input:
                                   2689 ;   X       	cmd_index 
                                   2690 ; output:
                                   2691 ;   X 			cstr*  | 0 
                                   2692 ;--------------------------------
                           000001  2693 	CMDX=1 
                           000003  2694 	LINK=3 
                           000004  2695 	VSIZE=4
      000F87                       2696 cmd_name:
      000F87                       2697 	_vars VSIZE 
      000F87 52 04            [ 2]    1     sub sp,#VSIZE 
      000F89 72 5F 00 0C      [ 1] 2698 	clr acc16 
      000F8D 1F 01            [ 2] 2699 	ldw (CMDX,sp),x  
      000F8F AE 26 B9         [ 2] 2700 	ldw x,#kword_dict	
      000F92 1F 03            [ 2] 2701 1$:	ldw (LINK,sp),x
      000F94 E6 02            [ 1] 2702 	ld a,(2,x)
      000F96 A4 0F            [ 1] 2703 	and a,#15 
      000F98 C7 00 0D         [ 1] 2704 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F9B 1C 00 03         [ 2] 2705 	addw x,#3
      000F9E 72 BB 00 0C      [ 2] 2706 	addw x,acc16
      000FA2 FE               [ 2] 2707 	ldw x,(x) ; command index  
      000FA3 13 01            [ 2] 2708 	cpw x,(CMDX,sp)
      000FA5 27 0A            [ 1] 2709 	jreq 2$
      000FA7 1E 03            [ 2] 2710 	ldw x,(LINK,sp)
      000FA9 FE               [ 2] 2711 	ldw x,(x) 
      000FAA 1D 00 02         [ 2] 2712 	subw x,#2  
      000FAD 26 E3            [ 1] 2713 	jrne 1$
      000FAF 20 05            [ 2] 2714 	jra 9$
      000FB1 1E 03            [ 2] 2715 2$: ldw x,(LINK,sp)
      000FB3 1C 00 02         [ 2] 2716 	addw x,#2 	
      000FB6                       2717 9$:	_drop VSIZE
      000FB6 5B 04            [ 2]    1     addw sp,#VSIZE 
      000FB8 81               [ 4] 2718 	ret
                                   2719 
                                   2720 
                                   2721 ;---------------------------------
                                   2722 ; dictionary search 
                                   2723 ; input:
                                   2724 ;	X 		dictionary entry point, name field  
                                   2725 ;   y		.asciz name to search 
                                   2726 ; output:
                                   2727 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2728 ;  X		cmd_index ; execution address | 0 
                                   2729 ;---------------------------------
                           000001  2730 	NLEN=1 ; cmd length 
                           000002  2731 	XSAVE=2
                           000004  2732 	YSAVE=4
                           000005  2733 	VSIZE=5 
      000FB9                       2734 search_dict:
      000FB9                       2735 	_vars VSIZE 
      000FB9 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2736 
      000FBB 17 04            [ 2] 2737 	ldw (YSAVE,sp),y 
      000FBD                       2738 search_next:
      000FBD 1F 02            [ 2] 2739 	ldw (XSAVE,sp),x 
                                   2740 ; get name length in dictionary	
      000FBF F6               [ 1] 2741 	ld a,(x)
      000FC0 A4 0F            [ 1] 2742 	and a,#0xf 
      000FC2 6B 01            [ 1] 2743 	ld (NLEN,sp),a  
      000FC4 16 04            [ 2] 2744 	ldw y,(YSAVE,sp) ; name pointer 
      000FC6 5C               [ 2] 2745 	incw x 
      000FC7                       2746 cp_loop:
      000FC7 90 F6            [ 1] 2747 	ld a,(y)
      000FC9 27 1B            [ 1] 2748 	jreq str_match 
      000FCB 0D 01            [ 1] 2749 	tnz (NLEN,sp)
      000FCD 27 0A            [ 1] 2750 	jreq no_match  
      000FCF F1               [ 1] 2751 	cp a,(x)
      000FD0 26 07            [ 1] 2752 	jrne no_match 
      000FD2 90 5C            [ 2] 2753 	incw y 
      000FD4 5C               [ 2] 2754 	incw x
      000FD5 0A 01            [ 1] 2755 	dec (NLEN,sp)
      000FD7 20 EE            [ 2] 2756 	jra cp_loop 
      000FD9                       2757 no_match:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FD9 1E 02            [ 2] 2758 	ldw x,(XSAVE,sp) 
      000FDB 1D 00 02         [ 2] 2759 	subw x,#2 ; move X to link field
      000FDE 4B 00            [ 1] 2760 	push #TK_NONE 
      000FE0 FE               [ 2] 2761 	ldw x,(x) ; next word link 
      000FE1 84               [ 1] 2762 	pop a ; TK_NONE 
      000FE2 27 1F            [ 1] 2763 	jreq search_exit  ; not found  
                                   2764 ;try next 
      000FE4 20 D7            [ 2] 2765 	jra search_next
      000FE6                       2766 str_match:
      000FE6 1E 02            [ 2] 2767 	ldw x,(XSAVE,sp)
      000FE8 F6               [ 1] 2768 	ld a,(X)
      000FE9 6B 01            [ 1] 2769 	ld (NLEN,sp),a ; needed to test keyword type  
      000FEB A4 0F            [ 1] 2770 	and a,#0xf 
                                   2771 ; move x to procedure address field 	
      000FED 4C               [ 1] 2772 	inc a 
      000FEE C7 00 0D         [ 1] 2773 	ld acc8,a 
      000FF1 72 5F 00 0C      [ 1] 2774 	clr acc16 
      000FF5 72 BB 00 0C      [ 2] 2775 	addw x,acc16 
      000FF9 FE               [ 2] 2776 	ldw x,(x) ; routine index  
                                   2777 ;determine keyword type bits 7:6 
      000FFA 7B 01            [ 1] 2778 	ld a,(NLEN,sp)
      000FFC 4E               [ 1] 2779 	swap a 
      000FFD A4 0C            [ 1] 2780 	and a,#0xc
      000FFF 44               [ 1] 2781 	srl a
      001000 44               [ 1] 2782 	srl a 
      001001 AB 80            [ 1] 2783 	add a,#128
      001003                       2784 search_exit: 
      001003                       2785 	_drop VSIZE 	 
      001003 5B 05            [ 2]    1     addw sp,#VSIZE 
      001005 81               [ 4] 2786 	ret 
                                   2787 
                                   2788 ;---------------------
                                   2789 ; check if next token
                                   2790 ;  is of expected type 
                                   2791 ; input:
                                   2792 ;   A 		 expected token attribute
                                   2793 ;  ouput:
                                   2794 ;   none     if fail call syntax_error 
                                   2795 ;--------------------
      001006                       2796 expect:
      001006 88               [ 1] 2797 	push a 
      001007 CD 09 6B         [ 4] 2798 	call next_token 
      00100A 11 01            [ 1] 2799 	cp a,(1,sp)
      00100C 27 03            [ 1] 2800 	jreq 1$
      00100E CC 08 79         [ 2] 2801 	jp syntax_error
      001011 84               [ 1] 2802 1$: pop a 
      001012 81               [ 4] 2803 	ret 
                                   2804 
                                   2805 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2806 ; parse arguments list 
                                   2807 ; between ()
                                   2808 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001013                       2809 func_args:
      001013 A6 07            [ 1] 2810 	ld a,#TK_LPAREN 
      001015 CD 10 06         [ 4] 2811 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2812 ; expected to continue in arg_list 
                                   2813 ; caller must check for TK_RPAREN 
                                   2814 
                                   2815 ;-------------------------------
                                   2816 ; parse embedded BASIC routines 
                                   2817 ; arguments list.
                                   2818 ; arg_list::=  rel[','rel]*
                                   2819 ; all arguments are of integer type
                                   2820 ; and pushed on stack 
                                   2821 ; input:
                                   2822 ;   none
                                   2823 ; output:
                                   2824 ;   stack{n}   arguments pushed on stack
                                   2825 ;   A 	number of arguments pushed on stack  
                                   2826 ;--------------------------------
      001018                       2827 arg_list:
      001018 4B 00            [ 1] 2828 	push #0  
      00101A CD 11 5A         [ 4] 2829 1$: call relation
      00101D A1 00            [ 1] 2830 	cp a,#TK_NONE 
      00101F 27 20            [ 1] 2831 	jreq 5$
      001021 A1 84            [ 1] 2832 	cp a,#TK_INTGR
      001023 26 13            [ 1] 2833 	jrne 4$
      001025                       2834 3$: 
                                   2835 ; swap return address with argument
      001025 84               [ 1] 2836 	pop a ; arg_count
      001026 90 85            [ 2] 2837 	popw y ; return address 
      001028 89               [ 2] 2838 	pushw x ; new argument 
      001029 90 89            [ 2] 2839 	pushw y 
      00102B 4C               [ 1] 2840     inc a
      00102C 88               [ 1] 2841 	push a 
      00102D CD 09 6B         [ 4] 2842 	call next_token 
      001030 A1 09            [ 1] 2843 	cp a,#TK_COMMA 
      001032 27 E6            [ 1] 2844 	jreq 1$ 
      001034 A1 00            [ 1] 2845 	cp a,#TK_NONE 
      001036 27 09            [ 1] 2846 	jreq 5$ 
      001038 A1 08            [ 1] 2847 4$:	cp a,#TK_RPAREN 
      00103A 27 05            [ 1] 2848 	jreq 5$
      00103C                       2849 	_unget_token 
      00103C 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001041 84               [ 1] 2850 5$:	pop a  
      001042 81               [ 4] 2851 	ret 
                                   2852 
                                   2853 ;--------------------------------
                                   2854 ;   BASIC commnands 
                                   2855 ;--------------------------------
                                   2856 
                                   2857 ;--------------------------------
                                   2858 ;  arithmetic and relational 
                                   2859 ;  routines
                                   2860 ;  operators precedence
                                   2861 ;  highest to lowest
                                   2862 ;  operators on same row have 
                                   2863 ;  same precedence and are executed
                                   2864 ;  from left to right.
                                   2865 ;	'*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2866 ;   '-','+'
                                   2867 ;   '=','>','<','>=','<=','<>','><'
                                   2868 ;   '<>' and '><' are equivalent for not equal.
                                   2869 ;--------------------------------
                                   2870 
                                   2871 ;---------------------
                                   2872 ; return array element
                                   2873 ; address from @(expr)
                                   2874 ; input:
                                   2875 ;   A 		TK_ARRAY
                                   2876 ; output:
                                   2877 ;   A 		TK_INTGR
                                   2878 ;	X 		element address 
                                   2879 ;----------------------
      001043                       2880 get_array_element:
      001043 CD 10 13         [ 4] 2881 	call func_args 
      001046 A1 01            [ 1] 2882 	cp a,#1
      001048 27 03            [ 1] 2883 	jreq 1$
      00104A CC 08 79         [ 2] 2884 	jp syntax_error
      00104D 85               [ 2] 2885 1$: popw x 
                                   2886 	; check for bounds 
      00104E C3 00 21         [ 2] 2887 	cpw x,array_size 
      001051 23 05            [ 2] 2888 	jrule 3$
                                   2889 ; bounds {1..array_size}	
      001053 A6 0A            [ 1] 2890 2$: ld a,#ERR_BAD_VALUE 
      001055 CC 08 7B         [ 2] 2891 	jp tb_error 
      001058 5D               [ 2] 2892 3$: tnzw  x
      001059 27 F8            [ 1] 2893 	jreq 2$ 
      00105B 58               [ 2] 2894 	sllw x 
      00105C 89               [ 2] 2895 	pushw x 
      00105D AE 16 90         [ 2] 2896 	ldw x,#tib
      001060 72 F0 01         [ 2] 2897 	subw x,(1,sp)
      001063                       2898 	_drop 2   
      001063 5B 02            [ 2]    1     addw sp,#2 
      001065 A6 84            [ 1] 2899 	ld a,#TK_INTGR
      001067 81               [ 4] 2900 	ret 
                                   2901 
                                   2902 
                                   2903 ;***********************************
                                   2904 ;   expression parse,execute 
                                   2905 ;***********************************
                                   2906 ;-----------------------------------
                                   2907 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2908 ;			 integer | function |
                                   2909 ;			 '('relation')' 
                                   2910 ; output:
                                   2911 ;   A    token attribute 
                                   2912 ;   X 	 integer
                                   2913 ; ---------------------------------
                           000001  2914 	NEG=1
                           000001  2915 	VSIZE=1
      001068                       2916 factor:
      001068                       2917 	_vars VSIZE 
      001068 52 01            [ 2]    1     sub sp,#VSIZE 
      00106A CD 09 6B         [ 4] 2918 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00106D A1 02            [ 1] 2919 	cp a,#CMD_END 
      00106F 25 4E            [ 1] 2920 	jrult 20$
      001071 6B 01            [ 1] 2921 1$:	ld (NEG,sp),a 
      001073 A4 30            [ 1] 2922 	and a,#TK_GRP_MASK
      001075 A1 10            [ 1] 2923 	cp a,#TK_GRP_ADD 
      001077 27 04            [ 1] 2924 	jreq 2$
      001079 7B 01            [ 1] 2925 	ld a,(NEG,sp)
      00107B 20 03            [ 2] 2926 	jra 4$  
      00107D                       2927 2$:	
      00107D CD 09 6B         [ 4] 2928 	call next_token 
      001080                       2929 4$:	
      001080 A1 81            [ 1] 2930 	cp a,#TK_IFUNC 
      001082 26 03            [ 1] 2931 	jrne 5$ 
      001084 FD               [ 4] 2932 	call (x) 
      001085 20 2F            [ 2] 2933 	jra 18$ 
      001087                       2934 5$:
      001087 A1 84            [ 1] 2935 	cp a,#TK_INTGR
      001089 26 02            [ 1] 2936 	jrne 6$
      00108B 20 29            [ 2] 2937 	jra 18$
      00108D                       2938 6$:
      00108D A1 06            [ 1] 2939 	cp a,#TK_ARRAY
      00108F 26 06            [ 1] 2940 	jrne 10$
      001091 CD 10 43         [ 4] 2941 	call get_array_element
      001094 FE               [ 2] 2942 	ldw x,(x)
      001095 20 1F            [ 2] 2943 	jra 18$ 
      001097                       2944 10$:
      001097 A1 85            [ 1] 2945 	cp a,#TK_VAR 
      001099 26 03            [ 1] 2946 	jrne 12$
      00109B FE               [ 2] 2947 	ldw x,(x)
      00109C 20 18            [ 2] 2948 	jra 18$
      00109E                       2949 12$:			
      00109E A1 07            [ 1] 2950 	cp a,#TK_LPAREN
      0010A0 26 0C            [ 1] 2951 	jrne 16$
      0010A2 CD 11 5A         [ 4] 2952 	call relation
      0010A5 89               [ 2] 2953 	pushw x 
      0010A6 A6 08            [ 1] 2954 	ld a,#TK_RPAREN 
      0010A8 CD 10 06         [ 4] 2955 	call expect
      0010AB 85               [ 2] 2956 	popw x 
      0010AC 20 08            [ 2] 2957 	jra 18$	
      0010AE                       2958 16$:
      0010AE                       2959 	_unget_token
      0010AE 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010B3 4F               [ 1] 2960 	clr a 
      0010B4 20 09            [ 2] 2961 	jra 20$ 
      0010B6                       2962 18$: 
      0010B6 A6 11            [ 1] 2963 	ld a,#TK_MINUS 
      0010B8 11 01            [ 1] 2964 	cp a,(NEG,sp)
      0010BA 26 01            [ 1] 2965 	jrne 19$
      0010BC 50               [ 2] 2966 	negw x
      0010BD                       2967 19$:
      0010BD A6 84            [ 1] 2968 	ld a,#TK_INTGR
      0010BF                       2969 20$:
      0010BF                       2970 	_drop VSIZE
      0010BF 5B 01            [ 2]    1     addw sp,#VSIZE 
      0010C1 81               [ 4] 2971 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2972 
                                   2973 ;-----------------------------------
                                   2974 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2975 ; output:
                                   2976 ;   A    	token attribute 
                                   2977 ;	X		integer
                                   2978 ;-----------------------------------
                           000001  2979 	N1=1   ; int16_t
                           000003  2980 	MULOP=3
                           000003  2981 	VSIZE=3
      0010C2                       2982 term:
      0010C2                       2983 	_vars VSIZE
      0010C2 52 03            [ 2]    1     sub sp,#VSIZE 
      0010C4 CD 10 68         [ 4] 2984 	call factor
      0010C7 A1 02            [ 1] 2985 	cp a,#CMD_END
      0010C9 25 43            [ 1] 2986 	jrult term_exit
      0010CB                       2987 term01:	 ; check for  operator 
      0010CB 1F 01            [ 2] 2988 	ldw (N1,sp),x  ; save first factor 
      0010CD CD 09 6B         [ 4] 2989 	call next_token
      0010D0 A1 02            [ 1] 2990 	cp a,#CMD_END
      0010D2 25 36            [ 1] 2991 	jrult 9$
      0010D4 6B 03            [ 1] 2992 0$:	ld (MULOP,sp),a
      0010D6 A4 30            [ 1] 2993 	and a,#TK_GRP_MASK
      0010D8 A1 20            [ 1] 2994 	cp a,#TK_GRP_MULT
      0010DA 27 07            [ 1] 2995 	jreq 1$
      0010DC                       2996 	_unget_token 
      0010DC 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010E1 20 27            [ 2] 2997 	jra 9$
      0010E3                       2998 1$:	; got *|/|%
      0010E3 CD 10 68         [ 4] 2999 	call factor
      0010E6 A1 84            [ 1] 3000 	cp a,#TK_INTGR
      0010E8 27 03            [ 1] 3001 	jreq 2$ 
      0010EA CC 08 79         [ 2] 3002 	jp syntax_error
      0010ED 90 93            [ 1] 3003 2$:	ldw y,x 
      0010EF 1E 01            [ 2] 3004 	ldw x,(N1,sp)
      0010F1 7B 03            [ 1] 3005 	ld a,(MULOP,sp) 
      0010F3 A1 20            [ 1] 3006 	cp a,#TK_MULT 
      0010F5 26 05            [ 1] 3007 	jrne 3$
      0010F7 CD 0E 97         [ 4] 3008 	call multiply 
      0010FA 20 CF            [ 2] 3009 	jra term01
      0010FC A1 21            [ 1] 3010 3$: cp a,#TK_DIV 
      0010FE 26 05            [ 1] 3011 	jrne 4$ 
      001100 CD 0F 50         [ 4] 3012 	call divide 
      001103 20 C6            [ 2] 3013 	jra term01 
      001105 CD 0F 66         [ 4] 3014 4$: call modulo
      001108 20 C1            [ 2] 3015 	jra term01 
      00110A 1E 01            [ 2] 3016 9$: ldw x,(N1,sp)
      00110C A6 84            [ 1] 3017 	ld a,#TK_INTGR 	
      00110E                       3018 term_exit:
      00110E                       3019 	_drop VSIZE 
      00110E 5B 03            [ 2]    1     addw sp,#VSIZE 
      001110 81               [ 4] 3020 	ret 
                                   3021 
                                   3022 ;-------------------------------
                                   3023 ;  expr ::= term [['+'|'-'] term]*
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3024 ;  result range {-32768..32767}
                                   3025 ;  output:
                                   3026 ;   A    token attribute 
                                   3027 ;   X	 integer   
                                   3028 ;-------------------------------
                           000001  3029 	N1=1 
                           000003  3030 	OP=3 
                           000003  3031 	VSIZE=3 
      001111                       3032 expression:
      001111                       3033 	_vars VSIZE 
      001111 52 03            [ 2]    1     sub sp,#VSIZE 
      001113 CD 10 C2         [ 4] 3034 	call term
      001116 A1 02            [ 1] 3035 	cp a,#CMD_END 
      001118 25 3D            [ 1] 3036 	jrult expr_exit 
      00111A 1F 01            [ 2] 3037 0$:	ldw (N1,sp),x 
      00111C CD 09 6B         [ 4] 3038 	call next_token
      00111F A1 02            [ 1] 3039 	cp a,#CMD_END 
      001121 25 30            [ 1] 3040 	jrult 9$ 
      001123 6B 03            [ 1] 3041 1$:	ld (OP,sp),a  
      001125 A4 30            [ 1] 3042 	and a,#TK_GRP_MASK
      001127 A1 10            [ 1] 3043 	cp a,#TK_GRP_ADD 
      001129 27 07            [ 1] 3044 	jreq 2$ 
      00112B                       3045 	_unget_token
      00112B 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001130 20 21            [ 2] 3046 	jra 9$
      001132                       3047 2$: 
      001132 CD 10 C2         [ 4] 3048 	call term
      001135 A1 84            [ 1] 3049 	cp a,#TK_INTGR 
      001137 27 03            [ 1] 3050 	jreq 3$
      001139 CC 08 79         [ 2] 3051 	jp syntax_error
      00113C CF 00 0C         [ 2] 3052 3$:	ldw acc16,x 
      00113F 1E 01            [ 2] 3053 	ldw x,(N1,sp)
      001141 7B 03            [ 1] 3054 	ld a,(OP,sp)
      001143 A1 10            [ 1] 3055 	cp a,#TK_PLUS 
      001145 26 06            [ 1] 3056 	jrne 4$
      001147 72 BB 00 0C      [ 2] 3057 	addw x,acc16
      00114B 20 CD            [ 2] 3058 	jra 0$ 
      00114D 72 B0 00 0C      [ 2] 3059 4$:	subw x,acc16
      001151 20 C7            [ 2] 3060 	jra 0$
      001153 1E 01            [ 2] 3061 9$: ldw x,(N1,sp)
      001155 A6 84            [ 1] 3062 	ld a,#TK_INTGR	
      001157                       3063 expr_exit:
      001157                       3064 	_drop VSIZE 
      001157 5B 03            [ 2]    1     addw sp,#VSIZE 
      001159 81               [ 4] 3065 	ret 
                                   3066 
                                   3067 ;---------------------------------------------
                                   3068 ; rel ::= expr rel_op expr
                                   3069 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3070 ;  relation return  integer , zero is false 
                                   3071 ;  output:
                                   3072 ;    A 		token attribute  
                                   3073 ;	 X		integer 
                                   3074 ;---------------------------------------------
                           000001  3075 	N1=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                           000003  3076 	RELOP=3
                           000003  3077 	VSIZE=3 
      00115A                       3078 relation: 
      00115A                       3079 	_vars VSIZE
      00115A 52 03            [ 2]    1     sub sp,#VSIZE 
      00115C CD 11 11         [ 4] 3080 	call expression
      00115F A1 02            [ 1] 3081 	cp a,#CMD_END  
      001161 25 4F            [ 1] 3082 	jrult rel_exit 
                                   3083 	; expect rel_op or leave 
      001163 1F 01            [ 2] 3084 	ldw (N1,sp),x 
      001165 CD 09 6B         [ 4] 3085 	call next_token 
      001168 A1 02            [ 1] 3086 	cp a,#CMD_END 
      00116A 25 42            [ 1] 3087 	jrult 9$
      00116C                       3088 1$:	
      00116C 6B 03            [ 1] 3089 	ld (RELOP,sp),a 
      00116E A4 30            [ 1] 3090 	and a,#TK_GRP_MASK
      001170 A1 30            [ 1] 3091 	cp a,#TK_GRP_RELOP 
      001172 27 07            [ 1] 3092 	jreq 2$
      001174                       3093 	_unget_token  
      001174 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001179 20 33            [ 2] 3094 	jra 9$
      00117B                       3095 2$:	; expect another expression or error 
      00117B CD 11 11         [ 4] 3096 	call expression
      00117E A1 84            [ 1] 3097 	cp a,#TK_INTGR 
      001180 27 03            [ 1] 3098 	jreq 3$
      001182 CC 08 79         [ 2] 3099 	jp syntax_error 
      001185 CF 00 0C         [ 2] 3100 3$:	ldw acc16,x 
      001188 1E 01            [ 2] 3101 	ldw x,(N1,sp) 
      00118A 72 B0 00 0C      [ 2] 3102 	subw x,acc16
      00118E 26 06            [ 1] 3103 	jrne 4$
      001190 35 02 00 0D      [ 1] 3104 	mov acc8,#2 ; n1==n2
      001194 20 0C            [ 2] 3105 	jra 6$ 
      001196                       3106 4$: 
      001196 2C 06            [ 1] 3107 	jrsgt 5$  
      001198 35 04 00 0D      [ 1] 3108 	mov acc8,#4 ; n1<2 
      00119C 20 04            [ 2] 3109 	jra 6$
      00119E                       3110 5$:
      00119E 35 01 00 0D      [ 1] 3111 	mov acc8,#1 ; n1>n2 
      0011A2                       3112 6$:
      0011A2 5F               [ 1] 3113 	clrw x 
      0011A3 C6 00 0D         [ 1] 3114 	ld a, acc8  
      0011A6 14 03            [ 1] 3115 	and a,(RELOP,sp)
      0011A8 4D               [ 1] 3116 	tnz a 
      0011A9 27 05            [ 1] 3117 	jreq 10$
      0011AB 5C               [ 2] 3118 	incw x 
      0011AC                       3119 7$:	 
      0011AC 20 02            [ 2] 3120 	jra 10$  	
      0011AE 1E 01            [ 2] 3121 9$: ldw x,(N1,sp)
      0011B0                       3122 10$:
      0011B0 A6 84            [ 1] 3123 	ld a,#TK_INTGR
      0011B2                       3124 rel_exit: 	 
      0011B2                       3125 	_drop VSIZE
      0011B2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011B4 81               [ 4] 3126 	ret 
                                   3127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3128 ;--------------------------------
                                   3129 ; BASIC: SHOW 
                                   3130 ; print stack content in hexadecimal bytes 
                                   3131 ; 16 bytes per row 
                                   3132 ;--------------------------------
      0011B5                       3133 show:
      0011B5 AE 11 CF         [ 2] 3134 	ldw x,#cstk_prompt
      0011B8 CD 00 00         [ 4] 3135 	call puts 
      0011BB 96               [ 1] 3136 	ldw x,sp 
      0011BC 1C 00 03         [ 2] 3137 	addw x,#3 ; ignore return address
      0011BF 90 AE 18 00      [ 2] 3138 	ldw y,#RAM_SIZE  
      0011C3 CF 00 0C         [ 2] 3139 	ldw acc16,x 
      0011C6 72 B2 00 0C      [ 2] 3140 	subw y,acc16
      0011CA CD 03 59         [ 4] 3141 	call hex_dump
      0011CD 4F               [ 1] 3142 	clr a 
      0011CE 81               [ 4] 3143 	ret
                                   3144 
      0011CF 0A 63 6F 6E 74 65 6E  3145 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3146 
                                   3147 
                                   3148 ;--------------------------------------------
                                   3149 ; BASIC: HEX 
                                   3150 ; select hexadecimal base for integer print
                                   3151 ;---------------------------------------------
      0011F6                       3152 hex_base:
      0011F6 35 10 00 0A      [ 1] 3153 	mov base,#16 
      0011FA 81               [ 4] 3154 	ret 
                                   3155 
                                   3156 ;--------------------------------------------
                                   3157 ; BASIC: DEC 
                                   3158 ; select decimal base for integer print
                                   3159 ;---------------------------------------------
      0011FB                       3160 dec_base:
      0011FB 35 0A 00 0A      [ 1] 3161 	mov base,#10
      0011FF 81               [ 4] 3162 	ret 
                                   3163 
                                   3164 ;------------------------
                                   3165 ; BASIC: SIZE 
                                   3166 ; return free size in text area
                                   3167 ; output:
                                   3168 ;   A 		TK_INTGR
                                   3169 ;   X 	    size integer
                                   3170 ;--------------------------
      001200                       3171 size:
      001200 AE 16 90         [ 2] 3172 	ldw x,#tib 
      001203 72 B0 00 1E      [ 2] 3173 	subw x,txtend 
      001207 A6 84            [ 1] 3174 	ld a,#TK_INTGR
      001209 81               [ 4] 3175 	ret 
                                   3176 
                                   3177 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3178 ;------------------------
                                   3179 ; BASIC: UBOUND  
                                   3180 ; return array variable size 
                                   3181 ; output:
                                   3182 ;   A 		TK_INTGR
                                   3183 ;   X 	    array size 
                                   3184 ;--------------------------
      00120A                       3185 ubound:
      00120A AE 16 90         [ 2] 3186 	ldw x,#tib
      00120D 72 B0 00 1E      [ 2] 3187 	subw x,txtend 
      001211 90 CE 00 04      [ 2] 3188 	ldw y,basicptr 
      001215 90 C3 00 1E      [ 2] 3189 	cpw y,txtend 
      001219 25 0A            [ 1] 3190 	jrult 1$
      00121B 3B 00 03         [ 1] 3191 	push count 
      00121E 4B 00            [ 1] 3192 	push #0 
      001220 72 F0 01         [ 2] 3193 	subw x,(1,sp)
      001223                       3194 	_drop 2 
      001223 5B 02            [ 2]    1     addw sp,#2 
      001225 54               [ 2] 3195 1$:	srlw x 
      001226 CF 00 21         [ 2] 3196 	ldw array_size,x
      001229 A6 84            [ 1] 3197 	ld a,#TK_INTGR
      00122B 81               [ 4] 3198 	ret 
                                   3199 
                                   3200 ;-----------------------------
                                   3201 ; BASIC: LET var=expr 
                                   3202 ; variable assignement 
                                   3203 ; output:
                                   3204 ;   A 		TK_NONE 
                                   3205 ;-----------------------------
      00122C                       3206 let:
      00122C CD 09 6B         [ 4] 3207 	call next_token 
      00122F A1 85            [ 1] 3208 	cp a,#TK_VAR 
      001231 27 0A            [ 1] 3209 	jreq let_var
      001233 A1 06            [ 1] 3210 	cp a,#TK_ARRAY 
      001235 27 03            [ 1] 3211 	jreq  let_array
      001237 CC 08 79         [ 2] 3212 	jp syntax_error
      00123A                       3213 let_array:
      00123A CD 10 43         [ 4] 3214 	call get_array_element
      00123D                       3215 let_var:
      00123D 89               [ 2] 3216 	pushw x  
      00123E CD 09 6B         [ 4] 3217 	call next_token 
      001241 A1 32            [ 1] 3218 	cp a,#TK_EQUAL
      001243 27 03            [ 1] 3219 	jreq 1$
      001245 CC 08 79         [ 2] 3220 	jp syntax_error
      001248                       3221 1$:	
      001248 CD 11 5A         [ 4] 3222 	call relation   
      00124B A1 84            [ 1] 3223 	cp a,#TK_INTGR 
      00124D 27 03            [ 1] 3224 	jreq 2$
      00124F CC 08 79         [ 2] 3225 	jp syntax_error
      001252                       3226 2$:	
      001252 90 93            [ 1] 3227 	ldw y,x 
      001254 85               [ 2] 3228 	popw x   
      001255 FF               [ 2] 3229 	ldw (x),y   
      001256 81               [ 4] 3230 	ret 
                                   3231 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3232 ;----------------------------
                                   3233 ; BASIC: LIST [[start][,end]]
                                   3234 ; list program lines 
                                   3235 ; form start to end 
                                   3236 ; if empty argument list then 
                                   3237 ; list all.
                                   3238 ;----------------------------
                           000001  3239 	FIRST=1
                           000003  3240 	LAST=3 
                           000005  3241 	LN_PTR=5
                           000006  3242 	VSIZE=6 
      001257                       3243 list:
      001257 CE 00 1C         [ 2] 3244 	ldw x,txtbgn 
      00125A C3 00 1E         [ 2] 3245 	cpw x,txtend 
      00125D 2B 01            [ 1] 3246 	jrmi 1$
      00125F 81               [ 4] 3247 	ret 
      001260                       3248 1$:	
      001260                       3249 	_vars VSIZE
      001260 52 06            [ 2]    1     sub sp,#VSIZE 
      001262 1F 05            [ 2] 3250 	ldw (LN_PTR,sp),x 
      001264 FE               [ 2] 3251 	ldw x,(x) 
      001265 1F 01            [ 2] 3252 	ldw (FIRST,sp),x ; list from first line 
      001267 AE 7F FF         [ 2] 3253 	ldw x,#MAX_LINENO ; biggest line number 
      00126A 1F 03            [ 2] 3254 	ldw (LAST,sp),x 
      00126C CD 10 18         [ 4] 3255 	call arg_list
      00126F 4D               [ 1] 3256 	tnz a
      001270 27 31            [ 1] 3257 	jreq list_loop 
      001272 A1 02            [ 1] 3258 	cp a,#2 
      001274 27 07            [ 1] 3259 	jreq 4$
      001276 A1 01            [ 1] 3260 	cp a,#1 
      001278 27 06            [ 1] 3261 	jreq first_line 
      00127A CC 08 79         [ 2] 3262 	jp syntax_error 
      00127D 85               [ 2] 3263 4$:	popw x 
      00127E 1F 05            [ 2] 3264 	ldw (LAST+2,sp),x 
      001280                       3265 first_line:
      001280 85               [ 2] 3266 	popw x
      001281 1F 01            [ 2] 3267 	ldw (FIRST,sp),x 
      001283                       3268 lines_skip:
      001283 CE 00 1C         [ 2] 3269 	ldw x,txtbgn
      001286 1F 05            [ 2] 3270 2$:	ldw (LN_PTR,sp),x 
      001288 C3 00 1E         [ 2] 3271 	cpw x,txtend 
      00128B 2A 38            [ 1] 3272 	jrpl list_exit 
      00128D FE               [ 2] 3273 	ldw x,(x) ;line# 
      00128E 13 01            [ 2] 3274 	cpw x,(FIRST,sp)
      001290 2A 11            [ 1] 3275 	jrpl list_loop 
      001292 1E 05            [ 2] 3276 	ldw x,(LN_PTR,sp) 
      001294 E6 02            [ 1] 3277 	ld a,(2,x)
      001296 C7 00 0D         [ 1] 3278 	ld acc8,a 
      001299 72 5F 00 0C      [ 1] 3279 	clr acc16 
      00129D 72 BB 00 0C      [ 2] 3280 	addw x,acc16
      0012A1 20 E3            [ 2] 3281 	jra 2$ 
                                   3282 ; print loop
      0012A3                       3283 list_loop:
      0012A3 1E 05            [ 2] 3284 	ldw x,(LN_PTR,sp)
      0012A5 E6 02            [ 1] 3285 	ld a,(2,x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012A7 CD 14 DE         [ 4] 3286 	call prt_basic_line
      0012AA 1E 05            [ 2] 3287 	ldw x,(LN_PTR,sp)
      0012AC E6 02            [ 1] 3288 	ld a,(2,x)
      0012AE C7 00 0D         [ 1] 3289 	ld acc8,a 
      0012B1 72 5F 00 0C      [ 1] 3290 	clr acc16 
      0012B5 72 BB 00 0C      [ 2] 3291 	addw x,acc16
      0012B9 C3 00 1E         [ 2] 3292 	cpw x,txtend 
      0012BC 2A 07            [ 1] 3293 	jrpl list_exit
      0012BE 1F 05            [ 2] 3294 	ldw (LN_PTR,sp),x
      0012C0 FE               [ 2] 3295 	ldw x,(x)
      0012C1 13 03            [ 2] 3296 	cpw x,(LAST,sp)  
      0012C3 2F DE            [ 1] 3297 	jrslt list_loop
      0012C5                       3298 list_exit:
      0012C5 55 00 03 00 01   [ 1] 3299 	mov in,count 
      0012CA AE 16 E0         [ 2] 3300 	ldw x,#pad 
      0012CD CF 00 04         [ 2] 3301 	ldw basicptr,x 
      0012D0                       3302 	_drop VSIZE 
      0012D0 5B 06            [ 2]    1     addw sp,#VSIZE 
      0012D2 81               [ 4] 3303 	ret
                                   3304 
                                   3305 ;-------------------------
                                   3306 ; copy command name to buffer  
                                   3307 ; input:
                                   3308 ;   X 	name address 
                                   3309 ;   Y   destination buffer 
                                   3310 ; output:
                                   3311 ;   Y   point after name  
                                   3312 ;--------------------------
      0012D3                       3313 cpy_cmd_name:
      0012D3 F6               [ 1] 3314 	ld a,(x)
      0012D4 5C               [ 2] 3315 	incw x
      0012D5 A4 0F            [ 1] 3316 	and a,#15  
      0012D7 88               [ 1] 3317 	push a 
      0012D8 0D 01            [ 1] 3318     tnz (1,sp) 
      0012DA 27 0A            [ 1] 3319 	jreq 9$
      0012DC F6               [ 1] 3320 1$:	ld a,(x)
      0012DD 90 F7            [ 1] 3321 	ld (y),a  
      0012DF 5C               [ 2] 3322 	incw x
      0012E0 90 5C            [ 2] 3323 	incw y 
      0012E2 0A 01            [ 1] 3324 	dec (1,sp)	 
      0012E4 26 F6            [ 1] 3325 	jrne 1$
      0012E6 84               [ 1] 3326 9$: pop a 
      0012E7 81               [ 4] 3327 	ret	
                                   3328 
                                   3329 ;--------------------------
                                   3330 ; add a space after letter or 
                                   3331 ; digit.
                                   3332 ; input:
                                   3333 ;   Y     pointer to buffer 
                                   3334 ; output:
                                   3335 ;   Y    moved to end 
                                   3336 ;--------------------------
      0012E8                       3337 add_space:
      0012E8 90 5A            [ 2] 3338 	decw y 
      0012EA 90 F6            [ 1] 3339 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012EC 90 5C            [ 2] 3340 	incw y
      0012EE CD 05 87         [ 4] 3341 	call is_alnum 
      0012F1 24 06            [ 1] 3342 	jrnc 1$
      0012F3 A6 20            [ 1] 3343 	ld a,#SPACE 
      0012F5 90 F7            [ 1] 3344 	ld (y),a 
      0012F7 90 5C            [ 2] 3345 	incw y 
      0012F9 81               [ 4] 3346 1$: ret 
                                   3347 
                                   3348 ;--------------------------
                                   3349 ;  align text in buffer 
                                   3350 ;  to tab_width padding 
                                   3351 ;  left with  SPACE 
                                   3352 ; input:
                                   3353 ;   X      str*
                                   3354 ;   A      str_length 
                                   3355 ; output:
                                   3356 ;   X      ajusted
                                   3357 ;--------------------------
      0012FA                       3358 right_align:
      0012FA 88               [ 1] 3359 	push a 
      0012FB 7B 01            [ 1] 3360 0$: ld a,(1,sp)
      0012FD C1 00 24         [ 1] 3361 	cp a,tab_width 
      001300 2A 08            [ 1] 3362 	jrpl 1$
      001302 A6 20            [ 1] 3363 	ld a,#SPACE 
      001304 5A               [ 2] 3364 	decw x
      001305 F7               [ 1] 3365 	ld (x),a  
      001306 0C 01            [ 1] 3366 	inc (1,sp)
      001308 20 F1            [ 2] 3367 	jra 0$ 
      00130A 84               [ 1] 3368 1$: pop a 	
      00130B 81               [ 4] 3369 	ret 
                                   3370 
                                   3371 ;--------------------------
                                   3372 ; print TK_QSTR
                                   3373 ; converting control character
                                   3374 ; to backslash sequence
                                   3375 ; input:
                                   3376 ;   X        char *
                                   3377 ;   Y        dest. buffer 
                                   3378 ; output:
                                   3379 ;   X        moved forward 
                                   3380 ;   Y        moved forward 
                                   3381 ;-----------------------------
      00130C                       3382 cpy_quote:
      00130C A6 22            [ 1] 3383 	ld a,#'"
      00130E 90 F7            [ 1] 3384 	ld (y),a 
      001310 90 5C            [ 2] 3385 	incw y 
      001312 F6               [ 1] 3386 1$:	ld a,(x)
      001313 27 30            [ 1] 3387 	jreq 9$
      001315 5C               [ 2] 3388 	incw x 
      001316 A1 20            [ 1] 3389 	cp a,#SPACE 
      001318 25 0E            [ 1] 3390 	jrult 3$
      00131A 90 F7            [ 1] 3391 	ld (y),a
      00131C 90 5C            [ 2] 3392 	incw y 
      00131E A1 5C            [ 1] 3393 	cp a,#'\ 
      001320 26 F0            [ 1] 3394 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001322                       3395 2$:
      001322 90 F7            [ 1] 3396 	ld (y),a
      001324 90 5C            [ 2] 3397 	incw y  
      001326 20 EA            [ 2] 3398 	jra 1$
      001328 88               [ 1] 3399 3$: push a 
      001329 A6 5C            [ 1] 3400 	ld a,#'\
      00132B 90 F7            [ 1] 3401 	ld (y),a 
      00132D 90 5C            [ 2] 3402 	incw y  
      00132F 84               [ 1] 3403 	pop a 
      001330 A0 07            [ 1] 3404 	sub a,#7
      001332 C7 00 0D         [ 1] 3405 	ld acc8,a 
      001335 72 5F 00 0C      [ 1] 3406 	clr acc16
      001339 89               [ 2] 3407 	pushw x
      00133A AE 0B 14         [ 2] 3408 	ldw x,#escaped 
      00133D 72 BB 00 0C      [ 2] 3409 	addw x,acc16 
      001341 F6               [ 1] 3410 	ld a,(x)
      001342 85               [ 2] 3411 	popw x
      001343 20 DD            [ 2] 3412 	jra 2$
      001345 A6 22            [ 1] 3413 9$: ld a,#'"
      001347 90 F7            [ 1] 3414 	ld (y),a 
      001349 90 5C            [ 2] 3415 	incw y  
      00134B 5C               [ 2] 3416 	incw x 
      00134C 81               [ 4] 3417 	ret
                                   3418 
                                   3419 ;--------------------------
                                   3420 ; return variable name 
                                   3421 ; from its address.
                                   3422 ; input:
                                   3423 ;   X    variable address
                                   3424 ; output:
                                   3425 ;   A     variable letter
                                   3426 ;--------------------------
      00134D                       3427 var_name:
      00134D 1D 00 2F         [ 2] 3428 		subw x,#vars 
      001350 9F               [ 1] 3429 		ld a,xl 
      001351 44               [ 1] 3430 		srl a 
      001352 AB 41            [ 1] 3431 		add a,#'A 
      001354 81               [ 4] 3432 		ret 
                                   3433 
                                   3434 ;-----------------------------
                                   3435 ; return cmd  idx from its 
                                   3436 ; code address 
                                   3437 ; input:
                                   3438 ;   X      code address 
                                   3439 ; output:
                                   3440 ;   X      cmd_idx
                                   3441 ;-----------------------------
      001355                       3442 get_cmd_idx:
      001355 90 89            [ 2] 3443 	pushw y
      001357 90 AE 26 C1      [ 2] 3444 	ldw y,#code_addr 
      00135B 90 CF 00 17      [ 2] 3445 	ldw ptr16,y 
      00135F 90 5F            [ 1] 3446 	clrw y 
      001361 91 D3 17         [ 5] 3447 1$:	cpw x,([ptr16],y)
      001364 27 0C            [ 1] 3448 	jreq 3$ 
      001366 90 5C            [ 2] 3449 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001368 91 D6 17         [ 4] 3450 	ld a,([ptr16],y)
      00136B 90 5C            [ 2] 3451 	incw y
      00136D 91 DA 17         [ 4] 3452 	or a,([ptr16],y)	
      001370 26 EF            [ 1] 3453 	jrne 1$
      001372 93               [ 1] 3454 3$: ldw x,y 
      001373 90 85            [ 2] 3455 	popw y 
      001375 81               [ 4] 3456 	ret
                                   3457 
                                   3458 ;-------------------------------------
                                   3459 ; decompile tokens list 
                                   3460 ; to original text line 
                                   3461 ; input:
                                   3462 ;   [basicptr]  pointer at line 
                                   3463 ;   Y           destination buffer
                                   3464 ; output:
                                   3465 ;   A           length 
                                   3466 ;   Y           after string  
                                   3467 ;------------------------------------
                           000001  3468 	BASE_SAV=1
                           000002  3469 	WIDTH_SAV=2
                           000003  3470 	STR=3
                           000004  3471 	VSIZE=4 
      001376                       3472 decompile::
      001376                       3473 	_vars VSIZE
      001376 52 04            [ 2]    1     sub sp,#VSIZE 
      001378 C6 00 0A         [ 1] 3474 	ld a,base
      00137B 6B 01            [ 1] 3475 	ld (BASE_SAV,sp),a  
      00137D C6 00 24         [ 1] 3476 	ld a,tab_width 
      001380 6B 02            [ 1] 3477 	ld (WIDTH_SAV,sp),a 
      001382 17 03            [ 2] 3478 	ldw (STR,sp),y   
      001384 72 CE 00 04      [ 5] 3479 	ldw x,[basicptr] ; line number 
      001388 35 0A 00 0A      [ 1] 3480 	mov base,#10
      00138C 35 05 00 24      [ 1] 3481 	mov tab_width,#5
      001390 72 5F 00 0B      [ 1] 3482 	clr acc24 
      001394 CF 00 0C         [ 2] 3483 	ldw acc16,x
      001397 CD 09 E8         [ 4] 3484 	call itoa  
      00139A CD 12 FA         [ 4] 3485 	call right_align 
      00139D 88               [ 1] 3486 	push a 
      00139E 90 93            [ 1] 3487 1$:	ldw y,x ; source
      0013A0 1E 04            [ 2] 3488 	ldw x,(STR+1,sp) ; destination
      0013A2 CD 03 B2         [ 4] 3489 	call strcpy 
      0013A5 90 5F            [ 1] 3490 	clrw y 
      0013A7 84               [ 1] 3491 	pop a 
      0013A8 90 97            [ 1] 3492 	ld yl,a 
      0013AA 72 F9 03         [ 2] 3493 	addw y,(STR,sp)
      0013AD A6 20            [ 1] 3494 	ld a,#SPACE 
      0013AF 90 F7            [ 1] 3495 	ld (y),a 
      0013B1 90 5C            [ 2] 3496 	incw y 
      0013B3 72 5F 00 24      [ 1] 3497 	clr tab_width
      0013B7 AE 00 03         [ 2] 3498 	ldw x,#3
      0013BA CF 00 00         [ 2] 3499 	ldw in.w,x 
      0013BD                       3500 decomp_loop:
      0013BD 90 89            [ 2] 3501 	pushw y
      0013BF CD 09 6B         [ 4] 3502 	call next_token 
      0013C2 90 85            [ 2] 3503 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013C4 4D               [ 1] 3504 	tnz a  
      0013C5 26 03            [ 1] 3505 	jrne 1$
      0013C7 CC 14 A3         [ 2] 3506 	jp 20$
      0013CA 2A 6F            [ 1] 3507 1$:	jrpl 6$
                                   3508 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      0013CC A1 85            [ 1] 3509 	cp a,#TK_VAR 
      0013CE 26 0C            [ 1] 3510 	jrne 3$
                                   3511 ;; TK_VAR 
      0013D0 CD 12 E8         [ 4] 3512 	call add_space  
      0013D3 CD 13 4D         [ 4] 3513 	call var_name
      0013D6 90 F7            [ 1] 3514 	ld (y),a 
      0013D8 90 5C            [ 2] 3515 	incw y  
      0013DA 20 E1            [ 2] 3516 	jra decomp_loop
      0013DC                       3517 3$:
      0013DC A1 84            [ 1] 3518 	cp a,#TK_INTGR
      0013DE 26 22            [ 1] 3519 	jrne 4$
                                   3520 ;; TK_INTGR
      0013E0 CD 12 E8         [ 4] 3521 	call add_space
      0013E3 72 5F 00 0B      [ 1] 3522 	clr acc24 
      0013E7 CF 00 0C         [ 2] 3523 	ldw acc16,x 
      0013EA 90 89            [ 2] 3524 	pushw y 
      0013EC CD 09 E8         [ 4] 3525 	call itoa  
      0013EF 16 01            [ 2] 3526 	ldw y,(1,sp) 
      0013F1 88               [ 1] 3527 	push a 
      0013F2 51               [ 1] 3528 	exgw x,y 
      0013F3 CD 03 B2         [ 4] 3529 	call strcpy 
      0013F6 90 5F            [ 1] 3530 	clrw y
      0013F8 84               [ 1] 3531 	pop a  
      0013F9 90 97            [ 1] 3532 	ld yl,a 
      0013FB 72 F9 01         [ 2] 3533 	addw y,(1,sp)
      0013FE                       3534 	_drop 2 
      0013FE 5B 02            [ 2]    1     addw sp,#2 
      001400 20 BB            [ 2] 3535 	jra decomp_loop
                                   3536 ;; dictionary keyword 
      001402                       3537 4$:	
      001402 CD 13 55         [ 4] 3538 	call get_cmd_idx 
      001405 A3 00 8E         [ 2] 3539 	cpw x,#REM_IDX
      001408 26 22            [ 1] 3540 	jrne 5$
      00140A CE 00 04         [ 2] 3541 	ldw x,basicptr 
                                   3542 ; copy comment to buffer 
      00140D CD 12 E8         [ 4] 3543 	call add_space
      001410 A6 27            [ 1] 3544 	ld a,#''
      001412 90 F7            [ 1] 3545 	ld (y),a 
      001414 90 5C            [ 2] 3546 	incw y 
      001416                       3547 41$:
      001416 72 D6 00 00      [ 4] 3548 	ld a,([in.w],x)
      00141A 72 5C 00 01      [ 1] 3549 	inc in  
      00141E 90 F7            [ 1] 3550 	ld (y),a 
      001420 90 5C            [ 2] 3551 	incw y 
      001422 C6 00 01         [ 1] 3552 	ld a,in 
      001425 C1 00 03         [ 1] 3553 	cp a,count 
      001428 2B EC            [ 1] 3554 	jrmi 41$
      00142A 20 77            [ 2] 3555 	jra 20$  
                                   3556 ; insert command name 
      00142C                       3557 5$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00142C CD 12 E8         [ 4] 3558 	call add_space  
      00142F 90 89            [ 2] 3559 	pushw y
      001431 CD 0F 87         [ 4] 3560 	call cmd_name
      001434 90 85            [ 2] 3561 	popw y 
      001436 CD 12 D3         [ 4] 3562 	call cpy_cmd_name
      001439 20 82            [ 2] 3563 	jra decomp_loop 
      00143B                       3564 6$:
      00143B A1 02            [ 1] 3565 	cp a,#TK_QSTR 
      00143D 26 06            [ 1] 3566 	jrne 7$
                                   3567 ;; TK_QSTR
      00143F CD 13 0C         [ 4] 3568 	call cpy_quote  
      001442 CC 13 BD         [ 2] 3569 	jp decomp_loop
      001445                       3570 7$:
      001445 A1 03            [ 1] 3571 	cp a,#TK_CHAR 
      001447 26 0E            [ 1] 3572 	jrne 8$
                                   3573 ;; TK_CHAR 
      001449 A6 5C            [ 1] 3574 	ld a,#'\ 
      00144B 90 F7            [ 1] 3575 	ld (y),a 
      00144D 90 5C            [ 2] 3576 	incw y 
      00144F 9F               [ 1] 3577 	ld a,xl 
      001450 90 F7            [ 1] 3578 	ld (y),a 
      001452 90 5C            [ 2] 3579 	incw y 
      001454 CC 13 BD         [ 2] 3580 	jp decomp_loop
      001457 A1 01            [ 1] 3581 8$: cp a,#TK_COLON 
      001459 26 09            [ 1] 3582 	jrne 9$
      00145B A6 3A            [ 1] 3583 	ld a,#':
      00145D                       3584 81$:
      00145D 90 F7            [ 1] 3585 	ld (y),a 
      00145F 90 5C            [ 2] 3586 	incw y 
      001461                       3587 82$:
      001461 CC 13 BD         [ 2] 3588 	jp decomp_loop
      001464                       3589 9$: 
      001464 A1 0A            [ 1] 3590 	cp a,#TK_SHARP
      001466 22 0A            [ 1] 3591 	jrugt 10$ 
      001468 A0 06            [ 1] 3592 	sub a,#TK_ARRAY 
      00146A 5F               [ 1] 3593 	clrw x 
      00146B 97               [ 1] 3594 	ld xl,a
      00146C 1C 14 B9         [ 2] 3595 	addw x,#single_char 
      00146F F6               [ 1] 3596 	ld a,(x)
      001470 20 EB            [ 2] 3597 	jra 81$ 
      001472                       3598 10$: 
      001472 A1 11            [ 1] 3599 	cp a,#TK_MINUS 
      001474 22 0A            [ 1] 3600 	jrugt 11$
      001476 A0 10            [ 1] 3601 	sub a,#TK_PLUS 
      001478 5F               [ 1] 3602 	clrw x 
      001479 97               [ 1] 3603 	ld xl,a 
      00147A 1C 14 BE         [ 2] 3604 	addw x,#add_char 
      00147D F6               [ 1] 3605 	ld a,(x)
      00147E 20 DD            [ 2] 3606 	jra 81$
      001480                       3607 11$:
      001480 A1 22            [ 1] 3608     cp a,#TK_MOD 
      001482 22 0A            [ 1] 3609 	jrugt 12$
      001484 A0 20            [ 1] 3610 	sub a,#TK_MULT
      001486 5F               [ 1] 3611 	clrw x 
      001487 97               [ 1] 3612 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001488 1C 14 C0         [ 2] 3613 	addw x,#mul_char
      00148B F6               [ 1] 3614 	ld a,(x)
      00148C 20 CF            [ 2] 3615 	jra 81$
      00148E                       3616 12$:
      00148E A0 31            [ 1] 3617 	sub a,#TK_GT  
      001490 48               [ 1] 3618 	sll a 
      001491 5F               [ 1] 3619 	clrw x 
      001492 97               [ 1] 3620 	ld xl,a 
      001493 1C 14 C3         [ 2] 3621 	addw x,#relop_str 
      001496 FE               [ 2] 3622 	ldw x,(x)
      001497 F6               [ 1] 3623 	ld a,(x)
      001498 5C               [ 2] 3624 	incw x 
      001499 90 F7            [ 1] 3625 	ld (y),a
      00149B 90 5C            [ 2] 3626 	incw y 
      00149D F6               [ 1] 3627 	ld a,(x)
      00149E 26 BD            [ 1] 3628 	jrne 81$
      0014A0 CC 13 BD         [ 2] 3629 	jp decomp_loop 
      0014A3                       3630 20$: 
      0014A3 90 7F            [ 1] 3631 	clr (y)
      0014A5 1E 03            [ 2] 3632 	ldw x,(STR,sp)
      0014A7 7B 01            [ 1] 3633 	ld a,(BASE_SAV,sp)
      0014A9 C7 00 0A         [ 1] 3634 	ld base,a 
      0014AC 7B 02            [ 1] 3635 	ld a,(WIDTH_SAV,sp)
      0014AE C7 00 24         [ 1] 3636 	ld tab_width,a
      0014B1 72 F2 03         [ 2] 3637 	subw y,(STR,sp) 
      0014B4 90 9F            [ 1] 3638 	ld a,yl 
      0014B6                       3639 	_drop VSIZE 
      0014B6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014B8 81               [ 4] 3640 	ret 
                                   3641 
      0014B9 40 28 29 2C 23        3642 single_char: .byte '@','(',')',',','#'
      0014BE 2B 2D                 3643 add_char: .byte '+','-'
      0014C0 2A 2F 25              3644 mul_char: .byte '*','/','%'
      0014C3 14 CF 14 D1 14 D3 14  3645 relop_str: .word gt,equal,ge,lt,le,ne 
             D6 14 D8 14 DB
      0014CF 3E 00                 3646 gt: .asciz ">"
      0014D1 3D 00                 3647 equal: .asciz "="
      0014D3 3E 3D 00              3648 ge: .asciz ">="
      0014D6 3C 00                 3649 lt: .asciz "<"
      0014D8 3C 3D 00              3650 le: .asciz "<="
      0014DB 3C 3E 00              3651 ne:  .asciz "<>"
                                   3652 
                                   3653 
                                   3654 ;--------------------------
                                   3655 ; decompile line from token list
                                   3656 ; and print it. 
                                   3657 ; input:
                                   3658 ;   A       stop at this position 
                                   3659 ;   X 		pointer at line
                                   3660 ; output:
                                   3661 ;   none 
                                   3662 ;--------------------------	
      0014DE                       3663 prt_basic_line:
      0014DE C7 00 03         [ 1] 3664 	ld count,a 
      0014E1 E6 02            [ 1] 3665 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014E3 C1 00 03         [ 1] 3666 	cp a,count 
      0014E6 2A 03            [ 1] 3667 	jrpl 1$ 
      0014E8 C7 00 03         [ 1] 3668 	ld count,a 
      0014EB CF 00 04         [ 2] 3669 1$:	ldw basicptr,x 
      0014EE 90 AE 16 90      [ 2] 3670 	ldw y,#tib  
      0014F2 CD 13 76         [ 4] 3671 	call decompile 
      0014F5 CD 00 00         [ 4] 3672 	call puts 
      0014F8 A6 0D            [ 1] 3673 	ld a,#CR 
      0014FA CD 02 C0         [ 4] 3674 	call putc 
      0014FD 81               [ 4] 3675 	ret 
                                   3676 
                                   3677 
                                   3678 
                                   3679 ;---------------------------------
                                   3680 ; BASIC: PRINT|? arg_list 
                                   3681 ; print values from argument list
                                   3682 ;----------------------------------
                           000001  3683 	COMMA=1
                           000001  3684 	VSIZE=1
      0014FE                       3685 print:
      0014FE 4B 00            [ 1] 3686 push #0 ; local variable COMMA 
      001500                       3687 reset_comma:
      001500 0F 01            [ 1] 3688 	clr (COMMA,sp)
      001502                       3689 prt_loop:
      001502 CD 09 6B         [ 4] 3690 	call next_token
      001505 A1 02            [ 1] 3691 	cp a,#CMD_END 
      001507 25 5A            [ 1] 3692 	jrult print_exit ; colon or end of line 
      001509 A1 02            [ 1] 3693 	cp a,#TK_QSTR
      00150B 27 12            [ 1] 3694 	jreq 1$
      00150D A1 03            [ 1] 3695 	cp a,#TK_CHAR 
      00150F 27 13            [ 1] 3696 	jreq 2$ 
      001511 A1 82            [ 1] 3697 	cp a,#TK_CFUNC 
      001513 27 15            [ 1] 3698 	jreq 3$
      001515 A1 09            [ 1] 3699 	cp a,#TK_COMMA 
      001517 27 18            [ 1] 3700 	jreq 4$
      001519 A1 0A            [ 1] 3701 	cp a,#TK_SHARP 
      00151B 27 1B            [ 1] 3702 	jreq 5$
      00151D 20 2B            [ 2] 3703 	jra 7$ 
      00151F                       3704 1$:	; print string 
      00151F CD 00 00         [ 4] 3705 	call puts
      001522 20 DC            [ 2] 3706 	jra reset_comma
      001524                       3707 2$:	; print character 
      001524 9F               [ 1] 3708 	ld a,xl 
      001525 CD 02 C0         [ 4] 3709 	call putc 
      001528 20 D6            [ 2] 3710 	jra reset_comma 
      00152A                       3711 3$: ; print character function value  	
      00152A FD               [ 4] 3712 	call (x)
      00152B 9F               [ 1] 3713 	ld a,xl 
      00152C CD 02 C0         [ 4] 3714 	call putc
      00152F 20 CF            [ 2] 3715 	jra reset_comma 
      001531                       3716 4$: ; set comma state 
      001531 A6 FF            [ 1] 3717 	ld a,#255 
      001533 6B 01            [ 1] 3718 	ld (COMMA,sp),a  
      001535 CC 15 02         [ 2] 3719 	jp prt_loop   
      001538                       3720 5$: ; # character must be followed by an integer   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001538 CD 09 6B         [ 4] 3721 	call next_token
      00153B A1 84            [ 1] 3722 	cp a,#TK_INTGR 
      00153D 27 03            [ 1] 3723 	jreq 6$
      00153F CC 08 79         [ 2] 3724 	jp syntax_error 
      001542                       3725 6$: ; set tab width
      001542 9F               [ 1] 3726 	ld a,xl 
      001543 A4 0F            [ 1] 3727 	and a,#15 
      001545 C7 00 24         [ 1] 3728 	ld tab_width,a 
      001548 20 B6            [ 2] 3729 	jra reset_comma 
      00154A                       3730 7$:	
      00154A                       3731 	_unget_token
      00154A 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00154F CD 11 5A         [ 4] 3732 	call relation 
      001552 A1 84            [ 1] 3733 	cp a,#TK_INTGR
      001554 27 08            [ 1] 3734 	jreq 8$
      001556                       3735 	_unget_token
      001556 55 00 02 00 01   [ 1]    1     mov in,in.saved
      00155B CC 15 63         [ 2] 3736 	jp print_exit 
      00155E CD 09 CC         [ 4] 3737 8$: call print_int 
      001561 20 9D            [ 2] 3738 	jra reset_comma 
      001563                       3739 print_exit:
      001563 0D 01            [ 1] 3740 	tnz (COMMA,sp)
      001565 26 05            [ 1] 3741 	jrne 9$
      001567 A6 0D            [ 1] 3742 	ld a,#CR 
      001569 CD 02 C0         [ 4] 3743     call putc 
      00156C                       3744 9$:	_drop VSIZE 
      00156C 5B 01            [ 2]    1     addw sp,#VSIZE 
      00156E 81               [ 4] 3745 	ret 
                                   3746 
                                   3747 ;----------------------
                                   3748 ; 'save_context' and
                                   3749 ; 'rest_context' must be 
                                   3750 ; called at the same 
                                   3751 ; call stack depth 
                                   3752 ; i.e. SP must have the 
                                   3753 ; save value at  
                                   3754 ; entry point of both 
                                   3755 ; routine. 
                                   3756 ;---------------------
                           000004  3757 	CTXT_SIZE=4 ; size of saved data 
                                   3758 ;--------------------
                                   3759 ; save current BASIC
                                   3760 ; interpreter context 
                                   3761 ; on stack 
                                   3762 ;--------------------
      00156F                       3763 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00156F                       3764 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00156F                       3765 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      00156F                       3766 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      00156F                       3767 save_context:
      00156F CE 00 04         [ 2] 3768 	ldw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001572 1F 03            [ 2] 3769 	ldw (BPTR,sp),x
      001574 C6 00 01         [ 1] 3770 	ld a,in 
      001577 6B 05            [ 1] 3771 	ld (IN,sp),a
      001579 C6 00 03         [ 1] 3772 	ld a,count 
      00157C 6B 06            [ 1] 3773 	ld (CNT,sp),a  
      00157E 81               [ 4] 3774 	ret
                                   3775 
                                   3776 ;-----------------------
                                   3777 ; restore previously saved 
                                   3778 ; BASIC interpreter context 
                                   3779 ; from stack 
                                   3780 ;-------------------------
      00157F                       3781 rest_context:
      00157F 1E 03            [ 2] 3782 	ldw x,(BPTR,sp)
      001581 CF 00 04         [ 2] 3783 	ldw basicptr,x 
      001584 7B 05            [ 1] 3784 	ld a,(IN,sp)
      001586 C7 00 01         [ 1] 3785 	ld in,a
      001589 7B 06            [ 1] 3786 	ld a,(CNT,sp)
      00158B C7 00 03         [ 1] 3787 	ld count,a  
      00158E 81               [ 4] 3788 	ret
                                   3789 
                                   3790 
                                   3791 
                                   3792 ;------------------------------------------
                                   3793 ; BASIC: INPUT [string]var[,[string]var]
                                   3794 ; input value in variables 
                                   3795 ; [string] optionally can be used as prompt 
                                   3796 ;-----------------------------------------
                           000001  3797 	CX_BPTR=1
                           000003  3798 	CX_IN=3
                           000004  3799 	CX_CNT=4
                           000005  3800 	SKIP=5
                           000006  3801 	VAR_ADDR=6
                           000007  3802 	VSIZE=7
      00158F                       3803 input_var:
      00158F                       3804 	_vars VSIZE 
      00158F 52 07            [ 2]    1     sub sp,#VSIZE 
      001591                       3805 input_loop:
      001591 0F 05            [ 1] 3806 	clr (SKIP,sp)
      001593 CD 09 6B         [ 4] 3807 	call next_token 
      001596 A1 02            [ 1] 3808 	cp a,#TK_QSTR 
      001598 26 08            [ 1] 3809 	jrne 1$ 
      00159A CD 00 00         [ 4] 3810 	call puts 
      00159D 03 05            [ 1] 3811 	cpl (SKIP,sp)
      00159F CD 09 6B         [ 4] 3812 	call next_token 
      0015A2 A1 85            [ 1] 3813 1$: cp a,#TK_VAR  
      0015A4 27 03            [ 1] 3814 	jreq 2$ 
      0015A6 CC 08 79         [ 2] 3815 	jp syntax_error
      0015A9 1F 06            [ 2] 3816 2$:	ldw (VAR_ADDR,sp),x 
      0015AB 0D 05            [ 1] 3817 	tnz (SKIP,sp)
      0015AD 26 06            [ 1] 3818 	jrne 21$ 
      0015AF CD 13 4D         [ 4] 3819 	call var_name 
      0015B2 CD 02 C0         [ 4] 3820 	call putc   
      0015B5                       3821 21$:
      0015B5 A6 3A            [ 1] 3822 	ld a,#':
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015B7 CD 02 C0         [ 4] 3823 	call putc 
      0015BA CD 15 6F         [ 4] 3824 	call save_context 
      0015BD 72 5F 00 03      [ 1] 3825 	clr count  
      0015C1 CD 00 00         [ 4] 3826 	call readln 
      0015C4 AE 16 90         [ 2] 3827 	ldw x,#tib 
      0015C7 3B 00 03         [ 1] 3828 	push count
      0015CA 4B 00            [ 1] 3829 	push #0 
      0015CC 72 FB 01         [ 2] 3830 	addw x,(1,sp)
      0015CF 5C               [ 2] 3831 	incw x 
      0015D0                       3832 	_drop 2 
      0015D0 5B 02            [ 2]    1     addw sp,#2 
      0015D2 72 5F 00 01      [ 1] 3833 	clr in 
      0015D6 CD 0B F0         [ 4] 3834 	call get_token
      0015D9 A1 84            [ 1] 3835 	cp a,#TK_INTGR
      0015DB 27 06            [ 1] 3836 	jreq 3$ 
      0015DD CD 15 7F         [ 4] 3837 	call rest_context 
      0015E0 CC 08 79         [ 2] 3838 	jp syntax_error
      0015E3 16 06            [ 2] 3839 3$: ldw y,(VAR_ADDR,sp) 
      0015E5 90 FF            [ 2] 3840 	ldw (y),x 
      0015E7 CD 15 7F         [ 4] 3841 	call rest_context
      0015EA CD 09 6B         [ 4] 3842 	call next_token 
      0015ED A1 09            [ 1] 3843 	cp a,#TK_COMMA 
      0015EF 27 A0            [ 1] 3844 	jreq input_loop 
      0015F1 A1 01            [ 1] 3845 	cp a,#TK_COLON 
      0015F3 23 03            [ 2] 3846     jrule input_exit 
      0015F5 CC 08 79         [ 2] 3847 	jp syntax_error 
      0015F8                       3848 input_exit:
      0015F8                       3849 	_drop VSIZE 
      0015F8 5B 07            [ 2]    1     addw sp,#VSIZE 
      0015FA 81               [ 4] 3850 	ret 
                                   3851 
                                   3852 
                                   3853 ;---------------------
                                   3854 ; BASIC: REMARK | ' 
                                   3855 ; skip comment to end of line 
                                   3856 ;---------------------- 
      0015FB                       3857 remark:
      0015FB 55 00 03 00 01   [ 1] 3858 	mov in,count 
      001600 81               [ 4] 3859  	ret 
                                   3860 
                                   3861 
                                   3862 ;---------------------
                                   3863 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3864 ; read in loop 'addr'  
                                   3865 ; apply & 'mask' to value 
                                   3866 ; loop while result==0.  
                                   3867 ; 'xor_mask' is used to 
                                   3868 ; invert the wait logic.
                                   3869 ; i.e. loop while not 0.
                                   3870 ;---------------------
                           000001  3871 	XMASK=1 
                           000002  3872 	MASK=2
                           000003  3873 	ADDR=3
                           000004  3874 	VSIZE=4
      001601                       3875 wait: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001601                       3876 	_vars VSIZE
      001601 52 04            [ 2]    1     sub sp,#VSIZE 
      001603 0F 01            [ 1] 3877 	clr (XMASK,sp) 
      001605 CD 10 18         [ 4] 3878 	call arg_list 
      001608 A1 02            [ 1] 3879 	cp a,#2
      00160A 24 03            [ 1] 3880 	jruge 0$
      00160C CC 08 79         [ 2] 3881 	jp syntax_error 
      00160F A1 03            [ 1] 3882 0$:	cp a,#3
      001611 25 04            [ 1] 3883 	jrult 1$
      001613 85               [ 2] 3884 	popw x 
      001614 9F               [ 1] 3885 	ld a,xl
      001615 6B 01            [ 1] 3886 	ld (XMASK,sp),a 
      001617 85               [ 2] 3887 1$: popw x ; mask 
      001618 9F               [ 1] 3888 	ld a,xl 
      001619 6B 02            [ 1] 3889 	ld (MASK,sp),a 
      00161B 85               [ 2] 3890 	popw x ; address 
      00161C F6               [ 1] 3891 2$:	ld a,(x)
      00161D 14 02            [ 1] 3892 	and a,(MASK,sp)
      00161F 18 01            [ 1] 3893 	xor a,(XMASK,sp)
      001621 27 F9            [ 1] 3894 	jreq 2$ 
      001623                       3895 	_drop VSIZE 
      001623 5B 04            [ 2]    1     addw sp,#VSIZE 
      001625 81               [ 4] 3896 	ret 
                                   3897 
                                   3898 ;---------------------
                                   3899 ; BASIC: BSET addr,mask
                                   3900 ; set bits at 'addr' corresponding 
                                   3901 ; to those of 'mask' that are at 1.
                                   3902 ; arguments:
                                   3903 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3904 ;   mask        mask|addr
                                   3905 ; output:
                                   3906 ;	none 
                                   3907 ;--------------------------
      001626                       3908 bit_set:
      001626 CD 10 18         [ 4] 3909 	call arg_list 
      001629 A1 02            [ 1] 3910 	cp a,#2	 
      00162B 27 03            [ 1] 3911 	jreq 1$ 
      00162D CC 08 79         [ 2] 3912 	jp syntax_error
      001630                       3913 1$: 
      001630 85               [ 2] 3914 	popw x ; mask 
      001631 9F               [ 1] 3915 	ld a,xl 
      001632 85               [ 2] 3916 	popw x ; addr  
      001633 FA               [ 1] 3917 	or a,(x)
      001634 F7               [ 1] 3918 	ld (x),a
      001635 81               [ 4] 3919 	ret 
                                   3920 
                                   3921 ;---------------------
                                   3922 ; BASIC: BRES addr,mask
                                   3923 ; reset bits at 'addr' corresponding 
                                   3924 ; to those of 'mask' that are at 1.
                                   3925 ; arguments:
                                   3926 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3927 ;   mask	    ~mask&*addr  
                                   3928 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3929 ;	none 
                                   3930 ;--------------------------
      001636                       3931 bit_reset:
      001636 CD 10 18         [ 4] 3932 	call arg_list 
      001639 A1 02            [ 1] 3933 	cp a,#2  
      00163B 27 03            [ 1] 3934 	jreq 1$ 
      00163D CC 08 79         [ 2] 3935 	jp syntax_error
      001640                       3936 1$: 
      001640 85               [ 2] 3937 	popw x ; mask 
      001641 9F               [ 1] 3938 	ld a,xl 
      001642 43               [ 1] 3939 	cpl a 
      001643 85               [ 2] 3940 	popw x ; addr  
      001644 F4               [ 1] 3941 	and a,(x)
      001645 F7               [ 1] 3942 	ld (x),a 
      001646 81               [ 4] 3943 	ret 
                                   3944 
                                   3945 ;---------------------
                                   3946 ; BASIC: BTOGL addr,mask
                                   3947 ; toggle bits at 'addr' corresponding 
                                   3948 ; to those of 'mask' that are at 1.
                                   3949 ; arguments:
                                   3950 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3951 ;   mask	    mask^*addr  
                                   3952 ; output:
                                   3953 ;	none 
                                   3954 ;--------------------------
      001647                       3955 bit_toggle:
      001647 CD 10 18         [ 4] 3956 	call arg_list 
      00164A A1 02            [ 1] 3957 	cp a,#2 
      00164C 27 03            [ 1] 3958 	jreq 1$ 
      00164E CC 08 79         [ 2] 3959 	jp syntax_error
      001651 85               [ 2] 3960 1$: popw x ; mask 
      001652 9F               [ 1] 3961 	ld a,xl 
      001653 85               [ 2] 3962 	popw x ; addr  
      001654 F8               [ 1] 3963 	xor a,(x)
      001655 F7               [ 1] 3964 	ld (x),a 
      001656 81               [ 4] 3965 	ret 
                                   3966 
                                   3967 
                                   3968 ;---------------------
                                   3969 ; BASIC: BTEST(addr,bit)
                                   3970 ; return bit value at 'addr' 
                                   3971 ; bit is in range {0..7}.
                                   3972 ; arguments:
                                   3973 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3974 ;   bit 	    bit position {0..7}  
                                   3975 ; output:
                                   3976 ;	none 
                                   3977 ;--------------------------
      001657                       3978 bit_test:
      001657 CD 10 13         [ 4] 3979 	call func_args 
      00165A A1 02            [ 1] 3980 	cp a,#2
      00165C 27 03            [ 1] 3981 	jreq 0$
      00165E CC 08 79         [ 2] 3982 	jp syntax_error
      001661                       3983 0$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001661 85               [ 2] 3984 	popw x 
      001662 9F               [ 1] 3985 	ld a,xl 
      001663 A4 07            [ 1] 3986 	and a,#7
      001665 88               [ 1] 3987 	push a   
      001666 A6 01            [ 1] 3988 	ld a,#1 
      001668 0D 01            [ 1] 3989 1$: tnz (1,sp)
      00166A 27 05            [ 1] 3990 	jreq 2$
      00166C 48               [ 1] 3991 	sll a 
      00166D 0A 01            [ 1] 3992 	dec (1,sp)
      00166F 20 F7            [ 2] 3993 	jra 1$
      001671                       3994 2$: _drop 1 
      001671 5B 01            [ 2]    1     addw sp,#1 
      001673 85               [ 2] 3995 	popw x 
      001674 F4               [ 1] 3996 	and a,(x)
      001675 27 02            [ 1] 3997 	jreq 3$
      001677 A6 01            [ 1] 3998 	ld a,#1 
      001679 5F               [ 1] 3999 3$:	clrw x 
      00167A 97               [ 1] 4000 	ld xl,a 
      00167B A6 84            [ 1] 4001 	ld a,#TK_INTGR
      00167D 81               [ 4] 4002 	ret
                                   4003 
                                   4004 
                                   4005 ;--------------------
                                   4006 ; BASIC: POKE addr,byte
                                   4007 ; put a byte at addr 
                                   4008 ;--------------------
      00167E                       4009 poke:
      00167E CD 10 18         [ 4] 4010 	call arg_list 
      001681 A1 02            [ 1] 4011 	cp a,#2
      001683 27 03            [ 1] 4012 	jreq 1$
      001685 CC 08 79         [ 2] 4013 	jp syntax_error
      001688                       4014 1$:	
      001688 85               [ 2] 4015 	popw x  
      001689 9F               [ 1] 4016     ld a,xl 
      00168A 85               [ 2] 4017 	popw x 
      00168B F7               [ 1] 4018 	ld (x),a 
      00168C 81               [ 4] 4019 	ret 
                                   4020 
                                   4021 ;-----------------------
                                   4022 ; BASIC: PEEK(addr)
                                   4023 ; get the byte at addr 
                                   4024 ; input:
                                   4025 ;	none 
                                   4026 ; output:
                                   4027 ;	X 		value 
                                   4028 ;-----------------------
      00168D                       4029 peek:
      00168D CD 10 13         [ 4] 4030 	call func_args
      001690 A1 01            [ 1] 4031 	cp a,#1 
      001692 27 03            [ 1] 4032 	jreq 1$
      001694 CC 08 79         [ 2] 4033 	jp syntax_error
      001697 85               [ 2] 4034 1$: popw x 
      001698 F6               [ 1] 4035 	ld a,(x)
      001699 5F               [ 1] 4036 	clrw x 
      00169A 97               [ 1] 4037 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00169B A6 84            [ 1] 4038 	ld a,#TK_INTGR
      00169D 81               [ 4] 4039 	ret 
                                   4040 
                                   4041 ;---------------------------
                                   4042 ; BASIC IF expr : instructions
                                   4043 ; evaluate expr and if true 
                                   4044 ; execute instructions on same line. 
                                   4045 ;----------------------------
      00169E                       4046 if: 
      00169E CD 11 5A         [ 4] 4047 	call relation 
      0016A1 A1 84            [ 1] 4048 	cp a,#TK_INTGR
      0016A3 27 03            [ 1] 4049 	jreq 1$ 
      0016A5 CC 08 79         [ 2] 4050 	jp syntax_error
      0016A8 4F               [ 1] 4051 1$:	clr a 
      0016A9 5D               [ 2] 4052 	tnzw x 
      0016AA 26 05            [ 1] 4053 	jrne 9$  
                                   4054 ;skip to next line
      0016AC 55 00 03 00 01   [ 1] 4055 	mov in,count
      0016B1 81               [ 4] 4056 9$:	ret 
                                   4057 
                                   4058 ;------------------------
                                   4059 ; BASIC: FOR var=expr 
                                   4060 ; set variable to expression 
                                   4061 ; leave variable address 
                                   4062 ; on stack and set
                                   4063 ; FLOOP bit in 'flags'
                                   4064 ;-----------------
                           000001  4065 	RETL1=1 ; return address  
                           000003  4066 	FSTEP=3  ; variable increment
                           000005  4067 	LIMIT=5 ; loop limit 
                           000007  4068 	CVAR=7   ; control variable 
                           000009  4069 	INW=9   ;  in.w saved
                           00000B  4070 	BPTR=11 ; baseptr saved
                           00000A  4071 	VSIZE=10  
      0016B2                       4072 for: ; { -- var_addr }
      0016B2 85               [ 2] 4073 	popw x ; call return address 
      0016B3                       4074 	_vars VSIZE 
      0016B3 52 0A            [ 2]    1     sub sp,#VSIZE 
      0016B5 89               [ 2] 4075 	pushw x  ; RETL1 
      0016B6 A6 85            [ 1] 4076 	ld a,#TK_VAR 
      0016B8 CD 10 06         [ 4] 4077 	call expect
      0016BB 1F 07            [ 2] 4078 	ldw (CVAR,sp),x  ; control variable 
      0016BD CD 12 3D         [ 4] 4079 	call let_var 
      0016C0 72 14 00 23      [ 1] 4080 	bset flags,#FLOOP 
                                   4081 ; open space on stack for loop data 
      0016C4 5F               [ 1] 4082 	clrw x 
      0016C5 1F 0B            [ 2] 4083 	ldw (BPTR,sp),x 
      0016C7 1F 09            [ 2] 4084 	ldw (INW,sp),x 
      0016C9 CD 09 6B         [ 4] 4085 	call next_token 
      0016CC A1 80            [ 1] 4086 	cp a,#TK_CMD 
      0016CE 27 03            [ 1] 4087 	jreq 1$
      0016D0 CC 08 79         [ 2] 4088 	jp syntax_error
      0016D3                       4089 1$:  
      0016D3 A3 16 DB         [ 2] 4090 	cpw x,#to 
      0016D6 27 03            [ 1] 4091 	jreq to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016D8 CC 08 79         [ 2] 4092 	jp syntax_error 
                                   4093 
                                   4094 ;-----------------------------------
                                   4095 ; BASIC: TO expr 
                                   4096 ; second part of FOR loop initilization
                                   4097 ; leave limit on stack and set 
                                   4098 ; FTO bit in 'flags'
                                   4099 ;-----------------------------------
      0016DB                       4100 to: ; { var_addr -- var_addr limit step }
      0016DB 72 04 00 23 03   [ 2] 4101 	btjt flags,#FLOOP,1$
      0016E0 CC 08 79         [ 2] 4102 	jp syntax_error
      0016E3 CD 11 5A         [ 4] 4103 1$: call relation  
      0016E6 A1 84            [ 1] 4104 	cp a,#TK_INTGR 
      0016E8 27 03            [ 1] 4105 	jreq 2$ 
      0016EA CC 08 79         [ 2] 4106 	jp syntax_error
      0016ED 1F 05            [ 2] 4107 2$: ldw (LIMIT,sp),x
                                   4108 ;	ldw x,in.w 
      0016EF CD 09 6B         [ 4] 4109 	call next_token
      0016F2 A1 00            [ 1] 4110 	cp a,#TK_NONE  
      0016F4 27 0E            [ 1] 4111 	jreq 4$ 
      0016F6 A1 80            [ 1] 4112 	cp a,#TK_CMD
      0016F8 26 05            [ 1] 4113 	jrne 3$
      0016FA A3 17 0B         [ 2] 4114 	cpw x,#step 
      0016FD 27 0C            [ 1] 4115 	jreq step
      0016FF                       4116 3$:	
      0016FF                       4117 	_unget_token   	 
      0016FF 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001704                       4118 4$:	
      001704 AE 00 01         [ 2] 4119 	ldw x,#1   ; default step  
      001707 1F 03            [ 2] 4120 	ldw (FSTEP,sp),x 
      001709 20 14            [ 2] 4121 	jra store_loop_addr 
                                   4122 
                                   4123 
                                   4124 ;----------------------------------
                                   4125 ; BASIC: STEP expr 
                                   4126 ; optional third par of FOR loop
                                   4127 ; initialization. 	
                                   4128 ;------------------------------------
      00170B                       4129 step: ; {var limit -- var limit step}
      00170B 72 04 00 23 03   [ 2] 4130 	btjt flags,#FLOOP,1$
      001710 CC 08 79         [ 2] 4131 	jp syntax_error
      001713 CD 11 5A         [ 4] 4132 1$: call relation
      001716 A1 84            [ 1] 4133 	cp a,#TK_INTGR
      001718 27 03            [ 1] 4134 	jreq 2$
      00171A CC 08 79         [ 2] 4135 	jp syntax_error
      00171D 1F 03            [ 2] 4136 2$:	ldw (FSTEP,sp),x ; step
                                   4137 ; leave loop back entry point on cstack 
                                   4138 ; cstack is 1 call deep from interpreter
      00171F                       4139 store_loop_addr:
      00171F CE 00 04         [ 2] 4140 	ldw x,basicptr  
      001722 1F 0B            [ 2] 4141 	ldw (BPTR,sp),x 
      001724 CE 00 00         [ 2] 4142 	ldw x,in.w 
      001727 1F 09            [ 2] 4143 	ldw (INW,sp),x   
      001729 72 15 00 23      [ 1] 4144 	bres flags,#FLOOP 
      00172D 72 5C 00 20      [ 1] 4145 	inc loop_depth  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001731 81               [ 4] 4146 	ret 
                                   4147 
                                   4148 ;--------------------------------
                                   4149 ; BASIC: NEXT var 
                                   4150 ; FOR loop control 
                                   4151 ; increment variable with step 
                                   4152 ; and compare with limit 
                                   4153 ; loop if threshold not crossed.
                                   4154 ; else stack. 
                                   4155 ; and decrement 'loop_depth' 
                                   4156 ;--------------------------------
      001732                       4157 next: ; {var limit step retl1 -- [var limit step ] }
      001732 72 5D 00 20      [ 1] 4158 	tnz loop_depth 
      001736 26 03            [ 1] 4159 	jrne 1$ 
      001738 CC 08 79         [ 2] 4160 	jp syntax_error 
      00173B                       4161 1$: 
      00173B A6 85            [ 1] 4162 	ld a,#TK_VAR 
      00173D CD 10 06         [ 4] 4163 	call expect
                                   4164 ; check for good variable after NEXT 	 
      001740 13 07            [ 2] 4165 	cpw x,(CVAR,sp)
      001742 27 03            [ 1] 4166 	jreq 2$  
      001744 CC 08 79         [ 2] 4167 	jp syntax_error ; not the good one 
      001747                       4168 2$: ; increment variable 
      001747 FE               [ 2] 4169 	ldw x,(x)  ; get var value 
      001748 72 FB 03         [ 2] 4170 	addw x,(FSTEP,sp) ; var+step 
      00174B 16 07            [ 2] 4171 	ldw y,(CVAR,sp)
      00174D 90 FF            [ 2] 4172 	ldw (y),x ; save var new value 
                                   4173 ; check sign of STEP  
      00174F A6 80            [ 1] 4174 	ld a,#0x80
      001751 15 03            [ 1] 4175 	bcp a,(FSTEP,sp)
      001753 2A 06            [ 1] 4176 	jrpl 4$
                                   4177 ;negative step 
      001755 13 05            [ 2] 4178 	cpw x,(LIMIT,sp)
      001757 2F 1B            [ 1] 4179 	jrslt loop_done
      001759 20 04            [ 2] 4180 	jra loop_back 
      00175B                       4181 4$: ; positive step
      00175B 13 05            [ 2] 4182 	cpw x,(LIMIT,sp)
      00175D 2C 15            [ 1] 4183 	jrsgt loop_done
      00175F                       4184 loop_back:
      00175F 1E 0B            [ 2] 4185 	ldw x,(BPTR,sp)
      001761 CF 00 04         [ 2] 4186 	ldw basicptr,x 
      001764 72 01 00 23 05   [ 2] 4187 	btjf flags,#FRUN,1$ 
      001769 E6 02            [ 1] 4188 	ld a,(2,x)
      00176B C7 00 03         [ 1] 4189 	ld count,a
      00176E 1E 09            [ 2] 4190 1$:	ldw x,(INW,sp)
      001770 CF 00 00         [ 2] 4191 	ldw in.w,x 
      001773 81               [ 4] 4192 	ret 
      001774                       4193 loop_done:
                                   4194 	; remove loop data from stack  
      001774 85               [ 2] 4195 	popw x
      001775                       4196 	_drop VSIZE 
      001775 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001777 72 5A 00 20      [ 1] 4197 	dec loop_depth 
                                   4198 ;	pushw x 
                                   4199 ;	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00177B FC               [ 2] 4200 	jp (x)
                                   4201 
                                   4202 ;----------------------------
                                   4203 ; called by goto/gosub
                                   4204 ; to get target line number 
                                   4205 ;---------------------------
      00177C                       4206 get_target_line:
      00177C CD 11 5A         [ 4] 4207 	call relation 
      00177F A1 84            [ 1] 4208 	cp a,#TK_INTGR
      001781 27 03            [ 1] 4209 	jreq 1$
      001783 CC 08 79         [ 2] 4210 	jp syntax_error
      001786 CD 04 02         [ 4] 4211 1$:	call search_lineno  
      001789 5D               [ 2] 4212 	tnzw x 
      00178A 26 05            [ 1] 4213 	jrne 2$ 
      00178C A6 05            [ 1] 4214 	ld a,#ERR_NO_LINE 
      00178E CC 08 7B         [ 2] 4215 	jp tb_error 
      001791 81               [ 4] 4216 2$:	ret 
                                   4217 
                                   4218 ;------------------------
                                   4219 ; BASIC: GOTO line# 
                                   4220 ; jump to line# 
                                   4221 ; here cstack is 2 call deep from interpreter 
                                   4222 ;------------------------
      001792                       4223 goto:
      001792 72 00 00 23 06   [ 2] 4224 	btjt flags,#FRUN,0$ 
      001797 A6 06            [ 1] 4225 	ld a,#ERR_RUN_ONLY
      001799 CC 08 7B         [ 2] 4226 	jp tb_error 
      00179C 81               [ 4] 4227 	ret 
      00179D CD 17 7C         [ 4] 4228 0$:	call get_target_line
      0017A0                       4229 jp_to_target:
      0017A0 CF 00 04         [ 2] 4230 	ldw basicptr,x 
      0017A3 E6 02            [ 1] 4231 	ld a,(2,x)
      0017A5 C7 00 03         [ 1] 4232 	ld count,a 
      0017A8 35 03 00 01      [ 1] 4233 	mov in,#3 
      0017AC 81               [ 4] 4234 	ret 
                                   4235 
                                   4236 
                                   4237 ;--------------------
                                   4238 ; BASIC: GOSUB line#
                                   4239 ; basic subroutine call
                                   4240 ; actual line# and basicptr 
                                   4241 ; are saved on cstack
                                   4242 ; here cstack is 2 call deep from interpreter 
                                   4243 ;--------------------
                           000003  4244 	RET_ADDR=3
                           000005  4245 	RET_INW=5
                           000004  4246 	VSIZE=4  
      0017AD                       4247 gosub:
      0017AD 72 00 00 23 06   [ 2] 4248 	btjt flags,#FRUN,0$ 
      0017B2 A6 06            [ 1] 4249 	ld a,#ERR_RUN_ONLY
      0017B4 CC 08 7B         [ 2] 4250 	jp tb_error 
      0017B7 81               [ 4] 4251 	ret 
      0017B8 85               [ 2] 4252 0$:	popw x 
      0017B9                       4253 	_vars VSIZE  
      0017B9 52 04            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017BB 89               [ 2] 4254 	pushw x 
      0017BC CE 00 04         [ 2] 4255 	ldw x,basicptr
      0017BF 1F 03            [ 2] 4256 	ldw (RET_ADDR,sp),x 
      0017C1 CD 17 7C         [ 4] 4257 	call get_target_line  
      0017C4 89               [ 2] 4258 	pushw x 
      0017C5 CE 00 00         [ 2] 4259 	ldw x,in.w 
      0017C8 1F 07            [ 2] 4260 	ldw (RET_INW+2,sp),x
      0017CA 85               [ 2] 4261 	popw x 
      0017CB 20 D3            [ 2] 4262 	jra jp_to_target
                                   4263 
                                   4264 ;------------------------
                                   4265 ; BASIC: RETURN 
                                   4266 ; exit from a subroutine 
                                   4267 ; 
                                   4268 ;------------------------
      0017CD                       4269 return:
      0017CD 72 00 00 23 05   [ 2] 4270 	btjt flags,#FRUN,0$ 
      0017D2 A6 06            [ 1] 4271 	ld a,#ERR_RUN_ONLY
      0017D4 CC 08 7B         [ 2] 4272 	jp tb_error 
      0017D7                       4273 0$:	
      0017D7 1E 03            [ 2] 4274 	ldw x,(RET_ADDR,sp) 
      0017D9 CF 00 04         [ 2] 4275 	ldw basicptr,x
      0017DC E6 02            [ 1] 4276 	ld a,(2,x)
      0017DE C7 00 03         [ 1] 4277 	ld count,a  
      0017E1 1E 05            [ 2] 4278 	ldw x,(RET_INW,sp)
      0017E3 CF 00 00         [ 2] 4279 	ldw in.w,x 
      0017E6 85               [ 2] 4280 	popw x 
      0017E7                       4281 	_drop VSIZE 
      0017E7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017E9 89               [ 2] 4282 	pushw x
      0017EA 81               [ 4] 4283 	ret  
                                   4284 
                                   4285 
                                   4286 ;----------------------------------
                                   4287 ; BASIC: RUN
                                   4288 ; run BASIC program in RAM
                                   4289 ;----------------------------------- 
      0017EB                       4290 run: 
      0017EB 72 01 00 23 02   [ 2] 4291 	btjf flags,#FRUN,0$  
      0017F0 4F               [ 1] 4292 	clr a 
      0017F1 81               [ 4] 4293 	ret
      0017F2                       4294 0$: 
      0017F2 72 09 00 23 12   [ 2] 4295 	btjf flags,#FBREAK,1$
      0017F7                       4296 	_drop 2 
      0017F7 5B 02            [ 2]    1     addw sp,#2 
      0017F9 CD 15 7F         [ 4] 4297 	call rest_context
      0017FC                       4298 	_drop CTXT_SIZE 
      0017FC 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0017FE 72 19 00 23      [ 1] 4299 	bres flags,#FBREAK 
      001802 72 10 00 23      [ 1] 4300 	bset flags,#FRUN 
      001806 CC 09 1F         [ 2] 4301 	jp interpreter 
      001809 CE 00 1C         [ 2] 4302 1$:	ldw x,txtbgn
      00180C C3 00 1E         [ 2] 4303 	cpw x,txtend 
      00180F 2B 0C            [ 1] 4304 	jrmi run_it 
      001811 AE 08 14         [ 2] 4305 	ldw x,#err_no_prog
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001814 CD 00 00         [ 4] 4306 	call puts 
      001817 55 00 03 00 01   [ 1] 4307 	mov in,count
      00181C 81               [ 4] 4308 	ret 
      00181D                       4309 run_it:	 
      00181D CD 12 0A         [ 4] 4310     call ubound 
      001820                       4311 	_drop 2 ; drop return address 
      001820 5B 02            [ 2]    1     addw sp,#2 
                                   4312 ; clear data pointer 
      001822 5F               [ 1] 4313 	clrw x 
      001823 CF 00 06         [ 2] 4314 	ldw data_ptr,x 
      001826 72 5F 00 08      [ 1] 4315 	clr data_ofs 
      00182A 72 5F 00 09      [ 1] 4316 	clr data_len 
                                   4317 ; initialize BASIC pointer 
      00182E CE 00 1C         [ 2] 4318 	ldw x,txtbgn 
      001831 CF 00 04         [ 2] 4319 	ldw basicptr,x 
      001834 E6 02            [ 1] 4320 	ld a,(2,x)
      001836 C7 00 03         [ 1] 4321 	ld count,a
      001839 35 03 00 01      [ 1] 4322 	mov in,#3	
      00183D 72 10 00 23      [ 1] 4323 	bset flags,#FRUN 
      001841 CC 09 1F         [ 2] 4324 	jp interpreter 
                                   4325 
                                   4326 
                                   4327 ;----------------------
                                   4328 ; BASIC: END
                                   4329 ; end running program
                                   4330 ;---------------------- 
      001844                       4331 cmd_end: 
                                   4332 ; clean stack 
      001844 AE 17 FF         [ 2] 4333 	ldw x,#STACK_EMPTY
      001847 94               [ 1] 4334 	ldw sp,x 
      001848 CC 09 00         [ 2] 4335 	jp warm_start
                                   4336 
                                   4337 ;-----------------
                                   4338 ; 1 Khz beep 
                                   4339 ;-----------------
      00184B                       4340 beep_1khz:: 
      00184B AE 00 64         [ 2] 4341 	ldw x,#100
      00184E 90 AE 03 E8      [ 2] 4342 	ldw y,#1000
      001852 20 0D            [ 2] 4343 	jra beep
                                   4344 
                                   4345 ;-----------------------
                                   4346 ; BASIC: TONE expr1,expr2
                                   4347 ; used TIMER2 channel 1
                                   4348 ; to produce a tone 
                                   4349 ; arguments:
                                   4350 ;    expr1   frequency 
                                   4351 ;    expr2   duration msec.
                                   4352 ;---------------------------
      001854                       4353 tone:
      001854 CD 10 18         [ 4] 4354 	call arg_list 
      001857 A1 02            [ 1] 4355 	cp a,#2 
      001859 27 03            [ 1] 4356 	jreq 1$
      00185B CC 08 79         [ 2] 4357 	jp syntax_error 
      00185E                       4358 1$: 
      00185E 85               [ 2] 4359 	popw x ; duration
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00185F 90 85            [ 2] 4360 	popw y ; frequency 
      001861                       4361 beep:  
      001861 89               [ 2] 4362 	pushw x 
      001862 AE F4 24         [ 2] 4363 	ldw x,#TIM2_CLK_FREQ
      001865 65               [ 2] 4364 	divw x,y 
                                   4365 ; round to nearest integer 
      001866 90 A3 7A 12      [ 2] 4366 	cpw y,#TIM2_CLK_FREQ/2
      00186A 2B 01            [ 1] 4367 	jrmi 2$
      00186C 5C               [ 2] 4368 	incw x 
      00186D                       4369 2$:	 
      00186D 9E               [ 1] 4370 	ld a,xh 
      00186E C7 53 0D         [ 1] 4371 	ld TIM2_ARRH,a 
      001871 9F               [ 1] 4372 	ld a,xl 
      001872 C7 53 0E         [ 1] 4373 	ld TIM2_ARRL,a 
                                   4374 ; 50% duty cycle 
      001875 8C               [ 1] 4375 	ccf 
      001876 56               [ 2] 4376 	rrcw x 
      001877 9E               [ 1] 4377 	ld a,xh 
      001878 C7 53 0F         [ 1] 4378 	ld TIM2_CCR1H,a 
      00187B 9F               [ 1] 4379 	ld a,xl
      00187C C7 53 10         [ 1] 4380 	ld TIM2_CCR1L,a
      00187F 72 10 53 08      [ 1] 4381 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001883 72 10 53 00      [ 1] 4382 	bset TIM2_CR1,#TIM2_CR1_CEN
      001887 72 10 53 04      [ 1] 4383 	bset TIM2_EGR,#TIM2_EGR_UG
      00188B 85               [ 2] 4384 	popw x 
      00188C CD 1E 0A         [ 4] 4385 	call pause02
      00188F 72 11 53 08      [ 1] 4386 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001893 72 11 53 00      [ 1] 4387 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001897 81               [ 4] 4388 	ret 
                                   4389 
                                   4390 ;-------------------------------
                                   4391 ; BASIC: ADCON 0|1 [,divisor]  
                                   4392 ; disable/enanble ADC 
                                   4393 ;-------------------------------
                           000003  4394 	ONOFF=3 
                           000001  4395 	DIVSOR=1
                           000004  4396 	VSIZE=4 
      001898                       4397 power_adc:
      001898 CD 10 18         [ 4] 4398 	call arg_list 
      00189B A1 02            [ 1] 4399 	cp a,#2	
      00189D 27 0B            [ 1] 4400 	jreq 1$
      00189F A1 01            [ 1] 4401 	cp a,#1 
      0018A1 27 03            [ 1] 4402 	jreq 0$ 
      0018A3 CC 08 79         [ 2] 4403 	jp syntax_error 
      0018A6 AE 00 00         [ 2] 4404 0$: ldw x,#0
      0018A9 89               [ 2] 4405 	pushw x  ; divisor 
      0018AA 1E 03            [ 2] 4406 1$: ldw x,(ONOFF,sp)
      0018AC 5D               [ 2] 4407 	tnzw x 
      0018AD 27 1A            [ 1] 4408 	jreq 2$ 
      0018AF 1E 01            [ 2] 4409 	ldw x,(DIVSOR,sp) ; divisor 
      0018B1 9F               [ 1] 4410 	ld a,xl
      0018B2 A4 07            [ 1] 4411 	and a,#7
      0018B4 4E               [ 1] 4412 	swap a 
      0018B5 C7 54 01         [ 1] 4413 	ld ADC_CR1,a
      0018B8 72 16 50 CA      [ 1] 4414 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0018BC 72 10 54 01      [ 1] 4415 	bset ADC_CR1,#ADC_CR1_ADON 
      0018C0                       4416 	_usec_dly 7 
      0018C0 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0018C3 5A               [ 2]    2     decw x
      0018C4 9D               [ 1]    3     nop 
      0018C5 26 FA            [ 1]    4     jrne .-4
      0018C7 20 08            [ 2] 4417 	jra 3$
      0018C9 72 11 54 01      [ 1] 4418 2$: bres ADC_CR1,#ADC_CR1_ADON
      0018CD 72 17 50 CA      [ 1] 4419 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0018D1                       4420 3$:	_drop VSIZE 
      0018D1 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018D3 81               [ 4] 4421 	ret
                                   4422 
                                   4423 ;-----------------------------
                                   4424 ; BASIC: ADCREAD (channel)
                                   4425 ; read adc channel {0..5}
                                   4426 ; output:
                                   4427 ;   A 		TK_INTGR 
                                   4428 ;   X 		value 
                                   4429 ;-----------------------------
      0018D4                       4430 analog_read:
      0018D4 CD 10 13         [ 4] 4431 	call func_args 
      0018D7 A1 01            [ 1] 4432 	cp a,#1 
      0018D9 27 03            [ 1] 4433 	jreq 1$
      0018DB CC 08 79         [ 2] 4434 	jp syntax_error
      0018DE 85               [ 2] 4435 1$: popw x 
      0018DF A3 00 05         [ 2] 4436 	cpw x,#5 
      0018E2 23 05            [ 2] 4437 	jrule 2$
      0018E4 A6 0A            [ 1] 4438 	ld a,#ERR_BAD_VALUE
      0018E6 CC 08 7B         [ 2] 4439 	jp tb_error 
      0018E9 9F               [ 1] 4440 2$: ld a,xl
      0018EA C7 00 0D         [ 1] 4441 	ld acc8,a 
      0018ED A6 05            [ 1] 4442 	ld a,#5
      0018EF C0 00 0D         [ 1] 4443 	sub a,acc8 
      0018F2 C7 54 00         [ 1] 4444 	ld ADC_CSR,a
      0018F5 72 16 54 02      [ 1] 4445 	bset ADC_CR2,#ADC_CR2_ALIGN
      0018F9 72 10 54 01      [ 1] 4446 	bset ADC_CR1,#ADC_CR1_ADON
      0018FD 72 0F 54 00 FB   [ 2] 4447 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001902 CE 54 04         [ 2] 4448 	ldw x,ADC_DRH
      001905 A6 84            [ 1] 4449 	ld a,#TK_INTGR
      001907 81               [ 4] 4450 	ret 
                                   4451 
                                   4452 ;-----------------------
                                   4453 ; BASIC: DREAD(pin)
                                   4454 ; Arduino pins 
                                   4455 ; read state of a digital pin 
                                   4456 ; pin# {0..15}
                                   4457 ; output:
                                   4458 ;    A 		TK_INTGR
                                   4459 ;    X      0|1 
                                   4460 ;-------------------------
                           000001  4461 	PINNO=1
                           000001  4462 	VSIZE=1
      001908                       4463 digital_read:
      001908                       4464 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001908 52 01            [ 2]    1     sub sp,#VSIZE 
      00190A CD 10 13         [ 4] 4465 	call func_args
      00190D A1 01            [ 1] 4466 	cp a,#1
      00190F 27 03            [ 1] 4467 	jreq 1$
      001911 CC 08 79         [ 2] 4468 	jp syntax_error
      001914 85               [ 2] 4469 1$: popw x 
      001915 A3 00 0F         [ 2] 4470 	cpw x,#15 
      001918 23 05            [ 2] 4471 	jrule 2$
      00191A A6 0A            [ 1] 4472 	ld a,#ERR_BAD_VALUE
      00191C CC 08 7B         [ 2] 4473 	jp tb_error 
      00191F CD 1F 3D         [ 4] 4474 2$:	call select_pin 
      001922 6B 01            [ 1] 4475 	ld (PINNO,sp),a
      001924 E6 01            [ 1] 4476 	ld a,(GPIO_IDR,x)
      001926 0D 01            [ 1] 4477 	tnz (PINNO,sp)
      001928 27 05            [ 1] 4478 	jreq 8$
      00192A 44               [ 1] 4479 3$: srl a 
      00192B 0A 01            [ 1] 4480 	dec (PINNO,sp)
      00192D 26 FB            [ 1] 4481 	jrne 3$ 
      00192F A4 01            [ 1] 4482 8$: and a,#1 
      001931 5F               [ 1] 4483 	clrw x 
      001932 97               [ 1] 4484 	ld xl,a 
      001933 A6 84            [ 1] 4485 	ld a,#TK_INTGR
      001935                       4486 	_drop VSIZE
      001935 5B 01            [ 2]    1     addw sp,#VSIZE 
      001937 81               [ 4] 4487 	ret
                                   4488 
                                   4489 ;-----------------------
                                   4490 ; BASIC: DWRITE pin,0|1
                                   4491 ; Arduino pins 
                                   4492 ; write to a digital pin 
                                   4493 ; pin# {0..15}
                                   4494 ; output:
                                   4495 ;    A 		TK_INTGR
                                   4496 ;    X      0|1 
                                   4497 ;-------------------------
                           000001  4498 	PINNO=1
                           000002  4499 	PINVAL=2
                           000002  4500 	VSIZE=2
      001938                       4501 digital_write:
      001938                       4502 	_vars VSIZE 
      001938 52 02            [ 2]    1     sub sp,#VSIZE 
      00193A CD 10 18         [ 4] 4503 	call arg_list  
      00193D A1 02            [ 1] 4504 	cp a,#2 
      00193F 27 03            [ 1] 4505 	jreq 1$
      001941 CC 08 79         [ 2] 4506 	jp syntax_error
      001944 85               [ 2] 4507 1$: popw x 
      001945 9F               [ 1] 4508 	ld a,xl 
      001946 6B 02            [ 1] 4509 	ld (PINVAL,sp),a
      001948 85               [ 2] 4510 	popw x 
      001949 A3 00 0F         [ 2] 4511 	cpw x,#15 
      00194C 23 05            [ 2] 4512 	jrule 2$
      00194E A6 0A            [ 1] 4513 	ld a,#ERR_BAD_VALUE
      001950 CC 08 7B         [ 2] 4514 	jp tb_error 
      001953 CD 1F 3D         [ 4] 4515 2$:	call select_pin 
      001956 6B 01            [ 1] 4516 	ld (PINNO,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001958 A6 01            [ 1] 4517 	ld a,#1
      00195A 0D 01            [ 1] 4518 	tnz (PINNO,sp)
      00195C 27 05            [ 1] 4519 	jreq 4$
      00195E 48               [ 1] 4520 3$: sll a
      00195F 0A 01            [ 1] 4521 	dec (PINNO,sp)
      001961 26 FB            [ 1] 4522 	jrne 3$
      001963 0D 02            [ 1] 4523 4$: tnz (PINVAL,sp)
      001965 26 05            [ 1] 4524 	jrne 5$
      001967 43               [ 1] 4525 	cpl a 
      001968 E4 00            [ 1] 4526 	and a,(GPIO_ODR,x)
      00196A 20 02            [ 2] 4527 	jra 8$
      00196C EA 00            [ 1] 4528 5$: or a,(GPIO_ODR,x)
      00196E E7 00            [ 1] 4529 8$: ld (GPIO_ODR,x),a 
      001970                       4530 	_drop VSIZE 
      001970 5B 02            [ 2]    1     addw sp,#VSIZE 
      001972 81               [ 4] 4531 	ret
                                   4532 
                                   4533 
                                   4534 ;-----------------------
                                   4535 ; BASIC: STOP
                                   4536 ; stop progam execution  
                                   4537 ; without resetting pointers 
                                   4538 ; the program is resumed
                                   4539 ; with RUN 
                                   4540 ;-------------------------
      001973                       4541 stop:
      001973 72 00 00 23 02   [ 2] 4542 	btjt flags,#FRUN,2$
      001978 4F               [ 1] 4543 	clr a
      001979 81               [ 4] 4544 	ret 
      00197A                       4545 2$:	 
                                   4546 ; create space on cstack to save context 
      00197A AE 19 A1         [ 2] 4547 	ldw x,#break_point 
      00197D CD 00 00         [ 4] 4548 	call puts 
      001980                       4549 	_drop 2 ;drop return address 
      001980 5B 02            [ 2]    1     addw sp,#2 
      001982                       4550 	_vars CTXT_SIZE ; context size 
      001982 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001984 CD 15 6F         [ 4] 4551 	call save_context 
      001987 AE 16 90         [ 2] 4552 	ldw x,#tib 
      00198A CF 00 04         [ 2] 4553 	ldw basicptr,x
      00198D 7F               [ 1] 4554 	clr (x)
      00198E 72 5F 00 03      [ 1] 4555 	clr count  
      001992 5F               [ 1] 4556 	clrw x 
      001993 CF 00 00         [ 2] 4557 	ldw in.w,x
      001996 72 11 00 23      [ 1] 4558 	bres flags,#FRUN 
      00199A 72 18 00 23      [ 1] 4559 	bset flags,#FBREAK
      00199E CC 09 1F         [ 2] 4560 	jp interpreter 
      0019A1 0A 62 72 65 61 6B 20  4561 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4562 
                                   4563 ;-----------------------
                                   4564 ; BASIC: NEW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4565 ; from command line only 
                                   4566 ; free program memory
                                   4567 ; and clear variables 
                                   4568 ;------------------------
      0019BF                       4569 new: 
      0019BF 72 01 00 23 01   [ 2] 4570 	btjf flags,#FRUN,0$ 
      0019C4 81               [ 4] 4571 	ret 
      0019C5                       4572 0$:	
      0019C5 CD 06 E5         [ 4] 4573 	call clear_basic 
      0019C8 81               [ 4] 4574 	ret 
                                   4575 	 
                                   4576 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4577 ;  file system routines
                                   4578 ;  MCU flash memory from
                                   4579 ;  0x10000-0x27fff is 
                                   4580 ;  used to store BASIC 
                                   4581 ;  program files. 
                                   4582 ;  use 128 bytes sectors
                                   4583 ;  because this is the MCU 
                                   4584 ;  row size.
                                   4585 ;  file entry aligned to row
                                   4586 ;  	name  variable length
                                   4587 ;  	size  2 bytes  
                                   4588 ; 	data  variable length 
                                   4589 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4590 
                                   4591 ;---------------------------
                                   4592 ; fill pad with zeros 
                                   4593 ;--------------------------
      0019C9                       4594 zero_pad:
      0019C9 AE 16 E0         [ 2] 4595 	ldw x,#pad 
      0019CC A6 80            [ 1] 4596 	ld a,#PAD_SIZE 
      0019CE 7F               [ 1] 4597 1$:	clr (x)
      0019CF 5C               [ 2] 4598 	incw x 
      0019D0 4A               [ 1] 4599 	dec a 
      0019D1 26 FB            [ 1] 4600 	jrne 1$
      0019D3 81               [ 4] 4601 	ret 
                                   4602 
                                   4603 ;--------------------------
                                   4604 ; align farptr to BLOCK_SIZE 
                                   4605 ;---------------------------
      0019D4                       4606 row_align:
      0019D4 A6 7F            [ 1] 4607 	ld a,#0x7f 
      0019D6 C4 00 18         [ 1] 4608 	and a,farptr+2 
      0019D9 27 13            [ 1] 4609 	jreq 1$ 
      0019DB CE 00 17         [ 2] 4610 	ldw x,farptr+1 
      0019DE 1C 00 80         [ 2] 4611 	addw x,#BLOCK_SIZE 
      0019E1 24 04            [ 1] 4612 	jrnc 0$
      0019E3 72 5C 00 16      [ 1] 4613 	inc farptr 
      0019E7 9F               [ 1] 4614 0$: ld a,xl 
      0019E8 A4 80            [ 1] 4615 	and a,#0x80
      0019EA 97               [ 1] 4616 	ld xl,a
      0019EB CF 00 17         [ 2] 4617 	ldw farptr+1,x  	
      0019EE 81               [ 4] 4618 1$:	ret
                                   4619 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4620 ;--------------------
                                   4621 ; input:
                                   4622 ;   X     increment 
                                   4623 ; output:
                                   4624 ;   farptr  incremented 
                                   4625 ;---------------------
      0019EF                       4626 incr_farptr:
      0019EF 72 BB 00 17      [ 2] 4627 	addw x,farptr+1 
      0019F3 24 04            [ 1] 4628 	jrnc 1$
      0019F5 72 5C 00 16      [ 1] 4629 	inc farptr 
      0019F9 CF 00 17         [ 2] 4630 1$:	ldw farptr+1,x  
      0019FC 81               [ 4] 4631 	ret 
                                   4632 
                                   4633 ;------------------------------
                                   4634 ; extended flash memory used as FLASH_DRIVE 
                                   4635 ; seek end of used flash drive   
                                   4636 ; starting at 0x10000 address.
                                   4637 ; 4 consecutives 0 bytes signal free space. 
                                   4638 ; input:
                                   4639 ;	none
                                   4640 ; output:
                                   4641 ;   ffree     free_addr| 0 if memory full.
                                   4642 ;------------------------------
      0019FD                       4643 seek_fdrive:
                                   4644 ; start scan at 0x10000 address 
      0019FD A6 01            [ 1] 4645 	ld a,#1
      0019FF C7 00 16         [ 1] 4646 	ld farptr,a 
      001A02 5F               [ 1] 4647 	clrw x 
      001A03 CF 00 17         [ 2] 4648 	ldw farptr+1,x 
      001A06                       4649 1$:
      001A06 AE 00 03         [ 2] 4650 	ldw x,#3  
      001A09 92 AF 00 16      [ 5] 4651 2$:	ldf a,([farptr],x) 
      001A0D 26 05            [ 1] 4652 	jrne 3$
      001A0F 5A               [ 2] 4653 	decw x
      001A10 2A F7            [ 1] 4654 	jrpl 2$
      001A12 20 0E            [ 2] 4655 	jra 4$ 
      001A14 AE 00 80         [ 2] 4656 3$:	ldw x,#BLOCK_SIZE 
      001A17 CD 19 EF         [ 4] 4657 	call incr_farptr
      001A1A AE 02 80         [ 2] 4658 	ldw x,#0x280  
      001A1D C3 00 16         [ 2] 4659 	cpw x,farptr
      001A20 2B E4            [ 1] 4660 	jrmi 1$
      001A22                       4661 4$: ; copy farptr to ffree	 
      001A22 CE 00 16         [ 2] 4662 	ldw x,farptr 
      001A25 C6 00 18         [ 1] 4663 	ld a,farptr+2 
      001A28 CF 00 19         [ 2] 4664 	ldw ffree,x 
      001A2B C7 00 1B         [ 1] 4665 	ld ffree+2,a  
      001A2E 81               [ 4] 4666 	ret 
                                   4667 
                                   4668 ;-----------------------
                                   4669 ; return amount of free 
                                   4670 ; space on flash drive
                                   4671 ; input:
                                   4672 ;   none
                                   4673 ; output:
                                   4674 ;   acc24   free space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4675 ;-----------------------
      001A2F                       4676 disk_free:
      001A2F AE 80 00         [ 2] 4677 	ldw x,#0x8000
      001A32 72 B0 00 1A      [ 2] 4678 	subw x,ffree+1
      001A36 A6 02            [ 1] 4679 	ld a,#2
      001A38 C2 00 19         [ 1] 4680 	sbc a,ffree 
      001A3B C7 00 0B         [ 1] 4681 	ld acc24,a 
      001A3E CF 00 0C         [ 2] 4682 	ldw acc16,x 
      001A41 81               [ 4] 4683 	ret 
                                   4684 
                                   4685 ;-----------------------
                                   4686 ; compare file name 
                                   4687 ; with name pointed by Y  
                                   4688 ; input:
                                   4689 ;   farptr   file name 
                                   4690 ;   Y        target name 
                                   4691 ; output:
                                   4692 ;   farptr 	 at file_name
                                   4693 ;   X 		 farptr[x] point at size field  
                                   4694 ;   Carry    0|1 no match|match  
                                   4695 ;----------------------
      001A42                       4696 cmp_name:
      001A42 5F               [ 1] 4697 	clrw x
      001A43 92 AF 00 16      [ 5] 4698 1$:	ldf a,([farptr],x)
      001A47 90 F1            [ 1] 4699 	cp a,(y)
      001A49 26 08            [ 1] 4700 	jrne 4$
      001A4B 4D               [ 1] 4701 	tnz a 
      001A4C 27 12            [ 1] 4702 	jreq 9$ 
      001A4E 5C               [ 2] 4703     incw x 
      001A4F 90 5C            [ 2] 4704 	incw y 
      001A51 20 F0            [ 2] 4705 	jra 1$
      001A53                       4706 4$: ;no match 
      001A53 4D               [ 1] 4707 	tnz a 
      001A54 27 07            [ 1] 4708 	jreq 5$
      001A56 5C               [ 2] 4709 	incw x 
      001A57 92 AF 00 16      [ 5] 4710 	ldf a,([farptr],x)
      001A5B 20 F6            [ 2] 4711 	jra 4$  
      001A5D 5C               [ 2] 4712 5$:	incw x ; farptr[x] point at 'size' field 
      001A5E 98               [ 1] 4713 	rcf 
      001A5F 81               [ 4] 4714 	ret
      001A60                       4715 9$: ; match  
      001A60 5C               [ 2] 4716 	incw x  ; farptr[x] at 'size' field 
      001A61 99               [ 1] 4717 	scf 
      001A62 81               [ 4] 4718 	ret 
                                   4719 
                                   4720 ;-----------------------
                                   4721 ; search file in 
                                   4722 ; flash memory 
                                   4723 ; input:
                                   4724 ;   Y       file name  
                                   4725 ; output:
                                   4726 ;   farptr  addr at name|0
                                   4727 ;   X       offset to size field
                                   4728 ;-----------------------
                           000001  4729 	FSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                           000003  4730 	YSAVE=3
                           000004  4731 	VSIZE=4 
      001A63                       4732 search_file: 
      001A63                       4733 	_vars VSIZE
      001A63 52 04            [ 2]    1     sub sp,#VSIZE 
      001A65 17 03            [ 2] 4734 	ldw (YSAVE,sp),y  
      001A67 5F               [ 1] 4735 	clrw x 
      001A68 CF 00 17         [ 2] 4736 	ldw farptr+1,x 
      001A6B 35 01 00 16      [ 1] 4737 	mov farptr,#1
      001A6F                       4738 1$:	
                                   4739 ; check if farptr is after any file 
                                   4740 ; if  0 then so.
      001A6F 92 BC 00 16      [ 5] 4741 	ldf a,[farptr]
      001A73 27 27            [ 1] 4742 	jreq 6$
      001A75 5F               [ 1] 4743 2$: clrw x 	
      001A76 16 03            [ 2] 4744 	ldw y,(YSAVE,sp) 
      001A78 CD 1A 42         [ 4] 4745 	call cmp_name
      001A7B 25 2F            [ 1] 4746 	jrc 9$
      001A7D 92 AF 00 16      [ 5] 4747 	ldf a,([farptr],x)
      001A81 6B 01            [ 1] 4748 	ld (FSIZE,sp),a 
      001A83 5C               [ 2] 4749 	incw x 
      001A84 92 AF 00 16      [ 5] 4750 	ldf a,([farptr],x)
      001A88 6B 02            [ 1] 4751 	ld (FSIZE+1,sp),a 
      001A8A 5C               [ 2] 4752 	incw x 
      001A8B 72 FB 01         [ 2] 4753 	addw x,(FSIZE,sp) ; skip over file data
      001A8E CD 19 EF         [ 4] 4754 	call incr_farptr
      001A91 CD 19 D4         [ 4] 4755 	call row_align  
      001A94 AE 02 80         [ 2] 4756 	ldw x,#0x280
      001A97 C3 00 16         [ 2] 4757 	cpw x,farptr 
      001A9A 2A D3            [ 1] 4758 	jrpl 1$
      001A9C                       4759 6$: ; file not found 
      001A9C 72 5F 00 16      [ 1] 4760 	clr farptr
      001AA0 72 5F 00 17      [ 1] 4761 	clr farptr+1 
      001AA4 72 5F 00 18      [ 1] 4762 	clr farptr+2 
      001AA8                       4763 	_drop VSIZE 
      001AA8 5B 04            [ 2]    1     addw sp,#VSIZE 
      001AAA 98               [ 1] 4764 	rcf
      001AAB 81               [ 4] 4765 	ret
      001AAC                       4766 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001AAC                       4767 	_drop VSIZE 
      001AAC 5B 04            [ 2]    1     addw sp,#VSIZE 
      001AAE 99               [ 1] 4768 	scf 	
      001AAF 81               [ 4] 4769 	ret
                                   4770 
                                   4771 ;--------------------------------
                                   4772 ; BASIC: SAVE "name" 
                                   4773 ; save text program in 
                                   4774 ; flash memory used as permanent
                                   4775 ; storage from address 0x10000-0x27fff 
                                   4776 ;--------------------------------
                           000001  4777 	BSIZE=1
                           000003  4778 	NAMEPTR=3
                           000005  4779 	XSAVE=5
                           000007  4780 	YSAVE=7
                           000008  4781 	VSIZE=8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001AB0                       4782 save:
      001AB0 72 01 00 23 05   [ 2] 4783 	btjf flags,#FRUN,0$ 
      001AB5 A6 07            [ 1] 4784 	ld a,#ERR_CMD_ONLY 
      001AB7 CC 08 7B         [ 2] 4785 	jp tb_error
      001ABA                       4786 0$:	 
      001ABA CE 00 1E         [ 2] 4787 	ldw x,txtend 
      001ABD 72 B0 00 1C      [ 2] 4788 	subw x,txtbgn
      001AC1 26 0C            [ 1] 4789 	jrne 1$
                                   4790 ; nothing to save 
      001AC3 AE 08 14         [ 2] 4791 	ldw x,#err_no_prog 
      001AC6 CD 00 00         [ 4] 4792 	call puts 
      001AC9 55 00 03 00 01   [ 1] 4793 	mov in,count 
      001ACE 81               [ 4] 4794 	ret  	
      001ACF                       4795 1$:	
      001ACF                       4796 	_vars VSIZE 
      001ACF 52 08            [ 2]    1     sub sp,#VSIZE 
      001AD1 1F 01            [ 2] 4797 	ldw (BSIZE,sp),x 
      001AD3 CD 09 6B         [ 4] 4798 	call next_token	
      001AD6 A1 02            [ 1] 4799 	cp a,#TK_QSTR
      001AD8 27 03            [ 1] 4800 	jreq 2$
      001ADA CC 08 79         [ 2] 4801 	jp syntax_error
      001ADD                       4802 2$: 
      001ADD 1F 03            [ 2] 4803 	ldw (NAMEPTR,sp),x  
      001ADF CD 01 74         [ 4] 4804 	call move_prg_to_ram ; move flashing program to 'tib' buffer 
                                   4805 ; check if enough free space 
      001AE2 CD 03 96         [ 4] 4806 	call strlen 
      001AE5 AB 03            [ 1] 4807 	add a,#3
      001AE7 5F               [ 1] 4808 	clrw x 
      001AE8 97               [ 1] 4809 	ld xl,a 
      001AE9 72 FB 01         [ 2] 4810 	addw x,(BSIZE,sp)
      001AEC 4F               [ 1] 4811 	clr a 
      001AED 72 BB 00 1A      [ 2] 4812 	addw x,ffree+1 
      001AF1 C9 00 19         [ 1] 4813 	adc a,ffree 
      001AF4 A1 02            [ 1] 4814 	cp a,#2
      001AF6 2B 0A            [ 1] 4815 	jrmi 21$
      001AF8 A3 80 00         [ 2] 4816 	cpw x,#0x8000
      001AFB 2B 05            [ 1] 4817 	jrmi 21$
      001AFD A6 0E            [ 1] 4818 	ld a,#ERR_NO_FSPACE  
      001AFF CC 08 7B         [ 2] 4819 	jp tb_error
      001B02                       4820 21$: 
                                   4821 ; check for existing file of that name 
      001B02 16 03            [ 2] 4822 	ldw y,(NAMEPTR,sp)	
      001B04 CD 1A 63         [ 4] 4823 	call search_file 
      001B07 24 05            [ 1] 4824 	jrnc 3$ 
      001B09 A6 08            [ 1] 4825 	ld a,#ERR_DUPLICATE 
      001B0B CC 08 7B         [ 2] 4826 	jp tb_error 
      001B0E                       4827 3$:	; initialize farptr 
      001B0E CE 00 19         [ 2] 4828 	ldw x,ffree 
      001B11 C6 00 1B         [ 1] 4829 	ld a,ffree+2 
      001B14 CF 00 16         [ 2] 4830 	ldw farptr,x 
      001B17 C7 00 18         [ 1] 4831 	ld farptr+2,a 
                                   4832 ;** write file name to row buffer **	
      001B1A 16 03            [ 2] 4833 	ldw y,(NAMEPTR,sp)  
      001B1C AE 16 E0         [ 2] 4834 	ldw x,#pad 
      001B1F CD 03 B2         [ 4] 4835 	call strcpy
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B22 CD 03 96         [ 4] 4836 	call strlen 
      001B25 5F               [ 1] 4837 	clrw x 
      001B26 97               [ 1] 4838 	ld xl,a 
      001B27 5C               [ 2] 4839 	incw  x
      001B28 1C 16 E0         [ 2] 4840 	addw x,#pad 
                                   4841 ; ** write file size to row buffer 
      001B2B 16 01            [ 2] 4842 	ldw y,(BSIZE,sp)
      001B2D FF               [ 2] 4843 	ldw (x),y 
      001B2E 1C 00 02         [ 2] 4844 	addw x,#2 
                                   4845 ; ** write file data to row buffer 
      001B31 90 CE 00 1C      [ 2] 4846 	ldw y,txtbgn 
      001B35 90 F6            [ 1] 4847 6$:	ld a,(y)
      001B37 90 5C            [ 2] 4848 	incw y
      001B39 F7               [ 1] 4849 	ld (x),a 
      001B3A 5C               [ 2] 4850 	incw x
      001B3B 90 C3 00 1E      [ 2] 4851 	cpw y,txtend 
      001B3F 27 05            [ 1] 4852 	jreq 12$
      001B41 A3 17 60         [ 2] 4853 	cpw x,#stack_full 
      001B44 2B EF            [ 1] 4854 	jrmi 6$
      001B46                       4855 12$:
      001B46 17 07            [ 2] 4856 	ldw (YSAVE,sp),y 
      001B48                       4857 14$: ; zero buffer end 
      001B48 A3 17 60         [ 2] 4858 	cpw x,#stack_full
      001B4B 27 04            [ 1] 4859 	jreq 16$
      001B4D 7F               [ 1] 4860 	clr (x)
      001B4E 5C               [ 2] 4861 	incw x 
      001B4F 20 F7            [ 2] 4862 	jra 14$
      001B51                       4863 16$:
      001B51 AE 16 E0         [ 2] 4864 	ldw x,#pad 
      001B54 CD 01 88         [ 4] 4865 	call write_row 
      001B57 AE 00 80         [ 2] 4866 	ldw x,#BLOCK_SIZE 
      001B5A CD 19 EF         [ 4] 4867 	call incr_farptr
      001B5D AE 16 E0         [ 2] 4868 	ldw x,#pad 
      001B60 16 07            [ 2] 4869 	ldw y,(YSAVE,sp)
      001B62 90 C3 00 1E      [ 2] 4870 	cpw y,txtend 
      001B66 2B CD            [ 1] 4871 	jrmi 6$
                                   4872 ; save farptr in ffree
      001B68 CE 00 16         [ 2] 4873 	ldw x,farptr 
      001B6B C6 00 18         [ 1] 4874 	ld a,farptr+2 
      001B6E CF 00 19         [ 2] 4875 	ldw ffree,x 
      001B71 C7 00 1B         [ 1] 4876 	ld ffree+2,a
                                   4877 ; print file size 	
      001B74 1E 01            [ 2] 4878 	ldw x,(BSIZE,sp) 
      001B76 CD 09 CC         [ 4] 4879 	call print_int 
      001B79                       4880 	_drop VSIZE 
      001B79 5B 08            [ 2]    1     addw sp,#VSIZE 
      001B7B 81               [ 4] 4881 	ret 
                                   4882 
                                   4883 ;----------------------
                                   4884 ; load file in RAM memory
                                   4885 ; input:
                                   4886 ;    farptr point at file size 
                                   4887 ; output:
                                   4888 ;   y point after BASIC program in RAM.
                                   4889 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B7C                       4890 load_file:
      001B7C CD 19 EF         [ 4] 4891 	call incr_farptr  
      001B7F CD 06 E5         [ 4] 4892 	call clear_basic  
      001B82 5F               [ 1] 4893 	clrw x
      001B83 92 AF 00 16      [ 5] 4894 	ldf a,([farptr],x)
      001B87 90 95            [ 1] 4895 	ld yh,a 
      001B89 5C               [ 2] 4896 	incw x  
      001B8A 92 AF 00 16      [ 5] 4897 	ldf a,([farptr],x)
      001B8E 5C               [ 2] 4898 	incw x 
      001B8F 90 97            [ 1] 4899 	ld yl,a 
      001B91 72 B9 00 1C      [ 2] 4900 	addw y,txtbgn
      001B95 90 CF 00 1E      [ 2] 4901 	ldw txtend,y
      001B99 90 CE 00 1C      [ 2] 4902 	ldw y,txtbgn
      001B9D                       4903 3$:	; load BASIC text 	
      001B9D 92 AF 00 16      [ 5] 4904 	ldf a,([farptr],x)
      001BA1 90 F7            [ 1] 4905 	ld (y),a 
      001BA3 5C               [ 2] 4906 	incw x 
      001BA4 90 5C            [ 2] 4907 	incw y 
      001BA6 90 C3 00 1E      [ 2] 4908 	cpw y,txtend 
      001BAA 2B F1            [ 1] 4909 	jrmi 3$
      001BAC 81               [ 4] 4910 	ret 
                                   4911 
                                   4912 ;------------------------
                                   4913 ; BASIC: LOAD "file" 
                                   4914 ; load file to RAM 
                                   4915 ; for execution 
                                   4916 ;------------------------
      001BAD                       4917 load:
      001BAD 72 01 00 23 07   [ 2] 4918 	btjf flags,#FRUN,0$ 
      001BB2 27 05            [ 1] 4919 	jreq 0$ 
      001BB4 A6 07            [ 1] 4920 	ld a,#ERR_CMD_ONLY 
      001BB6 CC 08 7B         [ 2] 4921 	jp tb_error 
      001BB9                       4922 0$:	
      001BB9 CD 09 6B         [ 4] 4923 	call next_token 
      001BBC A1 02            [ 1] 4924 	cp a,#TK_QSTR
      001BBE 27 03            [ 1] 4925 	jreq 1$
      001BC0 CC 08 79         [ 2] 4926 	jp syntax_error 
      001BC3 90 93            [ 1] 4927 1$:	ldw y,x 
      001BC5 CD 1A 63         [ 4] 4928 	call search_file 
      001BC8 25 05            [ 1] 4929 	jrc 2$ 
      001BCA A6 09            [ 1] 4930 	ld a,#ERR_NOT_FILE
      001BCC CC 08 7B         [ 2] 4931 	jp tb_error  
      001BCF                       4932 2$:
      001BCF CD 1B 7C         [ 4] 4933 	call load_file
                                   4934 ; print loaded size 	 
      001BD2 CE 00 1E         [ 2] 4935 	ldw x,txtend 
      001BD5 72 B0 00 1C      [ 2] 4936 	subw x,txtbgn
      001BD9 CD 09 CC         [ 4] 4937 	call print_int 
      001BDC 81               [ 4] 4938 	ret 
                                   4939 
                                   4940 ;-----------------------------------
                                   4941 ; BASIC: FORGET ["file_name"] 
                                   4942 ; erase file_name and all others 
                                   4943 ; after it. 
                                   4944 ; without argument erase all files 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4945 ;-----------------------------------
                           000001  4946 	NEW_FREE=1 
                           000003  4947 	VSIZE=3 
      001BDD                       4948 forget:
      001BDD                       4949 	_vars VSIZE 
      001BDD 52 03            [ 2]    1     sub sp,#VSIZE 
      001BDF CD 09 6B         [ 4] 4950 	call next_token 
      001BE2 A1 00            [ 1] 4951 	cp a,#TK_NONE 
      001BE4 27 20            [ 1] 4952 	jreq 3$ 
      001BE6 A1 02            [ 1] 4953 	cp a,#TK_QSTR
      001BE8 27 03            [ 1] 4954 	jreq 1$
      001BEA CC 08 79         [ 2] 4955 	jp syntax_error
      001BED 90 93            [ 1] 4956 1$: ldw y,x 
      001BEF 55 00 03 00 01   [ 1] 4957 	mov in,count 
      001BF4 CD 1A 63         [ 4] 4958 	call search_file
      001BF7 25 05            [ 1] 4959 	jrc 2$
      001BF9 A6 09            [ 1] 4960 	ld a,#ERR_NOT_FILE 
      001BFB CC 08 7B         [ 2] 4961 	jp tb_error 
      001BFE                       4962 2$: 
      001BFE CE 00 16         [ 2] 4963 	ldw x,farptr
      001C01 C6 00 18         [ 1] 4964 	ld a,farptr+2
      001C04 20 0A            [ 2] 4965 	jra 4$ 
      001C06                       4966 3$: ; forget all files 
      001C06 AE 01 00         [ 2] 4967 	ldw x,#0x100
      001C09 4F               [ 1] 4968 	clr a 
      001C0A CF 00 16         [ 2] 4969 	ldw farptr,x 
      001C0D C7 00 18         [ 1] 4970 	ld farptr+2,a 
      001C10                       4971 4$:	; save new free address 
      001C10 1F 01            [ 2] 4972 	ldw (NEW_FREE,sp),x
      001C12 6B 03            [ 1] 4973 	ld (NEW_FREE+2,sp),a 
      001C14 CD 01 40         [ 4] 4974 	call move_erase_to_ram
      001C17 CD 01 BB         [ 4] 4975 5$: call block_erase 
      001C1A AE 00 80         [ 2] 4976 	ldw x,#BLOCK_SIZE 
      001C1D CD 19 EF         [ 4] 4977 	call incr_farptr 
      001C20 CD 19 D4         [ 4] 4978 	call row_align 
                                   4979 ; check if all blocks erased
      001C23 C6 00 18         [ 1] 4980 	ld a,farptr+2  
      001C26 C0 00 1B         [ 1] 4981 	sub a,ffree+2
      001C29 C6 00 17         [ 1] 4982 	ld a,farptr+1 
      001C2C C2 00 1A         [ 1] 4983 	sbc a,ffree+1 
      001C2F C6 00 16         [ 1] 4984 	ld a,farptr 
      001C32 C2 00 19         [ 1] 4985 	sbc a,ffree 
      001C35 2B E0            [ 1] 4986 	jrmi 5$ 
      001C37 7B 03            [ 1] 4987 	ld a,(NEW_FREE+2,sp)
      001C39 1E 01            [ 2] 4988 	ldw x,(NEW_FREE,sp)
      001C3B C7 00 1B         [ 1] 4989 	ld ffree+2,a 
      001C3E CF 00 19         [ 2] 4990 	ldw ffree,x 
      001C41                       4991 	_drop VSIZE 
      001C41 5B 03            [ 2]    1     addw sp,#VSIZE 
      001C43 81               [ 4] 4992 	ret 
                                   4993 
                                   4994 ;----------------------
                                   4995 ; BASIC: DIR 
                                   4996 ; list saved files 
                                   4997 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000001  4998 	COUNT=1 ; files counter 
                           000002  4999 	VSIZE=2 
      001C44                       5000 directory:
      001C44                       5001 	_vars VSIZE 
      001C44 52 02            [ 2]    1     sub sp,#VSIZE 
      001C46 5F               [ 1] 5002 	clrw x 
      001C47 1F 01            [ 2] 5003 	ldw (COUNT,sp),x 
      001C49 CF 00 17         [ 2] 5004 	ldw farptr+1,x 
      001C4C 35 01 00 16      [ 1] 5005 	mov farptr,#1 
      001C50                       5006 dir_loop:
      001C50 5F               [ 1] 5007 	clrw x 
      001C51 92 AF 00 16      [ 5] 5008 	ldf a,([farptr],x)
      001C55 27 3B            [ 1] 5009 	jreq 8$ 
      001C57                       5010 1$: ;name loop 	
      001C57 92 AF 00 16      [ 5] 5011 	ldf a,([farptr],x)
      001C5B 27 06            [ 1] 5012 	jreq 2$ 
      001C5D CD 02 C0         [ 4] 5013 	call putc 
      001C60 5C               [ 2] 5014 	incw x 
      001C61 20 F4            [ 2] 5015 	jra 1$
      001C63 5C               [ 2] 5016 2$: incw x ; skip ending 0. 
      001C64 A6 20            [ 1] 5017 	ld a,#SPACE 
      001C66 CD 02 C0         [ 4] 5018 	call putc 
                                   5019 ; get file size 	
      001C69 92 AF 00 16      [ 5] 5020 	ldf a,([farptr],x)
      001C6D 90 95            [ 1] 5021 	ld yh,a 
      001C6F 5C               [ 2] 5022 	incw x 
      001C70 92 AF 00 16      [ 5] 5023 	ldf a,([farptr],x)
      001C74 5C               [ 2] 5024 	incw x 
      001C75 90 97            [ 1] 5025 	ld yl,a 
      001C77 90 89            [ 2] 5026 	pushw y 
      001C79 72 FB 01         [ 2] 5027 	addw x,(1,sp)
                                   5028 ; skip to next file 
      001C7C CD 19 EF         [ 4] 5029 	call incr_farptr
      001C7F CD 19 D4         [ 4] 5030 	call row_align
                                   5031 ; print file size 
      001C82 85               [ 2] 5032 	popw x ; file size 
      001C83 CD 09 CC         [ 4] 5033 	call print_int 
      001C86 A6 0D            [ 1] 5034 	ld a,#CR 
      001C88 CD 02 C0         [ 4] 5035 	call putc
      001C8B 1E 01            [ 2] 5036 	ldw x,(COUNT,sp)
      001C8D 5C               [ 2] 5037 	incw x
      001C8E 1F 01            [ 2] 5038 	ldw (COUNT,sp),x  
      001C90 20 BE            [ 2] 5039 	jra dir_loop
      001C92                       5040 8$: ; print number of files 
      001C92 1E 01            [ 2] 5041 	ldw x,(COUNT,sp)
      001C94 CD 09 CC         [ 4] 5042 	call print_int 
      001C97 AE 1C B1         [ 2] 5043 	ldw x,#file_count 
      001C9A CD 00 00         [ 4] 5044 	call puts  
                                   5045 ; print drive free space 	
      001C9D CD 1A 2F         [ 4] 5046 	call disk_free
      001CA0 5F               [ 1] 5047 	clrw x  
      001CA1 35 0A 00 0A      [ 1] 5048 	mov base,#10 
      001CA5 CD 09 DC         [ 4] 5049 	call prti24 
      001CA8 AE 1C B9         [ 2] 5050 	ldw x,#drive_free
      001CAB CD 00 00         [ 4] 5051 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001CAE                       5052 	_drop VSIZE 
      001CAE 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CB0 81               [ 4] 5053 	ret
      001CB1 20 66 69 6C 65 73 0A  5054 file_count: .asciz " files\n"
             00
      001CB9 20 62 79 74 65 73 20  5055 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5056 
                                   5057 ;---------------------
                                   5058 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5059 ; write 1 or more byte to FLASH or EEPROM
                                   5060 ; starting at address  
                                   5061 ; input:
                                   5062 ;   expr1  	is address 
                                   5063 ;   expr2,...,exprn   are bytes to write
                                   5064 ; output:
                                   5065 ;   none 
                                   5066 ;---------------------
                           000001  5067 	ADDR=1
                           000002  5068 	VSIZ=2 
      001CC6                       5069 write:
      001CC6                       5070 	_vars VSIZE 
      001CC6 52 02            [ 2]    1     sub sp,#VSIZE 
      001CC8 72 5F 00 16      [ 1] 5071 	clr farptr ; expect 16 bits address 
      001CCC CD 11 11         [ 4] 5072 	call expression
      001CCF A1 84            [ 1] 5073 	cp a,#TK_INTGR 
      001CD1 27 03            [ 1] 5074 	jreq 0$
      001CD3 CC 08 79         [ 2] 5075 	jp syntax_error
      001CD6 1F 01            [ 2] 5076 0$: ldw (ADDR,sp),x 
      001CD8 CD 09 6B         [ 4] 5077 	call next_token 
      001CDB A1 09            [ 1] 5078 	cp a,#TK_COMMA 
      001CDD 27 02            [ 1] 5079 	jreq 1$ 
      001CDF 20 19            [ 2] 5080 	jra 9$ 
      001CE1 CD 11 11         [ 4] 5081 1$:	call expression
      001CE4 A1 84            [ 1] 5082 	cp a,#TK_INTGR
      001CE6 27 03            [ 1] 5083 	jreq 2$
      001CE8 CC 08 79         [ 2] 5084 	jp syntax_error
      001CEB 9F               [ 1] 5085 2$:	ld a,xl 
      001CEC 1E 01            [ 2] 5086 	ldw x,(ADDR,sp) 
      001CEE CF 00 17         [ 2] 5087 	ldw farptr+1,x 
      001CF1 5F               [ 1] 5088 	clrw x 
      001CF2 CD 01 E5         [ 4] 5089 	call write_byte
      001CF5 1E 01            [ 2] 5090 	ldw x,(ADDR,sp)
      001CF7 5C               [ 2] 5091 	incw x 
      001CF8 20 DC            [ 2] 5092 	jra 0$ 
      001CFA                       5093 9$:
      001CFA                       5094 	_drop VSIZE
      001CFA 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CFC 81               [ 4] 5095 	ret 
                                   5096 
                                   5097 
                                   5098 ;---------------------
                                   5099 ;BASIC: CHAR(expr)
                                   5100 ; évaluate expression 
                                   5101 ; and take the 7 least 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5102 ; bits as ASCII character
                                   5103 ;---------------------
      001CFD                       5104 char:
      001CFD CD 10 13         [ 4] 5105 	call func_args 
      001D00 A1 01            [ 1] 5106 	cp a,#1
      001D02 27 03            [ 1] 5107 	jreq 1$
      001D04 CC 08 79         [ 2] 5108 	jp syntax_error
      001D07 85               [ 2] 5109 1$:	popw x 
      001D08 9F               [ 1] 5110 	ld a,xl 
      001D09 A4 7F            [ 1] 5111 	and a,#0x7f 
      001D0B 97               [ 1] 5112 	ld xl,a
      001D0C A6 03            [ 1] 5113 	ld a,#TK_CHAR
      001D0E 81               [ 4] 5114 	ret
                                   5115 
                                   5116 ;---------------------
                                   5117 ; BASIC: ASC(string|char)
                                   5118 ; extract first character 
                                   5119 ; of string argument 
                                   5120 ; return it as TK_INTGR 
                                   5121 ;---------------------
      001D0F                       5122 ascii:
      001D0F A6 07            [ 1] 5123 	ld a,#TK_LPAREN
      001D11 CD 10 06         [ 4] 5124 	call expect 
      001D14 CD 09 6B         [ 4] 5125 	call next_token 
      001D17 A1 02            [ 1] 5126 	cp a,#TK_QSTR 
      001D19 27 07            [ 1] 5127 	jreq 1$
      001D1B A1 03            [ 1] 5128 	cp a,#TK_CHAR 
      001D1D 27 06            [ 1] 5129 	jreq 2$ 
      001D1F CC 08 79         [ 2] 5130 	jp syntax_error
      001D22                       5131 1$: 
      001D22 F6               [ 1] 5132 	ld a,(x) 
      001D23 5F               [ 1] 5133 	clrw x
      001D24 97               [ 1] 5134 	ld xl,a 
      001D25                       5135 2$: 
      001D25 89               [ 2] 5136 	pushw x 
      001D26 A6 08            [ 1] 5137 	ld a,#TK_RPAREN 
      001D28 CD 10 06         [ 4] 5138 	call expect
      001D2B 85               [ 2] 5139 	popw x 
      001D2C A6 84            [ 1] 5140 	ld a,#TK_INTGR 
      001D2E 81               [ 4] 5141 	ret 
                                   5142 
                                   5143 ;---------------------
                                   5144 ;BASIC: KEY
                                   5145 ; wait for a character 
                                   5146 ; received from STDIN 
                                   5147 ; input:
                                   5148 ;	none 
                                   5149 ; output:
                                   5150 ;	X 		ASCII character 
                                   5151 ;---------------------
      001D2F                       5152 key:
      001D2F CD 02 C9         [ 4] 5153 	call getc 
      001D32 5F               [ 1] 5154 	clrw x 
      001D33 97               [ 1] 5155 	ld xl,a 
      001D34 A6 84            [ 1] 5156 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D36 81               [ 4] 5157 	ret
                                   5158 
                                   5159 ;----------------------
                                   5160 ; BASIC: QKEY
                                   5161 ; Return true if there 
                                   5162 ; is a character in 
                                   5163 ; waiting in STDIN 
                                   5164 ; input:
                                   5165 ;  none 
                                   5166 ; output:
                                   5167 ;   X 		0|-1 
                                   5168 ;-----------------------
      001D37                       5169 qkey:: 
      001D37 5F               [ 1] 5170 	clrw x 
      001D38 C6 00 2D         [ 1] 5171 	ld a,rx_head
      001D3B C1 00 2E         [ 1] 5172 	cp a,rx_tail 
      001D3E 27 01            [ 1] 5173 	jreq 9$ 
      001D40 53               [ 2] 5174 	cplw x 
      001D41 A6 84            [ 1] 5175 9$: ld a,#TK_INTGR
      001D43 81               [ 4] 5176 	ret 
                                   5177 
                                   5178 ;---------------------
                                   5179 ; BASIC: GPIO(expr,reg)
                                   5180 ; return gpio address 
                                   5181 ; expr {0..8}
                                   5182 ; input:
                                   5183 ;   none 
                                   5184 ; output:
                                   5185 ;   X 		gpio register address
                                   5186 ;----------------------------
                           000003  5187 	PORT=3
                           000001  5188 	REG=1 
                           000004  5189 	VSIZE=4 
      001D44                       5190 gpio:
      001D44 CD 10 13         [ 4] 5191 	call func_args 
      001D47 A1 02            [ 1] 5192 	cp a,#2
      001D49 27 03            [ 1] 5193 	jreq 1$
      001D4B CC 08 79         [ 2] 5194 	jp syntax_error  
      001D4E                       5195 1$:	
      001D4E 1E 03            [ 2] 5196 	ldw x,(PORT,sp)
      001D50 2B 17            [ 1] 5197 	jrmi bad_port
      001D52 A3 00 09         [ 2] 5198 	cpw x,#9
      001D55 2A 12            [ 1] 5199 	jrpl bad_port
      001D57 A6 05            [ 1] 5200 	ld a,#5
      001D59 42               [ 4] 5201 	mul x,a
      001D5A 1C 50 00         [ 2] 5202 	addw x,#GPIO_BASE 
      001D5D 1F 03            [ 2] 5203 	ldw (PORT,sp),x  
      001D5F 1E 01            [ 2] 5204 	ldw x,(REG,sp) 
      001D61 72 FB 03         [ 2] 5205 	addw x,(PORT,sp)
      001D64 A6 84            [ 1] 5206 	ld a,#TK_INTGR
      001D66                       5207 	_drop VSIZE 
      001D66 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D68 81               [ 4] 5208 	ret
      001D69                       5209 bad_port:
      001D69 A6 0A            [ 1] 5210 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D6B CC 08 7B         [ 2] 5211 	jp tb_error
                                   5212 
                                   5213 
                                   5214 ;-------------------------
                                   5215 ; BASIC: UFLASH 
                                   5216 ; return user flash address
                                   5217 ; input:
                                   5218 ;  none 
                                   5219 ; output:
                                   5220 ;	A		TK_INTGR
                                   5221 ;   X 		user address 
                                   5222 ;---------------------------
      001D6E                       5223 uflash:
      001D6E AE 28 00         [ 2] 5224 	ldw x,#user_space 
      001D71 A6 84            [ 1] 5225 	ld a,#TK_INTGR 
      001D73 81               [ 4] 5226 	ret 
                                   5227 
                                   5228 
                                   5229 ;---------------------
                                   5230 ; BASIC: USR(addr[,arg])
                                   5231 ; execute a function written 
                                   5232 ; in binary code.
                                   5233 ; binary fonction should 
                                   5234 ; return token attribute in A 
                                   5235 ; and value in X. 
                                   5236 ; input:
                                   5237 ;   addr	routine address 
                                   5238 ;   arg 	is an optional argument 
                                   5239 ; output:
                                   5240 ;   A 		token attribute 
                                   5241 ;   X       returned value 
                                   5242 ;---------------------
      001D74                       5243 usr:
      001D74 90 89            [ 2] 5244 	pushw y 	
      001D76 CD 10 13         [ 4] 5245 	call func_args 
      001D79 A1 01            [ 1] 5246 	cp a,#1 
      001D7B 27 07            [ 1] 5247 	jreq 2$
      001D7D A1 02            [ 1] 5248 	cp a,#2
      001D7F 27 03            [ 1] 5249 	jreq 2$  
      001D81 CC 08 79         [ 2] 5250 	jp syntax_error 
      001D84 90 85            [ 2] 5251 2$: popw y  ; arg|addr 
      001D86 A1 01            [ 1] 5252 	cp a,#1
      001D88 27 02            [ 1] 5253 	jreq 3$
      001D8A 85               [ 2] 5254 	popw x ; addr
      001D8B 51               [ 1] 5255 	exgw x,y 
      001D8C 90 FD            [ 4] 5256 3$: call (y)
      001D8E 90 85            [ 2] 5257 	popw y 
      001D90 81               [ 4] 5258 	ret 
                                   5259 
                                   5260 ;------------------------------
                                   5261 ; BASIC: BYE 
                                   5262 ; halt mcu in its lowest power mode 
                                   5263 ; wait for reset or external interrupt
                                   5264 ; do a cold start on wakeup.
                                   5265 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D91                       5266 bye:
      001D91 72 0D 52 30 FB   [ 2] 5267 	btjf UART1_SR,#UART_SR_TC,.
      001D96 8E               [10] 5268 	halt
      001D97 CC 05 D6         [ 2] 5269 	jp cold_start  
                                   5270 
                                   5271 ;----------------------------------
                                   5272 ; BASIC: AUTORUN ["file_name"] 
                                   5273 ; record in eeprom at adrress AUTORUN_NAME
                                   5274 ; the name of file to load and execute
                                   5275 ; at startup. 
                                   5276 ; empty string delete autorun name 
                                   5277 ; no argument display autorun name  
                                   5278 ; input:
                                   5279 ;   file_name   file to execute 
                                   5280 ; output:
                                   5281 ;   none
                                   5282 ;-----------------------------------
      001D9A                       5283 autorun: 
      001D9A 72 01 00 23 07   [ 2] 5284 	btjf flags,#FRUN,0$ 
      001D9F 27 05            [ 1] 5285 	jreq 0$ 
      001DA1 A6 07            [ 1] 5286 	ld a,#ERR_CMD_ONLY 
      001DA3 CC 08 7B         [ 2] 5287 	jp tb_error 
      001DA6                       5288 0$:	
      001DA6 CD 09 6B         [ 4] 5289 	call next_token
      001DA9 4D               [ 1] 5290 	tnz a 
      001DAA 26 08            [ 1] 5291 	jrne 1$
      001DAC AE 40 00         [ 2] 5292 	ldw x,#AUTORUN_NAME
      001DAF CD 00 00         [ 4] 5293 	call puts 
      001DB2 4F               [ 1] 5294 	clr a 
      001DB3 81               [ 4] 5295 	ret 
      001DB4                       5296 1$:
      001DB4 A1 02            [ 1] 5297 	cp a,#TK_QSTR
      001DB6 27 03            [ 1] 5298 	jreq 2$
      001DB8 CC 08 79         [ 2] 5299 	jp syntax_error 
      001DBB                       5300 2$:	
      001DBB 7D               [ 1] 5301 	tnz (x) 
      001DBC 26 09            [ 1] 5302 	jrne 3$
                                   5303 ; empty string, delete autorun 	
      001DBE CD 06 98         [ 4] 5304 	call cancel_autorun
      001DC1 55 00 03 00 01   [ 1] 5305 	mov in,count 
      001DC6 81               [ 4] 5306 	ret 
      001DC7 89               [ 2] 5307 3$:	pushw x 
      001DC8 90 93            [ 1] 5308 	ldw y,x  
      001DCA CD 1A 63         [ 4] 5309 	call search_file 
      001DCD 25 05            [ 1] 5310 	jrc 4$ 
      001DCF A6 09            [ 1] 5311 	ld a,#ERR_NOT_FILE
      001DD1 CC 08 7B         [ 2] 5312 	jp tb_error  
      001DD4                       5313 4$: 
      001DD4 55 00 03 00 01   [ 1] 5314 	mov in,count 
      001DD9 72 5F 00 16      [ 1] 5315 	clr farptr 
      001DDD AE 40 00         [ 2] 5316 	ldw x,#AUTORUN_NAME
      001DE0 CF 00 17         [ 2] 5317 	ldw farptr+1,x 
      001DE3 1E 01            [ 2] 5318 	ldw x,(1,sp)  
      001DE5 CD 03 96         [ 4] 5319 	call strlen  ; return length in A 
      001DE8 5F               [ 1] 5320 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001DE9 97               [ 1] 5321 	ld xl,a 
      001DEA 5C               [ 2] 5322 	incw x 
      001DEB 90 85            [ 2] 5323 	popw y 
      001DED 89               [ 2] 5324 	pushw x 
      001DEE 5F               [ 1] 5325 	clrw x 
      001DEF CD 02 5A         [ 4] 5326 	call write_block 
      001DF2                       5327 	_drop 2 
      001DF2 5B 02            [ 2]    1     addw sp,#2 
      001DF4 81               [ 4] 5328 	ret 
                                   5329 
                                   5330 ;----------------------------------
                                   5331 ; BASIC: SLEEP 
                                   5332 ; halt mcu until reset or external
                                   5333 ; interrupt.
                                   5334 ; Resume progam after SLEEP command
                                   5335 ;----------------------------------
      001DF5                       5336 sleep:
      001DF5 72 0D 52 30 FB   [ 2] 5337 	btjf UART1_SR,#UART_SR_TC,.
      001DFA 72 16 00 23      [ 1] 5338 	bset flags,#FSLEEP
      001DFE 8E               [10] 5339 	halt 
      001DFF 81               [ 4] 5340 	ret 
                                   5341 
                                   5342 ;-------------------------------
                                   5343 ; BASIC: PAUSE expr 
                                   5344 ; suspend execution for n msec.
                                   5345 ; input:
                                   5346 ;	none
                                   5347 ; output:
                                   5348 ;	none 
                                   5349 ;------------------------------
      001E00                       5350 pause:
      001E00 CD 11 11         [ 4] 5351 	call expression
      001E03 A1 84            [ 1] 5352 	cp a,#TK_INTGR
      001E05 27 03            [ 1] 5353 	jreq pause02 
      001E07 CC 08 79         [ 2] 5354 	jp syntax_error
      001E0A                       5355 pause02: 
      001E0A 5D               [ 2] 5356 1$: tnzw x 
      001E0B 27 04            [ 1] 5357 	jreq 2$
      001E0D 8F               [10] 5358 	wfi 
      001E0E 5A               [ 2] 5359 	decw x 
      001E0F 26 F9            [ 1] 5360 	jrne 1$
      001E11 4F               [ 1] 5361 2$:	clr a 
      001E12 81               [ 4] 5362 	ret 
                                   5363 
                                   5364 ;------------------------------
                                   5365 ; BASIC: AWU expr
                                   5366 ; halt mcu for 'expr' milliseconds
                                   5367 ; use Auto wakeup peripheral
                                   5368 ; all oscillators stopped except LSI
                                   5369 ; range: 1ms - 511ms
                                   5370 ; input:
                                   5371 ;  none
                                   5372 ; output:
                                   5373 ;  none:
                                   5374 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001E13                       5375 awu:
      001E13 CD 11 11         [ 4] 5376   call expression
      001E16 A1 84            [ 1] 5377   cp a,#TK_INTGR
      001E18 27 03            [ 1] 5378   jreq awu02
      001E1A CC 08 79         [ 2] 5379   jp syntax_error
      001E1D                       5380 awu02:
      001E1D A3 14 00         [ 2] 5381   cpw x,#5120
      001E20 2B 0C            [ 1] 5382   jrmi 1$ 
      001E22 35 0F 50 F2      [ 1] 5383   mov AWU_TBR,#15 
      001E26 A6 1E            [ 1] 5384   ld a,#30
      001E28 62               [ 2] 5385   div x,a
      001E29 A6 10            [ 1] 5386   ld a,#16
      001E2B 62               [ 2] 5387   div x,a 
      001E2C 20 1E            [ 2] 5388   jra 4$
      001E2E                       5389 1$: 
      001E2E A3 08 00         [ 2] 5390   cpw x,#2048
      001E31 2B 09            [ 1] 5391   jrmi 2$ 
      001E33 35 0E 50 F2      [ 1] 5392   mov AWU_TBR,#14
      001E37 A6 50            [ 1] 5393   ld a,#80
      001E39 62               [ 2] 5394   div x,a 
      001E3A 20 10            [ 2] 5395   jra 4$   
      001E3C                       5396 2$:
      001E3C 35 07 50 F2      [ 1] 5397   mov AWU_TBR,#7
      001E40                       5398 3$:  
                                   5399 ; while X > 64  divide by 2 and increment AWU_TBR 
      001E40 A3 00 40         [ 2] 5400   cpw x,#64 
      001E43 23 07            [ 2] 5401   jrule 4$ 
      001E45 72 5C 50 F2      [ 1] 5402   inc AWU_TBR 
      001E49 54               [ 2] 5403   srlw x 
      001E4A 20 F4            [ 2] 5404   jra 3$ 
      001E4C                       5405 4$:
      001E4C 9F               [ 1] 5406   ld a, xl
      001E4D 4A               [ 1] 5407   dec a 
      001E4E 27 01            [ 1] 5408   jreq 5$
      001E50 4A               [ 1] 5409   dec a 	
      001E51                       5410 5$: 
      001E51 A4 3E            [ 1] 5411   and a,#0x3e 
      001E53 C7 50 F1         [ 1] 5412   ld AWU_APR,a 
      001E56 72 18 50 F0      [ 1] 5413   bset AWU_CSR,#AWU_CSR_AWUEN
      001E5A 8E               [10] 5414   halt 
                                   5415 
      001E5B 81               [ 4] 5416   ret 
                                   5417 
                                   5418 ;------------------------------
                                   5419 ; BASIC: TICKS
                                   5420 ; return msec ticks counter value 
                                   5421 ; input:
                                   5422 ; 	none 
                                   5423 ; output:
                                   5424 ;	X 		TK_INTGR
                                   5425 ;-------------------------------
      001E5C                       5426 get_ticks:
      001E5C CE 00 0E         [ 2] 5427 	ldw x,ticks 
      001E5F A6 84            [ 1] 5428 	ld a,#TK_INTGR
      001E61 81               [ 4] 5429 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5430 
                                   5431 
                                   5432 
                                   5433 ;------------------------------
                                   5434 ; BASIC: ABS(expr)
                                   5435 ; return absolute value of expr.
                                   5436 ; input:
                                   5437 ;   none
                                   5438 ; output:
                                   5439 ;   X     	positive integer
                                   5440 ;-------------------------------
      001E62                       5441 abs:
      001E62 CD 10 13         [ 4] 5442 	call func_args 
      001E65 A1 01            [ 1] 5443 	cp a,#1 
      001E67 27 03            [ 1] 5444 	jreq 0$ 
      001E69 CC 08 79         [ 2] 5445 	jp syntax_error
      001E6C                       5446 0$:  
      001E6C 85               [ 2] 5447     popw x   
      001E6D 9E               [ 1] 5448 	ld a,xh 
      001E6E A5 80            [ 1] 5449 	bcp a,#0x80 
      001E70 27 01            [ 1] 5450 	jreq 2$ 
      001E72 50               [ 2] 5451 	negw x 
      001E73 A6 84            [ 1] 5452 2$: ld a,#TK_INTGR 
      001E75 81               [ 4] 5453 	ret 
                                   5454 
                                   5455 ;------------------------------
                                   5456 ; BASIC: AND(expr1,expr2)
                                   5457 ; Apply bit AND relation between
                                   5458 ; the 2 arguments, i.e expr1 & expr2 
                                   5459 ; output:
                                   5460 ; 	A 		TK_INTGR
                                   5461 ;   X 		result 
                                   5462 ;------------------------------
      001E76                       5463 bit_and:
      001E76 CD 10 13         [ 4] 5464 	call func_args 
      001E79 A1 02            [ 1] 5465 	cp a,#2
      001E7B 27 03            [ 1] 5466 	jreq 1$
      001E7D CC 08 79         [ 2] 5467 	jp syntax_error 
      001E80 85               [ 2] 5468 1$:	popw x 
      001E81 9E               [ 1] 5469 	ld a,xh 
      001E82 14 01            [ 1] 5470 	and a,(1,sp)
      001E84 95               [ 1] 5471 	ld xh,a 
      001E85 9F               [ 1] 5472 	ld a,xl
      001E86 14 02            [ 1] 5473 	and a,(2,sp)
      001E88 97               [ 1] 5474 	ld xl,a 
      001E89                       5475 	_drop 2 
      001E89 5B 02            [ 2]    1     addw sp,#2 
      001E8B A6 84            [ 1] 5476 	ld a,#TK_INTGR
      001E8D 81               [ 4] 5477 	ret
                                   5478 
                                   5479 ;------------------------------
                                   5480 ; BASIC: OR(expr1,expr2)
                                   5481 ; Apply bit OR relation between
                                   5482 ; the 2 arguments, i.e expr1 | expr2 
                                   5483 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   5484 ; 	A 		TK_INTGR
                                   5485 ;   X 		result 
                                   5486 ;------------------------------
      001E8E                       5487 bit_or:
      001E8E CD 10 13         [ 4] 5488 	call func_args 
      001E91 A1 02            [ 1] 5489 	cp a,#2
      001E93 27 03            [ 1] 5490 	jreq 1$
      001E95 CC 08 79         [ 2] 5491 	jp syntax_error 
      001E98                       5492 1$: 
      001E98 85               [ 2] 5493 	popw x 
      001E99 9E               [ 1] 5494 	ld a,xh 
      001E9A 1A 01            [ 1] 5495 	or a,(1,sp)
      001E9C 95               [ 1] 5496 	ld xh,a 
      001E9D 9F               [ 1] 5497 	ld a,xl 
      001E9E 1A 02            [ 1] 5498 	or a,(2,sp)
      001EA0 97               [ 1] 5499 	ld xl,a 
      001EA1                       5500 	_drop 2 
      001EA1 5B 02            [ 2]    1     addw sp,#2 
      001EA3 A6 84            [ 1] 5501 	ld a,#TK_INTGR 
      001EA5 81               [ 4] 5502 	ret
                                   5503 
                                   5504 ;------------------------------
                                   5505 ; BASIC: XOR(expr1,expr2)
                                   5506 ; Apply bit XOR relation between
                                   5507 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5508 ; output:
                                   5509 ; 	A 		TK_INTGR
                                   5510 ;   X 		result 
                                   5511 ;------------------------------
      001EA6                       5512 bit_xor:
      001EA6 CD 10 13         [ 4] 5513 	call func_args 
      001EA9 A1 02            [ 1] 5514 	cp a,#2
      001EAB 27 03            [ 1] 5515 	jreq 1$
      001EAD CC 08 79         [ 2] 5516 	jp syntax_error 
      001EB0                       5517 1$: 
      001EB0 85               [ 2] 5518 	popw x 
      001EB1 9E               [ 1] 5519 	ld a,xh 
      001EB2 18 01            [ 1] 5520 	xor a,(1,sp)
      001EB4 95               [ 1] 5521 	ld xh,a 
      001EB5 9F               [ 1] 5522 	ld a,xl 
      001EB6 18 02            [ 1] 5523 	xor a,(2,sp)
      001EB8 97               [ 1] 5524 	ld xl,a 
      001EB9                       5525 	_drop 2 
      001EB9 5B 02            [ 2]    1     addw sp,#2 
      001EBB A6 84            [ 1] 5526 	ld a,#TK_INTGR 
      001EBD 81               [ 4] 5527 	ret 
                                   5528 
                                   5529 ;------------------------------
                                   5530 ; BASIC: LSHIFT(expr1,expr2)
                                   5531 ; logical shift left expr1 by 
                                   5532 ; expr2 bits 
                                   5533 ; output:
                                   5534 ; 	A 		TK_INTGR
                                   5535 ;   X 		result 
                                   5536 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001EBE                       5537 lshift:
      001EBE CD 10 13         [ 4] 5538 	call func_args
      001EC1 A1 02            [ 1] 5539 	cp a,#2 
      001EC3 27 03            [ 1] 5540 	jreq 1$
      001EC5 CC 08 79         [ 2] 5541 	jp syntax_error
      001EC8 90 85            [ 2] 5542 1$: popw y   
      001ECA 85               [ 2] 5543 	popw x 
      001ECB 90 5D            [ 2] 5544 	tnzw y 
      001ECD 27 05            [ 1] 5545 	jreq 4$
      001ECF 58               [ 2] 5546 2$:	sllw x 
      001ED0 90 5A            [ 2] 5547 	decw y 
      001ED2 26 FB            [ 1] 5548 	jrne 2$
      001ED4                       5549 4$:  
      001ED4 A6 84            [ 1] 5550 	ld a,#TK_INTGR
      001ED6 81               [ 4] 5551 	ret
                                   5552 
                                   5553 ;------------------------------
                                   5554 ; BASIC: RSHIFT(expr1,expr2)
                                   5555 ; logical shift right expr1 by 
                                   5556 ; expr2 bits.
                                   5557 ; output:
                                   5558 ; 	A 		TK_INTGR
                                   5559 ;   X 		result 
                                   5560 ;------------------------------
      001ED7                       5561 rshift:
      001ED7 CD 10 13         [ 4] 5562 	call func_args
      001EDA A1 02            [ 1] 5563 	cp a,#2 
      001EDC 27 03            [ 1] 5564 	jreq 1$
      001EDE CC 08 79         [ 2] 5565 	jp syntax_error
      001EE1 90 85            [ 2] 5566 1$: popw y  
      001EE3 85               [ 2] 5567 	popw x
      001EE4 90 5D            [ 2] 5568 	tnzw y 
      001EE6 27 05            [ 1] 5569 	jreq 4$
      001EE8 54               [ 2] 5570 2$:	srlw x 
      001EE9 90 5A            [ 2] 5571 	decw y 
      001EEB 26 FB            [ 1] 5572 	jrne 2$
      001EED                       5573 4$:  
      001EED A6 84            [ 1] 5574 	ld a,#TK_INTGR
      001EEF 81               [ 4] 5575 	ret
                                   5576 
                                   5577 ;--------------------------
                                   5578 ; BASIC: FCPU integer
                                   5579 ; set CPU frequency 
                                   5580 ;-------------------------- 
                                   5581 
      001EF0                       5582 fcpu:
      001EF0 A6 84            [ 1] 5583 	ld a,#TK_INTGR
      001EF2 CD 10 06         [ 4] 5584 	call expect 
      001EF5 9F               [ 1] 5585 	ld a,xl 
      001EF6 A4 07            [ 1] 5586 	and a,#7 
      001EF8 C7 50 C6         [ 1] 5587 	ld CLK_CKDIVR,a 
      001EFB 81               [ 4] 5588 	ret 
                                   5589 
                                   5590 ;------------------------------
                                   5591 ; BASIC: PMODE pin#, mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   5592 ; Arduino pin. 
                                   5593 ; define pin as input or output
                                   5594 ; pin#: {0..15}
                                   5595 ; mode: INPUT|OUTPUT  
                                   5596 ;------------------------------
                           000001  5597 	PINNO=1
                           000001  5598 	VSIZE=1
      001EFC                       5599 pin_mode:
      001EFC                       5600 	_vars VSIZE 
      001EFC 52 01            [ 2]    1     sub sp,#VSIZE 
      001EFE CD 10 18         [ 4] 5601 	call arg_list 
      001F01 A1 02            [ 1] 5602 	cp a,#2 
      001F03 27 03            [ 1] 5603 	jreq 1$
      001F05 CC 08 79         [ 2] 5604 	jp syntax_error 
      001F08 90 85            [ 2] 5605 1$: popw y ; mode 
      001F0A 85               [ 2] 5606 	popw x ; Dx pin 
      001F0B CD 1F 3D         [ 4] 5607 	call select_pin 
      001F0E 6B 01            [ 1] 5608 	ld (PINNO,sp),a  
      001F10 A6 01            [ 1] 5609 	ld a,#1 
      001F12 0D 01            [ 1] 5610 	tnz (PINNO,sp)
      001F14 27 0B            [ 1] 5611 	jreq 4$
      001F16 48               [ 1] 5612 2$:	sll a 
      001F17 0A 01            [ 1] 5613 	dec (PINNO,sp)
      001F19 26 FB            [ 1] 5614 	jrne 2$ 
      001F1B 6B 01            [ 1] 5615 	ld (PINNO,sp),a
      001F1D EA 03            [ 1] 5616 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001F1F E7 03            [ 1] 5617 	ld (GPIO_CR1,x),a 
      001F21 90 A3 00 01      [ 2] 5618 4$:	cpw y,#OUTP 
      001F25 27 07            [ 1] 5619 	jreq 6$
                                   5620 ; input mode
      001F27 7B 01            [ 1] 5621 	ld a,(PINNO,sp)
      001F29 43               [ 1] 5622 	cpl a 
      001F2A E4 02            [ 1] 5623 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001F2C 20 0A            [ 2] 5624 	jra 9$
      001F2E                       5625 6$: ;output mode  
      001F2E 7B 01            [ 1] 5626 	ld a,(PINNO,sp)
      001F30 EA 04            [ 1] 5627 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001F32 E7 04            [ 1] 5628 	ld (GPIO_CR2,x),a 
      001F34 7B 01            [ 1] 5629 	ld a,(PINNO,sp)
      001F36 EA 02            [ 1] 5630 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001F38 E7 02            [ 1] 5631 9$:	ld (GPIO_DDR,x),a 
      001F3A                       5632 	_drop VSIZE 
      001F3A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F3C 81               [ 4] 5633 	ret
                                   5634 
                                   5635 ;------------------------
                                   5636 ; select Arduino pin 
                                   5637 ; input:
                                   5638 ;   X 	 {0..15} Arduino Dx 
                                   5639 ; output:
                                   5640 ;   A     stm8s208 pin 
                                   5641 ;   X     base address s208 GPIO port 
                                   5642 ;---------------------------
      001F3D                       5643 select_pin:
      001F3D 58               [ 2] 5644 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001F3E 1C 1F 4D         [ 2] 5645 	addw x,#arduino_to_8s208 
      001F41 FE               [ 2] 5646 	ldw x,(x)
      001F42 9F               [ 1] 5647 	ld a,xl 
      001F43 88               [ 1] 5648 	push a 
      001F44 5E               [ 1] 5649 	swapw x 
      001F45 A6 05            [ 1] 5650 	ld a,#5 
      001F47 42               [ 4] 5651 	mul x,a 
      001F48 1C 50 00         [ 2] 5652 	addw x,#GPIO_BASE 
      001F4B 84               [ 1] 5653 	pop a 
      001F4C 81               [ 4] 5654 	ret 
                                   5655 ; translation from Arduino D0..D15 to stm8s208rb 
      001F4D                       5656 arduino_to_8s208:
      001F4D 03 06                 5657 .byte 3,6 ; D0 
      001F4F 03 05                 5658 .byte 3,5 ; D1 
      001F51 04 00                 5659 .byte 4,0 ; D2 
      001F53 02 01                 5660 .byte 2,1 ; D3
      001F55 06 00                 5661 .byte 6,0 ; D4
      001F57 02 02                 5662 .byte 2,2 ; D5
      001F59 02 03                 5663 .byte 2,3 ; D6
      001F5B 03 01                 5664 .byte 3,1 ; D7
      001F5D 03 03                 5665 .byte 3,3 ; D8
      001F5F 02 04                 5666 .byte 2,4 ; D9
      001F61 04 05                 5667 .byte 4,5 ; D10
      001F63 02 06                 5668 .byte 2,6 ; D11
      001F65 02 07                 5669 .byte 2,7 ; D12
      001F67 02 05                 5670 .byte 2,5 ; D13
      001F69 04 02                 5671 .byte 4,2 ; D14
      001F6B 04 01                 5672 .byte 4,1 ; D15
                                   5673 
                                   5674 
                                   5675 ;------------------------------
                                   5676 ; BASIC: RND(expr)
                                   5677 ; return random number 
                                   5678 ; between 1 and expr inclusive
                                   5679 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5680 ; input:
                                   5681 ; 	none 
                                   5682 ; output:
                                   5683 ;	X 		random positive integer 
                                   5684 ;------------------------------
      001F6D                       5685 random:
      001F6D CD 10 13         [ 4] 5686 	call func_args 
      001F70 A1 01            [ 1] 5687 	cp a,#1
      001F72 27 03            [ 1] 5688 	jreq 1$
      001F74 CC 08 79         [ 2] 5689 	jp syntax_error
      001F77                       5690 1$:  
      001F77 A6 80            [ 1] 5691 	ld a,#0x80 
      001F79 15 01            [ 1] 5692 	bcp a,(1,sp)
      001F7B 27 05            [ 1] 5693 	jreq 2$
      001F7D A6 0A            [ 1] 5694 	ld a,#ERR_BAD_VALUE
      001F7F CC 08 7B         [ 2] 5695 	jp tb_error
      001F82                       5696 2$: 
                                   5697 ; acc16=(x<<5)^x 
      001F82 CE 00 12         [ 2] 5698 	ldw x,seedx 
      001F85 58               [ 2] 5699 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001F86 58               [ 2] 5700 	sllw x 
      001F87 58               [ 2] 5701 	sllw x 
      001F88 58               [ 2] 5702 	sllw x 
      001F89 58               [ 2] 5703 	sllw x 
      001F8A 9E               [ 1] 5704 	ld a,xh 
      001F8B C8 00 12         [ 1] 5705 	xor a,seedx 
      001F8E C7 00 0C         [ 1] 5706 	ld acc16,a 
      001F91 9F               [ 1] 5707 	ld a,xl 
      001F92 C8 00 13         [ 1] 5708 	xor a,seedx+1 
      001F95 C7 00 0D         [ 1] 5709 	ld acc8,a 
                                   5710 ; seedx=seedy 
      001F98 CE 00 14         [ 2] 5711 	ldw x,seedy 
      001F9B CF 00 12         [ 2] 5712 	ldw seedx,x  
                                   5713 ; seedy=seedy^(seedy>>1)
      001F9E 90 54            [ 2] 5714 	srlw y 
      001FA0 90 9E            [ 1] 5715 	ld a,yh 
      001FA2 C8 00 14         [ 1] 5716 	xor a,seedy 
      001FA5 C7 00 14         [ 1] 5717 	ld seedy,a  
      001FA8 90 9F            [ 1] 5718 	ld a,yl 
      001FAA C8 00 15         [ 1] 5719 	xor a,seedy+1 
      001FAD C7 00 15         [ 1] 5720 	ld seedy+1,a 
                                   5721 ; acc16>>3 
      001FB0 CE 00 0C         [ 2] 5722 	ldw x,acc16 
      001FB3 54               [ 2] 5723 	srlw x 
      001FB4 54               [ 2] 5724 	srlw x 
      001FB5 54               [ 2] 5725 	srlw x 
                                   5726 ; x=acc16^x 
      001FB6 9E               [ 1] 5727 	ld a,xh 
      001FB7 C8 00 0C         [ 1] 5728 	xor a,acc16 
      001FBA 95               [ 1] 5729 	ld xh,a 
      001FBB 9F               [ 1] 5730 	ld a,xl 
      001FBC C8 00 0D         [ 1] 5731 	xor a,acc8 
      001FBF 97               [ 1] 5732 	ld xl,a 
                                   5733 ; seedy=x^seedy 
      001FC0 C8 00 15         [ 1] 5734 	xor a,seedy+1
      001FC3 97               [ 1] 5735 	ld xl,a 
      001FC4 9E               [ 1] 5736 	ld a,xh 
      001FC5 C8 00 14         [ 1] 5737 	xor a,seedy
      001FC8 95               [ 1] 5738 	ld xh,a 
      001FC9 CF 00 14         [ 2] 5739 	ldw seedy,x 
                                   5740 ; return seedy modulo expr + 1 
      001FCC 90 85            [ 2] 5741 	popw y 
      001FCE 65               [ 2] 5742 	divw x,y 
      001FCF 93               [ 1] 5743 	ldw x,y 
      001FD0 5C               [ 2] 5744 	incw x 
      001FD1                       5745 10$:
      001FD1 A6 84            [ 1] 5746 	ld a,#TK_INTGR
      001FD3 81               [ 4] 5747 	ret 
                                   5748 
                                   5749 ;---------------------------------
                                   5750 ; BASIC: WORDS 
                                   5751 ; affiche la listes des mots du
                                   5752 ; dictionnaire ainsi que le nombre
                                   5753 ; de mots.
                                   5754 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           000001  5755 	WLEN=1 ; word length
                           000002  5756 	LLEN=2 ; character sent to console
                           000003  5757 	WCNT=3 ; count words printed 
                           000003  5758 	VSIZE=3 
      001FD4                       5759 words:
      001FD4                       5760 	_vars VSIZE
      001FD4 52 03            [ 2]    1     sub sp,#VSIZE 
      001FD6 0F 02            [ 1] 5761 	clr (LLEN,sp)
      001FD8 0F 03            [ 1] 5762 	clr (WCNT,sp)
      001FDA 90 AE 26 BB      [ 2] 5763 	ldw y,#kword_dict+2
      001FDE 93               [ 1] 5764 0$:	ldw x,y
      001FDF F6               [ 1] 5765 	ld a,(x)
      001FE0 A4 0F            [ 1] 5766 	and a,#15 
      001FE2 6B 01            [ 1] 5767 	ld (WLEN,sp),a 
      001FE4 0C 03            [ 1] 5768 	inc (WCNT,sp)
      001FE6 5C               [ 2] 5769 1$:	incw x 
      001FE7 F6               [ 1] 5770 	ld a,(x)
      001FE8 CD 02 C0         [ 4] 5771 	call putc 
      001FEB 0C 02            [ 1] 5772 	inc (LLEN,sp)
      001FED 0A 01            [ 1] 5773 	dec (WLEN,sp)
      001FEF 26 F5            [ 1] 5774 	jrne 1$
      001FF1 A6 46            [ 1] 5775 	ld a,#70
      001FF3 11 02            [ 1] 5776 	cp a,(LLEN,sp)
      001FF5 2B 09            [ 1] 5777 	jrmi 2$   
      001FF7 A6 20            [ 1] 5778 	ld a,#SPACE 
      001FF9 CD 02 C0         [ 4] 5779 	call putc 
      001FFC 0C 02            [ 1] 5780 	inc (LLEN,sp) 
      001FFE 20 07            [ 2] 5781 	jra 3$
      002000 A6 0D            [ 1] 5782 2$: ld a,#CR 
      002002 CD 02 C0         [ 4] 5783 	call putc 
      002005 0F 02            [ 1] 5784 	clr (LLEN,sp)
      002007 72 A2 00 02      [ 2] 5785 3$:	subw y,#2 
      00200B 90 FE            [ 2] 5786 	ldw y,(y)
      00200D 26 CF            [ 1] 5787 	jrne 0$ 
      00200F A6 0D            [ 1] 5788 	ld a,#CR 
      002011 CD 02 C0         [ 4] 5789 	call putc  
      002014 5F               [ 1] 5790 	clrw x 
      002015 7B 03            [ 1] 5791 	ld a,(WCNT,sp)
      002017 97               [ 1] 5792 	ld xl,a 
      002018 CD 09 CC         [ 4] 5793 	call print_int 
      00201B AE 20 24         [ 2] 5794 	ldw x,#words_count_msg
      00201E CD 00 00         [ 4] 5795 	call puts 
      002021                       5796 	_drop VSIZE 
      002021 5B 03            [ 2]    1     addw sp,#VSIZE 
      002023 81               [ 4] 5797 	ret 
      002024 20 77 6F 72 64 73 20  5798 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5799 
                                   5800 
                                   5801 ;-----------------------------
                                   5802 ; BASIC: TIMER expr 
                                   5803 ; initialize count down timer 
                                   5804 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00203A                       5805 set_timer:
      00203A CD 10 18         [ 4] 5806 	call arg_list
      00203D A1 01            [ 1] 5807 	cp a,#1 
      00203F 27 03            [ 1] 5808 	jreq 1$
      002041 CC 08 79         [ 2] 5809 	jp syntax_error
      002044                       5810 1$: 
      002044 85               [ 2] 5811 	popw x 
      002045 CF 00 10         [ 2] 5812 	ldw timer,x 
      002048 81               [ 4] 5813 	ret 
                                   5814 
                                   5815 ;------------------------------
                                   5816 ; BASIC: TIMEOUT 
                                   5817 ; return state of timer 
                                   5818 ;------------------------------
      002049                       5819 timeout:
      002049 CE 00 10         [ 2] 5820 	ldw x,timer 
      00204C                       5821 logical_complement:
      00204C 53               [ 2] 5822 	cplw x 
      00204D A3 FF FF         [ 2] 5823 	cpw x,#-1
      002050 27 01            [ 1] 5824 	jreq 2$
      002052 5F               [ 1] 5825 	clrw x 
      002053 A6 84            [ 1] 5826 2$:	ld a,#TK_INTGR
      002055 81               [ 4] 5827 	ret 
                                   5828 
                                   5829 ;--------------------------------
                                   5830 ; BASIC NOT(expr) 
                                   5831 ; return logical complement of expr
                                   5832 ;--------------------------------
      002056                       5833 func_not:
      002056 CD 10 13         [ 4] 5834 	call func_args  
      002059 A1 01            [ 1] 5835 	cp a,#1
      00205B 27 03            [ 1] 5836 	jreq 1$
      00205D CC 08 79         [ 2] 5837 	jp syntax_error
      002060 85               [ 2] 5838 1$:	popw x 
      002061 20 E9            [ 2] 5839 	jra logical_complement
                                   5840 
                                   5841 
                                   5842 
                                   5843 ;-----------------------------------
                                   5844 ; BASIC: IWDGEN expr1 
                                   5845 ; enable independant watchdog timer
                                   5846 ; expr1 is delay in multiple of 62.5µsec
                                   5847 ; expr1 -> {1..16383}
                                   5848 ;-----------------------------------
      002063                       5849 enable_iwdg:
      002063 CD 10 18         [ 4] 5850 	call arg_list
      002066 A1 01            [ 1] 5851 	cp a,#1 
      002068 27 03            [ 1] 5852 	jreq 1$
      00206A CC 08 79         [ 2] 5853 	jp syntax_error 
      00206D 85               [ 2] 5854 1$: popw x 
      00206E 4B 00            [ 1] 5855 	push #0
      002070 35 CC 50 E0      [ 1] 5856 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002074 9E               [ 1] 5857 	ld a,xh 
      002075 A4 3F            [ 1] 5858 	and a,#0x3f
      002077 95               [ 1] 5859 	ld xh,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002078 A3 00 FF         [ 2] 5860 2$:	cpw x,#255
      00207B 23 06            [ 2] 5861 	jrule 3$
      00207D 0C 01            [ 1] 5862 	inc (1,sp)
      00207F 98               [ 1] 5863 	rcf 
      002080 56               [ 2] 5864 	rrcw x 
      002081 20 F5            [ 2] 5865 	jra 2$
      002083 35 55 50 E0      [ 1] 5866 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002087 84               [ 1] 5867 	pop a  
      002088 C7 50 E1         [ 1] 5868 	ld IWDG_PR,a 
      00208B 9F               [ 1] 5869 	ld a,xl
      00208C 4A               [ 1] 5870 	dec a 
      00208D 35 55 50 E0      [ 1] 5871 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002091 C7 50 E2         [ 1] 5872 	ld IWDG_RLR,a 
      002094 35 AA 50 E0      [ 1] 5873 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002098 81               [ 4] 5874 	ret 
                                   5875 
                                   5876 
                                   5877 ;-----------------------------------
                                   5878 ; BASIC: IWDGREF  
                                   5879 ; refresh independant watchdog count down 
                                   5880 ; timer before it reset MCU. 
                                   5881 ;-----------------------------------
      002099                       5882 refresh_iwdg:
      002099 35 AA 50 E0      [ 1] 5883 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00209D 81               [ 4] 5884 	ret 
                                   5885 
                                   5886 
                                   5887 ;-------------------------------------
                                   5888 ; BASIC: LOG(expr)
                                   5889 ; return logarithm base 2 of expr 
                                   5890 ; this is the position of most significant
                                   5891 ; bit set. 
                                   5892 ; input: 
                                   5893 ; output:
                                   5894 ;   X     log2 
                                   5895 ;   A     TK_INTGR 
                                   5896 ;*********************************
      00209E                       5897 log2:
      00209E CD 10 13         [ 4] 5898 	call func_args 
      0020A1 A1 01            [ 1] 5899 	cp a,#1 
      0020A3 27 03            [ 1] 5900 	jreq 1$
      0020A5 CC 08 79         [ 2] 5901 	jp syntax_error 
      0020A8 85               [ 2] 5902 1$: popw x 
      0020A9                       5903 leading_one:
      0020A9 5D               [ 2] 5904 	tnzw x 
      0020AA 27 0A            [ 1] 5905 	jreq 4$
      0020AC A6 0F            [ 1] 5906 	ld a,#15 
      0020AE 59               [ 2] 5907 2$: rlcw x 
      0020AF 25 03            [ 1] 5908     jrc 3$
      0020B1 4A               [ 1] 5909 	dec a 
      0020B2 20 FA            [ 2] 5910 	jra 2$
      0020B4 5F               [ 1] 5911 3$: clrw x 
      0020B5 97               [ 1] 5912     ld xl,a
      0020B6 A6 84            [ 1] 5913 4$:	ld a,#TK_INTGR
      0020B8 81               [ 4] 5914 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   5915 
                                   5916 ;-----------------------------------
                                   5917 ; BASIC: BIT(expr) 
                                   5918 ; expr ->{0..15}
                                   5919 ; return 2^expr 
                                   5920 ; output:
                                   5921 ;    x    2^expr 
                                   5922 ;-----------------------------------
      0020B9                       5923 bitmask:
      0020B9 CD 10 13         [ 4] 5924     call func_args 
      0020BC A1 01            [ 1] 5925 	cp a,#1
      0020BE 27 03            [ 1] 5926 	jreq 1$
      0020C0 CC 08 79         [ 2] 5927 	jp syntax_error 
      0020C3 85               [ 2] 5928 1$: popw x 
      0020C4 9F               [ 1] 5929 	ld a,xl 
      0020C5 A4 0F            [ 1] 5930 	and a,#15
      0020C7 5F               [ 1] 5931 	clrw x 
      0020C8 5C               [ 2] 5932 	incw x 
      0020C9 4D               [ 1] 5933 2$: tnz a 
      0020CA 27 04            [ 1] 5934 	jreq 3$
      0020CC 58               [ 2] 5935 	slaw x 
      0020CD 4A               [ 1] 5936 	dec a 
      0020CE 20 F9            [ 2] 5937 	jra 2$ 
      0020D0 A6 84            [ 1] 5938 3$: ld a,#TK_INTGR
      0020D2 81               [ 4] 5939 	ret 
                                   5940 
                                   5941 ;------------------------------
                                   5942 ; BASIC: INVERT(expr)
                                   5943 ; 1's complement 
                                   5944 ;--------------------------------
      0020D3                       5945 invert:
      0020D3 CD 10 13         [ 4] 5946 	call func_args
      0020D6 A1 01            [ 1] 5947 	cp a,#1 
      0020D8 27 03            [ 1] 5948 	jreq 1$
      0020DA CC 08 79         [ 2] 5949 	jp syntax_error
      0020DD 85               [ 2] 5950 1$: popw x  
      0020DE 53               [ 2] 5951 	cplw x 
      0020DF A6 84            [ 1] 5952 	ld a,#TK_INTGR 
      0020E1 81               [ 4] 5953 	ret 
                                   5954 
                                   5955 ;------------------------------
                                   5956 ; BASIC: DO 
                                   5957 ; initiate a DO ... UNTIL loop 
                                   5958 ;------------------------------
                           000003  5959 	DOLP_ADR=3 
                           000005  5960 	DOLP_INW=5
                           000004  5961 	VSIZE=4 
      0020E2                       5962 do_loop:
      0020E2 85               [ 2] 5963 	popw x 
      0020E3                       5964 	_vars VSIZE 
      0020E3 52 04            [ 2]    1     sub sp,#VSIZE 
      0020E5 89               [ 2] 5965 	pushw x 
      0020E6 90 CE 00 04      [ 2] 5966 	ldw y,basicptr 
      0020EA 17 03            [ 2] 5967 	ldw (DOLP_ADR,sp),y
      0020EC 90 CE 00 00      [ 2] 5968 	ldw y,in.w 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0020F0 17 05            [ 2] 5969 	ldw (DOLP_INW,sp),y
      0020F2 72 5C 00 20      [ 1] 5970 	inc loop_depth 
      0020F6 81               [ 4] 5971 	ret 
                                   5972 
                                   5973 ;--------------------------------
                                   5974 ; BASIC: UNTIL expr 
                                   5975 ; loop if exprssion is false 
                                   5976 ; else terminate loop
                                   5977 ;--------------------------------
      0020F7                       5978 until: 
      0020F7 72 5D 00 20      [ 1] 5979 	tnz loop_depth 
      0020FB 26 03            [ 1] 5980 	jrne 1$ 
      0020FD CC 08 79         [ 2] 5981 	jp syntax_error 
      002100                       5982 1$: 
      002100 CD 11 5A         [ 4] 5983 	call relation 
      002103 A1 84            [ 1] 5984 	cp a,#TK_INTGR
      002105 27 03            [ 1] 5985 	jreq 2$
      002107 CC 08 79         [ 2] 5986 	jp syntax_error
      00210A                       5987 2$: 
      00210A 5D               [ 2] 5988 	tnzw x 
      00210B 26 10            [ 1] 5989 	jrne 9$
      00210D 1E 03            [ 2] 5990 	ldw x,(DOLP_ADR,sp)
      00210F CF 00 04         [ 2] 5991 	ldw basicptr,x 
      002112 E6 02            [ 1] 5992 	ld a,(2,x)
      002114 C7 00 03         [ 1] 5993 	ld count,a 
      002117 1E 05            [ 2] 5994 	ldw x,(DOLP_INW,sp)
      002119 CF 00 00         [ 2] 5995 	ldw in.w,x 
      00211C 81               [ 4] 5996 	ret 
      00211D                       5997 9$:	; remove loop data from stack  
      00211D 85               [ 2] 5998 	popw x
      00211E                       5999 	_drop VSIZE
      00211E 5B 04            [ 2]    1     addw sp,#VSIZE 
      002120 72 5A 00 20      [ 1] 6000 	dec loop_depth 
      002124 FC               [ 2] 6001 	jp (x)
                                   6002 
                                   6003 ;--------------------------
                                   6004 ; BASIC: PRTA...PRTI  
                                   6005 ;  return constant value 
                                   6006 ;  PORT  offset in GPIO
                                   6007 ;  array
                                   6008 ;---------------------------
      002125                       6009 const_porta:
      002125 AE 00 00         [ 2] 6010 	ldw x,#0
      002128 A6 84            [ 1] 6011 	ld a,#TK_INTGR 
      00212A 81               [ 4] 6012 	ret 
      00212B                       6013 const_portb:
      00212B AE 00 01         [ 2] 6014 	ldw x,#1
      00212E A6 84            [ 1] 6015 	ld a,#TK_INTGR 
      002130 81               [ 4] 6016 	ret 
      002131                       6017 const_portc:
      002131 AE 00 02         [ 2] 6018 	ldw x,#2
      002134 A6 84            [ 1] 6019 	ld a,#TK_INTGR 
      002136 81               [ 4] 6020 	ret 
      002137                       6021 const_portd:
      002137 AE 00 03         [ 2] 6022 	ldw x,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00213A A6 84            [ 1] 6023 	ld a,#TK_INTGR 
      00213C 81               [ 4] 6024 	ret 
      00213D                       6025 const_porte:
      00213D AE 00 04         [ 2] 6026 	ldw x,#4
      002140 A6 84            [ 1] 6027 	ld a,#TK_INTGR 
      002142 81               [ 4] 6028 	ret 
      002143                       6029 const_portf:
      002143 AE 00 05         [ 2] 6030 	ldw x,#5
      002146 A6 84            [ 1] 6031 	ld a,#TK_INTGR 
      002148 81               [ 4] 6032 	ret 
      002149                       6033 const_portg:
      002149 AE 00 06         [ 2] 6034 	ldw x,#6
      00214C A6 84            [ 1] 6035 	ld a,#TK_INTGR 
      00214E 81               [ 4] 6036 	ret 
      00214F                       6037 const_porth:
      00214F AE 00 07         [ 2] 6038 	ldw x,#7
      002152 A6 84            [ 1] 6039 	ld a,#TK_INTGR 
      002154 81               [ 4] 6040 	ret 
      002155                       6041 const_porti:
      002155 AE 00 08         [ 2] 6042 	ldw x,#8
      002158 A6 84            [ 1] 6043 	ld a,#TK_INTGR 
      00215A 81               [ 4] 6044 	ret 
                                   6045 
                                   6046 ;-------------------------------
                                   6047 ; following return constant 
                                   6048 ; related to GPIO register offset 
                                   6049 ;---------------------------------
      00215B                       6050 const_odr:
      00215B A6 84            [ 1] 6051 	ld a,#TK_INTGR 
      00215D AE 00 00         [ 2] 6052 	ldw x,#GPIO_ODR
      002160 81               [ 4] 6053 	ret 
      002161                       6054 const_idr:
      002161 A6 84            [ 1] 6055 	ld a,#TK_INTGR 
      002163 AE 00 01         [ 2] 6056 	ldw x,#GPIO_IDR
      002166 81               [ 4] 6057 	ret 
      002167                       6058 const_ddr:
      002167 A6 84            [ 1] 6059 	ld a,#TK_INTGR 
      002169 AE 00 02         [ 2] 6060 	ldw x,#GPIO_DDR
      00216C 81               [ 4] 6061 	ret 
      00216D                       6062 const_cr1:
      00216D A6 84            [ 1] 6063 	ld a,#TK_INTGR 
      00216F AE 00 03         [ 2] 6064 	ldw x,#GPIO_CR1
      002172 81               [ 4] 6065 	ret 
      002173                       6066 const_cr2:
      002173 A6 84            [ 1] 6067 	ld a,#TK_INTGR 
      002175 AE 00 04         [ 2] 6068 	ldw x,#GPIO_CR2
      002178 81               [ 4] 6069 	ret 
                                   6070 ;-------------------------
                                   6071 ;  constant for port mode
                                   6072 ;  used by PMODE 
                                   6073 ;  input or output
                                   6074 ;------------------------
      002179                       6075 const_output:
      002179 A6 84            [ 1] 6076 	ld a,#TK_INTGR 
      00217B AE 00 01         [ 2] 6077 	ldw x,#OUTP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      00217E 81               [ 4] 6078 	ret 
      00217F                       6079 const_input:
      00217F A6 84            [ 1] 6080 	ld a,#TK_INTGR 
      002181 AE 00 00         [ 2] 6081 	ldw x,#INP 
      002184 81               [ 4] 6082 	ret 
                                   6083 ;-----------------------
                                   6084 ; memory area constants
                                   6085 ;-----------------------
      002185                       6086 const_eeprom_base:
      002185 A6 84            [ 1] 6087 	ld a,#TK_INTGR 
      002187 AE 40 00         [ 2] 6088 	ldw x,#EEPROM_BASE 
      00218A 81               [ 4] 6089 	ret 
                                   6090 
                                   6091 ;---------------------------
                                   6092 ; BASIC: DATA 
                                   6093 ; when the interpreter find 
                                   6094 ; a DATA line it skip it.
                                   6095 ;---------------------------
      00218B                       6096 data:
      00218B 55 00 03 00 01   [ 1] 6097 	mov in,count 
      002190 81               [ 4] 6098 	ret 
                                   6099 
                                   6100 ;---------------------------
                                   6101 ; BASIC: DATLN  *expr*
                                   6102 ; set DATA pointer at line# 
                                   6103 ; specified by *expr* 
                                   6104 ;---------------------------
      002191                       6105 data_line:
      002191 CD 11 11         [ 4] 6106 	call expression
      002194 A1 84            [ 1] 6107 	cp a,#TK_INTGR
      002196 27 03            [ 1] 6108 	jreq 1$
      002198 CC 08 79         [ 2] 6109 	jp syntax_error 
      00219B CD 04 02         [ 4] 6110 1$: call search_lineno
      00219E 5D               [ 2] 6111 	tnzw x 
      00219F 26 05            [ 1] 6112 	jrne 3$
      0021A1 A6 05            [ 1] 6113 2$:	ld a,#ERR_NO_LINE 
      0021A3 CC 08 7B         [ 2] 6114 	jp tb_error
      0021A6                       6115 3$: ; check if valid data line 
      0021A6 90 93            [ 1] 6116     ldw y,x 
      0021A8 EE 04            [ 2] 6117 	ldw x,(4,x)
      0021AA A3 21 8B         [ 2] 6118 	cpw x,#data 
      0021AD 26 F2            [ 1] 6119 	jrne 2$ 
      0021AF 90 CF 00 06      [ 2] 6120 	ldw data_ptr,y
      0021B3 90 E6 02         [ 1] 6121 	ld a,(2,y)
      0021B6 C7 00 09         [ 1] 6122 	ld data_len,a 
      0021B9 35 06 00 08      [ 1] 6123 	mov data_ofs,#FIRST_DATA_ITEM 
      0021BD 81               [ 4] 6124 	ret
                                   6125 
                                   6126 ;---------------------------------
                                   6127 ; BASIC: RESTORE 
                                   6128 ; set data_ptr to first data line
                                   6129 ; if not DATA found pointer set to
                                   6130 ; zero 
                                   6131 ;---------------------------------
      0021BE                       6132 restore:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0021BE 72 5F 00 06      [ 1] 6133 	clr data_ptr 
      0021C2 72 5F 00 07      [ 1] 6134 	clr data_ptr+1
      0021C6 72 5F 00 08      [ 1] 6135 	clr data_ofs 
      0021CA 72 5F 00 09      [ 1] 6136 	clr data_len
      0021CE CE 00 1C         [ 2] 6137 	ldw x,txtbgn
      0021D1                       6138 data_search_loop: 	
      0021D1 C3 00 1E         [ 2] 6139 	cpw x,txtend
      0021D4 24 17            [ 1] 6140 	jruge 9$
      0021D6 90 93            [ 1] 6141 	ldw y,x 
      0021D8 EE 04            [ 2] 6142 	ldw x,(4,x)
      0021DA A3 21 8B         [ 2] 6143 	cpw x,#data 
      0021DD 26 1A            [ 1] 6144 	jrne try_next_line 
      0021DF 90 CF 00 06      [ 2] 6145 	ldw data_ptr,y 
      0021E3 90 E6 02         [ 1] 6146 	ld a,(2,y)
      0021E6 C7 00 09         [ 1] 6147 	ld data_len,a 
      0021E9 35 06 00 08      [ 1] 6148 	mov data_ofs,#FIRST_DATA_ITEM
      0021ED 72 5D 00 09      [ 1] 6149 9$:	tnz data_len 
      0021F1 26 05            [ 1] 6150     jrne 10$
      0021F3 A6 0C            [ 1] 6151 	ld a,#ERR_NO_DATA 
      0021F5 CC 08 7B         [ 2] 6152 	jp tb_error 
      0021F8 81               [ 4] 6153 10$:ret
      0021F9                       6154 try_next_line:
      0021F9 93               [ 1] 6155 	ldw x,y 
      0021FA E6 02            [ 1] 6156 	ld a,(2,x)
      0021FC C7 00 0D         [ 1] 6157 	ld acc8,a 
      0021FF 72 5F 00 0C      [ 1] 6158 	clr acc16 
      002203 72 BB 00 0C      [ 2] 6159 	addw x,acc16 
      002207 20 C8            [ 2] 6160 	jra data_search_loop
                                   6161 
                                   6162 
                                   6163 ;---------------------------------
                                   6164 ; BASIC: READ 
                                   6165 ; return next data item | 0 
                                   6166 ;---------------------------------
                           000001  6167 	CTX_BPTR=1 
                           000003  6168 	CTX_IN=3 
                           000004  6169 	CTX_COUNT=4 
                           000005  6170 	XSAVE=5
                           000006  6171 	VSIZE=6
      002209                       6172 read:
      002209                       6173 	_vars  VSIZE 
      002209 52 06            [ 2]    1     sub sp,#VSIZE 
      00220B                       6174 read01:	
      00220B C6 00 08         [ 1] 6175 	ld a,data_ofs
      00220E C1 00 09         [ 1] 6176 	cp a,data_len 
      002211 27 37            [ 1] 6177 	jreq 2$ ; end of line  
      002213 CD 15 6F         [ 4] 6178 	call save_context
      002216 CE 00 06         [ 2] 6179 	ldw x,data_ptr 
      002219 CF 00 04         [ 2] 6180 	ldw basicptr,x 
      00221C 55 00 08 00 01   [ 1] 6181 	mov in,data_ofs 
      002221 55 00 09 00 03   [ 1] 6182 	mov count,data_len  
      002226 CD 11 11         [ 4] 6183 	call expression 
      002229 A1 84            [ 1] 6184 	cp a,#TK_INTGR 
      00222B 27 03            [ 1] 6185 	jreq 1$ 
      00222D CC 08 79         [ 2] 6186 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      002230                       6187 1$:
      002230 1F 05            [ 2] 6188 	ldw (XSAVE,SP),x
      002232 CD 09 6B         [ 4] 6189 	call next_token ; skip comma
      002235 CE 00 04         [ 2] 6190 	ldw x,basicptr 
      002238 CF 00 06         [ 2] 6191 	ldw data_ptr,x 
      00223B 55 00 01 00 08   [ 1] 6192 	mov data_ofs,in 
      002240 CD 15 7F         [ 4] 6193 	call rest_context
      002243 1E 05            [ 2] 6194 	ldw x,(XSAVE,sp)
      002245 A6 84            [ 1] 6195 	ld a,#TK_INTGR
      002247                       6196 	_drop VSIZE 
      002247 5B 06            [ 2]    1     addw sp,#VSIZE 
      002249 81               [ 4] 6197 	ret 
      00224A                       6198 2$: ; end of line reached 
      00224A 90 CE 00 06      [ 2] 6199 	ldw y, data_ptr 
      00224E 72 5F 00 06      [ 1] 6200 	clr data_ptr
      002252 72 5F 00 07      [ 1] 6201 	clr data_ptr+1   
      002256 72 5F 00 08      [ 1] 6202 	clr data_ofs 
      00225A 72 5F 00 09      [ 1] 6203 	clr data_len 
      00225E CD 21 F9         [ 4] 6204 	call try_next_line 
      002261 20 A8            [ 2] 6205 	jra read01
                                   6206 
                                   6207 
                                   6208 ;---------------------------------
                                   6209 ; BASIC: SPIEN clkdiv, 0|1  
                                   6210 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6211 ; if clkdiv==-1 disable SPI
                                   6212 ; 0|1 -> disable|enable  
                                   6213 ;--------------------------------- 
                           000005  6214 SPI_CS_BIT=5
      002263                       6215 spi_enable:
      002263 CD 10 18         [ 4] 6216 	call arg_list 
      002266 A1 02            [ 1] 6217 	cp a,#2
      002268 27 03            [ 1] 6218 	jreq 1$
      00226A CC 08 79         [ 2] 6219 	jp syntax_error 
      00226D                       6220 1$: 
      00226D 72 12 50 C7      [ 1] 6221 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002271 85               [ 2] 6222 	popw x  
      002272 5D               [ 2] 6223 	tnzw x 
      002273 27 21            [ 1] 6224 	jreq spi_disable 
      002275 85               [ 2] 6225 	popw x 
      002276 A6 08            [ 1] 6226 	ld a,#(1<<SPI_CR1_BR)
      002278 42               [ 4] 6227 	mul x,a 
      002279 9F               [ 1] 6228 	ld a,xl 
      00227A C7 52 00         [ 1] 6229 	ld SPI_CR1,a 
                                   6230 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00227D 72 1A 50 14      [ 1] 6231 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002281 72 1A 50 16      [ 1] 6232 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6233 ; configure SPI as master mode 0.	
      002285 72 14 52 00      [ 1] 6234 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6235 ; ~CS line controlled by sofware 	
      002289 72 12 52 01      [ 1] 6236 	bset SPI_CR2,#SPI_CR2_SSM 
      00228D 72 10 52 01      [ 1] 6237     bset SPI_CR2,#SPI_CR2_SSI 
                                   6238 ; enable SPI
      002291 72 1C 52 00      [ 1] 6239 	bset SPI_CR1,#SPI_CR1_SPE 	
      002295 81               [ 4] 6240 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002296                       6241 spi_disable:
      002296                       6242 	_drop #2; throw first argument.
      002296 5B 02            [ 2]    1     addw sp,##2 
                                   6243 ; wait spi idle 
      002298 A6 82            [ 1] 6244 1$:	ld a,#0x82 
      00229A C4 52 03         [ 1] 6245 	and a,SPI_SR
      00229D A1 02            [ 1] 6246 	cp a,#2 
      00229F 26 F7            [ 1] 6247 	jrne 1$
      0022A1 72 1D 52 00      [ 1] 6248 	bres SPI_CR1,#SPI_CR1_SPE
      0022A5 72 13 50 C7      [ 1] 6249 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      0022A9 72 1B 50 16      [ 1] 6250 	bres PE_DDR,#SPI_CS_BIT 
      0022AD 81               [ 4] 6251 	ret 
                                   6252 
      0022AE                       6253 spi_clear_error:
      0022AE A6 78            [ 1] 6254 	ld a,#0x78 
      0022B0 C5 52 03         [ 1] 6255 	bcp a,SPI_SR 
      0022B3 27 04            [ 1] 6256 	jreq 1$
      0022B5 72 5F 52 03      [ 1] 6257 	clr SPI_SR 
      0022B9 81               [ 4] 6258 1$: ret 
                                   6259 
      0022BA                       6260 spi_send_byte:
      0022BA 88               [ 1] 6261 	push a 
      0022BB CD 22 AE         [ 4] 6262 	call spi_clear_error
      0022BE 84               [ 1] 6263 	pop a 
      0022BF 72 03 52 03 FB   [ 2] 6264 	btjf SPI_SR,#SPI_SR_TXE,.
      0022C4 C7 52 04         [ 1] 6265 	ld SPI_DR,a
      0022C7 72 01 52 03 FB   [ 2] 6266 	btjf SPI_SR,#SPI_SR_RXNE,.  
      0022CC C6 52 04         [ 1] 6267 	ld a,SPI_DR 
      0022CF 81               [ 4] 6268 	ret 
                                   6269 
      0022D0                       6270 spi_rcv_byte:
      0022D0 A6 FF            [ 1] 6271 	ld a,#255
      0022D2 72 01 52 03 E3   [ 2] 6272 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      0022D7 C6 52 04         [ 1] 6273 	ld a,SPI_DR 
      0022DA 81               [ 4] 6274 	ret
                                   6275 
                                   6276 ;------------------------------
                                   6277 ; BASIC: SPIWR byte [,byte]
                                   6278 ; write 1 or more byte
                                   6279 ;------------------------------
      0022DB                       6280 spi_write:
      0022DB CD 11 11         [ 4] 6281 	call expression
      0022DE A1 84            [ 1] 6282 	cp a,#TK_INTGR 
      0022E0 27 03            [ 1] 6283 	jreq 1$
      0022E2 CC 08 79         [ 2] 6284 	jp syntax_error 
      0022E5                       6285 1$:	
      0022E5 9F               [ 1] 6286 	ld a,xl 
      0022E6 CD 22 BA         [ 4] 6287 	call spi_send_byte 
      0022E9 CD 09 6B         [ 4] 6288 	call next_token 
      0022EC A1 09            [ 1] 6289 	cp a,#TK_COMMA 
      0022EE 26 02            [ 1] 6290 	jrne 2$ 
      0022F0 20 E9            [ 2] 6291 	jra spi_write 
      0022F2 4D               [ 1] 6292 2$:	tnz a 
      0022F3 27 05            [ 1] 6293 	jreq 3$
      0022F5                       6294 	_unget_token  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0022F5 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0022FA 81               [ 4] 6295 3$:	ret 
                                   6296 
                                   6297 
                                   6298 ;-------------------------------
                                   6299 ; BASIC: SPIRD 	
                                   6300 ; read one byte from SPI 
                                   6301 ;-------------------------------
      0022FB                       6302 spi_read:
      0022FB CD 22 D0         [ 4] 6303 	call spi_rcv_byte 
      0022FE 5F               [ 1] 6304 	clrw x 
      0022FF 97               [ 1] 6305 	ld xl,a 
      002300 A6 84            [ 1] 6306 	ld a,#TK_INTGR 
      002302 81               [ 4] 6307 	ret 
                                   6308 
                                   6309 ;------------------------------
                                   6310 ; BASIC: SPISEL 0|1 
                                   6311 ; set state of ~CS line
                                   6312 ; 0|1 deselect|select  
                                   6313 ;------------------------------
      002303                       6314 spi_select:
      002303 CD 09 6B         [ 4] 6315 	call next_token 
      002306 A1 84            [ 1] 6316 	cp a,#TK_INTGR 
      002308 27 03            [ 1] 6317 	jreq 1$
      00230A CC 08 79         [ 2] 6318 	jp syntax_error 
      00230D 5D               [ 2] 6319 1$: tnzw x  
      00230E 27 05            [ 1] 6320 	jreq cs_high 
      002310 72 1B 50 14      [ 1] 6321 	bres PE_ODR,#SPI_CS_BIT
      002314 81               [ 4] 6322 	ret 
      002315                       6323 cs_high: 
      002315 72 1A 50 14      [ 1] 6324 	bset PE_ODR,#SPI_CS_BIT
      002319 81               [ 4] 6325 	ret 
                                   6326 
                                   6327 
                                   6328 ;-------------------------------
                                   6329 ; BASIC: PAD 
                                   6330 ; Return pad buffer address.
                                   6331 ;------------------------------
      00231A                       6332 pad_ref:
      00231A AE 16 E0         [ 2] 6333 	ldw x,#pad 
      00231D B6 84            [ 1] 6334 	ld a,TK_INTGR
      00231F 81               [ 4] 6335 	ret 
                                   6336 
                                   6337 ;------------------------------
                                   6338 ;      dictionary 
                                   6339 ; format:
                                   6340 ;   link:   2 bytes 
                                   6341 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6342 ;   cmd_name: 16 byte max 
                                   6343 ;   cmd_index: 2 bytes 
                                   6344 ;------------------------------
                                   6345 	.macro _dict_entry len,name,cmd_idx 
                                   6346 	.word LINK 
                                   6347 	LINK=.
                                   6348 name:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                   6349 	.byte len 	
                                   6350 	.ascii "name"
                                   6351 	.word cmd_idx 
                                   6352 	.endm 
                                   6353 
                           000000  6354 	LINK=0
                                   6355 ; respect alphabetic order for BASIC names from Z-A
                                   6356 ; this sort order is for a cleaner WORDS cmd output. 	
      002320                       6357 kword_end:
      002320                       6358 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002320 00 00                    1 	.word LINK 
                           002322     2 	LINK=.
      002322                          3 XOR:
      002322 43                       4 	.byte 3+F_IFUNC 	
      002323 58 4F 52                 5 	.ascii "XOR"
      002326 00 C6                    6 	.word XOR_IDX 
      002328                       6359 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002328 23 22                    1 	.word LINK 
                           00232A     2 	LINK=.
      00232A                          3 WRITE:
      00232A 05                       4 	.byte 5 	
      00232B 57 52 49 54 45           5 	.ascii "WRITE"
      002330 00 C4                    6 	.word WRITE_IDX 
      002332                       6360 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002332 23 2A                    1 	.word LINK 
                           002334     2 	LINK=.
      002334                          3 WORDS:
      002334 05                       4 	.byte 5 	
      002335 57 4F 52 44 53           5 	.ascii "WORDS"
      00233A 00 C2                    6 	.word WORDS_IDX 
      00233C                       6361 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      00233C 23 34                    1 	.word LINK 
                           00233E     2 	LINK=.
      00233E                          3 WAIT:
      00233E 04                       4 	.byte 4 	
      00233F 57 41 49 54              5 	.ascii "WAIT"
      002343 00 C0                    6 	.word WAIT_IDX 
      002345                       6362 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002345 23 3E                    1 	.word LINK 
                           002347     2 	LINK=.
      002347                          3 USR:
      002347 43                       4 	.byte 3+F_IFUNC 	
      002348 55 53 52                 5 	.ascii "USR"
      00234B 00 BE                    6 	.word USR_IDX 
      00234D                       6363 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      00234D 23 47                    1 	.word LINK 
                           00234F     2 	LINK=.
      00234F                          3 UNTIL:
      00234F 05                       4 	.byte 5 	
      002350 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002355 00 BC                    6 	.word UNTIL_IDX 
      002357                       6364 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002357 23 4F                    1 	.word LINK 
                           002359     2 	LINK=.
      002359                          3 UFLASH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002359 46                       4 	.byte 6+F_IFUNC 	
      00235A 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002360 00 BA                    6 	.word UFLASH_IDX 
      002362                       6365 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound 
      002362 23 59                    1 	.word LINK 
                           002364     2 	LINK=.
      002364                          3 UBOUND:
      002364 46                       4 	.byte 6+F_IFUNC 	
      002365 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00236B 00 B8                    6 	.word UBOUND_IDX 
      00236D                       6366 	_dict_entry,4,TONE,TONE_IDX;tone  
      00236D 23 64                    1 	.word LINK 
                           00236F     2 	LINK=.
      00236F                          3 TONE:
      00236F 04                       4 	.byte 4 	
      002370 54 4F 4E 45              5 	.ascii "TONE"
      002374 00 B6                    6 	.word TONE_IDX 
      002376                       6367 	_dict_entry,2,TO,TO_IDX;to
      002376 23 6F                    1 	.word LINK 
                           002378     2 	LINK=.
      002378                          3 TO:
      002378 02                       4 	.byte 2 	
      002379 54 4F                    5 	.ascii "TO"
      00237B 00 B4                    6 	.word TO_IDX 
      00237D                       6368 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      00237D 23 78                    1 	.word LINK 
                           00237F     2 	LINK=.
      00237F                          3 TIMEOUT:
      00237F 47                       4 	.byte 7+F_IFUNC 	
      002380 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002387 00 B2                    6 	.word TMROUT_IDX 
      002389                       6369 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      002389 23 7F                    1 	.word LINK 
                           00238B     2 	LINK=.
      00238B                          3 TIMER:
      00238B 05                       4 	.byte 5 	
      00238C 54 49 4D 45 52           5 	.ascii "TIMER"
      002391 00 B0                    6 	.word TIMER_IDX 
      002393                       6370 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002393 23 8B                    1 	.word LINK 
                           002395     2 	LINK=.
      002395                          3 TICKS:
      002395 45                       4 	.byte 5+F_IFUNC 	
      002396 54 49 43 4B 53           5 	.ascii "TICKS"
      00239B 00 AE                    6 	.word TICKS_IDX 
      00239D                       6371 	_dict_entry,4,STOP,STOP_IDX;stop 
      00239D 23 95                    1 	.word LINK 
                           00239F     2 	LINK=.
      00239F                          3 STOP:
      00239F 04                       4 	.byte 4 	
      0023A0 53 54 4F 50              5 	.ascii "STOP"
      0023A4 00 AC                    6 	.word STOP_IDX 
      0023A6                       6372 	_dict_entry,4,STEP,STEP_IDX;step 
      0023A6 23 9F                    1 	.word LINK 
                           0023A8     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0023A8                          3 STEP:
      0023A8 04                       4 	.byte 4 	
      0023A9 53 54 45 50              5 	.ascii "STEP"
      0023AD 00 AA                    6 	.word STEP_IDX 
      0023AF                       6373 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      0023AF 23 A8                    1 	.word LINK 
                           0023B1     2 	LINK=.
      0023B1                          3 SPIWR:
      0023B1 05                       4 	.byte 5 	
      0023B2 53 50 49 57 52           5 	.ascii "SPIWR"
      0023B7 00 A8                    6 	.word SPIWR_IDX 
      0023B9                       6374 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      0023B9 23 B1                    1 	.word LINK 
                           0023BB     2 	LINK=.
      0023BB                          3 SPISEL:
      0023BB 06                       4 	.byte 6 	
      0023BC 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0023C2 00 A6                    6 	.word SPISEL_IDX 
      0023C4                       6375 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      0023C4 23 BB                    1 	.word LINK 
                           0023C6     2 	LINK=.
      0023C6                          3 SPIEN:
      0023C6 05                       4 	.byte 5 	
      0023C7 53 50 49 45 4E           5 	.ascii "SPIEN"
      0023CC 00 A4                    6 	.word SPIEN_IDX 
      0023CE                       6376 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      0023CE 23 C6                    1 	.word LINK 
                           0023D0     2 	LINK=.
      0023D0                          3 SPIRD:
      0023D0 45                       4 	.byte 5+F_IFUNC 	
      0023D1 53 50 49 52 44           5 	.ascii "SPIRD"
      0023D6 00 A2                    6 	.word SPIRD_IDX 
      0023D8                       6377 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      0023D8 23 D0                    1 	.word LINK 
                           0023DA     2 	LINK=.
      0023DA                          3 SLEEP:
      0023DA 05                       4 	.byte 5 	
      0023DB 53 4C 45 45 50           5 	.ascii "SLEEP"
      0023E0 00 A0                    6 	.word SLEEP_IDX 
      0023E2                       6378 	_dict_entry,4+F_IFUNC,SIZE,SIZE_IDX;size
      0023E2 23 DA                    1 	.word LINK 
                           0023E4     2 	LINK=.
      0023E4                          3 SIZE:
      0023E4 44                       4 	.byte 4+F_IFUNC 	
      0023E5 53 49 5A 45              5 	.ascii "SIZE"
      0023E9 00 9E                    6 	.word SIZE_IDX 
      0023EB                       6379     _dict_entry,4,SHOW,SHOW_IDX;show 
      0023EB 23 E4                    1 	.word LINK 
                           0023ED     2 	LINK=.
      0023ED                          3 SHOW:
      0023ED 04                       4 	.byte 4 	
      0023EE 53 48 4F 57              5 	.ascii "SHOW"
      0023F2 00 9C                    6 	.word SHOW_IDX 
      0023F4                       6380 	_dict_entry,4,SAVE,SAVE_IDX;save
      0023F4 23 ED                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                           0023F6     2 	LINK=.
      0023F6                          3 SAVE:
      0023F6 04                       4 	.byte 4 	
      0023F7 53 41 56 45              5 	.ascii "SAVE"
      0023FB 00 9A                    6 	.word SAVE_IDX 
      0023FD                       6381 	_dict_entry 3,RUN,RUN_IDX;run
      0023FD 23 F6                    1 	.word LINK 
                           0023FF     2 	LINK=.
      0023FF                          3 RUN:
      0023FF 03                       4 	.byte 3 	
      002400 52 55 4E                 5 	.ascii "RUN"
      002403 00 98                    6 	.word RUN_IDX 
      002405                       6382 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      002405 23 FF                    1 	.word LINK 
                           002407     2 	LINK=.
      002407                          3 RSHIFT:
      002407 46                       4 	.byte 6+F_IFUNC 	
      002408 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00240E 00 96                    6 	.word RSHIFT_IDX 
      002410                       6383 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      002410 24 07                    1 	.word LINK 
                           002412     2 	LINK=.
      002412                          3 RND:
      002412 43                       4 	.byte 3+F_IFUNC 	
      002413 52 4E 44                 5 	.ascii "RND"
      002416 00 94                    6 	.word RND_IDX 
      002418                       6384 	_dict_entry,6,RETURN,RET_IDX;return 
      002418 24 12                    1 	.word LINK 
                           00241A     2 	LINK=.
      00241A                          3 RETURN:
      00241A 06                       4 	.byte 6 	
      00241B 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002421 00 92                    6 	.word RET_IDX 
      002423                       6385 	_dict_entry,7,RESTORE,REST_IDX;restore 
      002423 24 1A                    1 	.word LINK 
                           002425     2 	LINK=.
      002425                          3 RESTORE:
      002425 07                       4 	.byte 7 	
      002426 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00242D 00 90                    6 	.word REST_IDX 
      00242F                       6386 	_dict_entry 6,REMARK,REM_IDX;remark 
      00242F 24 25                    1 	.word LINK 
                           002431     2 	LINK=.
      002431                          3 REMARK:
      002431 06                       4 	.byte 6 	
      002432 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002438 00 8E                    6 	.word REM_IDX 
      00243A                       6387 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      00243A 24 31                    1 	.word LINK 
                           00243C     2 	LINK=.
      00243C                          3 REBOOT:
      00243C 06                       4 	.byte 6 	
      00243D 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002443 00 8C                    6 	.word RBT_IDX 
      002445                       6388 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002445 24 3C                    1 	.word LINK 
                           002447     2 	LINK=.
      002447                          3 READ:
      002447 44                       4 	.byte 4+F_IFUNC 	
      002448 52 45 41 44              5 	.ascii "READ"
      00244C 00 8A                    6 	.word READ_IDX 
      00244E                       6389 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      00244E 24 47                    1 	.word LINK 
                           002450     2 	LINK=.
      002450                          3 QKEY:
      002450 44                       4 	.byte 4+F_IFUNC 	
      002451 51 4B 45 59              5 	.ascii "QKEY"
      002455 00 88                    6 	.word QKEY_IDX 
      002457                       6390 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      002457 24 50                    1 	.word LINK 
                           002459     2 	LINK=.
      002459                          3 PRTI:
      002459 44                       4 	.byte 4+F_IFUNC 	
      00245A 50 52 54 49              5 	.ascii "PRTI"
      00245E 00 86                    6 	.word PRTI_IDX 
      002460                       6391 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      002460 24 59                    1 	.word LINK 
                           002462     2 	LINK=.
      002462                          3 PRTH:
      002462 44                       4 	.byte 4+F_IFUNC 	
      002463 50 52 54 48              5 	.ascii "PRTH"
      002467 00 84                    6 	.word PRTH_IDX 
      002469                       6392 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      002469 24 62                    1 	.word LINK 
                           00246B     2 	LINK=.
      00246B                          3 PRTG:
      00246B 44                       4 	.byte 4+F_IFUNC 	
      00246C 50 52 54 47              5 	.ascii "PRTG"
      002470 00 82                    6 	.word PRTG_IDX 
      002472                       6393 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      002472 24 6B                    1 	.word LINK 
                           002474     2 	LINK=.
      002474                          3 PRTF:
      002474 44                       4 	.byte 4+F_IFUNC 	
      002475 50 52 54 46              5 	.ascii "PRTF"
      002479 00 80                    6 	.word PRTF_IDX 
      00247B                       6394 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      00247B 24 74                    1 	.word LINK 
                           00247D     2 	LINK=.
      00247D                          3 PRTE:
      00247D 44                       4 	.byte 4+F_IFUNC 	
      00247E 50 52 54 45              5 	.ascii "PRTE"
      002482 00 7E                    6 	.word PRTE_IDX 
      002484                       6395 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      002484 24 7D                    1 	.word LINK 
                           002486     2 	LINK=.
      002486                          3 PRTD:
      002486 44                       4 	.byte 4+F_IFUNC 	
      002487 50 52 54 44              5 	.ascii "PRTD"
      00248B 00 7C                    6 	.word PRTD_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00248D                       6396 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      00248D 24 86                    1 	.word LINK 
                           00248F     2 	LINK=.
      00248F                          3 PRTC:
      00248F 44                       4 	.byte 4+F_IFUNC 	
      002490 50 52 54 43              5 	.ascii "PRTC"
      002494 00 7A                    6 	.word PRTC_IDX 
      002496                       6397 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      002496 24 8F                    1 	.word LINK 
                           002498     2 	LINK=.
      002498                          3 PRTB:
      002498 44                       4 	.byte 4+F_IFUNC 	
      002499 50 52 54 42              5 	.ascii "PRTB"
      00249D 00 78                    6 	.word PRTB_IDX 
      00249F                       6398 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      00249F 24 98                    1 	.word LINK 
                           0024A1     2 	LINK=.
      0024A1                          3 PRTA:
      0024A1 44                       4 	.byte 4+F_IFUNC 	
      0024A2 50 52 54 41              5 	.ascii "PRTA"
      0024A6 00 76                    6 	.word PRTA_IDX 
      0024A8                       6399 	_dict_entry 5,PRINT,PRT_IDX;print 
      0024A8 24 A1                    1 	.word LINK 
                           0024AA     2 	LINK=.
      0024AA                          3 PRINT:
      0024AA 05                       4 	.byte 5 	
      0024AB 50 52 49 4E 54           5 	.ascii "PRINT"
      0024B0 00 74                    6 	.word PRT_IDX 
      0024B2                       6400 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      0024B2 24 AA                    1 	.word LINK 
                           0024B4     2 	LINK=.
      0024B4                          3 POUT:
      0024B4 44                       4 	.byte 4+F_IFUNC 	
      0024B5 50 4F 55 54              5 	.ascii "POUT"
      0024B9 00 72                    6 	.word POUT_IDX 
      0024BB                       6401 	_dict_entry,4,POKE,POKE_IDX;poke 
      0024BB 24 B4                    1 	.word LINK 
                           0024BD     2 	LINK=.
      0024BD                          3 POKE:
      0024BD 04                       4 	.byte 4 	
      0024BE 50 4F 4B 45              5 	.ascii "POKE"
      0024C2 00 70                    6 	.word POKE_IDX 
      0024C4                       6402 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      0024C4 24 BD                    1 	.word LINK 
                           0024C6     2 	LINK=.
      0024C6                          3 PINP:
      0024C6 44                       4 	.byte 4+F_IFUNC 	
      0024C7 50 49 4E 50              5 	.ascii "PINP"
      0024CB 00 6E                    6 	.word PINP_IDX 
      0024CD                       6403 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      0024CD 24 C6                    1 	.word LINK 
                           0024CF     2 	LINK=.
      0024CF                          3 PEEK:
      0024CF 44                       4 	.byte 4+F_IFUNC 	
      0024D0 50 45 45 4B              5 	.ascii "PEEK"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0024D4 00 6C                    6 	.word PEEK_IDX 
      0024D6                       6404 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      0024D6 24 CF                    1 	.word LINK 
                           0024D8     2 	LINK=.
      0024D8                          3 PMODE:
      0024D8 05                       4 	.byte 5 	
      0024D9 50 4D 4F 44 45           5 	.ascii "PMODE"
      0024DE 00 6A                    6 	.word PMODE_IDX 
      0024E0                       6405 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      0024E0 24 D8                    1 	.word LINK 
                           0024E2     2 	LINK=.
      0024E2                          3 PAUSE:
      0024E2 05                       4 	.byte 5 	
      0024E3 50 41 55 53 45           5 	.ascii "PAUSE"
      0024E8 00 68                    6 	.word PAUSE_IDX 
      0024EA                       6406 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      0024EA 24 E2                    1 	.word LINK 
                           0024EC     2 	LINK=.
      0024EC                          3 PAD:
      0024EC 43                       4 	.byte 3+F_IFUNC 	
      0024ED 50 41 44                 5 	.ascii "PAD"
      0024F0 00 66                    6 	.word PAD_IDX 
      0024F2                       6407 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      0024F2 24 EC                    1 	.word LINK 
                           0024F4     2 	LINK=.
      0024F4                          3 OR:
      0024F4 42                       4 	.byte 2+F_IFUNC 	
      0024F5 4F 52                    5 	.ascii "OR"
      0024F7 00 64                    6 	.word OR_IDX 
      0024F9                       6408 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      0024F9 24 F4                    1 	.word LINK 
                           0024FB     2 	LINK=.
      0024FB                          3 ODR:
      0024FB 43                       4 	.byte 3+F_IFUNC 	
      0024FC 4F 44 52                 5 	.ascii "ODR"
      0024FF 00 62                    6 	.word ODR_IDX 
      002501                       6409 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      002501 24 FB                    1 	.word LINK 
                           002503     2 	LINK=.
      002503                          3 NOT:
      002503 43                       4 	.byte 3+F_IFUNC 	
      002504 4E 4F 54                 5 	.ascii "NOT"
      002507 00 60                    6 	.word NOT_IDX 
      002509                       6410 	_dict_entry,3,NEW,NEW_IDX;new
      002509 25 03                    1 	.word LINK 
                           00250B     2 	LINK=.
      00250B                          3 NEW:
      00250B 03                       4 	.byte 3 	
      00250C 4E 45 57                 5 	.ascii "NEW"
      00250F 00 5E                    6 	.word NEW_IDX 
      002511                       6411 	_dict_entry,4,NEXT,NEXT_IDX;next 
      002511 25 0B                    1 	.word LINK 
                           002513     2 	LINK=.
      002513                          3 NEXT:
      002513 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002514 4E 45 58 54              5 	.ascii "NEXT"
      002518 00 5C                    6 	.word NEXT_IDX 
      00251A                       6412 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      00251A 25 13                    1 	.word LINK 
                           00251C     2 	LINK=.
      00251C                          3 MULDIV:
      00251C 46                       4 	.byte 6+F_IFUNC 	
      00251D 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      002523 00 5A                    6 	.word MULDIV_IDX 
      002525                       6413 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      002525 25 1C                    1 	.word LINK 
                           002527     2 	LINK=.
      002527                          3 LSHIFT:
      002527 46                       4 	.byte 6+F_IFUNC 	
      002528 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00252E 00 58                    6 	.word LSHIFT_IDX 
      002530                       6414 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      002530 25 27                    1 	.word LINK 
                           002532     2 	LINK=.
      002532                          3 LOG:
      002532 43                       4 	.byte 3+F_IFUNC 	
      002533 4C 4F 47                 5 	.ascii "LOG"
      002536 00 56                    6 	.word LOG_IDX 
      002538                       6415 	_dict_entry,4,LOAD,LOAD_IDX;load 
      002538 25 32                    1 	.word LINK 
                           00253A     2 	LINK=.
      00253A                          3 LOAD:
      00253A 04                       4 	.byte 4 	
      00253B 4C 4F 41 44              5 	.ascii "LOAD"
      00253F 00 54                    6 	.word LOAD_IDX 
      002541                       6416 	_dict_entry 4,LIST,LIST_IDX;list
      002541 25 3A                    1 	.word LINK 
                           002543     2 	LINK=.
      002543                          3 LIST:
      002543 04                       4 	.byte 4 	
      002544 4C 49 53 54              5 	.ascii "LIST"
      002548 00 52                    6 	.word LIST_IDX 
      00254A                       6417 	_dict_entry 3,LET,LET_IDX;let 
      00254A 25 43                    1 	.word LINK 
                           00254C     2 	LINK=.
      00254C                          3 LET:
      00254C 03                       4 	.byte 3 	
      00254D 4C 45 54                 5 	.ascii "LET"
      002550 00 50                    6 	.word LET_IDX 
      002552                       6418 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      002552 25 4C                    1 	.word LINK 
                           002554     2 	LINK=.
      002554                          3 KEY:
      002554 43                       4 	.byte 3+F_IFUNC 	
      002555 4B 45 59                 5 	.ascii "KEY"
      002558 00 4E                    6 	.word KEY_IDX 
      00255A                       6419 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      00255A 25 54                    1 	.word LINK 
                           00255C     2 	LINK=.
      00255C                          3 IWDGREF:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00255C 07                       4 	.byte 7 	
      00255D 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002564 00 4C                    6 	.word IWDGREF_IDX 
      002566                       6420 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      002566 25 5C                    1 	.word LINK 
                           002568     2 	LINK=.
      002568                          3 IWDGEN:
      002568 06                       4 	.byte 6 	
      002569 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00256F 00 4A                    6 	.word IWDGEN_IDX 
      002571                       6421 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      002571 25 68                    1 	.word LINK 
                           002573     2 	LINK=.
      002573                          3 INVERT:
      002573 46                       4 	.byte 6+F_IFUNC 	
      002574 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00257A 00 48                    6 	.word INVERT_IDX 
      00257C                       6422 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      00257C 25 73                    1 	.word LINK 
                           00257E     2 	LINK=.
      00257E                          3 INPUT:
      00257E 05                       4 	.byte 5 	
      00257F 49 4E 50 55 54           5 	.ascii "INPUT"
      002584 00 46                    6 	.word INPUT_IDX 
      002586                       6423 	_dict_entry,2,IF,IF_IDX;if 
      002586 25 7E                    1 	.word LINK 
                           002588     2 	LINK=.
      002588                          3 IF:
      002588 02                       4 	.byte 2 	
      002589 49 46                    5 	.ascii "IF"
      00258B 00 44                    6 	.word IF_IDX 
      00258D                       6424 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      00258D 25 88                    1 	.word LINK 
                           00258F     2 	LINK=.
      00258F                          3 IDR:
      00258F 43                       4 	.byte 3+F_IFUNC 	
      002590 49 44 52                 5 	.ascii "IDR"
      002593 00 42                    6 	.word IDR_IDX 
      002595                       6425 	_dict_entry,3,HEX,HEX_IDX;hex_base
      002595 25 8F                    1 	.word LINK 
                           002597     2 	LINK=.
      002597                          3 HEX:
      002597 03                       4 	.byte 3 	
      002598 48 45 58                 5 	.ascii "HEX"
      00259B 00 40                    6 	.word HEX_IDX 
      00259D                       6426 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      00259D 25 97                    1 	.word LINK 
                           00259F     2 	LINK=.
      00259F                          3 GPIO:
      00259F 44                       4 	.byte 4+F_IFUNC 	
      0025A0 47 50 49 4F              5 	.ascii "GPIO"
      0025A4 00 3E                    6 	.word GPIO_IDX 
      0025A6                       6427 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0025A6 25 9F                    1 	.word LINK 
                           0025A8     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      0025A8                          3 GOTO:
      0025A8 04                       4 	.byte 4 	
      0025A9 47 4F 54 4F              5 	.ascii "GOTO"
      0025AD 00 3C                    6 	.word GOTO_IDX 
      0025AF                       6428 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0025AF 25 A8                    1 	.word LINK 
                           0025B1     2 	LINK=.
      0025B1                          3 GOSUB:
      0025B1 05                       4 	.byte 5 	
      0025B2 47 4F 53 55 42           5 	.ascii "GOSUB"
      0025B7 00 3A                    6 	.word GOSUB_IDX 
      0025B9                       6429 	_dict_entry,6,FORGET,FORGET_IDX;forget 
      0025B9 25 B1                    1 	.word LINK 
                           0025BB     2 	LINK=.
      0025BB                          3 FORGET:
      0025BB 06                       4 	.byte 6 	
      0025BC 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0025C2 00 38                    6 	.word FORGET_IDX 
      0025C4                       6430 	_dict_entry,3,FOR,FOR_IDX;for 
      0025C4 25 BB                    1 	.word LINK 
                           0025C6     2 	LINK=.
      0025C6                          3 FOR:
      0025C6 03                       4 	.byte 3 	
      0025C7 46 4F 52                 5 	.ascii "FOR"
      0025CA 00 36                    6 	.word FOR_IDX 
      0025CC                       6431 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      0025CC 25 C6                    1 	.word LINK 
                           0025CE     2 	LINK=.
      0025CE                          3 FCPU:
      0025CE 04                       4 	.byte 4 	
      0025CF 46 43 50 55              5 	.ascii "FCPU"
      0025D3 00 34                    6 	.word FCPU_IDX 
      0025D5                       6432 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      0025D5 25 CE                    1 	.word LINK 
                           0025D7     2 	LINK=.
      0025D7                          3 EEPROM:
      0025D7 46                       4 	.byte 6+F_IFUNC 	
      0025D8 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0025DE 00 32                    6 	.word EEPROM_IDX 
      0025E0                       6433 	_dict_entry,3,END,END_IDX;cmd_end  
      0025E0 25 D7                    1 	.word LINK 
                           0025E2     2 	LINK=.
      0025E2                          3 END:
      0025E2 03                       4 	.byte 3 	
      0025E3 45 4E 44                 5 	.ascii "END"
      0025E6 00 30                    6 	.word END_IDX 
      0025E8                       6434 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      0025E8 25 E2                    1 	.word LINK 
                           0025EA     2 	LINK=.
      0025EA                          3 DWRITE:
      0025EA 06                       4 	.byte 6+F_CMD 	
      0025EB 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0025F1 00 2E                    6 	.word DWRITE_IDX 
      0025F3                       6435 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      0025F3 25 EA                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                           0025F5     2 	LINK=.
      0025F5                          3 DREAD:
      0025F5 45                       4 	.byte 5+F_IFUNC 	
      0025F6 44 52 45 41 44           5 	.ascii "DREAD"
      0025FB 00 2C                    6 	.word DREAD_IDX 
      0025FD                       6436 	_dict_entry,2,DO,DO_IDX;do_loop
      0025FD 25 F5                    1 	.word LINK 
                           0025FF     2 	LINK=.
      0025FF                          3 DO:
      0025FF 02                       4 	.byte 2 	
      002600 44 4F                    5 	.ascii "DO"
      002602 00 2A                    6 	.word DO_IDX 
      002604                       6437 	_dict_entry,3,DIR,DIR_IDX;directory 
      002604 25 FF                    1 	.word LINK 
                           002606     2 	LINK=.
      002606                          3 DIR:
      002606 03                       4 	.byte 3 	
      002607 44 49 52                 5 	.ascii "DIR"
      00260A 00 28                    6 	.word DIR_IDX 
      00260C                       6438 	_dict_entry,3,DEC,DEC_IDX;dec_base
      00260C 26 06                    1 	.word LINK 
                           00260E     2 	LINK=.
      00260E                          3 DEC:
      00260E 03                       4 	.byte 3 	
      00260F 44 45 43                 5 	.ascii "DEC"
      002612 00 26                    6 	.word DEC_IDX 
      002614                       6439 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      002614 26 0E                    1 	.word LINK 
                           002616     2 	LINK=.
      002616                          3 DDR:
      002616 43                       4 	.byte 3+F_IFUNC 	
      002617 44 44 52                 5 	.ascii "DDR"
      00261A 00 24                    6 	.word DDR_IDX 
      00261C                       6440 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      00261C 26 16                    1 	.word LINK 
                           00261E     2 	LINK=.
      00261E                          3 DATALN:
      00261E 06                       4 	.byte 6 	
      00261F 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      002625 00 22                    6 	.word DATALN_IDX 
      002627                       6441 	_dict_entry,4,DATA,DATA_IDX;data  
      002627 26 1E                    1 	.word LINK 
                           002629     2 	LINK=.
      002629                          3 DATA:
      002629 04                       4 	.byte 4 	
      00262A 44 41 54 41              5 	.ascii "DATA"
      00262E 00 20                    6 	.word DATA_IDX 
      002630                       6442 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      002630 26 29                    1 	.word LINK 
                           002632     2 	LINK=.
      002632                          3 CRL:
      002632 43                       4 	.byte 3+F_IFUNC 	
      002633 43 52 4C                 5 	.ascii "CRL"
      002636 00 1E                    6 	.word CRL_IDX 
      002638                       6443 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002638 26 32                    1 	.word LINK 
                           00263A     2 	LINK=.
      00263A                          3 CRH:
      00263A 43                       4 	.byte 3+F_IFUNC 	
      00263B 43 52 48                 5 	.ascii "CRH"
      00263E 00 1C                    6 	.word CRH_IDX 
      002640                       6444 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      002640 26 3A                    1 	.word LINK 
                           002642     2 	LINK=.
      002642                          3 CHAR:
      002642 84                       4 	.byte 4+F_CFUNC 	
      002643 43 48 41 52              5 	.ascii "CHAR"
      002647 00 1A                    6 	.word CHAR_IDX 
      002649                       6445 	_dict_entry,3,BYE,BYE_IDX;bye 
      002649 26 42                    1 	.word LINK 
                           00264B     2 	LINK=.
      00264B                          3 BYE:
      00264B 03                       4 	.byte 3 	
      00264C 42 59 45                 5 	.ascii "BYE"
      00264F 00 18                    6 	.word BYE_IDX 
      002651                       6446 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      002651 26 4B                    1 	.word LINK 
                           002653     2 	LINK=.
      002653                          3 BTOGL:
      002653 05                       4 	.byte 5 	
      002654 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002659 00 16                    6 	.word BTOGL_IDX 
      00265B                       6447 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00265B 26 53                    1 	.word LINK 
                           00265D     2 	LINK=.
      00265D                          3 BTEST:
      00265D 45                       4 	.byte 5+F_IFUNC 	
      00265E 42 54 45 53 54           5 	.ascii "BTEST"
      002663 00 14                    6 	.word BTEST_IDX 
      002665                       6448 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      002665 26 5D                    1 	.word LINK 
                           002667     2 	LINK=.
      002667                          3 BSET:
      002667 04                       4 	.byte 4 	
      002668 42 53 45 54              5 	.ascii "BSET"
      00266C 00 12                    6 	.word BSET_IDX 
      00266E                       6449 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      00266E 26 67                    1 	.word LINK 
                           002670     2 	LINK=.
      002670                          3 BRES:
      002670 04                       4 	.byte 4 	
      002671 42 52 45 53              5 	.ascii "BRES"
      002675 00 10                    6 	.word BRES_IDX 
      002677                       6450 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      002677 26 70                    1 	.word LINK 
                           002679     2 	LINK=.
      002679                          3 BIT:
      002679 43                       4 	.byte 3+F_IFUNC 	
      00267A 42 49 54                 5 	.ascii "BIT"
      00267D 00 0E                    6 	.word BIT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      00267F                       6451 	_dict_entry,3,AWU,AWU_IDX;awu 
      00267F 26 79                    1 	.word LINK 
                           002681     2 	LINK=.
      002681                          3 AWU:
      002681 03                       4 	.byte 3 	
      002682 41 57 55                 5 	.ascii "AWU"
      002685 00 0C                    6 	.word AWU_IDX 
      002687                       6452 	_dict_entry,7,AUTORUN,AUTORUN_IDX;autorun
      002687 26 81                    1 	.word LINK 
                           002689     2 	LINK=.
      002689                          3 AUTORUN:
      002689 07                       4 	.byte 7 	
      00268A 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002691 00 0A                    6 	.word AUTORUN_IDX 
      002693                       6453 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      002693 26 89                    1 	.word LINK 
                           002695     2 	LINK=.
      002695                          3 ASC:
      002695 43                       4 	.byte 3+F_IFUNC 	
      002696 41 53 43                 5 	.ascii "ASC"
      002699 00 08                    6 	.word ASC_IDX 
      00269B                       6454 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      00269B 26 95                    1 	.word LINK 
                           00269D     2 	LINK=.
      00269D                          3 AND:
      00269D 43                       4 	.byte 3+F_IFUNC 	
      00269E 41 4E 44                 5 	.ascii "AND"
      0026A1 00 06                    6 	.word AND_IDX 
      0026A3                       6455 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0026A3 26 9D                    1 	.word LINK 
                           0026A5     2 	LINK=.
      0026A5                          3 ADCREAD:
      0026A5 47                       4 	.byte 7+F_IFUNC 	
      0026A6 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0026AD 00 04                    6 	.word ADCREAD_IDX 
      0026AF                       6456 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      0026AF 26 A5                    1 	.word LINK 
                           0026B1     2 	LINK=.
      0026B1                          3 ADCON:
      0026B1 05                       4 	.byte 5 	
      0026B2 41 44 43 4F 4E           5 	.ascii "ADCON"
      0026B7 00 02                    6 	.word ADCON_IDX 
      0026B9                       6457 kword_dict:
      0026B9                       6458 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      0026B9 26 B1                    1 	.word LINK 
                           0026BB     2 	LINK=.
      0026BB                          3 ABS:
      0026BB 43                       4 	.byte 3+F_IFUNC 	
      0026BC 41 42 53                 5 	.ascii "ABS"
      0026BF 00 00                    6 	.word ABS_IDX 
                                   6459 
                                   6460 ;comands and fonctions address table 	
      0026C1                       6461 code_addr:
      0026C1 1E 62 18 98 18 D4 1E  6462 	.word abs,power_adc,analog_read,bit_and,ascii,autorun,awu,bitmask ; 0..7
             76 1D 0F 1D 9A 1E 13
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



             20 B9
      0026D1 16 36 16 26 16 57 16  6463 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             47 1D 91 1C FD 21 73
      0026DF 21 6D 21 8B 21 91 21  6464 	.word const_cr1,data,data_line,const_ddr,dec_base,directory,do_loop,digital_read,digital_write ;16..23 
             67 11 FB 1C 44 20 E2
             19 08 19 38
      0026F1 18 44 21 85 1E F0 16  6465 	.word cmd_end,const_eeprom_base,fcpu,for,forget,gosub,goto,gpio ; 24..31 
             B2 1B DD 17 AD 17 92
             1D 44
      002701 11 F6 21 61 16 9E 15  6466 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             8F 20 D3 20 63 20 99
             1D 2F
      002711 12 2C 12 57 1B AD 20  6467 	.word let,list,load,log2,lshift,muldiv,next,new ; 40..47
             9E 1E BE 0F 6B 17 32
             19 BF
      002721 20 56 21 5B 1E 8E 23  6468 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             1A 1E 00 1E FC 16 8D
             21 7F
      002731 16 7E 21 79 14 FE 21  6469 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             25 21 2B 21 31 21 37
             21 3D
      002741 21 43 21 49 21 4F 21  6470 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             55 1D 37 22 09 05 D6
             15 FB
      002751 21 BE 17 CD 1F 6D 1E  6471 	.word restore,return, random,rshift,run,save,show,size ; 72..79
             D7 17 EB 1A B0 11 B5
             12 00
      002761 1D F5 22 FB 22 63 23  6472 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             03 22 DB 17 0B 19 73
             1E 5C
      002771 20 3A 20 49 16 DB 18  6473 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             54 12 0A 1D 6E 20 F7
             1D 74
      002781 16 01 1F D4 1C C6 1E  6474 	.word wait,words,write,bit_xor ; 96..103 
             A6
      002789 00 00                 6475 	.word 0 
                                   6476 
      002800                       6477 	.bndry 128 ; align on FLASH block.
                                   6478 ; free space for user application  
      002800                       6479 user_space:
                                   6480 ; USR() function test
      002800 89               [ 2] 6481 	pushw x 
      002801 72 1A 50 0A      [ 1] 6482 	bset PC_ODR,#5 
      002805 85               [ 2] 6483 	popw x 
      002806 CD 1E 0A         [ 4] 6484 	call pause02 
      002809 72 1B 50 0A      [ 1] 6485 	bres PC_ODR,#5 
      00280D 81               [ 4] 6486 	ret
                                   6487 
                                   6488 	.area FLASH_DRIVE (ABS)
      010000                       6489 	.org 0x10000
      010000                       6490 fdrive:
                                   6491 ; .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        0026BB R   |     ABS_IDX =  000000 
    ACK     =  000006     |   5 ADCON      0026B1 R   |     ADCON_ID=  000002 
  5 ADCREAD    0026A5 R   |     ADCREAD_=  000004     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADR     =  000002     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   5 AND        00269D R
    AND_IDX =  000006     |     AREG    =  000002     |     ARG_OFS =  000002 
  5 ASC        002695 R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
  5 AUTORUN    002689 R   |     AUTORUN_=  00000A     |     AUTORUN_=  004000 
  5 AWU        002681 R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000C 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   5 BIT        002679 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BIT_IDX =  00000E     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000B 
  5 BRES       002670 R   |     BRES_IDX=  000010     |     BS      =  000008 
    BSAVE   =  000001     |   5 BSET       002667 R   |     BSET_IDX=  000012 
    BSIZE   =  000001     |   5 BTEST      00265D R   |     BTEST_ID=  000014 
  5 BTOGL      002653 R   |     BTOGL_ID=  000016     |     BTW     =  000001 
  5 BYE        00264B R   |     BYE_IDX =  000018     |     C       =  000001 
    CAN     =  000018     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       002642 R   |     CHAR_IDX=  00001A     |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        00263A R
    CRH_IDX =  00001C     |   5 CRL        002632 R   |     CRL_IDX =  00001E 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   5 DATA       002629 R
  5 DATALN     00261E R   |     DATALN_I=  000022     |     DATA_IDX=  000020 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   5 DDR        002616 R   |     DDR_IDX =  000024 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   5 DEC        00260E R   |     DEC_IDX =  000026 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        002606 R   |     DIR_IDX =  000028     |     DIVDNDHI=  00000B 
    DIVDNDLO=  00000D     |     DIVISOR =  000001     |     DIVISR  =  000007 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   5 DO         0025FF R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  00002A     |   5 DREAD      0025F5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    DREAD_ID=  00002C     |   5 DWRITE     0025EA R   |     DWRITE_I=  00002E 
  5 EEPROM     0025D7 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  000032     |     EEPROM_S=  000800     |     EM      =  000019 
  5 END        0025E2 R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |     ERR_BAD_=  00000A 
    ERR_BUF_=  00000F     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_F=  00000E     |     ERR_NO_L=  000005 
    ERR_NO_P=  00000D     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FAUTORUN=  000006 
    FBREAK  =  000004     |     FCOMP   =  000005     |   5 FCPU       0025CE R
    FCPU_IDX=  000034     |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   5 FOR        0025C6 R
  5 FORGET     0025BB R   |     FORGET_I=  000038     |     FOR_IDX =  000036 
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      0025B1 R   |     GOSUB_ID=  00003A 
  5 GOTO       0025A8 R   |     GOTO_IDX=  00003C     |   5 GPIO       00259F R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003E 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        002597 R   |     HEX_IDX =  000040     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        00258F R   |     IDR_IDX =  000042     |   5 IF         002588 R
    IF_IDX  =  000044     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      00257E R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000046 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   5 INVERT     002573 R
    INVERT_I=  000048     |     INW     =  000009     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   5 IWDGEN     002568 R   |     IWDGEN_I=  00004A 
  5 IWDGREF    00255C R   |     IWDGREF_=  00004C     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        002554 R
    KEY_IDX =  00004E     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   5 LET        00254C R   |     LET_IDX =  000050 
    LF      =  00000A     |     LIMIT   =  000005     |     LINENO  =  000005 
  5 LINK    =  0026BB R   |   5 LIST       002543 R   |     LIST_IDX=  000052 
    LL      =  000001     |     LLEN    =  000002     |     LN_PTR  =  000005 
  5 LOAD       00253A R   |     LOAD_IDX=  000054     |   5 LOG        002532 R
    LOG_IDX =  000056     |   5 LSHIFT     002527 R   |     LSHIFT_I=  000058 
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |   5 MULDIV     00251C R
    MULDIV_I=  00005A     |     MULOP   =  000003     |     N1      =  000001 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        00250B R
    NEW_FREE=  000001     |     NEW_IDX =  00005E     |   5 NEXT       002513 R
    NEXT_IDX=  00005C     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

  5 NOT        002503 R   |     NOT_IDX =  000060     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R
  5 ODR        0024FB R   |     ODR_IDX =  000062     |     ONOFF   =  000003 
    OP      =  000003     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   5 OR         0024F4 R
    OR_IDX  =  000064     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
  5 PAD        0024EC R   |     PAD_IDX =  000066     |     PAD_SIZE=  000080 
  5 PAUSE      0024E2 R   |     PAUSE_ID=  000068     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       0024CF R   |     PEEK_IDX=  00006C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   5 PINP       0024C6 R   |     PINP_IDX=  00006E 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   5 PMODE      0024D8 R   |     PMODE_ID=  00006A 
  5 POKE       0024BD R   |     POKE_IDX=  000070     |     PORT    =  000003 
  5 POUT       0024B4 R   |     POUT_IDX=  000072     |     PREV    =  000001 
  5 PRINT      0024AA R   |   5 PRTA       0024A1 R   |     PRTA_IDX=  000076 
  5 PRTB       002498 R   |     PRTB_IDX=  000078     |   5 PRTC       00248F R
    PRTC_IDX=  00007A     |   5 PRTD       002486 R   |     PRTD_IDX=  00007C 
  5 PRTE       00247D R   |     PRTE_IDX=  00007E     |   5 PRTF       002474 R
    PRTF_IDX=  000080     |   5 PRTG       00246B R   |     PRTG_IDX=  000082 
  5 PRTH       002462 R   |     PRTH_IDX=  000084     |   5 PRTI       002459 R
    PRTI_IDX=  000086     |     PRT_IDX =  000074     |     PSTR    =  000003 
  5 QKEY       002450 R   |     QKEY_IDX=  000088     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |     RBT_IDX =  00008C 
  5 READ       002447 R   |     READ_IDX=  00008A     |   5 REBOOT     00243C R
    REG     =  000001     |     RELOP   =  000003     |   5 REMARK     002431 R
    REM_IDX =  00008E     |   5 RESTORE    002425 R   |     REST_IDX=  000090 
    RETL1   =  000001     |   5 RETURN     00241A R   |     RET_ADDR=  000003 
    RET_IDX =  000092     |     RET_INW =  000005     |   5 RND        002412 R
    RND_IDX =  000094     |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     002407 R   |     RSHIFT_I=  000096     |     RST_SR  =  0050B3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

  5 RUN        0023FF R   |     RUN_IDX =  000098     |     RX_QUEUE=  000008 
  5 SAVE       0023F6 R   |     SAVE_IDX=  00009A     |     SDIVSR  =  000005 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       0023ED R   |     SHOW_IDX=  00009C     |     SI      =  00000F 
    SIGN    =  000001     |   5 SIZE       0023E4 R   |     SIZE_IDX=  00009E 
    SKIP    =  000005     |   5 SLEEP      0023DA R   |     SLEEP_ID=  0000A0 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      0023C6 R   |     SPIEN_ID=  0000A4     |   5 SPIRD      0023D0 R
    SPIRD_ID=  0000A2     |   5 SPISEL     0023BB R   |     SPISEL_I=  0000A6 
  5 SPIWR      0023B1 R   |     SPIWR_ID=  0000A8     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SQUOT   =  000006     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  0000A0     |   5 STEP       0023A8 R
    STEP_IDX=  0000AA     |   5 STOP       00239F R   |     STOP_IDX=  0000AC 
    STR     =  000003     |     STX     =  000002     |     SUB     =  00001A 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      002395 R   |     TICKS_ID=  0000AE     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    00237F R   |   5 TIMER      00238B R   |     TIMER_ID=  0000B0 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000006 
    TK_CFUNC=  000082     |     TK_CHAR =  000003     |     TK_CMD  =  000080 
    TK_COLON=  000001     |     TK_COMMA=  000009     |     TK_CONST=  000083 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LE   =  000036 
    TK_LPARE=  000007     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000008     |     TK_SHARP=  00000A     |     TK_VAR  =  000085 
    TMROUT_I=  0000B2     |   5 TO         002378 R   |   5 TONE       00236F R
    TONE_IDX=  0000B6     |     TO_IDX  =  0000B4     |   5 Timer4Up   00004F R
    U1      =  000001     |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     002364 R   |     UBOUND_I=  0000B8 
  5 UBTN_Han   000092 R   |   5 UFLASH     002359 R   |     UFLASH_I=  0000BA 
  5 UNTIL      00234F R   |     UNTIL_ID=  0000BC     |     US      =  00001F 
  5 USER_ABO   00009A R   |   5 USR        002347 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     USR_IDX =  0000BE 
  5 Uart1RxH   00000F R   |   5 UserButt   000065 R   |     VAR_ADDR=  000006 
    VSIZ    =  000002     |     VSIZE   =  000006     |     VT      =  00000B 
  5 WAIT       00233E R   |     WAIT_IDX=  0000C0     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      002334 R   |     WORDS_ID=  0000C2 
  5 WRITE      00232A R   |     WRITE_ID=  0000C4     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        002322 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    XOR_IDX =  0000C6     |     XREG    =  000003     |     XSAVE   =  000005 
    YSAVE   =  000007     |   5 abs        001E62 R   |   1 acc16      00000C GR
  1 acc24      00000B GR  |   1 acc8       00000D GR  |   5 add_char   0014BE R
  5 add_spac   0012E8 R   |   5 analog_r   0018D4 R   |   5 arduino_   001F4D R
  5 arg_list   001018 R   |   1 array_si   000021 R   |   5 ascii      001D0F R
  5 at_tst     000CAA R   |   5 atoi24     000DBB GR  |   5 atoi_exi   000E21 R
  5 autorun    001D9A R   |   5 autorun_   0006D0 R   |   5 awu        001E13 R
  5 awu02      001E1D R   |   5 bad_port   001D69 R   |   1 base       00000A R
  1 basicptr   000004 GR  |   5 beep       001861 R   |   5 beep_1kh   00184B GR
  5 bin_exit   000B88 R   |   5 bit_and    001E76 R   |   5 bit_or     001E8E R
  5 bit_rese   001636 R   |   5 bit_set    001626 R   |   5 bit_test   001657 R
  5 bit_togg   001647 R   |   5 bit_xor    001EA6 R   |   5 bitmask    0020B9 R
  5 bkslsh_t   000C57 R   |   5 block_er   0001BB R   |   5 break_po   0019A1 R
  5 bye        001D91 R   |   5 cancel_a   000698 R   |   5 char       001CFD R
  5 clear_ba   0006E5 R   |   5 clear_va   00055F R   |   5 clock_in   0000B5 R
  5 cmd_end    001844 R   |   5 cmd_line   000903 R   |   5 cmd_name   000F87 R
  5 cmp_name   001A42 R   |   5 code_add   0026C1 R   |   5 cold_sta   0005D6 R
  5 colon_ts   000C7E R   |   5 comma_ts   000C89 R   |   5 comp_msg   000859 R
  5 compile    0004EC R   |   5 const_cr   00216D R   |   5 const_cr   002173 R
  5 const_dd   002167 R   |   5 const_ee   002185 R   |   5 const_id   002161 R
  5 const_in   00217F R   |   5 const_od   00215B R   |   5 const_ou   002179 R
  5 const_po   002125 R   |   5 const_po   00212B R   |   5 const_po   002131 R
  5 const_po   002137 R   |   5 const_po   00213D R   |   5 const_po   002143 R
  5 const_po   002149 R   |   5 const_po   00214F R   |   5 const_po   002155 R
  5 convert_   000AFF R   |   5 copy_com   000CDF R   |   1 count      000003 GR
  5 cp_loop    000FC7 R   |   5 cpy_cmd_   0012D3 R   |   5 cpy_quot   00130C R
  5 create_g   000453 R   |   5 cs_high    002315 R   |   5 cstk_pro   0011CF R
  5 dash_tst   000C9F R   |   5 data       00218B R   |   1 data_len   000009 R
  5 data_lin   002191 R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   0021D1 R   |   5 dbl_sign   000EEF R   |   5 dec_base   0011FB R
  5 decomp_l   0013BD R   |   5 decompil   001376 GR  |   5 del_line   000426 R
  5 digital_   001908 R   |   5 digital_   001938 R   |   5 dir_loop   001C50 R
  5 director   001C44 R   |   5 disk_fre   001A2F R   |   5 div32_16   000EF9 R
  5 divide     000F50 R   |   5 divu24_8   000A42 R   |   5 dneg       000EE4 R
  5 do_loop    0020E2 R   |   5 do_progr   0001AE R   |   5 drive_fr   001CB9 R
  5 enable_i   002063 R   |   5 eql_tst    000D34 R   |   5 equal      0014D1 R
  5 erase_fl   0001DA R   |   5 err_bad_   0007C5 R   |   5 err_buf_   00083B R
  5 err_cmd_   000789 R   |   5 err_div0   00074E R   |   5 err_dupl   0007A3 R
  5 err_math   000735 R   |   5 err_mem_   00071A R   |   5 err_msg    0006FA R
  5 err_no_a   0007D1 R   |   5 err_no_d   000804 R   |   5 err_no_f   000828 R
  5 err_no_l   00075D R   |   5 err_no_p   000814 R   |   5 err_not_   0007B4 R
  5 err_run_   000773 R   |   5 err_synt   000727 R   |   5 escaped    000B14 R
  5 expect     001006 R   |   5 expr_exi   001157 R   |   5 expressi   001111 R
  5 factor     001068 R   |   1 farptr     000016 R   |   5 fcpu       001EF0 R
  7 fdrive     010000 R   |   1 ffree      000019 R   |   5 file_cou   001CB1 R
  5 first_li   001280 R   |   1 flags      000023 R   |   5 for        0016B2 R
  5 forget     001BDD R   |   1 free_ram   000063 R   |   5 func_arg   001013 R
  5 func_not   002056 R   |   5 ge         0014D3 R   |   5 get_arra   001043 R
  5 get_cmd_   001355 R   |   5 get_targ   00177C R   |   5 get_tick   001E5C R
  5 get_toke   000BF0 R   |   5 getc       0002C9 GR  |   5 gosub      0017AD R
  5 goto       001792 R   |   5 gpio       001D44 R   |   5 gt         0014CF R
  5 gt_tst     000D3F R   |   5 hex_base   0011F6 R   |   5 hex_dump   000359 R
  5 if         00169E R   |   1 in         000001 R   |   1 in.saved   000002 R
  1 in.w       000000 R   |   5 incr_far   0019EF R   |   5 input_ex   0015F8 R
  5 input_lo   001591 R   |   5 input_va   00158F R   |   5 insert_l   00047F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

  5 insert_l   0004E9 R   |   5 interp_l   000944 R   |   5 interpre   00091F R
  5 invert     0020D3 R   |   5 is_alnum   000587 R   |   5 is_alpha   00056D R
  5 is_digit   00057E R   |   5 itoa       0009E8 R   |   5 itoa_loo   000A07 R
  5 jp_to_ta   0017A0 R   |   5 key        001D2F R   |   5 kw_loop    000BA4 R
  5 kword_di   0026B9 R   |   5 kword_en   002320 R   |   5 le         0014D8 R
  5 leading_   0020A9 R   |   5 let        00122C R   |   5 let_arra   00123A R
  5 let_var    00123D R   |   5 lines_sk   001283 R   |   5 list       001257 R
  5 list_exi   0012C5 R   |   5 list_loo   0012A3 R   |   5 load       001BAD R
  5 load_aut   0006A7 R   |   5 load_fil   001B7C R   |   5 log2       00209E R
  5 logical_   00204C R   |   5 long_div   000ECC R   |   5 loop_bac   00175F R
  1 loop_dep   000020 R   |   5 loop_don   001774 R   |   5 lshift     001EBE R
  5 lt         0014D6 R   |   5 lt_tst     000D68 R   |   5 modulo     000F66 R
  5 move       0003C0 GR  |   5 move_dow   0003DE R   |   5 move_era   000140 R
  5 move_exi   0003FF R   |   5 move_loo   0003E3 R   |   5 move_prg   000174 R
  5 move_up    0003D0 R   |   5 mul_char   0014C0 R   |   5 muldiv     000F6B R
  5 multiply   000E97 R   |   5 mulu24_8   000A6A R   |   5 nbr_tst    000C23 R
  5 ne         0014DB R   |   5 neg_acc2   000AA4 R   |   5 new        0019BF R
  5 next       001732 R   |   5 next_lin   000927 R   |   5 next_tok   00096B R
  5 no_match   000FD9 R   |   5 other      000D91 R   |   3 pad        0016E0 R
  5 pad_ref    00231A R   |   5 parse_bi   000B66 R   |   5 parse_in   000B1C R
  5 parse_ke   000BA3 R   |   5 parse_qu   000AC7 R   |   5 pause      001E00 R
  5 pause02    001E0A R   |   5 peek       00168D R   |   5 pin_mode   001EFC R
  5 plus_tst   000D08 R   |   5 poke       00167E R   |   5 power_ad   001898 R
  5 prcnt_ts   000D29 R   |   5 print      0014FE R   |   5 print_ex   001563 R
  5 print_in   0009CC R   |   5 printxy    000E38 R   |   5 program_   000154 R
  5 program_   000174 R   |   5 prt_basi   0014DE R   |   5 prt_loop   001502 R
  5 prt_tok    0002EB R   |   5 prti24     0009DC R   |   1 ptr16      000017 R
  1 ptr8       000018 R   |   5 putc       0002C0 GR  |     puts       ****** GX
  5 qkey       001D37 GR  |   5 qmark_ts   000CB5 R   |   5 random     001F6D R
  5 read       002209 R   |   5 read01     00220B R   |     readln     ****** GX
  5 refresh_   002099 R   |   5 rel_exit   0011B2 R   |   5 relation   00115A R
  5 relop_st   0014C3 R   |   5 remark     0015FB R   |   5 reset_co   001500 R
  5 rest_con   00157F R   |   5 restore    0021BE R   |   5 return     0017CD R
  5 right_al   0012FA R   |   5 row_alig   0019D4 R   |   5 row_eras   000119 R
  5 row_eras   000140 R   |   5 row_loop   00033C R   |   5 rparnt_t   000C73 R
  5 rshift     001ED7 R   |   5 rt_msg     000848 R   |   5 run        0017EB R
  5 run_it     00181D R   |   1 rx_head    00002D R   |   1 rx_queue   000025 R
  1 rx_tail    00002E R   |   5 save       001AB0 R   |   5 save_con   00156F R
  5 search_d   000FB9 R   |   5 search_e   001003 R   |   5 search_f   001A63 R
  5 search_l   000402 GR  |   5 search_l   00040A R   |   5 search_n   000FBD R
  1 seedx      000012 R   |   1 seedy      000014 R   |   5 seek_fdr   0019FD R
  5 select_p   001F3D R   |   5 set_time   00203A R   |   5 sharp_ts   000C94 R
  5 show       0011B5 R   |   5 show_row   00032A R   |   5 single_c   0014B9 R
  5 size       001200 R   |   5 skip       000E25 R   |   5 slash_ts   000D1E R
  5 sleep      001DF5 R   |   5 software   000590 R   |     spaces     ****** GX
  5 spi_clea   0022AE R   |   5 spi_disa   002296 R   |   5 spi_enab   002263 R
  5 spi_rcv_   0022D0 R   |   5 spi_read   0022FB R   |   5 spi_sele   002303 R
  5 spi_send   0022BA R   |   5 spi_writ   0022DB R   |   3 stack_fu   001760 R
  3 stack_un   001800 R   |   5 star_tst   000D13 R   |   5 step       00170B R
  5 stop       001973 R   |   5 store_lo   00171F R   |   5 str_matc   000FE6 R
  5 str_tst    000C13 R   |   5 strcmp     0003A1 R   |   5 strcpy     0003B2 R
  5 strlen     000396 GR  |   5 syntax_e   000879 R   |   1 tab_widt   000024 R
  5 tb_error   00087B R   |   5 term       0010C2 R   |   5 term01     0010CB R
  5 term_exi   00110E R   |   3 tib        001690 GR  |   5 tick_tst   000CCD R
  1 ticks      00000E R   |   5 timeout    002049 R   |   1 timer      000010 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

  5 timer2_i   0000CB R   |   5 timer4_i   0000D8 R   |   5 tk_id      000869 R
  5 to         0016DB R   |   5 to_eepro   000197 R   |   5 to_flash   0001AB R
  5 to_upper   000DAF GR  |   5 token_ch   000DA8 R   |   5 token_ex   000DAC R
  5 token_ms   000322 R   |   5 tone       001854 R   |   5 try_next   0021F9 R
  1 txtbgn     00001C R   |   1 txtend     00001E R   |   5 uart1_in   00027D R
  5 uart1_se   00028D R   |   5 ubound     00120A R   |   5 udiv32_1   000EBA R
  5 uflash     001D6E R   |   5 umstar     000E5D R   |   5 unlock_e   0000ED R
  5 unlock_f   000103 R   |   5 until      0020F7 R   |   5 user_int   000078 R
  5 user_spa   002800 R   |   5 usr        001D74 R   |   5 var_name   00134D R
  1 vars       00002F R   |   5 wait       001601 R   |   5 warm_ini   00067A R
  5 warm_sta   000900 R   |   5 words      001FD4 R   |   5 words_co   002024 R
  5 write      001CC6 R   |   5 write_bl   00025A R   |   5 write_by   0001E5 R
  5 write_ee   000221 R   |   5 write_ex   000255 R   |   5 write_fl   00020B R
  5 write_ro   000188 R   |   5 zero_pad   0019C9 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     63   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   280E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

