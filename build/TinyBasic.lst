ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                                    144 
                                    145 ;--------------------------------------
                                    146 ;   assembler flags 
                                    147 ;-------------------------------------
                                    148 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    149 
                                    150      .macro _usec_dly n 
                                    151     ldw x,#(16*n-2)/4
                                    152     decw x
                                    153     nop 
                                    154     jrne .-4
                                    155     .endm 
                                    156     
                                    157     ; load X register with 
                                    158     ; entry point of dictionary
                                    159     ; before calling 'search_dict'
                                    160     .macro _ldx_dict dict_name
                                    161     ldw x,#dict_name+2
                                    162     .endm 
                                    163 
                                    164     ; reset BASIC pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; to beginning of last token
                                    166     ; extracted except if it was end of line 
                                    167     .macro _unget_token 
                                    168      mov in,in.saved  
                                    169     .endm
                                    170 
                                    171 
                                    172     ; extract code address for 
                                    173     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    174     .macro _get_code_addr
                                    175         ldw x,(x)
                                    176         inc in 
                                    177         inc in 
                                    178     .endm 
                                    179 
                                    180 
                                    181 
                                    182 ;---------------------------------------
                                    183 ;    xtack manipulation macros 
                                    184 ;    Y is used as xstack pointer  
                                    185 ;----------------------------------------
                                    186     ; pop in A:X from XSTACK 
                                    187     .macro _xpop 
                                    188     ld a,(y)
                                    189     ldw x,y 
                                    190     ldw x,(1,x)
                                    191     addw y,#CELL_SIZE 
                                    192     .endm 
                                    193 
                                    194     ; push A:X  to XSTACK 
                                    195     .macro _xpush 
                                    196     subw y,#CELL_SIZE
                                    197     ld (y),a 
                                    198     ldw (1,y),x 
                                    199     .endm 
                                    200 
                                    201     ; drop from XSTACK 
                                    202     .macro _xdrop 
                                    203     addw y,#CELL_SIZE 
                                    204     .endm 
                                    205 
                                    206     ; @T fetch top xstack 
                                    207     .macro _at_top
                                    208     ld a,(y)
                                    209     ldw x,y 
                                    210     ldw x,(1,x)
                                    211     .endm 
                                    212 
                                    213     ; @N  fetch next on xstack 
                                    214     .macro _at_next 
                                    215     ld a,(3,y)
                                    216     ldw x,y 
                                    217     ldw x,(4,x)
                                    218     .endm 
                                    219 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ; !T put on top of xtack 
                                    221     .macro _store_top 
                                    222     ld (y),a 
                                    223     ldw (1,y),x     
                                    224     .endm 
                                    225 
                                    226     ; !N put next on xstack 
                                    227     .macro _store_next 
                                    228     ld (3,y),a 
                                    229     ldw (4,y),x 
                                    230     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001690                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         45 xstack_unf:: ; xstack underflow 
      00179C                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 6B             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 3A         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 16 C4         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 98         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1C D4         [ 4]  270 	call func_eefree 
      000113 CD 1C 75         [ 4]  271 	call ubound 
      000116 CD 14 70         [ 4]  272 	call clear_basic
      000119 CD 25 5D         [ 4]  273 	call beep_1khz  
      00011C CD 14 1D         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for application in flash memory 
      00011F AE 36 80         [ 2]  277 	ldw x,#app_space
      000122 CD 27 ED         [ 4]  278 	call qsign 
      000125 27 03            [ 1]  279 	jreq run_app
      000127 CC 16 C4         [ 2]  280 	jp warm_start 
      00012A                        281 run_app:
                                    282 ; run application in FLASH|EEPROM 
      00012A 90 CE 17 73      [ 2]  283 	ldw y,XSTACK_EMPTY
      00012E CD 14 4E         [ 4]  284 	call warm_init
      000131 AE 36 84         [ 2]  285 	ldw x,#app 
      000134 CF 00 1B         [ 2]  286 	ldw txtbgn,x
      000137 72 BB 36 82      [ 2]  287 	addw x,app_size 
      00013B CF 00 1D         [ 2]  288 	ldw txtend,x 
      00013E AE 01 4C         [ 2]  289 	ldw x,#AUTO_RUN 
      000141 CD 09 3A         [ 4]  290 	call puts 
      000144 CD 1D F6         [ 4]  291 	call program_info 
      000147 CC 24 F8         [ 2]  292 	jp run_it_02  
      00014A 20 FE            [ 2]  293     jra .  
                                    294 
      00014C 20 61 75 74 6F 20 72   295 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    296 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00015F                         37 dup24:
      00015F                         38     _at_top 
      00015F 90 F6            [ 1]    1     ld a,(y)
      000161 93               [ 1]    2     ldw x,y 
      000162 EE 01            [ 2]    3     ldw x,(1,x)
      000164                         39     _xpush 
      000164 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000168 90 F7            [ 1]    2     ld (y),a 
      00016A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00016D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00016E                         48 add24: ; ( N T -- N+T )
      00016E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00016E 90 F6            [ 1]    1     ld a,(y)
      000170 93               [ 1]    2     ldw x,y 
      000171 EE 01            [ 2]    3     ldw x,(1,x)
      000173 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000177 89               [ 2]   50     pushw x  
      000178 88               [ 1]   51     push a  
      000179                         52     _at_top  
      000179 90 F6            [ 1]    1     ld a,(y)
      00017B 93               [ 1]    2     ldw x,y 
      00017C EE 01            [ 2]    3     ldw x,(1,x)
      00017E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000181 19 01            [ 1]   54     adc a, (1,sp)
      000183                         55     _store_top 
      000183 90 F7            [ 1]    1     ld (y),a 
      000185 90 EF 01         [ 2]    2     ldw (1,y),x     
      000188                         56     _drop 3 
      000188 5B 03            [ 2]    1     addw sp,#3 
      00018A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00018B                         63 sub24: ; ( N T -- N-T ) 
      00018B                         64     _xpop 
      00018B 90 F6            [ 1]    1     ld a,(y)
      00018D 93               [ 1]    2     ldw x,y 
      00018E EE 01            [ 2]    3     ldw x,(1,x)
      000190 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000194 89               [ 2]   65     pushw x 
      000195 88               [ 1]   66     push  a
      000196                         67     _at_top  
      000196 90 F6            [ 1]    1     ld a,(y)
      000198 93               [ 1]    2     ldw x,y 
      000199 EE 01            [ 2]    3     ldw x,(1,x)
      00019B 72 F0 02         [ 2]   68     subw x,(2,sp) 
      00019E 12 01            [ 1]   69     sbc a, (1,sp)
      0001A0                         70     _store_top  
      0001A0 90 F7            [ 1]    1     ld (y),a 
      0001A2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A5                         71     _drop 3 
      0001A5 5B 03            [ 2]    1     addw sp,#3 
      0001A7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001A8                         77 cp24:
      0001A8                         78     _xpop 
      0001A8 90 F6            [ 1]    1     ld a,(y)
      0001AA 93               [ 1]    2     ldw x,y 
      0001AB EE 01            [ 2]    3     ldw x,(1,x)
      0001AD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001B1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001B4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0001B7                         81     _at_top 
      0001B7 90 F6            [ 1]    1     ld a,(y)
      0001B9 93               [ 1]    2     ldw x,y 
      0001BA EE 01            [ 2]    3     ldw x,(1,x)
      0001BC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001C0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001C3 2F 08            [ 1]   84     jrslt 1$
      0001C5 26 0A            [ 1]   85     jrne 2$
      0001C7 5D               [ 2]   86     tnzw x 
      0001C8 26 07            [ 1]   87     jrne 2$
      0001CA 4F               [ 1]   88     clr a 
      0001CB 20 06            [ 2]   89     jra 9$ 
      0001CD                         90 1$: ; i1 < i2 
      0001CD A6 FF            [ 1]   91     ld a,#255
      0001CF 20 02            [ 2]   92     jra 9$ 
      0001D1                         93 2$: ; i1 > i2 
      0001D1 A6 01            [ 1]   94     ld a,#1 
      0001D3 5F               [ 1]   95 9$: clrw x
      0001D4                         96      _store_top 
      0001D4 90 F7            [ 1]    1     ld (y),a 
      0001D6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001DA                        103 cp24_ax:
      0001DA 88               [ 1]  104     push a 
      0001DB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001DE C2 00 0C         [ 1]  106     sbc a,acc24
      0001E1 84               [ 1]  107     pop a 
      0001E2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001E3                        115 abs24: ; ( i -- u )
      0001E3 90 F6            [ 1]  116     ld a,(y)
      0001E5 A1 80            [ 1]  117     cp a,#0x80 
      0001E7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001E9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001EA                        124 cpl24:  ; i -- ~i 
      0001EA 90 73            [ 1]  125     cpl (y) 
      0001EC 90 63 01         [ 1]  126     cpl (1,y)
      0001EF 90 63 02         [ 1]  127     cpl (2,y)
      0001F2 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001F3                        133 neg24: ; (i -- -i )
      0001F3                        134     _at_top
      0001F3 90 F6            [ 1]    1     ld a,(y)
      0001F5 93               [ 1]    2     ldw x,y 
      0001F6 EE 01            [ 2]    3     ldw x,(1,x)
      0001F8 43               [ 1]  135     cpl  a  
      0001F9 53               [ 2]  136     cplw x 
      0001FA 1C 00 01         [ 2]  137     addw x,#1
      0001FD A9 00            [ 1]  138     adc a,#0
      0001FF                        139     _store_top  
      0001FF 90 F7            [ 1]    1     ld (y),a 
      000201 90 EF 01         [ 2]    2     ldw (1,y),x     
      000204 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000205                        145 neg_ax:
      000205 43               [ 1]  146     cpl  a  
      000206 53               [ 2]  147     cplw x 
      000207 1C 00 01         [ 2]  148     addw x,#1
      00020A A9 00            [ 1]  149     adc a,#0
      00020C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00020D                        155 neg_acc24: ; 
      00020D 72 53 00 0C      [ 1]  156     cpl acc24 
      000211 72 53 00 0D      [ 1]  157     cpl acc16 
      000215 72 53 00 0E      [ 1]  158     cpl acc8
      000219 72 5C 00 0E      [ 1]  159     inc acc8 
      00021D 26 0A            [ 1]  160     jrne 9$
      00021F 72 5C 00 0D      [ 1]  161     inc acc16 
      000223 26 04            [ 1]  162     jrne 9$
      000225 72 5C 00 0C      [ 1]  163     inc acc24 
      000229 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00022A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      00022A 88               [ 1]  181     push a 
      00022B 72 5F 00 0B      [ 1]  182 	clr acc32
      00022F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000233 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000236 97               [ 1]  186     ld xl,a 
      000237 7B 01            [ 1]  187     ld a,(U8,sp)
      000239 42               [ 4]  188     mul x,a 
      00023A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00023D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000240 97               [ 1]  192     ld xl,a 
      000241 7B 01            [ 1]  193     ld a,(U8,sp) 
      000243 42               [ 4]  194     mul x,a 
      000244 72 BB 00 0C      [ 2]  195     addw x,acc24
      000248 72 59 00 0B      [ 1]  196     rlc acc32 
      00024C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00024F 90 F6            [ 1]  199     ld a,(Y)
      000251 97               [ 1]  200     ld xl,a 
      000252 7B 01            [ 1]  201     ld a,(U8,sp)
      000254 42               [ 4]  202     mul x,a 
      000255 72 BB 00 0B      [ 2]  203     addw x,acc32
      000259 02               [ 1]  204     rlwa x 
      00025A 4D               [ 1]  205     tnz a 
      00025B 27 05            [ 1]  206     jreq 1$
      00025D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00025F CC 16 3A         [ 2]  208     jp tb_error 
      000262                        209 1$:
      000262 9E               [ 1]  210     ld a,xh  
      000263 CE 00 0D         [ 2]  211     ldw x,acc16   
      000266                        212     _drop VSIZE 
      000266 5B 01            [ 2]    1     addw sp,#VSIZE 
      000268 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000269                        224 mul24:
      000269                        225     _vars VSIZE
      000269 52 07            [ 2]    1     sub sp,#VSIZE 
      00026B 5F               [ 1]  226     clrw x 
      00026C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00026E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000270                        229     _xpop 
      000270 90 F6            [ 1]    1     ld a,(y)
      000272 93               [ 1]    2     ldw x,y 
      000273 EE 01            [ 2]    3     ldw x,(1,x)
      000275 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000279 4D               [ 1]  230     tnz a 
      00027A 2A 05            [ 1]  231     jrpl 0$
      00027C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00027E CD 02 05         [ 4]  233     call neg_ax 
      000281                        234 0$:    
      000281 6B 05            [ 1]  235     ld (N1,sp),a 
      000283 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000285 90 7D            [ 1]  237     tnz (Y)
      000287 2A 05            [ 1]  238     jrpl 2$ 
      000289 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00028B CD 01 F3         [ 4]  240     call neg24
      00028E                        241 2$: 
      00028E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      000290 27 0A            [ 1]  243     jreq 4$
      000292 CD 02 2A         [ 4]  244     call mulu24_8
      000295 4D               [ 1]  245     tnz a 
      000296 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      000298 6B 01            [ 1]  247     ld (PROD,sp),a
      00029A 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      00029C                        249 4$:
      00029C 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      00029E 27 0D            [ 1]  251     jreq 5$
      0002A0 CD 02 2A         [ 4]  252     call mulu24_8
      0002A3 4D               [ 1]  253     tnz a 
      0002A4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002A6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002A9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002AB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002AD                        258 5$:
      0002AD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002AF 27 10            [ 1]  260     jreq 6$
      0002B1 CD 02 2A         [ 4]  261     call mulu24_8
      0002B4 01               [ 1]  262     rrwa x 
      0002B5 5D               [ 2]  263     tnzw x 
      0002B6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002B8 4D               [ 1]  265     tnz a 
      0002B9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002BB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002BD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002BF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002C1                        270 6$:
      0002C1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002C3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002C5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002C7 27 03            [ 1]  274     jreq 9$
      0002C9 CD 02 05         [ 4]  275     call neg_ax 
      0002CC                        276 9$:
      0002CC                        277     _store_top 
      0002CC 90 F7            [ 1]    1     ld (y),a 
      0002CE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002D1                        278     _drop VSIZE 
      0002D1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002D3 81               [ 4]  279     ret 
      0002D4                        280 8$: ; overflow
      0002D4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0002D6 CC 16 3A         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002D9                        296 divu24_8:
      0002D9 89               [ 2]  297 	pushw x ; save x
      0002DA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002DB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002DE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002E0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002E1 88               [ 1]  303 	push a  ;save remainder
      0002E2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002E5 84               [ 1]  305 	pop a
      0002E6 95               [ 1]  306 	ld xh,a
      0002E7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002EA 97               [ 1]  308 	ld xl,a
      0002EB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002ED 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002EE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002F0 9F               [ 1]  312 	ld a,xl
      0002F1 C7 00 0E         [ 1]  313 	ld acc8,a
      0002F4 84               [ 1]  314 	pop a
      0002F5 85               [ 2]  315 	popw x
      0002F6 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      0002F7                        332 div24:
      0002F7                        333     _vars VSIZE 
      0002F7 52 06            [ 2]    1     sub sp,#VSIZE 
      0002F9 0F 06            [ 1]  334     clr (RSIGN,sp)
      0002FB 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002FD                        336     _xpop 
      0002FD 90 F6            [ 1]    1     ld a,(y)
      0002FF 93               [ 1]    2     ldw x,y 
      000300 EE 01            [ 2]    3     ldw x,(1,x)
      000302 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000306 4D               [ 1]  337     tnz a 
      000307 2A 05            [ 1]  338     jrpl 0$ 
      000309 03 05            [ 1]  339     cpl (QSIGN,sp)
      00030B CD 02 05         [ 4]  340     call neg_ax
      00030E                        341 0$:
      00030E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000310 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000312 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000314 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000316 26 05            [ 1]  346     jrne 1$ 
      000318 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00031A CC 16 3A         [ 2]  348     jp tb_error 
      00031D                        349 1$: ; dividend  
      00031D                        350     _at_top
      00031D 90 F6            [ 1]    1     ld a,(y)
      00031F 93               [ 1]    2     ldw x,y 
      000320 EE 01            [ 2]    3     ldw x,(1,x)
      000322 4D               [ 1]  351     tnz a 
      000323 2A 07            [ 1]  352     jrpl 2$
      000325 CD 02 05         [ 4]  353     call neg_ax
      000328 03 05            [ 1]  354     cpl (QSIGN,sp)
      00032A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00032C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00032C                        359     _store_top 
      00032C 90 F7            [ 1]    1     ld (y),a 
      00032E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000331 A6 18            [ 1]  360     ld a,#24 
      000333 6B 04            [ 1]  361     ld (CNTR,sp),a
      000335 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000337 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000339 CD 01 DA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00033C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00033E C6 00 0C         [ 1]  368     ld a,acc24 
      000341 CE 00 0D         [ 2]  369     ldw x,acc16 
      000344 72 5F 00 0C      [ 1]  370     clr acc24 
      000348 72 5F 00 0D      [ 1]  371     clr acc16 
      00034C 72 5F 00 0E      [ 1]  372     clr acc8 
      000350 20 26            [ 2]  373     jra 6$
      000352                        374 22$:     
      000352 4F               [ 1]  375     clr a 
      000353 5F               [ 1]  376     clrw x 
      000354 98               [ 1]  377     rcf  
      000355                        378 3$: ; shift carry in acc24 bit 0 
      000355 90 69 02         [ 1]  379     rlc (2,y) 
      000358 90 69 01         [ 1]  380     rlc (1,y)
      00035B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00035D 59               [ 2]  382     rlcw x  
      00035E 49               [ 1]  383     rlc a
      00035F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000362 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000364 24 05            [ 1]  386     jrnc 5$
      000366 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000369 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00036B                        389 5$: ; shift carry in QUOTIENT 
      00036B 8C               [ 1]  390     ccf
      00036C 0A 04            [ 1]  391     dec (CNTR,sp)
      00036E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000370 90 69 02         [ 1]  394     rlc (2,y)
      000373 90 69 01         [ 1]  395     rlc (1,y) 
      000376 90 79            [ 1]  396     rlc (y) 
      000378                        397 6$:    
      000378 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00037A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00037C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00037E 27 03            [ 1]  401     jreq 8$
      000380 CD 01 F3         [ 4]  402     call neg24
      000383                        403 8$: 
      000383 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000385 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000387                        406 81$:
      000387 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000389 27 03            [ 1]  408     jreq 9$
      00038B CD 02 05         [ 4]  409     call neg_ax       
      00038E                        410 9$: _drop VSIZE 
      00038E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000390 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      000391                        423 mod24:
      000391 CD 02 F7         [ 4]  424     call div24 
      000394                        425     _store_top  ; replace quotient by remainder 
      000394 90 F7            [ 1]    1     ld (y),a 
      000396 90 EF 01         [ 2]    2     ldw (1,y),x     
      000399 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      00039A                         48 prt_peek::
      00039A 89               [ 2]   49 	pushw x 
      00039B 35 10 00 0A      [ 1]   50 	mov base,#16 
      00039F CD 17 E4         [ 4]   51 	call prt_i16  
      0003A2 A6 3A            [ 1]   52 	ld a,#': 
      0003A4 CD 08 DD         [ 4]   53 	call putc 
      0003A7 A6 20            [ 1]   54 	ld a,#SPACE 
      0003A9 CD 08 DD         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0003AC 85               [ 2]   56 	popw x 
      0003AD F6               [ 1]   57 	ld a,(x)
      0003AE 5F               [ 1]   58 	clrw x 
      0003AF 97               [ 1]   59 	ld xl,a 
      0003B0 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003B4 CD 17 E4         [ 4]   61 	call prt_i16 
      0003B7 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003B8                         69 ledon:
      0003B8 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003BC 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003BD                         74 ledoff:
      0003BD 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003C1 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003C2                         79 ledtoggle:
      0003C2 A6 20            [ 1]   80     ld a,#LED2_MASK
      0003C4 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003C7 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003CA 81               [ 4]   83     ret 
                                     84 
      0003CB                         85 left_paren:
      0003CB A6 20            [ 1]   86 	ld a,#SPACE 
      0003CD CD 08 DD         [ 4]   87 	call putc
      0003D0 A6 28            [ 1]   88 	ld a,#'( 
      0003D2 CD 08 DD         [ 4]   89 	call putc 	
      0003D5 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003D6                        100 prt_reg8:
      0003D6 88               [ 1]  101 	push a 
      0003D7 CD 09 3A         [ 4]  102 	call puts 
      0003DA 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003DC 5F               [ 1]  104 	clrw x 
      0003DD 97               [ 1]  105 	ld xl,a 
      0003DE 35 10 00 0A      [ 1]  106 	mov base,#16
      0003E2 CD 17 E4         [ 4]  107 	call prt_i16  
      0003E5 CD 03 CB         [ 4]  108 	call left_paren 
      0003E8 84               [ 1]  109 	pop a 
      0003E9 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003EA 97               [ 1]  111 	ld xl,a 
      0003EB 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003EF CD 17 E4         [ 4]  113 	call prt_i16  
      0003F2 A6 29            [ 1]  114 	ld a,#') 
      0003F4 CD 08 DD         [ 4]  115 	call putc
      0003F7 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      0003F8                        126 prt_reg16: 
      0003F8 90 89            [ 2]  127 	pushw y 
      0003FA CD 09 3A         [ 4]  128 	call puts 
      0003FD 1E 01            [ 2]  129 	ldw x,(1,sp) 
      0003FF 35 10 00 0A      [ 1]  130 	mov base,#16 
      000403 CD 17 E4         [ 4]  131 	call prt_i16  
      000406 CD 03 CB         [ 4]  132 	call left_paren 
      000409 85               [ 2]  133 	popw x 
      00040A 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00040E CD 17 E4         [ 4]  135 	call prt_i16  
      000411 A6 29            [ 1]  136 	ld a,#') 
      000413 CD 08 DD         [ 4]  137 	call putc
      000416 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000417                        152 print_registers:
      000417 8A               [ 1]  153 	push cc 
      000418                        154 	_vars VSIZE 
      000418 52 08            [ 2]    1     sub sp,#VSIZE 
      00041A 6B 01            [ 1]  155 	ld (R_A,sp),a 
      00041C 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00041E 17 04            [ 2]  157 	ldw (R_Y,sp),y
      000420 C6 00 0C         [ 1]  158 	ld a,acc24 
      000423 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000426 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000428 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      00042A AE 04 81         [ 2]  162 	ldw x,#STATES
      00042D CD 09 3A         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000430 AE 04 BE         [ 2]  165 	ldw x, #REG_PC
      000433 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000435 72 A2 00 03      [ 2]  167 	subw y,#3
      000439 CD 03 F8         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      00043C AE 04 C6         [ 2]  170 	ldw x,#REG_X
      00043F 16 02            [ 2]  171 	ldw y,(R_X,sp)
      000441 CD 03 F8         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000444 AE 04 C2         [ 2]  174 	ldw x,#REG_Y
      000447 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000449 CD 03 F8         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      00044C AE 04 CA         [ 2]  178 	ldw x,#REG_A
      00044F 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      000451 CD 03 D6         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000454 AE 04 CE         [ 2]  182 	ldw x,#REG_CC 
      000457 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000459 CD 03 D6         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      00045C AE 04 D3         [ 2]  186 	ldw x,#REG_SP
      00045F 90 96            [ 1]  187 	ldw y,sp 
      000461 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000465 CD 03 F8         [ 4]  189 	call prt_reg16  
      000468 A6 0A            [ 1]  190 	ld a,#'\n' 
      00046A CD 08 DD         [ 4]  191 	call putc
      00046D 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00046F 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      000471 C7 00 0C         [ 1]  194 	ld acc24,a 
      000474 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000477 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000479 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      00047B 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00047D                        199 	_drop VSIZE
      00047D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00047F 86               [ 1]  200 	pop cc   	
      000480 81               [ 4]  201 	ret
                                    202 
      000481 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004BE 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004C2 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004C6 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004CA 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004CE 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004D3 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004D8                        217 parse_addr:
      0004D8 A6 20            [ 1]  218 	ld a,#SPACE 
      0004DA CD 0E A1         [ 4]  219 	call skip  	 
      0004DD 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004E1 AE 16 E0         [ 2]  221 	ldw x,#pad 
      0004E4 CD 13 74         [ 4]  222 	call strcpy
      0004E7 AE 16 E0         [ 2]  223 	ldw x,#pad
      0004EA CD 18 86         [ 4]  224 	call atoi24 	
      0004ED 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004EE                        244 cmd_itf:
      0004EE 8A               [ 1]  245 	push cc 
      0004EF                        246 	_vars VSIZE
      0004EF 52 0B            [ 2]    1     sub sp,#VSIZE 
      0004F1 6B 01            [ 1]  247 	ld (R_A,sp),a
      0004F3 C6 00 03         [ 1]  248 	ld a,count 
      0004F6 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      0004F8 C6 00 01         [ 1]  250 	ld a,in 
      0004FB 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      0004FD 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      0004FF 17 04            [ 2]  253 	ldw (R_Y,sp),y
      000501 C6 00 0C         [ 1]  254 	ld a,acc24 
      000504 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000507 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000509 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      00050B 72 5F 00 18      [ 1]  258 	clr farptr 
      00050F 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000513 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000517                        261 repl:
      000517 A6 0D            [ 1]  262 	ld a,#CR 
      000519 CD 08 DD         [ 4]  263 	call putc 
      00051C A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00051E CD 08 DD         [ 4]  265 	call putc
      000521 72 5F 00 00      [ 1]  266 	clr in.w 
      000525 72 5F 00 01      [ 1]  267 	clr in 
      000529 CD 0A 3F         [ 4]  268 	call readln
      00052C 90 AE 16 90      [ 2]  269 	ldw y,#tib  
      000530 90 F6            [ 1]  270 	ld a,(y)
      000532 27 E3            [ 1]  271 	jreq repl  
      000534 72 5C 00 01      [ 1]  272 	inc in 
      000538 CD 18 7A         [ 4]  273 	call to_upper 
      00053B A1 51            [ 1]  274 	cp a,#'Q 
      00053D 26 26            [ 1]  275 	jrne test_p
      00053F                        276 repl_exit:
                                    277 ; restore original context 
      00053F 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      000541 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000543 C7 00 0C         [ 1]  280 	ld acc24,a 
      000546 CF 00 0D         [ 2]  281 	ldw acc16,x
      000549 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      00054B C7 00 03         [ 1]  283 	ld count,a 
      00054E 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      000550 C7 00 01         [ 1]  285 	ld in,a 
      000553 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000555 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000557 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000559                        289 	_drop VSIZE
      000559 5B 0B            [ 2]    1     addw sp,#VSIZE 
      00055B 86               [ 1]  290 	pop cc 
      00055C 81               [ 4]  291 	ret  
      00055D                        292 invalid:
      00055D AE 05 CB         [ 2]  293 	ldw x,#invalid_cmd 
      000560 CD 09 3A         [ 4]  294 	call puts 
      000563 20 B2            [ 2]  295 	jra repl 
      000565                        296 test_p:	
      000565 A1 50            [ 1]  297     cp a,#'P 
      000567 27 10            [ 1]  298 	jreq mem_peek
      000569 A1 53            [ 1]  299     cp a,#'S 
      00056B 26 F0            [ 1]  300 	jrne invalid 
      00056D                        301 print_string:
      00056D CD 04 D8         [ 4]  302 	call parse_addr 	
      000570 CE 00 0D         [ 2]  303 	ldw x,acc16
      000573 CD 09 3A         [ 4]  304 	call puts
      000576 CC 05 17         [ 2]  305 	jp repl 	
      000579                        306 mem_peek:
      000579 CD 04 D8         [ 4]  307 	call parse_addr 
      00057C C6 00 0C         [ 1]  308 	ld a, acc24 
      00057F CA 00 0D         [ 1]  309 	or a,acc16 
      000582 CA 00 0E         [ 1]  310 	or a,acc8 
      000585 26 02            [ 1]  311 	jrne 1$ 
      000587 20 0C            [ 2]  312 	jra peek_byte  
      000589 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      00058C CF 00 18         [ 2]  314 	ldw farptr,x 
      00058F C6 00 0E         [ 1]  315 	ld a,acc8 
      000592 C7 00 1A         [ 1]  316 	ld farptr+2,a 
      000595                        317 peek_byte:
      000595 CD 05 DA         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000598 A6 08            [ 1]  319 	ld a,#8 
      00059A 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      00059C 5F               [ 1]  321 	clrw x 
      00059D CD 05 F5         [ 4]  322 1$:	call fetchc  
      0005A0 89               [ 2]  323 	pushw x 
      0005A1 C7 00 0E         [ 1]  324 	ld acc8,a 
      0005A4 5F               [ 1]  325 	clrw x 
      0005A5 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005A8 A6 90            [ 1]  327 	ld a,#16+128
      0005AA CD 17 FB         [ 4]  328 	call prt_acc24
      0005AD 85               [ 2]  329 	popw x 
      0005AE 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005B0 26 EB            [ 1]  331 	jrne 1$ 
      0005B2 A6 08            [ 1]  332 	ld a,#8 
      0005B4 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005B7 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005BA 4F               [ 1]  335 	clr a 
      0005BB C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005BE C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005C1 4F               [ 1]  338 	clr a 
      0005C2 C9 00 18         [ 1]  339 	adc a,farptr 
      0005C5 C7 00 18         [ 1]  340 	ld farptr,a 
      0005C8 CC 05 17         [ 2]  341 	jp repl  
                                    342 
      0005CB 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005DA                        348 print_farptr:
      0005DA C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005DD C7 00 0E         [ 1]  350 	ld acc8,a 
      0005E0 CE 00 18         [ 2]  351 	ldw x,farptr 
      0005E3 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005E6 5F               [ 1]  353 	clrw x 
      0005E7 A6 10            [ 1]  354 	ld a,#16 
      0005E9 CD 17 FB         [ 4]  355 	call prt_acc24
      0005EC A6 20            [ 1]  356 	ld a,#SPACE 
      0005EE CD 08 DD         [ 4]  357 	call putc 
      0005F1 CD 08 DD         [ 4]  358 	call putc 
      0005F4 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      0005F5                        370 fetchc: ; @C
      0005F5 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005F9 5C               [ 1]  372 	incw x
      0005FA 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      0005FB                        384 number:
      0005FB CD 0E B4         [ 4]  385 	call get_token
      0005FE A1 84            [ 1]  386 	cp a,#TK_INTGR
      000600 27 03            [ 1]  387 	jreq 1$
      000602 CC 16 38         [ 2]  388 	jp syntax_error
      000605 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000606                        404 show_row:
      000606 4D               [ 1]  405 	tnz a 
      000607 26 01            [ 1]  406 	jrne 1$
      000609 81               [ 4]  407 	ret 
      00060A                        408 1$:	
      00060A 89               [ 2]  409 	pushw x  
      00060B 88               [ 1]  410 	push a 
      00060C 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      000610 CD 17 E4         [ 4]  412 	call prt_i16 
      000613 A6 20            [ 1]  413 	ld a,#SPACE  
      000615 CD 08 DD         [ 4]  414 	call putc
      000618                        415 row_loop:
      000618 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      00061A F6               [ 1]  417 	ld a,(x)
      00061B 5F               [ 1]  418 	clrw x 
      00061C 97               [ 1]  419 	ld xl,a 
      00061D CD 17 E4         [ 4]  420 	call prt_i16 
      000620 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      000622 5C               [ 1]  422 	incw x 
      000623 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000625 0A 01            [ 1]  424 	dec (CNT,sp)
      000627 26 EF            [ 1]  425 	jrne row_loop
      000629                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000629 5B 03            [ 2]    1     addw sp,#VSIZE 
      00062B 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00062F A6 0D            [ 1]  428 	ld a,#CR 
      000631 CD 08 DD         [ 4]  429 	call putc 
      000634 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000635                        443 hex_dump:
      000635 88               [ 1]  444 	push a 
      000636                        445 	_vars VSIZE
      000636 52 04            [ 2]    1     sub sp,#VSIZE 
      000638 C6 00 0A         [ 1]  446 	ld a,base
      00063B 6B 03            [ 1]  447 	ld (BASE,sp),a 
      00063D 35 10 00 0A      [ 1]  448 	mov base,#16
      000641 C6 00 23         [ 1]  449 	ld a,tab_width 
      000644 6B 04            [ 1]  450 	ld (TABW,sp),a
      000646 A6 0D            [ 1]  451 	ld a,#CR 
      000648 CD 08 DD         [ 4]  452 	call putc 
      00064B 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      00064D A6 10            [ 1]  454 	ld a,#16
      00064F 90 A3 00 10      [ 2]  455 	cpw y,#16
      000653 2A 02            [ 1]  456 	jrpl 2$
      000655 90 9F            [ 1]  457 	ld a,yl
      000657                        458 2$: 	
      000657 CD 06 06         [ 4]  459 	call show_row 
      00065A 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      00065C 72 A2 00 10      [ 2]  461 	subw y,#16 
      000660 90 A3 00 01      [ 2]  462 	cpw y,#1
      000664 2A E5            [ 1]  463 	jrpl 1$
      000666 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000668 C7 00 0A         [ 1]  465 	ld base,a
      00066B 7B 04            [ 1]  466 	ld a,(TABW,sp)
      00066D C7 00 23         [ 1]  467 	ld tab_width,a 
      000670                        468 	_drop VSIZE
      000670 5B 04            [ 2]    1     addw sp,#VSIZE 
      000672 84               [ 1]  469 	pop a 
      000673 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000674                         45 unlock_eeprom:
      000674 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000679 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      00067D 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000681 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000685 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000689 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00068E 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00068F                         62 unlock_flash:
      00068F 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      000694 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000698 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      00069C 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006A0 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006A4 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006A9 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006AA                         76 row_erase:
      0006AA 88               [ 1]   77 	push a 
      0006AB 90 89            [ 2]   78 	pushw y 
      0006AD 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006B1 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006B5 4F               [ 1]   81 	clr a 
      0006B6 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0006B8 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006BC 90 5C            [ 1]   84     incw y
      0006BE 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006C2 90 5C            [ 1]   86     incw y
      0006C4 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006C8 90 5C            [ 1]   88     incw y
      0006CA 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006CE 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006D3 90 85            [ 2]   91 	popw y 
      0006D5 84               [ 1]   92 	pop a 
      0006D6 81               [ 4]   93 	ret
      0006D7                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006D7                         97 move_erase_to_ram:
      0006D7 89               [ 2]   98 	pushw x 
      0006D8 90 89            [ 2]   99 	pushw y 
      0006DA AE 06 D7         [ 2]  100 	ldw x,#row_erase_end 
      0006DD 1D 06 AA         [ 2]  101 	subw x,#row_erase
      0006E0 CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006E3 AE 16 90         [ 2]  103 	ldw x,#tib 
      0006E6 90 AE 06 AA      [ 2]  104 	ldw y,#row_erase 
      0006EA CD 13 84         [ 4]  105 	call move
      0006ED 90 85            [ 2]  106 	popw y
      0006EF 85               [ 2]  107 	popw x
      0006F0 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      0006F1                        123 program_row:
      0006F1 88               [ 1]  124 	push a 
      0006F2 90 89            [ 2]  125 	pushw y 
      0006F4 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      0006F6 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      0006FA 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      0006FE 90 5F            [ 1]  130 	clrw y 
      000700 F6               [ 1]  131 1$:	ld a,(x)
      000701 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000705 5C               [ 1]  133 	incw x 
      000706 90 5C            [ 1]  134 	incw y 
      000708 0A 01            [ 1]  135 	dec (BCNT,sp)
      00070A 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00070C 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000711                        139 	_drop 1 
      000711 5B 01            [ 2]    1     addw sp,#1 
      000713 90 85            [ 2]  140 	popw y 
      000715 84               [ 1]  141 	pop a 
      000716 81               [ 4]  142 	ret 
      000717                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000717                        149 move_prg_to_ram:
      000717 89               [ 2]  150 	pushw x 
      000718 90 89            [ 2]  151 	pushw y 
      00071A AE 07 17         [ 2]  152 	ldw x,#program_row_end 
      00071D 1D 06 F1         [ 2]  153 	subw x,#program_row 
      000720 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000723 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000726 90 AE 06 F1      [ 2]  156 	ldw y,#program_row ; source address 
      00072A CD 13 84         [ 4]  157 	call move
      00072D 90 85            [ 2]  158 	popw y 
      00072F 85               [ 2]  159 	popw x  
      000730 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000731                        169 write_buffer:
      000731 89               [ 2]  170 	pushw x 
      000732 72 5D 00 18      [ 1]  171 	tnz farptr 
      000736 26 0D            [ 1]  172 	jrne to_flash 
      000738 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00073B A3 36 80         [ 2]  174 	cpw x,#app_space  
      00073E 24 05            [ 1]  175 	jruge to_flash 
      000740                        176 to_eeprom:
      000740 CD 06 74         [ 4]  177 	call unlock_eeprom
      000743 20 03            [ 2]  178 	jra do_programming
      000745                        179 to_flash:
      000745 CD 06 8F         [ 4]  180 	call unlock_flash
      000748                        181 do_programming:
      000748 85               [ 2]  182 	popw x 
      000749 CD 16 90         [ 4]  183 	call tib
      00074C 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000750 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000754 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000755                        197 block_erase:
      000755 89               [ 2]  198 	pushw x 
      000756 C6 00 18         [ 1]  199 	ld a,farptr 
      000759 26 14            [ 1]  200 	jrne erase_flash
      00075B CE 00 19         [ 2]  201 	ldw x,farptr+1
      00075E A3 36 80         [ 2]  202 	cpw x,#app_space 
      000761 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000763 CD 06 74         [ 4]  205 	call unlock_eeprom 
      000766 CD 16 90         [ 4]  206 	call tib 
      000769 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00076D 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00076F                        210 erase_flash:
      00076F CD 06 8F         [ 4]  211 	call unlock_flash 
      000772 CD 16 90         [ 4]  212 	call tib 
      000775 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000779                        214 erase_exit: 
      000779 85               [ 2]  215 	popw x 
      00077A 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      00077B                        232 write_byte:
      00077B 90 89            [ 2]  233 	pushw y
      00077D                        234 	_vars VSIZE
      00077D 52 02            [ 2]    1     sub sp,#VSIZE 
      00077F 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      000781 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000783 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000787 72 5D 00 18      [ 1]  240 	tnz farptr 
      00078B 26 14            [ 1]  241 	jrne write_flash
      00078D 90 A3 36 80      [ 2]  242     cpw y,#app_space 	 
      000791 24 0E            [ 1]  243     jruge write_flash
      000793 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000797 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000799 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      00079D 22 51            [ 1]  247 	jrugt write_exit
      00079F 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007A1                        250 write_flash:
      0007A1 CD 06 8F         [ 4]  251 	call unlock_flash 
      0007A4 9B               [ 1]  252 1$:	sim 
      0007A5 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007A7 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007AB 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007B0 9A               [ 1]  256     rim 
      0007B1 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007B5 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007B7                        260 write_eeprom:
      0007B7 CD 06 74         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007BA 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007BE 2B 08            [ 1]  264 	jrmi 1$
      0007C0 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007C4 2A 02            [ 1]  266 	jrpl 1$
      0007C6 03 02            [ 1]  267 	cpl (OPT,sp)
      0007C8                        268 1$: 
      0007C8 0D 02            [ 1]  269     tnz (OPT,sp)
      0007CA 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007CC 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007D0 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007D4                        274 2$: 
      0007D4 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007D6 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007DA 0D 02            [ 1]  277     tnz (OPT,sp)
      0007DC 27 08            [ 1]  278     jreq 3$
      0007DE 5C               [ 1]  279     incw x
      0007DF 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007E1 43               [ 1]  281     cpl a
      0007E2 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007E6 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007EB 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      0007F0                        285 write_exit:
      0007F0 5C               [ 1]  286 	incw x 
      0007F1 CD 08 4F         [ 4]  287 	call incr_farptr
      0007F4                        288 	_drop VSIZE 
      0007F4 5B 02            [ 2]    1     addw sp,#VSIZE 
      0007F6 90 85            [ 2]  289 	popw y
      0007F8 81               [ 4]  290     ret
                                    291 
                                    292 ;--------------------------------------------
                                    293 ; write a data block to eeprom or flash 
                                    294 ; the block must be erased before 
                                    295 ; using this routine.
                                    296 ; input:
                                    297 ;   Y        source address   
                                    298 ;   X        array index  destination  farptr[x]
                                    299 ;   BSIZE    block size bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                    300 ;   farptr   write address , byte* 
                                    301 ; output:
                                    302 ;	X 		after last byte written 
                                    303 ;   Y 		after last byte read 
                                    304 ;  farptr   point after block
                                    305 ;---------------------------------------------
      0007F9                        306 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      0007F9                        307 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    308 	; local var 
                           000001   309 	XSAVE=1 
                           000002   310 	VSIZE=2 
      0007F9                        311 write_block::
      0007F9 88               [ 1]  312 	push a 
      0007FA                        313 	_vars VSIZE
      0007FA 52 02            [ 2]    1     sub sp,#VSIZE 
      0007FC 1F 01            [ 2]  314 	ldw (XSAVE,sp),x 
      0007FE 1E 06            [ 2]  315 	ldw x,(BSIZE,sp) 
      000800 27 13            [ 1]  316 	jreq 9$
      000802 1E 01            [ 2]  317 1$:	ldw x,(XSAVE,sp)
      000804 90 F6            [ 1]  318 	ld a,(y)
      000806 CD 07 7B         [ 4]  319 	call write_byte 
      000809 5C               [ 1]  320 	incw x 
      00080A 90 5C            [ 1]  321 	incw y 
      00080C 1F 01            [ 2]  322 	ldw (XSAVE,sp),x
      00080E 1E 06            [ 2]  323 	ldw x,(BSIZE,sp)
      000810 5A               [ 2]  324 	decw x
      000811 1F 06            [ 2]  325 	ldw (BSIZE,sp),x 
      000813 26 ED            [ 1]  326 	jrne 1$
      000815                        327 9$:
      000815 1E 01            [ 2]  328 	ldw x,(XSAVE,sp)
      000817 CD 08 4F         [ 4]  329 	call incr_farptr
      00081A                        330 	_drop VSIZE
      00081A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00081C 84               [ 1]  331 	pop a 
      00081D 81               [ 4]  332 	ret 
                                    333 
                                    334 
                                    335 ;------------------------------------
                                    336 ; write n bytes to flash | eeprom 
                                    337 ; if the number of bytes is 
                                    338 ; >=128 it is faster to 
                                    339 ; use write_block
                                    340 ; the bytes are written one by 
                                    341 ; one and auto erased if required. 
                                    342 ; input:
                                    343 ;    farptr    dest address 
                                    344 ;    X         src address 
                                    345 ;    A         count 
                                    346 ; output:
                                    347 ;    none   
                                    348 ;----------------------------------
      00081E                        349 write_nbytes:
      00081E 90 89            [ 2]  350 	pushw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000820 88               [ 1]  351 	push a 
      000821 90 93            [ 1]  352 	ldw y,x
      000823 5F               [ 1]  353 	clrw x 
      000824                        354 1$:  
      000824 90 F6            [ 1]  355 	ld a,(y)
      000826 90 5C            [ 1]  356 	incw y
      000828 CD 07 7B         [ 4]  357 	call write_byte 
      00082B 5C               [ 1]  358 	incw x 
      00082C 0A 01            [ 1]  359 	dec (1,sp)  
      00082E 26 F4            [ 1]  360 	jrne 1$ 
      000830 84               [ 1]  361 9$: pop a 
      000831 90 85            [ 2]  362 	popw y 
      000833 81               [ 4]  363 	ret 
                                    364 
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 ;;;  flash memory operations
                                    367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    368 
                                    369 ;--------------------------
                                    370 ; align farptr to BLOCK_SIZE 
                                    371 ;---------------------------
      000834                        372 row_align:
      000834 A6 7F            [ 1]  373 	ld a,#0x7f 
      000836 C4 00 1A         [ 1]  374 	and a,farptr+2 
      000839 27 13            [ 1]  375 	jreq 1$ 
      00083B CE 00 19         [ 2]  376 	ldw x,farptr+1 
      00083E 1C 00 80         [ 2]  377 	addw x,#BLOCK_SIZE 
      000841 24 04            [ 1]  378 	jrnc 0$
      000843 72 5C 00 18      [ 1]  379 	inc farptr 
      000847 9F               [ 1]  380 0$: ld a,xl 
      000848 A4 80            [ 1]  381 	and a,#0x80
      00084A 97               [ 1]  382 	ld xl,a
      00084B CF 00 19         [ 2]  383 	ldw farptr+1,x  	
      00084E 81               [ 4]  384 1$:	ret
                                    385 
                                    386 ;--------------------
                                    387 ; input:
                                    388 ;   X     increment 
                                    389 ; output:
                                    390 ;   farptr  incremented 
                                    391 ;---------------------
      00084F                        392 incr_farptr:
      00084F 72 BB 00 19      [ 2]  393 	addw x,farptr+1 
      000853 24 04            [ 1]  394 	jrnc 1$
      000855 72 5C 00 18      [ 1]  395 	inc farptr 
      000859 CF 00 19         [ 2]  396 1$:	ldw farptr+1,x  
      00085C 81               [ 4]  397 	ret 
                                    398 
                                    399 ;-----------------------------------
                                    400 ; scan block for non zero byte 
                                    401 ; block are 128 bytes 
                                    402 ; input:
                                    403 ;    farptr     address block  
                                    404 ; output:
                                    405 ;     A     0 cleared, other not cleared  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    406 ;-----------------------------------
      00085D                        407 scan_block:
      00085D 5F               [ 1]  408 	clrw x 
      00085E 92 AF 00 18      [ 5]  409 1$: ldf a,([farptr],x) 
      000862 26 06            [ 1]  410 	jrne 2$
      000864 5C               [ 1]  411 	incw x 
      000865 A3 00 80         [ 2]  412 	cpw x,#BLOCK_SIZE 
      000868 25 F4            [ 1]  413 	jrult 1$ 
      00086A 81               [ 4]  414 2$:	ret 
                                    415 
                                    416 
                                    417 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00086B                         66 Uart1RxHandler: ; console receive char 
      00086B 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000870 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000873 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000875 26 06            [ 1]   70 	jrne 2$
      000877 CD 08 DD         [ 4]   71 	call putc 
      00087A CC 00 49         [ 2]   72 	jp user_interrupted
      00087D                         73 2$:
      00087D A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      00087F 26 03            [ 1]   75 	jrne 3$
      000881 CC 00 B5         [ 2]   76 	jp cold_start 	
      000884 88               [ 1]   77 3$:	push a 
      000885 A6 26            [ 1]   78 	ld a,#rx1_queue 
      000887 CB 00 2F         [ 1]   79 	add a,rx1_tail 
      00088A 5F               [ 1]   80 	clrw x 
      00088B 97               [ 1]   81 	ld xl,a 
      00088C 84               [ 1]   82 	pop a 
      00088D F7               [ 1]   83 	ld (x),a 
      00088E C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      000891 4C               [ 1]   85 	inc a 
      000892 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      000894 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      000897 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      000898                         97 uart1_init:
      000898 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      00089C 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008A0 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008A4 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008A8                        103 uart1_set_baud: 
      0008A8 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008A9 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008AB C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008AE 27 0A            [ 1]  109 	jreq 2$ 
      0008B0                        110 1$: ; 8 Mhz 	
      0008B0 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008B4 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008B8 20 08            [ 2]  113 	jra 3$
      0008BA                        114 2$: ; 16 Mhz 	
      0008BA 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008BE 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008C2                        117 3$:
      0008C2 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008C6 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008CA 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008CE 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0008D3 72 5F 00 2E      [ 1]  122     clr rx1_head 
      0008D7 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      0008DB 84               [ 1]  124 	pop a  
      0008DC 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0008DD                        133 putc:: ; console output always on UART1
      0008DD                        134 uart1_putc:: 
      0008DD 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0008E2 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0008E5 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0008E6                        148 qgetc::
      0008E6                        149 uart1_qgetc::
      0008E6 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      0008E9 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      0008EC 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      0008ED                        161 getc:: ;console input
      0008ED                        162 uart1_getc::
      0008ED CD 08 E6         [ 4]  163 	call uart1_qgetc
      0008F0 27 FB            [ 1]  164 	jreq uart1_getc 
      0008F2 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      0008F3 A6 26            [ 1]  167 	ld a,#rx1_queue
      0008F5 CB 00 2E         [ 1]  168 	add a,rx1_head 
      0008F8 5F               [ 1]  169 	clrw x  
      0008F9 97               [ 1]  170 	ld xl,a 
      0008FA F6               [ 1]  171 	ld a,(x)
      0008FB 88               [ 1]  172 	push a
      0008FC C6 00 2E         [ 1]  173 	ld a,rx1_head 
      0008FF 4C               [ 1]  174 	inc a 
      000900 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000902 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000905 84               [ 1]  177 	pop a  
      000906 85               [ 2]  178 	popw x
      000907 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000908 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000914                        207 get_escape:
      000914 CD 08 ED         [ 4]  208     call getc 
      000917 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000919 27 02            [ 1]  210     jreq 1$
      00091B 4F               [ 1]  211     clr a
      00091C 81               [ 4]  212     ret
      00091D CD 08 ED         [ 4]  213 1$: call getc 
      000920 AE 09 08         [ 2]  214     ldw x,#convert_table
      000923                        215 2$:
      000923 F1               [ 1]  216     cp a,(x)
      000924 27 08            [ 1]  217     jreq 4$
      000926 1C 00 02         [ 2]  218     addw x,#2
      000929 7D               [ 1]  219     tnz (x)
      00092A 26 F7            [ 1]  220     jrne 2$
      00092C 4F               [ 1]  221     clr a
      00092D 81               [ 4]  222     ret 
      00092E 5C               [ 1]  223 4$: incw x 
      00092F F6               [ 1]  224     ld a,(x)
      000930 A1 84            [ 1]  225     cp a,#SUP
      000932 26 05            [ 1]  226     jrne 5$
      000934 88               [ 1]  227     push a 
      000935 CD 08 ED         [ 4]  228     call getc
      000938 84               [ 1]  229     pop a 
      000939                        230 5$:
      000939 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00093A                        241 puts::
      00093A F6               [ 1]  242     ld a,(x)
      00093B 27 06            [ 1]  243 	jreq 1$
      00093D CD 08 DD         [ 4]  244 	call putc 
      000940 5C               [ 1]  245 	incw x 
      000941 20 F7            [ 2]  246 	jra puts 
      000943 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000944                        258 bksp:
      000944 A6 08            [ 1]  259 	ld a,#BS 
      000946 CD 08 DD         [ 4]  260 	call putc 
      000949 A6 20            [ 1]  261 	ld a,#SPACE 
      00094B CD 08 DD         [ 4]  262 	call putc 
      00094E A6 08            [ 1]  263 	ld a,#BS 
      000950 CD 08 DD         [ 4]  264 	call putc 
      000953 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000954                        274 delete_nchar:
      000954 88               [ 1]  275 	push a 
      000955 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000957 27 07            [ 1]  277 	jreq 1$
      000959 CD 09 44         [ 4]  278 	call bksp 
      00095C 0A 01            [ 1]  279 	dec (1,sp)
      00095E 20 F5            [ 2]  280 	jra 0$
      000960 84               [ 1]  281 1$:	pop a 
      000961 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000962                        290 send_escape:
      000962 A6 1B            [ 1]  291 	ld a,#ESC 
      000964 CD 08 DD         [ 4]  292 	call putc 
      000967 A6 5B            [ 1]  293 	ld a,#'[
      000969 CD 08 DD         [ 4]  294 	call putc 
      00096C 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00096D                        311 send_parameter:
      00096D 89               [ 2]  312 	pushw x 
      00096E 5F               [ 1]  313 	clrw x 
      00096F 97               [ 1]  314 	ld xl,a 
      000970 A6 0A            [ 1]  315 	ld a,#10 
      000972 62               [ 2]  316 	div x,a 
      000973 95               [ 1]  317 	ld xh,a 
      000974 9F               [ 1]  318 	ld a,xl
      000975 4D               [ 1]  319     tnz a 
      000976 27 0B            [ 1]  320     jreq 2$
      000978 A1 09            [ 1]  321 	cp a,#9 
      00097A 23 02            [ 2]  322 	jrule 1$
      00097C A6 09            [ 1]  323 	ld a,#9
      00097E                        324 1$:
      00097E AB 30            [ 1]  325 	add a,#'0 
      000980 CD 08 DD         [ 4]  326 	call putc
      000983 9E               [ 1]  327 2$:	ld a,xh 
      000984 AB 30            [ 1]  328 	add a,#'0
      000986 CD 08 DD         [ 4]  329 	call putc 
      000989 85               [ 2]  330 	popw x 
      00098A 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      00098B                        344 move_left:
      00098B 88               [ 1]  345 	push a 
      00098C CD 09 62         [ 4]  346 	call send_escape
      00098F 84               [ 1]  347     pop a
      000990 CD 09 6D         [ 4]  348 	call send_parameter 
      000993 A6 44            [ 1]  349 	ld a,#'D 
      000995 CD 08 DD         [ 4]  350 	call putc 
      000998 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      000999                        362 move_right:
      000999 88               [ 1]  363 	push a 
      00099A CD 09 62         [ 4]  364 	call send_escape
      00099D 84               [ 1]  365     pop a
      00099E CD 09 6D         [ 4]  366 	call send_parameter 
      0009A1 A6 43            [ 1]  367 	ld a,#'C 
      0009A3 CD 08 DD         [ 4]  368 	call putc 
      0009A6 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009A7                        379 spaces::
      0009A7 A6 20            [ 1]  380 	ld a,#SPACE 
      0009A9 5D               [ 2]  381 1$:	tnzw x
      0009AA 27 06            [ 1]  382 	jreq 9$
      0009AC CD 08 DD         [ 4]  383 	call putc 
      0009AF 5A               [ 2]  384 	decw x
      0009B0 20 F7            [ 2]  385 	jra 1$
      0009B2                        386 9$: 
      0009B2 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009B3                        405 insert_char: 
      0009B3                        406 	_vars VSIZE 
      0009B3 52 03            [ 2]    1     sub sp,#VSIZE 
      0009B5 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009B7 9E               [ 1]  408     ld a,xh 
      0009B8 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009BA 9F               [ 1]  410     ld a,xl 
      0009BB 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009BD 93               [ 1]  412     ldw x,y
      0009BE 5C               [ 1]  413     incw x 
      0009BF 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009C1 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0009C3 4C               [ 1]  416     inc a 
      0009C4 C7 00 0E         [ 1]  417     ld acc8,a 
      0009C7 72 5F 00 0D      [ 1]  418     clr acc16
      0009CB CD 13 84         [ 4]  419     call move
      0009CE 90 AE 16 90      [ 2]  420     ldw y,#tib 
      0009D2 7B 01            [ 1]  421     ld a,(IPOS,sp)
      0009D4 C7 00 0E         [ 1]  422     ld acc8,a 
      0009D7 72 B9 00 0D      [ 2]  423     addw y,acc16 
      0009DB 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      0009DD 90 F7            [ 1]  425     ld (y),a
      0009DF 90 5C            [ 1]  426     incw y  
      0009E1 7B 01            [ 1]  427     ld a,(IPOS,sp)
      0009E3 CD 09 8B         [ 4]  428     call move_left
      0009E6 AE 16 90         [ 2]  429     ldw x,#tib 
      0009E9 CD 09 3A         [ 4]  430     call puts 
      0009EC 7B 03            [ 1]  431     ld a,(LLEN,sp)
      0009EE 10 01            [ 1]  432     sub a,(IPOS,sp) 
      0009F0 CD 09 8B         [ 4]  433     call move_left 
      0009F3                        434 	_drop VSIZE 
      0009F3 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009F5 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      0009F6                        448 delete_under:
      0009F6                        449 	_vars VSIZE 
      0009F6 52 02            [ 2]    1     sub sp,#VSIZE 
      0009F8 6B 02            [ 1]  450     ld (LLEN,sp),a 
      0009FA 9F               [ 1]  451     ld a,xl 
      0009FB 6B 01            [ 1]  452     ld (CPOS,sp),a 
      0009FD 93               [ 1]  453     ldw x,y ; move destination
      0009FE 90 5C            [ 1]  454     incw y  ; move source 
      000A00 7B 02            [ 1]  455     ld a,(LLEN,sp)
      000A02 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A04 4C               [ 1]  457     inc a ; move including zero at end.
      000A05 C7 00 0E         [ 1]  458     ld acc8,a 
      000A08 72 5F 00 0D      [ 1]  459     clr acc16 
      000A0C CD 13 84         [ 4]  460 	call move 
      000A0F 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A13 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A15 C7 00 0E         [ 1]  463     ld acc8,a 
      000A18 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A1C 93               [ 1]  465     ldw x,y 
      000A1D CD 09 3A         [ 4]  466     call puts 
      000A20 A6 20            [ 1]  467     ld a,#SPACE  
      000A22 CD 08 DD         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      000A25 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A27 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A29 CD 09 8B         [ 4]  471     call move_left 
      000A2C 0A 02            [ 1]  472     dec (LLEN,sp)
      000A2E                        473 	_drop VSIZE 
      000A2E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A30 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A31                        486 delete_line:
      000A31 CD 09 62         [ 4]  487     call send_escape
      000A34 A6 32            [ 1]  488 	ld a,#'2
      000A36 CD 08 DD         [ 4]  489 	call putc 
      000A39 A6 4B            [ 1]  490 	ld a,#'K 
      000A3B CD 08 DD         [ 4]  491 	call putc 
      000A3E 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A3F                        524 readln::
      000A3F 90 89            [ 2]  525 	pushw y 
      000A41                        526 	_vars VSIZE 
      000A41 52 04            [ 2]    1     sub sp,#VSIZE 
      000A43 5F               [ 1]  527 	clrw x 
      000A44 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A46 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A48 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A4A 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A4E                        532 readln_loop:
      000A4E CD 08 ED         [ 4]  533 	call getc
      000A51 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A53 A1 1B            [ 1]  535     cp a,#ESC 
      000A55 26 05            [ 1]  536     jrne 0$
      000A57 CD 09 14         [ 4]  537     call get_escape 
      000A5A 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A5C A1 0D            [ 1]  539 0$:	cp a,#CR
      000A5E 26 03            [ 1]  540 	jrne 1$
      000A60 CC 0B DB         [ 2]  541 	jp readln_quit
      000A63 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A65 26 03            [ 1]  543 	jrne 2$ 
      000A67 CC 0B DB         [ 2]  544 	jp readln_quit
      000A6A                        545 2$:
      000A6A A1 08            [ 1]  546 	cp a,#BS
      000A6C 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A6E 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A70 27 DC            [ 1]  550     jreq readln_loop 
      000A72 A6 01            [ 1]  551     ld a,#1 
      000A74 CD 09 8B         [ 4]  552     call move_left
      000A77 0A 03            [ 1]  553     dec (CPOS,sp)
      000A79 90 5A            [ 2]  554     decw y 
      000A7B 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000A7D CC 0B 87         [ 2]  556     jp 12$
      000A80                        557 3$:
      000A80 A1 04            [ 1]  558 	cp a,#CTRL_D
      000A82 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000A84 CD 0A 31         [ 4]  561 	call delete_line 
      000A87 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000A89 4C               [ 1]  563     inc a 
      000A8A CD 09 8B         [ 4]  564     call move_left 
      000A8D A6 3E            [ 1]  565 	ld a,#'> 
      000A8F CD 08 DD         [ 4]  566 	call putc 
      000A92 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000A96 90 7F            [ 1]  568 	clr (y)
      000A98 0F 02            [ 1]  569 	clr (LL,sp)
      000A9A 0F 03            [ 1]  570 	clr (CPOS,sp)
      000A9C 20 B0            [ 2]  571 	jra readln_loop
      000A9E                        572 4$:
      000A9E A1 12            [ 1]  573 	cp a,#CTRL_R 
      000AA0 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000AA2 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000AA4 26 A8            [ 1]  577 	jrne readln_loop
      000AA6 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AAA 93               [ 1]  579 	ldw x,y
      000AAB CD 13 58         [ 4]  580 	call strlen
      000AAE 4D               [ 1]  581 	tnz a  
      000AAF 27 9D            [ 1]  582 	jreq readln_loop
      000AB1 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AB3 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AB5 93               [ 1]  585 	ldw x,y  
      000AB6 CD 09 3A         [ 4]  586 	call puts
      000AB9 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000ABB 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000ABE 20 8E            [ 2]  589 	jra readln_loop 
      000AC0                        590 5$:
      000AC0 A1 05            [ 1]  591 	cp a,#CTRL_E 
      000AC2 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AC4 AE 16 90         [ 2]  594 	ldw x,#tib 
      000AC7 CD 18 86         [ 4]  595 	call atoi24
      000ACA CE 00 0D         [ 2]  596 	ldw x,acc16
      000ACD CD 0C 17         [ 4]  597 	call search_lineno
      000AD0 5D               [ 2]  598 	tnzw x 
      000AD1 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000AD3 CC 0B DB         [ 2]  603 	jp readln_quit  
      000AD6                        604 51$:
      000AD6 CF 00 04         [ 2]  605 	ldw basicptr,x
      000AD9 E6 02            [ 1]  606 	ld a,(2,x)
      000ADB C7 00 03         [ 1]  607 	ld count,a 
      000ADE 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000AE2 CD 11 74         [ 4]  609 	call decompile 
      000AE5 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000AE7 A6 0D            [ 1]  611 	ld a,#CR 
      000AE9 CD 08 DD         [ 4]  612 	call putc 
      000AEC A6 3E            [ 1]  613 	ld a,#'>
      000AEE CD 08 DD         [ 4]  614 	call putc
      000AF1 AE 16 90         [ 2]  615     ldw x,#tib  
      000AF4 CD 13 58         [ 4]  616 	call strlen 
      000AF7 6B 02            [ 1]  617 	ld (LL,sp),a 
      000AF9 CD 09 3A         [ 4]  618 	call puts 
      000AFC 90 93            [ 1]  619 	ldw y,x
      000AFE 7B 02            [ 1]  620     ld a,(LL,sp)
      000B00 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000B02 CC 0A 4E         [ 2]  622 	jp readln_loop
      000B05                        623 6$:
      000B05 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B07 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B09 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B0B 11 02            [ 1]  628     cp a,(LL,sp)
      000B0D 2B 03            [ 1]  629     jrmi 61$
      000B0F CC 0A 4E         [ 2]  630     jp readln_loop 
      000B12                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000B12 A6 01            [ 1]  632     ld a,#1 
      000B14 CD 09 99         [ 4]  633 	call move_right 
      000B17 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B19 90 5C            [ 1]  635     incw y 
      000B1B CC 0A 4E         [ 2]  636     jp readln_loop 
      000B1E A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B20 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B22 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B24 26 03            [ 1]  641 	jrne 71$
      000B26 CC 0A 4E         [ 2]  642 	jp readln_loop
      000B29                        643 71$:
      000B29 A6 01            [ 1]  644     ld a,#1 
      000B2B CD 09 8B         [ 4]  645 	call move_left 
      000B2E 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B30 90 5A            [ 2]  647     decw y 
      000B32 CC 0A 4E         [ 2]  648 	jp readln_loop 
      000B35 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B37 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B39 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B3B CD 09 8B         [ 4]  653     call move_left 
      000B3E 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B40 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B44 CC 0A 4E         [ 2]  656 	jp readln_loop  
      000B47 A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B49 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B4B 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B4D 11 02            [ 1]  661 	cp a,(LL,sp)
      000B4F 26 03            [ 1]  662 	jrne 91$
      000B51 CC 0A 4E         [ 2]  663 	jp readln_loop 
      000B54                        664 91$:
      000B54 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B56 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B58 CD 09 99         [ 4]  667 	call move_right 
      000B5B 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B5D 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B5F 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B63 72 5F 00 0D      [ 1]  671     clr acc16 
      000B67 C7 00 0E         [ 1]  672     ld acc8,a 
      000B6A 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B6E CC 0A 4E         [ 2]  674 	jp readln_loop 
      000B71 A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000B73 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000B75 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000B77 CD 25 5D         [ 4]  679 	call beep_1khz
      000B7A CC 0A 4E         [ 2]  680 	jp readln_loop 
      000B7D A1 84            [ 1]  681 11$: cp a,#SUP 
      000B7F 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000B81 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000B83 11 02            [ 1]  685     cp a,(LL,sp)
      000B85 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B87                        687 12$:
      000B87 97               [ 1]  688     ld xl,a    ; cursor position 
      000B88 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000B8A CD 09 F6         [ 4]  690     call delete_under
      000B8D 0A 02            [ 1]  691     dec (LLEN,sp)
      000B8F                        692 13$:
      000B8F CC 0A 4E         [ 2]  693     jp readln_loop 
      000B92                        694 final_test:
      000B92 A1 20            [ 1]  695 	cp a,#SPACE
      000B94 2A 03            [ 1]  696 	jrpl accept_char
      000B96 CC 0A 4E         [ 2]  697 	jp readln_loop
      000B99                        698 accept_char:
      000B99 A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000B9B 11 02            [ 1]  700 	cp a, (LL,sp)
      000B9D 2A 03            [ 1]  701 	jrpl 1$
      000B9F CC 0A 4E         [ 2]  702 	jp readln_loop
      000BA2 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BA4 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BA6 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BA8 11 02            [ 1]  707     cp a,(LL,sp)
      000BAA 27 12            [ 1]  708     jreq overwrite
      000BAC 7B 02            [ 1]  709     ld a,(LL,sp)
      000BAE 97               [ 1]  710     ld xl,a 
      000BAF 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BB1 95               [ 1]  712     ld xh,a
      000BB2 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BB4 CD 09 B3         [ 4]  714     call insert_char
      000BB7 0C 02            [ 1]  715     inc (LLEN,sp)
      000BB9 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BBB CC 0A 4E         [ 2]  717     jp readln_loop 
      000BBE                        718 overwrite:
      000BBE 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BC0 90 F7            [ 1]  720 	ld (y),a
      000BC2 90 5C            [ 1]  721     incw y
      000BC4 CD 08 DD         [ 4]  722     call putc 
      000BC7 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BC9 11 02            [ 1]  724 	cp a,(LL,sp)
      000BCB 2B 09            [ 1]  725 	jrmi 1$
      000BCD 90 7F            [ 1]  726 	clr (y)
      000BCF 0C 02            [ 1]  727 	inc (LL,sp)
      000BD1 0C 03            [ 1]  728     inc (CPOS,sp)
      000BD3 CC 0A 4E         [ 2]  729 	jp readln_loop 
      000BD6                        730 1$:	
      000BD6 0C 03            [ 1]  731 	inc (CPOS,sp)
      000BD8 CC 0A 4E         [ 2]  732 	jp readln_loop 
      000BDB                        733 readln_quit:
      000BDB 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000BDF 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000BE1 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000BE4 90 7F            [ 1]  737     clr (y)
      000BE6 7B 02            [ 1]  738 	ld a,(LL,sp)
      000BE8 C7 00 03         [ 1]  739 	ld count,a 
      000BEB A6 0D            [ 1]  740 	ld a,#CR
      000BED CD 08 DD         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000BF0                        742 	_drop VSIZE 
      000BF0 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BF2 90 85            [ 2]  743 	popw y 
      000BF4 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000BF5                        752 print_hex::
      000BF5 88               [ 1]  753 	push a 
      000BF6 4E               [ 1]  754 	swap a 
      000BF7 CD 0C 0C         [ 4]  755 	call to_hex_char 
      000BFA CD 08 DD         [ 4]  756 	call putc 
      000BFD 7B 01            [ 1]  757     ld a,(1,sp) 
      000BFF CD 0C 0C         [ 4]  758 	call to_hex_char
      000C02 CD 08 DD         [ 4]  759 	call putc
      000C05 A6 20            [ 1]  760 	ld a,#SPACE 
      000C07 CD 08 DD         [ 4]  761 	call putc 
      000C0A 84               [ 1]  762 	pop a 
      000C0B 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C0C                        772 to_hex_char::
      000C0C A4 0F            [ 1]  773 	and a,#15 
      000C0E A1 09            [ 1]  774 	cp a,#9 
      000C10 23 02            [ 2]  775 	jrule 1$ 
      000C12 AB 07            [ 1]  776 	add a,#7
      000C14 AB 30            [ 1]  777 1$: add a,#'0 
      000C16 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C17                         51 search_lineno::
      000C17                         52 	_vars VSIZE
      000C17 52 02            [ 2]    1     sub sp,#VSIZE 
      000C19 0F 01            [ 1]   53 	clr (LL,sp)
      000C1B 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C1F 4D               [ 1]   55 	tnz a 
      000C20 27 04            [ 1]   56 	jreq search_ln_loop
      000C22 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C26                         58 search_ln_loop:
      000C26 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C2A 2A 10            [ 1]   60 	jrpl 8$
      000C2C 90 F3            [ 1]   61 	cpw x,(y)
      000C2E 27 0E            [ 1]   62 	jreq 9$
      000C30 2B 0A            [ 1]   63 	jrmi 8$ 
      000C32 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C35 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C37 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C3A 20 EA            [ 2]   67 	jra search_ln_loop 
      000C3C                         68 8$: 
      000C3C 5F               [ 1]   69 	clrw x 	
      000C3D 51               [ 1]   70 	exgw x,y 
      000C3E                         71 9$: _drop VSIZE
      000C3E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C40 51               [ 1]   72 	exgw x,y   
      000C41 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C42                         83 del_line: 
      000C42                         84 	_vars VSIZE 
      000C42 52 04            [ 2]    1     sub sp,#VSIZE 
      000C44 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C46 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C48 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C4A 90 93            [ 1]   88 	ldw y,x  
      000C4C 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C4F 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C51 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C55 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C58 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C5C 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C5E CD 13 84         [ 4]   95 	call move
      000C61 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C65 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C68 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C6C                         99 	_drop VSIZE     
      000C6C 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C6E 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C6F                        115 create_gap:
      000C6F                        116 	_vars VSIZE
      000C6F 52 06            [ 2]    1     sub sp,#VSIZE 
      000C71 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000C73 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000C75 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000C79 90 93            [ 1]  120 	ldw y,x ; SRC
      000C7B 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000C7F 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000C81 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000C84 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000C87 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000C8A 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000C8C CD 13 84         [ 4]  128 	call move
      000C8F CE 00 1D         [ 2]  129 	ldw x,txtend
      000C92 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000C95 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C98                        132 9$:	_drop VSIZE 
      000C98 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C9A 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000C9B                        150 insert_line:
      000C9B                        151 	_vars VSIZE 
      000C9B 52 08            [ 2]    1     sub sp,#VSIZE 
      000C9D CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CA0 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CA3 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CA5 AE 00 02         [ 2]  156 	ldw x,#2 
      000CA8 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CAC A1 03            [ 1]  158 	cp a,#3
      000CAE 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CB0 5F               [ 1]  160 	clrw x 
      000CB1 97               [ 1]  161 	ld xl,a
      000CB2 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CB4 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CB7 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CB9 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CBC 20 38            [ 2]  166 	jra 4$
      000CBE 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CC2 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CC4 AE 00 02         [ 2]  170 	ldw x,#2 
      000CC7 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CCB 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CCC 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CCE 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CD0 4F               [ 1]  177 	clr a 
      000CD1 CD 0C 17         [ 4]  178 	call search_lineno 
      000CD4 5D               [ 2]  179 	tnzw x 
      000CD5 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000CD7 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000CD9 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000CDB 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000CDD CD 0C 42         [ 4]  188 	call del_line
      000CE0                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000CE0 A6 03            [ 1]  192 	ld a,#3
      000CE2 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000CE4 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000CE6 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000CE8 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000CEB 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000CED 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000CEF 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000CF1 CD 0C 6F         [ 4]  204 	call create_gap
      000CF4 20 06            [ 2]  205 	jra 5$
      000CF6                        206 4$: 
      000CF6 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000CF9 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000CFC 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000CFE CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D01 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D05 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D07 CD 13 84         [ 4]  214 	call move 
      000D0A                        215 insert_ln_exit:	
      000D0A                        216 	_drop VSIZE
      000D0A 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D0C 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D0D                        233 parse_quote: 
      000D0D                        234 	_vars VSIZE 
      000D0D 52 02            [ 2]    1     sub sp,#VSIZE 
      000D0F 4F               [ 1]  235 	clr a
      000D10 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D12                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000D12 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D15 27 24            [ 1]  239 	jreq 6$
      000D17 72 5C 00 01      [ 1]  240 	inc in 
      000D1B 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D1D A6 5C            [ 1]  242 	ld a,#'\
      000D1F 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D21 26 0A            [ 1]  244 	jrne 3$
      000D23 0F 01            [ 1]  245 	clr (PREV,sp)
      000D25 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D27 AD 1C            [ 4]  247 	callr convert_escape
      000D29 F7               [ 1]  248 	ld (x),a 
      000D2A 5C               [ 1]  249 	incw x 
      000D2B 20 E5            [ 2]  250 	jra 2$
      000D2D                        251 3$:
      000D2D 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D2F A1 5C            [ 1]  253 	cp a,#'\'
      000D31 27 DD            [ 1]  254 	jreq 1$
      000D33 A1 22            [ 1]  255 	cp a,#'"
      000D35 27 04            [ 1]  256 	jreq 6$ 
      000D37 F7               [ 1]  257 	ld (x),a 
      000D38 5C               [ 1]  258 	incw x 
      000D39 20 D7            [ 2]  259 	jra 2$
      000D3B                        260 6$:
      000D3B 7F               [ 1]  261 	clr (x)
      000D3C 5C               [ 1]  262 	incw x 
      000D3D 90 93            [ 1]  263 	ldw y,x 
      000D3F 5F               [ 1]  264 	clrw x 
      000D40 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D42                        266 	_drop VSIZE
      000D42 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D44 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D45                        278 convert_escape:
      000D45 89               [ 2]  279 	pushw x 
      000D46 AE 0D 5A         [ 2]  280 	ldw x,#escaped 
      000D49 F1               [ 1]  281 1$:	cp a,(x)
      000D4A 27 06            [ 1]  282 	jreq 2$
      000D4C 7D               [ 1]  283 	tnz (x)
      000D4D 27 09            [ 1]  284 	jreq 3$
      000D4F 5C               [ 1]  285 	incw x 
      000D50 20 F7            [ 2]  286 	jra 1$
      000D52 1D 0D 5A         [ 2]  287 2$: subw x,#escaped 
      000D55 9F               [ 1]  288 	ld a,xl 
      000D56 AB 07            [ 1]  289 	add a,#7
      000D58 85               [ 2]  290 3$:	popw x 
      000D59 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    292 
      000D5A 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D62                        310 parse_integer: ; { -- n }
      000D62 89               [ 2]  311 	pushw x 	
      000D63 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D65 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D67 A1 24            [ 1]  314 	cp a,#'$
      000D69 26 04            [ 1]  315 	jrne 2$ 
      000D6B                        316     _drop #1
      000D6B 5B 01            [ 2]    1     addw sp,##1 
      000D6D 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D6F F7               [ 1]  318 2$:	ld (x),a 
      000D70 5C               [ 1]  319 	incw x 
      000D71 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000D74 72 5C 00 01      [ 1]  321 	inc in 
      000D78 CD 18 7A         [ 4]  322 	call to_upper 
      000D7B 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000D7D CD 0D FF         [ 4]  324 	call is_digit 
      000D80 25 ED            [ 1]  325 	jrc 2$
      000D82 A6 10            [ 1]  326 	ld a,#16 
      000D84 11 01            [ 1]  327 	cp a,(BASE,sp)
      000D86 26 0A            [ 1]  328 	jrne 3$ 
      000D88 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000D8A A1 41            [ 1]  330 	cp a,#'A 
      000D8C 2B 04            [ 1]  331 	jrmi 3$ 
      000D8E A1 47            [ 1]  332 	cp a,#'G 
      000D90 2B DD            [ 1]  333 	jrmi 2$ 
      000D92 72 5A 00 01      [ 1]  334 3$: dec in 	
      000D96 7F               [ 1]  335     clr (x)
      000D97 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000D99 CD 18 86         [ 4]  337 	call atoi24
      000D9C 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000D9E C6 00 0C         [ 1]  339 	ld a,acc24 
      000DA1 90 F7            [ 1]  340 	ld (y),a 
      000DA3 90 5C            [ 1]  341 	incw y  
      000DA5 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DA8 90 FF            [ 2]  343 	ldw (y),x 
      000DAA 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000DAE A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DB0                        346 	_drop VSIZE  
      000DB0 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DB2 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DB3                        364 parse_binary: ; { -- n }
      000DB3 4B 00            [ 1]  365 	push #0
      000DB5 4B 00            [ 1]  366 	push #0
      000DB7 4B 00            [ 1]  367 	push #0
      000DB9                        368 2$:	
      000DB9 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DBC 72 5C 00 01      [ 1]  370 	inc in 
      000DC0 A1 30            [ 1]  371 	cp a,#'0 
      000DC2 27 06            [ 1]  372 	jreq 3$
      000DC4 A1 31            [ 1]  373 	cp a,#'1 
      000DC6 27 02            [ 1]  374 	jreq 3$ 
      000DC8 20 0B            [ 2]  375 	jra bin_exit 
      000DCA A0 30            [ 1]  376 3$: sub a,#'0 
      000DCC 46               [ 1]  377 	rrc a
      000DCD 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DCF 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DD1 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000DD3 20 E4            [ 2]  381 	jra 2$  
      000DD5                        382 bin_exit:
      000DD5 72 5A 00 01      [ 1]  383 	dec in 
      000DD9 90 93            [ 1]  384 	ldw y,x
      000DDB 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000DDD 90 F7            [ 1]  386 	ld (y),a 
      000DDF 90 5C            [ 1]  387 	incw y 
      000DE1 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000DE3 90 FF            [ 2]  389 	ldw (y),x 
      000DE5 72 A9 00 02      [ 2]  390 	addw y,#2  
      000DE9 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000DEB                        392 	_drop VSIZE 
      000DEB 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DED 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000DEE                        402 is_alpha::
      000DEE A1 41            [ 1]  403 	cp a,#'A 
      000DF0 8C               [ 1]  404 	ccf 
      000DF1 24 0B            [ 1]  405 	jrnc 9$ 
      000DF3 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000DF5 25 07            [ 1]  407 	jrc 9$ 
      000DF7 A1 61            [ 1]  408 	cp a,#'a 
      000DF9 8C               [ 1]  409 	ccf 
      000DFA 24 02            [ 1]  410 	jrnc 9$
      000DFC A1 7B            [ 1]  411 	cp a,#'z+1
      000DFE 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000DFF                        421 is_digit::
      000DFF A1 30            [ 1]  422 	cp a,#'0
      000E01 25 03            [ 1]  423 	jrc 1$
      000E03 A1 3A            [ 1]  424     cp a,#'9+1
      000E05 8C               [ 1]  425 	ccf 
      000E06 8C               [ 1]  426 1$:	ccf 
      000E07 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E08                        438 is_alnum::
      000E08 CD 0D FF         [ 4]  439 	call is_digit
      000E0B 25 03            [ 1]  440 	jrc 1$ 
      000E0D CD 0D EE         [ 4]  441 	call is_alpha
      000E10 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000E11                        453 is_symbol_char: 
      000E11 A1 5F            [ 1]  454 	cp a,#'_ 
      000E13 26 03            [ 1]  455 	jrne 1$
      000E15 99               [ 1]  456 	scf 
      000E16 20 03            [ 2]  457 	jra 9$ 
      000E18 CD 0E 08         [ 4]  458 1$:	call is_alnum 
      000E1B 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E1C                        473 parse_symbol:
      000E1C 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E1D                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E1D CD 18 7A         [ 4]  477 	call to_upper  
      000E20 F7               [ 1]  478 	ld (x), a 
      000E21 5C               [ 1]  479 	incw x
      000E22 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E25 72 5C 00 01      [ 1]  481 	inc in 
      000E29 CD 0E 11         [ 4]  482 	call is_symbol_char 
      000E2C 25 EF            [ 1]  483 	jrc symb_loop 
      000E2E 7F               [ 1]  484 	clr (x)
      000E2F 72 5A 00 01      [ 1]  485 	dec in  
      000E33 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E34                        502 parse_keyword: 
      000E34 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E35 CD 0E 1C         [ 4]  504 	call parse_symbol
      000E38 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E3A E6 02            [ 1]  506 	ld a,(2,x)
      000E3C 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E3E E6 01            [ 1]  509 	ld a,(1,x) 
      000E40 A0 41            [ 1]  510 	sub a,#'A 
      000E42 AE 00 03         [ 2]  511 	ldw x,#3 
      000E45 42               [ 4]  512 	mul x,a 
      000E46 1C 00 34         [ 2]  513 	addw x,#vars 
      000E49 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E4B 20 36            [ 2]  515 	jra 4$ 
      000E4D                        516 2$: ; check for keyword, otherwise syntax error.
      000E4D                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E4D AE 34 A6         [ 2]    1     ldw x,#kword_dict+2
      000E50 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E52 90 5C            [ 1]  519 	incw y 
      000E54 CD 19 07         [ 4]  520 	call search_dict
      000E57 4D               [ 1]  521 	tnz a
      000E58 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E5A 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E5C A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E5E 90 F7            [ 1]  527 	ld (y),a 
      000E60 90 5C            [ 1]  528 	incw y
      000E62 93               [ 1]  529 	ldw x,y 
      000E63 CD 13 58         [ 4]  530 	call strlen
      000E66 A1 0F            [ 1]  531 	cp a,#NAME_MAX_LEN 
      000E68 23 02            [ 2]  532 	jrule 22$ 
      000E6A A6 0F            [ 1]  533 	ld a,#NAME_MAX_LEN 
      000E6C                        534 22$:	
      000E6C 88               [ 1]  535 	push a 
      000E6D                        536 24$:
      000E6D 90 F6            [ 1]  537     ld a,(y)
      000E6F 27 09            [ 1]  538 	jreq 3$
      000E71 90 5C            [ 1]  539 	incw y
      000E73 0A 01            [ 1]  540 	dec (1,sp) 
      000E75 26 F6            [ 1]  541 	jrne 24$
      000E77 4F               [ 1]  542 	clr a 
      000E78 90 F7            [ 1]  543 	ld (y),a 
      000E7A 90 5C            [ 1]  544 3$: incw y 
      000E7C                        545 	_drop 1 
      000E7C 5B 01            [ 2]    1     addw sp,#1 
      000E7E A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000E80 5F               [ 1]  547 	clrw x 
      000E81 20 1B            [ 2]  548 	jra 5$ 
      000E83                        549 4$:	
      000E83 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000E85 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000E87 2B 06            [ 1]  552 	jrmi 41$
      000E89 90 F7            [ 1]  553 	ld (y),a 
      000E8B 90 5C            [ 1]  554 	incw y 
      000E8D 20 0F            [ 2]  555 	jra 5$ 
      000E8F                        556 41$:	
      000E8F A3 1C 80         [ 2]  557 	cpw x,#let  
      000E92 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000E94 90 F7            [ 1]  559 	ld (y),a 
      000E96 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E98 90 FF            [ 2]  561 	ldw (y),x
      000E9A 72 A9 00 02      [ 2]  562 	addw y,#2  
      000E9E                        563 5$:	_drop VSIZE 
      000E9E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EA0 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000EA1                        575 skip:
      000EA1 88               [ 1]  576 	push a
      000EA2 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000EA5 27 0A            [ 1]  578 	jreq 2$
      000EA7 11 01            [ 1]  579 	cp a,(C,sp)
      000EA9 26 06            [ 1]  580 	jrne 2$
      000EAB 72 5C 00 01      [ 1]  581 	inc in
      000EAF 20 F1            [ 2]  582 	jra 1$
      000EB1                        583 2$: _drop 1 
      000EB1 5B 01            [ 2]    1     addw sp,#1 
      000EB3 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EB4                        609 get_token:: 
      000EB4                        610 	_vars VSIZE
      000EB4 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EB6                        616 0$: 
      000EB6 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EBA A6 20            [ 1]  618 	ld a,#SPACE
      000EBC CD 0E A1         [ 4]  619 	call skip
      000EBF 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EC4 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EC7 26 05            [ 1]  622 	jrne 1$
      000EC9 90 93            [ 1]  623 	ldw y,x 
      000ECB CC 10 65         [ 2]  624 	jp token_exit ; end of line 
      000ECE 72 5C 00 01      [ 1]  625 1$:	inc in 
      000ED2 CD 18 7A         [ 4]  626 	call to_upper 
      000ED5 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000ED7                        629 str_tst:  	
      000ED7                        630 	_case '"' nbr_tst
      000ED7 A6 22            [ 1]    1 	ld a,#'"' 
      000ED9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EDB 26 0A            [ 1]    3 	jrne nbr_tst
      000EDD A6 02            [ 1]  631 	ld a,#TK_QSTR
      000EDF F7               [ 1]  632 	ld (x),a 
      000EE0 5C               [ 1]  633 	incw x 
      000EE1 CD 0D 0D         [ 4]  634 	call parse_quote
      000EE4 CC 10 65         [ 2]  635 	jp token_exit
      000EE7                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000EE7 A6 24            [ 1]  638 	ld a,#'$'
      000EE9 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000EEB 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000EED A6 26            [ 1]  642 	ld a,#'&
      000EEF 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000EF1 26 0A            [ 1]  644 	jrne 0$
      000EF3 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000EF5 F7               [ 1]  646 	ld (x),a 
      000EF6 5C               [ 1]  647 	incw x 
      000EF7 CD 0D B3         [ 4]  648 	call parse_binary ; expect binary integer 
      000EFA CC 10 65         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000EFD 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000EFF CD 0D FF         [ 4]  652 	call is_digit
      000F02 24 0C            [ 1]  653 	jrnc 3$
      000F04 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F06 F7               [ 1]  655 	ld (x),a 
      000F07 5C               [ 1]  656 	incw x 
      000F08 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F0A CD 0D 62         [ 4]  658 	call parse_integer 
      000F0D CC 10 65         [ 2]  659 	jp token_exit 
      000F10                        660 3$: 
      000F10                        661 	_case '(' bkslsh_tst 
      000F10 A6 28            [ 1]    1 	ld a,#'(' 
      000F12 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F14 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000F16 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F18 CC 10 61         [ 2]  663 	jp token_char   	
      000F1B                        664 bkslsh_tst: ; character token 
      000F1B                        665 	_case '\',rparnt_tst
      000F1B A6 5C            [ 1]    1 	ld a,#'\' 
      000F1D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F1F 26 16            [ 1]    3 	jrne rparnt_tst
      000F21 A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F23 F7               [ 1]  667 	ld (x),a 
      000F24 5C               [ 1]  668 	incw x 
      000F25 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F28 F7               [ 1]  670 	ld (x),a 
      000F29 5C               [ 1]  671 	incw x
      000F2A 90 93            [ 1]  672 	ldw y,x 	 
      000F2C 72 5C 00 01      [ 1]  673 	inc in  
      000F30 5F               [ 1]  674 	clrw x 
      000F31 97               [ 1]  675 	ld xl,a 
      000F32 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F34 CC 10 65         [ 2]  677 	jp token_exit 
      000F37                        678 rparnt_tst:		
      000F37                        679 	_case ')' colon_tst 
      000F37 A6 29            [ 1]    1 	ld a,#')' 
      000F39 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F3B 26 05            [ 1]    3 	jrne colon_tst
      000F3D A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F3F CC 10 61         [ 2]  681 	jp token_char
      000F42                        682 colon_tst:
      000F42                        683 	_case ':' comma_tst 
      000F42 A6 3A            [ 1]    1 	ld a,#':' 
      000F44 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F46 26 05            [ 1]    3 	jrne comma_tst
      000F48 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F4A CC 10 61         [ 2]  685 	jp token_char  
      000F4D                        686 comma_tst:
      000F4D                        687 	_case COMMA sharp_tst 
      000F4D A6 2C            [ 1]    1 	ld a,#COMMA 
      000F4F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F51 26 05            [ 1]    3 	jrne sharp_tst
      000F53 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F55 CC 10 61         [ 2]  689 	jp token_char
      000F58                        690 sharp_tst:
      000F58                        691 	_case SHARP dash_tst 
      000F58 A6 23            [ 1]    1 	ld a,#SHARP 
      000F5A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F5C 26 05            [ 1]    3 	jrne dash_tst
      000F5E A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F60 CC 10 61         [ 2]  693 	jp token_char  	 	 
      000F63                        694 dash_tst: 	
      000F63                        695 	_case '-' at_tst 
      000F63 A6 2D            [ 1]    1 	ld a,#'-' 
      000F65 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F67 26 05            [ 1]    3 	jrne at_tst
      000F69 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F6B CC 10 61         [ 2]  697 	jp token_char 
      000F6E                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F6E                        699 	_case '@' qmark_tst 
      000F6E A6 40            [ 1]    1 	ld a,#'@' 
      000F70 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F72 26 05            [ 1]    3 	jrne qmark_tst
      000F74 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000F76 CC 10 61         [ 2]  701 	jp token_char
      000F79                        702 qmark_tst:
      000F79                        703 	_case '?' tick_tst 
      000F79 A6 3F            [ 1]    1 	ld a,#'?' 
      000F7B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7D 26 12            [ 1]    3 	jrne tick_tst
      000F7F A6 80            [ 1]  704 	ld a,#TK_CMD  
      000F81 F7               [ 1]  705 	ld (x),a 
      000F82 5C               [ 1]  706 	incw x 
      000F83 90 93            [ 1]  707 	ldw y,x 
      000F85 AE 1F 73         [ 2]  708 	ldw x,#print
      000F88 90 FF            [ 2]  709 	ldw (y),x 
      000F8A 72 A9 00 02      [ 2]  710 	addw y,#2
      000F8E CC 10 65         [ 2]  711 	jp token_exit
      000F91                        712 tick_tst: ; comment 
      000F91                        713 	_case TICK plus_tst 
      000F91 A6 27            [ 1]    1 	ld a,#TICK 
      000F93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F95 26 2B            [ 1]    3 	jrne plus_tst
      000F97 A6 80            [ 1]  714 	ld a,#TK_CMD
      000F99 F7               [ 1]  715 	ld (x),a 
      000F9A 5C               [ 1]  716 	incw x
      000F9B 90 AE 20 BB      [ 2]  717 	ldw y,#remark 
      000F9F FF               [ 2]  718 	ldw (x),y 
      000FA0 1C 00 02         [ 2]  719 	addw x,#2  
      000FA3                        720 copy_comment:
      000FA3 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FA7 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FAB 90 89            [ 2]  723 	pushw y 
      000FAD CD 13 74         [ 4]  724 	call strcpy
      000FB0 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FB3 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FB5 17 01            [ 2]  727 	ldw (1,sp),y 
      000FB7 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FBA                        729 	_drop 2 
      000FBA 5B 02            [ 2]    1     addw sp,#2 
      000FBC 4F               [ 1]  730 	clr a 
      000FBD 90 93            [ 1]  731 	ldw y,x 
      000FBF CC 10 65         [ 2]  732 	jp token_exit 
      000FC2                        733 plus_tst:
      000FC2                        734 	_case '+' star_tst 
      000FC2 A6 2B            [ 1]    1 	ld a,#'+' 
      000FC4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC6 26 05            [ 1]    3 	jrne star_tst
      000FC8 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FCA CC 10 61         [ 2]  736 	jp token_char 
      000FCD                        737 star_tst:
      000FCD                        738 	_case '*' slash_tst 
      000FCD A6 2A            [ 1]    1 	ld a,#'*' 
      000FCF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000FD1 26 05            [ 1]    3 	jrne slash_tst
      000FD3 A6 20            [ 1]  739 	ld a,#TK_MULT 
      000FD5 CC 10 61         [ 2]  740 	jp token_char 
      000FD8                        741 slash_tst: 
      000FD8                        742 	_case '/' prcnt_tst 
      000FD8 A6 2F            [ 1]    1 	ld a,#'/' 
      000FDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDC 26 05            [ 1]    3 	jrne prcnt_tst
      000FDE A6 21            [ 1]  743 	ld a,#TK_DIV 
      000FE0 CC 10 61         [ 2]  744 	jp token_char 
      000FE3                        745 prcnt_tst:
      000FE3                        746 	_case '%' eql_tst 
      000FE3 A6 25            [ 1]    1 	ld a,#'%' 
      000FE5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE7 26 05            [ 1]    3 	jrne eql_tst
      000FE9 A6 22            [ 1]  747 	ld a,#TK_MOD
      000FEB CC 10 61         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      000FEE                        750 eql_tst:
      000FEE                        751 	_case '=' gt_tst 		
      000FEE A6 3D            [ 1]    1 	ld a,#'=' 
      000FF0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF2 26 05            [ 1]    3 	jrne gt_tst
      000FF4 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      000FF6 CC 10 61         [ 2]  753 	jp token_char 
      000FF9                        754 gt_tst:
      000FF9                        755 	_case '>' lt_tst 
      000FF9 A6 3E            [ 1]    1 	ld a,#'>' 
      000FFB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FFD 26 23            [ 1]    3 	jrne lt_tst
      000FFF A6 31            [ 1]  756 	ld a,#TK_GT 
      001001 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001003 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001006 72 5C 00 01      [ 1]  759 	inc in 
      00100A A1 3D            [ 1]  760 	cp a,#'=
      00100C 26 04            [ 1]  761 	jrne 1$
      00100E A6 33            [ 1]  762 	ld a,#TK_GE 
      001010 20 4F            [ 2]  763 	jra token_char  
      001012 A1 3C            [ 1]  764 1$: cp a,#'<
      001014 26 04            [ 1]  765 	jrne 2$
      001016 A6 35            [ 1]  766 	ld a,#TK_NE 
      001018 20 47            [ 2]  767 	jra token_char 
      00101A 72 5A 00 01      [ 1]  768 2$: dec in
      00101E 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      001020 20 3F            [ 2]  770 	jra token_char 	 
      001022                        771 lt_tst:
      001022                        772 	_case '<' other
      001022 A6 3C            [ 1]    1 	ld a,#'<' 
      001024 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001026 26 23            [ 1]    3 	jrne other
      001028 A6 34            [ 1]  773 	ld a,#TK_LT 
      00102A 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00102C 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      00102F 72 5C 00 01      [ 1]  776 	inc in 
      001033 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001035 26 04            [ 1]  778 	jrne 1$
      001037 A6 36            [ 1]  779 	ld a,#TK_LE 
      001039 20 26            [ 2]  780 	jra token_char 
      00103B A1 3E            [ 1]  781 1$: cp a,#'>
      00103D 26 04            [ 1]  782 	jrne 2$
      00103F A6 35            [ 1]  783 	ld a,#TK_NE 
      001041 20 1E            [ 2]  784 	jra token_char 
      001043 72 5A 00 01      [ 1]  785 2$: dec in 
      001047 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001049 20 16            [ 2]  787 	jra token_char 	
      00104B                        788 other: ; not a special character 	 
      00104B 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00104D CD 0D EE         [ 4]  790 	call is_alpha 
      001050 25 03            [ 1]  791 	jrc 30$ 
      001052 CC 16 38         [ 2]  792 	jp syntax_error 
      001055                        793 30$: 
      001055 CD 0E 34         [ 4]  794 	call parse_keyword
      001058 A3 20 BB         [ 2]  795 	cpw x,#remark 
      00105B 26 08            [ 1]  796 	jrne token_exit 
      00105D 93               [ 1]  797 	ldw x,y 
      00105E CC 0F A3         [ 2]  798 	jp copy_comment 
      001061                        799 token_char:
      001061 F7               [ 1]  800 	ld (x),a 
      001062 5C               [ 1]  801 	incw x
      001063 90 93            [ 1]  802 	ldw y,x 
      001065                        803 token_exit:
      001065                        804 	_drop VSIZE 
      001065 5B 02            [ 2]    1     addw sp,#VSIZE 
      001067 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001068                        825 compile::
      001068 90 89            [ 2]  826 	pushw y 
      00106A                        827 	_vars VSIZE 
      00106A 52 02            [ 2]    1     sub sp,#VSIZE 
      00106C 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      001071 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      001075 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001077 AE 00 00         [ 2]  831 	ldw x,#0
      00107A CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      00107D C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      001080 AE 16 E3         [ 2]  834 	ldw x,#pad+3
      001083 72 5F 00 01      [ 1]  835 	clr in 
      001087 CD 0E B4         [ 4]  836 	call get_token
      00108A A1 84            [ 1]  837 	cp a,#TK_INTGR
      00108C 26 11            [ 1]  838 	jrne 2$
      00108E A3 00 01         [ 2]  839 	cpw x,#1 
      001091 2A 05            [ 1]  840 	jrpl 1$
      001093 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      001095 CC 16 3A         [ 2]  842 	jp tb_error
      001098 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      00109B 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      00109F 90 A3 17 60      [ 2]  845 2$:	cpw y,#xstack_full 
      0010A3 25 05            [ 1]  846 	jrult 3$
      0010A5 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010A7 CC 16 3A         [ 2]  848 	jp tb_error 
      0010AA                        849 3$:	
      0010AA 93               [ 1]  850 	ldw x,y 
      0010AB CD 0E B4         [ 4]  851 	call get_token 
      0010AE A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010B0 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010B2 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010B6 90 9F            [ 1]  856     ld a,yl
      0010B8 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010BB CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010BE E7 02            [ 1]  859 	ld (2,x),a 
      0010C0 FE               [ 2]  860 	ldw x,(x)
      0010C1 27 09            [ 1]  861 	jreq 10$
      0010C3 CD 0C 9B         [ 4]  862 	call insert_line
      0010C6 72 5F 00 03      [ 1]  863 	clr  count 
      0010CA 20 0F            [ 2]  864 	jra  11$ 
      0010CC                        865 10$: ; line# is zero 
      0010CC CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010CF CF 00 04         [ 2]  867 	ldw basicptr,x 
      0010D2 E6 02            [ 1]  868 	ld a,(2,x)
      0010D4 C7 00 03         [ 1]  869 	ld count,a 
      0010D7 35 03 00 01      [ 1]  870 	mov in,#3 
      0010DB                        871 11$:
      0010DB                        872 	_drop VSIZE 
      0010DB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010DD 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      0010E1 90 85            [ 2]  874 	popw y 
      0010E3 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      0010E4                         48 cpy_cmd_name:
      0010E4 5D               [ 2]   49 	tnzw x 
      0010E5 27 14            [ 1]   50 	jreq 10$
      0010E7 F6               [ 1]   51 	ld a,(x)
      0010E8 5C               [ 1]   52 	incw x
      0010E9 A4 0F            [ 1]   53 	and a,#15  
      0010EB 88               [ 1]   54 	push a 
      0010EC 0D 01            [ 1]   55     tnz (1,sp) 
      0010EE 27 0A            [ 1]   56 	jreq 9$
      0010F0 F6               [ 1]   57 1$:	ld a,(x)
      0010F1 90 F7            [ 1]   58 	ld (y),a  
      0010F3 5C               [ 1]   59 	incw x
      0010F4 90 5C            [ 1]   60 	incw y 
      0010F6 0A 01            [ 1]   61 	dec (1,sp)	 
      0010F8 26 F6            [ 1]   62 	jrne 1$
      0010FA 84               [ 1]   63 9$: pop a 
      0010FB                         64 10$: 
      0010FB 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      0010FC                         75 add_space:
      0010FC 90 5A            [ 2]   76 	decw y 
      0010FE 90 F6            [ 1]   77 	ld a,(y)
      001100 90 5C            [ 1]   78 	incw y
      001102 A1 29            [ 1]   79 	cp a,#') 
      001104 27 05            [ 1]   80 	jreq 0$
      001106 CD 0E 08         [ 4]   81 	call is_alnum 
      001109 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00110B                         83 0$: 
      00110B A6 20            [ 1]   84 	ld a,#SPACE 
      00110D 90 F7            [ 1]   85 	ld (y),a 
      00110F 90 5C            [ 1]   86 	incw y 
      001111 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001112                         99 right_align::
      001112 88               [ 1]  100 	push a 
      001113 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001115 C1 00 23         [ 1]  102 	cp a,tab_width 
      001118 2A 08            [ 1]  103 	jrpl 1$
      00111A A6 20            [ 1]  104 	ld a,#SPACE 
      00111C 5A               [ 2]  105 	decw x
      00111D F7               [ 1]  106 	ld (x),a  
      00111E 0C 01            [ 1]  107 	inc (1,sp)
      001120 20 F1            [ 2]  108 	jra 0$ 
      001122 84               [ 1]  109 1$: pop a 	
      001123 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001124                        123 cpy_quote:
      001124 A6 22            [ 1]  124 	ld a,#'"
      001126 90 F7            [ 1]  125 	ld (y),a 
      001128 90 5C            [ 1]  126 	incw y 
      00112A 89               [ 2]  127 	pushw x 
      00112B CD 17 B5         [ 4]  128 	call skip_string 
      00112E 85               [ 2]  129 	popw x 
      00112F F6               [ 1]  130 1$:	ld a,(x)
      001130 27 30            [ 1]  131 	jreq 9$
      001132 5C               [ 1]  132 	incw x 
      001133 A1 20            [ 1]  133 	cp a,#SPACE 
      001135 25 0E            [ 1]  134 	jrult 3$
      001137 90 F7            [ 1]  135 	ld (y),a
      001139 90 5C            [ 1]  136 	incw y 
      00113B A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00113D 26 F0            [ 1]  138 	jrne 1$ 
      00113F                        139 2$:
      00113F 90 F7            [ 1]  140 	ld (y),a
      001141 90 5C            [ 1]  141 	incw y  
      001143 20 EA            [ 2]  142 	jra 1$
      001145 88               [ 1]  143 3$: push a 
      001146 A6 5C            [ 1]  144 	ld a,#'\
      001148 90 F7            [ 1]  145 	ld (y),a 
      00114A 90 5C            [ 1]  146 	incw y  
      00114C 84               [ 1]  147 	pop a 
      00114D A0 07            [ 1]  148 	sub a,#7
      00114F C7 00 0E         [ 1]  149 	ld acc8,a 
      001152 72 5F 00 0D      [ 1]  150 	clr acc16
      001156 89               [ 2]  151 	pushw x
      001157 AE 0D 5A         [ 2]  152 	ldw x,#escaped 
      00115A 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00115E F6               [ 1]  154 	ld a,(x)
      00115F 85               [ 2]  155 	popw x
      001160 20 DD            [ 2]  156 	jra 2$
      001162 A6 22            [ 1]  157 9$: ld a,#'"
      001164 90 F7            [ 1]  158 	ld (y),a 
      001166 90 5C            [ 1]  159 	incw y  
      001168 5C               [ 1]  160 	incw x 
      001169 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      00116A                        171 var_name::
      00116A 1D 00 34         [ 2]  172 		subw x,#vars 
      00116D A6 03            [ 1]  173 		ld a,#3
      00116F 62               [ 2]  174 		div x,a 
      001170 9F               [ 1]  175 		ld a,xl 
      001171 AB 41            [ 1]  176 		add a,#'A 
      001173 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      001174                        195 decompile::
      001174                        196 	_vars VSIZE
      001174 52 04            [ 2]    1     sub sp,#VSIZE 
      001176 C6 00 0A         [ 1]  197 	ld a,base
      001179 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      00117B C6 00 23         [ 1]  199 	ld a,tab_width 
      00117E 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      001180 17 03            [ 2]  201 	ldw (STR,sp),y   
      001182 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      001186 35 0A 00 0A      [ 1]  203 	mov base,#10
      00118A 35 05 00 23      [ 1]  204 	mov tab_width,#5
      00118E 72 5F 00 0C      [ 1]  205 	clr acc24 
      001192 CF 00 0D         [ 2]  206 	ldw acc16,x
      001195 4F               [ 1]  207 	clr a ; unsigned conversion 
      001196 CD 18 21         [ 4]  208 	call itoa  
      001199 CD 11 12         [ 4]  209 	call right_align 
      00119C 88               [ 1]  210 	push a 
      00119D 90 93            [ 1]  211 1$:	ldw y,x ; source
      00119F 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011A1 CD 13 74         [ 4]  213 	call strcpy 
      0011A4 90 5F            [ 1]  214 	clrw y 
      0011A6 84               [ 1]  215 	pop a 
      0011A7 90 97            [ 1]  216 	ld yl,a 
      0011A9 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011AC A6 20            [ 1]  218 	ld a,#SPACE 
      0011AE 90 F7            [ 1]  219 	ld (y),a 
      0011B0 90 5C            [ 1]  220 	incw y 
      0011B2 72 5F 00 23      [ 1]  221 	clr tab_width
      0011B6 AE 00 03         [ 2]  222 	ldw x,#3
      0011B9 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011BC                        224 decomp_loop:
      0011BC 90 89            [ 2]  225 	pushw y
      0011BE CD 17 9C         [ 4]  226 	call next_token 
      0011C1 90 85            [ 2]  227 	popw y 
      0011C3 4D               [ 1]  228 	tnz a  
      0011C4 26 03            [ 1]  229 	jrne 1$
      0011C6 CC 12 E9         [ 2]  230 	jp 20$
      0011C9 2B 03            [ 1]  231 1$:	jrmi 2$
      0011CB CC 12 5A         [ 2]  232 	jp 6$
      0011CE                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011CE A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011D0 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      0011D2 CD 10 FC         [ 4]  237 	call add_space
      0011D5 CD 17 C4         [ 4]  238 	call get_addr   
      0011D8 CD 11 6A         [ 4]  239 	call var_name
      0011DB 90 F7            [ 1]  240 	ld (y),a 
      0011DD 90 5C            [ 1]  241 	incw y  
      0011DF 20 DB            [ 2]  242 	jra decomp_loop
      0011E1                        243 3$:
      0011E1 A1 84            [ 1]  244 	cp a,#TK_INTGR
      0011E3 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0011E5 CD 17 CE         [ 4]  247 	call get_int24 
      0011E8 C7 00 0C         [ 1]  248 	ld acc24,a 
      0011EB CF 00 0D         [ 2]  249 	ldw acc16,x 
      0011EE CD 10 FC         [ 4]  250 	call add_space
      0011F1 90 89            [ 2]  251 	pushw y 
      0011F3 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      0011F5 CD 18 21         [ 4]  253 	call itoa  
      0011F8 16 01            [ 2]  254 	ldw y,(1,sp) 
      0011FA 88               [ 1]  255 	push a 
      0011FB 51               [ 1]  256 	exgw x,y 
      0011FC CD 13 74         [ 4]  257 	call strcpy 
      0011FF 90 5F            [ 1]  258 	clrw y
      001201 84               [ 1]  259 	pop a  
      001202 90 97            [ 1]  260 	ld yl,a 
      001204 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001207                        262 	_drop 2 
      001207 5B 02            [ 2]    1     addw sp,#2 
      001209 20 B1            [ 2]  263 	jra decomp_loop
      00120B                        264 4$: ; dictionary keyword
      00120B A1 87            [ 1]  265 	cp a,#TK_NOT 
      00120D 24 39            [ 1]  266 	jruge 50$ 
      00120F FE               [ 2]  267 	ldw x,(x)
      001210 72 5C 00 01      [ 1]  268 	inc in 
      001214 72 5C 00 01      [ 1]  269 	inc in 
      001218 A3 20 BB         [ 2]  270 	cpw x,#remark 
      00121B 26 23            [ 1]  271 	jrne 5$
      00121D CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      001220 CD 10 FC         [ 4]  274 	call add_space
      001223 A6 27            [ 1]  275 	ld a,#''
      001225 90 F7            [ 1]  276 	ld (y),a 
      001227 90 5C            [ 1]  277 	incw y 
      001229                        278 46$:
      001229 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00122D 72 5C 00 01      [ 1]  280 	inc in  
      001231 90 F7            [ 1]  281 	ld (y),a 
      001233 90 5C            [ 1]  282 	incw y 
      001235 C6 00 01         [ 1]  283 	ld a,in 
      001238 C1 00 03         [ 1]  284 	cp a,count 
      00123B 2B EC            [ 1]  285 	jrmi 46$
      00123D CC 12 E9         [ 2]  286 	jp 20$  
      001240 A3 1C 80         [ 2]  287 5$: cpw x,#let  
      001243 26 05            [ 1]  288 	jrne 54$
      001245 CC 11 BC         [ 2]  289 	jp decomp_loop ; down display LET
      001248                        290 50$:
      001248 5F               [ 1]  291 	clrw x 
      001249 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      00124A                        297 54$: ; insert command name 
      00124A CD 10 FC         [ 4]  298 	call add_space  
      00124D 90 89            [ 2]  299 	pushw y
      00124F CD 13 24         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001252 90 85            [ 2]  301 	popw y 
      001254 CD 10 E4         [ 4]  302 	call cpy_cmd_name
      001257 CC 11 BC         [ 2]  303 	jp decomp_loop 
      00125A                        304 6$:
                                    305 ; label?
      00125A A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00125C 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00125E A6 20            [ 1]  309 	ld a,#32 
      001260 90 F7            [ 1]  310 	ld (y),a 
      001262 90 5C            [ 1]  311 	incw y 
      001264                        312 61$:
      001264 89               [ 2]  313 	pushw x 
      001265 CD 17 B5         [ 4]  314 	call skip_string 
      001268 85               [ 2]  315 	popw x 
      001269                        316 62$:	
      001269 F6               [ 1]  317 	ld a,(x)
      00126A 27 07            [ 1]  318 	jreq 63$ 
      00126C 5C               [ 1]  319 	incw x  
      00126D 90 F7            [ 1]  320 	ld (y),a 
      00126F 90 5C            [ 1]  321 	incw y 
      001271 20 F6            [ 2]  322 	jra 62$ 
      001273                        323 63$: 
      001273 A6 20            [ 1]  324 	ld a,#32 
      001275 90 F7            [ 1]  325 	ld (y),a 
      001277 90 5C            [ 1]  326 	incw y 
      001279 CC 11 BC         [ 2]  327 	jp decomp_loop
      00127C                        328 64$:
      00127C A1 02            [ 1]  329 	cp a,#TK_QSTR 
      00127E 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      001280 CD 10 FC         [ 4]  332 	call add_space
      001283 CD 11 24         [ 4]  333 	call cpy_quote  
      001286 CC 11 BC         [ 2]  334 	jp decomp_loop
      001289                        335 7$:
      001289 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      00128B 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      00128D CD 10 FC         [ 4]  339 	call add_space 
      001290 A6 5C            [ 1]  340 	ld a,#'\ 
      001292 90 F7            [ 1]  341 	ld (y),a 
      001294 90 5C            [ 1]  342 	incw y
      001296 F6               [ 1]  343 	ld a,(x)
      001297 72 5C 00 01      [ 1]  344 	inc in  
      00129B 20 06            [ 2]  345 	jra 81$
      00129D A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      00129F 26 09            [ 1]  347 	jrne 9$
      0012A1 A6 3A            [ 1]  348 	ld a,#':
      0012A3                        349 81$:
      0012A3 90 F7            [ 1]  350 	ld (y),a 
      0012A5 90 5C            [ 1]  351 	incw y 
      0012A7                        352 82$:
      0012A7 CC 11 BC         [ 2]  353 	jp decomp_loop
      0012AA                        354 9$: 
      0012AA A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0012AC 22 0A            [ 1]  356 	jrugt 10$ 
      0012AE A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012B0 5F               [ 1]  358 	clrw x 
      0012B1 97               [ 1]  359 	ld xl,a
      0012B2 1C 12 FF         [ 2]  360 	addw x,#single_char 
      0012B5 F6               [ 1]  361 	ld a,(x)
      0012B6 20 EB            [ 2]  362 	jra 81$ 
      0012B8                        363 10$: 
      0012B8 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012BA 22 0A            [ 1]  365 	jrugt 11$
      0012BC A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012BE 5F               [ 1]  367 	clrw x 
      0012BF 97               [ 1]  368 	ld xl,a 
      0012C0 1C 13 04         [ 2]  369 	addw x,#add_char 
      0012C3 F6               [ 1]  370 	ld a,(x)
      0012C4 20 DD            [ 2]  371 	jra 81$
      0012C6                        372 11$:
      0012C6 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012C8 22 0A            [ 1]  374 	jrugt 12$
      0012CA A0 20            [ 1]  375 	sub a,#TK_MULT
      0012CC 5F               [ 1]  376 	clrw x 
      0012CD 97               [ 1]  377 	ld xl,a 
      0012CE 1C 13 06         [ 2]  378 	addw x,#mul_char
      0012D1 F6               [ 1]  379 	ld a,(x)
      0012D2 20 CF            [ 2]  380 	jra 81$
      0012D4                        381 12$:
      0012D4 A0 31            [ 1]  382 	sub a,#TK_GT  
      0012D6 48               [ 1]  383 	sll a 
      0012D7 5F               [ 1]  384 	clrw x 
      0012D8 97               [ 1]  385 	ld xl,a 
      0012D9 1C 13 09         [ 2]  386 	addw x,#relop_str 
      0012DC FE               [ 2]  387 	ldw x,(x)
      0012DD F6               [ 1]  388 	ld a,(x)
      0012DE 5C               [ 1]  389 	incw x 
      0012DF 90 F7            [ 1]  390 	ld (y),a
      0012E1 90 5C            [ 1]  391 	incw y 
      0012E3 F6               [ 1]  392 	ld a,(x)
      0012E4 26 BD            [ 1]  393 	jrne 81$
      0012E6 CC 11 BC         [ 2]  394 	jp decomp_loop 
      0012E9                        395 20$: 
      0012E9 90 7F            [ 1]  396 	clr (y)
      0012EB 1E 03            [ 2]  397 	ldw x,(STR,sp)
      0012ED 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      0012EF C7 00 0A         [ 1]  399 	ld base,a 
      0012F2 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      0012F4 C7 00 23         [ 1]  401 	ld tab_width,a
      0012F7 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      0012FA 90 9F            [ 1]  403 	ld a,yl 
      0012FC                        404 	_drop VSIZE 
      0012FC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0012FE 81               [ 4]  405 	ret 
                                    406 
      0012FF 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001304 2B 2D                  408 add_char: .byte '+','-'
      001306 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001309 13 15 13 17 13 19 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             1C 13 21 13 1E
      001315 3E 00                  411 gt: .asciz ">"
      001317 3D 00                  412 equal: .asciz "="
      001319 3E 3D 00               413 ge: .asciz ">="
      00131C 3C 00                  414 lt: .asciz "<"
      00131E 3C 3D 00               415 le: .asciz "<="
      001321 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001324                        429 cmd_name:
      001324                        430 	_vars VSIZE 
      001324 52 04            [ 2]    1     sub sp,#VSIZE 
      001326 72 5F 00 0D      [ 1]  431 	clr acc16 
      00132A 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00132C AE 34 A4         [ 2]  433 	ldw x,#kword_dict	
      00132F 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      001331 E6 02            [ 1]  435 	ld a,(2,x)
      001333 A4 0F            [ 1]  436 	and a,#15 
      001335 C7 00 0E         [ 1]  437 	ld acc8,a 
      001338 1C 00 03         [ 2]  438 	addw x,#3
      00133B 72 BB 00 0D      [ 2]  439 	addw x,acc16
      00133F FE               [ 2]  440 	ldw x,(x) ; code address   
      001340 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001342 27 0C            [ 1]  442 	jreq 2$
      001344 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001346 FE               [ 2]  444 	ldw x,(x) 
      001347 1D 00 02         [ 2]  445 	subw x,#2  
      00134A 26 E3            [ 1]  446 	jrne 1$
      00134C 4F               [ 1]  447 	clr a 
      00134D 5F               [ 1]  448 	clrw x 
      00134E 20 05            [ 2]  449 	jra 9$
      001350 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001352 1C 00 02         [ 2]  451 	addw x,#2 	
      001355                        452 9$:	_drop VSIZE
      001355 5B 04            [ 2]    1     addw sp,#VSIZE 
      001357 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001358                        118 strlen::
      001358 89               [ 2]  119 	pushw x 
      001359 4F               [ 1]  120 	clr a
      00135A 7D               [ 1]  121 1$:	tnz (x) 
      00135B 27 04            [ 1]  122 	jreq 9$ 
      00135D 4C               [ 1]  123 	inc a 
      00135E 5C               [ 1]  124 	incw x 
      00135F 20 F9            [ 2]  125 	jra 1$ 
      001361 85               [ 2]  126 9$:	popw x 
      001362 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      001363                        137 strcmp:
      001363 F6               [ 1]  138 	ld a,(x)
      001364 27 0B            [ 1]  139 	jreq 5$ 
      001366 90 F1            [ 1]  140 	cp a,(y) 
      001368 26 05            [ 1]  141 	jrne 4$ 
      00136A 5C               [ 1]  142 	incw x 
      00136B 90 5C            [ 1]  143 	incw y 
      00136D 20 F4            [ 2]  144 	jra strcmp 
      00136F                        145 4$: ; not same  
      00136F 4F               [ 1]  146 	clr a 
      001370 81               [ 4]  147 	ret 
      001371                        148 5$: ; same 
      001371 A6 01            [ 1]  149 	ld a,#1 
      001373 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001374                        161 strcpy::
      001374 88               [ 1]  162 	push a 
      001375 89               [ 2]  163 	pushw x 
      001376 90 F6            [ 1]  164 1$: ld a,(y)
      001378 27 06            [ 1]  165 	jreq 9$ 
      00137A F7               [ 1]  166 	ld (x),a 
      00137B 5C               [ 1]  167 	incw x 
      00137C 90 5C            [ 1]  168 	incw y 
      00137E 20 F6            [ 2]  169 	jra 1$ 
      001380 7F               [ 1]  170 9$:	clr (x)
      001381 85               [ 2]  171 	popw x 
      001382 84               [ 1]  172 	pop a 
      001383 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      001384                        187 move::
      001384 88               [ 1]  188 	push a 
      001385                        189 	_vars VSIZE 
      001385 52 02            [ 2]    1     sub sp,#VSIZE 
      001387 0F 01            [ 1]  190 	clr (INCR,sp)
      001389 0F 02            [ 1]  191 	clr (LB,sp)
      00138B 90 89            [ 2]  192 	pushw y 
      00138D 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      00138F 90 85            [ 2]  194 	popw y 
      001391 27 31            [ 1]  195 	jreq move_exit ; x==y 
      001393 2B 0E            [ 1]  196 	jrmi move_down
      001395                        197 move_up: ; start from top address with incr=-1
      001395 72 BB 00 0D      [ 2]  198 	addw x,acc16
      001399 72 B9 00 0D      [ 2]  199 	addw y,acc16
      00139D 03 01            [ 1]  200 	cpl (INCR,sp)
      00139F 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      0013A1 20 05            [ 2]  202 	jra move_loop  
      0013A3                        203 move_down: ; start from bottom address with incr=1 
      0013A3 5A               [ 2]  204     decw x 
      0013A4 90 5A            [ 2]  205 	decw y
      0013A6 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013A8                        207 move_loop:	
      0013A8 C6 00 0D         [ 1]  208     ld a, acc16 
      0013AB CA 00 0E         [ 1]  209 	or a, acc8
      0013AE 27 14            [ 1]  210 	jreq move_exit 
      0013B0 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013B3 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013B6 90 F6            [ 1]  213 	ld a,(y)
      0013B8 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0013B9 89               [ 2]  215 	pushw x 
      0013BA CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013BD 5A               [ 2]  217 	decw x 
      0013BE CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013C1 85               [ 2]  219 	popw x 
      0013C2 20 E4            [ 2]  220 	jra move_loop
      0013C4                        221 move_exit:
      0013C4                        222 	_drop VSIZE
      0013C4 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013C6 84               [ 1]  223 	pop a 
      0013C7 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013C8                        233 clear_vars:
      0013C8 89               [ 2]  234 	pushw x 
      0013C9 88               [ 1]  235 	push a  
      0013CA AE 00 34         [ 2]  236 	ldw x,#vars 
      0013CD A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013CF 7F               [ 1]  238 1$:	clr (x)
      0013D0 5C               [ 1]  239 	incw x 
      0013D1 4A               [ 1]  240 	dec a 
      0013D2 26 FB            [ 1]  241 	jrne 1$
      0013D4 84               [ 1]  242 	pop a 
      0013D5 85               [ 2]  243 	popw x 
      0013D6 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      0013D7 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      00141D                        255 system_information:
      00141D AE 13 D7         [ 2]  256 	ldw x,#software 
      001420 CD 09 3A         [ 4]  257 	call puts 
      001423 A6 02            [ 1]  258 	ld a,#MAJOR 
      001425 C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      001428 5F               [ 1]  260 	clrw x 
      001429 CF 00 0C         [ 2]  261 	ldw acc24,x
      00142C 72 5F 00 23      [ 1]  262 	clr tab_width  
      001430 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001434 CD 17 FB         [ 4]  264 	call prt_acc24 
      001437 A6 2E            [ 1]  265 	ld a,#'.
      001439 CD 08 DD         [ 4]  266 	call putc 
      00143C A6 00            [ 1]  267 	ld a,#MINOR 
      00143E C7 00 0E         [ 1]  268 	ld acc8,a 
      001441 5F               [ 1]  269 	clrw x 
      001442 CF 00 0C         [ 2]  270 	ldw acc24,x 
      001445 CD 17 FB         [ 4]  271 	call prt_acc24
      001448 A6 0D            [ 1]  272 	ld a,#CR 
      00144A CD 08 DD         [ 4]  273 	call putc
                                    274 ;call test 
      00144D 81               [ 4]  275 	ret
                                    276 
      00144E                        277 warm_init:
      00144E 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      001452 72 5F 00 22      [ 1]  279 	clr flags 
      001456 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      00145A 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      00145E 35 0A 00 0A      [ 1]  282 	mov base,#10 
      001462 AE 00 00         [ 2]  283 	ldw x,#0 
      001465 CF 00 04         [ 2]  284 	ldw basicptr,x 
      001468 CF 00 00         [ 2]  285 	ldw in.w,x 
      00146B 72 5F 00 03      [ 1]  286 	clr count
      00146F 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      001470                        293 clear_basic:
      001470 89               [ 2]  294 	pushw x 
      001471 72 5F 00 03      [ 1]  295 	clr count
      001475 72 5F 00 01      [ 1]  296 	clr in  
      001479 AE 00 90         [ 2]  297 	ldw x,#free_ram 
      00147C CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      00147F CF 00 1D         [ 2]  299 	ldw txtend,x 
      001482 CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      001485 CF 00 32         [ 2]  301 	ldw dvar_end,x 
      001488 CD 13 C8         [ 4]  302 	call clear_vars 
      00148B 85               [ 2]  303 	popw x
      00148C 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00148D                        309 err_msg:
      00148D 00 00 14 B1 14 BE 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             CC 14 E5 14 F4
      001499 15 0A 15 20 15 3A 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             4B 15 5C
      0014A3 15 68 15 9B 15 AB 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



             BF 15 D2
      0014AD 15 DF 15 E9            313 	.word err_overflow,err_read_only  
                                    314 
      0014B1 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014BE 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014CC 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0014E5 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      0014F4 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00150A 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001520 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00153A 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00154B 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      00155C 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001568 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00159B 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015AB 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015BF 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015D2 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      0015DF 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0015E9 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
                                    332 
      001605 0A 72 75 6E 20 74 69   333 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001617 0A 63 6F 6D 70 69 6C   334 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001628 6C 61 73 74 20 74 6F   335 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    336 
      001638                        337 syntax_error::
      001638 A6 02            [ 1]  338 	ld a,#ERR_SYNTAX 
                                    339 
      00163A                        340 tb_error::
      00163A 72 0A 00 22 4C   [ 2]  341 	btjt flags,#FCOMP,1$
      00163F 88               [ 1]  342 	push a 
      001640 AE 16 05         [ 2]  343 	ldw x, #rt_msg 
      001643 CD 09 3A         [ 4]  344 	call puts 
      001646 84               [ 1]  345 	pop a 
      001647 AE 14 8D         [ 2]  346 	ldw x, #err_msg 
      00164A 72 5F 00 0D      [ 1]  347 	clr acc16 
      00164E 48               [ 1]  348 	sll a
      00164F 72 59 00 0D      [ 1]  349 	rlc acc16  
      001653 C7 00 0E         [ 1]  350 	ld acc8, a 
      001656 72 BB 00 0D      [ 2]  351 	addw x,acc16 
      00165A FE               [ 2]  352 	ldw x,(x)
      00165B CD 09 3A         [ 4]  353 	call puts
      00165E CE 00 04         [ 2]  354 	ldw x,basicptr 
                           000001   355 .if DEBUG 
      001661 C6 00 03         [ 1]  356 ld a,count 
      001664 90 5F            [ 1]  357 clrw y 
      001666 90 02            [ 1]  358 rlwa y  
      001668 CD 06 35         [ 4]  359 call hex_dump
      00166B CE 00 04         [ 2]  360 ldw x,basicptr
                                    361 .endif 
      00166E C6 00 01         [ 1]  362 	ld a,in 
      001671 CD 1F 4F         [ 4]  363 	call prt_basic_line
      001674 AE 16 28         [ 2]  364 	ldw x,#tk_id 
      001677 CD 09 3A         [ 4]  365 	call puts 
      00167A C6 00 02         [ 1]  366 	ld a,in.saved 
      00167D 5F               [ 1]  367 	clrw x 
      00167E 97               [ 1]  368 	ld xl,a 
      00167F 72 BB 00 04      [ 2]  369 	addw x,basicptr 
      001683 F6               [ 1]  370 	ld a,(x)
      001684 5F               [ 1]  371 	clrw x 
      001685 97               [ 1]  372 	ld xl,a 
      001686 CD 17 E4         [ 4]  373 	call prt_i16
      001689 20 35            [ 2]  374 	jra 6$
      00168B                        375 1$:	
      00168B 88               [ 1]  376 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00168C AE 16 17         [ 2]  377 	ldw x,#comp_msg
      00168F CD 09 3A         [ 4]  378 	call puts 
      001692 84               [ 1]  379 	pop a 
      001693 AE 14 8D         [ 2]  380 	ldw x, #err_msg 
      001696 72 5F 00 0D      [ 1]  381 	clr acc16 
      00169A 48               [ 1]  382 	sll a
      00169B 72 59 00 0D      [ 1]  383 	rlc acc16  
      00169F C7 00 0E         [ 1]  384 	ld acc8, a 
      0016A2 72 BB 00 0D      [ 2]  385 	addw x,acc16 
      0016A6 FE               [ 2]  386 	ldw x,(x)
      0016A7 CD 09 3A         [ 4]  387 	call puts
      0016AA AE 16 90         [ 2]  388 	ldw x,#tib
      0016AD CD 09 3A         [ 4]  389 	call puts 
      0016B0 A6 0D            [ 1]  390 	ld a,#CR 
      0016B2 CD 08 DD         [ 4]  391 	call putc
      0016B5 CE 00 00         [ 2]  392 	ldw x,in.w
      0016B8 CD 09 A7         [ 4]  393 	call spaces
      0016BB A6 5E            [ 1]  394 	ld a,#'^
      0016BD CD 08 DD         [ 4]  395 	call putc 
      0016C0 AE 17 FF         [ 2]  396 6$: ldw x,#STACK_EMPTY 
      0016C3 94               [ 1]  397     ldw sp,x
                                    398 
      0016C4                        399 warm_start:
      0016C4 CD 14 4E         [ 4]  400 	call warm_init
                                    401 ;----------------------------
                                    402 ;   BASIC interpreter
                                    403 ;----------------------------
      0016C7                        404 cmd_line: ; user interface 
      0016C7 A6 0D            [ 1]  405 	ld a,#CR 
      0016C9 CD 08 DD         [ 4]  406 	call putc 
      0016CC A6 3E            [ 1]  407 	ld a,#'> 
      0016CE CD 08 DD         [ 4]  408 	call putc
      0016D1 CD 0A 3F         [ 4]  409 	call readln
      0016D4 72 5D 00 03      [ 1]  410 	tnz count 
      0016D8 27 ED            [ 1]  411 	jreq cmd_line
      0016DA CD 10 68         [ 4]  412 	call compile
                                    413 ;;;;;;;;;;;;;;;;;;;;;;	
                                    414 ;pushw y 
                                    415 ;ldw x,txtbgn  
                                    416 ;ldw y,txtend
                                    417 ;ldw acc16,x   
                                    418 ;subw y,acc16 
                                    419 ;call hex_dump
                                    420 ;popw y 
                                    421 ;;;;;;;;;;;;;;;;;;;;;;
                                    422 
                                    423 ; if text begin with a line number
                                    424 ; the compiler set count to zero    
                                    425 ; so code is not interpreted
      0016DD 72 5D 00 03      [ 1]  426 	tnz count 
      0016E1 27 E4            [ 1]  427 	jreq cmd_line
                                    428 	
                                    429 ; if direct command 
                                    430 ; it's ready to interpret 
                                    431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                    432 ;; This is the interpreter loop
                                    433 ;; for each BASIC code line. 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016E3                        435 interpreter: 
      0016E3 C6 00 01         [ 1]  436 	ld a,in 
      0016E6 C1 00 03         [ 1]  437 	cp a,count 
      0016E9 2B 1D            [ 1]  438 	jrmi interp_loop
      0016EB                        439 next_line:
      0016EB 72 01 00 22 D7   [ 2]  440 	btjf flags, #FRUN, cmd_line
      0016F0 CE 00 04         [ 2]  441 	ldw x,basicptr
      0016F3 72 BB 00 00      [ 2]  442 	addw x,in.w 
      0016F7 C3 00 1D         [ 2]  443 	cpw x,txtend 
      0016FA 2A C8            [ 1]  444 	jrpl warm_start
      0016FC CF 00 04         [ 2]  445 	ldw basicptr,x ; start of next line  
      0016FF E6 02            [ 1]  446 	ld a,(2,x)
      001701 C7 00 03         [ 1]  447 	ld count,a 
      001704 35 03 00 01      [ 1]  448 	mov in,#3 ; skip first 3 bytes of line 
      001708                        449 interp_loop:
      001708 CD 17 9C         [ 4]  450 	call next_token
      00170B A1 00            [ 1]  451 	cp a,#TK_NONE 
      00170D 27 DC            [ 1]  452 	jreq next_line 
      00170F A1 80            [ 1]  453 	cp a,#TK_CMD
      001711 26 0C            [ 1]  454 	jrne 1$
      001713                        455 	_get_code_addr
      001713 FE               [ 2]    1         ldw x,(x)
      001714 72 5C 00 01      [ 1]    2         inc in 
      001718 72 5C 00 01      [ 1]    3         inc in 
      00171C FD               [ 4]  456 	call(x)
      00171D 20 E9            [ 2]  457 	jra interp_loop 
      00171F                        458 1$:	 
      00171F A1 85            [ 1]  459 	cp a,#TK_VAR
      001721 26 05            [ 1]  460 	jrne 2$
      001723 CD 1C 93         [ 4]  461 	call let_var  
      001726 20 E0            [ 2]  462 	jra interp_loop 
      001728                        463 2$:	
      001728 A1 05            [ 1]  464 	cp a,#TK_ARRAY 
      00172A 26 05            [ 1]  465 	jrne 3$
      00172C CD 1C 8E         [ 4]  466 	call let_array 
      00172F 20 D7            [ 2]  467 	jra interp_loop
      001731                        468 3$:	
      001731 A1 03            [ 1]  469 	cp a,#TK_LABEL
      001733 26 05            [ 1]  470 	jrne 4$
      001735 CD 17 41         [ 4]  471 	call let_dvar  
      001738 20 CE            [ 2]  472 	jra interp_loop 
      00173A                        473 4$: 
      00173A A1 0A            [ 1]  474 	cp a,#TK_COLON 
      00173C 27 CA            [ 1]  475 	jreq interp_loop
      00173E CC 16 38         [ 2]  476 5$:	jp syntax_error 
                                    477 
                                    478 
                                    479 ;----------------------
                                    480 ; when a label is met 
                                    481 ; at interp_loop
                                    482 ; it may be a variable 
                                    483 ; assignement to DIM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    484 ; variable 
                                    485 ;----------------------
                           000001   486 	VAR_NAME=1 
                           000003   487 	REC_LEN=3
                           000004   488 	VSIZE=4 
      001741                        489 let_dvar:
      001741                        490 	_vars VSIZE 
      001741 52 04            [ 2]    1     sub sp,#VSIZE 
      001743 1F 01            [ 2]  491 	ldw (VAR_NAME,sp),x
      001745 0F 03            [ 1]  492 	clr (REC_LEN,sp) 
      001747 CD 17 B5         [ 4]  493 	call skip_string 
      00174A CE 00 04         [ 2]  494 	ldw x,basicptr 
      00174D 72 BB 00 00      [ 2]  495 	addw x,in.w 
      001751 F6               [ 1]  496 	ld a,(x)
      001752 A1 32            [ 1]  497 	cp a,#TK_EQUAL 
      001754 26 43            [ 1]  498 	jrne 9$ 
                                    499 ; dvar assignment 
      001756 72 5C 00 01      [ 1]  500 	inc in  
      00175A CD 1B C1         [ 4]  501 	call condition  
      00175D A1 84            [ 1]  502 	cp a,#TK_INTGR 
      00175F 27 03            [ 1]  503 	jreq 1$ 
      001761 CC 16 38         [ 2]  504 0$:	jp syntax_error 
      001764                        505 1$: 
      001764 1E 01            [ 2]  506 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      001766 CD 13 58         [ 4]  507 	call strlen 
      001769 AB 05            [ 1]  508 	add a,#REC_XTRA_BYTES
      00176B 6B 04            [ 1]  509 	ld (REC_LEN+1,sp),a 
      00176D CD 1C FD         [ 4]  510 	call search_name 
      001770 5D               [ 2]  511 	tnzw x 
      001771 27 EE            [ 1]  512 	jreq 0$ 
      001773 F6               [ 1]  513 	ld a,(x)
      001774 2A 05            [ 1]  514 	jrpl 2$
      001776 A6 11            [ 1]  515 	ld a,#ERR_RD_ONLY 
      001778 CC 16 3A         [ 2]  516 	jp tb_error 
      00177B                        517 2$:
      00177B 72 FB 03         [ 2]  518 	addw x,(REC_LEN,sp)
      00177E 1D 00 03         [ 2]  519 	subw x,#CELL_SIZE 
      001781 CF 00 19         [ 2]  520 	ldw ptr16,x
      001784                        521 	_xpop 
      001784 90 F6            [ 1]    1     ld a,(y)
      001786 93               [ 1]    2     ldw x,y 
      001787 EE 01            [ 2]    3     ldw x,(1,x)
      001789 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00178D 72 C7 00 19      [ 4]  522 	ld [ptr16],a 
      001791 72 5C 00 1A      [ 1]  523 	inc ptr8 
      001795 72 CF 00 19      [ 5]  524 	ldw [ptr16],x 
      001799                        525 9$: _drop VSIZE 	
      001799 5B 04            [ 2]    1     addw sp,#VSIZE 
      00179B 81               [ 4]  526 	ret 
                                    527 
                                    528 
                                    529 ;--------------------------
                                    530 ; extract next token from
                                    531 ; token list 
                                    532 ; basicptr -> base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    533 ; in  -> offset in list array 
                                    534 ; output:
                                    535 ;   A 		token attribute
                                    536 ;   X 		*token_value 
                                    537 ;----------------------------------------
      00179C                        538 next_token::
                                    539 ;	clrw x 
      00179C C6 00 01         [ 1]  540 	ld a,in 
      00179F C7 00 02         [ 1]  541 	ld in.saved,a ; in case "_unget_token" needed 
                                    542 ; don't replace sub by "cp a,count" 
                                    543 ; if end of line must return with A=0   	
      0017A2 C0 00 03         [ 1]  544 	sub a,count 
      0017A5 27 0D            [ 1]  545 	jreq 9$ ; end of line 
      0017A7                        546 0$: 
      0017A7 CE 00 04         [ 2]  547 	ldw x,basicptr 
      0017AA 72 BB 00 00      [ 2]  548 	addw x,in.w 
      0017AE F6               [ 1]  549 	ld a,(x)
      0017AF 5C               [ 1]  550 	incw x
      0017B0 72 5C 00 01      [ 1]  551 	inc in   
      0017B4 81               [ 4]  552 9$: ret 
                                    553 
                                    554 ;-------------------------
                                    555 ;  skip .asciz in BASIC line 
                                    556 ;  name 
                                    557 ;  input:
                                    558 ;     x		* string 
                                    559 ;  output:
                                    560 ;     none 
                                    561 ;-------------------------
      0017B5                        562 skip_string:
      0017B5 F6               [ 1]  563 	ld a,(x)
      0017B6 27 03            [ 1]  564 	jreq 1$
      0017B8 5C               [ 1]  565 	incw x 
      0017B9 20 FA            [ 2]  566 	jra skip_string 
      0017BB 5C               [ 1]  567 1$: incw x 	
      0017BC 72 B0 00 04      [ 2]  568 	subw x,basicptr 
      0017C0 CF 00 00         [ 2]  569 	ldw in.w,x 
      0017C3 81               [ 4]  570 	ret 
                                    571 
                                    572 ;---------------------
                                    573 ; extract 16 bits  
                                    574 ; address from BASIC
                                    575 ; code 
                                    576 ; input:
                                    577 ;    X    *address
                                    578 ; output:
                                    579 ;    X    address 
                                    580 ;-------------------- 
      0017C4                        581 get_addr:
      0017C4 FE               [ 2]  582 	ldw x,(x)
      0017C5 72 5C 00 01      [ 1]  583 	inc in 
      0017C9 72 5C 00 01      [ 1]  584 	inc in 
      0017CD 81               [ 4]  585 	ret 
                                    586 
                                    587 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    588 ; extract int24_t  
                                    589 ; value from BASIC 
                                    590 ; code 
                                    591 ; input:
                                    592 ;    X   *integer 
                                    593 ; output:
                                    594 ;    A:X   int24  
                                    595 ;--------------------
      0017CE                        596 get_int24:
      0017CE F6               [ 1]  597 	ld a,(x)
      0017CF EE 01            [ 2]  598 	ldw x,(1,x)
                                    599 ; skip 3 bytes 
      0017D1 72 5C 00 01      [ 1]  600 	inc in 
      0017D5 72 5C 00 01      [ 1]  601 	inc in 
      0017D9 72 5C 00 01      [ 1]  602 	inc in 
      0017DD 81               [ 4]  603 	ret 
                                    604 
                                    605 ;-------------------------
                                    606 ; get character from 
                                    607 ; BASIC code 
                                    608 ; input:
                                    609 ;    X   *char 
                                    610 ; output:
                                    611 ;    A    char 
                                    612 ;-------------------------
      0017DE                        613 get_char:
      0017DE F6               [ 1]  614 	ld a,(x)
      0017DF 72 5C 00 01      [ 1]  615 	inc in  
      0017E3 81               [ 4]  616     ret 
                                    617 
                                    618 ;-----------------------------------
                                    619 ; print a 16 bit integer 
                                    620 ; using variable 'base' as conversion
                                    621 ; format.
                                    622 ; input:
                                    623 ;    X       integer to print 
                                    624 ;   'base'    conversion base 
                                    625 ; output:
                                    626 ;   terminal  
                                    627 ;-----------------------------------
      0017E4                        628 prt_i16:
      0017E4 72 5F 00 0C      [ 1]  629 	clr acc24 
      0017E8 CF 00 0D         [ 2]  630 	ldw acc16,x 
      0017EB A6 10            [ 1]  631 	ld a,#16
      0017ED C1 00 0A         [ 1]  632 	cp a,base
      0017F0 27 09            [ 1]  633 	jreq prt_acc24  
      0017F2 72 0F 00 0D 04   [ 2]  634 	btjf acc16,#7,prt_acc24
      0017F7 72 53 00 0C      [ 1]  635 	cpl acc24 ; sign extend 
                                    636 	
                                    637 ;------------------------------------
                                    638 ; print integer in acc24 
                                    639 ; input:
                                    640 ;	acc24 		integer to print 
                                    641 ;	'base' 		numerical base for conversion 
                                    642 ;   'tab_width' field width 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    643 ;    A 			signed||unsigned conversion
                                    644 ;  output:
                                    645 ;    A          string length
                                    646 ;------------------------------------
      0017FB                        647 prt_acc24:
      0017FB A6 FF            [ 1]  648 	ld a,#255  ; signed conversion  
      0017FD CD 18 21         [ 4]  649     call itoa  ; conversion entier en  .asciz
      001800 CD 11 12         [ 4]  650 	call right_align  
      001803 88               [ 1]  651 	push a 
      001804 CD 09 3A         [ 4]  652 	call puts
      001807 84               [ 1]  653 	pop a 
      001808 81               [ 4]  654     ret	
                                    655 
                                    656 ;---------------------------------------
                                    657 ;  print value at xstack top 
                                    658 ;---------------------------------------
      001809                        659 print_top: 
      001809                        660 	_xpop 
      001809 90 F6            [ 1]    1     ld a,(y)
      00180B 93               [ 1]    2     ldw x,y 
      00180C EE 01            [ 2]    3     ldw x,(1,x)
      00180E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001812 C7 00 0C         [ 1]  661 	ld acc24,a 
      001815 CF 00 0D         [ 2]  662 	ldw acc16,x 
      001818 CD 17 FB         [ 4]  663 	call prt_acc24 
      00181B A6 20            [ 1]  664 	ld a,#SPACE
      00181D CD 08 DD         [ 4]  665 	call putc 
      001820 81               [ 4]  666 	ret 
                                    667 
                                    668 ;------------------------------------
                                    669 ; convert integer in acc24 to string
                                    670 ; input:
                                    671 ;   'base'	conversion base 
                                    672 ;	acc24	integer to convert
                                    673 ;   A       0=unsigned, else signed 
                                    674 ; output:
                                    675 ;   X  		pointer to first char of string
                                    676 ;   A       string length
                                    677 ;------------------------------------
                           000001   678 	SIGN=1  ; integer sign 
                           000002   679 	LEN=2 
                           000003   680 	PSTR=3
                           000004   681 	VSIZE=4 ;locals size
      001821                        682 itoa::
      001821                        683 	_vars VSIZE
      001821 52 04            [ 2]    1     sub sp,#VSIZE 
      001823 0F 02            [ 1]  684 	clr (LEN,sp) ; string length  
      001825 0F 01            [ 1]  685 	clr (SIGN,sp)    ; sign
      001827 4D               [ 1]  686 	tnz A
      001828 27 11            [ 1]  687 	jreq 1$ ; unsigned conversion  
      00182A C6 00 0A         [ 1]  688 	ld a,base 
      00182D A1 0A            [ 1]  689 	cp a,#10
      00182F 26 0A            [ 1]  690 	jrne 1$
                                    691 	; base 10 string display with negative sign if bit 23==1
      001831 72 0F 00 0C 05   [ 2]  692 	btjf acc24,#7,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001836 03 01            [ 1]  693 	cpl (SIGN,sp)
      001838 CD 02 0D         [ 4]  694 	call neg_acc24
      00183B                        695 1$:
                                    696 ; initialize string pointer 
      00183B AE 16 90         [ 2]  697 	ldw x,#tib 
      00183E 1C 00 50         [ 2]  698 	addw x,#TIB_SIZE
      001841 5A               [ 2]  699 	decw x 
      001842 7F               [ 1]  700 	clr (x)
      001843                        701 itoa_loop:
      001843 C6 00 0A         [ 1]  702     ld a,base
      001846 CD 02 D9         [ 4]  703     call divu24_8 ; acc24/A 
      001849 AB 30            [ 1]  704     add a,#'0  ; remainder of division
      00184B A1 3A            [ 1]  705     cp a,#'9+1
      00184D 2B 02            [ 1]  706     jrmi 2$
      00184F AB 07            [ 1]  707     add a,#7 
      001851                        708 2$:	
      001851 5A               [ 2]  709 	decw x
      001852 F7               [ 1]  710     ld (x),a
      001853 0C 02            [ 1]  711 	inc (LEN,sp)
                                    712 	; if acc24==0 conversion done
      001855 C6 00 0C         [ 1]  713 	ld a,acc24
      001858 CA 00 0D         [ 1]  714 	or a,acc16
      00185B CA 00 0E         [ 1]  715 	or a,acc8
      00185E 26 E3            [ 1]  716     jrne itoa_loop
                                    717 	;conversion done, next add '$' or '-' as required
      001860 C6 00 0A         [ 1]  718 	ld a,base 
      001863 A1 10            [ 1]  719 	cp a,#16
      001865 27 08            [ 1]  720 	jreq 8$
      001867 7B 01            [ 1]  721 	ld a,(SIGN,sp)
      001869 27 0A            [ 1]  722     jreq 10$
      00186B A6 2D            [ 1]  723     ld a,#'-
      00186D 20 02            [ 2]  724 	jra 9$ 
      00186F                        725 8$:	
      00186F A6 24            [ 1]  726 	ld a,#'$ 
      001871 5A               [ 2]  727 9$: decw x
      001872 F7               [ 1]  728     ld (x),a
      001873 0C 02            [ 1]  729 	inc (LEN,sp)
      001875                        730 10$:
      001875 7B 02            [ 1]  731 	ld a,(LEN,sp)
      001877                        732 	_drop VSIZE
      001877 5B 04            [ 2]    1     addw sp,#VSIZE 
      001879 81               [ 4]  733 	ret
                                    734 
                                    735 ;------------------------------------
                                    736 ; convert alpha to uppercase
                                    737 ; input:
                                    738 ;    a  character to convert
                                    739 ; output:
                                    740 ;    a  uppercase character
                                    741 ;------------------------------------
      00187A                        742 to_upper::
      00187A A1 61            [ 1]  743 	cp a,#'a
      00187C 2A 01            [ 1]  744 	jrpl 1$
      00187E 81               [ 4]  745 0$:	ret
      00187F A1 7A            [ 1]  746 1$: cp a,#'z	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001881 22 FB            [ 1]  747 	jrugt 0$
      001883 A0 20            [ 1]  748 	sub a,#32
      001885 81               [ 4]  749 	ret
                                    750 	
                                    751 ;------------------------------------
                                    752 ; convert pad content in integer
                                    753 ; input:
                                    754 ;    x		* .asciz to convert
                                    755 ; output:
                                    756 ;    acc24      int24_t
                                    757 ;------------------------------------
                                    758 	; local variables
                           000001   759 	SIGN=1 ; 1 byte, 
                           000002   760 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   761 	TEMP=3 ; 1 byte, temporary storage
                           000004   762 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   763 	VSIZE=5 ; 5 bytes reserved for local storage
      001886                        764 atoi24::
      001886                        765 	_vars VSIZE
      001886 52 05            [ 2]    1     sub sp,#VSIZE 
      001888 1F 04            [ 2]  766 	ldw (XTEMP,sp),x 
                                    767 ; conversion made on xstack 
      00188A 4F               [ 1]  768 	clr a 
      00188B 5F               [ 1]  769 	clrw x 
      00188C                        770 	_xpush 
      00188C 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001890 90 F7            [ 1]    2     ld (y),a 
      001892 90 EF 01         [ 2]    3     ldw (1,y),x 
      001895 0F 01            [ 1]  771 	clr (SIGN,sp)
      001897 A6 0A            [ 1]  772 	ld a,#10
      001899 6B 02            [ 1]  773 	ld (BASE,sp),a ; default base decimal
      00189B 1E 04            [ 2]  774 	ldw x,(XTEMP,sp)
      00189D F6               [ 1]  775 	ld a,(x)
      00189E 27 4E            [ 1]  776 	jreq 9$  ; completed if 0
      0018A0 A1 2D            [ 1]  777 	cp a,#'-
      0018A2 26 04            [ 1]  778 	jrne 1$
      0018A4 03 01            [ 1]  779 	cpl (SIGN,sp)
      0018A6 20 08            [ 2]  780 	jra 2$
      0018A8 A1 24            [ 1]  781 1$: cp a,#'$
      0018AA 26 08            [ 1]  782 	jrne 3$
      0018AC A6 10            [ 1]  783 	ld a,#16
      0018AE 6B 02            [ 1]  784 	ld (BASE,sp),a
      0018B0 5C               [ 1]  785 2$:	incw x
      0018B1 1F 04            [ 2]  786 	ldw (XTEMP,sp),x 
      0018B3 F6               [ 1]  787 	ld a,(x)
      0018B4                        788 3$:	; char to digit 
      0018B4 A1 61            [ 1]  789 	cp a,#'a
      0018B6 2B 02            [ 1]  790 	jrmi 4$
      0018B8 A0 20            [ 1]  791 	sub a,#32
      0018BA A1 30            [ 1]  792 4$:	cp a,#'0
      0018BC 2B 30            [ 1]  793 	jrmi 9$
      0018BE A0 30            [ 1]  794 	sub a,#'0
      0018C0 A1 0A            [ 1]  795 	cp a,#10
      0018C2 2B 06            [ 1]  796 	jrmi 5$
      0018C4 A0 07            [ 1]  797 	sub a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0018C6 11 02            [ 1]  798 	cp a,(BASE,sp)
      0018C8 2A 24            [ 1]  799 	jrpl 9$
      0018CA 6B 03            [ 1]  800 5$:	ld (TEMP,sp),a
      0018CC 7B 02            [ 1]  801 	ld a,(BASE,sp)
      0018CE CD 02 2A         [ 4]  802 	call mulu24_8
      0018D1                        803 	_xpush 
      0018D1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018D5 90 F7            [ 1]    2     ld (y),a 
      0018D7 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018DA 5F               [ 1]  804 	clrw x 
      0018DB 7B 03            [ 1]  805 	ld a,(TEMP,sp)
      0018DD 02               [ 1]  806 	rlwa x 
      0018DE                        807 	_xpush 
      0018DE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018E2 90 F7            [ 1]    2     ld (y),a 
      0018E4 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018E7 CD 01 6E         [ 4]  808 	call add24 
      0018EA 1E 04            [ 2]  809 	ldw x,(XTEMP,sp)
      0018EC 20 C2            [ 2]  810 	jra 2$
      0018EE 0D 01            [ 1]  811 9$:	tnz (SIGN,sp)
      0018F0 27 03            [ 1]  812     jreq atoi_exit
      0018F2 CD 01 F3         [ 4]  813     call neg24
      0018F5                        814 atoi_exit:
      0018F5                        815 	_xpop 
      0018F5 90 F6            [ 1]    1     ld a,(y)
      0018F7 93               [ 1]    2     ldw x,y 
      0018F8 EE 01            [ 2]    3     ldw x,(1,x)
      0018FA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018FE C7 00 0C         [ 1]  816 	ld acc24,a 
      001901 CF 00 0D         [ 2]  817 	ldw acc16,x  
      001904                        818 	_drop VSIZE
      001904 5B 05            [ 2]    1     addw sp,#VSIZE 
      001906 81               [ 4]  819 	ret
                                    820 
                                    821 
                                    822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    823 ;;   TINY BASIC  operators,
                                    824 ;;   commands and functions 
                                    825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    826 
                                    827 ;---------------------------------
                                    828 ; dictionary search 
                                    829 ; input:
                                    830 ;	X 		dictionary entry point, name field  
                                    831 ;   y		.asciz name to search 
                                    832 ; output:
                                    833 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    834 ;  X		routine address|TK_OP 
                                    835 ;---------------------------------
                           000001   836 	NLEN=1 ; cmd length 
                           000002   837 	XSAVE=2
                           000004   838 	YSAVE=4
                           000005   839 	VSIZE=5 
      001907                        840 search_dict::
      001907                        841 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001907 52 05            [ 2]    1     sub sp,#VSIZE 
      001909 17 04            [ 2]  842 	ldw (YSAVE,sp),y 
      00190B                        843 search_next:
      00190B 1F 02            [ 2]  844 	ldw (XSAVE,sp),x 
                                    845 ; get name length in dictionary	
      00190D F6               [ 1]  846 	ld a,(x)
      00190E A4 0F            [ 1]  847 	and a,#0xf 
      001910 6B 01            [ 1]  848 	ld (NLEN,sp),a  
      001912 16 04            [ 2]  849 	ldw y,(YSAVE,sp) ; name pointer 
      001914 5C               [ 1]  850 	incw x 
      001915                        851 cp_loop:
      001915 90 F6            [ 1]  852 	ld a,(y)
      001917 27 1B            [ 1]  853 	jreq str_match 
      001919 0D 01            [ 1]  854 	tnz (NLEN,sp)
      00191B 27 0A            [ 1]  855 	jreq no_match  
      00191D F1               [ 1]  856 	cp a,(x)
      00191E 26 07            [ 1]  857 	jrne no_match 
      001920 90 5C            [ 1]  858 	incw y 
      001922 5C               [ 1]  859 	incw x
      001923 0A 01            [ 1]  860 	dec (NLEN,sp)
      001925 20 EE            [ 2]  861 	jra cp_loop 
      001927                        862 no_match:
      001927 1E 02            [ 2]  863 	ldw x,(XSAVE,sp) 
      001929 1D 00 02         [ 2]  864 	subw x,#2 ; move X to link field
      00192C 4B 00            [ 1]  865 	push #TK_NONE 
      00192E FE               [ 2]  866 	ldw x,(x) ; next word link 
      00192F 84               [ 1]  867 	pop a ; TK_NONE 
      001930 27 1D            [ 1]  868 	jreq search_exit  ; not found  
                                    869 ;try next 
      001932 20 D7            [ 2]  870 	jra search_next
      001934                        871 str_match:
      001934 1E 02            [ 2]  872 	ldw x,(XSAVE,sp)
      001936 F6               [ 1]  873 	ld a,(X)
      001937 6B 01            [ 1]  874 	ld (NLEN,sp),a ; needed to test keyword type  
      001939 A4 0F            [ 1]  875 	and a,#NLEN_MASK 
                                    876 ; move x to procedure address field 	
      00193B 4C               [ 1]  877 	inc a 
      00193C C7 00 0E         [ 1]  878 	ld acc8,a 
      00193F 72 5F 00 0D      [ 1]  879 	clr acc16 
      001943 72 BB 00 0D      [ 2]  880 	addw x,acc16 
      001947 FE               [ 2]  881 	ldw x,(x) ; routine address  
                                    882 ;determine keyword type bits 7:4 
      001948 7B 01            [ 1]  883 	ld a,(NLEN,sp)
      00194A A4 F0            [ 1]  884 	and a,#KW_TYPE_MASK 
      00194C 4E               [ 1]  885 	swap a 
      00194D AB 80            [ 1]  886 	add a,#128
      00194F                        887 search_exit: 
      00194F                        888 	_drop VSIZE 
      00194F 5B 05            [ 2]    1     addw sp,#VSIZE 
      001951 81               [ 4]  889 	ret 
                                    890 
                                    891 ;---------------------
                                    892 ; check if next token
                                    893 ;  is of expected type 
                                    894 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    895 ;   A 		 expected token attribute
                                    896 ;  ouput:
                                    897 ;   none     if fail call syntax_error 
                                    898 ;--------------------
      001952                        899 expect:
      001952 88               [ 1]  900 	push a 
      001953 CD 17 9C         [ 4]  901 	call next_token 
      001956 11 01            [ 1]  902 	cp a,(1,sp)
      001958 27 03            [ 1]  903 	jreq 1$
      00195A CC 16 38         [ 2]  904 	jp syntax_error
      00195D 84               [ 1]  905 1$: pop a 
      00195E 81               [ 4]  906 	ret 
                                    907 
                                    908 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    909 ; parse arguments list 
                                    910 ; between ()
                                    911 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195F                        912 func_args:
      00195F A6 06            [ 1]  913 	ld a,#TK_LPAREN 
      001961 CD 19 52         [ 4]  914 	call expect 
                                    915 ; expected to continue in arg_list 
                                    916 ; caller must check for TK_RPAREN 
                                    917 
                                    918 ;-------------------------------
                                    919 ; parse embedded BASIC routines 
                                    920 ; arguments list.
                                    921 ; arg_list::=  expr[','expr]*
                                    922 ; all arguments are of int24_t type
                                    923 ; and pushed on stack 
                                    924 ; input:
                                    925 ;   none
                                    926 ; output:
                                    927 ;   xstack{n}   arguments pushed on xstack
                                    928 ;   A 	number of arguments pushed on xstack  
                                    929 ;--------------------------------
      001964                        930 arg_list:
      001964 4B 00            [ 1]  931 	push #0
      001966 CD 1B C1         [ 4]  932 1$:	call condition 
      001969 4D               [ 1]  933 	tnz a 
      00196A 27 12            [ 1]  934 	jreq 7$  
      00196C 0C 01            [ 1]  935 	inc (1,sp)
      00196E CD 17 9C         [ 4]  936 	call next_token 
      001971 A1 08            [ 1]  937 	cp a,#TK_COMMA 
      001973 27 F1            [ 1]  938 	jreq 1$ 
      001975 A1 07            [ 1]  939 	cp a,#TK_RPAREN
      001977 27 05            [ 1]  940 	jreq 7$
      001979                        941 	_unget_token 
      001979 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00197E 84               [ 1]  942 7$:	pop a  
      00197F 81               [ 4]  943 	ret 
                                    944 
                                    945 ;--------------------------------
                                    946 ;   BASIC commnands 
                                    947 ;--------------------------------
                                    948 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    949 ;--------------------------------
                                    950 ;  arithmetic and relational 
                                    951 ;  routines
                                    952 ;  operators precedence
                                    953 ;  highest to lowest
                                    954 ;  operators on same row have 
                                    955 ;  same precedence and are executed
                                    956 ;  from left to right.
                                    957 ;	'*','/','%'
                                    958 ;   '-','+'
                                    959 ;   '=','>','<','>=','<=','<>','><'
                                    960 ;   '<>' and '><' are equivalent for not equal.
                                    961 ;--------------------------------
                                    962 
                                    963 ;---------------------
                                    964 ; return array element
                                    965 ; address from @(expr)
                                    966 ; input:
                                    967 ;   A 		TK_ARRAY
                                    968 ; output:
                                    969 ;	X 		element address 
                                    970 ;----------------------
      001980                        971 get_array_element:
      001980 CD 19 5F         [ 4]  972 	call func_args 
      001983 A1 01            [ 1]  973 	cp a,#1
      001985 27 03            [ 1]  974 	jreq 1$
      001987 CC 16 38         [ 2]  975 	jp syntax_error
      00198A                        976 1$: _xpop 
      00198A 90 F6            [ 1]    1     ld a,(y)
      00198C 93               [ 1]    2     ldw x,y 
      00198D EE 01            [ 2]    3     ldw x,(1,x)
      00198F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    977     ; ignore A, index < 65536 in any case 
                                    978 	; check for bounds 
      001993 C3 00 20         [ 2]  979 	cpw x,array_size 
      001996 23 05            [ 2]  980 	jrule 3$
                                    981 ; bounds {1..array_size}	
      001998 A6 0A            [ 1]  982 2$: ld a,#ERR_BAD_VALUE 
      00199A CC 16 3A         [ 2]  983 	jp tb_error 
      00199D 5D               [ 2]  984 3$: tnzw  x
      00199E 27 F8            [ 1]  985 	jreq 2$ 
      0019A0 89               [ 2]  986 	pushw x 
      0019A1 58               [ 2]  987 	sllw x 
      0019A2 72 FB 01         [ 2]  988 	addw x,(1,sp) ; index*size_of(int24)
      0019A5 1F 01            [ 2]  989 	ldw (1,sp),x  
      0019A7 AE 16 90         [ 2]  990 	ldw x,#tib ; array is below tib 
      0019AA 72 F0 01         [ 2]  991 	subw x,(1,sp)
      0019AD                        992 	_drop 2   
      0019AD 5B 02            [ 2]    1     addw sp,#2 
      0019AF 81               [ 4]  993 	ret 
                                    994 
                                    995 
                                    996 ;***********************************
                                    997 ;   expression parse,execute 
                                    998 ;***********************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                    999 ;-----------------------------------
                                   1000 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1001 ;			 integer | function |
                                   1002 ;			 '('relation')' 
                                   1003 ; output:
                                   1004 ;   A       token attribute 
                                   1005 ;   xstack  value  
                                   1006 ; ---------------------------------
                           000001  1007 	NEG=1
                           000001  1008 	VSIZE=1
      0019B0                       1009 factor:
      0019B0                       1010 	_vars VSIZE 
      0019B0 52 01            [ 2]    1     sub sp,#VSIZE 
      0019B2 0F 01            [ 1] 1011 	clr (NEG,sp)
      0019B4 CD 17 9C         [ 4] 1012 	call next_token
      0019B7 4D               [ 1] 1013 	tnz a 
      0019B8 26 03            [ 1] 1014 	jrne 1$ 
      0019BA CC 1A 62         [ 2] 1015 	jp 22$ 
      0019BD A1 10            [ 1] 1016 1$:	cp a,#TK_PLUS 
      0019BF 27 06            [ 1] 1017 	jreq 2$
      0019C1 A1 11            [ 1] 1018 	cp a,#TK_MINUS 
      0019C3 26 05            [ 1] 1019 	jrne 4$ 
      0019C5 03 01            [ 1] 1020 	cpl (NEG,sp)
      0019C7                       1021 2$:	
      0019C7 CD 17 9C         [ 4] 1022 	call next_token
      0019CA                       1023 4$:
      0019CA 4D               [ 1] 1024 	tnz a 
      0019CB 26 03            [ 1] 1025 	jrne 41$ 
      0019CD CC 16 38         [ 2] 1026 	jp syntax_error  
      0019D0                       1027 41$:	
      0019D0 A1 81            [ 1] 1028 	cp a,#TK_IFUNC 
      0019D2 26 0C            [ 1] 1029 	jrne 5$ 
      0019D4                       1030 	_get_code_addr 
      0019D4 FE               [ 2]    1         ldw x,(x)
      0019D5 72 5C 00 01      [ 1]    2         inc in 
      0019D9 72 5C 00 01      [ 1]    3         inc in 
      0019DD FD               [ 4] 1031 	call (x); result in A:X  
      0019DE 20 70            [ 2] 1032 	jra 18$ 
      0019E0                       1033 5$:
      0019E0 A1 84            [ 1] 1034 	cp a,#TK_INTGR
      0019E2 26 05            [ 1] 1035 	jrne 6$
      0019E4 CD 17 CE         [ 4] 1036 	call get_int24 ; A:X
      0019E7 20 67            [ 2] 1037 	jra 18$
      0019E9                       1038 6$:
      0019E9 A1 05            [ 1] 1039 	cp a,#TK_ARRAY
      0019EB 26 05            [ 1] 1040 	jrne 7$
      0019ED CD 19 80         [ 4] 1041 	call get_array_element
      0019F0 20 07            [ 2] 1042     jra 71$
      0019F2                       1043 7$:
      0019F2 A1 85            [ 1] 1044 	cp a,#TK_VAR 
      0019F4 26 08            [ 1] 1045 	jrne 8$
      0019F6 CD 17 C4         [ 4] 1046 	call get_addr 
      0019F9                       1047 71$: ; put value in A:X
      0019F9 F6               [ 1] 1048 	ld a,(x)
      0019FA EE 01            [ 2] 1049 	ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0019FC 20 52            [ 2] 1050 	jra 18$
      0019FE                       1051 8$:
      0019FE A1 03            [ 1] 1052 	cp a,#TK_LABEL 
      001A00 26 1D            [ 1] 1053 	jrne 9$
      001A02 90 89            [ 2] 1054 	pushw y  
      001A04 89               [ 2] 1055 	pushw x 
      001A05 CD 17 B5         [ 4] 1056 	call skip_string
      001A08 85               [ 2] 1057 	popw x  
      001A09 CD 13 58         [ 4] 1058 	call strlen 
      001A0C AB 05            [ 1] 1059 	add a,#REC_XTRA_BYTES
      001A0E CD 1C FD         [ 4] 1060 	call search_name
      001A11 5D               [ 2] 1061 	tnzw x 
      001A12 26 04            [ 1] 1062 	jrne 82$ 
      001A14 90 85            [ 2] 1063 	popw y 
      001A16 20 30            [ 2] 1064 	jra 16$
      001A18                       1065 82$:
      001A18 90 85            [ 2] 1066 	popw y   
      001A1A CD 1C C3         [ 4] 1067 	call get_value ; in A:X 
      001A1D 20 31            [ 2] 1068 	jra 18$
      001A1F                       1069 9$: 
      001A1F A1 82            [ 1] 1070 	cp a,#TK_CFUNC 
      001A21 26 0E            [ 1] 1071 	jrne 12$
      001A23                       1072 	_get_code_addr 
      001A23 FE               [ 2]    1         ldw x,(x)
      001A24 72 5C 00 01      [ 1]    2         inc in 
      001A28 72 5C 00 01      [ 1]    3         inc in 
      001A2C FD               [ 4] 1073 	call(x)
      001A2D 5F               [ 1] 1074 	clrw x 
      001A2E 02               [ 1] 1075 	rlwa x  ; char>int24 in A:X 
      001A2F 20 1F            [ 2] 1076 	jra 18$ 	 
      001A31                       1077 12$:			
      001A31 A1 06            [ 1] 1078 	cp a,#TK_LPAREN
      001A33 26 13            [ 1] 1079 	jrne 16$
      001A35 CD 1A A8         [ 4] 1080 	call expression
      001A38 A6 07            [ 1] 1081 	ld a,#TK_RPAREN 
      001A3A CD 19 52         [ 4] 1082 	call expect
      001A3D                       1083 	_xpop 
      001A3D 90 F6            [ 1]    1     ld a,(y)
      001A3F 93               [ 1]    2     ldw x,y 
      001A40 EE 01            [ 2]    3     ldw x,(1,x)
      001A42 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A46 20 08            [ 2] 1084 	jra 18$	
      001A48                       1085 16$:
      001A48                       1086 	_unget_token 
      001A48 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A4D 4F               [ 1] 1087 	clr a 
      001A4E 20 12            [ 2] 1088 	jra 22$ 
      001A50                       1089 18$: 
      001A50 0D 01            [ 1] 1090 	tnz (NEG,sp)
      001A52 27 03            [ 1] 1091 	jreq 20$
      001A54 CD 02 05         [ 4] 1092 	call neg_ax   
      001A57                       1093 20$:
      001A57                       1094 	_xpush 
      001A57 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A5B 90 F7            [ 1]    2     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A5D 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A60 A6 84            [ 1] 1095 	ld a,#TK_INTGR
      001A62                       1096 22$:
      001A62                       1097 	_drop VSIZE
      001A62 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A64 81               [ 4] 1098 	ret
                                   1099 
                                   1100 
                                   1101 ;-----------------------------------
                                   1102 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1103 ; output:
                                   1104 ;   A    	token attribute 
                                   1105 ;	xstack		value 
                                   1106 ;-----------------------------------
                           000001  1107 	MULOP=1
                           000001  1108 	VSIZE=1
      001A65                       1109 term:
      001A65                       1110 	_vars VSIZE
      001A65 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1111 ; first factor 	
      001A67 CD 19 B0         [ 4] 1112 	call factor
      001A6A 4D               [ 1] 1113 	tnz a 
      001A6B 27 38            [ 1] 1114 	jreq term_exit  
      001A6D                       1115 term01:	 ; check for  operator '*'|'/'|'%' 
      001A6D CD 17 9C         [ 4] 1116 	call next_token
      001A70 6B 01            [ 1] 1117 	ld (MULOP,sp),a
      001A72 A4 30            [ 1] 1118 	and a,#TK_GRP_MASK
      001A74 A1 20            [ 1] 1119 	cp a,#TK_GRP_MULT
      001A76 27 09            [ 1] 1120 	jreq 1$
      001A78 A6 84            [ 1] 1121 	ld a,#TK_INTGR
      001A7A                       1122 	_unget_token 
      001A7A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A7F 20 24            [ 2] 1123 	jra term_exit 
      001A81                       1124 1$:	; got *|/|%
                                   1125 ;second factor
      001A81 CD 19 B0         [ 4] 1126 	call factor
      001A84 4D               [ 1] 1127 	tnz a 
      001A85 26 03            [ 1] 1128 	jrne 2$ 
      001A87 CC 16 38         [ 2] 1129 	jp syntax_error 
      001A8A                       1130 2$: ; select operation 	
      001A8A 7B 01            [ 1] 1131 	ld a,(MULOP,sp) 
      001A8C A1 20            [ 1] 1132 	cp a,#TK_MULT 
      001A8E 26 05            [ 1] 1133 	jrne 3$
                                   1134 ; '*' operator
      001A90 CD 02 69         [ 4] 1135 	call mul24 
      001A93 20 D8            [ 2] 1136 	jra term01
      001A95 A1 21            [ 1] 1137 3$: cp a,#TK_DIV 
      001A97 26 05            [ 1] 1138 	jrne 4$ 
                                   1139 ; '/' operator	
      001A99 CD 02 F7         [ 4] 1140 	call div24 
      001A9C 20 CF            [ 2] 1141 	jra term01 
      001A9E                       1142 4$: ; '%' operator
      001A9E CD 03 91         [ 4] 1143 	call mod24
      001AA1 20 CA            [ 2] 1144 	jra term01 
      001AA3                       1145 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001AA3 A6 84            [ 1] 1146 	ld a,#TK_INTGR
      001AA5                       1147 term_exit:
      001AA5                       1148 	_drop VSIZE 
      001AA5 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AA7 81               [ 4] 1149 	ret 
                                   1150 
                                   1151 ;-------------------------------
                                   1152 ;  expr ::= term [['+'|'-'] term]*
                                   1153 ;  result range {-32768..32767}
                                   1154 ;  output:
                                   1155 ;   A    token attribute 
                                   1156 ;   xstack	 result    
                                   1157 ;-------------------------------
                           000001  1158 	OP=1 
                           000001  1159 	VSIZE=1 
      001AA8                       1160 expression:
      001AA8                       1161 	_vars VSIZE 
      001AA8 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1162 ; first term 	
      001AAA CD 1A 65         [ 4] 1163 	call term
      001AAD 4D               [ 1] 1164 	tnz a 
      001AAE 27 2D            [ 1] 1165 	jreq 9$
      001AB0                       1166 1$:	; operator '+'|'-'
      001AB0 CD 17 9C         [ 4] 1167 	call next_token
      001AB3 6B 01            [ 1] 1168 	ld (OP,sp),a 
      001AB5 A4 30            [ 1] 1169 	and a,#TK_GRP_MASK
      001AB7 A1 10            [ 1] 1170 	cp a,#TK_GRP_ADD 
      001AB9 27 09            [ 1] 1171 	jreq 2$ 
      001ABB                       1172 	_unget_token 
      001ABB 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AC0 A6 84            [ 1] 1173 	ld a,#TK_INTGR
      001AC2 20 19            [ 2] 1174 	jra 9$ 
      001AC4                       1175 2$: ; second term 
      001AC4 CD 1A 65         [ 4] 1176 	call term
      001AC7 4D               [ 1] 1177 	tnz a 
      001AC8 26 03            [ 1] 1178 	jrne 3$
      001ACA CC 16 38         [ 2] 1179 	jp syntax_error
      001ACD                       1180 3$:
      001ACD 7B 01            [ 1] 1181 	ld a,(OP,sp)
      001ACF A1 10            [ 1] 1182 	cp a,#TK_PLUS 
      001AD1 26 05            [ 1] 1183 	jrne 4$
                                   1184 ; '+' operator	
      001AD3 CD 01 6E         [ 4] 1185 	call add24
      001AD6 20 D8            [ 2] 1186 	jra 1$ 
      001AD8                       1187 4$:	; '-' operator 
      001AD8 CD 01 8B         [ 4] 1188 	call sub24
      001ADB 20 D3            [ 2] 1189 	jra 1$
      001ADD                       1190 9$:
      001ADD                       1191 	_drop VSIZE 
      001ADD 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ADF 81               [ 4] 1192 	ret 
                                   1193 
                                   1194 ;---------------------------------------------
                                   1195 ; rel ::= expr rel_op expr
                                   1196 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                   1197 ;  relation return  integer , zero is false 
                                   1198 ;  output:
                                   1199 ;	 xstack		value  
                                   1200 ;---------------------------------------------
                           000001  1201 	RELOP=1
                           000001  1202 	VSIZE=1 
      001AE0                       1203 relation: 
      001AE0                       1204 	_vars VSIZE
      001AE0 52 01            [ 2]    1     sub sp,#VSIZE 
      001AE2 CD 1A A8         [ 4] 1205 	call expression
      001AE5 4D               [ 1] 1206 	tnz a 
      001AE6 27 54            [ 1] 1207 	jreq 9$ 
                                   1208 ; expect rel_op or leave 
      001AE8 CD 17 9C         [ 4] 1209 	call next_token 
      001AEB 6B 01            [ 1] 1210 	ld (RELOP,sp),a 
      001AED A4 30            [ 1] 1211 	and a,#TK_GRP_MASK
      001AEF A1 30            [ 1] 1212 	cp a,#TK_GRP_RELOP 
      001AF1 27 09            [ 1] 1213 	jreq 2$
      001AF3 A6 84            [ 1] 1214 	ld a,#TK_INTGR 
      001AF5                       1215 	_unget_token 
      001AF5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AFA 20 40            [ 2] 1216 	jra 9$ 
      001AFC                       1217 2$:	; expect another expression
      001AFC CD 1A A8         [ 4] 1218 	call expression
      001AFF 4D               [ 1] 1219 	tnz a 
      001B00 26 03            [ 1] 1220 	jrne 3$
      001B02 CC 16 38         [ 2] 1221 	jp syntax_error 
      001B05                       1222 3$: 
      001B05 CD 01 A8         [ 4] 1223 	call cp24 
      001B08                       1224 	_xpop  
      001B08 90 F6            [ 1]    1     ld a,(y)
      001B0A 93               [ 1]    2     ldw x,y 
      001B0B EE 01            [ 2]    3     ldw x,(1,x)
      001B0D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B11 4D               [ 1] 1225 	tnz a 
      001B12 2B 08            [ 1] 1226 	jrmi 4$
      001B14 26 0C            [ 1] 1227 	jrne 5$
      001B16 35 02 00 0E      [ 1] 1228 	mov acc8,#2 ; i1==i2
      001B1A 20 0A            [ 2] 1229 	jra 6$ 
      001B1C                       1230 4$: ; i1<i2
      001B1C 35 04 00 0E      [ 1] 1231 	mov acc8,#4 
      001B20 20 04            [ 2] 1232 	jra 6$
      001B22                       1233 5$: ; i1>i2
      001B22 35 01 00 0E      [ 1] 1234 	mov acc8,#1  
      001B26                       1235 6$: ; 0=false, -1=true 
      001B26 5F               [ 1] 1236 	clrw x 
      001B27 C6 00 0E         [ 1] 1237 	ld a, acc8  
      001B2A 14 01            [ 1] 1238 	and a,(RELOP,sp)
      001B2C 27 03            [ 1] 1239 	jreq 7$
      001B2E 53               [ 2] 1240 	cplw x 
      001B2F A6 FF            [ 1] 1241 	ld a,#255 
      001B31                       1242 7$:	_xpush 
      001B31 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B35 90 F7            [ 1]    2     ld (y),a 
      001B37 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B3A A6 84            [ 1] 1243 	ld a,#TK_INTGR
      001B3C                       1244 9$: 
      001B3C                       1245 	_drop VSIZE
      001B3C 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B3E 81               [ 4] 1246 	ret 
                                   1247 
                                   1248 ;-------------------------------------------
                                   1249 ;  AND factor:  [NOT] relation | (condition)
                                   1250 ;  output:
                                   1251 ;     A      TK_INTGR|0
                                   1252 ;-------------------------------------------
                           000001  1253 	NOT_OP=1
      001B3F                       1254 and_factor:
      001B3F 4B 00            [ 1] 1255 	push #0 
      001B41 CD 17 9C         [ 4] 1256 0$:	call next_token  
      001B44 4D               [ 1] 1257 	tnz a 
      001B45 27 25            [ 1] 1258 	jreq 8$ 
      001B47 A1 87            [ 1] 1259 	cp a,#TK_NOT 
      001B49 26 04            [ 1] 1260 	jrne 1$ 
      001B4B 03 01            [ 1] 1261 	cpl (NOT_OP,sp)
      001B4D 20 F2            [ 2] 1262 	jra 0$ 
      001B4F                       1263 1$:	
      001B4F A1 06            [ 1] 1264 	cp a,#TK_LPAREN 
      001B51 26 0A            [ 1] 1265 	jrne 2$
      001B53 CD 1B C1         [ 4] 1266 	call condition
      001B56 A6 07            [ 1] 1267 	ld a,#TK_RPAREN 
      001B58 CD 19 52         [ 4] 1268 	call expect
      001B5B 20 08            [ 2] 1269 	jra 3$
      001B5D                       1270 2$: _unget_token 
      001B5D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B62 CD 1A E0         [ 4] 1271 	call relation
      001B65                       1272 3$:
      001B65 0D 01            [ 1] 1273 	tnz (NOT_OP,sp)
      001B67 27 03            [ 1] 1274 	jreq 8$ 
      001B69 CD 01 EA         [ 4] 1275 	call cpl24
      001B6C                       1276 8$:
      001B6C                       1277 	_drop 1  
      001B6C 5B 01            [ 2]    1     addw sp,#1 
      001B6E 81               [ 4] 1278     ret 
                                   1279 
                                   1280 
                                   1281 ;--------------------------------------------
                                   1282 ;  AND operator as priority over OR||XOR 
                                   1283 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1284 ;          
                                   1285 ;  output:
                                   1286 ;     A     TK_INTGR|0
                                   1287 ;    xtack   value 
                                   1288 ;--------------------------------------------
      001B6F                       1289 and_cond:
      001B6F CD 1B 3F         [ 4] 1290 	call and_factor
      001B72 4D               [ 1] 1291 	tnz a 
      001B73 27 4B            [ 1] 1292 	jreq 9$  
      001B75 CD 17 9C         [ 4] 1293 1$: call next_token 
      001B78 4D               [ 1] 1294 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B79 27 43            [ 1] 1295 	jreq 6$ 
      001B7B A1 88            [ 1] 1296 	cp a,#TK_AND 
      001B7D 27 07            [ 1] 1297 	jreq 3$
      001B7F                       1298 	_unget_token 
      001B7F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B84 20 38            [ 2] 1299 	jra 6$ 
      001B86 CD 1B 3F         [ 4] 1300 3$:	call and_factor  
      001B89 4D               [ 1] 1301 	tnz a 
      001B8A 26 03            [ 1] 1302 	jrne 4$
      001B8C CC 16 38         [ 2] 1303 	jp syntax_error 
      001B8F                       1304 4$:	
      001B8F                       1305 	_xpop 
      001B8F 90 F6            [ 1]    1     ld a,(y)
      001B91 93               [ 1]    2     ldw x,y 
      001B92 EE 01            [ 2]    3     ldw x,(1,x)
      001B94 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B98 C7 00 0C         [ 1] 1306 	ld acc24,a 
      001B9B CF 00 0D         [ 2] 1307 	ldw acc16,x
      001B9E                       1308 	_xpop 
      001B9E 90 F6            [ 1]    1     ld a,(y)
      001BA0 93               [ 1]    2     ldw x,y 
      001BA1 EE 01            [ 2]    3     ldw x,(1,x)
      001BA3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BA7 C4 00 0C         [ 1] 1309 	and a,acc24 
      001BAA 02               [ 1] 1310 	rlwa x 
      001BAB C4 00 0D         [ 1] 1311 	and a,acc16 
      001BAE 02               [ 1] 1312 	rlwa x 
      001BAF C4 00 0E         [ 1] 1313 	and a,acc8 
      001BB2 02               [ 1] 1314 	rlwa x
      001BB3                       1315 	_xpush
      001BB3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BB7 90 F7            [ 1]    2     ld (y),a 
      001BB9 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BBC 20 B7            [ 2] 1316 	jra 1$  
      001BBE A6 84            [ 1] 1317 6$: ld a,#TK_INTGR 
      001BC0 81               [ 4] 1318 9$:	ret 	 
                                   1319 
                                   1320 
                                   1321 ;--------------------------------------------
                                   1322 ; condition for IF and UNTIL 
                                   1323 ; operators: OR,XOR 
                                   1324 ; format:  and_cond [ OP and_cond ]* 
                                   1325 ; output:
                                   1326 ;    A        INTGR|0 
                                   1327 ;    xstack   value 
                                   1328 ;--------------------------------------------
                           000001  1329 	ATMP=1
                           000002  1330 	OP=2
                           000002  1331 	VSIZE=2 
      001BC1                       1332 condition:
      001BC1                       1333 	_vars VSIZE 
      001BC1 52 02            [ 2]    1     sub sp,#VSIZE 
      001BC3 CD 1B 6F         [ 4] 1334 	call and_cond
      001BC6 4D               [ 1] 1335 	tnz a 
      001BC7 27 69            [ 1] 1336 	jreq 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001BC9 CD 17 9C         [ 4] 1337 1$:	call next_token 
      001BCC A1 89            [ 1] 1338 	cp a,#TK_OR 
      001BCE 27 0B            [ 1] 1339 	jreq 2$
      001BD0 A1 8A            [ 1] 1340 	cp a,#TK_XOR
      001BD2 27 07            [ 1] 1341 	jreq 2$ 
      001BD4                       1342 	_unget_token 
      001BD4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BD9 20 55            [ 2] 1343 	jra 8$ 
      001BDB 6B 02            [ 1] 1344 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BDD CD 1B 6F         [ 4] 1345 	call and_cond
      001BE0 A1 84            [ 1] 1346 	cp a,#TK_INTGR 
      001BE2 27 03            [ 1] 1347 	jreq 3$
      001BE4 CC 16 38         [ 2] 1348 	jp syntax_error 
      001BE7                       1349 3$:	 
      001BE7                       1350 	_xpop  ; rigth arg 
      001BE7 90 F6            [ 1]    1     ld a,(y)
      001BE9 93               [ 1]    2     ldw x,y 
      001BEA EE 01            [ 2]    3     ldw x,(1,x)
      001BEC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BF0 C7 00 0C         [ 1] 1351 	ld acc24,a 
      001BF3 CF 00 0D         [ 2] 1352 	ldw acc16,x 
      001BF6                       1353 	_xpop  ; left arg  
      001BF6 90 F6            [ 1]    1     ld a,(y)
      001BF8 93               [ 1]    2     ldw x,y 
      001BF9 EE 01            [ 2]    3     ldw x,(1,x)
      001BFB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BFF 6B 01            [ 1] 1354 	ld (ATMP,sp),a 
      001C01 7B 02            [ 1] 1355 	ld a,(OP,sp)
      001C03 A1 8A            [ 1] 1356 	cp a,#TK_XOR 
      001C05 27 10            [ 1] 1357 	jreq 5$ 
      001C07                       1358 4$: ; A:X OR acc24   
      001C07 7B 01            [ 1] 1359 	ld a,(ATMP,sp)
      001C09 CA 00 0C         [ 1] 1360 	or a,acc24 
      001C0C 02               [ 1] 1361 	rlwa x 
      001C0D CA 00 0D         [ 1] 1362 	or a,acc16 
      001C10 02               [ 1] 1363 	rlwa x 
      001C11 CA 00 0E         [ 1] 1364 	or a,acc8 
      001C14 02               [ 1] 1365 	rlwa x 
      001C15 20 0E            [ 2] 1366 	jra 6$  
      001C17                       1367 5$: ; A:X XOR acc24 
      001C17 7B 01            [ 1] 1368 	ld a,(ATMP,sp)
      001C19 C8 00 0C         [ 1] 1369 	xor a,acc24 
      001C1C 02               [ 1] 1370 	rlwa x 
      001C1D C8 00 0D         [ 1] 1371 	xor a,acc16 
      001C20 02               [ 1] 1372 	rlwa x 
      001C21 C8 00 0E         [ 1] 1373 	xor a,acc8 
      001C24 02               [ 1] 1374 	rlwa x 
      001C25                       1375 6$: _xpush
      001C25 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C29 90 F7            [ 1]    2     ld (y),a 
      001C2B 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C2E 20 99            [ 2] 1376 	jra 1$ 
      001C30 A6 84            [ 1] 1377 8$:	ld a,#TK_INTGR 
      001C32                       1378 9$:	_drop VSIZE 
      001C32 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001C34 81               [ 4] 1379 	ret 
                                   1380 
                                   1381 
                                   1382 ;--------------------------------------------
                                   1383 ; BASIC: HEX 
                                   1384 ; select hexadecimal base for integer print
                                   1385 ;---------------------------------------------
      001C35                       1386 hex_base:
      001C35 35 10 00 0A      [ 1] 1387 	mov base,#16 
      001C39 81               [ 4] 1388 	ret 
                                   1389 
                                   1390 ;--------------------------------------------
                                   1391 ; BASIC: DEC 
                                   1392 ; select decimal base for integer print
                                   1393 ;---------------------------------------------
      001C3A                       1394 dec_base:
      001C3A 35 0A 00 0A      [ 1] 1395 	mov base,#10
      001C3E 81               [ 4] 1396 	ret 
                                   1397 
                                   1398 ;------------------------
                                   1399 ; BASIC: FREE 
                                   1400 ; return free size in RAM 
                                   1401 ; output:
                                   1402 ;   A:x		size 
                                   1403 ;--------------------------
      001C3F                       1404 free:
      001C3F 4F               [ 1] 1405 	clr a 
      001C40 AE 16 90         [ 2] 1406 	ldw x,#tib 
      001C43 72 B0 00 32      [ 2] 1407 	subw x,dvar_end 
      001C47 81               [ 4] 1408 	ret 
                                   1409 
                                   1410 ;------------------------------
                                   1411 ; BASIC: SIZE 
                                   1412 ; command that print 
                                   1413 ; program start addres and size 
                                   1414 ;------------------------------
      001C48                       1415 cmd_size:
      001C48 3B 00 0A         [ 1] 1416 	push base 
      001C4B AE 1E 35         [ 2] 1417 	ldw x,#PROG_ADDR 
      001C4E CD 09 3A         [ 4] 1418 	call puts 
      001C51 CE 00 1B         [ 2] 1419 	ldw x,txtbgn     
      001C54 35 10 00 0A      [ 1] 1420 	mov base,#16 
      001C58 CD 17 E4         [ 4] 1421 	call prt_i16
      001C5B 32 00 0A         [ 1] 1422 	pop base 
      001C5E AE 1E 47         [ 2] 1423 	ldw x,#PROG_SIZE 
      001C61 CD 09 3A         [ 4] 1424 	call puts 
      001C64 CE 00 1D         [ 2] 1425 	ldw x,txtend 
      001C67 72 B0 00 1B      [ 2] 1426 	subw x,txtbgn 
      001C6B CD 17 E4         [ 4] 1427 	call prt_i16
      001C6E AE 1E 58         [ 2] 1428 	ldw x,#STR_BYTES 
      001C71 CD 09 3A         [ 4] 1429 	call puts  
      001C74 81               [ 4] 1430 	ret 
                                   1431 
                                   1432 
                                   1433 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   1434 ; BASIC: UBOUND  
                                   1435 ; return array variable size 
                                   1436 ; and set 'array_size' variable 
                                   1437 ; output:
                                   1438 ;   A:X 	array_size
                                   1439 ;--------------------------
      001C75                       1440 ubound:
      001C75 CD 1C 3F         [ 4] 1441 	call free 
      001C78 A6 03            [ 1] 1442 	ld a,#CELL_SIZE 
      001C7A 62               [ 2] 1443 	div x,a 
      001C7B CF 00 20         [ 2] 1444 	ldw array_size,x
      001C7E 4F               [ 1] 1445 	clr a 
      001C7F 81               [ 4] 1446 	ret 
                                   1447 
                                   1448 ;-----------------------------
                                   1449 ; BASIC: LET var=expr 
                                   1450 ; variable assignement 
                                   1451 ; output:
                                   1452 ;   A 		TK_NONE 
                                   1453 ;-----------------------------
      001C80                       1454 let::
      001C80 CD 17 9C         [ 4] 1455 	call next_token 
      001C83 A1 85            [ 1] 1456 	cp a,#TK_VAR 
      001C85 27 0C            [ 1] 1457 	jreq let_var
      001C87 A1 05            [ 1] 1458 	cp a,#TK_ARRAY 
      001C89 27 03            [ 1] 1459 	jreq  let_array
      001C8B CC 16 38         [ 2] 1460 	jp syntax_error
      001C8E                       1461 let_array:
      001C8E CD 19 80         [ 4] 1462 	call get_array_element
      001C91 20 03            [ 2] 1463 	jra let_eval 
      001C93                       1464 let_var:
      001C93 CD 17 C4         [ 4] 1465 	call get_addr
      001C96                       1466 let_eval:
      001C96 CF 00 19         [ 2] 1467 	ldw ptr16,x  ; variable address 
      001C99 CD 17 9C         [ 4] 1468 	call next_token 
      001C9C A1 32            [ 1] 1469 	cp a,#TK_EQUAL
      001C9E 27 03            [ 1] 1470 	jreq 1$
      001CA0 CC 16 38         [ 2] 1471 	jp syntax_error
      001CA3                       1472 1$:	
      001CA3 CD 1B C1         [ 4] 1473 	call condition   
      001CA6 A1 84            [ 1] 1474 	cp a,#TK_INTGR 
      001CA8 27 03            [ 1] 1475 	jreq 2$
      001CAA CC 16 38         [ 2] 1476 	jp syntax_error
      001CAD                       1477 2$:	
      001CAD                       1478 	_xpop ; value 
      001CAD 90 F6            [ 1]    1     ld a,(y)
      001CAF 93               [ 1]    2     ldw x,y 
      001CB0 EE 01            [ 2]    3     ldw x,(1,x)
      001CB2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CB6                       1479 3$:
      001CB6 72 C7 00 19      [ 4] 1480 	ld [ptr16],a
      001CBA 72 5C 00 1A      [ 1] 1481 	inc ptr8  
      001CBE 72 CF 00 19      [ 5] 1482 	ldw [ptr16],x 
      001CC2 81               [ 4] 1483 	ret 
                                   1484 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1485 
                                   1486 ;--------------------------
                                   1487 ; return constant/dvar value 
                                   1488 ; from it's record address
                                   1489 ; input:
                                   1490 ;	X	*const record 
                                   1491 ; output:
                                   1492 ;   A:X   const  value
                                   1493 ;--------------------------
      001CC3                       1494 get_value: ; -- i 
      001CC3 F6               [ 1] 1495 	ld a,(x) ; record size 
      001CC4 A4 0F            [ 1] 1496 	and a,#NAME_MAX_LEN
      001CC6 A0 03            [ 1] 1497 	sub a,#CELL_SIZE ; * value 
      001CC8 88               [ 1] 1498 	push a 
      001CC9 4B 00            [ 1] 1499 	push #0 
      001CCB 72 FB 01         [ 2] 1500 	addw x,(1,sp)
      001CCE F6               [ 1] 1501 	ld a,(x)
      001CCF EE 01            [ 2] 1502 	ldw x,(1,x)
      001CD1                       1503 	_drop 2
      001CD1 5B 02            [ 2]    1     addw sp,#2 
      001CD3 81               [ 4] 1504 	ret 
                                   1505 
                                   1506 
                                   1507 ;--------------------------
                                   1508 ; BASIC: EEFREE 
                                   1509 ; eeprom_free 
                                   1510 ; search end of data  
                                   1511 ; in EEPROM 
                                   1512 ; input:
                                   1513 ;    none 
                                   1514 ; output:
                                   1515 ;    A:X     address free
                                   1516 ;-------------------------
      001CD4                       1517 func_eefree:
      001CD4 AE 40 00         [ 2] 1518 	ldw x,#EEPROM_BASE 
      001CD7 35 08 00 0E      [ 1] 1519 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001CDB A3 47 F8         [ 2] 1520     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001CDE 24 17            [ 1] 1521 	jruge 8$ ; no free space 
      001CE0 F6               [ 1] 1522 2$: ld a,(x)
      001CE1 26 0C            [ 1] 1523 	jrne 3$
      001CE3 5C               [ 1] 1524 	incw x 
      001CE4 72 5A 00 0E      [ 1] 1525 	dec acc8 
      001CE8 26 F6            [ 1] 1526 	jrne 2$
      001CEA 1D 00 08         [ 2] 1527 	subw x,#8 
      001CED 20 09            [ 2] 1528 	jra 9$  
      001CEF F6               [ 1] 1529 3$: ld a,(x)
      001CF0 5C               [ 1] 1530 	incw x
      001CF1 4D               [ 1] 1531 	tnz a  
      001CF2 26 FB            [ 1] 1532 	jrne 3$
      001CF4 5A               [ 2] 1533 	decw x   
      001CF5 20 E0            [ 2] 1534 	jra 1$ 
      001CF7 5F               [ 1] 1535 8$: clrw x ; no free space 
      001CF8 4F               [ 1] 1536 9$: clr a 
      001CF9 CF 00 24         [ 2] 1537 	ldw free_eeprom,x ; save in system variable 
      001CFC 81               [ 4] 1538 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                   1539 
                           000005  1540 REC_XTRA_BYTES=5 
                                   1541 ;--------------------------
                                   1542 ; search constant/dim_var name 
                                   1543 ; format of record  
                                   1544 ;   .byte record length 
                                   1545 ;         = strlen(name)+5 
                                   1546 ;   .asciz name (variable length)
                                   1547 ;   .int24 value (3 bytes )
                                   1548 ; a constant record use 7+ bytes
                                   1549 ; constants are saved in EEPROM  
                                   1550 ; input:
                                   1551 ;    A     record_len 
                                   1552 ;    X     *name
                                   1553 ; output:
                                   1554 ;    X     address|0
                                   1555 ; use:
                                   1556 ;   A,Y, acc16 
                                   1557 ;-------------------------
                           000001  1558 	NAMEPTR=1 ; target name pointer 
                           000003  1559 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1560 	RECLEN=5  ; record length of target
                           000007  1561 	LIMIT=7   ; search area limit 
                           000008  1562 	VSIZE=8  
      001CFD                       1563 search_name:
      001CFD 90 89            [ 2] 1564 	pushw y 
      001CFF                       1565 	_vars VSIZE
      001CFF 52 08            [ 2]    1     sub sp,#VSIZE 
      001D01 72 5F 00 0D      [ 1] 1566 	clr acc16 
      001D05 6B 05            [ 1] 1567 	ld (RECLEN,sp),a    
      001D07 1F 01            [ 2] 1568 	ldw (NAMEPTR,sp),x
      001D09 CE 00 32         [ 2] 1569 	ldw x,dvar_end 
      001D0C 1F 07            [ 2] 1570 	ldw (LIMIT,sp),x 
      001D0E 90 CE 00 30      [ 2] 1571 	ldw y,dvar_bgn
      001D12 17 03            [ 2] 1572 1$:	ldw (WLKPTR,sp),y
      001D14 93               [ 1] 1573 	ldw x,y 
      001D15 13 07            [ 2] 1574 	cpw x, (LIMIT,sp) 
      001D17 24 20            [ 1] 1575 	jruge 7$ ; no match found 
      001D19 90 F6            [ 1] 1576 	ld a,(y)
      001D1B A4 0F            [ 1] 1577 	and a,#NAME_MAX_LEN
      001D1D 11 05            [ 1] 1578 	cp a,(RECLEN,sp)
      001D1F 26 09            [ 1] 1579 	jrne 2$ 
      001D21 90 5C            [ 1] 1580 	incw y 
      001D23 1E 01            [ 2] 1581 	ldw x,(NAMEPTR,sp)
      001D25 CD 13 63         [ 4] 1582 	call strcmp
      001D28 26 13            [ 1] 1583 	jrne 8$ ; match found 
      001D2A                       1584 2$: ; skip this one 	
      001D2A 16 03            [ 2] 1585 	ldW Y,(WLKPTR,sp)
      001D2C 90 F6            [ 1] 1586 	ld a,(y)
      001D2E A4 0F            [ 1] 1587 	and a,#NAME_MAX_LEN 
      001D30 C7 00 0E         [ 1] 1588 	ld acc8,a 
      001D33 72 B9 00 0D      [ 2] 1589 	addw y,acc16 
      001D37 20 D9            [ 2] 1590 	jra 1$  
      001D39                       1591 7$: ; no match found 
      001D39 0F 03            [ 1] 1592 	clr (WLKPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D3B 0F 04            [ 1] 1593 	clr (WLKPTR+1,sp)
      001D3D                       1594 8$: ; match found 
      001D3D 1E 03            [ 2] 1595 	ldw x,(WLKPTR,sp) ; record address 
      001D3F                       1596 9$:	_DROP VSIZE
      001D3F 5B 08            [ 2]    1     addw sp,#VSIZE 
      001D41 90 85            [ 2] 1597 	popw y 
      001D43 81               [ 4] 1598 	 ret 
                                   1599 
                                   1600 ;--------------------------------------------
                                   1601 ; BASIC: CONST name=value [, name=value]*
                                   1602 ; define constant(s) saved in EEPROM
                                   1603 ; share most of his code with cmd_dim 
                                   1604 ;--------------------------------------------
                           000001  1605 	VAR_NAME=1 
                           000003  1606 	REC_LEN=3
                           000005  1607 	RONLY=5
                           000005  1608 	VSIZE=5
      001D44                       1609 cmd_const:
      001D44 72 00 00 22 05   [ 2] 1610 	btjt flags,#FRUN,0$
      001D49 A6 06            [ 1] 1611 	ld a,#ERR_RUN_ONLY
      001D4B CC 16 3A         [ 2] 1612 	jp tb_error 
      001D4E                       1613 0$: 
      001D4E                       1614 	_vars VSIZE 
      001D4E 52 05            [ 2]    1     sub sp,#VSIZE 
      001D50 A6 80            [ 1] 1615 	ld a,#128 
      001D52 6B 05            [ 1] 1616 	ld (RONLY,sp),a 
      001D54 0F 03            [ 1] 1617 	clr (REC_LEN,sp)
      001D56 20 10            [ 2] 1618 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1619 
                                   1620 ;---------------------------------
                                   1621 ; BASIC: DIM var_name [var_name]* 
                                   1622 ; create named variables at end 
                                   1623 ; of BASIC program. 
                                   1624 ; These variables are initialized 
                                   1625 ; to 0. 
                                   1626 ; record format same ast CONST 
                                   1627 ; but r/w because stored in RAM 
                                   1628 ;---------------------------------
      001D58                       1629 cmd_dim:
      001D58 72 00 00 22 05   [ 2] 1630 	btjt flags,#FRUN,cmd_dim1
      001D5D A6 06            [ 1] 1631 	ld a,#ERR_RUN_ONLY
      001D5F CC 16 3A         [ 2] 1632 	jp tb_error 
      001D62                       1633 cmd_dim1:	
      001D62                       1634 	_vars VSIZE
      001D62 52 05            [ 2]    1     sub sp,#VSIZE 
      001D64 0F 03            [ 1] 1635 	clr (REC_LEN,sp )
      001D66 0F 05            [ 1] 1636 	clr (RONLY,sp)
      001D68                       1637 cmd_dim2: 
      001D68 CD 17 9C         [ 4] 1638 0$:	call next_token 
      001D6B A1 03            [ 1] 1639 	cp a,#TK_LABEL  
      001D6D 27 03            [ 1] 1640 	jreq 1$ 
      001D6F CC 16 38         [ 2] 1641 	jp syntax_error 
      001D72 1F 01            [ 2] 1642 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001D74 CD 13 58         [ 4] 1643 	call strlen
      001D77 AB 05            [ 1] 1644 	add a,#REC_XTRA_BYTES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001D79 6B 04            [ 1] 1645 	ld (REC_LEN+1,sp),a
      001D7B CD 17 B5         [ 4] 1646 	call skip_string 
      001D7E 7B 04            [ 1] 1647 	ld a,(REC_LEN+1,sp)
      001D80 1E 01            [ 2] 1648 	ldw x,(VAR_NAME,sp) 
      001D82 CD 1C FD         [ 4] 1649 	call search_name  
      001D85 5D               [ 2] 1650 	tnzw x 
      001D86 27 05            [ 1] 1651 	jreq 2$
      001D88 A6 08            [ 1] 1652 	ld a,#ERR_DUPLICATE
      001D8A CC 16 3A         [ 2] 1653 	jp tb_error  
      001D8D CE 00 32         [ 2] 1654 2$:	ldw x,dvar_end 
      001D90 7B 04            [ 1] 1655 	ld a,(REC_LEN+1,sp)
      001D92 1A 05            [ 1] 1656 	or a,(RONLY,sp)
      001D94 F7               [ 1] 1657 	ld (x),a 
      001D95 5C               [ 1] 1658 	incw x 
      001D96 90 89            [ 2] 1659 	pushw y 
      001D98 16 03            [ 2] 1660 	ldw y,(VAR_NAME+2,sp)
      001D9A CD 13 74         [ 4] 1661 	call strcpy
      001D9D 90 85            [ 2] 1662 	popw y 
      001D9F 5A               [ 2] 1663 	decw x
      001DA0 72 FB 03         [ 2] 1664 	addw x,(REC_LEN,sp)
      001DA3 CF 00 32         [ 2] 1665 	ldw dvar_end,x 
      001DA6 1D 00 03         [ 2] 1666 	subw x,#CELL_SIZE  
      001DA9 7F               [ 1] 1667 	clr (x)
      001DAA 6F 01            [ 1] 1668 	clr (1,x)  
      001DAC 6F 02            [ 1] 1669 	clr (2,x)
      001DAE CD 17 9C         [ 4] 1670 4$: call next_token 
      001DB1 A1 08            [ 1] 1671 	cp a,#TK_COMMA 
      001DB3 27 B3            [ 1] 1672 	jreq 0$ 
      001DB5 A1 32            [ 1] 1673 	cp a,#TK_EQUAL 
      001DB7 26 2A            [ 1] 1674 	jrne 8$
                                   1675 ; initialize variable 
      001DB9 CD 1B C1         [ 4] 1676 	call condition 
      001DBC A1 84            [ 1] 1677 	cp a,#TK_INTGR
      001DBE 27 03            [ 1] 1678 	jreq 5$
      001DC0 CC 16 38         [ 2] 1679 	jp syntax_error
      001DC3 CE 00 32         [ 2] 1680 5$: ldw x,dvar_end 
      001DC6 1D 00 03         [ 2] 1681 	subw x,#CELL_SIZE 
      001DC9 CF 00 19         [ 2] 1682 	ldw ptr16,x 
      001DCC                       1683 	_xpop 
      001DCC 90 F6            [ 1]    1     ld a,(y)
      001DCE 93               [ 1]    2     ldw x,y 
      001DCF EE 01            [ 2]    3     ldw x,(1,x)
      001DD1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001DD5 72 C7 00 19      [ 4] 1684 	ld [ptr16],a 
      001DD9 72 5C 00 1A      [ 1] 1685 	inc ptr8 
      001DDD 72 CF 00 19      [ 5] 1686 	ldw [ptr16],x 
      001DE1 20 CB            [ 2] 1687 	jra 4$ 
      001DE3                       1688 8$:	
      001DE3                       1689 	_unget_token 	
      001DE3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001DE8                       1690 	_drop VSIZE 
      001DE8 5B 05            [ 2]    1     addw sp,#VSIZE 
      001DEA CD 1C 75         [ 4] 1691 	call ubound 
      001DED 81               [ 4] 1692 	ret 
                                   1693 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1694 
                                   1695 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1696 ; return program size 
                                   1697 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001DEE                       1698 prog_size:
      001DEE CE 00 1D         [ 2] 1699 	ldw x,txtend 
      001DF1 72 B0 00 1B      [ 2] 1700 	subw x,txtbgn 
      001DF5 81               [ 4] 1701 	ret 
                                   1702 
                                   1703 ;----------------------------
                                   1704 ; print program information 
                                   1705 ;---------------------------
      001DF6                       1706 program_info: 
      001DF6 AE 1E 35         [ 2] 1707 	ldw x,#PROG_ADDR 
      001DF9 CD 09 3A         [ 4] 1708 	call puts 
      001DFC CE 00 1B         [ 2] 1709 	ldw x,txtbgn 
      001DFF 35 10 00 0A      [ 1] 1710 	mov base,#16 
      001E03 CD 17 E4         [ 4] 1711 	call prt_i16
      001E06 35 0A 00 0A      [ 1] 1712 	mov base,#10  
      001E0A AE 1E 47         [ 2] 1713 	ldw x,#PROG_SIZE
      001E0D CD 09 3A         [ 4] 1714 	call puts 
      001E10 CD 1D EE         [ 4] 1715 	call prog_size 
      001E13 CD 17 E4         [ 4] 1716 	call prt_i16 
      001E16 AE 1E 58         [ 2] 1717 	ldw x,#STR_BYTES 
      001E19 CD 09 3A         [ 4] 1718 	call puts
      001E1C CE 00 1B         [ 2] 1719 	ldw x,txtbgn
      001E1F A3 36 84         [ 2] 1720 	cpw x,#app 
      001E22 25 05            [ 1] 1721 	jrult 2$
      001E24 AE 1E 5F         [ 2] 1722 	ldw x,#FLASH_MEM 
      001E27 20 03            [ 2] 1723 	jra 3$
      001E29 AE 1E 70         [ 2] 1724 2$: ldw x,#RAM_MEM 	 
      001E2C CD 09 3A         [ 4] 1725 3$:	call puts 
      001E2F A6 0D            [ 1] 1726 	ld a,#CR 
      001E31 CD 08 DD         [ 4] 1727 	call putc
      001E34 81               [ 4] 1728 	ret 
                                   1729 
      001E35 70 72 6F 67 72 61 6D  1730 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E47 2C 20 70 72 6F 67 72  1731 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001E58 20 62 79 74 65 73 00  1732 STR_BYTES: .asciz " bytes" 
      001E5F 20 69 6E 20 46 4C 41  1733 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001E70 20 69 6E 20 52 41 4D  1734 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1735 
                                   1736 
                                   1737 ;----------------------------
                                   1738 ; BASIC: LIST [[start][,end]]
                                   1739 ; list program lines 
                                   1740 ; form start to end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                   1741 ; if empty argument list then 
                                   1742 ; list all.
                                   1743 ;----------------------------
                           000001  1744 	FIRST=1
                           000003  1745 	LAST=3 
                           000005  1746 	LN_PTR=5
                           000006  1747 	VSIZE=6 
      001E7F                       1748 list:
      001E7F 72 01 00 22 05   [ 2] 1749 	btjf flags,#FRUN,0$
      001E84 A6 07            [ 1] 1750 	ld a,#ERR_CMD_ONLY
      001E86 CC 16 3A         [ 2] 1751 	jp tb_error
      001E89                       1752 0$:	 
      001E89 CD 1D EE         [ 4] 1753 	call prog_size 
      001E8C 22 01            [ 1] 1754 	jrugt 3$
      001E8E 81               [ 4] 1755 	ret 
      001E8F                       1756 3$: _vars VSIZE
      001E8F 52 06            [ 2]    1     sub sp,#VSIZE 
      001E91 CE 00 1B         [ 2] 1757 	ldw x,txtbgn 
      001E94 1F 05            [ 2] 1758 	ldw (LN_PTR,sp),x 
      001E96 FE               [ 2] 1759 	ldw x,(x) 
      001E97 1F 01            [ 2] 1760 	ldw (FIRST,sp),x ; list from first line 
      001E99 AE 7F FF         [ 2] 1761 	ldw x,#MAX_LINENO ; biggest line number 
      001E9C 1F 03            [ 2] 1762 	ldw (LAST,sp),x 
      001E9E CD 19 64         [ 4] 1763 	call arg_list
      001EA1 4D               [ 1] 1764 	tnz a
      001EA2 27 31            [ 1] 1765 	jreq list_loop 
      001EA4 A1 02            [ 1] 1766 	cp a,#2 
      001EA6 27 07            [ 1] 1767 	jreq 4$
      001EA8 A1 01            [ 1] 1768 	cp a,#1 
      001EAA 27 06            [ 1] 1769 	jreq first_line 
      001EAC CC 16 38         [ 2] 1770 	jp syntax_error 
      001EAF 85               [ 2] 1771 4$:	popw x 
      001EB0 1F 05            [ 2] 1772 	ldw (LAST+2,sp),x 
      001EB2                       1773 first_line:
      001EB2 85               [ 2] 1774 	popw x
      001EB3 1F 01            [ 2] 1775 	ldw (FIRST,sp),x 
      001EB5                       1776 lines_skip:
      001EB5 CE 00 1B         [ 2] 1777 	ldw x,txtbgn
      001EB8 1F 05            [ 2] 1778 2$:	ldw (LN_PTR,sp),x 
      001EBA C3 00 1D         [ 2] 1779 	cpw x,txtend 
      001EBD 2A 38            [ 1] 1780 	jrpl list_exit 
      001EBF FE               [ 2] 1781 	ldw x,(x) ;line# 
      001EC0 13 01            [ 2] 1782 	cpw x,(FIRST,sp)
      001EC2 2A 11            [ 1] 1783 	jrpl list_loop 
      001EC4 1E 05            [ 2] 1784 	ldw x,(LN_PTR,sp) 
      001EC6 E6 02            [ 1] 1785 	ld a,(2,x)
      001EC8 C7 00 0E         [ 1] 1786 	ld acc8,a 
      001ECB 72 5F 00 0D      [ 1] 1787 	clr acc16 
      001ECF 72 BB 00 0D      [ 2] 1788 	addw x,acc16
      001ED3 20 E3            [ 2] 1789 	jra 2$ 
                                   1790 ; print loop
      001ED5                       1791 list_loop:
      001ED5 1E 05            [ 2] 1792 	ldw x,(LN_PTR,sp)
      001ED7 E6 02            [ 1] 1793 	ld a,(2,x) 
      001ED9 CD 1F 4F         [ 4] 1794 	call prt_basic_line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001EDC 1E 05            [ 2] 1795 	ldw x,(LN_PTR,sp)
      001EDE E6 02            [ 1] 1796 	ld a,(2,x)
      001EE0 C7 00 0E         [ 1] 1797 	ld acc8,a 
      001EE3 72 5F 00 0D      [ 1] 1798 	clr acc16 
      001EE7 72 BB 00 0D      [ 2] 1799 	addw x,acc16
      001EEB C3 00 1D         [ 2] 1800 	cpw x,txtend 
      001EEE 2A 07            [ 1] 1801 	jrpl list_exit
      001EF0 1F 05            [ 2] 1802 	ldw (LN_PTR,sp),x
      001EF2 FE               [ 2] 1803 	ldw x,(x)
      001EF3 13 03            [ 2] 1804 	cpw x,(LAST,sp)  
      001EF5 2F DE            [ 1] 1805 	jrslt list_loop
      001EF7                       1806 list_exit:
      001EF7 55 00 03 00 01   [ 1] 1807 	mov in,count 
      001EFC AE 16 E0         [ 2] 1808 	ldw x,#pad 
      001EFF CF 00 04         [ 2] 1809 	ldw basicptr,x 
      001F02                       1810 	_drop VSIZE 
      001F02 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F04 CD 1D F6         [ 4] 1811 	call program_info 
      001F07 81               [ 4] 1812 	ret
                                   1813 
                                   1814 
                                   1815 ;--------------------------
                                   1816 ; BASIC: EDIT 
                                   1817 ;  copy program in FLASH 
                                   1818 ;  to RAM for edition 
                                   1819 ;-------------------------
      001F08                       1820 edit:
      001F08 AE 36 80         [ 2] 1821 	ldw x,#app_space
      001F0B CD 27 ED         [ 4] 1822 	call qsign 
      001F0E 27 07            [ 1] 1823 	jreq 1$ 
      001F10 AE 1F 38         [ 2] 1824 	ldw x,#NOT_SAVED 
      001F13 CD 09 3A         [ 4] 1825 	call puts 
      001F16 81               [ 4] 1826 	ret 
      001F17                       1827 1$: 
      001F17 90 AE 36 80      [ 2] 1828 	ldw y,#app_sign ; source address 
      001F1B CE 36 82         [ 2] 1829     ldw x,app_size  
      001F1E 1C 00 04         [ 2] 1830 	addw x,#4 
      001F21 CF 00 0D         [ 2] 1831 	ldw acc16,x  ; bytes to copy 
      001F24 AE 00 8C         [ 2] 1832 	ldw x,#rsign ; destination address 
      001F27 CD 13 84         [ 4] 1833 	call move  
      001F2A AE 00 90         [ 2] 1834 	ldw x,#free_ram 
      001F2D CF 00 1B         [ 2] 1835 	ldw txtbgn,x 
      001F30 72 BB 00 8E      [ 2] 1836 	addw x,rsize  
      001F34 CF 00 1D         [ 2] 1837 	ldw txtend,x 
      001F37 81               [ 4] 1838 	ret 
                                   1839 
      001F38 4E 6F 20 61 70 70 6C  1840 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1841 
                                   1842 
                                   1843 ;--------------------------
                                   1844 ; decompile line from token list
                                   1845 ; and print it. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1846 ; input:
                                   1847 ;   A       stop at this position 
                                   1848 ;   X 		pointer at line
                                   1849 ; output:
                                   1850 ;   none 
                                   1851 ;--------------------------	
      001F4F                       1852 prt_basic_line:
      001F4F 90 89            [ 2] 1853 	pushw y 
      001F51 C7 00 03         [ 1] 1854 	ld count,a 
      001F54 E6 02            [ 1] 1855 	ld a,(2,x)
      001F56 C1 00 03         [ 1] 1856 	cp a,count 
      001F59 2A 03            [ 1] 1857 	jrpl 1$ 
      001F5B C7 00 03         [ 1] 1858 	ld count,a 
      001F5E CF 00 04         [ 2] 1859 1$:	ldw basicptr,x 
      001F61 90 AE 16 90      [ 2] 1860 	ldw y,#tib  
      001F65 CD 11 74         [ 4] 1861 	call decompile 
      001F68 CD 09 3A         [ 4] 1862 	call puts 
      001F6B A6 0D            [ 1] 1863 	ld a,#CR 
      001F6D CD 08 DD         [ 4] 1864 	call putc 
      001F70 90 85            [ 2] 1865 	popw y 
      001F72 81               [ 4] 1866 	ret 
                                   1867 
                                   1868 
                                   1869 ;---------------------------------
                                   1870 ; BASIC: PRINT|? arg_list 
                                   1871 ; print values from argument list
                                   1872 ;----------------------------------
                           000001  1873 	CCOMMA=1
                           000001  1874 	VSIZE=1
      001F73                       1875 print:
      001F73                       1876 	_vars VSIZE 
      001F73 52 01            [ 2]    1     sub sp,#VSIZE 
      001F75                       1877 reset_comma:
      001F75 0F 01            [ 1] 1878 	clr (CCOMMA,sp)
      001F77                       1879 prt_loop:
      001F77 CD 17 9C         [ 4] 1880 	call next_token
      001F7A A1 02            [ 1] 1881 	cp a,#CMD_END 
      001F7C 25 08            [ 1] 1882 	jrult 0$
      001F7E A1 0A            [ 1] 1883 	cp a,#TK_COLON 
      001F80 27 04            [ 1] 1884 	jreq 0$
      001F82 A1 80            [ 1] 1885 	cp a,#TK_CMD
      001F84 26 07            [ 1] 1886 	jrne 10$
      001F86                       1887 0$:
      001F86                       1888 	_unget_token 
      001F86 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F8B 20 63            [ 2] 1889 	jra 8$ 
      001F8D                       1890 10$:	
      001F8D A1 02            [ 1] 1891 	cp a,#TK_QSTR
      001F8F 27 12            [ 1] 1892 	jreq 1$
      001F91 A1 04            [ 1] 1893 	cp a,#TK_CHAR 
      001F93 27 1B            [ 1] 1894 	jreq 2$ 
      001F95 A1 82            [ 1] 1895 	cp a,#TK_CFUNC 
      001F97 27 1F            [ 1] 1896 	jreq 3$
      001F99 A1 08            [ 1] 1897 	cp a,#TK_COMMA 
      001F9B 27 2A            [ 1] 1898 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F9D A1 09            [ 1] 1899 	cp a,#TK_SHARP 
      001F9F 27 2A            [ 1] 1900 	jreq 5$
      001FA1 20 3D            [ 2] 1901 	jra 7$ 
      001FA3                       1902 1$:	; print string 
      001FA3 CD 09 3A         [ 4] 1903 	call puts
      001FA6 5C               [ 1] 1904 	incw x
      001FA7 72 B0 00 04      [ 2] 1905 	subw x,basicptr 
      001FAB CF 00 00         [ 2] 1906 	ldw in.w,x  
      001FAE 20 C5            [ 2] 1907 	jra reset_comma
      001FB0                       1908 2$:	; print character 
      001FB0 CD 17 DE         [ 4] 1909 	call get_char 
      001FB3 CD 08 DD         [ 4] 1910 	call putc 
      001FB6 20 BD            [ 2] 1911 	jra reset_comma 
      001FB8                       1912 3$: ; print character function value  	
      001FB8                       1913 	_get_code_addr 
      001FB8 FE               [ 2]    1         ldw x,(x)
      001FB9 72 5C 00 01      [ 1]    2         inc in 
      001FBD 72 5C 00 01      [ 1]    3         inc in 
      001FC1 FD               [ 4] 1914 	call (x)
      001FC2 CD 08 DD         [ 4] 1915 	call putc
      001FC5 20 AE            [ 2] 1916 	jra reset_comma 
      001FC7                       1917 4$: ; set comma state 
      001FC7 03 01            [ 1] 1918 	cpl (CCOMMA,sp)
      001FC9 20 AC            [ 2] 1919 	jra prt_loop   
      001FCB                       1920 5$: ; # character must be followed by an integer   
      001FCB CD 17 9C         [ 4] 1921 	call next_token
      001FCE A1 84            [ 1] 1922 	cp a,#TK_INTGR 
      001FD0 27 03            [ 1] 1923 	jreq 6$
      001FD2 CC 16 38         [ 2] 1924 	jp syntax_error 
      001FD5                       1925 6$: ; set tab width
      001FD5 CD 17 CE         [ 4] 1926 	call get_int24 
      001FD8 9F               [ 1] 1927 	ld a,xl 
      001FD9 A4 0F            [ 1] 1928 	and a,#15 
      001FDB C7 00 23         [ 1] 1929 	ld tab_width,a 
      001FDE 20 95            [ 2] 1930 	jra reset_comma 
      001FE0                       1931 7$:	
      001FE0                       1932 	_unget_token 
      001FE0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FE5 CD 1B C1         [ 4] 1933 	call condition
      001FE8 4D               [ 1] 1934 	tnz a 
      001FE9 27 05            [ 1] 1935 	jreq 8$    
      001FEB CD 18 09         [ 4] 1936     call print_top
      001FEE 20 85            [ 2] 1937 	jra reset_comma 
      001FF0                       1938 8$:
      001FF0 0D 01            [ 1] 1939 	tnz (CCOMMA,sp)
      001FF2 26 05            [ 1] 1940 	jrne 9$
      001FF4 A6 0D            [ 1] 1941 	ld a,#CR 
      001FF6 CD 08 DD         [ 4] 1942     call putc 
      001FF9                       1943 9$:	_drop VSIZE 
      001FF9 5B 01            [ 2]    1     addw sp,#VSIZE 
      001FFB 81               [ 4] 1944 	ret 
                                   1945 
                                   1946 ;----------------------
                                   1947 ; 'save_context' and
                                   1948 ; 'rest_context' must be 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1949 ; called at the same 
                                   1950 ; call stack depth 
                                   1951 ; i.e. SP must have the 
                                   1952 ; save value at  
                                   1953 ; entry point of both 
                                   1954 ; routine. 
                                   1955 ;---------------------
                           000004  1956 	CTXT_SIZE=4 ; size of saved data 
                                   1957 ;--------------------
                                   1958 ; save current BASIC
                                   1959 ; interpreter context 
                                   1960 ; on stack 
                                   1961 ;--------------------
      001FFC                       1962 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001FFC                       1963 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001FFC                       1964 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001FFC                       1965 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001FFC                       1966 save_context:
      001FFC CE 00 04         [ 2] 1967 	ldw x,basicptr 
      001FFF 1F 03            [ 2] 1968 	ldw (BPTR,sp),x
      002001 C6 00 01         [ 1] 1969 	ld a,in 
      002004 6B 05            [ 1] 1970 	ld (IN,sp),a
      002006 C6 00 03         [ 1] 1971 	ld a,count 
      002009 6B 06            [ 1] 1972 	ld (CNT,sp),a  
      00200B 81               [ 4] 1973 	ret
                                   1974 
                                   1975 ;-----------------------
                                   1976 ; restore previously saved 
                                   1977 ; BASIC interpreter context 
                                   1978 ; from stack 
                                   1979 ;-------------------------
      00200C                       1980 rest_context:
      00200C 1E 03            [ 2] 1981 	ldw x,(BPTR,sp)
      00200E CF 00 04         [ 2] 1982 	ldw basicptr,x 
      002011 7B 05            [ 1] 1983 	ld a,(IN,sp)
      002013 C7 00 01         [ 1] 1984 	ld in,a
      002016 7B 06            [ 1] 1985 	ld a,(CNT,sp)
      002018 C7 00 03         [ 1] 1986 	ld count,a  
      00201B 81               [ 4] 1987 	ret
                                   1988 
                                   1989 
                                   1990 
                                   1991 ;------------------------------------------
                                   1992 ; BASIC: INPUT [string]var[,[string]var]
                                   1993 ; input value in variables 
                                   1994 ; [string] optionally can be used as prompt 
                                   1995 ;-----------------------------------------
                           000001  1996 	CX_BPTR=1
                           000003  1997 	CX_IN=3
                           000004  1998 	CX_CNT=4
                           000005  1999 	SKIP=5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                           000005  2000 	VSIZE=5
      00201C                       2001 input_var:
      00201C 90 89            [ 2] 2002 	pushw y 
      00201E                       2003 	_vars VSIZE 
      00201E 52 05            [ 2]    1     sub sp,#VSIZE 
      002020                       2004 input_loop:
      002020 0F 05            [ 1] 2005 	clr (SKIP,sp)
      002022 CD 17 9C         [ 4] 2006 	call next_token 
      002025 A1 02            [ 1] 2007 	cp a,#TK_QSTR 
      002027 26 10            [ 1] 2008 	jrne 1$ 
      002029 CD 09 3A         [ 4] 2009 	call puts 
      00202C 5C               [ 1] 2010 	incw x 
      00202D 72 B0 00 04      [ 2] 2011 	subw x,basicptr 
      002031 CF 00 00         [ 2] 2012 	ldw in.w,x 
      002034 03 05            [ 1] 2013 	cpl (SKIP,sp)
      002036 CD 17 9C         [ 4] 2014 	call next_token 
      002039 A1 85            [ 1] 2015 1$: cp a,#TK_VAR  
      00203B 27 03            [ 1] 2016 	jreq 2$ 
      00203D CC 16 38         [ 2] 2017 	jp syntax_error
      002040 CD 17 C4         [ 4] 2018 2$:	call get_addr
      002043 CF 00 19         [ 2] 2019 	ldw ptr16,x 
      002046 0D 05            [ 1] 2020 	tnz (SKIP,sp)
      002048 26 06            [ 1] 2021 	jrne 21$ 
      00204A CD 11 6A         [ 4] 2022 	call var_name 
      00204D CD 08 DD         [ 4] 2023 	call putc   
      002050                       2024 21$:
      002050 A6 3A            [ 1] 2025 	ld a,#':
      002052 CD 08 DD         [ 4] 2026 	call putc 
      002055 CD 1F FC         [ 4] 2027 	call save_context 
      002058 72 5F 00 03      [ 1] 2028 	clr count  
      00205C CD 0A 3F         [ 4] 2029 	call readln 
      00205F AE 16 90         [ 2] 2030 	ldw x,#tib 
      002062 3B 00 03         [ 1] 2031 	push count
      002065 4B 00            [ 1] 2032 	push #0 
      002067 72 FB 01         [ 2] 2033 	addw x,(1,sp)
      00206A 5C               [ 1] 2034 	incw x 
      00206B                       2035 	_drop 2 
      00206B 5B 02            [ 2]    1     addw sp,#2 
      00206D 72 5F 00 01      [ 1] 2036 	clr in 
      002071 CD 0E B4         [ 4] 2037 	call get_token
      002074 A1 84            [ 1] 2038 	cp a,#TK_INTGR
      002076 27 14            [ 1] 2039 	jreq 3$ 
      002078 A1 11            [ 1] 2040 	cp a,#TK_MINUS
      00207A 26 07            [ 1] 2041 	jrne 22$
      00207C CD 0E B4         [ 4] 2042 	call get_token 
      00207F A1 84            [ 1] 2043 	cp a,#TK_INTGR 
      002081 27 06            [ 1] 2044 	jreq 23$
      002083                       2045 22$:
      002083 CD 20 0C         [ 4] 2046 	call rest_context 
      002086 CC 16 38         [ 2] 2047 	jp syntax_error
      002089                       2048 23$:
      002089 CD 02 0D         [ 4] 2049 	call neg_acc24	
      00208C                       2050 3$: 
      00208C C6 00 0C         [ 1] 2051 	ld a,acc24 
      00208F CE 00 0D         [ 2] 2052 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002092 72 C7 00 19      [ 4] 2053 	ld [ptr16],a
      002096 72 5C 00 1A      [ 1] 2054 	inc ptr8  
      00209A 72 CF 00 19      [ 5] 2055 	ldw [ptr16],x 
      00209E CD 20 0C         [ 4] 2056 	call rest_context
      0020A1 CD 17 9C         [ 4] 2057 	call next_token 
      0020A4 A1 08            [ 1] 2058 	cp a,#TK_COMMA
      0020A6 26 03            [ 1] 2059 	jrne 4$ 
      0020A8 CC 20 20         [ 2] 2060 	jp input_loop
      0020AB                       2061 4$:
      0020AB A1 00            [ 1] 2062 	cp a,#TK_NONE 
      0020AD 27 07            [ 1] 2063 	jreq input_exit  
      0020AF A1 0A            [ 1] 2064 	cp a,#TK_COLON 
      0020B1 27 03            [ 1] 2065     jreq input_exit 
      0020B3 CC 16 38         [ 2] 2066 	jp syntax_error 
      0020B6                       2067 input_exit:
      0020B6                       2068 	_drop VSIZE 
      0020B6 5B 05            [ 2]    1     addw sp,#VSIZE 
      0020B8 90 85            [ 2] 2069 	popw y 
      0020BA 81               [ 4] 2070 	ret 
                                   2071 
                                   2072 
                                   2073 ;---------------------
                                   2074 ; BASIC: REM | ' 
                                   2075 ; skip comment to end of line 
                                   2076 ;---------------------- 
      0020BB                       2077 remark::
      0020BB 55 00 03 00 01   [ 1] 2078 	mov in,count 
      0020C0 81               [ 4] 2079  	ret 
                                   2080 
                                   2081 
                                   2082 ;---------------------
                                   2083 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2084 ; read in loop 'addr'  
                                   2085 ; apply & 'mask' to value 
                                   2086 ; loop while result==0.  
                                   2087 ; 'xor_mask' is used to 
                                   2088 ; invert the wait logic.
                                   2089 ; i.e. loop while not 0.
                                   2090 ;---------------------
                           000001  2091 	XMASK=1 
                           000002  2092 	MASK=2
                           000003  2093 	ADDR=3
                           000004  2094 	VSIZE=4
      0020C1                       2095 wait: 
      0020C1                       2096 	_vars VSIZE
      0020C1 52 04            [ 2]    1     sub sp,#VSIZE 
      0020C3 0F 01            [ 1] 2097 	clr (XMASK,sp) 
      0020C5 CD 19 64         [ 4] 2098 	call arg_list 
      0020C8 A1 02            [ 1] 2099 	cp a,#2
      0020CA 24 03            [ 1] 2100 	jruge 0$
      0020CC CC 16 38         [ 2] 2101 	jp syntax_error 
      0020CF A1 03            [ 1] 2102 0$:	cp a,#3
      0020D1 25 0C            [ 1] 2103 	jrult 1$
      0020D3                       2104 	_xpop  ; xor mask 
      0020D3 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020D5 93               [ 1]    2     ldw x,y 
      0020D6 EE 01            [ 2]    3     ldw x,(1,x)
      0020D8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020DC 9F               [ 1] 2105 	ld a,xl 
      0020DD 6B 01            [ 1] 2106 	ld (XMASK,sp),a 
      0020DF                       2107 1$: _xpop ; mask
      0020DF 90 F6            [ 1]    1     ld a,(y)
      0020E1 93               [ 1]    2     ldw x,y 
      0020E2 EE 01            [ 2]    3     ldw x,(1,x)
      0020E4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020E8 9F               [ 1] 2108     ld a,xl  
      0020E9 6B 02            [ 1] 2109 	ld (MASK,sp),a 
      0020EB                       2110 	_xpop ; address 
      0020EB 90 F6            [ 1]    1     ld a,(y)
      0020ED 93               [ 1]    2     ldw x,y 
      0020EE EE 01            [ 2]    3     ldw x,(1,x)
      0020F0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020F4 F6               [ 1] 2111 2$:	ld a,(x)
      0020F5 14 02            [ 1] 2112 	and a,(MASK,sp)
      0020F7 18 01            [ 1] 2113 	xor a,(XMASK,sp)
      0020F9 27 F9            [ 1] 2114 	jreq 2$ 
      0020FB                       2115 	_drop VSIZE 
      0020FB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0020FD 81               [ 4] 2116 	ret 
                                   2117 
                                   2118 ;---------------------
                                   2119 ; BASIC: BSET addr,mask
                                   2120 ; set bits at 'addr' corresponding 
                                   2121 ; to those of 'mask' that are at 1.
                                   2122 ; arguments:
                                   2123 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2124 ;   mask        mask|addr
                                   2125 ; output:
                                   2126 ;	none 
                                   2127 ;--------------------------
      0020FE                       2128 bit_set:
      0020FE CD 19 64         [ 4] 2129 	call arg_list 
      002101 A1 02            [ 1] 2130 	cp a,#2	 
      002103 27 03            [ 1] 2131 	jreq 1$ 
      002105 CC 16 38         [ 2] 2132 	jp syntax_error
      002108                       2133 1$: 
      002108                       2134 	_xpop ; mask 
      002108 90 F6            [ 1]    1     ld a,(y)
      00210A 93               [ 1]    2     ldw x,y 
      00210B EE 01            [ 2]    3     ldw x,(1,x)
      00210D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002111 9F               [ 1] 2135 	ld a,xl
      002112 88               [ 1] 2136 	push a  
      002113                       2137 	_xpop ; addr  
      002113 90 F6            [ 1]    1     ld a,(y)
      002115 93               [ 1]    2     ldw x,y 
      002116 EE 01            [ 2]    3     ldw x,(1,x)
      002118 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00211C 84               [ 1] 2138 	pop a 
      00211D FA               [ 1] 2139 	or a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      00211E F7               [ 1] 2140 	ld (x),a
      00211F 81               [ 4] 2141 	ret 
                                   2142 
                                   2143 ;---------------------
                                   2144 ; BASIC: BRES addr,mask
                                   2145 ; reset bits at 'addr' corresponding 
                                   2146 ; to those of 'mask' that are at 1.
                                   2147 ; arguments:
                                   2148 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2149 ;   mask	    ~mask&*addr  
                                   2150 ; output:
                                   2151 ;	none 
                                   2152 ;--------------------------
      002120                       2153 bit_reset:
      002120 CD 19 64         [ 4] 2154 	call arg_list 
      002123 A1 02            [ 1] 2155 	cp a,#2  
      002125 27 03            [ 1] 2156 	jreq 1$ 
      002127 CC 16 38         [ 2] 2157 	jp syntax_error
      00212A                       2158 1$: 
      00212A                       2159 	_xpop ; mask 
      00212A 90 F6            [ 1]    1     ld a,(y)
      00212C 93               [ 1]    2     ldw x,y 
      00212D EE 01            [ 2]    3     ldw x,(1,x)
      00212F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002133 9F               [ 1] 2160 	ld a,xl 
      002134 43               [ 1] 2161 	cpl a
      002135 88               [ 1] 2162 	push a  
      002136                       2163 	_xpop ; addr  
      002136 90 F6            [ 1]    1     ld a,(y)
      002138 93               [ 1]    2     ldw x,y 
      002139 EE 01            [ 2]    3     ldw x,(1,x)
      00213B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00213F 84               [ 1] 2164 	pop a 
      002140 F4               [ 1] 2165 	and a,(x)
      002141 F7               [ 1] 2166 	ld (x),a 
      002142 81               [ 4] 2167 	ret 
                                   2168 
                                   2169 ;---------------------
                                   2170 ; BASIC: BTOGL addr,mask
                                   2171 ; toggle bits at 'addr' corresponding 
                                   2172 ; to those of 'mask' that are at 1.
                                   2173 ; arguments:
                                   2174 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2175 ;   mask	    mask^*addr  
                                   2176 ; output:
                                   2177 ;	none 
                                   2178 ;--------------------------
      002143                       2179 bit_toggle:
      002143 CD 19 64         [ 4] 2180 	call arg_list 
      002146 A1 02            [ 1] 2181 	cp a,#2 
      002148 27 03            [ 1] 2182 	jreq 1$ 
      00214A CC 16 38         [ 2] 2183 	jp syntax_error
      00214D                       2184 1$: _xpop ; mask 
      00214D 90 F6            [ 1]    1     ld a,(y)
      00214F 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002150 EE 01            [ 2]    3     ldw x,(1,x)
      002152 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002156 9F               [ 1] 2185 	ld a,xl
      002157 88               [ 1] 2186 	push a 
      002158                       2187 	_xpop  ; addr  
      002158 90 F6            [ 1]    1     ld a,(y)
      00215A 93               [ 1]    2     ldw x,y 
      00215B EE 01            [ 2]    3     ldw x,(1,x)
      00215D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002161 84               [ 1] 2188 	pop a 
      002162 F8               [ 1] 2189 	xor a,(x)
      002163 F7               [ 1] 2190 	ld (x),a 
      002164 81               [ 4] 2191 	ret 
                                   2192 
                                   2193 
                                   2194 ;---------------------
                                   2195 ; BASIC: BTEST(addr,bit)
                                   2196 ; return bit value at 'addr' 
                                   2197 ; bit is in range {0..7}.
                                   2198 ; arguments:
                                   2199 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2200 ;   bit 	    bit position {0..7}  
                                   2201 ; output:
                                   2202 ;	A:X       bit value  
                                   2203 ;--------------------------
      002165                       2204 bit_test:
      002165 CD 19 5F         [ 4] 2205 	call func_args 
      002168 A1 02            [ 1] 2206 	cp a,#2
      00216A 27 03            [ 1] 2207 	jreq 0$
      00216C CC 16 38         [ 2] 2208 	jp syntax_error
      00216F                       2209 0$:	
      00216F                       2210 	_xpop 
      00216F 90 F6            [ 1]    1     ld a,(y)
      002171 93               [ 1]    2     ldw x,y 
      002172 EE 01            [ 2]    3     ldw x,(1,x)
      002174 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002178 9F               [ 1] 2211 	ld a,xl 
      002179 A4 07            [ 1] 2212 	and a,#7
      00217B 88               [ 1] 2213 	push a   
      00217C A6 01            [ 1] 2214 	ld a,#1 
      00217E 0D 01            [ 1] 2215 1$: tnz (1,sp)
      002180 27 05            [ 1] 2216 	jreq 2$
      002182 48               [ 1] 2217 	sll a 
      002183 0A 01            [ 1] 2218 	dec (1,sp)
      002185 20 F7            [ 2] 2219 	jra 1$
      002187 6B 01            [ 1] 2220 2$: ld (1,sp),a  
      002189                       2221 	_xpop ; address  
      002189 90 F6            [ 1]    1     ld a,(y)
      00218B 93               [ 1]    2     ldw x,y 
      00218C EE 01            [ 2]    3     ldw x,(1,x)
      00218E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002192 84               [ 1] 2222 	pop a 
      002193 F4               [ 1] 2223 	and a,(x)
      002194 27 02            [ 1] 2224 	jreq 3$
      002196 A6 01            [ 1] 2225 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002198 5F               [ 1] 2226 3$:	clrw x 
      002199 97               [ 1] 2227 	ld xl,a
      00219A 4F               [ 1] 2228 	clr a  
      00219B 81               [ 4] 2229 	ret
                                   2230 
                                   2231 ;--------------------
                                   2232 ; BASIC: POKE addr,byte
                                   2233 ; put a byte at addr 
                                   2234 ;--------------------
      00219C                       2235 poke:
      00219C CD 19 64         [ 4] 2236 	call arg_list 
      00219F A1 02            [ 1] 2237 	cp a,#2
      0021A1 27 03            [ 1] 2238 	jreq 1$
      0021A3 CC 16 38         [ 2] 2239 	jp syntax_error
      0021A6                       2240 1$:	
      0021A6                       2241 	_xpop ; byte   
      0021A6 90 F6            [ 1]    1     ld a,(y)
      0021A8 93               [ 1]    2     ldw x,y 
      0021A9 EE 01            [ 2]    3     ldw x,(1,x)
      0021AB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021AF 9F               [ 1] 2242     ld a,xl 
      0021B0 88               [ 1] 2243 	push a 
      0021B1                       2244 	_xpop ; address 
      0021B1 90 F6            [ 1]    1     ld a,(y)
      0021B3 93               [ 1]    2     ldw x,y 
      0021B4 EE 01            [ 2]    3     ldw x,(1,x)
      0021B6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021BA 84               [ 1] 2245 	pop a 
      0021BB F7               [ 1] 2246 	ld (x),a 
      0021BC 81               [ 4] 2247 	ret 
                                   2248 
                                   2249 ;-----------------------
                                   2250 ; BASIC: PEEK(addr)
                                   2251 ; get the byte at addr 
                                   2252 ; input:
                                   2253 ;	none 
                                   2254 ; output:
                                   2255 ;	X 		value 
                                   2256 ;-----------------------
      0021BD                       2257 peek:
      0021BD CD 19 5F         [ 4] 2258 	call func_args
      0021C0 A1 01            [ 1] 2259 	cp a,#1 
      0021C2 27 03            [ 1] 2260 	jreq 1$
      0021C4 CC 16 38         [ 2] 2261 	jp syntax_error
      0021C7                       2262 1$: _xpop ; address  
      0021C7 90 F6            [ 1]    1     ld a,(y)
      0021C9 93               [ 1]    2     ldw x,y 
      0021CA EE 01            [ 2]    3     ldw x,(1,x)
      0021CC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D0 C7 00 18         [ 1] 2263 	ld farptr,a 
      0021D3 CF 00 19         [ 2] 2264 	ldw ptr16,x 
      0021D6 92 BC 00 18      [ 5] 2265 	ldf a,[farptr]
      0021DA 5F               [ 1] 2266 	clrw x 
      0021DB 97               [ 1] 2267 	ld xl,a 
      0021DC 4F               [ 1] 2268 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0021DD 81               [ 4] 2269 	ret 
                                   2270 
                                   2271 ;---------------------------
                                   2272 ; BASIC IF expr : instructions
                                   2273 ; evaluate expr and if true 
                                   2274 ; execute instructions on same line. 
                                   2275 ;----------------------------
      0021DE                       2276 if: 
      0021DE CD 1B C1         [ 4] 2277 	call condition  
      0021E1                       2278 	_xpop 
      0021E1 90 F6            [ 1]    1     ld a,(y)
      0021E3 93               [ 1]    2     ldw x,y 
      0021E4 EE 01            [ 2]    3     ldw x,(1,x)
      0021E6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021EA 4D               [ 1] 2279 	tnz  a  
      0021EB 26 0D            [ 1] 2280 	jrne 9$
      0021ED 5D               [ 2] 2281 	tnzw x 
      0021EE 26 0A            [ 1] 2282 	jrne 9$  
                                   2283 ;skip to next line
      0021F0 55 00 03 00 01   [ 1] 2284 	mov in,count
      0021F5                       2285 	_drop 2 
      0021F5 5B 02            [ 2]    1     addw sp,#2 
      0021F7 CC 16 EB         [ 2] 2286 	jp next_line
      0021FA 81               [ 4] 2287 9$:	ret 
                                   2288 
                                   2289 ;------------------------
                                   2290 ; BASIC: FOR var=expr 
                                   2291 ; set variable to expression 
                                   2292 ; leave variable address 
                                   2293 ; on stack and set
                                   2294 ; FLOOP bit in 'flags'
                                   2295 ;-----------------
                           000001  2296 	RETL1=1 ; return address  
                           000003  2297 	FSTEP=3  ; variable increment int24
                           000006  2298 	LIMIT=6 ; loop limit, int24  
                           000009  2299 	CVAR=9   ; control variable 
                           00000B  2300 	INW=11   ;  in.w saved
                           00000D  2301 	BPTR=13 ; baseptr saved
                           00000D  2302 	VSIZE=13  
      0021FB                       2303 for: ; { -- var_addr }
      0021FB 85               [ 2] 2304 	popw x ; call return address 
      0021FC                       2305 	_vars VSIZE 
      0021FC 52 0D            [ 2]    1     sub sp,#VSIZE 
      0021FE 89               [ 2] 2306 	pushw x  ; RETL1 
      0021FF A6 85            [ 1] 2307 	ld a,#TK_VAR 
      002201 CD 19 52         [ 4] 2308 	call expect
      002204 CD 17 C4         [ 4] 2309 	call get_addr
      002207 1F 09            [ 2] 2310 	ldw (CVAR,sp),x  ; control variable 
      002209 CD 1C 96         [ 4] 2311 	call let_eval 
      00220C 72 14 00 22      [ 1] 2312 	bset flags,#FLOOP 
      002210 CD 17 9C         [ 4] 2313 	call next_token 
      002213 A1 80            [ 1] 2314 	cp a,#TK_CMD 
      002215 27 03            [ 1] 2315 	jreq 1$
      002217 CC 16 38         [ 2] 2316 	jp syntax_error
      00221A                       2317 1$:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      00221A                       2318 	_get_code_addr
      00221A FE               [ 2]    1         ldw x,(x)
      00221B 72 5C 00 01      [ 1]    2         inc in 
      00221F 72 5C 00 01      [ 1]    3         inc in 
      002223 A3 22 2B         [ 2] 2319 	cpw x,#to   
      002226 27 03            [ 1] 2320 	jreq to
      002228 CC 16 38         [ 2] 2321 	jp syntax_error 
                                   2322 
                                   2323 ;-----------------------------------
                                   2324 ; BASIC: TO expr 
                                   2325 ; second part of FOR loop initilization
                                   2326 ; leave limit on stack and set 
                                   2327 ; FTO bit in 'flags'
                                   2328 ;-----------------------------------
      00222B                       2329 to: ; { var_addr -- var_addr limit step }
      00222B 72 04 00 22 03   [ 2] 2330 	btjt flags,#FLOOP,1$
      002230 CC 16 38         [ 2] 2331 	jp syntax_error
      002233 CD 1A A8         [ 4] 2332 1$: call expression   
      002236 A1 84            [ 1] 2333 	cp a,#TK_INTGR 
      002238 27 03            [ 1] 2334 	jreq 2$ 
      00223A CC 16 38         [ 2] 2335 	jp syntax_error
      00223D                       2336 2$: _xpop
      00223D 90 F6            [ 1]    1     ld a,(y)
      00223F 93               [ 1]    2     ldw x,y 
      002240 EE 01            [ 2]    3     ldw x,(1,x)
      002242 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002246 6B 06            [ 1] 2337 	ld (LIMIT,sp),a 
      002248 1F 07            [ 2] 2338 	ldw (LIMIT+1,sp),x
      00224A CD 17 9C         [ 4] 2339 	call next_token
      00224D A1 00            [ 1] 2340 	cp a,#TK_NONE  
      00224F 27 17            [ 1] 2341 	jreq 4$ 
      002251 A1 80            [ 1] 2342 	cp a,#TK_CMD
      002253 26 0E            [ 1] 2343 	jrne 3$
      002255                       2344 	_get_code_addr
      002255 FE               [ 2]    1         ldw x,(x)
      002256 72 5C 00 01      [ 1]    2         inc in 
      00225A 72 5C 00 01      [ 1]    3         inc in 
      00225E A3 22 71         [ 2] 2345 	cpw x,#step 
      002261 27 0E            [ 1] 2346 	jreq step
      002263                       2347 3$:	
      002263                       2348 	_unget_token   	 
      002263 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002268                       2349 4$:	
      002268 0F 03            [ 1] 2350 	clr (FSTEP,sp) 
      00226A AE 00 01         [ 2] 2351 	ldw x,#1   ; default step  
      00226D 1F 04            [ 2] 2352 	ldw (FSTEP+1,sp),x 
      00226F 20 2F            [ 2] 2353 	jra store_loop_addr 
                                   2354 
                                   2355 
                                   2356 ;----------------------------------
                                   2357 ; BASIC: STEP expr 
                                   2358 ; optional third par of FOR loop
                                   2359 ; initialization. 	
                                   2360 ;------------------------------------
      002271                       2361 step: ; {var limit -- var limit step}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002271 72 04 00 22 03   [ 2] 2362 	btjt flags,#FLOOP,1$
      002276 CC 16 38         [ 2] 2363 	jp syntax_error
      002279 CD 1A A8         [ 4] 2364 1$: call expression 
      00227C A1 84            [ 1] 2365 	cp a,#TK_INTGR
      00227E 27 03            [ 1] 2366 	jreq 2$
      002280 CC 16 38         [ 2] 2367 	jp syntax_error
      002283                       2368 2$:	
      002283                       2369 	_xpop 
      002283 90 F6            [ 1]    1     ld a,(y)
      002285 93               [ 1]    2     ldw x,y 
      002286 EE 01            [ 2]    3     ldw x,(1,x)
      002288 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00228C 6B 03            [ 1] 2370 	ld (FSTEP,sp),a 
      00228E 1F 04            [ 2] 2371 	ldw (FSTEP+1,sp),x ; step
                                   2372 ; if step < 0 decrement LIMIT 
      002290 4D               [ 1] 2373 	tnz a
      002291 2A 0D            [ 1] 2374 	jrpl store_loop_addr 
      002293 7B 06            [ 1] 2375 	ld a,(LIMIT,sp)
      002295 1E 07            [ 2] 2376 	ldw x,(LIMIT+1,sp)
      002297 1D 00 01         [ 2] 2377 	subw x,#1 
      00229A A2 00            [ 1] 2378 	sbc a,#0 
      00229C 6B 06            [ 1] 2379 	ld (LIMIT,sp),a 
      00229E 1F 07            [ 2] 2380 	ldw (LIMIT+1,sp),x 
                                   2381 ; leave loop back entry point on cstack 
                                   2382 ; cstack is 1 call deep from interpreter
      0022A0                       2383 store_loop_addr:
      0022A0 CE 00 04         [ 2] 2384 	ldw x,basicptr
      0022A3 1F 0D            [ 2] 2385 	ldw (BPTR,sp),x 
      0022A5 CE 00 00         [ 2] 2386 	ldw x,in.w 
      0022A8 1F 0B            [ 2] 2387 	ldw (INW,sp),x   
      0022AA 72 15 00 22      [ 1] 2388 	bres flags,#FLOOP 
      0022AE 72 5C 00 1F      [ 1] 2389 	inc loop_depth  
      0022B2 81               [ 4] 2390 	ret 
                                   2391 
                                   2392 ;--------------------------------
                                   2393 ; BASIC: NEXT var 
                                   2394 ; FOR loop control 
                                   2395 ; increment variable with step 
                                   2396 ; and compare with limit 
                                   2397 ; loop if threshold not crossed.
                                   2398 ; else stack. 
                                   2399 ; and decrement 'loop_depth' 
                                   2400 ;--------------------------------
      0022B3                       2401 next: ; {var limit step retl1 -- [var limit step ] }
      0022B3 72 5D 00 1F      [ 1] 2402 	tnz loop_depth 
      0022B7 26 03            [ 1] 2403 	jrne 1$ 
      0022B9 CC 16 38         [ 2] 2404 	jp syntax_error 
      0022BC                       2405 1$: 
      0022BC A6 85            [ 1] 2406 	ld a,#TK_VAR 
      0022BE CD 19 52         [ 4] 2407 	call expect
      0022C1 CD 17 C4         [ 4] 2408 	call get_addr 
                                   2409 ; check for good variable after NEXT 	 
      0022C4 13 09            [ 2] 2410 	cpw x,(CVAR,sp)
      0022C6 27 03            [ 1] 2411 	jreq 2$  
      0022C8 CC 16 38         [ 2] 2412 	jp syntax_error ; not the good one 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0022CB                       2413 2$: 
      0022CB CF 00 19         [ 2] 2414 	ldw ptr16,x 
                                   2415 	; increment variable 
      0022CE F6               [ 1] 2416 	ld a,(x)
      0022CF EE 01            [ 2] 2417 	ldw x,(1,x)  ; get var value 
      0022D1 72 FB 04         [ 2] 2418 	addw x,(FSTEP+1,sp) ; var+step 
      0022D4 19 03            [ 1] 2419 	adc a,(FSTEP,sp)
      0022D6 72 C7 00 19      [ 4] 2420 	ld [ptr16],a
      0022DA 72 5C 00 1A      [ 1] 2421 	inc ptr8  
      0022DE 72 CF 00 19      [ 5] 2422 	ldw [ptr16],x 
      0022E2 C7 00 0C         [ 1] 2423 	ld acc24,a 
      0022E5 CF 00 0D         [ 2] 2424 	ldw acc16,x 
      0022E8 7B 06            [ 1] 2425 	ld a,(LIMIT,sp)
      0022EA 1E 07            [ 2] 2426 	ldw x,(LIMIT+1,sp)
      0022EC 72 B0 00 0D      [ 2] 2427 	subw x,acc16 
      0022F0 C2 00 0C         [ 1] 2428 	sbc a,acc24
      0022F3 18 03            [ 1] 2429 	xor a,(FSTEP,sp)
      0022F5 A8 80            [ 1] 2430 	xor a,#0x80
      0022F7 2B 12            [ 1] 2431 	jrmi loop_back  
      0022F9 20 25            [ 2] 2432 	jra loop_done   
                                   2433 ; check sign of STEP  
      0022FB 7B 03            [ 1] 2434 	ld a,(FSTEP,sp)
      0022FD 2A 07            [ 1] 2435 	jrpl 4$
                                   2436 ;negative step
      0022FF C6 00 0E         [ 1] 2437     ld a,acc8 
      002302 2F 07            [ 1] 2438 	jrslt loop_back   
      002304 20 1A            [ 2] 2439 	jra loop_done  
      002306                       2440 4$: ; positive step
      002306 72 0E 00 0E 15   [ 2] 2441 	btjt acc8,#7,loop_done 
      00230B                       2442 loop_back:
      00230B 1E 0D            [ 2] 2443 	ldw x,(BPTR,sp)
      00230D CF 00 04         [ 2] 2444 	ldw basicptr,x 
      002310 72 01 00 22 05   [ 2] 2445 	btjf flags,#FRUN,1$ 
      002315 E6 02            [ 1] 2446 	ld a,(2,x)
      002317 C7 00 03         [ 1] 2447 	ld count,a
      00231A 1E 0B            [ 2] 2448 1$:	ldw x,(INW,sp)
      00231C CF 00 00         [ 2] 2449 	ldw in.w,x 
      00231F 81               [ 4] 2450 	ret 
      002320                       2451 loop_done:
                                   2452 	; remove loop data from stack  
      002320 85               [ 2] 2453 	popw x
      002321                       2454 	_drop VSIZE 
      002321 5B 0D            [ 2]    1     addw sp,#VSIZE 
      002323 72 5A 00 1F      [ 1] 2455 	dec loop_depth 
      002327 FC               [ 2] 2456 	jp (x)
                                   2457 
                                   2458 ;----------------------------
                                   2459 ; called by goto/gosub
                                   2460 ; to get target line number 
                                   2461 ; output:
                                   2462 ;    x    line address 
                                   2463 ;---------------------------
      002328                       2464 get_target_line:
      002328 CD 17 9C         [ 4] 2465 	call next_token  
      00232B A1 84            [ 1] 2466 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      00232D 27 07            [ 1] 2467 	jreq get_target_line_addr 
      00232F A1 03            [ 1] 2468 	cp a,#TK_LABEL 
      002331 27 26            [ 1] 2469 	jreq look_target_symbol 
      002333 CC 16 38         [ 2] 2470 	jp syntax_error
                                   2471 ; the target is a line number 
                                   2472 ; search it. 
      002336                       2473 get_target_line_addr:
      002336 90 89            [ 2] 2474 	pushw y 
      002338 CD 17 CE         [ 4] 2475 	call get_int24 ; line # 
      00233B 4F               [ 1] 2476 	clr a
      00233C 90 CE 00 04      [ 2] 2477 	ldw y,basicptr 
      002340 90 FE            [ 2] 2478 	ldw y,(y)
      002342 90 89            [ 2] 2479 	pushw y 
      002344 13 01            [ 2] 2480 	cpw x,(1,sp)
      002346                       2481 	_drop 2  
      002346 5B 02            [ 2]    1     addw sp,#2 
      002348 25 01            [ 1] 2482 	jrult 11$
      00234A 4C               [ 1] 2483 	inc a 
      00234B                       2484 11$: ; scan program for this line# 	
      00234B CD 0C 17         [ 4] 2485 	call search_lineno  
      00234E 5D               [ 2] 2486 	tnzw x ; 0| line# address 
      00234F 26 05            [ 1] 2487 	jrne 2$ 
      002351 A6 05            [ 1] 2488 	ld a,#ERR_NO_LINE 
      002353 CC 16 3A         [ 2] 2489 	jp tb_error 
      002356 90 85            [ 2] 2490 2$:	popw y  
      002358 81               [ 4] 2491 	ret 
                                   2492 
                                   2493 ; the GOTO|GOSUB target is a symbol.
                                   2494 ; output:
                                   2495 ;    X    line address|0 
      002359                       2496 look_target_symbol:
      002359 90 89            [ 2] 2497 	pushw y 
      00235B 89               [ 2] 2498 	pushw x 
      00235C CD 17 B5         [ 4] 2499 	call skip_string 
      00235F 72 5F 00 0D      [ 1] 2500 	clr acc16 
      002363 90 CE 00 1B      [ 2] 2501 	ldw y,txtbgn 
      002367 90 E6 03         [ 1] 2502 1$:	ld a,(3,y) ; first TK_ID on line 
      00236A A1 03            [ 1] 2503 	cp a,#TK_LABEL 
      00236C 27 15            [ 1] 2504 	jreq 3$ 
      00236E 90 E6 02         [ 1] 2505 2$:	ld a,(2,y); line length 
      002371 C7 00 0E         [ 1] 2506 	ld acc8,a 
      002374 72 B9 00 0D      [ 2] 2507 	addw y,acc16 ;point to next line 
      002378 90 C3 00 1D      [ 2] 2508 	cpw y,txtend 
      00237C 25 E9            [ 1] 2509 	jrult 1$
      00237E A6 0A            [ 1] 2510 	ld a,#ERR_BAD_VALUE
      002380 CC 16 3A         [ 2] 2511 	jp tb_error 
      002383                       2512 3$: ; found a TK_LABEL 
                                   2513 	; compare with GOTO|GOSUB target 
      002383 90 89            [ 2] 2514 	pushw y ; line address 
      002385 72 A9 00 04      [ 2] 2515 	addw y,#4 ; label string 
      002389 1E 03            [ 2] 2516 	ldw x,(3,sp) ; target string 
      00238B CD 13 63         [ 4] 2517 	call strcmp
      00238E 26 04            [ 1] 2518 	jrne 4$
      002390 90 85            [ 2] 2519 	popw y 
      002392 20 DA            [ 2] 2520 	jra 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002394                       2521 4$: ; target found 
      002394 85               [ 2] 2522 	popw x ;  address line target  
      002395                       2523 	_drop 2 ; target string 
      002395 5B 02            [ 2]    1     addw sp,#2 
      002397 90 85            [ 2] 2524 	popw y 
      002399 81               [ 4] 2525 	ret
                                   2526 
                                   2527 
                                   2528 ;--------------------------------
                                   2529 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2530 ; selective goto or gosub 
                                   2531 ;--------------------------------
      00239A                       2532 cmd_on:
      00239A 72 00 00 22 05   [ 2] 2533 	btjt flags,#FRUN,0$ 
      00239F A6 06            [ 1] 2534 	ld a,#ERR_RUN_ONLY
      0023A1 CC 16 3A         [ 2] 2535 	jp tb_error 
      0023A4 CD 1A A8         [ 4] 2536 0$:	call expression 
      0023A7 A1 84            [ 1] 2537 	cp a,#TK_INTGR
      0023A9 27 03            [ 1] 2538 	jreq 1$
      0023AB CC 16 38         [ 2] 2539 	jp syntax_error
      0023AE                       2540 1$: _xpop
      0023AE 90 F6            [ 1]    1     ld a,(y)
      0023B0 93               [ 1]    2     ldw x,y 
      0023B1 EE 01            [ 2]    3     ldw x,(1,x)
      0023B3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2541 ; the selector is the element indice 
                                   2542 ; in the list of arguments. {1..#elements} 
      0023B7 9F               [ 1] 2543 	ld a,xl ; keep only bits 7..0
      0023B8 27 68            [ 1] 2544 	jreq 9$ ; element # begin at 1. 
      0023BA 88               [ 1] 2545 	push a  ; selector  
      0023BB CD 17 9C         [ 4] 2546 	call next_token
      0023BE A1 80            [ 1] 2547 	cp a,#TK_CMD 
      0023C0 27 03            [ 1] 2548 	jreq 2$ 
      0023C2 CC 16 38         [ 2] 2549 	jp syntax_error 
      0023C5                       2550 2$: _get_code_addr
      0023C5 FE               [ 2]    1         ldw x,(x)
      0023C6 72 5C 00 01      [ 1]    2         inc in 
      0023CA 72 5C 00 01      [ 1]    3         inc in 
                                   2551 ;; must be a GOTO or GOSUB 
      0023CE A3 24 2C         [ 2] 2552 	cpw x,#goto 
      0023D1 27 08            [ 1] 2553 	jreq 4$
      0023D3 A3 24 46         [ 2] 2554 	cpw x,#gosub 
      0023D6 27 03            [ 1] 2555 	jreq 4$ 
      0023D8 CC 16 38         [ 2] 2556 	jp syntax_error 
      0023DB                       2557 4$: 
      0023DB 84               [ 1] 2558 	pop a 
      0023DC 89               [ 2] 2559 	pushw x ; save routine address 	
      0023DD 88               [ 1] 2560 	push a  ; selector  
      0023DE                       2561 5$: ; skip elements in list until selector==0 
      0023DE 0A 01            [ 1] 2562 	dec (1,sp)
      0023E0 27 26            [ 1] 2563 	jreq 6$ 
                                   2564 ; can be a line# or a label 
      0023E2 CD 17 9C         [ 4] 2565 	call next_token 
      0023E5 A1 84            [ 1] 2566 	cp a,#TK_INTGR 
      0023E7 27 07            [ 1] 2567 	jreq 52$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0023E9 A1 03            [ 1] 2568 	cp a,#TK_LABEL 
      0023EB 27 0D            [ 1] 2569 	jreq 54$
      0023ED CC 16 38         [ 2] 2570 	jp syntax_error 
      0023F0                       2571 52$: ; got a line number 
      0023F0 C6 00 01         [ 1] 2572 	ld a,in ; skip over int24 value 
      0023F3 AB 03            [ 1] 2573 	add a,#CELL_SIZE ; integer size  
      0023F5 C7 00 01         [ 1] 2574 	ld in,a 
      0023F8 20 03            [ 2] 2575 	jra 56$
      0023FA CD 17 B5         [ 4] 2576 54$: call skip_string ; skip over label 	
      0023FD                       2577 56$: ; if another element comma present 
      0023FD CD 17 9C         [ 4] 2578 	call next_token
      002400 A1 08            [ 1] 2579 	cp a,#TK_COMMA 
      002402 27 DA            [ 1] 2580 	jreq 5$ 
                                   2581 ; arg list exhausted, selector to big 
                                   2582 ; continue execution on next line 
      002404                       2583 	_drop 3 ; drop selector and GOTO|GOSUB address 
      002404 5B 03            [ 2]    1     addw sp,#3 
      002406 20 1A            [ 2] 2584 	jra 9$
      002408                       2585 6$: ;at selected position  
      002408                       2586 	_drop 1 ; discard selector
      002408 5B 01            [ 2]    1     addw sp,#1 
                                   2587 ; here only the routine address 
                                   2588 ; of GOTO|GOSUB is on stack 
      00240A CD 23 28         [ 4] 2589     call get_target_line
      00240D CF 00 19         [ 2] 2590 	ldw ptr16,x 	
      002410 55 00 03 00 01   [ 1] 2591 	mov in,count ; move to end of line  
      002415 85               [ 2] 2592 	popw x ; cmd address, GOTO||GOSUB 
      002416 A3 24 2C         [ 2] 2593 	cpw x,#goto 
      002419 26 05            [ 1] 2594 	jrne 7$ 
      00241B CE 00 19         [ 2] 2595 	ldw x,ptr16 
      00241E 20 19            [ 2] 2596 	jra jp_to_target
      002420                       2597 7$: 
      002420 20 35            [ 2] 2598 	jra gosub_2 ; target in ptr16 
      002422                       2599 9$: ; expr out of range skip to end of line
                                   2600     ; this will force a fall to next line  
      002422 55 00 03 00 01   [ 1] 2601 	mov in,count
      002427                       2602 	_drop 2
      002427 5B 02            [ 2]    1     addw sp,#2 
      002429 CC 16 EB         [ 2] 2603 	jp next_line  
                                   2604 
                                   2605 
                                   2606 ;------------------------
                                   2607 ; BASIC: GOTO line# 
                                   2608 ; jump to line# 
                                   2609 ; here cstack is 2 call deep from interpreter 
                                   2610 ;------------------------
      00242C                       2611 goto:
      00242C 72 00 00 22 05   [ 2] 2612 	btjt flags,#FRUN,goto_1  
      002431 A6 06            [ 1] 2613 	ld a,#ERR_RUN_ONLY
      002433 CC 16 3A         [ 2] 2614 	jp tb_error 
      002436                       2615 goto_1:
      002436 CD 23 28         [ 4] 2616 	call get_target_line
      002439                       2617 jp_to_target:
      002439 CF 00 04         [ 2] 2618 	ldw basicptr,x 
      00243C E6 02            [ 1] 2619 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00243E C7 00 03         [ 1] 2620 	ld count,a 
      002441 35 03 00 01      [ 1] 2621 	mov in,#3 
      002445 81               [ 4] 2622 	ret 
                                   2623 
                                   2624 
                                   2625 ;--------------------
                                   2626 ; BASIC: GOSUB line#
                                   2627 ; basic subroutine call
                                   2628 ; actual line# and basicptr 
                                   2629 ; are saved on cstack
                                   2630 ; here cstack is 2 call deep from interpreter 
                                   2631 ;--------------------
                           000001  2632 	RET_ADDR=1 ; subroutine return address 
                           000003  2633 	RET_BPTR=3 ; basicptr return point 
                           000005  2634 	RET_INW=5  ; in.w return point 
                           000004  2635 	VSIZE=4 
      002446                       2636 gosub:
      002446 72 00 00 22 06   [ 2] 2637 	btjt flags,#FRUN,gosub_1 
      00244B A6 06            [ 1] 2638 	ld a,#ERR_RUN_ONLY
      00244D CC 16 3A         [ 2] 2639 	jp tb_error 
      002450 81               [ 4] 2640 	ret 
      002451                       2641 gosub_1:
      002451 CD 23 28         [ 4] 2642 	call get_target_line 
      002454 CF 00 19         [ 2] 2643 	ldw ptr16,x
      002457                       2644 gosub_2: 
      002457 85               [ 2] 2645 	popw x 
      002458                       2646 	_vars VSIZE  
      002458 52 04            [ 2]    1     sub sp,#VSIZE 
      00245A 89               [ 2] 2647 	pushw x ; RET_ADDR 
                                   2648 ; save BASIC subroutine return point.   
      00245B CE 00 04         [ 2] 2649 	ldw x,basicptr
      00245E 1F 03            [ 2] 2650 	ldw (RET_BPTR,sp),x 
      002460 CE 00 00         [ 2] 2651 	ldw x,in.w 
      002463 1F 05            [ 2] 2652 	ldw (RET_INW,sp),x
      002465 CE 00 19         [ 2] 2653 	ldw x,ptr16  
      002468 20 CF            [ 2] 2654 	jra jp_to_target
                                   2655 
                                   2656 ;------------------------
                                   2657 ; BASIC: RETURN 
                                   2658 ; exit from BASIC subroutine 
                                   2659 ;------------------------
      00246A                       2660 return:
      00246A 72 00 00 22 05   [ 2] 2661 	btjt flags,#FRUN,0$ 
      00246F A6 06            [ 1] 2662 	ld a,#ERR_RUN_ONLY
      002471 CC 16 3A         [ 2] 2663 	jp tb_error 
      002474                       2664 0$:	
      002474 1E 03            [ 2] 2665 	ldw x,(RET_BPTR,sp) 
      002476 CF 00 04         [ 2] 2666 	ldw basicptr,x
      002479 E6 02            [ 1] 2667 	ld a,(2,x)
      00247B C7 00 03         [ 1] 2668 	ld count,a  
      00247E 1E 05            [ 2] 2669 	ldw x,(RET_INW,sp)
      002480 CF 00 00         [ 2] 2670 	ldw in.w,x 
      002483 85               [ 2] 2671 	popw x 
      002484                       2672 	_drop VSIZE 
      002484 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002486 FC               [ 2] 2673 	jp (x)
                                   2674 
                                   2675 
                                   2676 ;---------------------------------
                                   2677 ; check if A:X contain the address 
                                   2678 ; of a program in FLASH 
                                   2679 ; output:
                                   2680 ;     Z    set is progam 
                                   2681 ;----------------------------------
      002487                       2682 is_program_addr:
      002487 4D               [ 1] 2683 	tnz a 
      002488 26 10            [ 1] 2684 	jrne 9$
      00248A A3 36 80         [ 2] 2685 	cpw x,#app_space 
      00248D 25 0A            [ 1] 2686 	jrult 8$
      00248F 89               [ 2] 2687 	pushw x 
      002490 1D 00 04         [ 2] 2688 	subw x,#4 
      002493 CD 27 ED         [ 4] 2689 	call qsign 
      002496 85               [ 2] 2690 	popw x 
      002497 27 01            [ 1] 2691 	jreq 9$ 
      002499 43               [ 1] 2692 8$:	cpl a ; clr Z bit  
      00249A 81               [ 4] 2693 9$:	ret 
                                   2694 
                                   2695 ;----------------------------------
                                   2696 ; BASIC: RUN [addr]
                                   2697 ; run BASIC program in RAM
                                   2698 ;----------------------------------- 
      00249B                       2699 run: 
      00249B 72 01 00 22 02   [ 2] 2700 	btjf flags,#FRUN,0$  
      0024A0 4F               [ 1] 2701 	clr a 
      0024A1 81               [ 4] 2702 	ret
      0024A2                       2703 0$: ; check for STOP condition 
      0024A2 72 09 00 22 12   [ 2] 2704 	btjf flags,#FBREAK,1$
      0024A7                       2705 	_drop 2 
      0024A7 5B 02            [ 2]    1     addw sp,#2 
      0024A9 CD 20 0C         [ 4] 2706 	call rest_context
      0024AC                       2707 	_drop CTXT_SIZE 
      0024AC 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024AE 72 19 00 22      [ 1] 2708 	bres flags,#FBREAK 
      0024B2 72 10 00 22      [ 1] 2709 	bset flags,#FRUN 
      0024B6 CC 16 E3         [ 2] 2710 	jp interpreter 
      0024B9                       2711 1$:	; check for address option 
      0024B9 CD 17 9C         [ 4] 2712 	call next_token 
      0024BC A1 84            [ 1] 2713 	cp a,#TK_INTGR
      0024BE 26 1D            [ 1] 2714 	jrne 3$
      0024C0 CD 17 CE         [ 4] 2715 	call get_int24 
      0024C3 CD 24 87         [ 4] 2716 	call is_program_addr
      0024C6 27 05            [ 1] 2717 	jreq 2$
      0024C8 A6 0A            [ 1] 2718 	ld a,#ERR_BAD_VALUE
      0024CA CC 16 3A         [ 2] 2719 	jp tb_error 
      0024CD CF 00 1B         [ 2] 2720 2$: ldw txtbgn,x 
      0024D0 1D 00 02         [ 2] 2721 	subw x,#2 
      0024D3 FE               [ 2] 2722 	ldw x,(x)
      0024D4 72 BB 00 1B      [ 2] 2723 	addw x,txtbgn 
      0024D8 CF 00 1D         [ 2] 2724 	ldw txtend,x 
      0024DB 20 19            [ 2] 2725 	jra run_it 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0024DD                       2726 3$:	_unget_token 
      0024DD 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0024E2 CE 00 1B         [ 2] 2727 	ldw x,txtbgn
      0024E5 C3 00 1D         [ 2] 2728 	cpw x,txtend 
      0024E8 2B 0C            [ 1] 2729 	jrmi run_it 
      0024EA AE 15 AB         [ 2] 2730 	ldw x,#err_no_prog
      0024ED CD 09 3A         [ 4] 2731 	call puts 
      0024F0 55 00 03 00 01   [ 1] 2732 	mov in,count
      0024F5 81               [ 4] 2733 	ret 
      0024F6                       2734 run_it:	 
      0024F6                       2735 	_drop 2 ; drop return address 
      0024F6 5B 02            [ 2]    1     addw sp,#2 
      0024F8                       2736 run_it_02: 
      0024F8 CD 1C 75         [ 4] 2737     call ubound 
      0024FB CD 13 C8         [ 4] 2738 	call clear_vars
                                   2739 ; initialize DIM variables pointers 
      0024FE CE 00 1D         [ 2] 2740 	ldw x,txtend 
      002501 CF 00 30         [ 2] 2741 	ldw dvar_bgn,x 
      002504 CF 00 32         [ 2] 2742 	ldw dvar_end,x 	 
                                   2743 ; clear data pointer 
      002507 5F               [ 1] 2744 	clrw x 
      002508 CF 00 06         [ 2] 2745 	ldw data_ptr,x 
      00250B 72 5F 00 08      [ 1] 2746 	clr data_ofs 
      00250F 72 5F 00 09      [ 1] 2747 	clr data_len 
                                   2748 ; initialize BASIC pointer 
      002513 CE 00 1B         [ 2] 2749 	ldw x,txtbgn 
      002516 CF 00 04         [ 2] 2750 	ldw basicptr,x 
      002519 E6 02            [ 1] 2751 	ld a,(2,x)
      00251B C7 00 03         [ 1] 2752 	ld count,a
      00251E 35 03 00 01      [ 1] 2753 	mov in,#3	
      002522 72 10 00 22      [ 1] 2754 	bset flags,#FRUN 
      002526 CC 16 E3         [ 2] 2755 	jp interpreter 
                                   2756 
                                   2757 
                                   2758 ;----------------------
                                   2759 ; BASIC: END
                                   2760 ; end running program
                                   2761 ;---------------------- 
      002529                       2762 cmd_end: 
                                   2763 ; clean stack 
      002529 AE 17 FF         [ 2] 2764 	ldw x,#STACK_EMPTY
      00252C 94               [ 1] 2765 	ldw sp,x 
      00252D CC 16 C4         [ 2] 2766 	jp warm_start
                                   2767 
                                   2768 ;---------------------------
                                   2769 ; BASIC: GET var 
                                   2770 ; receive a key in variable 
                                   2771 ; don't wait 
                                   2772 ;---------------------------
      002530                       2773 cmd_get:
      002530 CD 17 9C         [ 4] 2774 	call next_token 
      002533 A1 85            [ 1] 2775 	cp a,#TK_VAR 
      002535 27 03            [ 1] 2776 	jreq 0$
      002537 CC 16 38         [ 2] 2777 	jp syntax_error 
      00253A CD 17 C4         [ 4] 2778 0$: call get_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      00253D CF 00 19         [ 2] 2779 	ldw ptr16,x 
      002540 CD 08 E6         [ 4] 2780 	call qgetc 
      002543 27 03            [ 1] 2781 	jreq 2$
      002545 CD 08 ED         [ 4] 2782 	call getc  
      002548 72 3F 00 19      [ 4] 2783 2$: clr [ptr16]
      00254C 72 5C 00 1A      [ 1] 2784 	inc ptr8 
      002550 72 3F 00 19      [ 4] 2785 	clr [ptr16]
      002554 72 5C 00 1A      [ 1] 2786 	inc ptr8 
      002558 72 C7 00 19      [ 4] 2787 	ld [ptr16],a 
      00255C 81               [ 4] 2788 	ret 
                                   2789 
                                   2790 
                                   2791 ;-----------------
                                   2792 ; 1 Khz beep 
                                   2793 ;-----------------
      00255D                       2794 beep_1khz:: 
      00255D 90 89            [ 2] 2795 	pushw y 
      00255F AE 00 64         [ 2] 2796 	ldw x,#100
      002562 90 AE 03 E8      [ 2] 2797 	ldw y,#1000
      002566 20 22            [ 2] 2798 	jra beep
                                   2799 
                                   2800 ;-----------------------
                                   2801 ; BASIC: TONE expr1,expr2
                                   2802 ; used TIMER2 channel 1
                                   2803 ; to produce a tone 
                                   2804 ; arguments:
                                   2805 ;    expr1   frequency 
                                   2806 ;    expr2   duration msec.
                                   2807 ;---------------------------
      002568                       2808 tone:
      002568 90 89            [ 2] 2809 	pushw y 
      00256A CD 19 64         [ 4] 2810 	call arg_list 
      00256D A1 02            [ 1] 2811 	cp a,#2 
      00256F 27 03            [ 1] 2812 	jreq 1$
      002571 CC 16 38         [ 2] 2813 	jp syntax_error 
      002574                       2814 1$: 
      002574                       2815 	_xpop 
      002574 90 F6            [ 1]    1     ld a,(y)
      002576 93               [ 1]    2     ldw x,y 
      002577 EE 01            [ 2]    3     ldw x,(1,x)
      002579 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00257D 89               [ 2] 2816 	pushw x ; duration 
      00257E                       2817 	_xpop ; frequency
      00257E 90 F6            [ 1]    1     ld a,(y)
      002580 93               [ 1]    2     ldw x,y 
      002581 EE 01            [ 2]    3     ldw x,(1,x)
      002583 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002587 90 93            [ 1] 2818 	ldw y,x ; frequency 
      002589 85               [ 2] 2819 	popw x  ; duration 
      00258A                       2820 beep:  
      00258A 89               [ 2] 2821 	pushw x 
      00258B AE F4 24         [ 2] 2822 	ldw x,#TIM2_CLK_FREQ
      00258E 65               [ 2] 2823 	divw x,y ; cntr=Fclk/freq 
                                   2824 ; round to nearest integer 
      00258F 90 A3 7A 12      [ 2] 2825 	cpw y,#TIM2_CLK_FREQ/2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002593 2B 01            [ 1] 2826 	jrmi 2$
      002595 5C               [ 1] 2827 	incw x 
      002596                       2828 2$:	 
      002596 9E               [ 1] 2829 	ld a,xh 
      002597 C7 53 0D         [ 1] 2830 	ld TIM2_ARRH,a 
      00259A 9F               [ 1] 2831 	ld a,xl 
      00259B C7 53 0E         [ 1] 2832 	ld TIM2_ARRL,a 
                                   2833 ; 50% duty cycle 
      00259E 8C               [ 1] 2834 	ccf 
      00259F 56               [ 2] 2835 	rrcw x 
      0025A0 9E               [ 1] 2836 	ld a,xh 
      0025A1 C7 53 0F         [ 1] 2837 	ld TIM2_CCR1H,a 
      0025A4 9F               [ 1] 2838 	ld a,xl
      0025A5 C7 53 10         [ 1] 2839 	ld TIM2_CCR1L,a
      0025A8 72 10 53 08      [ 1] 2840 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025AC 72 10 53 00      [ 1] 2841 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025B0 72 10 53 04      [ 1] 2842 	bset TIM2_EGR,#TIM2_EGR_UG
      0025B4 85               [ 2] 2843 	popw x 
      0025B5 CD 2A BB         [ 4] 2844 	call pause02
      0025B8 72 11 53 08      [ 1] 2845 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025BC 72 11 53 00      [ 1] 2846 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0025C0 90 85            [ 2] 2847 	popw y 
      0025C2 81               [ 4] 2848 	ret 
                                   2849 
                                   2850 ;-------------------------------
                                   2851 ; BASIC: ADCON 0|1 [,divisor]  
                                   2852 ; disable/enanble ADC 
                                   2853 ;-------------------------------
                           000003  2854 	ONOFF=3 
                           000001  2855 	DIVSOR=1
                           000004  2856 	VSIZE=4 
      0025C3                       2857 power_adc:
      0025C3 CD 19 64         [ 4] 2858 	call arg_list 
      0025C6 A1 02            [ 1] 2859 	cp a,#2	
      0025C8 27 12            [ 1] 2860 	jreq 1$
      0025CA A1 01            [ 1] 2861 	cp a,#1 
      0025CC 27 03            [ 1] 2862 	jreq 0$ 
      0025CE CC 16 38         [ 2] 2863 	jp syntax_error 
      0025D1 4F               [ 1] 2864 0$:	clr a 
      0025D2 5F               [ 1] 2865 	clrw x
      0025D3                       2866 	_xpush   ; divisor  
      0025D3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0025D7 90 F7            [ 1]    2     ld (y),a 
      0025D9 90 EF 01         [ 2]    3     ldw (1,y),x 
      0025DC                       2867 1$: _at_next 
      0025DC 90 E6 03         [ 1]    1     ld a,(3,y)
      0025DF 93               [ 1]    2     ldw x,y 
      0025E0 EE 04            [ 2]    3     ldw x,(4,x)
      0025E2 5D               [ 2] 2868 	tnzw x 
      0025E3 27 25            [ 1] 2869 	jreq 2$ 
      0025E5                       2870 	_xpop
      0025E5 90 F6            [ 1]    1     ld a,(y)
      0025E7 93               [ 1]    2     ldw x,y 
      0025E8 EE 01            [ 2]    3     ldw x,(1,x)
      0025EA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0025EE                       2871 	_xdrop  
      0025EE 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0025F2 9F               [ 1] 2872 	ld a,xl
      0025F3 A4 07            [ 1] 2873 	and a,#7
      0025F5 4E               [ 1] 2874 	swap a 
      0025F6 C7 54 01         [ 1] 2875 	ld ADC_CR1,a
      0025F9 72 16 50 CA      [ 1] 2876 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0025FD 72 10 54 01      [ 1] 2877 	bset ADC_CR1,#ADC_CR1_ADON 
      002601                       2878 	_usec_dly 7 
      002601 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002604 5A               [ 2]    2     decw x
      002605 9D               [ 1]    3     nop 
      002606 26 FA            [ 1]    4     jrne .-4
      002608 20 08            [ 2] 2879 	jra 3$
      00260A 72 11 54 01      [ 1] 2880 2$: bres ADC_CR1,#ADC_CR1_ADON
      00260E 72 17 50 CA      [ 1] 2881 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002612                       2882 3$:	
      002612 81               [ 4] 2883 	ret
                                   2884 
                                   2885 ;-----------------------------
                                   2886 ; BASIC: ADCREAD (channel)
                                   2887 ; read adc channel {0..5}
                                   2888 ; output:
                                   2889 ;   A 		TK_INTGR 
                                   2890 ;   X 		value 
                                   2891 ;-----------------------------
      002613                       2892 analog_read:
      002613 CD 19 5F         [ 4] 2893 	call func_args 
      002616 A1 01            [ 1] 2894 	cp a,#1 
      002618 27 03            [ 1] 2895 	jreq 1$
      00261A CC 16 38         [ 2] 2896 	jp syntax_error
      00261D                       2897 1$: _xpop 
      00261D 90 F6            [ 1]    1     ld a,(y)
      00261F 93               [ 1]    2     ldw x,y 
      002620 EE 01            [ 2]    3     ldw x,(1,x)
      002622 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002626 A3 00 05         [ 2] 2898 	cpw x,#5 
      002629 23 05            [ 2] 2899 	jrule 2$
      00262B A6 0A            [ 1] 2900 	ld a,#ERR_BAD_VALUE
      00262D CC 16 3A         [ 2] 2901 	jp tb_error 
      002630 9F               [ 1] 2902 2$: ld a,xl
      002631 C7 00 0E         [ 1] 2903 	ld acc8,a 
      002634 A6 05            [ 1] 2904 	ld a,#5
      002636 C0 00 0E         [ 1] 2905 	sub a,acc8 
      002639 C7 54 00         [ 1] 2906 	ld ADC_CSR,a
      00263C 72 16 54 02      [ 1] 2907 	bset ADC_CR2,#ADC_CR2_ALIGN
      002640 72 10 54 01      [ 1] 2908 	bset ADC_CR1,#ADC_CR1_ADON
      002644 72 0F 54 00 FB   [ 2] 2909 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002649 CE 54 04         [ 2] 2910 	ldw x,ADC_DRH
      00264C A6 84            [ 1] 2911 	ld a,#TK_INTGR
      00264E 81               [ 4] 2912 	ret 
                                   2913 
                                   2914 ;-----------------------
                                   2915 ; BASIC: DREAD(pin)
                                   2916 ; Arduino pins 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



                                   2917 ; read state of a digital pin 
                                   2918 ; pin# {0..15}
                                   2919 ; output:
                                   2920 ;    A 		TK_INTGR
                                   2921 ;    X      0|1 
                                   2922 ;-------------------------
                           000001  2923 	PINNO=1
                           000001  2924 	VSIZE=1
      00264F                       2925 digital_read:
      00264F                       2926 	_vars VSIZE 
      00264F 52 01            [ 2]    1     sub sp,#VSIZE 
      002651 CD 19 5F         [ 4] 2927 	call func_args
      002654 A1 01            [ 1] 2928 	cp a,#1
      002656 27 03            [ 1] 2929 	jreq 1$
      002658 CC 16 38         [ 2] 2930 	jp syntax_error
      00265B                       2931 1$: _xpop 
      00265B 90 F6            [ 1]    1     ld a,(y)
      00265D 93               [ 1]    2     ldw x,y 
      00265E EE 01            [ 2]    3     ldw x,(1,x)
      002660 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002664 A3 00 0F         [ 2] 2932 	cpw x,#15 
      002667 23 05            [ 2] 2933 	jrule 2$
      002669 A6 0A            [ 1] 2934 	ld a,#ERR_BAD_VALUE
      00266B CC 16 3A         [ 2] 2935 	jp tb_error 
      00266E CD 2B FE         [ 4] 2936 2$:	call select_pin 
      002671 6B 01            [ 1] 2937 	ld (PINNO,sp),a
      002673 E6 01            [ 1] 2938 	ld a,(GPIO_IDR,x)
      002675 0D 01            [ 1] 2939 	tnz (PINNO,sp)
      002677 27 05            [ 1] 2940 	jreq 8$
      002679 44               [ 1] 2941 3$: srl a 
      00267A 0A 01            [ 1] 2942 	dec (PINNO,sp)
      00267C 26 FB            [ 1] 2943 	jrne 3$ 
      00267E A4 01            [ 1] 2944 8$: and a,#1 
      002680 5F               [ 1] 2945 	clrw x 
      002681 97               [ 1] 2946 	ld xl,a 
      002682 4F               [ 1] 2947 	clr a 
      002683                       2948 	_drop VSIZE
      002683 5B 01            [ 2]    1     addw sp,#VSIZE 
      002685 81               [ 4] 2949 	ret
                                   2950 
                                   2951 
                                   2952 ;-----------------------
                                   2953 ; BASIC: DWRITE pin,0|1
                                   2954 ; Arduino pins 
                                   2955 ; write to a digital pin 
                                   2956 ; pin# {0..15}
                                   2957 ; output:
                                   2958 ;    A 		TK_INTGR
                                   2959 ;    X      0|1 
                                   2960 ;-------------------------
                           000001  2961 	PINNO=1
                           000002  2962 	PINVAL=2
                           000002  2963 	VSIZE=2
      002686                       2964 digital_write:
      002686                       2965 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002686 52 02            [ 2]    1     sub sp,#VSIZE 
      002688 CD 19 64         [ 4] 2966 	call arg_list  
      00268B A1 02            [ 1] 2967 	cp a,#2 
      00268D 27 03            [ 1] 2968 	jreq 1$
      00268F CC 16 38         [ 2] 2969 	jp syntax_error
      002692                       2970 1$: _xpop 
      002692 90 F6            [ 1]    1     ld a,(y)
      002694 93               [ 1]    2     ldw x,y 
      002695 EE 01            [ 2]    3     ldw x,(1,x)
      002697 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00269B 9F               [ 1] 2971 	ld a,xl 
      00269C 6B 02            [ 1] 2972 	ld (PINVAL,sp),a
      00269E                       2973 	_xpop 
      00269E 90 F6            [ 1]    1     ld a,(y)
      0026A0 93               [ 1]    2     ldw x,y 
      0026A1 EE 01            [ 2]    3     ldw x,(1,x)
      0026A3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026A7 A3 00 0F         [ 2] 2974 	cpw x,#15 
      0026AA 23 05            [ 2] 2975 	jrule 2$
      0026AC A6 0A            [ 1] 2976 	ld a,#ERR_BAD_VALUE
      0026AE CC 16 3A         [ 2] 2977 	jp tb_error 
      0026B1 CD 2B FE         [ 4] 2978 2$:	call select_pin 
      0026B4 6B 01            [ 1] 2979 	ld (PINNO,sp),a 
      0026B6 A6 01            [ 1] 2980 	ld a,#1
      0026B8 0D 01            [ 1] 2981 	tnz (PINNO,sp)
      0026BA 27 05            [ 1] 2982 	jreq 4$
      0026BC 48               [ 1] 2983 3$: sll a
      0026BD 0A 01            [ 1] 2984 	dec (PINNO,sp)
      0026BF 26 FB            [ 1] 2985 	jrne 3$
      0026C1 0D 02            [ 1] 2986 4$: tnz (PINVAL,sp)
      0026C3 26 05            [ 1] 2987 	jrne 5$
      0026C5 43               [ 1] 2988 	cpl a 
      0026C6 E4 00            [ 1] 2989 	and a,(GPIO_ODR,x)
      0026C8 20 02            [ 2] 2990 	jra 8$
      0026CA EA 00            [ 1] 2991 5$: or a,(GPIO_ODR,x)
      0026CC E7 00            [ 1] 2992 8$: ld (GPIO_ODR,x),a 
      0026CE                       2993 	_drop VSIZE 
      0026CE 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026D0 81               [ 4] 2994 	ret
                                   2995 
                                   2996 
                                   2997 ;-----------------------
                                   2998 ; BASIC: STOP
                                   2999 ; stop progam execution  
                                   3000 ; without resetting pointers 
                                   3001 ; the program is resumed
                                   3002 ; with RUN 
                                   3003 ;-------------------------
      0026D1                       3004 stop:
      0026D1 72 00 00 22 02   [ 2] 3005 	btjt flags,#FRUN,2$
      0026D6 4F               [ 1] 3006 	clr a
      0026D7 81               [ 4] 3007 	ret 
      0026D8                       3008 2$:	 
                                   3009 ; create space on cstack to save context 
      0026D8 AE 26 FF         [ 2] 3010 	ldw x,#break_point 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0026DB CD 09 3A         [ 4] 3011 	call puts 
      0026DE                       3012 	_drop 2 ;drop return address 
      0026DE 5B 02            [ 2]    1     addw sp,#2 
      0026E0                       3013 	_vars CTXT_SIZE ; context size 
      0026E0 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0026E2 CD 1F FC         [ 4] 3014 	call save_context 
      0026E5 AE 16 90         [ 2] 3015 	ldw x,#tib 
      0026E8 CF 00 04         [ 2] 3016 	ldw basicptr,x
      0026EB 7F               [ 1] 3017 	clr (x)
      0026EC 72 5F 00 03      [ 1] 3018 	clr count  
      0026F0 5F               [ 1] 3019 	clrw x 
      0026F1 CF 00 00         [ 2] 3020 	ldw in.w,x
      0026F4 72 11 00 22      [ 1] 3021 	bres flags,#FRUN 
      0026F8 72 18 00 22      [ 1] 3022 	bset flags,#FBREAK
      0026FC CC 16 E3         [ 2] 3023 	jp interpreter 
      0026FF 0A 62 72 65 61 6B 20  3024 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3025 
                                   3026 ;-----------------------
                                   3027 ; BASIC: NEW
                                   3028 ; from command line only 
                                   3029 ; free program memory
                                   3030 ; and clear variables 
                                   3031 ;------------------------
      00271D                       3032 new: 
      00271D 72 01 00 22 01   [ 2] 3033 	btjf flags,#FRUN,0$ 
      002722 81               [ 4] 3034 	ret 
      002723                       3035 0$:	
      002723 CD 14 70         [ 4] 3036 	call clear_basic 
      002726 81               [ 4] 3037 	ret 
                                   3038 
                                   3039 ;-----------------------------------
                                   3040 ; BASIC: ERASE \E | \F [address]
                                   3041 ; erase all block in range from 
                                   3042 ;  'app_space' to FLASH end (0x27fff)
                                   3043 ;  or all EEPROM 
                                   3044 ; that contains a non zero byte. 
                                   3045 ; [address] is optional, if given 
                                   3046 ; erase at block containing this address  
                                   3047 ;-----------------------------------
                           000001  3048 	LIMIT=1 
                           000003  3049 	VSIZE = 3 
      002727                       3050 erase:
      002727 72 01 00 22 05   [ 2] 3051 	btjf flags,#FRUN,eras0
      00272C A6 07            [ 1] 3052 	ld a,#ERR_CMD_ONLY
      00272E CC 16 3A         [ 2] 3053 	jp tb_error 
      002731                       3054 eras0:	
      002731 72 5F 00 18      [ 1] 3055 	clr farptr 
      002735                       3056 	_vars VSIZE 
      002735 52 03            [ 2]    1     sub sp,#VSIZE 
      002737 CD 17 9C         [ 4] 3057 	call next_token 
      00273A A1 04            [ 1] 3058 	cp a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      00273C 27 03            [ 1] 3059 	jreq 0$ 
      00273E CC 16 38         [ 2] 3060 	jp syntax_error
      002741 CD 17 DE         [ 4] 3061 0$: call get_char 
      002744 A4 DF            [ 1] 3062 	and a,#0XDF 
      002746 A1 45            [ 1] 3063 	cp a,#'E
      002748 26 0C            [ 1] 3064 	jrne 1$
      00274A AE 40 00         [ 2] 3065 	ldw x,#EEPROM_BASE 
      00274D CF 00 19         [ 2] 3066 	ldw farptr+1,x 
      002750 AE 47 FF         [ 2] 3067 	ldw x,#EEPROM_END
      002753 4F               [ 1] 3068 	clr a 
      002754 20 15            [ 2] 3069 	jra 3$ 
      002756 A1 46            [ 1] 3070 1$: cp a,#'F 
      002758 27 06            [ 1] 3071 	jreq 2$
      00275A AE 15 5C         [ 2] 3072 	ldw x,#err_bad_value
      00275D CC 16 3A         [ 2] 3073 	jp tb_error
      002760                       3074 2$:
      002760 AE 36 80         [ 2] 3075 	ldw x,#app_space  
      002763 CF 00 19         [ 2] 3076 	ldw farptr+1,x 
      002766 A6 02            [ 1] 3077 	ld a,#(FLASH_END>>16)&0XFF 
      002768 AE 7F FF         [ 2] 3078 	ldw x,#FLASH_END&0xffff
      00276B                       3079 3$:
      00276B 6B 01            [ 1] 3080 	ld (LIMIT,sp),a 
      00276D 1F 02            [ 2] 3081 	ldw (LIMIT+1,sp),x 
                                   3082  ; operation done from RAM
                                   3083  ; copy code to RAM in tib   
      00276F CD 06 D7         [ 4] 3084 	call move_erase_to_ram
                                   3085 ;
                                   3086 ; check address option 	
      002772 CD 17 9C         [ 4] 3087 	call next_token 
      002775 A1 00            [ 1] 3088 	cp a,#TK_NONE 
      002777 27 44            [ 1] 3089 	jreq 4$ 
      002779                       3090 	_unget_token 
      002779 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00277E CD 1A A8         [ 4] 3091 	call expression 
      002781 A1 84            [ 1] 3092 	cp a,#TK_INTGR
      002783 27 03            [ 1] 3093 	jreq 32$
      002785 CC 16 38         [ 2] 3094 	jp syntax_error
      002788                       3095 32$: 
      002788                       3096 	_xpop
      002788 90 F6            [ 1]    1     ld a,(y)
      00278A 93               [ 1]    2     ldw x,y 
      00278B EE 01            [ 2]    3     ldw x,(1,x)
      00278D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002791 4D               [ 1] 3097 	tnz a 
      002792 26 14            [ 1] 3098 	jrne 38$
      002794 A3 36 80         [ 2] 3099 	cpw x,#app_space
      002797 24 0F            [ 1] 3100 	jruge 38$
      002799 A3 40 00         [ 2] 3101 	cpw x,#EEPROM_BASE 
      00279C 25 05            [ 1] 3102 	jrult 37$
      00279E A3 47 FF         [ 2] 3103 	cpw x,#EEPROM_END 
      0027A1 25 10            [ 1] 3104 	jrult 39$
      0027A3                       3105 37$:
      0027A3 A6 0A            [ 1] 3106 	ld a,#ERR_BAD_VALUE
      0027A5 CC 16 38         [ 2] 3107 	jp syntax_error 
      0027A8                       3108 38$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0027A8 A1 02            [ 1] 3109 	cp a,#2
      0027AA 22 F7            [ 1] 3110 	jrugt 37$
      0027AC 25 05            [ 1] 3111 	jrult 39$ 
      0027AE C3 7F FF         [ 2] 3112 	cpw x,0x7fff 
      0027B1 22 F0            [ 1] 3113 	jrugt 37$ 
      0027B3                       3114 39$:
      0027B3 C7 00 18         [ 1] 3115 	ld farptr,a 
      0027B6 9F               [ 1] 3116 	ld a,xl 
      0027B7 A4 80            [ 1] 3117 	and a,#0x80
      0027B9 97               [ 1] 3118 	ld xl,a
      0027BA CF 00 19         [ 2] 3119 	ldw farptr+1,x
      0027BD                       3120 4$:	 
      0027BD CD 08 5D         [ 4] 3121     call scan_block 
      0027C0 27 08            [ 1] 3122 	jreq 5$  ; block already erased 
      0027C2 A6 45            [ 1] 3123     ld a,#'E 
      0027C4 CD 08 DD         [ 4] 3124     call putc 
      0027C7 CD 07 55         [ 4] 3125 	call block_erase   
                                   3126 ; this block is clean, next  
      0027CA AE 00 80         [ 2] 3127 5$:	ldw x,#BLOCK_SIZE
      0027CD CD 08 4F         [ 4] 3128 	call incr_farptr
                                   3129 ; check limit, 24 bit substraction  	
      0027D0 7B 01            [ 1] 3130 	ld a,(LIMIT,sp)
      0027D2 1E 02            [ 2] 3131 	ldw x,(LIMIT+1,sp)
      0027D4 72 B0 00 19      [ 2] 3132 	subw x,farptr+1
      0027D8 C2 00 18         [ 1] 3133 	sbc a,farptr 
      0027DB 22 E0            [ 1] 3134 	jrugt 4$ 
      0027DD CD 14 70         [ 4] 3135 9$: call clear_basic
      0027E0 1E 02            [ 2] 3136 	ldw x,(LIMIT+1,sp)
      0027E2 A3 47 FF         [ 2] 3137 	cpw x,#EEPROM_END
      0027E5 26 03            [ 1] 3138 	jrne 10$
      0027E7 CD 1C D4         [ 4] 3139 	call func_eefree 
      0027EA                       3140 10$:
      0027EA                       3141 	_drop VSIZE 
      0027EA 5B 03            [ 2]    1     addw sp,#VSIZE 
      0027EC 81               [ 4] 3142 	ret 
                                   3143 	
                                   3144 
                                   3145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3146 ;  check for application signature 
                                   3147 ; input:
                                   3148 ;	x       address to check 
                                   3149 ; output:
                                   3150 ;   Z      1  signature present 
                                   3151 ;          0 not app signature  
                                   3152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027ED                       3153 qsign: 
      0027ED 89               [ 2] 3154 	pushw x 
      0027EE FE               [ 2] 3155 	ldw x,(x)
      0027EF C3 28 AE         [ 2] 3156 	cpw x,SIGNATURE ; "TB" 
      0027F2 85               [ 2] 3157 	popw x 
      0027F3 81               [ 4] 3158 	ret 
                                   3159 
                                   3160 ;--------------------------------------
                                   3161 ;  fill write buffer 
                                   3162 ;  input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



                                   3163 ;    y  point to output buffer 
                                   3164 ;    x  point to source 
                                   3165 ;    a  bytes to write in buffer 
                                   3166 ;  output:
                                   3167 ;    y   += A 
                                   3168 ;    X   += A 
                                   3169 ;    A   0 
                                   3170 ;---------------------------------------
      0027F4                       3171 fill_write_buffer:
      0027F4 88               [ 1] 3172 	push a 
      0027F5 4D               [ 1] 3173 	tnz a 
      0027F6 27 0A            [ 1] 3174 	jreq 9$ 
      0027F8 F6               [ 1] 3175 1$: ld a,(x)
      0027F9 5C               [ 1] 3176 	incw x 
      0027FA 90 F7            [ 1] 3177 	ld (y),a 
      0027FC 90 5C            [ 1] 3178 	incw y 
      0027FE 0A 01            [ 1] 3179 	dec (1,sp) 
      002800 26 F6            [ 1] 3180 	jrne 1$ 
      002802 84               [ 1] 3181 9$:	pop a 
      002803 81               [ 4] 3182     ret 	
                                   3183 
                                   3184 ;--------------------------------------
                                   3185 ;  fill pad buffer with zero 
                                   3186 ;  input:
                                   3187 ;	none 
                                   3188 ;  output:
                                   3189 ;    y     buffer address  
                                   3190 ;--------------------------------------
      002804                       3191 clear_block_buffer:
      002804 88               [ 1] 3192 	push a 
      002805 90 AE 16 E0      [ 2] 3193 	ldw y,#block_buffer 
      002809 90 89            [ 2] 3194 	pushw y
      00280B A6 80            [ 1] 3195 	ld a,#BLOCK_SIZE   
      00280D 90 7F            [ 1] 3196 1$:	clr (y)
      00280F 90 5C            [ 1] 3197 	incw y
      002811 4A               [ 1] 3198 	dec a  
      002812 26 F9            [ 1] 3199 	jrne 1$ 	
      002814 90 85            [ 2] 3200 9$: popw y 
      002816 84               [ 1] 3201 	pop a 			
      002817 81               [ 4] 3202 	ret 
                                   3203 
                                   3204 
                                   3205 ;---------------------------------------
                                   3206 ; BASIC: SAVE
                                   3207 ; write application from RAM to FLASH
                                   3208 ; at UFLASH address
                                   3209 ;--------------------------------------
                           000001  3210 	XTEMP=1
                           000003  3211 	COUNT=3  ; last count bytes written 
                           000004  3212 	CNT_LO=4 ; count low byte 
                           000005  3213 	TOWRITE=5 ; how bytes left to write  
                           000006  3214 	VSIZE=6 
      002818                       3215 save_app:
      002818 89               [ 2] 3216 	pushw x 
      002819 90 89            [ 2] 3217 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      00281B                       3218 	_vars VSIZE
      00281B 52 06            [ 2]    1     sub sp,#VSIZE 
      00281D CD 1D EE         [ 4] 3219 	call prog_size 
      002820 26 09            [ 1] 3220 	jrne 0$ 
      002822 AE 28 DF         [ 2] 3221 	ldw x,#NO_APP
      002825 CD 09 3A         [ 4] 3222 	call puts 
      002828 CC 28 A8         [ 2] 3223 	jp 9$
      00282B 1F 05            [ 2] 3224 0$:	ldw (TOWRITE,sp),x ; program size
      00282D CD 2A 4C         [ 4] 3225 	call uflash
      002830 72 5F 00 18      [ 1] 3226 	clr farptr 
      002834 CF 00 19         [ 2] 3227 	ldw ptr16,x 
      002837 AE FF FF         [ 2] 3228 	ldw x,#0xFFFF
      00283A 72 B0 00 19      [ 2] 3229 	subw x,ptr16 ; free flash 
      00283E 1D 00 04         [ 2] 3230 	subw x,#4 ; signature and size field 
      002841 13 05            [ 2] 3231 	cpw x,(TOWRITE,sp)
      002843 24 09            [ 1] 3232 	jruge 1$
      002845 AE 28 B0         [ 2] 3233 	ldw x,#CANT_DO 
      002848 CD 09 3A         [ 4] 3234 	call puts 
      00284B CC 28 A8         [ 2] 3235 	jp 9$
      00284E                       3236 1$: 
                                   3237 ; block programming flash
                                   3238 ; must be done from RAM
                                   3239 ; moved in tib  
      00284E CD 07 17         [ 4] 3240 	call move_prg_to_ram
                                   3241 ; initialize written bytes count  
      002851 0F 03            [ 1] 3242 	clr (COUNT,sp)
                                   3243 ; first bock 
                                   3244 ; containt signature 2 bytes 
                                   3245 ; and size 	2 bytes 
                                   3246 ; use Y as pointer to block_buffer
      002853 CD 28 04         [ 4] 3247 	call clear_block_buffer ; -- y=*block_buffer	
                                   3248 ; write signature
      002856 CE 28 AE         [ 2] 3249 	ldw x,SIGNATURE ; "TB" 
      002859 90 FF            [ 2] 3250 	ldw (y),x 
      00285B 72 A9 00 02      [ 2] 3251 	addw y,#2
      00285F 1E 05            [ 2] 3252 	ldw x,(TOWRITE,sp)
      002861 90 FF            [ 2] 3253 	ldw (y),x
      002863 72 A9 00 02      [ 2] 3254 	addw y,#2   
      002867 A6 7C            [ 1] 3255 	ld a,#(BLOCK_SIZE-4)
      002869 A3 00 7C         [ 2] 3256 	cpw x,#(BLOCK_SIZE-4) 
      00286C 22 01            [ 1] 3257 	jrugt 3$
      00286E 9F               [ 1] 3258 	ld a,xl 
      00286F 6B 04            [ 1] 3259 3$:	ld (CNT_LO,sp),a   
      002871 CE 00 1B         [ 2] 3260 	ldw x,txtbgn 
      002874 1F 01            [ 2] 3261 	ldw (XTEMP,sp),x 
      002876                       3262 32$: 
      002876 1E 01            [ 2] 3263 	ldw x,(XTEMP,sp)
      002878 7B 04            [ 1] 3264 	ld a,(CNT_LO,sp)
      00287A CD 27 F4         [ 4] 3265 	call fill_write_buffer 
      00287D 1F 01            [ 2] 3266 	ldw (XTEMP,sp),x 
      00287F AE 16 E0         [ 2] 3267 	ldw x,#block_buffer
      002882 CD 07 31         [ 4] 3268 	call write_buffer
      002885 AE 00 80         [ 2] 3269 	ldw x,#BLOCK_SIZE 
      002888 CD 08 4F         [ 4] 3270 	call incr_farptr  
                                   3271 ; following blocks 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00288B 1E 01            [ 2] 3272 	ldw x,(XTEMP,sp)
      00288D C3 00 1D         [ 2] 3273 	cpw x,txtend 
      002890 24 16            [ 1] 3274 	jruge 9$ 
      002892 1E 05            [ 2] 3275 	ldw x,(TOWRITE,sp)
      002894 72 F0 03         [ 2] 3276 	subw x,(COUNT,sp)
      002897 1F 05            [ 2] 3277 	ldw (TOWRITE,sp),x 
      002899 A6 80            [ 1] 3278 	ld a,#BLOCK_SIZE 
      00289B A3 00 80         [ 2] 3279 	cpw x,#BLOCK_SIZE 
      00289E 24 01            [ 1] 3280 	jruge 4$ 
      0028A0 9F               [ 1] 3281 	ld a,xl 
      0028A1 6B 04            [ 1] 3282 4$:	ld (CNT_LO,sp),a 
      0028A3 CD 28 04         [ 4] 3283 	call clear_block_buffer 
      0028A6 20 CE            [ 2] 3284 	jra 32$ 
      0028A8                       3285 9$:	_drop VSIZE 
      0028A8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0028AA 90 85            [ 2] 3286     popw y 
      0028AC 85               [ 2] 3287 	popw x 
      0028AD 81               [ 4] 3288 	ret 
                                   3289 
                                   3290 
      0028AE 54 42                 3291 SIGNATURE: .ascii "TB"
      0028B0 43 61 6E 27 74 20 73  3292 CANT_DO: .asciz "Can't save application, not enough free FLASH\n"
             61 76 65 20 61 70 70
             6C 69 63 61 74 69 6F
             6E 2C 20 6E 6F 74 20
             65 6E 6F 75 67 68 20
             66 72 65 65 20 46 4C
             41 53 48 0A 00
      0028DF 4E 6F 20 61 70 70 6C  3293 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3294 
                                   3295 ;---------------------
                                   3296 ; BASIC: DIR 
                                   3297 ; list programs saved 
                                   3298 ; in flash 
                                   3299 ;--------------------
                           000001  3300 	XTEMP=1 
      0028F5                       3301 cmd_dir:
      0028F5 AE 36 80         [ 2] 3302 	ldw x,#app_space 
      0028F8 89               [ 2] 3303 	pushw x 
      0028F9                       3304 1$: 
      0028F9 CD 27 ED         [ 4] 3305 	call qsign 
      0028FC 26 4B            [ 1] 3306 	jrne 8$
      0028FE 1C 00 04         [ 2] 3307 	addw x,#4
      002901 35 10 00 0A      [ 1] 3308 	mov base,#16
      002905 CD 17 E4         [ 4] 3309 	call prt_i16
      002908 A6 20            [ 1] 3310 	ld a,#SPACE 
      00290A CD 08 DD         [ 4] 3311 	call putc 
      00290D 1E 01            [ 2] 3312 	ldw x,(1,sp)
      00290F EE 02            [ 2] 3313 	ldw x,(2,x)
      002911 35 0A 00 0A      [ 1] 3314 	mov base,#10 
      002915 CD 17 E4         [ 4] 3315 	call prt_i16 
      002918 AE 1E 58         [ 2] 3316 	ldw x,#STR_BYTES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00291B CD 09 3A         [ 4] 3317 	call puts
      00291E A6 2C            [ 1] 3318 	ld a,#', 
      002920 CD 08 DD         [ 4] 3319 	call putc
      002923 1E 01            [ 2] 3320 	ldw x,(1,sp)
      002925 1C 00 0A         [ 2] 3321 	addw x,#10
      002928 CD 09 3A         [ 4] 3322 	call puts 
      00292B A6 0D            [ 1] 3323 	ld a,#CR 
      00292D CD 08 DD         [ 4] 3324 	call putc
      002930 1E 01            [ 2] 3325 	ldw x,(1,sp)
      002932 CF 00 0D         [ 2] 3326 	ldw acc16,x 
      002935 EE 02            [ 2] 3327 	ldw x,(2,x)
      002937 72 BB 00 0D      [ 2] 3328 	addw x,acc16 
      00293B 1C 00 04         [ 2] 3329 	addw x,#4 
      00293E 1C 00 80         [ 2] 3330 	addw x,#BLOCK_SIZE 
      002941 9F               [ 1] 3331 	ld a,xl 
      002942 A4 80            [ 1] 3332 	and a,#128 
      002944 97               [ 1] 3333 	ld xl,a 
      002945 1F 01            [ 2] 3334 	ldw (1,sp),x 
      002947 20 B0            [ 2] 3335 	jra 1$  
      002949                       3336 8$: ; done 
      002949                       3337 	_drop 2 
      002949 5B 02            [ 2]    1     addw sp,#2 
      00294B 81               [ 4] 3338 	ret 
                                   3339 
                                   3340 ;---------------------
                                   3341 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3342 ; write 1 or more byte to FLASH or EEPROM
                                   3343 ; starting at address  
                                   3344 ; input:
                                   3345 ;   expr1  	is address 
                                   3346 ;   expr2,...,exprn   are bytes to write
                                   3347 ; output:
                                   3348 ;   none 
                                   3349 ;---------------------
      00294C                       3350 write:
      00294C CD 1A A8         [ 4] 3351 	call expression
      00294F A1 84            [ 1] 3352 	cp a,#TK_INTGR 
      002951 27 03            [ 1] 3353 	jreq 0$
      002953 CC 16 38         [ 2] 3354 	jp syntax_error
      002956                       3355 0$: _xpop 
      002956 90 F6            [ 1]    1     ld a,(y)
      002958 93               [ 1]    2     ldw x,y 
      002959 EE 01            [ 2]    3     ldw x,(1,x)
      00295B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00295F C7 00 18         [ 1] 3356 	ld farptr,a 
      002962 CF 00 19         [ 2] 3357 	ldw ptr16,x 
      002965                       3358 1$:	
      002965 CD 17 9C         [ 4] 3359 	call next_token 
      002968 A1 08            [ 1] 3360 	cp a,#TK_COMMA 
      00296A 27 02            [ 1] 3361 	jreq 2$ 
      00296C 20 46            [ 2] 3362 	jra 9$ ; no more data 
      00296E CD 17 9C         [ 4] 3363 2$:	call next_token 
      002971 A1 04            [ 1] 3364 	cp a,#TK_CHAR 
      002973 27 23            [ 1] 3365 	jreq 4$ 
      002975 A1 02            [ 1] 3366 	cp a,#TK_QSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      002977 27 2A            [ 1] 3367 	jreq 6$
      002979                       3368 	_unget_token 
      002979 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00297E CD 1A A8         [ 4] 3369 	call expression
      002981 A1 84            [ 1] 3370 	cp a,#TK_INTGR
      002983 27 03            [ 1] 3371 	jreq 3$
      002985 CC 16 38         [ 2] 3372 	jp syntax_error
      002988                       3373 3$:	_xpop 
      002988 90 F6            [ 1]    1     ld a,(y)
      00298A 93               [ 1]    2     ldw x,y 
      00298B EE 01            [ 2]    3     ldw x,(1,x)
      00298D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002991 9F               [ 1] 3374 	ld a,xl 
      002992 5F               [ 1] 3375 	clrw x 
      002993 CD 07 7B         [ 4] 3376 	call write_byte
      002996 20 CD            [ 2] 3377 	jra 1$ 
      002998                       3378 4$: ; write character 
      002998 F6               [ 1] 3379 	ld a,(x)
      002999 72 5C 00 01      [ 1] 3380 	inc in 
      00299D 5F               [ 1] 3381 	clrw x 
      00299E CD 07 7B         [ 4] 3382 	call write_byte 
      0029A1 20 C2            [ 2] 3383 	jra 1$ 
      0029A3                       3384 6$: ; write string 
      0029A3 89               [ 2] 3385 	pushw x 
      0029A4 F6               [ 1] 3386 	ld a,(x)
      0029A5 72 5C 00 01      [ 1] 3387 	inc in 
      0029A9 5F               [ 1] 3388 	clrw x 
      0029AA CD 07 7B         [ 4] 3389 	call write_byte 
      0029AD 85               [ 2] 3390 	popw x 
      0029AE F6               [ 1] 3391 	ld a,(x)
      0029AF 27 B4            [ 1] 3392 	jreq 1$
      0029B1 5C               [ 1] 3393 	incw x 
      0029B2 20 EF            [ 2] 3394 	jra 6$ 	
      0029B4                       3395 9$:
      0029B4 81               [ 4] 3396 	ret 
                                   3397 
                                   3398 
                                   3399 ;---------------------
                                   3400 ;BASIC: CHAR(expr)
                                   3401 ; évaluate expression 
                                   3402 ; and take the 7 least 
                                   3403 ; bits as ASCII character
                                   3404 ; output: 
                                   3405 ; 	A char 
                                   3406 ;---------------------
      0029B5                       3407 func_char:
      0029B5 CD 19 5F         [ 4] 3408 	call func_args 
      0029B8 A1 01            [ 1] 3409 	cp a,#1
      0029BA 27 03            [ 1] 3410 	jreq 1$
      0029BC CC 16 38         [ 2] 3411 	jp syntax_error
      0029BF                       3412 1$:	_xpop
      0029BF 90 F6            [ 1]    1     ld a,(y)
      0029C1 93               [ 1]    2     ldw x,y 
      0029C2 EE 01            [ 2]    3     ldw x,(1,x)
      0029C4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0029C8 9F               [ 1] 3413 	ld a,xl
      0029C9 A4 7F            [ 1] 3414 	and a,#0x7f 
      0029CB 81               [ 4] 3415 	ret
                                   3416 
                                   3417 ;---------------------
                                   3418 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3419 ; extract first character 
                                   3420 ; of string argument 
                                   3421 ; output:
                                   3422 ;    A:X    int24 
                                   3423 ;---------------------
      0029CC                       3424 ascii:
      0029CC A6 06            [ 1] 3425 	ld a,#TK_LPAREN
      0029CE CD 19 52         [ 4] 3426 	call expect 
      0029D1 CD 17 9C         [ 4] 3427 	call next_token 
      0029D4 A1 02            [ 1] 3428 	cp a,#TK_QSTR 
      0029D6 27 0E            [ 1] 3429 	jreq 1$
      0029D8 A1 04            [ 1] 3430 	cp a,#TK_CHAR 
      0029DA 27 12            [ 1] 3431 	jreq 2$ 
      0029DC A1 82            [ 1] 3432 	cp a,#TK_CFUNC 
      0029DE 27 03            [ 1] 3433 	jreq 0$
      0029E0 CC 16 38         [ 2] 3434 	jp syntax_error
      0029E3                       3435 0$: ; cfunc 
      0029E3 FD               [ 4] 3436 	call (x)
      0029E4 20 0B            [ 2] 3437 	jra 3$
      0029E6                       3438 1$: ; quoted string 
      0029E6 F6               [ 1] 3439 	ld a,(x)
      0029E7 88               [ 1] 3440 	push a  
      0029E8 CD 17 B5         [ 4] 3441 	call skip_string
      0029EB 84               [ 1] 3442 	pop a  	
      0029EC 20 03            [ 2] 3443 	jra 3$ 
      0029EE                       3444 2$: ; character 
      0029EE CD 17 DE         [ 4] 3445 	call get_char 
      0029F1 5F               [ 1] 3446 3$:	clrw x 
      0029F2 02               [ 1] 3447 	rlwa x   
      0029F3                       3448 4$:	_xpush  
      0029F3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0029F7 90 F7            [ 1]    2     ld (y),a 
      0029F9 90 EF 01         [ 2]    3     ldw (1,y),x 
      0029FC A6 07            [ 1] 3449 	ld a,#TK_RPAREN 
      0029FE CD 19 52         [ 4] 3450 	call expect
      002A01                       3451 9$:	
      002A01                       3452 	_xpop  
      002A01 90 F6            [ 1]    1     ld a,(y)
      002A03 93               [ 1]    2     ldw x,y 
      002A04 EE 01            [ 2]    3     ldw x,(1,x)
      002A06 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A0A 81               [ 4] 3453 	ret 
                                   3454 
                                   3455 ;---------------------
                                   3456 ;BASIC: KEY
                                   3457 ; wait for a character 
                                   3458 ; received from STDIN 
                                   3459 ; input:
                                   3460 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3461 ; output:
                                   3462 ;	a	 character 
                                   3463 ;---------------------
      002A0B                       3464 key:
      002A0B CD 08 ED         [ 4] 3465 	call getc 
      002A0E 81               [ 4] 3466 	ret
                                   3467 
                                   3468 ;----------------------
                                   3469 ; BASIC: QKEY
                                   3470 ; Return true if there 
                                   3471 ; is a character in 
                                   3472 ; waiting in STDIN 
                                   3473 ; input:
                                   3474 ;  none 
                                   3475 ; output:
                                   3476 ;   A     0|-1
                                   3477 ;-----------------------
      002A0F                       3478 qkey:: 
      002A0F 5F               [ 1] 3479 	clrw x 
      002A10 C6 00 2E         [ 1] 3480 	ld a,rx1_head
      002A13 C0 00 2F         [ 1] 3481 	sub a,rx1_tail 
      002A16 27 03            [ 1] 3482 	jreq 9$ 
      002A18 53               [ 2] 3483 	cplw x
      002A19 A6 FF            [ 1] 3484 	ld a,#255    
      002A1B                       3485 9$: 
      002A1B 81               [ 4] 3486 	ret 
                                   3487 
                                   3488 ;---------------------
                                   3489 ; BASIC: GPIO(port,reg)
                                   3490 ; return gpio register address 
                                   3491 ; expr {PORTA..PORTI}
                                   3492 ; input:
                                   3493 ;   none 
                                   3494 ; output:
                                   3495 ;   A:X 	gpio register address
                                   3496 ;----------------------------
                                   3497 ;	N=PORT
                                   3498 ;	T=REG 
      002A1C                       3499 gpio:
      002A1C CD 19 5F         [ 4] 3500 	call func_args 
      002A1F A1 02            [ 1] 3501 	cp a,#2
      002A21 27 03            [ 1] 3502 	jreq 1$
      002A23 CC 16 38         [ 2] 3503 	jp syntax_error  
      002A26                       3504 1$:	_at_next 
      002A26 90 E6 03         [ 1]    1     ld a,(3,y)
      002A29 93               [ 1]    2     ldw x,y 
      002A2A EE 04            [ 2]    3     ldw x,(4,x)
      002A2C A3 50 00         [ 2] 3505 	cpw x,#PA_BASE 
      002A2F 2B 16            [ 1] 3506 	jrmi bad_port
      002A31 A3 50 29         [ 2] 3507 	cpw x,#PI_BASE+1 
      002A34 2A 11            [ 1] 3508 	jrpl bad_port
      002A36 89               [ 2] 3509 	pushw x 
      002A37                       3510 	_xpop
      002A37 90 F6            [ 1]    1     ld a,(y)
      002A39 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      002A3A EE 01            [ 2]    3     ldw x,(1,x)
      002A3C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A40 72 FB 01         [ 2] 3511 	addw x,(1,sp)
      002A43                       3512 	_drop 2 
      002A43 5B 02            [ 2]    1     addw sp,#2 
      002A45 4F               [ 1] 3513 	clr a 
      002A46 81               [ 4] 3514 	ret
      002A47                       3515 bad_port:
      002A47 A6 0A            [ 1] 3516 	ld a,#ERR_BAD_VALUE
      002A49 CC 16 3A         [ 2] 3517 	jp tb_error
                                   3518 
                                   3519 
                                   3520 ;-------------------------
                                   3521 ; BASIC: UFLASH 
                                   3522 ; return free flash address
                                   3523 ; scan all block starting at 
                                   3524 ; app_space and return 
                                   3525 ; address of first free block 
                                   3526 ; below extended memory.  
                                   3527 ; return 0 if no free block 
                                   3528 ; input:
                                   3529 ;  none 
                                   3530 ; output:
                                   3531 ;	A:X		FLASH free address
                                   3532 ;---------------------------
      002A4C                       3533 uflash:
      002A4C 72 5F 00 18      [ 1] 3534 	clr farptr 
      002A50 AE 36 80         [ 2] 3535 	ldw x,#app_space 
      002A53 89               [ 2] 3536 	pushw x 
      002A54 CF 00 19         [ 2] 3537 1$:	ldw ptr16,x 
      002A57 CD 08 5D         [ 4] 3538 	call scan_block 
      002A5A 27 0F            [ 1] 3539 	jreq 8$
      002A5C 1E 01            [ 2] 3540 	ldw x,(1,sp)
      002A5E 1C 00 80         [ 2] 3541 	addw x,#BLOCK_SIZE 
      002A61 27 04            [ 1] 3542 	jreq 7$ 
      002A63 1F 01            [ 2] 3543 	ldw (1,sp),x 
      002A65 20 ED            [ 2] 3544 	jra 1$ 
      002A67                       3545 7$: ; no free block 
      002A67 0F 01            [ 1] 3546 	clr (1,sp) 
      002A69 0F 02            [ 1] 3547 	clr (2,sp)
      002A6B 85               [ 2] 3548 8$: popw x 
      002A6C 4F               [ 1] 3549 	clr a 
      002A6D 81               [ 4] 3550 	ret 
                                   3551 
                                   3552 
                                   3553 ;---------------------
                                   3554 ; BASIC: USR(addr,arg)
                                   3555 ; execute a function written 
                                   3556 ; in binary code.
                                   3557 ; input:
                                   3558 ;   addr	routine address 
                                   3559 ;   arg 	is an argument
                                   3560 ;           it can be ignore 
                                   3561 ;           by cally. 
                                   3562 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3563 ;   xstack 	value returned by cally  
                                   3564 ;---------------------
      002A6E                       3565 usr:
      002A6E CD 19 5F         [ 4] 3566 	call func_args 
      002A71 A1 02            [ 1] 3567 	cp a,#2
      002A73 27 03            [ 1] 3568 	jreq 1$  
      002A75 CC 16 38         [ 2] 3569 	jp syntax_error 
      002A78                       3570 1$: 
      002A78                       3571 	_at_next ; A:X addr 
      002A78 90 E6 03         [ 1]    1     ld a,(3,y)
      002A7B 93               [ 1]    2     ldw x,y 
      002A7C EE 04            [ 2]    3     ldw x,(4,x)
      002A7E CF 00 19         [ 2] 3572 	ldw ptr16,X 
      002A81                       3573 	_xpop  ; arg 
      002A81 90 F6            [ 1]    1     ld a,(y)
      002A83 93               [ 1]    2     ldw x,y 
      002A84 EE 01            [ 2]    3     ldw x,(1,x)
      002A86 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A8A                       3574 	_store_top ; overwrite addr 
      002A8A 90 F7            [ 1]    1     ld (y),a 
      002A8C 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A8F 72 CD 00 19      [ 6] 3575     call [ptr16]
      002A93 81               [ 4] 3576 	ret 
                                   3577 
                                   3578 
                                   3579 ;------------------------------
                                   3580 ; BASIC: BYE 
                                   3581 ; halt mcu in its lowest power mode 
                                   3582 ; wait for reset or external interrupt
                                   3583 ; do a cold start on wakeup.
                                   3584 ;------------------------------
      002A94                       3585 bye:
      002A94 72 0D 52 30 FB   [ 2] 3586 	btjf UART1_SR,#UART_SR_TC,.
      002A99 8E               [10] 3587 	halt
      002A9A CC 00 B5         [ 2] 3588 	jp cold_start  
                                   3589 
                                   3590 ;----------------------------------
                                   3591 ; BASIC: SLEEP 
                                   3592 ; halt mcu until reset or external
                                   3593 ; interrupt.
                                   3594 ; Resume progam after SLEEP command
                                   3595 ;----------------------------------
      002A9D                       3596 sleep:
      002A9D 72 0D 52 30 FB   [ 2] 3597 	btjf UART1_SR,#UART_SR_TC,.
      002AA2 72 16 00 22      [ 1] 3598 	bset flags,#FSLEEP
      002AA6 8E               [10] 3599 	halt 
      002AA7 81               [ 4] 3600 	ret 
                                   3601 
                                   3602 ;-------------------------------
                                   3603 ; BASIC: PAUSE expr 
                                   3604 ; suspend execution for n msec.
                                   3605 ; input:
                                   3606 ;	none
                                   3607 ; output:
                                   3608 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3609 ;------------------------------
      002AA8                       3610 pause:
      002AA8 CD 1A A8         [ 4] 3611 	call expression
      002AAB A1 84            [ 1] 3612 	cp a,#TK_INTGR
      002AAD 27 03            [ 1] 3613 	jreq 1$ 
      002AAF CC 16 38         [ 2] 3614 	jp syntax_error
      002AB2                       3615 1$: _xpop 
      002AB2 90 F6            [ 1]    1     ld a,(y)
      002AB4 93               [ 1]    2     ldw x,y 
      002AB5 EE 01            [ 2]    3     ldw x,(1,x)
      002AB7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ABB                       3616 pause02:
      002ABB CF 00 12         [ 2] 3617 	ldw timer,x 
      002ABE CE 00 12         [ 2] 3618 1$: ldw x,timer 
      002AC1 5D               [ 2] 3619 	tnzw x 
      002AC2 27 03            [ 1] 3620 	jreq 2$
      002AC4 8F               [10] 3621 	wfi 
      002AC5 26 F7            [ 1] 3622 	jrne 1$
      002AC7                       3623 2$:	
      002AC7 81               [ 4] 3624 	ret 
                                   3625 
                                   3626 ;------------------------------
                                   3627 ; BASIC: AWU expr
                                   3628 ; halt mcu for 'expr' milliseconds
                                   3629 ; use Auto wakeup peripheral
                                   3630 ; all oscillators stopped except LSI
                                   3631 ; range: 1ms - 511ms
                                   3632 ; input:
                                   3633 ;  none
                                   3634 ; output:
                                   3635 ;  none:
                                   3636 ;------------------------------
      002AC8                       3637 awu:
      002AC8 CD 1A A8         [ 4] 3638   call expression
      002ACB A1 84            [ 1] 3639   cp a,#TK_INTGR
      002ACD 27 03            [ 1] 3640   jreq 1$
      002ACF CC 16 38         [ 2] 3641   jp syntax_error
      002AD2                       3642 1$: _xpop 
      002AD2 90 F6            [ 1]    1     ld a,(y)
      002AD4 93               [ 1]    2     ldw x,y 
      002AD5 EE 01            [ 2]    3     ldw x,(1,x)
      002AD7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ADB                       3643 awu02:
      002ADB A3 14 00         [ 2] 3644   cpw x,#5120
      002ADE 2B 0C            [ 1] 3645   jrmi 1$ 
      002AE0 35 0F 50 F2      [ 1] 3646   mov AWU_TBR,#15 
      002AE4 A6 1E            [ 1] 3647   ld a,#30
      002AE6 62               [ 2] 3648   div x,a
      002AE7 A6 10            [ 1] 3649   ld a,#16
      002AE9 62               [ 2] 3650   div x,a 
      002AEA 20 1E            [ 2] 3651   jra 4$
      002AEC                       3652 1$: 
      002AEC A3 08 00         [ 2] 3653   cpw x,#2048
      002AEF 2B 09            [ 1] 3654   jrmi 2$ 
      002AF1 35 0E 50 F2      [ 1] 3655   mov AWU_TBR,#14
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002AF5 A6 50            [ 1] 3656   ld a,#80
      002AF7 62               [ 2] 3657   div x,a 
      002AF8 20 10            [ 2] 3658   jra 4$   
      002AFA                       3659 2$:
      002AFA 35 07 50 F2      [ 1] 3660   mov AWU_TBR,#7
      002AFE                       3661 3$:  
                                   3662 ; while X > 64  divide by 2 and increment AWU_TBR 
      002AFE A3 00 40         [ 2] 3663   cpw x,#64 
      002B01 23 07            [ 2] 3664   jrule 4$ 
      002B03 72 5C 50 F2      [ 1] 3665   inc AWU_TBR 
      002B07 54               [ 2] 3666   srlw x 
      002B08 20 F4            [ 2] 3667   jra 3$ 
      002B0A                       3668 4$:
      002B0A 9F               [ 1] 3669   ld a, xl
      002B0B 4A               [ 1] 3670   dec a 
      002B0C 27 01            [ 1] 3671   jreq 5$
      002B0E 4A               [ 1] 3672   dec a 	
      002B0F                       3673 5$: 
      002B0F A4 3E            [ 1] 3674   and a,#0x3e 
      002B11 C7 50 F1         [ 1] 3675   ld AWU_APR,a 
      002B14 72 18 50 F0      [ 1] 3676   bset AWU_CSR,#AWU_CSR_AWUEN
      002B18 8E               [10] 3677   halt 
                                   3678 
      002B19 81               [ 4] 3679   ret 
                                   3680 
                                   3681 ;------------------------------
                                   3682 ; BASIC: TICKS
                                   3683 ; return msec ticks counter value 
                                   3684 ; input:
                                   3685 ; 	none 
                                   3686 ; output:
                                   3687 ;	X 		TK_INTGR
                                   3688 ;-------------------------------
      002B1A                       3689 get_ticks:
      002B1A C6 00 0F         [ 1] 3690 	ld a,ticks 
      002B1D CE 00 10         [ 2] 3691 	ldw x,ticks+1 
      002B20 81               [ 4] 3692 	ret 
                                   3693 
                                   3694 ;------------------------------
                                   3695 ; BASIC: ABS(expr)
                                   3696 ; return absolute value of expr.
                                   3697 ; input:
                                   3698 ;   none
                                   3699 ; output:
                                   3700 ;   xstack    positive int24 
                                   3701 ;-------------------------------
      002B21                       3702 abs:
      002B21 CD 19 5F         [ 4] 3703 	call func_args 
      002B24 A1 01            [ 1] 3704 	cp a,#1 
      002B26 27 03            [ 1] 3705 	jreq 0$ 
      002B28 CC 16 38         [ 2] 3706 	jp syntax_error
      002B2B                       3707 0$:  
      002B2B CD 01 E3         [ 4] 3708 	call abs24 
      002B2E                       3709 	_xpop 
      002B2E 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002B30 93               [ 1]    2     ldw x,y 
      002B31 EE 01            [ 2]    3     ldw x,(1,x)
      002B33 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B37 81               [ 4] 3710 	ret 
                                   3711 
                                   3712 ;------------------------------
                                   3713 ; BASIC: LSHIFT(expr1,expr2)
                                   3714 ; logical shift left expr1 by 
                                   3715 ; expr2 bits 
                                   3716 ; output:
                                   3717 ; 	A:x 	result 
                                   3718 ;------------------------------
      002B38                       3719 lshift:
      002B38 CD 19 5F         [ 4] 3720 	call func_args
      002B3B A1 02            [ 1] 3721 	cp a,#2 
      002B3D 27 03            [ 1] 3722 	jreq 1$
      002B3F CC 16 38         [ 2] 3723 	jp syntax_error
      002B42                       3724 1$: _xpop 
      002B42 90 F6            [ 1]    1     ld a,(y)
      002B44 93               [ 1]    2     ldw x,y 
      002B45 EE 01            [ 2]    3     ldw x,(1,x)
      002B47 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B4B 9F               [ 1] 3725 	ld a,xl 
      002B4C 88               [ 1] 3726 	push a      
      002B4D                       3727 	_xpop  ; T>A:X 
      002B4D 90 F6            [ 1]    1     ld a,(y)
      002B4F 93               [ 1]    2     ldw x,y 
      002B50 EE 01            [ 2]    3     ldw x,(1,x)
      002B52 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B56 0D 01            [ 1] 3728 	tnz (1,sp) 
      002B58 27 07            [ 1] 3729 	jreq 4$
      002B5A 98               [ 1] 3730 2$:	rcf 
      002B5B 59               [ 2] 3731 	rlcw x 
      002B5C 49               [ 1] 3732 	rlc a 
      002B5D 0A 01            [ 1] 3733 	dec (1,sp) 
      002B5F 26 F9            [ 1] 3734 	jrne 2$
      002B61                       3735 4$: _drop 1 
      002B61 5B 01            [ 2]    1     addw sp,#1 
      002B63 81               [ 4] 3736 	ret
                                   3737 
                                   3738 ;------------------------------
                                   3739 ; BASIC: RSHIFT(expr1,expr2)
                                   3740 ; logical shift right expr1 by 
                                   3741 ; expr2 bits.
                                   3742 ; output:
                                   3743 ; 	A 		TK_INTGR
                                   3744 ;   X 		result 
                                   3745 ;------------------------------
      002B64                       3746 rshift:
      002B64 CD 19 5F         [ 4] 3747 	call func_args
      002B67 A1 02            [ 1] 3748 	cp a,#2 
      002B69 27 03            [ 1] 3749 	jreq 1$
      002B6B CC 16 38         [ 2] 3750 	jp syntax_error
      002B6E                       3751 1$: _xpop ; T>A:X
      002B6E 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002B70 93               [ 1]    2     ldw x,y 
      002B71 EE 01            [ 2]    3     ldw x,(1,x)
      002B73 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B77 9F               [ 1] 3752     ld a,xl 
      002B78 88               [ 1] 3753 	push a    
      002B79                       3754 	_xpop  
      002B79 90 F6            [ 1]    1     ld a,(y)
      002B7B 93               [ 1]    2     ldw x,y 
      002B7C EE 01            [ 2]    3     ldw x,(1,x)
      002B7E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B82 0D 01            [ 1] 3755 	tnz (1,sp)
      002B84 27 07            [ 1] 3756 	jreq 4$
      002B86 98               [ 1] 3757 2$:	rcf 
      002B87 46               [ 1] 3758 	rrc a 
      002B88 56               [ 2] 3759 	rrcw x 
      002B89 0A 01            [ 1] 3760 	dec (1,sp) 
      002B8B 26 F9            [ 1] 3761 	jrne 2$
      002B8D                       3762 4$: _drop 1 
      002B8D 5B 01            [ 2]    1     addw sp,#1 
      002B8F 81               [ 4] 3763 	ret
                                   3764 
                                   3765 ;--------------------------
                                   3766 ; BASIC: FCPU integer
                                   3767 ; set CPU frequency 
                                   3768 ;-------------------------- 
                                   3769 
      002B90                       3770 fcpu:
      002B90 A6 84            [ 1] 3771 	ld a,#TK_INTGR
      002B92 CD 19 52         [ 4] 3772 	call expect 
      002B95 CD 17 CE         [ 4] 3773 	call get_int24 
      002B98 9F               [ 1] 3774 	ld a,xl 
      002B99 A4 07            [ 1] 3775 	and a,#7 
      002B9B C7 50 C6         [ 1] 3776 	ld CLK_CKDIVR,a 
      002B9E 81               [ 4] 3777 	ret 
                                   3778 
                                   3779 ;------------------------------
                                   3780 ; BASIC: PMODE pin#, mode 
                                   3781 ; Arduino pin. 
                                   3782 ; define pin as input or output
                                   3783 ; pin#: {0..15}
                                   3784 ; mode: INPUT|OUTPUT  
                                   3785 ;------------------------------
                           000001  3786 	PINNO=1
                           000001  3787 	VSIZE=1
      002B9F                       3788 pin_mode:
      002B9F                       3789 	_vars VSIZE 
      002B9F 52 01            [ 2]    1     sub sp,#VSIZE 
      002BA1 CD 19 64         [ 4] 3790 	call arg_list 
      002BA4 A1 02            [ 1] 3791 	cp a,#2 
      002BA6 27 03            [ 1] 3792 	jreq 1$
      002BA8 CC 16 38         [ 2] 3793 	jp syntax_error 
      002BAB                       3794 1$: _xpop 
      002BAB 90 F6            [ 1]    1     ld a,(y)
      002BAD 93               [ 1]    2     ldw x,y 
      002BAE EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002BB0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BB4 CF 00 19         [ 2] 3795 	ldw ptr16,x ; mode 
      002BB7                       3796 	_xpop ; Dx pin 
      002BB7 90 F6            [ 1]    1     ld a,(y)
      002BB9 93               [ 1]    2     ldw x,y 
      002BBA EE 01            [ 2]    3     ldw x,(1,x)
      002BBC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BC0 CD 2B FE         [ 4] 3797 	call select_pin 
      002BC3 6B 01            [ 1] 3798 	ld (PINNO,sp),a  
      002BC5 A6 01            [ 1] 3799 	ld a,#1 
      002BC7 0D 01            [ 1] 3800 	tnz (PINNO,sp)
      002BC9 27 0D            [ 1] 3801 	jreq 4$
      002BCB 48               [ 1] 3802 2$:	sll a 
      002BCC 0A 01            [ 1] 3803 	dec (PINNO,sp)
      002BCE 26 FB            [ 1] 3804 	jrne 2$ 
      002BD0 6B 01            [ 1] 3805 	ld (PINNO,sp),a
      002BD2 7B 01            [ 1] 3806 	ld a,(PINNO,sp)
      002BD4 EA 03            [ 1] 3807 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002BD6 E7 03            [ 1] 3808 	ld (GPIO_CR1,x),a 
      002BD8 A6 01            [ 1] 3809 4$:	ld a,#OUTP
      002BDA C1 00 0E         [ 1] 3810 	cp a,acc8 
      002BDD 27 10            [ 1] 3811 	jreq 6$
                                   3812 ; input mode
                                   3813 ; disable external interrupt 
      002BDF 7B 01            [ 1] 3814 	ld a,(PINNO,sp)
      002BE1 43               [ 1] 3815 	cpl a 
      002BE2 E4 04            [ 1] 3816 	and a,(GPIO_CR2,x)
      002BE4 E7 04            [ 1] 3817 	ld (GPIO_CR2,x),a 
                                   3818 ;clear bit in DDR for input mode 
      002BE6 7B 01            [ 1] 3819 	ld a,(PINNO,sp)
      002BE8 43               [ 1] 3820 	cpl a 
      002BE9 E4 02            [ 1] 3821 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002BEB E7 02            [ 1] 3822 	ld (GPIO_DDR,x),a 
      002BED 20 0C            [ 2] 3823 	jra 9$
      002BEF                       3824 6$: ;output mode  
      002BEF 7B 01            [ 1] 3825 	ld a,(PINNO,sp)
      002BF1 EA 02            [ 1] 3826 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002BF3 E7 02            [ 1] 3827 	ld (GPIO_DDR,x),a 
      002BF5 7B 01            [ 1] 3828 	ld a,(PINNO,sp)
      002BF7 EA 04            [ 1] 3829 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002BF9 E7 04            [ 1] 3830 	ld (GPIO_CR2,x),a 
      002BFB                       3831 9$:	
      002BFB                       3832 	_drop VSIZE 
      002BFB 5B 01            [ 2]    1     addw sp,#VSIZE 
      002BFD 81               [ 4] 3833 	ret
                                   3834 
                                   3835 ;------------------------
                                   3836 ; select Arduino pin 
                                   3837 ; input:
                                   3838 ;   X 	 {0..15} Arduino Dx 
                                   3839 ; output:
                                   3840 ;   A     stm8s208 pin 
                                   3841 ;   X     base address s208 GPIO port 
                                   3842 ;---------------------------
      002BFE                       3843 select_pin:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002BFE 58               [ 2] 3844 	sllw x 
      002BFF 1C 2C 0E         [ 2] 3845 	addw x,#arduino_to_8s208 
      002C02 FE               [ 2] 3846 	ldw x,(x)
      002C03 9F               [ 1] 3847 	ld a,xl 
      002C04 88               [ 1] 3848 	push a 
      002C05 5E               [ 1] 3849 	swapw x 
      002C06 A6 05            [ 1] 3850 	ld a,#5 
      002C08 42               [ 4] 3851 	mul x,a 
      002C09 1C 50 00         [ 2] 3852 	addw x,#GPIO_BASE 
      002C0C 84               [ 1] 3853 	pop a 
      002C0D 81               [ 4] 3854 	ret 
                                   3855 ; translation from Arduino D0..D15 to stm8s208rb 
      002C0E                       3856 arduino_to_8s208:
      002C0E 03 06                 3857 .byte 3,6 ; D0 
      002C10 03 05                 3858 .byte 3,5 ; D1 
      002C12 04 00                 3859 .byte 4,0 ; D2 
      002C14 02 01                 3860 .byte 2,1 ; D3
      002C16 06 00                 3861 .byte 6,0 ; D4
      002C18 02 02                 3862 .byte 2,2 ; D5
      002C1A 02 03                 3863 .byte 2,3 ; D6
      002C1C 03 01                 3864 .byte 3,1 ; D7
      002C1E 03 03                 3865 .byte 3,3 ; D8
      002C20 02 04                 3866 .byte 2,4 ; D9
      002C22 04 05                 3867 .byte 4,5 ; D10
      002C24 02 06                 3868 .byte 2,6 ; D11
      002C26 02 07                 3869 .byte 2,7 ; D12
      002C28 02 05                 3870 .byte 2,5 ; D13
      002C2A 04 02                 3871 .byte 4,2 ; D14
      002C2C 04 01                 3872 .byte 4,1 ; D15
                                   3873 
                                   3874 
                                   3875 ;------------------------------
                                   3876 ; BASIC: RND(expr)
                                   3877 ; return random number 
                                   3878 ; between 1 and expr inclusive
                                   3879 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3880 ; input:
                                   3881 ; 	none 
                                   3882 ; output:
                                   3883 ;	xstack 	random positive integer 
                                   3884 ;------------------------------
      002C2E                       3885 random:
      002C2E CD 19 5F         [ 4] 3886 	call func_args 
      002C31 A1 01            [ 1] 3887 	cp a,#1
      002C33 27 03            [ 1] 3888 	jreq 1$
      002C35 CC 16 38         [ 2] 3889 	jp syntax_error
      002C38                       3890 1$:  
      002C38                       3891 	_xpop   
      002C38 90 F6            [ 1]    1     ld a,(y)
      002C3A 93               [ 1]    2     ldw x,y 
      002C3B EE 01            [ 2]    3     ldw x,(1,x)
      002C3D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C41 89               [ 2] 3892 	pushw x 
      002C42 88               [ 1] 3893 	push a  
      002C43 A6 80            [ 1] 3894 	ld a,#0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002C45 15 01            [ 1] 3895 	bcp a,(1,sp)
      002C47 27 05            [ 1] 3896 	jreq 2$
      002C49 A6 0A            [ 1] 3897 	ld a,#ERR_BAD_VALUE
      002C4B CC 16 3A         [ 2] 3898 	jp tb_error
      002C4E                       3899 2$: 
                                   3900 ; acc16=(x<<5)^x 
      002C4E CE 00 14         [ 2] 3901 	ldw x,seedx 
      002C51 58               [ 2] 3902 	sllw x 
      002C52 58               [ 2] 3903 	sllw x 
      002C53 58               [ 2] 3904 	sllw x 
      002C54 58               [ 2] 3905 	sllw x 
      002C55 58               [ 2] 3906 	sllw x 
      002C56 9E               [ 1] 3907 	ld a,xh 
      002C57 C8 00 14         [ 1] 3908 	xor a,seedx 
      002C5A C7 00 0D         [ 1] 3909 	ld acc16,a 
      002C5D 9F               [ 1] 3910 	ld a,xl 
      002C5E C8 00 15         [ 1] 3911 	xor a,seedx+1 
      002C61 C7 00 0E         [ 1] 3912 	ld acc8,a 
                                   3913 ; seedx=seedy 
      002C64 CE 00 16         [ 2] 3914 	ldw x,seedy 
      002C67 CF 00 14         [ 2] 3915 	ldw seedx,x  
                                   3916 ; seedy=seedy^(seedy>>1)
      002C6A CE 00 16         [ 2] 3917 	ldw x,seedy 
      002C6D 54               [ 2] 3918 	srlw x 
      002C6E 9E               [ 1] 3919 	ld a,xh 
      002C6F C8 00 16         [ 1] 3920 	xor a,seedy 
      002C72 C7 00 16         [ 1] 3921 	ld seedy,a  
      002C75 9F               [ 1] 3922 	ld a,xl 
      002C76 C8 00 17         [ 1] 3923 	xor a,seedy+1 
      002C79 C7 00 17         [ 1] 3924 	ld seedy+1,a 
                                   3925 ; acc16>>3 
      002C7C CE 00 0D         [ 2] 3926 	ldw x,acc16 
      002C7F 54               [ 2] 3927 	srlw x 
      002C80 54               [ 2] 3928 	srlw x 
      002C81 54               [ 2] 3929 	srlw x 
                                   3930 ; x=acc16^x 
      002C82 9E               [ 1] 3931 	ld a,xh 
      002C83 C8 00 0D         [ 1] 3932 	xor a,acc16 
      002C86 C7 00 0D         [ 1] 3933 	ld acc16,a 
      002C89 9F               [ 1] 3934 	ld a,xl 
      002C8A C8 00 0E         [ 1] 3935 	xor a,acc8 
      002C8D C7 00 0E         [ 1] 3936 	ld acc8,a 
                                   3937 ; seedy=acc16^seedy 
      002C90 C8 00 17         [ 1] 3938 	xor a,seedy+1
      002C93 97               [ 1] 3939 	ld xl,a 
      002C94 C6 00 0D         [ 1] 3940 	ld a,acc16 
      002C97 C8 00 16         [ 1] 3941 	xor a,seedy
      002C9A 95               [ 1] 3942 	ld xh,a 
      002C9B CF 00 16         [ 2] 3943 	ldw seedy,x 
                                   3944 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002C9E C6 00 15         [ 1] 3945 	ld a,seedx+1
      002CA1 A4 7F            [ 1] 3946 	and a,#127
      002CA3                       3947 	_xpush 
      002CA3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002CA7 90 F7            [ 1]    2     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002CA9 90 EF 01         [ 2]    3     ldw (1,y),x 
      002CAC 84               [ 1] 3948 	pop a 
      002CAD 85               [ 2] 3949 	popw x 
      002CAE                       3950 	_xpush 
      002CAE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002CB2 90 F7            [ 1]    2     ld (y),a 
      002CB4 90 EF 01         [ 2]    3     ldw (1,y),x 
      002CB7 CD 03 91         [ 4] 3951 	call mod24 
      002CBA                       3952 	_xpop
      002CBA 90 F6            [ 1]    1     ld a,(y)
      002CBC 93               [ 1]    2     ldw x,y 
      002CBD EE 01            [ 2]    3     ldw x,(1,x)
      002CBF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CC3 1C 00 01         [ 2] 3953 	addw x,#1 
      002CC6 A9 00            [ 1] 3954 	adc a,#0  
      002CC8 81               [ 4] 3955 	ret 
                                   3956 
                                   3957 ;---------------------------------
                                   3958 ; BASIC: WORDS 
                                   3959 ; affiche la listes des mots du
                                   3960 ; dictionnaire ainsi que le nombre
                                   3961 ; de mots.
                                   3962 ;---------------------------------
                           000001  3963 	WLEN=1 ; word length
                           000002  3964 	LLEN=2 ; character sent to console
                           000003  3965 	WCNT=3 ; count words printed 
                           000003  3966 	VSIZE=3 
      002CC9                       3967 words:
      002CC9 90 89            [ 2] 3968 	pushw y
      002CCB                       3969 	_vars VSIZE
      002CCB 52 03            [ 2]    1     sub sp,#VSIZE 
      002CCD 0F 02            [ 1] 3970 	clr (LLEN,sp)
      002CCF 0F 03            [ 1] 3971 	clr (WCNT,sp)
      002CD1 90 AE 34 A6      [ 2] 3972 	ldw y,#kword_dict+2
      002CD5 93               [ 1] 3973 0$:	ldw x,y
      002CD6 F6               [ 1] 3974 	ld a,(x)
      002CD7 A4 0F            [ 1] 3975 	and a,#15 
      002CD9 6B 01            [ 1] 3976 	ld (WLEN,sp),a 
      002CDB 0C 03            [ 1] 3977 	inc (WCNT,sp)
      002CDD 5C               [ 1] 3978 1$:	incw x 
      002CDE F6               [ 1] 3979 	ld a,(x)
      002CDF CD 08 DD         [ 4] 3980 	call putc 
      002CE2 0C 02            [ 1] 3981 	inc (LLEN,sp)
      002CE4 0A 01            [ 1] 3982 	dec (WLEN,sp)
      002CE6 26 F5            [ 1] 3983 	jrne 1$
      002CE8 A6 46            [ 1] 3984 	ld a,#70
      002CEA 11 02            [ 1] 3985 	cp a,(LLEN,sp)
      002CEC 2B 09            [ 1] 3986 	jrmi 2$   
      002CEE A6 20            [ 1] 3987 	ld a,#SPACE 
      002CF0 CD 08 DD         [ 4] 3988 	call putc 
      002CF3 0C 02            [ 1] 3989 	inc (LLEN,sp) 
      002CF5 20 07            [ 2] 3990 	jra 3$
      002CF7 A6 0D            [ 1] 3991 2$: ld a,#CR 
      002CF9 CD 08 DD         [ 4] 3992 	call putc 
      002CFC 0F 02            [ 1] 3993 	clr (LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002CFE 72 A2 00 02      [ 2] 3994 3$:	subw y,#2 
      002D02 90 FE            [ 2] 3995 	ldw y,(y)
      002D04 26 CF            [ 1] 3996 	jrne 0$ 
      002D06 A6 0D            [ 1] 3997 	ld a,#CR 
      002D08 CD 08 DD         [ 4] 3998 	call putc  
      002D0B 5F               [ 1] 3999 	clrw x 
      002D0C 7B 03            [ 1] 4000 	ld a,(WCNT,sp)
      002D0E 97               [ 1] 4001 	ld xl,a 
      002D0F CD 17 E4         [ 4] 4002 	call prt_i16 
      002D12 AE 2D 1D         [ 2] 4003 	ldw x,#words_count_msg
      002D15 CD 09 3A         [ 4] 4004 	call puts 
      002D18                       4005 	_drop VSIZE 
      002D18 5B 03            [ 2]    1     addw sp,#VSIZE 
      002D1A 90 85            [ 2] 4006 	popw y 
      002D1C 81               [ 4] 4007 	ret 
      002D1D 20 77 6F 72 64 73 20  4008 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4009 
                                   4010 
                                   4011 ;-----------------------------
                                   4012 ; BASIC: TIMER expr 
                                   4013 ; initialize count down timer 
                                   4014 ;-----------------------------
      002D33                       4015 set_timer:
      002D33 CD 19 64         [ 4] 4016 	call arg_list
      002D36 A1 01            [ 1] 4017 	cp a,#1 
      002D38 27 03            [ 1] 4018 	jreq 1$
      002D3A CC 16 38         [ 2] 4019 	jp syntax_error
      002D3D                       4020 1$: 
      002D3D                       4021 	_xpop  
      002D3D 90 F6            [ 1]    1     ld a,(y)
      002D3F 93               [ 1]    2     ldw x,y 
      002D40 EE 01            [ 2]    3     ldw x,(1,x)
      002D42 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D46 CF 00 12         [ 2] 4022 	ldw timer,x 
      002D49 81               [ 4] 4023 	ret 
                                   4024 
                                   4025 ;------------------------------
                                   4026 ; BASIC: TIMEOUT 
                                   4027 ; return state of timer 
                                   4028 ; output:
                                   4029 ;   A:X     0 not timeout 
                                   4030 ;   A:X     -1 timeout 
                                   4031 ;------------------------------
      002D4A                       4032 timeout:
      002D4A 4F               [ 1] 4033 	clr a 
      002D4B CE 00 12         [ 2] 4034 	ldw x,timer 
      002D4E 27 02            [ 1] 4035 	jreq 1$
      002D50 5F               [ 1] 4036 	clrw x
      002D51 81               [ 4] 4037 	ret  
      002D52 43               [ 1] 4038 1$:	cpl a
      002D53 53               [ 2] 4039 	cplw x 
      002D54 81               [ 4] 4040 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   4041  	
                                   4042 
                                   4043 
                                   4044 
                                   4045 ;-----------------------------------
                                   4046 ; BASIC: IWDGEN expr1 
                                   4047 ; enable independant watchdog timer
                                   4048 ; expr1 is delay in multiple of 62.5µsec
                                   4049 ; expr1 -> {1..16383}
                                   4050 ;-----------------------------------
      002D55                       4051 enable_iwdg:
      002D55 CD 19 64         [ 4] 4052 	call arg_list
      002D58 A1 01            [ 1] 4053 	cp a,#1 
      002D5A 27 03            [ 1] 4054 	jreq 1$
      002D5C CC 16 38         [ 2] 4055 	jp syntax_error 
      002D5F                       4056 1$: _xpop  
      002D5F 90 F6            [ 1]    1     ld a,(y)
      002D61 93               [ 1]    2     ldw x,y 
      002D62 EE 01            [ 2]    3     ldw x,(1,x)
      002D64 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D68 4B 00            [ 1] 4057 	push #0
      002D6A 35 CC 50 E0      [ 1] 4058 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002D6E 9E               [ 1] 4059 	ld a,xh 
      002D6F A4 3F            [ 1] 4060 	and a,#0x3f
      002D71 95               [ 1] 4061 	ld xh,a  
      002D72 A3 00 FF         [ 2] 4062 2$:	cpw x,#255
      002D75 23 06            [ 2] 4063 	jrule 3$
      002D77 0C 01            [ 1] 4064 	inc (1,sp)
      002D79 98               [ 1] 4065 	rcf 
      002D7A 56               [ 2] 4066 	rrcw x 
      002D7B 20 F5            [ 2] 4067 	jra 2$
      002D7D 35 55 50 E0      [ 1] 4068 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D81 84               [ 1] 4069 	pop a  
      002D82 C7 50 E1         [ 1] 4070 	ld IWDG_PR,a 
      002D85 9F               [ 1] 4071 	ld a,xl
      002D86 4A               [ 1] 4072 	dec a 
      002D87 35 55 50 E0      [ 1] 4073 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002D8B C7 50 E2         [ 1] 4074 	ld IWDG_RLR,a 
      002D8E 35 AA 50 E0      [ 1] 4075 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D92 81               [ 4] 4076 	ret 
                                   4077 
                                   4078 
                                   4079 ;-----------------------------------
                                   4080 ; BASIC: IWDGREF  
                                   4081 ; refresh independant watchdog count down 
                                   4082 ; timer before it reset MCU. 
                                   4083 ;-----------------------------------
      002D93                       4084 refresh_iwdg:
      002D93 35 AA 50 E0      [ 1] 4085 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D97 81               [ 4] 4086 	ret 
                                   4087 
                                   4088 
                                   4089 ;-------------------------------------
                                   4090 ; BASIC: LOG2(expr)
                                   4091 ; return logarithm base 2 of expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



                                   4092 ; this is the position of most significant
                                   4093 ; bit set. 
                                   4094 ; input: 
                                   4095 ; output:
                                   4096 ;   A     TK_INTGR 
                                   4097 ;   xstack log2 
                                   4098 ;*********************************
      002D98                       4099 log2:
      002D98 CD 19 5F         [ 4] 4100 	call func_args 
      002D9B A1 01            [ 1] 4101 	cp a,#1 
      002D9D 27 03            [ 1] 4102 	jreq 1$
      002D9F CC 16 38         [ 2] 4103 	jp syntax_error 
      002DA2                       4104 1$: 
      002DA2                       4105 	_xpop    
      002DA2 90 F6            [ 1]    1     ld a,(y)
      002DA4 93               [ 1]    2     ldw x,y 
      002DA5 EE 01            [ 2]    3     ldw x,(1,x)
      002DA7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DAB 4D               [ 1] 4106 	tnz a
      002DAC 26 08            [ 1] 4107 	jrne 2$ 
      002DAE 5D               [ 2] 4108 	tnzw x 
      002DAF 26 05            [ 1] 4109 	jrne 2$
      002DB1 A6 0A            [ 1] 4110 	ld a,#ERR_BAD_VALUE
      002DB3 CC 16 3A         [ 2] 4111 	jp tb_error 
      002DB6 4B 18            [ 1] 4112 2$: push #24 
      002DB8 59               [ 2] 4113 3$: rlcw x 
      002DB9 49               [ 1] 4114     rlc a 
      002DBA 25 04            [ 1] 4115 	jrc 4$
      002DBC 0A 01            [ 1] 4116 	dec (1,sp) 
      002DBE 26 F8            [ 1] 4117 	jrne 3$
      002DC0 5F               [ 1] 4118 4$: clrw x 
      002DC1 84               [ 1] 4119     pop a 
      002DC2 4A               [ 1] 4120 	dec a
      002DC3 02               [ 1] 4121 	rlwa x  
      002DC4                       4122 9$:	
      002DC4 81               [ 4] 4123 	ret 
                                   4124 
                                   4125 ;-----------------------------------
                                   4126 ; BASIC: BIT(expr) 
                                   4127 ; expr ->{0..23}
                                   4128 ; return 2^expr 
                                   4129 ; output:
                                   4130 ;    A:X    2^expr 
                                   4131 ;-----------------------------------
      002DC5                       4132 bitmask:
      002DC5 CD 19 5F         [ 4] 4133     call func_args 
      002DC8 A1 01            [ 1] 4134 	cp a,#1
      002DCA 27 03            [ 1] 4135 	jreq 1$
      002DCC CC 16 38         [ 2] 4136 	jp syntax_error 
      002DCF                       4137 1$: _xpop 
      002DCF 90 F6            [ 1]    1     ld a,(y)
      002DD1 93               [ 1]    2     ldw x,y 
      002DD2 EE 01            [ 2]    3     ldw x,(1,x)
      002DD4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DD8 9F               [ 1] 4138 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002DD9 AE 00 01         [ 2] 4139 	ldw x,#1 
      002DDC A4 17            [ 1] 4140 	and a,#23
      002DDE 27 0A            [ 1] 4141 	jreq 9$
      002DE0 88               [ 1] 4142 	push a 
      002DE1 4F               [ 1] 4143 	clr a 
      002DE2                       4144 2$: 
      002DE2 58               [ 2] 4145 	slaw x 
      002DE3 49               [ 1] 4146 	rlc a 	
      002DE4 0A 01            [ 1] 4147 	dec (1,sp)
      002DE6 26 FA            [ 1] 4148 	jrne 2$ 
      002DE8                       4149 4$:
      002DE8                       4150     _drop 1 
      002DE8 5B 01            [ 2]    1     addw sp,#1 
      002DEA 81               [ 4] 4151 9$:	ret 
                                   4152 
                                   4153 ;------------------------------
                                   4154 ; BASIC: DO 
                                   4155 ; initiate a DO ... UNTIL loop 
                                   4156 ;------------------------------
                           000003  4157 	DOLP_ADR=3 
                           000005  4158 	DOLP_INW=5
                           000004  4159 	VSIZE=4 
      002DEB                       4160 do_loop:
      002DEB 85               [ 2] 4161 	popw x 
      002DEC                       4162 	_vars VSIZE 
      002DEC 52 04            [ 2]    1     sub sp,#VSIZE 
      002DEE 89               [ 2] 4163 	pushw x 
      002DEF CE 00 04         [ 2] 4164 	ldw x,basicptr 
      002DF2 1F 03            [ 2] 4165 	ldw (DOLP_ADR,sp),x
      002DF4 CE 00 00         [ 2] 4166 	ldw x,in.w 
      002DF7 1F 05            [ 2] 4167 	ldw (DOLP_INW,sp),x
      002DF9 72 5C 00 1F      [ 1] 4168 	inc loop_depth 
      002DFD 81               [ 4] 4169 	ret 
                                   4170 
                                   4171 ;--------------------------------
                                   4172 ; BASIC: UNTIL expr 
                                   4173 ; loop if exprssion is false 
                                   4174 ; else terminate loop
                                   4175 ;--------------------------------
      002DFE                       4176 until: 
      002DFE 72 5D 00 1F      [ 1] 4177 	tnz loop_depth 
      002E02 26 03            [ 1] 4178 	jrne 1$ 
      002E04 CC 16 38         [ 2] 4179 	jp syntax_error 
      002E07                       4180 1$: 
      002E07 CD 1B C1         [ 4] 4181 	call condition  
      002E0A                       4182 	_xpop 
      002E0A 90 F6            [ 1]    1     ld a,(y)
      002E0C 93               [ 1]    2     ldw x,y 
      002E0D EE 01            [ 2]    3     ldw x,(1,x)
      002E0F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E13 4D               [ 1] 4183 	tnz a 
      002E14 26 13            [ 1] 4184 	jrne 9$ 
      002E16 5D               [ 2] 4185 	tnzw x 
      002E17 26 10            [ 1] 4186 	jrne 9$ 
      002E19 1E 03            [ 2] 4187 	ldw x,(DOLP_ADR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002E1B CF 00 04         [ 2] 4188 	ldw basicptr,x 
      002E1E E6 02            [ 1] 4189 	ld a,(2,x)
      002E20 C7 00 03         [ 1] 4190 	ld count,a 
      002E23 1E 05            [ 2] 4191 	ldw x,(DOLP_INW,sp)
      002E25 CF 00 00         [ 2] 4192 	ldw in.w,x 
      002E28 81               [ 4] 4193 	ret 
      002E29                       4194 9$:	; remove loop data from stack  
      002E29 85               [ 2] 4195 	popw x
      002E2A                       4196 	_drop VSIZE
      002E2A 5B 04            [ 2]    1     addw sp,#VSIZE 
      002E2C 72 5A 00 1F      [ 1] 4197 	dec loop_depth 
      002E30 FC               [ 2] 4198 	jp (x)
                                   4199 
                                   4200 ;--------------------------
                                   4201 ; BASIC: PORTA...PORTI  
                                   4202 ;  return constant value 
                                   4203 ;  PORT  base address 
                                   4204 ;---------------------------
      002E31                       4205 const_porta:
      002E31 AE 50 00         [ 2] 4206 	ldw x,#PA_BASE 
      002E34 4F               [ 1] 4207 	clr a 
      002E35 81               [ 4] 4208 	ret 
      002E36                       4209 const_portb:
      002E36 AE 50 05         [ 2] 4210 	ldw x,#PB_BASE 
      002E39 4F               [ 1] 4211 	clr a 
      002E3A 81               [ 4] 4212 	ret 
      002E3B                       4213 const_portc:
      002E3B AE 50 0A         [ 2] 4214 	ldw x,#PC_BASE 
      002E3E 4F               [ 1] 4215 	clr a 
      002E3F 81               [ 4] 4216 	ret 
      002E40                       4217 const_portd:
      002E40 AE 50 0F         [ 2] 4218 	ldw x,#PD_BASE 
      002E43 4F               [ 1] 4219 	clr a 
      002E44 81               [ 4] 4220 	ret 
      002E45                       4221 const_porte:
      002E45 AE 50 14         [ 2] 4222 	ldw x,#PE_BASE 
      002E48 4F               [ 1] 4223 	clr a 
      002E49 81               [ 4] 4224 	ret 
      002E4A                       4225 const_portf:
      002E4A AE 50 19         [ 2] 4226 	ldw x,#PF_BASE 
      002E4D 4F               [ 1] 4227 	clr a 
      002E4E 81               [ 4] 4228 	ret 
      002E4F                       4229 const_portg:
      002E4F AE 50 1E         [ 2] 4230 	ldw x,#PG_BASE 
      002E52 4F               [ 1] 4231 	clr a 
      002E53 81               [ 4] 4232 	ret 
      002E54                       4233 const_porti:
      002E54 AE 50 28         [ 2] 4234 	ldw x,#PI_BASE 
      002E57 4F               [ 1] 4235 	clr a 
      002E58 81               [ 4] 4236 	ret 
                                   4237 
                                   4238 ;-------------------------------
                                   4239 ; following return constant 
                                   4240 ; related to GPIO register offset 
                                   4241 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002E59                       4242 const_odr:
      002E59 4F               [ 1] 4243 	clr a 
      002E5A AE 00 00         [ 2] 4244 	ldw x,#GPIO_ODR
      002E5D 81               [ 4] 4245 	ret 
      002E5E                       4246 const_idr:
      002E5E 4F               [ 1] 4247 	clr a 
      002E5F AE 00 01         [ 2] 4248 	ldw x,#GPIO_IDR
      002E62 81               [ 4] 4249 	ret 
      002E63                       4250 const_ddr:
      002E63 4F               [ 1] 4251 	clr a
      002E64 AE 00 02         [ 2] 4252 	ldw x,#GPIO_DDR
      002E67 81               [ 4] 4253 	ret 
      002E68                       4254 const_cr1:
      002E68 4F               [ 1] 4255 	clr a 
      002E69 AE 00 03         [ 2] 4256 	ldw x,#GPIO_CR1
      002E6C 81               [ 4] 4257 	ret 
      002E6D                       4258 const_cr2:
      002E6D 4F               [ 1] 4259 	clr a
      002E6E AE 00 04         [ 2] 4260 	ldw x,#GPIO_CR2
      002E71 81               [ 4] 4261 	ret 
                                   4262 ;-------------------------
                                   4263 ; BASIC: POUT 
                                   4264 ;  constant for port mode
                                   4265 ;  used by PMODE 
                                   4266 ;  to set pin as output
                                   4267 ;------------------------
      002E72                       4268 const_output:
      002E72 4F               [ 1] 4269 	clr a 
      002E73 AE 00 01         [ 2] 4270 	ldw x,#OUTP
      002E76 81               [ 4] 4271 	ret 
                                   4272 
                                   4273 ;-------------------------
                                   4274 ; BASIC: PINP 
                                   4275 ;  constant for port mode
                                   4276 ;  used by PMODE 
                                   4277 ;  to set pin as input
                                   4278 ;------------------------
      002E77                       4279 const_input:
      002E77 4F               [ 1] 4280 	clr a  
      002E78 AE 00 00         [ 2] 4281 	ldw x,#INP 
      002E7B 81               [ 4] 4282 	ret 
                                   4283 	
                                   4284 ;-----------------------
                                   4285 ; memory area constants
                                   4286 ;-----------------------
      002E7C                       4287 const_eeprom_base:
      002E7C 4F               [ 1] 4288 	clr a  
      002E7D AE 40 00         [ 2] 4289 	ldw x,#EEPROM_BASE 
      002E80 81               [ 4] 4290 	ret 
                                   4291 
                                   4292 ;---------------------------
                                   4293 ; BASIC: DATA 
                                   4294 ; when the interpreter find 
                                   4295 ; a DATA line it skip it.
                                   4296 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002E81                       4297 data:
      002E81 55 00 03 00 01   [ 1] 4298 	mov in,count 
      002E86 81               [ 4] 4299 	ret 
                                   4300 
                                   4301 ;------------------------------
                                   4302 ; check if it is a DATA line 
                                   4303 ; input: 
                                   4304 ;    X    line address 
                                   4305 ; output:
                                   4306 ;    Z    set if DATA line 
                                   4307 ;----------------------------
      002E87                       4308 is_data_line:
      002E87 89               [ 2] 4309 	pushw x 
      002E88 E6 03            [ 1] 4310 	ld a,(3,x)
      002E8A A1 80            [ 1] 4311 	cp a,#TK_CMD 
      002E8C 26 05            [ 1] 4312 	jrne 9$
      002E8E EE 04            [ 2] 4313 	ldw x,(4,x)
      002E90 A3 2E 81         [ 2] 4314 	cpw x,#data  
      002E93 85               [ 2] 4315 9$: popw x 
      002E94 81               [ 4] 4316 	ret 
                                   4317 
                                   4318 ;---------------------------------
                                   4319 ; BASIC: RESTORE [line#]
                                   4320 ; set data_ptr to first data line
                                   4321 ; if no DATA found pointer set to
                                   4322 ; zero.
                                   4323 ; if a line# is given as argument 
                                   4324 ; a data line with that number 
                                   4325 ; is searched and the data pointer 
                                   4326 ; is set to it. If there is no 
                                   4327 ; data line with that number 
                                   4328 ; the program is interrupted. 
                                   4329 ;---------------------------------
      002E95                       4330 restore:
      002E95 5F               [ 1] 4331 	clrw x 
      002E96 CF 00 06         [ 2] 4332 	ldw data_ptr,x 
      002E99 CF 00 08         [ 2] 4333 	ldw data_ofs,x 
      002E9C CE 00 1B         [ 2] 4334 	ldw x,txtbgn 
      002E9F CD 17 9C         [ 4] 4335 	call next_token 
      002EA2 A1 84            [ 1] 4336 	cp a,#TK_INTGR
      002EA4 26 10            [ 1] 4337 	jrne 0$
      002EA6 CD 17 CE         [ 4] 4338 	call get_int24
      002EA9 90 89            [ 2] 4339 	pushw y 
      002EAB 4F               [ 1] 4340 	clr a 
      002EAC CD 0C 17         [ 4] 4341 	call search_lineno  
      002EAF 90 85            [ 2] 4342 	popw y 
      002EB1 5D               [ 2] 4343 	tnzw x 
      002EB2 26 17            [ 1] 4344 	jrne set_data_pointer 
      002EB4 20 44            [ 2] 4345 	jra data_error 
      002EB6                       4346 0$:
      002EB6                       4347 	_unget_token  
      002EB6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4348 ; search first DATA line 	
      002EBB C3 00 1D         [ 2] 4349 1$:	cpw x,txtend
      002EBE 24 3A            [ 1] 4350 	jruge data_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002EC0                       4351 2$:	
      002EC0 CD 2E 87         [ 4] 4352 	call is_data_line 
      002EC3 26 00            [ 1] 4353 	jrne 4$
      002EC5 CD 2E D8         [ 4] 4354 4$:	call try_next_line 
      002EC8 26 FB            [ 1] 4355 	jrne 4$ 
      002ECA 81               [ 4] 4356 	ret 
                                   4357 
                                   4358 ;---------------------
                                   4359 ; set data pointer 
                                   4360 ; variables at new line 
                                   4361 ; input:
                                   4362 ;    X    line address 
                                   4363 ;----------------------
      002ECB                       4364 set_data_pointer:
      002ECB CF 00 06         [ 2] 4365 	ldw data_ptr,x
      002ECE E6 02            [ 1] 4366 	ld a,(2,x)
      002ED0 C7 00 09         [ 1] 4367 	ld data_len,a 
      002ED3 35 06 00 08      [ 1] 4368 	mov data_ofs,#FIRST_DATA_ITEM
      002ED7 81               [ 4] 4369 	ret 
                                   4370 
                                   4371 
                                   4372 ;--------------------
                                   4373 ; at end of data line 
                                   4374 ; check if next line 
                                   4375 ; is a data line 
                                   4376 ; input:
                                   4377 ;    X   actual line address 
                                   4378 ;  
                                   4379 ;-------------------
      002ED8                       4380 try_next_line: 
      002ED8 E6 02            [ 1] 4381 	ld a,(2,x)
      002EDA C7 00 0E         [ 1] 4382 	ld acc8,a 
      002EDD 72 5F 00 0D      [ 1] 4383 	clr acc16 
      002EE1 72 BB 00 0D      [ 2] 4384 	addw x,acc16 
      002EE5 C3 00 1D         [ 2] 4385 	cpw x,txtend 
      002EE8 25 02            [ 1] 4386 	jrult 1$
      002EEA 20 0E            [ 2] 4387 	jra data_error 
      002EEC                       4388 1$:	
      002EEC CD 2E 87         [ 4] 4389 	call is_data_line 
      002EEF 27 04            [ 1] 4390 	jreq 2$
      002EF1 A6 01            [ 1] 4391 	ld a,#1  
      002EF3 20 04            [ 2] 4392 	jra 9$
      002EF5 CD 2E CB         [ 4] 4393 2$:	call set_data_pointer
      002EF8 4F               [ 1] 4394 	clr a  
      002EF9 81               [ 4] 4395 9$:	ret 
      002EFA                       4396 data_error:	
      002EFA A6 0C            [ 1] 4397     ld a,#ERR_NO_DATA 
      002EFC CC 16 3A         [ 2] 4398 	jp tb_error 
                                   4399 
                                   4400 
                                   4401 ;---------------------------------
                                   4402 ; BASIC: READ 
                                   4403 ; return next data item | 0 
                                   4404 ;---------------------------------
                           000001  4405 	CTX_BPTR=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



                           000003  4406 	CTX_IN=3 
                           000004  4407 	CTX_COUNT=4 
                           000005  4408 	INT24=5
                           000007  4409 	VSIZE=7 
      002EFF                       4410 read:
      002EFF                       4411 	_vars  VSIZE 
      002EFF 52 07            [ 2]    1     sub sp,#VSIZE 
      002F01 CD 1F FC         [ 4] 4412 	call save_context
      002F04                       4413 read01:	
      002F04 C6 00 08         [ 1] 4414 	ld a,data_ofs
      002F07 C1 00 09         [ 1] 4415 	cp a,data_len 
      002F0A 27 37            [ 1] 4416 	jreq 2$ ; end of line  
      002F0C                       4417 0$:
      002F0C CE 00 06         [ 2] 4418 	ldw x,data_ptr 
      002F0F CF 00 04         [ 2] 4419 	ldw basicptr,x 
      002F12 55 00 08 00 01   [ 1] 4420 	mov in,data_ofs 
      002F17 55 00 09 00 03   [ 1] 4421 	mov count,data_len  
      002F1C CD 1A A8         [ 4] 4422 	call expression 
      002F1F A1 84            [ 1] 4423 	cp a,#TK_INTGR 
      002F21 27 03            [ 1] 4424 	jreq 1$ 
      002F23 CC 16 38         [ 2] 4425 	jp syntax_error 
      002F26                       4426 1$:
      002F26 CD 17 9C         [ 4] 4427 	call next_token ; skip comma
      002F29 CE 00 04         [ 2] 4428 	ldw x,basicptr 
      002F2C CF 00 06         [ 2] 4429 	ldw data_ptr,x 
      002F2F 55 00 01 00 08   [ 1] 4430 	mov data_ofs,in 
      002F34 CD 20 0C         [ 4] 4431 	call rest_context
      002F37                       4432 	_xpop 
      002F37 90 F6            [ 1]    1     ld a,(y)
      002F39 93               [ 1]    2     ldw x,y 
      002F3A EE 01            [ 2]    3     ldw x,(1,x)
      002F3C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F40                       4433 	_drop VSIZE 
      002F40 5B 07            [ 2]    1     addw sp,#VSIZE 
      002F42 81               [ 4] 4434 	ret 
      002F43                       4435 2$: ; end of line reached 
                                   4436 	; try next line 
      002F43 CE 00 06         [ 2] 4437 	ldw x,data_ptr  
      002F46 CD 2E D8         [ 4] 4438 	call try_next_line
      002F49 27 C1            [ 1] 4439 	jreq 0$ 
      002F4B 20 AD            [ 2] 4440 	jra data_error 
                                   4441 
                                   4442 ;---------------------------------
                                   4443 ; BASIC: SPIEN clkdiv, 0|1  
                                   4444 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4445 ; if clkdiv==-1 disable SPI
                                   4446 ; 0|1 -> disable|enable  
                                   4447 ;--------------------------------- 
                           000005  4448 SPI_CS_BIT=5
      002F4D                       4449 spi_enable:
      002F4D CD 19 64         [ 4] 4450 	call arg_list 
      002F50 A1 02            [ 1] 4451 	cp a,#2
      002F52 27 03            [ 1] 4452 	jreq 1$
      002F54 CC 16 38         [ 2] 4453 	jp syntax_error 
      002F57                       4454 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002F57 72 12 50 C7      [ 1] 4455 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002F5B 85               [ 2] 4456 	popw x  
      002F5C 5D               [ 2] 4457 	tnzw x 
      002F5D 27 21            [ 1] 4458 	jreq spi_disable 
      002F5F 85               [ 2] 4459 	popw x 
      002F60 A6 08            [ 1] 4460 	ld a,#(1<<SPI_CR1_BR)
      002F62 42               [ 4] 4461 	mul x,a 
      002F63 9F               [ 1] 4462 	ld a,xl 
      002F64 C7 52 00         [ 1] 4463 	ld SPI_CR1,a 
                                   4464 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002F67 72 1A 50 14      [ 1] 4465 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002F6B 72 1A 50 16      [ 1] 4466 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4467 ; configure SPI as master mode 0.	
      002F6F 72 14 52 00      [ 1] 4468 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4469 ; ~CS line controlled by sofware 	
      002F73 72 12 52 01      [ 1] 4470 	bset SPI_CR2,#SPI_CR2_SSM 
      002F77 72 10 52 01      [ 1] 4471     bset SPI_CR2,#SPI_CR2_SSI 
                                   4472 ; enable SPI
      002F7B 72 1C 52 00      [ 1] 4473 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F7F 81               [ 4] 4474 	ret 
      002F80                       4475 spi_disable:
      002F80                       4476 	_drop #2; throw first argument.
      002F80 5B 02            [ 2]    1     addw sp,##2 
                                   4477 ; wait spi idle 
      002F82 A6 82            [ 1] 4478 1$:	ld a,#0x82 
      002F84 C4 52 03         [ 1] 4479 	and a,SPI_SR
      002F87 A1 02            [ 1] 4480 	cp a,#2 
      002F89 26 F7            [ 1] 4481 	jrne 1$
      002F8B 72 1D 52 00      [ 1] 4482 	bres SPI_CR1,#SPI_CR1_SPE
      002F8F 72 13 50 C7      [ 1] 4483 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F93 72 1B 50 16      [ 1] 4484 	bres PE_DDR,#SPI_CS_BIT 
      002F97 81               [ 4] 4485 	ret 
                                   4486 
      002F98                       4487 spi_clear_error:
      002F98 A6 78            [ 1] 4488 	ld a,#0x78 
      002F9A C5 52 03         [ 1] 4489 	bcp a,SPI_SR 
      002F9D 27 04            [ 1] 4490 	jreq 1$
      002F9F 72 5F 52 03      [ 1] 4491 	clr SPI_SR 
      002FA3 81               [ 4] 4492 1$: ret 
                                   4493 
      002FA4                       4494 spi_send_byte:
      002FA4 88               [ 1] 4495 	push a 
      002FA5 CD 2F 98         [ 4] 4496 	call spi_clear_error
      002FA8 84               [ 1] 4497 	pop a 
      002FA9 72 03 52 03 FB   [ 2] 4498 	btjf SPI_SR,#SPI_SR_TXE,.
      002FAE C7 52 04         [ 1] 4499 	ld SPI_DR,a
      002FB1 72 01 52 03 FB   [ 2] 4500 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002FB6 C6 52 04         [ 1] 4501 	ld a,SPI_DR 
      002FB9 81               [ 4] 4502 	ret 
                                   4503 
      002FBA                       4504 spi_rcv_byte:
      002FBA A6 FF            [ 1] 4505 	ld a,#255
      002FBC 72 01 52 03 E3   [ 2] 4506 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002FC1 C6 52 04         [ 1] 4507 	ld a,SPI_DR 
      002FC4 81               [ 4] 4508 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                                   4509 
                                   4510 ;------------------------------
                                   4511 ; BASIC: SPIWR byte [,byte]
                                   4512 ; write 1 or more byte
                                   4513 ;------------------------------
      002FC5                       4514 spi_write:
      002FC5 CD 1A A8         [ 4] 4515 	call expression
      002FC8 A1 84            [ 1] 4516 	cp a,#TK_INTGR 
      002FCA 27 03            [ 1] 4517 	jreq 1$
      002FCC CC 16 38         [ 2] 4518 	jp syntax_error 
      002FCF                       4519 1$:	
      002FCF 9F               [ 1] 4520 	ld a,xl 
      002FD0 CD 2F A4         [ 4] 4521 	call spi_send_byte 
      002FD3 CD 17 9C         [ 4] 4522 	call next_token 
      002FD6 A1 08            [ 1] 4523 	cp a,#TK_COMMA 
      002FD8 26 02            [ 1] 4524 	jrne 2$ 
      002FDA 20 E9            [ 2] 4525 	jra spi_write 
      002FDC 4D               [ 1] 4526 2$:	tnz a 
      002FDD 27 05            [ 1] 4527 	jreq 3$
      002FDF                       4528 	_unget_token  
      002FDF 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002FE4 81               [ 4] 4529 3$:	ret 
                                   4530 
                                   4531 
                                   4532 ;-------------------------------
                                   4533 ; BASIC: SPIRD 	
                                   4534 ; read one byte from SPI 
                                   4535 ;-------------------------------
      002FE5                       4536 spi_read:
      002FE5 CD 2F BA         [ 4] 4537 	call spi_rcv_byte 
      002FE8 5F               [ 1] 4538 	clrw x 
      002FE9 97               [ 1] 4539 	ld xl,a 
      002FEA 4F               [ 1] 4540 	clr a  
      002FEB 81               [ 4] 4541 	ret 
                                   4542 
                                   4543 ;------------------------------
                                   4544 ; BASIC: SPISEL 0|1 
                                   4545 ; set state of ~CS line
                                   4546 ; 0|1 deselect|select  
                                   4547 ;------------------------------
      002FEC                       4548 spi_select:
      002FEC CD 17 9C         [ 4] 4549 	call next_token 
      002FEF A1 84            [ 1] 4550 	cp a,#TK_INTGR 
      002FF1 27 03            [ 1] 4551 	jreq 1$
      002FF3 CC 16 38         [ 2] 4552 	jp syntax_error 
      002FF6 5D               [ 2] 4553 1$: tnzw x  
      002FF7 27 05            [ 1] 4554 	jreq cs_high 
      002FF9 72 1B 50 14      [ 1] 4555 	bres PE_ODR,#SPI_CS_BIT
      002FFD 81               [ 4] 4556 	ret 
      002FFE                       4557 cs_high: 
      002FFE 72 1A 50 14      [ 1] 4558 	bset PE_ODR,#SPI_CS_BIT
      003002 81               [ 4] 4559 	ret 
                                   4560 
                                   4561 ;-------------------------------
                                   4562 ; BASIC: PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



                                   4563 ; Return pad buffer address.
                                   4564 ;------------------------------
      003003                       4565 pad_ref:
      003003 AE 16 E0         [ 2] 4566 	ldw x,#pad 
      003006 4F               [ 1] 4567 	clr a
      003007 81               [ 4] 4568 	ret 
                                   4569 
                                   4570 ;****************************
                                   4571 ; expression stack 
                                   4572 ; manipulation routines
                                   4573 ;****************************
                                   4574 
                                   4575 ;-----------------------------
                                   4576 ; BASIC: PUSH expr|rel|cond 
                                   4577 ; push the result on xtack
                                   4578 ;-----------------------------
      003008                       4579 xpush:
      003008 CD 1B C1         [ 4] 4580 	call condition 
      00300B 81               [ 4] 4581 	ret 
                                   4582 
                                   4583 ;------------------------------
                                   4584 ; BASIC: POP 
                                   4585 ; pop top of xstack 
                                   4586 ;------------------------------
      00300C                       4587 xpop:
      00300C                       4588 	_xpop 
      00300C 90 F6            [ 1]    1     ld a,(y)
      00300E 93               [ 1]    2     ldw x,y 
      00300F EE 01            [ 2]    3     ldw x,(1,x)
      003011 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003015 81               [ 4] 4589 	ret 
                                   4590 
                                   4591 
                                   4592 ;------------------------------
                                   4593 ; BASIC: ALLOC expr 
                                   4594 ; allocate expr element on xtack 
                                   4595 ;-------------------------------
      003016                       4596 xalloc: 
      003016 CD 1A A8         [ 4] 4597 	call expression 
      003019 A1 84            [ 1] 4598 	cp a,#TK_INTGR
      00301B 27 03            [ 1] 4599 	jreq 1$ 
      00301D CC 16 38         [ 2] 4600 	jp syntax_error
      003020                       4601 1$: _xpop 
      003020 90 F6            [ 1]    1     ld a,(y)
      003022 93               [ 1]    2     ldw x,y 
      003023 EE 01            [ 2]    3     ldw x,(1,x)
      003025 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003029 4D               [ 1] 4602 	tnz a 
      00302A 27 05            [ 1] 4603 	jreq 3$ 
      00302C A6 0A            [ 1] 4604 2$:	ld a,#ERR_BAD_VALUE
      00302E CC 16 3A         [ 2] 4605 	jp tb_error 
      003031 A3 00 14         [ 2] 4606 3$: cpw x,#XSTACK_SIZE 
      003034 22 F6            [ 1] 4607 	jrugt 2$
      003036 A6 03            [ 1] 4608 	ld a,#CELL_SIZE 
      003038 42               [ 4] 4609 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      003039 CF 00 0D         [ 2] 4610 	ldw acc16,x 
      00303C 72 B2 00 0D      [ 2] 4611 	subw y,acc16 
      003040 90 A3 17 60      [ 2] 4612 	cpw y,#xstack_full
      003044 22 05            [ 1] 4613 	jrugt 9$
      003046 A6 01            [ 1] 4614 	ld a,#ERR_MEM_FULL
      003048 CC 16 3A         [ 2] 4615 	jp tb_error 
      00304B                       4616 9$:	 
      00304B 81               [ 4] 4617 	ret 
                                   4618 
                                   4619 
                                   4620 ;------------------------------
                                   4621 ;  BASIC DROP expr 
                                   4622 ;  expr in range {0..XSTACK_SIZE}
                                   4623 ;  discard n elements from xtack
                                   4624 ;------------------------------
      00304C                       4625 xdrop:
      00304C CD 1A A8         [ 4] 4626 	call expression 
      00304F A1 84            [ 1] 4627 	cp a,#TK_INTGR
      003051 27 03            [ 1] 4628 	jreq 1$ 
      003053 CC 16 38         [ 2] 4629 	jp syntax_error 
      003056                       4630 1$:	_xpop 
      003056 90 F6            [ 1]    1     ld a,(y)
      003058 93               [ 1]    2     ldw x,y 
      003059 EE 01            [ 2]    3     ldw x,(1,x)
      00305B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00305F 9F               [ 1] 4631 	ld a,xl 
      003060 A4 1F            [ 1] 4632 	and a,#0x1f 
      003062 5F               [ 1] 4633 	clrw x 
      003063 97               [ 1] 4634 	ld xl,a 
      003064 A6 03            [ 1] 4635 	ld a,#CELL_SIZE 
      003066 42               [ 4] 4636 	mul x,a 
      003067 CF 00 0D         [ 2] 4637 	ldw acc16,x  
      00306A 72 B9 00 0D      [ 2] 4638 	addw y,acc16 
      00306E 90 A3 17 73      [ 2] 4639 	cpw y,#XSTACK_EMPTY 
      003072 23 04            [ 2] 4640 	jrule 9$
      003074 90 AE 17 73      [ 2] 4641 	ldw y,#XSTACK_EMPTY 
      003078 81               [ 4] 4642 9$:	ret 
                                   4643 
                                   4644 ;-----------------------
                                   4645 ; check if value in A:X 
                                   4646 ; is inside xstack bound
                                   4647 ; output:
                                   4648 ;    X     slot address  
                                   4649 ;-----------------------
      003079                       4650 xstack_bound:
      003079 4D               [ 1] 4651 	tnz a 
      00307A 26 16            [ 1] 4652 	jrne 8$ 
      00307C A3 00 14         [ 2] 4653 1$: cpw x,#XSTACK_SIZE 
      00307F 22 11            [ 1] 4654 	jrugt 8$
      003081 A6 03            [ 1] 4655 	ld a,#CELL_SIZE 
      003083 42               [ 4] 4656 	mul x,a
      003084 CF 00 0D         [ 2] 4657 	ldw acc16,x 
      003087 93               [ 1] 4658 	ldw x,y 
      003088 72 BB 00 0D      [ 2] 4659 	addw x,acc16 
      00308C A3 17 73         [ 2] 4660 	cpw x,#XSTACK_EMPTY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      00308F 24 01            [ 1] 4661 	jruge 8$  
      003091 81               [ 4] 4662 	ret 
      003092 A6 0A            [ 1] 4663 8$: ld a,#ERR_BAD_VALUE
      003094 CC 16 3A         [ 2] 4664 	jp tb_error 
                                   4665 
                                   4666 ;-------------------------
                                   4667 ; BASIC: PUT expr, cond 
                                   4668 ; expr -> slot 
                                   4669 ; cond -> valut to put 
                                   4670 ; on xstack 
                                   4671 ;-------------------------
      003097                       4672 xput:
      003097 CD 19 64         [ 4] 4673 	call arg_list 
      00309A A1 02            [ 1] 4674 	cp a,#2 
      00309C 27 03            [ 1] 4675 	jreq 1$ 
      00309E CC 16 38         [ 2] 4676 0$:	jp syntax_error
      0030A1                       4677 1$: _xpop   ; value to put 
      0030A1 90 F6            [ 1]    1     ld a,(y)
      0030A3 93               [ 1]    2     ldw x,y 
      0030A4 EE 01            [ 2]    3     ldw x,(1,x)
      0030A6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030AA 89               [ 2] 4678 	pushw x 
      0030AB 88               [ 1] 4679 	push a 
      0030AC                       4680 	_xpop    ; slot 
      0030AC 90 F6            [ 1]    1     ld a,(y)
      0030AE 93               [ 1]    2     ldw x,y 
      0030AF EE 01            [ 2]    3     ldw x,(1,x)
      0030B1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030B5 CD 30 79         [ 4] 4681 	call xstack_bound
      0030B8 CF 00 19         [ 2] 4682     ldw ptr16,x 
      0030BB 84               [ 1] 4683 	pop a 
      0030BC 85               [ 2] 4684 	popw x 
      0030BD 72 C7 00 19      [ 4] 4685 	ld [ptr16],a 
      0030C1 72 5C 00 1A      [ 1] 4686 	inc ptr8 
      0030C5 72 CF 00 19      [ 5] 4687 	ldw [ptr16],x 
      0030C9 81               [ 4] 4688 	ret 
                                   4689 
                                   4690 ;------------------------
                                   4691 ; BASIC: PICK expr 
                                   4692 ; get nième element on 
                                   4693 ; xtack. 
                                   4694 ;-----------------------
      0030CA                       4695 xpick:
      0030CA CD 19 5F         [ 4] 4696 	call func_args 
      0030CD A1 01            [ 1] 4697 	cp a,#1 
      0030CF 27 03            [ 1] 4698 	jreq 1$
      0030D1 CC 16 38         [ 2] 4699 	jp syntax_error 
      0030D4                       4700 1$: _xpop 
      0030D4 90 F6            [ 1]    1     ld a,(y)
      0030D6 93               [ 1]    2     ldw x,y 
      0030D7 EE 01            [ 2]    3     ldw x,(1,x)
      0030D9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030DD CD 30 79         [ 4] 4701 	call xstack_bound
      0030E0 F6               [ 1] 4702     ld a,(x)
      0030E1 EE 01            [ 2] 4703 	ldw x,(1,x)				
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      0030E3 81               [ 4] 4704 	ret 
                                   4705 
                                   4706 
                                   4707 
                                   4708 ;------------------------------
                                   4709 ;      dictionary 
                                   4710 ; format:
                                   4711 ;   link:   2 bytes 
                                   4712 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4713 ;   cmd_name: 16 byte max 
                                   4714 ;   code_addr: 2 bytes 
                                   4715 ;------------------------------
                                   4716 	.macro _dict_entry len,name,code_addr 
                                   4717 	.word LINK 
                                   4718 	LINK=.
                                   4719 name:
                                   4720 	.byte len   	
                                   4721 	.ascii "name"
                                   4722 	.word code_addr  
                                   4723 	.endm 
                                   4724 
                           000000  4725 	LINK=0
                                   4726 ; respect alphabetic order for BASIC names from Z-A
                                   4727 ; this sort order is for a cleaner WORDS cmd output. 	
      0030E4                       4728 kword_end:
      0030E4                       4729 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      0030E4 00 00                    1 	.word LINK 
                           0030E6     2 	LINK=.
      0030E6                          3 XOR:
      0030E6 A3                       4 	.byte 3+F_XOR   	
      0030E7 58 4F 52                 5 	.ascii "XOR"
      0030EA 00 8A                    6 	.word TK_XOR  
      0030EC                       4730 	_dict_entry,5,WRITE,write  
      0030EC 30 E6                    1 	.word LINK 
                           0030EE     2 	LINK=.
      0030EE                          3 WRITE:
      0030EE 05                       4 	.byte 5   	
      0030EF 57 52 49 54 45           5 	.ascii "WRITE"
      0030F4 29 4C                    6 	.word write  
      0030F6                       4731 	_dict_entry,5,WORDS,words 
      0030F6 30 EE                    1 	.word LINK 
                           0030F8     2 	LINK=.
      0030F8                          3 WORDS:
      0030F8 05                       4 	.byte 5   	
      0030F9 57 4F 52 44 53           5 	.ascii "WORDS"
      0030FE 2C C9                    6 	.word words  
      003100                       4732 	_dict_entry 4,WAIT,wait 
      003100 30 F8                    1 	.word LINK 
                           003102     2 	LINK=.
      003102                          3 WAIT:
      003102 04                       4 	.byte 4   	
      003103 57 41 49 54              5 	.ascii "WAIT"
      003107 20 C1                    6 	.word wait  
      003109                       4733 	_dict_entry,3+F_IFUNC,USR,usr
      003109 31 02                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



                           00310B     2 	LINK=.
      00310B                          3 USR:
      00310B 13                       4 	.byte 3+F_IFUNC   	
      00310C 55 53 52                 5 	.ascii "USR"
      00310F 2A 6E                    6 	.word usr  
      003111                       4734 	_dict_entry,5,UNTIL,until 
      003111 31 0B                    1 	.word LINK 
                           003113     2 	LINK=.
      003113                          3 UNTIL:
      003113 05                       4 	.byte 5   	
      003114 55 4E 54 49 4C           5 	.ascii "UNTIL"
      003119 2D FE                    6 	.word until  
      00311B                       4735 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00311B 31 13                    1 	.word LINK 
                           00311D     2 	LINK=.
      00311D                          3 UFLASH:
      00311D 16                       4 	.byte 6+F_IFUNC   	
      00311E 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      003124 2A 4C                    6 	.word uflash  
      003126                       4736 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003126 31 1D                    1 	.word LINK 
                           003128     2 	LINK=.
      003128                          3 UBOUND:
      003128 16                       4 	.byte 6+F_IFUNC   	
      003129 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00312F 1C 75                    6 	.word ubound  
      003131                       4737 	_dict_entry,4,TONE,tone  
      003131 31 28                    1 	.word LINK 
                           003133     2 	LINK=.
      003133                          3 TONE:
      003133 04                       4 	.byte 4   	
      003134 54 4F 4E 45              5 	.ascii "TONE"
      003138 25 68                    6 	.word tone  
      00313A                       4738 	_dict_entry,2,TO,to
      00313A 31 33                    1 	.word LINK 
                           00313C     2 	LINK=.
      00313C                          3 TO:
      00313C 02                       4 	.byte 2   	
      00313D 54 4F                    5 	.ascii "TO"
      00313F 22 2B                    6 	.word to  
      003141                       4739 	_dict_entry,5,TIMER,set_timer
      003141 31 3C                    1 	.word LINK 
                           003143     2 	LINK=.
      003143                          3 TIMER:
      003143 05                       4 	.byte 5   	
      003144 54 49 4D 45 52           5 	.ascii "TIMER"
      003149 2D 33                    6 	.word set_timer  
      00314B                       4740 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00314B 31 43                    1 	.word LINK 
                           00314D     2 	LINK=.
      00314D                          3 TIMEOUT:
      00314D 17                       4 	.byte 7+F_IFUNC   	
      00314E 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003155 2D 4A                    6 	.word timeout  
      003157                       4741 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003157 31 4D                    1 	.word LINK 
                           003159     2 	LINK=.
      003159                          3 TICKS:
      003159 15                       4 	.byte 5+F_IFUNC   	
      00315A 54 49 43 4B 53           5 	.ascii "TICKS"
      00315F 2B 1A                    6 	.word get_ticks  
      003161                       4742 	_dict_entry,4,STOP,stop 
      003161 31 59                    1 	.word LINK 
                           003163     2 	LINK=.
      003163                          3 STOP:
      003163 04                       4 	.byte 4   	
      003164 53 54 4F 50              5 	.ascii "STOP"
      003168 26 D1                    6 	.word stop  
      00316A                       4743 	_dict_entry,4,STEP,step 
      00316A 31 63                    1 	.word LINK 
                           00316C     2 	LINK=.
      00316C                          3 STEP:
      00316C 04                       4 	.byte 4   	
      00316D 53 54 45 50              5 	.ascii "STEP"
      003171 22 71                    6 	.word step  
      003173                       4744 	_dict_entry,5,SPIWR,spi_write
      003173 31 6C                    1 	.word LINK 
                           003175     2 	LINK=.
      003175                          3 SPIWR:
      003175 05                       4 	.byte 5   	
      003176 53 50 49 57 52           5 	.ascii "SPIWR"
      00317B 2F C5                    6 	.word spi_write  
      00317D                       4745 	_dict_entry,6,SPISEL,spi_select
      00317D 31 75                    1 	.word LINK 
                           00317F     2 	LINK=.
      00317F                          3 SPISEL:
      00317F 06                       4 	.byte 6   	
      003180 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003186 2F EC                    6 	.word spi_select  
      003188                       4746 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003188 31 7F                    1 	.word LINK 
                           00318A     2 	LINK=.
      00318A                          3 SPIRD:
      00318A 15                       4 	.byte 5+F_IFUNC   	
      00318B 53 50 49 52 44           5 	.ascii "SPIRD"
      003190 2F E5                    6 	.word spi_read  
      003192                       4747 	_dict_entry,5,SPIEN,spi_enable 
      003192 31 8A                    1 	.word LINK 
                           003194     2 	LINK=.
      003194                          3 SPIEN:
      003194 05                       4 	.byte 5   	
      003195 53 50 49 45 4E           5 	.ascii "SPIEN"
      00319A 2F 4D                    6 	.word spi_enable  
      00319C                       4748 	_dict_entry,5,SLEEP,sleep 
      00319C 31 94                    1 	.word LINK 
                           00319E     2 	LINK=.
      00319E                          3 SLEEP:
      00319E 05                       4 	.byte 5   	
      00319F 53 4C 45 45 50           5 	.ascii "SLEEP"
      0031A4 2A 9D                    6 	.word sleep  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      0031A6                       4749     _dict_entry,4,SIZE,cmd_size 
      0031A6 31 9E                    1 	.word LINK 
                           0031A8     2 	LINK=.
      0031A8                          3 SIZE:
      0031A8 04                       4 	.byte 4   	
      0031A9 53 49 5A 45              5 	.ascii "SIZE"
      0031AD 1C 48                    6 	.word cmd_size  
      0031AF                       4750 	_dict_entry,4,SAVE,save_app 
      0031AF 31 A8                    1 	.word LINK 
                           0031B1     2 	LINK=.
      0031B1                          3 SAVE:
      0031B1 04                       4 	.byte 4   	
      0031B2 53 41 56 45              5 	.ascii "SAVE"
      0031B6 28 18                    6 	.word save_app  
      0031B8                       4751 	_dict_entry 3,RUN,run
      0031B8 31 B1                    1 	.word LINK 
                           0031BA     2 	LINK=.
      0031BA                          3 RUN:
      0031BA 03                       4 	.byte 3   	
      0031BB 52 55 4E                 5 	.ascii "RUN"
      0031BE 24 9B                    6 	.word run  
      0031C0                       4752 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0031C0 31 BA                    1 	.word LINK 
                           0031C2     2 	LINK=.
      0031C2                          3 RSHIFT:
      0031C2 16                       4 	.byte 6+F_IFUNC   	
      0031C3 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0031C9 2B 64                    6 	.word rshift  
      0031CB                       4753 	_dict_entry,3+F_IFUNC,RND,random 
      0031CB 31 C2                    1 	.word LINK 
                           0031CD     2 	LINK=.
      0031CD                          3 RND:
      0031CD 13                       4 	.byte 3+F_IFUNC   	
      0031CE 52 4E 44                 5 	.ascii "RND"
      0031D1 2C 2E                    6 	.word random  
      0031D3                       4754 	_dict_entry,6,RETURN,return 
      0031D3 31 CD                    1 	.word LINK 
                           0031D5     2 	LINK=.
      0031D5                          3 RETURN:
      0031D5 06                       4 	.byte 6   	
      0031D6 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0031DC 24 6A                    6 	.word return  
      0031DE                       4755 	_dict_entry,7,RESTORE,restore 
      0031DE 31 D5                    1 	.word LINK 
                           0031E0     2 	LINK=.
      0031E0                          3 RESTORE:
      0031E0 07                       4 	.byte 7   	
      0031E1 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0031E8 2E 95                    6 	.word restore  
      0031EA                       4756 	_dict_entry 3,REM,remark 
      0031EA 31 E0                    1 	.word LINK 
                           0031EC     2 	LINK=.
      0031EC                          3 REM:
      0031EC 03                       4 	.byte 3   	
      0031ED 52 45 4D                 5 	.ascii "REM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0031F0 20 BB                    6 	.word remark  
      0031F2                       4757 	_dict_entry,6,REBOOT,cold_start
      0031F2 31 EC                    1 	.word LINK 
                           0031F4     2 	LINK=.
      0031F4                          3 REBOOT:
      0031F4 06                       4 	.byte 6   	
      0031F5 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0031FB 00 B5                    6 	.word cold_start  
      0031FD                       4758 	_dict_entry,4+F_IFUNC,READ,read  
      0031FD 31 F4                    1 	.word LINK 
                           0031FF     2 	LINK=.
      0031FF                          3 READ:
      0031FF 14                       4 	.byte 4+F_IFUNC   	
      003200 52 45 41 44              5 	.ascii "READ"
      003204 2E FF                    6 	.word read  
      003206                       4759 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003206 31 FF                    1 	.word LINK 
                           003208     2 	LINK=.
      003208                          3 QKEY:
      003208 14                       4 	.byte 4+F_IFUNC   	
      003209 51 4B 45 59              5 	.ascii "QKEY"
      00320D 2A 0F                    6 	.word qkey  
      00320F                       4760 	_dict_entry,3,PUT,xput 
      00320F 32 08                    1 	.word LINK 
                           003211     2 	LINK=.
      003211                          3 PUT:
      003211 03                       4 	.byte 3   	
      003212 50 55 54                 5 	.ascii "PUT"
      003215 30 97                    6 	.word xput  
      003217                       4761 	_dict_entry,4,PUSH,xpush   
      003217 32 11                    1 	.word LINK 
                           003219     2 	LINK=.
      003219                          3 PUSH:
      003219 04                       4 	.byte 4   	
      00321A 50 55 53 48              5 	.ascii "PUSH"
      00321E 30 08                    6 	.word xpush  
      003220                       4762 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003220 32 19                    1 	.word LINK 
                           003222     2 	LINK=.
      003222                          3 PORTI:
      003222 15                       4 	.byte 5+F_IFUNC   	
      003223 50 4F 52 54 49           5 	.ascii "PORTI"
      003228 2E 54                    6 	.word const_porti  
      00322A                       4763 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      00322A 32 22                    1 	.word LINK 
                           00322C     2 	LINK=.
      00322C                          3 PORTG:
      00322C 15                       4 	.byte 5+F_IFUNC   	
      00322D 50 4F 52 54 47           5 	.ascii "PORTG"
      003232 2E 4F                    6 	.word const_portg  
      003234                       4764 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003234 32 2C                    1 	.word LINK 
                           003236     2 	LINK=.
      003236                          3 PORTF:
      003236 15                       4 	.byte 5+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      003237 50 4F 52 54 46           5 	.ascii "PORTF"
      00323C 2E 4A                    6 	.word const_portf  
      00323E                       4765 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      00323E 32 36                    1 	.word LINK 
                           003240     2 	LINK=.
      003240                          3 PORTE:
      003240 15                       4 	.byte 5+F_IFUNC   	
      003241 50 4F 52 54 45           5 	.ascii "PORTE"
      003246 2E 45                    6 	.word const_porte  
      003248                       4766 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003248 32 40                    1 	.word LINK 
                           00324A     2 	LINK=.
      00324A                          3 PORTD:
      00324A 15                       4 	.byte 5+F_IFUNC   	
      00324B 50 4F 52 54 44           5 	.ascii "PORTD"
      003250 2E 40                    6 	.word const_portd  
      003252                       4767 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003252 32 4A                    1 	.word LINK 
                           003254     2 	LINK=.
      003254                          3 PORTC:
      003254 15                       4 	.byte 5+F_IFUNC   	
      003255 50 4F 52 54 43           5 	.ascii "PORTC"
      00325A 2E 3B                    6 	.word const_portc  
      00325C                       4768 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      00325C 32 54                    1 	.word LINK 
                           00325E     2 	LINK=.
      00325E                          3 PORTB:
      00325E 15                       4 	.byte 5+F_IFUNC   	
      00325F 50 4F 52 54 42           5 	.ascii "PORTB"
      003264 2E 36                    6 	.word const_portb  
      003266                       4769 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      003266 32 5E                    1 	.word LINK 
                           003268     2 	LINK=.
      003268                          3 PORTA:
      003268 15                       4 	.byte 5+F_IFUNC   	
      003269 50 4F 52 54 41           5 	.ascii "PORTA"
      00326E 2E 31                    6 	.word const_porta  
      003270                       4770 	_dict_entry 5,PRINT,print 
      003270 32 68                    1 	.word LINK 
                           003272     2 	LINK=.
      003272                          3 PRINT:
      003272 05                       4 	.byte 5   	
      003273 50 52 49 4E 54           5 	.ascii "PRINT"
      003278 1F 73                    6 	.word print  
      00327A                       4771 	_dict_entry,4+F_IFUNC,POUT,const_output
      00327A 32 72                    1 	.word LINK 
                           00327C     2 	LINK=.
      00327C                          3 POUT:
      00327C 14                       4 	.byte 4+F_IFUNC   	
      00327D 50 4F 55 54              5 	.ascii "POUT"
      003281 2E 72                    6 	.word const_output  
      003283                       4772 	_dict_entry,3+F_IFUNC,POP,xpop 
      003283 32 7C                    1 	.word LINK 
                           003285     2 	LINK=.
      003285                          3 POP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      003285 13                       4 	.byte 3+F_IFUNC   	
      003286 50 4F 50                 5 	.ascii "POP"
      003289 30 0C                    6 	.word xpop  
      00328B                       4773 	_dict_entry,4,POKE,poke 
      00328B 32 85                    1 	.word LINK 
                           00328D     2 	LINK=.
      00328D                          3 POKE:
      00328D 04                       4 	.byte 4   	
      00328E 50 4F 4B 45              5 	.ascii "POKE"
      003292 21 9C                    6 	.word poke  
      003294                       4774 	_dict_entry,5,PMODE,pin_mode 
      003294 32 8D                    1 	.word LINK 
                           003296     2 	LINK=.
      003296                          3 PMODE:
      003296 05                       4 	.byte 5   	
      003297 50 4D 4F 44 45           5 	.ascii "PMODE"
      00329C 2B 9F                    6 	.word pin_mode  
      00329E                       4775 	_dict_entry,4+F_IFUNC,PINP,const_input
      00329E 32 96                    1 	.word LINK 
                           0032A0     2 	LINK=.
      0032A0                          3 PINP:
      0032A0 14                       4 	.byte 4+F_IFUNC   	
      0032A1 50 49 4E 50              5 	.ascii "PINP"
      0032A5 2E 77                    6 	.word const_input  
      0032A7                       4776 	_dict_entry,4+F_IFUNC,PICK,xpick 
      0032A7 32 A0                    1 	.word LINK 
                           0032A9     2 	LINK=.
      0032A9                          3 PICK:
      0032A9 14                       4 	.byte 4+F_IFUNC   	
      0032AA 50 49 43 4B              5 	.ascii "PICK"
      0032AE 30 CA                    6 	.word xpick  
      0032B0                       4777 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0032B0 32 A9                    1 	.word LINK 
                           0032B2     2 	LINK=.
      0032B2                          3 PEEK:
      0032B2 14                       4 	.byte 4+F_IFUNC   	
      0032B3 50 45 45 4B              5 	.ascii "PEEK"
      0032B7 21 BD                    6 	.word peek  
      0032B9                       4778 	_dict_entry,5,PAUSE,pause 
      0032B9 32 B2                    1 	.word LINK 
                           0032BB     2 	LINK=.
      0032BB                          3 PAUSE:
      0032BB 05                       4 	.byte 5   	
      0032BC 50 41 55 53 45           5 	.ascii "PAUSE"
      0032C1 2A A8                    6 	.word pause  
      0032C3                       4779 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0032C3 32 BB                    1 	.word LINK 
                           0032C5     2 	LINK=.
      0032C5                          3 PAD:
      0032C5 13                       4 	.byte 3+F_IFUNC   	
      0032C6 50 41 44                 5 	.ascii "PAD"
      0032C9 30 03                    6 	.word pad_ref  
      0032CB                       4780 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0032CB 32 C5                    1 	.word LINK 
                           0032CD     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0032CD                          3 OR:
      0032CD 92                       4 	.byte 2+F_OR   	
      0032CE 4F 52                    5 	.ascii "OR"
      0032D0 00 89                    6 	.word TK_OR  
      0032D2                       4781 	_dict_entry,2,ON,cmd_on 
      0032D2 32 CD                    1 	.word LINK 
                           0032D4     2 	LINK=.
      0032D4                          3 ON:
      0032D4 02                       4 	.byte 2   	
      0032D5 4F 4E                    5 	.ascii "ON"
      0032D7 23 9A                    6 	.word cmd_on  
      0032D9                       4782 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0032D9 32 D4                    1 	.word LINK 
                           0032DB     2 	LINK=.
      0032DB                          3 ODR:
      0032DB 13                       4 	.byte 3+F_IFUNC   	
      0032DC 4F 44 52                 5 	.ascii "ODR"
      0032DF 2E 59                    6 	.word const_odr  
      0032E1                       4783 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0032E1 32 DB                    1 	.word LINK 
                           0032E3     2 	LINK=.
      0032E3                          3 NOT:
      0032E3 73                       4 	.byte 3+F_NOT   	
      0032E4 4E 4F 54                 5 	.ascii "NOT"
      0032E7 00 87                    6 	.word TK_NOT  
      0032E9                       4784 	_dict_entry,4,NEXT,next 
      0032E9 32 E3                    1 	.word LINK 
                           0032EB     2 	LINK=.
      0032EB                          3 NEXT:
      0032EB 04                       4 	.byte 4   	
      0032EC 4E 45 58 54              5 	.ascii "NEXT"
      0032F0 22 B3                    6 	.word next  
      0032F2                       4785 	_dict_entry,3,NEW,new
      0032F2 32 EB                    1 	.word LINK 
                           0032F4     2 	LINK=.
      0032F4                          3 NEW:
      0032F4 03                       4 	.byte 3   	
      0032F5 4E 45 57                 5 	.ascii "NEW"
      0032F8 27 1D                    6 	.word new  
      0032FA                       4786 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0032FA 32 F4                    1 	.word LINK 
                           0032FC     2 	LINK=.
      0032FC                          3 LSHIFT:
      0032FC 16                       4 	.byte 6+F_IFUNC   	
      0032FD 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003303 2B 38                    6 	.word lshift  
      003305                       4787 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003305 32 FC                    1 	.word LINK 
                           003307     2 	LINK=.
      003307                          3 LOG2:
      003307 14                       4 	.byte 4+F_IFUNC   	
      003308 4C 4F 47 32              5 	.ascii "LOG2"
      00330C 2D 98                    6 	.word log2  
      00330E                       4788 	_dict_entry 4,LIST,list
      00330E 33 07                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



                           003310     2 	LINK=.
      003310                          3 LIST:
      003310 04                       4 	.byte 4   	
      003311 4C 49 53 54              5 	.ascii "LIST"
      003315 1E 7F                    6 	.word list  
      003317                       4789 	_dict_entry 3,LET,let 
      003317 33 10                    1 	.word LINK 
                           003319     2 	LINK=.
      003319                          3 LET:
      003319 03                       4 	.byte 3   	
      00331A 4C 45 54                 5 	.ascii "LET"
      00331D 1C 80                    6 	.word let  
      00331F                       4790 	_dict_entry,3+F_CFUNC,KEY,key 
      00331F 33 19                    1 	.word LINK 
                           003321     2 	LINK=.
      003321                          3 KEY:
      003321 23                       4 	.byte 3+F_CFUNC   	
      003322 4B 45 59                 5 	.ascii "KEY"
      003325 2A 0B                    6 	.word key  
      003327                       4791 	_dict_entry,7,IWDGREF,refresh_iwdg
      003327 33 21                    1 	.word LINK 
                           003329     2 	LINK=.
      003329                          3 IWDGREF:
      003329 07                       4 	.byte 7   	
      00332A 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003331 2D 93                    6 	.word refresh_iwdg  
      003333                       4792 	_dict_entry,6,IWDGEN,enable_iwdg
      003333 33 29                    1 	.word LINK 
                           003335     2 	LINK=.
      003335                          3 IWDGEN:
      003335 06                       4 	.byte 6   	
      003336 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00333C 2D 55                    6 	.word enable_iwdg  
      00333E                       4793 	_dict_entry,5,INPUT,input_var  
      00333E 33 35                    1 	.word LINK 
                           003340     2 	LINK=.
      003340                          3 INPUT:
      003340 05                       4 	.byte 5   	
      003341 49 4E 50 55 54           5 	.ascii "INPUT"
      003346 20 1C                    6 	.word input_var  
      003348                       4794 	_dict_entry,2,IF,if 
      003348 33 40                    1 	.word LINK 
                           00334A     2 	LINK=.
      00334A                          3 IF:
      00334A 02                       4 	.byte 2   	
      00334B 49 46                    5 	.ascii "IF"
      00334D 21 DE                    6 	.word if  
      00334F                       4795 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00334F 33 4A                    1 	.word LINK 
                           003351     2 	LINK=.
      003351                          3 IDR:
      003351 13                       4 	.byte 3+F_IFUNC   	
      003352 49 44 52                 5 	.ascii "IDR"
      003355 2E 5E                    6 	.word const_idr  
      003357                       4796 	_dict_entry,3,HEX,hex_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003357 33 51                    1 	.word LINK 
                           003359     2 	LINK=.
      003359                          3 HEX:
      003359 03                       4 	.byte 3   	
      00335A 48 45 58                 5 	.ascii "HEX"
      00335D 1C 35                    6 	.word hex_base  
      00335F                       4797 	_dict_entry,4,GOTO,goto 
      00335F 33 59                    1 	.word LINK 
                           003361     2 	LINK=.
      003361                          3 GOTO:
      003361 04                       4 	.byte 4   	
      003362 47 4F 54 4F              5 	.ascii "GOTO"
      003366 24 2C                    6 	.word goto  
      003368                       4798 	_dict_entry,5,GOSUB,gosub 
      003368 33 61                    1 	.word LINK 
                           00336A     2 	LINK=.
      00336A                          3 GOSUB:
      00336A 05                       4 	.byte 5   	
      00336B 47 4F 53 55 42           5 	.ascii "GOSUB"
      003370 24 46                    6 	.word gosub  
      003372                       4799 	_dict_entry,3,GET,cmd_get 
      003372 33 6A                    1 	.word LINK 
                           003374     2 	LINK=.
      003374                          3 GET:
      003374 03                       4 	.byte 3   	
      003375 47 45 54                 5 	.ascii "GET"
      003378 25 30                    6 	.word cmd_get  
      00337A                       4800 	_dict_entry,4+F_IFUNC,FREE,free
      00337A 33 74                    1 	.word LINK 
                           00337C     2 	LINK=.
      00337C                          3 FREE:
      00337C 14                       4 	.byte 4+F_IFUNC   	
      00337D 46 52 45 45              5 	.ascii "FREE"
      003381 1C 3F                    6 	.word free  
      003383                       4801 	_dict_entry,3,FOR,for 
      003383 33 7C                    1 	.word LINK 
                           003385     2 	LINK=.
      003385                          3 FOR:
      003385 03                       4 	.byte 3   	
      003386 46 4F 52                 5 	.ascii "FOR"
      003389 21 FB                    6 	.word for  
      00338B                       4802 	_dict_entry,4,FCPU,fcpu 
      00338B 33 85                    1 	.word LINK 
                           00338D     2 	LINK=.
      00338D                          3 FCPU:
      00338D 04                       4 	.byte 4   	
      00338E 46 43 50 55              5 	.ascii "FCPU"
      003392 2B 90                    6 	.word fcpu  
      003394                       4803 	_dict_entry,5,ERASE,erase 
      003394 33 8D                    1 	.word LINK 
                           003396     2 	LINK=.
      003396                          3 ERASE:
      003396 05                       4 	.byte 5   	
      003397 45 52 41 53 45           5 	.ascii "ERASE"
      00339C 27 27                    6 	.word erase  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00339E                       4804 	_dict_entry,3,END,cmd_end  
      00339E 33 96                    1 	.word LINK 
                           0033A0     2 	LINK=.
      0033A0                          3 END:
      0033A0 03                       4 	.byte 3   	
      0033A1 45 4E 44                 5 	.ascii "END"
      0033A4 25 29                    6 	.word cmd_end  
      0033A6                       4805 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0033A6 33 A0                    1 	.word LINK 
                           0033A8     2 	LINK=.
      0033A8                          3 EEPROM:
      0033A8 16                       4 	.byte 6+F_IFUNC   	
      0033A9 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0033AF 2E 7C                    6 	.word const_eeprom_base  
      0033B1                       4806 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0033B1 33 A8                    1 	.word LINK 
                           0033B3     2 	LINK=.
      0033B3                          3 EEFREE:
      0033B3 16                       4 	.byte 6+F_IFUNC   	
      0033B4 45 45 46 52 45 45        5 	.ascii "EEFREE"
      0033BA 1C D4                    6 	.word func_eefree  
      0033BC                       4807 	_dict_entry,4,EDIT,edit 
      0033BC 33 B3                    1 	.word LINK 
                           0033BE     2 	LINK=.
      0033BE                          3 EDIT:
      0033BE 04                       4 	.byte 4   	
      0033BF 45 44 49 54              5 	.ascii "EDIT"
      0033C3 1F 08                    6 	.word edit  
      0033C5                       4808 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0033C5 33 BE                    1 	.word LINK 
                           0033C7     2 	LINK=.
      0033C7                          3 DWRITE:
      0033C7 06                       4 	.byte 6+F_CMD   	
      0033C8 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0033CE 26 86                    6 	.word digital_write  
      0033D0                       4809 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0033D0 33 C7                    1 	.word LINK 
                           0033D2     2 	LINK=.
      0033D2                          3 DROP:
      0033D2 04                       4 	.byte 4   	
      0033D3 44 52 4F 50              5 	.ascii "DROP"
      0033D7 30 4C                    6 	.word xdrop  
      0033D9                       4810 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0033D9 33 D2                    1 	.word LINK 
                           0033DB     2 	LINK=.
      0033DB                          3 DREAD:
      0033DB 15                       4 	.byte 5+F_IFUNC   	
      0033DC 44 52 45 41 44           5 	.ascii "DREAD"
      0033E1 26 4F                    6 	.word digital_read  
      0033E3                       4811 	_dict_entry,2,DO,do_loop
      0033E3 33 DB                    1 	.word LINK 
                           0033E5     2 	LINK=.
      0033E5                          3 DO:
      0033E5 02                       4 	.byte 2   	
      0033E6 44 4F                    5 	.ascii "DO"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0033E8 2D EB                    6 	.word do_loop  
      0033EA                       4812 	_dict_entry,3,DIR,cmd_dir
      0033EA 33 E5                    1 	.word LINK 
                           0033EC     2 	LINK=.
      0033EC                          3 DIR:
      0033EC 03                       4 	.byte 3   	
      0033ED 44 49 52                 5 	.ascii "DIR"
      0033F0 28 F5                    6 	.word cmd_dir  
      0033F2                       4813 	_dict_entry,3,DIM,cmd_dim 
      0033F2 33 EC                    1 	.word LINK 
                           0033F4     2 	LINK=.
      0033F4                          3 DIM:
      0033F4 03                       4 	.byte 3   	
      0033F5 44 49 4D                 5 	.ascii "DIM"
      0033F8 1D 58                    6 	.word cmd_dim  
      0033FA                       4814 	_dict_entry,3,DEC,dec_base
      0033FA 33 F4                    1 	.word LINK 
                           0033FC     2 	LINK=.
      0033FC                          3 DEC:
      0033FC 03                       4 	.byte 3   	
      0033FD 44 45 43                 5 	.ascii "DEC"
      003400 1C 3A                    6 	.word dec_base  
      003402                       4815 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      003402 33 FC                    1 	.word LINK 
                           003404     2 	LINK=.
      003404                          3 DDR:
      003404 13                       4 	.byte 3+F_IFUNC   	
      003405 44 44 52                 5 	.ascii "DDR"
      003408 2E 63                    6 	.word const_ddr  
      00340A                       4816 	_dict_entry,4,DATA,data  
      00340A 34 04                    1 	.word LINK 
                           00340C     2 	LINK=.
      00340C                          3 DATA:
      00340C 04                       4 	.byte 4   	
      00340D 44 41 54 41              5 	.ascii "DATA"
      003411 2E 81                    6 	.word data  
      003413                       4817 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003413 34 0C                    1 	.word LINK 
                           003415     2 	LINK=.
      003415                          3 CR2:
      003415 13                       4 	.byte 3+F_IFUNC   	
      003416 43 52 32                 5 	.ascii "CR2"
      003419 2E 6D                    6 	.word const_cr2  
      00341B                       4818 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00341B 34 15                    1 	.word LINK 
                           00341D     2 	LINK=.
      00341D                          3 CR1:
      00341D 13                       4 	.byte 3+F_IFUNC   	
      00341E 43 52 31                 5 	.ascii "CR1"
      003421 2E 68                    6 	.word const_cr1  
      003423                       4819 	_dict_entry,5,CONST,cmd_const 
      003423 34 1D                    1 	.word LINK 
                           003425     2 	LINK=.
      003425                          3 CONST:
      003425 05                       4 	.byte 5   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      003426 43 4F 4E 53 54           5 	.ascii "CONST"
      00342B 1D 44                    6 	.word cmd_const  
      00342D                       4820 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00342D 34 25                    1 	.word LINK 
                           00342F     2 	LINK=.
      00342F                          3 CHAR:
      00342F 24                       4 	.byte 4+F_CFUNC   	
      003430 43 48 41 52              5 	.ascii "CHAR"
      003434 29 B5                    6 	.word func_char  
      003436                       4821 	_dict_entry,3,BYE,bye 
      003436 34 2F                    1 	.word LINK 
                           003438     2 	LINK=.
      003438                          3 BYE:
      003438 03                       4 	.byte 3   	
      003439 42 59 45                 5 	.ascii "BYE"
      00343C 2A 94                    6 	.word bye  
      00343E                       4822 	_dict_entry,5,BTOGL,bit_toggle
      00343E 34 38                    1 	.word LINK 
                           003440     2 	LINK=.
      003440                          3 BTOGL:
      003440 05                       4 	.byte 5   	
      003441 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003446 21 43                    6 	.word bit_toggle  
      003448                       4823 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      003448 34 40                    1 	.word LINK 
                           00344A     2 	LINK=.
      00344A                          3 BTEST:
      00344A 15                       4 	.byte 5+F_IFUNC   	
      00344B 42 54 45 53 54           5 	.ascii "BTEST"
      003450 21 65                    6 	.word bit_test  
      003452                       4824 	_dict_entry,4,BSET,bit_set 
      003452 34 4A                    1 	.word LINK 
                           003454     2 	LINK=.
      003454                          3 BSET:
      003454 04                       4 	.byte 4   	
      003455 42 53 45 54              5 	.ascii "BSET"
      003459 20 FE                    6 	.word bit_set  
      00345B                       4825 	_dict_entry,4,BRES,bit_reset
      00345B 34 54                    1 	.word LINK 
                           00345D     2 	LINK=.
      00345D                          3 BRES:
      00345D 04                       4 	.byte 4   	
      00345E 42 52 45 53              5 	.ascii "BRES"
      003462 21 20                    6 	.word bit_reset  
      003464                       4826 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003464 34 5D                    1 	.word LINK 
                           003466     2 	LINK=.
      003466                          3 BIT:
      003466 13                       4 	.byte 3+F_IFUNC   	
      003467 42 49 54                 5 	.ascii "BIT"
      00346A 2D C5                    6 	.word bitmask  
      00346C                       4827 	_dict_entry,3,AWU,awu 
      00346C 34 66                    1 	.word LINK 
                           00346E     2 	LINK=.
      00346E                          3 AWU:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      00346E 03                       4 	.byte 3   	
      00346F 41 57 55                 5 	.ascii "AWU"
      003472 2A C8                    6 	.word awu  
      003474                       4828 	_dict_entry,3+F_IFUNC,ASC,ascii
      003474 34 6E                    1 	.word LINK 
                           003476     2 	LINK=.
      003476                          3 ASC:
      003476 13                       4 	.byte 3+F_IFUNC   	
      003477 41 53 43                 5 	.ascii "ASC"
      00347A 29 CC                    6 	.word ascii  
      00347C                       4829 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      00347C 34 76                    1 	.word LINK 
                           00347E     2 	LINK=.
      00347E                          3 AND:
      00347E 83                       4 	.byte 3+F_AND   	
      00347F 41 4E 44                 5 	.ascii "AND"
      003482 00 88                    6 	.word TK_AND  
      003484                       4830 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      003484 34 7E                    1 	.word LINK 
                           003486     2 	LINK=.
      003486                          3 ALLOC:
      003486 05                       4 	.byte 5   	
      003487 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      00348C 30 16                    6 	.word xalloc  
      00348E                       4831 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00348E 34 86                    1 	.word LINK 
                           003490     2 	LINK=.
      003490                          3 ADCREAD:
      003490 17                       4 	.byte 7+F_IFUNC   	
      003491 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003498 26 13                    6 	.word analog_read  
      00349A                       4832 	_dict_entry,5,ADCON,power_adc 
      00349A 34 90                    1 	.word LINK 
                           00349C     2 	LINK=.
      00349C                          3 ADCON:
      00349C 05                       4 	.byte 5   	
      00349D 41 44 43 4F 4E           5 	.ascii "ADCON"
      0034A2 25 C3                    6 	.word power_adc  
      0034A4                       4833 kword_dict::
      0034A4                       4834 	_dict_entry,3+F_IFUNC,ABS,abs
      0034A4 34 9C                    1 	.word LINK 
                           0034A6     2 	LINK=.
      0034A6                          3 ABS:
      0034A6 13                       4 	.byte 3+F_IFUNC   	
      0034A7 41 42 53                 5 	.ascii "ABS"
      0034AA 2B 21                    6 	.word abs  
                                   4835 
                           000000  4836 INDIRECT=0 
                           000000  4837 .if INDIRECT 
                                   4838 ;comands and fonctions address table 	
                                   4839 code_addr::
                                   4840 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4841 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4842 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4843 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



                                   4844 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4845 	.word let,list,log2,lshift,next,new ; 40..47
                                   4846 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4847 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4848 	.word const_portf,const_portg,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4849 	.word restore,return, random,rshift,run,free ; 72..79
                                   4850 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4851 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4852 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4853 	.word func_eefree,0 
                                   4854 .endif 
                                   4855 
                                   4856 
                                   4857 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0034AC                         30 test:
      0034AC                         31     _vars VSIZE 
      0034AC 52 08            [ 2]    1     sub sp,#VSIZE 
      0034AE AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0034B1 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0034B3 CE 00 0F         [ 2]   34     ldw x,ticks 
      0034B6 1F 01            [ 2]   35     ldw (T,sp),x
      0034B8                         36 1$: ; test add24 
      0034B8 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0034BA AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0034BD C7 00 0C         [ 1]   39     ld acc24,a 
      0034C0 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0034C3 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0034C5 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0034C8 CD 01 6E         [ 4]   43     call add24 
      0034CB 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0034CD 1D 00 01         [ 2]   45     subw x,#1
      0034D0 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0034D2 26 E4            [ 1]   47     jrne 1$
      0034D4 CD 17 FB         [ 4]   48     call prt_acc24
      0034D7 A6 20            [ 1]   49     ld a,#SPACE 
      0034D9 CD 08 DD         [ 4]   50     call putc 
      0034DC CE 00 0F         [ 2]   51     ldw x,ticks 
      0034DF 72 F0 01         [ 2]   52     subw x,(T,sp)
      0034E2 CD 17 E4         [ 4]   53     call prt_i16  
      0034E5 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      0034E7 CD 08 DD         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0034EA CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0034ED 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0034EF CE 00 0F         [ 2]   60     ldw x,ticks 
      0034F2 1F 01            [ 2]   61     ldw (T,sp),x 
      0034F4                         62 2$: 
      0034F4 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0034F6 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0034F9 C7 00 0C         [ 1]   65     ld acc24,a 
      0034FC CF 00 0D         [ 2]   66     ldw acc24+1,x  
      0034FF A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003501 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003504 CD 02 69         [ 4]   69     call mul24 
      003507 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003509 1D 00 01         [ 2]   71     subw x,#1
      00350C 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      00350E 26 E4            [ 1]   73     jrne 2$ 
      003510 CD 17 FB         [ 4]   74    call prt_acc24 
      003513 A6 20            [ 1]   75    ld a,#SPACE 
      003515 CD 08 DD         [ 4]   76    call putc 
      003518 CE 00 0F         [ 2]   77     ldw x,ticks 
      00351B 72 F0 01         [ 2]   78     subw x,(T,sp)
      00351E CD 17 E4         [ 4]   79     call prt_i16 
      003521 A6 0D            [ 1]   80     ld a,#CR 
      003523 CD 08 DD         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      003526 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003529 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      00352B CE 00 0F         [ 2]   85     ldw x,ticks 
      00352E 1F 01            [ 2]   86     ldw (T,sp),x 
      003530                         87 3$: 
      003530 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003532 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003535 C7 00 0C         [ 1]   90     ld acc24,a 
      003538 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00353B A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      00353D AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003540 CD 02 69         [ 4]   94     call mul24 
      003543 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003545 1D 00 01         [ 2]   96     subw x,#1
      003548 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00354A 26 E4            [ 1]   98     jrne 3$ 
      00354C CD 17 FB         [ 4]   99     call prt_acc24    
      00354F A6 20            [ 1]  100     ld a,#SPACE 
      003551 CD 08 DD         [ 4]  101     call putc 
      003554 CE 00 0F         [ 2]  102     ldw x,ticks 
      003557 72 F0 01         [ 2]  103     subw x,(T,sp)
      00355A CD 17 E4         [ 4]  104     call prt_i16 
      00355D A6 0D            [ 1]  105     ld a,#CR 
      00355F CD 08 DD         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003562 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003565 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      003567 CE 00 0F         [ 2]  110     ldw x,ticks 
      00356A 1F 01            [ 2]  111     ldw (T,sp),x 
      00356C                        112 4$:
      00356C A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      00356E AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003571 C7 00 0C         [ 1]  115     ld acc24,a 
      003574 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      003577 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      003579 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      00357C CD 02 69         [ 4]  119     call mul24 
      00357F 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003581 1D 00 01         [ 2]  121     subw x,#1
      003584 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003586 26 E4            [ 1]  123     jrne 4$ 
      003588 CD 17 FB         [ 4]  124     call prt_acc24 
      00358B A6 20            [ 1]  125     ld a,#SPACE 
      00358D CD 08 DD         [ 4]  126     call putc 
      003590 CE 00 0F         [ 2]  127     ldw x,ticks 
      003593 72 F0 01         [ 2]  128     subw x,(T,sp)
      003596 CD 17 E4         [ 4]  129     call prt_i16 
      003599 A6 0D            [ 1]  130     ld a,#CR 
      00359B CD 08 DD         [ 4]  131     call putc 
                                    132 ; test abs24 
      00359E CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0035A1 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0035A3 CE 00 0F         [ 2]  135     ldw x,ticks 
      0035A6 1F 01            [ 2]  136     ldw (T,sp),x 
      0035A8                        137 5$: 
      0035A8 A6 FF            [ 1]  138     ld a,#0xff
      0035AA AE FF FF         [ 2]  139     ldw x,#0xffff
      0035AD CD 01 E3         [ 4]  140     call abs24 
      0035B0 C7 00 0C         [ 1]  141     ld acc24,a 
      0035B3 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0035B6 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0035B8 1D 00 01         [ 2]  144     subw x,#1
      0035BB 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0035BD 26 E9            [ 1]  146     jrne 5$ 
      0035BF CD 17 FB         [ 4]  147     call prt_acc24 
      0035C2 A6 20            [ 1]  148     ld a,#SPACE 
      0035C4 CD 08 DD         [ 4]  149     call putc 
      0035C7 CE 00 0F         [ 2]  150     ldw x,ticks 
      0035CA 72 F0 01         [ 2]  151     subw x,(T,sp)
      0035CD CD 17 E4         [ 4]  152     call prt_i16 
      0035D0                        153 6$:
      0035D0 A6 0D            [ 1]  154     ld a,#CR 
      0035D2 CD 08 DD         [ 4]  155     call putc 
      0035D5 CD 36 1B         [ 4]  156     call read_integer 
      0035D8 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0035DD 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0035E2 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0035E7 CD 36 1B         [ 4]  160     call read_integer 
      0035EA C6 00 0C         [ 1]  161     ld a,acc24 
      0035ED CE 00 0D         [ 2]  162     ldw x,acc16 
      0035F0 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      0035F5 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      0035FA 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      0035FF CD 02 F7         [ 4]  166     call div24 
      003602 88               [ 1]  167     push a 
      003603 89               [ 2]  168     pushw x 
      003604 CD 17 FB         [ 4]  169     call prt_acc24 
      003607 A6 20            [ 1]  170     ld a,#SPACE 
      003609 CD 08 DD         [ 4]  171     call putc 
      00360C 85               [ 2]  172     popw x
      00360D CF 00 0D         [ 2]  173     ldw acc16,x  
      003610 32 00 0C         [ 1]  174     pop acc24 
      003613 CD 17 FB         [ 4]  175     call prt_acc24
      003616 20 B8            [ 2]  176     jra 6$
      003618                        177     _drop VSIZE 
      003618 5B 08            [ 2]    1     addw sp,#VSIZE 
      00361A 81               [ 4]  178     ret 
                                    179 
                                    180 
      00361B                        181 read_integer:
      00361B A6 3F            [ 1]  182     ld a,#'? 
      00361D CD 08 DD         [ 4]  183     call putc  
      003620 72 5F 00 03      [ 1]  184 	clr count  
      003624 CD 0A 3F         [ 4]  185 	call readln 
      003627 AE 16 90         [ 2]  186 	ldw x,#tib 
      00362A 3B 00 03         [ 1]  187 	push count
      00362D 4B 00            [ 1]  188 	push #0 
      00362F 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003632 5C               [ 1]  190 	incw x 
      003633                        191 	_drop 2 
      003633 5B 02            [ 2]    1     addw sp,#2 
      003635 72 5F 00 01      [ 1]  192 	clr in 
      003639 CD 0E B4         [ 4]  193 	call get_token
      00363C A1 84            [ 1]  194 	cp a,#TK_INTGR
      00363E 27 0F            [ 1]  195 	jreq 3$ 
      003640 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003642 CD 0E B4         [ 4]  197 	call get_token 
      003645 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      003647 27 03            [ 1]  199 	jreq 2$
      003649 CC 16 38         [ 2]  200 	jp syntax_error
      00364C                        201 2$:
      00364C CD 02 0D         [ 4]  202 	call neg_acc24  	
      00364F                        203 3$: 
      00364F 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003680                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003680                         30 app_space::
      003680 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003682 00 00                   32 app_size: .word 0 
      003684                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0034A6 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      00349C R
    ADCON_ID=  000002     |   4 ADCREAD    003490 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      003486 R   |   4 AND        00347E R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        003476 R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   00014C R   |   4 AWU        00346E R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        003466 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       00345D R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       003454 R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      00344A R
    BTEST_ID=  000010     |   4 BTOGL      003440 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        003438 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    0028B0 R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       00342F R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000003     |     CNT_LO  =  000004 
    CODE_ADD=  000001     |     COMMA   =  00002C     |   4 CONST      003425 R
    CONST_ID=  0000B6     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CR1        00341D R   |     CR1_IDX =  00001A     |   4 CR2        003415 R
    CR2_IDX =  000018     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       00340C R   |     DATA_IDX=  00001C     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        003404 R   |     DDR_IDX =  00001E     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        0033FC R
    DEC_IDX =  000020     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   4 DIM        0033F4 R   |   4 DIR        0033EC R
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         0033E5 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000022 
  4 DREAD      0033DB R   |     DREAD_ID=  000024     |   4 DROP       0033D2 R
  4 DWRITE     0033C7 R   |     DWRITE_I=  000026     |   4 EDIT       0033BE R
    EDIT_IDX=  000028     |   4 EEFREE     0033B3 R   |     EEFREE_I=  0000B8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

  4 EEPROM     0033A8 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002A     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        0033A0 R   |     END_IDX =  00002C     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   4 ERASE      003396 R
    ERASE_ID=  00002E     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_OVER=  000010     |     ERR_RD_O=  000011     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       00338D R
    FCPU_IDX=  000030     |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |   4 FLASH_ME   001E5F R
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        003385 R   |     FOR_IDX =  000034     |   4 FREE       00337C R
    FREE_IDX=  000088     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_AND   =  000080     |     F_CFUNC =  000020     |     F_CMD   =  000000 
    F_CONST =  000030     |     F_IFUNC =  000010     |     F_NOT   =  000070 
    F_OR    =  000090     |     F_XOR   =  0000A0     |   4 GET        003374 R
    GET_IDX =  0000B4     |   4 GOSUB      00336A R   |     GOSUB_ID=  000036 
  4 GOTO       003361 R   |     GOTO_IDX=  000038     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   4 HEX        003359 R   |     HEX_IDX =  00003A 
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        003351 R
    IDR_IDX =  00003C     |   4 IF         00334A R   |     IF_IDX  =  00003E 
    IN      =  000005     |     INCR    =  000001     |     INDIRECT=  000000 
    INP     =  000000     |   4 INPUT      003340 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000040 
    INPUT_PU=  000001     |     INT24   =  000005     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     003335 R   |     IWDGEN_I=  000042 
  4 IWDGREF    003329 R   |     IWDGREF_=  000044     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        003321 R   |     KEY_END =  000083     |     KEY_IDX =  000046 
    KW_TYPE_=  0000F0     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        003319 R   |     LET_IDX =  000048 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  0034A6 R   |   4 LIST       003310 R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       003307 R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     0032FC R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000005 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000001 
    NAME_MAX=  00000F     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        0032F4 R   |     NEW_IDX =  000052     |   4 NEXT       0032EB R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        0032E3 R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |   4 NOT_SAVE   001F38 R   |   4 NO_APP     0028DF R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        0032DB R   |     ODR_IDX =  000054 
  4 ON         0032D4 R   |     ONOFF   =  000003     |     ON_IDX  =  0000B2 
    OP      =  000002     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OR         0032CD R
    OR_IDX  =  0000FC     |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        0032C5 R
    PAD_IDX =  000056     |     PAD_SIZE=  000080     |   4 PAUSE      0032BB R
    PAUSE_ID=  000058     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       0032B2 R
    PEEK_IDX=  00005C     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   4 PICK       0032A9 R
    PINNO   =  000001     |   4 PINP       0032A0 R   |     PINP_IDX=  00005E 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      003296 R   |     PMODE_ID=  00005A 
  4 POKE       00328D R   |     POKE_IDX=  000060     |   4 POP        003285 R
  4 PORTA      003268 R   |   4 PORTB      00325E R   |   4 PORTC      003254 R
  4 PORTD      00324A R   |   4 PORTE      003240 R   |   4 PORTF      003236 R
  4 PORTG      00322C R   |   4 PORTI      003222 R   |   4 POUT       00327C R
    POUT_IDX=  000062     |     PREV    =  000001     |   4 PRINT      003272 R
    PROD    =  000001     |     PROD_SIG=  000004     |   4 PROG_ADD   001E35 R
  4 PROG_SIZ   001E47 R   |     PRTA_IDX=  000066     |     PRTB_IDX=  000068 
    PRTC_IDX=  00006A     |     PRTD_IDX=  00006C     |     PRTE_IDX=  00006E 
    PRTF_IDX=  000070     |     PRTG_IDX=  000072     |     PRTI_IDX=  000074 
    PRT_IDX =  000064     |     PSIZE   =  00000B     |     PSTR    =  000003 
  4 PUSH       003219 R   |   4 PUT        003211 R   |   4 QKEY       003208 R
    QKEY_IDX=  000076     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001E70 R   |     RAM_SIZE=  001800 
    RBT_IDX =  00007A     |   4 READ       0031FF R   |     READ_IDX=  000078 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

  4 REBOOT     0031F4 R   |     RECLEN  =  000005     |     REC_LEN =  000003 
    REC_XTRA=  000005     |   4 REG_A      0004CA R   |   4 REG_CC     0004CE R
  4 REG_PC     0004BE R   |   4 REG_SP     0004D3 R   |   4 REG_X      0004C6 R
  4 REG_Y      0004C2 R   |     RELOP   =  000001     |   4 REM        0031EC R
    REM_IDX =  00007C     |   4 RESTORE    0031E0 R   |     REST_IDX=  00007E 
    RETL1   =  000001     |   4 RETURN     0031D5 R   |     RET_ADDR=  000001 
    RET_BPTR=  000003     |     RET_IDX =  000080     |     RET_INW =  000005 
  4 RND        0031CD R   |     RND_IDX =  000082     |     RONLY   =  000005 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     0031C2 R
    RSHIFT_I=  000084     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        0031BA R   |     RUN_IDX =  000086     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000001     |     R_CC    =  000009 
    R_PC    =  00000A     |     R_X     =  000002     |     R_Y     =  000004 
  4 SAVE       0031B1 R   |     SAVE_IDX=  000032     |     SAV_ACC1=  000006 
    SAV_ACC2=  000008     |     SAV_COUN=  00000A     |     SAV_IN  =  000009 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   0028AE R   |   4 SIZE       0031A8 R   |     SIZE_IDX=  0000B0 
    SKIP    =  000005     |   4 SLEEP      00319E R   |     SLEEP_ID=  00008A 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      003194 R   |     SPIEN_ID=  00008E     |   4 SPIRD      00318A R
    SPIRD_ID=  00008C     |   4 SPISEL     00317F R   |     SPISEL_I=  000090 
  4 SPIWR      003175 R   |     SPIWR_ID=  000092     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  00008C     |   4 STATES     000481 R   |   4 STEP       00316C R
    STEP_IDX=  000094     |   4 STOP       003163 R   |     STOP_IDX=  000096 
    STR     =  000003     |   4 STR_BYTE   001E58 R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |   4 SysCall    000012 R   |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      003159 R   |     TICKS_ID=  000098 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    00314D R   |   4 TIMER      003143 R
    TIMER_ID=  00009A     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_AND  =  000088     |     TK_ARRAY=  000005     |     TK_CFUNC=  000082 
    TK_CHAR =  000004     |     TK_CMD  =  000080     |     TK_COLON=  00000A 
    TK_COMMA=  000008     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FLOAT=  000086     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000006     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_NOT  =  000087 
    TK_OR   =  000089     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  00008A     |     TMROUT_I=  00009C     |   4 TO         00313C R
  4 TONE       003133 R   |     TONE_IDX=  0000A0     |     TOWRITE =  000005 
    TO_IDX  =  00009E     |   4 Timer4Up   000013 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     003128 R   |     UBOUND_I=  0000A2     |   4 UBTN_Han   00005A R
  4 UFLASH     00311D R   |     UFLASH_I=  0000A4     |   4 UNTIL      003113 R
    UNTIL_ID=  0000A6     |     US      =  00001F     |   4 USER_ABO   000062 R
  4 USR        00310B R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000A8     |   4 Uart1RxH   00086B R
  4 UserButt   000036 R   |     VAL1    =  02FFFF     |     VAL2    =  00002A 
    VAL3    =  000003     |     VAL4    =  0005FF     |     VAL5    =  FFFFFFFD 
    VAR_NAME=  000001     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       003102 R   |     WAIT_IDX=  0000AA     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |     WLKPTR  =  000003     |   4 WORDS      0030F8 R
    WORDS_ID=  0000AC     |   4 WRITE      0030EE R   |     WRITE_ID=  0000AE 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        0030E6 R   |     XOR_IDX =  0000FE     |     XSAVE   =  000002 
    XSTACK_E=  001773     |     XSTACK_S=  000014     |     XTEMP   =  000001 
    YSAVE   =  000004     |   4 abs        002B21 R   |   4 abs24      0001E3 R
  5 acc16      00000D GR  |   5 acc24      00000C GR  |   5 acc32      00000B GR
  5 acc8       00000E GR  |   4 accept_c   000B99 R   |   4 add24      00016E R
  4 add_char   001304 R   |   4 add_spac   0010FC R   |   4 analog_r   002613 R
  4 and_cond   001B6F R   |   4 and_fact   001B3F R   |   4 app        003684 R
  4 app_sign   003680 R   |   4 app_size   003682 R   |   4 app_spac   003680 GR
  4 arduino_   002C0E R   |   4 arg_list   001964 R   |   5 array_si   000020 R
  4 ascii      0029CC R   |   4 at_tst     000F6E R   |   4 atoi24     001886 GR
  4 atoi_exi   0018F5 R   |   4 awu        002AC8 R   |   4 awu02      002ADB R
  4 bad_port   002A47 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       00258A R   |   4 beep_1kh   00255D GR  |   4 bin_exit   000DD5 R
  4 bit_rese   002120 R   |   4 bit_set    0020FE R   |   4 bit_test   002165 R
  4 bit_togg   002143 R   |   4 bitmask    002DC5 R   |   4 bkslsh_t   000F1B R
  4 bksp       000944 R   |   2 block_bu   0016E0 GR  |   4 block_er   000755 R
  4 break_po   0026FF R   |   4 bye        002A94 R   |   4 clear_ba   001470 R
  4 clear_bl   002804 R   |   4 clear_va   0013C8 R   |   4 clock_in   00007D R
  4 cmd_cons   001D44 R   |   4 cmd_dim    001D58 R   |   4 cmd_dim1   001D62 R
  4 cmd_dim2   001D68 R   |   4 cmd_dir    0028F5 R   |   4 cmd_end    002529 R
  4 cmd_get    002530 R   |   4 cmd_itf    0004EE R   |   4 cmd_line   0016C7 R
  4 cmd_name   001324 R   |   4 cmd_on     00239A R   |   4 cmd_size   001C48 R
  4 cold_sta   0000B5 R   |   4 colon_ts   000F42 R   |   4 comma_ts   000F4D R
  4 comp_msg   001617 R   |   4 compile    001068 GR  |   4 conditio   001BC1 R
  4 const_cr   002E68 R   |   4 const_cr   002E6D R   |   4 const_dd   002E63 R
  4 const_ee   002E7C R   |   4 const_id   002E5E R   |   4 const_in   002E77 R
  4 const_od   002E59 R   |   4 const_ou   002E72 R   |   4 const_po   002E31 R
  4 const_po   002E36 R   |   4 const_po   002E3B R   |   4 const_po   002E40 R
  4 const_po   002E45 R   |   4 const_po   002E4A R   |   4 const_po   002E4F R
  4 const_po   002E54 R   |   4 convert_   000D45 R   |   4 convert_   000908 R
  4 copy_com   000FA3 R   |   5 count      000003 GR  |   4 cp24       0001A8 R
  4 cp24_ax    0001DA R   |   4 cp_loop    001915 R   |   4 cpl24      0001EA R
  4 cpy_cmd_   0010E4 R   |   4 cpy_quot   001124 R   |   4 create_g   000C6F R
  4 cs_high    002FFE R   |   4 dash_tst   000F63 R   |   4 data       002E81 R
  4 data_err   002EFA R   |   5 data_len   000009 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 dec_base   001C3A R   |   4 decomp_l   0011BC R
  4 decompil   001174 GR  |   4 del_line   000C42 R   |   4 delete_l   000A31 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

  4 delete_n   000954 R   |   4 delete_u   0009F6 R   |   4 digital_   00264F R
  4 digital_   002686 R   |   4 div24      0002F7 R   |   4 divu24_8   0002D9 R
  4 do_loop    002DEB R   |   4 do_progr   000748 R   |   4 dup24      00015F R
  5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR  |   4 edit       001F08 R
  4 enable_i   002D55 R   |   4 eql_tst    000FEE R   |   4 equal      001317 R
  4 eras0      002731 R   |   4 erase      002727 R   |   4 erase_ex   000779 R
  4 erase_fl   00076F R   |   4 err_bad_   00155C R   |   4 err_buf_   0015D2 R
  4 err_cmd_   001520 R   |   4 err_div0   0014E5 R   |   4 err_dupl   00153A R
  4 err_math   0014CC R   |   4 err_mem_   0014B1 R   |   4 err_msg    00148D R
  4 err_no_a   001568 R   |   4 err_no_d   00159B R   |   4 err_no_f   0015BF R
  4 err_no_l   0014F4 R   |   4 err_no_p   0015AB R   |   4 err_not_   00154B R
  4 err_over   0015DF R   |   4 err_read   0015E9 R   |   4 err_run_   00150A R
  4 err_synt   0014BE R   |   4 escaped    000D5A GR  |   4 expect     001952 R
  4 expressi   001AA8 R   |   4 factor     0019B0 R   |   5 farptr     000018 R
  4 fcpu       002B90 R   |   4 fetchc     0005F5 R   |   4 fill_wri   0027F4 R
  4 final_te   000B92 R   |   4 first_li   001EB2 R   |   5 flags      000022 GR
  4 for        0021FB R   |   4 free       001C3F R   |   5 free_eep   000024 R
  7 free_ram   000090 R   |   4 func_arg   00195F R   |   4 func_cha   0029B5 R
  4 func_eef   001CD4 R   |   4 ge         001319 R   |   4 get_addr   0017C4 R
  4 get_arra   001980 R   |   4 get_char   0017DE R   |   4 get_esca   000914 R
  4 get_int2   0017CE R   |   4 get_targ   002328 R   |   4 get_targ   002336 R
  4 get_tick   002B1A R   |   4 get_toke   000EB4 GR  |   4 get_valu   001CC3 R
  4 getc       0008ED GR  |   4 gosub      002446 R   |   4 gosub_1    002451 R
  4 gosub_2    002457 R   |   4 goto       00242C R   |   4 goto_1     002436 R
  4 gpio       002A1C R   |   4 gt         001315 R   |   4 gt_tst     000FF9 R
  4 hex_base   001C35 R   |   4 hex_dump   000635 R   |   4 if         0021DE R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   00084F R   |   4 input_ex   0020B6 R   |   4 input_lo   002020 R
  4 input_va   00201C R   |   4 insert_c   0009B3 R   |   4 insert_l   000C9B R
  4 insert_l   000D0A R   |   4 interp_l   001708 R   |   4 interpre   0016E3 R
  4 invalid    00055D R   |   4 invalid_   0005CB R   |   4 is_alnum   000E08 GR
  4 is_alpha   000DEE GR  |   4 is_data_   002E87 R   |   4 is_digit   000DFF GR
  4 is_progr   002487 R   |   4 is_symbo   000E11 R   |   4 itoa       001821 GR
  4 itoa_loo   001843 R   |   4 jp_to_ta   002439 R   |   4 key        002A0B R
  4 kword_di   0034A4 GR  |   4 kword_en   0030E4 R   |   4 le         00131E R
  4 ledoff     0003BD R   |   4 ledon      0003B8 R   |   4 ledtoggl   0003C2 R
  4 left_par   0003CB R   |   4 let        001C80 GR  |   4 let_arra   001C8E R
  4 let_dvar   001741 R   |   4 let_eval   001C96 R   |   4 let_var    001C93 R
  4 lines_sk   001EB5 R   |   4 list       001E7F R   |   4 list_exi   001EF7 R
  4 list_loo   001ED5 R   |   4 log2       002D98 R   |   4 look_tar   002359 R
  4 loop_bac   00230B R   |   5 loop_dep   00001F R   |   4 loop_don   002320 R
  4 lshift     002B38 R   |   4 lt         00131C R   |   4 lt_tst     001022 R
  4 mem_peek   000579 R   |   4 mod24      000391 R   |   4 move       001384 GR
  4 move_dow   0013A3 R   |   4 move_era   0006D7 R   |   4 move_exi   0013C4 R
  4 move_lef   00098B R   |   4 move_loo   0013A8 R   |   4 move_prg   000717 R
  4 move_rig   000999 R   |   4 move_up    001395 R   |   4 mul24      000269 R
  4 mul_char   001306 R   |   4 mulu24_8   00022A R   |   4 nbr_tst    000EE7 R
  4 ne         001321 R   |   4 neg24      0001F3 R   |   4 neg_acc2   00020D R
  4 neg_ax     000205 R   |   4 new        00271D R   |   4 next       0022B3 R
  4 next_lin   0016EB R   |   4 next_tok   00179C GR  |   4 no_match   001927 R
  4 number     0005FB R   |   4 other      00104B R   |   4 overwrit   000BBE R
  2 pad        0016E0 GR  |   4 pad_ref    003003 R   |   4 parse_ad   0004D8 R
  4 parse_bi   000DB3 R   |   4 parse_in   000D62 R   |   4 parse_ke   000E34 R
  4 parse_qu   000D0D R   |   4 parse_sy   000E1C R   |   4 pause      002AA8 R
  4 pause02    002ABB R   |   4 peek       0021BD R   |   4 peek_byt   000595 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

  4 pin_mode   002B9F R   |   4 plus_tst   000FC2 R   |   4 poke       00219C R
  4 power_ad   0025C3 R   |   4 prcnt_ts   000FE3 R   |   4 print      001F73 R
  4 print_fa   0005DA R   |   4 print_he   000BF5 GR  |   4 print_re   000417 R
  4 print_st   00056D R   |   4 print_to   001809 R   |   4 prog_siz   001DEE R
  4 program_   001DF6 R   |   4 program_   0006F1 R   |   4 program_   000717 R
  4 prt_acc2   0017FB R   |   4 prt_basi   001F4F R   |   4 prt_i16    0017E4 R
  4 prt_loop   001F77 R   |   4 prt_peek   00039A GR  |   4 prt_reg1   0003F8 R
  4 prt_reg8   0003D6 R   |   5 ptr16      000019 GR  |   5 ptr8       00001A R
  4 putc       0008DD GR  |   4 puts       00093A GR  |   4 qgetc      0008E6 GR
  4 qkey       002A0F GR  |   4 qmark_ts   000F79 R   |   4 qsign      0027ED R
  4 random     002C2E R   |   4 read       002EFF R   |   4 read01     002F04 R
  4 read_int   00361B R   |   4 readln     000A3F GR  |   4 readln_l   000A4E R
  4 readln_q   000BDB R   |   4 refresh_   002D93 R   |   4 relation   001AE0 R
  4 relop_st   001309 R   |   4 remark     0020BB GR  |   4 repl       000517 R
  4 repl_exi   00053F R   |   4 reset_co   001F75 R   |   4 rest_con   00200C R
  4 restore    002E95 R   |   4 return     00246A R   |   4 right_al   001112 GR
  4 row_alig   000834 R   |   4 row_eras   0006AA R   |   4 row_eras   0006D7 R
  4 row_loop   000618 R   |   4 rparnt_t   000F37 R   |   4 rshift     002B64 R
  7 rsign      00008C R   |   7 rsize      00008E R   |   4 rt_msg     001605 R
  4 run        00249B R   |   4 run_app    00012A R   |   4 run_it     0024F6 R
  4 run_it_0   0024F8 R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   002818 R   |   4 save_con   001FFC R
  4 scan_blo   00085D R   |   4 search_d   001907 GR  |   4 search_e   00194F R
  4 search_l   000C17 GR  |   4 search_l   000C26 R   |   4 search_n   001CFD R
  4 search_n   00190B R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002BFE R   |   4 send_esc   000962 R   |   4 send_par   00096D R
  4 set_data   002ECB R   |   4 set_time   002D33 R   |   4 sharp_ts   000F58 R
  4 show_row   000606 R   |   4 single_c   0012FF R   |   4 skip       000EA1 R
  4 skip_str   0017B5 R   |   4 slash_ts   000FD8 R   |   4 sleep      002A9D R
  4 software   0013D7 R   |   4 spaces     0009A7 GR  |   4 spi_clea   002F98 R
  4 spi_disa   002F80 R   |   4 spi_enab   002F4D R   |   4 spi_rcv_   002FBA R
  4 spi_read   002FE5 R   |   4 spi_sele   002FEC R   |   4 spi_send   002FA4 R
  4 spi_writ   002FC5 R   |   2 stack_fu   00179C GR  |   2 stack_un   001828 R
  4 star_tst   000FCD R   |   4 step       002271 R   |   4 stop       0026D1 R
  4 store_lo   0022A0 R   |   4 str_matc   001934 R   |   4 str_tst    000ED7 R
  4 strcmp     001363 R   |   4 strcpy     001374 GR  |   4 strlen     001358 GR
  4 sub24      00018B R   |   4 symb_loo   000E1D R   |   4 syntax_e   001638 GR
  4 system_i   00141D R   |   5 tab_widt   000023 GR  |   4 tb_error   00163A GR
  4 term       001A65 R   |   4 term01     001A6D R   |   4 term_exi   001AA5 R
  4 test       0034AC R   |   4 test_p     000565 R   |   2 tib        001690 GR
  4 tick_tst   000F91 R   |   5 ticks      00000F R   |   4 timeout    002D4A R
  5 timer      000012 GR  |   4 timer2_i   000093 R   |   4 timer4_i   0000A0 R
  4 tk_id      001628 R   |   4 to         00222B R   |   4 to_eepro   000740 R
  4 to_flash   000745 R   |   4 to_hex_c   000C0C GR  |   4 to_upper   00187A GR
  4 token_ch   001061 R   |   4 token_ex   001065 R   |   4 tone       002568 R
  4 try_next   002ED8 R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   0008ED GR  |   4 uart1_in   000898 R   |   4 uart1_pu   0008DD GR
  4 uart1_qg   0008E6 GR  |   4 uart1_se   0008A8 R   |   4 ubound     001C75 R
  4 uflash     002A4C R   |   4 unlock_e   000674 R   |   4 unlock_f   00068F R
  4 until      002DFE R   |   4 user_int   000049 R   |   4 usr        002A6E R
  4 var_name   00116A GR  |   5 vars       000034 GR  |   4 wait       0020C1 R
  4 warm_ini   00144E R   |   4 warm_sta   0016C4 R   |   4 words      002CC9 R
  4 words_co   002D1D R   |   4 write      00294C R   |   4 write_bl   0007F9 GR
  4 write_bu   000731 R   |   4 write_by   00077B R   |   4 write_ee   0007B7 R
  4 write_ex   0007F0 R   |   4 write_fl   0007A1 R   |   4 write_nb   00081E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

  4 xalloc     003016 R   |   4 xdrop      00304C R   |   4 xpick      0030CA R
  4 xpop       00300C R   |   4 xpush      003008 R   |   4 xput       003097 R
  4 xstack_b   003079 R   |   2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3684   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

