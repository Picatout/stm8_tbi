ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                                    144 
                                    145 ;--------------------------------------
                                    146 ;   assembler flags 
                                    147 ;-------------------------------------
                                    148 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    149 
                                    150      .macro _usec_dly n 
                                    151     ldw x,#(16*n-2)/4
                                    152     decw x
                                    153     nop 
                                    154     jrne .-4
                                    155     .endm 
                                    156     
                                    157     ; load X register with 
                                    158     ; entry point of dictionary
                                    159     ; before calling 'search_dict'
                                    160     .macro _ldx_dict dict_name
                                    161     ldw x,#dict_name+2
                                    162     .endm 
                                    163 
                                    164     ; reset BASIC pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; to beginning of last token
                                    166     ; extracted except if it was end of line 
                                    167     .macro _unget_token 
                                    168      mov in,in.saved  
                                    169     .endm
                                    170 
                                    171 
                                    172     ; extract code address for 
                                    173     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    174     .macro _get_code_addr
                                    175         ldw x,(x)
                                    176         inc in 
                                    177         inc in 
                                    178     .endm 
                                    179 
                                    180 
                                    181 
                                    182 ;---------------------------------------
                                    183 ;    xtack manipulation macros 
                                    184 ;    Y is used as xstack pointer  
                                    185 ;----------------------------------------
                                    186     ; pop in A:X from XSTACK 
                                    187     .macro _xpop 
                                    188     ld a,(y)
                                    189     ldw x,y 
                                    190     ldw x,(1,x)
                                    191     addw y,#CELL_SIZE 
                                    192     .endm 
                                    193 
                                    194     ; push A:X  to XSTACK 
                                    195     .macro _xpush 
                                    196     subw y,#CELL_SIZE
                                    197     ld (y),a 
                                    198     ldw (1,y),x 
                                    199     .endm 
                                    200 
                                    201     ; drop from XSTACK 
                                    202     .macro _xdrop 
                                    203     addw y,#CELL_SIZE 
                                    204     .endm 
                                    205 
                                    206     ; @T fetch top xstack 
                                    207     .macro _at_top
                                    208     ld a,(y)
                                    209     ldw x,y 
                                    210     ldw x,(1,x)
                                    211     .endm 
                                    212 
                                    213     ; @N  fetch next on xstack 
                                    214     .macro _at_next 
                                    215     ld a,(3,y)
                                    216     ldw x,y 
                                    217     ldw x,(4,x)
                                    218     .endm 
                                    219 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220     ; !T put on top of xtack 
                                    221     .macro _store_top 
                                    222     ld (y),a 
                                    223     ldw (1,y),x     
                                    224     .endm 
                                    225 
                                    226     ; !N put next on xstack 
                                    227     .macro _store_next 
                                    228     ld (3,y),a 
                                    229     ldw (4,y),x 
                                    230     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001690                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         45 xstack_unf:: ; xstack underflow 
      00179C                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 68             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 37         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 16 C1         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 95         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1C D1         [ 4]  270 	call func_eefree 
      000113 CD 1C 72         [ 4]  271 	call ubound 
      000116 CD 14 6D         [ 4]  272 	call clear_basic
      000119 CD 25 1A         [ 4]  273 	call beep_1khz  
      00011C CD 14 1A         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for application in flash memory 
      00011F CD 27 AA         [ 4]  277 	call qsign 
      000122 27 03            [ 1]  278 	jreq run_app
      000124 CC 16 C1         [ 2]  279 	jp warm_start 
      000127                        280 run_app:
                                    281 ; run application in FLASH|EEPROM 
      000127 90 CE 17 73      [ 2]  282 	ldw y,XSTACK_EMPTY
      00012B CD 14 4B         [ 4]  283 	call warm_init
      00012E AE 36 04         [ 2]  284 	ldw x,#app 
      000131 CF 00 1B         [ 2]  285 	ldw txtbgn,x
      000134 72 BB 36 02      [ 2]  286 	addw x,app_size 
      000138 CF 00 1D         [ 2]  287 	ldw txtend,x 
      00013B AE 01 49         [ 2]  288 	ldw x,#AUTO_RUN 
      00013E CD 09 37         [ 4]  289 	call puts 
      000141 CD 1D F3         [ 4]  290 	call program_info 
      000144 CC 24 B5         [ 2]  291 	jp run_it_02  
      000147 20 FE            [ 2]  292     jra .  
                                    293 
      000149 20 61 75 74 6F 20 72   294 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    295 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00015C                         37 dup24:
      00015C                         38     _at_top 
      00015C 90 F6            [ 1]    1     ld a,(y)
      00015E 93               [ 1]    2     ldw x,y 
      00015F EE 01            [ 2]    3     ldw x,(1,x)
      000161                         39     _xpush 
      000161 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000165 90 F7            [ 1]    2     ld (y),a 
      000167 90 EF 01         [ 2]    3     ldw (1,y),x 
      00016A 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00016B                         48 add24: ; ( N T -- N+T )
      00016B                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00016B 90 F6            [ 1]    1     ld a,(y)
      00016D 93               [ 1]    2     ldw x,y 
      00016E EE 01            [ 2]    3     ldw x,(1,x)
      000170 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000174 89               [ 2]   50     pushw x  
      000175 88               [ 1]   51     push a  
      000176                         52     _at_top  
      000176 90 F6            [ 1]    1     ld a,(y)
      000178 93               [ 1]    2     ldw x,y 
      000179 EE 01            [ 2]    3     ldw x,(1,x)
      00017B 72 FB 02         [ 2]   53     addw x,(2,sp)
      00017E 19 01            [ 1]   54     adc a, (1,sp)
      000180                         55     _store_top 
      000180 90 F7            [ 1]    1     ld (y),a 
      000182 90 EF 01         [ 2]    2     ldw (1,y),x     
      000185                         56     _drop 3 
      000185 5B 03            [ 2]    1     addw sp,#3 
      000187 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      000188                         63 sub24: ; ( N T -- N-T ) 
      000188                         64     _xpop 
      000188 90 F6            [ 1]    1     ld a,(y)
      00018A 93               [ 1]    2     ldw x,y 
      00018B EE 01            [ 2]    3     ldw x,(1,x)
      00018D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000191 89               [ 2]   65     pushw x 
      000192 88               [ 1]   66     push  a
      000193                         67     _at_top  
      000193 90 F6            [ 1]    1     ld a,(y)
      000195 93               [ 1]    2     ldw x,y 
      000196 EE 01            [ 2]    3     ldw x,(1,x)
      000198 72 F0 02         [ 2]   68     subw x,(2,sp) 
      00019B 12 01            [ 1]   69     sbc a, (1,sp)
      00019D                         70     _store_top  
      00019D 90 F7            [ 1]    1     ld (y),a 
      00019F 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A2                         71     _drop 3 
      0001A2 5B 03            [ 2]    1     addw sp,#3 
      0001A4 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001A5                         77 cp24:
      0001A5                         78     _xpop 
      0001A5 90 F6            [ 1]    1     ld a,(y)
      0001A7 93               [ 1]    2     ldw x,y 
      0001A8 EE 01            [ 2]    3     ldw x,(1,x)
      0001AA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AE C7 00 0C         [ 1]   79     ld acc24,a 
      0001B1 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0001B4                         81     _at_top 
      0001B4 90 F6            [ 1]    1     ld a,(y)
      0001B6 93               [ 1]    2     ldw x,y 
      0001B7 EE 01            [ 2]    3     ldw x,(1,x)
      0001B9 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001BD C2 00 0C         [ 1]   83     sbc a,acc24
      0001C0 2F 08            [ 1]   84     jrslt 1$
      0001C2 26 0A            [ 1]   85     jrne 2$
      0001C4 5D               [ 2]   86     tnzw x 
      0001C5 26 07            [ 1]   87     jrne 2$
      0001C7 4F               [ 1]   88     clr a 
      0001C8 20 06            [ 2]   89     jra 9$ 
      0001CA                         90 1$: ; i1 < i2 
      0001CA A6 FF            [ 1]   91     ld a,#255
      0001CC 20 02            [ 2]   92     jra 9$ 
      0001CE                         93 2$: ; i1 > i2 
      0001CE A6 01            [ 1]   94     ld a,#1 
      0001D0 5F               [ 1]   95 9$: clrw x
      0001D1                         96      _store_top 
      0001D1 90 F7            [ 1]    1     ld (y),a 
      0001D3 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D6 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001D7                        103 cp24_ax:
      0001D7 88               [ 1]  104     push a 
      0001D8 C3 00 0D         [ 2]  105     cpw x,acc16 
      0001DB C2 00 0C         [ 1]  106     sbc a,acc24
      0001DE 84               [ 1]  107     pop a 
      0001DF 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001E0                        115 abs24: ; ( i -- u )
      0001E0 90 F6            [ 1]  116     ld a,(y)
      0001E2 A1 80            [ 1]  117     cp a,#0x80 
      0001E4 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001E6 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001E7                        124 cpl24:  ; i -- ~i 
      0001E7 90 73            [ 1]  125     cpl (y) 
      0001E9 90 63 01         [ 1]  126     cpl (1,y)
      0001EC 90 63 02         [ 1]  127     cpl (2,y)
      0001EF 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      0001F0                        133 neg24: ; (i -- -i )
      0001F0                        134     _at_top
      0001F0 90 F6            [ 1]    1     ld a,(y)
      0001F2 93               [ 1]    2     ldw x,y 
      0001F3 EE 01            [ 2]    3     ldw x,(1,x)
      0001F5 43               [ 1]  135     cpl  a  
      0001F6 53               [ 2]  136     cplw x 
      0001F7 1C 00 01         [ 2]  137     addw x,#1
      0001FA A9 00            [ 1]  138     adc a,#0
      0001FC                        139     _store_top  
      0001FC 90 F7            [ 1]    1     ld (y),a 
      0001FE 90 EF 01         [ 2]    2     ldw (1,y),x     
      000201 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000202                        145 neg_ax:
      000202 43               [ 1]  146     cpl  a  
      000203 53               [ 2]  147     cplw x 
      000204 1C 00 01         [ 2]  148     addw x,#1
      000207 A9 00            [ 1]  149     adc a,#0
      000209 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00020A                        155 neg_acc24: ; 
      00020A 72 53 00 0C      [ 1]  156     cpl acc24 
      00020E 72 53 00 0D      [ 1]  157     cpl acc16 
      000212 72 53 00 0E      [ 1]  158     cpl acc8
      000216 72 5C 00 0E      [ 1]  159     inc acc8 
      00021A 26 0A            [ 1]  160     jrne 9$
      00021C 72 5C 00 0D      [ 1]  161     inc acc16 
      000220 26 04            [ 1]  162     jrne 9$
      000222 72 5C 00 0C      [ 1]  163     inc acc24 
      000226 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      000227                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000227 88               [ 1]  181     push a 
      000228 72 5F 00 0B      [ 1]  182 	clr acc32
      00022C 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000230 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000233 97               [ 1]  186     ld xl,a 
      000234 7B 01            [ 1]  187     ld a,(U8,sp)
      000236 42               [ 4]  188     mul x,a 
      000237 CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00023A 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      00023D 97               [ 1]  192     ld xl,a 
      00023E 7B 01            [ 1]  193     ld a,(U8,sp) 
      000240 42               [ 4]  194     mul x,a 
      000241 72 BB 00 0C      [ 2]  195     addw x,acc24
      000245 72 59 00 0B      [ 1]  196     rlc acc32 
      000249 CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00024C 90 F6            [ 1]  199     ld a,(Y)
      00024E 97               [ 1]  200     ld xl,a 
      00024F 7B 01            [ 1]  201     ld a,(U8,sp)
      000251 42               [ 4]  202     mul x,a 
      000252 72 BB 00 0B      [ 2]  203     addw x,acc32
      000256 02               [ 1]  204     rlwa x 
      000257 4D               [ 1]  205     tnz a 
      000258 27 05            [ 1]  206     jreq 1$
      00025A A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00025C CC 16 37         [ 2]  208     jp tb_error 
      00025F                        209 1$:
      00025F 9E               [ 1]  210     ld a,xh  
      000260 CE 00 0D         [ 2]  211     ldw x,acc16   
      000263                        212     _drop VSIZE 
      000263 5B 01            [ 2]    1     addw sp,#VSIZE 
      000265 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000266                        224 mul24:
      000266                        225     _vars VSIZE
      000266 52 07            [ 2]    1     sub sp,#VSIZE 
      000268 5F               [ 1]  226     clrw x 
      000269 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00026B 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      00026D                        229     _xpop 
      00026D 90 F6            [ 1]    1     ld a,(y)
      00026F 93               [ 1]    2     ldw x,y 
      000270 EE 01            [ 2]    3     ldw x,(1,x)
      000272 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000276 4D               [ 1]  230     tnz a 
      000277 2A 05            [ 1]  231     jrpl 0$
      000279 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00027B CD 02 02         [ 4]  233     call neg_ax 
      00027E                        234 0$:    
      00027E 6B 05            [ 1]  235     ld (N1,sp),a 
      000280 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000282 90 7D            [ 1]  237     tnz (Y)
      000284 2A 05            [ 1]  238     jrpl 2$ 
      000286 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      000288 CD 01 F0         [ 4]  240     call neg24
      00028B                        241 2$: 
      00028B 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      00028D 27 0A            [ 1]  243     jreq 4$
      00028F CD 02 27         [ 4]  244     call mulu24_8
      000292 4D               [ 1]  245     tnz a 
      000293 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      000295 6B 01            [ 1]  247     ld (PROD,sp),a
      000297 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      000299                        249 4$:
      000299 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      00029B 27 0D            [ 1]  251     jreq 5$
      00029D CD 02 27         [ 4]  252     call mulu24_8
      0002A0 4D               [ 1]  253     tnz a 
      0002A1 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002A3 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002A6 29 29            [ 1]  256     jrv 8$ ; overflow
      0002A8 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002AA                        258 5$:
      0002AA 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002AC 27 10            [ 1]  260     jreq 6$
      0002AE CD 02 27         [ 4]  261     call mulu24_8
      0002B1 01               [ 1]  262     rrwa x 
      0002B2 5D               [ 2]  263     tnzw x 
      0002B3 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002B5 4D               [ 1]  265     tnz a 
      0002B6 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002B8 1B 01            [ 1]  267     add a,(PROD,sp)
      0002BA 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002BC 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002BE                        270 6$:
      0002BE 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002C0 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002C2 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002C4 27 03            [ 1]  274     jreq 9$
      0002C6 CD 02 02         [ 4]  275     call neg_ax 
      0002C9                        276 9$:
      0002C9                        277     _store_top 
      0002C9 90 F7            [ 1]    1     ld (y),a 
      0002CB 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002CE                        278     _drop VSIZE 
      0002CE 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002D0 81               [ 4]  279     ret 
      0002D1                        280 8$: ; overflow
      0002D1 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0002D3 CC 16 37         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002D6                        296 divu24_8:
      0002D6 89               [ 2]  297 	pushw x ; save x
      0002D7 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002D8 CE 00 0C         [ 2]  300 	ldw x,acc24
      0002DB 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002DD 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002DE 88               [ 1]  303 	push a  ;save remainder
      0002DF CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002E2 84               [ 1]  305 	pop a
      0002E3 95               [ 1]  306 	ld xh,a
      0002E4 C6 00 0E         [ 1]  307 	ld a,acc8
      0002E7 97               [ 1]  308 	ld xl,a
      0002E8 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002EA 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002EB 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      0002ED 9F               [ 1]  312 	ld a,xl
      0002EE C7 00 0E         [ 1]  313 	ld acc8,a
      0002F1 84               [ 1]  314 	pop a
      0002F2 85               [ 2]  315 	popw x
      0002F3 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      0002F4                        332 div24:
      0002F4                        333     _vars VSIZE 
      0002F4 52 06            [ 2]    1     sub sp,#VSIZE 
      0002F6 0F 06            [ 1]  334     clr (RSIGN,sp)
      0002F8 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002FA                        336     _xpop 
      0002FA 90 F6            [ 1]    1     ld a,(y)
      0002FC 93               [ 1]    2     ldw x,y 
      0002FD EE 01            [ 2]    3     ldw x,(1,x)
      0002FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000303 4D               [ 1]  337     tnz a 
      000304 2A 05            [ 1]  338     jrpl 0$ 
      000306 03 05            [ 1]  339     cpl (QSIGN,sp)
      000308 CD 02 02         [ 4]  340     call neg_ax
      00030B                        341 0$:
      00030B 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      00030D 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      00030F 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000311 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000313 26 05            [ 1]  346     jrne 1$ 
      000315 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      000317 CC 16 37         [ 2]  348     jp tb_error 
      00031A                        349 1$: ; dividend  
      00031A                        350     _at_top
      00031A 90 F6            [ 1]    1     ld a,(y)
      00031C 93               [ 1]    2     ldw x,y 
      00031D EE 01            [ 2]    3     ldw x,(1,x)
      00031F 4D               [ 1]  351     tnz a 
      000320 2A 07            [ 1]  352     jrpl 2$
      000322 CD 02 02         [ 4]  353     call neg_ax
      000325 03 05            [ 1]  354     cpl (QSIGN,sp)
      000327 03 06            [ 1]  355     cpl (RSIGN,sp)
      000329                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      000329                        359     _store_top 
      000329 90 F7            [ 1]    1     ld (y),a 
      00032B 90 EF 01         [ 2]    2     ldw (1,y),x     
      00032E A6 18            [ 1]  360     ld a,#24 
      000330 6B 04            [ 1]  361     ld (CNTR,sp),a
      000332 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000334 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000336 CD 01 D7         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      000339 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00033B C6 00 0C         [ 1]  368     ld a,acc24 
      00033E CE 00 0D         [ 2]  369     ldw x,acc16 
      000341 72 5F 00 0C      [ 1]  370     clr acc24 
      000345 72 5F 00 0D      [ 1]  371     clr acc16 
      000349 72 5F 00 0E      [ 1]  372     clr acc8 
      00034D 20 26            [ 2]  373     jra 6$
      00034F                        374 22$:     
      00034F 4F               [ 1]  375     clr a 
      000350 5F               [ 1]  376     clrw x 
      000351 98               [ 1]  377     rcf  
      000352                        378 3$: ; shift carry in acc24 bit 0 
      000352 90 69 02         [ 1]  379     rlc (2,y) 
      000355 90 69 01         [ 1]  380     rlc (1,y)
      000358 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00035A 59               [ 2]  382     rlcw x  
      00035B 49               [ 1]  383     rlc a
      00035C 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      00035F 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000361 24 05            [ 1]  386     jrnc 5$
      000363 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000366 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      000368                        389 5$: ; shift carry in QUOTIENT 
      000368 8C               [ 1]  390     ccf
      000369 0A 04            [ 1]  391     dec (CNTR,sp)
      00036B 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      00036D 90 69 02         [ 1]  394     rlc (2,y)
      000370 90 69 01         [ 1]  395     rlc (1,y) 
      000373 90 79            [ 1]  396     rlc (y) 
      000375                        397 6$:    
      000375 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      000377 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      000379 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00037B 27 03            [ 1]  401     jreq 8$
      00037D CD 01 F0         [ 4]  402     call neg24
      000380                        403 8$: 
      000380 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000382 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000384                        406 81$:
      000384 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000386 27 03            [ 1]  408     jreq 9$
      000388 CD 02 02         [ 4]  409     call neg_ax       
      00038B                        410 9$: _drop VSIZE 
      00038B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00038D 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      00038E                        423 mod24:
      00038E CD 02 F4         [ 4]  424     call div24 
      000391                        425     _store_top  ; replace quotient by remainder 
      000391 90 F7            [ 1]    1     ld (y),a 
      000393 90 EF 01         [ 2]    2     ldw (1,y),x     
      000396 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      000397                         48 prt_peek::
      000397 89               [ 2]   49 	pushw x 
      000398 35 10 00 0A      [ 1]   50 	mov base,#16 
      00039C CD 17 E1         [ 4]   51 	call prt_i16  
      00039F A6 3A            [ 1]   52 	ld a,#': 
      0003A1 CD 08 DA         [ 4]   53 	call putc 
      0003A4 A6 20            [ 1]   54 	ld a,#SPACE 
      0003A6 CD 08 DA         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0003A9 85               [ 2]   56 	popw x 
      0003AA F6               [ 1]   57 	ld a,(x)
      0003AB 5F               [ 1]   58 	clrw x 
      0003AC 97               [ 1]   59 	ld xl,a 
      0003AD 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003B1 CD 17 E1         [ 4]   61 	call prt_i16 
      0003B4 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003B5                         69 ledon:
      0003B5 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003B9 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003BA                         74 ledoff:
      0003BA 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003BE 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003BF                         79 ledtoggle:
      0003BF A6 20            [ 1]   80     ld a,#LED2_MASK
      0003C1 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003C4 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003C7 81               [ 4]   83     ret 
                                     84 
      0003C8                         85 left_paren:
      0003C8 A6 20            [ 1]   86 	ld a,#SPACE 
      0003CA CD 08 DA         [ 4]   87 	call putc
      0003CD A6 28            [ 1]   88 	ld a,#'( 
      0003CF CD 08 DA         [ 4]   89 	call putc 	
      0003D2 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003D3                        100 prt_reg8:
      0003D3 88               [ 1]  101 	push a 
      0003D4 CD 09 37         [ 4]  102 	call puts 
      0003D7 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003D9 5F               [ 1]  104 	clrw x 
      0003DA 97               [ 1]  105 	ld xl,a 
      0003DB 35 10 00 0A      [ 1]  106 	mov base,#16
      0003DF CD 17 E1         [ 4]  107 	call prt_i16  
      0003E2 CD 03 C8         [ 4]  108 	call left_paren 
      0003E5 84               [ 1]  109 	pop a 
      0003E6 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003E7 97               [ 1]  111 	ld xl,a 
      0003E8 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003EC CD 17 E1         [ 4]  113 	call prt_i16  
      0003EF A6 29            [ 1]  114 	ld a,#') 
      0003F1 CD 08 DA         [ 4]  115 	call putc
      0003F4 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      0003F5                        126 prt_reg16: 
      0003F5 90 89            [ 2]  127 	pushw y 
      0003F7 CD 09 37         [ 4]  128 	call puts 
      0003FA 1E 01            [ 2]  129 	ldw x,(1,sp) 
      0003FC 35 10 00 0A      [ 1]  130 	mov base,#16 
      000400 CD 17 E1         [ 4]  131 	call prt_i16  
      000403 CD 03 C8         [ 4]  132 	call left_paren 
      000406 85               [ 2]  133 	popw x 
      000407 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00040B CD 17 E1         [ 4]  135 	call prt_i16  
      00040E A6 29            [ 1]  136 	ld a,#') 
      000410 CD 08 DA         [ 4]  137 	call putc
      000413 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000414                        152 print_registers:
      000414 8A               [ 1]  153 	push cc 
      000415                        154 	_vars VSIZE 
      000415 52 08            [ 2]    1     sub sp,#VSIZE 
      000417 6B 01            [ 1]  155 	ld (R_A,sp),a 
      000419 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00041B 17 04            [ 2]  157 	ldw (R_Y,sp),y
      00041D C6 00 0C         [ 1]  158 	ld a,acc24 
      000420 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000423 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000425 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      000427 AE 04 7E         [ 2]  162 	ldw x,#STATES
      00042A CD 09 37         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00042D AE 04 BB         [ 2]  165 	ldw x, #REG_PC
      000430 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000432 72 A2 00 03      [ 2]  167 	subw y,#3
      000436 CD 03 F5         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      000439 AE 04 C3         [ 2]  170 	ldw x,#REG_X
      00043C 16 02            [ 2]  171 	ldw y,(R_X,sp)
      00043E CD 03 F5         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000441 AE 04 BF         [ 2]  174 	ldw x,#REG_Y
      000444 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000446 CD 03 F5         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      000449 AE 04 C7         [ 2]  178 	ldw x,#REG_A
      00044C 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      00044E CD 03 D3         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000451 AE 04 CB         [ 2]  182 	ldw x,#REG_CC 
      000454 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000456 CD 03 D3         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      000459 AE 04 D0         [ 2]  186 	ldw x,#REG_SP
      00045C 90 96            [ 1]  187 	ldw y,sp 
      00045E 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000462 CD 03 F5         [ 4]  189 	call prt_reg16  
      000465 A6 0A            [ 1]  190 	ld a,#'\n' 
      000467 CD 08 DA         [ 4]  191 	call putc
      00046A 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00046C 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      00046E C7 00 0C         [ 1]  194 	ld acc24,a 
      000471 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000474 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000476 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      000478 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00047A                        199 	_drop VSIZE
      00047A 5B 08            [ 2]    1     addw sp,#VSIZE 
      00047C 86               [ 1]  200 	pop cc   	
      00047D 81               [ 4]  201 	ret
                                    202 
      00047E 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004BB 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004BF 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004C3 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004C7 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004CB 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004D0 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004D5                        217 parse_addr:
      0004D5 A6 20            [ 1]  218 	ld a,#SPACE 
      0004D7 CD 0E 9E         [ 4]  219 	call skip  	 
      0004DA 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004DE AE 16 E0         [ 2]  221 	ldw x,#pad 
      0004E1 CD 13 71         [ 4]  222 	call strcpy
      0004E4 AE 16 E0         [ 2]  223 	ldw x,#pad
      0004E7 CD 18 83         [ 4]  224 	call atoi24 	
      0004EA 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004EB                        244 cmd_itf:
      0004EB 8A               [ 1]  245 	push cc 
      0004EC                        246 	_vars VSIZE
      0004EC 52 0B            [ 2]    1     sub sp,#VSIZE 
      0004EE 6B 01            [ 1]  247 	ld (R_A,sp),a
      0004F0 C6 00 03         [ 1]  248 	ld a,count 
      0004F3 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      0004F5 C6 00 01         [ 1]  250 	ld a,in 
      0004F8 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      0004FA 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      0004FC 17 04            [ 2]  253 	ldw (R_Y,sp),y
      0004FE C6 00 0C         [ 1]  254 	ld a,acc24 
      000501 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000504 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000506 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      000508 72 5F 00 18      [ 1]  258 	clr farptr 
      00050C 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000510 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000514                        261 repl:
      000514 A6 0D            [ 1]  262 	ld a,#CR 
      000516 CD 08 DA         [ 4]  263 	call putc 
      000519 A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00051B CD 08 DA         [ 4]  265 	call putc
      00051E 72 5F 00 00      [ 1]  266 	clr in.w 
      000522 72 5F 00 01      [ 1]  267 	clr in 
      000526 CD 0A 3C         [ 4]  268 	call readln
      000529 90 AE 16 90      [ 2]  269 	ldw y,#tib  
      00052D 90 F6            [ 1]  270 	ld a,(y)
      00052F 27 E3            [ 1]  271 	jreq repl  
      000531 72 5C 00 01      [ 1]  272 	inc in 
      000535 CD 18 77         [ 4]  273 	call to_upper 
      000538 A1 51            [ 1]  274 	cp a,#'Q 
      00053A 26 26            [ 1]  275 	jrne test_p
      00053C                        276 repl_exit:
                                    277 ; restore original context 
      00053C 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      00053E 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000540 C7 00 0C         [ 1]  280 	ld acc24,a 
      000543 CF 00 0D         [ 2]  281 	ldw acc16,x
      000546 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      000548 C7 00 03         [ 1]  283 	ld count,a 
      00054B 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      00054D C7 00 01         [ 1]  285 	ld in,a 
      000550 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000552 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000554 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000556                        289 	_drop VSIZE
      000556 5B 0B            [ 2]    1     addw sp,#VSIZE 
      000558 86               [ 1]  290 	pop cc 
      000559 81               [ 4]  291 	ret  
      00055A                        292 invalid:
      00055A AE 05 C8         [ 2]  293 	ldw x,#invalid_cmd 
      00055D CD 09 37         [ 4]  294 	call puts 
      000560 20 B2            [ 2]  295 	jra repl 
      000562                        296 test_p:	
      000562 A1 50            [ 1]  297     cp a,#'P 
      000564 27 10            [ 1]  298 	jreq mem_peek
      000566 A1 53            [ 1]  299     cp a,#'S 
      000568 26 F0            [ 1]  300 	jrne invalid 
      00056A                        301 print_string:
      00056A CD 04 D5         [ 4]  302 	call parse_addr 	
      00056D CE 00 0D         [ 2]  303 	ldw x,acc16
      000570 CD 09 37         [ 4]  304 	call puts
      000573 CC 05 14         [ 2]  305 	jp repl 	
      000576                        306 mem_peek:
      000576 CD 04 D5         [ 4]  307 	call parse_addr 
      000579 C6 00 0C         [ 1]  308 	ld a, acc24 
      00057C CA 00 0D         [ 1]  309 	or a,acc16 
      00057F CA 00 0E         [ 1]  310 	or a,acc8 
      000582 26 02            [ 1]  311 	jrne 1$ 
      000584 20 0C            [ 2]  312 	jra peek_byte  
      000586 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      000589 CF 00 18         [ 2]  314 	ldw farptr,x 
      00058C C6 00 0E         [ 1]  315 	ld a,acc8 
      00058F C7 00 1A         [ 1]  316 	ld farptr+2,a 
      000592                        317 peek_byte:
      000592 CD 05 D7         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000595 A6 08            [ 1]  319 	ld a,#8 
      000597 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      000599 5F               [ 1]  321 	clrw x 
      00059A CD 05 F2         [ 4]  322 1$:	call fetchc  
      00059D 89               [ 2]  323 	pushw x 
      00059E C7 00 0E         [ 1]  324 	ld acc8,a 
      0005A1 5F               [ 1]  325 	clrw x 
      0005A2 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005A5 A6 90            [ 1]  327 	ld a,#16+128
      0005A7 CD 17 F8         [ 4]  328 	call prt_acc24
      0005AA 85               [ 2]  329 	popw x 
      0005AB 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005AD 26 EB            [ 1]  331 	jrne 1$ 
      0005AF A6 08            [ 1]  332 	ld a,#8 
      0005B1 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005B4 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005B7 4F               [ 1]  335 	clr a 
      0005B8 C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005BB C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005BE 4F               [ 1]  338 	clr a 
      0005BF C9 00 18         [ 1]  339 	adc a,farptr 
      0005C2 C7 00 18         [ 1]  340 	ld farptr,a 
      0005C5 CC 05 14         [ 2]  341 	jp repl  
                                    342 
      0005C8 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005D7                        348 print_farptr:
      0005D7 C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005DA C7 00 0E         [ 1]  350 	ld acc8,a 
      0005DD CE 00 18         [ 2]  351 	ldw x,farptr 
      0005E0 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005E3 5F               [ 1]  353 	clrw x 
      0005E4 A6 10            [ 1]  354 	ld a,#16 
      0005E6 CD 17 F8         [ 4]  355 	call prt_acc24
      0005E9 A6 20            [ 1]  356 	ld a,#SPACE 
      0005EB CD 08 DA         [ 4]  357 	call putc 
      0005EE CD 08 DA         [ 4]  358 	call putc 
      0005F1 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      0005F2                        370 fetchc: ; @C
      0005F2 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005F6 5C               [ 1]  372 	incw x
      0005F7 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      0005F8                        384 number:
      0005F8 CD 0E B1         [ 4]  385 	call get_token
      0005FB A1 84            [ 1]  386 	cp a,#TK_INTGR
      0005FD 27 03            [ 1]  387 	jreq 1$
      0005FF CC 16 35         [ 2]  388 	jp syntax_error
      000602 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000603                        404 show_row:
      000603 4D               [ 1]  405 	tnz a 
      000604 26 01            [ 1]  406 	jrne 1$
      000606 81               [ 4]  407 	ret 
      000607                        408 1$:	
      000607 89               [ 2]  409 	pushw x  
      000608 88               [ 1]  410 	push a 
      000609 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      00060D CD 17 E1         [ 4]  412 	call prt_i16 
      000610 A6 20            [ 1]  413 	ld a,#SPACE  
      000612 CD 08 DA         [ 4]  414 	call putc
      000615                        415 row_loop:
      000615 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      000617 F6               [ 1]  417 	ld a,(x)
      000618 5F               [ 1]  418 	clrw x 
      000619 97               [ 1]  419 	ld xl,a 
      00061A CD 17 E1         [ 4]  420 	call prt_i16 
      00061D 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      00061F 5C               [ 1]  422 	incw x 
      000620 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000622 0A 01            [ 1]  424 	dec (CNT,sp)
      000624 26 EF            [ 1]  425 	jrne row_loop
      000626                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000626 5B 03            [ 2]    1     addw sp,#VSIZE 
      000628 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00062C A6 0D            [ 1]  428 	ld a,#CR 
      00062E CD 08 DA         [ 4]  429 	call putc 
      000631 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000632                        443 hex_dump:
      000632 88               [ 1]  444 	push a 
      000633                        445 	_vars VSIZE
      000633 52 04            [ 2]    1     sub sp,#VSIZE 
      000635 C6 00 0A         [ 1]  446 	ld a,base
      000638 6B 03            [ 1]  447 	ld (BASE,sp),a 
      00063A 35 10 00 0A      [ 1]  448 	mov base,#16
      00063E C6 00 23         [ 1]  449 	ld a,tab_width 
      000641 6B 04            [ 1]  450 	ld (TABW,sp),a
      000643 A6 0D            [ 1]  451 	ld a,#CR 
      000645 CD 08 DA         [ 4]  452 	call putc 
      000648 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      00064A A6 10            [ 1]  454 	ld a,#16
      00064C 90 A3 00 10      [ 2]  455 	cpw y,#16
      000650 2A 02            [ 1]  456 	jrpl 2$
      000652 90 9F            [ 1]  457 	ld a,yl
      000654                        458 2$: 	
      000654 CD 06 03         [ 4]  459 	call show_row 
      000657 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      000659 72 A2 00 10      [ 2]  461 	subw y,#16 
      00065D 90 A3 00 01      [ 2]  462 	cpw y,#1
      000661 2A E5            [ 1]  463 	jrpl 1$
      000663 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000665 C7 00 0A         [ 1]  465 	ld base,a
      000668 7B 04            [ 1]  466 	ld a,(TABW,sp)
      00066A C7 00 23         [ 1]  467 	ld tab_width,a 
      00066D                        468 	_drop VSIZE
      00066D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00066F 84               [ 1]  469 	pop a 
      000670 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000671                         45 unlock_eeprom:
      000671 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000676 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      00067A 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      00067E 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000682 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000686 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00068B 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00068C                         62 unlock_flash:
      00068C 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      000691 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000695 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000699 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00069D 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006A1 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006A6 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006A7                         76 row_erase:
      0006A7 88               [ 1]   77 	push a 
      0006A8 90 89            [ 2]   78 	pushw y 
      0006AA 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006AE 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006B2 4F               [ 1]   81 	clr a 
      0006B3 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0006B5 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006B9 90 5C            [ 1]   84     incw y
      0006BB 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006BF 90 5C            [ 1]   86     incw y
      0006C1 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006C5 90 5C            [ 1]   88     incw y
      0006C7 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006CB 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006D0 90 85            [ 2]   91 	popw y 
      0006D2 84               [ 1]   92 	pop a 
      0006D3 81               [ 4]   93 	ret
      0006D4                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006D4                         97 move_erase_to_ram:
      0006D4 89               [ 2]   98 	pushw x 
      0006D5 90 89            [ 2]   99 	pushw y 
      0006D7 AE 06 D4         [ 2]  100 	ldw x,#row_erase_end 
      0006DA 1D 06 A7         [ 2]  101 	subw x,#row_erase
      0006DD CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006E0 AE 16 90         [ 2]  103 	ldw x,#tib 
      0006E3 90 AE 06 A7      [ 2]  104 	ldw y,#row_erase 
      0006E7 CD 13 81         [ 4]  105 	call move
      0006EA 90 85            [ 2]  106 	popw y
      0006EC 85               [ 2]  107 	popw x
      0006ED 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      0006EE                        123 program_row:
      0006EE 88               [ 1]  124 	push a 
      0006EF 90 89            [ 2]  125 	pushw y 
      0006F1 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      0006F3 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      0006F7 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      0006FB 90 5F            [ 1]  130 	clrw y 
      0006FD F6               [ 1]  131 1$:	ld a,(x)
      0006FE 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000702 5C               [ 1]  133 	incw x 
      000703 90 5C            [ 1]  134 	incw y 
      000705 0A 01            [ 1]  135 	dec (BCNT,sp)
      000707 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000709 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00070E                        139 	_drop 1 
      00070E 5B 01            [ 2]    1     addw sp,#1 
      000710 90 85            [ 2]  140 	popw y 
      000712 84               [ 1]  141 	pop a 
      000713 81               [ 4]  142 	ret 
      000714                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000714                        149 move_prg_to_ram:
      000714 89               [ 2]  150 	pushw x 
      000715 90 89            [ 2]  151 	pushw y 
      000717 AE 07 14         [ 2]  152 	ldw x,#program_row_end 
      00071A 1D 06 EE         [ 2]  153 	subw x,#program_row 
      00071D CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000720 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000723 90 AE 06 EE      [ 2]  156 	ldw y,#program_row ; source address 
      000727 CD 13 81         [ 4]  157 	call move
      00072A 90 85            [ 2]  158 	popw y 
      00072C 85               [ 2]  159 	popw x  
      00072D 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00072E                        169 write_buffer:
      00072E 89               [ 2]  170 	pushw x 
      00072F 72 5D 00 18      [ 1]  171 	tnz farptr 
      000733 26 0D            [ 1]  172 	jrne to_flash 
      000735 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000738 A3 36 00         [ 2]  174 	cpw x,#app_space  
      00073B 24 05            [ 1]  175 	jruge to_flash 
      00073D                        176 to_eeprom:
      00073D CD 06 71         [ 4]  177 	call unlock_eeprom
      000740 20 03            [ 2]  178 	jra do_programming
      000742                        179 to_flash:
      000742 CD 06 8C         [ 4]  180 	call unlock_flash
      000745                        181 do_programming:
      000745 85               [ 2]  182 	popw x 
      000746 CD 16 90         [ 4]  183 	call tib
      000749 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      00074D 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000751 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000752                        197 block_erase:
      000752 89               [ 2]  198 	pushw x 
      000753 C6 00 18         [ 1]  199 	ld a,farptr 
      000756 26 14            [ 1]  200 	jrne erase_flash
      000758 CE 00 19         [ 2]  201 	ldw x,farptr+1
      00075B A3 36 00         [ 2]  202 	cpw x,#app_space 
      00075E 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000760 CD 06 71         [ 4]  205 	call unlock_eeprom 
      000763 CD 16 90         [ 4]  206 	call tib 
      000766 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00076A 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00076C                        210 erase_flash:
      00076C CD 06 8C         [ 4]  211 	call unlock_flash 
      00076F CD 16 90         [ 4]  212 	call tib 
      000772 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000776                        214 erase_exit: 
      000776 85               [ 2]  215 	popw x 
      000777 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      000778                        232 write_byte:
      000778 90 89            [ 2]  233 	pushw y
      00077A                        234 	_vars VSIZE
      00077A 52 02            [ 2]    1     sub sp,#VSIZE 
      00077C 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      00077E 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000780 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000784 72 5D 00 18      [ 1]  240 	tnz farptr 
      000788 26 14            [ 1]  241 	jrne write_flash
      00078A 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      00078E 24 0E            [ 1]  243     jruge write_flash
      000790 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000794 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000796 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      00079A 22 51            [ 1]  247 	jrugt write_exit
      00079C 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      00079E                        250 write_flash:
      00079E CD 06 8C         [ 4]  251 	call unlock_flash 
      0007A1 9B               [ 1]  252 1$:	sim 
      0007A2 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007A4 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007A8 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007AD 9A               [ 1]  256     rim 
      0007AE 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007B2 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007B4                        260 write_eeprom:
      0007B4 CD 06 71         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007B7 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007BB 2B 08            [ 1]  264 	jrmi 1$
      0007BD 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007C1 2A 02            [ 1]  266 	jrpl 1$
      0007C3 03 02            [ 1]  267 	cpl (OPT,sp)
      0007C5                        268 1$: 
      0007C5 0D 02            [ 1]  269     tnz (OPT,sp)
      0007C7 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007C9 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007CD 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007D1                        274 2$: 
      0007D1 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007D3 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007D7 0D 02            [ 1]  277     tnz (OPT,sp)
      0007D9 27 08            [ 1]  278     jreq 3$
      0007DB 5C               [ 1]  279     incw x
      0007DC 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007DE 43               [ 1]  281     cpl a
      0007DF 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007E3 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007E8 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      0007ED                        285 write_exit:
      0007ED 5C               [ 1]  286 	incw x 
      0007EE CD 08 4C         [ 4]  287 	call incr_farptr
      0007F1                        288 	_drop VSIZE 
      0007F1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0007F3 90 85            [ 2]  289 	popw y
      0007F5 81               [ 4]  290     ret
                                    291 
                                    292 ;--------------------------------------------
                                    293 ; write a data block to eeprom or flash 
                                    294 ; the block must be erased before 
                                    295 ; using this routine.
                                    296 ; input:
                                    297 ;   Y        source address   
                                    298 ;   X        array index  destination  farptr[x]
                                    299 ;   BSIZE    block size bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                    300 ;   farptr   write address , byte* 
                                    301 ; output:
                                    302 ;	X 		after last byte written 
                                    303 ;   Y 		after last byte read 
                                    304 ;  farptr   point after block
                                    305 ;---------------------------------------------
      0007F6                        306 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      0007F6                        307 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    308 	; local var 
                           000001   309 	XSAVE=1 
                           000002   310 	VSIZE=2 
      0007F6                        311 write_block::
      0007F6 88               [ 1]  312 	push a 
      0007F7                        313 	_vars VSIZE
      0007F7 52 02            [ 2]    1     sub sp,#VSIZE 
      0007F9 1F 01            [ 2]  314 	ldw (XSAVE,sp),x 
      0007FB 1E 06            [ 2]  315 	ldw x,(BSIZE,sp) 
      0007FD 27 13            [ 1]  316 	jreq 9$
      0007FF 1E 01            [ 2]  317 1$:	ldw x,(XSAVE,sp)
      000801 90 F6            [ 1]  318 	ld a,(y)
      000803 CD 07 78         [ 4]  319 	call write_byte 
      000806 5C               [ 1]  320 	incw x 
      000807 90 5C            [ 1]  321 	incw y 
      000809 1F 01            [ 2]  322 	ldw (XSAVE,sp),x
      00080B 1E 06            [ 2]  323 	ldw x,(BSIZE,sp)
      00080D 5A               [ 2]  324 	decw x
      00080E 1F 06            [ 2]  325 	ldw (BSIZE,sp),x 
      000810 26 ED            [ 1]  326 	jrne 1$
      000812                        327 9$:
      000812 1E 01            [ 2]  328 	ldw x,(XSAVE,sp)
      000814 CD 08 4C         [ 4]  329 	call incr_farptr
      000817                        330 	_drop VSIZE
      000817 5B 02            [ 2]    1     addw sp,#VSIZE 
      000819 84               [ 1]  331 	pop a 
      00081A 81               [ 4]  332 	ret 
                                    333 
                                    334 
                                    335 ;------------------------------------
                                    336 ; write n bytes to flash | eeprom 
                                    337 ; if the number of bytes is 
                                    338 ; >=128 it is faster to 
                                    339 ; use write_block
                                    340 ; the bytes are written one by 
                                    341 ; one and auto erased if required. 
                                    342 ; input:
                                    343 ;    farptr    dest address 
                                    344 ;    X         src address 
                                    345 ;    A         count 
                                    346 ; output:
                                    347 ;    none   
                                    348 ;----------------------------------
      00081B                        349 write_nbytes:
      00081B 90 89            [ 2]  350 	pushw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00081D 88               [ 1]  351 	push a 
      00081E 90 93            [ 1]  352 	ldw y,x
      000820 5F               [ 1]  353 	clrw x 
      000821                        354 1$:  
      000821 90 F6            [ 1]  355 	ld a,(y)
      000823 90 5C            [ 1]  356 	incw y
      000825 CD 07 78         [ 4]  357 	call write_byte 
      000828 5C               [ 1]  358 	incw x 
      000829 0A 01            [ 1]  359 	dec (1,sp)  
      00082B 26 F4            [ 1]  360 	jrne 1$ 
      00082D 84               [ 1]  361 9$: pop a 
      00082E 90 85            [ 2]  362 	popw y 
      000830 81               [ 4]  363 	ret 
                                    364 
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 ;;;  flash memory operations
                                    367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    368 
                                    369 ;--------------------------
                                    370 ; align farptr to BLOCK_SIZE 
                                    371 ;---------------------------
      000831                        372 row_align:
      000831 A6 7F            [ 1]  373 	ld a,#0x7f 
      000833 C4 00 1A         [ 1]  374 	and a,farptr+2 
      000836 27 13            [ 1]  375 	jreq 1$ 
      000838 CE 00 19         [ 2]  376 	ldw x,farptr+1 
      00083B 1C 00 80         [ 2]  377 	addw x,#BLOCK_SIZE 
      00083E 24 04            [ 1]  378 	jrnc 0$
      000840 72 5C 00 18      [ 1]  379 	inc farptr 
      000844 9F               [ 1]  380 0$: ld a,xl 
      000845 A4 80            [ 1]  381 	and a,#0x80
      000847 97               [ 1]  382 	ld xl,a
      000848 CF 00 19         [ 2]  383 	ldw farptr+1,x  	
      00084B 81               [ 4]  384 1$:	ret
                                    385 
                                    386 ;--------------------
                                    387 ; input:
                                    388 ;   X     increment 
                                    389 ; output:
                                    390 ;   farptr  incremented 
                                    391 ;---------------------
      00084C                        392 incr_farptr:
      00084C 72 BB 00 19      [ 2]  393 	addw x,farptr+1 
      000850 24 04            [ 1]  394 	jrnc 1$
      000852 72 5C 00 18      [ 1]  395 	inc farptr 
      000856 CF 00 19         [ 2]  396 1$:	ldw farptr+1,x  
      000859 81               [ 4]  397 	ret 
                                    398 
                                    399 ;-----------------------------------
                                    400 ; scan block for non zero byte 
                                    401 ; block are 128 bytes 
                                    402 ; input:
                                    403 ;    farptr     address block  
                                    404 ; output:
                                    405 ;     A     0 cleared, other not cleared  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    406 ;-----------------------------------
      00085A                        407 scan_block:
      00085A 5F               [ 1]  408 	clrw x 
      00085B 92 AF 00 18      [ 5]  409 1$: ldf a,([farptr],x) 
      00085F 26 06            [ 1]  410 	jrne 2$
      000861 5C               [ 1]  411 	incw x 
      000862 A3 00 80         [ 2]  412 	cpw x,#BLOCK_SIZE 
      000865 25 F4            [ 1]  413 	jrult 1$ 
      000867 81               [ 4]  414 2$:	ret 
                                    415 
                                    416 
                                    417 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      000868                         66 Uart1RxHandler: ; console receive char 
      000868 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      00086D C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000870 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000872 26 06            [ 1]   70 	jrne 2$
      000874 CD 08 DA         [ 4]   71 	call putc 
      000877 CC 00 49         [ 2]   72 	jp user_interrupted
      00087A                         73 2$:
      00087A A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      00087C 26 03            [ 1]   75 	jrne 3$
      00087E CC 00 B5         [ 2]   76 	jp cold_start 	
      000881 88               [ 1]   77 3$:	push a 
      000882 A6 26            [ 1]   78 	ld a,#rx1_queue 
      000884 CB 00 2F         [ 1]   79 	add a,rx1_tail 
      000887 5F               [ 1]   80 	clrw x 
      000888 97               [ 1]   81 	ld xl,a 
      000889 84               [ 1]   82 	pop a 
      00088A F7               [ 1]   83 	ld (x),a 
      00088B C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      00088E 4C               [ 1]   85 	inc a 
      00088F A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      000891 C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      000894 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      000895                         97 uart1_init:
      000895 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000899 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      00089D 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008A1 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008A5                        103 uart1_set_baud: 
      0008A5 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008A6 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008A8 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008AB 27 0A            [ 1]  109 	jreq 2$ 
      0008AD                        110 1$: ; 8 Mhz 	
      0008AD 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008B1 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008B5 20 08            [ 2]  113 	jra 3$
      0008B7                        114 2$: ; 16 Mhz 	
      0008B7 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008BB 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008BF                        117 3$:
      0008BF 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008C3 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008C7 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008CB 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0008D0 72 5F 00 2E      [ 1]  122     clr rx1_head 
      0008D4 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      0008D8 84               [ 1]  124 	pop a  
      0008D9 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0008DA                        133 putc:: ; console output always on UART1
      0008DA                        134 uart1_putc:: 
      0008DA 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      0008DF C7 52 31         [ 1]  136 	ld UART1_DR,a 
      0008E2 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      0008E3                        148 qgetc::
      0008E3                        149 uart1_qgetc::
      0008E3 C6 00 2E         [ 1]  150 	ld a,rx1_head 
      0008E6 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      0008E9 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      0008EA                        161 getc:: ;console input
      0008EA                        162 uart1_getc::
      0008EA CD 08 E3         [ 4]  163 	call uart1_qgetc
      0008ED 27 FB            [ 1]  164 	jreq uart1_getc 
      0008EF 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      0008F0 A6 26            [ 1]  167 	ld a,#rx1_queue
      0008F2 CB 00 2E         [ 1]  168 	add a,rx1_head 
      0008F5 5F               [ 1]  169 	clrw x  
      0008F6 97               [ 1]  170 	ld xl,a 
      0008F7 F6               [ 1]  171 	ld a,(x)
      0008F8 88               [ 1]  172 	push a
      0008F9 C6 00 2E         [ 1]  173 	ld a,rx1_head 
      0008FC 4C               [ 1]  174 	inc a 
      0008FD A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      0008FF C7 00 2E         [ 1]  176 	ld rx1_head,a 
      000902 84               [ 1]  177 	pop a  
      000903 85               [ 2]  178 	popw x
      000904 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000905 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000911                        207 get_escape:
      000911 CD 08 EA         [ 4]  208     call getc 
      000914 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000916 27 02            [ 1]  210     jreq 1$
      000918 4F               [ 1]  211     clr a
      000919 81               [ 4]  212     ret
      00091A CD 08 EA         [ 4]  213 1$: call getc 
      00091D AE 09 05         [ 2]  214     ldw x,#convert_table
      000920                        215 2$:
      000920 F1               [ 1]  216     cp a,(x)
      000921 27 08            [ 1]  217     jreq 4$
      000923 1C 00 02         [ 2]  218     addw x,#2
      000926 7D               [ 1]  219     tnz (x)
      000927 26 F7            [ 1]  220     jrne 2$
      000929 4F               [ 1]  221     clr a
      00092A 81               [ 4]  222     ret 
      00092B 5C               [ 1]  223 4$: incw x 
      00092C F6               [ 1]  224     ld a,(x)
      00092D A1 84            [ 1]  225     cp a,#SUP
      00092F 26 05            [ 1]  226     jrne 5$
      000931 88               [ 1]  227     push a 
      000932 CD 08 EA         [ 4]  228     call getc
      000935 84               [ 1]  229     pop a 
      000936                        230 5$:
      000936 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      000937                        241 puts::
      000937 F6               [ 1]  242     ld a,(x)
      000938 27 06            [ 1]  243 	jreq 1$
      00093A CD 08 DA         [ 4]  244 	call putc 
      00093D 5C               [ 1]  245 	incw x 
      00093E 20 F7            [ 2]  246 	jra puts 
      000940 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000941                        258 bksp:
      000941 A6 08            [ 1]  259 	ld a,#BS 
      000943 CD 08 DA         [ 4]  260 	call putc 
      000946 A6 20            [ 1]  261 	ld a,#SPACE 
      000948 CD 08 DA         [ 4]  262 	call putc 
      00094B A6 08            [ 1]  263 	ld a,#BS 
      00094D CD 08 DA         [ 4]  264 	call putc 
      000950 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000951                        274 delete_nchar:
      000951 88               [ 1]  275 	push a 
      000952 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000954 27 07            [ 1]  277 	jreq 1$
      000956 CD 09 41         [ 4]  278 	call bksp 
      000959 0A 01            [ 1]  279 	dec (1,sp)
      00095B 20 F5            [ 2]  280 	jra 0$
      00095D 84               [ 1]  281 1$:	pop a 
      00095E 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      00095F                        290 send_escape:
      00095F A6 1B            [ 1]  291 	ld a,#ESC 
      000961 CD 08 DA         [ 4]  292 	call putc 
      000964 A6 5B            [ 1]  293 	ld a,#'[
      000966 CD 08 DA         [ 4]  294 	call putc 
      000969 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00096A                        311 send_parameter:
      00096A 89               [ 2]  312 	pushw x 
      00096B 5F               [ 1]  313 	clrw x 
      00096C 97               [ 1]  314 	ld xl,a 
      00096D A6 0A            [ 1]  315 	ld a,#10 
      00096F 62               [ 2]  316 	div x,a 
      000970 95               [ 1]  317 	ld xh,a 
      000971 9F               [ 1]  318 	ld a,xl
      000972 4D               [ 1]  319     tnz a 
      000973 27 0B            [ 1]  320     jreq 2$
      000975 A1 09            [ 1]  321 	cp a,#9 
      000977 23 02            [ 2]  322 	jrule 1$
      000979 A6 09            [ 1]  323 	ld a,#9
      00097B                        324 1$:
      00097B AB 30            [ 1]  325 	add a,#'0 
      00097D CD 08 DA         [ 4]  326 	call putc
      000980 9E               [ 1]  327 2$:	ld a,xh 
      000981 AB 30            [ 1]  328 	add a,#'0
      000983 CD 08 DA         [ 4]  329 	call putc 
      000986 85               [ 2]  330 	popw x 
      000987 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      000988                        344 move_left:
      000988 88               [ 1]  345 	push a 
      000989 CD 09 5F         [ 4]  346 	call send_escape
      00098C 84               [ 1]  347     pop a
      00098D CD 09 6A         [ 4]  348 	call send_parameter 
      000990 A6 44            [ 1]  349 	ld a,#'D 
      000992 CD 08 DA         [ 4]  350 	call putc 
      000995 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      000996                        362 move_right:
      000996 88               [ 1]  363 	push a 
      000997 CD 09 5F         [ 4]  364 	call send_escape
      00099A 84               [ 1]  365     pop a
      00099B CD 09 6A         [ 4]  366 	call send_parameter 
      00099E A6 43            [ 1]  367 	ld a,#'C 
      0009A0 CD 08 DA         [ 4]  368 	call putc 
      0009A3 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009A4                        379 spaces::
      0009A4 A6 20            [ 1]  380 	ld a,#SPACE 
      0009A6 5D               [ 2]  381 1$:	tnzw x
      0009A7 27 06            [ 1]  382 	jreq 9$
      0009A9 CD 08 DA         [ 4]  383 	call putc 
      0009AC 5A               [ 2]  384 	decw x
      0009AD 20 F7            [ 2]  385 	jra 1$
      0009AF                        386 9$: 
      0009AF 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   tib     updated 
                                    399 ;   Y       updated  
                                    400 ;-------------------------
                           000001   401 	IPOS=1
                           000002   402 	KCHAR=2 
                           000003   403     LLEN=3 
                           000003   404 	VSIZE=3 
      0009B0                        405 insert_char: 
      0009B0                        406 	_vars VSIZE 
      0009B0 52 03            [ 2]    1     sub sp,#VSIZE 
      0009B2 6B 02            [ 1]  407     ld (KCHAR,sp),a 
      0009B4 9E               [ 1]  408     ld a,xh 
      0009B5 6B 01            [ 1]  409 	ld (IPOS,sp),a
      0009B7 9F               [ 1]  410     ld a,xl 
      0009B8 6B 03            [ 1]  411     ld (LLEN,sp),a  
      0009BA 93               [ 1]  412     ldw x,y
      0009BB 5C               [ 1]  413     incw x 
      0009BC 7B 03            [ 1]  414     ld a,(LLEN,sp)
      0009BE 10 01            [ 1]  415     sub a,(IPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0009C0 4C               [ 1]  416     inc a 
      0009C1 C7 00 0E         [ 1]  417     ld acc8,a 
      0009C4 72 5F 00 0D      [ 1]  418     clr acc16
      0009C8 CD 13 81         [ 4]  419     call move
      0009CB 90 AE 16 90      [ 2]  420     ldw y,#tib 
      0009CF 7B 01            [ 1]  421     ld a,(IPOS,sp)
      0009D1 C7 00 0E         [ 1]  422     ld acc8,a 
      0009D4 72 B9 00 0D      [ 2]  423     addw y,acc16 
      0009D8 7B 02            [ 1]  424     ld a,(KCHAR,sp)
      0009DA 90 F7            [ 1]  425     ld (y),a
      0009DC 90 5C            [ 1]  426     incw y  
      0009DE 7B 01            [ 1]  427     ld a,(IPOS,sp)
      0009E0 CD 09 88         [ 4]  428     call move_left
      0009E3 AE 16 90         [ 2]  429     ldw x,#tib 
      0009E6 CD 09 37         [ 4]  430     call puts 
      0009E9 7B 03            [ 1]  431     ld a,(LLEN,sp)
      0009EB 10 01            [ 1]  432     sub a,(IPOS,sp) 
      0009ED CD 09 88         [ 4]  433     call move_left 
      0009F0                        434 	_drop VSIZE 
      0009F0 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009F2 81               [ 4]  435 	ret 
                                    436 
                                    437 
                                    438 ;--------------------------
                                    439 ; delete character under cursor
                                    440 ; input:
                                    441 ;   A       line length   
                                    442 ;   xl      delete position
                                    443 ;   Y       line pointer 
                                    444 ;-------------------------
                           000001   445 	CPOS=1
                           000002   446 	LLEN=2
                           000002   447 	VSIZE=2
      0009F3                        448 delete_under:
      0009F3                        449 	_vars VSIZE 
      0009F3 52 02            [ 2]    1     sub sp,#VSIZE 
      0009F5 6B 02            [ 1]  450     ld (LLEN,sp),a 
      0009F7 9F               [ 1]  451     ld a,xl 
      0009F8 6B 01            [ 1]  452     ld (CPOS,sp),a 
      0009FA 93               [ 1]  453     ldw x,y ; move destination
      0009FB 90 5C            [ 1]  454     incw y  ; move source 
      0009FD 7B 02            [ 1]  455     ld a,(LLEN,sp)
      0009FF 10 01            [ 1]  456     sub a,(CPOS,sp)
      000A01 4C               [ 1]  457     inc a ; move including zero at end.
      000A02 C7 00 0E         [ 1]  458     ld acc8,a 
      000A05 72 5F 00 0D      [ 1]  459     clr acc16 
      000A09 CD 13 81         [ 4]  460 	call move 
      000A0C 90 AE 16 90      [ 2]  461     ldw y,#tib 
      000A10 7B 01            [ 1]  462     ld a,(CPOS,sp)
      000A12 C7 00 0E         [ 1]  463     ld acc8,a 
      000A15 72 B9 00 0D      [ 2]  464     addw y,acc16 
      000A19 93               [ 1]  465     ldw x,y 
      000A1A CD 09 37         [ 4]  466     call puts 
      000A1D A6 20            [ 1]  467     ld a,#SPACE  
      000A1F CD 08 DA         [ 4]  468     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      000A22 7B 02            [ 1]  469     ld a,(LLEN,sp)
      000A24 10 01            [ 1]  470     sub a,(CPOS,sp)
      000A26 CD 09 88         [ 4]  471     call move_left 
      000A29 0A 02            [ 1]  472     dec (LLEN,sp)
      000A2B                        473 	_drop VSIZE 
      000A2B 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A2D 81               [ 4]  474 	ret 
                                    475 
                                    476 ;-----------------------------
                                    477 ; send ANSI sequence to delete
                                    478 ; whole line. Cursor position
                                    479 ; is not updated.
                                    480 ; ANSI: ESC[2K
                                    481 ; input:
                                    482 ;   none
                                    483 ; output:
                                    484 ;   none 
                                    485 ;-----------------------------
      000A2E                        486 delete_line:
      000A2E CD 09 5F         [ 4]  487     call send_escape
      000A31 A6 32            [ 1]  488 	ld a,#'2
      000A33 CD 08 DA         [ 4]  489 	call putc 
      000A36 A6 4B            [ 1]  490 	ld a,#'K 
      000A38 CD 08 DA         [ 4]  491 	call putc 
      000A3B 81               [ 4]  492 	ret 
                                    493 
                                    494 
                                    495 
                                    496 ;------------------------------------
                                    497 ; read a line of text from terminal
                                    498 ;  control keys: 
                                    499 ;    BS   efface caractère à gauche 
                                    500 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    501 ;    CTRL_R  edit previous line.
                                    502 ;    CTRL_D  delete line  
                                    503 ;    HOME  go to start of line  
                                    504 ;    KEY_END  go to end of line 
                                    505 ;    ARROW_LEFT  move cursor left 
                                    506 ;    ARROW_RIGHT  move cursor right 
                                    507 ;    CTRL_O  toggle between insert/overwrite
                                    508 ; input:
                                    509 ;	none
                                    510 ; local variable on stack:
                                    511 ;	LL  line length
                                    512 ;   RXCHAR last received character 
                                    513 ; output:
                                    514 ;   text in tib  buffer
                                    515 ;   count  line length 
                                    516 ;------------------------------------
                                    517 	; local variables
                           000001   518 	LL_HB=1  ; line length high byte 
                           000001   519 	RXCHAR = 1 ; last char received
                           000002   520 	LL = 2  ; accepted line length
                           000003   521 	CPOS=3  ; cursor position 
                           000004   522 	OVRWR=4 ; overwrite flag 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                           000004   523 	VSIZE=4 
      000A3C                        524 readln::
      000A3C 90 89            [ 2]  525 	pushw y 
      000A3E                        526 	_vars VSIZE 
      000A3E 52 04            [ 2]    1     sub sp,#VSIZE 
      000A40 5F               [ 1]  527 	clrw x 
      000A41 1F 02            [ 2]  528 	ldw (LL,sp),x 
      000A43 1F 03            [ 2]  529 	ldw (CPOS,sp),x 
      000A45 03 04            [ 1]  530 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A47 90 AE 16 90      [ 2]  531  	ldw y,#tib ; terminal input buffer
      000A4B                        532 readln_loop:
      000A4B CD 08 EA         [ 4]  533 	call getc
      000A4E 6B 01            [ 1]  534 	ld (RXCHAR,sp),a
      000A50 A1 1B            [ 1]  535     cp a,#ESC 
      000A52 26 05            [ 1]  536     jrne 0$
      000A54 CD 09 11         [ 4]  537     call get_escape 
      000A57 6B 01            [ 1]  538     ld (RXCHAR,sp),a 
      000A59 A1 0D            [ 1]  539 0$:	cp a,#CR
      000A5B 26 03            [ 1]  540 	jrne 1$
      000A5D CC 0B D8         [ 2]  541 	jp readln_quit
      000A60 A1 0A            [ 1]  542 1$:	cp a,#LF 
      000A62 26 03            [ 1]  543 	jrne 2$ 
      000A64 CC 0B D8         [ 2]  544 	jp readln_quit
      000A67                        545 2$:
      000A67 A1 08            [ 1]  546 	cp a,#BS
      000A69 26 12            [ 1]  547 	jrne 3$
                                    548 ; delete left 
      000A6B 0D 03            [ 1]  549     tnz (CPOS,sp)
      000A6D 27 DC            [ 1]  550     jreq readln_loop 
      000A6F A6 01            [ 1]  551     ld a,#1 
      000A71 CD 09 88         [ 4]  552     call move_left
      000A74 0A 03            [ 1]  553     dec (CPOS,sp)
      000A76 90 5A            [ 2]  554     decw y 
      000A78 7B 03            [ 1]  555     ld a,(CPOS,sp) 
      000A7A CC 0B 84         [ 2]  556     jp 12$
      000A7D                        557 3$:
      000A7D A1 04            [ 1]  558 	cp a,#CTRL_D
      000A7F 26 1A            [ 1]  559 	jrne 4$
                                    560 ;delete line 
      000A81 CD 0A 2E         [ 4]  561 	call delete_line 
      000A84 7B 03            [ 1]  562     ld a,(CPOS,sp)
      000A86 4C               [ 1]  563     inc a 
      000A87 CD 09 88         [ 4]  564     call move_left 
      000A8A A6 3E            [ 1]  565 	ld a,#'> 
      000A8C CD 08 DA         [ 4]  566 	call putc 
      000A8F 90 AE 16 90      [ 2]  567 	ldw y,#tib
      000A93 90 7F            [ 1]  568 	clr (y)
      000A95 0F 02            [ 1]  569 	clr (LL,sp)
      000A97 0F 03            [ 1]  570 	clr (CPOS,sp)
      000A99 20 B0            [ 2]  571 	jra readln_loop
      000A9B                        572 4$:
      000A9B A1 12            [ 1]  573 	cp a,#CTRL_R 
      000A9D 26 1E            [ 1]  574 	jrne 5$
                                    575 ;repeat line 
      000A9F 0D 02            [ 1]  576 	tnz (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000AA1 26 A8            [ 1]  577 	jrne readln_loop
      000AA3 90 AE 16 90      [ 2]  578 	ldw y,#tib 
      000AA7 93               [ 1]  579 	ldw x,y
      000AA8 CD 13 55         [ 4]  580 	call strlen
      000AAB 4D               [ 1]  581 	tnz a  
      000AAC 27 9D            [ 1]  582 	jreq readln_loop
      000AAE 6B 02            [ 1]  583 	ld (LL,sp),a 
      000AB0 6B 03            [ 1]  584     ld (CPOS,sp),a
      000AB2 93               [ 1]  585 	ldw x,y  
      000AB3 CD 09 37         [ 4]  586 	call puts
      000AB6 0F 01            [ 1]  587 	clr (LL_HB,sp)
      000AB8 72 F9 01         [ 2]  588 	addw y,(LL_HB,sp)
      000ABB 20 8E            [ 2]  589 	jra readln_loop 
      000ABD                        590 5$:
      000ABD A1 05            [ 1]  591 	cp a,#CTRL_E 
      000ABF 26 41            [ 1]  592 	jrne 6$
                                    593 ;edit line number 
      000AC1 AE 16 90         [ 2]  594 	ldw x,#tib 
      000AC4 CD 18 83         [ 4]  595 	call atoi24
      000AC7 CE 00 0D         [ 2]  596 	ldw x,acc16
      000ACA CD 0C 14         [ 4]  597 	call search_lineno
      000ACD 5D               [ 2]  598 	tnzw x 
      000ACE 26 03            [ 1]  599 	jrne 51$
                                    600 ;	clr (LL,sp)
                                    601 ;	ldw y,#tib
                                    602 ;   clr (y) 	
      000AD0 CC 0B D8         [ 2]  603 	jp readln_quit  
      000AD3                        604 51$:
      000AD3 CF 00 04         [ 2]  605 	ldw basicptr,x
      000AD6 E6 02            [ 1]  606 	ld a,(2,x)
      000AD8 C7 00 03         [ 1]  607 	ld count,a 
      000ADB 90 AE 16 90      [ 2]  608 	ldw y,#tib 
      000ADF CD 11 71         [ 4]  609 	call decompile 
      000AE2 0F 01            [ 1]  610 	clr (LL_HB,sp)
      000AE4 A6 0D            [ 1]  611 	ld a,#CR 
      000AE6 CD 08 DA         [ 4]  612 	call putc 
      000AE9 A6 3E            [ 1]  613 	ld a,#'>
      000AEB CD 08 DA         [ 4]  614 	call putc
      000AEE AE 16 90         [ 2]  615     ldw x,#tib  
      000AF1 CD 13 55         [ 4]  616 	call strlen 
      000AF4 6B 02            [ 1]  617 	ld (LL,sp),a 
      000AF6 CD 09 37         [ 4]  618 	call puts 
      000AF9 90 93            [ 1]  619 	ldw y,x
      000AFB 7B 02            [ 1]  620     ld a,(LL,sp)
      000AFD 6B 03            [ 1]  621     ld (CPOS,sp),a  
      000AFF CC 0A 4B         [ 2]  622 	jp readln_loop
      000B02                        623 6$:
      000B02 A1 81            [ 1]  624 	cp a,#ARROW_RIGHT
      000B04 26 15            [ 1]  625    	jrne 7$ 
                                    626 ; right arrow
      000B06 7B 03            [ 1]  627 	ld a,(CPOS,sp)
      000B08 11 02            [ 1]  628     cp a,(LL,sp)
      000B0A 2B 03            [ 1]  629     jrmi 61$
      000B0C CC 0A 4B         [ 2]  630     jp readln_loop 
      000B0F                        631 61$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000B0F A6 01            [ 1]  632     ld a,#1 
      000B11 CD 09 96         [ 4]  633 	call move_right 
      000B14 0C 03            [ 1]  634 	inc (CPOS,sp)
      000B16 90 5C            [ 1]  635     incw y 
      000B18 CC 0A 4B         [ 2]  636     jp readln_loop 
      000B1B A1 80            [ 1]  637 7$: cp a,#ARROW_LEFT  
      000B1D 26 13            [ 1]  638 	jrne 8$
                                    639 ; left arrow 
      000B1F 0D 03            [ 1]  640 	tnz (CPOS,sp)
      000B21 26 03            [ 1]  641 	jrne 71$
      000B23 CC 0A 4B         [ 2]  642 	jp readln_loop
      000B26                        643 71$:
      000B26 A6 01            [ 1]  644     ld a,#1 
      000B28 CD 09 88         [ 4]  645 	call move_left 
      000B2B 0A 03            [ 1]  646 	dec (CPOS,sp)
      000B2D 90 5A            [ 2]  647     decw y 
      000B2F CC 0A 4B         [ 2]  648 	jp readln_loop 
      000B32 A1 82            [ 1]  649 8$: cp a,#HOME  
      000B34 26 0E            [ 1]  650 	jrne 9$
                                    651 ; HOME 
      000B36 7B 03            [ 1]  652     ld a,(CPOS,sp)
      000B38 CD 09 88         [ 4]  653     call move_left 
      000B3B 0F 03            [ 1]  654 	clr (CPOS,sp)
      000B3D 90 AE 16 90      [ 2]  655     ldw y,#tib 
      000B41 CC 0A 4B         [ 2]  656 	jp readln_loop  
      000B44 A1 83            [ 1]  657 9$: cp a,#KEY_END  
      000B46 26 26            [ 1]  658 	jrne 10$
                                    659 ; KEY_END 
      000B48 7B 03            [ 1]  660 	ld a,(CPOS,sp)
      000B4A 11 02            [ 1]  661 	cp a,(LL,sp)
      000B4C 26 03            [ 1]  662 	jrne 91$
      000B4E CC 0A 4B         [ 2]  663 	jp readln_loop 
      000B51                        664 91$:
      000B51 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B53 10 03            [ 1]  666 	sub a,(CPOS,sp)
      000B55 CD 09 96         [ 4]  667 	call move_right 
      000B58 7B 02            [ 1]  668 	ld a,(LL,sp)
      000B5A 6B 03            [ 1]  669 	ld (CPOS,sp),a
      000B5C 90 AE 16 90      [ 2]  670     ldw y,#tib
      000B60 72 5F 00 0D      [ 1]  671     clr acc16 
      000B64 C7 00 0E         [ 1]  672     ld acc8,a 
      000B67 72 B9 00 0D      [ 2]  673     addw y,acc16  
      000B6B CC 0A 4B         [ 2]  674 	jp readln_loop 
      000B6E A1 0F            [ 1]  675 10$: cp a,#CTRL_O
      000B70 26 08            [ 1]  676 	jrne 11$ 
                                    677 ; toggle between insert/overwrite
      000B72 03 04            [ 1]  678 	cpl (OVRWR,sp)
      000B74 CD 25 1A         [ 4]  679 	call beep_1khz
      000B77 CC 0A 4B         [ 2]  680 	jp readln_loop 
      000B7A A1 84            [ 1]  681 11$: cp a,#SUP 
      000B7C 26 11            [ 1]  682     jrne final_test 
                                    683 ; del character under cursor 
      000B7E 7B 03            [ 1]  684     ld a,(CPOS,sp)
      000B80 11 02            [ 1]  685     cp a,(LL,sp)
      000B82 2A 08            [ 1]  686     jrpl 13$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B84                        687 12$:
      000B84 97               [ 1]  688     ld xl,a    ; cursor position 
      000B85 7B 02            [ 1]  689     ld a,(LL,sp)  ; line length
      000B87 CD 09 F3         [ 4]  690     call delete_under
      000B8A 0A 02            [ 1]  691     dec (LLEN,sp)
      000B8C                        692 13$:
      000B8C CC 0A 4B         [ 2]  693     jp readln_loop 
      000B8F                        694 final_test:
      000B8F A1 20            [ 1]  695 	cp a,#SPACE
      000B91 2A 03            [ 1]  696 	jrpl accept_char
      000B93 CC 0A 4B         [ 2]  697 	jp readln_loop
      000B96                        698 accept_char:
      000B96 A6 4F            [ 1]  699 	ld a,#TIB_SIZE-1
      000B98 11 02            [ 1]  700 	cp a, (LL,sp)
      000B9A 2A 03            [ 1]  701 	jrpl 1$
      000B9C CC 0A 4B         [ 2]  702 	jp readln_loop
      000B9F 0D 04            [ 1]  703 1$:	tnz (OVRWR,sp)
      000BA1 26 18            [ 1]  704 	jrne overwrite
                                    705 ; insert mode 
      000BA3 7B 03            [ 1]  706     ld a,(CPOS,sp)
      000BA5 11 02            [ 1]  707     cp a,(LL,sp)
      000BA7 27 12            [ 1]  708     jreq overwrite
      000BA9 7B 02            [ 1]  709     ld a,(LL,sp)
      000BAB 97               [ 1]  710     ld xl,a 
      000BAC 7B 03            [ 1]  711     ld a,(CPOS,sp)
      000BAE 95               [ 1]  712     ld xh,a
      000BAF 7B 01            [ 1]  713     ld a,(RXCHAR,sp)
      000BB1 CD 09 B0         [ 4]  714     call insert_char
      000BB4 0C 02            [ 1]  715     inc (LLEN,sp)
      000BB6 0C 03            [ 1]  716     inc (CPOS,sp)	
      000BB8 CC 0A 4B         [ 2]  717     jp readln_loop 
      000BBB                        718 overwrite:
      000BBB 7B 01            [ 1]  719 	ld a,(RXCHAR,sp)
      000BBD 90 F7            [ 1]  720 	ld (y),a
      000BBF 90 5C            [ 1]  721     incw y
      000BC1 CD 08 DA         [ 4]  722     call putc 
      000BC4 7B 03            [ 1]  723 	ld a,(CPOS,sp)
      000BC6 11 02            [ 1]  724 	cp a,(LL,sp)
      000BC8 2B 09            [ 1]  725 	jrmi 1$
      000BCA 90 7F            [ 1]  726 	clr (y)
      000BCC 0C 02            [ 1]  727 	inc (LL,sp)
      000BCE 0C 03            [ 1]  728     inc (CPOS,sp)
      000BD0 CC 0A 4B         [ 2]  729 	jp readln_loop 
      000BD3                        730 1$:	
      000BD3 0C 03            [ 1]  731 	inc (CPOS,sp)
      000BD5 CC 0A 4B         [ 2]  732 	jp readln_loop 
      000BD8                        733 readln_quit:
      000BD8 90 AE 16 90      [ 2]  734 	ldw y,#tib
      000BDC 0F 01            [ 1]  735     clr (LL_HB,sp) 
      000BDE 72 F9 01         [ 2]  736     addw y,(LL_HB,sp)
      000BE1 90 7F            [ 1]  737     clr (y)
      000BE3 7B 02            [ 1]  738 	ld a,(LL,sp)
      000BE5 C7 00 03         [ 1]  739 	ld count,a 
      000BE8 A6 0D            [ 1]  740 	ld a,#CR
      000BEA CD 08 DA         [ 4]  741 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000BED                        742 	_drop VSIZE 
      000BED 5B 04            [ 2]    1     addw sp,#VSIZE 
      000BEF 90 85            [ 2]  743 	popw y 
      000BF1 81               [ 4]  744 	ret
                                    745 
                                    746 ;------------------------------
                                    747 ; print byte  in hexadecimal 
                                    748 ; on console
                                    749 ; input:
                                    750 ;    A		byte to print
                                    751 ;------------------------------
      000BF2                        752 print_hex::
      000BF2 88               [ 1]  753 	push a 
      000BF3 4E               [ 1]  754 	swap a 
      000BF4 CD 0C 09         [ 4]  755 	call to_hex_char 
      000BF7 CD 08 DA         [ 4]  756 	call putc 
      000BFA 7B 01            [ 1]  757     ld a,(1,sp) 
      000BFC CD 0C 09         [ 4]  758 	call to_hex_char
      000BFF CD 08 DA         [ 4]  759 	call putc
      000C02 A6 20            [ 1]  760 	ld a,#SPACE 
      000C04 CD 08 DA         [ 4]  761 	call putc 
      000C07 84               [ 1]  762 	pop a 
      000C08 81               [ 4]  763 	ret 
                                    764 
                                    765 ;----------------------------------
                                    766 ; convert to hexadecimal digit 
                                    767 ; input:
                                    768 ;   A       digit to convert 
                                    769 ; output:
                                    770 ;   A       hexdecimal character 
                                    771 ;----------------------------------
      000C09                        772 to_hex_char::
      000C09 A4 0F            [ 1]  773 	and a,#15 
      000C0B A1 09            [ 1]  774 	cp a,#9 
      000C0D 23 02            [ 2]  775 	jrule 1$ 
      000C0F AB 07            [ 1]  776 	add a,#7
      000C11 AB 30            [ 1]  777 1$: add a,#'0 
      000C13 81               [ 4]  778 	ret 
                                    779 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C14                         51 search_lineno::
      000C14                         52 	_vars VSIZE
      000C14 52 02            [ 2]    1     sub sp,#VSIZE 
      000C16 0F 01            [ 1]   53 	clr (LL,sp)
      000C18 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C1C 4D               [ 1]   55 	tnz a 
      000C1D 27 04            [ 1]   56 	jreq search_ln_loop
      000C1F 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C23                         58 search_ln_loop:
      000C23 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C27 2A 10            [ 1]   60 	jrpl 8$
      000C29 90 F3            [ 1]   61 	cpw x,(y)
      000C2B 27 0E            [ 1]   62 	jreq 9$
      000C2D 2B 0A            [ 1]   63 	jrmi 8$ 
      000C2F 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C32 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C34 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C37 20 EA            [ 2]   67 	jra search_ln_loop 
      000C39                         68 8$: 
      000C39 5F               [ 1]   69 	clrw x 	
      000C3A 51               [ 1]   70 	exgw x,y 
      000C3B                         71 9$: _drop VSIZE
      000C3B 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C3D 51               [ 1]   72 	exgw x,y   
      000C3E 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C3F                         83 del_line: 
      000C3F                         84 	_vars VSIZE 
      000C3F 52 04            [ 2]    1     sub sp,#VSIZE 
      000C41 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C43 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C45 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C47 90 93            [ 1]   88 	ldw y,x  
      000C49 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C4C 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C4E 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C52 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C55 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C59 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C5B CD 13 81         [ 4]   95 	call move
      000C5E 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C62 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C65 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C69                         99 	_drop VSIZE     
      000C69 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C6B 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C6C                        115 create_gap:
      000C6C                        116 	_vars VSIZE
      000C6C 52 06            [ 2]    1     sub sp,#VSIZE 
      000C6E 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000C70 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000C72 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000C76 90 93            [ 1]  120 	ldw y,x ; SRC
      000C78 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000C7C 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000C7E CE 00 1D         [ 2]  124 	ldw x,txtend 
      000C81 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000C84 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000C87 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000C89 CD 13 81         [ 4]  128 	call move
      000C8C CE 00 1D         [ 2]  129 	ldw x,txtend
      000C8F 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000C92 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000C95                        132 9$:	_drop VSIZE 
      000C95 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C97 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000C98                        150 insert_line:
      000C98                        151 	_vars VSIZE 
      000C98 52 08            [ 2]    1     sub sp,#VSIZE 
      000C9A CE 00 1D         [ 2]  152 	ldw x,txtend  
      000C9D C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CA0 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CA2 AE 00 02         [ 2]  156 	ldw x,#2 
      000CA5 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CA9 A1 03            [ 1]  158 	cp a,#3
      000CAB 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CAD 5F               [ 1]  160 	clrw x 
      000CAE 97               [ 1]  161 	ld xl,a
      000CAF 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CB1 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CB4 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CB6 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CB9 20 38            [ 2]  166 	jra 4$
      000CBB 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CBF 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CC1 AE 00 02         [ 2]  170 	ldw x,#2 
      000CC4 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CC8 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CC9 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CCB 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CCD 4F               [ 1]  177 	clr a 
      000CCE CD 0C 14         [ 4]  178 	call search_lineno 
      000CD1 5D               [ 2]  179 	tnzw x 
      000CD2 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000CD4 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000CD6 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000CD8 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000CDA CD 0C 3F         [ 4]  188 	call del_line
      000CDD                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000CDD A6 03            [ 1]  192 	ld a,#3
      000CDF 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000CE1 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000CE3 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000CE5 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000CE8 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000CEA 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000CEC 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000CEE CD 0C 6C         [ 4]  204 	call create_gap
      000CF1 20 06            [ 2]  205 	jra 5$
      000CF3                        206 4$: 
      000CF3 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000CF6 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000CF9 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000CFB CF 00 0D         [ 2]  211 	ldw acc16,x 
      000CFE 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D02 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D04 CD 13 81         [ 4]  214 	call move 
      000D07                        215 insert_ln_exit:	
      000D07                        216 	_drop VSIZE
      000D07 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D09 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D0A                        233 parse_quote: 
      000D0A                        234 	_vars VSIZE 
      000D0A 52 02            [ 2]    1     sub sp,#VSIZE 
      000D0C 4F               [ 1]  235 	clr a
      000D0D 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D0F                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      000D0F 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D12 27 24            [ 1]  239 	jreq 6$
      000D14 72 5C 00 01      [ 1]  240 	inc in 
      000D18 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D1A A6 5C            [ 1]  242 	ld a,#'\
      000D1C 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D1E 26 0A            [ 1]  244 	jrne 3$
      000D20 0F 01            [ 1]  245 	clr (PREV,sp)
      000D22 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D24 AD 1C            [ 4]  247 	callr convert_escape
      000D26 F7               [ 1]  248 	ld (x),a 
      000D27 5C               [ 1]  249 	incw x 
      000D28 20 E5            [ 2]  250 	jra 2$
      000D2A                        251 3$:
      000D2A 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D2C A1 5C            [ 1]  253 	cp a,#'\'
      000D2E 27 DD            [ 1]  254 	jreq 1$
      000D30 A1 22            [ 1]  255 	cp a,#'"
      000D32 27 04            [ 1]  256 	jreq 6$ 
      000D34 F7               [ 1]  257 	ld (x),a 
      000D35 5C               [ 1]  258 	incw x 
      000D36 20 D7            [ 2]  259 	jra 2$
      000D38                        260 6$:
      000D38 7F               [ 1]  261 	clr (x)
      000D39 5C               [ 1]  262 	incw x 
      000D3A 90 93            [ 1]  263 	ldw y,x 
      000D3C 5F               [ 1]  264 	clrw x 
      000D3D A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D3F                        266 	_drop VSIZE
      000D3F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D41 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D42                        278 convert_escape:
      000D42 89               [ 2]  279 	pushw x 
      000D43 AE 0D 57         [ 2]  280 	ldw x,#escaped 
      000D46 F1               [ 1]  281 1$:	cp a,(x)
      000D47 27 06            [ 1]  282 	jreq 2$
      000D49 7D               [ 1]  283 	tnz (x)
      000D4A 27 09            [ 1]  284 	jreq 3$
      000D4C 5C               [ 1]  285 	incw x 
      000D4D 20 F7            [ 2]  286 	jra 1$
      000D4F 1D 0D 57         [ 2]  287 2$: subw x,#escaped 
      000D52 9F               [ 1]  288 	ld a,xl 
      000D53 AB 07            [ 1]  289 	add a,#7
      000D55 85               [ 2]  290 3$:	popw x 
      000D56 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    292 
      000D57 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D5F                        310 parse_integer: ; { -- n }
      000D5F 89               [ 2]  311 	pushw x 	
      000D60 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D62 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D64 A1 24            [ 1]  314 	cp a,#'$
      000D66 26 04            [ 1]  315 	jrne 2$ 
      000D68                        316     _drop #1
      000D68 5B 01            [ 2]    1     addw sp,##1 
      000D6A 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D6C F7               [ 1]  318 2$:	ld (x),a 
      000D6D 5C               [ 1]  319 	incw x 
      000D6E 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000D71 72 5C 00 01      [ 1]  321 	inc in 
      000D75 CD 18 77         [ 4]  322 	call to_upper 
      000D78 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000D7A CD 0D FC         [ 4]  324 	call is_digit 
      000D7D 25 ED            [ 1]  325 	jrc 2$
      000D7F A6 10            [ 1]  326 	ld a,#16 
      000D81 11 01            [ 1]  327 	cp a,(BASE,sp)
      000D83 26 0A            [ 1]  328 	jrne 3$ 
      000D85 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000D87 A1 41            [ 1]  330 	cp a,#'A 
      000D89 2B 04            [ 1]  331 	jrmi 3$ 
      000D8B A1 47            [ 1]  332 	cp a,#'G 
      000D8D 2B DD            [ 1]  333 	jrmi 2$ 
      000D8F 72 5A 00 01      [ 1]  334 3$: dec in 	
      000D93 7F               [ 1]  335     clr (x)
      000D94 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000D96 CD 18 83         [ 4]  337 	call atoi24
      000D99 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000D9B C6 00 0C         [ 1]  339 	ld a,acc24 
      000D9E 90 F7            [ 1]  340 	ld (y),a 
      000DA0 90 5C            [ 1]  341 	incw y  
      000DA2 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DA5 90 FF            [ 2]  343 	ldw (y),x 
      000DA7 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000DAB A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DAD                        346 	_drop VSIZE  
      000DAD 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DAF 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DB0                        364 parse_binary: ; { -- n }
      000DB0 4B 00            [ 1]  365 	push #0
      000DB2 4B 00            [ 1]  366 	push #0
      000DB4 4B 00            [ 1]  367 	push #0
      000DB6                        368 2$:	
      000DB6 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DB9 72 5C 00 01      [ 1]  370 	inc in 
      000DBD A1 30            [ 1]  371 	cp a,#'0 
      000DBF 27 06            [ 1]  372 	jreq 3$
      000DC1 A1 31            [ 1]  373 	cp a,#'1 
      000DC3 27 02            [ 1]  374 	jreq 3$ 
      000DC5 20 0B            [ 2]  375 	jra bin_exit 
      000DC7 A0 30            [ 1]  376 3$: sub a,#'0 
      000DC9 46               [ 1]  377 	rrc a
      000DCA 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DCC 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DCE 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000DD0 20 E4            [ 2]  381 	jra 2$  
      000DD2                        382 bin_exit:
      000DD2 72 5A 00 01      [ 1]  383 	dec in 
      000DD6 90 93            [ 1]  384 	ldw y,x
      000DD8 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000DDA 90 F7            [ 1]  386 	ld (y),a 
      000DDC 90 5C            [ 1]  387 	incw y 
      000DDE 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000DE0 90 FF            [ 2]  389 	ldw (y),x 
      000DE2 72 A9 00 02      [ 2]  390 	addw y,#2  
      000DE6 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000DE8                        392 	_drop VSIZE 
      000DE8 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DEA 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000DEB                        402 is_alpha::
      000DEB A1 41            [ 1]  403 	cp a,#'A 
      000DED 8C               [ 1]  404 	ccf 
      000DEE 24 0B            [ 1]  405 	jrnc 9$ 
      000DF0 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000DF2 25 07            [ 1]  407 	jrc 9$ 
      000DF4 A1 61            [ 1]  408 	cp a,#'a 
      000DF6 8C               [ 1]  409 	ccf 
      000DF7 24 02            [ 1]  410 	jrnc 9$
      000DF9 A1 7B            [ 1]  411 	cp a,#'z+1
      000DFB 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000DFC                        421 is_digit::
      000DFC A1 30            [ 1]  422 	cp a,#'0
      000DFE 25 03            [ 1]  423 	jrc 1$
      000E00 A1 3A            [ 1]  424     cp a,#'9+1
      000E02 8C               [ 1]  425 	ccf 
      000E03 8C               [ 1]  426 1$:	ccf 
      000E04 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E05                        438 is_alnum::
      000E05 CD 0D FC         [ 4]  439 	call is_digit
      000E08 25 03            [ 1]  440 	jrc 1$ 
      000E0A CD 0D EB         [ 4]  441 	call is_alpha
      000E0D 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000E0E                        453 is_symbol_char: 
      000E0E A1 5F            [ 1]  454 	cp a,#'_ 
      000E10 26 03            [ 1]  455 	jrne 1$
      000E12 99               [ 1]  456 	scf 
      000E13 20 03            [ 2]  457 	jra 9$ 
      000E15 CD 0E 05         [ 4]  458 1$:	call is_alnum 
      000E18 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E19                        473 parse_symbol:
      000E19 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E1A                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E1A CD 18 77         [ 4]  477 	call to_upper  
      000E1D F7               [ 1]  478 	ld (x), a 
      000E1E 5C               [ 1]  479 	incw x
      000E1F 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E22 72 5C 00 01      [ 1]  481 	inc in 
      000E26 CD 0E 0E         [ 4]  482 	call is_symbol_char 
      000E29 25 EF            [ 1]  483 	jrc symb_loop 
      000E2B 7F               [ 1]  484 	clr (x)
      000E2C 72 5A 00 01      [ 1]  485 	dec in  
      000E30 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E31                        502 parse_keyword: 
      000E31 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E32 CD 0E 19         [ 4]  504 	call parse_symbol
      000E35 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E37 E6 02            [ 1]  506 	ld a,(2,x)
      000E39 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E3B E6 01            [ 1]  509 	ld a,(1,x) 
      000E3D A0 41            [ 1]  510 	sub a,#'A 
      000E3F AE 00 03         [ 2]  511 	ldw x,#3 
      000E42 42               [ 4]  512 	mul x,a 
      000E43 1C 00 34         [ 2]  513 	addw x,#vars 
      000E46 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E48 20 36            [ 2]  515 	jra 4$ 
      000E4A                        516 2$: ; check for keyword, otherwise syntax error.
      000E4A                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E4A AE 34 11         [ 2]    1     ldw x,#kword_dict+2
      000E4D 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E4F 90 5C            [ 1]  519 	incw y 
      000E51 CD 19 04         [ 4]  520 	call search_dict
      000E54 4D               [ 1]  521 	tnz a
      000E55 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E57 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E59 A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E5B 90 F7            [ 1]  527 	ld (y),a 
      000E5D 90 5C            [ 1]  528 	incw y
      000E5F 93               [ 1]  529 	ldw x,y 
      000E60 CD 13 55         [ 4]  530 	call strlen
      000E63 A1 0F            [ 1]  531 	cp a,#NAME_MAX_LEN 
      000E65 23 02            [ 2]  532 	jrule 22$ 
      000E67 A6 0F            [ 1]  533 	ld a,#NAME_MAX_LEN 
      000E69                        534 22$:	
      000E69 88               [ 1]  535 	push a 
      000E6A                        536 24$:
      000E6A 90 F6            [ 1]  537     ld a,(y)
      000E6C 27 09            [ 1]  538 	jreq 3$
      000E6E 90 5C            [ 1]  539 	incw y
      000E70 0A 01            [ 1]  540 	dec (1,sp) 
      000E72 26 F6            [ 1]  541 	jrne 24$
      000E74 4F               [ 1]  542 	clr a 
      000E75 90 F7            [ 1]  543 	ld (y),a 
      000E77 90 5C            [ 1]  544 3$: incw y 
      000E79                        545 	_drop 1 
      000E79 5B 01            [ 2]    1     addw sp,#1 
      000E7B A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000E7D 5F               [ 1]  547 	clrw x 
      000E7E 20 1B            [ 2]  548 	jra 5$ 
      000E80                        549 4$:	
      000E80 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000E82 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000E84 2B 06            [ 1]  552 	jrmi 41$
      000E86 90 F7            [ 1]  553 	ld (y),a 
      000E88 90 5C            [ 1]  554 	incw y 
      000E8A 20 0F            [ 2]  555 	jra 5$ 
      000E8C                        556 41$:	
      000E8C A3 1C 7D         [ 2]  557 	cpw x,#let  
      000E8F 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000E91 90 F7            [ 1]  559 	ld (y),a 
      000E93 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E95 90 FF            [ 2]  561 	ldw (y),x
      000E97 72 A9 00 02      [ 2]  562 	addw y,#2  
      000E9B                        563 5$:	_drop VSIZE 
      000E9B 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E9D 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000E9E                        575 skip:
      000E9E 88               [ 1]  576 	push a
      000E9F 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000EA2 27 0A            [ 1]  578 	jreq 2$
      000EA4 11 01            [ 1]  579 	cp a,(C,sp)
      000EA6 26 06            [ 1]  580 	jrne 2$
      000EA8 72 5C 00 01      [ 1]  581 	inc in
      000EAC 20 F1            [ 2]  582 	jra 1$
      000EAE                        583 2$: _drop 1 
      000EAE 5B 01            [ 2]    1     addw sp,#1 
      000EB0 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EB1                        609 get_token:: 
      000EB1                        610 	_vars VSIZE
      000EB1 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EB3                        616 0$: 
      000EB3 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EB7 A6 20            [ 1]  618 	ld a,#SPACE
      000EB9 CD 0E 9E         [ 4]  619 	call skip
      000EBC 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EC1 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EC4 26 05            [ 1]  622 	jrne 1$
      000EC6 90 93            [ 1]  623 	ldw y,x 
      000EC8 CC 10 62         [ 2]  624 	jp token_exit ; end of line 
      000ECB 72 5C 00 01      [ 1]  625 1$:	inc in 
      000ECF CD 18 77         [ 4]  626 	call to_upper 
      000ED2 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000ED4                        629 str_tst:  	
      000ED4                        630 	_case '"' nbr_tst
      000ED4 A6 22            [ 1]    1 	ld a,#'"' 
      000ED6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000ED8 26 0A            [ 1]    3 	jrne nbr_tst
      000EDA A6 02            [ 1]  631 	ld a,#TK_QSTR
      000EDC F7               [ 1]  632 	ld (x),a 
      000EDD 5C               [ 1]  633 	incw x 
      000EDE CD 0D 0A         [ 4]  634 	call parse_quote
      000EE1 CC 10 62         [ 2]  635 	jp token_exit
      000EE4                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000EE4 A6 24            [ 1]  638 	ld a,#'$'
      000EE6 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000EE8 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000EEA A6 26            [ 1]  642 	ld a,#'&
      000EEC 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000EEE 26 0A            [ 1]  644 	jrne 0$
      000EF0 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000EF2 F7               [ 1]  646 	ld (x),a 
      000EF3 5C               [ 1]  647 	incw x 
      000EF4 CD 0D B0         [ 4]  648 	call parse_binary ; expect binary integer 
      000EF7 CC 10 62         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000EFA 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000EFC CD 0D FC         [ 4]  652 	call is_digit
      000EFF 24 0C            [ 1]  653 	jrnc 3$
      000F01 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F03 F7               [ 1]  655 	ld (x),a 
      000F04 5C               [ 1]  656 	incw x 
      000F05 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F07 CD 0D 5F         [ 4]  658 	call parse_integer 
      000F0A CC 10 62         [ 2]  659 	jp token_exit 
      000F0D                        660 3$: 
      000F0D                        661 	_case '(' bkslsh_tst 
      000F0D A6 28            [ 1]    1 	ld a,#'(' 
      000F0F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F11 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000F13 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F15 CC 10 5E         [ 2]  663 	jp token_char   	
      000F18                        664 bkslsh_tst: ; character token 
      000F18                        665 	_case '\',rparnt_tst
      000F18 A6 5C            [ 1]    1 	ld a,#'\' 
      000F1A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F1C 26 16            [ 1]    3 	jrne rparnt_tst
      000F1E A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F20 F7               [ 1]  667 	ld (x),a 
      000F21 5C               [ 1]  668 	incw x 
      000F22 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F25 F7               [ 1]  670 	ld (x),a 
      000F26 5C               [ 1]  671 	incw x
      000F27 90 93            [ 1]  672 	ldw y,x 	 
      000F29 72 5C 00 01      [ 1]  673 	inc in  
      000F2D 5F               [ 1]  674 	clrw x 
      000F2E 97               [ 1]  675 	ld xl,a 
      000F2F A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F31 CC 10 62         [ 2]  677 	jp token_exit 
      000F34                        678 rparnt_tst:		
      000F34                        679 	_case ')' colon_tst 
      000F34 A6 29            [ 1]    1 	ld a,#')' 
      000F36 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F38 26 05            [ 1]    3 	jrne colon_tst
      000F3A A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F3C CC 10 5E         [ 2]  681 	jp token_char
      000F3F                        682 colon_tst:
      000F3F                        683 	_case ':' comma_tst 
      000F3F A6 3A            [ 1]    1 	ld a,#':' 
      000F41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F43 26 05            [ 1]    3 	jrne comma_tst
      000F45 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F47 CC 10 5E         [ 2]  685 	jp token_char  
      000F4A                        686 comma_tst:
      000F4A                        687 	_case COMMA sharp_tst 
      000F4A A6 2C            [ 1]    1 	ld a,#COMMA 
      000F4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4E 26 05            [ 1]    3 	jrne sharp_tst
      000F50 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F52 CC 10 5E         [ 2]  689 	jp token_char
      000F55                        690 sharp_tst:
      000F55                        691 	_case SHARP dash_tst 
      000F55 A6 23            [ 1]    1 	ld a,#SHARP 
      000F57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F59 26 05            [ 1]    3 	jrne dash_tst
      000F5B A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F5D CC 10 5E         [ 2]  693 	jp token_char  	 	 
      000F60                        694 dash_tst: 	
      000F60                        695 	_case '-' at_tst 
      000F60 A6 2D            [ 1]    1 	ld a,#'-' 
      000F62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F64 26 05            [ 1]    3 	jrne at_tst
      000F66 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F68 CC 10 5E         [ 2]  697 	jp token_char 
      000F6B                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F6B                        699 	_case '@' qmark_tst 
      000F6B A6 40            [ 1]    1 	ld a,#'@' 
      000F6D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F6F 26 05            [ 1]    3 	jrne qmark_tst
      000F71 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000F73 CC 10 5E         [ 2]  701 	jp token_char
      000F76                        702 qmark_tst:
      000F76                        703 	_case '?' tick_tst 
      000F76 A6 3F            [ 1]    1 	ld a,#'?' 
      000F78 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7A 26 12            [ 1]    3 	jrne tick_tst
      000F7C A6 80            [ 1]  704 	ld a,#TK_CMD  
      000F7E F7               [ 1]  705 	ld (x),a 
      000F7F 5C               [ 1]  706 	incw x 
      000F80 90 93            [ 1]  707 	ldw y,x 
      000F82 AE 1F 6D         [ 2]  708 	ldw x,#print
      000F85 90 FF            [ 2]  709 	ldw (y),x 
      000F87 72 A9 00 02      [ 2]  710 	addw y,#2
      000F8B CC 10 62         [ 2]  711 	jp token_exit
      000F8E                        712 tick_tst: ; comment 
      000F8E                        713 	_case TICK plus_tst 
      000F8E A6 27            [ 1]    1 	ld a,#TICK 
      000F90 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F92 26 2B            [ 1]    3 	jrne plus_tst
      000F94 A6 80            [ 1]  714 	ld a,#TK_CMD
      000F96 F7               [ 1]  715 	ld (x),a 
      000F97 5C               [ 1]  716 	incw x
      000F98 90 AE 20 B5      [ 2]  717 	ldw y,#remark 
      000F9C FF               [ 2]  718 	ldw (x),y 
      000F9D 1C 00 02         [ 2]  719 	addw x,#2  
      000FA0                        720 copy_comment:
      000FA0 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FA4 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FA8 90 89            [ 2]  723 	pushw y 
      000FAA CD 13 71         [ 4]  724 	call strcpy
      000FAD 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FB0 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FB2 17 01            [ 2]  727 	ldw (1,sp),y 
      000FB4 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FB7                        729 	_drop 2 
      000FB7 5B 02            [ 2]    1     addw sp,#2 
      000FB9 4F               [ 1]  730 	clr a 
      000FBA 90 93            [ 1]  731 	ldw y,x 
      000FBC CC 10 62         [ 2]  732 	jp token_exit 
      000FBF                        733 plus_tst:
      000FBF                        734 	_case '+' star_tst 
      000FBF A6 2B            [ 1]    1 	ld a,#'+' 
      000FC1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC3 26 05            [ 1]    3 	jrne star_tst
      000FC5 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FC7 CC 10 5E         [ 2]  736 	jp token_char 
      000FCA                        737 star_tst:
      000FCA                        738 	_case '*' slash_tst 
      000FCA A6 2A            [ 1]    1 	ld a,#'*' 
      000FCC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000FCE 26 05            [ 1]    3 	jrne slash_tst
      000FD0 A6 20            [ 1]  739 	ld a,#TK_MULT 
      000FD2 CC 10 5E         [ 2]  740 	jp token_char 
      000FD5                        741 slash_tst: 
      000FD5                        742 	_case '/' prcnt_tst 
      000FD5 A6 2F            [ 1]    1 	ld a,#'/' 
      000FD7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD9 26 05            [ 1]    3 	jrne prcnt_tst
      000FDB A6 21            [ 1]  743 	ld a,#TK_DIV 
      000FDD CC 10 5E         [ 2]  744 	jp token_char 
      000FE0                        745 prcnt_tst:
      000FE0                        746 	_case '%' eql_tst 
      000FE0 A6 25            [ 1]    1 	ld a,#'%' 
      000FE2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE4 26 05            [ 1]    3 	jrne eql_tst
      000FE6 A6 22            [ 1]  747 	ld a,#TK_MOD
      000FE8 CC 10 5E         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      000FEB                        750 eql_tst:
      000FEB                        751 	_case '=' gt_tst 		
      000FEB A6 3D            [ 1]    1 	ld a,#'=' 
      000FED 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FEF 26 05            [ 1]    3 	jrne gt_tst
      000FF1 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      000FF3 CC 10 5E         [ 2]  753 	jp token_char 
      000FF6                        754 gt_tst:
      000FF6                        755 	_case '>' lt_tst 
      000FF6 A6 3E            [ 1]    1 	ld a,#'>' 
      000FF8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FFA 26 23            [ 1]    3 	jrne lt_tst
      000FFC A6 31            [ 1]  756 	ld a,#TK_GT 
      000FFE 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001000 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001003 72 5C 00 01      [ 1]  759 	inc in 
      001007 A1 3D            [ 1]  760 	cp a,#'=
      001009 26 04            [ 1]  761 	jrne 1$
      00100B A6 33            [ 1]  762 	ld a,#TK_GE 
      00100D 20 4F            [ 2]  763 	jra token_char  
      00100F A1 3C            [ 1]  764 1$: cp a,#'<
      001011 26 04            [ 1]  765 	jrne 2$
      001013 A6 35            [ 1]  766 	ld a,#TK_NE 
      001015 20 47            [ 2]  767 	jra token_char 
      001017 72 5A 00 01      [ 1]  768 2$: dec in
      00101B 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      00101D 20 3F            [ 2]  770 	jra token_char 	 
      00101F                        771 lt_tst:
      00101F                        772 	_case '<' other
      00101F A6 3C            [ 1]    1 	ld a,#'<' 
      001021 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001023 26 23            [ 1]    3 	jrne other
      001025 A6 34            [ 1]  773 	ld a,#TK_LT 
      001027 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      001029 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      00102C 72 5C 00 01      [ 1]  776 	inc in 
      001030 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001032 26 04            [ 1]  778 	jrne 1$
      001034 A6 36            [ 1]  779 	ld a,#TK_LE 
      001036 20 26            [ 2]  780 	jra token_char 
      001038 A1 3E            [ 1]  781 1$: cp a,#'>
      00103A 26 04            [ 1]  782 	jrne 2$
      00103C A6 35            [ 1]  783 	ld a,#TK_NE 
      00103E 20 1E            [ 2]  784 	jra token_char 
      001040 72 5A 00 01      [ 1]  785 2$: dec in 
      001044 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001046 20 16            [ 2]  787 	jra token_char 	
      001048                        788 other: ; not a special character 	 
      001048 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00104A CD 0D EB         [ 4]  790 	call is_alpha 
      00104D 25 03            [ 1]  791 	jrc 30$ 
      00104F CC 16 35         [ 2]  792 	jp syntax_error 
      001052                        793 30$: 
      001052 CD 0E 31         [ 4]  794 	call parse_keyword
      001055 A3 20 B5         [ 2]  795 	cpw x,#remark 
      001058 26 08            [ 1]  796 	jrne token_exit 
      00105A 93               [ 1]  797 	ldw x,y 
      00105B CC 0F A0         [ 2]  798 	jp copy_comment 
      00105E                        799 token_char:
      00105E F7               [ 1]  800 	ld (x),a 
      00105F 5C               [ 1]  801 	incw x
      001060 90 93            [ 1]  802 	ldw y,x 
      001062                        803 token_exit:
      001062                        804 	_drop VSIZE 
      001062 5B 02            [ 2]    1     addw sp,#VSIZE 
      001064 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001065                        825 compile::
      001065 90 89            [ 2]  826 	pushw y 
      001067                        827 	_vars VSIZE 
      001067 52 02            [ 2]    1     sub sp,#VSIZE 
      001069 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      00106E 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      001072 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001074 AE 00 00         [ 2]  831 	ldw x,#0
      001077 CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      00107A C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      00107D AE 16 E3         [ 2]  834 	ldw x,#pad+3
      001080 72 5F 00 01      [ 1]  835 	clr in 
      001084 CD 0E B1         [ 4]  836 	call get_token
      001087 A1 84            [ 1]  837 	cp a,#TK_INTGR
      001089 26 11            [ 1]  838 	jrne 2$
      00108B A3 00 01         [ 2]  839 	cpw x,#1 
      00108E 2A 05            [ 1]  840 	jrpl 1$
      001090 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      001092 CC 16 37         [ 2]  842 	jp tb_error
      001095 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      001098 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      00109C 90 A3 17 60      [ 2]  845 2$:	cpw y,#xstack_full 
      0010A0 25 05            [ 1]  846 	jrult 3$
      0010A2 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010A4 CC 16 37         [ 2]  848 	jp tb_error 
      0010A7                        849 3$:	
      0010A7 93               [ 1]  850 	ldw x,y 
      0010A8 CD 0E B1         [ 4]  851 	call get_token 
      0010AB A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010AD 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010AF 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010B3 90 9F            [ 1]  856     ld a,yl
      0010B5 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010B8 CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010BB E7 02            [ 1]  859 	ld (2,x),a 
      0010BD FE               [ 2]  860 	ldw x,(x)
      0010BE 27 09            [ 1]  861 	jreq 10$
      0010C0 CD 0C 98         [ 4]  862 	call insert_line
      0010C3 72 5F 00 03      [ 1]  863 	clr  count 
      0010C7 20 0F            [ 2]  864 	jra  11$ 
      0010C9                        865 10$: ; line# is zero 
      0010C9 CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010CC CF 00 04         [ 2]  867 	ldw basicptr,x 
      0010CF E6 02            [ 1]  868 	ld a,(2,x)
      0010D1 C7 00 03         [ 1]  869 	ld count,a 
      0010D4 35 03 00 01      [ 1]  870 	mov in,#3 
      0010D8                        871 11$:
      0010D8                        872 	_drop VSIZE 
      0010D8 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010DA 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      0010DE 90 85            [ 2]  874 	popw y 
      0010E0 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      0010E1                         48 cpy_cmd_name:
      0010E1 5D               [ 2]   49 	tnzw x 
      0010E2 27 14            [ 1]   50 	jreq 10$
      0010E4 F6               [ 1]   51 	ld a,(x)
      0010E5 5C               [ 1]   52 	incw x
      0010E6 A4 0F            [ 1]   53 	and a,#15  
      0010E8 88               [ 1]   54 	push a 
      0010E9 0D 01            [ 1]   55     tnz (1,sp) 
      0010EB 27 0A            [ 1]   56 	jreq 9$
      0010ED F6               [ 1]   57 1$:	ld a,(x)
      0010EE 90 F7            [ 1]   58 	ld (y),a  
      0010F0 5C               [ 1]   59 	incw x
      0010F1 90 5C            [ 1]   60 	incw y 
      0010F3 0A 01            [ 1]   61 	dec (1,sp)	 
      0010F5 26 F6            [ 1]   62 	jrne 1$
      0010F7 84               [ 1]   63 9$: pop a 
      0010F8                         64 10$: 
      0010F8 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      0010F9                         75 add_space:
      0010F9 90 5A            [ 2]   76 	decw y 
      0010FB 90 F6            [ 1]   77 	ld a,(y)
      0010FD 90 5C            [ 1]   78 	incw y
      0010FF A1 29            [ 1]   79 	cp a,#') 
      001101 27 05            [ 1]   80 	jreq 0$
      001103 CD 0E 05         [ 4]   81 	call is_alnum 
      001106 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001108                         83 0$: 
      001108 A6 20            [ 1]   84 	ld a,#SPACE 
      00110A 90 F7            [ 1]   85 	ld (y),a 
      00110C 90 5C            [ 1]   86 	incw y 
      00110E 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      00110F                         99 right_align::
      00110F 88               [ 1]  100 	push a 
      001110 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001112 C1 00 23         [ 1]  102 	cp a,tab_width 
      001115 2A 08            [ 1]  103 	jrpl 1$
      001117 A6 20            [ 1]  104 	ld a,#SPACE 
      001119 5A               [ 2]  105 	decw x
      00111A F7               [ 1]  106 	ld (x),a  
      00111B 0C 01            [ 1]  107 	inc (1,sp)
      00111D 20 F1            [ 2]  108 	jra 0$ 
      00111F 84               [ 1]  109 1$: pop a 	
      001120 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001121                        123 cpy_quote:
      001121 A6 22            [ 1]  124 	ld a,#'"
      001123 90 F7            [ 1]  125 	ld (y),a 
      001125 90 5C            [ 1]  126 	incw y 
      001127 89               [ 2]  127 	pushw x 
      001128 CD 17 B2         [ 4]  128 	call skip_string 
      00112B 85               [ 2]  129 	popw x 
      00112C F6               [ 1]  130 1$:	ld a,(x)
      00112D 27 30            [ 1]  131 	jreq 9$
      00112F 5C               [ 1]  132 	incw x 
      001130 A1 20            [ 1]  133 	cp a,#SPACE 
      001132 25 0E            [ 1]  134 	jrult 3$
      001134 90 F7            [ 1]  135 	ld (y),a
      001136 90 5C            [ 1]  136 	incw y 
      001138 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00113A 26 F0            [ 1]  138 	jrne 1$ 
      00113C                        139 2$:
      00113C 90 F7            [ 1]  140 	ld (y),a
      00113E 90 5C            [ 1]  141 	incw y  
      001140 20 EA            [ 2]  142 	jra 1$
      001142 88               [ 1]  143 3$: push a 
      001143 A6 5C            [ 1]  144 	ld a,#'\
      001145 90 F7            [ 1]  145 	ld (y),a 
      001147 90 5C            [ 1]  146 	incw y  
      001149 84               [ 1]  147 	pop a 
      00114A A0 07            [ 1]  148 	sub a,#7
      00114C C7 00 0E         [ 1]  149 	ld acc8,a 
      00114F 72 5F 00 0D      [ 1]  150 	clr acc16
      001153 89               [ 2]  151 	pushw x
      001154 AE 0D 57         [ 2]  152 	ldw x,#escaped 
      001157 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00115B F6               [ 1]  154 	ld a,(x)
      00115C 85               [ 2]  155 	popw x
      00115D 20 DD            [ 2]  156 	jra 2$
      00115F A6 22            [ 1]  157 9$: ld a,#'"
      001161 90 F7            [ 1]  158 	ld (y),a 
      001163 90 5C            [ 1]  159 	incw y  
      001165 5C               [ 1]  160 	incw x 
      001166 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      001167                        171 var_name::
      001167 1D 00 34         [ 2]  172 		subw x,#vars 
      00116A A6 03            [ 1]  173 		ld a,#3
      00116C 62               [ 2]  174 		div x,a 
      00116D 9F               [ 1]  175 		ld a,xl 
      00116E AB 41            [ 1]  176 		add a,#'A 
      001170 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      001171                        195 decompile::
      001171                        196 	_vars VSIZE
      001171 52 04            [ 2]    1     sub sp,#VSIZE 
      001173 C6 00 0A         [ 1]  197 	ld a,base
      001176 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      001178 C6 00 23         [ 1]  199 	ld a,tab_width 
      00117B 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      00117D 17 03            [ 2]  201 	ldw (STR,sp),y   
      00117F 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      001183 35 0A 00 0A      [ 1]  203 	mov base,#10
      001187 35 05 00 23      [ 1]  204 	mov tab_width,#5
      00118B 72 5F 00 0C      [ 1]  205 	clr acc24 
      00118F CF 00 0D         [ 2]  206 	ldw acc16,x
      001192 4F               [ 1]  207 	clr a ; unsigned conversion 
      001193 CD 18 1E         [ 4]  208 	call itoa  
      001196 CD 11 0F         [ 4]  209 	call right_align 
      001199 88               [ 1]  210 	push a 
      00119A 90 93            [ 1]  211 1$:	ldw y,x ; source
      00119C 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      00119E CD 13 71         [ 4]  213 	call strcpy 
      0011A1 90 5F            [ 1]  214 	clrw y 
      0011A3 84               [ 1]  215 	pop a 
      0011A4 90 97            [ 1]  216 	ld yl,a 
      0011A6 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011A9 A6 20            [ 1]  218 	ld a,#SPACE 
      0011AB 90 F7            [ 1]  219 	ld (y),a 
      0011AD 90 5C            [ 1]  220 	incw y 
      0011AF 72 5F 00 23      [ 1]  221 	clr tab_width
      0011B3 AE 00 03         [ 2]  222 	ldw x,#3
      0011B6 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011B9                        224 decomp_loop:
      0011B9 90 89            [ 2]  225 	pushw y
      0011BB CD 17 99         [ 4]  226 	call next_token 
      0011BE 90 85            [ 2]  227 	popw y 
      0011C0 4D               [ 1]  228 	tnz a  
      0011C1 26 03            [ 1]  229 	jrne 1$
      0011C3 CC 12 E6         [ 2]  230 	jp 20$
      0011C6 2B 03            [ 1]  231 1$:	jrmi 2$
      0011C8 CC 12 57         [ 2]  232 	jp 6$
      0011CB                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011CB A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011CD 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      0011CF CD 10 F9         [ 4]  237 	call add_space
      0011D2 CD 17 C1         [ 4]  238 	call get_addr   
      0011D5 CD 11 67         [ 4]  239 	call var_name
      0011D8 90 F7            [ 1]  240 	ld (y),a 
      0011DA 90 5C            [ 1]  241 	incw y  
      0011DC 20 DB            [ 2]  242 	jra decomp_loop
      0011DE                        243 3$:
      0011DE A1 84            [ 1]  244 	cp a,#TK_INTGR
      0011E0 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0011E2 CD 17 CB         [ 4]  247 	call get_int24 
      0011E5 C7 00 0C         [ 1]  248 	ld acc24,a 
      0011E8 CF 00 0D         [ 2]  249 	ldw acc16,x 
      0011EB CD 10 F9         [ 4]  250 	call add_space
      0011EE 90 89            [ 2]  251 	pushw y 
      0011F0 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      0011F2 CD 18 1E         [ 4]  253 	call itoa  
      0011F5 16 01            [ 2]  254 	ldw y,(1,sp) 
      0011F7 88               [ 1]  255 	push a 
      0011F8 51               [ 1]  256 	exgw x,y 
      0011F9 CD 13 71         [ 4]  257 	call strcpy 
      0011FC 90 5F            [ 1]  258 	clrw y
      0011FE 84               [ 1]  259 	pop a  
      0011FF 90 97            [ 1]  260 	ld yl,a 
      001201 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001204                        262 	_drop 2 
      001204 5B 02            [ 2]    1     addw sp,#2 
      001206 20 B1            [ 2]  263 	jra decomp_loop
      001208                        264 4$: ; dictionary keyword
      001208 A1 87            [ 1]  265 	cp a,#TK_NOT 
      00120A 24 39            [ 1]  266 	jruge 50$ 
      00120C FE               [ 2]  267 	ldw x,(x)
      00120D 72 5C 00 01      [ 1]  268 	inc in 
      001211 72 5C 00 01      [ 1]  269 	inc in 
      001215 A3 20 B5         [ 2]  270 	cpw x,#remark 
      001218 26 23            [ 1]  271 	jrne 5$
      00121A CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      00121D CD 10 F9         [ 4]  274 	call add_space
      001220 A6 27            [ 1]  275 	ld a,#''
      001222 90 F7            [ 1]  276 	ld (y),a 
      001224 90 5C            [ 1]  277 	incw y 
      001226                        278 46$:
      001226 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00122A 72 5C 00 01      [ 1]  280 	inc in  
      00122E 90 F7            [ 1]  281 	ld (y),a 
      001230 90 5C            [ 1]  282 	incw y 
      001232 C6 00 01         [ 1]  283 	ld a,in 
      001235 C1 00 03         [ 1]  284 	cp a,count 
      001238 2B EC            [ 1]  285 	jrmi 46$
      00123A CC 12 E6         [ 2]  286 	jp 20$  
      00123D A3 1C 7D         [ 2]  287 5$: cpw x,#let  
      001240 26 05            [ 1]  288 	jrne 54$
      001242 CC 11 B9         [ 2]  289 	jp decomp_loop ; down display LET
      001245                        290 50$:
      001245 5F               [ 1]  291 	clrw x 
      001246 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001247                        297 54$: ; insert command name 
      001247 CD 10 F9         [ 4]  298 	call add_space  
      00124A 90 89            [ 2]  299 	pushw y
      00124C CD 13 21         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00124F 90 85            [ 2]  301 	popw y 
      001251 CD 10 E1         [ 4]  302 	call cpy_cmd_name
      001254 CC 11 B9         [ 2]  303 	jp decomp_loop 
      001257                        304 6$:
                                    305 ; label?
      001257 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      001259 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00125B A6 20            [ 1]  309 	ld a,#32 
      00125D 90 F7            [ 1]  310 	ld (y),a 
      00125F 90 5C            [ 1]  311 	incw y 
      001261                        312 61$:
      001261 89               [ 2]  313 	pushw x 
      001262 CD 17 B2         [ 4]  314 	call skip_string 
      001265 85               [ 2]  315 	popw x 
      001266                        316 62$:	
      001266 F6               [ 1]  317 	ld a,(x)
      001267 27 07            [ 1]  318 	jreq 63$ 
      001269 5C               [ 1]  319 	incw x  
      00126A 90 F7            [ 1]  320 	ld (y),a 
      00126C 90 5C            [ 1]  321 	incw y 
      00126E 20 F6            [ 2]  322 	jra 62$ 
      001270                        323 63$: 
      001270 A6 20            [ 1]  324 	ld a,#32 
      001272 90 F7            [ 1]  325 	ld (y),a 
      001274 90 5C            [ 1]  326 	incw y 
      001276 CC 11 B9         [ 2]  327 	jp decomp_loop
      001279                        328 64$:
      001279 A1 02            [ 1]  329 	cp a,#TK_QSTR 
      00127B 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      00127D CD 10 F9         [ 4]  332 	call add_space
      001280 CD 11 21         [ 4]  333 	call cpy_quote  
      001283 CC 11 B9         [ 2]  334 	jp decomp_loop
      001286                        335 7$:
      001286 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      001288 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      00128A CD 10 F9         [ 4]  339 	call add_space 
      00128D A6 5C            [ 1]  340 	ld a,#'\ 
      00128F 90 F7            [ 1]  341 	ld (y),a 
      001291 90 5C            [ 1]  342 	incw y
      001293 F6               [ 1]  343 	ld a,(x)
      001294 72 5C 00 01      [ 1]  344 	inc in  
      001298 20 06            [ 2]  345 	jra 81$
      00129A A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      00129C 26 09            [ 1]  347 	jrne 9$
      00129E A6 3A            [ 1]  348 	ld a,#':
      0012A0                        349 81$:
      0012A0 90 F7            [ 1]  350 	ld (y),a 
      0012A2 90 5C            [ 1]  351 	incw y 
      0012A4                        352 82$:
      0012A4 CC 11 B9         [ 2]  353 	jp decomp_loop
      0012A7                        354 9$: 
      0012A7 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0012A9 22 0A            [ 1]  356 	jrugt 10$ 
      0012AB A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012AD 5F               [ 1]  358 	clrw x 
      0012AE 97               [ 1]  359 	ld xl,a
      0012AF 1C 12 FC         [ 2]  360 	addw x,#single_char 
      0012B2 F6               [ 1]  361 	ld a,(x)
      0012B3 20 EB            [ 2]  362 	jra 81$ 
      0012B5                        363 10$: 
      0012B5 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012B7 22 0A            [ 1]  365 	jrugt 11$
      0012B9 A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012BB 5F               [ 1]  367 	clrw x 
      0012BC 97               [ 1]  368 	ld xl,a 
      0012BD 1C 13 01         [ 2]  369 	addw x,#add_char 
      0012C0 F6               [ 1]  370 	ld a,(x)
      0012C1 20 DD            [ 2]  371 	jra 81$
      0012C3                        372 11$:
      0012C3 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012C5 22 0A            [ 1]  374 	jrugt 12$
      0012C7 A0 20            [ 1]  375 	sub a,#TK_MULT
      0012C9 5F               [ 1]  376 	clrw x 
      0012CA 97               [ 1]  377 	ld xl,a 
      0012CB 1C 13 03         [ 2]  378 	addw x,#mul_char
      0012CE F6               [ 1]  379 	ld a,(x)
      0012CF 20 CF            [ 2]  380 	jra 81$
      0012D1                        381 12$:
      0012D1 A0 31            [ 1]  382 	sub a,#TK_GT  
      0012D3 48               [ 1]  383 	sll a 
      0012D4 5F               [ 1]  384 	clrw x 
      0012D5 97               [ 1]  385 	ld xl,a 
      0012D6 1C 13 06         [ 2]  386 	addw x,#relop_str 
      0012D9 FE               [ 2]  387 	ldw x,(x)
      0012DA F6               [ 1]  388 	ld a,(x)
      0012DB 5C               [ 1]  389 	incw x 
      0012DC 90 F7            [ 1]  390 	ld (y),a
      0012DE 90 5C            [ 1]  391 	incw y 
      0012E0 F6               [ 1]  392 	ld a,(x)
      0012E1 26 BD            [ 1]  393 	jrne 81$
      0012E3 CC 11 B9         [ 2]  394 	jp decomp_loop 
      0012E6                        395 20$: 
      0012E6 90 7F            [ 1]  396 	clr (y)
      0012E8 1E 03            [ 2]  397 	ldw x,(STR,sp)
      0012EA 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      0012EC C7 00 0A         [ 1]  399 	ld base,a 
      0012EF 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      0012F1 C7 00 23         [ 1]  401 	ld tab_width,a
      0012F4 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      0012F7 90 9F            [ 1]  403 	ld a,yl 
      0012F9                        404 	_drop VSIZE 
      0012F9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0012FB 81               [ 4]  405 	ret 
                                    406 
      0012FC 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001301 2B 2D                  408 add_char: .byte '+','-'
      001303 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001306 13 12 13 14 13 16 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             19 13 1E 13 1B
      001312 3E 00                  411 gt: .asciz ">"
      001314 3D 00                  412 equal: .asciz "="
      001316 3E 3D 00               413 ge: .asciz ">="
      001319 3C 00                  414 lt: .asciz "<"
      00131B 3C 3D 00               415 le: .asciz "<="
      00131E 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001321                        429 cmd_name:
      001321                        430 	_vars VSIZE 
      001321 52 04            [ 2]    1     sub sp,#VSIZE 
      001323 72 5F 00 0D      [ 1]  431 	clr acc16 
      001327 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      001329 AE 34 0F         [ 2]  433 	ldw x,#kword_dict	
      00132C 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      00132E E6 02            [ 1]  435 	ld a,(2,x)
      001330 A4 0F            [ 1]  436 	and a,#15 
      001332 C7 00 0E         [ 1]  437 	ld acc8,a 
      001335 1C 00 03         [ 2]  438 	addw x,#3
      001338 72 BB 00 0D      [ 2]  439 	addw x,acc16
      00133C FE               [ 2]  440 	ldw x,(x) ; code address   
      00133D 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      00133F 27 0C            [ 1]  442 	jreq 2$
      001341 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001343 FE               [ 2]  444 	ldw x,(x) 
      001344 1D 00 02         [ 2]  445 	subw x,#2  
      001347 26 E3            [ 1]  446 	jrne 1$
      001349 4F               [ 1]  447 	clr a 
      00134A 5F               [ 1]  448 	clrw x 
      00134B 20 05            [ 2]  449 	jra 9$
      00134D 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      00134F 1C 00 02         [ 2]  451 	addw x,#2 	
      001352                        452 9$:	_drop VSIZE
      001352 5B 04            [ 2]    1     addw sp,#VSIZE 
      001354 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001355                        118 strlen::
      001355 89               [ 2]  119 	pushw x 
      001356 4F               [ 1]  120 	clr a
      001357 7D               [ 1]  121 1$:	tnz (x) 
      001358 27 04            [ 1]  122 	jreq 9$ 
      00135A 4C               [ 1]  123 	inc a 
      00135B 5C               [ 1]  124 	incw x 
      00135C 20 F9            [ 2]  125 	jra 1$ 
      00135E 85               [ 2]  126 9$:	popw x 
      00135F 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      001360                        137 strcmp:
      001360 F6               [ 1]  138 	ld a,(x)
      001361 27 0B            [ 1]  139 	jreq 5$ 
      001363 90 F1            [ 1]  140 	cp a,(y) 
      001365 26 05            [ 1]  141 	jrne 4$ 
      001367 5C               [ 1]  142 	incw x 
      001368 90 5C            [ 1]  143 	incw y 
      00136A 20 F4            [ 2]  144 	jra strcmp 
      00136C                        145 4$: ; not same  
      00136C 4F               [ 1]  146 	clr a 
      00136D 81               [ 4]  147 	ret 
      00136E                        148 5$: ; same 
      00136E A6 01            [ 1]  149 	ld a,#1 
      001370 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001371                        161 strcpy::
      001371 88               [ 1]  162 	push a 
      001372 89               [ 2]  163 	pushw x 
      001373 90 F6            [ 1]  164 1$: ld a,(y)
      001375 27 06            [ 1]  165 	jreq 9$ 
      001377 F7               [ 1]  166 	ld (x),a 
      001378 5C               [ 1]  167 	incw x 
      001379 90 5C            [ 1]  168 	incw y 
      00137B 20 F6            [ 2]  169 	jra 1$ 
      00137D 7F               [ 1]  170 9$:	clr (x)
      00137E 85               [ 2]  171 	popw x 
      00137F 84               [ 1]  172 	pop a 
      001380 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      001381                        187 move::
      001381 88               [ 1]  188 	push a 
      001382                        189 	_vars VSIZE 
      001382 52 02            [ 2]    1     sub sp,#VSIZE 
      001384 0F 01            [ 1]  190 	clr (INCR,sp)
      001386 0F 02            [ 1]  191 	clr (LB,sp)
      001388 90 89            [ 2]  192 	pushw y 
      00138A 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      00138C 90 85            [ 2]  194 	popw y 
      00138E 27 31            [ 1]  195 	jreq move_exit ; x==y 
      001390 2B 0E            [ 1]  196 	jrmi move_down
      001392                        197 move_up: ; start from top address with incr=-1
      001392 72 BB 00 0D      [ 2]  198 	addw x,acc16
      001396 72 B9 00 0D      [ 2]  199 	addw y,acc16
      00139A 03 01            [ 1]  200 	cpl (INCR,sp)
      00139C 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      00139E 20 05            [ 2]  202 	jra move_loop  
      0013A0                        203 move_down: ; start from bottom address with incr=1 
      0013A0 5A               [ 2]  204     decw x 
      0013A1 90 5A            [ 2]  205 	decw y
      0013A3 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013A5                        207 move_loop:	
      0013A5 C6 00 0D         [ 1]  208     ld a, acc16 
      0013A8 CA 00 0E         [ 1]  209 	or a, acc8
      0013AB 27 14            [ 1]  210 	jreq move_exit 
      0013AD 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013B0 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013B3 90 F6            [ 1]  213 	ld a,(y)
      0013B5 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0013B6 89               [ 2]  215 	pushw x 
      0013B7 CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013BA 5A               [ 2]  217 	decw x 
      0013BB CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013BE 85               [ 2]  219 	popw x 
      0013BF 20 E4            [ 2]  220 	jra move_loop
      0013C1                        221 move_exit:
      0013C1                        222 	_drop VSIZE
      0013C1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013C3 84               [ 1]  223 	pop a 
      0013C4 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013C5                        233 clear_vars:
      0013C5 89               [ 2]  234 	pushw x 
      0013C6 88               [ 1]  235 	push a  
      0013C7 AE 00 34         [ 2]  236 	ldw x,#vars 
      0013CA A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013CC 7F               [ 1]  238 1$:	clr (x)
      0013CD 5C               [ 1]  239 	incw x 
      0013CE 4A               [ 1]  240 	dec a 
      0013CF 26 FB            [ 1]  241 	jrne 1$
      0013D1 84               [ 1]  242 	pop a 
      0013D2 85               [ 2]  243 	popw x 
      0013D3 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      0013D4 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      00141A                        255 system_information:
      00141A AE 13 D4         [ 2]  256 	ldw x,#software 
      00141D CD 09 37         [ 4]  257 	call puts 
      001420 A6 02            [ 1]  258 	ld a,#MAJOR 
      001422 C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      001425 5F               [ 1]  260 	clrw x 
      001426 CF 00 0C         [ 2]  261 	ldw acc24,x
      001429 72 5F 00 23      [ 1]  262 	clr tab_width  
      00142D 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001431 CD 17 F8         [ 4]  264 	call prt_acc24 
      001434 A6 2E            [ 1]  265 	ld a,#'.
      001436 CD 08 DA         [ 4]  266 	call putc 
      001439 A6 00            [ 1]  267 	ld a,#MINOR 
      00143B C7 00 0E         [ 1]  268 	ld acc8,a 
      00143E 5F               [ 1]  269 	clrw x 
      00143F CF 00 0C         [ 2]  270 	ldw acc24,x 
      001442 CD 17 F8         [ 4]  271 	call prt_acc24
      001445 A6 0D            [ 1]  272 	ld a,#CR 
      001447 CD 08 DA         [ 4]  273 	call putc
                                    274 ;call test 
      00144A 81               [ 4]  275 	ret
                                    276 
      00144B                        277 warm_init:
      00144B 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      00144F 72 5F 00 22      [ 1]  279 	clr flags 
      001453 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      001457 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      00145B 35 0A 00 0A      [ 1]  282 	mov base,#10 
      00145F AE 00 00         [ 2]  283 	ldw x,#0 
      001462 CF 00 04         [ 2]  284 	ldw basicptr,x 
      001465 CF 00 00         [ 2]  285 	ldw in.w,x 
      001468 72 5F 00 03      [ 1]  286 	clr count
      00146C 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      00146D                        293 clear_basic:
      00146D 89               [ 2]  294 	pushw x 
      00146E 72 5F 00 03      [ 1]  295 	clr count
      001472 72 5F 00 01      [ 1]  296 	clr in  
      001476 AE 00 90         [ 2]  297 	ldw x,#free_ram 
      001479 CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      00147C CF 00 1D         [ 2]  299 	ldw txtend,x 
      00147F CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      001482 CF 00 32         [ 2]  301 	ldw dvar_end,x 
      001485 CD 13 C5         [ 4]  302 	call clear_vars 
      001488 85               [ 2]  303 	popw x
      001489 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00148A                        309 err_msg:
      00148A 00 00 14 AE 14 BB 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             C9 14 E2 14 F1
      001496 15 07 15 1D 15 37 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             48 15 59
      0014A0 15 65 15 98 15 A8 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



             BC 15 CF
      0014AA 15 DC 15 E6            313 	.word err_overflow,err_read_only  
                                    314 
      0014AE 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014BB 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014C9 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      0014E2 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      0014F1 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001507 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      00151D 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001537 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001548 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001559 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001565 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      001598 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015A8 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015BC 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015CF 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      0015DC 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0015E6 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
                                    332 
      001602 0A 72 75 6E 20 74 69   333 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001614 0A 63 6F 6D 70 69 6C   334 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001625 6C 61 73 74 20 74 6F   335 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    336 
      001635                        337 syntax_error::
      001635 A6 02            [ 1]  338 	ld a,#ERR_SYNTAX 
                                    339 
      001637                        340 tb_error::
      001637 72 0A 00 22 4C   [ 2]  341 	btjt flags,#FCOMP,1$
      00163C 88               [ 1]  342 	push a 
      00163D AE 16 02         [ 2]  343 	ldw x, #rt_msg 
      001640 CD 09 37         [ 4]  344 	call puts 
      001643 84               [ 1]  345 	pop a 
      001644 AE 14 8A         [ 2]  346 	ldw x, #err_msg 
      001647 72 5F 00 0D      [ 1]  347 	clr acc16 
      00164B 48               [ 1]  348 	sll a
      00164C 72 59 00 0D      [ 1]  349 	rlc acc16  
      001650 C7 00 0E         [ 1]  350 	ld acc8, a 
      001653 72 BB 00 0D      [ 2]  351 	addw x,acc16 
      001657 FE               [ 2]  352 	ldw x,(x)
      001658 CD 09 37         [ 4]  353 	call puts
      00165B CE 00 04         [ 2]  354 	ldw x,basicptr 
                           000001   355 .if DEBUG 
      00165E C6 00 03         [ 1]  356 ld a,count 
      001661 90 5F            [ 1]  357 clrw y 
      001663 90 02            [ 1]  358 rlwa y  
      001665 CD 06 32         [ 4]  359 call hex_dump
      001668 CE 00 04         [ 2]  360 ldw x,basicptr
                                    361 .endif 
      00166B C6 00 01         [ 1]  362 	ld a,in 
      00166E CD 1F 49         [ 4]  363 	call prt_basic_line
      001671 AE 16 25         [ 2]  364 	ldw x,#tk_id 
      001674 CD 09 37         [ 4]  365 	call puts 
      001677 C6 00 02         [ 1]  366 	ld a,in.saved 
      00167A 5F               [ 1]  367 	clrw x 
      00167B 97               [ 1]  368 	ld xl,a 
      00167C 72 BB 00 04      [ 2]  369 	addw x,basicptr 
      001680 F6               [ 1]  370 	ld a,(x)
      001681 5F               [ 1]  371 	clrw x 
      001682 97               [ 1]  372 	ld xl,a 
      001683 CD 17 E1         [ 4]  373 	call prt_i16
      001686 20 35            [ 2]  374 	jra 6$
      001688                        375 1$:	
      001688 88               [ 1]  376 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      001689 AE 16 14         [ 2]  377 	ldw x,#comp_msg
      00168C CD 09 37         [ 4]  378 	call puts 
      00168F 84               [ 1]  379 	pop a 
      001690 AE 14 8A         [ 2]  380 	ldw x, #err_msg 
      001693 72 5F 00 0D      [ 1]  381 	clr acc16 
      001697 48               [ 1]  382 	sll a
      001698 72 59 00 0D      [ 1]  383 	rlc acc16  
      00169C C7 00 0E         [ 1]  384 	ld acc8, a 
      00169F 72 BB 00 0D      [ 2]  385 	addw x,acc16 
      0016A3 FE               [ 2]  386 	ldw x,(x)
      0016A4 CD 09 37         [ 4]  387 	call puts
      0016A7 AE 16 90         [ 2]  388 	ldw x,#tib
      0016AA CD 09 37         [ 4]  389 	call puts 
      0016AD A6 0D            [ 1]  390 	ld a,#CR 
      0016AF CD 08 DA         [ 4]  391 	call putc
      0016B2 CE 00 00         [ 2]  392 	ldw x,in.w
      0016B5 CD 09 A4         [ 4]  393 	call spaces
      0016B8 A6 5E            [ 1]  394 	ld a,#'^
      0016BA CD 08 DA         [ 4]  395 	call putc 
      0016BD AE 17 FF         [ 2]  396 6$: ldw x,#STACK_EMPTY 
      0016C0 94               [ 1]  397     ldw sp,x
                                    398 
      0016C1                        399 warm_start:
      0016C1 CD 14 4B         [ 4]  400 	call warm_init
                                    401 ;----------------------------
                                    402 ;   BASIC interpreter
                                    403 ;----------------------------
      0016C4                        404 cmd_line: ; user interface 
      0016C4 A6 0D            [ 1]  405 	ld a,#CR 
      0016C6 CD 08 DA         [ 4]  406 	call putc 
      0016C9 A6 3E            [ 1]  407 	ld a,#'> 
      0016CB CD 08 DA         [ 4]  408 	call putc
      0016CE CD 0A 3C         [ 4]  409 	call readln
      0016D1 72 5D 00 03      [ 1]  410 	tnz count 
      0016D5 27 ED            [ 1]  411 	jreq cmd_line
      0016D7 CD 10 65         [ 4]  412 	call compile
                                    413 ;;;;;;;;;;;;;;;;;;;;;;	
                                    414 ;pushw y 
                                    415 ;ldw x,txtbgn  
                                    416 ;ldw y,txtend
                                    417 ;ldw acc16,x   
                                    418 ;subw y,acc16 
                                    419 ;call hex_dump
                                    420 ;popw y 
                                    421 ;;;;;;;;;;;;;;;;;;;;;;
                                    422 
                                    423 ; if text begin with a line number
                                    424 ; the compiler set count to zero    
                                    425 ; so code is not interpreted
      0016DA 72 5D 00 03      [ 1]  426 	tnz count 
      0016DE 27 E4            [ 1]  427 	jreq cmd_line
                                    428 	
                                    429 ; if direct command 
                                    430 ; it's ready to interpret 
                                    431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



                                    432 ;; This is the interpreter loop
                                    433 ;; for each BASIC code line. 
                                    434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016E0                        435 interpreter: 
      0016E0 C6 00 01         [ 1]  436 	ld a,in 
      0016E3 C1 00 03         [ 1]  437 	cp a,count 
      0016E6 2B 1D            [ 1]  438 	jrmi interp_loop
      0016E8                        439 next_line:
      0016E8 72 01 00 22 D7   [ 2]  440 	btjf flags, #FRUN, cmd_line
      0016ED CE 00 04         [ 2]  441 	ldw x,basicptr
      0016F0 72 BB 00 00      [ 2]  442 	addw x,in.w 
      0016F4 C3 00 1D         [ 2]  443 	cpw x,txtend 
      0016F7 2A C8            [ 1]  444 	jrpl warm_start
      0016F9 CF 00 04         [ 2]  445 	ldw basicptr,x ; start of next line  
      0016FC E6 02            [ 1]  446 	ld a,(2,x)
      0016FE C7 00 03         [ 1]  447 	ld count,a 
      001701 35 03 00 01      [ 1]  448 	mov in,#3 ; skip first 3 bytes of line 
      001705                        449 interp_loop:
      001705 CD 17 99         [ 4]  450 	call next_token
      001708 A1 00            [ 1]  451 	cp a,#TK_NONE 
      00170A 27 DC            [ 1]  452 	jreq next_line 
      00170C A1 80            [ 1]  453 	cp a,#TK_CMD
      00170E 26 0C            [ 1]  454 	jrne 1$
      001710                        455 	_get_code_addr
      001710 FE               [ 2]    1         ldw x,(x)
      001711 72 5C 00 01      [ 1]    2         inc in 
      001715 72 5C 00 01      [ 1]    3         inc in 
      001719 FD               [ 4]  456 	call(x)
      00171A 20 E9            [ 2]  457 	jra interp_loop 
      00171C                        458 1$:	 
      00171C A1 85            [ 1]  459 	cp a,#TK_VAR
      00171E 26 05            [ 1]  460 	jrne 2$
      001720 CD 1C 90         [ 4]  461 	call let_var  
      001723 20 E0            [ 2]  462 	jra interp_loop 
      001725                        463 2$:	
      001725 A1 05            [ 1]  464 	cp a,#TK_ARRAY 
      001727 26 05            [ 1]  465 	jrne 3$
      001729 CD 1C 8B         [ 4]  466 	call let_array 
      00172C 20 D7            [ 2]  467 	jra interp_loop
      00172E                        468 3$:	
      00172E A1 03            [ 1]  469 	cp a,#TK_LABEL
      001730 26 05            [ 1]  470 	jrne 4$
      001732 CD 17 3E         [ 4]  471 	call let_dvar  
      001735 20 CE            [ 2]  472 	jra interp_loop 
      001737                        473 4$: 
      001737 A1 0A            [ 1]  474 	cp a,#TK_COLON 
      001739 27 CA            [ 1]  475 	jreq interp_loop
      00173B CC 16 35         [ 2]  476 5$:	jp syntax_error 
                                    477 
                                    478 
                                    479 ;----------------------
                                    480 ; when a label is met 
                                    481 ; at interp_loop
                                    482 ; it may be a variable 
                                    483 ; assignement to DIM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                                    484 ; variable 
                                    485 ;----------------------
                           000001   486 	VAR_NAME=1 
                           000003   487 	REC_LEN=3
                           000004   488 	VSIZE=4 
      00173E                        489 let_dvar:
      00173E                        490 	_vars VSIZE 
      00173E 52 04            [ 2]    1     sub sp,#VSIZE 
      001740 1F 01            [ 2]  491 	ldw (VAR_NAME,sp),x
      001742 0F 03            [ 1]  492 	clr (REC_LEN,sp) 
      001744 CD 17 B2         [ 4]  493 	call skip_string 
      001747 CE 00 04         [ 2]  494 	ldw x,basicptr 
      00174A 72 BB 00 00      [ 2]  495 	addw x,in.w 
      00174E F6               [ 1]  496 	ld a,(x)
      00174F A1 32            [ 1]  497 	cp a,#TK_EQUAL 
      001751 26 43            [ 1]  498 	jrne 9$ 
                                    499 ; dvar assignment 
      001753 72 5C 00 01      [ 1]  500 	inc in  
      001757 CD 1B BE         [ 4]  501 	call condition  
      00175A A1 84            [ 1]  502 	cp a,#TK_INTGR 
      00175C 27 03            [ 1]  503 	jreq 1$ 
      00175E CC 16 35         [ 2]  504 0$:	jp syntax_error 
      001761                        505 1$: 
      001761 1E 01            [ 2]  506 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      001763 CD 13 55         [ 4]  507 	call strlen 
      001766 AB 05            [ 1]  508 	add a,#REC_XTRA_BYTES
      001768 6B 04            [ 1]  509 	ld (REC_LEN+1,sp),a 
      00176A CD 1C FA         [ 4]  510 	call search_name 
      00176D 5D               [ 2]  511 	tnzw x 
      00176E 27 EE            [ 1]  512 	jreq 0$ 
      001770 F6               [ 1]  513 	ld a,(x)
      001771 2A 05            [ 1]  514 	jrpl 2$
      001773 A6 11            [ 1]  515 	ld a,#ERR_RD_ONLY 
      001775 CC 16 37         [ 2]  516 	jp tb_error 
      001778                        517 2$:
      001778 72 FB 03         [ 2]  518 	addw x,(REC_LEN,sp)
      00177B 1D 00 03         [ 2]  519 	subw x,#CELL_SIZE 
      00177E CF 00 19         [ 2]  520 	ldw ptr16,x
      001781                        521 	_xpop 
      001781 90 F6            [ 1]    1     ld a,(y)
      001783 93               [ 1]    2     ldw x,y 
      001784 EE 01            [ 2]    3     ldw x,(1,x)
      001786 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00178A 72 C7 00 19      [ 4]  522 	ld [ptr16],a 
      00178E 72 5C 00 1A      [ 1]  523 	inc ptr8 
      001792 72 CF 00 19      [ 5]  524 	ldw [ptr16],x 
      001796                        525 9$: _drop VSIZE 	
      001796 5B 04            [ 2]    1     addw sp,#VSIZE 
      001798 81               [ 4]  526 	ret 
                                    527 
                                    528 
                                    529 ;--------------------------
                                    530 ; extract next token from
                                    531 ; token list 
                                    532 ; basicptr -> base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    533 ; in  -> offset in list array 
                                    534 ; output:
                                    535 ;   A 		token attribute
                                    536 ;   X 		*token_value 
                                    537 ;----------------------------------------
      001799                        538 next_token::
                                    539 ;	clrw x 
      001799 C6 00 01         [ 1]  540 	ld a,in 
      00179C C7 00 02         [ 1]  541 	ld in.saved,a ; in case "_unget_token" needed 
                                    542 ; don't replace sub by "cp a,count" 
                                    543 ; if end of line must return with A=0   	
      00179F C0 00 03         [ 1]  544 	sub a,count 
      0017A2 27 0D            [ 1]  545 	jreq 9$ ; end of line 
      0017A4                        546 0$: 
      0017A4 CE 00 04         [ 2]  547 	ldw x,basicptr 
      0017A7 72 BB 00 00      [ 2]  548 	addw x,in.w 
      0017AB F6               [ 1]  549 	ld a,(x)
      0017AC 5C               [ 1]  550 	incw x
      0017AD 72 5C 00 01      [ 1]  551 	inc in   
      0017B1 81               [ 4]  552 9$: ret 
                                    553 
                                    554 ;-------------------------
                                    555 ;  skip .asciz in BASIC line 
                                    556 ;  name 
                                    557 ;  input:
                                    558 ;     x		* string 
                                    559 ;  output:
                                    560 ;     none 
                                    561 ;-------------------------
      0017B2                        562 skip_string:
      0017B2 F6               [ 1]  563 	ld a,(x)
      0017B3 27 03            [ 1]  564 	jreq 1$
      0017B5 5C               [ 1]  565 	incw x 
      0017B6 20 FA            [ 2]  566 	jra skip_string 
      0017B8 5C               [ 1]  567 1$: incw x 	
      0017B9 72 B0 00 04      [ 2]  568 	subw x,basicptr 
      0017BD CF 00 00         [ 2]  569 	ldw in.w,x 
      0017C0 81               [ 4]  570 	ret 
                                    571 
                                    572 ;---------------------
                                    573 ; extract 16 bits  
                                    574 ; address from BASIC
                                    575 ; code 
                                    576 ; input:
                                    577 ;    X    *address
                                    578 ; output:
                                    579 ;    X    address 
                                    580 ;-------------------- 
      0017C1                        581 get_addr:
      0017C1 FE               [ 2]  582 	ldw x,(x)
      0017C2 72 5C 00 01      [ 1]  583 	inc in 
      0017C6 72 5C 00 01      [ 1]  584 	inc in 
      0017CA 81               [ 4]  585 	ret 
                                    586 
                                    587 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    588 ; extract int24_t  
                                    589 ; value from BASIC 
                                    590 ; code 
                                    591 ; input:
                                    592 ;    X   *integer 
                                    593 ; output:
                                    594 ;    A:X   int24  
                                    595 ;--------------------
      0017CB                        596 get_int24:
      0017CB F6               [ 1]  597 	ld a,(x)
      0017CC EE 01            [ 2]  598 	ldw x,(1,x)
                                    599 ; skip 3 bytes 
      0017CE 72 5C 00 01      [ 1]  600 	inc in 
      0017D2 72 5C 00 01      [ 1]  601 	inc in 
      0017D6 72 5C 00 01      [ 1]  602 	inc in 
      0017DA 81               [ 4]  603 	ret 
                                    604 
                                    605 ;-------------------------
                                    606 ; get character from 
                                    607 ; BASIC code 
                                    608 ; input:
                                    609 ;    X   *char 
                                    610 ; output:
                                    611 ;    A    char 
                                    612 ;-------------------------
      0017DB                        613 get_char:
      0017DB F6               [ 1]  614 	ld a,(x)
      0017DC 72 5C 00 01      [ 1]  615 	inc in  
      0017E0 81               [ 4]  616     ret 
                                    617 
                                    618 ;-----------------------------------
                                    619 ; print a 16 bit integer 
                                    620 ; using variable 'base' as conversion
                                    621 ; format.
                                    622 ; input:
                                    623 ;    X       integer to print 
                                    624 ;   'base'    conversion base 
                                    625 ; output:
                                    626 ;   terminal  
                                    627 ;-----------------------------------
      0017E1                        628 prt_i16:
      0017E1 72 5F 00 0C      [ 1]  629 	clr acc24 
      0017E5 CF 00 0D         [ 2]  630 	ldw acc16,x 
      0017E8 A6 10            [ 1]  631 	ld a,#16
      0017EA C1 00 0A         [ 1]  632 	cp a,base
      0017ED 27 09            [ 1]  633 	jreq prt_acc24  
      0017EF 72 0F 00 0D 04   [ 2]  634 	btjf acc16,#7,prt_acc24
      0017F4 72 53 00 0C      [ 1]  635 	cpl acc24 ; sign extend 
                                    636 	
                                    637 ;------------------------------------
                                    638 ; print integer in acc24 
                                    639 ; input:
                                    640 ;	acc24 		integer to print 
                                    641 ;	'base' 		numerical base for conversion 
                                    642 ;   'tab_width' field width 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                    643 ;    A 			signed||unsigned conversion
                                    644 ;  output:
                                    645 ;    A          string length
                                    646 ;------------------------------------
      0017F8                        647 prt_acc24:
      0017F8 A6 FF            [ 1]  648 	ld a,#255  ; signed conversion  
      0017FA CD 18 1E         [ 4]  649     call itoa  ; conversion entier en  .asciz
      0017FD CD 11 0F         [ 4]  650 	call right_align  
      001800 88               [ 1]  651 	push a 
      001801 CD 09 37         [ 4]  652 	call puts
      001804 84               [ 1]  653 	pop a 
      001805 81               [ 4]  654     ret	
                                    655 
                                    656 ;---------------------------------------
                                    657 ;  print value at xstack top 
                                    658 ;---------------------------------------
      001806                        659 print_top: 
      001806                        660 	_xpop 
      001806 90 F6            [ 1]    1     ld a,(y)
      001808 93               [ 1]    2     ldw x,y 
      001809 EE 01            [ 2]    3     ldw x,(1,x)
      00180B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00180F C7 00 0C         [ 1]  661 	ld acc24,a 
      001812 CF 00 0D         [ 2]  662 	ldw acc16,x 
      001815 CD 17 F8         [ 4]  663 	call prt_acc24 
      001818 A6 20            [ 1]  664 	ld a,#SPACE
      00181A CD 08 DA         [ 4]  665 	call putc 
      00181D 81               [ 4]  666 	ret 
                                    667 
                                    668 ;------------------------------------
                                    669 ; convert integer in acc24 to string
                                    670 ; input:
                                    671 ;   'base'	conversion base 
                                    672 ;	acc24	integer to convert
                                    673 ;   A       0=unsigned, else signed 
                                    674 ; output:
                                    675 ;   X  		pointer to first char of string
                                    676 ;   A       string length
                                    677 ;------------------------------------
                           000001   678 	SIGN=1  ; integer sign 
                           000002   679 	LEN=2 
                           000003   680 	PSTR=3
                           000004   681 	VSIZE=4 ;locals size
      00181E                        682 itoa::
      00181E                        683 	_vars VSIZE
      00181E 52 04            [ 2]    1     sub sp,#VSIZE 
      001820 0F 02            [ 1]  684 	clr (LEN,sp) ; string length  
      001822 0F 01            [ 1]  685 	clr (SIGN,sp)    ; sign
      001824 4D               [ 1]  686 	tnz A
      001825 27 11            [ 1]  687 	jreq 1$ ; unsigned conversion  
      001827 C6 00 0A         [ 1]  688 	ld a,base 
      00182A A1 0A            [ 1]  689 	cp a,#10
      00182C 26 0A            [ 1]  690 	jrne 1$
                                    691 	; base 10 string display with negative sign if bit 23==1
      00182E 72 0F 00 0C 05   [ 2]  692 	btjf acc24,#7,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001833 03 01            [ 1]  693 	cpl (SIGN,sp)
      001835 CD 02 0A         [ 4]  694 	call neg_acc24
      001838                        695 1$:
                                    696 ; initialize string pointer 
      001838 AE 16 90         [ 2]  697 	ldw x,#tib 
      00183B 1C 00 50         [ 2]  698 	addw x,#TIB_SIZE
      00183E 5A               [ 2]  699 	decw x 
      00183F 7F               [ 1]  700 	clr (x)
      001840                        701 itoa_loop:
      001840 C6 00 0A         [ 1]  702     ld a,base
      001843 CD 02 D6         [ 4]  703     call divu24_8 ; acc24/A 
      001846 AB 30            [ 1]  704     add a,#'0  ; remainder of division
      001848 A1 3A            [ 1]  705     cp a,#'9+1
      00184A 2B 02            [ 1]  706     jrmi 2$
      00184C AB 07            [ 1]  707     add a,#7 
      00184E                        708 2$:	
      00184E 5A               [ 2]  709 	decw x
      00184F F7               [ 1]  710     ld (x),a
      001850 0C 02            [ 1]  711 	inc (LEN,sp)
                                    712 	; if acc24==0 conversion done
      001852 C6 00 0C         [ 1]  713 	ld a,acc24
      001855 CA 00 0D         [ 1]  714 	or a,acc16
      001858 CA 00 0E         [ 1]  715 	or a,acc8
      00185B 26 E3            [ 1]  716     jrne itoa_loop
                                    717 	;conversion done, next add '$' or '-' as required
      00185D C6 00 0A         [ 1]  718 	ld a,base 
      001860 A1 10            [ 1]  719 	cp a,#16
      001862 27 08            [ 1]  720 	jreq 8$
      001864 7B 01            [ 1]  721 	ld a,(SIGN,sp)
      001866 27 0A            [ 1]  722     jreq 10$
      001868 A6 2D            [ 1]  723     ld a,#'-
      00186A 20 02            [ 2]  724 	jra 9$ 
      00186C                        725 8$:	
      00186C A6 24            [ 1]  726 	ld a,#'$ 
      00186E 5A               [ 2]  727 9$: decw x
      00186F F7               [ 1]  728     ld (x),a
      001870 0C 02            [ 1]  729 	inc (LEN,sp)
      001872                        730 10$:
      001872 7B 02            [ 1]  731 	ld a,(LEN,sp)
      001874                        732 	_drop VSIZE
      001874 5B 04            [ 2]    1     addw sp,#VSIZE 
      001876 81               [ 4]  733 	ret
                                    734 
                                    735 ;------------------------------------
                                    736 ; convert alpha to uppercase
                                    737 ; input:
                                    738 ;    a  character to convert
                                    739 ; output:
                                    740 ;    a  uppercase character
                                    741 ;------------------------------------
      001877                        742 to_upper::
      001877 A1 61            [ 1]  743 	cp a,#'a
      001879 2A 01            [ 1]  744 	jrpl 1$
      00187B 81               [ 4]  745 0$:	ret
      00187C A1 7A            [ 1]  746 1$: cp a,#'z	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00187E 22 FB            [ 1]  747 	jrugt 0$
      001880 A0 20            [ 1]  748 	sub a,#32
      001882 81               [ 4]  749 	ret
                                    750 	
                                    751 ;------------------------------------
                                    752 ; convert pad content in integer
                                    753 ; input:
                                    754 ;    x		* .asciz to convert
                                    755 ; output:
                                    756 ;    acc24      int24_t
                                    757 ;------------------------------------
                                    758 	; local variables
                           000001   759 	SIGN=1 ; 1 byte, 
                           000002   760 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   761 	TEMP=3 ; 1 byte, temporary storage
                           000004   762 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   763 	VSIZE=5 ; 5 bytes reserved for local storage
      001883                        764 atoi24::
      001883                        765 	_vars VSIZE
      001883 52 05            [ 2]    1     sub sp,#VSIZE 
      001885 1F 04            [ 2]  766 	ldw (XTEMP,sp),x 
                                    767 ; conversion made on xstack 
      001887 4F               [ 1]  768 	clr a 
      001888 5F               [ 1]  769 	clrw x 
      001889                        770 	_xpush 
      001889 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00188D 90 F7            [ 1]    2     ld (y),a 
      00188F 90 EF 01         [ 2]    3     ldw (1,y),x 
      001892 0F 01            [ 1]  771 	clr (SIGN,sp)
      001894 A6 0A            [ 1]  772 	ld a,#10
      001896 6B 02            [ 1]  773 	ld (BASE,sp),a ; default base decimal
      001898 1E 04            [ 2]  774 	ldw x,(XTEMP,sp)
      00189A F6               [ 1]  775 	ld a,(x)
      00189B 27 4E            [ 1]  776 	jreq 9$  ; completed if 0
      00189D A1 2D            [ 1]  777 	cp a,#'-
      00189F 26 04            [ 1]  778 	jrne 1$
      0018A1 03 01            [ 1]  779 	cpl (SIGN,sp)
      0018A3 20 08            [ 2]  780 	jra 2$
      0018A5 A1 24            [ 1]  781 1$: cp a,#'$
      0018A7 26 08            [ 1]  782 	jrne 3$
      0018A9 A6 10            [ 1]  783 	ld a,#16
      0018AB 6B 02            [ 1]  784 	ld (BASE,sp),a
      0018AD 5C               [ 1]  785 2$:	incw x
      0018AE 1F 04            [ 2]  786 	ldw (XTEMP,sp),x 
      0018B0 F6               [ 1]  787 	ld a,(x)
      0018B1                        788 3$:	; char to digit 
      0018B1 A1 61            [ 1]  789 	cp a,#'a
      0018B3 2B 02            [ 1]  790 	jrmi 4$
      0018B5 A0 20            [ 1]  791 	sub a,#32
      0018B7 A1 30            [ 1]  792 4$:	cp a,#'0
      0018B9 2B 30            [ 1]  793 	jrmi 9$
      0018BB A0 30            [ 1]  794 	sub a,#'0
      0018BD A1 0A            [ 1]  795 	cp a,#10
      0018BF 2B 06            [ 1]  796 	jrmi 5$
      0018C1 A0 07            [ 1]  797 	sub a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0018C3 11 02            [ 1]  798 	cp a,(BASE,sp)
      0018C5 2A 24            [ 1]  799 	jrpl 9$
      0018C7 6B 03            [ 1]  800 5$:	ld (TEMP,sp),a
      0018C9 7B 02            [ 1]  801 	ld a,(BASE,sp)
      0018CB CD 02 27         [ 4]  802 	call mulu24_8
      0018CE                        803 	_xpush 
      0018CE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018D2 90 F7            [ 1]    2     ld (y),a 
      0018D4 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018D7 5F               [ 1]  804 	clrw x 
      0018D8 7B 03            [ 1]  805 	ld a,(TEMP,sp)
      0018DA 02               [ 1]  806 	rlwa x 
      0018DB                        807 	_xpush 
      0018DB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018DF 90 F7            [ 1]    2     ld (y),a 
      0018E1 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018E4 CD 01 6B         [ 4]  808 	call add24 
      0018E7 1E 04            [ 2]  809 	ldw x,(XTEMP,sp)
      0018E9 20 C2            [ 2]  810 	jra 2$
      0018EB 0D 01            [ 1]  811 9$:	tnz (SIGN,sp)
      0018ED 27 03            [ 1]  812     jreq atoi_exit
      0018EF CD 01 F0         [ 4]  813     call neg24
      0018F2                        814 atoi_exit:
      0018F2                        815 	_xpop 
      0018F2 90 F6            [ 1]    1     ld a,(y)
      0018F4 93               [ 1]    2     ldw x,y 
      0018F5 EE 01            [ 2]    3     ldw x,(1,x)
      0018F7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018FB C7 00 0C         [ 1]  816 	ld acc24,a 
      0018FE CF 00 0D         [ 2]  817 	ldw acc16,x  
      001901                        818 	_drop VSIZE
      001901 5B 05            [ 2]    1     addw sp,#VSIZE 
      001903 81               [ 4]  819 	ret
                                    820 
                                    821 
                                    822 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    823 ;;   TINY BASIC  operators,
                                    824 ;;   commands and functions 
                                    825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    826 
                                    827 ;---------------------------------
                                    828 ; dictionary search 
                                    829 ; input:
                                    830 ;	X 		dictionary entry point, name field  
                                    831 ;   y		.asciz name to search 
                                    832 ; output:
                                    833 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    834 ;  X		routine address|TK_OP 
                                    835 ;---------------------------------
                           000001   836 	NLEN=1 ; cmd length 
                           000002   837 	XSAVE=2
                           000004   838 	YSAVE=4
                           000005   839 	VSIZE=5 
      001904                        840 search_dict::
      001904                        841 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001904 52 05            [ 2]    1     sub sp,#VSIZE 
      001906 17 04            [ 2]  842 	ldw (YSAVE,sp),y 
      001908                        843 search_next:
      001908 1F 02            [ 2]  844 	ldw (XSAVE,sp),x 
                                    845 ; get name length in dictionary	
      00190A F6               [ 1]  846 	ld a,(x)
      00190B A4 0F            [ 1]  847 	and a,#0xf 
      00190D 6B 01            [ 1]  848 	ld (NLEN,sp),a  
      00190F 16 04            [ 2]  849 	ldw y,(YSAVE,sp) ; name pointer 
      001911 5C               [ 1]  850 	incw x 
      001912                        851 cp_loop:
      001912 90 F6            [ 1]  852 	ld a,(y)
      001914 27 1B            [ 1]  853 	jreq str_match 
      001916 0D 01            [ 1]  854 	tnz (NLEN,sp)
      001918 27 0A            [ 1]  855 	jreq no_match  
      00191A F1               [ 1]  856 	cp a,(x)
      00191B 26 07            [ 1]  857 	jrne no_match 
      00191D 90 5C            [ 1]  858 	incw y 
      00191F 5C               [ 1]  859 	incw x
      001920 0A 01            [ 1]  860 	dec (NLEN,sp)
      001922 20 EE            [ 2]  861 	jra cp_loop 
      001924                        862 no_match:
      001924 1E 02            [ 2]  863 	ldw x,(XSAVE,sp) 
      001926 1D 00 02         [ 2]  864 	subw x,#2 ; move X to link field
      001929 4B 00            [ 1]  865 	push #TK_NONE 
      00192B FE               [ 2]  866 	ldw x,(x) ; next word link 
      00192C 84               [ 1]  867 	pop a ; TK_NONE 
      00192D 27 1D            [ 1]  868 	jreq search_exit  ; not found  
                                    869 ;try next 
      00192F 20 D7            [ 2]  870 	jra search_next
      001931                        871 str_match:
      001931 1E 02            [ 2]  872 	ldw x,(XSAVE,sp)
      001933 F6               [ 1]  873 	ld a,(X)
      001934 6B 01            [ 1]  874 	ld (NLEN,sp),a ; needed to test keyword type  
      001936 A4 0F            [ 1]  875 	and a,#NLEN_MASK 
                                    876 ; move x to procedure address field 	
      001938 4C               [ 1]  877 	inc a 
      001939 C7 00 0E         [ 1]  878 	ld acc8,a 
      00193C 72 5F 00 0D      [ 1]  879 	clr acc16 
      001940 72 BB 00 0D      [ 2]  880 	addw x,acc16 
      001944 FE               [ 2]  881 	ldw x,(x) ; routine address  
                                    882 ;determine keyword type bits 7:4 
      001945 7B 01            [ 1]  883 	ld a,(NLEN,sp)
      001947 A4 F0            [ 1]  884 	and a,#KW_TYPE_MASK 
      001949 4E               [ 1]  885 	swap a 
      00194A AB 80            [ 1]  886 	add a,#128
      00194C                        887 search_exit: 
      00194C                        888 	_drop VSIZE 
      00194C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00194E 81               [ 4]  889 	ret 
                                    890 
                                    891 ;---------------------
                                    892 ; check if next token
                                    893 ;  is of expected type 
                                    894 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    895 ;   A 		 expected token attribute
                                    896 ;  ouput:
                                    897 ;   none     if fail call syntax_error 
                                    898 ;--------------------
      00194F                        899 expect:
      00194F 88               [ 1]  900 	push a 
      001950 CD 17 99         [ 4]  901 	call next_token 
      001953 11 01            [ 1]  902 	cp a,(1,sp)
      001955 27 03            [ 1]  903 	jreq 1$
      001957 CC 16 35         [ 2]  904 	jp syntax_error
      00195A 84               [ 1]  905 1$: pop a 
      00195B 81               [ 4]  906 	ret 
                                    907 
                                    908 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    909 ; parse arguments list 
                                    910 ; between ()
                                    911 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195C                        912 func_args:
      00195C A6 06            [ 1]  913 	ld a,#TK_LPAREN 
      00195E CD 19 4F         [ 4]  914 	call expect 
                                    915 ; expected to continue in arg_list 
                                    916 ; caller must check for TK_RPAREN 
                                    917 
                                    918 ;-------------------------------
                                    919 ; parse embedded BASIC routines 
                                    920 ; arguments list.
                                    921 ; arg_list::=  expr[','expr]*
                                    922 ; all arguments are of int24_t type
                                    923 ; and pushed on stack 
                                    924 ; input:
                                    925 ;   none
                                    926 ; output:
                                    927 ;   xstack{n}   arguments pushed on xstack
                                    928 ;   A 	number of arguments pushed on xstack  
                                    929 ;--------------------------------
      001961                        930 arg_list:
      001961 4B 00            [ 1]  931 	push #0
      001963 CD 1B BE         [ 4]  932 1$:	call condition 
      001966 4D               [ 1]  933 	tnz a 
      001967 27 12            [ 1]  934 	jreq 7$  
      001969 0C 01            [ 1]  935 	inc (1,sp)
      00196B CD 17 99         [ 4]  936 	call next_token 
      00196E A1 08            [ 1]  937 	cp a,#TK_COMMA 
      001970 27 F1            [ 1]  938 	jreq 1$ 
      001972 A1 07            [ 1]  939 	cp a,#TK_RPAREN
      001974 27 05            [ 1]  940 	jreq 7$
      001976                        941 	_unget_token 
      001976 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00197B 84               [ 1]  942 7$:	pop a  
      00197C 81               [ 4]  943 	ret 
                                    944 
                                    945 ;--------------------------------
                                    946 ;   BASIC commnands 
                                    947 ;--------------------------------
                                    948 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    949 ;--------------------------------
                                    950 ;  arithmetic and relational 
                                    951 ;  routines
                                    952 ;  operators precedence
                                    953 ;  highest to lowest
                                    954 ;  operators on same row have 
                                    955 ;  same precedence and are executed
                                    956 ;  from left to right.
                                    957 ;	'*','/','%'
                                    958 ;   '-','+'
                                    959 ;   '=','>','<','>=','<=','<>','><'
                                    960 ;   '<>' and '><' are equivalent for not equal.
                                    961 ;--------------------------------
                                    962 
                                    963 ;---------------------
                                    964 ; return array element
                                    965 ; address from @(expr)
                                    966 ; input:
                                    967 ;   A 		TK_ARRAY
                                    968 ; output:
                                    969 ;	X 		element address 
                                    970 ;----------------------
      00197D                        971 get_array_element:
      00197D CD 19 5C         [ 4]  972 	call func_args 
      001980 A1 01            [ 1]  973 	cp a,#1
      001982 27 03            [ 1]  974 	jreq 1$
      001984 CC 16 35         [ 2]  975 	jp syntax_error
      001987                        976 1$: _xpop 
      001987 90 F6            [ 1]    1     ld a,(y)
      001989 93               [ 1]    2     ldw x,y 
      00198A EE 01            [ 2]    3     ldw x,(1,x)
      00198C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    977     ; ignore A, index < 65536 in any case 
                                    978 	; check for bounds 
      001990 C3 00 20         [ 2]  979 	cpw x,array_size 
      001993 23 05            [ 2]  980 	jrule 3$
                                    981 ; bounds {1..array_size}	
      001995 A6 0A            [ 1]  982 2$: ld a,#ERR_BAD_VALUE 
      001997 CC 16 37         [ 2]  983 	jp tb_error 
      00199A 5D               [ 2]  984 3$: tnzw  x
      00199B 27 F8            [ 1]  985 	jreq 2$ 
      00199D 89               [ 2]  986 	pushw x 
      00199E 58               [ 2]  987 	sllw x 
      00199F 72 FB 01         [ 2]  988 	addw x,(1,sp) ; index*size_of(int24)
      0019A2 1F 01            [ 2]  989 	ldw (1,sp),x  
      0019A4 AE 16 90         [ 2]  990 	ldw x,#tib ; array is below tib 
      0019A7 72 F0 01         [ 2]  991 	subw x,(1,sp)
      0019AA                        992 	_drop 2   
      0019AA 5B 02            [ 2]    1     addw sp,#2 
      0019AC 81               [ 4]  993 	ret 
                                    994 
                                    995 
                                    996 ;***********************************
                                    997 ;   expression parse,execute 
                                    998 ;***********************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                    999 ;-----------------------------------
                                   1000 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1001 ;			 integer | function |
                                   1002 ;			 '('relation')' 
                                   1003 ; output:
                                   1004 ;   A       token attribute 
                                   1005 ;   xstack  value  
                                   1006 ; ---------------------------------
                           000001  1007 	NEG=1
                           000001  1008 	VSIZE=1
      0019AD                       1009 factor:
      0019AD                       1010 	_vars VSIZE 
      0019AD 52 01            [ 2]    1     sub sp,#VSIZE 
      0019AF 0F 01            [ 1] 1011 	clr (NEG,sp)
      0019B1 CD 17 99         [ 4] 1012 	call next_token
      0019B4 4D               [ 1] 1013 	tnz a 
      0019B5 26 03            [ 1] 1014 	jrne 1$ 
      0019B7 CC 1A 5F         [ 2] 1015 	jp 22$ 
      0019BA A1 10            [ 1] 1016 1$:	cp a,#TK_PLUS 
      0019BC 27 06            [ 1] 1017 	jreq 2$
      0019BE A1 11            [ 1] 1018 	cp a,#TK_MINUS 
      0019C0 26 05            [ 1] 1019 	jrne 4$ 
      0019C2 03 01            [ 1] 1020 	cpl (NEG,sp)
      0019C4                       1021 2$:	
      0019C4 CD 17 99         [ 4] 1022 	call next_token
      0019C7                       1023 4$:
      0019C7 4D               [ 1] 1024 	tnz a 
      0019C8 26 03            [ 1] 1025 	jrne 41$ 
      0019CA CC 16 35         [ 2] 1026 	jp syntax_error  
      0019CD                       1027 41$:	
      0019CD A1 81            [ 1] 1028 	cp a,#TK_IFUNC 
      0019CF 26 0C            [ 1] 1029 	jrne 5$ 
      0019D1                       1030 	_get_code_addr 
      0019D1 FE               [ 2]    1         ldw x,(x)
      0019D2 72 5C 00 01      [ 1]    2         inc in 
      0019D6 72 5C 00 01      [ 1]    3         inc in 
      0019DA FD               [ 4] 1031 	call (x); result in A:X  
      0019DB 20 70            [ 2] 1032 	jra 18$ 
      0019DD                       1033 5$:
      0019DD A1 84            [ 1] 1034 	cp a,#TK_INTGR
      0019DF 26 05            [ 1] 1035 	jrne 6$
      0019E1 CD 17 CB         [ 4] 1036 	call get_int24 ; A:X
      0019E4 20 67            [ 2] 1037 	jra 18$
      0019E6                       1038 6$:
      0019E6 A1 05            [ 1] 1039 	cp a,#TK_ARRAY
      0019E8 26 05            [ 1] 1040 	jrne 7$
      0019EA CD 19 7D         [ 4] 1041 	call get_array_element
      0019ED 20 07            [ 2] 1042     jra 71$
      0019EF                       1043 7$:
      0019EF A1 85            [ 1] 1044 	cp a,#TK_VAR 
      0019F1 26 08            [ 1] 1045 	jrne 8$
      0019F3 CD 17 C1         [ 4] 1046 	call get_addr 
      0019F6                       1047 71$: ; put value in A:X
      0019F6 F6               [ 1] 1048 	ld a,(x)
      0019F7 EE 01            [ 2] 1049 	ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0019F9 20 52            [ 2] 1050 	jra 18$
      0019FB                       1051 8$:
      0019FB A1 03            [ 1] 1052 	cp a,#TK_LABEL 
      0019FD 26 1D            [ 1] 1053 	jrne 9$
      0019FF 90 89            [ 2] 1054 	pushw y  
      001A01 89               [ 2] 1055 	pushw x 
      001A02 CD 17 B2         [ 4] 1056 	call skip_string
      001A05 85               [ 2] 1057 	popw x  
      001A06 CD 13 55         [ 4] 1058 	call strlen 
      001A09 AB 05            [ 1] 1059 	add a,#REC_XTRA_BYTES
      001A0B CD 1C FA         [ 4] 1060 	call search_name
      001A0E 5D               [ 2] 1061 	tnzw x 
      001A0F 26 04            [ 1] 1062 	jrne 82$ 
      001A11 90 85            [ 2] 1063 	popw y 
      001A13 20 30            [ 2] 1064 	jra 16$
      001A15                       1065 82$:
      001A15 90 85            [ 2] 1066 	popw y   
      001A17 CD 1C C0         [ 4] 1067 	call get_value ; in A:X 
      001A1A 20 31            [ 2] 1068 	jra 18$
      001A1C                       1069 9$: 
      001A1C A1 82            [ 1] 1070 	cp a,#TK_CFUNC 
      001A1E 26 0E            [ 1] 1071 	jrne 12$
      001A20                       1072 	_get_code_addr 
      001A20 FE               [ 2]    1         ldw x,(x)
      001A21 72 5C 00 01      [ 1]    2         inc in 
      001A25 72 5C 00 01      [ 1]    3         inc in 
      001A29 FD               [ 4] 1073 	call(x)
      001A2A 5F               [ 1] 1074 	clrw x 
      001A2B 02               [ 1] 1075 	rlwa x  ; char>int24 in A:X 
      001A2C 20 1F            [ 2] 1076 	jra 18$ 	 
      001A2E                       1077 12$:			
      001A2E A1 06            [ 1] 1078 	cp a,#TK_LPAREN
      001A30 26 13            [ 1] 1079 	jrne 16$
      001A32 CD 1A A5         [ 4] 1080 	call expression
      001A35 A6 07            [ 1] 1081 	ld a,#TK_RPAREN 
      001A37 CD 19 4F         [ 4] 1082 	call expect
      001A3A                       1083 	_xpop 
      001A3A 90 F6            [ 1]    1     ld a,(y)
      001A3C 93               [ 1]    2     ldw x,y 
      001A3D EE 01            [ 2]    3     ldw x,(1,x)
      001A3F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A43 20 08            [ 2] 1084 	jra 18$	
      001A45                       1085 16$:
      001A45                       1086 	_unget_token 
      001A45 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A4A 4F               [ 1] 1087 	clr a 
      001A4B 20 12            [ 2] 1088 	jra 22$ 
      001A4D                       1089 18$: 
      001A4D 0D 01            [ 1] 1090 	tnz (NEG,sp)
      001A4F 27 03            [ 1] 1091 	jreq 20$
      001A51 CD 02 02         [ 4] 1092 	call neg_ax   
      001A54                       1093 20$:
      001A54                       1094 	_xpush 
      001A54 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A58 90 F7            [ 1]    2     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A5A 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A5D A6 84            [ 1] 1095 	ld a,#TK_INTGR
      001A5F                       1096 22$:
      001A5F                       1097 	_drop VSIZE
      001A5F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A61 81               [ 4] 1098 	ret
                                   1099 
                                   1100 
                                   1101 ;-----------------------------------
                                   1102 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1103 ; output:
                                   1104 ;   A    	token attribute 
                                   1105 ;	xstack		value 
                                   1106 ;-----------------------------------
                           000001  1107 	MULOP=1
                           000001  1108 	VSIZE=1
      001A62                       1109 term:
      001A62                       1110 	_vars VSIZE
      001A62 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1111 ; first factor 	
      001A64 CD 19 AD         [ 4] 1112 	call factor
      001A67 4D               [ 1] 1113 	tnz a 
      001A68 27 38            [ 1] 1114 	jreq term_exit  
      001A6A                       1115 term01:	 ; check for  operator '*'|'/'|'%' 
      001A6A CD 17 99         [ 4] 1116 	call next_token
      001A6D 6B 01            [ 1] 1117 	ld (MULOP,sp),a
      001A6F A4 30            [ 1] 1118 	and a,#TK_GRP_MASK
      001A71 A1 20            [ 1] 1119 	cp a,#TK_GRP_MULT
      001A73 27 09            [ 1] 1120 	jreq 1$
      001A75 A6 84            [ 1] 1121 	ld a,#TK_INTGR
      001A77                       1122 	_unget_token 
      001A77 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A7C 20 24            [ 2] 1123 	jra term_exit 
      001A7E                       1124 1$:	; got *|/|%
                                   1125 ;second factor
      001A7E CD 19 AD         [ 4] 1126 	call factor
      001A81 4D               [ 1] 1127 	tnz a 
      001A82 26 03            [ 1] 1128 	jrne 2$ 
      001A84 CC 16 35         [ 2] 1129 	jp syntax_error 
      001A87                       1130 2$: ; select operation 	
      001A87 7B 01            [ 1] 1131 	ld a,(MULOP,sp) 
      001A89 A1 20            [ 1] 1132 	cp a,#TK_MULT 
      001A8B 26 05            [ 1] 1133 	jrne 3$
                                   1134 ; '*' operator
      001A8D CD 02 66         [ 4] 1135 	call mul24 
      001A90 20 D8            [ 2] 1136 	jra term01
      001A92 A1 21            [ 1] 1137 3$: cp a,#TK_DIV 
      001A94 26 05            [ 1] 1138 	jrne 4$ 
                                   1139 ; '/' operator	
      001A96 CD 02 F4         [ 4] 1140 	call div24 
      001A99 20 CF            [ 2] 1141 	jra term01 
      001A9B                       1142 4$: ; '%' operator
      001A9B CD 03 8E         [ 4] 1143 	call mod24
      001A9E 20 CA            [ 2] 1144 	jra term01 
      001AA0                       1145 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001AA0 A6 84            [ 1] 1146 	ld a,#TK_INTGR
      001AA2                       1147 term_exit:
      001AA2                       1148 	_drop VSIZE 
      001AA2 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AA4 81               [ 4] 1149 	ret 
                                   1150 
                                   1151 ;-------------------------------
                                   1152 ;  expr ::= term [['+'|'-'] term]*
                                   1153 ;  result range {-32768..32767}
                                   1154 ;  output:
                                   1155 ;   A    token attribute 
                                   1156 ;   xstack	 result    
                                   1157 ;-------------------------------
                           000001  1158 	OP=1 
                           000001  1159 	VSIZE=1 
      001AA5                       1160 expression:
      001AA5                       1161 	_vars VSIZE 
      001AA5 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1162 ; first term 	
      001AA7 CD 1A 62         [ 4] 1163 	call term
      001AAA 4D               [ 1] 1164 	tnz a 
      001AAB 27 2D            [ 1] 1165 	jreq 9$
      001AAD                       1166 1$:	; operator '+'|'-'
      001AAD CD 17 99         [ 4] 1167 	call next_token
      001AB0 6B 01            [ 1] 1168 	ld (OP,sp),a 
      001AB2 A4 30            [ 1] 1169 	and a,#TK_GRP_MASK
      001AB4 A1 10            [ 1] 1170 	cp a,#TK_GRP_ADD 
      001AB6 27 09            [ 1] 1171 	jreq 2$ 
      001AB8                       1172 	_unget_token 
      001AB8 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ABD A6 84            [ 1] 1173 	ld a,#TK_INTGR
      001ABF 20 19            [ 2] 1174 	jra 9$ 
      001AC1                       1175 2$: ; second term 
      001AC1 CD 1A 62         [ 4] 1176 	call term
      001AC4 4D               [ 1] 1177 	tnz a 
      001AC5 26 03            [ 1] 1178 	jrne 3$
      001AC7 CC 16 35         [ 2] 1179 	jp syntax_error
      001ACA                       1180 3$:
      001ACA 7B 01            [ 1] 1181 	ld a,(OP,sp)
      001ACC A1 10            [ 1] 1182 	cp a,#TK_PLUS 
      001ACE 26 05            [ 1] 1183 	jrne 4$
                                   1184 ; '+' operator	
      001AD0 CD 01 6B         [ 4] 1185 	call add24
      001AD3 20 D8            [ 2] 1186 	jra 1$ 
      001AD5                       1187 4$:	; '-' operator 
      001AD5 CD 01 88         [ 4] 1188 	call sub24
      001AD8 20 D3            [ 2] 1189 	jra 1$
      001ADA                       1190 9$:
      001ADA                       1191 	_drop VSIZE 
      001ADA 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ADC 81               [ 4] 1192 	ret 
                                   1193 
                                   1194 ;---------------------------------------------
                                   1195 ; rel ::= expr rel_op expr
                                   1196 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                   1197 ;  relation return  integer , zero is false 
                                   1198 ;  output:
                                   1199 ;	 xstack		value  
                                   1200 ;---------------------------------------------
                           000001  1201 	RELOP=1
                           000001  1202 	VSIZE=1 
      001ADD                       1203 relation: 
      001ADD                       1204 	_vars VSIZE
      001ADD 52 01            [ 2]    1     sub sp,#VSIZE 
      001ADF CD 1A A5         [ 4] 1205 	call expression
      001AE2 4D               [ 1] 1206 	tnz a 
      001AE3 27 54            [ 1] 1207 	jreq 9$ 
                                   1208 ; expect rel_op or leave 
      001AE5 CD 17 99         [ 4] 1209 	call next_token 
      001AE8 6B 01            [ 1] 1210 	ld (RELOP,sp),a 
      001AEA A4 30            [ 1] 1211 	and a,#TK_GRP_MASK
      001AEC A1 30            [ 1] 1212 	cp a,#TK_GRP_RELOP 
      001AEE 27 09            [ 1] 1213 	jreq 2$
      001AF0 A6 84            [ 1] 1214 	ld a,#TK_INTGR 
      001AF2                       1215 	_unget_token 
      001AF2 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AF7 20 40            [ 2] 1216 	jra 9$ 
      001AF9                       1217 2$:	; expect another expression
      001AF9 CD 1A A5         [ 4] 1218 	call expression
      001AFC 4D               [ 1] 1219 	tnz a 
      001AFD 26 03            [ 1] 1220 	jrne 3$
      001AFF CC 16 35         [ 2] 1221 	jp syntax_error 
      001B02                       1222 3$: 
      001B02 CD 01 A5         [ 4] 1223 	call cp24 
      001B05                       1224 	_xpop  
      001B05 90 F6            [ 1]    1     ld a,(y)
      001B07 93               [ 1]    2     ldw x,y 
      001B08 EE 01            [ 2]    3     ldw x,(1,x)
      001B0A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B0E 4D               [ 1] 1225 	tnz a 
      001B0F 2B 08            [ 1] 1226 	jrmi 4$
      001B11 26 0C            [ 1] 1227 	jrne 5$
      001B13 35 02 00 0E      [ 1] 1228 	mov acc8,#2 ; i1==i2
      001B17 20 0A            [ 2] 1229 	jra 6$ 
      001B19                       1230 4$: ; i1<i2
      001B19 35 04 00 0E      [ 1] 1231 	mov acc8,#4 
      001B1D 20 04            [ 2] 1232 	jra 6$
      001B1F                       1233 5$: ; i1>i2
      001B1F 35 01 00 0E      [ 1] 1234 	mov acc8,#1  
      001B23                       1235 6$: ; 0=false, -1=true 
      001B23 5F               [ 1] 1236 	clrw x 
      001B24 C6 00 0E         [ 1] 1237 	ld a, acc8  
      001B27 14 01            [ 1] 1238 	and a,(RELOP,sp)
      001B29 27 03            [ 1] 1239 	jreq 7$
      001B2B 53               [ 2] 1240 	cplw x 
      001B2C A6 FF            [ 1] 1241 	ld a,#255 
      001B2E                       1242 7$:	_xpush 
      001B2E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B32 90 F7            [ 1]    2     ld (y),a 
      001B34 90 EF 01         [ 2]    3     ldw (1,y),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B37 A6 84            [ 1] 1243 	ld a,#TK_INTGR
      001B39                       1244 9$: 
      001B39                       1245 	_drop VSIZE
      001B39 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B3B 81               [ 4] 1246 	ret 
                                   1247 
                                   1248 ;-------------------------------------------
                                   1249 ;  AND factor:  [NOT] relation | (condition)
                                   1250 ;  output:
                                   1251 ;     A      TK_INTGR|0
                                   1252 ;-------------------------------------------
                           000001  1253 	NOT_OP=1
      001B3C                       1254 and_factor:
      001B3C 4B 00            [ 1] 1255 	push #0 
      001B3E CD 17 99         [ 4] 1256 0$:	call next_token  
      001B41 4D               [ 1] 1257 	tnz a 
      001B42 27 25            [ 1] 1258 	jreq 8$ 
      001B44 A1 87            [ 1] 1259 	cp a,#TK_NOT 
      001B46 26 04            [ 1] 1260 	jrne 1$ 
      001B48 03 01            [ 1] 1261 	cpl (NOT_OP,sp)
      001B4A 20 F2            [ 2] 1262 	jra 0$ 
      001B4C                       1263 1$:	
      001B4C A1 06            [ 1] 1264 	cp a,#TK_LPAREN 
      001B4E 26 0A            [ 1] 1265 	jrne 2$
      001B50 CD 1B BE         [ 4] 1266 	call condition
      001B53 A6 07            [ 1] 1267 	ld a,#TK_RPAREN 
      001B55 CD 19 4F         [ 4] 1268 	call expect
      001B58 20 08            [ 2] 1269 	jra 3$
      001B5A                       1270 2$: _unget_token 
      001B5A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B5F CD 1A DD         [ 4] 1271 	call relation
      001B62                       1272 3$:
      001B62 0D 01            [ 1] 1273 	tnz (NOT_OP,sp)
      001B64 27 03            [ 1] 1274 	jreq 8$ 
      001B66 CD 01 E7         [ 4] 1275 	call cpl24
      001B69                       1276 8$:
      001B69                       1277 	_drop 1  
      001B69 5B 01            [ 2]    1     addw sp,#1 
      001B6B 81               [ 4] 1278     ret 
                                   1279 
                                   1280 
                                   1281 ;--------------------------------------------
                                   1282 ;  AND operator as priority over OR||XOR 
                                   1283 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1284 ;          
                                   1285 ;  output:
                                   1286 ;     A     TK_INTGR|0
                                   1287 ;    xtack   value 
                                   1288 ;--------------------------------------------
      001B6C                       1289 and_cond:
      001B6C CD 1B 3C         [ 4] 1290 	call and_factor
      001B6F 4D               [ 1] 1291 	tnz a 
      001B70 27 4B            [ 1] 1292 	jreq 9$  
      001B72 CD 17 99         [ 4] 1293 1$: call next_token 
      001B75 4D               [ 1] 1294 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B76 27 43            [ 1] 1295 	jreq 6$ 
      001B78 A1 88            [ 1] 1296 	cp a,#TK_AND 
      001B7A 27 07            [ 1] 1297 	jreq 3$
      001B7C                       1298 	_unget_token 
      001B7C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B81 20 38            [ 2] 1299 	jra 6$ 
      001B83 CD 1B 3C         [ 4] 1300 3$:	call and_factor  
      001B86 4D               [ 1] 1301 	tnz a 
      001B87 26 03            [ 1] 1302 	jrne 4$
      001B89 CC 16 35         [ 2] 1303 	jp syntax_error 
      001B8C                       1304 4$:	
      001B8C                       1305 	_xpop 
      001B8C 90 F6            [ 1]    1     ld a,(y)
      001B8E 93               [ 1]    2     ldw x,y 
      001B8F EE 01            [ 2]    3     ldw x,(1,x)
      001B91 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B95 C7 00 0C         [ 1] 1306 	ld acc24,a 
      001B98 CF 00 0D         [ 2] 1307 	ldw acc16,x
      001B9B                       1308 	_xpop 
      001B9B 90 F6            [ 1]    1     ld a,(y)
      001B9D 93               [ 1]    2     ldw x,y 
      001B9E EE 01            [ 2]    3     ldw x,(1,x)
      001BA0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BA4 C4 00 0C         [ 1] 1309 	and a,acc24 
      001BA7 02               [ 1] 1310 	rlwa x 
      001BA8 C4 00 0D         [ 1] 1311 	and a,acc16 
      001BAB 02               [ 1] 1312 	rlwa x 
      001BAC C4 00 0E         [ 1] 1313 	and a,acc8 
      001BAF 02               [ 1] 1314 	rlwa x
      001BB0                       1315 	_xpush
      001BB0 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BB4 90 F7            [ 1]    2     ld (y),a 
      001BB6 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BB9 20 B7            [ 2] 1316 	jra 1$  
      001BBB A6 84            [ 1] 1317 6$: ld a,#TK_INTGR 
      001BBD 81               [ 4] 1318 9$:	ret 	 
                                   1319 
                                   1320 
                                   1321 ;--------------------------------------------
                                   1322 ; condition for IF and UNTIL 
                                   1323 ; operators: OR,XOR 
                                   1324 ; format:  and_cond [ OP and_cond ]* 
                                   1325 ; output:
                                   1326 ;    A        INTGR|0 
                                   1327 ;    xstack   value 
                                   1328 ;--------------------------------------------
                           000001  1329 	ATMP=1
                           000002  1330 	OP=2
                           000002  1331 	VSIZE=2 
      001BBE                       1332 condition:
      001BBE                       1333 	_vars VSIZE 
      001BBE 52 02            [ 2]    1     sub sp,#VSIZE 
      001BC0 CD 1B 6C         [ 4] 1334 	call and_cond
      001BC3 4D               [ 1] 1335 	tnz a 
      001BC4 27 69            [ 1] 1336 	jreq 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001BC6 CD 17 99         [ 4] 1337 1$:	call next_token 
      001BC9 A1 89            [ 1] 1338 	cp a,#TK_OR 
      001BCB 27 0B            [ 1] 1339 	jreq 2$
      001BCD A1 8A            [ 1] 1340 	cp a,#TK_XOR
      001BCF 27 07            [ 1] 1341 	jreq 2$ 
      001BD1                       1342 	_unget_token 
      001BD1 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BD6 20 55            [ 2] 1343 	jra 8$ 
      001BD8 6B 02            [ 1] 1344 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001BDA CD 1B 6C         [ 4] 1345 	call and_cond
      001BDD A1 84            [ 1] 1346 	cp a,#TK_INTGR 
      001BDF 27 03            [ 1] 1347 	jreq 3$
      001BE1 CC 16 35         [ 2] 1348 	jp syntax_error 
      001BE4                       1349 3$:	 
      001BE4                       1350 	_xpop  ; rigth arg 
      001BE4 90 F6            [ 1]    1     ld a,(y)
      001BE6 93               [ 1]    2     ldw x,y 
      001BE7 EE 01            [ 2]    3     ldw x,(1,x)
      001BE9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BED C7 00 0C         [ 1] 1351 	ld acc24,a 
      001BF0 CF 00 0D         [ 2] 1352 	ldw acc16,x 
      001BF3                       1353 	_xpop  ; left arg  
      001BF3 90 F6            [ 1]    1     ld a,(y)
      001BF5 93               [ 1]    2     ldw x,y 
      001BF6 EE 01            [ 2]    3     ldw x,(1,x)
      001BF8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BFC 6B 01            [ 1] 1354 	ld (ATMP,sp),a 
      001BFE 7B 02            [ 1] 1355 	ld a,(OP,sp)
      001C00 A1 8A            [ 1] 1356 	cp a,#TK_XOR 
      001C02 27 10            [ 1] 1357 	jreq 5$ 
      001C04                       1358 4$: ; A:X OR acc24   
      001C04 7B 01            [ 1] 1359 	ld a,(ATMP,sp)
      001C06 CA 00 0C         [ 1] 1360 	or a,acc24 
      001C09 02               [ 1] 1361 	rlwa x 
      001C0A CA 00 0D         [ 1] 1362 	or a,acc16 
      001C0D 02               [ 1] 1363 	rlwa x 
      001C0E CA 00 0E         [ 1] 1364 	or a,acc8 
      001C11 02               [ 1] 1365 	rlwa x 
      001C12 20 0E            [ 2] 1366 	jra 6$  
      001C14                       1367 5$: ; A:X XOR acc24 
      001C14 7B 01            [ 1] 1368 	ld a,(ATMP,sp)
      001C16 C8 00 0C         [ 1] 1369 	xor a,acc24 
      001C19 02               [ 1] 1370 	rlwa x 
      001C1A C8 00 0D         [ 1] 1371 	xor a,acc16 
      001C1D 02               [ 1] 1372 	rlwa x 
      001C1E C8 00 0E         [ 1] 1373 	xor a,acc8 
      001C21 02               [ 1] 1374 	rlwa x 
      001C22                       1375 6$: _xpush
      001C22 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C26 90 F7            [ 1]    2     ld (y),a 
      001C28 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C2B 20 99            [ 2] 1376 	jra 1$ 
      001C2D A6 84            [ 1] 1377 8$:	ld a,#TK_INTGR 
      001C2F                       1378 9$:	_drop VSIZE 
      001C2F 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001C31 81               [ 4] 1379 	ret 
                                   1380 
                                   1381 
                                   1382 ;--------------------------------------------
                                   1383 ; BASIC: HEX 
                                   1384 ; select hexadecimal base for integer print
                                   1385 ;---------------------------------------------
      001C32                       1386 hex_base:
      001C32 35 10 00 0A      [ 1] 1387 	mov base,#16 
      001C36 81               [ 4] 1388 	ret 
                                   1389 
                                   1390 ;--------------------------------------------
                                   1391 ; BASIC: DEC 
                                   1392 ; select decimal base for integer print
                                   1393 ;---------------------------------------------
      001C37                       1394 dec_base:
      001C37 35 0A 00 0A      [ 1] 1395 	mov base,#10
      001C3B 81               [ 4] 1396 	ret 
                                   1397 
                                   1398 ;------------------------
                                   1399 ; BASIC: FREE 
                                   1400 ; return free size in RAM 
                                   1401 ; output:
                                   1402 ;   A:x		size 
                                   1403 ;--------------------------
      001C3C                       1404 free:
      001C3C 4F               [ 1] 1405 	clr a 
      001C3D AE 16 90         [ 2] 1406 	ldw x,#tib 
      001C40 72 B0 00 32      [ 2] 1407 	subw x,dvar_end 
      001C44 81               [ 4] 1408 	ret 
                                   1409 
                                   1410 ;------------------------------
                                   1411 ; BASIC: SIZE 
                                   1412 ; command that print 
                                   1413 ; program start addres and size 
                                   1414 ;------------------------------
      001C45                       1415 cmd_size:
      001C45 3B 00 0A         [ 1] 1416 	push base 
      001C48 AE 1E 32         [ 2] 1417 	ldw x,#PROG_ADDR 
      001C4B CD 09 37         [ 4] 1418 	call puts 
      001C4E CE 00 1B         [ 2] 1419 	ldw x,txtbgn     
      001C51 35 10 00 0A      [ 1] 1420 	mov base,#16 
      001C55 CD 17 E1         [ 4] 1421 	call prt_i16
      001C58 32 00 0A         [ 1] 1422 	pop base 
      001C5B AE 1E 44         [ 2] 1423 	ldw x,#PROG_SIZE 
      001C5E CD 09 37         [ 4] 1424 	call puts 
      001C61 CE 00 1D         [ 2] 1425 	ldw x,txtend 
      001C64 72 B0 00 1B      [ 2] 1426 	subw x,txtbgn 
      001C68 CD 17 E1         [ 4] 1427 	call prt_i16
      001C6B AE 1E 55         [ 2] 1428 	ldw x,#STR_BYTES 
      001C6E CD 09 37         [ 4] 1429 	call puts  
      001C71 81               [ 4] 1430 	ret 
                                   1431 
                                   1432 
                                   1433 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



                                   1434 ; BASIC: UBOUND  
                                   1435 ; return array variable size 
                                   1436 ; and set 'array_size' variable 
                                   1437 ; output:
                                   1438 ;   A:X 	array_size
                                   1439 ;--------------------------
      001C72                       1440 ubound:
      001C72 CD 1C 3C         [ 4] 1441 	call free 
      001C75 A6 03            [ 1] 1442 	ld a,#CELL_SIZE 
      001C77 62               [ 2] 1443 	div x,a 
      001C78 CF 00 20         [ 2] 1444 	ldw array_size,x
      001C7B 4F               [ 1] 1445 	clr a 
      001C7C 81               [ 4] 1446 	ret 
                                   1447 
                                   1448 ;-----------------------------
                                   1449 ; BASIC: LET var=expr 
                                   1450 ; variable assignement 
                                   1451 ; output:
                                   1452 ;   A 		TK_NONE 
                                   1453 ;-----------------------------
      001C7D                       1454 let::
      001C7D CD 17 99         [ 4] 1455 	call next_token 
      001C80 A1 85            [ 1] 1456 	cp a,#TK_VAR 
      001C82 27 0C            [ 1] 1457 	jreq let_var
      001C84 A1 05            [ 1] 1458 	cp a,#TK_ARRAY 
      001C86 27 03            [ 1] 1459 	jreq  let_array
      001C88 CC 16 35         [ 2] 1460 	jp syntax_error
      001C8B                       1461 let_array:
      001C8B CD 19 7D         [ 4] 1462 	call get_array_element
      001C8E 20 03            [ 2] 1463 	jra let_eval 
      001C90                       1464 let_var:
      001C90 CD 17 C1         [ 4] 1465 	call get_addr
      001C93                       1466 let_eval:
      001C93 CF 00 19         [ 2] 1467 	ldw ptr16,x  ; variable address 
      001C96 CD 17 99         [ 4] 1468 	call next_token 
      001C99 A1 32            [ 1] 1469 	cp a,#TK_EQUAL
      001C9B 27 03            [ 1] 1470 	jreq 1$
      001C9D CC 16 35         [ 2] 1471 	jp syntax_error
      001CA0                       1472 1$:	
      001CA0 CD 1B BE         [ 4] 1473 	call condition   
      001CA3 A1 84            [ 1] 1474 	cp a,#TK_INTGR 
      001CA5 27 03            [ 1] 1475 	jreq 2$
      001CA7 CC 16 35         [ 2] 1476 	jp syntax_error
      001CAA                       1477 2$:	
      001CAA                       1478 	_xpop ; value 
      001CAA 90 F6            [ 1]    1     ld a,(y)
      001CAC 93               [ 1]    2     ldw x,y 
      001CAD EE 01            [ 2]    3     ldw x,(1,x)
      001CAF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CB3                       1479 3$:
      001CB3 72 C7 00 19      [ 4] 1480 	ld [ptr16],a
      001CB7 72 5C 00 1A      [ 1] 1481 	inc ptr8  
      001CBB 72 CF 00 19      [ 5] 1482 	ldw [ptr16],x 
      001CBF 81               [ 4] 1483 	ret 
                                   1484 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1485 
                                   1486 ;--------------------------
                                   1487 ; return constant/dvar value 
                                   1488 ; from it's record address
                                   1489 ; input:
                                   1490 ;	X	*const record 
                                   1491 ; output:
                                   1492 ;   A:X   const  value
                                   1493 ;--------------------------
      001CC0                       1494 get_value: ; -- i 
      001CC0 F6               [ 1] 1495 	ld a,(x) ; record size 
      001CC1 A4 0F            [ 1] 1496 	and a,#NAME_MAX_LEN
      001CC3 A0 03            [ 1] 1497 	sub a,#CELL_SIZE ; * value 
      001CC5 88               [ 1] 1498 	push a 
      001CC6 4B 00            [ 1] 1499 	push #0 
      001CC8 72 FB 01         [ 2] 1500 	addw x,(1,sp)
      001CCB F6               [ 1] 1501 	ld a,(x)
      001CCC EE 01            [ 2] 1502 	ldw x,(1,x)
      001CCE                       1503 	_drop 2
      001CCE 5B 02            [ 2]    1     addw sp,#2 
      001CD0 81               [ 4] 1504 	ret 
                                   1505 
                                   1506 
                                   1507 ;--------------------------
                                   1508 ; BASIC: EEFREE 
                                   1509 ; eeprom_free 
                                   1510 ; search end of data  
                                   1511 ; in EEPROM 
                                   1512 ; input:
                                   1513 ;    none 
                                   1514 ; output:
                                   1515 ;    A:X     address free
                                   1516 ;-------------------------
      001CD1                       1517 func_eefree:
      001CD1 AE 40 00         [ 2] 1518 	ldw x,#EEPROM_BASE 
      001CD4 35 08 00 0E      [ 1] 1519 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001CD8 A3 47 F8         [ 2] 1520     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001CDB 24 17            [ 1] 1521 	jruge 8$ ; no free space 
      001CDD F6               [ 1] 1522 2$: ld a,(x)
      001CDE 26 0C            [ 1] 1523 	jrne 3$
      001CE0 5C               [ 1] 1524 	incw x 
      001CE1 72 5A 00 0E      [ 1] 1525 	dec acc8 
      001CE5 26 F6            [ 1] 1526 	jrne 2$
      001CE7 1D 00 08         [ 2] 1527 	subw x,#8 
      001CEA 20 09            [ 2] 1528 	jra 9$  
      001CEC F6               [ 1] 1529 3$: ld a,(x)
      001CED 5C               [ 1] 1530 	incw x
      001CEE 4D               [ 1] 1531 	tnz a  
      001CEF 26 FB            [ 1] 1532 	jrne 3$
      001CF1 5A               [ 2] 1533 	decw x   
      001CF2 20 E0            [ 2] 1534 	jra 1$ 
      001CF4 5F               [ 1] 1535 8$: clrw x ; no free space 
      001CF5 4F               [ 1] 1536 9$: clr a 
      001CF6 CF 00 24         [ 2] 1537 	ldw free_eeprom,x ; save in system variable 
      001CF9 81               [ 4] 1538 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                   1539 
                           000005  1540 REC_XTRA_BYTES=5 
                                   1541 ;--------------------------
                                   1542 ; search constant/dim_var name 
                                   1543 ; format of record  
                                   1544 ;   .byte record length 
                                   1545 ;         = strlen(name)+5 
                                   1546 ;   .asciz name (variable length)
                                   1547 ;   .int24 value (3 bytes )
                                   1548 ; a constant record use 7+ bytes
                                   1549 ; constants are saved in EEPROM  
                                   1550 ; input:
                                   1551 ;    A     record_len 
                                   1552 ;    X     *name
                                   1553 ; output:
                                   1554 ;    X     address|0
                                   1555 ; use:
                                   1556 ;   A,Y, acc16 
                                   1557 ;-------------------------
                           000001  1558 	NAMEPTR=1 ; target name pointer 
                           000003  1559 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1560 	RECLEN=5  ; record length of target
                           000007  1561 	LIMIT=7   ; search area limit 
                           000008  1562 	VSIZE=8  
      001CFA                       1563 search_name:
      001CFA 90 89            [ 2] 1564 	pushw y 
      001CFC                       1565 	_vars VSIZE
      001CFC 52 08            [ 2]    1     sub sp,#VSIZE 
      001CFE 72 5F 00 0D      [ 1] 1566 	clr acc16 
      001D02 6B 05            [ 1] 1567 	ld (RECLEN,sp),a    
      001D04 1F 01            [ 2] 1568 	ldw (NAMEPTR,sp),x
      001D06 CE 00 32         [ 2] 1569 	ldw x,dvar_end 
      001D09 1F 07            [ 2] 1570 	ldw (LIMIT,sp),x 
      001D0B 90 CE 00 30      [ 2] 1571 	ldw y,dvar_bgn
      001D0F 17 03            [ 2] 1572 1$:	ldw (WLKPTR,sp),y
      001D11 93               [ 1] 1573 	ldw x,y 
      001D12 13 07            [ 2] 1574 	cpw x, (LIMIT,sp) 
      001D14 24 20            [ 1] 1575 	jruge 7$ ; no match found 
      001D16 90 F6            [ 1] 1576 	ld a,(y)
      001D18 A4 0F            [ 1] 1577 	and a,#NAME_MAX_LEN
      001D1A 11 05            [ 1] 1578 	cp a,(RECLEN,sp)
      001D1C 26 09            [ 1] 1579 	jrne 2$ 
      001D1E 90 5C            [ 1] 1580 	incw y 
      001D20 1E 01            [ 2] 1581 	ldw x,(NAMEPTR,sp)
      001D22 CD 13 60         [ 4] 1582 	call strcmp
      001D25 26 13            [ 1] 1583 	jrne 8$ ; match found 
      001D27                       1584 2$: ; skip this one 	
      001D27 16 03            [ 2] 1585 	ldW Y,(WLKPTR,sp)
      001D29 90 F6            [ 1] 1586 	ld a,(y)
      001D2B A4 0F            [ 1] 1587 	and a,#NAME_MAX_LEN 
      001D2D C7 00 0E         [ 1] 1588 	ld acc8,a 
      001D30 72 B9 00 0D      [ 2] 1589 	addw y,acc16 
      001D34 20 D9            [ 2] 1590 	jra 1$  
      001D36                       1591 7$: ; no match found 
      001D36 0F 03            [ 1] 1592 	clr (WLKPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D38 0F 04            [ 1] 1593 	clr (WLKPTR+1,sp)
      001D3A                       1594 8$: ; match found 
      001D3A 1E 03            [ 2] 1595 	ldw x,(WLKPTR,sp) ; record address 
      001D3C                       1596 9$:	_DROP VSIZE
      001D3C 5B 08            [ 2]    1     addw sp,#VSIZE 
      001D3E 90 85            [ 2] 1597 	popw y 
      001D40 81               [ 4] 1598 	 ret 
                                   1599 
                                   1600 ;--------------------------------------------
                                   1601 ; BASIC: CONST name=value [, name=value]*
                                   1602 ; define constant(s) saved in EEPROM
                                   1603 ; share most of his code with cmd_dim 
                                   1604 ;--------------------------------------------
                           000001  1605 	VAR_NAME=1 
                           000003  1606 	REC_LEN=3
                           000005  1607 	RONLY=5
                           000005  1608 	VSIZE=5
      001D41                       1609 cmd_const:
      001D41 72 00 00 22 05   [ 2] 1610 	btjt flags,#FRUN,0$
      001D46 A6 06            [ 1] 1611 	ld a,#ERR_RUN_ONLY
      001D48 CC 16 37         [ 2] 1612 	jp tb_error 
      001D4B                       1613 0$: 
      001D4B                       1614 	_vars VSIZE 
      001D4B 52 05            [ 2]    1     sub sp,#VSIZE 
      001D4D A6 80            [ 1] 1615 	ld a,#128 
      001D4F 6B 05            [ 1] 1616 	ld (RONLY,sp),a 
      001D51 0F 03            [ 1] 1617 	clr (REC_LEN,sp)
      001D53 20 10            [ 2] 1618 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1619 
                                   1620 ;---------------------------------
                                   1621 ; BASIC: DIM var_name [var_name]* 
                                   1622 ; create named variables at end 
                                   1623 ; of BASIC program. 
                                   1624 ; These variables are initialized 
                                   1625 ; to 0. 
                                   1626 ; record format same ast CONST 
                                   1627 ; but r/w because stored in RAM 
                                   1628 ;---------------------------------
      001D55                       1629 cmd_dim:
      001D55 72 00 00 22 05   [ 2] 1630 	btjt flags,#FRUN,cmd_dim1
      001D5A A6 06            [ 1] 1631 	ld a,#ERR_RUN_ONLY
      001D5C CC 16 37         [ 2] 1632 	jp tb_error 
      001D5F                       1633 cmd_dim1:	
      001D5F                       1634 	_vars VSIZE
      001D5F 52 05            [ 2]    1     sub sp,#VSIZE 
      001D61 0F 03            [ 1] 1635 	clr (REC_LEN,sp )
      001D63 0F 05            [ 1] 1636 	clr (RONLY,sp)
      001D65                       1637 cmd_dim2: 
      001D65 CD 17 99         [ 4] 1638 0$:	call next_token 
      001D68 A1 03            [ 1] 1639 	cp a,#TK_LABEL  
      001D6A 27 03            [ 1] 1640 	jreq 1$ 
      001D6C CC 16 35         [ 2] 1641 	jp syntax_error 
      001D6F 1F 01            [ 2] 1642 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001D71 CD 13 55         [ 4] 1643 	call strlen
      001D74 AB 05            [ 1] 1644 	add a,#REC_XTRA_BYTES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001D76 6B 04            [ 1] 1645 	ld (REC_LEN+1,sp),a
      001D78 CD 17 B2         [ 4] 1646 	call skip_string 
      001D7B 7B 04            [ 1] 1647 	ld a,(REC_LEN+1,sp)
      001D7D 1E 01            [ 2] 1648 	ldw x,(VAR_NAME,sp) 
      001D7F CD 1C FA         [ 4] 1649 	call search_name  
      001D82 5D               [ 2] 1650 	tnzw x 
      001D83 27 05            [ 1] 1651 	jreq 2$
      001D85 A6 08            [ 1] 1652 	ld a,#ERR_DUPLICATE
      001D87 CC 16 37         [ 2] 1653 	jp tb_error  
      001D8A CE 00 32         [ 2] 1654 2$:	ldw x,dvar_end 
      001D8D 7B 04            [ 1] 1655 	ld a,(REC_LEN+1,sp)
      001D8F 1A 05            [ 1] 1656 	or a,(RONLY,sp)
      001D91 F7               [ 1] 1657 	ld (x),a 
      001D92 5C               [ 1] 1658 	incw x 
      001D93 90 89            [ 2] 1659 	pushw y 
      001D95 16 03            [ 2] 1660 	ldw y,(VAR_NAME+2,sp)
      001D97 CD 13 71         [ 4] 1661 	call strcpy
      001D9A 90 85            [ 2] 1662 	popw y 
      001D9C 5A               [ 2] 1663 	decw x
      001D9D 72 FB 03         [ 2] 1664 	addw x,(REC_LEN,sp)
      001DA0 CF 00 32         [ 2] 1665 	ldw dvar_end,x 
      001DA3 1D 00 03         [ 2] 1666 	subw x,#CELL_SIZE  
      001DA6 7F               [ 1] 1667 	clr (x)
      001DA7 6F 01            [ 1] 1668 	clr (1,x)  
      001DA9 6F 02            [ 1] 1669 	clr (2,x)
      001DAB CD 17 99         [ 4] 1670 4$: call next_token 
      001DAE A1 08            [ 1] 1671 	cp a,#TK_COMMA 
      001DB0 27 B3            [ 1] 1672 	jreq 0$ 
      001DB2 A1 32            [ 1] 1673 	cp a,#TK_EQUAL 
      001DB4 26 2A            [ 1] 1674 	jrne 8$
                                   1675 ; initialize variable 
      001DB6 CD 1B BE         [ 4] 1676 	call condition 
      001DB9 A1 84            [ 1] 1677 	cp a,#TK_INTGR
      001DBB 27 03            [ 1] 1678 	jreq 5$
      001DBD CC 16 35         [ 2] 1679 	jp syntax_error
      001DC0 CE 00 32         [ 2] 1680 5$: ldw x,dvar_end 
      001DC3 1D 00 03         [ 2] 1681 	subw x,#CELL_SIZE 
      001DC6 CF 00 19         [ 2] 1682 	ldw ptr16,x 
      001DC9                       1683 	_xpop 
      001DC9 90 F6            [ 1]    1     ld a,(y)
      001DCB 93               [ 1]    2     ldw x,y 
      001DCC EE 01            [ 2]    3     ldw x,(1,x)
      001DCE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001DD2 72 C7 00 19      [ 4] 1684 	ld [ptr16],a 
      001DD6 72 5C 00 1A      [ 1] 1685 	inc ptr8 
      001DDA 72 CF 00 19      [ 5] 1686 	ldw [ptr16],x 
      001DDE 20 CB            [ 2] 1687 	jra 4$ 
      001DE0                       1688 8$:	
      001DE0                       1689 	_unget_token 	
      001DE0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001DE5                       1690 	_drop VSIZE 
      001DE5 5B 05            [ 2]    1     addw sp,#VSIZE 
      001DE7 CD 1C 72         [ 4] 1691 	call ubound 
      001DEA 81               [ 4] 1692 	ret 
                                   1693 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1694 
                                   1695 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1696 ; return program size 
                                   1697 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001DEB                       1698 prog_size:
      001DEB CE 00 1D         [ 2] 1699 	ldw x,txtend 
      001DEE 72 B0 00 1B      [ 2] 1700 	subw x,txtbgn 
      001DF2 81               [ 4] 1701 	ret 
                                   1702 
                                   1703 ;----------------------------
                                   1704 ; print program information 
                                   1705 ;---------------------------
      001DF3                       1706 program_info: 
      001DF3 AE 1E 32         [ 2] 1707 	ldw x,#PROG_ADDR 
      001DF6 CD 09 37         [ 4] 1708 	call puts 
      001DF9 CE 00 1B         [ 2] 1709 	ldw x,txtbgn 
      001DFC 35 10 00 0A      [ 1] 1710 	mov base,#16 
      001E00 CD 17 E1         [ 4] 1711 	call prt_i16
      001E03 35 0A 00 0A      [ 1] 1712 	mov base,#10  
      001E07 AE 1E 44         [ 2] 1713 	ldw x,#PROG_SIZE
      001E0A CD 09 37         [ 4] 1714 	call puts 
      001E0D CD 1D EB         [ 4] 1715 	call prog_size 
      001E10 CD 17 E1         [ 4] 1716 	call prt_i16 
      001E13 AE 1E 55         [ 2] 1717 	ldw x,#STR_BYTES 
      001E16 CD 09 37         [ 4] 1718 	call puts
      001E19 CE 00 1B         [ 2] 1719 	ldw x,txtbgn
      001E1C A3 36 04         [ 2] 1720 	cpw x,#app 
      001E1F 25 05            [ 1] 1721 	jrult 2$
      001E21 AE 1E 5C         [ 2] 1722 	ldw x,#FLASH_MEM 
      001E24 20 03            [ 2] 1723 	jra 3$
      001E26 AE 1E 6D         [ 2] 1724 2$: ldw x,#RAM_MEM 	 
      001E29 CD 09 37         [ 4] 1725 3$:	call puts 
      001E2C A6 0D            [ 1] 1726 	ld a,#CR 
      001E2E CD 08 DA         [ 4] 1727 	call putc
      001E31 81               [ 4] 1728 	ret 
                                   1729 
      001E32 70 72 6F 67 72 61 6D  1730 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E44 2C 20 70 72 6F 67 72  1731 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001E55 20 62 79 74 65 73 00  1732 STR_BYTES: .asciz " bytes" 
      001E5C 20 69 6E 20 46 4C 41  1733 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001E6D 20 69 6E 20 52 41 4D  1734 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1735 
                                   1736 
                                   1737 ;----------------------------
                                   1738 ; BASIC: LIST [[start][,end]]
                                   1739 ; list program lines 
                                   1740 ; form start to end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                   1741 ; if empty argument list then 
                                   1742 ; list all.
                                   1743 ;----------------------------
                           000001  1744 	FIRST=1
                           000003  1745 	LAST=3 
                           000005  1746 	LN_PTR=5
                           000006  1747 	VSIZE=6 
      001E7C                       1748 list:
      001E7C 72 01 00 22 05   [ 2] 1749 	btjf flags,#FRUN,0$
      001E81 A6 07            [ 1] 1750 	ld a,#ERR_CMD_ONLY
      001E83 CC 16 37         [ 2] 1751 	jp tb_error
      001E86                       1752 0$:	 
      001E86 CD 1D EB         [ 4] 1753 	call prog_size 
      001E89 22 01            [ 1] 1754 	jrugt 3$
      001E8B 81               [ 4] 1755 	ret 
      001E8C                       1756 3$: _vars VSIZE
      001E8C 52 06            [ 2]    1     sub sp,#VSIZE 
      001E8E CE 00 1B         [ 2] 1757 	ldw x,txtbgn 
      001E91 1F 05            [ 2] 1758 	ldw (LN_PTR,sp),x 
      001E93 FE               [ 2] 1759 	ldw x,(x) 
      001E94 1F 01            [ 2] 1760 	ldw (FIRST,sp),x ; list from first line 
      001E96 AE 7F FF         [ 2] 1761 	ldw x,#MAX_LINENO ; biggest line number 
      001E99 1F 03            [ 2] 1762 	ldw (LAST,sp),x 
      001E9B CD 19 61         [ 4] 1763 	call arg_list
      001E9E 4D               [ 1] 1764 	tnz a
      001E9F 27 31            [ 1] 1765 	jreq list_loop 
      001EA1 A1 02            [ 1] 1766 	cp a,#2 
      001EA3 27 07            [ 1] 1767 	jreq 4$
      001EA5 A1 01            [ 1] 1768 	cp a,#1 
      001EA7 27 06            [ 1] 1769 	jreq first_line 
      001EA9 CC 16 35         [ 2] 1770 	jp syntax_error 
      001EAC 85               [ 2] 1771 4$:	popw x 
      001EAD 1F 05            [ 2] 1772 	ldw (LAST+2,sp),x 
      001EAF                       1773 first_line:
      001EAF 85               [ 2] 1774 	popw x
      001EB0 1F 01            [ 2] 1775 	ldw (FIRST,sp),x 
      001EB2                       1776 lines_skip:
      001EB2 CE 00 1B         [ 2] 1777 	ldw x,txtbgn
      001EB5 1F 05            [ 2] 1778 2$:	ldw (LN_PTR,sp),x 
      001EB7 C3 00 1D         [ 2] 1779 	cpw x,txtend 
      001EBA 2A 38            [ 1] 1780 	jrpl list_exit 
      001EBC FE               [ 2] 1781 	ldw x,(x) ;line# 
      001EBD 13 01            [ 2] 1782 	cpw x,(FIRST,sp)
      001EBF 2A 11            [ 1] 1783 	jrpl list_loop 
      001EC1 1E 05            [ 2] 1784 	ldw x,(LN_PTR,sp) 
      001EC3 E6 02            [ 1] 1785 	ld a,(2,x)
      001EC5 C7 00 0E         [ 1] 1786 	ld acc8,a 
      001EC8 72 5F 00 0D      [ 1] 1787 	clr acc16 
      001ECC 72 BB 00 0D      [ 2] 1788 	addw x,acc16
      001ED0 20 E3            [ 2] 1789 	jra 2$ 
                                   1790 ; print loop
      001ED2                       1791 list_loop:
      001ED2 1E 05            [ 2] 1792 	ldw x,(LN_PTR,sp)
      001ED4 E6 02            [ 1] 1793 	ld a,(2,x) 
      001ED6 CD 1F 49         [ 4] 1794 	call prt_basic_line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001ED9 1E 05            [ 2] 1795 	ldw x,(LN_PTR,sp)
      001EDB E6 02            [ 1] 1796 	ld a,(2,x)
      001EDD C7 00 0E         [ 1] 1797 	ld acc8,a 
      001EE0 72 5F 00 0D      [ 1] 1798 	clr acc16 
      001EE4 72 BB 00 0D      [ 2] 1799 	addw x,acc16
      001EE8 C3 00 1D         [ 2] 1800 	cpw x,txtend 
      001EEB 2A 07            [ 1] 1801 	jrpl list_exit
      001EED 1F 05            [ 2] 1802 	ldw (LN_PTR,sp),x
      001EEF FE               [ 2] 1803 	ldw x,(x)
      001EF0 13 03            [ 2] 1804 	cpw x,(LAST,sp)  
      001EF2 2F DE            [ 1] 1805 	jrslt list_loop
      001EF4                       1806 list_exit:
      001EF4 55 00 03 00 01   [ 1] 1807 	mov in,count 
      001EF9 AE 16 E0         [ 2] 1808 	ldw x,#pad 
      001EFC CF 00 04         [ 2] 1809 	ldw basicptr,x 
      001EFF                       1810 	_drop VSIZE 
      001EFF 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F01 CD 1D F3         [ 4] 1811 	call program_info 
      001F04 81               [ 4] 1812 	ret
                                   1813 
                                   1814 
                                   1815 ;--------------------------
                                   1816 ; BASIC: EDIT 
                                   1817 ;  copy program in FLASH 
                                   1818 ;  to RAM for edition 
                                   1819 ;-------------------------
      001F05                       1820 edit:
      001F05 CD 27 AA         [ 4] 1821 	call qsign 
      001F08 27 07            [ 1] 1822 	jreq 1$ 
      001F0A AE 1F 32         [ 2] 1823 	ldw x,#NOT_SAVED 
      001F0D CD 09 37         [ 4] 1824 	call puts 
      001F10 81               [ 4] 1825 	ret 
      001F11                       1826 1$: 
      001F11 90 AE 36 00      [ 2] 1827 	ldw y,#app_sign ; source address 
      001F15 CE 36 02         [ 2] 1828     ldw x,app_size  
      001F18 1C 00 04         [ 2] 1829 	addw x,#4 
      001F1B CF 00 0D         [ 2] 1830 	ldw acc16,x  ; bytes to copy 
      001F1E AE 00 8C         [ 2] 1831 	ldw x,#rsign ; destination address 
      001F21 CD 13 81         [ 4] 1832 	call move  
      001F24 AE 00 90         [ 2] 1833 	ldw x,#free_ram 
      001F27 CF 00 1B         [ 2] 1834 	ldw txtbgn,x 
      001F2A 72 BB 00 8E      [ 2] 1835 	addw x,rsize  
      001F2E CF 00 1D         [ 2] 1836 	ldw txtend,x 
      001F31 81               [ 4] 1837 	ret 
                                   1838 
      001F32 4E 6F 20 61 70 70 6C  1839 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1840 
                                   1841 
                                   1842 ;--------------------------
                                   1843 ; decompile line from token list
                                   1844 ; and print it. 
                                   1845 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1846 ;   A       stop at this position 
                                   1847 ;   X 		pointer at line
                                   1848 ; output:
                                   1849 ;   none 
                                   1850 ;--------------------------	
      001F49                       1851 prt_basic_line:
      001F49 90 89            [ 2] 1852 	pushw y 
      001F4B C7 00 03         [ 1] 1853 	ld count,a 
      001F4E E6 02            [ 1] 1854 	ld a,(2,x)
      001F50 C1 00 03         [ 1] 1855 	cp a,count 
      001F53 2A 03            [ 1] 1856 	jrpl 1$ 
      001F55 C7 00 03         [ 1] 1857 	ld count,a 
      001F58 CF 00 04         [ 2] 1858 1$:	ldw basicptr,x 
      001F5B 90 AE 16 90      [ 2] 1859 	ldw y,#tib  
      001F5F CD 11 71         [ 4] 1860 	call decompile 
      001F62 CD 09 37         [ 4] 1861 	call puts 
      001F65 A6 0D            [ 1] 1862 	ld a,#CR 
      001F67 CD 08 DA         [ 4] 1863 	call putc 
      001F6A 90 85            [ 2] 1864 	popw y 
      001F6C 81               [ 4] 1865 	ret 
                                   1866 
                                   1867 
                                   1868 ;---------------------------------
                                   1869 ; BASIC: PRINT|? arg_list 
                                   1870 ; print values from argument list
                                   1871 ;----------------------------------
                           000001  1872 	CCOMMA=1
                           000001  1873 	VSIZE=1
      001F6D                       1874 print:
      001F6D                       1875 	_vars VSIZE 
      001F6D 52 01            [ 2]    1     sub sp,#VSIZE 
      001F6F                       1876 reset_comma:
      001F6F 0F 01            [ 1] 1877 	clr (CCOMMA,sp)
      001F71                       1878 prt_loop:
      001F71 CD 17 99         [ 4] 1879 	call next_token
      001F74 A1 02            [ 1] 1880 	cp a,#CMD_END 
      001F76 25 08            [ 1] 1881 	jrult 0$
      001F78 A1 0A            [ 1] 1882 	cp a,#TK_COLON 
      001F7A 27 04            [ 1] 1883 	jreq 0$
      001F7C A1 80            [ 1] 1884 	cp a,#TK_CMD
      001F7E 26 07            [ 1] 1885 	jrne 10$
      001F80                       1886 0$:
      001F80                       1887 	_unget_token 
      001F80 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F85 20 63            [ 2] 1888 	jra 8$ 
      001F87                       1889 10$:	
      001F87 A1 02            [ 1] 1890 	cp a,#TK_QSTR
      001F89 27 12            [ 1] 1891 	jreq 1$
      001F8B A1 04            [ 1] 1892 	cp a,#TK_CHAR 
      001F8D 27 1B            [ 1] 1893 	jreq 2$ 
      001F8F A1 82            [ 1] 1894 	cp a,#TK_CFUNC 
      001F91 27 1F            [ 1] 1895 	jreq 3$
      001F93 A1 08            [ 1] 1896 	cp a,#TK_COMMA 
      001F95 27 2A            [ 1] 1897 	jreq 4$
      001F97 A1 09            [ 1] 1898 	cp a,#TK_SHARP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F99 27 2A            [ 1] 1899 	jreq 5$
      001F9B 20 3D            [ 2] 1900 	jra 7$ 
      001F9D                       1901 1$:	; print string 
      001F9D CD 09 37         [ 4] 1902 	call puts
      001FA0 5C               [ 1] 1903 	incw x
      001FA1 72 B0 00 04      [ 2] 1904 	subw x,basicptr 
      001FA5 CF 00 00         [ 2] 1905 	ldw in.w,x  
      001FA8 20 C5            [ 2] 1906 	jra reset_comma
      001FAA                       1907 2$:	; print character 
      001FAA CD 17 DB         [ 4] 1908 	call get_char 
      001FAD CD 08 DA         [ 4] 1909 	call putc 
      001FB0 20 BD            [ 2] 1910 	jra reset_comma 
      001FB2                       1911 3$: ; print character function value  	
      001FB2                       1912 	_get_code_addr 
      001FB2 FE               [ 2]    1         ldw x,(x)
      001FB3 72 5C 00 01      [ 1]    2         inc in 
      001FB7 72 5C 00 01      [ 1]    3         inc in 
      001FBB FD               [ 4] 1913 	call (x)
      001FBC CD 08 DA         [ 4] 1914 	call putc
      001FBF 20 AE            [ 2] 1915 	jra reset_comma 
      001FC1                       1916 4$: ; set comma state 
      001FC1 03 01            [ 1] 1917 	cpl (CCOMMA,sp)
      001FC3 20 AC            [ 2] 1918 	jra prt_loop   
      001FC5                       1919 5$: ; # character must be followed by an integer   
      001FC5 CD 17 99         [ 4] 1920 	call next_token
      001FC8 A1 84            [ 1] 1921 	cp a,#TK_INTGR 
      001FCA 27 03            [ 1] 1922 	jreq 6$
      001FCC CC 16 35         [ 2] 1923 	jp syntax_error 
      001FCF                       1924 6$: ; set tab width
      001FCF CD 17 CB         [ 4] 1925 	call get_int24 
      001FD2 9F               [ 1] 1926 	ld a,xl 
      001FD3 A4 0F            [ 1] 1927 	and a,#15 
      001FD5 C7 00 23         [ 1] 1928 	ld tab_width,a 
      001FD8 20 95            [ 2] 1929 	jra reset_comma 
      001FDA                       1930 7$:	
      001FDA                       1931 	_unget_token 
      001FDA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FDF CD 1B BE         [ 4] 1932 	call condition
      001FE2 4D               [ 1] 1933 	tnz a 
      001FE3 27 05            [ 1] 1934 	jreq 8$    
      001FE5 CD 18 06         [ 4] 1935     call print_top
      001FE8 20 85            [ 2] 1936 	jra reset_comma 
      001FEA                       1937 8$:
      001FEA 0D 01            [ 1] 1938 	tnz (CCOMMA,sp)
      001FEC 26 05            [ 1] 1939 	jrne 9$
      001FEE A6 0D            [ 1] 1940 	ld a,#CR 
      001FF0 CD 08 DA         [ 4] 1941     call putc 
      001FF3                       1942 9$:	_drop VSIZE 
      001FF3 5B 01            [ 2]    1     addw sp,#VSIZE 
      001FF5 81               [ 4] 1943 	ret 
                                   1944 
                                   1945 ;----------------------
                                   1946 ; 'save_context' and
                                   1947 ; 'rest_context' must be 
                                   1948 ; called at the same 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1949 ; call stack depth 
                                   1950 ; i.e. SP must have the 
                                   1951 ; save value at  
                                   1952 ; entry point of both 
                                   1953 ; routine. 
                                   1954 ;---------------------
                           000004  1955 	CTXT_SIZE=4 ; size of saved data 
                                   1956 ;--------------------
                                   1957 ; save current BASIC
                                   1958 ; interpreter context 
                                   1959 ; on stack 
                                   1960 ;--------------------
      001FF6                       1961 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001FF6                       1962 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001FF6                       1963 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001FF6                       1964 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001FF6                       1965 save_context:
      001FF6 CE 00 04         [ 2] 1966 	ldw x,basicptr 
      001FF9 1F 03            [ 2] 1967 	ldw (BPTR,sp),x
      001FFB C6 00 01         [ 1] 1968 	ld a,in 
      001FFE 6B 05            [ 1] 1969 	ld (IN,sp),a
      002000 C6 00 03         [ 1] 1970 	ld a,count 
      002003 6B 06            [ 1] 1971 	ld (CNT,sp),a  
      002005 81               [ 4] 1972 	ret
                                   1973 
                                   1974 ;-----------------------
                                   1975 ; restore previously saved 
                                   1976 ; BASIC interpreter context 
                                   1977 ; from stack 
                                   1978 ;-------------------------
      002006                       1979 rest_context:
      002006 1E 03            [ 2] 1980 	ldw x,(BPTR,sp)
      002008 CF 00 04         [ 2] 1981 	ldw basicptr,x 
      00200B 7B 05            [ 1] 1982 	ld a,(IN,sp)
      00200D C7 00 01         [ 1] 1983 	ld in,a
      002010 7B 06            [ 1] 1984 	ld a,(CNT,sp)
      002012 C7 00 03         [ 1] 1985 	ld count,a  
      002015 81               [ 4] 1986 	ret
                                   1987 
                                   1988 
                                   1989 
                                   1990 ;------------------------------------------
                                   1991 ; BASIC: INPUT [string]var[,[string]var]
                                   1992 ; input value in variables 
                                   1993 ; [string] optionally can be used as prompt 
                                   1994 ;-----------------------------------------
                           000001  1995 	CX_BPTR=1
                           000003  1996 	CX_IN=3
                           000004  1997 	CX_CNT=4
                           000005  1998 	SKIP=5
                           000005  1999 	VSIZE=5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002016                       2000 input_var:
      002016 90 89            [ 2] 2001 	pushw y 
      002018                       2002 	_vars VSIZE 
      002018 52 05            [ 2]    1     sub sp,#VSIZE 
      00201A                       2003 input_loop:
      00201A 0F 05            [ 1] 2004 	clr (SKIP,sp)
      00201C CD 17 99         [ 4] 2005 	call next_token 
      00201F A1 02            [ 1] 2006 	cp a,#TK_QSTR 
      002021 26 10            [ 1] 2007 	jrne 1$ 
      002023 CD 09 37         [ 4] 2008 	call puts 
      002026 5C               [ 1] 2009 	incw x 
      002027 72 B0 00 04      [ 2] 2010 	subw x,basicptr 
      00202B CF 00 00         [ 2] 2011 	ldw in.w,x 
      00202E 03 05            [ 1] 2012 	cpl (SKIP,sp)
      002030 CD 17 99         [ 4] 2013 	call next_token 
      002033 A1 85            [ 1] 2014 1$: cp a,#TK_VAR  
      002035 27 03            [ 1] 2015 	jreq 2$ 
      002037 CC 16 35         [ 2] 2016 	jp syntax_error
      00203A CD 17 C1         [ 4] 2017 2$:	call get_addr
      00203D CF 00 19         [ 2] 2018 	ldw ptr16,x 
      002040 0D 05            [ 1] 2019 	tnz (SKIP,sp)
      002042 26 06            [ 1] 2020 	jrne 21$ 
      002044 CD 11 67         [ 4] 2021 	call var_name 
      002047 CD 08 DA         [ 4] 2022 	call putc   
      00204A                       2023 21$:
      00204A A6 3A            [ 1] 2024 	ld a,#':
      00204C CD 08 DA         [ 4] 2025 	call putc 
      00204F CD 1F F6         [ 4] 2026 	call save_context 
      002052 72 5F 00 03      [ 1] 2027 	clr count  
      002056 CD 0A 3C         [ 4] 2028 	call readln 
      002059 AE 16 90         [ 2] 2029 	ldw x,#tib 
      00205C 3B 00 03         [ 1] 2030 	push count
      00205F 4B 00            [ 1] 2031 	push #0 
      002061 72 FB 01         [ 2] 2032 	addw x,(1,sp)
      002064 5C               [ 1] 2033 	incw x 
      002065                       2034 	_drop 2 
      002065 5B 02            [ 2]    1     addw sp,#2 
      002067 72 5F 00 01      [ 1] 2035 	clr in 
      00206B CD 0E B1         [ 4] 2036 	call get_token
      00206E A1 84            [ 1] 2037 	cp a,#TK_INTGR
      002070 27 14            [ 1] 2038 	jreq 3$ 
      002072 A1 11            [ 1] 2039 	cp a,#TK_MINUS
      002074 26 07            [ 1] 2040 	jrne 22$
      002076 CD 0E B1         [ 4] 2041 	call get_token 
      002079 A1 84            [ 1] 2042 	cp a,#TK_INTGR 
      00207B 27 06            [ 1] 2043 	jreq 23$
      00207D                       2044 22$:
      00207D CD 20 06         [ 4] 2045 	call rest_context 
      002080 CC 16 35         [ 2] 2046 	jp syntax_error
      002083                       2047 23$:
      002083 CD 02 0A         [ 4] 2048 	call neg_acc24	
      002086                       2049 3$: 
      002086 C6 00 0C         [ 1] 2050 	ld a,acc24 
      002089 CE 00 0D         [ 2] 2051 	ldw x,acc16 
      00208C 72 C7 00 19      [ 4] 2052 	ld [ptr16],a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002090 72 5C 00 1A      [ 1] 2053 	inc ptr8  
      002094 72 CF 00 19      [ 5] 2054 	ldw [ptr16],x 
      002098 CD 20 06         [ 4] 2055 	call rest_context
      00209B CD 17 99         [ 4] 2056 	call next_token 
      00209E A1 08            [ 1] 2057 	cp a,#TK_COMMA
      0020A0 26 03            [ 1] 2058 	jrne 4$ 
      0020A2 CC 20 1A         [ 2] 2059 	jp input_loop
      0020A5                       2060 4$:
      0020A5 A1 00            [ 1] 2061 	cp a,#TK_NONE 
      0020A7 27 07            [ 1] 2062 	jreq input_exit  
      0020A9 A1 0A            [ 1] 2063 	cp a,#TK_COLON 
      0020AB 27 03            [ 1] 2064     jreq input_exit 
      0020AD CC 16 35         [ 2] 2065 	jp syntax_error 
      0020B0                       2066 input_exit:
      0020B0                       2067 	_drop VSIZE 
      0020B0 5B 05            [ 2]    1     addw sp,#VSIZE 
      0020B2 90 85            [ 2] 2068 	popw y 
      0020B4 81               [ 4] 2069 	ret 
                                   2070 
                                   2071 
                                   2072 ;---------------------
                                   2073 ; BASIC: REM | ' 
                                   2074 ; skip comment to end of line 
                                   2075 ;---------------------- 
      0020B5                       2076 remark::
      0020B5 55 00 03 00 01   [ 1] 2077 	mov in,count 
      0020BA 81               [ 4] 2078  	ret 
                                   2079 
                                   2080 
                                   2081 ;---------------------
                                   2082 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2083 ; read in loop 'addr'  
                                   2084 ; apply & 'mask' to value 
                                   2085 ; loop while result==0.  
                                   2086 ; 'xor_mask' is used to 
                                   2087 ; invert the wait logic.
                                   2088 ; i.e. loop while not 0.
                                   2089 ;---------------------
                           000001  2090 	XMASK=1 
                           000002  2091 	MASK=2
                           000003  2092 	ADDR=3
                           000004  2093 	VSIZE=4
      0020BB                       2094 wait: 
      0020BB                       2095 	_vars VSIZE
      0020BB 52 04            [ 2]    1     sub sp,#VSIZE 
      0020BD 0F 01            [ 1] 2096 	clr (XMASK,sp) 
      0020BF CD 19 61         [ 4] 2097 	call arg_list 
      0020C2 A1 02            [ 1] 2098 	cp a,#2
      0020C4 24 03            [ 1] 2099 	jruge 0$
      0020C6 CC 16 35         [ 2] 2100 	jp syntax_error 
      0020C9 A1 03            [ 1] 2101 0$:	cp a,#3
      0020CB 25 0C            [ 1] 2102 	jrult 1$
      0020CD                       2103 	_xpop  ; xor mask 
      0020CD 90 F6            [ 1]    1     ld a,(y)
      0020CF 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020D0 EE 01            [ 2]    3     ldw x,(1,x)
      0020D2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020D6 9F               [ 1] 2104 	ld a,xl 
      0020D7 6B 01            [ 1] 2105 	ld (XMASK,sp),a 
      0020D9                       2106 1$: _xpop ; mask
      0020D9 90 F6            [ 1]    1     ld a,(y)
      0020DB 93               [ 1]    2     ldw x,y 
      0020DC EE 01            [ 2]    3     ldw x,(1,x)
      0020DE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020E2 9F               [ 1] 2107     ld a,xl  
      0020E3 6B 02            [ 1] 2108 	ld (MASK,sp),a 
      0020E5                       2109 	_xpop ; address 
      0020E5 90 F6            [ 1]    1     ld a,(y)
      0020E7 93               [ 1]    2     ldw x,y 
      0020E8 EE 01            [ 2]    3     ldw x,(1,x)
      0020EA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020EE F6               [ 1] 2110 2$:	ld a,(x)
      0020EF 14 02            [ 1] 2111 	and a,(MASK,sp)
      0020F1 18 01            [ 1] 2112 	xor a,(XMASK,sp)
      0020F3 27 F9            [ 1] 2113 	jreq 2$ 
      0020F5                       2114 	_drop VSIZE 
      0020F5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0020F7 81               [ 4] 2115 	ret 
                                   2116 
                                   2117 ;---------------------
                                   2118 ; BASIC: BSET addr,mask
                                   2119 ; set bits at 'addr' corresponding 
                                   2120 ; to those of 'mask' that are at 1.
                                   2121 ; arguments:
                                   2122 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2123 ;   mask        mask|addr
                                   2124 ; output:
                                   2125 ;	none 
                                   2126 ;--------------------------
      0020F8                       2127 bit_set:
      0020F8 CD 19 61         [ 4] 2128 	call arg_list 
      0020FB A1 02            [ 1] 2129 	cp a,#2	 
      0020FD 27 03            [ 1] 2130 	jreq 1$ 
      0020FF CC 16 35         [ 2] 2131 	jp syntax_error
      002102                       2132 1$: 
      002102                       2133 	_xpop ; mask 
      002102 90 F6            [ 1]    1     ld a,(y)
      002104 93               [ 1]    2     ldw x,y 
      002105 EE 01            [ 2]    3     ldw x,(1,x)
      002107 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00210B 9F               [ 1] 2134 	ld a,xl
      00210C 88               [ 1] 2135 	push a  
      00210D                       2136 	_xpop ; addr  
      00210D 90 F6            [ 1]    1     ld a,(y)
      00210F 93               [ 1]    2     ldw x,y 
      002110 EE 01            [ 2]    3     ldw x,(1,x)
      002112 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002116 84               [ 1] 2137 	pop a 
      002117 FA               [ 1] 2138 	or a,(x)
      002118 F7               [ 1] 2139 	ld (x),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002119 81               [ 4] 2140 	ret 
                                   2141 
                                   2142 ;---------------------
                                   2143 ; BASIC: BRES addr,mask
                                   2144 ; reset bits at 'addr' corresponding 
                                   2145 ; to those of 'mask' that are at 1.
                                   2146 ; arguments:
                                   2147 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2148 ;   mask	    ~mask&*addr  
                                   2149 ; output:
                                   2150 ;	none 
                                   2151 ;--------------------------
      00211A                       2152 bit_reset:
      00211A CD 19 61         [ 4] 2153 	call arg_list 
      00211D A1 02            [ 1] 2154 	cp a,#2  
      00211F 27 03            [ 1] 2155 	jreq 1$ 
      002121 CC 16 35         [ 2] 2156 	jp syntax_error
      002124                       2157 1$: 
      002124                       2158 	_xpop ; mask 
      002124 90 F6            [ 1]    1     ld a,(y)
      002126 93               [ 1]    2     ldw x,y 
      002127 EE 01            [ 2]    3     ldw x,(1,x)
      002129 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00212D 9F               [ 1] 2159 	ld a,xl 
      00212E 43               [ 1] 2160 	cpl a
      00212F 88               [ 1] 2161 	push a  
      002130                       2162 	_xpop ; addr  
      002130 90 F6            [ 1]    1     ld a,(y)
      002132 93               [ 1]    2     ldw x,y 
      002133 EE 01            [ 2]    3     ldw x,(1,x)
      002135 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002139 84               [ 1] 2163 	pop a 
      00213A F4               [ 1] 2164 	and a,(x)
      00213B F7               [ 1] 2165 	ld (x),a 
      00213C 81               [ 4] 2166 	ret 
                                   2167 
                                   2168 ;---------------------
                                   2169 ; BASIC: BTOGL addr,mask
                                   2170 ; toggle bits at 'addr' corresponding 
                                   2171 ; to those of 'mask' that are at 1.
                                   2172 ; arguments:
                                   2173 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2174 ;   mask	    mask^*addr  
                                   2175 ; output:
                                   2176 ;	none 
                                   2177 ;--------------------------
      00213D                       2178 bit_toggle:
      00213D CD 19 61         [ 4] 2179 	call arg_list 
      002140 A1 02            [ 1] 2180 	cp a,#2 
      002142 27 03            [ 1] 2181 	jreq 1$ 
      002144 CC 16 35         [ 2] 2182 	jp syntax_error
      002147                       2183 1$: _xpop ; mask 
      002147 90 F6            [ 1]    1     ld a,(y)
      002149 93               [ 1]    2     ldw x,y 
      00214A EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      00214C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002150 9F               [ 1] 2184 	ld a,xl
      002151 88               [ 1] 2185 	push a 
      002152                       2186 	_xpop  ; addr  
      002152 90 F6            [ 1]    1     ld a,(y)
      002154 93               [ 1]    2     ldw x,y 
      002155 EE 01            [ 2]    3     ldw x,(1,x)
      002157 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00215B 84               [ 1] 2187 	pop a 
      00215C F8               [ 1] 2188 	xor a,(x)
      00215D F7               [ 1] 2189 	ld (x),a 
      00215E 81               [ 4] 2190 	ret 
                                   2191 
                                   2192 
                                   2193 ;---------------------
                                   2194 ; BASIC: BTEST(addr,bit)
                                   2195 ; return bit value at 'addr' 
                                   2196 ; bit is in range {0..7}.
                                   2197 ; arguments:
                                   2198 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2199 ;   bit 	    bit position {0..7}  
                                   2200 ; output:
                                   2201 ;	A:X       bit value  
                                   2202 ;--------------------------
      00215F                       2203 bit_test:
      00215F CD 19 5C         [ 4] 2204 	call func_args 
      002162 A1 02            [ 1] 2205 	cp a,#2
      002164 27 03            [ 1] 2206 	jreq 0$
      002166 CC 16 35         [ 2] 2207 	jp syntax_error
      002169                       2208 0$:	
      002169                       2209 	_xpop 
      002169 90 F6            [ 1]    1     ld a,(y)
      00216B 93               [ 1]    2     ldw x,y 
      00216C EE 01            [ 2]    3     ldw x,(1,x)
      00216E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002172 9F               [ 1] 2210 	ld a,xl 
      002173 A4 07            [ 1] 2211 	and a,#7
      002175 88               [ 1] 2212 	push a   
      002176 A6 01            [ 1] 2213 	ld a,#1 
      002178 0D 01            [ 1] 2214 1$: tnz (1,sp)
      00217A 27 05            [ 1] 2215 	jreq 2$
      00217C 48               [ 1] 2216 	sll a 
      00217D 0A 01            [ 1] 2217 	dec (1,sp)
      00217F 20 F7            [ 2] 2218 	jra 1$
      002181 6B 01            [ 1] 2219 2$: ld (1,sp),a  
      002183                       2220 	_xpop ; address  
      002183 90 F6            [ 1]    1     ld a,(y)
      002185 93               [ 1]    2     ldw x,y 
      002186 EE 01            [ 2]    3     ldw x,(1,x)
      002188 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00218C 84               [ 1] 2221 	pop a 
      00218D F4               [ 1] 2222 	and a,(x)
      00218E 27 02            [ 1] 2223 	jreq 3$
      002190 A6 01            [ 1] 2224 	ld a,#1 
      002192 5F               [ 1] 2225 3$:	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002193 97               [ 1] 2226 	ld xl,a
      002194 4F               [ 1] 2227 	clr a  
      002195 81               [ 4] 2228 	ret
                                   2229 
                                   2230 ;--------------------
                                   2231 ; BASIC: POKE addr,byte
                                   2232 ; put a byte at addr 
                                   2233 ;--------------------
      002196                       2234 poke:
      002196 CD 19 61         [ 4] 2235 	call arg_list 
      002199 A1 02            [ 1] 2236 	cp a,#2
      00219B 27 03            [ 1] 2237 	jreq 1$
      00219D CC 16 35         [ 2] 2238 	jp syntax_error
      0021A0                       2239 1$:	
      0021A0                       2240 	_xpop ; byte   
      0021A0 90 F6            [ 1]    1     ld a,(y)
      0021A2 93               [ 1]    2     ldw x,y 
      0021A3 EE 01            [ 2]    3     ldw x,(1,x)
      0021A5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A9 9F               [ 1] 2241     ld a,xl 
      0021AA 88               [ 1] 2242 	push a 
      0021AB                       2243 	_xpop ; address 
      0021AB 90 F6            [ 1]    1     ld a,(y)
      0021AD 93               [ 1]    2     ldw x,y 
      0021AE EE 01            [ 2]    3     ldw x,(1,x)
      0021B0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B4 84               [ 1] 2244 	pop a 
      0021B5 F7               [ 1] 2245 	ld (x),a 
      0021B6 81               [ 4] 2246 	ret 
                                   2247 
                                   2248 ;-----------------------
                                   2249 ; BASIC: PEEK(addr)
                                   2250 ; get the byte at addr 
                                   2251 ; input:
                                   2252 ;	none 
                                   2253 ; output:
                                   2254 ;	X 		value 
                                   2255 ;-----------------------
      0021B7                       2256 peek:
      0021B7 CD 19 5C         [ 4] 2257 	call func_args
      0021BA A1 01            [ 1] 2258 	cp a,#1 
      0021BC 27 03            [ 1] 2259 	jreq 1$
      0021BE CC 16 35         [ 2] 2260 	jp syntax_error
      0021C1                       2261 1$: _xpop ; address  
      0021C1 90 F6            [ 1]    1     ld a,(y)
      0021C3 93               [ 1]    2     ldw x,y 
      0021C4 EE 01            [ 2]    3     ldw x,(1,x)
      0021C6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021CA C7 00 18         [ 1] 2262 	ld farptr,a 
      0021CD CF 00 19         [ 2] 2263 	ldw ptr16,x 
      0021D0 92 BC 00 18      [ 5] 2264 	ldf a,[farptr]
      0021D4 5F               [ 1] 2265 	clrw x 
      0021D5 97               [ 1] 2266 	ld xl,a 
      0021D6 4F               [ 1] 2267 	clr a 
      0021D7 81               [ 4] 2268 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2269 
                                   2270 ;---------------------------
                                   2271 ; BASIC IF expr : instructions
                                   2272 ; evaluate expr and if true 
                                   2273 ; execute instructions on same line. 
                                   2274 ;----------------------------
      0021D8                       2275 if: 
      0021D8 CD 1B BE         [ 4] 2276 	call condition  
      0021DB                       2277 	_xpop 
      0021DB 90 F6            [ 1]    1     ld a,(y)
      0021DD 93               [ 1]    2     ldw x,y 
      0021DE EE 01            [ 2]    3     ldw x,(1,x)
      0021E0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E4 4D               [ 1] 2278 	tnz  a  
      0021E5 26 0D            [ 1] 2279 	jrne 9$
      0021E7 5D               [ 2] 2280 	tnzw x 
      0021E8 26 0A            [ 1] 2281 	jrne 9$  
                                   2282 ;skip to next line
      0021EA 55 00 03 00 01   [ 1] 2283 	mov in,count
      0021EF                       2284 	_drop 2 
      0021EF 5B 02            [ 2]    1     addw sp,#2 
      0021F1 CC 16 E8         [ 2] 2285 	jp next_line
      0021F4 81               [ 4] 2286 9$:	ret 
                                   2287 
                                   2288 ;------------------------
                                   2289 ; BASIC: FOR var=expr 
                                   2290 ; set variable to expression 
                                   2291 ; leave variable address 
                                   2292 ; on stack and set
                                   2293 ; FLOOP bit in 'flags'
                                   2294 ;-----------------
                           000001  2295 	RETL1=1 ; return address  
                           000003  2296 	FSTEP=3  ; variable increment int24
                           000006  2297 	LIMIT=6 ; loop limit, int24  
                           000009  2298 	CVAR=9   ; control variable 
                           00000B  2299 	INW=11   ;  in.w saved
                           00000D  2300 	BPTR=13 ; baseptr saved
                           00000D  2301 	VSIZE=13  
      0021F5                       2302 for: ; { -- var_addr }
      0021F5 85               [ 2] 2303 	popw x ; call return address 
      0021F6                       2304 	_vars VSIZE 
      0021F6 52 0D            [ 2]    1     sub sp,#VSIZE 
      0021F8 89               [ 2] 2305 	pushw x  ; RETL1 
      0021F9 A6 85            [ 1] 2306 	ld a,#TK_VAR 
      0021FB CD 19 4F         [ 4] 2307 	call expect
      0021FE CD 17 C1         [ 4] 2308 	call get_addr
      002201 1F 09            [ 2] 2309 	ldw (CVAR,sp),x  ; control variable 
      002203 CD 1C 93         [ 4] 2310 	call let_eval 
      002206 72 14 00 22      [ 1] 2311 	bset flags,#FLOOP 
      00220A CD 17 99         [ 4] 2312 	call next_token 
      00220D A1 80            [ 1] 2313 	cp a,#TK_CMD 
      00220F 27 03            [ 1] 2314 	jreq 1$
      002211 CC 16 35         [ 2] 2315 	jp syntax_error
      002214                       2316 1$:  
      002214                       2317 	_get_code_addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002214 FE               [ 2]    1         ldw x,(x)
      002215 72 5C 00 01      [ 1]    2         inc in 
      002219 72 5C 00 01      [ 1]    3         inc in 
      00221D A3 22 25         [ 2] 2318 	cpw x,#to   
      002220 27 03            [ 1] 2319 	jreq to
      002222 CC 16 35         [ 2] 2320 	jp syntax_error 
                                   2321 
                                   2322 ;-----------------------------------
                                   2323 ; BASIC: TO expr 
                                   2324 ; second part of FOR loop initilization
                                   2325 ; leave limit on stack and set 
                                   2326 ; FTO bit in 'flags'
                                   2327 ;-----------------------------------
      002225                       2328 to: ; { var_addr -- var_addr limit step }
      002225 72 04 00 22 03   [ 2] 2329 	btjt flags,#FLOOP,1$
      00222A CC 16 35         [ 2] 2330 	jp syntax_error
      00222D CD 1A A5         [ 4] 2331 1$: call expression   
      002230 A1 84            [ 1] 2332 	cp a,#TK_INTGR 
      002232 27 03            [ 1] 2333 	jreq 2$ 
      002234 CC 16 35         [ 2] 2334 	jp syntax_error
      002237                       2335 2$: _xpop
      002237 90 F6            [ 1]    1     ld a,(y)
      002239 93               [ 1]    2     ldw x,y 
      00223A EE 01            [ 2]    3     ldw x,(1,x)
      00223C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002240 6B 06            [ 1] 2336 	ld (LIMIT,sp),a 
      002242 1F 07            [ 2] 2337 	ldw (LIMIT+1,sp),x
      002244 CD 17 99         [ 4] 2338 	call next_token
      002247 A1 00            [ 1] 2339 	cp a,#TK_NONE  
      002249 27 17            [ 1] 2340 	jreq 4$ 
      00224B A1 80            [ 1] 2341 	cp a,#TK_CMD
      00224D 26 0E            [ 1] 2342 	jrne 3$
      00224F                       2343 	_get_code_addr
      00224F FE               [ 2]    1         ldw x,(x)
      002250 72 5C 00 01      [ 1]    2         inc in 
      002254 72 5C 00 01      [ 1]    3         inc in 
      002258 A3 22 6B         [ 2] 2344 	cpw x,#step 
      00225B 27 0E            [ 1] 2345 	jreq step
      00225D                       2346 3$:	
      00225D                       2347 	_unget_token   	 
      00225D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002262                       2348 4$:	
      002262 0F 03            [ 1] 2349 	clr (FSTEP,sp) 
      002264 AE 00 01         [ 2] 2350 	ldw x,#1   ; default step  
      002267 1F 04            [ 2] 2351 	ldw (FSTEP+1,sp),x 
      002269 20 2F            [ 2] 2352 	jra store_loop_addr 
                                   2353 
                                   2354 
                                   2355 ;----------------------------------
                                   2356 ; BASIC: STEP expr 
                                   2357 ; optional third par of FOR loop
                                   2358 ; initialization. 	
                                   2359 ;------------------------------------
      00226B                       2360 step: ; {var limit -- var limit step}
      00226B 72 04 00 22 03   [ 2] 2361 	btjt flags,#FLOOP,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002270 CC 16 35         [ 2] 2362 	jp syntax_error
      002273 CD 1A A5         [ 4] 2363 1$: call expression 
      002276 A1 84            [ 1] 2364 	cp a,#TK_INTGR
      002278 27 03            [ 1] 2365 	jreq 2$
      00227A CC 16 35         [ 2] 2366 	jp syntax_error
      00227D                       2367 2$:	
      00227D                       2368 	_xpop 
      00227D 90 F6            [ 1]    1     ld a,(y)
      00227F 93               [ 1]    2     ldw x,y 
      002280 EE 01            [ 2]    3     ldw x,(1,x)
      002282 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002286 6B 03            [ 1] 2369 	ld (FSTEP,sp),a 
      002288 1F 04            [ 2] 2370 	ldw (FSTEP+1,sp),x ; step
                                   2371 ; if step < 0 decrement LIMIT 
      00228A 4D               [ 1] 2372 	tnz a
      00228B 2A 0D            [ 1] 2373 	jrpl store_loop_addr 
      00228D 7B 06            [ 1] 2374 	ld a,(LIMIT,sp)
      00228F 1E 07            [ 2] 2375 	ldw x,(LIMIT+1,sp)
      002291 1D 00 01         [ 2] 2376 	subw x,#1 
      002294 A2 00            [ 1] 2377 	sbc a,#0 
      002296 6B 06            [ 1] 2378 	ld (LIMIT,sp),a 
      002298 1F 07            [ 2] 2379 	ldw (LIMIT+1,sp),x 
                                   2380 ; leave loop back entry point on cstack 
                                   2381 ; cstack is 1 call deep from interpreter
      00229A                       2382 store_loop_addr:
      00229A CE 00 04         [ 2] 2383 	ldw x,basicptr
      00229D 1F 0D            [ 2] 2384 	ldw (BPTR,sp),x 
      00229F CE 00 00         [ 2] 2385 	ldw x,in.w 
      0022A2 1F 0B            [ 2] 2386 	ldw (INW,sp),x   
      0022A4 72 15 00 22      [ 1] 2387 	bres flags,#FLOOP 
      0022A8 72 5C 00 1F      [ 1] 2388 	inc loop_depth  
      0022AC 81               [ 4] 2389 	ret 
                                   2390 
                                   2391 ;--------------------------------
                                   2392 ; BASIC: NEXT var 
                                   2393 ; FOR loop control 
                                   2394 ; increment variable with step 
                                   2395 ; and compare with limit 
                                   2396 ; loop if threshold not crossed.
                                   2397 ; else stack. 
                                   2398 ; and decrement 'loop_depth' 
                                   2399 ;--------------------------------
      0022AD                       2400 next: ; {var limit step retl1 -- [var limit step ] }
      0022AD 72 5D 00 1F      [ 1] 2401 	tnz loop_depth 
      0022B1 26 03            [ 1] 2402 	jrne 1$ 
      0022B3 CC 16 35         [ 2] 2403 	jp syntax_error 
      0022B6                       2404 1$: 
      0022B6 A6 85            [ 1] 2405 	ld a,#TK_VAR 
      0022B8 CD 19 4F         [ 4] 2406 	call expect
      0022BB CD 17 C1         [ 4] 2407 	call get_addr 
                                   2408 ; check for good variable after NEXT 	 
      0022BE 13 09            [ 2] 2409 	cpw x,(CVAR,sp)
      0022C0 27 03            [ 1] 2410 	jreq 2$  
      0022C2 CC 16 35         [ 2] 2411 	jp syntax_error ; not the good one 
      0022C5                       2412 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0022C5 CF 00 19         [ 2] 2413 	ldw ptr16,x 
                                   2414 	; increment variable 
      0022C8 F6               [ 1] 2415 	ld a,(x)
      0022C9 EE 01            [ 2] 2416 	ldw x,(1,x)  ; get var value 
      0022CB 72 FB 04         [ 2] 2417 	addw x,(FSTEP+1,sp) ; var+step 
      0022CE 19 03            [ 1] 2418 	adc a,(FSTEP,sp)
      0022D0 72 C7 00 19      [ 4] 2419 	ld [ptr16],a
      0022D4 72 5C 00 1A      [ 1] 2420 	inc ptr8  
      0022D8 72 CF 00 19      [ 5] 2421 	ldw [ptr16],x 
      0022DC C7 00 0C         [ 1] 2422 	ld acc24,a 
      0022DF CF 00 0D         [ 2] 2423 	ldw acc16,x 
      0022E2 7B 06            [ 1] 2424 	ld a,(LIMIT,sp)
      0022E4 1E 07            [ 2] 2425 	ldw x,(LIMIT+1,sp)
      0022E6 72 B0 00 0D      [ 2] 2426 	subw x,acc16 
      0022EA C2 00 0C         [ 1] 2427 	sbc a,acc24
      0022ED 18 03            [ 1] 2428 	xor a,(FSTEP,sp)
      0022EF A8 80            [ 1] 2429 	xor a,#0x80
      0022F1 2B 12            [ 1] 2430 	jrmi loop_back  
      0022F3 20 25            [ 2] 2431 	jra loop_done   
                                   2432 ; check sign of STEP  
      0022F5 7B 03            [ 1] 2433 	ld a,(FSTEP,sp)
      0022F7 2A 07            [ 1] 2434 	jrpl 4$
                                   2435 ;negative step
      0022F9 C6 00 0E         [ 1] 2436     ld a,acc8 
      0022FC 2F 07            [ 1] 2437 	jrslt loop_back   
      0022FE 20 1A            [ 2] 2438 	jra loop_done  
      002300                       2439 4$: ; positive step
      002300 72 0E 00 0E 15   [ 2] 2440 	btjt acc8,#7,loop_done 
      002305                       2441 loop_back:
      002305 1E 0D            [ 2] 2442 	ldw x,(BPTR,sp)
      002307 CF 00 04         [ 2] 2443 	ldw basicptr,x 
      00230A 72 01 00 22 05   [ 2] 2444 	btjf flags,#FRUN,1$ 
      00230F E6 02            [ 1] 2445 	ld a,(2,x)
      002311 C7 00 03         [ 1] 2446 	ld count,a
      002314 1E 0B            [ 2] 2447 1$:	ldw x,(INW,sp)
      002316 CF 00 00         [ 2] 2448 	ldw in.w,x 
      002319 81               [ 4] 2449 	ret 
      00231A                       2450 loop_done:
                                   2451 	; remove loop data from stack  
      00231A 85               [ 2] 2452 	popw x
      00231B                       2453 	_drop VSIZE 
      00231B 5B 0D            [ 2]    1     addw sp,#VSIZE 
      00231D 72 5A 00 1F      [ 1] 2454 	dec loop_depth 
      002321 FC               [ 2] 2455 	jp (x)
                                   2456 
                                   2457 ;----------------------------
                                   2458 ; called by goto/gosub
                                   2459 ; to get target line number 
                                   2460 ; output:
                                   2461 ;    x    line address 
                                   2462 ;---------------------------
      002322                       2463 get_target_line:
      002322 CD 17 99         [ 4] 2464 	call next_token  
      002325 A1 84            [ 1] 2465 	cp a,#TK_INTGR
      002327 27 07            [ 1] 2466 	jreq get_target_line_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002329 A1 03            [ 1] 2467 	cp a,#TK_LABEL 
      00232B 27 26            [ 1] 2468 	jreq look_target_symbol 
      00232D CC 16 35         [ 2] 2469 	jp syntax_error
                                   2470 ; the target is a line number 
                                   2471 ; search it. 
      002330                       2472 get_target_line_addr:
      002330 90 89            [ 2] 2473 	pushw y 
      002332 CD 17 CB         [ 4] 2474 	call get_int24 ; line # 
      002335 4F               [ 1] 2475 	clr a
      002336 90 CE 00 04      [ 2] 2476 	ldw y,basicptr 
      00233A 90 FE            [ 2] 2477 	ldw y,(y)
      00233C 90 89            [ 2] 2478 	pushw y 
      00233E 13 01            [ 2] 2479 	cpw x,(1,sp)
      002340                       2480 	_drop 2  
      002340 5B 02            [ 2]    1     addw sp,#2 
      002342 25 01            [ 1] 2481 	jrult 11$
      002344 4C               [ 1] 2482 	inc a 
      002345                       2483 11$: ; scan program for this line# 	
      002345 CD 0C 14         [ 4] 2484 	call search_lineno  
      002348 5D               [ 2] 2485 	tnzw x ; 0| line# address 
      002349 26 05            [ 1] 2486 	jrne 2$ 
      00234B A6 05            [ 1] 2487 	ld a,#ERR_NO_LINE 
      00234D CC 16 37         [ 2] 2488 	jp tb_error 
      002350 90 85            [ 2] 2489 2$:	popw y  
      002352 81               [ 4] 2490 	ret 
                                   2491 
                                   2492 ; the GOTO|GOSUB target is a symbol.
                                   2493 ; output:
                                   2494 ;    X    line address|0 
      002353                       2495 look_target_symbol:
      002353 90 89            [ 2] 2496 	pushw y 
      002355 89               [ 2] 2497 	pushw x 
      002356 CD 17 B2         [ 4] 2498 	call skip_string 
      002359 72 5F 00 0D      [ 1] 2499 	clr acc16 
      00235D 90 CE 00 1B      [ 2] 2500 	ldw y,txtbgn 
      002361 90 E6 03         [ 1] 2501 1$:	ld a,(3,y) ; first TK_ID on line 
      002364 A1 03            [ 1] 2502 	cp a,#TK_LABEL 
      002366 27 15            [ 1] 2503 	jreq 3$ 
      002368 90 E6 02         [ 1] 2504 2$:	ld a,(2,y); line length 
      00236B C7 00 0E         [ 1] 2505 	ld acc8,a 
      00236E 72 B9 00 0D      [ 2] 2506 	addw y,acc16 ;point to next line 
      002372 90 C3 00 1D      [ 2] 2507 	cpw y,txtend 
      002376 25 E9            [ 1] 2508 	jrult 1$
      002378 A6 0A            [ 1] 2509 	ld a,#ERR_BAD_VALUE
      00237A CC 16 37         [ 2] 2510 	jp tb_error 
      00237D                       2511 3$: ; found a TK_LABEL 
                                   2512 	; compare with GOTO|GOSUB target 
      00237D 90 89            [ 2] 2513 	pushw y ; line address 
      00237F 72 A9 00 04      [ 2] 2514 	addw y,#4 ; label string 
      002383 1E 03            [ 2] 2515 	ldw x,(3,sp) ; target string 
      002385 CD 13 60         [ 4] 2516 	call strcmp
      002388 26 04            [ 1] 2517 	jrne 4$
      00238A 90 85            [ 2] 2518 	popw y 
      00238C 20 DA            [ 2] 2519 	jra 2$ 
      00238E                       2520 4$: ; target found 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      00238E 85               [ 2] 2521 	popw x ;  address line target  
      00238F                       2522 	_drop 2 ; target string 
      00238F 5B 02            [ 2]    1     addw sp,#2 
      002391 90 85            [ 2] 2523 	popw y 
      002393 81               [ 4] 2524 	ret
                                   2525 
                                   2526 
                                   2527 ;--------------------------------
                                   2528 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2529 ; selective goto or gosub 
                                   2530 ;--------------------------------
      002394                       2531 cmd_on:
      002394 72 00 00 22 05   [ 2] 2532 	btjt flags,#FRUN,0$ 
      002399 A6 06            [ 1] 2533 	ld a,#ERR_RUN_ONLY
      00239B CC 16 37         [ 2] 2534 	jp tb_error 
      00239E CD 1A A5         [ 4] 2535 0$:	call expression 
      0023A1 A1 84            [ 1] 2536 	cp a,#TK_INTGR
      0023A3 27 03            [ 1] 2537 	jreq 1$
      0023A5 CC 16 35         [ 2] 2538 	jp syntax_error
      0023A8                       2539 1$: _xpop
      0023A8 90 F6            [ 1]    1     ld a,(y)
      0023AA 93               [ 1]    2     ldw x,y 
      0023AB EE 01            [ 2]    3     ldw x,(1,x)
      0023AD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2540 ; the selector is the element indice 
                                   2541 ; in the list of arguments. {1..#elements} 
      0023B1 9F               [ 1] 2542 	ld a,xl ; keep only bits 7..0
      0023B2 27 68            [ 1] 2543 	jreq 9$ ; element # begin at 1. 
      0023B4 88               [ 1] 2544 	push a  ; selector  
      0023B5 CD 17 99         [ 4] 2545 	call next_token
      0023B8 A1 80            [ 1] 2546 	cp a,#TK_CMD 
      0023BA 27 03            [ 1] 2547 	jreq 2$ 
      0023BC CC 16 35         [ 2] 2548 	jp syntax_error 
      0023BF                       2549 2$: _get_code_addr
      0023BF FE               [ 2]    1         ldw x,(x)
      0023C0 72 5C 00 01      [ 1]    2         inc in 
      0023C4 72 5C 00 01      [ 1]    3         inc in 
                                   2550 ;; must be a GOTO or GOSUB 
      0023C8 A3 24 26         [ 2] 2551 	cpw x,#goto 
      0023CB 27 08            [ 1] 2552 	jreq 4$
      0023CD A3 24 40         [ 2] 2553 	cpw x,#gosub 
      0023D0 27 03            [ 1] 2554 	jreq 4$ 
      0023D2 CC 16 35         [ 2] 2555 	jp syntax_error 
      0023D5                       2556 4$: 
      0023D5 84               [ 1] 2557 	pop a 
      0023D6 89               [ 2] 2558 	pushw x ; save routine address 	
      0023D7 88               [ 1] 2559 	push a  ; selector  
      0023D8                       2560 5$: ; skip elements in list until selector==0 
      0023D8 0A 01            [ 1] 2561 	dec (1,sp)
      0023DA 27 26            [ 1] 2562 	jreq 6$ 
                                   2563 ; can be a line# or a label 
      0023DC CD 17 99         [ 4] 2564 	call next_token 
      0023DF A1 84            [ 1] 2565 	cp a,#TK_INTGR 
      0023E1 27 07            [ 1] 2566 	jreq 52$
      0023E3 A1 03            [ 1] 2567 	cp a,#TK_LABEL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0023E5 27 0D            [ 1] 2568 	jreq 54$
      0023E7 CC 16 35         [ 2] 2569 	jp syntax_error 
      0023EA                       2570 52$: ; got a line number 
      0023EA C6 00 01         [ 1] 2571 	ld a,in ; skip over int24 value 
      0023ED AB 03            [ 1] 2572 	add a,#CELL_SIZE ; integer size  
      0023EF C7 00 01         [ 1] 2573 	ld in,a 
      0023F2 20 03            [ 2] 2574 	jra 56$
      0023F4 CD 17 B2         [ 4] 2575 54$: call skip_string ; skip over label 	
      0023F7                       2576 56$: ; if another element comma present 
      0023F7 CD 17 99         [ 4] 2577 	call next_token
      0023FA A1 08            [ 1] 2578 	cp a,#TK_COMMA 
      0023FC 27 DA            [ 1] 2579 	jreq 5$ 
                                   2580 ; arg list exhausted, selector to big 
                                   2581 ; continue execution on next line 
      0023FE                       2582 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0023FE 5B 03            [ 2]    1     addw sp,#3 
      002400 20 1A            [ 2] 2583 	jra 9$
      002402                       2584 6$: ;at selected position  
      002402                       2585 	_drop 1 ; discard selector
      002402 5B 01            [ 2]    1     addw sp,#1 
                                   2586 ; here only the routine address 
                                   2587 ; of GOTO|GOSUB is on stack 
      002404 CD 23 22         [ 4] 2588     call get_target_line
      002407 CF 00 19         [ 2] 2589 	ldw ptr16,x 	
      00240A 55 00 03 00 01   [ 1] 2590 	mov in,count ; move to end of line  
      00240F 85               [ 2] 2591 	popw x ; cmd address, GOTO||GOSUB 
      002410 A3 24 26         [ 2] 2592 	cpw x,#goto 
      002413 26 05            [ 1] 2593 	jrne 7$ 
      002415 CE 00 19         [ 2] 2594 	ldw x,ptr16 
      002418 20 19            [ 2] 2595 	jra jp_to_target
      00241A                       2596 7$: 
      00241A 20 35            [ 2] 2597 	jra gosub_2 ; target in ptr16 
      00241C                       2598 9$: ; expr out of range skip to end of line
                                   2599     ; this will force a fall to next line  
      00241C 55 00 03 00 01   [ 1] 2600 	mov in,count
      002421                       2601 	_drop 2
      002421 5B 02            [ 2]    1     addw sp,#2 
      002423 CC 16 E8         [ 2] 2602 	jp next_line  
                                   2603 
                                   2604 
                                   2605 ;------------------------
                                   2606 ; BASIC: GOTO line# 
                                   2607 ; jump to line# 
                                   2608 ; here cstack is 2 call deep from interpreter 
                                   2609 ;------------------------
      002426                       2610 goto:
      002426 72 00 00 22 05   [ 2] 2611 	btjt flags,#FRUN,goto_1  
      00242B A6 06            [ 1] 2612 	ld a,#ERR_RUN_ONLY
      00242D CC 16 37         [ 2] 2613 	jp tb_error 
      002430                       2614 goto_1:
      002430 CD 23 22         [ 4] 2615 	call get_target_line
      002433                       2616 jp_to_target:
      002433 CF 00 04         [ 2] 2617 	ldw basicptr,x 
      002436 E6 02            [ 1] 2618 	ld a,(2,x)
      002438 C7 00 03         [ 1] 2619 	ld count,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00243B 35 03 00 01      [ 1] 2620 	mov in,#3 
      00243F 81               [ 4] 2621 	ret 
                                   2622 
                                   2623 
                                   2624 ;--------------------
                                   2625 ; BASIC: GOSUB line#
                                   2626 ; basic subroutine call
                                   2627 ; actual line# and basicptr 
                                   2628 ; are saved on cstack
                                   2629 ; here cstack is 2 call deep from interpreter 
                                   2630 ;--------------------
                           000001  2631 	RET_ADDR=1 ; subroutine return address 
                           000003  2632 	RET_BPTR=3 ; basicptr return point 
                           000005  2633 	RET_INW=5  ; in.w return point 
                           000004  2634 	VSIZE=4 
      002440                       2635 gosub:
      002440 72 00 00 22 06   [ 2] 2636 	btjt flags,#FRUN,gosub_1 
      002445 A6 06            [ 1] 2637 	ld a,#ERR_RUN_ONLY
      002447 CC 16 37         [ 2] 2638 	jp tb_error 
      00244A 81               [ 4] 2639 	ret 
      00244B                       2640 gosub_1:
      00244B CD 23 22         [ 4] 2641 	call get_target_line 
      00244E CF 00 19         [ 2] 2642 	ldw ptr16,x
      002451                       2643 gosub_2: 
      002451 85               [ 2] 2644 	popw x 
      002452                       2645 	_vars VSIZE  
      002452 52 04            [ 2]    1     sub sp,#VSIZE 
      002454 89               [ 2] 2646 	pushw x ; RET_ADDR 
                                   2647 ; save BASIC subroutine return point.   
      002455 CE 00 04         [ 2] 2648 	ldw x,basicptr
      002458 1F 03            [ 2] 2649 	ldw (RET_BPTR,sp),x 
      00245A CE 00 00         [ 2] 2650 	ldw x,in.w 
      00245D 1F 05            [ 2] 2651 	ldw (RET_INW,sp),x
      00245F CE 00 19         [ 2] 2652 	ldw x,ptr16  
      002462 20 CF            [ 2] 2653 	jra jp_to_target
                                   2654 
                                   2655 ;------------------------
                                   2656 ; BASIC: RETURN 
                                   2657 ; exit from BASIC subroutine 
                                   2658 ;------------------------
      002464                       2659 return:
      002464 72 00 00 22 05   [ 2] 2660 	btjt flags,#FRUN,0$ 
      002469 A6 06            [ 1] 2661 	ld a,#ERR_RUN_ONLY
      00246B CC 16 37         [ 2] 2662 	jp tb_error 
      00246E                       2663 0$:	
      00246E 1E 03            [ 2] 2664 	ldw x,(RET_BPTR,sp) 
      002470 CF 00 04         [ 2] 2665 	ldw basicptr,x
      002473 E6 02            [ 1] 2666 	ld a,(2,x)
      002475 C7 00 03         [ 1] 2667 	ld count,a  
      002478 1E 05            [ 2] 2668 	ldw x,(RET_INW,sp)
      00247A CF 00 00         [ 2] 2669 	ldw in.w,x 
      00247D 85               [ 2] 2670 	popw x 
      00247E                       2671 	_drop VSIZE 
      00247E 5B 04            [ 2]    1     addw sp,#VSIZE 
      002480 FC               [ 2] 2672 	jp (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



                                   2673 
                                   2674 
                                   2675 ;----------------------------------
                                   2676 ; BASIC: RUN
                                   2677 ; run BASIC program in RAM
                                   2678 ;----------------------------------- 
      002481                       2679 run: 
      002481 72 01 00 22 02   [ 2] 2680 	btjf flags,#FRUN,0$  
      002486 4F               [ 1] 2681 	clr a 
      002487 81               [ 4] 2682 	ret
      002488                       2683 0$: 
      002488 72 09 00 22 12   [ 2] 2684 	btjf flags,#FBREAK,1$
      00248D                       2685 	_drop 2 
      00248D 5B 02            [ 2]    1     addw sp,#2 
      00248F CD 20 06         [ 4] 2686 	call rest_context
      002492                       2687 	_drop CTXT_SIZE 
      002492 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002494 72 19 00 22      [ 1] 2688 	bres flags,#FBREAK 
      002498 72 10 00 22      [ 1] 2689 	bset flags,#FRUN 
      00249C CC 16 E0         [ 2] 2690 	jp interpreter 
      00249F CE 00 1B         [ 2] 2691 1$:	ldw x,txtbgn
      0024A2 C3 00 1D         [ 2] 2692 	cpw x,txtend 
      0024A5 2B 0C            [ 1] 2693 	jrmi run_it 
      0024A7 AE 15 A8         [ 2] 2694 	ldw x,#err_no_prog
      0024AA CD 09 37         [ 4] 2695 	call puts 
      0024AD 55 00 03 00 01   [ 1] 2696 	mov in,count
      0024B2 81               [ 4] 2697 	ret 
      0024B3                       2698 run_it:	 
      0024B3                       2699 	_drop 2 ; drop return address 
      0024B3 5B 02            [ 2]    1     addw sp,#2 
      0024B5                       2700 run_it_02: 
      0024B5 CD 1C 72         [ 4] 2701     call ubound 
      0024B8 CD 13 C5         [ 4] 2702 	call clear_vars
                                   2703 ; initialize DIM variables pointers 
      0024BB CE 00 1D         [ 2] 2704 	ldw x,txtend 
      0024BE CF 00 30         [ 2] 2705 	ldw dvar_bgn,x 
      0024C1 CF 00 32         [ 2] 2706 	ldw dvar_end,x 	 
                                   2707 ; clear data pointer 
      0024C4 5F               [ 1] 2708 	clrw x 
      0024C5 CF 00 06         [ 2] 2709 	ldw data_ptr,x 
      0024C8 72 5F 00 08      [ 1] 2710 	clr data_ofs 
      0024CC 72 5F 00 09      [ 1] 2711 	clr data_len 
                                   2712 ; initialize BASIC pointer 
      0024D0 CE 00 1B         [ 2] 2713 	ldw x,txtbgn 
      0024D3 CF 00 04         [ 2] 2714 	ldw basicptr,x 
      0024D6 E6 02            [ 1] 2715 	ld a,(2,x)
      0024D8 C7 00 03         [ 1] 2716 	ld count,a
      0024DB 35 03 00 01      [ 1] 2717 	mov in,#3	
      0024DF 72 10 00 22      [ 1] 2718 	bset flags,#FRUN 
      0024E3 CC 16 E0         [ 2] 2719 	jp interpreter 
                                   2720 
                                   2721 
                                   2722 ;----------------------
                                   2723 ; BASIC: END
                                   2724 ; end running program
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



                                   2725 ;---------------------- 
      0024E6                       2726 cmd_end: 
                                   2727 ; clean stack 
      0024E6 AE 17 FF         [ 2] 2728 	ldw x,#STACK_EMPTY
      0024E9 94               [ 1] 2729 	ldw sp,x 
      0024EA CC 16 C1         [ 2] 2730 	jp warm_start
                                   2731 
                                   2732 ;---------------------------
                                   2733 ; BASIC: GET var 
                                   2734 ; receive a key in variable 
                                   2735 ; don't wait 
                                   2736 ;---------------------------
      0024ED                       2737 cmd_get:
      0024ED CD 17 99         [ 4] 2738 	call next_token 
      0024F0 A1 85            [ 1] 2739 	cp a,#TK_VAR 
      0024F2 27 03            [ 1] 2740 	jreq 0$
      0024F4 CC 16 35         [ 2] 2741 	jp syntax_error 
      0024F7 CD 17 C1         [ 4] 2742 0$: call get_addr 
      0024FA CF 00 19         [ 2] 2743 	ldw ptr16,x 
      0024FD CD 08 E3         [ 4] 2744 	call qgetc 
      002500 27 03            [ 1] 2745 	jreq 2$
      002502 CD 08 EA         [ 4] 2746 	call getc  
      002505 72 3F 00 19      [ 4] 2747 2$: clr [ptr16]
      002509 72 5C 00 1A      [ 1] 2748 	inc ptr8 
      00250D 72 3F 00 19      [ 4] 2749 	clr [ptr16]
      002511 72 5C 00 1A      [ 1] 2750 	inc ptr8 
      002515 72 C7 00 19      [ 4] 2751 	ld [ptr16],a 
      002519 81               [ 4] 2752 	ret 
                                   2753 
                                   2754 
                                   2755 ;-----------------
                                   2756 ; 1 Khz beep 
                                   2757 ;-----------------
      00251A                       2758 beep_1khz:: 
      00251A 90 89            [ 2] 2759 	pushw y 
      00251C AE 00 64         [ 2] 2760 	ldw x,#100
      00251F 90 AE 03 E8      [ 2] 2761 	ldw y,#1000
      002523 20 22            [ 2] 2762 	jra beep
                                   2763 
                                   2764 ;-----------------------
                                   2765 ; BASIC: TONE expr1,expr2
                                   2766 ; used TIMER2 channel 1
                                   2767 ; to produce a tone 
                                   2768 ; arguments:
                                   2769 ;    expr1   frequency 
                                   2770 ;    expr2   duration msec.
                                   2771 ;---------------------------
      002525                       2772 tone:
      002525 90 89            [ 2] 2773 	pushw y 
      002527 CD 19 61         [ 4] 2774 	call arg_list 
      00252A A1 02            [ 1] 2775 	cp a,#2 
      00252C 27 03            [ 1] 2776 	jreq 1$
      00252E CC 16 35         [ 2] 2777 	jp syntax_error 
      002531                       2778 1$: 
      002531                       2779 	_xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002531 90 F6            [ 1]    1     ld a,(y)
      002533 93               [ 1]    2     ldw x,y 
      002534 EE 01            [ 2]    3     ldw x,(1,x)
      002536 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00253A 89               [ 2] 2780 	pushw x ; duration 
      00253B                       2781 	_xpop ; frequency
      00253B 90 F6            [ 1]    1     ld a,(y)
      00253D 93               [ 1]    2     ldw x,y 
      00253E EE 01            [ 2]    3     ldw x,(1,x)
      002540 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002544 90 93            [ 1] 2782 	ldw y,x ; frequency 
      002546 85               [ 2] 2783 	popw x  ; duration 
      002547                       2784 beep:  
      002547 89               [ 2] 2785 	pushw x 
      002548 AE F4 24         [ 2] 2786 	ldw x,#TIM2_CLK_FREQ
      00254B 65               [ 2] 2787 	divw x,y ; cntr=Fclk/freq 
                                   2788 ; round to nearest integer 
      00254C 90 A3 7A 12      [ 2] 2789 	cpw y,#TIM2_CLK_FREQ/2
      002550 2B 01            [ 1] 2790 	jrmi 2$
      002552 5C               [ 1] 2791 	incw x 
      002553                       2792 2$:	 
      002553 9E               [ 1] 2793 	ld a,xh 
      002554 C7 53 0D         [ 1] 2794 	ld TIM2_ARRH,a 
      002557 9F               [ 1] 2795 	ld a,xl 
      002558 C7 53 0E         [ 1] 2796 	ld TIM2_ARRL,a 
                                   2797 ; 50% duty cycle 
      00255B 8C               [ 1] 2798 	ccf 
      00255C 56               [ 2] 2799 	rrcw x 
      00255D 9E               [ 1] 2800 	ld a,xh 
      00255E C7 53 0F         [ 1] 2801 	ld TIM2_CCR1H,a 
      002561 9F               [ 1] 2802 	ld a,xl
      002562 C7 53 10         [ 1] 2803 	ld TIM2_CCR1L,a
      002565 72 10 53 08      [ 1] 2804 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002569 72 10 53 00      [ 1] 2805 	bset TIM2_CR1,#TIM2_CR1_CEN
      00256D 72 10 53 04      [ 1] 2806 	bset TIM2_EGR,#TIM2_EGR_UG
      002571 85               [ 2] 2807 	popw x 
      002572 CD 2A 2E         [ 4] 2808 	call pause02
      002575 72 11 53 08      [ 1] 2809 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002579 72 11 53 00      [ 1] 2810 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00257D 90 85            [ 2] 2811 	popw y 
      00257F 81               [ 4] 2812 	ret 
                                   2813 
                                   2814 ;-------------------------------
                                   2815 ; BASIC: ADCON 0|1 [,divisor]  
                                   2816 ; disable/enanble ADC 
                                   2817 ;-------------------------------
                           000003  2818 	ONOFF=3 
                           000001  2819 	DIVSOR=1
                           000004  2820 	VSIZE=4 
      002580                       2821 power_adc:
      002580 CD 19 61         [ 4] 2822 	call arg_list 
      002583 A1 02            [ 1] 2823 	cp a,#2	
      002585 27 12            [ 1] 2824 	jreq 1$
      002587 A1 01            [ 1] 2825 	cp a,#1 
      002589 27 03            [ 1] 2826 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00258B CC 16 35         [ 2] 2827 	jp syntax_error 
      00258E 4F               [ 1] 2828 0$:	clr a 
      00258F 5F               [ 1] 2829 	clrw x
      002590                       2830 	_xpush   ; divisor  
      002590 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002594 90 F7            [ 1]    2     ld (y),a 
      002596 90 EF 01         [ 2]    3     ldw (1,y),x 
      002599                       2831 1$: _at_next 
      002599 90 E6 03         [ 1]    1     ld a,(3,y)
      00259C 93               [ 1]    2     ldw x,y 
      00259D EE 04            [ 2]    3     ldw x,(4,x)
      00259F 5D               [ 2] 2832 	tnzw x 
      0025A0 27 25            [ 1] 2833 	jreq 2$ 
      0025A2                       2834 	_xpop
      0025A2 90 F6            [ 1]    1     ld a,(y)
      0025A4 93               [ 1]    2     ldw x,y 
      0025A5 EE 01            [ 2]    3     ldw x,(1,x)
      0025A7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025AB                       2835 	_xdrop  
      0025AB 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0025AF 9F               [ 1] 2836 	ld a,xl
      0025B0 A4 07            [ 1] 2837 	and a,#7
      0025B2 4E               [ 1] 2838 	swap a 
      0025B3 C7 54 01         [ 1] 2839 	ld ADC_CR1,a
      0025B6 72 16 50 CA      [ 1] 2840 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0025BA 72 10 54 01      [ 1] 2841 	bset ADC_CR1,#ADC_CR1_ADON 
      0025BE                       2842 	_usec_dly 7 
      0025BE AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0025C1 5A               [ 2]    2     decw x
      0025C2 9D               [ 1]    3     nop 
      0025C3 26 FA            [ 1]    4     jrne .-4
      0025C5 20 08            [ 2] 2843 	jra 3$
      0025C7 72 11 54 01      [ 1] 2844 2$: bres ADC_CR1,#ADC_CR1_ADON
      0025CB 72 17 50 CA      [ 1] 2845 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0025CF                       2846 3$:	
      0025CF 81               [ 4] 2847 	ret
                                   2848 
                                   2849 ;-----------------------------
                                   2850 ; BASIC: ADCREAD (channel)
                                   2851 ; read adc channel {0..5}
                                   2852 ; output:
                                   2853 ;   A 		TK_INTGR 
                                   2854 ;   X 		value 
                                   2855 ;-----------------------------
      0025D0                       2856 analog_read:
      0025D0 CD 19 5C         [ 4] 2857 	call func_args 
      0025D3 A1 01            [ 1] 2858 	cp a,#1 
      0025D5 27 03            [ 1] 2859 	jreq 1$
      0025D7 CC 16 35         [ 2] 2860 	jp syntax_error
      0025DA                       2861 1$: _xpop 
      0025DA 90 F6            [ 1]    1     ld a,(y)
      0025DC 93               [ 1]    2     ldw x,y 
      0025DD EE 01            [ 2]    3     ldw x,(1,x)
      0025DF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025E3 A3 00 05         [ 2] 2862 	cpw x,#5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0025E6 23 05            [ 2] 2863 	jrule 2$
      0025E8 A6 0A            [ 1] 2864 	ld a,#ERR_BAD_VALUE
      0025EA CC 16 37         [ 2] 2865 	jp tb_error 
      0025ED 9F               [ 1] 2866 2$: ld a,xl
      0025EE C7 00 0E         [ 1] 2867 	ld acc8,a 
      0025F1 A6 05            [ 1] 2868 	ld a,#5
      0025F3 C0 00 0E         [ 1] 2869 	sub a,acc8 
      0025F6 C7 54 00         [ 1] 2870 	ld ADC_CSR,a
      0025F9 72 16 54 02      [ 1] 2871 	bset ADC_CR2,#ADC_CR2_ALIGN
      0025FD 72 10 54 01      [ 1] 2872 	bset ADC_CR1,#ADC_CR1_ADON
      002601 72 0F 54 00 FB   [ 2] 2873 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002606 CE 54 04         [ 2] 2874 	ldw x,ADC_DRH
      002609 A6 84            [ 1] 2875 	ld a,#TK_INTGR
      00260B 81               [ 4] 2876 	ret 
                                   2877 
                                   2878 ;-----------------------
                                   2879 ; BASIC: DREAD(pin)
                                   2880 ; Arduino pins 
                                   2881 ; read state of a digital pin 
                                   2882 ; pin# {0..15}
                                   2883 ; output:
                                   2884 ;    A 		TK_INTGR
                                   2885 ;    X      0|1 
                                   2886 ;-------------------------
                           000001  2887 	PINNO=1
                           000001  2888 	VSIZE=1
      00260C                       2889 digital_read:
      00260C                       2890 	_vars VSIZE 
      00260C 52 01            [ 2]    1     sub sp,#VSIZE 
      00260E CD 19 5C         [ 4] 2891 	call func_args
      002611 A1 01            [ 1] 2892 	cp a,#1
      002613 27 03            [ 1] 2893 	jreq 1$
      002615 CC 16 35         [ 2] 2894 	jp syntax_error
      002618                       2895 1$: _xpop 
      002618 90 F6            [ 1]    1     ld a,(y)
      00261A 93               [ 1]    2     ldw x,y 
      00261B EE 01            [ 2]    3     ldw x,(1,x)
      00261D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002621 A3 00 0F         [ 2] 2896 	cpw x,#15 
      002624 23 05            [ 2] 2897 	jrule 2$
      002626 A6 0A            [ 1] 2898 	ld a,#ERR_BAD_VALUE
      002628 CC 16 37         [ 2] 2899 	jp tb_error 
      00262B CD 2B 71         [ 4] 2900 2$:	call select_pin 
      00262E 6B 01            [ 1] 2901 	ld (PINNO,sp),a
      002630 E6 01            [ 1] 2902 	ld a,(GPIO_IDR,x)
      002632 0D 01            [ 1] 2903 	tnz (PINNO,sp)
      002634 27 05            [ 1] 2904 	jreq 8$
      002636 44               [ 1] 2905 3$: srl a 
      002637 0A 01            [ 1] 2906 	dec (PINNO,sp)
      002639 26 FB            [ 1] 2907 	jrne 3$ 
      00263B A4 01            [ 1] 2908 8$: and a,#1 
      00263D 5F               [ 1] 2909 	clrw x 
      00263E 97               [ 1] 2910 	ld xl,a 
      00263F 4F               [ 1] 2911 	clr a 
      002640                       2912 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002640 5B 01            [ 2]    1     addw sp,#VSIZE 
      002642 81               [ 4] 2913 	ret
                                   2914 
                                   2915 
                                   2916 ;-----------------------
                                   2917 ; BASIC: DWRITE pin,0|1
                                   2918 ; Arduino pins 
                                   2919 ; write to a digital pin 
                                   2920 ; pin# {0..15}
                                   2921 ; output:
                                   2922 ;    A 		TK_INTGR
                                   2923 ;    X      0|1 
                                   2924 ;-------------------------
                           000001  2925 	PINNO=1
                           000002  2926 	PINVAL=2
                           000002  2927 	VSIZE=2
      002643                       2928 digital_write:
      002643                       2929 	_vars VSIZE 
      002643 52 02            [ 2]    1     sub sp,#VSIZE 
      002645 CD 19 61         [ 4] 2930 	call arg_list  
      002648 A1 02            [ 1] 2931 	cp a,#2 
      00264A 27 03            [ 1] 2932 	jreq 1$
      00264C CC 16 35         [ 2] 2933 	jp syntax_error
      00264F                       2934 1$: _xpop 
      00264F 90 F6            [ 1]    1     ld a,(y)
      002651 93               [ 1]    2     ldw x,y 
      002652 EE 01            [ 2]    3     ldw x,(1,x)
      002654 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002658 9F               [ 1] 2935 	ld a,xl 
      002659 6B 02            [ 1] 2936 	ld (PINVAL,sp),a
      00265B                       2937 	_xpop 
      00265B 90 F6            [ 1]    1     ld a,(y)
      00265D 93               [ 1]    2     ldw x,y 
      00265E EE 01            [ 2]    3     ldw x,(1,x)
      002660 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002664 A3 00 0F         [ 2] 2938 	cpw x,#15 
      002667 23 05            [ 2] 2939 	jrule 2$
      002669 A6 0A            [ 1] 2940 	ld a,#ERR_BAD_VALUE
      00266B CC 16 37         [ 2] 2941 	jp tb_error 
      00266E CD 2B 71         [ 4] 2942 2$:	call select_pin 
      002671 6B 01            [ 1] 2943 	ld (PINNO,sp),a 
      002673 A6 01            [ 1] 2944 	ld a,#1
      002675 0D 01            [ 1] 2945 	tnz (PINNO,sp)
      002677 27 05            [ 1] 2946 	jreq 4$
      002679 48               [ 1] 2947 3$: sll a
      00267A 0A 01            [ 1] 2948 	dec (PINNO,sp)
      00267C 26 FB            [ 1] 2949 	jrne 3$
      00267E 0D 02            [ 1] 2950 4$: tnz (PINVAL,sp)
      002680 26 05            [ 1] 2951 	jrne 5$
      002682 43               [ 1] 2952 	cpl a 
      002683 E4 00            [ 1] 2953 	and a,(GPIO_ODR,x)
      002685 20 02            [ 2] 2954 	jra 8$
      002687 EA 00            [ 1] 2955 5$: or a,(GPIO_ODR,x)
      002689 E7 00            [ 1] 2956 8$: ld (GPIO_ODR,x),a 
      00268B                       2957 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      00268B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00268D 81               [ 4] 2958 	ret
                                   2959 
                                   2960 
                                   2961 ;-----------------------
                                   2962 ; BASIC: STOP
                                   2963 ; stop progam execution  
                                   2964 ; without resetting pointers 
                                   2965 ; the program is resumed
                                   2966 ; with RUN 
                                   2967 ;-------------------------
      00268E                       2968 stop:
      00268E 72 00 00 22 02   [ 2] 2969 	btjt flags,#FRUN,2$
      002693 4F               [ 1] 2970 	clr a
      002694 81               [ 4] 2971 	ret 
      002695                       2972 2$:	 
                                   2973 ; create space on cstack to save context 
      002695 AE 26 BC         [ 2] 2974 	ldw x,#break_point 
      002698 CD 09 37         [ 4] 2975 	call puts 
      00269B                       2976 	_drop 2 ;drop return address 
      00269B 5B 02            [ 2]    1     addw sp,#2 
      00269D                       2977 	_vars CTXT_SIZE ; context size 
      00269D 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00269F CD 1F F6         [ 4] 2978 	call save_context 
      0026A2 AE 16 90         [ 2] 2979 	ldw x,#tib 
      0026A5 CF 00 04         [ 2] 2980 	ldw basicptr,x
      0026A8 7F               [ 1] 2981 	clr (x)
      0026A9 72 5F 00 03      [ 1] 2982 	clr count  
      0026AD 5F               [ 1] 2983 	clrw x 
      0026AE CF 00 00         [ 2] 2984 	ldw in.w,x
      0026B1 72 11 00 22      [ 1] 2985 	bres flags,#FRUN 
      0026B5 72 18 00 22      [ 1] 2986 	bset flags,#FBREAK
      0026B9 CC 16 E0         [ 2] 2987 	jp interpreter 
      0026BC 0A 62 72 65 61 6B 20  2988 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2989 
                                   2990 ;-----------------------
                                   2991 ; BASIC: NEW
                                   2992 ; from command line only 
                                   2993 ; free program memory
                                   2994 ; and clear variables 
                                   2995 ;------------------------
      0026DA                       2996 new: 
      0026DA 72 01 00 22 01   [ 2] 2997 	btjf flags,#FRUN,0$ 
      0026DF 81               [ 4] 2998 	ret 
      0026E0                       2999 0$:	
      0026E0 CD 14 6D         [ 4] 3000 	call clear_basic 
      0026E3 81               [ 4] 3001 	ret 
                                   3002 
                                   3003 ;-----------------------------------
                                   3004 ; BASIC: ERASE \E | \F [address]
                                   3005 ; erase all block in range from 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   3006 ;  'app_space' to FLASH end (0x27fff)
                                   3007 ;  or all EEPROM 
                                   3008 ; that contains a non zero byte. 
                                   3009 ; [address] is optional, if given 
                                   3010 ; erase at block containing this address  
                                   3011 ;-----------------------------------
                           000001  3012 	LIMIT=1 
                           000003  3013 	VSIZE = 3 
      0026E4                       3014 erase:
      0026E4 72 01 00 22 05   [ 2] 3015 	btjf flags,#FRUN,eras0
      0026E9 A6 07            [ 1] 3016 	ld a,#ERR_CMD_ONLY
      0026EB CC 16 37         [ 2] 3017 	jp tb_error 
      0026EE                       3018 eras0:	
      0026EE 72 5F 00 18      [ 1] 3019 	clr farptr 
      0026F2                       3020 	_vars VSIZE 
      0026F2 52 03            [ 2]    1     sub sp,#VSIZE 
      0026F4 CD 17 99         [ 4] 3021 	call next_token 
      0026F7 A1 04            [ 1] 3022 	cp a,#TK_CHAR 
      0026F9 27 03            [ 1] 3023 	jreq 0$ 
      0026FB CC 16 35         [ 2] 3024 	jp syntax_error
      0026FE CD 17 DB         [ 4] 3025 0$: call get_char 
      002701 A4 DF            [ 1] 3026 	and a,#0XDF 
      002703 A1 45            [ 1] 3027 	cp a,#'E
      002705 26 0C            [ 1] 3028 	jrne 1$
      002707 AE 40 00         [ 2] 3029 	ldw x,#EEPROM_BASE 
      00270A CF 00 19         [ 2] 3030 	ldw farptr+1,x 
      00270D AE 47 FF         [ 2] 3031 	ldw x,#EEPROM_END
      002710 4F               [ 1] 3032 	clr a 
      002711 20 15            [ 2] 3033 	jra 3$ 
      002713 A1 46            [ 1] 3034 1$: cp a,#'F 
      002715 27 06            [ 1] 3035 	jreq 2$
      002717 AE 15 59         [ 2] 3036 	ldw x,#err_bad_value
      00271A CC 16 37         [ 2] 3037 	jp tb_error
      00271D                       3038 2$:
      00271D AE 36 00         [ 2] 3039 	ldw x,#app_space  
      002720 CF 00 19         [ 2] 3040 	ldw farptr+1,x 
      002723 A6 02            [ 1] 3041 	ld a,#(FLASH_END>>16)&0XFF 
      002725 AE 7F FF         [ 2] 3042 	ldw x,#FLASH_END&0xffff
      002728                       3043 3$:
      002728 6B 01            [ 1] 3044 	ld (LIMIT,sp),a 
      00272A 1F 02            [ 2] 3045 	ldw (LIMIT+1,sp),x 
                                   3046  ; operation done from RAM
                                   3047  ; copy code to RAM in tib   
      00272C CD 06 D4         [ 4] 3048 	call move_erase_to_ram
                                   3049 ;
                                   3050 ; check address option 	
      00272F CD 17 99         [ 4] 3051 	call next_token 
      002732 A1 00            [ 1] 3052 	cp a,#TK_NONE 
      002734 27 44            [ 1] 3053 	jreq 4$ 
      002736                       3054 	_unget_token 
      002736 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00273B CD 1A A5         [ 4] 3055 	call expression 
      00273E A1 84            [ 1] 3056 	cp a,#TK_INTGR
      002740 27 03            [ 1] 3057 	jreq 32$
      002742 CC 16 35         [ 2] 3058 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002745                       3059 32$: 
      002745                       3060 	_xpop
      002745 90 F6            [ 1]    1     ld a,(y)
      002747 93               [ 1]    2     ldw x,y 
      002748 EE 01            [ 2]    3     ldw x,(1,x)
      00274A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00274E 4D               [ 1] 3061 	tnz a 
      00274F 26 14            [ 1] 3062 	jrne 38$
      002751 A3 36 00         [ 2] 3063 	cpw x,#app_space
      002754 24 0F            [ 1] 3064 	jruge 38$
      002756 A3 40 00         [ 2] 3065 	cpw x,#EEPROM_BASE 
      002759 25 05            [ 1] 3066 	jrult 37$
      00275B A3 47 FF         [ 2] 3067 	cpw x,#EEPROM_END 
      00275E 25 10            [ 1] 3068 	jrult 39$
      002760                       3069 37$:
      002760 A6 0A            [ 1] 3070 	ld a,#ERR_BAD_VALUE
      002762 CC 16 35         [ 2] 3071 	jp syntax_error 
      002765                       3072 38$:	 
      002765 A1 02            [ 1] 3073 	cp a,#2
      002767 22 F7            [ 1] 3074 	jrugt 37$
      002769 25 05            [ 1] 3075 	jrult 39$ 
      00276B C3 7F FF         [ 2] 3076 	cpw x,0x7fff 
      00276E 22 F0            [ 1] 3077 	jrugt 37$ 
      002770                       3078 39$:
      002770 C7 00 18         [ 1] 3079 	ld farptr,a 
      002773 9F               [ 1] 3080 	ld a,xl 
      002774 A4 80            [ 1] 3081 	and a,#0x80
      002776 97               [ 1] 3082 	ld xl,a
      002777 CF 00 19         [ 2] 3083 	ldw farptr+1,x
      00277A                       3084 4$:	 
      00277A CD 08 5A         [ 4] 3085     call scan_block 
      00277D 27 08            [ 1] 3086 	jreq 5$  ; block already erased 
      00277F A6 45            [ 1] 3087     ld a,#'E 
      002781 CD 08 DA         [ 4] 3088     call putc 
      002784 CD 07 52         [ 4] 3089 	call block_erase   
                                   3090 ; this block is clean, next  
      002787 AE 00 80         [ 2] 3091 5$:	ldw x,#BLOCK_SIZE
      00278A CD 08 4C         [ 4] 3092 	call incr_farptr
                                   3093 ; check limit, 24 bit substraction  	
      00278D 7B 01            [ 1] 3094 	ld a,(LIMIT,sp)
      00278F 1E 02            [ 2] 3095 	ldw x,(LIMIT+1,sp)
      002791 72 B0 00 19      [ 2] 3096 	subw x,farptr+1
      002795 C2 00 18         [ 1] 3097 	sbc a,farptr 
      002798 22 E0            [ 1] 3098 	jrugt 4$ 
      00279A CD 14 6D         [ 4] 3099 9$: call clear_basic
      00279D 1E 02            [ 2] 3100 	ldw x,(LIMIT+1,sp)
      00279F A3 47 FF         [ 2] 3101 	cpw x,#EEPROM_END
      0027A2 26 03            [ 1] 3102 	jrne 10$
      0027A4 CD 1C D1         [ 4] 3103 	call func_eefree 
      0027A7                       3104 10$:
      0027A7                       3105 	_drop VSIZE 
      0027A7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0027A9 81               [ 4] 3106 	ret 
                                   3107 	
                                   3108 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



                                   3109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3110 ;  check for application signature 
                                   3111 ; output:
                                   3112 ;   Carry    0 app present 
                                   3113 ;            1 no app installed  
                                   3114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027AA                       3115 qsign: 
      0027AA CE 36 00         [ 2] 3116 	ldw x,app_sign 
      0027AD C3 28 6A         [ 2] 3117 	cpw x,SIGNATURE ; "TB" 
      0027B0 81               [ 4] 3118 	ret 
                                   3119 
                                   3120 ;--------------------------------------
                                   3121 ;  fill write buffer 
                                   3122 ;  input:
                                   3123 ;    y  point to output buffer 
                                   3124 ;    x  point to source 
                                   3125 ;    a  bytes to write in buffer 
                                   3126 ;  output:
                                   3127 ;    y   += A 
                                   3128 ;    X   += A 
                                   3129 ;    A   0 
                                   3130 ;---------------------------------------
      0027B1                       3131 fill_write_buffer:
      0027B1 88               [ 1] 3132 	push a 
      0027B2 4D               [ 1] 3133 	tnz a 
      0027B3 27 0A            [ 1] 3134 	jreq 9$ 
      0027B5 F6               [ 1] 3135 1$: ld a,(x)
      0027B6 5C               [ 1] 3136 	incw x 
      0027B7 90 F7            [ 1] 3137 	ld (y),a 
      0027B9 90 5C            [ 1] 3138 	incw y 
      0027BB 0A 01            [ 1] 3139 	dec (1,sp) 
      0027BD 26 F6            [ 1] 3140 	jrne 1$ 
      0027BF 84               [ 1] 3141 9$:	pop a 
      0027C0 81               [ 4] 3142     ret 	
                                   3143 
                                   3144 ;--------------------------------------
                                   3145 ;  fill pad buffer with zero 
                                   3146 ;  input:
                                   3147 ;	none 
                                   3148 ;  output:
                                   3149 ;    y     buffer address  
                                   3150 ;--------------------------------------
      0027C1                       3151 clear_block_buffer:
      0027C1 88               [ 1] 3152 	push a 
      0027C2 90 AE 16 E0      [ 2] 3153 	ldw y,#block_buffer 
      0027C6 90 89            [ 2] 3154 	pushw y
      0027C8 A6 80            [ 1] 3155 	ld a,#BLOCK_SIZE   
      0027CA 90 7F            [ 1] 3156 1$:	clr (y)
      0027CC 90 5C            [ 1] 3157 	incw y
      0027CE 4A               [ 1] 3158 	dec a  
      0027CF 26 F9            [ 1] 3159 	jrne 1$ 	
      0027D1 90 85            [ 2] 3160 9$: popw y 
      0027D3 84               [ 1] 3161 	pop a 			
      0027D4 81               [ 4] 3162 	ret 
                                   3163 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



                                   3164 
                                   3165 ;---------------------------------------
                                   3166 ; BASIC: SAVE
                                   3167 ; write application from RAM to FLASH
                                   3168 ; at UFLASH address
                                   3169 ;--------------------------------------
                           000001  3170 	XTEMP=1
                           000003  3171 	COUNT=3  ; last count bytes written 
                           000004  3172 	CNT_LO=4 ; count low byte 
                           000005  3173 	TOWRITE=5 ; how bytes left to write  
                           000006  3174 	VSIZE=6 
      0027D5                       3175 save_app:
      0027D5 89               [ 2] 3176 	pushw x 
      0027D6 90 89            [ 2] 3177 	pushw y 
      0027D8                       3178 	_vars VSIZE
      0027D8 52 06            [ 2]    1     sub sp,#VSIZE 
      0027DA CD 27 AA         [ 4] 3179 	call qsign 
      0027DD 26 09            [ 1] 3180 	jrne 1$
      0027DF AE 28 6C         [ 2] 3181 	ldw x,#CANT_DO 
      0027E2 CD 09 37         [ 4] 3182 	call puts 
      0027E5 CC 28 64         [ 2] 3183 	jp 9$
      0027E8                       3184 1$: 
      0027E8 CE 00 1B         [ 2] 3185 	ldw x,txtbgn
      0027EB C3 00 1D         [ 2] 3186 	cpw x,txtend 
      0027EE 25 09            [ 1] 3187 	jrult 2$ 
      0027F0 AE 28 AE         [ 2] 3188 	ldw x,#NO_APP
      0027F3 CD 09 37         [ 4] 3189 	call puts 
      0027F6 CC 28 64         [ 2] 3190 	jp 9$
      0027F9                       3191 2$: 
                                   3192 ; block programming flash
                                   3193 ; must be done from RAM
                                   3194 ; moved in tib  
      0027F9 CD 07 14         [ 4] 3195 	call move_prg_to_ram
                                   3196 ; initialize farptr 
                                   3197 ; to app_sign address 
      0027FC 72 5F 00 18      [ 1] 3198 	clr farptr 
      002800 AE 36 00         [ 2] 3199 	ldw x,#app_sign 
      002803 CF 00 19         [ 2] 3200 	ldw farptr+1,x
                                   3201 ; initialize local variables 
      002806 CD 1D EB         [ 4] 3202 	call prog_size
      002809 1F 05            [ 2] 3203 	ldw (TOWRITE,sp),x
      00280B 0F 03            [ 1] 3204 	clr (COUNT,sp)
                                   3205 ; first bock 
                                   3206 ; containt signature 2 bytes 
                                   3207 ; and size 	2 bytes 
                                   3208 ; use Y as pointer to block_buffer
      00280D CD 27 C1         [ 4] 3209 	call clear_block_buffer ; -- y=*block_buffer	
                                   3210 ; write signature
      002810 CE 28 6A         [ 2] 3211 	ldw x,SIGNATURE ; "BC" 
      002813 90 FF            [ 2] 3212 	ldw (y),x 
      002815 72 A9 00 02      [ 2] 3213 	addw y,#2
      002819 1E 05            [ 2] 3214 	ldw x,(TOWRITE,sp)
      00281B 90 FF            [ 2] 3215 	ldw (y),x
      00281D 72 A9 00 02      [ 2] 3216 	addw y,#2   
      002821 A6 7C            [ 1] 3217 	ld a,#(BLOCK_SIZE-4)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      002823 6B 04            [ 1] 3218 	ld (CNT_LO,sp),a 
      002825 A3 00 7C         [ 2] 3219 	cpw x,#(BLOCK_SIZE-4) 
      002828 22 01            [ 1] 3220 	jrugt 3$
      00282A 9F               [ 1] 3221 	ld a,xl 
      00282B 6B 04            [ 1] 3222 3$:	ld (CNT_LO,sp),a   
      00282D CE 00 1B         [ 2] 3223 	ldw x,txtbgn 
      002830 1F 01            [ 2] 3224 	ldw (XTEMP,sp),x 
      002832                       3225 32$: 
      002832 1E 01            [ 2] 3226 	ldw x,(XTEMP,sp)
      002834 7B 04            [ 1] 3227 	ld a,(CNT_LO,sp)
      002836 CD 27 B1         [ 4] 3228 	call fill_write_buffer 
      002839 1F 01            [ 2] 3229 	ldw (XTEMP,sp),x 
      00283B AE 16 E0         [ 2] 3230 	ldw x,#block_buffer
      00283E CD 07 2E         [ 4] 3231 	call write_buffer
      002841 AE 00 80         [ 2] 3232 	ldw x,#BLOCK_SIZE 
      002844 CD 08 4C         [ 4] 3233 	call incr_farptr  
                                   3234 ; following blocks 
      002847 1E 01            [ 2] 3235 	ldw x,(XTEMP,sp)
      002849 C3 00 1D         [ 2] 3236 	cpw x,txtend 
      00284C 24 16            [ 1] 3237 	jruge 9$ 
      00284E 1E 05            [ 2] 3238 	ldw x,(TOWRITE,sp)
      002850 72 F0 03         [ 2] 3239 	subw x,(COUNT,sp)
      002853 1F 05            [ 2] 3240 	ldw (TOWRITE,sp),x 
      002855 A6 80            [ 1] 3241 	ld a,#BLOCK_SIZE 
      002857 A3 00 80         [ 2] 3242 	cpw x,#BLOCK_SIZE 
      00285A 24 01            [ 1] 3243 	jruge 4$ 
      00285C 9F               [ 1] 3244 	ld a,xl 
      00285D 6B 04            [ 1] 3245 4$:	ld (CNT_LO,sp),a 
      00285F CD 27 C1         [ 4] 3246 	call clear_block_buffer 
      002862 20 CE            [ 2] 3247 	jra 32$ 
      002864                       3248 9$:	_drop VSIZE 
      002864 5B 06            [ 2]    1     addw sp,#VSIZE 
      002866 90 85            [ 2] 3249     popw y 
      002868 85               [ 2] 3250 	popw x 
      002869 81               [ 4] 3251 	ret 
                                   3252 
                                   3253 
      00286A 54 42                 3254 SIGNATURE: .ascii "TB"
      00286C 43 61 6E 27 74 20 66  3255 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      0028AE 4E 6F 20 61 70 70 6C  3256 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3257 
                                   3258 ;---------------------
                                   3259 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3260 ; write 1 or more byte to FLASH or EEPROM
                                   3261 ; starting at address  
                                   3262 ; input:
                                   3263 ;   expr1  	is address 
                                   3264 ;   expr2,...,exprn   are bytes to write
                                   3265 ; output:
                                   3266 ;   none 
                                   3267 ;---------------------
      0028C4                       3268 write:
      0028C4 CD 1A A5         [ 4] 3269 	call expression
      0028C7 A1 84            [ 1] 3270 	cp a,#TK_INTGR 
      0028C9 27 03            [ 1] 3271 	jreq 0$
      0028CB CC 16 35         [ 2] 3272 	jp syntax_error
      0028CE                       3273 0$: _xpop 
      0028CE 90 F6            [ 1]    1     ld a,(y)
      0028D0 93               [ 1]    2     ldw x,y 
      0028D1 EE 01            [ 2]    3     ldw x,(1,x)
      0028D3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028D7 C7 00 18         [ 1] 3274 	ld farptr,a 
      0028DA CF 00 19         [ 2] 3275 	ldw ptr16,x 
      0028DD                       3276 1$:	
      0028DD CD 17 99         [ 4] 3277 	call next_token 
      0028E0 A1 08            [ 1] 3278 	cp a,#TK_COMMA 
      0028E2 27 02            [ 1] 3279 	jreq 2$ 
      0028E4 20 46            [ 2] 3280 	jra 9$ ; no more data 
      0028E6 CD 17 99         [ 4] 3281 2$:	call next_token 
      0028E9 A1 04            [ 1] 3282 	cp a,#TK_CHAR 
      0028EB 27 23            [ 1] 3283 	jreq 4$ 
      0028ED A1 02            [ 1] 3284 	cp a,#TK_QSTR
      0028EF 27 2A            [ 1] 3285 	jreq 6$
      0028F1                       3286 	_unget_token 
      0028F1 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0028F6 CD 1A A5         [ 4] 3287 	call expression
      0028F9 A1 84            [ 1] 3288 	cp a,#TK_INTGR
      0028FB 27 03            [ 1] 3289 	jreq 3$
      0028FD CC 16 35         [ 2] 3290 	jp syntax_error
      002900                       3291 3$:	_xpop 
      002900 90 F6            [ 1]    1     ld a,(y)
      002902 93               [ 1]    2     ldw x,y 
      002903 EE 01            [ 2]    3     ldw x,(1,x)
      002905 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002909 9F               [ 1] 3292 	ld a,xl 
      00290A 5F               [ 1] 3293 	clrw x 
      00290B CD 07 78         [ 4] 3294 	call write_byte
      00290E 20 CD            [ 2] 3295 	jra 1$ 
      002910                       3296 4$: ; write character 
      002910 F6               [ 1] 3297 	ld a,(x)
      002911 72 5C 00 01      [ 1] 3298 	inc in 
      002915 5F               [ 1] 3299 	clrw x 
      002916 CD 07 78         [ 4] 3300 	call write_byte 
      002919 20 C2            [ 2] 3301 	jra 1$ 
      00291B                       3302 6$: ; write string 
      00291B 89               [ 2] 3303 	pushw x 
      00291C F6               [ 1] 3304 	ld a,(x)
      00291D 72 5C 00 01      [ 1] 3305 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      002921 5F               [ 1] 3306 	clrw x 
      002922 CD 07 78         [ 4] 3307 	call write_byte 
      002925 85               [ 2] 3308 	popw x 
      002926 F6               [ 1] 3309 	ld a,(x)
      002927 27 B4            [ 1] 3310 	jreq 1$
      002929 5C               [ 1] 3311 	incw x 
      00292A 20 EF            [ 2] 3312 	jra 6$ 	
      00292C                       3313 9$:
      00292C 81               [ 4] 3314 	ret 
                                   3315 
                                   3316 
                                   3317 ;---------------------
                                   3318 ;BASIC: CHAR(expr)
                                   3319 ; évaluate expression 
                                   3320 ; and take the 7 least 
                                   3321 ; bits as ASCII character
                                   3322 ; output: 
                                   3323 ; 	A char 
                                   3324 ;---------------------
      00292D                       3325 func_char:
      00292D CD 19 5C         [ 4] 3326 	call func_args 
      002930 A1 01            [ 1] 3327 	cp a,#1
      002932 27 03            [ 1] 3328 	jreq 1$
      002934 CC 16 35         [ 2] 3329 	jp syntax_error
      002937                       3330 1$:	_xpop
      002937 90 F6            [ 1]    1     ld a,(y)
      002939 93               [ 1]    2     ldw x,y 
      00293A EE 01            [ 2]    3     ldw x,(1,x)
      00293C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002940 9F               [ 1] 3331 	ld a,xl
      002941 A4 7F            [ 1] 3332 	and a,#0x7f 
      002943 81               [ 4] 3333 	ret
                                   3334 
                                   3335 ;---------------------
                                   3336 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3337 ; extract first character 
                                   3338 ; of string argument 
                                   3339 ; output:
                                   3340 ;    A:X    int24 
                                   3341 ;---------------------
      002944                       3342 ascii:
      002944 A6 06            [ 1] 3343 	ld a,#TK_LPAREN
      002946 CD 19 4F         [ 4] 3344 	call expect 
      002949 CD 17 99         [ 4] 3345 	call next_token 
      00294C A1 02            [ 1] 3346 	cp a,#TK_QSTR 
      00294E 27 0E            [ 1] 3347 	jreq 1$
      002950 A1 04            [ 1] 3348 	cp a,#TK_CHAR 
      002952 27 12            [ 1] 3349 	jreq 2$ 
      002954 A1 82            [ 1] 3350 	cp a,#TK_CFUNC 
      002956 27 03            [ 1] 3351 	jreq 0$
      002958 CC 16 35         [ 2] 3352 	jp syntax_error
      00295B                       3353 0$: ; cfunc 
      00295B FD               [ 4] 3354 	call (x)
      00295C 20 0B            [ 2] 3355 	jra 3$
      00295E                       3356 1$: ; quoted string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      00295E F6               [ 1] 3357 	ld a,(x)
      00295F 88               [ 1] 3358 	push a  
      002960 CD 17 B2         [ 4] 3359 	call skip_string
      002963 84               [ 1] 3360 	pop a  	
      002964 20 03            [ 2] 3361 	jra 3$ 
      002966                       3362 2$: ; character 
      002966 CD 17 DB         [ 4] 3363 	call get_char 
      002969 5F               [ 1] 3364 3$:	clrw x 
      00296A 02               [ 1] 3365 	rlwa x   
      00296B                       3366 4$:	_xpush  
      00296B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00296F 90 F7            [ 1]    2     ld (y),a 
      002971 90 EF 01         [ 2]    3     ldw (1,y),x 
      002974 A6 07            [ 1] 3367 	ld a,#TK_RPAREN 
      002976 CD 19 4F         [ 4] 3368 	call expect
      002979                       3369 9$:	
      002979                       3370 	_xpop  
      002979 90 F6            [ 1]    1     ld a,(y)
      00297B 93               [ 1]    2     ldw x,y 
      00297C EE 01            [ 2]    3     ldw x,(1,x)
      00297E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002982 81               [ 4] 3371 	ret 
                                   3372 
                                   3373 ;---------------------
                                   3374 ;BASIC: KEY
                                   3375 ; wait for a character 
                                   3376 ; received from STDIN 
                                   3377 ; input:
                                   3378 ;	none 
                                   3379 ; output:
                                   3380 ;	a	 character 
                                   3381 ;---------------------
      002983                       3382 key:
      002983 CD 08 EA         [ 4] 3383 	call getc 
      002986 81               [ 4] 3384 	ret
                                   3385 
                                   3386 ;----------------------
                                   3387 ; BASIC: QKEY
                                   3388 ; Return true if there 
                                   3389 ; is a character in 
                                   3390 ; waiting in STDIN 
                                   3391 ; input:
                                   3392 ;  none 
                                   3393 ; output:
                                   3394 ;   A     0|-1
                                   3395 ;-----------------------
      002987                       3396 qkey:: 
      002987 5F               [ 1] 3397 	clrw x 
      002988 C6 00 2E         [ 1] 3398 	ld a,rx1_head
      00298B C0 00 2F         [ 1] 3399 	sub a,rx1_tail 
      00298E 27 03            [ 1] 3400 	jreq 9$ 
      002990 53               [ 2] 3401 	cplw x
      002991 A6 FF            [ 1] 3402 	ld a,#255    
      002993                       3403 9$: 
      002993 81               [ 4] 3404 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   3405 
                                   3406 ;---------------------
                                   3407 ; BASIC: GPIO(port,reg)
                                   3408 ; return gpio register address 
                                   3409 ; expr {PORTA..PORTI}
                                   3410 ; input:
                                   3411 ;   none 
                                   3412 ; output:
                                   3413 ;   A:X 	gpio register address
                                   3414 ;----------------------------
                                   3415 ;	N=PORT
                                   3416 ;	T=REG 
      002994                       3417 gpio:
      002994 CD 19 5C         [ 4] 3418 	call func_args 
      002997 A1 02            [ 1] 3419 	cp a,#2
      002999 27 03            [ 1] 3420 	jreq 1$
      00299B CC 16 35         [ 2] 3421 	jp syntax_error  
      00299E                       3422 1$:	_at_next 
      00299E 90 E6 03         [ 1]    1     ld a,(3,y)
      0029A1 93               [ 1]    2     ldw x,y 
      0029A2 EE 04            [ 2]    3     ldw x,(4,x)
      0029A4 A3 50 00         [ 2] 3423 	cpw x,#PA_BASE 
      0029A7 2B 16            [ 1] 3424 	jrmi bad_port
      0029A9 A3 50 29         [ 2] 3425 	cpw x,#PI_BASE+1 
      0029AC 2A 11            [ 1] 3426 	jrpl bad_port
      0029AE 89               [ 2] 3427 	pushw x 
      0029AF                       3428 	_xpop
      0029AF 90 F6            [ 1]    1     ld a,(y)
      0029B1 93               [ 1]    2     ldw x,y 
      0029B2 EE 01            [ 2]    3     ldw x,(1,x)
      0029B4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029B8 72 FB 01         [ 2] 3429 	addw x,(1,sp)
      0029BB                       3430 	_drop 2 
      0029BB 5B 02            [ 2]    1     addw sp,#2 
      0029BD 4F               [ 1] 3431 	clr a 
      0029BE 81               [ 4] 3432 	ret
      0029BF                       3433 bad_port:
      0029BF A6 0A            [ 1] 3434 	ld a,#ERR_BAD_VALUE
      0029C1 CC 16 37         [ 2] 3435 	jp tb_error
                                   3436 
                                   3437 
                                   3438 ;-------------------------
                                   3439 ; BASIC: UFLASH 
                                   3440 ; return free flash address
                                   3441 ; align to BLOCK address 
                                   3442 ; input:
                                   3443 ;  none 
                                   3444 ; output:
                                   3445 ;	A		TK_INTGR
                                   3446 ;   xstack	free address 
                                   3447 ;---------------------------
      0029C4                       3448 uflash:
      0029C4 CD 27 AA         [ 4] 3449 	call qsign 
      0029C7 26 13            [ 1] 3450 	jrne 1$
      0029C9 AE 36 00         [ 2] 3451 	ldw x,#app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      0029CC 72 BB 36 02      [ 2] 3452 	addw x,app_size 
      0029D0 1C 00 04         [ 2] 3453 	addw x,#4
                                   3454 ; align on 128 bytes block 
      0029D3 1C 00 80         [ 2] 3455 	addw x,#BLOCK_SIZE 
      0029D6 9F               [ 1] 3456 	ld a,xl 
      0029D7 A4 80            [ 1] 3457 	and a,#0x80 
      0029D9 97               [ 1] 3458 	ld xl,a 
      0029DA 20 03            [ 2] 3459 	jra 2$
      0029DC AE 36 00         [ 2] 3460 1$:	ldw x,#app_space 
      0029DF                       3461 2$:
      0029DF 4F               [ 1] 3462 	clr a 
      0029E0 81               [ 4] 3463 	ret 
                                   3464 
                                   3465 
                                   3466 ;---------------------
                                   3467 ; BASIC: USR(addr,arg)
                                   3468 ; execute a function written 
                                   3469 ; in binary code.
                                   3470 ; input:
                                   3471 ;   addr	routine address 
                                   3472 ;   arg 	is an argument
                                   3473 ;           it can be ignore 
                                   3474 ;           by cally. 
                                   3475 ; output:
                                   3476 ;   xstack 	value returned by cally  
                                   3477 ;---------------------
      0029E1                       3478 usr:
      0029E1 CD 19 5C         [ 4] 3479 	call func_args 
      0029E4 A1 02            [ 1] 3480 	cp a,#2
      0029E6 27 03            [ 1] 3481 	jreq 1$  
      0029E8 CC 16 35         [ 2] 3482 	jp syntax_error 
      0029EB                       3483 1$: 
      0029EB                       3484 	_at_next ; A:X addr 
      0029EB 90 E6 03         [ 1]    1     ld a,(3,y)
      0029EE 93               [ 1]    2     ldw x,y 
      0029EF EE 04            [ 2]    3     ldw x,(4,x)
      0029F1 CF 00 19         [ 2] 3485 	ldw ptr16,X 
      0029F4                       3486 	_xpop  ; arg 
      0029F4 90 F6            [ 1]    1     ld a,(y)
      0029F6 93               [ 1]    2     ldw x,y 
      0029F7 EE 01            [ 2]    3     ldw x,(1,x)
      0029F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029FD                       3487 	_store_top ; overwrite addr 
      0029FD 90 F7            [ 1]    1     ld (y),a 
      0029FF 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A02 72 CD 00 19      [ 6] 3488     call [ptr16]
      002A06 81               [ 4] 3489 	ret 
                                   3490 
                                   3491 
                                   3492 ;------------------------------
                                   3493 ; BASIC: BYE 
                                   3494 ; halt mcu in its lowest power mode 
                                   3495 ; wait for reset or external interrupt
                                   3496 ; do a cold start on wakeup.
                                   3497 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      002A07                       3498 bye:
      002A07 72 0D 52 30 FB   [ 2] 3499 	btjf UART1_SR,#UART_SR_TC,.
      002A0C 8E               [10] 3500 	halt
      002A0D CC 00 B5         [ 2] 3501 	jp cold_start  
                                   3502 
                                   3503 ;----------------------------------
                                   3504 ; BASIC: SLEEP 
                                   3505 ; halt mcu until reset or external
                                   3506 ; interrupt.
                                   3507 ; Resume progam after SLEEP command
                                   3508 ;----------------------------------
      002A10                       3509 sleep:
      002A10 72 0D 52 30 FB   [ 2] 3510 	btjf UART1_SR,#UART_SR_TC,.
      002A15 72 16 00 22      [ 1] 3511 	bset flags,#FSLEEP
      002A19 8E               [10] 3512 	halt 
      002A1A 81               [ 4] 3513 	ret 
                                   3514 
                                   3515 ;-------------------------------
                                   3516 ; BASIC: PAUSE expr 
                                   3517 ; suspend execution for n msec.
                                   3518 ; input:
                                   3519 ;	none
                                   3520 ; output:
                                   3521 ;	none 
                                   3522 ;------------------------------
      002A1B                       3523 pause:
      002A1B CD 1A A5         [ 4] 3524 	call expression
      002A1E A1 84            [ 1] 3525 	cp a,#TK_INTGR
      002A20 27 03            [ 1] 3526 	jreq 1$ 
      002A22 CC 16 35         [ 2] 3527 	jp syntax_error
      002A25                       3528 1$: _xpop 
      002A25 90 F6            [ 1]    1     ld a,(y)
      002A27 93               [ 1]    2     ldw x,y 
      002A28 EE 01            [ 2]    3     ldw x,(1,x)
      002A2A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A2E                       3529 pause02:
      002A2E CF 00 12         [ 2] 3530 	ldw timer,x 
      002A31 CE 00 12         [ 2] 3531 1$: ldw x,timer 
      002A34 5D               [ 2] 3532 	tnzw x 
      002A35 27 03            [ 1] 3533 	jreq 2$
      002A37 8F               [10] 3534 	wfi 
      002A38 26 F7            [ 1] 3535 	jrne 1$
      002A3A                       3536 2$:	
      002A3A 81               [ 4] 3537 	ret 
                                   3538 
                                   3539 ;------------------------------
                                   3540 ; BASIC: AWU expr
                                   3541 ; halt mcu for 'expr' milliseconds
                                   3542 ; use Auto wakeup peripheral
                                   3543 ; all oscillators stopped except LSI
                                   3544 ; range: 1ms - 511ms
                                   3545 ; input:
                                   3546 ;  none
                                   3547 ; output:
                                   3548 ;  none:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3549 ;------------------------------
      002A3B                       3550 awu:
      002A3B CD 1A A5         [ 4] 3551   call expression
      002A3E A1 84            [ 1] 3552   cp a,#TK_INTGR
      002A40 27 03            [ 1] 3553   jreq 1$
      002A42 CC 16 35         [ 2] 3554   jp syntax_error
      002A45                       3555 1$: _xpop 
      002A45 90 F6            [ 1]    1     ld a,(y)
      002A47 93               [ 1]    2     ldw x,y 
      002A48 EE 01            [ 2]    3     ldw x,(1,x)
      002A4A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A4E                       3556 awu02:
      002A4E A3 14 00         [ 2] 3557   cpw x,#5120
      002A51 2B 0C            [ 1] 3558   jrmi 1$ 
      002A53 35 0F 50 F2      [ 1] 3559   mov AWU_TBR,#15 
      002A57 A6 1E            [ 1] 3560   ld a,#30
      002A59 62               [ 2] 3561   div x,a
      002A5A A6 10            [ 1] 3562   ld a,#16
      002A5C 62               [ 2] 3563   div x,a 
      002A5D 20 1E            [ 2] 3564   jra 4$
      002A5F                       3565 1$: 
      002A5F A3 08 00         [ 2] 3566   cpw x,#2048
      002A62 2B 09            [ 1] 3567   jrmi 2$ 
      002A64 35 0E 50 F2      [ 1] 3568   mov AWU_TBR,#14
      002A68 A6 50            [ 1] 3569   ld a,#80
      002A6A 62               [ 2] 3570   div x,a 
      002A6B 20 10            [ 2] 3571   jra 4$   
      002A6D                       3572 2$:
      002A6D 35 07 50 F2      [ 1] 3573   mov AWU_TBR,#7
      002A71                       3574 3$:  
                                   3575 ; while X > 64  divide by 2 and increment AWU_TBR 
      002A71 A3 00 40         [ 2] 3576   cpw x,#64 
      002A74 23 07            [ 2] 3577   jrule 4$ 
      002A76 72 5C 50 F2      [ 1] 3578   inc AWU_TBR 
      002A7A 54               [ 2] 3579   srlw x 
      002A7B 20 F4            [ 2] 3580   jra 3$ 
      002A7D                       3581 4$:
      002A7D 9F               [ 1] 3582   ld a, xl
      002A7E 4A               [ 1] 3583   dec a 
      002A7F 27 01            [ 1] 3584   jreq 5$
      002A81 4A               [ 1] 3585   dec a 	
      002A82                       3586 5$: 
      002A82 A4 3E            [ 1] 3587   and a,#0x3e 
      002A84 C7 50 F1         [ 1] 3588   ld AWU_APR,a 
      002A87 72 18 50 F0      [ 1] 3589   bset AWU_CSR,#AWU_CSR_AWUEN
      002A8B 8E               [10] 3590   halt 
                                   3591 
      002A8C 81               [ 4] 3592   ret 
                                   3593 
                                   3594 ;------------------------------
                                   3595 ; BASIC: TICKS
                                   3596 ; return msec ticks counter value 
                                   3597 ; input:
                                   3598 ; 	none 
                                   3599 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3600 ;	X 		TK_INTGR
                                   3601 ;-------------------------------
      002A8D                       3602 get_ticks:
      002A8D C6 00 0F         [ 1] 3603 	ld a,ticks 
      002A90 CE 00 10         [ 2] 3604 	ldw x,ticks+1 
      002A93 81               [ 4] 3605 	ret 
                                   3606 
                                   3607 ;------------------------------
                                   3608 ; BASIC: ABS(expr)
                                   3609 ; return absolute value of expr.
                                   3610 ; input:
                                   3611 ;   none
                                   3612 ; output:
                                   3613 ;   xstack    positive int24 
                                   3614 ;-------------------------------
      002A94                       3615 abs:
      002A94 CD 19 5C         [ 4] 3616 	call func_args 
      002A97 A1 01            [ 1] 3617 	cp a,#1 
      002A99 27 03            [ 1] 3618 	jreq 0$ 
      002A9B CC 16 35         [ 2] 3619 	jp syntax_error
      002A9E                       3620 0$:  
      002A9E CD 01 E0         [ 4] 3621 	call abs24 
      002AA1                       3622 	_xpop 
      002AA1 90 F6            [ 1]    1     ld a,(y)
      002AA3 93               [ 1]    2     ldw x,y 
      002AA4 EE 01            [ 2]    3     ldw x,(1,x)
      002AA6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AAA 81               [ 4] 3623 	ret 
                                   3624 
                                   3625 ;------------------------------
                                   3626 ; BASIC: LSHIFT(expr1,expr2)
                                   3627 ; logical shift left expr1 by 
                                   3628 ; expr2 bits 
                                   3629 ; output:
                                   3630 ; 	A:x 	result 
                                   3631 ;------------------------------
      002AAB                       3632 lshift:
      002AAB CD 19 5C         [ 4] 3633 	call func_args
      002AAE A1 02            [ 1] 3634 	cp a,#2 
      002AB0 27 03            [ 1] 3635 	jreq 1$
      002AB2 CC 16 35         [ 2] 3636 	jp syntax_error
      002AB5                       3637 1$: _xpop 
      002AB5 90 F6            [ 1]    1     ld a,(y)
      002AB7 93               [ 1]    2     ldw x,y 
      002AB8 EE 01            [ 2]    3     ldw x,(1,x)
      002ABA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ABE 9F               [ 1] 3638 	ld a,xl 
      002ABF 88               [ 1] 3639 	push a      
      002AC0                       3640 	_xpop  ; T>A:X 
      002AC0 90 F6            [ 1]    1     ld a,(y)
      002AC2 93               [ 1]    2     ldw x,y 
      002AC3 EE 01            [ 2]    3     ldw x,(1,x)
      002AC5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AC9 0D 01            [ 1] 3641 	tnz (1,sp) 
      002ACB 27 07            [ 1] 3642 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002ACD 98               [ 1] 3643 2$:	rcf 
      002ACE 59               [ 2] 3644 	rlcw x 
      002ACF 49               [ 1] 3645 	rlc a 
      002AD0 0A 01            [ 1] 3646 	dec (1,sp) 
      002AD2 26 F9            [ 1] 3647 	jrne 2$
      002AD4                       3648 4$: _drop 1 
      002AD4 5B 01            [ 2]    1     addw sp,#1 
      002AD6 81               [ 4] 3649 	ret
                                   3650 
                                   3651 ;------------------------------
                                   3652 ; BASIC: RSHIFT(expr1,expr2)
                                   3653 ; logical shift right expr1 by 
                                   3654 ; expr2 bits.
                                   3655 ; output:
                                   3656 ; 	A 		TK_INTGR
                                   3657 ;   X 		result 
                                   3658 ;------------------------------
      002AD7                       3659 rshift:
      002AD7 CD 19 5C         [ 4] 3660 	call func_args
      002ADA A1 02            [ 1] 3661 	cp a,#2 
      002ADC 27 03            [ 1] 3662 	jreq 1$
      002ADE CC 16 35         [ 2] 3663 	jp syntax_error
      002AE1                       3664 1$: _xpop ; T>A:X
      002AE1 90 F6            [ 1]    1     ld a,(y)
      002AE3 93               [ 1]    2     ldw x,y 
      002AE4 EE 01            [ 2]    3     ldw x,(1,x)
      002AE6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AEA 9F               [ 1] 3665     ld a,xl 
      002AEB 88               [ 1] 3666 	push a    
      002AEC                       3667 	_xpop  
      002AEC 90 F6            [ 1]    1     ld a,(y)
      002AEE 93               [ 1]    2     ldw x,y 
      002AEF EE 01            [ 2]    3     ldw x,(1,x)
      002AF1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AF5 0D 01            [ 1] 3668 	tnz (1,sp)
      002AF7 27 07            [ 1] 3669 	jreq 4$
      002AF9 98               [ 1] 3670 2$:	rcf 
      002AFA 46               [ 1] 3671 	rrc a 
      002AFB 56               [ 2] 3672 	rrcw x 
      002AFC 0A 01            [ 1] 3673 	dec (1,sp) 
      002AFE 26 F9            [ 1] 3674 	jrne 2$
      002B00                       3675 4$: _drop 1 
      002B00 5B 01            [ 2]    1     addw sp,#1 
      002B02 81               [ 4] 3676 	ret
                                   3677 
                                   3678 ;--------------------------
                                   3679 ; BASIC: FCPU integer
                                   3680 ; set CPU frequency 
                                   3681 ;-------------------------- 
                                   3682 
      002B03                       3683 fcpu:
      002B03 A6 84            [ 1] 3684 	ld a,#TK_INTGR
      002B05 CD 19 4F         [ 4] 3685 	call expect 
      002B08 CD 17 CB         [ 4] 3686 	call get_int24 
      002B0B 9F               [ 1] 3687 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002B0C A4 07            [ 1] 3688 	and a,#7 
      002B0E C7 50 C6         [ 1] 3689 	ld CLK_CKDIVR,a 
      002B11 81               [ 4] 3690 	ret 
                                   3691 
                                   3692 ;------------------------------
                                   3693 ; BASIC: PMODE pin#, mode 
                                   3694 ; Arduino pin. 
                                   3695 ; define pin as input or output
                                   3696 ; pin#: {0..15}
                                   3697 ; mode: INPUT|OUTPUT  
                                   3698 ;------------------------------
                           000001  3699 	PINNO=1
                           000001  3700 	VSIZE=1
      002B12                       3701 pin_mode:
      002B12                       3702 	_vars VSIZE 
      002B12 52 01            [ 2]    1     sub sp,#VSIZE 
      002B14 CD 19 61         [ 4] 3703 	call arg_list 
      002B17 A1 02            [ 1] 3704 	cp a,#2 
      002B19 27 03            [ 1] 3705 	jreq 1$
      002B1B CC 16 35         [ 2] 3706 	jp syntax_error 
      002B1E                       3707 1$: _xpop 
      002B1E 90 F6            [ 1]    1     ld a,(y)
      002B20 93               [ 1]    2     ldw x,y 
      002B21 EE 01            [ 2]    3     ldw x,(1,x)
      002B23 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B27 CF 00 19         [ 2] 3708 	ldw ptr16,x ; mode 
      002B2A                       3709 	_xpop ; Dx pin 
      002B2A 90 F6            [ 1]    1     ld a,(y)
      002B2C 93               [ 1]    2     ldw x,y 
      002B2D EE 01            [ 2]    3     ldw x,(1,x)
      002B2F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B33 CD 2B 71         [ 4] 3710 	call select_pin 
      002B36 6B 01            [ 1] 3711 	ld (PINNO,sp),a  
      002B38 A6 01            [ 1] 3712 	ld a,#1 
      002B3A 0D 01            [ 1] 3713 	tnz (PINNO,sp)
      002B3C 27 0D            [ 1] 3714 	jreq 4$
      002B3E 48               [ 1] 3715 2$:	sll a 
      002B3F 0A 01            [ 1] 3716 	dec (PINNO,sp)
      002B41 26 FB            [ 1] 3717 	jrne 2$ 
      002B43 6B 01            [ 1] 3718 	ld (PINNO,sp),a
      002B45 7B 01            [ 1] 3719 	ld a,(PINNO,sp)
      002B47 EA 03            [ 1] 3720 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B49 E7 03            [ 1] 3721 	ld (GPIO_CR1,x),a 
      002B4B A6 01            [ 1] 3722 4$:	ld a,#OUTP
      002B4D C1 00 0E         [ 1] 3723 	cp a,acc8 
      002B50 27 10            [ 1] 3724 	jreq 6$
                                   3725 ; input mode
                                   3726 ; disable external interrupt 
      002B52 7B 01            [ 1] 3727 	ld a,(PINNO,sp)
      002B54 43               [ 1] 3728 	cpl a 
      002B55 E4 04            [ 1] 3729 	and a,(GPIO_CR2,x)
      002B57 E7 04            [ 1] 3730 	ld (GPIO_CR2,x),a 
                                   3731 ;clear bit in DDR for input mode 
      002B59 7B 01            [ 1] 3732 	ld a,(PINNO,sp)
      002B5B 43               [ 1] 3733 	cpl a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002B5C E4 02            [ 1] 3734 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B5E E7 02            [ 1] 3735 	ld (GPIO_DDR,x),a 
      002B60 20 0C            [ 2] 3736 	jra 9$
      002B62                       3737 6$: ;output mode  
      002B62 7B 01            [ 1] 3738 	ld a,(PINNO,sp)
      002B64 EA 02            [ 1] 3739 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B66 E7 02            [ 1] 3740 	ld (GPIO_DDR,x),a 
      002B68 7B 01            [ 1] 3741 	ld a,(PINNO,sp)
      002B6A EA 04            [ 1] 3742 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002B6C E7 04            [ 1] 3743 	ld (GPIO_CR2,x),a 
      002B6E                       3744 9$:	
      002B6E                       3745 	_drop VSIZE 
      002B6E 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B70 81               [ 4] 3746 	ret
                                   3747 
                                   3748 ;------------------------
                                   3749 ; select Arduino pin 
                                   3750 ; input:
                                   3751 ;   X 	 {0..15} Arduino Dx 
                                   3752 ; output:
                                   3753 ;   A     stm8s208 pin 
                                   3754 ;   X     base address s208 GPIO port 
                                   3755 ;---------------------------
      002B71                       3756 select_pin:
      002B71 58               [ 2] 3757 	sllw x 
      002B72 1C 2B 81         [ 2] 3758 	addw x,#arduino_to_8s208 
      002B75 FE               [ 2] 3759 	ldw x,(x)
      002B76 9F               [ 1] 3760 	ld a,xl 
      002B77 88               [ 1] 3761 	push a 
      002B78 5E               [ 1] 3762 	swapw x 
      002B79 A6 05            [ 1] 3763 	ld a,#5 
      002B7B 42               [ 4] 3764 	mul x,a 
      002B7C 1C 50 00         [ 2] 3765 	addw x,#GPIO_BASE 
      002B7F 84               [ 1] 3766 	pop a 
      002B80 81               [ 4] 3767 	ret 
                                   3768 ; translation from Arduino D0..D15 to stm8s208rb 
      002B81                       3769 arduino_to_8s208:
      002B81 03 06                 3770 .byte 3,6 ; D0 
      002B83 03 05                 3771 .byte 3,5 ; D1 
      002B85 04 00                 3772 .byte 4,0 ; D2 
      002B87 02 01                 3773 .byte 2,1 ; D3
      002B89 06 00                 3774 .byte 6,0 ; D4
      002B8B 02 02                 3775 .byte 2,2 ; D5
      002B8D 02 03                 3776 .byte 2,3 ; D6
      002B8F 03 01                 3777 .byte 3,1 ; D7
      002B91 03 03                 3778 .byte 3,3 ; D8
      002B93 02 04                 3779 .byte 2,4 ; D9
      002B95 04 05                 3780 .byte 4,5 ; D10
      002B97 02 06                 3781 .byte 2,6 ; D11
      002B99 02 07                 3782 .byte 2,7 ; D12
      002B9B 02 05                 3783 .byte 2,5 ; D13
      002B9D 04 02                 3784 .byte 4,2 ; D14
      002B9F 04 01                 3785 .byte 4,1 ; D15
                                   3786 
                                   3787 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



                                   3788 ;------------------------------
                                   3789 ; BASIC: RND(expr)
                                   3790 ; return random number 
                                   3791 ; between 1 and expr inclusive
                                   3792 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3793 ; input:
                                   3794 ; 	none 
                                   3795 ; output:
                                   3796 ;	xstack 	random positive integer 
                                   3797 ;------------------------------
      002BA1                       3798 random:
      002BA1 CD 19 5C         [ 4] 3799 	call func_args 
      002BA4 A1 01            [ 1] 3800 	cp a,#1
      002BA6 27 03            [ 1] 3801 	jreq 1$
      002BA8 CC 16 35         [ 2] 3802 	jp syntax_error
      002BAB                       3803 1$:  
      002BAB                       3804 	_xpop   
      002BAB 90 F6            [ 1]    1     ld a,(y)
      002BAD 93               [ 1]    2     ldw x,y 
      002BAE EE 01            [ 2]    3     ldw x,(1,x)
      002BB0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BB4 89               [ 2] 3805 	pushw x 
      002BB5 88               [ 1] 3806 	push a  
      002BB6 A6 80            [ 1] 3807 	ld a,#0x80 
      002BB8 15 01            [ 1] 3808 	bcp a,(1,sp)
      002BBA 27 05            [ 1] 3809 	jreq 2$
      002BBC A6 0A            [ 1] 3810 	ld a,#ERR_BAD_VALUE
      002BBE CC 16 37         [ 2] 3811 	jp tb_error
      002BC1                       3812 2$: 
                                   3813 ; acc16=(x<<5)^x 
      002BC1 CE 00 14         [ 2] 3814 	ldw x,seedx 
      002BC4 58               [ 2] 3815 	sllw x 
      002BC5 58               [ 2] 3816 	sllw x 
      002BC6 58               [ 2] 3817 	sllw x 
      002BC7 58               [ 2] 3818 	sllw x 
      002BC8 58               [ 2] 3819 	sllw x 
      002BC9 9E               [ 1] 3820 	ld a,xh 
      002BCA C8 00 14         [ 1] 3821 	xor a,seedx 
      002BCD C7 00 0D         [ 1] 3822 	ld acc16,a 
      002BD0 9F               [ 1] 3823 	ld a,xl 
      002BD1 C8 00 15         [ 1] 3824 	xor a,seedx+1 
      002BD4 C7 00 0E         [ 1] 3825 	ld acc8,a 
                                   3826 ; seedx=seedy 
      002BD7 CE 00 16         [ 2] 3827 	ldw x,seedy 
      002BDA CF 00 14         [ 2] 3828 	ldw seedx,x  
                                   3829 ; seedy=seedy^(seedy>>1)
      002BDD CE 00 16         [ 2] 3830 	ldw x,seedy 
      002BE0 54               [ 2] 3831 	srlw x 
      002BE1 9E               [ 1] 3832 	ld a,xh 
      002BE2 C8 00 16         [ 1] 3833 	xor a,seedy 
      002BE5 C7 00 16         [ 1] 3834 	ld seedy,a  
      002BE8 9F               [ 1] 3835 	ld a,xl 
      002BE9 C8 00 17         [ 1] 3836 	xor a,seedy+1 
      002BEC C7 00 17         [ 1] 3837 	ld seedy+1,a 
                                   3838 ; acc16>>3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002BEF CE 00 0D         [ 2] 3839 	ldw x,acc16 
      002BF2 54               [ 2] 3840 	srlw x 
      002BF3 54               [ 2] 3841 	srlw x 
      002BF4 54               [ 2] 3842 	srlw x 
                                   3843 ; x=acc16^x 
      002BF5 9E               [ 1] 3844 	ld a,xh 
      002BF6 C8 00 0D         [ 1] 3845 	xor a,acc16 
      002BF9 C7 00 0D         [ 1] 3846 	ld acc16,a 
      002BFC 9F               [ 1] 3847 	ld a,xl 
      002BFD C8 00 0E         [ 1] 3848 	xor a,acc8 
      002C00 C7 00 0E         [ 1] 3849 	ld acc8,a 
                                   3850 ; seedy=acc16^seedy 
      002C03 C8 00 17         [ 1] 3851 	xor a,seedy+1
      002C06 97               [ 1] 3852 	ld xl,a 
      002C07 C6 00 0D         [ 1] 3853 	ld a,acc16 
      002C0A C8 00 16         [ 1] 3854 	xor a,seedy
      002C0D 95               [ 1] 3855 	ld xh,a 
      002C0E CF 00 16         [ 2] 3856 	ldw seedy,x 
                                   3857 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002C11 C6 00 15         [ 1] 3858 	ld a,seedx+1
      002C14 A4 7F            [ 1] 3859 	and a,#127
      002C16                       3860 	_xpush 
      002C16 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C1A 90 F7            [ 1]    2     ld (y),a 
      002C1C 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C1F 84               [ 1] 3861 	pop a 
      002C20 85               [ 2] 3862 	popw x 
      002C21                       3863 	_xpush 
      002C21 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C25 90 F7            [ 1]    2     ld (y),a 
      002C27 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C2A CD 03 8E         [ 4] 3864 	call mod24 
      002C2D                       3865 	_xpop
      002C2D 90 F6            [ 1]    1     ld a,(y)
      002C2F 93               [ 1]    2     ldw x,y 
      002C30 EE 01            [ 2]    3     ldw x,(1,x)
      002C32 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C36 1C 00 01         [ 2] 3866 	addw x,#1 
      002C39 A9 00            [ 1] 3867 	adc a,#0  
      002C3B 81               [ 4] 3868 	ret 
                                   3869 
                                   3870 ;---------------------------------
                                   3871 ; BASIC: WORDS 
                                   3872 ; affiche la listes des mots du
                                   3873 ; dictionnaire ainsi que le nombre
                                   3874 ; de mots.
                                   3875 ;---------------------------------
                           000001  3876 	WLEN=1 ; word length
                           000002  3877 	LLEN=2 ; character sent to console
                           000003  3878 	WCNT=3 ; count words printed 
                           000003  3879 	VSIZE=3 
      002C3C                       3880 words:
      002C3C 90 89            [ 2] 3881 	pushw y
      002C3E                       3882 	_vars VSIZE
      002C3E 52 03            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002C40 0F 02            [ 1] 3883 	clr (LLEN,sp)
      002C42 0F 03            [ 1] 3884 	clr (WCNT,sp)
      002C44 90 AE 34 11      [ 2] 3885 	ldw y,#kword_dict+2
      002C48 93               [ 1] 3886 0$:	ldw x,y
      002C49 F6               [ 1] 3887 	ld a,(x)
      002C4A A4 0F            [ 1] 3888 	and a,#15 
      002C4C 6B 01            [ 1] 3889 	ld (WLEN,sp),a 
      002C4E 0C 03            [ 1] 3890 	inc (WCNT,sp)
      002C50 5C               [ 1] 3891 1$:	incw x 
      002C51 F6               [ 1] 3892 	ld a,(x)
      002C52 CD 08 DA         [ 4] 3893 	call putc 
      002C55 0C 02            [ 1] 3894 	inc (LLEN,sp)
      002C57 0A 01            [ 1] 3895 	dec (WLEN,sp)
      002C59 26 F5            [ 1] 3896 	jrne 1$
      002C5B A6 46            [ 1] 3897 	ld a,#70
      002C5D 11 02            [ 1] 3898 	cp a,(LLEN,sp)
      002C5F 2B 09            [ 1] 3899 	jrmi 2$   
      002C61 A6 20            [ 1] 3900 	ld a,#SPACE 
      002C63 CD 08 DA         [ 4] 3901 	call putc 
      002C66 0C 02            [ 1] 3902 	inc (LLEN,sp) 
      002C68 20 07            [ 2] 3903 	jra 3$
      002C6A A6 0D            [ 1] 3904 2$: ld a,#CR 
      002C6C CD 08 DA         [ 4] 3905 	call putc 
      002C6F 0F 02            [ 1] 3906 	clr (LLEN,sp)
      002C71 72 A2 00 02      [ 2] 3907 3$:	subw y,#2 
      002C75 90 FE            [ 2] 3908 	ldw y,(y)
      002C77 26 CF            [ 1] 3909 	jrne 0$ 
      002C79 A6 0D            [ 1] 3910 	ld a,#CR 
      002C7B CD 08 DA         [ 4] 3911 	call putc  
      002C7E 5F               [ 1] 3912 	clrw x 
      002C7F 7B 03            [ 1] 3913 	ld a,(WCNT,sp)
      002C81 97               [ 1] 3914 	ld xl,a 
      002C82 CD 17 E1         [ 4] 3915 	call prt_i16 
      002C85 AE 2C 90         [ 2] 3916 	ldw x,#words_count_msg
      002C88 CD 09 37         [ 4] 3917 	call puts 
      002C8B                       3918 	_drop VSIZE 
      002C8B 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C8D 90 85            [ 2] 3919 	popw y 
      002C8F 81               [ 4] 3920 	ret 
      002C90 20 77 6F 72 64 73 20  3921 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3922 
                                   3923 
                                   3924 ;-----------------------------
                                   3925 ; BASIC: TIMER expr 
                                   3926 ; initialize count down timer 
                                   3927 ;-----------------------------
      002CA6                       3928 set_timer:
      002CA6 CD 19 61         [ 4] 3929 	call arg_list
      002CA9 A1 01            [ 1] 3930 	cp a,#1 
      002CAB 27 03            [ 1] 3931 	jreq 1$
      002CAD CC 16 35         [ 2] 3932 	jp syntax_error
      002CB0                       3933 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002CB0                       3934 	_xpop  
      002CB0 90 F6            [ 1]    1     ld a,(y)
      002CB2 93               [ 1]    2     ldw x,y 
      002CB3 EE 01            [ 2]    3     ldw x,(1,x)
      002CB5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CB9 CF 00 12         [ 2] 3935 	ldw timer,x 
      002CBC 81               [ 4] 3936 	ret 
                                   3937 
                                   3938 ;------------------------------
                                   3939 ; BASIC: TIMEOUT 
                                   3940 ; return state of timer 
                                   3941 ; output:
                                   3942 ;   A:X     0 not timeout 
                                   3943 ;   A:X     -1 timeout 
                                   3944 ;------------------------------
      002CBD                       3945 timeout:
      002CBD 4F               [ 1] 3946 	clr a 
      002CBE CE 00 12         [ 2] 3947 	ldw x,timer 
      002CC1 27 02            [ 1] 3948 	jreq 1$
      002CC3 5F               [ 1] 3949 	clrw x
      002CC4 81               [ 4] 3950 	ret  
      002CC5 43               [ 1] 3951 1$:	cpl a
      002CC6 53               [ 2] 3952 	cplw x 
      002CC7 81               [ 4] 3953 	ret 
                                   3954  	
                                   3955 
                                   3956 
                                   3957 
                                   3958 ;-----------------------------------
                                   3959 ; BASIC: IWDGEN expr1 
                                   3960 ; enable independant watchdog timer
                                   3961 ; expr1 is delay in multiple of 62.5µsec
                                   3962 ; expr1 -> {1..16383}
                                   3963 ;-----------------------------------
      002CC8                       3964 enable_iwdg:
      002CC8 CD 19 61         [ 4] 3965 	call arg_list
      002CCB A1 01            [ 1] 3966 	cp a,#1 
      002CCD 27 03            [ 1] 3967 	jreq 1$
      002CCF CC 16 35         [ 2] 3968 	jp syntax_error 
      002CD2                       3969 1$: _xpop  
      002CD2 90 F6            [ 1]    1     ld a,(y)
      002CD4 93               [ 1]    2     ldw x,y 
      002CD5 EE 01            [ 2]    3     ldw x,(1,x)
      002CD7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CDB 4B 00            [ 1] 3970 	push #0
      002CDD 35 CC 50 E0      [ 1] 3971 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CE1 9E               [ 1] 3972 	ld a,xh 
      002CE2 A4 3F            [ 1] 3973 	and a,#0x3f
      002CE4 95               [ 1] 3974 	ld xh,a  
      002CE5 A3 00 FF         [ 2] 3975 2$:	cpw x,#255
      002CE8 23 06            [ 2] 3976 	jrule 3$
      002CEA 0C 01            [ 1] 3977 	inc (1,sp)
      002CEC 98               [ 1] 3978 	rcf 
      002CED 56               [ 2] 3979 	rrcw x 
      002CEE 20 F5            [ 2] 3980 	jra 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002CF0 35 55 50 E0      [ 1] 3981 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CF4 84               [ 1] 3982 	pop a  
      002CF5 C7 50 E1         [ 1] 3983 	ld IWDG_PR,a 
      002CF8 9F               [ 1] 3984 	ld a,xl
      002CF9 4A               [ 1] 3985 	dec a 
      002CFA 35 55 50 E0      [ 1] 3986 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CFE C7 50 E2         [ 1] 3987 	ld IWDG_RLR,a 
      002D01 35 AA 50 E0      [ 1] 3988 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D05 81               [ 4] 3989 	ret 
                                   3990 
                                   3991 
                                   3992 ;-----------------------------------
                                   3993 ; BASIC: IWDGREF  
                                   3994 ; refresh independant watchdog count down 
                                   3995 ; timer before it reset MCU. 
                                   3996 ;-----------------------------------
      002D06                       3997 refresh_iwdg:
      002D06 35 AA 50 E0      [ 1] 3998 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D0A 81               [ 4] 3999 	ret 
                                   4000 
                                   4001 
                                   4002 ;-------------------------------------
                                   4003 ; BASIC: LOG2(expr)
                                   4004 ; return logarithm base 2 of expr 
                                   4005 ; this is the position of most significant
                                   4006 ; bit set. 
                                   4007 ; input: 
                                   4008 ; output:
                                   4009 ;   A     TK_INTGR 
                                   4010 ;   xstack log2 
                                   4011 ;*********************************
      002D0B                       4012 log2:
      002D0B CD 19 5C         [ 4] 4013 	call func_args 
      002D0E A1 01            [ 1] 4014 	cp a,#1 
      002D10 27 03            [ 1] 4015 	jreq 1$
      002D12 CC 16 35         [ 2] 4016 	jp syntax_error 
      002D15                       4017 1$: 
      002D15                       4018 	_xpop    
      002D15 90 F6            [ 1]    1     ld a,(y)
      002D17 93               [ 1]    2     ldw x,y 
      002D18 EE 01            [ 2]    3     ldw x,(1,x)
      002D1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D1E 4D               [ 1] 4019 	tnz a
      002D1F 26 08            [ 1] 4020 	jrne 2$ 
      002D21 5D               [ 2] 4021 	tnzw x 
      002D22 26 05            [ 1] 4022 	jrne 2$
      002D24 A6 0A            [ 1] 4023 	ld a,#ERR_BAD_VALUE
      002D26 CC 16 37         [ 2] 4024 	jp tb_error 
      002D29 4B 18            [ 1] 4025 2$: push #24 
      002D2B 59               [ 2] 4026 3$: rlcw x 
      002D2C 49               [ 1] 4027     rlc a 
      002D2D 25 04            [ 1] 4028 	jrc 4$
      002D2F 0A 01            [ 1] 4029 	dec (1,sp) 
      002D31 26 F8            [ 1] 4030 	jrne 3$
      002D33 5F               [ 1] 4031 4$: clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002D34 84               [ 1] 4032     pop a 
      002D35 4A               [ 1] 4033 	dec a
      002D36 02               [ 1] 4034 	rlwa x  
      002D37                       4035 9$:	
      002D37 81               [ 4] 4036 	ret 
                                   4037 
                                   4038 ;-----------------------------------
                                   4039 ; BASIC: BIT(expr) 
                                   4040 ; expr ->{0..23}
                                   4041 ; return 2^expr 
                                   4042 ; output:
                                   4043 ;    A:X    2^expr 
                                   4044 ;-----------------------------------
      002D38                       4045 bitmask:
      002D38 CD 19 5C         [ 4] 4046     call func_args 
      002D3B A1 01            [ 1] 4047 	cp a,#1
      002D3D 27 03            [ 1] 4048 	jreq 1$
      002D3F CC 16 35         [ 2] 4049 	jp syntax_error 
      002D42                       4050 1$: _xpop 
      002D42 90 F6            [ 1]    1     ld a,(y)
      002D44 93               [ 1]    2     ldw x,y 
      002D45 EE 01            [ 2]    3     ldw x,(1,x)
      002D47 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D4B 9F               [ 1] 4051 	ld a,xl 
      002D4C AE 00 01         [ 2] 4052 	ldw x,#1 
      002D4F A4 17            [ 1] 4053 	and a,#23
      002D51 27 0A            [ 1] 4054 	jreq 9$
      002D53 88               [ 1] 4055 	push a 
      002D54 4F               [ 1] 4056 	clr a 
      002D55                       4057 2$: 
      002D55 58               [ 2] 4058 	slaw x 
      002D56 49               [ 1] 4059 	rlc a 	
      002D57 0A 01            [ 1] 4060 	dec (1,sp)
      002D59 26 FA            [ 1] 4061 	jrne 2$ 
      002D5B                       4062 4$:
      002D5B                       4063     _drop 1 
      002D5B 5B 01            [ 2]    1     addw sp,#1 
      002D5D 81               [ 4] 4064 9$:	ret 
                                   4065 
                                   4066 ;------------------------------
                                   4067 ; BASIC: DO 
                                   4068 ; initiate a DO ... UNTIL loop 
                                   4069 ;------------------------------
                           000003  4070 	DOLP_ADR=3 
                           000005  4071 	DOLP_INW=5
                           000004  4072 	VSIZE=4 
      002D5E                       4073 do_loop:
      002D5E 85               [ 2] 4074 	popw x 
      002D5F                       4075 	_vars VSIZE 
      002D5F 52 04            [ 2]    1     sub sp,#VSIZE 
      002D61 89               [ 2] 4076 	pushw x 
      002D62 CE 00 04         [ 2] 4077 	ldw x,basicptr 
      002D65 1F 03            [ 2] 4078 	ldw (DOLP_ADR,sp),x
      002D67 CE 00 00         [ 2] 4079 	ldw x,in.w 
      002D6A 1F 05            [ 2] 4080 	ldw (DOLP_INW,sp),x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002D6C 72 5C 00 1F      [ 1] 4081 	inc loop_depth 
      002D70 81               [ 4] 4082 	ret 
                                   4083 
                                   4084 ;--------------------------------
                                   4085 ; BASIC: UNTIL expr 
                                   4086 ; loop if exprssion is false 
                                   4087 ; else terminate loop
                                   4088 ;--------------------------------
      002D71                       4089 until: 
      002D71 72 5D 00 1F      [ 1] 4090 	tnz loop_depth 
      002D75 26 03            [ 1] 4091 	jrne 1$ 
      002D77 CC 16 35         [ 2] 4092 	jp syntax_error 
      002D7A                       4093 1$: 
      002D7A CD 1B BE         [ 4] 4094 	call condition  
      002D7D                       4095 	_xpop 
      002D7D 90 F6            [ 1]    1     ld a,(y)
      002D7F 93               [ 1]    2     ldw x,y 
      002D80 EE 01            [ 2]    3     ldw x,(1,x)
      002D82 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D86 4D               [ 1] 4096 	tnz a 
      002D87 26 13            [ 1] 4097 	jrne 9$ 
      002D89 5D               [ 2] 4098 	tnzw x 
      002D8A 26 10            [ 1] 4099 	jrne 9$ 
      002D8C 1E 03            [ 2] 4100 	ldw x,(DOLP_ADR,sp)
      002D8E CF 00 04         [ 2] 4101 	ldw basicptr,x 
      002D91 E6 02            [ 1] 4102 	ld a,(2,x)
      002D93 C7 00 03         [ 1] 4103 	ld count,a 
      002D96 1E 05            [ 2] 4104 	ldw x,(DOLP_INW,sp)
      002D98 CF 00 00         [ 2] 4105 	ldw in.w,x 
      002D9B 81               [ 4] 4106 	ret 
      002D9C                       4107 9$:	; remove loop data from stack  
      002D9C 85               [ 2] 4108 	popw x
      002D9D                       4109 	_drop VSIZE
      002D9D 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D9F 72 5A 00 1F      [ 1] 4110 	dec loop_depth 
      002DA3 FC               [ 2] 4111 	jp (x)
                                   4112 
                                   4113 ;--------------------------
                                   4114 ; BASIC: PORTA...PORTI  
                                   4115 ;  return constant value 
                                   4116 ;  PORT  base address 
                                   4117 ;---------------------------
      002DA4                       4118 const_porta:
      002DA4 AE 50 00         [ 2] 4119 	ldw x,#PA_BASE 
      002DA7 4F               [ 1] 4120 	clr a 
      002DA8 81               [ 4] 4121 	ret 
      002DA9                       4122 const_portb:
      002DA9 AE 50 05         [ 2] 4123 	ldw x,#PB_BASE 
      002DAC 4F               [ 1] 4124 	clr a 
      002DAD 81               [ 4] 4125 	ret 
      002DAE                       4126 const_portc:
      002DAE AE 50 0A         [ 2] 4127 	ldw x,#PC_BASE 
      002DB1 4F               [ 1] 4128 	clr a 
      002DB2 81               [ 4] 4129 	ret 
      002DB3                       4130 const_portd:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002DB3 AE 50 0F         [ 2] 4131 	ldw x,#PD_BASE 
      002DB6 4F               [ 1] 4132 	clr a 
      002DB7 81               [ 4] 4133 	ret 
      002DB8                       4134 const_porte:
      002DB8 AE 50 14         [ 2] 4135 	ldw x,#PE_BASE 
      002DBB 4F               [ 1] 4136 	clr a 
      002DBC 81               [ 4] 4137 	ret 
      002DBD                       4138 const_portf:
      002DBD AE 50 19         [ 2] 4139 	ldw x,#PF_BASE 
      002DC0 4F               [ 1] 4140 	clr a 
      002DC1 81               [ 4] 4141 	ret 
      002DC2                       4142 const_portg:
      002DC2 AE 50 1E         [ 2] 4143 	ldw x,#PG_BASE 
      002DC5 4F               [ 1] 4144 	clr a 
      002DC6 81               [ 4] 4145 	ret 
      002DC7                       4146 const_porti:
      002DC7 AE 50 28         [ 2] 4147 	ldw x,#PI_BASE 
      002DCA 4F               [ 1] 4148 	clr a 
      002DCB 81               [ 4] 4149 	ret 
                                   4150 
                                   4151 ;-------------------------------
                                   4152 ; following return constant 
                                   4153 ; related to GPIO register offset 
                                   4154 ;---------------------------------
      002DCC                       4155 const_odr:
      002DCC 4F               [ 1] 4156 	clr a 
      002DCD AE 00 00         [ 2] 4157 	ldw x,#GPIO_ODR
      002DD0 81               [ 4] 4158 	ret 
      002DD1                       4159 const_idr:
      002DD1 4F               [ 1] 4160 	clr a 
      002DD2 AE 00 01         [ 2] 4161 	ldw x,#GPIO_IDR
      002DD5 81               [ 4] 4162 	ret 
      002DD6                       4163 const_ddr:
      002DD6 4F               [ 1] 4164 	clr a
      002DD7 AE 00 02         [ 2] 4165 	ldw x,#GPIO_DDR
      002DDA 81               [ 4] 4166 	ret 
      002DDB                       4167 const_cr1:
      002DDB 4F               [ 1] 4168 	clr a 
      002DDC AE 00 03         [ 2] 4169 	ldw x,#GPIO_CR1
      002DDF 81               [ 4] 4170 	ret 
      002DE0                       4171 const_cr2:
      002DE0 4F               [ 1] 4172 	clr a
      002DE1 AE 00 04         [ 2] 4173 	ldw x,#GPIO_CR2
      002DE4 81               [ 4] 4174 	ret 
                                   4175 ;-------------------------
                                   4176 ; BASIC: POUT 
                                   4177 ;  constant for port mode
                                   4178 ;  used by PMODE 
                                   4179 ;  to set pin as output
                                   4180 ;------------------------
      002DE5                       4181 const_output:
      002DE5 4F               [ 1] 4182 	clr a 
      002DE6 AE 00 01         [ 2] 4183 	ldw x,#OUTP
      002DE9 81               [ 4] 4184 	ret 
                                   4185 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   4186 ;-------------------------
                                   4187 ; BASIC: PINP 
                                   4188 ;  constant for port mode
                                   4189 ;  used by PMODE 
                                   4190 ;  to set pin as input
                                   4191 ;------------------------
      002DEA                       4192 const_input:
      002DEA 4F               [ 1] 4193 	clr a  
      002DEB AE 00 00         [ 2] 4194 	ldw x,#INP 
      002DEE 81               [ 4] 4195 	ret 
                                   4196 	
                                   4197 ;-----------------------
                                   4198 ; memory area constants
                                   4199 ;-----------------------
      002DEF                       4200 const_eeprom_base:
      002DEF 4F               [ 1] 4201 	clr a  
      002DF0 AE 40 00         [ 2] 4202 	ldw x,#EEPROM_BASE 
      002DF3 81               [ 4] 4203 	ret 
                                   4204 
                                   4205 ;---------------------------
                                   4206 ; BASIC: DATA 
                                   4207 ; when the interpreter find 
                                   4208 ; a DATA line it skip it.
                                   4209 ;---------------------------
      002DF4                       4210 data:
      002DF4 55 00 03 00 01   [ 1] 4211 	mov in,count 
      002DF9 81               [ 4] 4212 	ret 
                                   4213 
                                   4214 ;------------------------------
                                   4215 ; check if it is a DATA line 
                                   4216 ; input: 
                                   4217 ;    X    line address 
                                   4218 ; output:
                                   4219 ;    Z    set if DATA line 
                                   4220 ;----------------------------
      002DFA                       4221 is_data_line:
      002DFA 89               [ 2] 4222 	pushw x 
      002DFB E6 03            [ 1] 4223 	ld a,(3,x)
      002DFD A1 80            [ 1] 4224 	cp a,#TK_CMD 
      002DFF 26 05            [ 1] 4225 	jrne 9$
      002E01 EE 04            [ 2] 4226 	ldw x,(4,x)
      002E03 A3 2D F4         [ 2] 4227 	cpw x,#data  
      002E06 85               [ 2] 4228 9$: popw x 
      002E07 81               [ 4] 4229 	ret 
                                   4230 
                                   4231 ;---------------------------------
                                   4232 ; BASIC: RESTORE [line#]
                                   4233 ; set data_ptr to first data line
                                   4234 ; if no DATA found pointer set to
                                   4235 ; zero.
                                   4236 ; if a line# is given as argument 
                                   4237 ; a data line with that number 
                                   4238 ; is searched and the data pointer 
                                   4239 ; is set to it. If there is no 
                                   4240 ; data line with that number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4241 ; the program is interrupted. 
                                   4242 ;---------------------------------
      002E08                       4243 restore:
      002E08 5F               [ 1] 4244 	clrw x 
      002E09 CF 00 06         [ 2] 4245 	ldw data_ptr,x 
      002E0C CF 00 08         [ 2] 4246 	ldw data_ofs,x 
      002E0F CE 00 1B         [ 2] 4247 	ldw x,txtbgn 
      002E12 CD 17 99         [ 4] 4248 	call next_token 
      002E15 A1 84            [ 1] 4249 	cp a,#TK_INTGR
      002E17 26 10            [ 1] 4250 	jrne 0$
      002E19 CD 17 CB         [ 4] 4251 	call get_int24
      002E1C 90 89            [ 2] 4252 	pushw y 
      002E1E 4F               [ 1] 4253 	clr a 
      002E1F CD 0C 14         [ 4] 4254 	call search_lineno  
      002E22 90 85            [ 2] 4255 	popw y 
      002E24 5D               [ 2] 4256 	tnzw x 
      002E25 26 17            [ 1] 4257 	jrne set_data_pointer 
      002E27 20 44            [ 2] 4258 	jra data_error 
      002E29                       4259 0$:
      002E29                       4260 	_unget_token  
      002E29 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4261 ; search first DATA line 	
      002E2E C3 00 1D         [ 2] 4262 1$:	cpw x,txtend
      002E31 24 3A            [ 1] 4263 	jruge data_error 
      002E33                       4264 2$:	
      002E33 CD 2D FA         [ 4] 4265 	call is_data_line 
      002E36 26 00            [ 1] 4266 	jrne 4$
      002E38 CD 2E 4B         [ 4] 4267 4$:	call try_next_line 
      002E3B 26 FB            [ 1] 4268 	jrne 4$ 
      002E3D 81               [ 4] 4269 	ret 
                                   4270 
                                   4271 ;---------------------
                                   4272 ; set data pointer 
                                   4273 ; variables at new line 
                                   4274 ; input:
                                   4275 ;    X    line address 
                                   4276 ;----------------------
      002E3E                       4277 set_data_pointer:
      002E3E CF 00 06         [ 2] 4278 	ldw data_ptr,x
      002E41 E6 02            [ 1] 4279 	ld a,(2,x)
      002E43 C7 00 09         [ 1] 4280 	ld data_len,a 
      002E46 35 06 00 08      [ 1] 4281 	mov data_ofs,#FIRST_DATA_ITEM
      002E4A 81               [ 4] 4282 	ret 
                                   4283 
                                   4284 
                                   4285 ;--------------------
                                   4286 ; at end of data line 
                                   4287 ; check if next line 
                                   4288 ; is a data line 
                                   4289 ; input:
                                   4290 ;    X   actual line address 
                                   4291 ;  
                                   4292 ;-------------------
      002E4B                       4293 try_next_line: 
      002E4B E6 02            [ 1] 4294 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002E4D C7 00 0E         [ 1] 4295 	ld acc8,a 
      002E50 72 5F 00 0D      [ 1] 4296 	clr acc16 
      002E54 72 BB 00 0D      [ 2] 4297 	addw x,acc16 
      002E58 C3 00 1D         [ 2] 4298 	cpw x,txtend 
      002E5B 25 02            [ 1] 4299 	jrult 1$
      002E5D 20 0E            [ 2] 4300 	jra data_error 
      002E5F                       4301 1$:	
      002E5F CD 2D FA         [ 4] 4302 	call is_data_line 
      002E62 27 04            [ 1] 4303 	jreq 2$
      002E64 A6 01            [ 1] 4304 	ld a,#1  
      002E66 20 04            [ 2] 4305 	jra 9$
      002E68 CD 2E 3E         [ 4] 4306 2$:	call set_data_pointer
      002E6B 4F               [ 1] 4307 	clr a  
      002E6C 81               [ 4] 4308 9$:	ret 
      002E6D                       4309 data_error:	
      002E6D A6 0C            [ 1] 4310     ld a,#ERR_NO_DATA 
      002E6F CC 16 37         [ 2] 4311 	jp tb_error 
                                   4312 
                                   4313 
                                   4314 ;---------------------------------
                                   4315 ; BASIC: READ 
                                   4316 ; return next data item | 0 
                                   4317 ;---------------------------------
                           000001  4318 	CTX_BPTR=1 
                           000003  4319 	CTX_IN=3 
                           000004  4320 	CTX_COUNT=4 
                           000005  4321 	INT24=5
                           000007  4322 	VSIZE=7 
      002E72                       4323 read:
      002E72                       4324 	_vars  VSIZE 
      002E72 52 07            [ 2]    1     sub sp,#VSIZE 
      002E74 CD 1F F6         [ 4] 4325 	call save_context
      002E77                       4326 read01:	
      002E77 C6 00 08         [ 1] 4327 	ld a,data_ofs
      002E7A C1 00 09         [ 1] 4328 	cp a,data_len 
      002E7D 27 37            [ 1] 4329 	jreq 2$ ; end of line  
      002E7F                       4330 0$:
      002E7F CE 00 06         [ 2] 4331 	ldw x,data_ptr 
      002E82 CF 00 04         [ 2] 4332 	ldw basicptr,x 
      002E85 55 00 08 00 01   [ 1] 4333 	mov in,data_ofs 
      002E8A 55 00 09 00 03   [ 1] 4334 	mov count,data_len  
      002E8F CD 1A A5         [ 4] 4335 	call expression 
      002E92 A1 84            [ 1] 4336 	cp a,#TK_INTGR 
      002E94 27 03            [ 1] 4337 	jreq 1$ 
      002E96 CC 16 35         [ 2] 4338 	jp syntax_error 
      002E99                       4339 1$:
      002E99 CD 17 99         [ 4] 4340 	call next_token ; skip comma
      002E9C CE 00 04         [ 2] 4341 	ldw x,basicptr 
      002E9F CF 00 06         [ 2] 4342 	ldw data_ptr,x 
      002EA2 55 00 01 00 08   [ 1] 4343 	mov data_ofs,in 
      002EA7 CD 20 06         [ 4] 4344 	call rest_context
      002EAA                       4345 	_xpop 
      002EAA 90 F6            [ 1]    1     ld a,(y)
      002EAC 93               [ 1]    2     ldw x,y 
      002EAD EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002EAF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EB3                       4346 	_drop VSIZE 
      002EB3 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EB5 81               [ 4] 4347 	ret 
      002EB6                       4348 2$: ; end of line reached 
                                   4349 	; try next line 
      002EB6 CE 00 06         [ 2] 4350 	ldw x,data_ptr  
      002EB9 CD 2E 4B         [ 4] 4351 	call try_next_line
      002EBC 27 C1            [ 1] 4352 	jreq 0$ 
      002EBE 20 AD            [ 2] 4353 	jra data_error 
                                   4354 
                                   4355 ;---------------------------------
                                   4356 ; BASIC: SPIEN clkdiv, 0|1  
                                   4357 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4358 ; if clkdiv==-1 disable SPI
                                   4359 ; 0|1 -> disable|enable  
                                   4360 ;--------------------------------- 
                           000005  4361 SPI_CS_BIT=5
      002EC0                       4362 spi_enable:
      002EC0 CD 19 61         [ 4] 4363 	call arg_list 
      002EC3 A1 02            [ 1] 4364 	cp a,#2
      002EC5 27 03            [ 1] 4365 	jreq 1$
      002EC7 CC 16 35         [ 2] 4366 	jp syntax_error 
      002ECA                       4367 1$: 
      002ECA 72 12 50 C7      [ 1] 4368 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002ECE 85               [ 2] 4369 	popw x  
      002ECF 5D               [ 2] 4370 	tnzw x 
      002ED0 27 21            [ 1] 4371 	jreq spi_disable 
      002ED2 85               [ 2] 4372 	popw x 
      002ED3 A6 08            [ 1] 4373 	ld a,#(1<<SPI_CR1_BR)
      002ED5 42               [ 4] 4374 	mul x,a 
      002ED6 9F               [ 1] 4375 	ld a,xl 
      002ED7 C7 52 00         [ 1] 4376 	ld SPI_CR1,a 
                                   4377 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EDA 72 1A 50 14      [ 1] 4378 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EDE 72 1A 50 16      [ 1] 4379 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4380 ; configure SPI as master mode 0.	
      002EE2 72 14 52 00      [ 1] 4381 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4382 ; ~CS line controlled by sofware 	
      002EE6 72 12 52 01      [ 1] 4383 	bset SPI_CR2,#SPI_CR2_SSM 
      002EEA 72 10 52 01      [ 1] 4384     bset SPI_CR2,#SPI_CR2_SSI 
                                   4385 ; enable SPI
      002EEE 72 1C 52 00      [ 1] 4386 	bset SPI_CR1,#SPI_CR1_SPE 	
      002EF2 81               [ 4] 4387 	ret 
      002EF3                       4388 spi_disable:
      002EF3                       4389 	_drop #2; throw first argument.
      002EF3 5B 02            [ 2]    1     addw sp,##2 
                                   4390 ; wait spi idle 
      002EF5 A6 82            [ 1] 4391 1$:	ld a,#0x82 
      002EF7 C4 52 03         [ 1] 4392 	and a,SPI_SR
      002EFA A1 02            [ 1] 4393 	cp a,#2 
      002EFC 26 F7            [ 1] 4394 	jrne 1$
      002EFE 72 1D 52 00      [ 1] 4395 	bres SPI_CR1,#SPI_CR1_SPE
      002F02 72 13 50 C7      [ 1] 4396 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F06 72 1B 50 16      [ 1] 4397 	bres PE_DDR,#SPI_CS_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002F0A 81               [ 4] 4398 	ret 
                                   4399 
      002F0B                       4400 spi_clear_error:
      002F0B A6 78            [ 1] 4401 	ld a,#0x78 
      002F0D C5 52 03         [ 1] 4402 	bcp a,SPI_SR 
      002F10 27 04            [ 1] 4403 	jreq 1$
      002F12 72 5F 52 03      [ 1] 4404 	clr SPI_SR 
      002F16 81               [ 4] 4405 1$: ret 
                                   4406 
      002F17                       4407 spi_send_byte:
      002F17 88               [ 1] 4408 	push a 
      002F18 CD 2F 0B         [ 4] 4409 	call spi_clear_error
      002F1B 84               [ 1] 4410 	pop a 
      002F1C 72 03 52 03 FB   [ 2] 4411 	btjf SPI_SR,#SPI_SR_TXE,.
      002F21 C7 52 04         [ 1] 4412 	ld SPI_DR,a
      002F24 72 01 52 03 FB   [ 2] 4413 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F29 C6 52 04         [ 1] 4414 	ld a,SPI_DR 
      002F2C 81               [ 4] 4415 	ret 
                                   4416 
      002F2D                       4417 spi_rcv_byte:
      002F2D A6 FF            [ 1] 4418 	ld a,#255
      002F2F 72 01 52 03 E3   [ 2] 4419 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F34 C6 52 04         [ 1] 4420 	ld a,SPI_DR 
      002F37 81               [ 4] 4421 	ret
                                   4422 
                                   4423 ;------------------------------
                                   4424 ; BASIC: SPIWR byte [,byte]
                                   4425 ; write 1 or more byte
                                   4426 ;------------------------------
      002F38                       4427 spi_write:
      002F38 CD 1A A5         [ 4] 4428 	call expression
      002F3B A1 84            [ 1] 4429 	cp a,#TK_INTGR 
      002F3D 27 03            [ 1] 4430 	jreq 1$
      002F3F CC 16 35         [ 2] 4431 	jp syntax_error 
      002F42                       4432 1$:	
      002F42 9F               [ 1] 4433 	ld a,xl 
      002F43 CD 2F 17         [ 4] 4434 	call spi_send_byte 
      002F46 CD 17 99         [ 4] 4435 	call next_token 
      002F49 A1 08            [ 1] 4436 	cp a,#TK_COMMA 
      002F4B 26 02            [ 1] 4437 	jrne 2$ 
      002F4D 20 E9            [ 2] 4438 	jra spi_write 
      002F4F 4D               [ 1] 4439 2$:	tnz a 
      002F50 27 05            [ 1] 4440 	jreq 3$
      002F52                       4441 	_unget_token  
      002F52 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F57 81               [ 4] 4442 3$:	ret 
                                   4443 
                                   4444 
                                   4445 ;-------------------------------
                                   4446 ; BASIC: SPIRD 	
                                   4447 ; read one byte from SPI 
                                   4448 ;-------------------------------
      002F58                       4449 spi_read:
      002F58 CD 2F 2D         [ 4] 4450 	call spi_rcv_byte 
      002F5B 5F               [ 1] 4451 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002F5C 97               [ 1] 4452 	ld xl,a 
      002F5D 4F               [ 1] 4453 	clr a  
      002F5E 81               [ 4] 4454 	ret 
                                   4455 
                                   4456 ;------------------------------
                                   4457 ; BASIC: SPISEL 0|1 
                                   4458 ; set state of ~CS line
                                   4459 ; 0|1 deselect|select  
                                   4460 ;------------------------------
      002F5F                       4461 spi_select:
      002F5F CD 17 99         [ 4] 4462 	call next_token 
      002F62 A1 84            [ 1] 4463 	cp a,#TK_INTGR 
      002F64 27 03            [ 1] 4464 	jreq 1$
      002F66 CC 16 35         [ 2] 4465 	jp syntax_error 
      002F69 5D               [ 2] 4466 1$: tnzw x  
      002F6A 27 05            [ 1] 4467 	jreq cs_high 
      002F6C 72 1B 50 14      [ 1] 4468 	bres PE_ODR,#SPI_CS_BIT
      002F70 81               [ 4] 4469 	ret 
      002F71                       4470 cs_high: 
      002F71 72 1A 50 14      [ 1] 4471 	bset PE_ODR,#SPI_CS_BIT
      002F75 81               [ 4] 4472 	ret 
                                   4473 
                                   4474 ;-------------------------------
                                   4475 ; BASIC: PAD 
                                   4476 ; Return pad buffer address.
                                   4477 ;------------------------------
      002F76                       4478 pad_ref:
      002F76 AE 16 E0         [ 2] 4479 	ldw x,#pad 
      002F79 4F               [ 1] 4480 	clr a
      002F7A 81               [ 4] 4481 	ret 
                                   4482 
                                   4483 ;****************************
                                   4484 ; expression stack 
                                   4485 ; manipulation routines
                                   4486 ;****************************
                                   4487 
                                   4488 ;-----------------------------
                                   4489 ; BASIC: PUSH expr|rel|cond 
                                   4490 ; push the result on xtack
                                   4491 ;-----------------------------
      002F7B                       4492 xpush:
      002F7B CD 1B BE         [ 4] 4493 	call condition 
      002F7E 81               [ 4] 4494 	ret 
                                   4495 
                                   4496 ;------------------------------
                                   4497 ; BASIC: POP 
                                   4498 ; pop top of xstack 
                                   4499 ;------------------------------
      002F7F                       4500 xpop:
      002F7F                       4501 	_xpop 
      002F7F 90 F6            [ 1]    1     ld a,(y)
      002F81 93               [ 1]    2     ldw x,y 
      002F82 EE 01            [ 2]    3     ldw x,(1,x)
      002F84 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F88 81               [ 4] 4502 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



                                   4503 
                                   4504 
                                   4505 ;------------------------------
                                   4506 ; BASIC: ALLOC expr 
                                   4507 ; allocate expr element on xtack 
                                   4508 ;-------------------------------
      002F89                       4509 xalloc: 
      002F89 CD 1A A5         [ 4] 4510 	call expression 
      002F8C A1 84            [ 1] 4511 	cp a,#TK_INTGR
      002F8E 27 03            [ 1] 4512 	jreq 1$ 
      002F90 CC 16 35         [ 2] 4513 	jp syntax_error
      002F93                       4514 1$: _xpop 
      002F93 90 F6            [ 1]    1     ld a,(y)
      002F95 93               [ 1]    2     ldw x,y 
      002F96 EE 01            [ 2]    3     ldw x,(1,x)
      002F98 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002F9C 4D               [ 1] 4515 	tnz a 
      002F9D 27 05            [ 1] 4516 	jreq 3$ 
      002F9F A6 0A            [ 1] 4517 2$:	ld a,#ERR_BAD_VALUE
      002FA1 CC 16 37         [ 2] 4518 	jp tb_error 
      002FA4 A3 00 14         [ 2] 4519 3$: cpw x,#XSTACK_SIZE 
      002FA7 22 F6            [ 1] 4520 	jrugt 2$
      002FA9 A6 03            [ 1] 4521 	ld a,#CELL_SIZE 
      002FAB 42               [ 4] 4522 	mul x,a 
      002FAC CF 00 0D         [ 2] 4523 	ldw acc16,x 
      002FAF 72 B2 00 0D      [ 2] 4524 	subw y,acc16 
      002FB3 90 A3 17 60      [ 2] 4525 	cpw y,#xstack_full
      002FB7 22 05            [ 1] 4526 	jrugt 9$
      002FB9 A6 01            [ 1] 4527 	ld a,#ERR_MEM_FULL
      002FBB CC 16 37         [ 2] 4528 	jp tb_error 
      002FBE                       4529 9$:	 
      002FBE 81               [ 4] 4530 	ret 
                                   4531 
                                   4532 
                                   4533 ;------------------------------
                                   4534 ;  BASIC DROP expr 
                                   4535 ;  expr in range {0..XSTACK_SIZE}
                                   4536 ;  discard n elements from xtack
                                   4537 ;------------------------------
      002FBF                       4538 xdrop:
      002FBF CD 1A A5         [ 4] 4539 	call expression 
      002FC2 A1 84            [ 1] 4540 	cp a,#TK_INTGR
      002FC4 27 03            [ 1] 4541 	jreq 1$ 
      002FC6 CC 16 35         [ 2] 4542 	jp syntax_error 
      002FC9                       4543 1$:	_xpop 
      002FC9 90 F6            [ 1]    1     ld a,(y)
      002FCB 93               [ 1]    2     ldw x,y 
      002FCC EE 01            [ 2]    3     ldw x,(1,x)
      002FCE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FD2 9F               [ 1] 4544 	ld a,xl 
      002FD3 A4 1F            [ 1] 4545 	and a,#0x1f 
      002FD5 5F               [ 1] 4546 	clrw x 
      002FD6 97               [ 1] 4547 	ld xl,a 
      002FD7 A6 03            [ 1] 4548 	ld a,#CELL_SIZE 
      002FD9 42               [ 4] 4549 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002FDA CF 00 0D         [ 2] 4550 	ldw acc16,x  
      002FDD 72 B9 00 0D      [ 2] 4551 	addw y,acc16 
      002FE1 90 A3 17 73      [ 2] 4552 	cpw y,#XSTACK_EMPTY 
      002FE5 23 04            [ 2] 4553 	jrule 9$
      002FE7 90 AE 17 73      [ 2] 4554 	ldw y,#XSTACK_EMPTY 
      002FEB 81               [ 4] 4555 9$:	ret 
                                   4556 
                                   4557 ;-----------------------
                                   4558 ; check if value in A:X 
                                   4559 ; is inside xstack bound
                                   4560 ; output:
                                   4561 ;    X     slot address  
                                   4562 ;-----------------------
      002FEC                       4563 xstack_bound:
      002FEC 4D               [ 1] 4564 	tnz a 
      002FED 26 16            [ 1] 4565 	jrne 8$ 
      002FEF A3 00 14         [ 2] 4566 1$: cpw x,#XSTACK_SIZE 
      002FF2 22 11            [ 1] 4567 	jrugt 8$
      002FF4 A6 03            [ 1] 4568 	ld a,#CELL_SIZE 
      002FF6 42               [ 4] 4569 	mul x,a
      002FF7 CF 00 0D         [ 2] 4570 	ldw acc16,x 
      002FFA 93               [ 1] 4571 	ldw x,y 
      002FFB 72 BB 00 0D      [ 2] 4572 	addw x,acc16 
      002FFF A3 17 73         [ 2] 4573 	cpw x,#XSTACK_EMPTY 
      003002 24 01            [ 1] 4574 	jruge 8$  
      003004 81               [ 4] 4575 	ret 
      003005 A6 0A            [ 1] 4576 8$: ld a,#ERR_BAD_VALUE
      003007 CC 16 37         [ 2] 4577 	jp tb_error 
                                   4578 
                                   4579 ;-------------------------
                                   4580 ; BASIC: PUT expr, cond 
                                   4581 ; expr -> slot 
                                   4582 ; cond -> valut to put 
                                   4583 ; on xstack 
                                   4584 ;-------------------------
      00300A                       4585 xput:
      00300A CD 19 61         [ 4] 4586 	call arg_list 
      00300D A1 02            [ 1] 4587 	cp a,#2 
      00300F 27 03            [ 1] 4588 	jreq 1$ 
      003011 CC 16 35         [ 2] 4589 0$:	jp syntax_error
      003014                       4590 1$: _xpop   ; value to put 
      003014 90 F6            [ 1]    1     ld a,(y)
      003016 93               [ 1]    2     ldw x,y 
      003017 EE 01            [ 2]    3     ldw x,(1,x)
      003019 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00301D 89               [ 2] 4591 	pushw x 
      00301E 88               [ 1] 4592 	push a 
      00301F                       4593 	_xpop    ; slot 
      00301F 90 F6            [ 1]    1     ld a,(y)
      003021 93               [ 1]    2     ldw x,y 
      003022 EE 01            [ 2]    3     ldw x,(1,x)
      003024 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003028 CD 2F EC         [ 4] 4594 	call xstack_bound
      00302B CF 00 19         [ 2] 4595     ldw ptr16,x 
      00302E 84               [ 1] 4596 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      00302F 85               [ 2] 4597 	popw x 
      003030 72 C7 00 19      [ 4] 4598 	ld [ptr16],a 
      003034 72 5C 00 1A      [ 1] 4599 	inc ptr8 
      003038 72 CF 00 19      [ 5] 4600 	ldw [ptr16],x 
      00303C 81               [ 4] 4601 	ret 
                                   4602 
                                   4603 ;------------------------
                                   4604 ; BASIC: PICK expr 
                                   4605 ; get nième element on 
                                   4606 ; xtack. 
                                   4607 ;-----------------------
      00303D                       4608 xpick:
      00303D CD 19 5C         [ 4] 4609 	call func_args 
      003040 A1 01            [ 1] 4610 	cp a,#1 
      003042 27 03            [ 1] 4611 	jreq 1$
      003044 CC 16 35         [ 2] 4612 	jp syntax_error 
      003047                       4613 1$: _xpop 
      003047 90 F6            [ 1]    1     ld a,(y)
      003049 93               [ 1]    2     ldw x,y 
      00304A EE 01            [ 2]    3     ldw x,(1,x)
      00304C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003050 CD 2F EC         [ 4] 4614 	call xstack_bound
      003053 F6               [ 1] 4615     ld a,(x)
      003054 EE 01            [ 2] 4616 	ldw x,(1,x)				
      003056 81               [ 4] 4617 	ret 
                                   4618 
                                   4619 
                                   4620 
                                   4621 ;------------------------------
                                   4622 ;      dictionary 
                                   4623 ; format:
                                   4624 ;   link:   2 bytes 
                                   4625 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4626 ;   cmd_name: 16 byte max 
                                   4627 ;   code_addr: 2 bytes 
                                   4628 ;------------------------------
                                   4629 	.macro _dict_entry len,name,code_addr 
                                   4630 	.word LINK 
                                   4631 	LINK=.
                                   4632 name:
                                   4633 	.byte len   	
                                   4634 	.ascii "name"
                                   4635 	.word code_addr  
                                   4636 	.endm 
                                   4637 
                           000000  4638 	LINK=0
                                   4639 ; respect alphabetic order for BASIC names from Z-A
                                   4640 ; this sort order is for a cleaner WORDS cmd output. 	
      003057                       4641 kword_end:
      003057                       4642 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      003057 00 00                    1 	.word LINK 
                           003059     2 	LINK=.
      003059                          3 XOR:
      003059 A3                       4 	.byte 3+F_XOR   	
      00305A 58 4F 52                 5 	.ascii "XOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      00305D 00 8A                    6 	.word TK_XOR  
      00305F                       4643 	_dict_entry,5,WRITE,write  
      00305F 30 59                    1 	.word LINK 
                           003061     2 	LINK=.
      003061                          3 WRITE:
      003061 05                       4 	.byte 5   	
      003062 57 52 49 54 45           5 	.ascii "WRITE"
      003067 28 C4                    6 	.word write  
      003069                       4644 	_dict_entry,5,WORDS,words 
      003069 30 61                    1 	.word LINK 
                           00306B     2 	LINK=.
      00306B                          3 WORDS:
      00306B 05                       4 	.byte 5   	
      00306C 57 4F 52 44 53           5 	.ascii "WORDS"
      003071 2C 3C                    6 	.word words  
      003073                       4645 	_dict_entry 4,WAIT,wait 
      003073 30 6B                    1 	.word LINK 
                           003075     2 	LINK=.
      003075                          3 WAIT:
      003075 04                       4 	.byte 4   	
      003076 57 41 49 54              5 	.ascii "WAIT"
      00307A 20 BB                    6 	.word wait  
      00307C                       4646 	_dict_entry,3+F_IFUNC,USR,usr
      00307C 30 75                    1 	.word LINK 
                           00307E     2 	LINK=.
      00307E                          3 USR:
      00307E 13                       4 	.byte 3+F_IFUNC   	
      00307F 55 53 52                 5 	.ascii "USR"
      003082 29 E1                    6 	.word usr  
      003084                       4647 	_dict_entry,5,UNTIL,until 
      003084 30 7E                    1 	.word LINK 
                           003086     2 	LINK=.
      003086                          3 UNTIL:
      003086 05                       4 	.byte 5   	
      003087 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00308C 2D 71                    6 	.word until  
      00308E                       4648 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00308E 30 86                    1 	.word LINK 
                           003090     2 	LINK=.
      003090                          3 UFLASH:
      003090 16                       4 	.byte 6+F_IFUNC   	
      003091 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      003097 29 C4                    6 	.word uflash  
      003099                       4649 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003099 30 90                    1 	.word LINK 
                           00309B     2 	LINK=.
      00309B                          3 UBOUND:
      00309B 16                       4 	.byte 6+F_IFUNC   	
      00309C 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0030A2 1C 72                    6 	.word ubound  
      0030A4                       4650 	_dict_entry,4,TONE,tone  
      0030A4 30 9B                    1 	.word LINK 
                           0030A6     2 	LINK=.
      0030A6                          3 TONE:
      0030A6 04                       4 	.byte 4   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      0030A7 54 4F 4E 45              5 	.ascii "TONE"
      0030AB 25 25                    6 	.word tone  
      0030AD                       4651 	_dict_entry,2,TO,to
      0030AD 30 A6                    1 	.word LINK 
                           0030AF     2 	LINK=.
      0030AF                          3 TO:
      0030AF 02                       4 	.byte 2   	
      0030B0 54 4F                    5 	.ascii "TO"
      0030B2 22 25                    6 	.word to  
      0030B4                       4652 	_dict_entry,5,TIMER,set_timer
      0030B4 30 AF                    1 	.word LINK 
                           0030B6     2 	LINK=.
      0030B6                          3 TIMER:
      0030B6 05                       4 	.byte 5   	
      0030B7 54 49 4D 45 52           5 	.ascii "TIMER"
      0030BC 2C A6                    6 	.word set_timer  
      0030BE                       4653 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      0030BE 30 B6                    1 	.word LINK 
                           0030C0     2 	LINK=.
      0030C0                          3 TIMEOUT:
      0030C0 17                       4 	.byte 7+F_IFUNC   	
      0030C1 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      0030C8 2C BD                    6 	.word timeout  
      0030CA                       4654 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      0030CA 30 C0                    1 	.word LINK 
                           0030CC     2 	LINK=.
      0030CC                          3 TICKS:
      0030CC 15                       4 	.byte 5+F_IFUNC   	
      0030CD 54 49 43 4B 53           5 	.ascii "TICKS"
      0030D2 2A 8D                    6 	.word get_ticks  
      0030D4                       4655 	_dict_entry,4,STOP,stop 
      0030D4 30 CC                    1 	.word LINK 
                           0030D6     2 	LINK=.
      0030D6                          3 STOP:
      0030D6 04                       4 	.byte 4   	
      0030D7 53 54 4F 50              5 	.ascii "STOP"
      0030DB 26 8E                    6 	.word stop  
      0030DD                       4656 	_dict_entry,4,STEP,step 
      0030DD 30 D6                    1 	.word LINK 
                           0030DF     2 	LINK=.
      0030DF                          3 STEP:
      0030DF 04                       4 	.byte 4   	
      0030E0 53 54 45 50              5 	.ascii "STEP"
      0030E4 22 6B                    6 	.word step  
      0030E6                       4657 	_dict_entry,5,SPIWR,spi_write
      0030E6 30 DF                    1 	.word LINK 
                           0030E8     2 	LINK=.
      0030E8                          3 SPIWR:
      0030E8 05                       4 	.byte 5   	
      0030E9 53 50 49 57 52           5 	.ascii "SPIWR"
      0030EE 2F 38                    6 	.word spi_write  
      0030F0                       4658 	_dict_entry,6,SPISEL,spi_select
      0030F0 30 E8                    1 	.word LINK 
                           0030F2     2 	LINK=.
      0030F2                          3 SPISEL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      0030F2 06                       4 	.byte 6   	
      0030F3 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      0030F9 2F 5F                    6 	.word spi_select  
      0030FB                       4659 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      0030FB 30 F2                    1 	.word LINK 
                           0030FD     2 	LINK=.
      0030FD                          3 SPIRD:
      0030FD 15                       4 	.byte 5+F_IFUNC   	
      0030FE 53 50 49 52 44           5 	.ascii "SPIRD"
      003103 2F 58                    6 	.word spi_read  
      003105                       4660 	_dict_entry,5,SPIEN,spi_enable 
      003105 30 FD                    1 	.word LINK 
                           003107     2 	LINK=.
      003107                          3 SPIEN:
      003107 05                       4 	.byte 5   	
      003108 53 50 49 45 4E           5 	.ascii "SPIEN"
      00310D 2E C0                    6 	.word spi_enable  
      00310F                       4661 	_dict_entry,5,SLEEP,sleep 
      00310F 31 07                    1 	.word LINK 
                           003111     2 	LINK=.
      003111                          3 SLEEP:
      003111 05                       4 	.byte 5   	
      003112 53 4C 45 45 50           5 	.ascii "SLEEP"
      003117 2A 10                    6 	.word sleep  
      003119                       4662     _dict_entry,4,SIZE,cmd_size 
      003119 31 11                    1 	.word LINK 
                           00311B     2 	LINK=.
      00311B                          3 SIZE:
      00311B 04                       4 	.byte 4   	
      00311C 53 49 5A 45              5 	.ascii "SIZE"
      003120 1C 45                    6 	.word cmd_size  
      003122                       4663 	_dict_entry,4,SAVE,save_app 
      003122 31 1B                    1 	.word LINK 
                           003124     2 	LINK=.
      003124                          3 SAVE:
      003124 04                       4 	.byte 4   	
      003125 53 41 56 45              5 	.ascii "SAVE"
      003129 27 D5                    6 	.word save_app  
      00312B                       4664 	_dict_entry 3,RUN,run
      00312B 31 24                    1 	.word LINK 
                           00312D     2 	LINK=.
      00312D                          3 RUN:
      00312D 03                       4 	.byte 3   	
      00312E 52 55 4E                 5 	.ascii "RUN"
      003131 24 81                    6 	.word run  
      003133                       4665 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003133 31 2D                    1 	.word LINK 
                           003135     2 	LINK=.
      003135                          3 RSHIFT:
      003135 16                       4 	.byte 6+F_IFUNC   	
      003136 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00313C 2A D7                    6 	.word rshift  
      00313E                       4666 	_dict_entry,3+F_IFUNC,RND,random 
      00313E 31 35                    1 	.word LINK 
                           003140     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003140                          3 RND:
      003140 13                       4 	.byte 3+F_IFUNC   	
      003141 52 4E 44                 5 	.ascii "RND"
      003144 2B A1                    6 	.word random  
      003146                       4667 	_dict_entry,6,RETURN,return 
      003146 31 40                    1 	.word LINK 
                           003148     2 	LINK=.
      003148                          3 RETURN:
      003148 06                       4 	.byte 6   	
      003149 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00314F 24 64                    6 	.word return  
      003151                       4668 	_dict_entry,7,RESTORE,restore 
      003151 31 48                    1 	.word LINK 
                           003153     2 	LINK=.
      003153                          3 RESTORE:
      003153 07                       4 	.byte 7   	
      003154 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      00315B 2E 08                    6 	.word restore  
      00315D                       4669 	_dict_entry 3,REM,remark 
      00315D 31 53                    1 	.word LINK 
                           00315F     2 	LINK=.
      00315F                          3 REM:
      00315F 03                       4 	.byte 3   	
      003160 52 45 4D                 5 	.ascii "REM"
      003163 20 B5                    6 	.word remark  
      003165                       4670 	_dict_entry,6,REBOOT,cold_start
      003165 31 5F                    1 	.word LINK 
                           003167     2 	LINK=.
      003167                          3 REBOOT:
      003167 06                       4 	.byte 6   	
      003168 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      00316E 00 B5                    6 	.word cold_start  
      003170                       4671 	_dict_entry,4+F_IFUNC,READ,read  
      003170 31 67                    1 	.word LINK 
                           003172     2 	LINK=.
      003172                          3 READ:
      003172 14                       4 	.byte 4+F_IFUNC   	
      003173 52 45 41 44              5 	.ascii "READ"
      003177 2E 72                    6 	.word read  
      003179                       4672 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003179 31 72                    1 	.word LINK 
                           00317B     2 	LINK=.
      00317B                          3 QKEY:
      00317B 14                       4 	.byte 4+F_IFUNC   	
      00317C 51 4B 45 59              5 	.ascii "QKEY"
      003180 29 87                    6 	.word qkey  
      003182                       4673 	_dict_entry,3,PUT,xput 
      003182 31 7B                    1 	.word LINK 
                           003184     2 	LINK=.
      003184                          3 PUT:
      003184 03                       4 	.byte 3   	
      003185 50 55 54                 5 	.ascii "PUT"
      003188 30 0A                    6 	.word xput  
      00318A                       4674 	_dict_entry,4,PUSH,xpush   
      00318A 31 84                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



                           00318C     2 	LINK=.
      00318C                          3 PUSH:
      00318C 04                       4 	.byte 4   	
      00318D 50 55 53 48              5 	.ascii "PUSH"
      003191 2F 7B                    6 	.word xpush  
      003193                       4675 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003193 31 8C                    1 	.word LINK 
                           003195     2 	LINK=.
      003195                          3 PORTI:
      003195 15                       4 	.byte 5+F_IFUNC   	
      003196 50 4F 52 54 49           5 	.ascii "PORTI"
      00319B 2D C7                    6 	.word const_porti  
      00319D                       4676 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      00319D 31 95                    1 	.word LINK 
                           00319F     2 	LINK=.
      00319F                          3 PORTG:
      00319F 15                       4 	.byte 5+F_IFUNC   	
      0031A0 50 4F 52 54 47           5 	.ascii "PORTG"
      0031A5 2D C2                    6 	.word const_portg  
      0031A7                       4677 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      0031A7 31 9F                    1 	.word LINK 
                           0031A9     2 	LINK=.
      0031A9                          3 PORTF:
      0031A9 15                       4 	.byte 5+F_IFUNC   	
      0031AA 50 4F 52 54 46           5 	.ascii "PORTF"
      0031AF 2D BD                    6 	.word const_portf  
      0031B1                       4678 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      0031B1 31 A9                    1 	.word LINK 
                           0031B3     2 	LINK=.
      0031B3                          3 PORTE:
      0031B3 15                       4 	.byte 5+F_IFUNC   	
      0031B4 50 4F 52 54 45           5 	.ascii "PORTE"
      0031B9 2D B8                    6 	.word const_porte  
      0031BB                       4679 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      0031BB 31 B3                    1 	.word LINK 
                           0031BD     2 	LINK=.
      0031BD                          3 PORTD:
      0031BD 15                       4 	.byte 5+F_IFUNC   	
      0031BE 50 4F 52 54 44           5 	.ascii "PORTD"
      0031C3 2D B3                    6 	.word const_portd  
      0031C5                       4680 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      0031C5 31 BD                    1 	.word LINK 
                           0031C7     2 	LINK=.
      0031C7                          3 PORTC:
      0031C7 15                       4 	.byte 5+F_IFUNC   	
      0031C8 50 4F 52 54 43           5 	.ascii "PORTC"
      0031CD 2D AE                    6 	.word const_portc  
      0031CF                       4681 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      0031CF 31 C7                    1 	.word LINK 
                           0031D1     2 	LINK=.
      0031D1                          3 PORTB:
      0031D1 15                       4 	.byte 5+F_IFUNC   	
      0031D2 50 4F 52 54 42           5 	.ascii "PORTB"
      0031D7 2D A9                    6 	.word const_portb  
      0031D9                       4682 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0031D9 31 D1                    1 	.word LINK 
                           0031DB     2 	LINK=.
      0031DB                          3 PORTA:
      0031DB 15                       4 	.byte 5+F_IFUNC   	
      0031DC 50 4F 52 54 41           5 	.ascii "PORTA"
      0031E1 2D A4                    6 	.word const_porta  
      0031E3                       4683 	_dict_entry 5,PRINT,print 
      0031E3 31 DB                    1 	.word LINK 
                           0031E5     2 	LINK=.
      0031E5                          3 PRINT:
      0031E5 05                       4 	.byte 5   	
      0031E6 50 52 49 4E 54           5 	.ascii "PRINT"
      0031EB 1F 6D                    6 	.word print  
      0031ED                       4684 	_dict_entry,4+F_IFUNC,POUT,const_output
      0031ED 31 E5                    1 	.word LINK 
                           0031EF     2 	LINK=.
      0031EF                          3 POUT:
      0031EF 14                       4 	.byte 4+F_IFUNC   	
      0031F0 50 4F 55 54              5 	.ascii "POUT"
      0031F4 2D E5                    6 	.word const_output  
      0031F6                       4685 	_dict_entry,3+F_IFUNC,POP,xpop 
      0031F6 31 EF                    1 	.word LINK 
                           0031F8     2 	LINK=.
      0031F8                          3 POP:
      0031F8 13                       4 	.byte 3+F_IFUNC   	
      0031F9 50 4F 50                 5 	.ascii "POP"
      0031FC 2F 7F                    6 	.word xpop  
      0031FE                       4686 	_dict_entry,4,POKE,poke 
      0031FE 31 F8                    1 	.word LINK 
                           003200     2 	LINK=.
      003200                          3 POKE:
      003200 04                       4 	.byte 4   	
      003201 50 4F 4B 45              5 	.ascii "POKE"
      003205 21 96                    6 	.word poke  
      003207                       4687 	_dict_entry,5,PMODE,pin_mode 
      003207 32 00                    1 	.word LINK 
                           003209     2 	LINK=.
      003209                          3 PMODE:
      003209 05                       4 	.byte 5   	
      00320A 50 4D 4F 44 45           5 	.ascii "PMODE"
      00320F 2B 12                    6 	.word pin_mode  
      003211                       4688 	_dict_entry,4+F_IFUNC,PINP,const_input
      003211 32 09                    1 	.word LINK 
                           003213     2 	LINK=.
      003213                          3 PINP:
      003213 14                       4 	.byte 4+F_IFUNC   	
      003214 50 49 4E 50              5 	.ascii "PINP"
      003218 2D EA                    6 	.word const_input  
      00321A                       4689 	_dict_entry,4+F_IFUNC,PICK,xpick 
      00321A 32 13                    1 	.word LINK 
                           00321C     2 	LINK=.
      00321C                          3 PICK:
      00321C 14                       4 	.byte 4+F_IFUNC   	
      00321D 50 49 43 4B              5 	.ascii "PICK"
      003221 30 3D                    6 	.word xpick  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      003223                       4690 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003223 32 1C                    1 	.word LINK 
                           003225     2 	LINK=.
      003225                          3 PEEK:
      003225 14                       4 	.byte 4+F_IFUNC   	
      003226 50 45 45 4B              5 	.ascii "PEEK"
      00322A 21 B7                    6 	.word peek  
      00322C                       4691 	_dict_entry,5,PAUSE,pause 
      00322C 32 25                    1 	.word LINK 
                           00322E     2 	LINK=.
      00322E                          3 PAUSE:
      00322E 05                       4 	.byte 5   	
      00322F 50 41 55 53 45           5 	.ascii "PAUSE"
      003234 2A 1B                    6 	.word pause  
      003236                       4692 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      003236 32 2E                    1 	.word LINK 
                           003238     2 	LINK=.
      003238                          3 PAD:
      003238 13                       4 	.byte 3+F_IFUNC   	
      003239 50 41 44                 5 	.ascii "PAD"
      00323C 2F 76                    6 	.word pad_ref  
      00323E                       4693 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      00323E 32 38                    1 	.word LINK 
                           003240     2 	LINK=.
      003240                          3 OR:
      003240 92                       4 	.byte 2+F_OR   	
      003241 4F 52                    5 	.ascii "OR"
      003243 00 89                    6 	.word TK_OR  
      003245                       4694 	_dict_entry,2,ON,cmd_on 
      003245 32 40                    1 	.word LINK 
                           003247     2 	LINK=.
      003247                          3 ON:
      003247 02                       4 	.byte 2   	
      003248 4F 4E                    5 	.ascii "ON"
      00324A 23 94                    6 	.word cmd_on  
      00324C                       4695 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00324C 32 47                    1 	.word LINK 
                           00324E     2 	LINK=.
      00324E                          3 ODR:
      00324E 13                       4 	.byte 3+F_IFUNC   	
      00324F 4F 44 52                 5 	.ascii "ODR"
      003252 2D CC                    6 	.word const_odr  
      003254                       4696 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      003254 32 4E                    1 	.word LINK 
                           003256     2 	LINK=.
      003256                          3 NOT:
      003256 73                       4 	.byte 3+F_NOT   	
      003257 4E 4F 54                 5 	.ascii "NOT"
      00325A 00 87                    6 	.word TK_NOT  
      00325C                       4697 	_dict_entry,4,NEXT,next 
      00325C 32 56                    1 	.word LINK 
                           00325E     2 	LINK=.
      00325E                          3 NEXT:
      00325E 04                       4 	.byte 4   	
      00325F 4E 45 58 54              5 	.ascii "NEXT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      003263 22 AD                    6 	.word next  
      003265                       4698 	_dict_entry,3,NEW,new
      003265 32 5E                    1 	.word LINK 
                           003267     2 	LINK=.
      003267                          3 NEW:
      003267 03                       4 	.byte 3   	
      003268 4E 45 57                 5 	.ascii "NEW"
      00326B 26 DA                    6 	.word new  
      00326D                       4699 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      00326D 32 67                    1 	.word LINK 
                           00326F     2 	LINK=.
      00326F                          3 LSHIFT:
      00326F 16                       4 	.byte 6+F_IFUNC   	
      003270 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003276 2A AB                    6 	.word lshift  
      003278                       4700 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003278 32 6F                    1 	.word LINK 
                           00327A     2 	LINK=.
      00327A                          3 LOG2:
      00327A 14                       4 	.byte 4+F_IFUNC   	
      00327B 4C 4F 47 32              5 	.ascii "LOG2"
      00327F 2D 0B                    6 	.word log2  
      003281                       4701 	_dict_entry 4,LIST,list
      003281 32 7A                    1 	.word LINK 
                           003283     2 	LINK=.
      003283                          3 LIST:
      003283 04                       4 	.byte 4   	
      003284 4C 49 53 54              5 	.ascii "LIST"
      003288 1E 7C                    6 	.word list  
      00328A                       4702 	_dict_entry 3,LET,let 
      00328A 32 83                    1 	.word LINK 
                           00328C     2 	LINK=.
      00328C                          3 LET:
      00328C 03                       4 	.byte 3   	
      00328D 4C 45 54                 5 	.ascii "LET"
      003290 1C 7D                    6 	.word let  
      003292                       4703 	_dict_entry,3+F_CFUNC,KEY,key 
      003292 32 8C                    1 	.word LINK 
                           003294     2 	LINK=.
      003294                          3 KEY:
      003294 23                       4 	.byte 3+F_CFUNC   	
      003295 4B 45 59                 5 	.ascii "KEY"
      003298 29 83                    6 	.word key  
      00329A                       4704 	_dict_entry,7,IWDGREF,refresh_iwdg
      00329A 32 94                    1 	.word LINK 
                           00329C     2 	LINK=.
      00329C                          3 IWDGREF:
      00329C 07                       4 	.byte 7   	
      00329D 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0032A4 2D 06                    6 	.word refresh_iwdg  
      0032A6                       4705 	_dict_entry,6,IWDGEN,enable_iwdg
      0032A6 32 9C                    1 	.word LINK 
                           0032A8     2 	LINK=.
      0032A8                          3 IWDGEN:
      0032A8 06                       4 	.byte 6   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0032A9 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0032AF 2C C8                    6 	.word enable_iwdg  
      0032B1                       4706 	_dict_entry,5,INPUT,input_var  
      0032B1 32 A8                    1 	.word LINK 
                           0032B3     2 	LINK=.
      0032B3                          3 INPUT:
      0032B3 05                       4 	.byte 5   	
      0032B4 49 4E 50 55 54           5 	.ascii "INPUT"
      0032B9 20 16                    6 	.word input_var  
      0032BB                       4707 	_dict_entry,2,IF,if 
      0032BB 32 B3                    1 	.word LINK 
                           0032BD     2 	LINK=.
      0032BD                          3 IF:
      0032BD 02                       4 	.byte 2   	
      0032BE 49 46                    5 	.ascii "IF"
      0032C0 21 D8                    6 	.word if  
      0032C2                       4708 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      0032C2 32 BD                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 IDR:
      0032C4 13                       4 	.byte 3+F_IFUNC   	
      0032C5 49 44 52                 5 	.ascii "IDR"
      0032C8 2D D1                    6 	.word const_idr  
      0032CA                       4709 	_dict_entry,3,HEX,hex_base
      0032CA 32 C4                    1 	.word LINK 
                           0032CC     2 	LINK=.
      0032CC                          3 HEX:
      0032CC 03                       4 	.byte 3   	
      0032CD 48 45 58                 5 	.ascii "HEX"
      0032D0 1C 32                    6 	.word hex_base  
      0032D2                       4710 	_dict_entry,4,GOTO,goto 
      0032D2 32 CC                    1 	.word LINK 
                           0032D4     2 	LINK=.
      0032D4                          3 GOTO:
      0032D4 04                       4 	.byte 4   	
      0032D5 47 4F 54 4F              5 	.ascii "GOTO"
      0032D9 24 26                    6 	.word goto  
      0032DB                       4711 	_dict_entry,5,GOSUB,gosub 
      0032DB 32 D4                    1 	.word LINK 
                           0032DD     2 	LINK=.
      0032DD                          3 GOSUB:
      0032DD 05                       4 	.byte 5   	
      0032DE 47 4F 53 55 42           5 	.ascii "GOSUB"
      0032E3 24 40                    6 	.word gosub  
      0032E5                       4712 	_dict_entry,3,GET,cmd_get 
      0032E5 32 DD                    1 	.word LINK 
                           0032E7     2 	LINK=.
      0032E7                          3 GET:
      0032E7 03                       4 	.byte 3   	
      0032E8 47 45 54                 5 	.ascii "GET"
      0032EB 24 ED                    6 	.word cmd_get  
      0032ED                       4713 	_dict_entry,4+F_IFUNC,FREE,free
      0032ED 32 E7                    1 	.word LINK 
                           0032EF     2 	LINK=.
      0032EF                          3 FREE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0032EF 14                       4 	.byte 4+F_IFUNC   	
      0032F0 46 52 45 45              5 	.ascii "FREE"
      0032F4 1C 3C                    6 	.word free  
      0032F6                       4714 	_dict_entry,3,FOR,for 
      0032F6 32 EF                    1 	.word LINK 
                           0032F8     2 	LINK=.
      0032F8                          3 FOR:
      0032F8 03                       4 	.byte 3   	
      0032F9 46 4F 52                 5 	.ascii "FOR"
      0032FC 21 F5                    6 	.word for  
      0032FE                       4715 	_dict_entry,4,FCPU,fcpu 
      0032FE 32 F8                    1 	.word LINK 
                           003300     2 	LINK=.
      003300                          3 FCPU:
      003300 04                       4 	.byte 4   	
      003301 46 43 50 55              5 	.ascii "FCPU"
      003305 2B 03                    6 	.word fcpu  
      003307                       4716 	_dict_entry,5,ERASE,erase 
      003307 33 00                    1 	.word LINK 
                           003309     2 	LINK=.
      003309                          3 ERASE:
      003309 05                       4 	.byte 5   	
      00330A 45 52 41 53 45           5 	.ascii "ERASE"
      00330F 26 E4                    6 	.word erase  
      003311                       4717 	_dict_entry,3,END,cmd_end  
      003311 33 09                    1 	.word LINK 
                           003313     2 	LINK=.
      003313                          3 END:
      003313 03                       4 	.byte 3   	
      003314 45 4E 44                 5 	.ascii "END"
      003317 24 E6                    6 	.word cmd_end  
      003319                       4718 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      003319 33 13                    1 	.word LINK 
                           00331B     2 	LINK=.
      00331B                          3 EEPROM:
      00331B 16                       4 	.byte 6+F_IFUNC   	
      00331C 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003322 2D EF                    6 	.word const_eeprom_base  
      003324                       4719 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003324 33 1B                    1 	.word LINK 
                           003326     2 	LINK=.
      003326                          3 EEFREE:
      003326 16                       4 	.byte 6+F_IFUNC   	
      003327 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00332D 1C D1                    6 	.word func_eefree  
      00332F                       4720 	_dict_entry,4,EDIT,edit 
      00332F 33 26                    1 	.word LINK 
                           003331     2 	LINK=.
      003331                          3 EDIT:
      003331 04                       4 	.byte 4   	
      003332 45 44 49 54              5 	.ascii "EDIT"
      003336 1F 05                    6 	.word edit  
      003338                       4721 	_dict_entry,6+F_CMD,DWRITE,digital_write
      003338 33 31                    1 	.word LINK 
                           00333A     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      00333A                          3 DWRITE:
      00333A 06                       4 	.byte 6+F_CMD   	
      00333B 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003341 26 43                    6 	.word digital_write  
      003343                       4722 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      003343 33 3A                    1 	.word LINK 
                           003345     2 	LINK=.
      003345                          3 DROP:
      003345 04                       4 	.byte 4   	
      003346 44 52 4F 50              5 	.ascii "DROP"
      00334A 2F BF                    6 	.word xdrop  
      00334C                       4723 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00334C 33 45                    1 	.word LINK 
                           00334E     2 	LINK=.
      00334E                          3 DREAD:
      00334E 15                       4 	.byte 5+F_IFUNC   	
      00334F 44 52 45 41 44           5 	.ascii "DREAD"
      003354 26 0C                    6 	.word digital_read  
      003356                       4724 	_dict_entry,2,DO,do_loop
      003356 33 4E                    1 	.word LINK 
                           003358     2 	LINK=.
      003358                          3 DO:
      003358 02                       4 	.byte 2   	
      003359 44 4F                    5 	.ascii "DO"
      00335B 2D 5E                    6 	.word do_loop  
      00335D                       4725 	_dict_entry,3,DIM,cmd_dim 
      00335D 33 58                    1 	.word LINK 
                           00335F     2 	LINK=.
      00335F                          3 DIM:
      00335F 03                       4 	.byte 3   	
      003360 44 49 4D                 5 	.ascii "DIM"
      003363 1D 55                    6 	.word cmd_dim  
      003365                       4726 	_dict_entry,3,DEC,dec_base
      003365 33 5F                    1 	.word LINK 
                           003367     2 	LINK=.
      003367                          3 DEC:
      003367 03                       4 	.byte 3   	
      003368 44 45 43                 5 	.ascii "DEC"
      00336B 1C 37                    6 	.word dec_base  
      00336D                       4727 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      00336D 33 67                    1 	.word LINK 
                           00336F     2 	LINK=.
      00336F                          3 DDR:
      00336F 13                       4 	.byte 3+F_IFUNC   	
      003370 44 44 52                 5 	.ascii "DDR"
      003373 2D D6                    6 	.word const_ddr  
      003375                       4728 	_dict_entry,4,DATA,data  
      003375 33 6F                    1 	.word LINK 
                           003377     2 	LINK=.
      003377                          3 DATA:
      003377 04                       4 	.byte 4   	
      003378 44 41 54 41              5 	.ascii "DATA"
      00337C 2D F4                    6 	.word data  
      00337E                       4729 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      00337E 33 77                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



                           003380     2 	LINK=.
      003380                          3 CR2:
      003380 13                       4 	.byte 3+F_IFUNC   	
      003381 43 52 32                 5 	.ascii "CR2"
      003384 2D E0                    6 	.word const_cr2  
      003386                       4730 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      003386 33 80                    1 	.word LINK 
                           003388     2 	LINK=.
      003388                          3 CR1:
      003388 13                       4 	.byte 3+F_IFUNC   	
      003389 43 52 31                 5 	.ascii "CR1"
      00338C 2D DB                    6 	.word const_cr1  
      00338E                       4731 	_dict_entry,5,CONST,cmd_const 
      00338E 33 88                    1 	.word LINK 
                           003390     2 	LINK=.
      003390                          3 CONST:
      003390 05                       4 	.byte 5   	
      003391 43 4F 4E 53 54           5 	.ascii "CONST"
      003396 1D 41                    6 	.word cmd_const  
      003398                       4732 	_dict_entry,4+F_CFUNC,CHAR,func_char
      003398 33 90                    1 	.word LINK 
                           00339A     2 	LINK=.
      00339A                          3 CHAR:
      00339A 24                       4 	.byte 4+F_CFUNC   	
      00339B 43 48 41 52              5 	.ascii "CHAR"
      00339F 29 2D                    6 	.word func_char  
      0033A1                       4733 	_dict_entry,3,BYE,bye 
      0033A1 33 9A                    1 	.word LINK 
                           0033A3     2 	LINK=.
      0033A3                          3 BYE:
      0033A3 03                       4 	.byte 3   	
      0033A4 42 59 45                 5 	.ascii "BYE"
      0033A7 2A 07                    6 	.word bye  
      0033A9                       4734 	_dict_entry,5,BTOGL,bit_toggle
      0033A9 33 A3                    1 	.word LINK 
                           0033AB     2 	LINK=.
      0033AB                          3 BTOGL:
      0033AB 05                       4 	.byte 5   	
      0033AC 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0033B1 21 3D                    6 	.word bit_toggle  
      0033B3                       4735 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0033B3 33 AB                    1 	.word LINK 
                           0033B5     2 	LINK=.
      0033B5                          3 BTEST:
      0033B5 15                       4 	.byte 5+F_IFUNC   	
      0033B6 42 54 45 53 54           5 	.ascii "BTEST"
      0033BB 21 5F                    6 	.word bit_test  
      0033BD                       4736 	_dict_entry,4,BSET,bit_set 
      0033BD 33 B5                    1 	.word LINK 
                           0033BF     2 	LINK=.
      0033BF                          3 BSET:
      0033BF 04                       4 	.byte 4   	
      0033C0 42 53 45 54              5 	.ascii "BSET"
      0033C4 20 F8                    6 	.word bit_set  
      0033C6                       4737 	_dict_entry,4,BRES,bit_reset
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      0033C6 33 BF                    1 	.word LINK 
                           0033C8     2 	LINK=.
      0033C8                          3 BRES:
      0033C8 04                       4 	.byte 4   	
      0033C9 42 52 45 53              5 	.ascii "BRES"
      0033CD 21 1A                    6 	.word bit_reset  
      0033CF                       4738 	_dict_entry,3+F_IFUNC,BIT,bitmask
      0033CF 33 C8                    1 	.word LINK 
                           0033D1     2 	LINK=.
      0033D1                          3 BIT:
      0033D1 13                       4 	.byte 3+F_IFUNC   	
      0033D2 42 49 54                 5 	.ascii "BIT"
      0033D5 2D 38                    6 	.word bitmask  
      0033D7                       4739 	_dict_entry,3,AWU,awu 
      0033D7 33 D1                    1 	.word LINK 
                           0033D9     2 	LINK=.
      0033D9                          3 AWU:
      0033D9 03                       4 	.byte 3   	
      0033DA 41 57 55                 5 	.ascii "AWU"
      0033DD 2A 3B                    6 	.word awu  
      0033DF                       4740 	_dict_entry,3+F_IFUNC,ASC,ascii
      0033DF 33 D9                    1 	.word LINK 
                           0033E1     2 	LINK=.
      0033E1                          3 ASC:
      0033E1 13                       4 	.byte 3+F_IFUNC   	
      0033E2 41 53 43                 5 	.ascii "ASC"
      0033E5 29 44                    6 	.word ascii  
      0033E7                       4741 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      0033E7 33 E1                    1 	.word LINK 
                           0033E9     2 	LINK=.
      0033E9                          3 AND:
      0033E9 83                       4 	.byte 3+F_AND   	
      0033EA 41 4E 44                 5 	.ascii "AND"
      0033ED 00 88                    6 	.word TK_AND  
      0033EF                       4742 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      0033EF 33 E9                    1 	.word LINK 
                           0033F1     2 	LINK=.
      0033F1                          3 ALLOC:
      0033F1 05                       4 	.byte 5   	
      0033F2 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      0033F7 2F 89                    6 	.word xalloc  
      0033F9                       4743 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0033F9 33 F1                    1 	.word LINK 
                           0033FB     2 	LINK=.
      0033FB                          3 ADCREAD:
      0033FB 17                       4 	.byte 7+F_IFUNC   	
      0033FC 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003403 25 D0                    6 	.word analog_read  
      003405                       4744 	_dict_entry,5,ADCON,power_adc 
      003405 33 FB                    1 	.word LINK 
                           003407     2 	LINK=.
      003407                          3 ADCON:
      003407 05                       4 	.byte 5   	
      003408 41 44 43 4F 4E           5 	.ascii "ADCON"
      00340D 25 80                    6 	.word power_adc  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      00340F                       4745 kword_dict::
      00340F                       4746 	_dict_entry,3+F_IFUNC,ABS,abs
      00340F 34 07                    1 	.word LINK 
                           003411     2 	LINK=.
      003411                          3 ABS:
      003411 13                       4 	.byte 3+F_IFUNC   	
      003412 41 42 53                 5 	.ascii "ABS"
      003415 2A 94                    6 	.word abs  
                                   4747 
                           000000  4748 INDIRECT=0 
                           000000  4749 .if INDIRECT 
                                   4750 ;comands and fonctions address table 	
                                   4751 code_addr::
                                   4752 	.word abs,power_adc,analog_read,ascii,awu,bitmask ; 0..7
                                   4753 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,func_char,const_cr2  ; 8..15
                                   4754 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
                                   4755 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto ; 24..31 
                                   4756 	.word hex_base,const_idr,if,input_var,enable_iwdg,refresh_iwdg,key ; 32..39 
                                   4757 	.word let,list,log2,lshift,next,new ; 40..47
                                   4758 	.word const_odr,pad_ref,pause,pin_mode,peek,const_input ; 48..55
                                   4759 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
                                   4760 	.word const_portf,const_portg,const_porti,qkey,read,cold_start,remark ; 64..71 
                                   4761 	.word restore,return, random,rshift,run,free ; 72..79
                                   4762 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
                                   4763 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
                                   4764 	.word wait,words,write,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
                                   4765 	.word func_eefree,0 
                                   4766 .endif 
                                   4767 
                                   4768 
                                   4769 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      003417                         30 test:
      003417                         31     _vars VSIZE 
      003417 52 08            [ 2]    1     sub sp,#VSIZE 
      003419 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      00341C 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      00341E CE 00 0F         [ 2]   34     ldw x,ticks 
      003421 1F 01            [ 2]   35     ldw (T,sp),x
      003423                         36 1$: ; test add24 
      003423 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      003425 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      003428 C7 00 0C         [ 1]   39     ld acc24,a 
      00342B CF 00 0D         [ 2]   40     ldw acc24+1,x  
      00342E A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      003430 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003433 CD 01 6B         [ 4]   43     call add24 
      003436 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      003438 1D 00 01         [ 2]   45     subw x,#1
      00343B 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      00343D 26 E4            [ 1]   47     jrne 1$
      00343F CD 17 F8         [ 4]   48     call prt_acc24
      003442 A6 20            [ 1]   49     ld a,#SPACE 
      003444 CD 08 DA         [ 4]   50     call putc 
      003447 CE 00 0F         [ 2]   51     ldw x,ticks 
      00344A 72 F0 01         [ 2]   52     subw x,(T,sp)
      00344D CD 17 E1         [ 4]   53     call prt_i16  
      003450 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003452 CD 08 DA         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003455 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003458 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      00345A CE 00 0F         [ 2]   60     ldw x,ticks 
      00345D 1F 01            [ 2]   61     ldw (T,sp),x 
      00345F                         62 2$: 
      00345F A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      003461 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003464 C7 00 0C         [ 1]   65     ld acc24,a 
      003467 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      00346A A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      00346C AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00346F CD 02 66         [ 4]   69     call mul24 
      003472 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003474 1D 00 01         [ 2]   71     subw x,#1
      003477 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003479 26 E4            [ 1]   73     jrne 2$ 
      00347B CD 17 F8         [ 4]   74    call prt_acc24 
      00347E A6 20            [ 1]   75    ld a,#SPACE 
      003480 CD 08 DA         [ 4]   76    call putc 
      003483 CE 00 0F         [ 2]   77     ldw x,ticks 
      003486 72 F0 01         [ 2]   78     subw x,(T,sp)
      003489 CD 17 E1         [ 4]   79     call prt_i16 
      00348C A6 0D            [ 1]   80     ld a,#CR 
      00348E CD 08 DA         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      003491 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003494 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003496 CE 00 0F         [ 2]   85     ldw x,ticks 
      003499 1F 01            [ 2]   86     ldw (T,sp),x 
      00349B                         87 3$: 
      00349B A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      00349D AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      0034A0 C7 00 0C         [ 1]   90     ld acc24,a 
      0034A3 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      0034A6 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      0034A8 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034AB CD 02 66         [ 4]   94     call mul24 
      0034AE 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034B0 1D 00 01         [ 2]   96     subw x,#1
      0034B3 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034B5 26 E4            [ 1]   98     jrne 3$ 
      0034B7 CD 17 F8         [ 4]   99     call prt_acc24    
      0034BA A6 20            [ 1]  100     ld a,#SPACE 
      0034BC CD 08 DA         [ 4]  101     call putc 
      0034BF CE 00 0F         [ 2]  102     ldw x,ticks 
      0034C2 72 F0 01         [ 2]  103     subw x,(T,sp)
      0034C5 CD 17 E1         [ 4]  104     call prt_i16 
      0034C8 A6 0D            [ 1]  105     ld a,#CR 
      0034CA CD 08 DA         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      0034CD CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      0034D0 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034D2 CE 00 0F         [ 2]  110     ldw x,ticks 
      0034D5 1F 01            [ 2]  111     ldw (T,sp),x 
      0034D7                        112 4$:
      0034D7 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034D9 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      0034DC C7 00 0C         [ 1]  115     ld acc24,a 
      0034DF CF 00 0D         [ 2]  116     ldw acc24+1,x  
      0034E2 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      0034E4 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      0034E7 CD 02 66         [ 4]  119     call mul24 
      0034EA 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      0034EC 1D 00 01         [ 2]  121     subw x,#1
      0034EF 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      0034F1 26 E4            [ 1]  123     jrne 4$ 
      0034F3 CD 17 F8         [ 4]  124     call prt_acc24 
      0034F6 A6 20            [ 1]  125     ld a,#SPACE 
      0034F8 CD 08 DA         [ 4]  126     call putc 
      0034FB CE 00 0F         [ 2]  127     ldw x,ticks 
      0034FE 72 F0 01         [ 2]  128     subw x,(T,sp)
      003501 CD 17 E1         [ 4]  129     call prt_i16 
      003504 A6 0D            [ 1]  130     ld a,#CR 
      003506 CD 08 DA         [ 4]  131     call putc 
                                    132 ; test abs24 
      003509 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      00350C 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      00350E CE 00 0F         [ 2]  135     ldw x,ticks 
      003511 1F 01            [ 2]  136     ldw (T,sp),x 
      003513                        137 5$: 
      003513 A6 FF            [ 1]  138     ld a,#0xff
      003515 AE FF FF         [ 2]  139     ldw x,#0xffff
      003518 CD 01 E0         [ 4]  140     call abs24 
      00351B C7 00 0C         [ 1]  141     ld acc24,a 
      00351E CF 00 0D         [ 2]  142     ldw acc24+1,x
      003521 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003523 1D 00 01         [ 2]  144     subw x,#1
      003526 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      003528 26 E9            [ 1]  146     jrne 5$ 
      00352A CD 17 F8         [ 4]  147     call prt_acc24 
      00352D A6 20            [ 1]  148     ld a,#SPACE 
      00352F CD 08 DA         [ 4]  149     call putc 
      003532 CE 00 0F         [ 2]  150     ldw x,ticks 
      003535 72 F0 01         [ 2]  151     subw x,(T,sp)
      003538 CD 17 E1         [ 4]  152     call prt_i16 
      00353B                        153 6$:
      00353B A6 0D            [ 1]  154     ld a,#CR 
      00353D CD 08 DA         [ 4]  155     call putc 
      003540 CD 35 86         [ 4]  156     call read_integer 
      003543 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      003548 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      00354D 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003552 CD 35 86         [ 4]  160     call read_integer 
      003555 C6 00 0C         [ 1]  161     ld a,acc24 
      003558 CE 00 0D         [ 2]  162     ldw x,acc16 
      00355B 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      003560 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      003565 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      00356A CD 02 F4         [ 4]  166     call div24 
      00356D 88               [ 1]  167     push a 
      00356E 89               [ 2]  168     pushw x 
      00356F CD 17 F8         [ 4]  169     call prt_acc24 
      003572 A6 20            [ 1]  170     ld a,#SPACE 
      003574 CD 08 DA         [ 4]  171     call putc 
      003577 85               [ 2]  172     popw x
      003578 CF 00 0D         [ 2]  173     ldw acc16,x  
      00357B 32 00 0C         [ 1]  174     pop acc24 
      00357E CD 17 F8         [ 4]  175     call prt_acc24
      003581 20 B8            [ 2]  176     jra 6$
      003583                        177     _drop VSIZE 
      003583 5B 08            [ 2]    1     addw sp,#VSIZE 
      003585 81               [ 4]  178     ret 
                                    179 
                                    180 
      003586                        181 read_integer:
      003586 A6 3F            [ 1]  182     ld a,#'? 
      003588 CD 08 DA         [ 4]  183     call putc  
      00358B 72 5F 00 03      [ 1]  184 	clr count  
      00358F CD 0A 3C         [ 4]  185 	call readln 
      003592 AE 16 90         [ 2]  186 	ldw x,#tib 
      003595 3B 00 03         [ 1]  187 	push count
      003598 4B 00            [ 1]  188 	push #0 
      00359A 72 FB 01         [ 2]  189 	addw x,(1,sp)
      00359D 5C               [ 1]  190 	incw x 
      00359E                        191 	_drop 2 
      00359E 5B 02            [ 2]    1     addw sp,#2 
      0035A0 72 5F 00 01      [ 1]  192 	clr in 
      0035A4 CD 0E B1         [ 4]  193 	call get_token
      0035A7 A1 84            [ 1]  194 	cp a,#TK_INTGR
      0035A9 27 0F            [ 1]  195 	jreq 3$ 
      0035AB A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035AD CD 0E B1         [ 4]  197 	call get_token 
      0035B0 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035B2 27 03            [ 1]  199 	jreq 2$
      0035B4 CC 16 35         [ 2]  200 	jp syntax_error
      0035B7                        201 2$:
      0035B7 CD 02 0A         [ 4]  202 	call neg_acc24  	
      0035BA                        203 3$: 
      0035BA 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        003411 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003407 R
    ADCON_ID=  000002     |   4 ADCREAD    0033FB R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      0033F1 R   |   4 AND        0033E9 R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 ASC        0033E1 R   |     ASC_IDX =  000006     |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTO_RUN   000149 R   |   4 AWU        0033D9 R
  4 AWUHandl   000004 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_IDX =  000008     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        0033D1 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BIT_IDX =  00000A     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       0033C8 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       0033BF R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      0033B5 R
    BTEST_ID=  000010     |   4 BTOGL      0033AB R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        0033A3 R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |   4 CANT_DO    00286C R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000003 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  4 CHAR       00339A R   |     CHAR_IDX=  000016     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTR    =  000003     |     CNT_LO  =  000004 
    CODE_ADD=  000001     |     COMMA   =  00002C     |   4 CONST      003390 R
    CONST_ID=  0000B6     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CR1        003388 R   |     CR1_IDX =  00001A     |   4 CR2        003380 R
    CR2_IDX =  000018     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       003377 R   |     DATA_IDX=  00001C     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        00336F R   |     DDR_IDX =  00001E     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        003367 R
    DEC_IDX =  000020     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   4 DIM        00335F R   |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         003358 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000022     |   4 DREAD      00334E R
    DREAD_ID=  000024     |   4 DROP       003345 R   |   4 DWRITE     00333A R
    DWRITE_I=  000026     |   4 EDIT       003331 R   |     EDIT_IDX=  000028 
  4 EEFREE     003326 R   |     EEFREE_I=  0000B8     |   4 EEPROM     00331B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_I=  00002A 
    EEPROM_S=  000800     |     EM      =  000019     |   4 END        003313 R
    END_IDX =  00002C     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      003309 R   |     ERASE_ID=  00002E 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RD_O=  000011     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     ETB     =  000017     |     ETX     =  000003 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       003300 R   |     FCPU_IDX=  000030 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001E5C R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   4 FOR        0032F8 R
    FOR_IDX =  000034     |   4 FREE       0032EF R   |     FREE_IDX=  000088 
    FRUN    =  000000     |     FS      =  00001C     |     FSLEEP  =  000003 
    FSTEP   =  000003     |     FTRAP   =  000001     |     F_AND   =  000080 
    F_CFUNC =  000020     |     F_CMD   =  000000     |     F_CONST =  000030 
    F_IFUNC =  000010     |     F_NOT   =  000070     |     F_OR    =  000090 
    F_XOR   =  0000A0     |   4 GET        0032E7 R   |     GET_IDX =  0000B4 
  4 GOSUB      0032DD R   |     GOSUB_ID=  000036     |   4 GOTO       0032D4 R
    GOTO_IDX=  000038     |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        0032CC R   |     HEX_IDX =  00003A     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        0032C4 R   |     IDR_IDX =  00003C 
  4 IF         0032BD R   |     IF_IDX  =  00003E     |     IN      =  000005 
    INCR    =  000001     |     INDIRECT=  000000     |     INP     =  000000 
  4 INPUT      0032B3 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_ID=  000040     |     INPUT_PU=  000001 
    INT24   =  000005     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     0032A8 R   |     IWDGEN_I=  000042     |   4 IWDGREF    00329C R
    IWDGREF_=  000044     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   4 KEY        003294 R
    KEY_END =  000083     |     KEY_IDX =  000046     |     KW_TYPE_=  0000F0 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        00328C R   |     LET_IDX =  000048     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |   4 LINK    =  003411 R
  4 LIST       003283 R   |     LIST_IDX=  00004A     |     LL      =  000001 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  4 LOG2       00327A R   |     LOG_IDX =  00004C     |     LOOP_CNT=  002710 
  4 LSHIFT     00326F R   |     LSHIFT_I=  00004E     |     MAJOR   =  000002 
    MASK    =  000002     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000001     |     N1      =  000005     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000001     |     NAME_MAX=  00000F 
    NCLKOPT =  004808     |     NEG     =  000001     |   4 NEW        003267 R
    NEW_IDX =  000052     |   4 NEXT       00325E R   |     NEXT_IDX=  000050 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
    NLEN_MAS=  00000F     |     NOPT1   =  004802     |     NOPT2   =  004804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        003256 R   |     NOT_IDX =  0000F8     |     NOT_OP  =  000001 
  4 NOT_SAVE   001F32 R   |   4 NO_APP     0028AE R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R
  4 ODR        00324E R   |     ODR_IDX =  000054     |   4 ON         003247 R
    ONOFF   =  000003     |     ON_IDX  =  0000B2     |     OP      =  000002 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   4 OR         003240 R   |     OR_IDX  =  0000FC 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        003238 R   |     PAD_IDX =  000056 
    PAD_SIZE=  000080     |   4 PAUSE      00322E R   |     PAUSE_ID=  000058 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       003225 R   |     PEEK_IDX=  00005C 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   4 PICK       00321C R   |     PINNO   =  000001 
  4 PINP       003213 R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      003209 R   |     PMODE_ID=  00005A     |   4 POKE       003200 R
    POKE_IDX=  000060     |   4 POP        0031F8 R   |   4 PORTA      0031DB R
  4 PORTB      0031D1 R   |   4 PORTC      0031C7 R   |   4 PORTD      0031BD R
  4 PORTE      0031B3 R   |   4 PORTF      0031A9 R   |   4 PORTG      00319F R
  4 PORTI      003195 R   |   4 POUT       0031EF R   |     POUT_IDX=  000062 
    PREV    =  000001     |   4 PRINT      0031E5 R   |     PROD    =  000001 
    PROD_SIG=  000004     |   4 PROG_ADD   001E32 R   |   4 PROG_SIZ   001E44 R
    PRTA_IDX=  000066     |     PRTB_IDX=  000068     |     PRTC_IDX=  00006A 
    PRTD_IDX=  00006C     |     PRTE_IDX=  00006E     |     PRTF_IDX=  000070 
    PRTG_IDX=  000072     |     PRTI_IDX=  000074     |     PRT_IDX =  000064 
    PSIZE   =  00000B     |     PSTR    =  000003     |   4 PUSH       00318C R
  4 PUT        003184 R   |   4 QKEY       00317B R   |     QKEY_IDX=  000076 
    QSIGN   =  000005     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
  4 RAM_MEM    001E6D R   |     RAM_SIZE=  001800     |     RBT_IDX =  00007A 
  4 READ       003172 R   |     READ_IDX=  000078     |   4 REBOOT     003167 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    RECLEN  =  000005     |     REC_LEN =  000003     |     REC_XTRA=  000005 
  4 REG_A      0004C7 R   |   4 REG_CC     0004CB R   |   4 REG_PC     0004BB R
  4 REG_SP     0004D0 R   |   4 REG_X      0004C3 R   |   4 REG_Y      0004BF R
    RELOP   =  000001     |   4 REM        00315F R   |     REM_IDX =  00007C 
  4 RESTORE    003153 R   |     REST_IDX=  00007E     |     RETL1   =  000001 
  4 RETURN     003148 R   |     RET_ADDR=  000001     |     RET_BPTR=  000003 
    RET_IDX =  000080     |     RET_INW =  000005     |   4 RND        003140 R
    RND_IDX =  000082     |     RONLY   =  000005     |     ROP     =  004800 
    RS      =  00001E     |   4 RSHIFT     003135 R   |     RSHIFT_I=  000084 
    RSIGN   =  000006     |     RST_SR  =  0050B3     |   4 RUN        00312D R
    RUN_IDX =  000086     |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
    R_A     =  000001     |     R_CC    =  000009     |     R_PC    =  00000A 
    R_X     =  000002     |     R_Y     =  000004     |   4 SAVE       003124 R
    SAVE_IDX=  000032     |     SAV_ACC1=  000006     |     SAV_ACC2=  000008 
    SAV_COUN=  00000A     |     SAV_IN  =  000009     |     SEPARATE=  000000 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   00286A R
  4 SIZE       00311B R   |     SIZE_IDX=  0000B0     |     SKIP    =  000005 
  4 SLEEP      003111 R   |     SLEEP_ID=  00008A     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      003107 R
    SPIEN_ID=  00008E     |   4 SPIRD      0030FD R   |     SPIRD_ID=  00008C 
  4 SPISEL     0030F2 R   |     SPISEL_I=  000090     |   4 SPIWR      0030E8 R
    SPIWR_ID=  000092     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     00047E R   |   4 STEP       0030DF R   |     STEP_IDX=  000094 
  4 STOP       0030D6 R   |     STOP_IDX=  000096     |     STR     =  000003 
  4 STR_BYTE   001E55 R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
  4 SysCall    000012 R   |     T       =  000001     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      0030CC R   |     TICKS_ID=  000098     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    0030C0 R   |   4 TIMER      0030B6 R   |     TIMER_ID=  00009A 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_AND  =  000088 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  00000A     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_NOT  =  000087     |     TK_OR   =  000089 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000007 
    TK_SHARP=  000009     |     TK_VAR  =  000085     |     TK_XOR  =  00008A 
    TMROUT_I=  00009C     |   4 TO         0030AF R   |   4 TONE       0030A6 R
    TONE_IDX=  0000A0     |     TOWRITE =  000005     |     TO_IDX  =  00009E 
  4 Timer4Up   000013 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     00309B R
    UBOUND_I=  0000A2     |   4 UBTN_Han   00005A R   |   4 UFLASH     003090 R
    UFLASH_I=  0000A4     |   4 UNTIL      003086 R   |     UNTIL_ID=  0000A6 
    US      =  00001F     |   4 USER_ABO   000062 R   |   4 USR        00307E R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000A8     |   4 Uart1RxH   000868 R   |   4 UserButt   000036 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VAR_NAME=  000001 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       003075 R
    WAIT_IDX=  0000AA     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
    WLKPTR  =  000003     |   4 WORDS      00306B R   |     WORDS_ID=  0000AC 
  4 WRITE      003061 R   |     WRITE_ID=  0000AE     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   4 XOR        003059 R
    XOR_IDX =  0000FE     |     XSAVE   =  000002     |     XSTACK_E=  001773 
    XSTACK_S=  000014     |     XTEMP   =  000001     |     YSAVE   =  000004 
  4 abs        002A94 R   |   4 abs24      0001E0 R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000B96 R   |   4 add24      00016B R   |   4 add_char   001301 R
  4 add_spac   0010F9 R   |   4 analog_r   0025D0 R   |   4 and_cond   001B6C R
  4 and_fact   001B3C R   |   4 app        003604 R   |   4 app_sign   003600 R
  4 app_size   003602 R   |   4 app_spac   003600 GR  |   4 arduino_   002B81 R
  4 arg_list   001961 R   |   5 array_si   000020 R   |   4 ascii      002944 R
  4 at_tst     000F6B R   |   4 atoi24     001883 GR  |   4 atoi_exi   0018F2 R
  4 awu        002A3B R   |   4 awu02      002A4E R   |   4 bad_port   0029BF R
  5 base       00000A GR  |   5 basicptr   000004 GR  |   4 beep       002547 R
  4 beep_1kh   00251A GR  |   4 bin_exit   000DD2 R   |   4 bit_rese   00211A R
  4 bit_set    0020F8 R   |   4 bit_test   00215F R   |   4 bit_togg   00213D R
  4 bitmask    002D38 R   |   4 bkslsh_t   000F18 R   |   4 bksp       000941 R
  2 block_bu   0016E0 GR  |   4 block_er   000752 R   |   4 break_po   0026BC R
  4 bye        002A07 R   |   4 clear_ba   00146D R   |   4 clear_bl   0027C1 R
  4 clear_va   0013C5 R   |   4 clock_in   00007D R   |   4 cmd_cons   001D41 R
  4 cmd_dim    001D55 R   |   4 cmd_dim1   001D5F R   |   4 cmd_dim2   001D65 R
  4 cmd_end    0024E6 R   |   4 cmd_get    0024ED R   |   4 cmd_itf    0004EB R
  4 cmd_line   0016C4 R   |   4 cmd_name   001321 R   |   4 cmd_on     002394 R
  4 cmd_size   001C45 R   |   4 cold_sta   0000B5 R   |   4 colon_ts   000F3F R
  4 comma_ts   000F4A R   |   4 comp_msg   001614 R   |   4 compile    001065 GR
  4 conditio   001BBE R   |   4 const_cr   002DDB R   |   4 const_cr   002DE0 R
  4 const_dd   002DD6 R   |   4 const_ee   002DEF R   |   4 const_id   002DD1 R
  4 const_in   002DEA R   |   4 const_od   002DCC R   |   4 const_ou   002DE5 R
  4 const_po   002DA4 R   |   4 const_po   002DA9 R   |   4 const_po   002DAE R
  4 const_po   002DB3 R   |   4 const_po   002DB8 R   |   4 const_po   002DBD R
  4 const_po   002DC2 R   |   4 const_po   002DC7 R   |   4 convert_   000D42 R
  4 convert_   000905 R   |   4 copy_com   000FA0 R   |   5 count      000003 GR
  4 cp24       0001A5 R   |   4 cp24_ax    0001D7 R   |   4 cp_loop    001912 R
  4 cpl24      0001E7 R   |   4 cpy_cmd_   0010E1 R   |   4 cpy_quot   001121 R
  4 create_g   000C6C R   |   4 cs_high    002F71 R   |   4 dash_tst   000F60 R
  4 data       002DF4 R   |   4 data_err   002E6D R   |   5 data_len   000009 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001C37 R
  4 decomp_l   0011B9 R   |   4 decompil   001171 GR  |   4 del_line   000C3F R
  4 delete_l   000A2E R   |   4 delete_n   000951 R   |   4 delete_u   0009F3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 digital_   00260C R   |   4 digital_   002643 R   |   4 div24      0002F4 R
  4 divu24_8   0002D6 R   |   4 do_loop    002D5E R   |   4 do_progr   000745 R
  4 dup24      00015C R   |   5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR
  4 edit       001F05 R   |   4 enable_i   002CC8 R   |   4 eql_tst    000FEB R
  4 equal      001314 R   |   4 eras0      0026EE R   |   4 erase      0026E4 R
  4 erase_ex   000776 R   |   4 erase_fl   00076C R   |   4 err_bad_   001559 R
  4 err_buf_   0015CF R   |   4 err_cmd_   00151D R   |   4 err_div0   0014E2 R
  4 err_dupl   001537 R   |   4 err_math   0014C9 R   |   4 err_mem_   0014AE R
  4 err_msg    00148A R   |   4 err_no_a   001565 R   |   4 err_no_d   001598 R
  4 err_no_f   0015BC R   |   4 err_no_l   0014F1 R   |   4 err_no_p   0015A8 R
  4 err_not_   001548 R   |   4 err_over   0015DC R   |   4 err_read   0015E6 R
  4 err_run_   001507 R   |   4 err_synt   0014BB R   |   4 escaped    000D57 GR
  4 expect     00194F R   |   4 expressi   001AA5 R   |   4 factor     0019AD R
  5 farptr     000018 R   |   4 fcpu       002B03 R   |   4 fetchc     0005F2 R
  4 fill_wri   0027B1 R   |   4 final_te   000B8F R   |   4 first_li   001EAF R
  5 flags      000022 GR  |   4 for        0021F5 R   |   4 free       001C3C R
  5 free_eep   000024 R   |   7 free_ram   000090 R   |   4 func_arg   00195C R
  4 func_cha   00292D R   |   4 func_eef   001CD1 R   |   4 ge         001316 R
  4 get_addr   0017C1 R   |   4 get_arra   00197D R   |   4 get_char   0017DB R
  4 get_esca   000911 R   |   4 get_int2   0017CB R   |   4 get_targ   002322 R
  4 get_targ   002330 R   |   4 get_tick   002A8D R   |   4 get_toke   000EB1 GR
  4 get_valu   001CC0 R   |   4 getc       0008EA GR  |   4 gosub      002440 R
  4 gosub_1    00244B R   |   4 gosub_2    002451 R   |   4 goto       002426 R
  4 goto_1     002430 R   |   4 gpio       002994 R   |   4 gt         001312 R
  4 gt_tst     000FF6 R   |   4 hex_base   001C32 R   |   4 hex_dump   000632 R
  4 if         0021D8 R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   00084C R   |   4 input_ex   0020B0 R
  4 input_lo   00201A R   |   4 input_va   002016 R   |   4 insert_c   0009B0 R
  4 insert_l   000C98 R   |   4 insert_l   000D07 R   |   4 interp_l   001705 R
  4 interpre   0016E0 R   |   4 invalid    00055A R   |   4 invalid_   0005C8 R
  4 is_alnum   000E05 GR  |   4 is_alpha   000DEB GR  |   4 is_data_   002DFA R
  4 is_digit   000DFC GR  |   4 is_symbo   000E0E R   |   4 itoa       00181E GR
  4 itoa_loo   001840 R   |   4 jp_to_ta   002433 R   |   4 key        002983 R
  4 kword_di   00340F GR  |   4 kword_en   003057 R   |   4 le         00131B R
  4 ledoff     0003BA R   |   4 ledon      0003B5 R   |   4 ledtoggl   0003BF R
  4 left_par   0003C8 R   |   4 let        001C7D GR  |   4 let_arra   001C8B R
  4 let_dvar   00173E R   |   4 let_eval   001C93 R   |   4 let_var    001C90 R
  4 lines_sk   001EB2 R   |   4 list       001E7C R   |   4 list_exi   001EF4 R
  4 list_loo   001ED2 R   |   4 log2       002D0B R   |   4 look_tar   002353 R
  4 loop_bac   002305 R   |   5 loop_dep   00001F R   |   4 loop_don   00231A R
  4 lshift     002AAB R   |   4 lt         001319 R   |   4 lt_tst     00101F R
  4 mem_peek   000576 R   |   4 mod24      00038E R   |   4 move       001381 GR
  4 move_dow   0013A0 R   |   4 move_era   0006D4 R   |   4 move_exi   0013C1 R
  4 move_lef   000988 R   |   4 move_loo   0013A5 R   |   4 move_prg   000714 R
  4 move_rig   000996 R   |   4 move_up    001392 R   |   4 mul24      000266 R
  4 mul_char   001303 R   |   4 mulu24_8   000227 R   |   4 nbr_tst    000EE4 R
  4 ne         00131E R   |   4 neg24      0001F0 R   |   4 neg_acc2   00020A R
  4 neg_ax     000202 R   |   4 new        0026DA R   |   4 next       0022AD R
  4 next_lin   0016E8 R   |   4 next_tok   001799 GR  |   4 no_match   001924 R
  4 number     0005F8 R   |   4 other      001048 R   |   4 overwrit   000BBB R
  2 pad        0016E0 GR  |   4 pad_ref    002F76 R   |   4 parse_ad   0004D5 R
  4 parse_bi   000DB0 R   |   4 parse_in   000D5F R   |   4 parse_ke   000E31 R
  4 parse_qu   000D0A R   |   4 parse_sy   000E19 R   |   4 pause      002A1B R
  4 pause02    002A2E R   |   4 peek       0021B7 R   |   4 peek_byt   000592 R
  4 pin_mode   002B12 R   |   4 plus_tst   000FBF R   |   4 poke       002196 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

  4 power_ad   002580 R   |   4 prcnt_ts   000FE0 R   |   4 print      001F6D R
  4 print_fa   0005D7 R   |   4 print_he   000BF2 GR  |   4 print_re   000414 R
  4 print_st   00056A R   |   4 print_to   001806 R   |   4 prog_siz   001DEB R
  4 program_   001DF3 R   |   4 program_   0006EE R   |   4 program_   000714 R
  4 prt_acc2   0017F8 R   |   4 prt_basi   001F49 R   |   4 prt_i16    0017E1 R
  4 prt_loop   001F71 R   |   4 prt_peek   000397 GR  |   4 prt_reg1   0003F5 R
  4 prt_reg8   0003D3 R   |   5 ptr16      000019 GR  |   5 ptr8       00001A R
  4 putc       0008DA GR  |   4 puts       000937 GR  |   4 qgetc      0008E3 GR
  4 qkey       002987 GR  |   4 qmark_ts   000F76 R   |   4 qsign      0027AA R
  4 random     002BA1 R   |   4 read       002E72 R   |   4 read01     002E77 R
  4 read_int   003586 R   |   4 readln     000A3C GR  |   4 readln_l   000A4B R
  4 readln_q   000BD8 R   |   4 refresh_   002D06 R   |   4 relation   001ADD R
  4 relop_st   001306 R   |   4 remark     0020B5 GR  |   4 repl       000514 R
  4 repl_exi   00053C R   |   4 reset_co   001F6F R   |   4 rest_con   002006 R
  4 restore    002E08 R   |   4 return     002464 R   |   4 right_al   00110F GR
  4 row_alig   000831 R   |   4 row_eras   0006A7 R   |   4 row_eras   0006D4 R
  4 row_loop   000615 R   |   4 rparnt_t   000F34 R   |   4 rshift     002AD7 R
  7 rsign      00008C R   |   7 rsize      00008E R   |   4 rt_msg     001602 R
  4 run        002481 R   |   4 run_app    000127 R   |   4 run_it     0024B3 R
  4 run_it_0   0024B5 R   |   5 rx1_head   00002E R   |   5 rx1_queu   000026 R
  5 rx1_tail   00002F R   |   4 save_app   0027D5 R   |   4 save_con   001FF6 R
  4 scan_blo   00085A R   |   4 search_d   001904 GR  |   4 search_e   00194C R
  4 search_l   000C14 GR  |   4 search_l   000C23 R   |   4 search_n   001CFA R
  4 search_n   001908 R   |   5 seedx      000014 R   |   5 seedy      000016 R
  4 select_p   002B71 R   |   4 send_esc   00095F R   |   4 send_par   00096A R
  4 set_data   002E3E R   |   4 set_time   002CA6 R   |   4 sharp_ts   000F55 R
  4 show_row   000603 R   |   4 single_c   0012FC R   |   4 skip       000E9E R
  4 skip_str   0017B2 R   |   4 slash_ts   000FD5 R   |   4 sleep      002A10 R
  4 software   0013D4 R   |   4 spaces     0009A4 GR  |   4 spi_clea   002F0B R
  4 spi_disa   002EF3 R   |   4 spi_enab   002EC0 R   |   4 spi_rcv_   002F2D R
  4 spi_read   002F58 R   |   4 spi_sele   002F5F R   |   4 spi_send   002F17 R
  4 spi_writ   002F38 R   |   2 stack_fu   00179C GR  |   2 stack_un   001828 R
  4 star_tst   000FCA R   |   4 step       00226B R   |   4 stop       00268E R
  4 store_lo   00229A R   |   4 str_matc   001931 R   |   4 str_tst    000ED4 R
  4 strcmp     001360 R   |   4 strcpy     001371 GR  |   4 strlen     001355 GR
  4 sub24      000188 R   |   4 symb_loo   000E1A R   |   4 syntax_e   001635 GR
  4 system_i   00141A R   |   5 tab_widt   000023 GR  |   4 tb_error   001637 GR
  4 term       001A62 R   |   4 term01     001A6A R   |   4 term_exi   001AA2 R
  4 test       003417 R   |   4 test_p     000562 R   |   2 tib        001690 GR
  4 tick_tst   000F8E R   |   5 ticks      00000F R   |   4 timeout    002CBD R
  5 timer      000012 GR  |   4 timer2_i   000093 R   |   4 timer4_i   0000A0 R
  4 tk_id      001625 R   |   4 to         002225 R   |   4 to_eepro   00073D R
  4 to_flash   000742 R   |   4 to_hex_c   000C09 GR  |   4 to_upper   001877 GR
  4 token_ch   00105E R   |   4 token_ex   001062 R   |   4 tone       002525 R
  4 try_next   002E4B R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   0008EA GR  |   4 uart1_in   000895 R   |   4 uart1_pu   0008DA GR
  4 uart1_qg   0008E3 GR  |   4 uart1_se   0008A5 R   |   4 ubound     001C72 R
  4 uflash     0029C4 R   |   4 unlock_e   000671 R   |   4 unlock_f   00068C R
  4 until      002D71 R   |   4 user_int   000049 R   |   4 usr        0029E1 R
  4 var_name   001167 GR  |   5 vars       000034 GR  |   4 wait       0020BB R
  4 warm_ini   00144B R   |   4 warm_sta   0016C1 R   |   4 words      002C3C R
  4 words_co   002C90 R   |   4 write      0028C4 R   |   4 write_bl   0007F6 GR
  4 write_bu   00072E R   |   4 write_by   000778 R   |   4 write_ee   0007B4 R
  4 write_ex   0007ED R   |   4 write_fl   00079E R   |   4 write_nb   00081B R
  4 xalloc     002F89 R   |   4 xdrop      002FBF R   |   4 xpick      00303D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

  4 xpop       002F7F R   |   4 xpush      002F7B R   |   4 xput       00300A R
  4 xstack_b   002FEC R   |   2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

