ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 tmp16: .blkb 1 ; 16 bit temporary storage high-byte 
      00000F                         73 tmp8:  .blkb 1 ; 8 bit temporary storage, tmp16 low-byte 
      000010                         74 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         75 timer: .blkw 1 ;  milliseconds count down timer 
      000014                         76 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         77 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         78 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         79 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         80 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         81 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001E                         82 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000020                         83 txtend: .blkw 1 ; tokenized BASIC text end address 
      000022                         84 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000023                         85 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000025                         86 flags: .blkb 1 ; various boolean flags
      000026                         87 tab_width: .blkb 1 ; print colon width (default 4)
      000027                         88 rx_char: .blkb 1 ; last received character from UART1 
      000028                         89 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     90 ; keep 'free_ram' as last variable 
      00005C                         91 free_ram: ; from here RAM free for BASIC text 
                                     92 
                                     93 ;;-----------------------------------
                                     94     .area SSEG (ABS)
                                     95 ;; working buffers and stack at end of RAM. 	
                                     96 ;;-----------------------------------
      0016E8                         97     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      0016E8                         98 tib: .ds TIB_SIZE             ; transaction input buffer
      001738                         99 pad: .ds PAD_SIZE             ; working buffer
      001760                        100 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        101 stack_unf: ; stack underflow ; control_stack bottom 
                                    102 
                                    103 ;;--------------------------------------
                                    104     .area HOME 
                                    105 ;; interrupt vector table at 0x8000
                                    106 ;;--------------------------------------
      000000 82 00 04 ED            107     int cold_start			; RESET vector 
                           000000   108 .if DEBUG
                                    109 	int TrapHandler 		;TRAP  software interrupt
                           000001   110 .else
      000004 82 00 00 00            111 	int NonHandledInterrupt ;TRAP  software interrupt
                                    112 .endif
      000008 82 00 00 00            113 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            114 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            115 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            116 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            117 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            118 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            119 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            120 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            121 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            122 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            123 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            124 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            125 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            126 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            127 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            128 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            129 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            130 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            131 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            132 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            133 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            134 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            135 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 37            136 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            137 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      00006C 82 00 00 00            138 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            139 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            140 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            141 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            142 	int NonHandledInterrupt ;int29  not used
                                    143 
                                    144 ;---------------------------------------
                                    145     .area CODE
                                    146 ;---------------------------------------
                           000000   147 .if DEBUG
                                    148 .asciz "STM8_TBI" ; I like to put module name here.
                                    149 .endif 
                                    150 
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    152 ; non handled interrupt 
                                    153 ; reset MCU
                                    154 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        155 NonHandledInterrupt:
      000000 71                     156     .byte 0x71  ; invalid opcode reinitialize MCU
                                    157 
                                    158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    159 ; auto wakeup from halt
                                    160 ; at iret, program continue 
                                    161 ; after hatl instruction
                                    162 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        163 AWUHandler:
      000001 72 19 50 F0      [ 1]  164 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  165 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  166 	clr AWU_TBR 
      00000E 80               [11]  167 	iret
                                    168 
                                    169 ;--------------------------
                                    170 ; UART1 receive character
                                    171 ; CTRL-C (ASCII 3)
                                    172 ; cancel program execution
                                    173 ; and fall back to command line
                                    174 ;--------------------------
      00000F                        175 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  176 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  177 	ld a,UART1_DR 
      000017 A1 03            [ 1]  178 	cp a,#CTRL_C 
      000019 26 07            [ 1]  179 	jrne 1$
      00001B 72 5F 00 27      [ 1]  180 	clr rx_char 
      00001F CC 00 60         [ 2]  181 	jp user_interrupted
      000022                        182 1$:
      000022 A1 18            [ 1]  183 	cp a,#CAN 
      000024 26 03            [ 1]  184 	jrne 2$
      000026 CC 04 ED         [ 2]  185 	jp cold_start 	
      000029                        186 2$: 
      000029 A1 1A            [ 1]  187 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  188 	jrne 3$
      00002D CD 05 B2         [ 4]  189 	call cancel_autorun 
      000030 CC 04 ED         [ 2]  190 	jp cold_start 
      000033 C7 00 27         [ 1]  191 3$:	ld rx_char,a 	
      000036 80               [11]  192 	iret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    193 
                                    194 ;------------------------------------
                                    195 ; software interrupt handler  
                                    196 ;------------------------------------
                           000000   197 .if DEBUG 
                                    198 TrapHandler:
                                    199 	bset flags,#FTRAP 
                                    200 	call print_registers
                                    201 	call cmd_itf
                                    202 	bres flags,#FTRAP 	
                                    203 	iret
                                    204 .endif 
                                    205 
                                    206 ;------------------------------
                                    207 ; TIMER 4 is used to maintain 
                                    208 ; a milliseconds 'ticks' counter
                                    209 ; and decrement 'timer' varaiable
                                    210 ;--------------------------------
      000037                        211 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  212 	clr TIM4_SR 
      00003B CE 00 10         [ 2]  213 	ldw x,ticks
      00003E 5C               [ 2]  214 	incw x
      00003F CF 00 10         [ 2]  215 	ldw ticks,x 
      000042 CE 00 12         [ 2]  216 	ldw x,timer
      000045 5D               [ 2]  217 	tnzw x 
      000046 27 04            [ 1]  218 	jreq 1$
      000048 5A               [ 2]  219 	decw x 
      000049 CF 00 12         [ 2]  220 	ldw timer,x 
      00004C                        221 1$:	
      00004C 80               [11]  222 	iret 
                                    223 
                                    224 
                                    225 ;------------------------------------
                                    226 ; Triggered by pressing USER UserButton 
                                    227 ; on NUCLEO card.
                                    228 ; This is used to abort a progam lock 
                                    229 ; in infinite loop. 
                                    230 ;------------------------------------
      00004D                        231 UserButtonHandler:
                                    232 ; wait button release
      00004D 5F               [ 1]  233 	clrw x
      00004E 5A               [ 2]  234 1$: decw x 
      00004F 26 FD            [ 1]  235 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  236 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    237 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 25 05   [ 2]  238     btjf flags,#FSLEEP,2$
      00005B 72 17 00 25      [ 1]  239 	bres flags,#FSLEEP 
      00005F 80               [11]  240 	iret
      000060                        241 2$:	
      000060                        242 user_interrupted:
      000060 72 00 00 25 02   [ 2]  243     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  244 	jra UBTN_Handler_exit 
      000067                        245 4$:	; program interrupted by user 
      000067 72 11 00 25      [ 1]  246 	bres flags,#FRUN 
      00006B AE 00 82         [ 2]  247 	ldw x,#USER_ABORT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      00006E CD 01 D7         [ 4]  248 	call puts 
      000071 CE 00 04         [ 2]  249 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  250 	ld a,in 
      000077 CD 12 4D         [ 4]  251 	call prt_basic_line
      00007A                        252 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  253     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  254     ldw sp,x
      00007E 9A               [ 1]  255 	rim 
      00007F CC 07 A8         [ 2]  256 	jp warm_start
                                    257 
      000082 0A 50 72 6F 67 72 61   258 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    259 
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 ;    peripherals initialization
                                    262 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    263 
                                    264 ;----------------------------------------
                                    265 ; inialize MCU clock 
                                    266 ; input:
                                    267 ;   A 		source  HSI | 1 HSE 
                                    268 ;   XL      CLK_CKDIVR , clock divisor 
                                    269 ; output:
                                    270 ;   none 
                                    271 ;----------------------------------------
      00009D                        272 clock_init:	
      00009D C1 50 C3         [ 1]  273 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  274 	jreq 2$ ; no switching required 
                                    275 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  276 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  277 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  278 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  279 	jrne 1$
      0000AE                        280 2$: 	
                                    281 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  282 	ld a,xl 
      0000AF C7 50 C6         [ 1]  283 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  284 	ret
                                    285 
                                    286 ;----------------------------------
                                    287 ; TIMER2 used as audio tone output 
                                    288 ; on port D:5.
                                    289 ; channel 1 configured as PWM mode 1 
                                    290 ;-----------------------------------  
                           00F424   291 TIM2_CLK_FREQ=62500
      0000B3                        292 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  293 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  294  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  295 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  296 	ret 
                                    297 
                                    298 ;---------------------------------
                                    299 ; TIM4 is configured to generate an 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    300 ; interrupt every millisecond 
                                    301 ;----------------------------------
      0000C0                        302 timer4_init:
      0000C0 72 18 50 C7      [ 1]  303 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  304 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  305 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  306 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  307 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  308 	ret
                                    309 
                                    310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    311 ;  routines to write to FLASH, EEPROM 
                                    312 ;  and OPTION 
                                    313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    314 
                                    315 ;----------------------------------
                                    316 ; unlock EEPROM/OPT for writing/erasing
                                    317 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    318 ; input:
                                    319 ;  none
                                    320 ; output:
                                    321 ;  none 
                                    322 ;----------------------------------
      0000D5                        323 unlock_eeprom:
      0000D5 35 AE 50 64      [ 1]  324 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000D9 35 56 50 64      [ 1]  325     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000DD 72 07 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E2 81               [ 4]  327 	ret
                                    328 
                                    329 ;----------------------------------
                                    330 ; unlock FLASH for writing/erasing
                                    331 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    332 ; input:
                                    333 ;  none
                                    334 ; output:
                                    335 ;  none
                                    336 ;----------------------------------
      0000E3                        337 unlock_flash:
      0000E3 35 56 50 62      [ 1]  338 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000E7 35 AE 50 62      [ 1]  339 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000EB 72 03 50 5F FB   [ 2]  340 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F0 81               [ 4]  341 	ret
                                    342 
                           000000   343 USE_BLOCK_ERASE=0 
                           000000   344 .if USE_BLOCK_ERASE 
                                    345 ; this code is copied to RAM 
                                    346 
                                    347 ;----------------------------
                                    348 ; erase block code must be 
                                    349 ; executed from RAM
                                    350 ;-----------------------------
                                    351 erase_start:
                                    352 	clr a 
                                    353     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    354     bres FLASH_NCR2,#FLASH_CR2_ERASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    355 	ldf [farptr],a
                                    356     inc farptr+2 
                                    357     ldf [farptr],a
                                    358     inc farptr+2 
                                    359     ldf [farptr],a
                                    360     inc farptr+2 
                                    361     ldf [farptr],a
                                    362 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    363 	ret
                                    364 erase_end:
                                    365 
                                    366 ; copy erase_start in RAM 
                                    367 move_code_in_ram:
                                    368 	ldw x,#erase_end 
                                    369 	subw x,#erase_start
                                    370 	ldw acc16,x 
                                    371 	ldw x,#pad 
                                    372 	ldw y,#erase_start 
                                    373 	call move 
                                    374 	ret 
                                    375 
                                    376 ;-----------------------------------
                                    377 ; erase flash or EEPROM block 
                                    378 ; a block is 128 bytes 
                                    379 ; input:
                                    380 ;   farptr  address block begin
                                    381 ; output:
                                    382 ;   none
                                    383 ;--------------------------------------
                                    384 erase_block:
                                    385 	ldw x,farptr+1 
                                    386 	pushw x 
                                    387 	call move_code_in_ram 
                                    388 	popw x 
                                    389 	ldw farptr+1,x 
                                    390 	tnz farptr
                                    391 	jrne erase_flash 
                                    392 	ldw x,#FLASH_BASE 
                                    393 	cpw x,farptr+1 
                                    394 	jrpl erase_flash 
                                    395 ; erase eeprom block
                                    396 	call unlock_eeprom 
                                    397 	sim 
                                    398 	call pad   
                                    399 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    400 	rim 
                                    401 	ret 
                                    402 ; erase flash block:
                                    403 erase_flash:
                                    404 	call unlock_flash 
                                    405 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    406 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    407 	clr a 
                                    408 	sim 
                                    409 	call pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    410     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    411 	rim 
                                    412 	ret 
                                    413 .endif ;;;; USE_BLOCK_ERASE ;;;;
                                    414 
                                    415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    416 ; write a byte to FLASH or EEPROM/OPTION  
                                    417 ; input:
                                    418 ;    a  		byte to write
                                    419 ;    farptr  	address
                                    420 ;    x          farptr[x]
                                    421 ; output:
                                    422 ;    none
                                    423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    424 	; variables locales
                           000001   425 	BTW = 1   ; byte to write offset on stack
                           000002   426 	OPT = 2   ; OPTION flag offset on stack
                           000002   427 	VSIZE = 2
      0000F1                        428 write_byte:
      0000F1 90 89            [ 2]  429 	pushw y
      0000F3                        430 	_vars VSIZE
      0000F3 52 02            [ 2]    1     sub sp,#VSIZE 
      0000F5 6B 01            [ 1]  431 	ld (BTW,sp),a ; byte to write 
      0000F7 0F 02            [ 1]  432 	clr (OPT,sp)  ; OPTION flag
                                    433 ; put addr[15:0] in Y, for bounds check.
      0000F9 90 CE 00 19      [ 2]  434 	ldw y,farptr+1   ; Y=addr15:0
                                    435 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000FD 72 5D 00 18      [ 1]  436 	tnz farptr 
      000101 26 14            [ 1]  437 	jrne write_flash
      000103 90 A3 25 80      [ 2]  438     cpw y,#user_space
      000107 24 0E            [ 1]  439     jruge write_flash
      000109 90 A3 40 00      [ 2]  440 	cpw y,#EEPROM_BASE  
      00010D 25 52            [ 1]  441     jrult write_exit
      00010F 90 A3 48 7F      [ 2]  442 	cpw y,#OPTION_END 
      000113 22 4C            [ 1]  443 	jrugt write_exit
      000115 20 16            [ 2]  444 	jra write_eeprom 
                                    445 ; write program memory
      000117                        446 write_flash:
      000117 CD 00 E3         [ 4]  447 	call unlock_flash 
      00011A 9B               [ 1]  448 1$:	sim 
      00011B 7B 01            [ 1]  449 	ld a,(BTW,sp)
      00011D 92 A7 00 18      [ 4]  450 	ldf ([farptr],x),a ; farptr[x]=A
      000121 72 05 50 5F FB   [ 2]  451 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000126 9A               [ 1]  452     rim 
      000127 72 13 50 5F      [ 1]  453     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00012B 20 34            [ 2]  454     jra write_exit
                                    455 ; write eeprom and option
      00012D                        456 write_eeprom:
      00012D CD 00 D5         [ 4]  457 	call unlock_eeprom
                                    458 	; check for data eeprom or option eeprom
      000130 90 A3 48 00      [ 2]  459 	cpw y,#OPTION_BASE
      000134 2B 08            [ 1]  460 	jrmi 1$
      000136 90 A3 48 80      [ 2]  461 	cpw y,#OPTION_END+1
      00013A 2A 02            [ 1]  462 	jrpl 1$
      00013C 03 02            [ 1]  463 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00013E                        464 1$: 
      00013E 0D 02            [ 1]  465     tnz (OPT,sp)
      000140 27 08            [ 1]  466     jreq 2$
                                    467 	; pour modifier une option il faut modifier ces 2 bits
      000142 72 1E 50 5B      [ 1]  468     bset FLASH_CR2,#FLASH_CR2_OPT
      000146 72 1F 50 5C      [ 1]  469     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00014A                        470 2$: 
      00014A 7B 01            [ 1]  471     ld a,(BTW,sp)
      00014C 92 A7 00 18      [ 4]  472     ldf ([farptr],x),a
      000150 0D 02            [ 1]  473     tnz (OPT,sp)
      000152 27 08            [ 1]  474     jreq 3$
      000154 5C               [ 2]  475     incw x
      000155 7B 01            [ 1]  476     ld a,(BTW,sp)
      000157 43               [ 1]  477     cpl a
      000158 92 A7 00 18      [ 4]  478     ldf ([farptr],x),a
      00015C 72 05 50 5F FB   [ 2]  479 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000161                        480 write_exit:
      000161                        481 	_drop VSIZE 
      000161 5B 02            [ 2]    1     addw sp,#VSIZE 
      000163 90 85            [ 2]  482 	popw y
      000165 81               [ 4]  483     ret
                                    484 
                                    485 ;--------------------------------------------
                                    486 ; write a data block to eeprom or flash 
                                    487 ; input:
                                    488 ;   Y        source address   
                                    489 ;   X        array index  destination  farptr[x]
                                    490 ;   BSIZE    block size bytes 
                                    491 ;   farptr   write address , byte* 
                                    492 ; output:
                                    493 ;	X 		after last byte written 
                                    494 ;   Y 		after last byte read 
                                    495 ;  farptr   point after block
                                    496 ;---------------------------------------------
      000166                        497 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000166                        498 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    499 	; local var 
                           000001   500 	XSAVE=1 
                           000002   501 	VSIZE=2 
      000166                        502 write_block:
      000166                        503 	_vars VSIZE
      000166 52 02            [ 2]    1     sub sp,#VSIZE 
      000168 1F 01            [ 2]  504 	ldw (XSAVE,sp),x 
      00016A 1E 05            [ 2]  505 	ldw x,(BSIZE,sp) 
      00016C 27 13            [ 1]  506 	jreq 9$
      00016E 1E 01            [ 2]  507 1$:	ldw x,(XSAVE,sp)
      000170 90 F6            [ 1]  508 	ld a,(y)
      000172 CD 00 F1         [ 4]  509 	call write_byte 
      000175 5C               [ 2]  510 	incw x 
      000176 90 5C            [ 2]  511 	incw y 
      000178 1F 01            [ 2]  512 	ldw (XSAVE,sp),x
      00017A 1E 05            [ 2]  513 	ldw x,(BSIZE,sp)
      00017C 5A               [ 2]  514 	decw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00017D 1F 05            [ 2]  515 	ldw (BSIZE,sp),x 
      00017F 26 ED            [ 1]  516 	jrne 1$
      000181                        517 9$:
      000181 1E 01            [ 2]  518 	ldw x,(XSAVE,sp)
      000183 CD 18 95         [ 4]  519 	call incr_farptr
      000186                        520 	_drop VSIZE
      000186 5B 02            [ 2]    1     addw sp,#VSIZE 
      000188 81               [ 4]  521 	ret 
                                    522 
                                    523 
                                    524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    525 ;;   UART1 subroutines
                                    526 ;;   used for user interface 
                                    527 ;;   communication channel.
                                    528 ;;   settings: 
                                    529 ;;		115200 8N1 no flow control
                                    530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    531 
                                    532 ;---------------------------------------------
                                    533 ; initialize UART1, 115200 8N1
                                    534 ; input:
                                    535 ;	none
                                    536 ; output:
                                    537 ;   none
                                    538 ;---------------------------------------------
      000189                        539 uart1_init:
      000189 72 1A 50 02      [ 1]  540     bset PA_DDR,#UART1_TX_PIN
      00018D 72 1A 50 03      [ 1]  541     bset PA_CR1,#UART1_TX_PIN 
      000191 72 1A 50 04      [ 1]  542     bset PA_CR2,#UART1_TX_PIN 
                                    543 ; enable UART1 clock
      000195 72 14 50 C7      [ 1]  544 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000199                        545 uart1_set_baud: 
                                    546 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    547 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000199 A6 E1            [ 1]  548 	ld a,#CLK_SWR_HSI
      00019B C1 50 C3         [ 1]  549 	cp a,CLK_CMSR 
      00019E 27 0A            [ 1]  550 	jreq 2$ 
      0001A0                        551 1$: ; 8 Mhz 	
      0001A0 35 05 52 33      [ 1]  552 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001A4 35 04 52 32      [ 1]  553 	mov UART1_BRR1,#0x4
      0001A8 20 08            [ 2]  554 	jra 3$
      0001AA                        555 2$: ; 16 Mhz 	
      0001AA 35 0B 52 33      [ 1]  556 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001AE 35 08 52 32      [ 1]  557 	mov UART1_BRR1,#0x08
      0001B2                        558 3$:
      0001B2 72 5F 52 31      [ 1]  559     clr UART1_DR
      0001B6 35 2C 52 35      [ 1]  560 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0001BA 72 10 52 35      [ 1]  561 	bset UART1_CR2,#UART_CR2_SBK
      0001BE 72 0D 52 30 FB   [ 2]  562     btjf UART1_SR,#UART_SR_TC,.
      0001C3 81               [ 4]  563     ret
                                    564 
                                    565 ;---------------------------------
                                    566 ; send character to UART1 
                                    567 ; input:
                                    568 ;   A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    569 ; output:
                                    570 ;   none 
                                    571 ;--------------------------------	
      0001C4                        572 putc:
      0001C4 72 0F 52 30 FB   [ 2]  573 	btjf UART1_SR,#UART_SR_TXE,.
      0001C9 C7 52 31         [ 1]  574 	ld UART1_DR,a 
      0001CC 81               [ 4]  575 	ret 
                                    576 
                                    577 ;---------------------------------
                                    578 ; wait character from UART1 
                                    579 ; input:
                                    580 ;   none
                                    581 ; output:
                                    582 ;   A 			char  
                                    583 ;--------------------------------	
      0001CD                        584 getc:
      0001CD C6 00 27         [ 1]  585 	ld a,rx_char 
      0001D0 27 FB            [ 1]  586 	jreq getc 
      0001D2 72 5F 00 27      [ 1]  587 	clr rx_char 
      0001D6 81               [ 4]  588 	ret 
                                    589 
                                    590 ;-----------------------------
                                    591 ; send an ASCIZ string to UART1 
                                    592 ; input: 
                                    593 ;   x 		char * 
                                    594 ; output:
                                    595 ;   none 
                                    596 ;-------------------------------
      0001D7                        597 puts:
      0001D7 F6               [ 1]  598     ld a,(x)
      0001D8 27 06            [ 1]  599 	jreq 1$
      0001DA CD 01 C4         [ 4]  600 	call putc 
      0001DD 5C               [ 2]  601 	incw x 
      0001DE 20 F7            [ 2]  602 	jra puts 
      0001E0 81               [ 4]  603 1$:	ret 
                                    604 
                                    605 
                                    606 ;---------------------------
                                    607 ; delete character at left 
                                    608 ; of cursor on terminal 
                                    609 ; input:
                                    610 ;   none 
                                    611 ; output:
                                    612 ;	none 
                                    613 ;---------------------------
      0001E1                        614 bksp:
      0001E1 A6 08            [ 1]  615 	ld a,#BS 
      0001E3 CD 01 C4         [ 4]  616 	call putc 
      0001E6 A6 20            [ 1]  617 	ld a,#SPACE 
      0001E8 CD 01 C4         [ 4]  618 	call putc 
      0001EB A6 08            [ 1]  619 	ld a,#BS 
      0001ED CD 01 C4         [ 4]  620 	call putc 
      0001F0 81               [ 4]  621 	ret 
                                    622 ;---------------------------
                                    623 ; delete n character left of cursor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    624 ; at terminal.
                                    625 ; input: 
                                    626 ;   A   number of characters to delete.
                                    627 ; output:
                                    628 ;    none 
                                    629 ;--------------------------	
      0001F1                        630 delete:
      0001F1 88               [ 1]  631 	push a 
      0001F2 0D 01            [ 1]  632 0$:	tnz (1,sp)
      0001F4 27 07            [ 1]  633 	jreq 1$
      0001F6 CD 01 E1         [ 4]  634 	call bksp 
      0001F9 0A 01            [ 1]  635 	dec (1,sp)
      0001FB 20 F5            [ 2]  636 	jra 0$
      0001FD 84               [ 1]  637 1$:	pop a 
      0001FE 81               [ 4]  638 	ret
                                    639 
                                    640 ;--------------------------
                                    641 ; print n spaces on terminal
                                    642 ; input:
                                    643 ;  X 		number of spaces 
                                    644 ; output:
                                    645 ;	none 
                                    646 ;---------------------------
      0001FF                        647 spaces:
      0001FF A6 20            [ 1]  648 	ld a,#SPACE 
      000201 5D               [ 2]  649 1$:	tnzw x
      000202 27 06            [ 1]  650 	jreq 9$
      000204 CD 01 C4         [ 4]  651 	call putc 
      000207 5A               [ 2]  652 	decw x
      000208 20 F7            [ 2]  653 	jra 1$
      00020A                        654 9$: 
      00020A 81               [ 4]  655 	ret 
                                    656 
                                    657 ;;;;;;;;;;;;;
                           000000   658 .if DEBUG 
                                    659 ;---------------------------------
                                    660 ;; print actual registers states 
                                    661 ;; as pushed on stack 
                                    662 ;; {Y,X,CC,A}
                                    663 ;---------------------------------
                                    664 	_argofs 0  
                                    665 	_arg R_Y 1 
                                    666 	_arg R_X 3
                                    667 	_arg R_A 5
                                    668 	_arg R_CC 6
                                    669 prt_regs:
                                    670 	ldw x,#regs_state 
                                    671 	call puts
                                    672 ; register PC
                                    673 	ldw y,(1,sp)
                                    674 	ldw x,#REG_EPC 
                                    675 	call prt_reg16 
                                    676 ; register CC 
                                    677 	ld a,(R_CC,sp)
                                    678 	ldw x,#REG_CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    679 	call prt_reg8 
                                    680 ; register A 
                                    681 	ld a,(R_A,sp)
                                    682 	ldw x,#REG_A 
                                    683 	call prt_reg8 
                                    684 ; register X 
                                    685 	ldw y,(R_X,sp)
                                    686 	ldw x,#REG_X 
                                    687 	call prt_reg16 
                                    688 ; register Y 
                                    689 	ldw y,(R_Y,sp)
                                    690 	ldw x,#REG_Y 
                                    691 	call prt_reg16 
                                    692 ; register SP 
                                    693 	ldw y,sp
                                    694 	addw y,#6+ARG_OFS  
                                    695 	ldw x,#REG_SP
                                    696 	call prt_reg16
                                    697 	ld a,#CR 
                                    698 	call putc
                                    699 	call putc   
                                    700 	ret 
                                    701 
                                    702 regs_state: .asciz "\nregisters state\n--------------------\n"
                                    703 
                                    704 
                                    705 ;--------------------
                                    706 ; print content at address in hex.
                                    707 ; input:
                                    708 ;   X 	address to peek 
                                    709 ; output:
                                    710 ;	none 
                                    711 ;--------------------	
                                    712 prt_peek:
                                    713 	pushw x 
                                    714 	ldw acc16,x 
                                    715 	clr acc24 
                                    716 	clrw x 
                                    717 	ld a,#16 
                                    718 	call prti24 
                                    719 	ld a,#': 
                                    720 	call putc 
                                    721 	ld a,#SPACE 
                                    722 	call putc 
                                    723 	popw x 
                                    724 	ld a,(x)
                                    725 	ld acc8,a 
                                    726 	clrw x 
                                    727 	ld a,#16 
                                    728 	call prti24
                                    729 	ret 
                                    730 .endif ; DEBUG  
                                    731 ;;;;;;;;;;;;;;;;;;;;	
                                    732 
                                    733 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    734 ; retrun string length
                                    735 ; input:
                                    736 ;   X         .asciz  pointer 
                                    737 ; output:
                                    738 ;   X         length 
                                    739 ;-------------------------------------
      00020B                        740 strlen:
      00020B 90 93            [ 1]  741 	ldw y,x 
      00020D 5F               [ 1]  742 	clrw x 
      00020E 90 7D            [ 1]  743 1$:	tnz (y) 
      000210 27 05            [ 1]  744 	jreq 9$ 
      000212 5C               [ 2]  745 	incw x
      000213 90 5C            [ 2]  746 	incw y 
      000215 20 F7            [ 2]  747 	jra 1$ 
      000217 81               [ 4]  748 9$: ret 
                                    749 
                                    750 ;------------------------------------
                                    751 ; compare 2 strings
                                    752 ; input:
                                    753 ;   X 		char* first string 
                                    754 ;   Y       char* second string 
                                    755 ; output:
                                    756 ;   A 		0|1 
                                    757 ;-------------------------------------
      000218                        758 strcmp:
      000218 F6               [ 1]  759 	ld a,(x)
      000219 27 0B            [ 1]  760 	jreq 5$ 
      00021B 90 F1            [ 1]  761 	cp a,(y) 
      00021D 26 05            [ 1]  762 	jrne 4$ 
      00021F 5C               [ 2]  763 	incw x 
      000220 90 5C            [ 2]  764 	incw y 
      000222 20 F4            [ 2]  765 	jra strcmp 
      000224                        766 4$: ; not same  
      000224 4F               [ 1]  767 	clr a 
      000225 81               [ 4]  768 	ret 
      000226                        769 5$: ; same 
      000226 A6 01            [ 1]  770 	ld a,#1 
      000228 81               [ 4]  771 	ret 
                                    772 
                                    773 
                                    774 ;---------------------------------------
                                    775 ;  copy src to dest 
                                    776 ; input:
                                    777 ;   X 		dest 
                                    778 ;   Y 		src 
                                    779 ; output: 
                                    780 ;   X 		dest 
                                    781 ;----------------------------------
      000229                        782 strcpy:
      000229 89               [ 2]  783 	pushw x 
      00022A 90 F6            [ 1]  784 1$: ld a,(y)
      00022C 27 06            [ 1]  785 	jreq 9$ 
      00022E F7               [ 1]  786 	ld (x),a 
      00022F 5C               [ 2]  787 	incw x 
      000230 90 5C            [ 2]  788 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000232 20 F6            [ 2]  789 	jra 1$ 
      000234 7F               [ 1]  790 9$:	clr (x)
      000235 85               [ 2]  791 	popw x 
      000236 81               [ 4]  792 	ret 
                                    793 
                                    794 ;---------------------------------------
                                    795 ; move memory block 
                                    796 ; input:
                                    797 ;   X 		destination 
                                    798 ;   Y 	    source 
                                    799 ;   acc16	bytes count 
                                    800 ; output:
                                    801 ;   none 
                                    802 ;--------------------------------------
                           000001   803 	INCR=1 ; increament high byte 
                           000002   804 	LB=2 ; increament low byte 
                           000002   805 	VSIZE=2
      000237                        806 move:
      000237                        807 	_vars VSIZE 
      000237 52 02            [ 2]    1     sub sp,#VSIZE 
      000239 0F 01            [ 1]  808 	clr (INCR,sp)
      00023B 0F 02            [ 1]  809 	clr (LB,sp)
      00023D 90 89            [ 2]  810 	pushw y 
      00023F 13 01            [ 2]  811 	cpw x,(1,sp) ; compare DEST to SRC 
      000241 90 85            [ 2]  812 	popw y 
      000243 27 31            [ 1]  813 	jreq move_exit ; x==y 
      000245 2B 0E            [ 1]  814 	jrmi move_down
      000247                        815 move_up: ; start from top address with incr=-1
      000247 72 BB 00 0C      [ 2]  816 	addw x,acc16
      00024B 72 B9 00 0C      [ 2]  817 	addw y,acc16
      00024F 03 01            [ 1]  818 	cpl (INCR,sp)
      000251 03 02            [ 1]  819 	cpl (LB,sp)   ; increment = -1 
      000253 20 05            [ 2]  820 	jra move_loop  
      000255                        821 move_down: ; start from bottom address with incr=1 
      000255 5A               [ 2]  822     decw x 
      000256 90 5A            [ 2]  823 	decw y
      000258 0C 02            [ 1]  824 	inc (LB,sp) ; incr=1 
      00025A                        825 move_loop:	
      00025A C6 00 0C         [ 1]  826     ld a, acc16 
      00025D CA 00 0D         [ 1]  827 	or a, acc8
      000260 27 14            [ 1]  828 	jreq move_exit 
      000262 72 FB 01         [ 2]  829 	addw x,(INCR,sp)
      000265 72 F9 01         [ 2]  830 	addw y,(INCR,sp) 
      000268 90 F6            [ 1]  831 	ld a,(y)
      00026A F7               [ 1]  832 	ld (x),a 
      00026B 89               [ 2]  833 	pushw x 
      00026C CE 00 0C         [ 2]  834 	ldw x,acc16 
      00026F 5A               [ 2]  835 	decw x 
      000270 CF 00 0C         [ 2]  836 	ldw acc16,x 
      000273 85               [ 2]  837 	popw x 
      000274 20 E4            [ 2]  838 	jra move_loop
      000276                        839 move_exit:
      000276                        840 	_drop VSIZE
      000276 5B 02            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  841 	ret 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    842 
                                    843 ;-------------------------------------
                                    844 ; search text area for a line#
                                    845 ; input:
                                    846 ;	X 			line# 
                                    847 ; output:
                                    848 ;   X 			addr of line | 0 
                                    849 ;   Y           line#|insert address if not found  
                                    850 ;-------------------------------------
                           000001   851 	LL=1 ; line length 
                           000002   852 	LB=2 ; line length low byte 
                           000002   853 	VSIZE=2 
      000279                        854 search_lineno:
      000279                        855 	_vars VSIZE
      000279 52 02            [ 2]    1     sub sp,#VSIZE 
      00027B 0F 01            [ 1]  856 	clr (LL,sp)
      00027D 90 CE 00 1E      [ 2]  857 	ldw y,txtbgn
      000281                        858 search_ln_loop:
      000281 90 C3 00 20      [ 2]  859 	cpw y,txtend 
      000285 2A 10            [ 1]  860 	jrpl 8$
      000287 90 F3            [ 1]  861 	cpw x,(y)
      000289 27 0E            [ 1]  862 	jreq 9$
      00028B 2B 0A            [ 1]  863 	jrmi 8$ 
      00028D 90 E6 02         [ 1]  864 	ld a,(2,y)
      000290 6B 02            [ 1]  865 	ld (LB,sp),a 
      000292 72 F9 01         [ 2]  866 	addw y,(LL,sp)
      000295 20 EA            [ 2]  867 	jra search_ln_loop 
      000297                        868 8$: 
      000297 5F               [ 1]  869 	clrw x 	
      000298 51               [ 1]  870 	exgw x,y 
      000299                        871 9$: _drop VSIZE
      000299 5B 02            [ 2]    1     addw sp,#VSIZE 
      00029B 51               [ 1]  872 	exgw x,y   
      00029C 81               [ 4]  873 	ret 
                                    874 
                                    875 ;-------------------------------------
                                    876 ; delete line at addr
                                    877 ; move new line to insert with end of text 
                                    878 ; otherwise it would be overwritten.
                                    879 ; input:
                                    880 ;   X 		addr of line i.e DEST for move 
                                    881 ;-------------------------------------
                           000001   882 	LLEN=1
                           000003   883 	SRC=3
                           000004   884 	VSIZE=4
      00029D                        885 del_line: 
      00029D                        886 	_vars VSIZE 
      00029D 52 04            [ 2]    1     sub sp,#VSIZE 
      00029F E6 02            [ 1]  887 	ld a,(2,x) ; line length
      0002A1 6B 02            [ 1]  888 	ld (LLEN+1,sp),a 
      0002A3 0F 01            [ 1]  889 	clr (LLEN,sp)
      0002A5 90 93            [ 1]  890 	ldw y,x  
      0002A7 72 F9 01         [ 2]  891 	addw y,(LLEN,sp) ;SRC  
      0002AA 17 03            [ 2]  892 	ldw (SRC,sp),y  ;save source 
      0002AC 90 CE 00 20      [ 2]  893 	ldw y,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0002B0 90 E6 02         [ 1]  894 	ld a,(2,y)
      0002B3 90 5F            [ 1]  895 	clrw y 
      0002B5 90 97            [ 1]  896 	ld yl,a  
      0002B7 72 B9 00 20      [ 2]  897 	addw y,txtend
      0002BB 72 F2 03         [ 2]  898 	subw y,(SRC,sp) ; y=count 
      0002BE 90 CF 00 0C      [ 2]  899 	ldw acc16,y 
      0002C2 16 03            [ 2]  900 	ldw y,(SRC,sp)    ; source
      0002C4 CD 02 37         [ 4]  901 	call move
      0002C7 90 CE 00 20      [ 2]  902 	ldw y,txtend 
      0002CB 72 F2 01         [ 2]  903 	subw y,(LLEN,sp)
      0002CE 90 CF 00 20      [ 2]  904 	ldw txtend,y  
      0002D2                        905 	_drop VSIZE     
      0002D2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0002D4 81               [ 4]  906 	ret 
                                    907 
                                    908 ;---------------------------------------------
                                    909 ; create a gap in text area 
                                    910 ; move new line to insert in gap with end of text
                                    911 ; otherwise it would be overwritten.
                                    912 ; input:
                                    913 ;    X 			addr gap start 
                                    914 ;    Y 			gap length 
                                    915 ; output:
                                    916 ;    X 			addr gap start 
                                    917 ;--------------------------------------------
                           000001   918 	DEST=1
                           000003   919 	SRC=3
                           000005   920 	LEN=5
                           000006   921 	VSIZE=6 
      0002D5                        922 create_gap:
      0002D5                        923 	_vars VSIZE
      0002D5 52 06            [ 2]    1     sub sp,#VSIZE 
      0002D7 1F 03            [ 2]  924 	ldw (SRC,sp),x 
      0002D9 17 05            [ 2]  925 	ldw (LEN,sp),y 
      0002DB 90 CF 00 0C      [ 2]  926 	ldw acc16,y 
      0002DF 90 93            [ 1]  927 	ldw y,x ; SRC
      0002E1 72 BB 00 0C      [ 2]  928 	addw x,acc16  
      0002E5 1F 01            [ 2]  929 	ldw (DEST,sp),x 
                                    930 ;compute size to move 	
      0002E7 CE 00 20         [ 2]  931 	ldw x,txtend 
      0002EA E6 02            [ 1]  932 	ld a,(2,x) ; pending line length 
      0002EC C7 00 0D         [ 1]  933 	ld acc8,a 
      0002EF 72 5F 00 0C      [ 1]  934 	clr acc16 
      0002F3 72 BB 00 0C      [ 2]  935 	addw x,acc16 
      0002F7 72 F0 03         [ 2]  936 	subw x,(SRC,sp)
      0002FA CF 00 0C         [ 2]  937 	ldw acc16,x ; size to move
      0002FD 1E 01            [ 2]  938 	ldw x,(DEST,sp) 
      0002FF CD 02 37         [ 4]  939 	call move
      000302 CE 00 20         [ 2]  940 	ldw x,txtend
      000305 72 FB 05         [ 2]  941 	addw x,(LEN,sp)
      000308 CF 00 20         [ 2]  942 	ldw txtend,x
      00030B                        943 9$:	_drop VSIZE 
      00030B 5B 06            [ 2]    1     addw sp,#VSIZE 
      00030D 81               [ 4]  944 	ret 
                                    945 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    946 
                                    947 ;--------------------------------------------
                                    948 ; insert line in tib into text area 
                                    949 ; first search for already existing 
                                    950 ; replace existing 
                                    951 ; if strlen(tib)==0 delete existing line
                                    952 ; input:
                                    953 ;   ptr16 				pointer to tokenized line  
                                    954 ; output:
                                    955 ;   none
                                    956 ;---------------------------------------------
                           000001   957 	DEST=1  ; text area insertion address 
                           000003   958 	SRC=3   ; str to insert address 
                           000005   959 	LINENO=5 ; line number 
                           000007   960 	LLEN=7 ; line length 
                           000008   961 	VSIZE=8  
      00030E                        962 insert_line:
      00030E                        963 	_vars VSIZE 
      00030E 52 08            [ 2]    1     sub sp,#VSIZE 
      000310 CE 00 19         [ 2]  964 	ldw x,ptr16  
      000313 C3 00 1E         [ 2]  965 	cpw x,txtbgn 
      000316 26 0D            [ 1]  966 	jrne 0$
                                    967 ;first text line 
      000318 AE 00 02         [ 2]  968 	ldw x,#2 
      00031B 72 D6 00 19      [ 4]  969 	ld a,([ptr16],x)
      00031F 5F               [ 1]  970 	clrw x 
      000320 97               [ 1]  971 	ld xl,a
      000321 1F 07            [ 2]  972 	ldw (LLEN,sp),x  
      000323 20 45            [ 2]  973 	jra 5$
      000325 72 CE 00 19      [ 5]  974 0$:	ldw x,[ptr16]
                                    975 ; new line number
      000329 1F 05            [ 2]  976 	ldw (LINENO,sp),x 
      00032B AE 00 02         [ 2]  977 	ldw x,#2 
      00032E 72 D6 00 19      [ 4]  978 	ld a,([ptr16],x)
      000332 97               [ 1]  979 	ld xl,a
                                    980 ; new line length
      000333 1F 07            [ 2]  981 	ldw (LLEN,sp),x
                                    982 ; check if that line number already exit 	
      000335 1E 05            [ 2]  983 	ldw x,(LINENO,sp)
      000337 CD 02 79         [ 4]  984 	call search_lineno 
      00033A 5D               [ 2]  985 	tnzw x 
      00033B 26 04            [ 1]  986 	jrne 2$
                                    987 ; line doesn't exit
                                    988 ; it will be inserted at this point.  	
      00033D 17 01            [ 2]  989 	ldw (DEST,sp),y 
      00033F 20 05            [ 2]  990 	jra 3$
                                    991 ; line exit delete it.
                                    992 ; it will be replaced by new one 	
      000341 1F 01            [ 2]  993 2$: ldw (DEST,sp),x 
      000343 CD 02 9D         [ 4]  994 	call del_line
      000346                        995 3$: 
                                    996 ; insert new line or leave if LLEN==3
                                    997 ; LLEN==3 means empty line 
      000346 A6 03            [ 1]  998 	ld a,#3
      000348 11 08            [ 1]  999 	cp a,(LLEN+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00034A 27 27            [ 1] 1000 	jreq insert_ln_exit ; empty line exit.
                                   1001 ; if insertion point at txtend 
                                   1002 ; no move required 
      00034C 1E 01            [ 2] 1003 	ldw x,(DEST,sp)
      00034E C3 00 20         [ 2] 1004 	cpw x,txtend 
      000351 2A 17            [ 1] 1005 	jrpl 5$ 
                                   1006 ; must create a gap
                                   1007 ; at insertion point  
      000353 1E 01            [ 2] 1008 	ldw x,(DEST,sp)
      000355 16 07            [ 2] 1009 	ldw y,(LLEN,sp)
      000357 CD 02 D5         [ 4] 1010 	call create_gap 
                                   1011 ; move new line in gap 
      00035A 1E 07            [ 2] 1012 	ldw x,(LLEN,sp)
      00035C CF 00 0C         [ 2] 1013 	ldw acc16,x 
      00035F 90 CE 00 20      [ 2] 1014 	ldw y,txtend ;SRC 
      000363 1E 01            [ 2] 1015 	ldw x,(DEST,sp) ; dest address 
      000365 CD 02 37         [ 4] 1016 	call move 
      000368 20 09            [ 2] 1017 	jra insert_ln_exit  
      00036A                       1018 5$: ; no move required 
      00036A 1E 07            [ 2] 1019 	ldw x,(LLEN,sp) 
      00036C 72 BB 00 20      [ 2] 1020 	addw x,txtend 
      000370 CF 00 20         [ 2] 1021 	ldw txtend,x 
      000373                       1022 insert_ln_exit:	
      000373                       1023 	_drop VSIZE
      000373 5B 08            [ 2]    1     addw sp,#VSIZE 
      000375 81               [ 4] 1024 	ret
                                   1025 
                                   1026 
                                   1027 ;-----------------------------
                                   1028 ; check if text buffer full
                                   1029 ; input:
                                   1030 ;   ptr16     addr start tokenize line 
                                   1031 ;   X         buffer index 
                                   1032 ; output:
                                   1033 ;   none 
                                   1034 ;-----------------------------------
      000376                       1035 check_full:
      000376 72 BB 00 19      [ 2] 1036 	addw x,ptr16 
      00037A A3 16 E8         [ 2] 1037 	cpw x,#tib 
      00037D 25 05            [ 1] 1038 	jrult 1$
      00037F A6 01            [ 1] 1039 	ld a,#ERR_MEM_FULL
      000381 CC 07 5F         [ 2] 1040 	jp tb_error 
      000384 81               [ 4] 1041 1$: ret 
                                   1042 
                                   1043 ;-----------------------------------
                                   1044 ; create token list fromm text line 
                                   1045 ; save this list in text area
                                   1046 ;  compiled line format: 
                                   1047 ;    line_no  2 bytes {0...32767}
                                   1048 ;    count    1 byte  
                                   1049 ;    tokens   variable length 
                                   1050 ;   
                                   1051 ; input:
                                   1052 ;   none
                                   1053 ; modified variables:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1054 ;   basicptr     token list buffer address 
                                   1055 ;   in.w  		 3|count, i.e. index in buffer
                                   1056 ;   count        length of line | 0  
                                   1057 ;-----------------------------------
                           000001  1058 	XSAVE=1
                           000003  1059 	BUFIDX=3
                           000004  1060 	VSIZE=4
      000385                       1061 compile:
      000385                       1062 	_vars VSIZE 
      000385 52 04            [ 2]    1     sub sp,#VSIZE 
      000387 72 1A 00 25      [ 1] 1063 	bset flags,#FCOMP 
      00038B CE 00 20         [ 2] 1064 	ldw x,txtend
      00038E CF 00 19         [ 2] 1065 	ldw ptr16,x ; code buffer start address 
      000391 AE 00 03         [ 2] 1066 	ldw x,#3
      000394 1F 03            [ 2] 1067 	ldw (BUFIDX,sp),X  
      000396 CD 03 76         [ 4] 1068 	call check_full
      000399 5F               [ 1] 1069 	clrw x 
      00039A 72 CF 00 19      [ 5] 1070 	ldw [ptr16],x ; initialize line# to zero 
      00039E CD 0B 52         [ 4] 1071 	call get_token
      0003A1 1F 01            [ 2] 1072 	ldw (XSAVE,sp),x 
      0003A3 A1 04            [ 1] 1073 	cp a,#TK_INTGR 
      0003A5 26 13            [ 1] 1074 	jrne 3$
      0003A7 A3 00 00         [ 2] 1075 	cpw x,#0 
      0003AA 2C 05            [ 1] 1076 	jrsgt 1$
      0003AC A6 0A            [ 1] 1077 	ld a,#ERR_BAD_VALUE 
      0003AE CC 07 5F         [ 2] 1078 	jp tb_error ; line number must be in range {1..32767}
      0003B1 72 CF 00 19      [ 5] 1079 1$:	ldw [ptr16],x; line number
      0003B5 CD 0B 52         [ 4] 1080 2$:	call get_token
      0003B8 1F 01            [ 2] 1081 	ldw (XSAVE,sp),x 
      0003BA A1 00            [ 1] 1082 3$:	cp a,#TK_NONE 
      0003BC 26 03            [ 1] 1083 	jrne 30$
      0003BE CC 04 4F         [ 2] 1084 	jp 9$ ; end of line. 
      0003C1                       1085 30$: 	 
      0003C1 1E 03            [ 2] 1086 	ldw x,(BUFIDX,sp)
      0003C3 CD 03 76         [ 4] 1087 	call check_full 
      0003C6 16 03            [ 2] 1088 	ldw y,(BUFIDX,sp) 
      0003C8 91 D7 19         [ 4] 1089 	ld ([ptr16],y),a ; token attribute 
      0003CB 90 5C            [ 2] 1090 	incw y
      0003CD 17 03            [ 2] 1091 	ldw (BUFIDX,sp),y
      0003CF A1 01            [ 1] 1092 	cp a,#TK_COLON 
      0003D1 26 02            [ 1] 1093 	jrne 31$
      0003D3 20 E0            [ 2] 1094 	jra 2$ ; loop for next token 
      0003D5                       1095 31$: ; check for token type 
                                   1096 ; character token have 1 byte attribute, i.e. ASCII character 
      0003D5 A1 03            [ 1] 1097 	cp a,#TK_CHAR
      0003D7 26 0C            [ 1] 1098 	jrne 32$ 
      0003D9 1E 01            [ 2] 1099 	ldw x,(XSAVE,sp)
      0003DB 9F               [ 1] 1100 	ld a,xl 
      0003DC 91 D7 19         [ 4] 1101 	ld ([ptr16],y),a
      0003DF 90 5C            [ 2] 1102 	incw y 
      0003E1 17 03            [ 2] 1103 	ldw (BUFIDX,sp),y 
      0003E3 20 D0            [ 2] 1104 	jra 2$ 
      0003E5                       1105 32$:
      0003E5 A1 0A            [ 1] 1106 	cp a,#TK_ARRAY 
                                   1107 ; this token have no attribute. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0003E7 27 CC            [ 1] 1108 	jreq 2$ 
      0003E9 A1 02            [ 1] 1109 	cp a,#TK_QSTR 
      0003EB 26 25            [ 1] 1110 	jrne 4$
                                   1111 ; copy string as .asciz 	
      0003ED AE 17 38         [ 2] 1112 	ldw x,#pad 
      0003F0 CD 02 0B         [ 4] 1113 	call strlen
      0003F3 5C               [ 2] 1114 	incw x  
      0003F4 CD 03 76         [ 4] 1115 	call check_full 
      0003F7 90 AE 17 38      [ 2] 1116 	ldw y,#pad 
      0003FB CE 00 19         [ 2] 1117 	ldw x,ptr16
      0003FE 72 FB 03         [ 2] 1118 	addw x,(BUFIDX,sp)	
      000401 CD 02 29         [ 4] 1119 	call strcpy 
      000404 AE 17 38         [ 2] 1120 	ldw x,#pad 
      000407 CD 02 0B         [ 4] 1121 	call strlen 
      00040A 5C               [ 2] 1122 	incw x
      00040B 72 FB 03         [ 2] 1123 	addw x,(BUFIDX,sp) 
      00040E 1F 03            [ 2] 1124 	ldw (BUFIDX,sp),x
      000410 20 A3            [ 2] 1125 	jra 2$  
      000412 A1 04            [ 1] 1126 4$: cp a,#TK_INTGR
      000414 25 9F            [ 1] 1127 	jrult 2$ ; 
      000416 A1 08            [ 1] 1128 	cp a,#TK_CFUNC 
      000418 22 9B            [ 1] 1129 	Jrugt 2$ ; those tokens have no attributes 
      00041A 1E 01            [ 2] 1130 	ldw x,(XSAVE,sp) 
      00041C 16 03            [ 2] 1131 	ldw y,(BUFIDX,sp)
      00041E 91 DF 19         [ 5] 1132 	ldw ([ptr16],y),x ; the attribute is an address or integer. 
      000421 A3 14 B5         [ 2] 1133 	cpw x,#remark ; is this a comment? 
      000424 27 09            [ 1] 1134 	jreq 5$	
      000426 72 A9 00 02      [ 2] 1135 	addw y,#2 
      00042A 17 03            [ 2] 1136 	ldw (BUFIDX,sp),y 
      00042C CC 03 B5         [ 2] 1137 	jp 2$
      00042F                       1138 5$:
                                   1139 ; copy commment in code buffer and
                                   1140 ; skip to end of line.  
      00042F 72 A9 00 02      [ 2] 1141 	addw y,#2 ; skip exec address 
      000433 17 03            [ 2] 1142 	ldw (BUFIDX,sp),y 
      000435 CE 00 19         [ 2] 1143 	ldw x,ptr16 
      000438 72 FB 03         [ 2] 1144 	addw x,(BUFIDX,sp)
      00043B 90 CE 00 00      [ 2] 1145 	ldw y,in.w 
      00043F 72 A9 16 E8      [ 2] 1146 	addw y,#tib 
      000443 CD 02 29         [ 4] 1147 	call strcpy 	
      000446 CD 02 0B         [ 4] 1148 	call strlen 
      000449 5C               [ 2] 1149 	incw x ; skip string 0. 
      00044A 72 FB 03         [ 2] 1150 	addw x,(BUFIDX,sp)
      00044D 1F 03            [ 2] 1151 	ldw (BUFIDX,sp),x 
      00044F                       1152 9$: 
      00044F AE 00 02         [ 2] 1153 	ldw x,#2
      000452 16 03            [ 2] 1154 	ldw y,(BUFIDX,sp)
      000454 90 9F            [ 1] 1155 	ld a,yl 
      000456 72 D7 00 19      [ 4] 1156 	ld ([ptr16],x),a ; bytes count   	
      00045A 72 CE 00 19      [ 5] 1157 	ldw x,[ptr16]
      00045E 27 09            [ 1] 1158 	jreq 10$
      000460 CD 03 0E         [ 4] 1159 	call insert_line
      000463 72 5F 00 03      [ 1] 1160 	clr  count 
      000467 20 0F            [ 2] 1161 	jra  11$ 
      000469                       1162 10$: ; line# is zero 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000469 CE 00 19         [ 2] 1163 	ldw x,ptr16 
      00046C CF 00 04         [ 2] 1164 	ldw basicptr,x 
      00046F E6 02            [ 1] 1165 	ld a,(2,x)
      000471 C7 00 03         [ 1] 1166 	ld count,a 
      000474 35 03 00 01      [ 1] 1167 	mov in,#3 
      000478                       1168 11$:
      000478                       1169 	_drop VSIZE 
      000478 5B 04            [ 2]    1     addw sp,#VSIZE 
      00047A 72 1B 00 25      [ 1] 1170 	bres flags,#FCOMP 
      00047E 81               [ 4] 1171 	ret 
                                   1172 
                                   1173 ;------------------------------------
                                   1174 ;  set all variables to zero 
                                   1175 ; input:
                                   1176 ;   none 
                                   1177 ; output:
                                   1178 ;	none
                                   1179 ;------------------------------------
      00047F                       1180 clear_vars:
      00047F AE 00 28         [ 2] 1181 	ldw x,#vars 
      000482 90 AE 00 34      [ 2] 1182 	ldw y,#2*26 
      000486 7F               [ 1] 1183 1$:	clr (x)
      000487 5C               [ 2] 1184 	incw x 
      000488 90 5A            [ 2] 1185 	decw y 
      00048A 26 FA            [ 1] 1186 	jrne 1$
      00048C 81               [ 4] 1187 	ret 
                                   1188 
                                   1189 ;-------------------------------------
                                   1190 ; check if A is a letter 
                                   1191 ; input:
                                   1192 ;   A 			character to test 
                                   1193 ; output:
                                   1194 ;   C flag      1 true, 0 false 
                                   1195 ;-------------------------------------
      00048D                       1196 is_alpha:
      00048D A1 41            [ 1] 1197 	cp a,#'A 
      00048F 8C               [ 1] 1198 	ccf
      000490 24 0B            [ 1] 1199 	jrnc 9$ 
      000492 A1 5B            [ 1] 1200 	cp a,#'Z+1 
      000494 25 07            [ 1] 1201 	jrc 9$ 
      000496 A1 61            [ 1] 1202 	cp a,#'a 
      000498 8C               [ 1] 1203 	ccf 
      000499 24 02            [ 1] 1204 	jrnc 9$
      00049B A1 7B            [ 1] 1205 	cp a,#'z+1   
      00049D 81               [ 4] 1206 9$: ret 	
                                   1207 
                                   1208 ;------------------------------------
                                   1209 ; check if character in {'0'..'9'}
                                   1210 ; input:
                                   1211 ;    A  character to test
                                   1212 ; output:
                                   1213 ;    Carry  0 not digit | 1 digit
                                   1214 ;------------------------------------
      00049E                       1215 is_digit:
      00049E A1 30            [ 1] 1216 	cp a,#'0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004A0 25 03            [ 1] 1217 	jrc 1$
      0004A2 A1 3A            [ 1] 1218     cp a,#'9+1
      0004A4 8C               [ 1] 1219 	ccf 
      0004A5 8C               [ 1] 1220 1$:	ccf 
      0004A6 81               [ 4] 1221     ret
                                   1222 
                                   1223 ;-------------------------------------
                                   1224 ;  program initialization entry point 
                                   1225 ;-------------------------------------
                           000001  1226 	MAJOR=1
                           000000  1227 	MINOR=0
      0004A7 0A 0A 54 69 6E 79 20  1228 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0004ED                       1229 cold_start:
                                   1230 ;set stack 
      0004ED AE 17 FF         [ 2] 1231 	ldw x,#STACK_EMPTY
      0004F0 94               [ 1] 1232 	ldw sp,x   
                                   1233 ; clear all ram 
      0004F1 7F               [ 1] 1234 0$: clr (x)
      0004F2 5A               [ 2] 1235 	decw x 
      0004F3 26 FC            [ 1] 1236 	jrne 0$
                                   1237 ; activate pull up on all inputs 
      0004F5 A6 FF            [ 1] 1238 	ld a,#255 
      0004F7 C7 50 03         [ 1] 1239 	ld PA_CR1,a 
      0004FA C7 50 08         [ 1] 1240 	ld PB_CR1,a 
      0004FD C7 50 0D         [ 1] 1241 	ld PC_CR1,a 
      000500 C7 50 12         [ 1] 1242 	ld PD_CR1,a 
      000503 C7 50 17         [ 1] 1243 	ld PE_CR1,a 
      000506 C7 50 1C         [ 1] 1244 	ld PF_CR1,a 
      000509 C7 50 21         [ 1] 1245 	ld PG_CR1,a 
      00050C C7 50 2B         [ 1] 1246 	ld PI_CR1,a
                                   1247 ; set LD2 pin as output and turn it on
      00050F 72 1A 50 0D      [ 1] 1248     bset PC_CR1,#LED2_BIT
      000513 72 1A 50 0E      [ 1] 1249     bset PC_CR2,#LED2_BIT
      000517 72 1A 50 0C      [ 1] 1250     bset PC_DDR,#LED2_BIT
      00051B 72 1A 50 0A      [ 1] 1251 	bset PC_ODR,#LED2_BIT 
                                   1252 ; disable schmitt triggers on Arduino CN4 analog inputs
      00051F 55 00 3F 54 07   [ 1] 1253 	mov ADC_TDRL,0x3f
                                   1254 ; disable peripherals clocks
                                   1255 ;	clr CLK_PCKENR1 
                                   1256 ;	clr CLK_PCKENR2
      000524 72 5F 50 F2      [ 1] 1257 	clr AWU_TBR 
      000528 72 14 50 CA      [ 1] 1258 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1259 ; select internal clock no divisor: 16 Mhz 	
      00052C A6 E1            [ 1] 1260 	ld a,#CLK_SWR_HSI 
      00052E 5F               [ 1] 1261 	clrw x  
      00052F CD 00 9D         [ 4] 1262     call clock_init 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000532 CD 00 C0         [ 4] 1263 	call timer4_init
      000535 CD 00 B3         [ 4] 1264 	call timer2_init
                                   1265 ; UART1 at 115200 BAUD
      000538 CD 01 89         [ 4] 1266 	call uart1_init
                                   1267 ; activate PE_4 (user button interrupt)
      00053B 72 18 50 18      [ 1] 1268     bset PE_CR2,#USR_BTN_BIT 
                                   1269 ; display system information
      00053F AE 04 A7         [ 2] 1270 	ldw x,#software 
      000542 CD 01 D7         [ 4] 1271 	call puts 
      000545 A6 01            [ 1] 1272 	ld a,#MAJOR 
      000547 C7 00 0D         [ 1] 1273 	ld acc8,a 
      00054A 5F               [ 1] 1274 	clrw x 
      00054B CF 00 0B         [ 2] 1275 	ldw acc24,x 
      00054E A6 0A            [ 1] 1276 	ld a,#10 
      000550 CD 08 61         [ 4] 1277 	call prti24 
      000553 A6 2E            [ 1] 1278 	ld a,#'.
      000555 CD 01 C4         [ 4] 1279 	call putc 
      000558 A6 00            [ 1] 1280 	ld a,#MINOR 
      00055A C7 00 0D         [ 1] 1281 	ld acc8,a 
      00055D 5F               [ 1] 1282 	clrw x 
      00055E CF 00 0B         [ 2] 1283 	ldw acc24,x 
      000561 A6 0A            [ 1] 1284 	ld a,#10 
      000563 CD 08 61         [ 4] 1285 	call prti24 
      000566 A6 0D            [ 1] 1286 	ld a,#CR 
      000568 CD 01 C4         [ 4] 1287 	call putc 
      00056B CD 18 A3         [ 4] 1288 	call seek_fdrive 
      00056E 9A               [ 1] 1289 	rim 
      00056F 72 5C 00 17      [ 1] 1290 	inc seedy+1 
      000573 72 5C 00 15      [ 1] 1291 	inc seedx+1 
      000577 CD 05 FF         [ 4] 1292 	call clear_basic
      00057A CD 11 37         [ 4] 1293 	call ubound 
                                   1294 ;	jra 2$	
                                   1295 ; 150 msec beep 
      00057D AE 00 96         [ 2] 1296 	ldw x,#150 
      000580 90 AE 03 E6      [ 2] 1297 	ldw y,#998 
      000584 CD 17 27         [ 4] 1298 	call beep  
      000587 72 1B 50 0A      [ 1] 1299 2$:	bres PC_ODR,#LED2_BIT	
      00058B CD 05 94         [ 4] 1300 	call warm_init
      00058E CD 05 C1         [ 4] 1301 	call load_autorun
      000591 CC 07 AB         [ 2] 1302     jp cmd_line  
                                   1303 
      000594                       1304 warm_init:
      000594 72 5F 00 25      [ 1] 1305 	clr flags 
      000598 72 5F 00 22      [ 1] 1306 	clr loop_depth 
      00059C 35 04 00 26      [ 1] 1307 	mov tab_width,#TAB_WIDTH 
      0005A0 35 0A 00 0A      [ 1] 1308 	mov base,#10 
      0005A4 AE 00 00         [ 2] 1309 	ldw x,#0 
      0005A7 CF 00 04         [ 2] 1310 	ldw basicptr,x 
      0005AA CF 00 00         [ 2] 1311 	ldw in.w,x 
      0005AD 72 5F 00 03      [ 1] 1312 	clr count 
      0005B1 81               [ 4] 1313 	ret 
                                   1314 
                                   1315 ;--------------------------
                                   1316 ; called by tb_error when
                                   1317 ; flag FAUTORUN is set.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1318 ; There is a bug in autorun 
                                   1319 ; program so cancel it.
                                   1320 ;---------------------------
      0005B2                       1321 cancel_autorun:
      0005B2 AE 40 00         [ 2] 1322 	ldw x,#AUTORUN_NAME 
      0005B5 CF 00 19         [ 2] 1323 	ldw farptr+1,x 
      0005B8 4F               [ 1] 1324 	clr a
      0005B9 5F               [ 1] 1325 	clrw x  
      0005BA C7 00 18         [ 1] 1326 	ld farptr,a 
      0005BD CD 00 F1         [ 4] 1327 	call write_byte 
      0005C0 81               [ 4] 1328 	ret 
                                   1329 
                                   1330 
                                   1331 ;--------------------------
                                   1332 ; if autorun file defined 
                                   1333 ; in eeprom address AUTORUN_NAME 
                                   1334 ; load and run it.
                                   1335 ;-------------------------
      0005C1                       1336 load_autorun:
      0005C1 90 AE 40 00      [ 2] 1337 	ldw y,#AUTORUN_NAME
      0005C5 90 F6            [ 1] 1338 	ld a,(y)
      0005C7 27 20            [ 1] 1339 	jreq 9$
      0005C9 CD 19 01         [ 4] 1340 	call search_file
      0005CC 25 05            [ 1] 1341 	jrc 2$ 
                                   1342 ; if file doesn't exit
      0005CE CD 05 B2         [ 4] 1343 	call cancel_autorun
      0005D1 20 16            [ 2] 1344 	jra 9$ 
      0005D3 CD 1A 0B         [ 4] 1345 2$:	call load_file
      0005D6 AE 40 00         [ 2] 1346 	ldw x,#AUTORUN_NAME 
      0005D9 CD 01 D7         [ 4] 1347 	call puts
      0005DC AE 05 EA         [ 2] 1348 	ldw x,#autorun_msg 
      0005DF CD 01 D7         [ 4] 1349 	call puts 
      0005E2 72 1C 00 25      [ 1] 1350 	bset flags,#FAUTORUN 
      0005E6 CC 16 EC         [ 2] 1351 	jp run_it    
      0005E9 81               [ 4] 1352 9$: ret 	
                                   1353 
      0005EA 20 6C 6F 61 64 65 64  1354 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1355 ;---------------------------
                                   1356 ; reset BASIC text variables 
                                   1357 ; and clear variables 
                                   1358 ;---------------------------
      0005FF                       1359 clear_basic:
      0005FF 72 5F 00 03      [ 1] 1360 	clr count 
      000603 AE 00 5C         [ 2] 1361 	ldw x,#free_ram 
      000606 CF 00 1E         [ 2] 1362 	ldw txtbgn,x 
      000609 CF 00 20         [ 2] 1363 	ldw txtend,x 
      00060C CD 04 7F         [ 4] 1364 	call clear_vars 
      00060F 81               [ 4] 1365 	ret 
                                   1366 
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1368 ;;   Tiny BASIC error messages     ;;
                                   1369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000610                       1370 err_msg:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000610 00 00 06 2E 06 3C 06  1371 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             4B 06 65 06 75
      00061C 06 8C 06 A3 06 BE 06  1372 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             D0 06 E2
      000626 06 EF 07 23 07 34 07  1373 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace    
             49
                                   1374 
      00062E 0A 4D 65 6D 6F 72 79  1375 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      00063C 0A 73 79 6E 74 61 78  1376 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      00064B 0A 6D 61 74 68 20 6F  1377 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000665 0A 64 69 76 69 73 69  1378 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000675 0A 69 6E 76 61 6C 69  1379 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00068C 0A 72 75 6E 20 74 69  1380 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      0006A3 0A 63 6F 6D 6D 61 6E  1381 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      0006BE 0A 64 75 70 6C 69 63  1382 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006D0 0A 46 69 6C 65 20 6E  1383 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006E2 0A 62 61 64 20 76 61  1384 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006EF 0A 46 69 6C 65 20 69  1385 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
      000723 0A 4E 6F 20 64 61 74  1386 err_no_data: .asciz "\nNo data found.\n"
             61 20 66 6F 75 6E 64
             2E 0A 00
      000734 0A 4E 6F 20 70 72 6F  1387 err_no_prog: .asciz "\nNo program in RAM!\n"
             67 72 61 6D 20 69 6E
             20 52 41 4D 21 0A 00
      000749 0A 46 69 6C 65 20 73  1388 err_no_fspace: .asciz "\nFile system full.\n" 
             79 73 74 65 6D 20 66
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             75 6C 6C 2E 0A 00
                                   1389 
                                   1390 ;rt_msg: .asciz "last token id: "
                                   1391 
      00075D                       1392 syntax_error:
      00075D A6 02            [ 1] 1393 	ld a,#ERR_SYNTAX 
                                   1394 
      00075F                       1395 tb_error:
      00075F AE 06 10         [ 2] 1396 	ldw x, #err_msg 
      000762 72 5F 00 0C      [ 1] 1397 	clr acc16 
      000766 48               [ 1] 1398 	sll a
      000767 72 59 00 0C      [ 1] 1399 	rlc acc16  
      00076B C7 00 0D         [ 1] 1400 	ld acc8, a 
      00076E 72 BB 00 0C      [ 2] 1401 	addw x,acc16 
      000772 FE               [ 2] 1402 	ldw x,(x)
      000773 CD 01 D7         [ 4] 1403 	call puts
      000776 72 0B 00 25 18   [ 2] 1404 	btjf flags,#FCOMP, 1$
      00077B AE 16 E8         [ 2] 1405 	ldw x,#tib
      00077E CD 01 D7         [ 4] 1406 	call puts 
      000781 A6 0D            [ 1] 1407 	ld a,#CR 
      000783 CD 01 C4         [ 4] 1408 	call putc
      000786 CE 00 00         [ 2] 1409 	ldw x,in.w
      000789 CD 01 FF         [ 4] 1410 	call spaces
      00078C A6 5E            [ 1] 1411 	ld a,#'^
      00078E CD 01 C4         [ 4] 1412 	call putc 
      000791 20 11            [ 2] 1413 	jra 6$
      000793 CE 00 04         [ 2] 1414 1$:	ldw x,basicptr
      000796 C6 00 01         [ 1] 1415 	ld a,in 
      000799 CD 12 4D         [ 4] 1416 	call prt_basic_line
      00079C 72 0D 00 25 03   [ 2] 1417 	btjf flags,#FAUTORUN ,2$
      0007A1 CD 05 B2         [ 4] 1418 	call cancel_autorun  
      0007A4                       1419 2$:
                                   1420 ;	ldw x,#rt_msg 
                                   1421 ;	call puts 
                                   1422 ;	clrw x 
                                   1423 ;	ld a,in.saved 
                                   1424 ;	ld xl,a 
                                   1425 ;	ld a,([basicptr],x)
                                   1426 ;	clrw x 
                                   1427 ;	ld xl,a 
                                   1428 ;	call print_int 
      0007A4 AE 17 FF         [ 2] 1429 6$: ldw x,#STACK_EMPTY 
      0007A7 94               [ 1] 1430     ldw sp,x
      0007A8                       1431 warm_start:
      0007A8 CD 05 94         [ 4] 1432 	call warm_init
                                   1433 ;----------------------------
                                   1434 ;   BASIC interpreter
                                   1435 ;----------------------------
      0007AB                       1436 cmd_line: ; user interface 
      0007AB 72 5F 00 01      [ 1] 1437 	clr in 
      0007AF A6 0D            [ 1] 1438 	ld a,#CR 
      0007B1 CD 01 C4         [ 4] 1439 	call putc 
      0007B4 A6 3E            [ 1] 1440 	ld a,#'> 
      0007B6 CD 01 C4         [ 4] 1441 	call putc
      0007B9 CD 09 D3         [ 4] 1442 	call readln
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0007BC CD 03 85         [ 4] 1443 	call compile
                                   1444 ; if text begin with a line number
                                   1445 ; the compiler set count to zero    
                                   1446 ; so code is not interpreted
      0007BF 72 5D 00 03      [ 1] 1447 	tnz count 
      0007C3 27 E6            [ 1] 1448 	jreq cmd_line
                                   1449 ; if direct command 
                                   1450 ; it's ready to interpret 
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1452 ;; This is the interpreter loop
                                   1453 ;; for each BASIC code line. 
                                   1454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0007C5                       1455 interpreter: 
      0007C5 C6 00 01         [ 1] 1456 	ld a,in 
      0007C8 C1 00 03         [ 1] 1457 	cp a,count 
      0007CB 2B 1D            [ 1] 1458 	jrmi 0$
      0007CD 72 01 00 25 D9   [ 2] 1459 	btjf flags, #FRUN, cmd_line
                                   1460 ;next BASIC line
      0007D2 CE 00 04         [ 2] 1461 	ldw x,basicptr
      0007D5 72 BB 00 00      [ 2] 1462 	addw x,in.w 
      0007D9 C3 00 20         [ 2] 1463 	cpw x,txtend 
      0007DC 2A CA            [ 1] 1464 	jrpl warm_start
      0007DE CF 00 04         [ 2] 1465 	ldw basicptr,x ; start of next line  
      0007E1 E6 02            [ 1] 1466 	ld a,(2,x)
      0007E3 C7 00 03         [ 1] 1467 	ld count,a 
      0007E6 35 03 00 01      [ 1] 1468 	mov in,#3 ; skip first 3 bytes of line 
      0007EA                       1469 0$: 
      0007EA CD 08 10         [ 4] 1470 	call next_token
      0007ED 5D               [ 2] 1471 	tnzw x 
      0007EE 2B 19            [ 1] 1472 	jrmi 4$ 
      0007F0 A1 01            [ 1] 1473 	cp a,#TK_COLON 
      0007F2 27 D1            [ 1] 1474 	jreq interpreter 
      0007F4 A1 05            [ 1] 1475 	cp a,#TK_VAR
      0007F6 26 05            [ 1] 1476 	jrne 2$
      0007F8 CD 11 6A         [ 4] 1477 	call let_var  
      0007FB 20 C8            [ 2] 1478 	jra interpreter 
      0007FD                       1479 2$:	
      0007FD A1 0A            [ 1] 1480 	cp a,#TK_ARRAY 
      0007FF 26 05            [ 1] 1481 	jrne 3$
      000801 CD 11 67         [ 4] 1482 	call let_array 
      000804 20 BF            [ 2] 1483 	jra interpreter 
      000806                       1484 3$:	
      000806 CC 07 5D         [ 2] 1485 	jp syntax_error 
      000809                       1486 4$:
      000809 A1 06            [ 1] 1487 	cp a,#TK_CMD
      00080B 26 F9            [ 1] 1488 	jrne 3$
      00080D FD               [ 4] 1489 	call (x) 
      00080E 20 B5            [ 2] 1490 	jra interpreter 
                                   1491 
                                   1492 		
                                   1493 ;--------------------------
                                   1494 ; extract next token from
                                   1495 ; token list 
                                   1496 ; basicptr -> base address 
                                   1497 ; in  -> offset in list array 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1498 ; output:
                                   1499 ;   A 		token attribute
                                   1500 ;   X 		token value if there is one
                                   1501 ;----------------------------------------
      000810                       1502 next_token:
      000810 5F               [ 1] 1503 	clrw x 
      000811 C6 00 01         [ 1] 1504 	ld a,in 
      000814 C0 00 03         [ 1] 1505 	sub a,count ; don't replace sub by cp.  
      000817 2B 01            [ 1] 1506 	jrmi 0$
      000819 81               [ 4] 1507 	ret  ; end of BASIC line 
      00081A                       1508 0$: 
      00081A 55 00 01 00 02   [ 1] 1509 	mov in.saved,in 
      00081F 90 CE 00 04      [ 2] 1510 	ldw y,basicptr 
      000823 72 B9 00 00      [ 2] 1511 	addw y,in.w 
      000827 90 F6            [ 1] 1512 	ld a,(y)
      000829 90 5C            [ 2] 1513 	incw y  
      00082B A1 0A            [ 1] 1514 	cp a,#TK_ARRAY
      00082D 2A 29            [ 1] 1515 	jrpl 9$  ; no attribute for these
      00082F A1 04            [ 1] 1516 	cp a,#TK_INTGR
      000831 2B 08            [ 1] 1517 	jrmi 1$
                                   1518 ; attribute type WORD 	
      000833 93               [ 1] 1519 	ldw x,y 
      000834 FE               [ 2] 1520 	ldw x,(x)
      000835 72 A9 00 02      [ 2] 1521 	addw y,#2  
      000839 20 1D            [ 2] 1522 	jra 9$
      00083B                       1523 1$: ; 
      00083B A1 03            [ 1] 1524 	cp a,#TK_CHAR
      00083D 26 0A            [ 1] 1525 	jrne 2$
      00083F 90 F6            [ 1] 1526 	ld a,(y)
      000841 90 5C            [ 2] 1527 	incw y
      000843 5F               [ 1] 1528 	clrw x 
      000844 97               [ 1] 1529 	ld xl,a 
      000845 A6 03            [ 1] 1530 	ld a,#TK_CHAR
      000847 20 0F            [ 2] 1531 	jra 9$ 
      000849 A1 02            [ 1] 1532 2$:	cp a,#TK_QSTR 
      00084B 26 0B            [ 1] 1533 	jrne 9$
      00084D 93               [ 1] 1534 	ldw x,y 
                                   1535 ; move pointer after string 
      00084E 90 7D            [ 1] 1536 3$:	tnz (y)
      000850 27 04            [ 1] 1537 	jreq 4$
      000852 90 5C            [ 2] 1538 	incw y
      000854 20 F8            [ 2] 1539 	jra 3$ 
      000856 90 5C            [ 2] 1540 4$:	incw y 
      000858 72 B2 00 04      [ 2] 1541 9$: subw y,basicptr 
      00085C 90 CF 00 00      [ 2] 1542     ldw in.w,y 
      000860 81               [ 4] 1543 	ret	
                                   1544 
                                   1545 
                                   1546 ;----------------------------------------
                                   1547 ;   DEBUG support functions
                                   1548 ;----------------------------------------
                           000000  1549 .if DEBUG 
                                   1550 
                                   1551 ; turn LED on 
                                   1552 ledon:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1553     bset PC_ODR,#LED2_BIT
                                   1554     ret 
                                   1555 
                                   1556 ; turn LED off 
                                   1557 ledoff:
                                   1558     bres PC_ODR,#LED2_BIT 
                                   1559     ret 
                                   1560 
                                   1561 ; invert LED status 
                                   1562 ledtoggle:
                                   1563     ld a,#LED2_MASK
                                   1564     xor a,PC_ODR
                                   1565     ld PC_ODR,a
                                   1566     ret 
                                   1567 
                                   1568 left_paren:
                                   1569 	ld a,#SPACE 
                                   1570 	call putc
                                   1571 	ld a,#'( 
                                   1572 	call putc 	
                                   1573 	ret 
                                   1574 
                                   1575 ;------------------------------
                                   1576 ; print 8 bit register 
                                   1577 ; input:
                                   1578 ;   X  point to register name 
                                   1579 ;   A  register value to print 
                                   1580 ; output:
                                   1581 ;   none
                                   1582 ;------------------------------- 
                                   1583 prt_reg8:
                                   1584 	push a 
                                   1585 	call puts 
                                   1586 	ld a,(1,sp) 
                                   1587 	ld acc8,a 
                                   1588 	clrw x 
                                   1589 	ld xl,a 
                                   1590 	mov base,#16
                                   1591 	call print_int 
                                   1592 	call left_paren 
                                   1593 	pop a 
                                   1594 	clrw x 
                                   1595 	ld xl,a 
                                   1596 	mov base,#10 
                                   1597 	call print_int  
                                   1598 	ld a,#') 
                                   1599 	call putc
                                   1600 	ret
                                   1601 
                                   1602 ;--------------------------------
                                   1603 ; print 16 bits register 
                                   1604 ; input:
                                   1605 ;   X   point register name 
                                   1606 ;   Y   register value to print 
                                   1607 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1608 ;  none
                                   1609 ;--------------------------------
                                   1610 prt_reg16: 
                                   1611 	pushw y 
                                   1612 	call puts 
                                   1613 	ldw x,(1,sp) 
                                   1614 	mov base,#16 
                                   1615 	call print_int  
                                   1616 	call left_paren 
                                   1617 	popw x 
                                   1618 	mov base,#10 
                                   1619 	call print_int  
                                   1620 	ld a,#') 
                                   1621 	call putc
                                   1622 	ret 
                                   1623 
                                   1624 ;------------------------------------
                                   1625 ; print registers contents saved on
                                   1626 ; stack by trap interrupt.
                                   1627 ;------------------------------------
                                   1628 print_registers:
                                   1629 	ldw x,#STATES
                                   1630 	call puts
                                   1631 ; print EPC 
                                   1632 	ldw x, #REG_EPC
                                   1633 	call puts 
                                   1634 	ld a, (11,sp)
                                   1635 	ld acc8,a 
                                   1636 	ld a, (10,sp) 
                                   1637 	ld acc16,a 
                                   1638 	ld a,(9,sp) 
                                   1639 	ld acc24,a
                                   1640 	clrw x  
                                   1641 	ld a,#16
                                   1642 	call prti24  
                                   1643 ; print X
                                   1644 	ldw x,#REG_X
                                   1645 	ldw y,(5,sp)
                                   1646 	call prt_reg16  
                                   1647 ; print Y 
                                   1648 	ldw x,#REG_Y
                                   1649 	ldw y, (7,sp)
                                   1650 	call prt_reg16  
                                   1651 ; print A 
                                   1652 	ldw x,#REG_A
                                   1653 	ld a, (4,sp) 
                                   1654 	call prt_reg8
                                   1655 ; print CC 
                                   1656 	ldw x,#REG_CC 
                                   1657 	ld a, (3,sp) 
                                   1658 	call prt_reg8 
                                   1659 ; print SP 
                                   1660 	ldw x,#REG_SP
                                   1661 	ldw y,sp 
                                   1662 	addw y,#12
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1663 	call prt_reg16  
                                   1664 	ld a,#'\n' 
                                   1665 	call putc
                                   1666 	ret
                                   1667 
                                   1668 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
                                   1669 REG_EPC: .asciz "EPC:"
                                   1670 REG_Y:   .asciz "\nY:" 
                                   1671 REG_X:   .asciz "\nX:"
                                   1672 REG_A:   .asciz "\nA:" 
                                   1673 REG_CC:  .asciz "\nCC:"
                                   1674 REG_SP:  .asciz "\nSP:"
                                   1675 
                                   1676 .endif ; DEBUG 
                                   1677 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1678 
                                   1679 
                                   1680 ;------------------------------------
                                   1681 ; print integer in acc24 
                                   1682 ; input:
                                   1683 ;	acc24 		integer to print 
                                   1684 ;	A 			numerical base for conversion 
                                   1685 ;               if bit 7 is set add a space at print end.
                                   1686 ;   XL 			field width, 0 -> no fill.
                                   1687 ;  output:
                                   1688 ;    none 
                                   1689 ;------------------------------------
                           000001  1690 	WIDTH = 1
                           000002  1691 	BASE = 2
                           000003  1692 	ADD_SPACE=3 ; add a space after number 
                           000003  1693 	VSIZE = 3
      000861                       1694 prti24:
      000861                       1695 	_vars VSIZE 
      000861 52 03            [ 2]    1     sub sp,#VSIZE 
      000863 0F 03            [ 1] 1696 	clr (ADD_SPACE,sp)
      000865 A5 80            [ 1] 1697 	bcp a,#0x80 
      000867 27 02            [ 1] 1698 	jreq 0$ 
      000869 03 03            [ 1] 1699 	cpl (ADD_SPACE,sp)
      00086B A4 1F            [ 1] 1700 0$:	and a,#31 
      00086D 6B 02            [ 1] 1701 	ld (BASE,sp),a
      00086F 9F               [ 1] 1702 	ld a,xl
      000870 6B 01            [ 1] 1703 	ld (WIDTH,sp),a 
      000872 7B 02            [ 1] 1704 	ld a, (BASE,sp)  
      000874 CD 09 07         [ 4] 1705     call itoa  ; conversion entier en  .asciz
      000877 7B 01            [ 1] 1706 1$: ld a,(WIDTH,sp)
      000879 27 1F            [ 1] 1707 	jreq 4$
      00087B C7 00 0D         [ 1] 1708 	ld acc8,a 
      00087E 89               [ 2] 1709 	pushw x 
      00087F CD 02 0B         [ 4] 1710 	call strlen 
      000882 9F               [ 1] 1711 	ld a,xl 
      000883 85               [ 2] 1712 	popw x 
      000884 31 00 0D         [ 3] 1713 	exg a,acc8 
      000887 C0 00 0D         [ 1] 1714 	sub a,acc8 
      00088A 2B 0E            [ 1] 1715 	jrmi 4$
      00088C 6B 01            [ 1] 1716 	ld (WIDTH,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00088E A6 20            [ 1] 1717 	ld  a,#SPACE
      000890 0D 01            [ 1] 1718 3$: tnz (WIDTH,sp)
      000892 27 06            [ 1] 1719 	jreq 4$
      000894 5A               [ 2] 1720 	decw x 
      000895 F7               [ 1] 1721 	ld (x),a 
      000896 0A 01            [ 1] 1722 	dec (WIDTH,sp) 
      000898 20 F6            [ 2] 1723 	jra 3$
      00089A                       1724 4$: 
      00089A CD 01 D7         [ 4] 1725 	call puts 
      00089D 0D 03            [ 1] 1726 	tnz (ADD_SPACE,sp)
      00089F 27 05            [ 1] 1727 	jreq 5$
      0008A1 A6 20            [ 1] 1728     ld a,#SPACE 
      0008A3 CD 01 C4         [ 4] 1729 	call putc 
      0008A6                       1730 5$: _drop VSIZE 
      0008A6 5B 03            [ 2]    1     addw sp,#VSIZE 
      0008A8 81               [ 4] 1731     ret	
                                   1732 
                                   1733 ;-----------------------------------
                                   1734 ; print a 16 bit integer 
                                   1735 ; using variable 'base' as conversion
                                   1736 ; format.
                                   1737 ; input:
                                   1738 ;   X       integer to print 
                                   1739 ;   base    conversion base 
                                   1740 ; output:
                                   1741 ;   none 
                                   1742 ;-----------------------------------
                           000001  1743 	SIGN=1
                           000001  1744 	VSIZE=1
      0008A9                       1745 print_int: 
      0008A9                       1746 	_vars VSIZE 
      0008A9 52 01            [ 2]    1     sub sp,#VSIZE 
      0008AB 0F 01            [ 1] 1747 	clr (SIGN,sp)
      0008AD 90 AE 17 5F      [ 2] 1748 	ldw y,#pad+PAD_SIZE-1 
      0008B1 90 7F            [ 1] 1749 	clr (y)
      0008B3 C6 00 0A         [ 1] 1750 	ld a,base  
      0008B6 A1 0A            [ 1] 1751 	cp a,#10 
      0008B8 26 06            [ 1] 1752 	jrne 1$ 
      0008BA 5D               [ 2] 1753 	tnzw x 
      0008BB 2A 03            [ 1] 1754 	jrpl 1$ 
      0008BD 03 01            [ 1] 1755 	cpl (SIGN,sp)
      0008BF 50               [ 2] 1756 	negw x 	 
      0008C0                       1757 1$:	
      0008C0 C6 00 0A         [ 1] 1758 	ld a,base 
      0008C3 62               [ 2] 1759 	div x,a 
      0008C4 AB 30            [ 1] 1760 	add a,#'0 
      0008C6 A1 3A            [ 1] 1761 	cp a,#'9+1 
      0008C8 2B 02            [ 1] 1762 	jrmi 2$ 
      0008CA AB 07            [ 1] 1763 	add a,#7 
      0008CC 90 5A            [ 2] 1764 2$: decw y 
      0008CE 90 F7            [ 1] 1765 	ld (y),a 
      0008D0 5D               [ 2] 1766 	tnzw x 
      0008D1 26 ED            [ 1] 1767 	jrne 1$ 
      0008D3 A6 10            [ 1] 1768 	ld a,#16 
      0008D5 C1 00 0A         [ 1] 1769 	cp a,base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008D8 26 08            [ 1] 1770 	jrne 3$
      0008DA A6 24            [ 1] 1771 	ld a,#'$
      0008DC 90 5A            [ 2] 1772 	decw y  
      0008DE 90 F7            [ 1] 1773 	ld (y),a
      0008E0 20 0A            [ 2] 1774 	jra 9$ 
      0008E2 0D 01            [ 1] 1775 3$: tnz (SIGN,sp)
      0008E4 27 06            [ 1] 1776 	jreq 9$ 
      0008E6 A6 2D            [ 1] 1777 	ld a,#'-
      0008E8 90 5A            [ 2] 1778 	decw y  
      0008EA 90 F7            [ 1] 1779 	ld (y),a
      0008EC                       1780 9$:	
      0008EC 93               [ 1] 1781 	ldw x,y 
      0008ED 1D 17 5F         [ 2] 1782 	subw x,#pad+PAD_SIZE-1 
      0008F0 50               [ 2] 1783 	negw x  
      0008F1                       1784 10$:
      0008F1 9F               [ 1] 1785 	ld a,xl 
      0008F2 C1 00 26         [ 1] 1786 	cp a,tab_width
      0008F5 24 09            [ 1] 1787 	jruge 12$
      0008F7 90 5A            [ 2] 1788 	decw y 
      0008F9 A6 20            [ 1] 1789 	ld a,#SPACE 
      0008FB 90 F7            [ 1] 1790 	ld (y),a
      0008FD 5C               [ 2] 1791 	incw x 
      0008FE 20 F1            [ 2] 1792 	jra 10$ 
      000900                       1793 12$:
      000900 93               [ 1] 1794     ldw x,y 
      000901 CD 01 D7         [ 4] 1795 	call puts  
      000904                       1796 	_drop VSIZE 
      000904 5B 01            [ 2]    1     addw sp,#VSIZE 
      000906 81               [ 4] 1797 	ret 
                                   1798 
                                   1799 ;------------------------------------
                                   1800 ; convert integer in acc24 to string
                                   1801 ; input:
                                   1802 ;   A	  	base
                                   1803 ;	acc24	integer to convert
                                   1804 ; output:
                                   1805 ;   X  		pointer to string
                                   1806 ;------------------------------------
                           000001  1807 	SIGN=1  ; integer sign 
                           000002  1808 	BASE=2  ; numeric base 
                           000002  1809 	VSIZE=2  ;locals size
      000907                       1810 itoa:
      000907 52 02            [ 2] 1811 	sub sp,#VSIZE
      000909 6B 02            [ 1] 1812 	ld (BASE,sp), a  ; base
      00090B 0F 01            [ 1] 1813 	clr (SIGN,sp)    ; sign
      00090D A1 0A            [ 1] 1814 	cp a,#10
      00090F 26 0A            [ 1] 1815 	jrne 1$
                                   1816 	; base 10 string display with negative sign if bit 23==1
      000911 72 0F 00 0B 05   [ 2] 1817 	btjf acc24,#7,1$
      000916 03 01            [ 1] 1818 	cpl (SIGN,sp)
      000918 CD 09 B0         [ 4] 1819 	call neg_acc24
      00091B                       1820 1$:
                                   1821 ; initialize string pointer 
      00091B AE 17 5F         [ 2] 1822 	ldw x,#pad+PAD_SIZE-1
      00091E 7F               [ 1] 1823 	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00091F                       1824 itoa_loop:
      00091F 7B 02            [ 1] 1825     ld a,(BASE,sp)
      000921 CD 09 4E         [ 4] 1826     call divu24_8 ; acc24/A 
      000924 AB 30            [ 1] 1827     add a,#'0  ; remainder of division
      000926 A1 3A            [ 1] 1828     cp a,#'9+1
      000928 2B 02            [ 1] 1829     jrmi 2$
      00092A AB 07            [ 1] 1830     add a,#7 
      00092C 5A               [ 2] 1831 2$: decw x
      00092D F7               [ 1] 1832     ld (x),a
                                   1833 	; if acc24==0 conversion done
      00092E C6 00 0B         [ 1] 1834 	ld a,acc24
      000931 CA 00 0C         [ 1] 1835 	or a,acc16
      000934 CA 00 0D         [ 1] 1836 	or a,acc8
      000937 26 E6            [ 1] 1837     jrne itoa_loop
                                   1838 	;conversion done, next add '$' or '-' as required
      000939 7B 02            [ 1] 1839 	ld a,(BASE,sp)
      00093B A1 10            [ 1] 1840 	cp a,#16
      00093D 27 08            [ 1] 1841 	jreq 8$
      00093F 7B 01            [ 1] 1842 	ld a,(SIGN,sp)
      000941 27 08            [ 1] 1843     jreq 10$
      000943 A6 2D            [ 1] 1844     ld a,#'-
      000945 20 02            [ 2] 1845 	jra 9$ 
      000947 A6 24            [ 1] 1846 8$: ld a,#'$ 
      000949 5A               [ 2] 1847 9$: decw x
      00094A F7               [ 1] 1848     ld (x),a
      00094B                       1849 10$:
      00094B 5B 02            [ 2] 1850 	addw sp,#VSIZE
      00094D 81               [ 4] 1851 	ret
                                   1852 
                                   1853 ;-------------------------------------
                                   1854 ; divide uint24_t by uint8_t
                                   1855 ; used to convert uint24_t to string
                                   1856 ; input:
                                   1857 ;	acc24	dividend
                                   1858 ;   A 		divisor
                                   1859 ; output:
                                   1860 ;   acc24	quotient
                                   1861 ;   A		remainder
                                   1862 ;------------------------------------- 
                                   1863 ; offset  on sp of arguments and locals
                           000001  1864 	U8   = 1   ; divisor on stack
                           000001  1865 	VSIZE =1
      00094E                       1866 divu24_8:
      00094E 89               [ 2] 1867 	pushw x ; save x
      00094F 88               [ 1] 1868 	push a 
                                   1869 	; ld dividend UU:MM bytes in X
      000950 C6 00 0B         [ 1] 1870 	ld a, acc24
      000953 95               [ 1] 1871 	ld xh,a
      000954 C6 00 0C         [ 1] 1872 	ld a,acc24+1
      000957 97               [ 1] 1873 	ld xl,a
      000958 7B 01            [ 1] 1874 	ld a,(U8,SP) ; divisor
      00095A 62               [ 2] 1875 	div x,a ; UU:MM/U8
      00095B 88               [ 1] 1876 	push a  ;save remainder
      00095C 9E               [ 1] 1877 	ld a,xh
      00095D C7 00 0B         [ 1] 1878 	ld acc24,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000960 9F               [ 1] 1879 	ld a,xl
      000961 C7 00 0C         [ 1] 1880 	ld acc24+1,a
      000964 84               [ 1] 1881 	pop a
      000965 95               [ 1] 1882 	ld xh,a
      000966 C6 00 0D         [ 1] 1883 	ld a,acc24+2
      000969 97               [ 1] 1884 	ld xl,a
      00096A 7B 01            [ 1] 1885 	ld a,(U8,sp) ; divisor
      00096C 62               [ 2] 1886 	div x,a  ; R:LL/U8
      00096D 6B 01            [ 1] 1887 	ld (U8,sp),a ; save remainder
      00096F 9F               [ 1] 1888 	ld a,xl
      000970 C7 00 0D         [ 1] 1889 	ld acc24+2,a
      000973 84               [ 1] 1890 	pop a
      000974 85               [ 2] 1891 	popw x
      000975 81               [ 4] 1892 	ret
                                   1893 
                                   1894 ;--------------------------------------
                                   1895 ; unsigned multiply uint24_t by uint8_t
                                   1896 ; use to convert numerical string to uint24_t
                                   1897 ; input:
                                   1898 ;	acc24	uint24_t 
                                   1899 ;   A		uint8_t
                                   1900 ; output:
                                   1901 ;   acc24   A*acc24
                                   1902 ;-------------------------------------
                                   1903 ; local variables offset  on sp
                           000003  1904 	U8   = 3   ; A pushed on stack
                           000002  1905 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1906 	OVFH = 1  ; multiplication overflow high byte
                           000003  1907 	VSIZE = 3
      000976                       1908 mulu24_8:
      000976 89               [ 2] 1909 	pushw x    ; save X
                                   1910 	; local variables
      000977 88               [ 1] 1911 	push a     ; U8
      000978 5F               [ 1] 1912 	clrw x     ; initialize overflow to 0
      000979 89               [ 2] 1913 	pushw x    ; multiplication overflow
                                   1914 ; multiply low byte.
      00097A C6 00 0D         [ 1] 1915 	ld a,acc24+2
      00097D 97               [ 1] 1916 	ld xl,a
      00097E 7B 03            [ 1] 1917 	ld a,(U8,sp)
      000980 42               [ 4] 1918 	mul x,a
      000981 9F               [ 1] 1919 	ld a,xl
      000982 C7 00 0D         [ 1] 1920 	ld acc24+2,a
      000985 9E               [ 1] 1921 	ld a, xh
      000986 6B 02            [ 1] 1922 	ld (OVFL,sp),a
                                   1923 ; multipy middle byte
      000988 C6 00 0C         [ 1] 1924 	ld a,acc24+1
      00098B 97               [ 1] 1925 	ld xl,a
      00098C 7B 03            [ 1] 1926 	ld a, (U8,sp)
      00098E 42               [ 4] 1927 	mul x,a
                                   1928 ; add overflow to this partial product
      00098F 72 FB 01         [ 2] 1929 	addw x,(OVFH,sp)
      000992 9F               [ 1] 1930 	ld a,xl
      000993 C7 00 0C         [ 1] 1931 	ld acc24+1,a
      000996 4F               [ 1] 1932 	clr a
      000997 A9 00            [ 1] 1933 	adc a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000999 6B 01            [ 1] 1934 	ld (OVFH,sp),a
      00099B 9E               [ 1] 1935 	ld a,xh
      00099C 6B 02            [ 1] 1936 	ld (OVFL,sp),a
                                   1937 ; multiply most signficant byte	
      00099E C6 00 0B         [ 1] 1938 	ld a, acc24
      0009A1 97               [ 1] 1939 	ld xl, a
      0009A2 7B 03            [ 1] 1940 	ld a, (U8,sp)
      0009A4 42               [ 4] 1941 	mul x,a
      0009A5 72 FB 01         [ 2] 1942 	addw x, (OVFH,sp)
      0009A8 9F               [ 1] 1943 	ld a, xl
      0009A9 C7 00 0B         [ 1] 1944 	ld acc24,a
      0009AC 5B 03            [ 2] 1945     addw sp,#VSIZE
      0009AE 85               [ 2] 1946 	popw x
      0009AF 81               [ 4] 1947 	ret
                                   1948 
                                   1949 ;------------------------------------
                                   1950 ;  two's complement acc24
                                   1951 ;  input:
                                   1952 ;		acc24 variable
                                   1953 ;  output:
                                   1954 ;		acc24 variable
                                   1955 ;-------------------------------------
      0009B0                       1956 neg_acc24:
      0009B0 72 53 00 0D      [ 1] 1957 	cpl acc24+2
      0009B4 72 53 00 0C      [ 1] 1958 	cpl acc24+1
      0009B8 72 53 00 0B      [ 1] 1959 	cpl acc24
      0009BC A6 01            [ 1] 1960 	ld a,#1
      0009BE CB 00 0D         [ 1] 1961 	add a,acc24+2
      0009C1 C7 00 0D         [ 1] 1962 	ld acc24+2,a
      0009C4 4F               [ 1] 1963 	clr a
      0009C5 C9 00 0C         [ 1] 1964 	adc a,acc24+1
      0009C8 C7 00 0C         [ 1] 1965 	ld acc24+1,a 
      0009CB 4F               [ 1] 1966 	clr a 
      0009CC C9 00 0B         [ 1] 1967 	adc a,acc24 
      0009CF C7 00 0B         [ 1] 1968 	ld acc24,a 
      0009D2 81               [ 4] 1969 	ret
                                   1970 
                                   1971 
                                   1972 ;------------------------------------
                                   1973 ; read a line of text from terminal
                                   1974 ; input:
                                   1975 ;	none
                                   1976 ; local variable on stack:
                                   1977 ;	LL  line length
                                   1978 ;   RXCHAR last received chaaracte 
                                   1979 ; output:
                                   1980 ;   text in tib  buffer
                                   1981 ;------------------------------------
                                   1982 	; local variables
                           000001  1983 	LL_HB=1
                           000001  1984 	RXCHAR = 1 ; last char received
                           000002  1985 	LL = 2  ; accepted line length
                           000002  1986 	VSIZE=2 
      0009D3                       1987 readln:
      0009D3 5F               [ 1] 1988 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009D4 89               [ 2] 1989 	pushw x 
      0009D5 90 AE 16 E8      [ 2] 1990  	ldw y,#tib ; input buffer
      0009D9                       1991 readln_loop:
      0009D9 CD 01 CD         [ 4] 1992 	call getc
      0009DC 6B 01            [ 1] 1993 	ld (RXCHAR,sp),a
      0009DE A1 0D            [ 1] 1994 	cp a,#CR
      0009E0 26 03            [ 1] 1995 	jrne 1$
      0009E2 CC 0A 4E         [ 2] 1996 	jp readln_quit
      0009E5 A1 0A            [ 1] 1997 1$:	cp a,#LF 
      0009E7 27 65            [ 1] 1998 	jreq readln_quit
      0009E9 A1 08            [ 1] 1999 	cp a,#BS
      0009EB 27 3D            [ 1] 2000 	jreq del_back
      0009ED A1 04            [ 1] 2001 	cp a,#CTRL_D
      0009EF 27 2A            [ 1] 2002 	jreq del_ln
      0009F1 A1 12            [ 1] 2003 	cp a,#CTRL_R 
      0009F3 27 06            [ 1] 2004 	jreq reprint 
                                   2005 ;	cp a,#'[
                                   2006 ;	jreq ansi_seq
      0009F5                       2007 final_test:
      0009F5 A1 20            [ 1] 2008 	cp a,#SPACE
      0009F7 2A 40            [ 1] 2009 	jrpl accept_char
      0009F9 20 DE            [ 2] 2010 	jra readln_loop
      0009FB                       2011 ansi_seq:
                                   2012 ;	call getc
                                   2013 ;	cp a,#'C 
                                   2014 ;	jreq rigth_arrow
                                   2015 ;	cp a,#'D 
                                   2016 ;	jreq left_arrow 
                                   2017 ;	jra final_test
      0009FB                       2018 right_arrow:
                                   2019 ;	ld a,#BSP 
                                   2020 ;	call putc 
                                   2021 ;	jra realn_loop 
      0009FB                       2022 left_arrow:
                                   2023 ;	jra readln_loop
      0009FB                       2024 reprint: 
      0009FB 0D 02            [ 1] 2025 	tnz (LL,sp)
      0009FD 26 DA            [ 1] 2026 	jrne readln_loop
      0009FF AE 16 E8         [ 2] 2027 	ldw x,#tib 
      000A02 CD 02 0B         [ 4] 2028 	call strlen 
      000A05 90 AE 16 E8      [ 2] 2029 	ldw y,#tib 
      000A09 9F               [ 1] 2030 	ld a,xl
      000A0A 27 CD            [ 1] 2031 	jreq readln_loop
      000A0C 6B 02            [ 1] 2032 	ld (LL,sp),a 
      000A0E AE 16 E8         [ 2] 2033 	ldw x,#tib 
      000A11 CD 01 D7         [ 4] 2034 	call puts
      000A14 0F 01            [ 1] 2035 	clr (LL_HB,sp)
      000A16 72 F9 01         [ 2] 2036 	addw y,(LL_HB,sp)
      000A19 20 BE            [ 2] 2037 	jra readln_loop 
      000A1B                       2038 del_ln:
      000A1B 7B 02            [ 1] 2039 	ld a,(LL,sp)
      000A1D CD 01 F1         [ 4] 2040 	call delete
      000A20 90 AE 16 E8      [ 2] 2041 	ldw y,#tib
      000A24 90 7F            [ 1] 2042 	clr (y)
      000A26 0F 02            [ 1] 2043 	clr (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A28 20 AF            [ 2] 2044 	jra readln_loop
      000A2A                       2045 del_back:
      000A2A 0D 02            [ 1] 2046     tnz (LL,sp)
      000A2C 27 AB            [ 1] 2047     jreq readln_loop
      000A2E 0A 02            [ 1] 2048     dec (LL,sp)
      000A30 90 5A            [ 2] 2049     decw y
      000A32 90 7F            [ 1] 2050     clr  (y)
      000A34 CD 01 E1         [ 4] 2051     call bksp 
      000A37 20 A0            [ 2] 2052     jra readln_loop	
      000A39                       2053 accept_char:
      000A39 A6 4F            [ 1] 2054 	ld a,#TIB_SIZE-1
      000A3B 11 02            [ 1] 2055 	cp a, (LL,sp)
      000A3D 27 9A            [ 1] 2056 	jreq readln_loop
      000A3F 7B 01            [ 1] 2057 	ld a,(RXCHAR,sp)
      000A41 90 F7            [ 1] 2058 	ld (y),a
      000A43 0C 02            [ 1] 2059 	inc (LL,sp)
      000A45 90 5C            [ 2] 2060 	incw y
      000A47 90 7F            [ 1] 2061 	clr (y)
      000A49 CD 01 C4         [ 4] 2062 	call putc 
      000A4C 20 8B            [ 2] 2063 	jra readln_loop
      000A4E                       2064 readln_quit:
      000A4E 90 7F            [ 1] 2065 	clr (y)
      000A50 7B 02            [ 1] 2066 	ld a,(LL,sp)
      000A52 C7 00 03         [ 1] 2067 	ld count,a 
      000A55                       2068 	_drop VSIZE 
      000A55 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A57 A6 0D            [ 1] 2069 	ld a,#CR
      000A59 CD 01 C4         [ 4] 2070 	call putc
      000A5C 81               [ 4] 2071 	ret
                                   2072 
                                   2073 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000000  2074 .if DEBUG 	
                                   2075 ;----------------------------
                                   2076 ; command interface
                                   2077 ; only 3 commands:
                                   2078 ;  'q' to resume application
                                   2079 ;  'p [addr]' to print memory values 
                                   2080 ;  's addr' to print string 
                                   2081 ;----------------------------
                                   2082 ;local variable 
                                   2083 	PSIZE=1
                                   2084 	VSIZE=1 
                                   2085 cmd_itf:
                                   2086 	sub sp,#VSIZE 
                                   2087 	clr farptr 
                                   2088 	clr farptr+1 
                                   2089 	clr farptr+2  
                                   2090 repl:
                                   2091 	ld a,#CR 
                                   2092 	call putc 
                                   2093 	ld a,#'? 
                                   2094 	call putc
                                   2095 	clr in.w 
                                   2096 	clr in 
                                   2097 	call readln
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2098 	ldw y,#tib  
                                   2099 	ld a,(y)
                                   2100 	jreq repl  
                                   2101 	inc in 
                                   2102 	call to_upper 
                                   2103 	cp a,#'Q 
                                   2104 	jrne test_p
                                   2105 repl_exit:
                                   2106 	clr tib 
                                   2107 	clr count 
                                   2108 	clr in 
                                   2109 	_drop #VSIZE 	
                                   2110 	ret  
                                   2111 invalid:
                                   2112 	ldw x,#invalid_cmd 
                                   2113 	call puts 
                                   2114 	jra repl 
                                   2115 test_p:	
                                   2116     cp a,#'P 
                                   2117 	jreq mem_peek
                                   2118     cp a,#'S 
                                   2119 	jrne invalid 
                                   2120 print_string:	
                                   2121 	call get_token
                                   2122 	cp a,#TK_INTGR 
                                   2123 	jrne invalid 
                                   2124 	call puts
                                   2125 	jp repl 	
                                   2126 mem_peek:
                                   2127 	ld a,#SPACE 
                                   2128 	call skip  	 
                                   2129 	addw y,in.w 
                                   2130 	ldw x,#pad 
                                   2131 	call strcpy
                                   2132 	call atoi24 	
                                   2133 	ld a, acc24 
                                   2134 	or a,acc16 
                                   2135 	or a,acc8 
                                   2136 	jrne 1$ 
                                   2137 	jra peek_byte  
                                   2138 1$:	ldw x,acc24 
                                   2139 	ldw farptr,x 
                                   2140 	ld a,acc8 
                                   2141 	ld farptr+2,a 
                                   2142 peek_byte:
                                   2143 	call print_farptr 
                                   2144 	ld a,#8 
                                   2145 	ld (PSIZE,sp),a 
                                   2146 	clrw x 
                                   2147 1$:	call fetchc  
                                   2148 	pushw x 
                                   2149 	ld acc8,a 
                                   2150 	clrw x 
                                   2151 	ldw acc24,x 
                                   2152 	ld a,#16+128
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2153 	call prti24
                                   2154 	popw x 
                                   2155 	dec (PSIZE,sp)
                                   2156 	jrne 1$ 
                                   2157 	ld a,#8 
                                   2158 	add a,farptr+2 
                                   2159 	ld farptr+2,a
                                   2160 	clr a 
                                   2161 	adc a,farptr+1 
                                   2162 	ld farptr+1,a 
                                   2163 	clr a 
                                   2164 	adc a,farptr 
                                   2165 	ld farptr,a 
                                   2166 	jp repl  
                                   2167 
                                   2168 invalid_cmd: .asciz "not a command\n" 
                                   2169 
                                   2170 ;----------------------------
                                   2171 ; display farptr address
                                   2172 ;----------------------------
                                   2173 print_farptr:
                                   2174 	ld a ,farptr+2 
                                   2175 	ld acc8,a 
                                   2176 	ldw x,farptr 
                                   2177 	ldw acc24,x 
                                   2178 	clrw x 
                                   2179 	ld a,#16 
                                   2180 	call prti24
                                   2181 	ld a,#SPACE 
                                   2182 	call putc 
                                   2183 	call putc 
                                   2184 	ret
                                   2185 
                                   2186 ;------------------------------------
                                   2187 ; get byte at address farptr[X]
                                   2188 ; input:
                                   2189 ;	 farptr   address to peek
                                   2190 ;    X		  farptr index 	
                                   2191 ; output:
                                   2192 ;	 A 		  byte from memory  
                                   2193 ;    x		  incremented by 1
                                   2194 ;------------------------------------
                                   2195 fetchc: ; @C
                                   2196 	ldf a,([farptr],x)
                                   2197 	incw x
                                   2198 	ret
                                   2199 
                                   2200 
                                   2201 ;------------------------------------
                                   2202 ; expect a number from command line 
                                   2203 ; next argument
                                   2204 ;  input:
                                   2205 ;	  none
                                   2206 ;  output:
                                   2207 ;    acc24   int24_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2208 ;------------------------------------
                                   2209 number::
                                   2210 	call get_token
                                   2211 	call atoi24
                                   2212 	ret
                                   2213 .endif ; DEBUG 
                                   2214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2215 
                                   2216 
                                   2217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2218 ;; compiler routines        ;;
                                   2219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2220 ;------------------------------------
                                   2221 ; parse quoted string 
                                   2222 ; input:
                                   2223 ;   Y 	pointer to tib 
                                   2224 ;   X   pointer to pad
                                   2225 ; output:
                                   2226 ;	pad   parsed string
                                   2227 ;   TOS  char* to pad  
                                   2228 ;------------------------------------
                           000001  2229 	PREV = 1
                           000002  2230 	CURR =2 
                           000002  2231 	VSIZE=2 
      000A5D                       2232 parse_quote: ; { -- addr }
      000A5D                       2233 	_vars VSIZE 
      000A5D 52 02            [ 2]    1     sub sp,#VSIZE 
      000A5F 4F               [ 1] 2234 	clr a
      000A60 6B 01            [ 1] 2235 1$:	ld (PREV,sp),a 
      000A62 72 5C 00 01      [ 1] 2236 2$:	inc in
      000A66 91 D6 00         [ 4] 2237 	ld a,([in.w],y)
      000A69 27 24            [ 1] 2238 	jreq 6$
      000A6B 6B 02            [ 1] 2239 	ld (CURR,sp),a 
      000A6D A6 5C            [ 1] 2240 	ld a,#'\
      000A6F 11 01            [ 1] 2241 	cp a, (PREV,sp)
      000A71 26 0A            [ 1] 2242 	jrne 3$
      000A73 0F 01            [ 1] 2243 	clr (PREV,sp)
      000A75 7B 02            [ 1] 2244 	ld a,(CURR,sp)
      000A77 AD 1F            [ 4] 2245 	callr convert_escape
      000A79 F7               [ 1] 2246 	ld (x),a 
      000A7A 5C               [ 2] 2247 	incw x 
      000A7B 20 E5            [ 2] 2248 	jra 2$
      000A7D                       2249 3$:
      000A7D 7B 02            [ 1] 2250 	ld a,(CURR,sp)
      000A7F A1 5C            [ 1] 2251 	cp a,#'\'
      000A81 27 DD            [ 1] 2252 	jreq 1$
      000A83 A1 22            [ 1] 2253 	cp a,#'"
      000A85 27 04            [ 1] 2254 	jreq 5$ 
      000A87 F7               [ 1] 2255 	ld (x),a 
      000A88 5C               [ 2] 2256 	incw x 
      000A89 20 D7            [ 2] 2257 	jra 2$
      000A8B 72 5C 00 01      [ 1] 2258 5$:	inc in 
      000A8F 7F               [ 1] 2259 6$: clr (x)
      000A90 AE 17 38         [ 2] 2260 	ldw x,#pad 
      000A93                       2261 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000A93 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A95 A6 02            [ 1] 2262 	ld a,#TK_QSTR  
      000A97 81               [ 4] 2263 	ret 
                                   2264 
                                   2265 ;---------------------------------------
                                   2266 ; called by parse_quote
                                   2267 ; subtitute escaped character 
                                   2268 ; by their ASCII value .
                                   2269 ; input:
                                   2270 ;   A  character following '\'
                                   2271 ; output:
                                   2272 ;   A  substitued char or same if not valid.
                                   2273 ;---------------------------------------
      000A98                       2274 convert_escape:
      000A98 89               [ 2] 2275 	pushw x 
      000A99 AE 0A AD         [ 2] 2276 	ldw x,#escaped 
      000A9C F1               [ 1] 2277 1$:	cp a,(x)
      000A9D 27 06            [ 1] 2278 	jreq 2$
      000A9F 7D               [ 1] 2279 	tnz (x)
      000AA0 27 09            [ 1] 2280 	jreq 3$
      000AA2 5C               [ 2] 2281 	incw x 
      000AA3 20 F7            [ 2] 2282 	jra 1$
      000AA5 1D 0A AD         [ 2] 2283 2$: subw x,#escaped 
      000AA8 9F               [ 1] 2284 	ld a,xl 
      000AA9 AB 07            [ 1] 2285 	add a,#7
      000AAB 85               [ 2] 2286 3$:	popw x 
      000AAC 81               [ 4] 2287 	ret 
                                   2288 
      000AAD 61 62 74 6E 76 66 72  2289 escaped: .asciz "abtnvfr"
             00
                                   2290 
                                   2291 ;-------------------------
                                   2292 ; integer parser 
                                   2293 ; input:
                                   2294 ;   X 		point to pad 
                                   2295 ;   Y 		point to tib 
                                   2296 ;   A 	    first digit|'$' 
                                   2297 ; output:  
                                   2298 ;   pad     number string 
                                   2299 ;   X 		integer 
                                   2300 ;   A 		TK_INTGR
                                   2301 ;-------------------------
                           000001  2302 	BASE=1
                           000002  2303 	TCHAR=2 
                           000002  2304 	VSIZE=2 
      000AB5                       2305 parse_integer: ; { -- n }
      000AB5 4B 00            [ 1] 2306 	push #0 ; TCHAR 
      000AB7 A1 24            [ 1] 2307 	cp a,#'$
      000AB9 27 04            [ 1] 2308 	jreq 1$ 
      000ABB 4B 0A            [ 1] 2309 	push #10 ; BASE=10 
      000ABD 20 02            [ 2] 2310 	jra 2$ 
      000ABF 4B 10            [ 1] 2311 1$: push #16  ; BASE=16
      000AC1 F7               [ 1] 2312 2$:	ld (x),a 
      000AC2 5C               [ 2] 2313 	incw x 
      000AC3 72 5C 00 01      [ 1] 2314 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000AC7 91 D6 00         [ 4] 2315 	ld a,([in.w],y)
      000ACA CD 0D 0A         [ 4] 2316 	call to_upper 
      000ACD 6B 02            [ 1] 2317 	ld (TCHAR,sp),a 
      000ACF CD 04 9E         [ 4] 2318 	call is_digit 
      000AD2 25 ED            [ 1] 2319 	jrc 2$
      000AD4 A6 10            [ 1] 2320 	ld a,#16 
      000AD6 11 01            [ 1] 2321 	cp a,(BASE,sp)
      000AD8 26 0A            [ 1] 2322 	jrne 3$ 
      000ADA 7B 02            [ 1] 2323 	ld a,(TCHAR,sp)
      000ADC A1 41            [ 1] 2324 	cp a,#'A 
      000ADE 2B 04            [ 1] 2325 	jrmi 3$ 
      000AE0 A1 47            [ 1] 2326 	cp a,#'G 
      000AE2 2B DD            [ 1] 2327 	jrmi 2$ 
      000AE4 7F               [ 1] 2328 3$:	clr (x)
      000AE5 CD 0D 16         [ 4] 2329 	call atoi24
      000AE8 CE 00 0C         [ 2] 2330 	ldw x,acc16 
      000AEB A6 04            [ 1] 2331 	ld a,#TK_INTGR
      000AED                       2332 	_drop VSIZE  
      000AED 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AEF 81               [ 4] 2333 	ret 	
                                   2334 
                                   2335 ;-------------------------
                                   2336 ; binary integer parser 
                                   2337 ; input:
                                   2338 ;   X 		point to pad 
                                   2339 ;   Y 		point to tib 
                                   2340 ;   A 	    '%' 
                                   2341 ; output:  
                                   2342 ;   pad     number string 
                                   2343 ;   X 		integer 
                                   2344 ;   A 		TK_INTGR
                                   2345 ;   TOS     integer 
                                   2346 ;-------------------------
                           000001  2347 	BINARY=1
                           000002  2348 	VSIZE=2
      000AF0                       2349 parse_binary: ; { -- n }
      000AF0 4B 00            [ 1] 2350 	push #0
      000AF2 4B 00            [ 1] 2351 	push #0
      000AF4 F7               [ 1] 2352 1$: ld (x),a 
      000AF5 5C               [ 2] 2353 	incw x 
      000AF6 72 5C 00 01      [ 1] 2354 	inc in 
      000AFA 91 D6 00         [ 4] 2355 	ld a,([in.w],y)
      000AFD A1 30            [ 1] 2356 	cp a,#'0 
      000AFF 27 06            [ 1] 2357 	jreq 2$
      000B01 A1 31            [ 1] 2358 	cp a,#'1 
      000B03 27 02            [ 1] 2359 	jreq 2$ 
      000B05 20 09            [ 2] 2360 	jra bin_exit 
      000B07 A0 30            [ 1] 2361 2$: sub a,#'0	
      000B09 46               [ 1] 2362 	rrc a 
      000B0A 09 02            [ 1] 2363 	rlc (BINARY+1,sp)
      000B0C 09 01            [ 1] 2364 	rlc (BINARY,sp)
      000B0E 20 E4            [ 2] 2365 	jra 1$  
      000B10                       2366 bin_exit:
      000B10 7F               [ 1] 2367 	clr (x)
      000B11 1E 01            [ 2] 2368 	ldw x,(BINARY,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B13 A6 04            [ 1] 2369 	ld a,#TK_INTGR 	
      000B15                       2370 	_drop VSIZE 
      000B15 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B17 81               [ 4] 2371 	ret
                                   2372 
                                   2373 ;---------------------------
                                   2374 ;  token begin with a letter,
                                   2375 ;  is keyword or variable. 	
                                   2376 ; input:
                                   2377 ;   X 		point to pad 
                                   2378 ;   Y 		point to text
                                   2379 ;   A 	    first letter  
                                   2380 ; output:
                                   2381 ;   X		exec_addr|var_addr 
                                   2382 ;   A 		TK_CMD 
                                   2383 ;   pad 	keyword|var_name  
                                   2384 ;   TOS     exec_addr|var_addr 
                                   2385 ;--------------------------  
      000B18                       2386 parse_keyword: ; { -- exec_addr|var_addr}
      000B18 CD 0D 0A         [ 4] 2387 	call to_upper 
      000B1B F7               [ 1] 2388 	ld (x),a 
      000B1C 5C               [ 2] 2389 	incw x 
      000B1D 72 5C 00 01      [ 1] 2390 	inc in 
      000B21 91 D6 00         [ 4] 2391 	ld a,([in.w],y)
      000B24 CD 04 8D         [ 4] 2392 	call is_alpha 
      000B27 25 EF            [ 1] 2393 	jrc parse_keyword 
      000B29 7F               [ 1] 2394 1$: clr (x)
      000B2A 72 5D 17 39      [ 1] 2395 	tnz pad+1 
      000B2E 26 15            [ 1] 2396 	jrne 2$
                                   2397 ; one letter variable name 
      000B30 C6 17 38         [ 1] 2398 	ld a,pad 
      000B33 A0 41            [ 1] 2399 	sub a,#'A 
      000B35 48               [ 1] 2400 	sll a 
      000B36 88               [ 1] 2401 	push a 
      000B37 4B 00            [ 1] 2402 	push #0
      000B39 AE 00 28         [ 2] 2403 	ldw x,#vars 
      000B3C 72 FB 01         [ 2] 2404 	addw x,(1,sp) ; X=var address 
      000B3F                       2405 	_drop 2 
      000B3F 5B 02            [ 2]    1     addw sp,#2 
      000B41 A6 05            [ 1] 2406 	ld a,#TK_VAR 
      000B43 20 0C            [ 2] 2407 	jra 4$ 
      000B45                       2408 2$: ; check for keyword, otherwise syntax error.
      000B45                       2409 	_ldx_dict kword_dict
      000B45 AE 25 77         [ 2]    1     ldw x,#kword_dict+2
      000B48 CD 0E 78         [ 4] 2410 	call search_dict
      000B4B 4D               [ 1] 2411 	tnz a
      000B4C 26 03            [ 1] 2412 	jrne 4$ 
      000B4E CC 07 5D         [ 2] 2413 	jp syntax_error
      000B51 81               [ 4] 2414 4$:	ret  	
                                   2415 
                                   2416 
                                   2417 ;------------------------------------
                                   2418 ; scan text for next token
                                   2419 ; move token in 'pad'
                                   2420 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000B52                       2421 	none: 
                                   2422 ; use:
                                   2423 ;	Y   pointer to text
                                   2424 ;   X	pointer to pad 
                                   2425 ;   in.w   index in text buffer
                                   2426 ; output:
                                   2427 ;   A       token attribute 
                                   2428 ;   pad 	token as .asciz
                                   2429 ;   X 		token value   
                                   2430 ;------------------------------------
                                   2431 	; use to check special character 
                                   2432 	.macro _case c t  
                                   2433 	ld a,#c 
                                   2434 	cp a,(TCHAR,sp) 
                                   2435 	jrne t
                                   2436 	.endm 
                                   2437 
                           000001  2438 	TCHAR=1
                           000002  2439 	ATTRIB=2 
                           000002  2440 	VSIZE=2
      000B52                       2441 get_token: 
      000B52 90 AE 16 E8      [ 2] 2442 	ldw y,#tib    	
      000B56 C6 00 01         [ 1] 2443 	ld a,in 
      000B59 C1 00 03         [ 1] 2444 	cp a,count 
      000B5C 2B 03            [ 1] 2445 	jrmi 1$
      000B5E A6 00            [ 1] 2446 	ld a,#TK_NONE 
      000B60 81               [ 4] 2447 	ret 
      000B61                       2448 1$:	
      000B61                       2449 	_vars VSIZE
      000B61 52 02            [ 2]    1     sub sp,#VSIZE 
      000B63 AE 17 38         [ 2] 2450 	ldw x, #pad
      000B66 A6 20            [ 1] 2451 	ld a,#SPACE
      000B68 CD 0D 88         [ 4] 2452 	call skip
      000B6B 55 00 01 00 02   [ 1] 2453 	mov in.saved,in 
      000B70 91 D6 00         [ 4] 2454 	ld a,([in.w],y)
      000B73 26 07            [ 1] 2455 	jrne str_tst
      000B75 72 5F 17 38      [ 1] 2456 	clr pad 
      000B79 CC 0D 07         [ 2] 2457 	jp token_exit ; end of line 
                                   2458 
      000B7C                       2459 str_tst: ; check for quoted string  	
      000B7C CD 0D 0A         [ 4] 2460 	call to_upper 
      000B7F 6B 01            [ 1] 2461 	ld (TCHAR,sp),a 
      000B81                       2462 	_case '"' nbr_tst
      000B81 A6 22            [ 1]    1 	ld a,#'"' 
      000B83 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000B85 26 06            [ 1]    3 	jrne nbr_tst
      000B87 CD 0A 5D         [ 4] 2463 	call parse_quote
      000B8A CC 0D 07         [ 2] 2464 	jp token_exit
      000B8D                       2465 nbr_tst: ; check for number 
      000B8D A6 24            [ 1] 2466 	ld a,#'$'
      000B8F 11 01            [ 1] 2467 	cp a,(TCHAR,sp) 
      000B91 27 13            [ 1] 2468 	jreq 1$
      000B93 A6 26            [ 1] 2469 	ld a,#'&
      000B95 11 01            [ 1] 2470 	cp a,(TCHAR,sp)
      000B97 26 06            [ 1] 2471 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000B99 CD 0A F0         [ 4] 2472 	call parse_binary ; expect binary integer 
      000B9C CC 0D 07         [ 2] 2473 	jp token_exit 
      000B9F 7B 01            [ 1] 2474 0$:	ld a,(TCHAR,sp)
      000BA1 CD 04 9E         [ 4] 2475 	call is_digit
      000BA4 24 06            [ 1] 2476 	jrnc 3$
      000BA6 CD 0A B5         [ 4] 2477 1$:	call parse_integer 
      000BA9 CC 0D 07         [ 2] 2478 	jp token_exit 
      000BAC                       2479 3$: 
      000BAC                       2480 	_case '(' bkslsh_tst 
      000BAC A6 28            [ 1]    1 	ld a,#'(' 
      000BAE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BB0 26 05            [ 1]    3 	jrne bkslsh_tst
      000BB2 A6 0B            [ 1] 2481 	ld a,#TK_LPAREN
      000BB4 CC 0C F7         [ 2] 2482 	jp token_char   	
      000BB7                       2483 bkslsh_tst: ; character token 
      000BB7                       2484 	_case '\',rparnt_tst
      000BB7 A6 5C            [ 1]    1 	ld a,#'\' 
      000BB9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BBB 26 18            [ 1]    3 	jrne rparnt_tst
      000BBD 7B 01            [ 1] 2485 	ld a,(TCHAR,sp)
      000BBF F7               [ 1] 2486 	ld (x),a 
      000BC0 5C               [ 2] 2487 	incw x 
      000BC1 72 5C 00 01      [ 1] 2488 	inc in 
      000BC5 91 D6 00         [ 4] 2489 	ld a,([in.w],y)
      000BC8 F7               [ 1] 2490 	ld (x),a 
      000BC9 5C               [ 2] 2491 	incw x 
      000BCA 72 5C 00 01      [ 1] 2492 	inc in  
      000BCE 7F               [ 1] 2493 	clr (x) 
      000BCF 97               [ 1] 2494 	ld xl,a 
      000BD0 A6 03            [ 1] 2495 	ld a,#TK_CHAR 
      000BD2 CC 0D 07         [ 2] 2496 	jp token_exit 
      000BD5                       2497 rparnt_tst:		
      000BD5                       2498 	_case ')' colon_tst 
      000BD5 A6 29            [ 1]    1 	ld a,#')' 
      000BD7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BD9 26 05            [ 1]    3 	jrne colon_tst
      000BDB A6 0C            [ 1] 2499 	ld a,#TK_RPAREN 
      000BDD CC 0C F7         [ 2] 2500 	jp token_char 
      000BE0                       2501 colon_tst:
      000BE0                       2502 	_case ':' comma_tst 
      000BE0 A6 3A            [ 1]    1 	ld a,#':' 
      000BE2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BE4 26 05            [ 1]    3 	jrne comma_tst
      000BE6 A6 01            [ 1] 2503 	ld a,#TK_COLON 
      000BE8 CC 0C F7         [ 2] 2504 	jp token_char 
      000BEB                       2505 comma_tst:
      000BEB                       2506 	_case COMMA sharp_tst 
      000BEB A6 2C            [ 1]    1 	ld a,#COMMA 
      000BED 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BEF 26 05            [ 1]    3 	jrne sharp_tst
      000BF1 A6 0D            [ 1] 2507 	ld a,#TK_COMMA
      000BF3 CC 0C F7         [ 2] 2508 	jp token_char
      000BF6                       2509 sharp_tst:
      000BF6                       2510 	_case SHARP dash_tst 
      000BF6 A6 23            [ 1]    1 	ld a,#SHARP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000BF8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000BFA 26 05            [ 1]    3 	jrne dash_tst
      000BFC A6 0E            [ 1] 2511 	ld a,#TK_SHARP
      000BFE CC 0C F7         [ 2] 2512 	jp token_char  	 	 
      000C01                       2513 dash_tst: 	
      000C01                       2514 	_case '-' at_tst 
      000C01 A6 2D            [ 1]    1 	ld a,#'-' 
      000C03 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C05 26 05            [ 1]    3 	jrne at_tst
      000C07 A6 11            [ 1] 2515 	ld a,#TK_MINUS  
      000C09 CC 0C F7         [ 2] 2516 	jp token_char 
      000C0C                       2517 at_tst:
      000C0C                       2518 	_case '@' qmark_tst 
      000C0C A6 40            [ 1]    1 	ld a,#'@' 
      000C0E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C10 26 05            [ 1]    3 	jrne qmark_tst
      000C12 A6 0A            [ 1] 2519 	ld a,#TK_ARRAY 
      000C14 CC 0C F7         [ 2] 2520 	jp token_char
      000C17                       2521 qmark_tst:
      000C17                       2522 	_case '?' tick_tst 
      000C17 A6 3F            [ 1]    1 	ld a,#'?' 
      000C19 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C1B 26 11            [ 1]    3 	jrne tick_tst
      000C1D 7B 01            [ 1] 2523 	ld a,(TCHAR,sp)
      000C1F F7               [ 1] 2524 	ld (x),a 
      000C20 5C               [ 2] 2525 	incw x 
      000C21 7F               [ 1] 2526 	clr (x)
      000C22 72 5C 00 01      [ 1] 2527 	inc in 
      000C26 A6 06            [ 1] 2528 	ld a,#TK_CMD 
      000C28 AE 13 C8         [ 2] 2529 	ldw x,#print 
      000C2B CC 0D 07         [ 2] 2530 	jp token_exit
      000C2E                       2531 tick_tst: ; ignore comment 
      000C2E                       2532 	_case TICK plus_tst 
      000C2E A6 27            [ 1]    1 	ld a,#TICK 
      000C30 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C32 26 0C            [ 1]    3 	jrne plus_tst
      000C34 72 5C 00 01      [ 1] 2533 	inc in 
      000C38 A6 06            [ 1] 2534 	ld a,#TK_CMD 
      000C3A AE 14 B5         [ 2] 2535 	ldw x,#remark  
      000C3D CC 0D 07         [ 2] 2536 	jp token_exit 
      000C40                       2537 plus_tst:
      000C40                       2538 	_case '+' star_tst 
      000C40 A6 2B            [ 1]    1 	ld a,#'+' 
      000C42 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C44 26 05            [ 1]    3 	jrne star_tst
      000C46 A6 10            [ 1] 2539 	ld a,#TK_PLUS  
      000C48 CC 0C F7         [ 2] 2540 	jp token_char 
      000C4B                       2541 star_tst:
      000C4B                       2542 	_case '*' slash_tst 
      000C4B A6 2A            [ 1]    1 	ld a,#'*' 
      000C4D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C4F 26 05            [ 1]    3 	jrne slash_tst
      000C51 A6 20            [ 1] 2543 	ld a,#TK_MULT 
      000C53 CC 0C F7         [ 2] 2544 	jp token_char 
      000C56                       2545 slash_tst: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000C56                       2546 	_case '/' prcnt_tst 
      000C56 A6 2F            [ 1]    1 	ld a,#'/' 
      000C58 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C5A 26 05            [ 1]    3 	jrne prcnt_tst
      000C5C A6 21            [ 1] 2547 	ld a,#TK_DIV 
      000C5E CC 0C F7         [ 2] 2548 	jp token_char 
      000C61                       2549 prcnt_tst:
      000C61                       2550 	_case '%' eql_tst 
      000C61 A6 25            [ 1]    1 	ld a,#'%' 
      000C63 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C65 26 05            [ 1]    3 	jrne eql_tst
      000C67 A6 22            [ 1] 2551 	ld a,#TK_MOD
      000C69 CC 0C F7         [ 2] 2552 	jp token_char  
                                   2553 ; 1 or 2 character tokens 	
      000C6C                       2554 eql_tst:
      000C6C                       2555 	_case '=' gt_tst 		
      000C6C A6 3D            [ 1]    1 	ld a,#'=' 
      000C6E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C70 26 05            [ 1]    3 	jrne gt_tst
      000C72 A6 32            [ 1] 2556 	ld a,#TK_EQUAL
      000C74 CC 0C F7         [ 2] 2557 	jp token_char 
      000C77                       2558 gt_tst:
      000C77                       2559 	_case '>' lt_tst 
      000C77 A6 3E            [ 1]    1 	ld a,#'>' 
      000C79 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C7B 26 33            [ 1]    3 	jrne lt_tst
      000C7D A6 31            [ 1] 2560 	ld a,#TK_GT 
      000C7F 6B 02            [ 1] 2561 	ld (ATTRIB,sp),a 
      000C81 72 5C 00 01      [ 1] 2562 	inc in 
      000C85 91 D6 00         [ 4] 2563 	ld a,([in.w],y)
      000C88 A1 3D            [ 1] 2564 	cp a,#'=
      000C8A 26 0C            [ 1] 2565 	jrne 1$
      000C8C 7B 01            [ 1] 2566 	ld a,(TCHAR,sp)
      000C8E F7               [ 1] 2567 	ld (x),a
      000C8F 5C               [ 2] 2568 	incw x 
      000C90 A6 3D            [ 1] 2569 	ld a,#'=
      000C92 6B 01            [ 1] 2570 	ld (TCHAR,sp),a 
      000C94 A6 33            [ 1] 2571 	ld a,#TK_GE 
      000C96 20 5F            [ 2] 2572 	jra token_char  
      000C98 A1 3C            [ 1] 2573 1$: cp a,#'<
      000C9A 26 0C            [ 1] 2574 	jrne 2$
      000C9C 7B 01            [ 1] 2575 	ld a,(TCHAR,sp)
      000C9E F7               [ 1] 2576 	ld (x),a
      000C9F 5C               [ 2] 2577 	incw x 
      000CA0 A6 3C            [ 1] 2578 	ld a,#'<	
      000CA2 6B 01            [ 1] 2579 	ld (TCHAR,sp),a 
      000CA4 A6 35            [ 1] 2580 	ld a,#TK_NE 
      000CA6 20 4F            [ 2] 2581 	jra token_char 
      000CA8 72 5A 00 01      [ 1] 2582 2$: dec in
      000CAC 7B 02            [ 1] 2583 	ld a,(ATTRIB,sp)
      000CAE 20 47            [ 2] 2584 	jra token_char 
      000CB0                       2585 lt_tst:
      000CB0                       2586 	_case '<' other
      000CB0 A6 3C            [ 1]    1 	ld a,#'<' 
      000CB2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000CB4 26 32            [ 1]    3 	jrne other
      000CB6 A6 34            [ 1] 2587 	ld a,#TK_LT 
      000CB8 6B 02            [ 1] 2588 	ld (ATTRIB,sp),a 
      000CBA 72 5C 00 01      [ 1] 2589 	inc in 
      000CBE 91 D6 00         [ 4] 2590 	ld a,([in.w],y)
      000CC1 A1 3D            [ 1] 2591 	cp a,#'=
      000CC3 26 0B            [ 1] 2592 	jrne 1$
      000CC5 7B 01            [ 1] 2593 	ld a,(TCHAR,sp)
      000CC7 F7               [ 1] 2594 	ld (x),a 
      000CC8 A6 3D            [ 1] 2595 	ld a,#'=
      000CCA 6B 01            [ 1] 2596 	ld (TCHAR,sp),a 
      000CCC A6 36            [ 1] 2597 	ld a,#TK_LE 
      000CCE 20 27            [ 2] 2598 	jra token_char 
      000CD0 A1 3E            [ 1] 2599 1$: cp a,#'>
      000CD2 26 0C            [ 1] 2600 	jrne 2$
      000CD4 7B 01            [ 1] 2601 	ld a,(TCHAR,sp)
      000CD6 F7               [ 1] 2602 	ld (x),a 
      000CD7 5C               [ 2] 2603 	incw x 
      000CD8 A6 3E            [ 1] 2604 	ld a,#'>
      000CDA 6B 01            [ 1] 2605 	ld (TCHAR,sp),a 
      000CDC A6 35            [ 1] 2606 	ld a,#TK_NE 
      000CDE 20 17            [ 2] 2607 	jra token_char 
      000CE0 72 5A 00 01      [ 1] 2608 2$: dec in 
      000CE4 7B 02            [ 1] 2609 	ld a,(ATTRIB,sp)
      000CE6 20 0F            [ 2] 2610 	jra token_char 	
      000CE8                       2611 other: ; not a special character 	 
      000CE8 7B 01            [ 1] 2612 	ld a,(TCHAR,sp)
      000CEA CD 04 8D         [ 4] 2613 	call is_alpha 
      000CED 25 03            [ 1] 2614 	jrc 30$ 
      000CEF CC 07 5D         [ 2] 2615 	jp syntax_error 
      000CF2                       2616 30$: 
      000CF2 CD 0B 18         [ 4] 2617 	call parse_keyword
      000CF5 20 10            [ 2] 2618 	jra token_exit 
      000CF7                       2619 token_char:
      000CF7 6B 02            [ 1] 2620 	ld (ATTRIB,sp),a 
      000CF9 7B 01            [ 1] 2621 	ld a,(TCHAR,sp)
      000CFB F7               [ 1] 2622 	ld (x),a 
      000CFC 5C               [ 2] 2623 	incw x 
      000CFD 7F               [ 1] 2624 	clr(x)
      000CFE 72 5C 00 01      [ 1] 2625 	inc in 
      000D02 7B 02            [ 1] 2626 	ld a,(ATTRIB,sp)
      000D04 AE 17 38         [ 2] 2627 	ldw x,#pad 
      000D07                       2628 token_exit:
      000D07                       2629 	_drop VSIZE 
      000D07 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D09 81               [ 4] 2630 	ret
                                   2631 
                                   2632 
                                   2633 ;------------------------------------
                                   2634 ; convert alpha to uppercase
                                   2635 ; input:
                                   2636 ;    a  character to convert
                                   2637 ; output:
                                   2638 ;    a  uppercase character
                                   2639 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000D0A                       2640 to_upper::
      000D0A A1 61            [ 1] 2641 	cp a,#'a
      000D0C 2A 01            [ 1] 2642 	jrpl 1$
      000D0E 81               [ 4] 2643 0$:	ret
      000D0F A1 7A            [ 1] 2644 1$: cp a,#'z	
      000D11 22 FB            [ 1] 2645 	jrugt 0$
      000D13 A0 20            [ 1] 2646 	sub a,#32
      000D15 81               [ 4] 2647 	ret
                                   2648 	
                                   2649 ;------------------------------------
                                   2650 ; convert pad content in integer
                                   2651 ; input:
                                   2652 ;    pad		.asciz to convert
                                   2653 ; output:
                                   2654 ;    acc24      int24_t
                                   2655 ;------------------------------------
                                   2656 	; local variables
                           000001  2657 	SIGN=1 ; 1 byte, 
                           000002  2658 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2659 	TEMP=3 ; 1 byte, temporary storage
                           000003  2660 	VSIZE=3 ; 3 bytes reserved for local storage
      000D16                       2661 atoi24:
      000D16 89               [ 2] 2662 	pushw x ;save x
      000D17 52 03            [ 2] 2663 	sub sp,#VSIZE
                                   2664 	; acc24=0 
      000D19 72 5F 00 0B      [ 1] 2665 	clr acc24    
      000D1D 72 5F 00 0C      [ 1] 2666 	clr acc16
      000D21 72 5F 00 0D      [ 1] 2667 	clr acc8 
      000D25 C6 17 38         [ 1] 2668 	ld a, pad 
      000D28 27 5A            [ 1] 2669 	jreq atoi_exit
      000D2A 0F 01            [ 1] 2670 	clr (SIGN,sp)
      000D2C A6 0A            [ 1] 2671 	ld a,#10
      000D2E 6B 02            [ 1] 2672 	ld (BASE,sp),a ; default base decimal
      000D30 AE 17 38         [ 2] 2673 	ldw x,#pad ; pointer to string to convert
      000D33 F6               [ 1] 2674 	ld a,(x)
      000D34 27 47            [ 1] 2675 	jreq 9$  ; completed if 0
      000D36 A1 2D            [ 1] 2676 	cp a,#'-
      000D38 26 04            [ 1] 2677 	jrne 1$
      000D3A 03 01            [ 1] 2678 	cpl (SIGN,sp)
      000D3C 20 08            [ 2] 2679 	jra 2$
      000D3E A1 24            [ 1] 2680 1$: cp a,#'$
      000D40 26 06            [ 1] 2681 	jrne 3$
      000D42 A6 10            [ 1] 2682 	ld a,#16
      000D44 6B 02            [ 1] 2683 	ld (BASE,sp),a
      000D46 5C               [ 2] 2684 2$:	incw x
      000D47 F6               [ 1] 2685 	ld a,(x)
      000D48                       2686 3$:	
      000D48 A1 61            [ 1] 2687 	cp a,#'a
      000D4A 2B 02            [ 1] 2688 	jrmi 4$
      000D4C A0 20            [ 1] 2689 	sub a,#32
      000D4E A1 30            [ 1] 2690 4$:	cp a,#'0
      000D50 2B 2B            [ 1] 2691 	jrmi 9$
      000D52 A0 30            [ 1] 2692 	sub a,#'0
      000D54 A1 0A            [ 1] 2693 	cp a,#10
      000D56 2B 06            [ 1] 2694 	jrmi 5$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000D58 A0 07            [ 1] 2695 	sub a,#7
      000D5A 11 02            [ 1] 2696 	cp a,(BASE,sp)
      000D5C 2A 1F            [ 1] 2697 	jrpl 9$
      000D5E 6B 03            [ 1] 2698 5$:	ld (TEMP,sp),a
      000D60 7B 02            [ 1] 2699 	ld a,(BASE,sp)
      000D62 CD 09 76         [ 4] 2700 	call mulu24_8
      000D65 7B 03            [ 1] 2701 	ld a,(TEMP,sp)
      000D67 CB 00 0D         [ 1] 2702 	add a,acc24+2
      000D6A C7 00 0D         [ 1] 2703 	ld acc24+2,a
      000D6D 4F               [ 1] 2704 	clr a
      000D6E C9 00 0C         [ 1] 2705 	adc a,acc24+1
      000D71 C7 00 0C         [ 1] 2706 	ld acc24+1,a
      000D74 4F               [ 1] 2707 	clr a
      000D75 C9 00 0B         [ 1] 2708 	adc a,acc24
      000D78 C7 00 0B         [ 1] 2709 	ld acc24,a
      000D7B 20 C9            [ 2] 2710 	jra 2$
      000D7D 0D 01            [ 1] 2711 9$:	tnz (SIGN,sp)
      000D7F 27 03            [ 1] 2712     jreq atoi_exit
      000D81 CD 09 B0         [ 4] 2713     call neg_acc24
      000D84                       2714 atoi_exit: 
      000D84 5B 03            [ 2] 2715 	addw sp,#VSIZE
      000D86 85               [ 2] 2716 	popw x ; restore x
      000D87 81               [ 4] 2717 	ret
                                   2718 
                                   2719 
                                   2720 ;------------------------------------
                                   2721 ; skip character c in text starting from 'in'
                                   2722 ; input:
                                   2723 ;	 y 		point to text buffer
                                   2724 ;    a 		character to skip
                                   2725 ; output:  
                                   2726 ;	'in' ajusted to new position
                                   2727 ;------------------------------------
                           000001  2728 	C = 1 ; local var
      000D88                       2729 skip:
      000D88 88               [ 1] 2730 	push a
      000D89 91 D6 00         [ 4] 2731 1$:	ld a,([in.w],y)
      000D8C 27 0A            [ 1] 2732 	jreq 2$
      000D8E 11 01            [ 1] 2733 	cp a,(C,sp)
      000D90 26 06            [ 1] 2734 	jrne 2$
      000D92 72 5C 00 01      [ 1] 2735 	inc in
      000D96 20 F1            [ 2] 2736 	jra 1$
      000D98                       2737 2$: _drop 1 
      000D98 5B 01            [ 2]    1     addw sp,#1 
      000D9A 81               [ 4] 2738 	ret
                                   2739 	
                                   2740 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2741 ;;   TINY BASIC  operators,
                                   2742 ;;   commands and functions 
                                   2743 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2744 
                                   2745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2746 ;;  Arithmetic operators
                                   2747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2748 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2749 ;--------------------------------
                                   2750 ;  add 2 integers
                                   2751 ;  input:
                                   2752 ;    N1     on cstack 
                                   2753 ;    N2     on cstack 
                                   2754 ;  output:
                                   2755 ;    X 		n2+n1 
                                   2756 ;--------------------------------
                                   2757 	;arugments on cstack 
      000D9B                       2758 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000D9B                       2759 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000D9B                       2760 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000D9B                       2761 add:
      000D9B 1E 05            [ 2] 2762 	ldw x ,(N2,sp)
      000D9D 72 FB 03         [ 2] 2763 	addw x,(N1,sp)
      000DA0 1F 03            [ 2] 2764 	ldw (N1,sp),x 
      000DA2 81               [ 4] 2765 	ret 
                                   2766 
                                   2767 ;--------------------------------
                                   2768 ;  substract 2 ntegers
                                   2769 ;  input:
                                   2770 ;    N1     on cstack 
                                   2771 ;    N2     on cstack 
                                   2772 ;  output:
                                   2773 ;    X 		n2+n1 
                                   2774 ;--------------------------------
      000DA3                       2775 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000DA3                       2776 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000DA3                       2777 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000DA3                       2778 substract:
      000DA3 1E 05            [ 2] 2779 	ldw x,(N2,sp)
      000DA5 72 F0 03         [ 2] 2780 	subw x,(N1,sp)
      000DA8 81               [ 4] 2781 	ret 
                                   2782 
                                   2783 ;-------------------------------------
                                   2784 ; multiply 2 integers
                                   2785 ; product overflow is ignored unless
                                   2786 ; MATH_OVF assembler flag is set to 1
                                   2787 ; input:
                                   2788 ;  	N1      on cstack
                                   2789 ;   N2 		on cstack 
                                   2790 ; output:
                                   2791 ;	X        N1*N2 
                                   2792 ;-------------------------------------
                                   2793 	;arguments 
      000DA9                       2794 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      000DA9                       2795 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000DA9                       2796 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      000DA9                       2797 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      000DA9                       2798 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2799    ; local variables 
                           000001  2800 	SIGN=1
                           000002  2801 	PROD=2
                           000003  2802 	VSIZE=3
      000DA9                       2803 multiply:
      000DA9                       2804 	_vars VSIZE 
      000DA9 52 03            [ 2]    1     sub sp,#VSIZE 
      000DAB 0F 01            [ 1] 2805 	clr (SIGN,sp)
      000DAD 1E 06            [ 2] 2806 	ldw x,(N1_HB,sp)
      000DAF 9E               [ 1] 2807 	ld a,xh  
      000DB0 A5 80            [ 1] 2808 	bcp a,#0x80 
      000DB2 27 05            [ 1] 2809 	jreq 2$
      000DB4 03 01            [ 1] 2810 	cpl (SIGN,sp)
      000DB6 50               [ 2] 2811 	negw x 
      000DB7 1F 06            [ 2] 2812 	ldw (N1_HB,sp),x 
      000DB9 1E 08            [ 2] 2813 2$: ldw x,(N2_HB,sp)
      000DBB 9E               [ 1] 2814 	ld a,xh  
      000DBC A5 80            [ 1] 2815 	bcp a,#0x80 
      000DBE 27 05            [ 1] 2816 	jreq 3$
      000DC0 03 01            [ 1] 2817 	cpl (SIGN,sp)
      000DC2 50               [ 2] 2818 	negw x 
      000DC3 1F 08            [ 2] 2819 	ldw (N2_HB,sp),x 
                                   2820 ; N1_LB * N2_LB 	
      000DC5 7B 07            [ 1] 2821 3$:	ld a,(N1_LB,sp)
      000DC7 97               [ 1] 2822 	ld xl,a 
      000DC8 7B 09            [ 1] 2823 	ld a,(N2_LB,sp) 
      000DCA 42               [ 4] 2824 	mul x,a 
                           000000  2825 .if MATH_OVF 	
                                   2826 	ld a,xh 
                                   2827 	bcp a,#0x80 
                                   2828 	jreq 4$ 
                                   2829 	ld a,#ERR_MATH_OVF 
                                   2830 	jp tb_error
                                   2831 .endif 	 
      000DCB 1F 02            [ 2] 2832 4$:	ldw (PROD,sp),x
                                   2833 ; N1_LB * N2_HB	 
      000DCD 7B 07            [ 1] 2834 	ld a,(N1_LB,sp) 
      000DCF 97               [ 1] 2835 	ld xl,a 
      000DD0 7B 08            [ 1] 2836 	ld a,(N2_HB,sp)
      000DD2 42               [ 4] 2837 	mul x,a
      000DD3 9F               [ 1] 2838 	ld a,xl 
      000DD4 1B 02            [ 1] 2839 	add a,(PROD,sp)
                           000000  2840 .if MATH_OVF 	
                                   2841 	bcp a,#0x80 
                                   2842 	jreq 5$ 
                                   2843 	ld a,#ERR_MATH_OVF 
                                   2844 	jp tb_error
                                   2845 .endif 	 
      000DD6 6B 02            [ 1] 2846 5$:	ld (PROD,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2847 ; N1_HB * N2_LB 
      000DD8 7B 06            [ 1] 2848 	ld a,(N1_HB,sp)
      000DDA 97               [ 1] 2849 	ld xl,a 
      000DDB 7B 09            [ 1] 2850 	ld a,(N2_LB,sp)
      000DDD 42               [ 4] 2851 	mul x,a 
      000DDE 9F               [ 1] 2852 	ld a,xl 
      000DDF 1B 02            [ 1] 2853 	add a,(PROD,sp)
                           000000  2854 .if MATH_OVF 	
                                   2855 	bcp a,#0x80 
                                   2856 	jreq 6$ 
                                   2857 	ld a,#ERR_MATH_OVF 
                                   2858 	jp tb_error
                                   2859 .endif 	 
      000DE1 6B 02            [ 1] 2860 6$:	ld (PROD,sp),a 
                                   2861 ; N1_HB * N2_HB 	
                                   2862 ; it is pointless to multiply N1_HB*N2_HB 
                                   2863 ; as this product is over 65535 or 0 
                                   2864 ;
                                   2865 ; sign adjust product
      000DE3 0D 01            [ 1] 2866 	tnz (SIGN,sp)
      000DE5 27 05            [ 1] 2867 	jreq 7$
      000DE7 1E 02            [ 2] 2868 	ldw x, (PROD,sp)
      000DE9 50               [ 2] 2869 	negw x
      000DEA 1F 02            [ 2] 2870 	ldw (PROD,sp),x  
      000DEC                       2871 7$: 
      000DEC 1E 02            [ 2] 2872 	ldw x,(PROD,sp) 
      000DEE                       2873 	_drop VSIZE 
      000DEE 5B 03            [ 2]    1     addw sp,#VSIZE 
      000DF0 81               [ 4] 2874 	ret
                                   2875 
                                   2876 ;----------------------------------
                                   2877 ;  euclidian divide n2/n1 
                                   2878 ; input:
                                   2879 ;    N2 	on cstack
                                   2880 ;    N1 	on cstack
                                   2881 ; output:
                                   2882 ;    X      n2/n1 
                                   2883 ;    Y      remainder 
                                   2884 ;----------------------------------
      000DF1                       2885 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      000DF1                       2886 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      000DF1                       2887 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2888 	; local variables
                           000001  2889 	SQUOT=1 ; sign quotient
                           000002  2890 	SDIVD=2 ; sign dividend  
                           000002  2891 	VSIZE=2
      000DF1                       2892 divide:
      000DF1                       2893 	_vars VSIZE 
      000DF1 52 02            [ 2]    1     sub sp,#VSIZE 
      000DF3 0F 01            [ 1] 2894 	clr (SQUOT,sp)
      000DF5 0F 02            [ 1] 2895 	clr (SDIVD,sp)
                                   2896 ; check for 0 divisor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000DF7 1E 05            [ 2] 2897 	ldw x,(DIVISR,sp)
      000DF9 5D               [ 2] 2898 	tnzw x 
      000DFA 26 05            [ 1] 2899     jrne 0$
      000DFC A6 04            [ 1] 2900 	ld a,#ERR_DIV0 
      000DFE CC 07 5F         [ 2] 2901 	jp tb_error 
                                   2902 ; check divisor sign 	
      000E01 9E               [ 1] 2903 0$:	ld a,xh 
      000E02 A5 80            [ 1] 2904 	bcp a,#0x80 
      000E04 27 03            [ 1] 2905 	jreq 1$
      000E06 03 01            [ 1] 2906 	cpl (SQUOT,sp)
      000E08 50               [ 2] 2907 	negw x 
      000E09 1F 05            [ 2] 2908 1$:	ldw (DIVISR,sp),x
                                   2909 ; check dividend sign 	 
      000E0B 1E 07            [ 2] 2910     ldw x,(DIVIDND,sp)
      000E0D 9E               [ 1] 2911 	ld a,xh 
      000E0E A5 80            [ 1] 2912 	bcp a,#0x80 
      000E10 27 05            [ 1] 2913 	jreq 2$ 
      000E12 03 01            [ 1] 2914 	cpl (SQUOT,sp)
      000E14 03 02            [ 1] 2915 	cpl (SDIVD,sp)
      000E16 50               [ 2] 2916 	negw x 
      000E17 16 05            [ 2] 2917 2$:	ldw y,(DIVISR,sp)
      000E19 65               [ 2] 2918 	divw x,y
      000E1A 90 CF 00 0C      [ 2] 2919 	ldw acc16,y 
                                   2920 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      000E1E 0D 02            [ 1] 2921 	tnz (SDIVD,sp)
      000E20 27 0B            [ 1] 2922 	jreq 7$
      000E22 90 5D            [ 2] 2923 	tnzw y 
      000E24 27 07            [ 1] 2924 	jreq 7$
      000E26 5C               [ 2] 2925 	incw x
      000E27 16 05            [ 2] 2926 	ldw y,(DIVISR,sp)
      000E29 72 B2 00 0C      [ 2] 2927 	subw y,acc16
      000E2D 0D 01            [ 1] 2928 7$: tnz (SQUOT,sp)
      000E2F 27 01            [ 1] 2929 	jreq 9$ 	 
      000E31 50               [ 2] 2930 8$:	negw x 
      000E32                       2931 9$: 
      000E32                       2932 	_drop VSIZE 
      000E32 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E34 81               [ 4] 2933 	ret 
                                   2934 
                                   2935 
                                   2936 ;----------------------------------
                                   2937 ;  remainder resulting from euclidian 
                                   2938 ;  division of n2/n1 
                                   2939 ; input:
                                   2940 ;   N1 		cstack 
                                   2941 ;   N2      cstack
                                   2942 ; output:
                                   2943 ;   X       N2%N1 
                                   2944 ;----------------------------------
                           000003  2945 	N1=3
                           000005  2946 	N2=5
                           000004  2947 	VSIZE=4
      000E35                       2948 modulo:
      000E35 1E 03            [ 2] 2949 	Ldw x,(N1,sp)
      000E37 16 05            [ 2] 2950 	ldw y,(N2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000E39                       2951 	_vars VSIZE 
      000E39 52 04            [ 2]    1     sub sp,#VSIZE 
      000E3B 1F 01            [ 2] 2952 	ldw (1,sp),x 
      000E3D 17 03            [ 2] 2953 	ldw (3,sp),y 
      000E3F CD 0D F1         [ 4] 2954 	call divide 
      000E42 93               [ 1] 2955 	ldw x,y
      000E43                       2956 	_drop VSIZE 
      000E43 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E45 81               [ 4] 2957 	ret 
                                   2958 
                                   2959 
                                   2960 ;----------------------------------
                                   2961 ; search in kword_dict name
                                   2962 ; from its execution address 
                                   2963 ; input:
                                   2964 ;   X       	execution address 
                                   2965 ; output:
                                   2966 ;   X 			cstr*  | 0 
                                   2967 ;--------------------------------
                           000001  2968 	XADR=1 
                           000003  2969 	LINK=3 
                           000004  2970 	VSIZE=4
      000E46                       2971 cmd_name:
      000E46                       2972 	_vars VSIZE 
      000E46 52 04            [ 2]    1     sub sp,#VSIZE 
      000E48 72 5F 00 0C      [ 1] 2973 	clr acc16 
      000E4C 1F 01            [ 2] 2974 	ldw (XADR,sp),x  
      000E4E AE 25 75         [ 2] 2975 	ldw x,#kword_dict	
      000E51 1F 03            [ 2] 2976 1$:	ldw (LINK,sp),x
      000E53 E6 02            [ 1] 2977 	ld a,(2,x)
      000E55 A4 0F            [ 1] 2978 	and a,#15 
      000E57 C7 00 0D         [ 1] 2979 	ld acc8,a 
      000E5A 1C 00 03         [ 2] 2980 	addw x,#3
      000E5D 72 BB 00 0C      [ 2] 2981 	addw x,acc16
      000E61 FE               [ 2] 2982 	ldw x,(x) ; execution address 
      000E62 13 01            [ 2] 2983 	cpw x,(XADR,sp)
      000E64 27 0A            [ 1] 2984 	jreq 2$
      000E66 1E 03            [ 2] 2985 	ldw x,(LINK,sp)
      000E68 FE               [ 2] 2986 	ldw x,(x) 
      000E69 1D 00 02         [ 2] 2987 	subw x,#2  
      000E6C 26 E3            [ 1] 2988 	jrne 1$
      000E6E 20 05            [ 2] 2989 	jra 9$
      000E70 1E 03            [ 2] 2990 2$: ldw x,(LINK,sp)
      000E72 1C 00 02         [ 2] 2991 	addw x,#2 	
      000E75                       2992 9$:	_drop VSIZE
      000E75 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E77 81               [ 4] 2993 	ret
                                   2994 
                                   2995 
                                   2996 ;---------------------------------
                                   2997 ; dictionary search 
                                   2998 ; input:
                                   2999 ;	X 		dictionary entry point 
                                   3000 ;  pad		.asciz name to search 
                                   3001 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3002 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3003 ;  X		execution address | 0 
                                   3004 ;---------------------------------
                           000001  3005 	NLEN=1 ; cmd length 
                           000002  3006 	YSAVE=2
                           000003  3007 	VSIZE=3 
      000E78                       3008 search_dict:
      000E78                       3009 	_vars VSIZE 
      000E78 52 03            [ 2]    1     sub sp,#VSIZE 
      000E7A 90 93            [ 1] 3010 	ldw y,x 
      000E7C                       3011 search_next:	
      000E7C 90 F6            [ 1] 3012 	ld a,(y)
      000E7E A4 0F            [ 1] 3013 	and a,#0xf 
      000E80 6B 01            [ 1] 3014 	ld (NLEN,sp),a  
      000E82 AE 17 38         [ 2] 3015 	ldw x,#pad 
      000E85 17 02            [ 2] 3016 	ldw (YSAVE,sp),y
      000E87 90 5C            [ 2] 3017 	incw y  
      000E89                       3018 cp_loop:
      000E89 F6               [ 1] 3019 	ld a,(x)
      000E8A 27 1E            [ 1] 3020 	jreq str_match 
      000E8C 0D 01            [ 1] 3021 	tnz (NLEN,sp)
      000E8E 27 0B            [ 1] 3022 	jreq no_match  
      000E90 90 F1            [ 1] 3023 	cp a,(y)
      000E92 26 07            [ 1] 3024 	jrne no_match 
      000E94 90 5C            [ 2] 3025 	incw y 
      000E96 5C               [ 2] 3026 	incw x
      000E97 0A 01            [ 1] 3027 	dec (NLEN,sp)
      000E99 20 EE            [ 2] 3028 	jra cp_loop 
      000E9B                       3029 no_match:
      000E9B 16 02            [ 2] 3030 	ldw y,(YSAVE,sp) 
      000E9D 72 A2 00 02      [ 2] 3031 	subw y,#2 ; move Y to link field
      000EA1 4B 00            [ 1] 3032 	push #TK_NONE 
      000EA3 90 FE            [ 2] 3033 	ldw y,(y) ; next word link 
      000EA5 84               [ 1] 3034 	pop a ; TK_NONE 
      000EA6 27 21            [ 1] 3035 	jreq search_exit  ; not found  
                                   3036 ;try next 
      000EA8 20 D2            [ 2] 3037 	jra search_next
      000EAA                       3038 str_match:
      000EAA 16 02            [ 2] 3039 	ldw y,(YSAVE,sp)
      000EAC 90 F6            [ 1] 3040 	ld a,(y)
      000EAE 6B 01            [ 1] 3041 	ld (NLEN,sp),a ; needed to test keyword type  
      000EB0 A4 0F            [ 1] 3042 	and a,#0xf 
                                   3043 ; move y to procedure address field 	
      000EB2 4C               [ 1] 3044 	inc a 
      000EB3 C7 00 0D         [ 1] 3045 	ld acc8,a 
      000EB6 72 5F 00 0C      [ 1] 3046 	clr acc16 
      000EBA 72 B9 00 0C      [ 2] 3047 	addw y,acc16 
      000EBE 90 FE            [ 2] 3048 	ldw y,(y) ; routine entry point 
                                   3049 ;determine keyword type bits 7:6 
      000EC0 7B 01            [ 1] 3050 	ld a,(NLEN,sp)
      000EC2 4E               [ 1] 3051 	swap a 
      000EC3 A4 0C            [ 1] 3052 	and a,#0xc
      000EC5 44               [ 1] 3053 	srl a
      000EC6 44               [ 1] 3054 	srl a 
      000EC7 AB 06            [ 1] 3055 	add a,#6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000EC9                       3056 search_exit: 
      000EC9 93               [ 1] 3057 	ldw x,y ; x=routine address 
      000ECA                       3058 	_drop VSIZE 	 
      000ECA 5B 03            [ 2]    1     addw sp,#VSIZE 
      000ECC 81               [ 4] 3059 	ret 
                                   3060 
                                   3061 ;---------------------
                                   3062 ; check if next token
                                   3063 ;  is of expected type 
                                   3064 ; input:
                                   3065 ;   A 		 expected token attribute
                                   3066 ;  ouput:
                                   3067 ;   none     if fail call syntax_error 
                                   3068 ;--------------------
      000ECD                       3069 expect:
      000ECD 88               [ 1] 3070 	push a 
      000ECE CD 08 10         [ 4] 3071 	call next_token 
      000ED1 11 01            [ 1] 3072 	cp a,(1,sp)
      000ED3 27 03            [ 1] 3073 	jreq 1$
      000ED5 CC 07 5D         [ 2] 3074 	jp syntax_error
      000ED8 84               [ 1] 3075 1$: pop a 
      000ED9 81               [ 4] 3076 	ret 
                                   3077 
                                   3078 
                                   3079 ;-------------------------------
                                   3080 ; parse embedded BASIC routines 
                                   3081 ; arguments list.
                                   3082 ; arg_list::=  rel[','rel]*
                                   3083 ; all arguments are of integer type
                                   3084 ; and pushed on stack 
                                   3085 ; input:
                                   3086 ;   none
                                   3087 ; output:
                                   3088 ;   stack{n}   arguments pushed on stack
                                   3089 ;   A 	number of arguments pushed on stack  
                                   3090 ;--------------------------------
      000EDA                       3091 arg_list:
      000EDA 4B 00            [ 1] 3092 	push #0  
      000EDC CD 10 2A         [ 4] 3093 1$: call relation
      000EDF A1 00            [ 1] 3094 	cp a,#TK_NONE 
      000EE1 27 1C            [ 1] 3095 	jreq 5$
      000EE3 A1 04            [ 1] 3096 	cp a,#TK_INTGR
      000EE5 26 13            [ 1] 3097 	jrne 4$
      000EE7                       3098 3$: 
                                   3099 ; swap return address with argument
      000EE7 84               [ 1] 3100 	pop a 
      000EE8 90 85            [ 2] 3101 	popw y 
      000EEA 89               [ 2] 3102 	pushw x 
      000EEB 90 89            [ 2] 3103 	pushw y 
      000EED 4C               [ 1] 3104     inc a
      000EEE 88               [ 1] 3105 	push a 
      000EEF CD 08 10         [ 4] 3106 	call next_token 
      000EF2 A1 0D            [ 1] 3107 	cp a,#TK_COMMA 
      000EF4 27 E6            [ 1] 3108 	jreq 1$ 
      000EF6 A1 00            [ 1] 3109 	cp a,#TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000EF8 27 05            [ 1] 3110 	jreq 5$ 
      000EFA                       3111 4$:	_unget_token 
      000EFA 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000EFF 84               [ 1] 3112 5$:	pop a  
      000F00 81               [ 4] 3113 	ret 
                                   3114 
                                   3115 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3116 ; parse arguments list 
                                   3117 ; between ()
                                   3118 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F01                       3119 func_args:
      000F01 85               [ 2] 3120 	popw x
      000F02 CF 00 0E         [ 2] 3121 	ldw tmp16,x  
      000F05 A6 0B            [ 1] 3122 	ld a,#TK_LPAREN 
      000F07 CD 0E CD         [ 4] 3123 	call expect 
      000F0A CD 0E DA         [ 4] 3124 	call arg_list 
      000F0D 88               [ 1] 3125 	push a 
      000F0E A6 0C            [ 1] 3126 	ld a,#TK_RPAREN 
      000F10 CD 0E CD         [ 4] 3127 	call expect 
      000F13 84               [ 1] 3128 	pop a 
      000F14 72 CC 00 0E      [ 5] 3129 	jp [tmp16]
                                   3130 
                                   3131 ;--------------------------------
                                   3132 ;   BASIC commnands 
                                   3133 ;--------------------------------
                                   3134 
                                   3135 ;--------------------------------
                                   3136 ;  arithmetic and relational 
                                   3137 ;  routines
                                   3138 ;  operators precedence
                                   3139 ;  highest to lowest
                                   3140 ;  operators on same row have 
                                   3141 ;  same precedence and are executed
                                   3142 ;  from left to right.
                                   3143 ;	'*','/','%'
                                   3144 ;   '-','+'
                                   3145 ;   '=','>','<','>=','<=','<>','><'
                                   3146 ;   '<>' and '><' are equivalent for not equal.
                                   3147 ;--------------------------------
                                   3148 
                                   3149 ;---------------------
                                   3150 ; return array element
                                   3151 ; address from @(expr)
                                   3152 ; input:
                                   3153 ;   A 		TK_ARRAY
                                   3154 ; output:
                                   3155 ;   A 		TK_INTGR
                                   3156 ;	X 		element address 
                                   3157 ;----------------------
      000F18                       3158 get_array_element:
      000F18 CD 0F 01         [ 4] 3159 	call func_args 
      000F1B A1 01            [ 1] 3160 	cp a,#1
      000F1D 27 03            [ 1] 3161 	jreq 1$
      000F1F CC 07 5D         [ 2] 3162 	jp syntax_error
      000F22 85               [ 2] 3163 1$: popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3164 	; check for bounds 
      000F23 C3 00 23         [ 2] 3165 	cpw x,array_size 
      000F26 23 05            [ 2] 3166 	jrule 3$
                                   3167 ; bounds {1..array_size}	
      000F28 A6 0A            [ 1] 3168 2$: ld a,#ERR_BAD_VALUE 
      000F2A CC 07 5F         [ 2] 3169 	jp tb_error 
      000F2D 5D               [ 2] 3170 3$: tnzw  x
      000F2E 27 F8            [ 1] 3171 	jreq 2$ 
      000F30 58               [ 2] 3172 	sllw x 
      000F31 89               [ 2] 3173 	pushw x 
      000F32 AE 16 E8         [ 2] 3174 	ldw x,#tib
      000F35 72 F0 01         [ 2] 3175 	subw x,(1,sp)
      000F38                       3176 	_drop 2   
      000F38 5B 02            [ 2]    1     addw sp,#2 
      000F3A A6 04            [ 1] 3177 	ld a,#TK_INTGR
      000F3C 81               [ 4] 3178 	ret 
                                   3179 
                                   3180 ;***********************************
                                   3181 ;   expression parse,execute 
                                   3182 ;***********************************
                                   3183 ;-----------------------------------
                                   3184 ; factor ::= ['+'|'-'|e]  var | @ |
                                   3185 ;			 integer | function |
                                   3186 ;			 '('relation')' 
                                   3187 ; output:
                                   3188 ;   A    token attribute 
                                   3189 ;   X 	 integer
                                   3190 ; ---------------------------------
                           000001  3191 	NEG=1
                           000001  3192 	VSIZE=1
      000F3D                       3193 factor:
      000F3D                       3194 	_vars VSIZE 
      000F3D 52 01            [ 2]    1     sub sp,#VSIZE 
      000F3F CD 08 10         [ 4] 3195 	call next_token
      000F42 A1 02            [ 1] 3196 	cp a,#CMD_END 
      000F44 2B 4E            [ 1] 3197 	jrmi 20$
      000F46 6B 01            [ 1] 3198 1$:	ld (NEG,sp),a 
      000F48 A4 30            [ 1] 3199 	and a,#TK_GRP_MASK
      000F4A A1 10            [ 1] 3200 	cp a,#TK_GRP_ADD 
      000F4C 27 04            [ 1] 3201 	jreq 2$
      000F4E 7B 01            [ 1] 3202 	ld a,(NEG,sp)
      000F50 20 03            [ 2] 3203 	jra 4$  
      000F52                       3204 2$:	
      000F52 CD 08 10         [ 4] 3205 	call next_token 
      000F55                       3206 4$:	
      000F55 A1 07            [ 1] 3207 	cp a,#TK_IFUNC 
      000F57 26 03            [ 1] 3208 	jrne 5$ 
      000F59 FD               [ 4] 3209 	call (x) 
      000F5A 20 2F            [ 2] 3210 	jra 18$ 
      000F5C                       3211 5$:
      000F5C A1 04            [ 1] 3212 	cp a,#TK_INTGR
      000F5E 26 02            [ 1] 3213 	jrne 6$
      000F60 20 29            [ 2] 3214 	jra 18$
      000F62                       3215 6$:
      000F62 A1 0A            [ 1] 3216 	cp a,#TK_ARRAY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000F64 26 06            [ 1] 3217 	jrne 10$
      000F66 CD 0F 18         [ 4] 3218 	call get_array_element
      000F69 FE               [ 2] 3219 	ldw x,(x)
      000F6A 20 1F            [ 2] 3220 	jra 18$ 
      000F6C                       3221 10$:
      000F6C A1 05            [ 1] 3222 	cp a,#TK_VAR 
      000F6E 26 03            [ 1] 3223 	jrne 12$
      000F70 FE               [ 2] 3224 	ldw x,(x)
      000F71 20 18            [ 2] 3225 	jra 18$
      000F73                       3226 12$:			
      000F73 A1 0B            [ 1] 3227 	cp a,#TK_LPAREN
      000F75 26 0C            [ 1] 3228 	jrne 16$
      000F77 CD 10 2A         [ 4] 3229 	call relation
      000F7A 89               [ 2] 3230 	pushw x 
      000F7B A6 0C            [ 1] 3231 	ld a,#TK_RPAREN 
      000F7D CD 0E CD         [ 4] 3232 	call expect
      000F80 85               [ 2] 3233 	popw x 
      000F81 20 08            [ 2] 3234 	jra 18$	
      000F83                       3235 16$:
      000F83                       3236 	_unget_token
      000F83 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000F88 4F               [ 1] 3237 	clr a 
      000F89 20 09            [ 2] 3238 	jra 20$ 
      000F8B                       3239 18$: 
      000F8B A6 11            [ 1] 3240 	ld a,#TK_MINUS 
      000F8D 11 01            [ 1] 3241 	cp a,(NEG,sp)
      000F8F 26 01            [ 1] 3242 	jrne 19$
      000F91 50               [ 2] 3243 	negw x
      000F92                       3244 19$:
      000F92 A6 04            [ 1] 3245 	ld a,#TK_INTGR
      000F94                       3246 20$:
      000F94                       3247 	_drop VSIZE
      000F94 5B 01            [ 2]    1     addw sp,#VSIZE 
      000F96 81               [ 4] 3248 	ret
                                   3249 
                                   3250 ;-----------------------------------
                                   3251 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3252 ; output:
                                   3253 ;   A    	token attribute 
                                   3254 ;	X		integer
                                   3255 ;-----------------------------------
                           000001  3256 	N1=1
                           000003  3257 	N2=3
                           000005  3258 	MULOP=5
                           000005  3259 	VSIZE=5
      000F97                       3260 term:
      000F97                       3261 	_vars VSIZE
      000F97 52 05            [ 2]    1     sub sp,#VSIZE 
      000F99 CD 0F 3D         [ 4] 3262 	call factor
      000F9C A1 02            [ 1] 3263 	cp a,#CMD_END
      000F9E 2B 43            [ 1] 3264 	jrmi term_exit
      000FA0                       3265 term01:	 ; check for  operator 
      000FA0 1F 03            [ 2] 3266 	ldw (N2,sp),x  ; save first factor 
      000FA2 CD 08 10         [ 4] 3267 	call next_token
      000FA5 A1 02            [ 1] 3268 	cp a,#CMD_END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000FA7 2B 36            [ 1] 3269 	jrmi 9$
      000FA9 6B 05            [ 1] 3270 0$:	ld (MULOP,sp),a
      000FAB A4 30            [ 1] 3271 	and a,#TK_GRP_MASK
      000FAD A1 20            [ 1] 3272 	cp a,#TK_GRP_MULT
      000FAF 27 09            [ 1] 3273 	jreq 1$
      000FB1 7B 05            [ 1] 3274 	ld a,(MULOP,sp) 
      000FB3                       3275 	_unget_token 
      000FB3 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000FB8 20 25            [ 2] 3276 	jra 9$
      000FBA                       3277 1$:	; got *|/|%
      000FBA CD 0F 3D         [ 4] 3278 	call factor
      000FBD A1 04            [ 1] 3279 	cp a,#TK_INTGR
      000FBF 27 03            [ 1] 3280 	jreq 2$ 
      000FC1 CC 07 5D         [ 2] 3281 	jp syntax_error
      000FC4 1F 01            [ 2] 3282 2$:	ldw (N1,sp),x  
      000FC6 7B 05            [ 1] 3283 	ld a,(MULOP,sp) 
      000FC8 A1 20            [ 1] 3284 	cp a,#TK_MULT 
      000FCA 26 05            [ 1] 3285 	jrne 3$
      000FCC CD 0D A9         [ 4] 3286 	call multiply 
      000FCF 20 CF            [ 2] 3287 	jra term01
      000FD1 A1 21            [ 1] 3288 3$: cp a,#TK_DIV 
      000FD3 26 05            [ 1] 3289 	jrne 4$ 
      000FD5 CD 0D F1         [ 4] 3290 	call divide 
      000FD8 20 C6            [ 2] 3291 	jra term01 
      000FDA CD 0E 35         [ 4] 3292 4$: call modulo
      000FDD 20 C1            [ 2] 3293 	jra term01 
      000FDF 1E 03            [ 2] 3294 9$: ldw x,(N2,sp)  
      000FE1 A6 04            [ 1] 3295 	ld a,#TK_INTGR 	
      000FE3                       3296 term_exit:
      000FE3                       3297 	_drop VSIZE 
      000FE3 5B 05            [ 2]    1     addw sp,#VSIZE 
      000FE5 81               [ 4] 3298 	ret 
                                   3299 
                                   3300 ;-------------------------------
                                   3301 ;  expr ::= term [['+'|'-'] term]*
                                   3302 ;  result range {-32768..32767}
                                   3303 ;  output:
                                   3304 ;   A    token attribute 
                                   3305 ;   X	 integer   
                                   3306 ;-------------------------------
                           000001  3307 	N1=1 
                           000003  3308 	N2=3
                           000005  3309 	OP=5 
                           000005  3310 	VSIZE=5 
      000FE6                       3311 expression:
      000FE6                       3312 	_vars VSIZE 
      000FE6 52 05            [ 2]    1     sub sp,#VSIZE 
      000FE8 CD 0F 97         [ 4] 3313 	call term
      000FEB A1 02            [ 1] 3314 	cp a,#CMD_END 
      000FED 2B 38            [ 1] 3315 	jrmi expr_exit 
      000FEF 1F 03            [ 2] 3316 0$:	ldw (N2,sp),x 
      000FF1 CD 08 10         [ 4] 3317 	call next_token
      000FF4 A1 02            [ 1] 3318 	cp a,#CMD_END 
      000FF6 2B 2B            [ 1] 3319 	jrmi 9$ 
      000FF8 6B 05            [ 1] 3320 1$:	ld (OP,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000FFA A4 30            [ 1] 3321 	and a,#TK_GRP_MASK
      000FFC A1 10            [ 1] 3322 	cp a,#TK_GRP_ADD 
      000FFE 27 07            [ 1] 3323 	jreq 2$ 
      001000                       3324 	_unget_token
      001000 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001005 20 1C            [ 2] 3325 	jra 9$
      001007                       3326 2$: 
      001007 CD 0F 97         [ 4] 3327 	call term
      00100A A1 04            [ 1] 3328 	cp a,#TK_INTGR 
      00100C 27 03            [ 1] 3329 	jreq 3$
      00100E CC 07 5D         [ 2] 3330 	jp syntax_error
      001011 1F 01            [ 2] 3331 3$:	ldw (N1,sp),x 
      001013 7B 05            [ 1] 3332 	ld a,(OP,sp)
      001015 A1 10            [ 1] 3333 	cp a,#TK_PLUS 
      001017 26 05            [ 1] 3334 	jrne 4$
      001019 CD 0D 9B         [ 4] 3335 	call add 
      00101C 20 D1            [ 2] 3336 	jra 0$ 
      00101E CD 0D A3         [ 4] 3337 4$:	call substract
      001021 20 CC            [ 2] 3338 	jra 0$
      001023 1E 03            [ 2] 3339 9$: ldw x,(N2,sp)
      001025 A6 04            [ 1] 3340 	ld a,#TK_INTGR	
      001027                       3341 expr_exit:
      001027                       3342 	_drop VSIZE 
      001027 5B 05            [ 2]    1     addw sp,#VSIZE 
      001029 81               [ 4] 3343 	ret 
                                   3344 
                                   3345 ;---------------------------------------------
                                   3346 ; rel ::= expr rel_op expr
                                   3347 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3348 ;  relation return 1 | 0  for true | false 
                                   3349 ;  output:
                                   3350 ;    A 		token attribute  
                                   3351 ;	 X		1|0
                                   3352 ;---------------------------------------------
                           000001  3353 	N1=1
                           000003  3354 	N2=3
                           000005  3355 	RELOP=5
                           000005  3356 	VSIZE=5 
      00102A                       3357 relation: 
      00102A                       3358 	_vars VSIZE
      00102A 52 05            [ 2]    1     sub sp,#VSIZE 
      00102C CD 0F E6         [ 4] 3359 	call expression
      00102F A1 02            [ 1] 3360 	cp a,#CMD_END  
      001031 2B 4B            [ 1] 3361 	jrmi rel_exit 
                                   3362 	; expect rel_op or leave 
      001033 1F 03            [ 2] 3363 	ldw (N2,sp),x 
      001035 CD 08 10         [ 4] 3364 	call next_token 
      001038 A1 02            [ 1] 3365 	cp a,#CMD_END 
      00103A 2B 3E            [ 1] 3366 	jrmi 9$
      00103C                       3367 1$:	
      00103C 6B 05            [ 1] 3368 	ld (RELOP,sp),a 
      00103E A4 30            [ 1] 3369 	and a,#TK_GRP_MASK
      001040 A1 30            [ 1] 3370 	cp a,#TK_GRP_RELOP 
      001042 27 07            [ 1] 3371 	jreq 2$
      001044                       3372 	_unget_token  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001044 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001049 20 2F            [ 2] 3373 	jra 9$
      00104B                       3374 2$:	; expect another expression or error 
      00104B CD 0F E6         [ 4] 3375 	call expression
      00104E A1 04            [ 1] 3376 	cp a,#TK_INTGR 
      001050 27 03            [ 1] 3377 	jreq 3$
      001052 CC 07 5D         [ 2] 3378 	jp syntax_error 
      001055 1F 01            [ 2] 3379 3$:	ldw (N1,sp),x 
      001057 CD 0D A3         [ 4] 3380 	call substract
      00105A 26 06            [ 1] 3381 	jrne 4$
      00105C 35 02 00 0D      [ 1] 3382 	mov acc8,#2 ; n1==n2
      001060 20 0C            [ 2] 3383 	jra 6$ 
      001062                       3384 4$: 
      001062 2C 06            [ 1] 3385 	jrsgt 5$  
      001064 35 04 00 0D      [ 1] 3386 	mov acc8,#4 ; n1<2 
      001068 20 04            [ 2] 3387 	jra 6$
      00106A                       3388 5$:
      00106A 35 01 00 0D      [ 1] 3389 	mov acc8,#1 ; n1>n2 
      00106E                       3390 6$:
      00106E 5F               [ 1] 3391 	clrw x 
      00106F C6 00 0D         [ 1] 3392 	ld a, acc8  
      001072 14 05            [ 1] 3393 	and a,(RELOP,sp)
      001074 4D               [ 1] 3394 	tnz a 
      001075 27 05            [ 1] 3395 	jreq 10$
      001077 5C               [ 2] 3396 	incw x 
      001078                       3397 7$:	 
      001078 20 02            [ 2] 3398 	jra 10$  	
      00107A 1E 03            [ 2] 3399 9$: ldw x,(N2,sp)
      00107C                       3400 10$:
      00107C A6 04            [ 1] 3401 	ld a,#TK_INTGR
      00107E                       3402 rel_exit: 	 
      00107E                       3403 	_drop VSIZE
      00107E 5B 05            [ 2]    1     addw sp,#VSIZE 
      001080 81               [ 4] 3404 	ret 
                                   3405 
                                   3406 ;--------------------------------
                                   3407 ; BASIC: SHOW 
                                   3408 ; print stack content in hexadecimal bytes 
                                   3409 ; 16 bytes per row 
                                   3410 ;--------------------------------
                           000001  3411 	TWSAVE=1
                           000002  3412 	BSAVE=2
                           000003  3413 	ADDR=3
                           000004  3414 	VSIZE=4 
      001081                       3415 show:
      001081                       3416 	_vars VSIZE
      001081 52 04            [ 2]    1     sub sp,#VSIZE 
      001083 C6 00 0A         [ 1] 3417 	ld a,base 
      001086 6B 02            [ 1] 3418 	ld (BSAVE,sp),a
      001088 C6 00 26         [ 1] 3419 	ld a,tab_width
      00108B 6B 01            [ 1] 3420 	ld (TWSAVE,sp),a
      00108D 35 10 00 0A      [ 1] 3421 	mov base,#16   
      001091 AE 10 CD         [ 2] 3422 	ldw x,#cstk_prompt
      001094 CD 01 D7         [ 4] 3423 	call puts 
      001097 96               [ 1] 3424 	ldw x,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001098 1C 00 05         [ 2] 3425 	addw x,#VSIZE+1 ; ignore local vars and return address
      00109B 1F 03            [ 2] 3426 	ldw (ADDR,sp),x 
      00109D                       3427 dotr_loop:
      00109D A3 18 00         [ 2] 3428 	cpw x,#RAM_SIZE 
      0010A0 24 18            [ 1] 3429 	jruge 9$
      0010A2 A6 10            [ 1] 3430 	ld a,#16 
      0010A4 90 AE 18 00      [ 2] 3431 	ldw y,#RAM_SIZE  
      0010A8 72 F2 03         [ 2] 3432 	subw y,(ADDR,sp)
      0010AB 90 A3 00 10      [ 2] 3433 	cpw y,#16 
      0010AF 24 02            [ 1] 3434 	jruge 2$
      0010B1 90 9F            [ 1] 3435 	ld a,yl  
      0010B3                       3436 2$:  
      0010B3 CD 10 F4         [ 4] 3437 	call show_row 
      0010B6 1F 03            [ 2] 3438 	ldw (ADDR,sp),x 
      0010B8 20 E3            [ 2] 3439 	jra dotr_loop 
      0010BA A6 0D            [ 1] 3440 9$:	ld a,#CR 
      0010BC CD 01 C4         [ 4] 3441 	call putc 
      0010BF 7B 02            [ 1] 3442 	ld a,(BSAVE,sp)
      0010C1 C7 00 0A         [ 1] 3443 	ld base,a 
      0010C4 7B 01            [ 1] 3444 	ld a,(TWSAVE,sp)
      0010C6 C7 00 26         [ 1] 3445 	ld tab_width,a 
      0010C9                       3446 	_drop VSIZE 
      0010C9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0010CB 4F               [ 1] 3447 	clr a 
      0010CC 81               [ 4] 3448 	ret
                                   3449 
      0010CD 0A 63 6F 6E 74 65 6E  3450 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3451 
                                   3452 ;---------------------
                                   3453 ; display n bytes row 
                                   3454 ; from memory.
                                   3455 ; input:
                                   3456 ;   A   bytes to print 
                                   3457 ;	X   start address 
                                   3458 ; output:
                                   3459 ;   X   address after last shown  
                                   3460 ;---------------------
                           000001  3461 	CNT=1 
                           000002  3462 	ADR=2 
                           000003  3463 	VSIZE=3 
      0010F4                       3464 show_row:
      0010F4 4D               [ 1] 3465 	tnz a 
      0010F5 26 01            [ 1] 3466 	jrne 1$
      0010F7 81               [ 4] 3467 	ret 
      0010F8                       3468 1$:	
      0010F8 89               [ 2] 3469 	pushw x  
      0010F9 88               [ 1] 3470 	push a 
      0010FA 35 04 00 26      [ 1] 3471 	mov tab_width,#4 
      0010FE CD 08 A9         [ 4] 3472 	call print_int 
      001101 A6 20            [ 1] 3473 	ld a,#SPACE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001103 CD 01 C4         [ 4] 3474 	call putc
      001106                       3475 row_loop:
      001106 1E 02            [ 2] 3476 	ldw x,(ADR,sp)
      001108 F6               [ 1] 3477 	ld a,(x)
      001109 5F               [ 1] 3478 	clrw x 
      00110A 97               [ 1] 3479 	ld xl,a 
      00110B CD 08 A9         [ 4] 3480 	call print_int 
      00110E 1E 02            [ 2] 3481 	ldw x,(ADR,sp)
      001110 5C               [ 2] 3482 	incw x 
      001111 1F 02            [ 2] 3483 	ldw (ADR,sp),x 
      001113 0A 01            [ 1] 3484 	dec (CNT,sp)
      001115 26 EF            [ 1] 3485 	jrne row_loop
      001117                       3486 	_drop VSIZE  		
      001117 5B 03            [ 2]    1     addw sp,#VSIZE 
      001119 35 04 00 26      [ 1] 3487 	mov tab_width,#4
      00111D A6 0D            [ 1] 3488 	ld a,#CR 
      00111F CD 01 C4         [ 4] 3489 	call putc 
      001122 81               [ 4] 3490 	ret 
                                   3491 
                                   3492 ;--------------------------------------------
                                   3493 ; BASIC: HEX 
                                   3494 ; select hexadecimal base for integer print
                                   3495 ;---------------------------------------------
      001123                       3496 hex_base:
      001123 35 10 00 0A      [ 1] 3497 	mov base,#16 
      001127 81               [ 4] 3498 	ret 
                                   3499 
                                   3500 ;--------------------------------------------
                                   3501 ; BASIC: DEC 
                                   3502 ; select decimal base for integer print
                                   3503 ;---------------------------------------------
      001128                       3504 dec_base:
      001128 35 0A 00 0A      [ 1] 3505 	mov base,#10
      00112C 81               [ 4] 3506 	ret 
                                   3507 
                                   3508 ;------------------------
                                   3509 ; BASIC: SIZE 
                                   3510 ; return free size in text area
                                   3511 ; output:
                                   3512 ;   A 		TK_INTGR
                                   3513 ;   X 	    size integer
                                   3514 ;--------------------------
      00112D                       3515 size:
      00112D AE 16 E8         [ 2] 3516 	ldw x,#tib 
      001130 72 B0 00 20      [ 2] 3517 	subw x,txtend 
      001134 A6 04            [ 1] 3518 	ld a,#TK_INTGR
      001136 81               [ 4] 3519 	ret 
                                   3520 
                                   3521 
                                   3522 ;------------------------
                                   3523 ; BASIC: UBOUND  
                                   3524 ; return array variable size 
                                   3525 ; output:
                                   3526 ;   A 		TK_INTGR
                                   3527 ;   X 	    array size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3528 ;--------------------------
      001137                       3529 ubound:
      001137 AE 16 E8         [ 2] 3530 	ldw x,#tib
      00113A 72 B0 00 20      [ 2] 3531 	subw x,txtend 
      00113E 90 CE 00 04      [ 2] 3532 	ldw y,basicptr 
      001142 90 C3 00 20      [ 2] 3533 	cpw y,txtend 
      001146 25 0A            [ 1] 3534 	jrult 1$
      001148 3B 00 03         [ 1] 3535 	push count 
      00114B 4B 00            [ 1] 3536 	push #0 
      00114D 72 F0 01         [ 2] 3537 	subw x,(1,sp)
      001150                       3538 	_drop 2 
      001150 5B 02            [ 2]    1     addw sp,#2 
      001152 54               [ 2] 3539 1$:	srlw x 
      001153 CF 00 23         [ 2] 3540 	ldw array_size,x
      001156 A6 04            [ 1] 3541 	ld a,#TK_INTGR
      001158 81               [ 4] 3542 	ret 
                                   3543 
                                   3544 ;-----------------------------
                                   3545 ; BASIC: LET var=expr 
                                   3546 ; variable assignement 
                                   3547 ; output:
                                   3548 ;   A 		TK_NONE 
                                   3549 ;-----------------------------
      001159                       3550 let:
      001159 CD 08 10         [ 4] 3551 	call next_token 
      00115C A1 05            [ 1] 3552 	cp a,#TK_VAR 
      00115E 27 0A            [ 1] 3553 	jreq let_var
      001160 A1 0A            [ 1] 3554 	cp a,#TK_ARRAY 
      001162 27 03            [ 1] 3555 	jreq  let_array
      001164 CC 07 5D         [ 2] 3556 	jp syntax_error
      001167                       3557 let_array:
      001167 CD 0F 18         [ 4] 3558 	call get_array_element
      00116A                       3559 let_var:
      00116A 89               [ 2] 3560 	pushw x  
      00116B CD 08 10         [ 4] 3561 	call next_token 
      00116E A1 32            [ 1] 3562 	cp a,#TK_EQUAL
      001170 27 03            [ 1] 3563 	jreq 1$
      001172 CC 07 5D         [ 2] 3564 	jp syntax_error
      001175                       3565 1$:	
      001175 CD 10 2A         [ 4] 3566 	call relation   
      001178 A1 04            [ 1] 3567 	cp a,#TK_INTGR 
      00117A 27 03            [ 1] 3568 	jreq 2$
      00117C CC 07 5D         [ 2] 3569 	jp syntax_error
      00117F                       3570 2$:	
      00117F 90 93            [ 1] 3571 	ldw y,x 
      001181 85               [ 2] 3572 	popw x   
      001182 FF               [ 2] 3573 	ldw (x),y   
      001183 81               [ 4] 3574 	ret 
                                   3575 
                                   3576 ;----------------------------
                                   3577 ; BASIC: LIST [[start][,end]]
                                   3578 ; list program lines 
                                   3579 ; form start to end 
                                   3580 ; if empty argument list then 
                                   3581 ; list all.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3582 ;----------------------------
                           000001  3583 	FIRST=1
                           000003  3584 	LAST=3 
                           000005  3585 	LN_PTR=5
                           000006  3586 	VSIZE=6 
      001184                       3587 list:
      001184                       3588 	_vars VSIZE
      001184 52 06            [ 2]    1     sub sp,#VSIZE 
      001186 CE 00 1E         [ 2] 3589 	ldw x,txtbgn 
      001189 C3 00 20         [ 2] 3590 	cpw x,txtend 
      00118C 2B 05            [ 1] 3591 	jrmi 1$
      00118E A6 0D            [ 1] 3592 	ld a,#ERR_NO_PROG 
      001190 CC 07 5F         [ 2] 3593 	jp tb_error ; nothing to list 
      001193 1F 05            [ 2] 3594 1$:	ldw (LN_PTR,sp),x 
      001195 FE               [ 2] 3595 	ldw x,(x) 
      001196 1F 01            [ 2] 3596 	ldw (FIRST,sp),x ; list from first line 
      001198 AE 7F FF         [ 2] 3597 	ldw x,#MAX_LINENO ; biggest line number 
      00119B 1F 03            [ 2] 3598 	ldw (LAST,sp),x 
      00119D CD 0E DA         [ 4] 3599 	call arg_list
      0011A0 4D               [ 1] 3600 	tnz a
      0011A1 27 31            [ 1] 3601 	jreq list_start 
      0011A3 A1 02            [ 1] 3602 	cp a,#2 
      0011A5 27 07            [ 1] 3603 	jreq 4$
      0011A7 A1 01            [ 1] 3604 	cp a,#1 
      0011A9 27 06            [ 1] 3605 	jreq first_line 
      0011AB CC 07 5D         [ 2] 3606 	jp syntax_error 
      0011AE 85               [ 2] 3607 4$:	popw x 
      0011AF 1F 05            [ 2] 3608 	ldw (LAST+2,sp),x 
      0011B1                       3609 first_line:
      0011B1 85               [ 2] 3610 	popw x
      0011B2 1F 01            [ 2] 3611 	ldw (FIRST,sp),x 
      0011B4                       3612 lines_skip:
      0011B4 CE 00 1E         [ 2] 3613 	ldw x,txtbgn
      0011B7 1F 05            [ 2] 3614 2$:	ldw (LN_PTR,sp),x 
      0011B9 C3 00 20         [ 2] 3615 	cpw x,txtend 
      0011BC 2A 3C            [ 1] 3616 	jrpl list_exit 
      0011BE FE               [ 2] 3617 	ldw x,(x) ;line# 
      0011BF 13 01            [ 2] 3618 	cpw x,(FIRST,sp)
      0011C1 2A 11            [ 1] 3619 	jrpl list_start 
      0011C3 1E 05            [ 2] 3620 	ldw x,(LN_PTR,sp) 
      0011C5 E6 02            [ 1] 3621 	ld a,(2,x)
      0011C7 C7 00 0D         [ 1] 3622 	ld acc8,a 
      0011CA 72 5F 00 0C      [ 1] 3623 	clr acc16 
      0011CE 72 BB 00 0C      [ 2] 3624 	addw x,acc16
      0011D2 20 E3            [ 2] 3625 	jra 2$ 
                                   3626 ; print loop
      0011D4                       3627 list_start:
      0011D4 1E 05            [ 2] 3628 	ldw x,(LN_PTR,sp)
      0011D6 E6 02            [ 1] 3629 3$:	ld a,(2,x) 
      0011D8 CD 12 4D         [ 4] 3630 	call prt_basic_line
      0011DB 1E 05            [ 2] 3631 	ldw x,(LN_PTR,sp)
      0011DD E6 02            [ 1] 3632 	ld a,(2,x)
      0011DF C7 00 0D         [ 1] 3633 	ld acc8,a 
      0011E2 72 5F 00 0C      [ 1] 3634 	clr acc16 
      0011E6 72 BB 00 0C      [ 2] 3635 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0011EA C3 00 20         [ 2] 3636 	cpw x,txtend 
      0011ED 2A 0B            [ 1] 3637 	jrpl list_exit
      0011EF 1F 05            [ 2] 3638 	ldw (LN_PTR,sp),x
      0011F1 FE               [ 2] 3639 	ldw x,(x)
      0011F2 13 03            [ 2] 3640 	cpw x,(LAST,sp)  
      0011F4 2C 04            [ 1] 3641 	jrsgt list_exit 
      0011F6 1E 05            [ 2] 3642 	ldw x,(LN_PTR,sp)
      0011F8 20 DC            [ 2] 3643 	jra 3$
      0011FA                       3644 list_exit:
      0011FA                       3645 	_drop VSIZE 
      0011FA 5B 06            [ 2]    1     addw sp,#VSIZE 
      0011FC 81               [ 4] 3646 	ret
                                   3647 
                                   3648 ;-------------------------
                                   3649 ; print counted string 
                                   3650 ; input:
                                   3651 ;   X 	address of string
                                   3652 ;--------------------------
      0011FD                       3653 prt_cmd_name:
      0011FD F6               [ 1] 3654 	ld a,(x)
      0011FE 5C               [ 2] 3655 	incw x
      0011FF A4 0F            [ 1] 3656 	and a,#15  
      001201 88               [ 1] 3657 	push a 
      001202 0D 01            [ 1] 3658 1$: tnz (1,sp) 
      001204 27 09            [ 1] 3659 	jreq 9$
      001206 F6               [ 1] 3660 	ld a,(x)
      001207 CD 01 C4         [ 4] 3661 	call putc 
      00120A 5C               [ 2] 3662 	incw x
      00120B 0A 01            [ 1] 3663 	dec (1,sp)	 
      00120D 20 F3            [ 2] 3664 	jra 1$
      00120F 84               [ 1] 3665 9$: pop a 
      001210 81               [ 4] 3666 	ret	
                                   3667 
                                   3668 ;--------------------------
                                   3669 ; print TK_QSTR
                                   3670 ; converting control character
                                   3671 ; to backslash sequence
                                   3672 ; input:
                                   3673 ;   X        char *
                                   3674 ;-----------------------------
      001211                       3675 prt_quote:
      001211 A6 22            [ 1] 3676 	ld a,#'"
      001213 CD 01 C4         [ 4] 3677 	call putc 
      001216 F6               [ 1] 3678 1$:	ld a,(x)
      001217 27 2D            [ 1] 3679 	jreq 9$
      001219 5C               [ 2] 3680 	incw x 
      00121A A1 20            [ 1] 3681 	cp a,#SPACE 
      00121C 25 0C            [ 1] 3682 	jrult 3$
      00121E CD 01 C4         [ 4] 3683 	call putc
      001221 A1 5C            [ 1] 3684 	cp a,#'\ 
      001223 26 F1            [ 1] 3685 	jrne 1$ 
      001225                       3686 2$:
      001225 CD 01 C4         [ 4] 3687 	call putc 
      001228 20 EC            [ 2] 3688 	jra 1$
      00122A 88               [ 1] 3689 3$: push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00122B A6 5C            [ 1] 3690 	ld a,#'\
      00122D CD 01 C4         [ 4] 3691 	call putc 
      001230 84               [ 1] 3692 	pop a 
      001231 A0 07            [ 1] 3693 	sub a,#7
      001233 C7 00 0D         [ 1] 3694 	ld acc8,a 
      001236 72 5F 00 0C      [ 1] 3695 	clr acc16
      00123A 90 AE 0A AD      [ 2] 3696 	ldw y,#escaped 
      00123E 72 B9 00 0C      [ 2] 3697 	addw y,acc16 
      001242 90 F6            [ 1] 3698 	ld a,(y)
      001244 20 DF            [ 2] 3699 	jra 2$
      001246 A6 22            [ 1] 3700 9$: ld a,#'"
      001248 CD 01 C4         [ 4] 3701 	call putc 
      00124B 5C               [ 2] 3702 	incw x 
      00124C 81               [ 4] 3703 	ret
                                   3704 
                                   3705 
                                   3706 ;--------------------------
                                   3707 ; decompile line from token list 
                                   3708 ; input:
                                   3709 ;   A       stop at this position 
                                   3710 ;   X 		pointer at line
                                   3711 ; output:
                                   3712 ;   none 
                                   3713 ;--------------------------	
                           000001  3714 	BASE_SAV=1
                           000002  3715 	WIDTH_SAV=2
                           000003  3716 	XSAVE=3
                           000005  3717 	LLEN=5
                           000005  3718 	VSIZE=5 
      00124D                       3719 prt_basic_line:
      00124D                       3720 	_vars VSIZE
      00124D 52 05            [ 2]    1     sub sp,#VSIZE 
      00124F 6B 05            [ 1] 3721 	ld (LLEN,sp),a  
      001251 C6 00 0A         [ 1] 3722 	ld a,base
      001254 6B 01            [ 1] 3723 	ld (BASE_SAV,sp),a  
      001256 C6 00 26         [ 1] 3724 	ld a,tab_width 
      001259 6B 02            [ 1] 3725 	ld (WIDTH_SAV,sp),a 
      00125B CF 00 19         [ 2] 3726 	ldw ptr16,x
      00125E FE               [ 2] 3727 	ldw x,(x)
      00125F 35 0A 00 0A      [ 1] 3728 	mov base,#10
      001263 35 05 00 26      [ 1] 3729 	mov tab_width,#5
      001267 CD 08 A9         [ 4] 3730 	call print_int ; print line number 
      00126A A6 20            [ 1] 3731 	ld a,#SPACE 
      00126C CD 01 C4         [ 4] 3732 	call putc 
      00126F 72 5F 00 26      [ 1] 3733 	clr tab_width
      001273 AE 00 03         [ 2] 3734 	ldw x,#3
      001276 9F               [ 1] 3735 1$:	ld a,xl 
      001277 11 05            [ 1] 3736 	cp a,(LLEN,sp)
      001279 2B 03            [ 1] 3737 	jrmi 20$
      00127B CC 13 94         [ 2] 3738 	jp 90$
      00127E                       3739 20$:	 
      00127E 72 D6 00 19      [ 4] 3740 	ld a,([ptr16],x)
      001282 5C               [ 2] 3741 	incw x 
      001283 1F 03            [ 2] 3742 	ldw (XSAVE,sp),x 
      001285 A1 06            [ 1] 3743 	cp a,#TK_CMD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001287 2B 33            [ 1] 3744 	jrmi 4$
      001289 A1 08            [ 1] 3745 	cp a,#TK_CFUNC 
      00128B 22 2F            [ 1] 3746 	jrugt 4$
      00128D                       3747 2$:	
      00128D 72 DE 00 19      [ 5] 3748 	ldw x,([ptr16],x)
      001291 A3 14 B5         [ 2] 3749 	cpw x,#remark 
      001294 26 14            [ 1] 3750 	jrne 3$
      001296 A6 27            [ 1] 3751 	ld a,#''
      001298 CD 01 C4         [ 4] 3752 	call putc 
      00129B 1E 03            [ 2] 3753 	ldw x,(XSAVE,sp)
      00129D 1C 00 02         [ 2] 3754 	addw x,#2
      0012A0 72 BB 00 19      [ 2] 3755 	addw x,ptr16  
      0012A4 CD 01 D7         [ 4] 3756 	call puts 
      0012A7 CC 13 94         [ 2] 3757 	jp 90$ 
      0012AA                       3758 3$:	
      0012AA CD 0E 46         [ 4] 3759 	call cmd_name
      0012AD CD 11 FD         [ 4] 3760 	call prt_cmd_name
      0012B0 A6 20            [ 1] 3761 	ld a,#SPACE 
      0012B2 CD 01 C4         [ 4] 3762 	call putc 
      0012B5 1E 03            [ 2] 3763 	ldw x,(XSAVE,sp)
      0012B7 1C 00 02         [ 2] 3764 	addw x,#2
      0012BA 20 BA            [ 2] 3765 	jra 1$
      0012BC A1 02            [ 1] 3766 4$: cp a,#TK_QSTR 
      0012BE 26 0D            [ 1] 3767 	jrne 5$
      0012C0 72 BB 00 19      [ 2] 3768 	addw x,ptr16
      0012C4 CD 12 11         [ 4] 3769 	call prt_quote  
      0012C7 72 B0 00 19      [ 2] 3770 	subw x,ptr16  
      0012CB 20 A9            [ 2] 3771 	jra 1$
      0012CD A1 03            [ 1] 3772 5$:	cp a,#TK_CHAR 
      0012CF 26 0F            [ 1] 3773 	jrne 51$
      0012D1 A6 5C            [ 1] 3774 	ld a,#'\ 
      0012D3 CD 01 C4         [ 4] 3775 	call putc 
      0012D6 72 D6 00 19      [ 4] 3776 	ld a,([ptr16],x)
      0012DA 5C               [ 2] 3777 	incw x 
      0012DB CD 01 C4         [ 4] 3778 	call putc 
      0012DE 20 96            [ 2] 3779 	jra 1$ 
      0012E0                       3780 51$:	
      0012E0 A1 05            [ 1] 3781 	cp a,#TK_VAR
      0012E2 26 1B            [ 1] 3782 	jrne 6$ 
      0012E4 72 DE 00 19      [ 5] 3783 	ldw x,([ptr16],x)
      0012E8 1D 00 28         [ 2] 3784 	subw x,#vars 
      0012EB 9F               [ 1] 3785 	ld a,xl
      0012EC 44               [ 1] 3786 	srl a 
      0012ED AB 41            [ 1] 3787 	add a,#'A 
      0012EF CD 01 C4         [ 4] 3788 	call putc 
      0012F2 A6 20            [ 1] 3789 	ld a,#SPACE 
      0012F4 CD 01 C4         [ 4] 3790 	call putc 
      0012F7 1E 03            [ 2] 3791 	ldw x,(XSAVE,sp)
      0012F9 1C 00 02         [ 2] 3792 	addw x,#2 
      0012FC CC 12 76         [ 2] 3793 	jp  1$ 
      0012FF A1 0A            [ 1] 3794 6$: cp a,#TK_ARRAY 
      001301 26 0A            [ 1] 3795 	jrne 7$
      001303 A6 40            [ 1] 3796 	ld a,#'@ 
      001305 CD 01 C4         [ 4] 3797 	call putc 
      001308 1E 03            [ 2] 3798 	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00130A CC 12 76         [ 2] 3799 	jp 1$ 
      00130D A1 04            [ 1] 3800 7$: cp a,#TK_INTGR 
      00130F 26 0F            [ 1] 3801 	jrne 8$
      001311 72 DE 00 19      [ 5] 3802 	ldw x,([ptr16],x)
      001315 CD 08 A9         [ 4] 3803 	call print_int
                                   3804 ;	ld a,#SPACE 
                                   3805 ;	call putc 
      001318 1E 03            [ 2] 3806 	ldw x,(XSAVE,sp)
      00131A 1C 00 02         [ 2] 3807 	addw x,#2 
      00131D CC 12 76         [ 2] 3808 	jp 1$
      001320 A1 31            [ 1] 3809 8$: cp a,#TK_GT 
      001322 2B 1A            [ 1] 3810 	jrmi 9$
      001324 A1 35            [ 1] 3811 	cp a,#TK_NE 
      001326 22 16            [ 1] 3812 	jrugt 9$
      001328 A0 31            [ 1] 3813 	sub a,#TK_GT  
      00132A 48               [ 1] 3814 	sll a 
      00132B 90 5F            [ 1] 3815 	clrw y 
      00132D 90 97            [ 1] 3816 	ld yl,a 
      00132F 72 A9 13 AD      [ 2] 3817 	addw y,#relop_str 
      001333 90 FE            [ 2] 3818 	ldw y,(y)
      001335 93               [ 1] 3819 	ldw x,y 
      001336 CD 01 D7         [ 4] 3820 	call puts 
      001339 1E 03            [ 2] 3821 	ldw x,(XSAVE,sp)
      00133B CC 12 76         [ 2] 3822 	jp 1$
      00133E A1 10            [ 1] 3823 9$: cp a,#TK_PLUS 
      001340 26 04            [ 1] 3824 	jrne 10$
      001342 A6 2B            [ 1] 3825 	ld a,#'+
      001344 20 46            [ 2] 3826 	jra 80$ 
      001346 A1 11            [ 1] 3827 10$: cp a,#TK_MINUS
      001348 26 04            [ 1] 3828 	jrne 11$
      00134A A6 2D            [ 1] 3829 	ld a,#'-
      00134C 20 3E            [ 2] 3830 	jra 80$
      00134E A1 20            [ 1] 3831 11$: cp a,#TK_MULT 
      001350 2B 0E            [ 1] 3832 	jrmi 12$
      001352 A1 22            [ 1] 3833 	cp a,#TK_MOD 
      001354 22 0A            [ 1] 3834 	jrugt 12$
      001356 A0 20            [ 1] 3835 	sub a,#0x20
      001358 5F               [ 1] 3836 	clrw x 
      001359 97               [ 1] 3837 	ld xl,a 
      00135A 1C 13 AA         [ 2] 3838 	addw x,#mul_char 
      00135D F6               [ 1] 3839 	ld a,(x)
      00135E 20 2C            [ 2] 3840 	jra 80$ 
      001360 A1 0B            [ 1] 3841 12$: cp a,#TK_LPAREN 
      001362 2B 0E            [ 1] 3842 	jrmi 13$
      001364 A1 0E            [ 1] 3843 	cp a,#TK_SHARP 
      001366 22 0A            [ 1] 3844 	jrugt 13$
      001368 A0 0B            [ 1] 3845 	sub a,#TK_LPAREN
      00136A 5F               [ 1] 3846 	clrw x 
      00136B 97               [ 1] 3847 	ld xl,a 
      00136C 1C 13 A6         [ 2] 3848 	addw x,#single_char 
      00136F F6               [ 1] 3849 	ld a,(x)
      001370 20 1A            [ 2] 3850 	jra 80$
      001372 A1 03            [ 1] 3851 13$: cp a,#TK_CHAR 
      001374 26 14            [ 1] 3852 	jrne 14$
      001376 A6 5C            [ 1] 3853 	ld a,#'\
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001378 CD 01 C4         [ 4] 3854 	call putc 
      00137B 1E 03            [ 2] 3855 	ldw x,(XSAVE,sp)
      00137D 72 D6 00 19      [ 4] 3856 	ld a,([ptr16],x)
      001381 5C               [ 2] 3857 	incw x 
      001382 1F 03            [ 2] 3858 	ldw (XSAVE,sp),x 
      001384 CD 01 C4         [ 4] 3859 	call putc 
      001387 CC 12 76         [ 2] 3860 	jp 1$ 
      00138A A6 3A            [ 1] 3861 14$: ld a,#':
      00138C CD 01 C4         [ 4] 3862 80$: call putc 
      00138F 1E 03            [ 2] 3863 	ldw x,(XSAVE,sp)
      001391 CC 12 76         [ 2] 3864 	jp 1$ 
      001394                       3865 90$: 
      001394 A6 0D            [ 1] 3866 	ld a,#CR 
      001396 CD 01 C4         [ 4] 3867 	call putc
      001399 7B 02            [ 1] 3868 	ld a,(WIDTH_SAV,sp) 
      00139B C7 00 26         [ 1] 3869 	ld tab_width,a 
      00139E 7B 01            [ 1] 3870 	ld a,(BASE_SAV,sp) 
      0013A0 C7 00 0A         [ 1] 3871 	ld base,a
      0013A3                       3872 	_drop VSIZE 
      0013A3 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013A5 81               [ 4] 3873 	ret 	
      0013A6 28 29 2C 23           3874 single_char: .byte '(',')',',','#'
      0013AA 2A 2F 25              3875 mul_char: .byte '*','/','%'
      0013AD 13 B9 13 BB 13 BD 13  3876 relop_str: .word gt,equal,ge,lt,le,ne 
             C0 13 C2 13 C5
      0013B9 3E 00                 3877 gt: .asciz ">"
      0013BB 3D 00                 3878 equal: .asciz "="
      0013BD 3E 3D 00              3879 ge: .asciz ">="
      0013C0 3C 00                 3880 lt: .asciz "<"
      0013C2 3C 3D 00              3881 le: .asciz "<="
      0013C5 3C 3E 00              3882 ne:  .asciz "<>"
                                   3883 
                                   3884 
                                   3885 ;---------------------------------
                                   3886 ; BASIC: PRINT|? arg_list 
                                   3887 ; print values from argument list
                                   3888 ;----------------------------------
                           000001  3889 	COMMA=1
                           000001  3890 	VSIZE=1
      0013C8                       3891 print:
      0013C8 4B 00            [ 1] 3892 push #0 ; local variable COMMA 
      0013CA                       3893 reset_comma:
      0013CA 0F 01            [ 1] 3894 	clr (COMMA,sp)
      0013CC                       3895 prt_loop:
      0013CC CD 08 10         [ 4] 3896 	call next_token
      0013CF A1 02            [ 1] 3897 	cp a,#CMD_END 
      0013D1 2B 55            [ 1] 3898 	jrmi print_exit ; colon or end of line 
      0013D3 A1 02            [ 1] 3899 	cp a,#TK_QSTR
      0013D5 27 12            [ 1] 3900 	jreq 1$
      0013D7 A1 03            [ 1] 3901 	cp a,#TK_CHAR 
      0013D9 27 13            [ 1] 3902 	jreq 2$ 
      0013DB A1 08            [ 1] 3903 	cp a,#TK_CFUNC 
      0013DD 27 15            [ 1] 3904 	jreq 3$
      0013DF A1 0D            [ 1] 3905 	cp a,#TK_COMMA 
      0013E1 27 18            [ 1] 3906 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0013E3 A1 0E            [ 1] 3907 	cp a,#TK_SHARP 
      0013E5 27 1B            [ 1] 3908 	jreq 5$
      0013E7 20 2B            [ 2] 3909 	jra 7$ 
      0013E9                       3910 1$:	; print string 
      0013E9 CD 01 D7         [ 4] 3911 	call puts
      0013EC 20 DC            [ 2] 3912 	jra reset_comma
      0013EE                       3913 2$:	; print character 
      0013EE 9F               [ 1] 3914 	ld a,xl 
      0013EF CD 01 C4         [ 4] 3915 	call putc 
      0013F2 20 D6            [ 2] 3916 	jra reset_comma 
      0013F4                       3917 3$: ; print character function value  	
      0013F4 FD               [ 4] 3918 	call (x)
      0013F5 9F               [ 1] 3919 	ld a,xl 
      0013F6 CD 01 C4         [ 4] 3920 	call putc
      0013F9 20 CF            [ 2] 3921 	jra reset_comma 
      0013FB                       3922 4$: ; set comma state 
      0013FB A6 FF            [ 1] 3923 	ld a,#255 
      0013FD 6B 01            [ 1] 3924 	ld (COMMA,sp),a  
      0013FF CC 13 CC         [ 2] 3925 	jp prt_loop   
      001402                       3926 5$: ; # character must be followed by an integer   
      001402 CD 08 10         [ 4] 3927 	call next_token
      001405 A1 04            [ 1] 3928 	cp a,#TK_INTGR 
      001407 27 03            [ 1] 3929 	jreq 6$
      001409 CC 07 5D         [ 2] 3930 	jp syntax_error 
      00140C                       3931 6$: ; set tab width
      00140C 9F               [ 1] 3932 	ld a,xl 
      00140D A4 0F            [ 1] 3933 	and a,#15 
      00140F C7 00 26         [ 1] 3934 	ld tab_width,a 
      001412 20 B6            [ 2] 3935 	jra reset_comma 
      001414                       3936 7$:	
      001414                       3937 	_unget_token
      001414 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001419 CD 10 2A         [ 4] 3938 	call relation 
      00141C A1 04            [ 1] 3939 	cp a,#TK_INTGR
      00141E 27 03            [ 1] 3940 	jreq 8$
      001420 CC 14 28         [ 2] 3941 	jp print_exit 
      001423 CD 08 A9         [ 4] 3942 8$: call print_int 
      001426 20 A2            [ 2] 3943 	jra reset_comma 
      001428                       3944 print_exit:
      001428 0D 01            [ 1] 3945 	tnz (COMMA,sp)
      00142A 26 05            [ 1] 3946 	jrne 9$
      00142C A6 0D            [ 1] 3947 	ld a,#CR 
      00142E CD 01 C4         [ 4] 3948     call putc 
      001431                       3949 9$:	_drop VSIZE 
      001431 5B 01            [ 2]    1     addw sp,#VSIZE 
      001433 81               [ 4] 3950 	ret 
                                   3951 
      001434                       3952 print_type: 
                                   3953 
                                   3954 ;----------------------
                                   3955 ; 'save_context' and
                                   3956 ; 'rest_context' must be 
                                   3957 ; called at the same 
                                   3958 ; call stack depth 
                                   3959 ; i.e. SP must have the 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3960 ; save value at  
                                   3961 ; entry point of both 
                                   3962 ; routine. 
                                   3963 ;---------------------
                           000004  3964 	CTXT_SIZE=4 ; size of saved data 
                                   3965 ;--------------------
                                   3966 ; save current BASIC
                                   3967 ; interpreter context 
                                   3968 ; on stack 
                                   3969 ;--------------------
      001434                       3970 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001434                       3971 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001434                       3972 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001434                       3973 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001434                       3974 save_context:
      001434 CE 00 04         [ 2] 3975 	ldw x,basicptr 
      001437 1F 03            [ 2] 3976 	ldw (BPTR,sp),x
      001439 C6 00 01         [ 1] 3977 	ld a,in 
      00143C 6B 05            [ 1] 3978 	ld (IN,sp),a
      00143E C6 00 03         [ 1] 3979 	ld a,count 
      001441 6B 06            [ 1] 3980 	ld (CNT,sp),a  
      001443 81               [ 4] 3981 	ret
                                   3982 
                                   3983 ;-----------------------
                                   3984 ; restore previously saved 
                                   3985 ; BASIC interpreter context 
                                   3986 ; from stack 
                                   3987 ;-------------------------
      001444                       3988 rest_context:
      001444 1E 03            [ 2] 3989 	ldw x,(BPTR,sp)
      001446 CF 00 04         [ 2] 3990 	ldw basicptr,x 
      001449 7B 05            [ 1] 3991 	ld a,(IN,sp)
      00144B C7 00 01         [ 1] 3992 	ld in,a
      00144E 7B 06            [ 1] 3993 	ld a,(CNT,sp)
      001450 C7 00 03         [ 1] 3994 	ld count,a  
      001453 81               [ 4] 3995 	ret
                                   3996 
                                   3997 ;------------------------------------------
                                   3998 ; BASIC: INPUT [string]var[,[string]var]
                                   3999 ; input value in variables 
                                   4000 ; [string] optionally can be used as prompt 
                                   4001 ;-----------------------------------------
                           000001  4002 	CX_BPTR=1
                           000003  4003 	CX_IN=3
                           000004  4004 	CX_CNT=4
                           000005  4005 	SKIP=5
                           000006  4006 	VAR_ADDR=6 
                           000007  4007 	VSIZE=7
      001454                       4008 input_var:
      001454                       4009 	_vars VSIZE 
      001454 52 07            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001456                       4010 input_loop:
      001456 0F 05            [ 1] 4011 	clr (SKIP,sp)
      001458 CD 08 10         [ 4] 4012 	call next_token 
      00145B A1 02            [ 1] 4013 	cp a,#TK_QSTR 
      00145D 26 08            [ 1] 4014 	jrne 1$ 
      00145F CD 01 D7         [ 4] 4015 	call puts 
      001462 03 05            [ 1] 4016 	cpl (SKIP,sp)
      001464 CD 08 10         [ 4] 4017 	call next_token 
      001467 A1 05            [ 1] 4018 1$: cp a,#TK_VAR  
      001469 27 03            [ 1] 4019 	jreq 2$ 
      00146B CC 07 5D         [ 2] 4020 	jp syntax_error
      00146E 1F 06            [ 2] 4021 2$:	ldw (VAR_ADDR,sp),x 
      001470 0D 05            [ 1] 4022 	tnz (SKIP,sp)
      001472 26 06            [ 1] 4023 	jrne 21$ 
      001474 AE 17 38         [ 2] 4024 	ldw x,#pad 
      001477 CD 01 D7         [ 4] 4025 	call puts   
      00147A                       4026 21$:
      00147A A6 3A            [ 1] 4027 	ld a,#':
      00147C CD 01 C4         [ 4] 4028 	call putc 
      00147F CD 14 34         [ 4] 4029 	call save_context 
      001482 72 5F 00 03      [ 1] 4030 	clr count  
      001486 CD 09 D3         [ 4] 4031 	call readln 
      001489 AE 16 E8         [ 2] 4032 	ldw x,#tib 
      00148C 72 5F 00 01      [ 1] 4033 	clr in 
      001490 CD 0B 52         [ 4] 4034 	call get_token
      001493 A1 04            [ 1] 4035 	cp a,#TK_INTGR
      001495 27 06            [ 1] 4036 	jreq 3$ 
      001497 CD 14 44         [ 4] 4037 	call rest_context 
      00149A CC 07 5D         [ 2] 4038 	jp syntax_error
      00149D 16 06            [ 2] 4039 3$: ldw y,(VAR_ADDR,sp) 
      00149F 90 FF            [ 2] 4040 	ldw (y),x 
      0014A1 CD 14 44         [ 4] 4041 	call rest_context
      0014A4 CD 08 10         [ 4] 4042 	call next_token 
      0014A7 A1 0D            [ 1] 4043 	cp a,#TK_COMMA 
      0014A9 27 AB            [ 1] 4044 	jreq input_loop 
      0014AB A1 01            [ 1] 4045 	cp a,#TK_COLON 
      0014AD 23 03            [ 2] 4046     jrule input_exit 
      0014AF CC 07 5D         [ 2] 4047 	jp syntax_error 
      0014B2                       4048 input_exit:
      0014B2                       4049 	_drop VSIZE 
      0014B2 5B 07            [ 2]    1     addw sp,#VSIZE 
      0014B4 81               [ 4] 4050 	ret 
                                   4051 
                                   4052 
                                   4053 ;---------------------
                                   4054 ; BASIC: REMARK | ' 
                                   4055 ; skip comment to end of line 
                                   4056 ;---------------------- 
      0014B5                       4057 remark:
      0014B5 55 00 03 00 01   [ 1] 4058 	mov in,count 
      0014BA 81               [ 4] 4059  	ret 
                                   4060 
                                   4061 
                                   4062 ;---------------------
                                   4063 ; BASIC: WAIT addr,mask[,xor_mask] 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4064 ; read in loop 'addr'  
                                   4065 ; apply & 'mask' to value 
                                   4066 ; loop while result==0.  
                                   4067 ; if 'xor_mask' given 
                                   4068 ; apply ^ in second  
                                   4069 ; loop while result==0 
                                   4070 ;---------------------
                           000001  4071 	XMASK=1 
                           000002  4072 	MASK=2
                           000003  4073 	ADDR=3
                           000004  4074 	VSIZE=4
      0014BB                       4075 wait: 
      0014BB                       4076 	_vars VSIZE
      0014BB 52 04            [ 2]    1     sub sp,#VSIZE 
      0014BD 0F 01            [ 1] 4077 	clr (XMASK,sp) 
      0014BF CD 0E DA         [ 4] 4078 	call arg_list 
      0014C2 A1 02            [ 1] 4079 	cp a,#2
      0014C4 24 03            [ 1] 4080 	jruge 0$
      0014C6 CC 07 5D         [ 2] 4081 	jp syntax_error 
      0014C9 A1 03            [ 1] 4082 0$:	cp a,#3
      0014CB 25 04            [ 1] 4083 	jrult 1$
      0014CD 85               [ 2] 4084 	popw x 
      0014CE 9F               [ 1] 4085 	ld a,xl
      0014CF 6B 01            [ 1] 4086 	ld (XMASK,sp),a 
      0014D1 85               [ 2] 4087 1$: popw x ; mask 
      0014D2 9F               [ 1] 4088 	ld a,xl 
      0014D3 6B 02            [ 1] 4089 	ld (MASK,sp),a 
      0014D5 85               [ 2] 4090 	popw x ; address 
      0014D6 F6               [ 1] 4091 2$:	ld a,(x)
      0014D7 14 02            [ 1] 4092 	and a,(MASK,sp)
      0014D9 18 01            [ 1] 4093 	xor a,(XMASK,sp)
      0014DB 27 F9            [ 1] 4094 	jreq 2$ 
      0014DD                       4095 	_drop VSIZE 
      0014DD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014DF 81               [ 4] 4096 	ret 
                                   4097 
                                   4098 ;---------------------
                                   4099 ; BASIC: BSET addr,mask
                                   4100 ; set bits at 'addr' corresponding 
                                   4101 ; to those of 'mask' that are at 1.
                                   4102 ; arguments:
                                   4103 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4104 ;   mask        mask|addr
                                   4105 ; output:
                                   4106 ;	none 
                                   4107 ;--------------------------
      0014E0                       4108 bit_set:
      0014E0 CD 0E DA         [ 4] 4109 	call arg_list 
      0014E3 A1 02            [ 1] 4110 	cp a,#2	 
      0014E5 27 03            [ 1] 4111 	jreq 1$ 
      0014E7 CC 07 5D         [ 2] 4112 	jp syntax_error
      0014EA                       4113 1$: 
      0014EA 85               [ 2] 4114 	popw x ; mask 
      0014EB 9F               [ 1] 4115 	ld a,xl 
      0014EC 85               [ 2] 4116 	popw x ; addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0014ED FA               [ 1] 4117 	or a,(x)
      0014EE F7               [ 1] 4118 	ld (x),a
      0014EF 81               [ 4] 4119 	ret 
                                   4120 
                                   4121 ;---------------------
                                   4122 ; BASIC: BRES addr,mask
                                   4123 ; reset bits at 'addr' corresponding 
                                   4124 ; to those of 'mask' that are at 1.
                                   4125 ; arguments:
                                   4126 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4127 ;   mask	    ~mask&*addr  
                                   4128 ; output:
                                   4129 ;	none 
                                   4130 ;--------------------------
      0014F0                       4131 bit_reset:
      0014F0 CD 0E DA         [ 4] 4132 	call arg_list 
      0014F3 A1 02            [ 1] 4133 	cp a,#2  
      0014F5 27 03            [ 1] 4134 	jreq 1$ 
      0014F7 CC 07 5D         [ 2] 4135 	jp syntax_error
      0014FA                       4136 1$: 
      0014FA 85               [ 2] 4137 	popw x ; mask 
      0014FB 9F               [ 1] 4138 	ld a,xl 
      0014FC 43               [ 1] 4139 	cpl a 
      0014FD 85               [ 2] 4140 	popw x ; addr  
      0014FE F4               [ 1] 4141 	and a,(x)
      0014FF F7               [ 1] 4142 	ld (x),a 
      001500 81               [ 4] 4143 	ret 
                                   4144 
                                   4145 ;---------------------
                                   4146 ; BASIC: BTOGL addr,mask
                                   4147 ; toggle bits at 'addr' corresponding 
                                   4148 ; to those of 'mask' that are at 1.
                                   4149 ; arguments:
                                   4150 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4151 ;   mask	    mask^*addr  
                                   4152 ; output:
                                   4153 ;	none 
                                   4154 ;--------------------------
      001501                       4155 bit_toggle:
      001501 CD 0E DA         [ 4] 4156 	call arg_list 
      001504 A1 02            [ 1] 4157 	cp a,#2 
      001506 27 03            [ 1] 4158 	jreq 1$ 
      001508 CC 07 5D         [ 2] 4159 	jp syntax_error
      00150B 85               [ 2] 4160 1$: popw x ; mask 
      00150C 9F               [ 1] 4161 	ld a,xl 
      00150D 85               [ 2] 4162 	popw x ; addr  
      00150E F8               [ 1] 4163 	xor a,(x)
      00150F F7               [ 1] 4164 	ld (x),a 
      001510 81               [ 4] 4165 	ret 
                                   4166 
                                   4167 
                                   4168 ;---------------------
                                   4169 ; BASIC: BTEST(addr,bit)
                                   4170 ; return bit value at 'addr' 
                                   4171 ; bit is in range {0..7}.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4172 ; arguments:
                                   4173 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4174 ;   bit 	    bit position {0..7}  
                                   4175 ; output:
                                   4176 ;	none 
                                   4177 ;--------------------------
      001511                       4178 bit_test:
      001511 CD 0F 01         [ 4] 4179 	call func_args 
      001514 A1 02            [ 1] 4180 	cp a,#2
      001516 27 03            [ 1] 4181 	jreq 0$
      001518 CC 07 5D         [ 2] 4182 	jp syntax_error
      00151B                       4183 0$:	
      00151B 85               [ 2] 4184 	popw x 
      00151C 9F               [ 1] 4185 	ld a,xl 
      00151D A4 07            [ 1] 4186 	and a,#7
      00151F 88               [ 1] 4187 	push a   
      001520 A6 01            [ 1] 4188 	ld a,#1 
      001522 0D 01            [ 1] 4189 1$: tnz (1,sp)
      001524 27 05            [ 1] 4190 	jreq 2$
      001526 48               [ 1] 4191 	sll a 
      001527 0A 01            [ 1] 4192 	dec (1,sp)
      001529 20 F7            [ 2] 4193 	jra 1$
      00152B                       4194 2$: _drop 1 
      00152B 5B 01            [ 2]    1     addw sp,#1 
      00152D 85               [ 2] 4195 	popw x 
      00152E F4               [ 1] 4196 	and a,(x)
      00152F 27 02            [ 1] 4197 	jreq 3$
      001531 A6 01            [ 1] 4198 	ld a,#1 
      001533 5F               [ 1] 4199 3$:	clrw x 
      001534 97               [ 1] 4200 	ld xl,a 
      001535 A6 04            [ 1] 4201 	ld a,#TK_INTGR
      001537 81               [ 4] 4202 	ret
                                   4203 
                                   4204 
                                   4205 ;--------------------
                                   4206 ; BASIC: POKE addr,byte
                                   4207 ; put a byte at addr 
                                   4208 ;--------------------
      001538                       4209 poke:
      001538 CD 0E DA         [ 4] 4210 	call arg_list 
      00153B A1 02            [ 1] 4211 	cp a,#2
      00153D 27 03            [ 1] 4212 	jreq 1$
      00153F CC 07 5D         [ 2] 4213 	jp syntax_error
      001542                       4214 1$:	
      001542 85               [ 2] 4215 	popw x  
      001543 9F               [ 1] 4216     ld a,xl 
      001544 85               [ 2] 4217 	popw x 
      001545 F7               [ 1] 4218 	ld (x),a 
      001546 81               [ 4] 4219 	ret 
                                   4220 
                                   4221 ;-----------------------
                                   4222 ; BASIC: PEEK(addr)
                                   4223 ; get the byte at addr 
                                   4224 ; input:
                                   4225 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4226 ; output:
                                   4227 ;	X 		value 
                                   4228 ;-----------------------
      001547                       4229 peek:
      001547 CD 0F 01         [ 4] 4230 	call func_args
      00154A A1 01            [ 1] 4231 	cp a,#1
      00154C 27 03            [ 1] 4232 	jreq 1$
      00154E CC 07 5D         [ 2] 4233 	jp syntax_error
      001551 85               [ 2] 4234 1$:	popw x 
      001552 F6               [ 1] 4235 	ld a,(x)
      001553 5F               [ 1] 4236 	clrw x 
      001554 97               [ 1] 4237 	ld xl,a 
      001555 A6 04            [ 1] 4238 	ld a,#TK_INTGR
      001557 81               [ 4] 4239 	ret 
                                   4240 
                                   4241 ;----------------------------
                                   4242 ; BASIC: XPEEK(page,addr)
                                   4243 ; read extended memory byte
                                   4244 ; page in range {0,1,2}
                                   4245 ;----------------------------
      001558                       4246 xpeek:
      001558 CD 0F 01         [ 4] 4247 	call func_args 
      00155B A1 02            [ 1] 4248 	cp a,#2 
      00155D 27 03            [ 1] 4249 	jreq 1$
      00155F CC 07 5D         [ 2] 4250 	jp syntax_error
      001562                       4251 1$: 
      001562 85               [ 2] 4252 	popw x  
      001563 CF 00 19         [ 2] 4253 	ldw farptr+1,x 
      001566 85               [ 2] 4254 	popw x 
      001567 9F               [ 1] 4255 	ld a,xl 
      001568 C7 00 18         [ 1] 4256 	ld farptr,a 
      00156B 5F               [ 1] 4257 	clrw x
      00156C 92 BC 00 18      [ 5] 4258 	ldf a,[farptr]
      001570 97               [ 1] 4259 	ld xl,a 
      001571 A6 04            [ 1] 4260 	ld a,#TK_INTGR 
      001573 81               [ 4] 4261 	ret 
                                   4262 
                                   4263 ;---------------------------
                                   4264 ; BASIC IF expr : instructions
                                   4265 ; evaluate expr and if true 
                                   4266 ; execute instructions on same line. 
                                   4267 ;----------------------------
      001574                       4268 if: 
      001574 CD 10 2A         [ 4] 4269 	call relation 
      001577 A1 04            [ 1] 4270 	cp a,#TK_INTGR
      001579 27 03            [ 1] 4271 	jreq 1$ 
      00157B CC 07 5D         [ 2] 4272 	jp syntax_error
      00157E 4F               [ 1] 4273 1$:	clr a 
      00157F 5D               [ 2] 4274 	tnzw x 
      001580 26 05            [ 1] 4275 	jrne 9$  
                                   4276 ;skip to next line
      001582 55 00 03 00 01   [ 1] 4277 	mov in,count
      001587 81               [ 4] 4278 9$:	ret 
                                   4279 
                                   4280 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4281 ; BASIC: FOR var=expr 
                                   4282 ; set variable to expression 
                                   4283 ; leave variable address 
                                   4284 ; on stack and set
                                   4285 ; FLOOP bit in 'flags'
                                   4286 ;-----------------
                           000001  4287 	RETL1=1 ; return address  
                           000003  4288 	FSTEP=3  ; variable increment
                           000005  4289 	LIMIT=5 ; loop limit 
                           000007  4290 	CVAR=7   ; control variable 
                           000009  4291 	INW=9   ;  in.w saved
                           00000B  4292 	BPTR=11 ; baseptr saved
                           00000A  4293 	VSIZE=10  
      001588                       4294 for: ; { -- var_addr }
      001588 85               [ 2] 4295 	popw x ; call return address 
      001589                       4296 	_vars VSIZE 
      001589 52 0A            [ 2]    1     sub sp,#VSIZE 
      00158B 89               [ 2] 4297 	pushw x  ; RETL1 
      00158C A6 05            [ 1] 4298 	ld a,#TK_VAR 
      00158E CD 0E CD         [ 4] 4299 	call expect
      001591 1F 07            [ 2] 4300 	ldw (CVAR,sp),x  ; control variable 
      001593 CD 11 6A         [ 4] 4301 	call let_var 
      001596 72 14 00 25      [ 1] 4302 	bset flags,#FLOOP 
                                   4303 ; open space on stack for loop data 
      00159A 5F               [ 1] 4304 	clrw x 
      00159B 1F 0B            [ 2] 4305 	ldw (BPTR,sp),x 
      00159D 1F 09            [ 2] 4306 	ldw (INW,sp),x 
      00159F CD 08 10         [ 4] 4307 	call next_token 
      0015A2 A1 06            [ 1] 4308 	cp a,#TK_CMD 
      0015A4 27 03            [ 1] 4309 	jreq 1$
      0015A6 CC 07 5D         [ 2] 4310 	jp syntax_error
      0015A9                       4311 1$:  
      0015A9 A3 15 B1         [ 2] 4312 	cpw x,#to 
      0015AC 27 03            [ 1] 4313 	jreq to
      0015AE CC 07 5D         [ 2] 4314 	jp syntax_error 
                                   4315 
                                   4316 ;-----------------------------------
                                   4317 ; BASIC: TO expr 
                                   4318 ; second part of FOR loop initilization
                                   4319 ; leave limit on stack and set 
                                   4320 ; FTO bit in 'flags'
                                   4321 ;-----------------------------------
      0015B1                       4322 to: ; { var_addr -- var_addr limit step }
      0015B1 72 04 00 25 03   [ 2] 4323 	btjt flags,#FLOOP,1$
      0015B6 CC 07 5D         [ 2] 4324 	jp syntax_error
      0015B9 CD 10 2A         [ 4] 4325 1$: call relation  
      0015BC A1 04            [ 1] 4326 	cp a,#TK_INTGR 
      0015BE 27 03            [ 1] 4327 	jreq 2$ 
      0015C0 CC 07 5D         [ 2] 4328 	jp syntax_error
      0015C3 1F 05            [ 2] 4329 2$: ldw (LIMIT,sp),x
                                   4330 ;	ldw x,in.w 
      0015C5 CD 08 10         [ 4] 4331 	call next_token
      0015C8 A1 00            [ 1] 4332 	cp a,#TK_NONE  
      0015CA 27 0E            [ 1] 4333 	jreq 4$ 
      0015CC A1 06            [ 1] 4334 	cp a,#TK_CMD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0015CE 26 05            [ 1] 4335 	jrne 3$
      0015D0 A3 15 E1         [ 2] 4336 	cpw x,#step 
      0015D3 27 0C            [ 1] 4337 	jreq step
      0015D5                       4338 3$:	
      0015D5                       4339 	_unget_token   	 
      0015D5 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0015DA                       4340 4$:	
      0015DA AE 00 01         [ 2] 4341 	ldw x,#1   ; default step  
      0015DD 1F 03            [ 2] 4342 	ldw (FSTEP,sp),x 
      0015DF 20 14            [ 2] 4343 	jra store_loop_addr 
                                   4344 
                                   4345 
                                   4346 ;----------------------------------
                                   4347 ; BASIC: STEP expr 
                                   4348 ; optional third par of FOR loop
                                   4349 ; initialization. 	
                                   4350 ;------------------------------------
      0015E1                       4351 step: ; {var limit -- var limit step}
      0015E1 72 04 00 25 03   [ 2] 4352 	btjt flags,#FLOOP,1$
      0015E6 CC 07 5D         [ 2] 4353 	jp syntax_error
      0015E9 CD 10 2A         [ 4] 4354 1$: call relation
      0015EC A1 04            [ 1] 4355 	cp a,#TK_INTGR
      0015EE 27 03            [ 1] 4356 	jreq 2$
      0015F0 CC 07 5D         [ 2] 4357 	jp syntax_error
      0015F3 1F 03            [ 2] 4358 2$:	ldw (FSTEP,sp),x ; step
                                   4359 ; leave loop back entry point on cstack 
                                   4360 ; cstack is 1 call deep from interpreter
      0015F5                       4361 store_loop_addr:
      0015F5 CE 00 04         [ 2] 4362 	ldw x,basicptr  
      0015F8 1F 0B            [ 2] 4363 	ldw (BPTR,sp),x 
      0015FA CE 00 00         [ 2] 4364 	ldw x,in.w 
      0015FD 1F 09            [ 2] 4365 	ldw (INW,sp),x   
      0015FF 72 15 00 25      [ 1] 4366 	bres flags,#FLOOP 
      001603 72 5C 00 22      [ 1] 4367 	inc loop_depth  
      001607 81               [ 4] 4368 	ret 
                                   4369 
                                   4370 ;--------------------------------
                                   4371 ; BASIC: NEXT var 
                                   4372 ; FOR loop control 
                                   4373 ; increment variable with step 
                                   4374 ; and compare with limit 
                                   4375 ; loop if threshold not crossed.
                                   4376 ; else stack. 
                                   4377 ; and decrement 'loop_depth' 
                                   4378 ;--------------------------------
      001608                       4379 next: ; {var limit step retl1 -- [var limit step ] }
      001608 72 5D 00 22      [ 1] 4380 	tnz loop_depth 
      00160C 26 03            [ 1] 4381 	jrne 1$ 
      00160E CC 07 5D         [ 2] 4382 	jp syntax_error 
      001611                       4383 1$: 
      001611 A6 05            [ 1] 4384 	ld a,#TK_VAR 
      001613 CD 0E CD         [ 4] 4385 	call expect
                                   4386 ; check for good variable after NEXT 	 
      001616 13 07            [ 2] 4387 	cpw x,(CVAR,sp)
      001618 27 03            [ 1] 4388 	jreq 2$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00161A CC 07 5D         [ 2] 4389 	jp syntax_error ; not the good one 
      00161D                       4390 2$: ; increment variable 
      00161D FE               [ 2] 4391 	ldw x,(x)  ; get var value 
      00161E 72 FB 03         [ 2] 4392 	addw x,(FSTEP,sp) ; var+step 
      001621 16 07            [ 2] 4393 	ldw y,(CVAR,sp)
      001623 90 FF            [ 2] 4394 	ldw (y),x ; save var new value 
                                   4395 ; check sign of STEP  
      001625 A6 80            [ 1] 4396 	ld a,#0x80
      001627 15 03            [ 1] 4397 	bcp a,(FSTEP,sp)
      001629 2A 06            [ 1] 4398 	jrpl 4$
                                   4399 ;negative step 
      00162B 13 05            [ 2] 4400 	cpw x,(LIMIT,sp)
      00162D 2F 1B            [ 1] 4401 	jrslt loop_done
      00162F 20 04            [ 2] 4402 	jra loop_back 
      001631                       4403 4$: ; positive step
      001631 13 05            [ 2] 4404 	cpw x,(LIMIT,sp)
      001633 2C 15            [ 1] 4405 	jrsgt loop_done
      001635                       4406 loop_back:
      001635 1E 0B            [ 2] 4407 	ldw x,(BPTR,sp)
      001637 CF 00 04         [ 2] 4408 	ldw basicptr,x 
      00163A 72 01 00 25 05   [ 2] 4409 	btjf flags,#FRUN,1$ 
      00163F E6 02            [ 1] 4410 	ld a,(2,x)
      001641 C7 00 03         [ 1] 4411 	ld count,a
      001644 1E 09            [ 2] 4412 1$:	ldw x,(INW,sp)
      001646 CF 00 00         [ 2] 4413 	ldw in.w,x 
      001649 81               [ 4] 4414 	ret 
      00164A                       4415 loop_done:
                                   4416 	; remove loop data from stack  
      00164A 85               [ 2] 4417 	popw x
      00164B                       4418 	_drop VSIZE 
      00164B 5B 0A            [ 2]    1     addw sp,#VSIZE 
      00164D 72 5A 00 22      [ 1] 4419 	dec loop_depth 
                                   4420 ;	pushw x 
                                   4421 ;	ret 
      001651 FC               [ 2] 4422 	jp (x)
                                   4423 
                                   4424 ;----------------------------
                                   4425 ; called by goto/gosub
                                   4426 ; to get target line number 
                                   4427 ;---------------------------
      001652                       4428 get_target_line:
      001652 CD 10 2A         [ 4] 4429 	call relation 
      001655 A1 04            [ 1] 4430 	cp a,#TK_INTGR
      001657 27 03            [ 1] 4431 	jreq 1$
      001659 CC 07 5D         [ 2] 4432 	jp syntax_error
      00165C CD 02 79         [ 4] 4433 1$:	call search_lineno  
      00165F 5D               [ 2] 4434 	tnzw x 
      001660 26 05            [ 1] 4435 	jrne 2$ 
      001662 A6 05            [ 1] 4436 	ld a,#ERR_NO_LINE 
      001664 CC 07 5F         [ 2] 4437 	jp tb_error 
      001667 81               [ 4] 4438 2$:	ret 
                                   4439 
                                   4440 ;------------------------
                                   4441 ; BASIC: GOTO line# 
                                   4442 ; jump to line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4443 ; here cstack is 2 call deep from interpreter 
                                   4444 ;------------------------
      001668                       4445 goto:
      001668 72 00 00 25 06   [ 2] 4446 	btjt flags,#FRUN,0$ 
      00166D A6 06            [ 1] 4447 	ld a,#ERR_RUN_ONLY
      00166F CC 07 5F         [ 2] 4448 	jp tb_error 
      001672 81               [ 4] 4449 	ret 
      001673 CD 16 52         [ 4] 4450 0$:	call get_target_line
      001676                       4451 jp_to_target:
      001676 CF 00 04         [ 2] 4452 	ldw basicptr,x 
      001679 E6 02            [ 1] 4453 	ld a,(2,x)
      00167B C7 00 03         [ 1] 4454 	ld count,a 
      00167E 35 03 00 01      [ 1] 4455 	mov in,#3 
      001682 81               [ 4] 4456 	ret 
                                   4457 
                                   4458 
                                   4459 ;--------------------
                                   4460 ; BASIC: GOSUB line#
                                   4461 ; basic subroutine call
                                   4462 ; actual line# and basicptr 
                                   4463 ; are saved on cstack
                                   4464 ; here cstack is 2 call deep from interpreter 
                                   4465 ;--------------------
                           000003  4466 	RET_ADDR=3
                           000005  4467 	RET_INW=5
                           000004  4468 	VSIZE=4  
      001683                       4469 gosub:
      001683 72 00 00 25 06   [ 2] 4470 	btjt flags,#FRUN,0$ 
      001688 A6 06            [ 1] 4471 	ld a,#ERR_RUN_ONLY
      00168A CC 07 5F         [ 2] 4472 	jp tb_error 
      00168D 81               [ 4] 4473 	ret 
      00168E 85               [ 2] 4474 0$:	popw x 
      00168F                       4475 	_vars VSIZE  
      00168F 52 04            [ 2]    1     sub sp,#VSIZE 
      001691 89               [ 2] 4476 	pushw x 
      001692 CE 00 04         [ 2] 4477 	ldw x,basicptr
      001695 1F 03            [ 2] 4478 	ldw (RET_ADDR,sp),x 
      001697 CD 16 52         [ 4] 4479 	call get_target_line  
      00169A 89               [ 2] 4480 	pushw x 
      00169B CE 00 00         [ 2] 4481 	ldw x,in.w 
      00169E 1F 07            [ 2] 4482 	ldw (RET_INW+2,sp),x
      0016A0 85               [ 2] 4483 	popw x 
      0016A1 20 D3            [ 2] 4484 	jra jp_to_target
                                   4485 
                                   4486 ;------------------------
                                   4487 ; BASIC: RETURN 
                                   4488 ; exit from a subroutine 
                                   4489 ; 
                                   4490 ;------------------------
      0016A3                       4491 return:
      0016A3 72 00 00 25 05   [ 2] 4492 	btjt flags,#FRUN,0$ 
      0016A8 A6 06            [ 1] 4493 	ld a,#ERR_RUN_ONLY
      0016AA CC 07 5F         [ 2] 4494 	jp tb_error 
      0016AD                       4495 0$:	
      0016AD 1E 03            [ 2] 4496 	ldw x,(RET_ADDR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0016AF CF 00 04         [ 2] 4497 	ldw basicptr,x
      0016B2 E6 02            [ 1] 4498 	ld a,(2,x)
      0016B4 C7 00 03         [ 1] 4499 	ld count,a  
      0016B7 1E 05            [ 2] 4500 	ldw x,(RET_INW,sp)
      0016B9 CF 00 00         [ 2] 4501 	ldw in.w,x 
      0016BC 85               [ 2] 4502 	popw x 
      0016BD                       4503 	_drop VSIZE 
      0016BD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016BF 89               [ 2] 4504 	pushw x
      0016C0 81               [ 4] 4505 	ret  
                                   4506 
                                   4507 
                                   4508 ;----------------------------------
                                   4509 ; BASIC: RUN
                                   4510 ; run BASIC program in RAM
                                   4511 ;----------------------------------- 
      0016C1                       4512 run: 
      0016C1 72 01 00 25 02   [ 2] 4513 	btjf flags,#FRUN,0$  
      0016C6 4F               [ 1] 4514 	clr a 
      0016C7 81               [ 4] 4515 	ret
      0016C8                       4516 0$: 
      0016C8 72 09 00 25 12   [ 2] 4517 	btjf flags,#FBREAK,1$
      0016CD                       4518 	_drop 2 
      0016CD 5B 02            [ 2]    1     addw sp,#2 
      0016CF CD 14 44         [ 4] 4519 	call rest_context
      0016D2                       4520 	_drop CTXT_SIZE 
      0016D2 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0016D4 72 19 00 25      [ 1] 4521 	bres flags,#FBREAK 
      0016D8 72 10 00 25      [ 1] 4522 	bset flags,#FRUN 
      0016DC CC 07 C5         [ 2] 4523 	jp interpreter 
      0016DF CE 00 1E         [ 2] 4524 1$:	ldw x,txtbgn
      0016E2 C3 00 20         [ 2] 4525 	cpw x,txtend 
      0016E5 2B 05            [ 1] 4526 	jrmi run_it 
      0016E7 A6 0D            [ 1] 4527 	ld a,#ERR_NO_PROG
      0016E9 CC 07 5F         [ 2] 4528 	jp tb_error
                                   4529 
      0016EC                       4530 run_it:	 
      0016EC CD 11 37         [ 4] 4531     call ubound 
      0016EF                       4532 	_drop 2 ; drop return address 
      0016EF 5B 02            [ 2]    1     addw sp,#2 
                                   4533 ; clear data pointer 
      0016F1 5F               [ 1] 4534 	clrw x 
      0016F2 CF 00 06         [ 2] 4535 	ldw data_ptr,x 
      0016F5 72 5F 00 08      [ 1] 4536 	clr data_ofs 
      0016F9 72 5F 00 09      [ 1] 4537 	clr data_len 
                                   4538 ; initialize BASIC pointer 
      0016FD CE 00 1E         [ 2] 4539 	ldw x,txtbgn 
      001700 CF 00 04         [ 2] 4540 	ldw basicptr,x 
      001703 E6 02            [ 1] 4541 	ld a,(2,x)
      001705 C7 00 03         [ 1] 4542 	ld count,a
      001708 35 03 00 01      [ 1] 4543 	mov in,#3	
      00170C 72 10 00 25      [ 1] 4544 	bset flags,#FRUN 
      001710 CC 07 C5         [ 2] 4545 	jp interpreter 
                                   4546 
                                   4547 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4548 ;----------------------
                                   4549 ; BASIC: END
                                   4550 ; end running program
                                   4551 ;---------------------- 
      001713                       4552 cmd_end: 
                                   4553 ; clean stack 
      001713 AE 17 FF         [ 2] 4554 	ldw x,#STACK_EMPTY
      001716 94               [ 1] 4555 	ldw sp,x 
      001717 CC 07 A8         [ 2] 4556 	jp warm_start
                                   4557 
                                   4558 
                                   4559 ;-----------------------
                                   4560 ; BASIC: TONE expr1,expr2
                                   4561 ; used TIMER2 channel 1
                                   4562 ; to produce a tone 
                                   4563 ; arguments:
                                   4564 ;    expr1   frequency 
                                   4565 ;    expr2   duration msec.
                                   4566 ;---------------------------
      00171A                       4567 tone:
      00171A CD 0E DA         [ 4] 4568 	call arg_list 
      00171D A1 02            [ 1] 4569 	cp a,#2 
      00171F 27 03            [ 1] 4570 	jreq 1$
      001721 CC 07 5D         [ 2] 4571 	jp syntax_error 
      001724                       4572 1$: 
      001724 85               [ 2] 4573 	popw x ; duration
      001725 90 85            [ 2] 4574 	popw y ; frequency 
      001727                       4575 beep:  
      001727 89               [ 2] 4576 	pushw x 
      001728 AE F4 24         [ 2] 4577 	ldw x,#TIM2_CLK_FREQ
      00172B 65               [ 2] 4578 	divw x,y 
                                   4579 ; round to nearest integer 
      00172C 90 A3 7A 12      [ 2] 4580 	cpw y,#TIM2_CLK_FREQ/2
      001730 2B 01            [ 1] 4581 	jrmi 2$
      001732 5C               [ 2] 4582 	incw x 
      001733                       4583 2$:	 
      001733 9E               [ 1] 4584 	ld a,xh 
      001734 C7 53 0D         [ 1] 4585 	ld TIM2_ARRH,a 
      001737 9F               [ 1] 4586 	ld a,xl 
      001738 C7 53 0E         [ 1] 4587 	ld TIM2_ARRL,a 
                                   4588 ; 50% duty cycle 
      00173B 8C               [ 1] 4589 	ccf 
      00173C 56               [ 2] 4590 	rrcw x 
      00173D 9E               [ 1] 4591 	ld a,xh 
      00173E C7 53 0F         [ 1] 4592 	ld TIM2_CCR1H,a 
      001741 9F               [ 1] 4593 	ld a,xl
      001742 C7 53 10         [ 1] 4594 	ld TIM2_CCR1L,a
      001745 72 10 53 08      [ 1] 4595 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001749 72 10 53 00      [ 1] 4596 	bset TIM2_CR1,#TIM2_CR1_CEN
      00174D 72 10 53 04      [ 1] 4597 	bset TIM2_EGR,#TIM2_EGR_UG
      001751 85               [ 2] 4598 	popw x 
      001752 CF 00 12         [ 2] 4599 	ldw timer,x 
      001755 CE 00 12         [ 2] 4600 3$: ldw x,timer 	
      001758 26 FB            [ 1] 4601 	jrne 3$ 
      00175A 72 11 53 08      [ 1] 4602 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00175E 72 11 53 00      [ 1] 4603 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001762 81               [ 4] 4604 	ret 
                                   4605 
                                   4606 ;-------------------------------
                                   4607 ; BASIC: ADCON 0|1 [,divisor]  
                                   4608 ; disable/enanble ADC 
                                   4609 ;-------------------------------
                           000003  4610 	ONOFF=3 
                           000001  4611 	DIVSOR=1
                           000004  4612 	VSIZE=4 
      001763                       4613 power_adc:
      001763 CD 0E DA         [ 4] 4614 	call arg_list 
      001766 A1 02            [ 1] 4615 	cp a,#2	
      001768 27 0B            [ 1] 4616 	jreq 1$
      00176A A1 01            [ 1] 4617 	cp a,#1 
      00176C 27 03            [ 1] 4618 	jreq 0$ 
      00176E CC 07 5D         [ 2] 4619 	jp syntax_error 
      001771 AE 00 00         [ 2] 4620 0$: ldw x,#0
      001774 89               [ 2] 4621 	pushw x  ; divisor 
      001775 1E 03            [ 2] 4622 1$: ldw x,(ONOFF,sp)
      001777 5D               [ 2] 4623 	tnzw x 
      001778 27 1A            [ 1] 4624 	jreq 2$ 
      00177A 1E 01            [ 2] 4625 	ldw x,(DIVSOR,sp) ; divisor 
      00177C 9F               [ 1] 4626 	ld a,xl
      00177D A4 07            [ 1] 4627 	and a,#7
      00177F 4E               [ 1] 4628 	swap a 
      001780 C7 54 01         [ 1] 4629 	ld ADC_CR1,a
      001783 72 16 50 CA      [ 1] 4630 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001787 72 10 54 01      [ 1] 4631 	bset ADC_CR1,#ADC_CR1_ADON 
      00178B                       4632 	_usec_dly 7 
      00178B AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00178E 5A               [ 2]    2     decw x
      00178F 9D               [ 1]    3     nop 
      001790 26 FA            [ 1]    4     jrne .-4
      001792 20 08            [ 2] 4633 	jra 3$
      001794 72 11 54 01      [ 1] 4634 2$: bres ADC_CR1,#ADC_CR1_ADON
      001798 72 17 50 CA      [ 1] 4635 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00179C                       4636 3$:	_drop VSIZE 
      00179C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00179E 81               [ 4] 4637 	ret
                                   4638 
                                   4639 ;-----------------------------
                                   4640 ; BASIC: ADCREAD (channel)
                                   4641 ; read adc channel {0..5}
                                   4642 ; output:
                                   4643 ;   A 		TK_INTGR 
                                   4644 ;   X 		value 
                                   4645 ;-----------------------------
      00179F                       4646 analog_read:
      00179F CD 0F 01         [ 4] 4647 	call func_args 
      0017A2 A1 01            [ 1] 4648 	cp a,#1 
      0017A4 27 03            [ 1] 4649 	jreq 1$
      0017A6 CC 07 5D         [ 2] 4650 	jp syntax_error
      0017A9 85               [ 2] 4651 1$: popw x 
      0017AA A3 00 05         [ 2] 4652 	cpw x,#5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0017AD 23 05            [ 2] 4653 	jrule 2$
      0017AF A6 0A            [ 1] 4654 	ld a,#ERR_BAD_VALUE
      0017B1 CC 07 5F         [ 2] 4655 	jp tb_error 
      0017B4 9F               [ 1] 4656 2$: ld a,xl
      0017B5 C7 00 0D         [ 1] 4657 	ld acc8,a 
      0017B8 A6 05            [ 1] 4658 	ld a,#5
      0017BA C0 00 0D         [ 1] 4659 	sub a,acc8 
      0017BD C7 54 00         [ 1] 4660 	ld ADC_CSR,a
      0017C0 72 16 54 02      [ 1] 4661 	bset ADC_CR2,#ADC_CR2_ALIGN
      0017C4 72 10 54 01      [ 1] 4662 	bset ADC_CR1,#ADC_CR1_ADON
      0017C8 72 0F 54 00 FB   [ 2] 4663 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0017CD CE 54 04         [ 2] 4664 	ldw x,ADC_DRH
      0017D0 A6 04            [ 1] 4665 	ld a,#TK_INTGR
      0017D2 81               [ 4] 4666 	ret 
                                   4667 
                                   4668 ;-----------------------
                                   4669 ; BASIC: DREAD(pin)
                                   4670 ; Arduino pins 
                                   4671 ; read state of a digital pin 
                                   4672 ; pin# {0..15}
                                   4673 ; output:
                                   4674 ;    A 		TK_INTGR
                                   4675 ;    X      0|1 
                                   4676 ;-------------------------
                           000001  4677 	PINNO=1
                           000001  4678 	VSIZE=1
      0017D3                       4679 digital_read:
      0017D3                       4680 	_vars VSIZE 
      0017D3 52 01            [ 2]    1     sub sp,#VSIZE 
      0017D5 CD 0F 01         [ 4] 4681 	call func_args
      0017D8 A1 01            [ 1] 4682 	cp a,#1
      0017DA 27 03            [ 1] 4683 	jreq 1$
      0017DC CC 07 5D         [ 2] 4684 	jp syntax_error
      0017DF 85               [ 2] 4685 1$: popw x 
      0017E0 A3 00 0F         [ 2] 4686 	cpw x,#15 
      0017E3 23 05            [ 2] 4687 	jrule 2$
      0017E5 A6 0A            [ 1] 4688 	ld a,#ERR_BAD_VALUE
      0017E7 CC 07 5F         [ 2] 4689 	jp tb_error 
      0017EA CD 1D BD         [ 4] 4690 2$:	call select_pin 
      0017ED 6B 01            [ 1] 4691 	ld (PINNO,sp),a
      0017EF E6 01            [ 1] 4692 	ld a,(GPIO_IDR,x)
      0017F1 0D 01            [ 1] 4693 	tnz (PINNO,sp)
      0017F3 27 05            [ 1] 4694 	jreq 8$
      0017F5 44               [ 1] 4695 3$: srl a 
      0017F6 0A 01            [ 1] 4696 	dec (PINNO,sp)
      0017F8 26 FB            [ 1] 4697 	jrne 3$ 
      0017FA A4 01            [ 1] 4698 8$: and a,#1 
      0017FC 5F               [ 1] 4699 	clrw x 
      0017FD 97               [ 1] 4700 	ld xl,a 
      0017FE A6 04            [ 1] 4701 	ld a,#TK_INTGR
      001800                       4702 	_drop VSIZE
      001800 5B 01            [ 2]    1     addw sp,#VSIZE 
      001802 81               [ 4] 4703 	ret
                                   4704 
                                   4705 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4706 ; BASIC: DWRITE pin,0|1
                                   4707 ; Arduino pins 
                                   4708 ; write to a digital pin 
                                   4709 ; pin# {0..15}
                                   4710 ; output:
                                   4711 ;    A 		TK_INTGR
                                   4712 ;    X      0|1 
                                   4713 ;-------------------------
                           000001  4714 	PINNO=1
                           000002  4715 	PINVAL=2
                           000002  4716 	VSIZE=2
      001803                       4717 digital_write:
      001803                       4718 	_vars VSIZE 
      001803 52 02            [ 2]    1     sub sp,#VSIZE 
      001805 CD 0E DA         [ 4] 4719 	call arg_list  
      001808 A1 02            [ 1] 4720 	cp a,#2 
      00180A 27 03            [ 1] 4721 	jreq 1$
      00180C CC 07 5D         [ 2] 4722 	jp syntax_error
      00180F 85               [ 2] 4723 1$: popw x 
      001810 9F               [ 1] 4724 	ld a,xl 
      001811 6B 02            [ 1] 4725 	ld (PINVAL,sp),a
      001813 85               [ 2] 4726 	popw x 
      001814 A3 00 0F         [ 2] 4727 	cpw x,#15 
      001817 23 05            [ 2] 4728 	jrule 2$
      001819 A6 0A            [ 1] 4729 	ld a,#ERR_BAD_VALUE
      00181B CC 07 5F         [ 2] 4730 	jp tb_error 
      00181E CD 1D BD         [ 4] 4731 2$:	call select_pin 
      001821 6B 01            [ 1] 4732 	ld (PINNO,sp),a 
      001823 A6 01            [ 1] 4733 	ld a,#1
      001825 0D 01            [ 1] 4734 	tnz (PINNO,sp)
      001827 27 05            [ 1] 4735 	jreq 4$
      001829 48               [ 1] 4736 3$: sll a
      00182A 0A 01            [ 1] 4737 	dec (PINNO,sp)
      00182C 26 FB            [ 1] 4738 	jrne 3$
      00182E 0D 02            [ 1] 4739 4$: tnz (PINVAL,sp)
      001830 26 05            [ 1] 4740 	jrne 5$
      001832 43               [ 1] 4741 	cpl a 
      001833 E4 00            [ 1] 4742 	and a,(GPIO_ODR,x)
      001835 20 02            [ 2] 4743 	jra 8$
      001837 EA 00            [ 1] 4744 5$: or a,(GPIO_ODR,x)
      001839 E7 00            [ 1] 4745 8$: ld (GPIO_ODR,x),a 
      00183B                       4746 	_drop VSIZE 
      00183B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00183D 81               [ 4] 4747 	ret
                                   4748 
                                   4749 
                                   4750 ;-----------------------
                                   4751 ; BASIC: STOP
                                   4752 ; stop progam execution  
                                   4753 ; without resetting pointers 
                                   4754 ; the program is resumed
                                   4755 ; with RUN 
                                   4756 ;-------------------------
      00183E                       4757 stop:
      00183E 72 00 00 25 02   [ 2] 4758 	btjt flags,#FRUN,2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001843 4F               [ 1] 4759 	clr a
      001844 81               [ 4] 4760 	ret 
      001845                       4761 2$:	 
                                   4762 ; create space on cstack to save context 
      001845 AE 18 6C         [ 2] 4763 	ldw x,#break_point 
      001848 CD 01 D7         [ 4] 4764 	call puts 
      00184B                       4765 	_drop 2 ;drop return address 
      00184B 5B 02            [ 2]    1     addw sp,#2 
      00184D                       4766 	_vars CTXT_SIZE ; context size 
      00184D 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00184F CD 14 34         [ 4] 4767 	call save_context 
      001852 AE 16 E8         [ 2] 4768 	ldw x,#tib 
      001855 CF 00 04         [ 2] 4769 	ldw basicptr,x
      001858 7F               [ 1] 4770 	clr (x)
      001859 72 5F 00 03      [ 1] 4771 	clr count  
      00185D 5F               [ 1] 4772 	clrw x 
      00185E CF 00 00         [ 2] 4773 	ldw in.w,x
      001861 72 11 00 25      [ 1] 4774 	bres flags,#FRUN 
      001865 72 18 00 25      [ 1] 4775 	bset flags,#FBREAK
      001869 CC 07 C5         [ 2] 4776 	jp interpreter 
      00186C 0A 62 72 65 61 6B 20  4777 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4778 
                                   4779 ;-----------------------
                                   4780 ; BASIC: NEW
                                   4781 ; from command line only 
                                   4782 ; free program memory
                                   4783 ; and clear variables 
                                   4784 ;------------------------
      00188A                       4785 new: 
      00188A 72 01 00 25 02   [ 2] 4786 	btjf flags,#FRUN,0$ 
      00188F 4F               [ 1] 4787 	clr a 
      001890 81               [ 4] 4788 	ret 
      001891                       4789 0$:	
      001891 CD 05 FF         [ 4] 4790 	call clear_basic 
      001894 81               [ 4] 4791 	ret 
                                   4792 	 
                                   4793 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4794 ;  file system routines
                                   4795 ;  MCU flash memory from
                                   4796 ;  0x10000-0x27fff is 
                                   4797 ;  used to store BASIC 
                                   4798 ;  program files. 
                                   4799 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4800 
                                   4801 ;--------------------
                                   4802 ; input:
                                   4803 ;   X     increment 
                                   4804 ; output:
                                   4805 ;   farptr  incremented 
                                   4806 ;---------------------
      001895                       4807 incr_farptr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001895 72 BB 00 19      [ 2] 4808 	addw x,farptr+1 
      001899 24 04            [ 1] 4809 	jrnc 1$
      00189B 72 5C 00 18      [ 1] 4810 	inc farptr 
      00189F CF 00 19         [ 2] 4811 1$:	ldw farptr+1,x  
      0018A2 81               [ 4] 4812 	ret 
                                   4813 
                                   4814 ;------------------------------
                                   4815 ; extended flash memory used as FLASH_DRIVE 
                                   4816 ; seek end of used flash drive   
                                   4817 ; starting at 0x10000 address.
                                   4818 ; 4 consecutives 0 bytes signal free space. 
                                   4819 ; input:
                                   4820 ;	none
                                   4821 ; output:
                                   4822 ;   ffree     free_addr| 0 if memory full.
                                   4823 ;------------------------------
      0018A3                       4824 seek_fdrive:
                                   4825 ; start scan at 0x10000 address 
      0018A3 A6 01            [ 1] 4826 	ld a,#1
      0018A5 C7 00 18         [ 1] 4827 	ld farptr,a 
      0018A8 5F               [ 1] 4828 	clrw x 
      0018A9 CF 00 19         [ 2] 4829 	ldw farptr+1,x 
      0018AC                       4830 1$:
      0018AC AE 00 03         [ 2] 4831 	ldw x,#3  
      0018AF 92 AF 00 18      [ 5] 4832 2$:	ldf a,([farptr],x) 
      0018B3 26 05            [ 1] 4833 	jrne 3$
      0018B5 5A               [ 2] 4834 	decw x
      0018B6 2A F7            [ 1] 4835 	jrpl 2$
      0018B8 20 19            [ 2] 4836 	jra 4$ 
      0018BA 5C               [ 2] 4837 3$:	incw x 
      0018BB CD 18 95         [ 4] 4838 	call incr_farptr
      0018BE AE 02 7F         [ 2] 4839 	ldw x,#0x27f 
      0018C1 C3 00 18         [ 2] 4840 	cpw x,farptr
      0018C4 2A E6            [ 1] 4841 	jrpl 1$
                                   4842 ; drive full 
      0018C6 72 5F 00 1B      [ 1] 4843 	clr ffree 
      0018CA 72 5F 00 1C      [ 1] 4844 	clr ffree+1 
      0018CE 72 5F 00 1D      [ 1] 4845 	clr ffree+2 
      0018D2 81               [ 4] 4846 	ret
      0018D3                       4847 4$: ; copy farptr to ffree	 
      0018D3 CE 00 18         [ 2] 4848 	ldw x,farptr 
      0018D6 C6 00 1A         [ 1] 4849 	ld a,farptr+2 
      0018D9 CF 00 1B         [ 2] 4850 	ldw ffree,x 
      0018DC C7 00 1D         [ 1] 4851 	ld ffree+2,a  
      0018DF 81               [ 4] 4852 	ret 
                                   4853 
                                   4854 ;-----------------------
                                   4855 ; compare file name 
                                   4856 ; with name pointed by Y  
                                   4857 ; input:
                                   4858 ;   farptr   file name 
                                   4859 ;   Y        target name 
                                   4860 ; output:
                                   4861 ;   farptr 	 at file_name
                                   4862 ;   X 		 farptr[x] point at size field  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4863 ;   Carry    0|1 no match|match  
                                   4864 ;----------------------
      0018E0                       4865 cmp_name:
      0018E0 5F               [ 1] 4866 	clrw x
      0018E1 92 AF 00 18      [ 5] 4867 1$:	ldf a,([farptr],x)
      0018E5 90 F1            [ 1] 4868 	cp a,(y)
      0018E7 26 08            [ 1] 4869 	jrne 4$
      0018E9 4D               [ 1] 4870 	tnz a 
      0018EA 27 12            [ 1] 4871 	jreq 9$ 
      0018EC 5C               [ 2] 4872     incw x 
      0018ED 90 5C            [ 2] 4873 	incw y 
      0018EF 20 F0            [ 2] 4874 	jra 1$
      0018F1                       4875 4$: ;no match 
      0018F1 4D               [ 1] 4876 	tnz a 
      0018F2 27 07            [ 1] 4877 	jreq 5$
      0018F4 5C               [ 2] 4878 	incw x 
      0018F5 92 AF 00 18      [ 5] 4879 	ldf a,([farptr],x)
      0018F9 20 F6            [ 2] 4880 	jra 4$  
      0018FB 5C               [ 2] 4881 5$:	incw x ; farptr[x] point at 'size' field 
      0018FC 98               [ 1] 4882 	rcf 
      0018FD 81               [ 4] 4883 	ret
      0018FE                       4884 9$: ; match  
      0018FE 5C               [ 2] 4885 	incw x  ; farptr[x] at 'size' field 
      0018FF 99               [ 1] 4886 	scf 
      001900 81               [ 4] 4887 	ret 
                                   4888 
                                   4889 ;-----------------------
                                   4890 ; search file in 
                                   4891 ; flash memory 
                                   4892 ; input:
                                   4893 ;   Y       file name  
                                   4894 ; output:
                                   4895 ;   farptr  addr at name|0
                                   4896 ;-----------------------
                           000001  4897 	FSIZE=1
                           000003  4898 	YSAVE=3
                           000004  4899 	VSIZE=4 
      001901                       4900 search_file: 
      001901                       4901 	_vars VSIZE
      001901 52 04            [ 2]    1     sub sp,#VSIZE 
      001903 17 03            [ 2] 4902 	ldw (YSAVE,sp),y  
      001905 5F               [ 1] 4903 	clrw x 
      001906 CF 00 19         [ 2] 4904 	ldw farptr+1,x 
      001909 35 01 00 18      [ 1] 4905 	mov farptr,#1
      00190D                       4906 1$:	
                                   4907 ; check if farptr is after any file 
                                   4908 ; if  0 then so.
      00190D 92 BC 00 18      [ 5] 4909 	ldf a,[farptr]
      001911 27 25            [ 1] 4910 	jreq 6$
      001913 5F               [ 1] 4911 2$: clrw x 	
      001914 16 03            [ 2] 4912 	ldw y,(YSAVE,sp) 
      001916 CD 18 E0         [ 4] 4913 	call cmp_name
      001919 25 2D            [ 1] 4914 	jrc 9$
      00191B 92 AF 00 18      [ 5] 4915 	ldf a,([farptr],x)
      00191F 6B 01            [ 1] 4916 	ld (FSIZE,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001921 5C               [ 2] 4917 	incw x 
      001922 92 AF 00 18      [ 5] 4918 	ldf a,([farptr],x)
      001926 6B 02            [ 1] 4919 	ld (FSIZE+1,sp),a 
      001928 5C               [ 2] 4920 	incw x 
      001929 72 FB 01         [ 2] 4921 	addw x,(FSIZE,sp) ; count to skip 
      00192C 5C               [ 2] 4922 	incw x ; skip over EOF marker 
      00192D CD 18 95         [ 4] 4923 	call incr_farptr ; now at next file 'name_field'
      001930 AE 02 80         [ 2] 4924 	ldw x,#0x280
      001933 C3 00 18         [ 2] 4925 	cpw x,farptr 
      001936 2A D5            [ 1] 4926 	jrpl 1$
      001938                       4927 6$: ; file not found 
      001938 72 5F 00 18      [ 1] 4928 	clr farptr
      00193C 72 5F 00 19      [ 1] 4929 	clr farptr+1 
      001940 72 5F 00 1A      [ 1] 4930 	clr farptr+2 
      001944                       4931 	_drop VSIZE 
      001944 5B 04            [ 2]    1     addw sp,#VSIZE 
      001946 98               [ 1] 4932 	rcf
      001947 81               [ 4] 4933 	ret
      001948                       4934 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001948                       4935 	_drop VSIZE 
      001948 5B 04            [ 2]    1     addw sp,#VSIZE 
      00194A 99               [ 1] 4936 	scf 	
      00194B 81               [ 4] 4937 	ret
                                   4938 
                                   4939 
                                   4940 ;--------------------------------
                                   4941 ; BASIC: SAVE "name" 
                                   4942 ; save text program in 
                                   4943 ; flash memory used as 
                                   4944 ;--------------------------------
                           000001  4945 	BSIZE=1
                           000003  4946 	NAMEPTR=3
                           000004  4947 	VSIZE=4
      00194C                       4948 save:
      00194C 72 01 00 25 05   [ 2] 4949 	btjf flags,#FRUN,0$ 
      001951 A6 07            [ 1] 4950 	ld a,#ERR_CMD_ONLY 
      001953 CC 07 5F         [ 2] 4951 	jp tb_error
      001956                       4952 0$:	 
      001956 CE 00 20         [ 2] 4953 	ldw x,txtend 
      001959 72 B0 00 1E      [ 2] 4954 	subw x,txtbgn
      00195D 26 05            [ 1] 4955 	jrne 1$
                                   4956 ; nothing to save 
      00195F A6 0D            [ 1] 4957 	ld a,#ERR_NO_PROG
      001961 CC 07 5F         [ 2] 4958 	jp tb_error 	
      001964                       4959 1$:	
      001964                       4960 	_vars VSIZE 
      001964 52 04            [ 2]    1     sub sp,#VSIZE 
      001966 1F 01            [ 2] 4961 	ldw (BSIZE,sp),x 
      001968 CD 08 10         [ 4] 4962 	call next_token	
      00196B A1 02            [ 1] 4963 	cp a,#TK_QSTR
      00196D 27 03            [ 1] 4964 	jreq 2$
      00196F CC 07 5D         [ 2] 4965 	jp syntax_error
      001972                       4966 2$: 
      001972 1F 03            [ 2] 4967 	ldw (NAMEPTR,sp),x  
      001974 55 00 03 00 01   [ 1] 4968 	mov in,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4969 ; check if enough free space 
      001979 CD 02 0B         [ 4] 4970 	call strlen 
      00197C 1C 00 03         [ 2] 4971 	addw x,#3 
      00197F 72 FB 01         [ 2] 4972 	addw x,(BSIZE,sp)
      001982 72 5D 00 1B      [ 1] 4973 	tnz ffree 
      001986 26 0B            [ 1] 4974 	jrne 21$
      001988 72 B0 00 1C      [ 2] 4975 	subw x,ffree+1 
      00198C 23 05            [ 2] 4976 	jrule 21$
      00198E A6 0E            [ 1] 4977 	ld a,#ERR_NO_FSPACE  
      001990 CC 07 5F         [ 2] 4978 	jp tb_error
      001993                       4979 21$: 
                                   4980 ; check for existing file of that name 
      001993 16 03            [ 2] 4981 	ldw y,(NAMEPTR,sp)	
      001995 CD 19 01         [ 4] 4982 	call search_file 
      001998 24 05            [ 1] 4983 	jrnc 3$ 
      00199A A6 08            [ 1] 4984 	ld a,#ERR_DUPLICATE 
      00199C CC 07 5F         [ 2] 4985 	jp tb_error 
      00199F                       4986 3$:	;** write file name to flash **
      00199F CE 00 1B         [ 2] 4987 	ldw x,ffree 
      0019A2 C6 00 1D         [ 1] 4988 	ld a,ffree+2 
      0019A5 CF 00 18         [ 2] 4989 	ldw farptr,x 
      0019A8 C7 00 1A         [ 1] 4990 	ld farptr+2,a 
      0019AB 1E 03            [ 2] 4991 	ldw x,(NAMEPTR,sp)  
      0019AD CD 02 0B         [ 4] 4992 	call strlen 
      0019B0 5C               [ 2] 4993 	incw  x
      0019B1 1F 01            [ 2] 4994 	ldw (BSIZE,sp),x  
      0019B3 5F               [ 1] 4995 	clrw x   
      0019B4 16 03            [ 2] 4996 	ldw y,(NAMEPTR,sp)
      0019B6 CD 01 66         [ 4] 4997 	call write_block  
                                   4998 ;** write file length after name **
      0019B9 CE 00 20         [ 2] 4999 	ldw x,txtend 
      0019BC 72 B0 00 1E      [ 2] 5000 	subw x,txtbgn
      0019C0 1F 01            [ 2] 5001 	ldw (BSIZE,sp),x 
      0019C2 5F               [ 1] 5002 	clrw x 
      0019C3 7B 01            [ 1] 5003 	ld a,(BSIZE,sp)
      0019C5 CD 00 F1         [ 4] 5004 	call write_byte 
      0019C8 5C               [ 2] 5005 	incw x 
      0019C9 7B 02            [ 1] 5006 	ld a,(BSIZE+1,sp)
      0019CB CD 00 F1         [ 4] 5007 	call write_byte
      0019CE 5C               [ 2] 5008 	incw x  
      0019CF CD 18 95         [ 4] 5009 	call incr_farptr ; move farptr after SIZE field 
                                   5010 ;** write BASIC text **
                                   5011 ; copy BSIZE, stack:{... bsize -- ... bsize bsize }	
      0019D2 1E 01            [ 2] 5012 	ldw x,(BSIZE,sp)
      0019D4 89               [ 2] 5013 	pushw x ; write_block argument 
      0019D5 5F               [ 1] 5014 	clrw x 
      0019D6 90 CE 00 1E      [ 2] 5015 	ldw y,txtbgn  ; BASIC text to save 
      0019DA CD 01 66         [ 4] 5016 	call write_block 
      0019DD                       5017 	_drop 2 ;  drop write_block argument  
      0019DD 5B 02            [ 2]    1     addw sp,#2 
                                   5018 ; write end of file marker 
      0019DF AE 00 01         [ 2] 5019 	ldw x,#1
      0019E2 A6 FF            [ 1] 5020 	ld a,#EOF  
      0019E4 CD 00 F1         [ 4] 5021 	call write_byte 
      0019E7 CD 18 95         [ 4] 5022 	call incr_farptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   5023 ; save farptr in ffree
      0019EA CE 00 18         [ 2] 5024 	ldw x,farptr 
      0019ED C6 00 1A         [ 1] 5025 	ld a,farptr+2 
      0019F0 CF 00 1B         [ 2] 5026 	ldw ffree,x 
      0019F3 C7 00 1D         [ 1] 5027 	ld ffree+2,a
                                   5028 ;write 4 zero bytes as an end of all files marker 
      0019F6 5F               [ 1] 5029     clrw x 
      0019F7 4B 04            [ 1] 5030 	push #4 
      0019F9                       5031 4$:
      0019F9 4F               [ 1] 5032 	clr a 
      0019FA CD 00 F1         [ 4] 5033 	call write_byte 
      0019FD 5C               [ 2] 5034 	incw x 
      0019FE 0A 01            [ 1] 5035 	dec (1,sp)
      001A00 26 F7            [ 1] 5036 	jrne 4$
      001A02 84               [ 1] 5037 5$: pop a 
                                   5038 ; display saved size  
      001A03 1E 01            [ 2] 5039 	ldw x,(BSIZE,sp) 
      001A05 CD 08 A9         [ 4] 5040 	call print_int 
      001A08                       5041 	_drop VSIZE 
      001A08 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A0A 81               [ 4] 5042 	ret 
                                   5043 
                                   5044 ;----------------------
                                   5045 ; load file in RAM memory
                                   5046 ; input:
                                   5047 ;    farptr point at file size 
                                   5048 ; output:
                                   5049 ;   y point after BASIC program in RAM.
                                   5050 ;------------------------
      001A0B                       5051 load_file:
      001A0B CD 18 95         [ 4] 5052 	call incr_farptr  
      001A0E CD 05 FF         [ 4] 5053 	call clear_basic  
      001A11 5F               [ 1] 5054 	clrw x
      001A12 92 AF 00 18      [ 5] 5055 	ldf a,([farptr],x)
      001A16 90 95            [ 1] 5056 	ld yh,a 
      001A18 5C               [ 2] 5057 	incw x  
      001A19 92 AF 00 18      [ 5] 5058 	ldf a,([farptr],x)
      001A1D 5C               [ 2] 5059 	incw x 
      001A1E 90 97            [ 1] 5060 	ld yl,a 
      001A20 72 B9 00 1E      [ 2] 5061 	addw y,txtbgn
      001A24 90 CF 00 20      [ 2] 5062 	ldw txtend,y
      001A28 90 CE 00 1E      [ 2] 5063 	ldw y,txtbgn
      001A2C                       5064 3$:	; load BASIC text 	
      001A2C 92 AF 00 18      [ 5] 5065 	ldf a,([farptr],x)
      001A30 90 F7            [ 1] 5066 	ld (y),a 
      001A32 5C               [ 2] 5067 	incw x 
      001A33 90 5C            [ 2] 5068 	incw y 
      001A35 90 C3 00 20      [ 2] 5069 	cpw y,txtend 
      001A39 2B F1            [ 1] 5070 	jrmi 3$
      001A3B 81               [ 4] 5071 	ret 
                                   5072 
                                   5073 ;------------------------
                                   5074 ; BASIC: LOAD "file" 
                                   5075 ; load file to RAM 
                                   5076 ; for execution 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5077 ;------------------------
      001A3C                       5078 load:
      001A3C 72 01 00 25 07   [ 2] 5079 	btjf flags,#FRUN,0$ 
      001A41 27 05            [ 1] 5080 	jreq 0$ 
      001A43 A6 07            [ 1] 5081 	ld a,#ERR_CMD_ONLY 
      001A45 CC 07 5F         [ 2] 5082 	jp tb_error 
      001A48                       5083 0$:	
      001A48 CD 08 10         [ 4] 5084 	call next_token 
      001A4B A1 02            [ 1] 5085 	cp a,#TK_QSTR
      001A4D 27 03            [ 1] 5086 	jreq 1$
      001A4F CC 07 5D         [ 2] 5087 	jp syntax_error 
      001A52 90 93            [ 1] 5088 1$:	ldw y,x 
      001A54 55 00 03 00 01   [ 1] 5089 	mov in,count 
      001A59 CD 19 01         [ 4] 5090 	call search_file 
      001A5C 25 05            [ 1] 5091 	jrc 2$ 
      001A5E A6 09            [ 1] 5092 	ld a,#ERR_NOT_FILE
      001A60 CC 07 5F         [ 2] 5093 	jp tb_error  
      001A63                       5094 2$:
      001A63 CD 1A 0B         [ 4] 5095 	call load_file
                                   5096 ; print loaded size 	 
      001A66 CE 00 20         [ 2] 5097 	ldw x,txtend 
      001A69 72 B0 00 1E      [ 2] 5098 	subw x,txtbgn
      001A6D CD 08 A9         [ 4] 5099 	call print_int 
      001A70 81               [ 4] 5100 	ret 
                                   5101 
                                   5102 ;-----------------------------------
                                   5103 ; BASIC: FORGET ["file_name"] 
                                   5104 ; erase file_name and all others 
                                   5105 ; after it. 
                                   5106 ; without argument erase all files 
                                   5107 ;-----------------------------------
      001A71                       5108 forget:
      001A71 CD 08 10         [ 4] 5109 	call next_token 
      001A74 A1 00            [ 1] 5110 	cp a,#TK_NONE 
      001A76 27 20            [ 1] 5111 	jreq 3$ 
      001A78 A1 02            [ 1] 5112 	cp a,#TK_QSTR
      001A7A 27 03            [ 1] 5113 	jreq 1$
      001A7C CC 07 5D         [ 2] 5114 	jp syntax_error
      001A7F 90 93            [ 1] 5115 1$: ldw y,x 
      001A81 55 00 03 00 01   [ 1] 5116 	mov in,count 
      001A86 CD 19 01         [ 4] 5117 	call search_file
      001A89 25 05            [ 1] 5118 	jrc 2$
      001A8B A6 09            [ 1] 5119 	ld a,#ERR_NOT_FILE 
      001A8D CC 07 5F         [ 2] 5120 	jp tb_error 
      001A90                       5121 2$: 
      001A90 CE 00 18         [ 2] 5122 	ldw x,farptr
      001A93 C6 00 1A         [ 1] 5123 	ld a,farptr+2
      001A96 20 0A            [ 2] 5124 	jra 4$ 
      001A98                       5125 3$: ; forget all files 
      001A98 AE 01 00         [ 2] 5126 	ldw x,#0x100
      001A9B 4F               [ 1] 5127 	clr a 
      001A9C CF 00 18         [ 2] 5128 	ldw farptr,x 
      001A9F C7 00 1A         [ 1] 5129 	ld farptr+2,a 
      001AA2                       5130 4$:
      001AA2 CF 00 1B         [ 2] 5131 	ldw ffree,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001AA5 C7 00 1D         [ 1] 5132 	ld ffree+2,a 
      001AA8 4B 04            [ 1] 5133 	push #4
      001AAA 5F               [ 1] 5134 	clrw x 
      001AAB                       5135 5$: 
      001AAB 4F               [ 1] 5136 	clr a  
      001AAC CD 00 F1         [ 4] 5137 	call write_byte 
      001AAF 5C               [ 2] 5138 	incw x 
      001AB0 0A 01            [ 1] 5139 	dec (1,sp)
      001AB2 26 F7            [ 1] 5140 	jrne 5$	
      001AB4 84               [ 1] 5141 6$: pop a 
      001AB5 81               [ 4] 5142 	ret 
                                   5143 
                                   5144 ;----------------------
                                   5145 ; BASIC: DIR 
                                   5146 ; list saved files 
                                   5147 ;----------------------
                           000001  5148 	COUNT=1 ; files counter 
                           000002  5149 	VSIZE=2 
      001AB6                       5150 directory:
      001AB6                       5151 	_vars VSIZE 
      001AB6 52 02            [ 2]    1     sub sp,#VSIZE 
      001AB8 5F               [ 1] 5152 	clrw x 
      001AB9 1F 01            [ 2] 5153 	ldw (COUNT,sp),x 
      001ABB CF 00 19         [ 2] 5154 	ldw farptr+1,x 
      001ABE 35 01 00 18      [ 1] 5155 	mov farptr,#1 
      001AC2                       5156 dir_loop:
      001AC2 5F               [ 1] 5157 	clrw x 
      001AC3 92 AF 00 18      [ 5] 5158 	ldf a,([farptr],x)
      001AC7 27 39            [ 1] 5159 	jreq 8$ 
      001AC9                       5160 1$: ;name loop 	
      001AC9 92 AF 00 18      [ 5] 5161 	ldf a,([farptr],x)
      001ACD 27 06            [ 1] 5162 	jreq 2$ 
      001ACF CD 01 C4         [ 4] 5163 	call putc 
      001AD2 5C               [ 2] 5164 	incw x 
      001AD3 20 F4            [ 2] 5165 	jra 1$
      001AD5 5C               [ 2] 5166 2$: incw x ; skip ending 0. 
      001AD6 A6 20            [ 1] 5167 	ld a,#SPACE 
      001AD8 CD 01 C4         [ 4] 5168 	call putc 
                                   5169 ; get file size 	
      001ADB 92 AF 00 18      [ 5] 5170 	ldf a,([farptr],x)
      001ADF 90 95            [ 1] 5171 	ld yh,a 
      001AE1 5C               [ 2] 5172 	incw x 
      001AE2 92 AF 00 18      [ 5] 5173 	ldf a,([farptr],x)
      001AE6 5C               [ 2] 5174 	incw x 
      001AE7 90 97            [ 1] 5175 	ld yl,a 
      001AE9 90 89            [ 2] 5176 	pushw y 
      001AEB 72 FB 01         [ 2] 5177 	addw x,(1,sp)
      001AEE 5C               [ 2] 5178 	incw x ; skip EOF marker 
                                   5179 ; skip to next file 
      001AEF CD 18 95         [ 4] 5180 	call incr_farptr 
                                   5181 ; print file size 
      001AF2 85               [ 2] 5182 	popw x ; file size 
      001AF3 CD 08 A9         [ 4] 5183 	call print_int 
      001AF6 A6 0D            [ 1] 5184 	ld a,#CR 
      001AF8 CD 01 C4         [ 4] 5185 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001AFB 1E 01            [ 2] 5186 	ldw x,(COUNT,sp)
      001AFD 5C               [ 2] 5187 	incw x
      001AFE 1F 01            [ 2] 5188 	ldw (COUNT,sp),x  
      001B00 20 C0            [ 2] 5189 	jra dir_loop 
      001B02                       5190 8$: ; print number of files 
      001B02 1E 01            [ 2] 5191 	ldw x,(COUNT,sp)
      001B04 CD 08 A9         [ 4] 5192 	call print_int 
      001B07 AE 1B 37         [ 2] 5193 	ldw x,#file_count 
      001B0A CD 01 D7         [ 4] 5194 	call puts  
                                   5195 ; print drive free space 	
      001B0D A6 FF            [ 1] 5196 	ld a,#0xff 
      001B0F C0 00 1D         [ 1] 5197 	sub a,ffree+2 
      001B12 C7 00 0D         [ 1] 5198 	ld acc8,a 
      001B15 A6 7F            [ 1] 5199 	ld a,#0x7f 
      001B17 C2 00 1C         [ 1] 5200 	sbc a,ffree+1 
      001B1A C7 00 0C         [ 1] 5201 	ld acc16,a 
      001B1D A6 02            [ 1] 5202 	ld a,#2 
      001B1F C2 00 1B         [ 1] 5203 	sbc a,ffree 
      001B22 C7 00 0B         [ 1] 5204 	ld acc24,a 
      001B25 5F               [ 1] 5205 	clrw x  
      001B26 A6 06            [ 1] 5206 	ld a,#6 
      001B28 97               [ 1] 5207 	ld xl,a 
      001B29 A6 0A            [ 1] 5208 	ld a,#10 
      001B2B CD 08 61         [ 4] 5209 	call prti24 
      001B2E AE 1B 3F         [ 2] 5210 	ldw x,#drive_free
      001B31 CD 01 D7         [ 4] 5211 	call puts 
      001B34                       5212 	_drop VSIZE 
      001B34 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B36 81               [ 4] 5213 	ret
      001B37 20 66 69 6C 65 73 0A  5214 file_count: .asciz " files\n"
             00
      001B3F 20 62 79 74 65 73 20  5215 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5216 
                                   5217 ;---------------------
                                   5218 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5219 ; write 1 or more byte to FLASH or EEPROM
                                   5220 ; starting at address  
                                   5221 ; input:
                                   5222 ;   expr1  	is address 
                                   5223 ;   expr2,...,exprn   are bytes to write
                                   5224 ; output:
                                   5225 ;   none 
                                   5226 ;---------------------
                           000001  5227 	ADDR=1
                           000002  5228 	VSIZ=2 
      001B4C                       5229 write:
      001B4C                       5230 	_vars VSIZE 
      001B4C 52 02            [ 2]    1     sub sp,#VSIZE 
      001B4E 72 5F 00 18      [ 1] 5231 	clr farptr ; expect 16 bits address 
      001B52 CD 0F E6         [ 4] 5232 	call expression
      001B55 A1 04            [ 1] 5233 	cp a,#TK_INTGR 
      001B57 27 03            [ 1] 5234 	jreq 0$
      001B59 CC 07 5D         [ 2] 5235 	jp syntax_error
      001B5C 1F 01            [ 2] 5236 0$: ldw (ADDR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001B5E CD 08 10         [ 4] 5237 	call next_token 
      001B61 A1 0D            [ 1] 5238 	cp a,#TK_COMMA 
      001B63 27 02            [ 1] 5239 	jreq 1$ 
      001B65 20 19            [ 2] 5240 	jra 9$ 
      001B67 CD 0F E6         [ 4] 5241 1$:	call expression
      001B6A A1 04            [ 1] 5242 	cp a,#TK_INTGR
      001B6C 27 03            [ 1] 5243 	jreq 2$
      001B6E CC 07 5D         [ 2] 5244 	jp syntax_error
      001B71 9F               [ 1] 5245 2$:	ld a,xl 
      001B72 1E 01            [ 2] 5246 	ldw x,(ADDR,sp) 
      001B74 CF 00 19         [ 2] 5247 	ldw farptr+1,x 
      001B77 5F               [ 1] 5248 	clrw x 
      001B78 CD 00 F1         [ 4] 5249 	call write_byte
      001B7B 1E 01            [ 2] 5250 	ldw x,(ADDR,sp)
      001B7D 5C               [ 2] 5251 	incw x 
      001B7E 20 DC            [ 2] 5252 	jra 0$ 
      001B80                       5253 9$:
      001B80                       5254 	_drop VSIZE
      001B80 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B82 81               [ 4] 5255 	ret 
                                   5256 
                                   5257 
                                   5258 ;---------------------
                                   5259 ;BASIC: CHAR(expr)
                                   5260 ; évaluate expression 
                                   5261 ; and take the 7 least 
                                   5262 ; bits as ASCII character
                                   5263 ;---------------------
      001B83                       5264 char:
      001B83 CD 0F 01         [ 4] 5265 	call func_args 
      001B86 A1 01            [ 1] 5266 	cp a,#1
      001B88 27 03            [ 1] 5267 	jreq 1$
      001B8A CC 07 5D         [ 2] 5268 	jp syntax_error
      001B8D 85               [ 2] 5269 1$:	popw x 
      001B8E 9F               [ 1] 5270 	ld a,xl 
      001B8F A4 7F            [ 1] 5271 	and a,#0x7f 
      001B91 97               [ 1] 5272 	ld xl,a
      001B92 A6 03            [ 1] 5273 	ld a,#TK_CHAR
      001B94 81               [ 4] 5274 	ret
                                   5275 
                                   5276 ;---------------------
                                   5277 ; BASIC: ASC(string|char)
                                   5278 ; extract first character 
                                   5279 ; of string argument 
                                   5280 ; return it as TK_INTGR 
                                   5281 ;---------------------
      001B95                       5282 ascii:
      001B95 A6 0B            [ 1] 5283 	ld a,#TK_LPAREN
      001B97 CD 0E CD         [ 4] 5284 	call expect 
      001B9A CD 08 10         [ 4] 5285 	call next_token 
      001B9D A1 02            [ 1] 5286 	cp a,#TK_QSTR 
      001B9F 27 07            [ 1] 5287 	jreq 1$
      001BA1 A1 03            [ 1] 5288 	cp a,#TK_CHAR 
      001BA3 27 06            [ 1] 5289 	jreq 2$ 
      001BA5 CC 07 5D         [ 2] 5290 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001BA8                       5291 1$: 
      001BA8 F6               [ 1] 5292 	ld a,(x) 
      001BA9 5F               [ 1] 5293 	clrw x
      001BAA 97               [ 1] 5294 	ld xl,a 
      001BAB                       5295 2$: 
      001BAB 89               [ 2] 5296 	pushw x 
      001BAC A6 0C            [ 1] 5297 	ld a,#TK_RPAREN 
      001BAE CD 0E CD         [ 4] 5298 	call expect
      001BB1 85               [ 2] 5299 	popw x 
      001BB2 A6 04            [ 1] 5300 	ld a,#TK_INTGR 
      001BB4 81               [ 4] 5301 	ret 
                                   5302 
                                   5303 ;---------------------
                                   5304 ;BASIC: KEY
                                   5305 ; wait for a character 
                                   5306 ; received from STDIN 
                                   5307 ; input:
                                   5308 ;	none 
                                   5309 ; output:
                                   5310 ;	X 		ASCII character 
                                   5311 ;---------------------
      001BB5                       5312 key:
      001BB5 CD 01 CD         [ 4] 5313 	call getc 
      001BB8 5F               [ 1] 5314 	clrw x 
      001BB9 97               [ 1] 5315 	ld xl,a 
      001BBA A6 04            [ 1] 5316 	ld a,#TK_INTGR
      001BBC 81               [ 4] 5317 	ret
                                   5318 
                                   5319 ;----------------------
                                   5320 ; BASIC: QKEY
                                   5321 ; Return true if there 
                                   5322 ; is a character in 
                                   5323 ; waiting in STDIN 
                                   5324 ; input:
                                   5325 ;  none 
                                   5326 ; output:
                                   5327 ;   X 		0|-1 
                                   5328 ;-----------------------
      001BBD                       5329 qkey:: 
      001BBD 5F               [ 1] 5330 	clrw x 
      001BBE 72 5D 00 27      [ 1] 5331 	tnz rx_char
      001BC2 27 01            [ 1] 5332 	jreq 9$ 
      001BC4 53               [ 2] 5333 	cplw x 
      001BC5 A6 04            [ 1] 5334 9$: ld a,#TK_INTGR
      001BC7 81               [ 4] 5335 	ret 
                                   5336 
                                   5337 ;---------------------
                                   5338 ; BASIC: GPIO(expr,reg)
                                   5339 ; return gpio address 
                                   5340 ; expr {0..8}
                                   5341 ; input:
                                   5342 ;   none 
                                   5343 ; output:
                                   5344 ;   X 		gpio register address
                                   5345 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           000003  5346 	PORT=3
                           000001  5347 	REG=1 
                           000004  5348 	VSIZE=4 
      001BC8                       5349 gpio:
      001BC8 CD 0F 01         [ 4] 5350 	call func_args 
      001BCB A1 02            [ 1] 5351 	cp a,#2
      001BCD 27 03            [ 1] 5352 	jreq 1$
      001BCF CC 07 5D         [ 2] 5353 	jp syntax_error  
      001BD2                       5354 1$:	
      001BD2 1E 03            [ 2] 5355 	ldw x,(PORT,sp)
      001BD4 2B 17            [ 1] 5356 	jrmi bad_port
      001BD6 A3 00 09         [ 2] 5357 	cpw x,#9
      001BD9 2A 12            [ 1] 5358 	jrpl bad_port
      001BDB A6 05            [ 1] 5359 	ld a,#5
      001BDD 42               [ 4] 5360 	mul x,a
      001BDE 1C 50 00         [ 2] 5361 	addw x,#GPIO_BASE 
      001BE1 1F 03            [ 2] 5362 	ldw (PORT,sp),x  
      001BE3 1E 01            [ 2] 5363 	ldw x,(REG,sp) 
      001BE5 72 FB 03         [ 2] 5364 	addw x,(PORT,sp)
      001BE8 A6 04            [ 1] 5365 	ld a,#TK_INTGR
      001BEA                       5366 	_drop VSIZE 
      001BEA 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BEC 81               [ 4] 5367 	ret
      001BED                       5368 bad_port:
      001BED A6 0A            [ 1] 5369 	ld a,#ERR_BAD_VALUE
      001BEF CC 07 5F         [ 2] 5370 	jp tb_error
                                   5371 
                                   5372 
                                   5373 ;-------------------------
                                   5374 ; BASIC: UFLASH 
                                   5375 ; return user flash address
                                   5376 ; input:
                                   5377 ;  none 
                                   5378 ; output:
                                   5379 ;	A		TK_INTGR
                                   5380 ;   X 		user address 
                                   5381 ;---------------------------
      001BF2                       5382 uflash:
      001BF2 AE 25 80         [ 2] 5383 	ldw x,#user_space 
      001BF5 A6 04            [ 1] 5384 	ld a,#TK_INTGR 
      001BF7 81               [ 4] 5385 	ret 
                                   5386 
                                   5387 
                                   5388 ;---------------------
                                   5389 ; BASIC: USR(addr[,arg])
                                   5390 ; execute a function written 
                                   5391 ; in binary code.
                                   5392 ; binary fonction should 
                                   5393 ; return token attribute in A 
                                   5394 ; and value in X. 
                                   5395 ; input:
                                   5396 ;   addr	routine address 
                                   5397 ;   arg 	is an optional argument 
                                   5398 ; output:
                                   5399 ;   A 		token attribute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5400 ;   X       returned value 
                                   5401 ;---------------------
      001BF8                       5402 usr:
      001BF8 90 89            [ 2] 5403 	pushw y 	
      001BFA CD 0F 01         [ 4] 5404 	call func_args 
      001BFD A1 01            [ 1] 5405 	cp a,#1 
      001BFF 27 07            [ 1] 5406 	jreq 2$
      001C01 A1 02            [ 1] 5407 	cp a,#2
      001C03 27 03            [ 1] 5408 	jreq 2$  
      001C05 CC 07 5D         [ 2] 5409 	jp syntax_error 
      001C08 90 85            [ 2] 5410 2$: popw y  ; arg|addr 
      001C0A A1 01            [ 1] 5411 	cp a,#1
      001C0C 27 02            [ 1] 5412 	jreq 3$
      001C0E 85               [ 2] 5413 	popw x ; addr
      001C0F 51               [ 1] 5414 	exgw x,y 
      001C10 90 FD            [ 4] 5415 3$: call (y)
      001C12 90 85            [ 2] 5416 	popw y 
      001C14 81               [ 4] 5417 	ret 
                                   5418 
                                   5419 ;------------------------------
                                   5420 ; BASIC: BYE 
                                   5421 ; halt mcu in its lowest power mode 
                                   5422 ; wait for reset or external interrupt
                                   5423 ; do a cold start on wakeup.
                                   5424 ;------------------------------
      001C15                       5425 bye:
      001C15 72 0D 52 30 FB   [ 2] 5426 	btjf UART1_SR,#UART_SR_TC,.
      001C1A 8E               [10] 5427 	halt
      001C1B CC 04 ED         [ 2] 5428 	jp cold_start  
                                   5429 
                                   5430 ;----------------------------------
                                   5431 ; BASIC: AUTORUN ["file_name"] 
                                   5432 ; record in eeprom at adrress AUTORUN_NAME
                                   5433 ; the name of file to load and execute
                                   5434 ; at startup. 
                                   5435 ; empty string delete autorun name 
                                   5436 ; no argument display autorun name  
                                   5437 ; input:
                                   5438 ;   file_name   file to execute 
                                   5439 ; output:
                                   5440 ;   none
                                   5441 ;-----------------------------------
      001C1E                       5442 autorun: 
      001C1E 72 01 00 25 07   [ 2] 5443 	btjf flags,#FRUN,0$ 
      001C23 27 05            [ 1] 5444 	jreq 0$ 
      001C25 A6 07            [ 1] 5445 	ld a,#ERR_CMD_ONLY 
      001C27 CC 07 5F         [ 2] 5446 	jp tb_error 
      001C2A                       5447 0$:	
      001C2A CD 08 10         [ 4] 5448 	call next_token
      001C2D 26 08            [ 1] 5449 	jrne 1$
      001C2F AE 40 00         [ 2] 5450 	ldw x,#AUTORUN_NAME
      001C32 CD 01 D7         [ 4] 5451 	call puts 
      001C35 4F               [ 1] 5452 	clr a 
      001C36 81               [ 4] 5453 	ret 
      001C37                       5454 1$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001C37 A1 02            [ 1] 5455 	cp a,#TK_QSTR
      001C39 27 03            [ 1] 5456 	jreq 2$
      001C3B CC 07 5D         [ 2] 5457 	jp syntax_error 
      001C3E                       5458 2$:	
      001C3E 7D               [ 1] 5459 	tnz (x) 
      001C3F 26 08            [ 1] 5460 	jrne 3$
                                   5461 ; empty string, delete autorun 	
      001C41 CD 05 B2         [ 4] 5462 	call cancel_autorun
      001C44 72 5F 00 03      [ 1] 5463 	clr count 
      001C48 81               [ 4] 5464 	ret 
      001C49 89               [ 2] 5465 3$:	pushw x 
      001C4A 90 93            [ 1] 5466 	ldw y,x  
      001C4C CD 19 01         [ 4] 5467 	call search_file 
      001C4F 25 05            [ 1] 5468 	jrc 4$ 
      001C51 A6 09            [ 1] 5469 	ld a,#ERR_NOT_FILE
      001C53 CC 07 5F         [ 2] 5470 	jp tb_error  
      001C56                       5471 4$: 
      001C56 55 00 03 00 01   [ 1] 5472 	mov in,count 
      001C5B 72 5F 00 18      [ 1] 5473 	clr farptr 
      001C5F AE 40 00         [ 2] 5474 	ldw x,#AUTORUN_NAME
      001C62 CF 00 19         [ 2] 5475 	ldw farptr+1,x 
      001C65 1E 01            [ 2] 5476 	ldw x,(1,sp)  
      001C67 CD 02 0B         [ 4] 5477 	call strlen  ; return length in X 
      001C6A 5C               [ 2] 5478 	incw x 
      001C6B 90 85            [ 2] 5479 	popw y 
      001C6D 89               [ 2] 5480 	pushw x 
      001C6E 5F               [ 1] 5481 	clrw x 
      001C6F CD 01 66         [ 4] 5482 	call write_block 
      001C72                       5483 	_drop 2 
      001C72 5B 02            [ 2]    1     addw sp,#2 
      001C74 81               [ 4] 5484 	ret 
                                   5485 
                                   5486 ;----------------------------------
                                   5487 ; BASIC: SLEEP 
                                   5488 ; halt mcu until reset or external
                                   5489 ; interrupt.
                                   5490 ; Resume progam after SLEEP command
                                   5491 ;----------------------------------
      001C75                       5492 sleep:
      001C75 72 0D 52 30 FB   [ 2] 5493 	btjf UART1_SR,#UART_SR_TC,.
      001C7A 72 16 00 25      [ 1] 5494 	bset flags,#FSLEEP
      001C7E 8E               [10] 5495 	halt 
      001C7F 81               [ 4] 5496 	ret 
                                   5497 
                                   5498 ;-------------------------------
                                   5499 ; BASIC: PAUSE expr 
                                   5500 ; suspend execution for n msec.
                                   5501 ; input:
                                   5502 ;	none
                                   5503 ; output:
                                   5504 ;	none 
                                   5505 ;------------------------------
      001C80                       5506 pause:
      001C80 CD 0F E6         [ 4] 5507 	call expression
      001C83 A1 04            [ 1] 5508 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001C85 27 03            [ 1] 5509 	jreq pause02 
      001C87 CC 07 5D         [ 2] 5510 	jp syntax_error
      001C8A                       5511 pause02: 
      001C8A 5D               [ 2] 5512 1$: tnzw x 
      001C8B 27 04            [ 1] 5513 	jreq 2$
      001C8D 8F               [10] 5514 	wfi 
      001C8E 5A               [ 2] 5515 	decw x 
      001C8F 26 F9            [ 1] 5516 	jrne 1$
      001C91 4F               [ 1] 5517 2$:	clr a 
      001C92 81               [ 4] 5518 	ret 
                                   5519 
                                   5520 ;------------------------------
                                   5521 ; BASIC: AWU expr
                                   5522 ; halt mcu for 'expr' milliseconds
                                   5523 ; use Auto wakeup peripheral
                                   5524 ; all oscillators stopped except LSI
                                   5525 ; range: 1ms - 511ms
                                   5526 ; input:
                                   5527 ;  none
                                   5528 ; output:
                                   5529 ;  none:
                                   5530 ;------------------------------
      001C93                       5531 awu:
      001C93 CD 0F E6         [ 4] 5532   call expression
      001C96 A1 04            [ 1] 5533   cp a,#TK_INTGR
      001C98 27 03            [ 1] 5534   jreq awu02
      001C9A CC 07 5D         [ 2] 5535   jp syntax_error
      001C9D                       5536 awu02:
      001C9D A3 14 00         [ 2] 5537   cpw x,#5120
      001CA0 2B 0C            [ 1] 5538   jrmi 1$ 
      001CA2 35 0F 50 F2      [ 1] 5539   mov AWU_TBR,#15 
      001CA6 A6 1E            [ 1] 5540   ld a,#30
      001CA8 62               [ 2] 5541   div x,a
      001CA9 A6 10            [ 1] 5542   ld a,#16
      001CAB 62               [ 2] 5543   div x,a 
      001CAC 20 1E            [ 2] 5544   jra 4$
      001CAE                       5545 1$: 
      001CAE A3 08 00         [ 2] 5546   cpw x,#2048
      001CB1 2B 09            [ 1] 5547   jrmi 2$ 
      001CB3 35 0E 50 F2      [ 1] 5548   mov AWU_TBR,#14
      001CB7 A6 50            [ 1] 5549   ld a,#80
      001CB9 62               [ 2] 5550   div x,a 
      001CBA 20 10            [ 2] 5551   jra 4$   
      001CBC                       5552 2$:
      001CBC 35 07 50 F2      [ 1] 5553   mov AWU_TBR,#7
      001CC0                       5554 3$:  
                                   5555 ; while X > 64  divide by 2 and increment AWU_TBR 
      001CC0 A3 00 40         [ 2] 5556   cpw x,#64 
      001CC3 23 07            [ 2] 5557   jrule 4$ 
      001CC5 72 5C 50 F2      [ 1] 5558   inc AWU_TBR 
      001CC9 54               [ 2] 5559   srlw x 
      001CCA 20 F4            [ 2] 5560   jra 3$ 
      001CCC                       5561 4$:
      001CCC 9F               [ 1] 5562   ld a, xl
      001CCD 4A               [ 1] 5563   dec a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001CCE 27 01            [ 1] 5564   jreq 5$
      001CD0 4A               [ 1] 5565   dec a 	
      001CD1                       5566 5$: 
      001CD1 A4 3E            [ 1] 5567   and a,#0x3e 
      001CD3 C7 50 F1         [ 1] 5568   ld AWU_APR,a 
      001CD6 72 18 50 F0      [ 1] 5569   bset AWU_CSR,#AWU_CSR_AWUEN
      001CDA 8E               [10] 5570   halt 
                                   5571 
      001CDB 81               [ 4] 5572   ret 
                                   5573 
                                   5574 ;------------------------------
                                   5575 ; BASIC: TICKS
                                   5576 ; return msec ticks counter value 
                                   5577 ; input:
                                   5578 ; 	none 
                                   5579 ; output:
                                   5580 ;	X 		TK_INTGR
                                   5581 ;-------------------------------
      001CDC                       5582 get_ticks:
      001CDC CE 00 10         [ 2] 5583 	ldw x,ticks 
      001CDF A6 04            [ 1] 5584 	ld a,#TK_INTGR
      001CE1 81               [ 4] 5585 	ret 
                                   5586 
                                   5587 
                                   5588 
                                   5589 ;------------------------------
                                   5590 ; BASIC: ABS(expr)
                                   5591 ; return absolute value of expr.
                                   5592 ; input:
                                   5593 ;   none
                                   5594 ; output:
                                   5595 ;   X     	positive integer
                                   5596 ;-------------------------------
      001CE2                       5597 abs:
      001CE2 CD 0F 01         [ 4] 5598 	call func_args 
      001CE5 A1 01            [ 1] 5599 	cp a,#1 
      001CE7 27 03            [ 1] 5600 	jreq 0$ 
      001CE9 CC 07 5D         [ 2] 5601 	jp syntax_error
      001CEC                       5602 0$:  
      001CEC 85               [ 2] 5603     popw x   
      001CED 9E               [ 1] 5604 	ld a,xh 
      001CEE A5 80            [ 1] 5605 	bcp a,#0x80 
      001CF0 27 01            [ 1] 5606 	jreq 2$ 
      001CF2 50               [ 2] 5607 	negw x 
      001CF3 A6 04            [ 1] 5608 2$: ld a,#TK_INTGR 
      001CF5 81               [ 4] 5609 	ret 
                                   5610 
                                   5611 ;------------------------------
                                   5612 ; BASIC: AND(expr1,expr2)
                                   5613 ; Apply bit AND relation between
                                   5614 ; the 2 arguments, i.e expr1 & expr2 
                                   5615 ; output:
                                   5616 ; 	A 		TK_INTGR
                                   5617 ;   X 		result 
                                   5618 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001CF6                       5619 bit_and:
      001CF6 CD 0F 01         [ 4] 5620 	call func_args 
      001CF9 A1 02            [ 1] 5621 	cp a,#2
      001CFB 27 03            [ 1] 5622 	jreq 1$
      001CFD CC 07 5D         [ 2] 5623 	jp syntax_error 
      001D00 85               [ 2] 5624 1$:	popw x 
      001D01 9E               [ 1] 5625 	ld a,xh 
      001D02 14 01            [ 1] 5626 	and a,(1,sp)
      001D04 95               [ 1] 5627 	ld xh,a 
      001D05 9F               [ 1] 5628 	ld a,xl
      001D06 14 02            [ 1] 5629 	and a,(2,sp)
      001D08 97               [ 1] 5630 	ld xl,a 
      001D09                       5631 	_drop 2 
      001D09 5B 02            [ 2]    1     addw sp,#2 
      001D0B A6 04            [ 1] 5632 	ld a,#TK_INTGR
      001D0D 81               [ 4] 5633 	ret
                                   5634 
                                   5635 ;------------------------------
                                   5636 ; BASIC: OR(expr1,expr2)
                                   5637 ; Apply bit OR relation between
                                   5638 ; the 2 arguments, i.e expr1 | expr2 
                                   5639 ; output:
                                   5640 ; 	A 		TK_INTGR
                                   5641 ;   X 		result 
                                   5642 ;------------------------------
      001D0E                       5643 bit_or:
      001D0E CD 0F 01         [ 4] 5644 	call func_args 
      001D11 A1 02            [ 1] 5645 	cp a,#2
      001D13 27 03            [ 1] 5646 	jreq 1$
      001D15 CC 07 5D         [ 2] 5647 	jp syntax_error 
      001D18                       5648 1$: 
      001D18 85               [ 2] 5649 	popw x 
      001D19 9E               [ 1] 5650 	ld a,xh 
      001D1A 1A 01            [ 1] 5651 	or a,(1,sp)
      001D1C 95               [ 1] 5652 	ld xh,a 
      001D1D 9F               [ 1] 5653 	ld a,xl 
      001D1E 1A 02            [ 1] 5654 	or a,(2,sp)
      001D20 97               [ 1] 5655 	ld xl,a 
      001D21                       5656 	_drop 2 
      001D21 5B 02            [ 2]    1     addw sp,#2 
      001D23 A6 04            [ 1] 5657 	ld a,#TK_INTGR 
      001D25 81               [ 4] 5658 	ret
                                   5659 
                                   5660 ;------------------------------
                                   5661 ; BASIC: XOR(expr1,expr2)
                                   5662 ; Apply bit XOR relation between
                                   5663 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5664 ; output:
                                   5665 ; 	A 		TK_INTGR
                                   5666 ;   X 		result 
                                   5667 ;------------------------------
      001D26                       5668 bit_xor:
      001D26 CD 0F 01         [ 4] 5669 	call func_args 
      001D29 A1 02            [ 1] 5670 	cp a,#2
      001D2B 27 03            [ 1] 5671 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001D2D CC 07 5D         [ 2] 5672 	jp syntax_error 
      001D30                       5673 1$: 
      001D30 85               [ 2] 5674 	popw x 
      001D31 9E               [ 1] 5675 	ld a,xh 
      001D32 18 01            [ 1] 5676 	xor a,(1,sp)
      001D34 95               [ 1] 5677 	ld xh,a 
      001D35 9F               [ 1] 5678 	ld a,xl 
      001D36 18 02            [ 1] 5679 	xor a,(2,sp)
      001D38 97               [ 1] 5680 	ld xl,a 
      001D39                       5681 	_drop 2 
      001D39 5B 02            [ 2]    1     addw sp,#2 
      001D3B A6 04            [ 1] 5682 	ld a,#TK_INTGR 
      001D3D 81               [ 4] 5683 	ret 
                                   5684 
                                   5685 ;------------------------------
                                   5686 ; BASIC: LSHIFT(expr1,expr2)
                                   5687 ; logical shift left expr1 by 
                                   5688 ; expr2 bits 
                                   5689 ; output:
                                   5690 ; 	A 		TK_INTGR
                                   5691 ;   X 		result 
                                   5692 ;------------------------------
      001D3E                       5693 lshift:
      001D3E CD 0F 01         [ 4] 5694 	call func_args
      001D41 A1 02            [ 1] 5695 	cp a,#2 
      001D43 27 03            [ 1] 5696 	jreq 1$
      001D45 CC 07 5D         [ 2] 5697 	jp syntax_error
      001D48 90 85            [ 2] 5698 1$: popw y   
      001D4A 85               [ 2] 5699 	popw x 
      001D4B 90 5D            [ 2] 5700 	tnzw y 
      001D4D 27 05            [ 1] 5701 	jreq 4$
      001D4F 58               [ 2] 5702 2$:	sllw x 
      001D50 90 5A            [ 2] 5703 	decw y 
      001D52 26 FB            [ 1] 5704 	jrne 2$
      001D54                       5705 4$:  
      001D54 A6 04            [ 1] 5706 	ld a,#TK_INTGR
      001D56 81               [ 4] 5707 	ret
                                   5708 
                                   5709 ;------------------------------
                                   5710 ; BASIC: RSHIFT(expr1,expr2)
                                   5711 ; logical shift right expr1 by 
                                   5712 ; expr2 bits.
                                   5713 ; output:
                                   5714 ; 	A 		TK_INTGR
                                   5715 ;   X 		result 
                                   5716 ;------------------------------
      001D57                       5717 rshift:
      001D57 CD 0F 01         [ 4] 5718 	call func_args
      001D5A A1 02            [ 1] 5719 	cp a,#2 
      001D5C 27 03            [ 1] 5720 	jreq 1$
      001D5E CC 07 5D         [ 2] 5721 	jp syntax_error
      001D61 90 85            [ 2] 5722 1$: popw y  
      001D63 85               [ 2] 5723 	popw x
      001D64 90 5D            [ 2] 5724 	tnzw y 
      001D66 27 05            [ 1] 5725 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001D68 54               [ 2] 5726 2$:	srlw x 
      001D69 90 5A            [ 2] 5727 	decw y 
      001D6B 26 FB            [ 1] 5728 	jrne 2$
      001D6D                       5729 4$:  
      001D6D A6 04            [ 1] 5730 	ld a,#TK_INTGR
      001D6F 81               [ 4] 5731 	ret
                                   5732 
                                   5733 ;--------------------------
                                   5734 ; BASIC: FCPU integer
                                   5735 ; set CPU frequency 
                                   5736 ;-------------------------- 
                                   5737 
      001D70                       5738 fcpu:
      001D70 A6 04            [ 1] 5739 	ld a,#TK_INTGR
      001D72 CD 0E CD         [ 4] 5740 	call expect 
      001D75 9F               [ 1] 5741 	ld a,xl 
      001D76 A4 07            [ 1] 5742 	and a,#7 
      001D78 C7 50 C6         [ 1] 5743 	ld CLK_CKDIVR,a 
      001D7B 81               [ 4] 5744 	ret 
                                   5745 
                                   5746 ;------------------------------
                                   5747 ; BASIC: PMODE pin#, mode 
                                   5748 ; Arduino pin. 
                                   5749 ; define pin as input or output
                                   5750 ; pin#: {0..15}
                                   5751 ; mode: INPUT|OUTPUT  
                                   5752 ;------------------------------
                           000001  5753 	PINNO=1
                           000001  5754 	VSIZE=1
      001D7C                       5755 pin_mode:
      001D7C                       5756 	_vars VSIZE 
      001D7C 52 01            [ 2]    1     sub sp,#VSIZE 
      001D7E CD 0E DA         [ 4] 5757 	call arg_list 
      001D81 A1 02            [ 1] 5758 	cp a,#2 
      001D83 27 03            [ 1] 5759 	jreq 1$
      001D85 CC 07 5D         [ 2] 5760 	jp syntax_error 
      001D88 90 85            [ 2] 5761 1$: popw y ; mode 
      001D8A 85               [ 2] 5762 	popw x ; Dx pin 
      001D8B CD 1D BD         [ 4] 5763 	call select_pin 
      001D8E 6B 01            [ 1] 5764 	ld (PINNO,sp),a  
      001D90 A6 01            [ 1] 5765 	ld a,#1 
      001D92 0D 01            [ 1] 5766 	tnz (PINNO,sp)
      001D94 27 0B            [ 1] 5767 	jreq 4$
      001D96 48               [ 1] 5768 2$:	sll a 
      001D97 0A 01            [ 1] 5769 	dec (PINNO,sp)
      001D99 26 FB            [ 1] 5770 	jrne 2$ 
      001D9B 6B 01            [ 1] 5771 	ld (PINNO,sp),a
      001D9D EA 03            [ 1] 5772 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001D9F E7 03            [ 1] 5773 	ld (GPIO_CR1,x),a 
      001DA1 90 A3 00 01      [ 2] 5774 4$:	cpw y,#OUTP 
      001DA5 27 07            [ 1] 5775 	jreq 6$
                                   5776 ; input mode
      001DA7 7B 01            [ 1] 5777 	ld a,(PINNO,sp)
      001DA9 43               [ 1] 5778 	cpl a 
      001DAA E4 02            [ 1] 5779 	and a,(GPIO_DDR,x)	; bit==0 for input. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001DAC 20 0A            [ 2] 5780 	jra 9$
      001DAE                       5781 6$: ;output mode  
      001DAE 7B 01            [ 1] 5782 	ld a,(PINNO,sp)
      001DB0 EA 04            [ 1] 5783 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001DB2 E7 04            [ 1] 5784 	ld (GPIO_CR2,x),a 
      001DB4 7B 01            [ 1] 5785 	ld a,(PINNO,sp)
      001DB6 EA 02            [ 1] 5786 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001DB8 E7 02            [ 1] 5787 9$:	ld (GPIO_DDR,x),a 
      001DBA                       5788 	_drop VSIZE 
      001DBA 5B 01            [ 2]    1     addw sp,#VSIZE 
      001DBC 81               [ 4] 5789 	ret
                                   5790 
                                   5791 ;------------------------
                                   5792 ; select Arduino pin 
                                   5793 ; input:
                                   5794 ;   X 	 {0..15} Arduino Dx 
                                   5795 ; output:
                                   5796 ;   A     stm8s208 pin 
                                   5797 ;   X     base address s208 GPIO port 
                                   5798 ;---------------------------
      001DBD                       5799 select_pin:
      001DBD 58               [ 2] 5800 	sllw x 
      001DBE 1C 1D CD         [ 2] 5801 	addw x,#arduino_to_8s208 
      001DC1 FE               [ 2] 5802 	ldw x,(x)
      001DC2 9F               [ 1] 5803 	ld a,xl 
      001DC3 88               [ 1] 5804 	push a 
      001DC4 5E               [ 1] 5805 	swapw x 
      001DC5 A6 05            [ 1] 5806 	ld a,#5 
      001DC7 42               [ 4] 5807 	mul x,a 
      001DC8 1C 50 00         [ 2] 5808 	addw x,#GPIO_BASE 
      001DCB 84               [ 1] 5809 	pop a 
      001DCC 81               [ 4] 5810 	ret 
                                   5811 ; translation from Arduino D0..D15 to stm8s208rb 
      001DCD                       5812 arduino_to_8s208:
      001DCD 03 06                 5813 .byte 3,6 ; D0 
      001DCF 03 05                 5814 .byte 3,5 ; D1 
      001DD1 04 00                 5815 .byte 4,0 ; D2 
      001DD3 02 01                 5816 .byte 2,1 ; D3
      001DD5 06 00                 5817 .byte 6,0 ; D4
      001DD7 02 02                 5818 .byte 2,2 ; D5
      001DD9 02 03                 5819 .byte 2,3 ; D6
      001DDB 03 01                 5820 .byte 3,1 ; D7
      001DDD 03 03                 5821 .byte 3,3 ; D8
      001DDF 02 04                 5822 .byte 2,4 ; D9
      001DE1 04 05                 5823 .byte 4,5 ; D10
      001DE3 02 06                 5824 .byte 2,6 ; D11
      001DE5 02 07                 5825 .byte 2,7 ; D12
      001DE7 02 05                 5826 .byte 2,5 ; D13
      001DE9 04 02                 5827 .byte 4,2 ; D14
      001DEB 04 01                 5828 .byte 4,1 ; D15
                                   5829 
                                   5830 
                                   5831 ;------------------------------
                                   5832 ; BASIC: RND(expr)
                                   5833 ; return random number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5834 ; between 1 and expr inclusive
                                   5835 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5836 ; input:
                                   5837 ; 	none 
                                   5838 ; output:
                                   5839 ;	X 		random positive integer 
                                   5840 ;------------------------------
      001DED                       5841 random:
      001DED CD 0F 01         [ 4] 5842 	call func_args 
      001DF0 A1 01            [ 1] 5843 	cp a,#1
      001DF2 27 03            [ 1] 5844 	jreq 1$
      001DF4 CC 07 5D         [ 2] 5845 	jp syntax_error
      001DF7                       5846 1$:  
      001DF7 A6 80            [ 1] 5847 	ld a,#0x80 
      001DF9 15 01            [ 1] 5848 	bcp a,(1,sp)
      001DFB 27 05            [ 1] 5849 	jreq 2$
      001DFD A6 0A            [ 1] 5850 	ld a,#ERR_BAD_VALUE
      001DFF CC 07 5F         [ 2] 5851 	jp tb_error
      001E02                       5852 2$: 
                                   5853 ; acc16=(x<<5)^x 
      001E02 CE 00 14         [ 2] 5854 	ldw x,seedx 
      001E05 58               [ 2] 5855 	sllw x 
      001E06 58               [ 2] 5856 	sllw x 
      001E07 58               [ 2] 5857 	sllw x 
      001E08 58               [ 2] 5858 	sllw x 
      001E09 58               [ 2] 5859 	sllw x 
      001E0A 9E               [ 1] 5860 	ld a,xh 
      001E0B C8 00 14         [ 1] 5861 	xor a,seedx 
      001E0E C7 00 0C         [ 1] 5862 	ld acc16,a 
      001E11 9F               [ 1] 5863 	ld a,xl 
      001E12 C8 00 15         [ 1] 5864 	xor a,seedx+1 
      001E15 C7 00 0D         [ 1] 5865 	ld acc8,a 
                                   5866 ; seedx=seedy 
      001E18 CE 00 16         [ 2] 5867 	ldw x,seedy 
      001E1B CF 00 14         [ 2] 5868 	ldw seedx,x  
                                   5869 ; seedy=seedy^(seedy>>1)
      001E1E 90 54            [ 2] 5870 	srlw y 
      001E20 90 9E            [ 1] 5871 	ld a,yh 
      001E22 C8 00 16         [ 1] 5872 	xor a,seedy 
      001E25 C7 00 16         [ 1] 5873 	ld seedy,a  
      001E28 90 9F            [ 1] 5874 	ld a,yl 
      001E2A C8 00 17         [ 1] 5875 	xor a,seedy+1 
      001E2D C7 00 17         [ 1] 5876 	ld seedy+1,a 
                                   5877 ; acc16>>3 
      001E30 CE 00 0C         [ 2] 5878 	ldw x,acc16 
      001E33 54               [ 2] 5879 	srlw x 
      001E34 54               [ 2] 5880 	srlw x 
      001E35 54               [ 2] 5881 	srlw x 
                                   5882 ; x=acc16^x 
      001E36 9E               [ 1] 5883 	ld a,xh 
      001E37 C8 00 0C         [ 1] 5884 	xor a,acc16 
      001E3A 95               [ 1] 5885 	ld xh,a 
      001E3B 9F               [ 1] 5886 	ld a,xl 
      001E3C C8 00 0D         [ 1] 5887 	xor a,acc8 
      001E3F 97               [ 1] 5888 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   5889 ; seedy=x^seedy 
      001E40 C8 00 17         [ 1] 5890 	xor a,seedy+1
      001E43 97               [ 1] 5891 	ld xl,a 
      001E44 9E               [ 1] 5892 	ld a,xh 
      001E45 C8 00 16         [ 1] 5893 	xor a,seedy
      001E48 95               [ 1] 5894 	ld xh,a 
      001E49 CF 00 16         [ 2] 5895 	ldw seedy,x 
                                   5896 ; return seedy modulo expr + 1 
      001E4C 90 85            [ 2] 5897 	popw y 
      001E4E 65               [ 2] 5898 	divw x,y 
      001E4F 93               [ 1] 5899 	ldw x,y 
      001E50 5C               [ 2] 5900 	incw x 
      001E51                       5901 10$:
      001E51 A6 04            [ 1] 5902 	ld a,#TK_INTGR
      001E53 81               [ 4] 5903 	ret 
                                   5904 
                                   5905 ;---------------------------------
                                   5906 ; BASIC: WORDS 
                                   5907 ; affiche la listes des mots du
                                   5908 ; dictionnaire ainsi que le nombre
                                   5909 ; de mots.
                                   5910 ;---------------------------------
                           000001  5911 	WLEN=1 ; word length
                           000002  5912 	LLEN=2 ; character sent to console
                           000003  5913 	WCNT=3 ; count words printed 
                           000003  5914 	VSIZE=3 
      001E54                       5915 words:
      001E54                       5916 	_vars VSIZE
      001E54 52 03            [ 2]    1     sub sp,#VSIZE 
      001E56 0F 02            [ 1] 5917 	clr (LLEN,sp)
      001E58 0F 03            [ 1] 5918 	clr (WCNT,sp)
      001E5A 90 AE 25 77      [ 2] 5919 	ldw y,#kword_dict+2
      001E5E 93               [ 1] 5920 0$:	ldw x,y
      001E5F F6               [ 1] 5921 	ld a,(x)
      001E60 A4 0F            [ 1] 5922 	and a,#15 
      001E62 6B 01            [ 1] 5923 	ld (WLEN,sp),a 
      001E64 0C 03            [ 1] 5924 	inc (WCNT,sp)
      001E66 5C               [ 2] 5925 1$:	incw x 
      001E67 F6               [ 1] 5926 	ld a,(x)
      001E68 CD 01 C4         [ 4] 5927 	call putc 
      001E6B 0C 02            [ 1] 5928 	inc (LLEN,sp)
      001E6D 0A 01            [ 1] 5929 	dec (WLEN,sp)
      001E6F 26 F5            [ 1] 5930 	jrne 1$
      001E71 A6 46            [ 1] 5931 	ld a,#70
      001E73 11 02            [ 1] 5932 	cp a,(LLEN,sp)
      001E75 2B 09            [ 1] 5933 	jrmi 2$   
      001E77 A6 20            [ 1] 5934 	ld a,#SPACE 
      001E79 CD 01 C4         [ 4] 5935 	call putc 
      001E7C 0C 02            [ 1] 5936 	inc (LLEN,sp) 
      001E7E 20 07            [ 2] 5937 	jra 3$
      001E80 A6 0D            [ 1] 5938 2$: ld a,#CR 
      001E82 CD 01 C4         [ 4] 5939 	call putc 
      001E85 0F 02            [ 1] 5940 	clr (LLEN,sp)
      001E87 72 A2 00 02      [ 2] 5941 3$:	subw y,#2 
      001E8B 90 FE            [ 2] 5942 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001E8D 26 CF            [ 1] 5943 	jrne 0$ 
      001E8F A6 0D            [ 1] 5944 	ld a,#CR 
      001E91 CD 01 C4         [ 4] 5945 	call putc  
      001E94 5F               [ 1] 5946 	clrw x 
      001E95 7B 03            [ 1] 5947 	ld a,(WCNT,sp)
      001E97 97               [ 1] 5948 	ld xl,a 
      001E98 CD 08 A9         [ 4] 5949 	call print_int 
      001E9B AE 1E A4         [ 2] 5950 	ldw x,#words_count_msg
      001E9E CD 01 D7         [ 4] 5951 	call puts 
      001EA1                       5952 	_drop VSIZE 
      001EA1 5B 03            [ 2]    1     addw sp,#VSIZE 
      001EA3 81               [ 4] 5953 	ret 
      001EA4 20 77 6F 72 64 73 20  5954 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5955 
                                   5956 
                                   5957 ;-----------------------------
                                   5958 ; BASIC: TIMER expr 
                                   5959 ; initialize count down timer 
                                   5960 ;-----------------------------
      001EBA                       5961 set_timer:
      001EBA CD 0E DA         [ 4] 5962 	call arg_list
      001EBD A1 01            [ 1] 5963 	cp a,#1 
      001EBF 27 03            [ 1] 5964 	jreq 1$
      001EC1 CC 07 5D         [ 2] 5965 	jp syntax_error
      001EC4                       5966 1$: 
      001EC4 85               [ 2] 5967 	popw x 
      001EC5 CF 00 12         [ 2] 5968 	ldw timer,x 
      001EC8 81               [ 4] 5969 	ret 
                                   5970 
                                   5971 ;------------------------------
                                   5972 ; BASIC: TIMEOUT 
                                   5973 ; return state of timer 
                                   5974 ;------------------------------
      001EC9                       5975 timeout:
      001EC9 CE 00 12         [ 2] 5976 	ldw x,timer 
      001ECC                       5977 logical_complement:
      001ECC 53               [ 2] 5978 	cplw x 
      001ECD A3 FF FF         [ 2] 5979 	cpw x,#-1
      001ED0 27 01            [ 1] 5980 	jreq 2$
      001ED2 5F               [ 1] 5981 	clrw x 
      001ED3 A6 04            [ 1] 5982 2$:	ld a,#TK_INTGR
      001ED5 81               [ 4] 5983 	ret 
                                   5984 
                                   5985 ;--------------------------------
                                   5986 ; BASIC NOT(expr) 
                                   5987 ; return logical complement of expr
                                   5988 ;--------------------------------
      001ED6                       5989 func_not:
      001ED6 CD 0F 01         [ 4] 5990 	call func_args  
      001ED9 A1 01            [ 1] 5991 	cp a,#1
      001EDB 27 03            [ 1] 5992 	jreq 1$
      001EDD CC 07 5D         [ 2] 5993 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      001EE0 85               [ 2] 5994 1$:	popw x 
      001EE1 20 E9            [ 2] 5995 	jra logical_complement
                                   5996 
                                   5997 
                                   5998 
                                   5999 ;-----------------------------------
                                   6000 ; BASIC: IWDGEN expr1 
                                   6001 ; enable independant watchdog timer
                                   6002 ; expr1 is delay in multiple of 62.5µsec
                                   6003 ; expr1 -> {1..16383}
                                   6004 ;-----------------------------------
      001EE3                       6005 enable_iwdg:
      001EE3 CD 0E DA         [ 4] 6006 	call arg_list
      001EE6 A1 01            [ 1] 6007 	cp a,#1 
      001EE8 27 03            [ 1] 6008 	jreq 1$
      001EEA CC 07 5D         [ 2] 6009 	jp syntax_error 
      001EED 85               [ 2] 6010 1$: popw x 
      001EEE 4B 00            [ 1] 6011 	push #0
      001EF0 35 CC 50 E0      [ 1] 6012 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001EF4 9E               [ 1] 6013 	ld a,xh 
      001EF5 A4 3F            [ 1] 6014 	and a,#0x3f
      001EF7 95               [ 1] 6015 	ld xh,a  
      001EF8 A3 00 FF         [ 2] 6016 2$:	cpw x,#255
      001EFB 23 06            [ 2] 6017 	jrule 3$
      001EFD 0C 01            [ 1] 6018 	inc (1,sp)
      001EFF 98               [ 1] 6019 	rcf 
      001F00 56               [ 2] 6020 	rrcw x 
      001F01 20 F5            [ 2] 6021 	jra 2$
      001F03 35 55 50 E0      [ 1] 6022 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F07 84               [ 1] 6023 	pop a  
      001F08 C7 50 E1         [ 1] 6024 	ld IWDG_PR,a 
      001F0B 9F               [ 1] 6025 	ld a,xl
      001F0C 4A               [ 1] 6026 	dec a 
      001F0D 35 55 50 E0      [ 1] 6027 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F11 C7 50 E2         [ 1] 6028 	ld IWDG_RLR,a 
      001F14 35 AA 50 E0      [ 1] 6029 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001F18 81               [ 4] 6030 	ret 
                                   6031 
                                   6032 
                                   6033 ;-----------------------------------
                                   6034 ; BASIC: IWDGREF  
                                   6035 ; refresh independant watchdog count down 
                                   6036 ; timer before it reset MCU. 
                                   6037 ;-----------------------------------
      001F19                       6038 refresh_iwdg:
      001F19 35 AA 50 E0      [ 1] 6039 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001F1D 81               [ 4] 6040 	ret 
                                   6041 
                                   6042 
                                   6043 ;-------------------------------------
                                   6044 ; BASIC: LOG(expr)
                                   6045 ; return logarithm base 2 of expr 
                                   6046 ; this is the position of most significant
                                   6047 ; bit set. 
                                   6048 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6049 ; output:
                                   6050 ;   X     log2 
                                   6051 ;   A     TK_INTGR 
                                   6052 ;*********************************
      001F1E                       6053 log2:
      001F1E CD 0F 01         [ 4] 6054 	call func_args 
      001F21 A1 01            [ 1] 6055 	cp a,#1 
      001F23 27 03            [ 1] 6056 	jreq 1$
      001F25 CC 07 5D         [ 2] 6057 	jp syntax_error 
      001F28 85               [ 2] 6058 1$: popw x 
      001F29                       6059 leading_one:
      001F29 5D               [ 2] 6060 	tnzw x 
      001F2A 27 0A            [ 1] 6061 	jreq 4$
      001F2C A6 0F            [ 1] 6062 	ld a,#15 
      001F2E 59               [ 2] 6063 2$: rlcw x 
      001F2F 25 03            [ 1] 6064     jrc 3$
      001F31 4A               [ 1] 6065 	dec a 
      001F32 20 FA            [ 2] 6066 	jra 2$
      001F34 5F               [ 1] 6067 3$: clrw x 
      001F35 97               [ 1] 6068     ld xl,a
      001F36 A6 04            [ 1] 6069 4$:	ld a,#TK_INTGR
      001F38 81               [ 4] 6070 	ret 
                                   6071 
                                   6072 ;-----------------------------------
                                   6073 ; BASIC: BIT(expr) 
                                   6074 ; expr ->{0..15}
                                   6075 ; return 2^expr 
                                   6076 ; output:
                                   6077 ;    x    2^expr 
                                   6078 ;-----------------------------------
      001F39                       6079 bitmask:
      001F39 CD 0F 01         [ 4] 6080     call func_args 
      001F3C A1 01            [ 1] 6081 	cp a,#1
      001F3E 27 03            [ 1] 6082 	jreq 1$
      001F40 CC 07 5D         [ 2] 6083 	jp syntax_error 
      001F43 85               [ 2] 6084 1$: popw x 
      001F44 9F               [ 1] 6085 	ld a,xl 
      001F45 A4 0F            [ 1] 6086 	and a,#15
      001F47 5F               [ 1] 6087 	clrw x 
      001F48 5C               [ 2] 6088 	incw x 
      001F49 4D               [ 1] 6089 2$: tnz a 
      001F4A 27 04            [ 1] 6090 	jreq 3$
      001F4C 58               [ 2] 6091 	slaw x 
      001F4D 4A               [ 1] 6092 	dec a 
      001F4E 20 F9            [ 2] 6093 	jra 2$ 
      001F50 A6 04            [ 1] 6094 3$: ld a,#TK_INTGR
      001F52 81               [ 4] 6095 	ret 
                                   6096 
                                   6097 ;------------------------------
                                   6098 ; BASIC: INVERT(expr)
                                   6099 ; 1's complement 
                                   6100 ;--------------------------------
      001F53                       6101 invert:
      001F53 CD 0F 01         [ 4] 6102 	call func_args
      001F56 A1 01            [ 1] 6103 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001F58 27 03            [ 1] 6104 	jreq 1$
      001F5A CC 07 5D         [ 2] 6105 	jp syntax_error
      001F5D 85               [ 2] 6106 1$: popw x  
      001F5E 53               [ 2] 6107 	cplw x 
      001F5F A6 04            [ 1] 6108 	ld a,#TK_INTGR 
      001F61 81               [ 4] 6109 	ret 
                                   6110 
                                   6111 ;------------------------------
                                   6112 ; BASIC: DO 
                                   6113 ; initiate a DO ... UNTIL loop 
                                   6114 ;------------------------------
                           000003  6115 	DOLP_ADR=3 
                           000005  6116 	DOLP_INW=5
                           000004  6117 	VSIZE=4 
      001F62                       6118 do_loop:
      001F62 85               [ 2] 6119 	popw x 
      001F63                       6120 	_vars VSIZE 
      001F63 52 04            [ 2]    1     sub sp,#VSIZE 
      001F65 89               [ 2] 6121 	pushw x 
      001F66 90 CE 00 04      [ 2] 6122 	ldw y,basicptr 
      001F6A 17 03            [ 2] 6123 	ldw (DOLP_ADR,sp),y
      001F6C 90 CE 00 00      [ 2] 6124 	ldw y,in.w 
      001F70 17 05            [ 2] 6125 	ldw (DOLP_INW,sp),y
      001F72 72 5C 00 22      [ 1] 6126 	inc loop_depth 
      001F76 81               [ 4] 6127 	ret 
                                   6128 
                                   6129 ;--------------------------------
                                   6130 ; BASIC: UNTIL expr 
                                   6131 ; loop if exprssion is false 
                                   6132 ; else terminate loop
                                   6133 ;--------------------------------
      001F77                       6134 until: 
      001F77 72 5D 00 22      [ 1] 6135 	tnz loop_depth 
      001F7B 26 03            [ 1] 6136 	jrne 1$ 
      001F7D CC 07 5D         [ 2] 6137 	jp syntax_error 
      001F80                       6138 1$: 
      001F80 CD 10 2A         [ 4] 6139 	call relation 
      001F83 A1 04            [ 1] 6140 	cp a,#TK_INTGR
      001F85 27 03            [ 1] 6141 	jreq 2$
      001F87 CC 07 5D         [ 2] 6142 	jp syntax_error
      001F8A                       6143 2$: 
      001F8A 5D               [ 2] 6144 	tnzw x 
      001F8B 26 10            [ 1] 6145 	jrne 9$
      001F8D 1E 03            [ 2] 6146 	ldw x,(DOLP_ADR,sp)
      001F8F CF 00 04         [ 2] 6147 	ldw basicptr,x 
      001F92 E6 02            [ 1] 6148 	ld a,(2,x)
      001F94 C7 00 03         [ 1] 6149 	ld count,a 
      001F97 1E 05            [ 2] 6150 	ldw x,(DOLP_INW,sp)
      001F99 CF 00 00         [ 2] 6151 	ldw in.w,x 
      001F9C 81               [ 4] 6152 	ret 
      001F9D                       6153 9$:	; remove loop data from stack  
      001F9D 85               [ 2] 6154 	popw x
      001F9E                       6155 	_drop VSIZE
      001F9E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001FA0 72 5A 00 22      [ 1] 6156 	dec loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      001FA4 FC               [ 2] 6157 	jp (x)
                                   6158 
                                   6159 ;--------------------------
                                   6160 ; BASIC: PRTA...PRTI  
                                   6161 ;  return constant value 
                                   6162 ;  PORT  offset in GPIO
                                   6163 ;  array
                                   6164 ;---------------------------
      001FA5                       6165 const_porta:
      001FA5 AE 00 00         [ 2] 6166 	ldw x,#0
      001FA8 A6 04            [ 1] 6167 	ld a,#TK_INTGR 
      001FAA 81               [ 4] 6168 	ret 
      001FAB                       6169 const_portb:
      001FAB AE 00 01         [ 2] 6170 	ldw x,#1
      001FAE A6 04            [ 1] 6171 	ld a,#TK_INTGR 
      001FB0 81               [ 4] 6172 	ret 
      001FB1                       6173 const_portc:
      001FB1 AE 00 02         [ 2] 6174 	ldw x,#2
      001FB4 A6 04            [ 1] 6175 	ld a,#TK_INTGR 
      001FB6 81               [ 4] 6176 	ret 
      001FB7                       6177 const_portd:
      001FB7 AE 00 03         [ 2] 6178 	ldw x,#3
      001FBA A6 04            [ 1] 6179 	ld a,#TK_INTGR 
      001FBC 81               [ 4] 6180 	ret 
      001FBD                       6181 const_porte:
      001FBD AE 00 04         [ 2] 6182 	ldw x,#4
      001FC0 A6 04            [ 1] 6183 	ld a,#TK_INTGR 
      001FC2 81               [ 4] 6184 	ret 
      001FC3                       6185 const_portf:
      001FC3 AE 00 05         [ 2] 6186 	ldw x,#5
      001FC6 A6 04            [ 1] 6187 	ld a,#TK_INTGR 
      001FC8 81               [ 4] 6188 	ret 
      001FC9                       6189 const_portg:
      001FC9 AE 00 06         [ 2] 6190 	ldw x,#6
      001FCC A6 04            [ 1] 6191 	ld a,#TK_INTGR 
      001FCE 81               [ 4] 6192 	ret 
      001FCF                       6193 const_porth:
      001FCF AE 00 07         [ 2] 6194 	ldw x,#7
      001FD2 A6 04            [ 1] 6195 	ld a,#TK_INTGR 
      001FD4 81               [ 4] 6196 	ret 
      001FD5                       6197 const_porti:
      001FD5 AE 00 08         [ 2] 6198 	ldw x,#8
      001FD8 A6 04            [ 1] 6199 	ld a,#TK_INTGR 
      001FDA 81               [ 4] 6200 	ret 
                                   6201 
                                   6202 ;-------------------------------
                                   6203 ; following return constant 
                                   6204 ; related to GPIO register offset 
                                   6205 ;---------------------------------
      001FDB                       6206 const_odr:
      001FDB A6 04            [ 1] 6207 	ld a,#TK_INTGR 
      001FDD AE 00 00         [ 2] 6208 	ldw x,#GPIO_ODR
      001FE0 81               [ 4] 6209 	ret 
      001FE1                       6210 const_idr:
      001FE1 A6 04            [ 1] 6211 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001FE3 AE 00 01         [ 2] 6212 	ldw x,#GPIO_IDR
      001FE6 81               [ 4] 6213 	ret 
      001FE7                       6214 const_ddr:
      001FE7 A6 04            [ 1] 6215 	ld a,#TK_INTGR 
      001FE9 AE 00 02         [ 2] 6216 	ldw x,#GPIO_DDR
      001FEC 81               [ 4] 6217 	ret 
      001FED                       6218 const_cr1:
      001FED A6 04            [ 1] 6219 	ld a,#TK_INTGR 
      001FEF AE 00 03         [ 2] 6220 	ldw x,#GPIO_CR1
      001FF2 81               [ 4] 6221 	ret 
      001FF3                       6222 const_cr2:
      001FF3 A6 04            [ 1] 6223 	ld a,#TK_INTGR 
      001FF5 AE 00 04         [ 2] 6224 	ldw x,#GPIO_CR2
      001FF8 81               [ 4] 6225 	ret 
                                   6226 ;-------------------------
                                   6227 ;  constant for port mode
                                   6228 ;  used by PMODE 
                                   6229 ;  input or output
                                   6230 ;------------------------
      001FF9                       6231 const_output:
      001FF9 A6 04            [ 1] 6232 	ld a,#TK_INTGR 
      001FFB AE 00 01         [ 2] 6233 	ldw x,#OUTP
      001FFE 81               [ 4] 6234 	ret 
      001FFF                       6235 const_input:
      001FFF A6 04            [ 1] 6236 	ld a,#TK_INTGR 
      002001 AE 00 00         [ 2] 6237 	ldw x,#INP 
      002004 81               [ 4] 6238 	ret 
                                   6239 ;-----------------------
                                   6240 ; memory area constants
                                   6241 ;-----------------------
      002005                       6242 const_eeprom_base:
      002005 A6 04            [ 1] 6243 	ld a,#TK_INTGR 
      002007 AE 40 00         [ 2] 6244 	ldw x,#EEPROM_BASE 
      00200A 81               [ 4] 6245 	ret 
                                   6246 
                                   6247 ;---------------------------
                                   6248 ; BASIC: DATA 
                                   6249 ; when the interpreter find 
                                   6250 ; a DATA line it skip it.
                                   6251 ;---------------------------
      00200B                       6252 data:
      00200B 55 00 03 00 01   [ 1] 6253 	mov in,count 
      002010 81               [ 4] 6254 	ret 
                                   6255 
                                   6256 ;---------------------------
                                   6257 ; BASIC: DATLN  *expr*
                                   6258 ; set DATA pointer at line# 
                                   6259 ; specified by *expr* 
                                   6260 ;---------------------------
      002011                       6261 data_line:
      002011 CD 0F E6         [ 4] 6262 	call expression
      002014 A1 04            [ 1] 6263 	cp a,#TK_INTGR
      002016 27 03            [ 1] 6264 	jreq 1$
      002018 CC 07 5D         [ 2] 6265 	jp syntax_error 
      00201B CD 02 79         [ 4] 6266 1$: call search_lineno
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      00201E 5D               [ 2] 6267 	tnzw x 
      00201F 26 05            [ 1] 6268 	jrne 3$
      002021 A6 05            [ 1] 6269 2$:	ld a,#ERR_NO_LINE 
      002023 CC 07 5F         [ 2] 6270 	jp tb_error
      002026                       6271 3$: ; check if valid data line 
      002026 90 93            [ 1] 6272     ldw y,x 
      002028 EE 04            [ 2] 6273 	ldw x,(4,x)
      00202A A3 20 0B         [ 2] 6274 	cpw x,#data 
      00202D 26 F2            [ 1] 6275 	jrne 2$ 
      00202F 90 CF 00 06      [ 2] 6276 	ldw data_ptr,y
      002033 90 E6 02         [ 1] 6277 	ld a,(2,y)
      002036 C7 00 09         [ 1] 6278 	ld data_len,a 
      002039 35 06 00 08      [ 1] 6279 	mov data_ofs,#FIRST_DATA_ITEM 
      00203D 81               [ 4] 6280 	ret
                                   6281 
                                   6282 ;---------------------------------
                                   6283 ; BASIC: RESTORE 
                                   6284 ; set data_ptr to first data line
                                   6285 ; if not DATA found pointer set to
                                   6286 ; zero 
                                   6287 ;---------------------------------
      00203E                       6288 restore:
      00203E 72 5F 00 06      [ 1] 6289 	clr data_ptr 
      002042 72 5F 00 07      [ 1] 6290 	clr data_ptr+1
      002046 72 5F 00 08      [ 1] 6291 	clr data_ofs 
      00204A 72 5F 00 09      [ 1] 6292 	clr data_len
      00204E CE 00 1E         [ 2] 6293 	ldw x,txtbgn
      002051                       6294 data_search_loop: 	
      002051 C3 00 20         [ 2] 6295 	cpw x,txtend
      002054 24 17            [ 1] 6296 	jruge 9$
      002056 90 93            [ 1] 6297 	ldw y,x 
      002058 EE 04            [ 2] 6298 	ldw x,(4,x)
      00205A A3 20 0B         [ 2] 6299 	cpw x,#data 
      00205D 26 1A            [ 1] 6300 	jrne try_next_line 
      00205F 90 CF 00 06      [ 2] 6301 	ldw data_ptr,y 
      002063 90 E6 02         [ 1] 6302 	ld a,(2,y)
      002066 C7 00 09         [ 1] 6303 	ld data_len,a 
      002069 35 06 00 08      [ 1] 6304 	mov data_ofs,#FIRST_DATA_ITEM
      00206D 72 5D 00 09      [ 1] 6305 9$:	tnz data_len 
      002071 26 05            [ 1] 6306     jrne 10$
      002073 A6 0C            [ 1] 6307 	ld a,#ERR_NO_DATA 
      002075 CC 07 5F         [ 2] 6308 	jp tb_error 
      002078 81               [ 4] 6309 10$:ret
      002079                       6310 try_next_line:
      002079 93               [ 1] 6311 	ldw x,y 
      00207A E6 02            [ 1] 6312 	ld a,(2,x)
      00207C C7 00 0D         [ 1] 6313 	ld acc8,a 
      00207F 72 5F 00 0C      [ 1] 6314 	clr acc16 
      002083 72 BB 00 0C      [ 2] 6315 	addw x,acc16 
      002087 20 C8            [ 2] 6316 	jra data_search_loop
                                   6317 
                                   6318 
                                   6319 ;---------------------------------
                                   6320 ; BASIC: READ 
                                   6321 ; return next data item | 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   6322 ;---------------------------------
                           000001  6323 	CTX_BPTR=1 
                           000003  6324 	CTX_IN=3 
                           000004  6325 	CTX_COUNT=4 
                           000005  6326 	XSAVE=5
                           000006  6327 	VSIZE=6
      002089                       6328 read:
      002089                       6329 	_vars  VSIZE 
      002089 52 06            [ 2]    1     sub sp,#VSIZE 
      00208B                       6330 read01:	
      00208B C6 00 08         [ 1] 6331 	ld a,data_ofs
      00208E C1 00 09         [ 1] 6332 	cp a,data_len 
      002091 27 37            [ 1] 6333 	jreq 2$ ; end of line  
      002093 CD 14 34         [ 4] 6334 	call save_context
      002096 CE 00 06         [ 2] 6335 	ldw x,data_ptr 
      002099 CF 00 04         [ 2] 6336 	ldw basicptr,x 
      00209C 55 00 08 00 01   [ 1] 6337 	mov in,data_ofs 
      0020A1 55 00 09 00 03   [ 1] 6338 	mov count,data_len  
      0020A6 CD 0F E6         [ 4] 6339 	call expression 
      0020A9 A1 04            [ 1] 6340 	cp a,#TK_INTGR 
      0020AB 27 03            [ 1] 6341 	jreq 1$ 
      0020AD CC 07 5D         [ 2] 6342 	jp syntax_error 
      0020B0                       6343 1$:
      0020B0 1F 05            [ 2] 6344 	ldw (XSAVE,SP),x
      0020B2 CD 08 10         [ 4] 6345 	call next_token ; skip comma
      0020B5 CE 00 04         [ 2] 6346 	ldw x,basicptr 
      0020B8 CF 00 06         [ 2] 6347 	ldw data_ptr,x 
      0020BB 55 00 01 00 08   [ 1] 6348 	mov data_ofs,in 
      0020C0 CD 14 44         [ 4] 6349 	call rest_context
      0020C3 1E 05            [ 2] 6350 	ldw x,(XSAVE,sp)
      0020C5 A6 04            [ 1] 6351 	ld a,#TK_INTGR
      0020C7                       6352 	_drop VSIZE 
      0020C7 5B 06            [ 2]    1     addw sp,#VSIZE 
      0020C9 81               [ 4] 6353 	ret 
      0020CA                       6354 2$: ; end of line reached 
      0020CA 90 CE 00 06      [ 2] 6355 	ldw y, data_ptr 
      0020CE 72 5F 00 06      [ 1] 6356 	clr data_ptr
      0020D2 72 5F 00 07      [ 1] 6357 	clr data_ptr+1   
      0020D6 72 5F 00 08      [ 1] 6358 	clr data_ofs 
      0020DA 72 5F 00 09      [ 1] 6359 	clr data_len 
      0020DE CD 20 79         [ 4] 6360 	call try_next_line 
      0020E1 20 A8            [ 2] 6361 	jra read01
                                   6362 
                                   6363 
                                   6364 ;---------------------------------
                                   6365 ; BASIC: SPIEN clkdiv, 0|1  
                                   6366 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6367 ; if clkdiv==-1 disable SPI
                                   6368 ; 0|1 -> disable|enable  
                                   6369 ;--------------------------------- 
                           000005  6370 SPI_CS_BIT=5
      0020E3                       6371 spi_enable:
      0020E3 CD 0E DA         [ 4] 6372 	call arg_list 
      0020E6 A1 02            [ 1] 6373 	cp a,#2
      0020E8 27 03            [ 1] 6374 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0020EA CC 07 5D         [ 2] 6375 	jp syntax_error 
      0020ED                       6376 1$: 
      0020ED 72 12 50 C7      [ 1] 6377 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0020F1 85               [ 2] 6378 	popw x  
      0020F2 27 21            [ 1] 6379 	jreq spi_disable 
      0020F4 85               [ 2] 6380 	popw x 
      0020F5 A6 08            [ 1] 6381 	ld a,#(1<<SPI_CR1_BR)
      0020F7 42               [ 4] 6382 	mul x,a 
      0020F8 9F               [ 1] 6383 	ld a,xl 
      0020F9 C7 52 00         [ 1] 6384 	ld SPI_CR1,a 
                                   6385 ; configure ~CS on PE5 (D10 on CN8) as output. 
      0020FC 72 1A 50 14      [ 1] 6386 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002100 72 1A 50 16      [ 1] 6387 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6388 ; configure SPI as master mode 0.	
      002104 72 14 52 00      [ 1] 6389 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6390 ; ~CS line controlled by sofware 	
      002108 72 12 52 01      [ 1] 6391 	bset SPI_CR2,#SPI_CR2_SSM 
      00210C 72 10 52 01      [ 1] 6392     bset SPI_CR2,#SPI_CR2_SSI 
                                   6393 ; enable SPI
      002110 72 1C 52 00      [ 1] 6394 	bset SPI_CR1,#SPI_CR1_SPE 	
      002114 81               [ 4] 6395 	ret 
      002115                       6396 spi_disable:
      002115                       6397 	_drop #2; throw first argument.
      002115 5B 02            [ 2]    1     addw sp,##2 
                                   6398 ; wait spi idle 
      002117 A6 82            [ 1] 6399 1$:	ld a,#0x82 
      002119 C4 52 03         [ 1] 6400 	and a,SPI_SR
      00211C A1 02            [ 1] 6401 	cp a,#2 
      00211E 26 F7            [ 1] 6402 	jrne 1$
      002120 72 1D 52 00      [ 1] 6403 	bres SPI_CR1,#SPI_CR1_SPE
      002124 72 13 50 C7      [ 1] 6404 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002128 72 1B 50 16      [ 1] 6405 	bres PE_DDR,#SPI_CS_BIT 
      00212C 81               [ 4] 6406 	ret 
                                   6407 
      00212D                       6408 spi_clear_error:
      00212D A6 78            [ 1] 6409 	ld a,#0x78 
      00212F C5 52 03         [ 1] 6410 	bcp a,SPI_SR 
      002132 27 04            [ 1] 6411 	jreq 1$
      002134 72 5F 52 03      [ 1] 6412 	clr SPI_SR 
      002138 81               [ 4] 6413 1$: ret 
                                   6414 
      002139                       6415 spi_send_byte:
      002139 88               [ 1] 6416 	push a 
      00213A CD 21 2D         [ 4] 6417 	call spi_clear_error
      00213D 84               [ 1] 6418 	pop a 
      00213E 72 03 52 03 FB   [ 2] 6419 	btjf SPI_SR,#SPI_SR_TXE,.
      002143 C7 52 04         [ 1] 6420 	ld SPI_DR,a
      002146 72 01 52 03 FB   [ 2] 6421 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00214B C6 52 04         [ 1] 6422 	ld a,SPI_DR 
      00214E 81               [ 4] 6423 	ret 
                                   6424 
      00214F                       6425 spi_rcv_byte:
      00214F A6 FF            [ 1] 6426 	ld a,#255
      002151 72 01 52 03 E3   [ 2] 6427 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002156 C6 52 04         [ 1] 6428 	ld a,SPI_DR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002159 81               [ 4] 6429 	ret
                                   6430 
                                   6431 ;------------------------------
                                   6432 ; BASIC: SPIWR byte [,byte]
                                   6433 ; write 1 or more byte
                                   6434 ;------------------------------
      00215A                       6435 spi_write:
      00215A CD 0F E6         [ 4] 6436 	call expression
      00215D A1 04            [ 1] 6437 	cp a,#TK_INTGR 
      00215F 27 03            [ 1] 6438 	jreq 1$
      002161 CC 07 5D         [ 2] 6439 	jp syntax_error 
      002164                       6440 1$:	
      002164 9F               [ 1] 6441 	ld a,xl 
      002165 CD 21 39         [ 4] 6442 	call spi_send_byte 
      002168 CD 08 10         [ 4] 6443 	call next_token 
      00216B A1 0D            [ 1] 6444 	cp a,#TK_COMMA 
      00216D 26 02            [ 1] 6445 	jrne 2$ 
      00216F 20 E9            [ 2] 6446 	jra spi_write 
      002171 4D               [ 1] 6447 2$:	tnz a 
      002172 27 05            [ 1] 6448 	jreq 3$
      002174                       6449 	_unget_token  
      002174 55 00 02 00 01   [ 1]    1     mov in,in.saved
      002179 81               [ 4] 6450 3$:	ret 
                                   6451 
                                   6452 
                                   6453 ;-------------------------------
                                   6454 ; BASIC: SPIRD 	
                                   6455 ; read one byte from SPI 
                                   6456 ;-------------------------------
      00217A                       6457 spi_read:
      00217A CD 21 4F         [ 4] 6458 	call spi_rcv_byte 
      00217D 5F               [ 1] 6459 	clrw x 
      00217E 97               [ 1] 6460 	ld xl,a 
      00217F A6 04            [ 1] 6461 	ld a,#TK_INTGR 
      002181 81               [ 4] 6462 	ret 
                                   6463 
                                   6464 ;------------------------------
                                   6465 ; BASIC: SPISEL 0|1 
                                   6466 ; set state of ~CS line
                                   6467 ; 0|1 deselect|select  
                                   6468 ;------------------------------
      002182                       6469 spi_select:
      002182 CD 08 10         [ 4] 6470 	call next_token 
      002185 A1 04            [ 1] 6471 	cp a,#TK_INTGR 
      002187 27 03            [ 1] 6472 	jreq 1$
      002189 CC 07 5D         [ 2] 6473 	jp syntax_error 
      00218C 5D               [ 2] 6474 1$: tnzw x  
      00218D 27 05            [ 1] 6475 	jreq cs_high 
      00218F 72 1B 50 14      [ 1] 6476 	bres PE_ODR,#SPI_CS_BIT
      002193 81               [ 4] 6477 	ret 
      002194                       6478 cs_high: 
      002194 72 1A 50 14      [ 1] 6479 	bset PE_ODR,#SPI_CS_BIT
      002198 81               [ 4] 6480 	ret 
                                   6481 
                                   6482 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                   6483 ;------------------------------
                                   6484 ; BASIC: FILERX
                                   6485 ; Use to receive a BASIC program
                                   6486 ; from the PC using XMODEM 
                                   6487 ; protocol. The file is store in
                                   6488 ; Each line received is compiled
                                   6489 ; then stored in RAM. When reception 
                                   6490 ; is completed with success  the 
                                   6491 ; program is ready to be executed 
                                   6492 ; or save as local file.
                                   6493 ;--------------------------------
      002199                       6494 file_receive:
      002199 72 01 00 25 05   [ 2] 6495 	btjf flags,#FRUN,1$
      00219E A6 07            [ 1] 6496 	ld a,#ERR_CMD_ONLY
      0021A0 CC 07 5F         [ 2] 6497 	jp tb_error 
      0021A3                       6498 1$:	
      0021A3 CD 05 FF         [ 4] 6499 	call clear_basic
      0021A6 CE 00 1E         [ 2] 6500 	ldw x, txtbgn
      0021A9 CD 00 00         [ 4] 6501 	call xreceive 
      0021AC 72 BB 00 1E      [ 2] 6502 	addw x,txtbgn 
      0021B0 CF 00 20         [ 2] 6503 	ldw txtend,x 
      0021B3 CD 08 A9         [ 4] 6504 	call print_int 
      0021B6 AE 21 BD         [ 2] 6505 	ldw x,#fsize_msg 
      0021B9 CD 01 D7         [ 4] 6506 	call puts 
      0021BC 81               [ 4] 6507 	ret 
      0021BD 20 62 79 74 65 73 20  6508 fsize_msg: .asciz " bytes received\n"
             72 65 63 65 69 76 65
             64 0A 00
                                   6509 
                                   6510 ;------------------------------
                                   6511 ; BASIC: FILETX "file_name" 
                                   6512 ; Transmit the program in RAM 
                                   6513 ; To the PC using XMODEM protocol.
                                   6514 ; The file transmitted as source 
                                   6515 ; file not tokenized. 
                                   6516 ;-------------------------------
      0021CE                       6517 file_transmit:
                                   6518 
      0021CE 81               [ 4] 6519 	ret 
                                   6520 
                                   6521 
                                   6522 ;------------------------------
                                   6523 ;      dictionary 
                                   6524 ; format:
                                   6525 ;   link:   2 bytes 
                                   6526 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6527 ;   cmd_name: 16 byte max 
                                   6528 ;   code_address: 2 bytes 
                                   6529 ;------------------------------
                                   6530 	.macro _dict_entry len,name,cmd 
                                   6531 	.word LINK 
                                   6532 	LINK=.
                                   6533 name:
                                   6534 	.byte len 	
                                   6535 	.ascii "name"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                   6536 	.word cmd 
                                   6537 	.endm 
                                   6538 
                           000000  6539 	LINK=0
                                   6540 ; respect alphabetic order for BASIC names from Z-A
                                   6541 ; this sort order is for a cleaner WORDS cmd output. 	
      0021CF                       6542 kword_end:
      0021CF                       6543 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      0021CF 00 00                    1 	.word LINK 
                           0021D1     2 	LINK=.
      0021D1                          3 XPEEK:
      0021D1 45                       4 	.byte 5+F_IFUNC 	
      0021D2 58 50 45 45 4B           5 	.ascii "XPEEK"
      0021D7 15 58                    6 	.word xpeek 
      0021D9                       6544 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0021D9 21 D1                    1 	.word LINK 
                           0021DB     2 	LINK=.
      0021DB                          3 XOR:
      0021DB 43                       4 	.byte 3+F_IFUNC 	
      0021DC 58 4F 52                 5 	.ascii "XOR"
      0021DF 1D 26                    6 	.word bit_xor 
      0021E1                       6545 	_dict_entry,5,WRITE,write  
      0021E1 21 DB                    1 	.word LINK 
                           0021E3     2 	LINK=.
      0021E3                          3 WRITE:
      0021E3 05                       4 	.byte 5 	
      0021E4 57 52 49 54 45           5 	.ascii "WRITE"
      0021E9 1B 4C                    6 	.word write 
      0021EB                       6546 	_dict_entry,5,WORDS,words 
      0021EB 21 E3                    1 	.word LINK 
                           0021ED     2 	LINK=.
      0021ED                          3 WORDS:
      0021ED 05                       4 	.byte 5 	
      0021EE 57 4F 52 44 53           5 	.ascii "WORDS"
      0021F3 1E 54                    6 	.word words 
      0021F5                       6547 	_dict_entry 4,WAIT,wait 
      0021F5 21 ED                    1 	.word LINK 
                           0021F7     2 	LINK=.
      0021F7                          3 WAIT:
      0021F7 04                       4 	.byte 4 	
      0021F8 57 41 49 54              5 	.ascii "WAIT"
      0021FC 14 BB                    6 	.word wait 
      0021FE                       6548 	_dict_entry,3+F_IFUNC,USR,usr
      0021FE 21 F7                    1 	.word LINK 
                           002200     2 	LINK=.
      002200                          3 USR:
      002200 43                       4 	.byte 3+F_IFUNC 	
      002201 55 53 52                 5 	.ascii "USR"
      002204 1B F8                    6 	.word usr 
      002206                       6549 	_dict_entry,5,UNTIL,until 
      002206 22 00                    1 	.word LINK 
                           002208     2 	LINK=.
      002208                          3 UNTIL:
      002208 05                       4 	.byte 5 	
      002209 55 4E 54 49 4C           5 	.ascii "UNTIL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00220E 1F 77                    6 	.word until 
      002210                       6550 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002210 22 08                    1 	.word LINK 
                           002212     2 	LINK=.
      002212                          3 UFLASH:
      002212 46                       4 	.byte 6+F_IFUNC 	
      002213 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002219 1B F2                    6 	.word uflash 
      00221B                       6551 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      00221B 22 12                    1 	.word LINK 
                           00221D     2 	LINK=.
      00221D                          3 UBOUND:
      00221D 46                       4 	.byte 6+F_IFUNC 	
      00221E 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002224 11 37                    6 	.word ubound 
      002226                       6552 	_dict_entry,4,TONE,tone  
      002226 22 1D                    1 	.word LINK 
                           002228     2 	LINK=.
      002228                          3 TONE:
      002228 04                       4 	.byte 4 	
      002229 54 4F 4E 45              5 	.ascii "TONE"
      00222D 17 1A                    6 	.word tone 
      00222F                       6553 	_dict_entry,2,TO,to
      00222F 22 28                    1 	.word LINK 
                           002231     2 	LINK=.
      002231                          3 TO:
      002231 02                       4 	.byte 2 	
      002232 54 4F                    5 	.ascii "TO"
      002234 15 B1                    6 	.word to 
      002236                       6554 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002236 22 31                    1 	.word LINK 
                           002238     2 	LINK=.
      002238                          3 TIMEOUT:
      002238 47                       4 	.byte 7+F_IFUNC 	
      002239 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002240 1E C9                    6 	.word timeout 
      002242                       6555 	_dict_entry,5,TIMER,set_timer
      002242 22 38                    1 	.word LINK 
                           002244     2 	LINK=.
      002244                          3 TIMER:
      002244 05                       4 	.byte 5 	
      002245 54 49 4D 45 52           5 	.ascii "TIMER"
      00224A 1E BA                    6 	.word set_timer 
      00224C                       6556 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00224C 22 44                    1 	.word LINK 
                           00224E     2 	LINK=.
      00224E                          3 TICKS:
      00224E 45                       4 	.byte 5+F_IFUNC 	
      00224F 54 49 43 4B 53           5 	.ascii "TICKS"
      002254 1C DC                    6 	.word get_ticks 
      002256                       6557 	_dict_entry,4,STOP,stop 
      002256 22 4E                    1 	.word LINK 
                           002258     2 	LINK=.
      002258                          3 STOP:
      002258 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002259 53 54 4F 50              5 	.ascii "STOP"
      00225D 18 3E                    6 	.word stop 
      00225F                       6558 	_dict_entry,4,STEP,step 
      00225F 22 58                    1 	.word LINK 
                           002261     2 	LINK=.
      002261                          3 STEP:
      002261 04                       4 	.byte 4 	
      002262 53 54 45 50              5 	.ascii "STEP"
      002266 15 E1                    6 	.word step 
      002268                       6559 	_dict_entry,5,SPIWR,spi_write
      002268 22 61                    1 	.word LINK 
                           00226A     2 	LINK=.
      00226A                          3 SPIWR:
      00226A 05                       4 	.byte 5 	
      00226B 53 50 49 57 52           5 	.ascii "SPIWR"
      002270 21 5A                    6 	.word spi_write 
      002272                       6560 	_dict_entry,6,SPISEL,spi_select
      002272 22 6A                    1 	.word LINK 
                           002274     2 	LINK=.
      002274                          3 SPISEL:
      002274 06                       4 	.byte 6 	
      002275 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00227B 21 82                    6 	.word spi_select 
      00227D                       6561 	_dict_entry,5,SPIEN,spi_enable 
      00227D 22 74                    1 	.word LINK 
                           00227F     2 	LINK=.
      00227F                          3 SPIEN:
      00227F 05                       4 	.byte 5 	
      002280 53 50 49 45 4E           5 	.ascii "SPIEN"
      002285 20 E3                    6 	.word spi_enable 
      002287                       6562 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      002287 22 7F                    1 	.word LINK 
                           002289     2 	LINK=.
      002289                          3 SPIRD:
      002289 45                       4 	.byte 5+F_IFUNC 	
      00228A 53 50 49 52 44           5 	.ascii "SPIRD"
      00228F 21 7A                    6 	.word spi_read 
      002291                       6563 	_dict_entry,5,SLEEP,sleep 
      002291 22 89                    1 	.word LINK 
                           002293     2 	LINK=.
      002293                          3 SLEEP:
      002293 05                       4 	.byte 5 	
      002294 53 4C 45 45 50           5 	.ascii "SLEEP"
      002299 1C 75                    6 	.word sleep 
      00229B                       6564 	_dict_entry,4+F_IFUNC,SIZE,size
      00229B 22 93                    1 	.word LINK 
                           00229D     2 	LINK=.
      00229D                          3 SIZE:
      00229D 44                       4 	.byte 4+F_IFUNC 	
      00229E 53 49 5A 45              5 	.ascii "SIZE"
      0022A2 11 2D                    6 	.word size 
      0022A4                       6565     _dict_entry,4,SHOW,show 
      0022A4 22 9D                    1 	.word LINK 
                           0022A6     2 	LINK=.
      0022A6                          3 SHOW:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0022A6 04                       4 	.byte 4 	
      0022A7 53 48 4F 57              5 	.ascii "SHOW"
      0022AB 10 81                    6 	.word show 
      0022AD                       6566 	_dict_entry,4,SAVE,save
      0022AD 22 A6                    1 	.word LINK 
                           0022AF     2 	LINK=.
      0022AF                          3 SAVE:
      0022AF 04                       4 	.byte 4 	
      0022B0 53 41 56 45              5 	.ascii "SAVE"
      0022B4 19 4C                    6 	.word save 
      0022B6                       6567 	_dict_entry 3,RUN,run
      0022B6 22 AF                    1 	.word LINK 
                           0022B8     2 	LINK=.
      0022B8                          3 RUN:
      0022B8 03                       4 	.byte 3 	
      0022B9 52 55 4E                 5 	.ascii "RUN"
      0022BC 16 C1                    6 	.word run 
      0022BE                       6568 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0022BE 22 B8                    1 	.word LINK 
                           0022C0     2 	LINK=.
      0022C0                          3 RSHIFT:
      0022C0 46                       4 	.byte 6+F_IFUNC 	
      0022C1 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0022C7 1D 57                    6 	.word rshift 
      0022C9                       6569 	_dict_entry,3+F_IFUNC,RND,random 
      0022C9 22 C0                    1 	.word LINK 
                           0022CB     2 	LINK=.
      0022CB                          3 RND:
      0022CB 43                       4 	.byte 3+F_IFUNC 	
      0022CC 52 4E 44                 5 	.ascii "RND"
      0022CF 1D ED                    6 	.word random 
      0022D1                       6570 	_dict_entry,6,RETURN,return 
      0022D1 22 CB                    1 	.word LINK 
                           0022D3     2 	LINK=.
      0022D3                          3 RETURN:
      0022D3 06                       4 	.byte 6 	
      0022D4 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0022DA 16 A3                    6 	.word return 
      0022DC                       6571 	_dict_entry,7,RESTORE,restore 
      0022DC 22 D3                    1 	.word LINK 
                           0022DE     2 	LINK=.
      0022DE                          3 RESTORE:
      0022DE 07                       4 	.byte 7 	
      0022DF 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0022E6 20 3E                    6 	.word restore 
      0022E8                       6572 	_dict_entry 6,REMARK,remark 
      0022E8 22 DE                    1 	.word LINK 
                           0022EA     2 	LINK=.
      0022EA                          3 REMARK:
      0022EA 06                       4 	.byte 6 	
      0022EB 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0022F1 14 B5                    6 	.word remark 
      0022F3                       6573 	_dict_entry,6,REBOOT,cold_start
      0022F3 22 EA                    1 	.word LINK 
                           0022F5     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0022F5                          3 REBOOT:
      0022F5 06                       4 	.byte 6 	
      0022F6 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0022FC 04 ED                    6 	.word cold_start 
      0022FE                       6574 	_dict_entry,4+F_IFUNC,READ,read  
      0022FE 22 F5                    1 	.word LINK 
                           002300     2 	LINK=.
      002300                          3 READ:
      002300 44                       4 	.byte 4+F_IFUNC 	
      002301 52 45 41 44              5 	.ascii "READ"
      002305 20 89                    6 	.word read 
      002307                       6575 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002307 23 00                    1 	.word LINK 
                           002309     2 	LINK=.
      002309                          3 QKEY:
      002309 44                       4 	.byte 4+F_IFUNC 	
      00230A 51 4B 45 59              5 	.ascii "QKEY"
      00230E 1B BD                    6 	.word qkey 
      002310                       6576 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      002310 23 09                    1 	.word LINK 
                           002312     2 	LINK=.
      002312                          3 PRTI:
      002312 44                       4 	.byte 4+F_IFUNC 	
      002313 50 52 54 49              5 	.ascii "PRTI"
      002317 1F D5                    6 	.word const_porti 
      002319                       6577 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      002319 23 12                    1 	.word LINK 
                           00231B     2 	LINK=.
      00231B                          3 PRTH:
      00231B 44                       4 	.byte 4+F_IFUNC 	
      00231C 50 52 54 48              5 	.ascii "PRTH"
      002320 1F CF                    6 	.word const_porth 
      002322                       6578 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      002322 23 1B                    1 	.word LINK 
                           002324     2 	LINK=.
      002324                          3 PRTG:
      002324 44                       4 	.byte 4+F_IFUNC 	
      002325 50 52 54 47              5 	.ascii "PRTG"
      002329 1F C9                    6 	.word const_portg 
      00232B                       6579 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      00232B 23 24                    1 	.word LINK 
                           00232D     2 	LINK=.
      00232D                          3 PRTF:
      00232D 44                       4 	.byte 4+F_IFUNC 	
      00232E 50 52 54 46              5 	.ascii "PRTF"
      002332 1F C3                    6 	.word const_portf 
      002334                       6580 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      002334 23 2D                    1 	.word LINK 
                           002336     2 	LINK=.
      002336                          3 PRTE:
      002336 44                       4 	.byte 4+F_IFUNC 	
      002337 50 52 54 45              5 	.ascii "PRTE"
      00233B 1F BD                    6 	.word const_porte 
      00233D                       6581 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      00233D 23 36                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           00233F     2 	LINK=.
      00233F                          3 PRTD:
      00233F 44                       4 	.byte 4+F_IFUNC 	
      002340 50 52 54 44              5 	.ascii "PRTD"
      002344 1F B7                    6 	.word const_portd 
      002346                       6582 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      002346 23 3F                    1 	.word LINK 
                           002348     2 	LINK=.
      002348                          3 PRTC:
      002348 44                       4 	.byte 4+F_IFUNC 	
      002349 50 52 54 43              5 	.ascii "PRTC"
      00234D 1F B1                    6 	.word const_portc 
      00234F                       6583 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      00234F 23 48                    1 	.word LINK 
                           002351     2 	LINK=.
      002351                          3 PRTB:
      002351 44                       4 	.byte 4+F_IFUNC 	
      002352 50 52 54 42              5 	.ascii "PRTB"
      002356 1F AB                    6 	.word const_portb 
      002358                       6584 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      002358 23 51                    1 	.word LINK 
                           00235A     2 	LINK=.
      00235A                          3 PRTA:
      00235A 44                       4 	.byte 4+F_IFUNC 	
      00235B 50 52 54 41              5 	.ascii "PRTA"
      00235F 1F A5                    6 	.word const_porta 
      002361                       6585 	_dict_entry 5,PRINT,print 
      002361 23 5A                    1 	.word LINK 
                           002363     2 	LINK=.
      002363                          3 PRINT:
      002363 05                       4 	.byte 5 	
      002364 50 52 49 4E 54           5 	.ascii "PRINT"
      002369 13 C8                    6 	.word print 
      00236B                       6586 	_dict_entry,4+F_IFUNC,POUT,const_output
      00236B 23 63                    1 	.word LINK 
                           00236D     2 	LINK=.
      00236D                          3 POUT:
      00236D 44                       4 	.byte 4+F_IFUNC 	
      00236E 50 4F 55 54              5 	.ascii "POUT"
      002372 1F F9                    6 	.word const_output 
      002374                       6587 	_dict_entry,4,POKE,poke 
      002374 23 6D                    1 	.word LINK 
                           002376     2 	LINK=.
      002376                          3 POKE:
      002376 04                       4 	.byte 4 	
      002377 50 4F 4B 45              5 	.ascii "POKE"
      00237B 15 38                    6 	.word poke 
      00237D                       6588 	_dict_entry,4+F_IFUNC,PINP,const_input
      00237D 23 76                    1 	.word LINK 
                           00237F     2 	LINK=.
      00237F                          3 PINP:
      00237F 44                       4 	.byte 4+F_IFUNC 	
      002380 50 49 4E 50              5 	.ascii "PINP"
      002384 1F FF                    6 	.word const_input 
      002386                       6589 	_dict_entry,4+F_IFUNC,PEEK,peek 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002386 23 7F                    1 	.word LINK 
                           002388     2 	LINK=.
      002388                          3 PEEK:
      002388 44                       4 	.byte 4+F_IFUNC 	
      002389 50 45 45 4B              5 	.ascii "PEEK"
      00238D 15 47                    6 	.word peek 
      00238F                       6590 	_dict_entry,5,PMODE,pin_mode 
      00238F 23 88                    1 	.word LINK 
                           002391     2 	LINK=.
      002391                          3 PMODE:
      002391 05                       4 	.byte 5 	
      002392 50 4D 4F 44 45           5 	.ascii "PMODE"
      002397 1D 7C                    6 	.word pin_mode 
      002399                       6591 	_dict_entry,5,PAUSE,pause 
      002399 23 91                    1 	.word LINK 
                           00239B     2 	LINK=.
      00239B                          3 PAUSE:
      00239B 05                       4 	.byte 5 	
      00239C 50 41 55 53 45           5 	.ascii "PAUSE"
      0023A1 1C 80                    6 	.word pause 
      0023A3                       6592 	_dict_entry,2+F_IFUNC,OR,bit_or
      0023A3 23 9B                    1 	.word LINK 
                           0023A5     2 	LINK=.
      0023A5                          3 OR:
      0023A5 42                       4 	.byte 2+F_IFUNC 	
      0023A6 4F 52                    5 	.ascii "OR"
      0023A8 1D 0E                    6 	.word bit_or 
      0023AA                       6593 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0023AA 23 A5                    1 	.word LINK 
                           0023AC     2 	LINK=.
      0023AC                          3 ODR:
      0023AC 43                       4 	.byte 3+F_IFUNC 	
      0023AD 4F 44 52                 5 	.ascii "ODR"
      0023B0 1F DB                    6 	.word const_odr 
      0023B2                       6594 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0023B2 23 AC                    1 	.word LINK 
                           0023B4     2 	LINK=.
      0023B4                          3 NOT:
      0023B4 43                       4 	.byte 3+F_IFUNC 	
      0023B5 4E 4F 54                 5 	.ascii "NOT"
      0023B8 1E D6                    6 	.word func_not 
      0023BA                       6595 	_dict_entry,3,NEW,new
      0023BA 23 B4                    1 	.word LINK 
                           0023BC     2 	LINK=.
      0023BC                          3 NEW:
      0023BC 03                       4 	.byte 3 	
      0023BD 4E 45 57                 5 	.ascii "NEW"
      0023C0 18 8A                    6 	.word new 
      0023C2                       6596 	_dict_entry,4,NEXT,next 
      0023C2 23 BC                    1 	.word LINK 
                           0023C4     2 	LINK=.
      0023C4                          3 NEXT:
      0023C4 04                       4 	.byte 4 	
      0023C5 4E 45 58 54              5 	.ascii "NEXT"
      0023C9 16 08                    6 	.word next 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0023CB                       6597 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0023CB 23 C4                    1 	.word LINK 
                           0023CD     2 	LINK=.
      0023CD                          3 LSHIFT:
      0023CD 46                       4 	.byte 6+F_IFUNC 	
      0023CE 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0023D4 1D 3E                    6 	.word lshift 
      0023D6                       6598 	_dict_entry,3+F_IFUNC,LOG,log2 
      0023D6 23 CD                    1 	.word LINK 
                           0023D8     2 	LINK=.
      0023D8                          3 LOG:
      0023D8 43                       4 	.byte 3+F_IFUNC 	
      0023D9 4C 4F 47                 5 	.ascii "LOG"
      0023DC 1F 1E                    6 	.word log2 
      0023DE                       6599 	_dict_entry,4,LOAD,load 
      0023DE 23 D8                    1 	.word LINK 
                           0023E0     2 	LINK=.
      0023E0                          3 LOAD:
      0023E0 04                       4 	.byte 4 	
      0023E1 4C 4F 41 44              5 	.ascii "LOAD"
      0023E5 1A 3C                    6 	.word load 
      0023E7                       6600 	_dict_entry 4,LIST,list
      0023E7 23 E0                    1 	.word LINK 
                           0023E9     2 	LINK=.
      0023E9                          3 LIST:
      0023E9 04                       4 	.byte 4 	
      0023EA 4C 49 53 54              5 	.ascii "LIST"
      0023EE 11 84                    6 	.word list 
      0023F0                       6601 	_dict_entry 3,LET,let 
      0023F0 23 E9                    1 	.word LINK 
                           0023F2     2 	LINK=.
      0023F2                          3 LET:
      0023F2 03                       4 	.byte 3 	
      0023F3 4C 45 54                 5 	.ascii "LET"
      0023F6 11 59                    6 	.word let 
      0023F8                       6602 	_dict_entry,3+F_IFUNC,KEY,key 
      0023F8 23 F2                    1 	.word LINK 
                           0023FA     2 	LINK=.
      0023FA                          3 KEY:
      0023FA 43                       4 	.byte 3+F_IFUNC 	
      0023FB 4B 45 59                 5 	.ascii "KEY"
      0023FE 1B B5                    6 	.word key 
      002400                       6603 	_dict_entry,7,IWDGREF,refresh_iwdg
      002400 23 FA                    1 	.word LINK 
                           002402     2 	LINK=.
      002402                          3 IWDGREF:
      002402 07                       4 	.byte 7 	
      002403 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00240A 1F 19                    6 	.word refresh_iwdg 
      00240C                       6604 	_dict_entry,6,IWDGEN,enable_iwdg
      00240C 24 02                    1 	.word LINK 
                           00240E     2 	LINK=.
      00240E                          3 IWDGEN:
      00240E 06                       4 	.byte 6 	
      00240F 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002415 1E E3                    6 	.word enable_iwdg 
      002417                       6605 	_dict_entry,6+F_IFUNC,INVERT,invert 
      002417 24 0E                    1 	.word LINK 
                           002419     2 	LINK=.
      002419                          3 INVERT:
      002419 46                       4 	.byte 6+F_IFUNC 	
      00241A 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002420 1F 53                    6 	.word invert 
      002422                       6606 	_dict_entry,5,INPUT,input_var  
      002422 24 19                    1 	.word LINK 
                           002424     2 	LINK=.
      002424                          3 INPUT:
      002424 05                       4 	.byte 5 	
      002425 49 4E 50 55 54           5 	.ascii "INPUT"
      00242A 14 54                    6 	.word input_var 
      00242C                       6607 	_dict_entry,2,IF,if 
      00242C 24 24                    1 	.word LINK 
                           00242E     2 	LINK=.
      00242E                          3 IF:
      00242E 02                       4 	.byte 2 	
      00242F 49 46                    5 	.ascii "IF"
      002431 15 74                    6 	.word if 
      002433                       6608 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      002433 24 2E                    1 	.word LINK 
                           002435     2 	LINK=.
      002435                          3 IDR:
      002435 43                       4 	.byte 3+F_IFUNC 	
      002436 49 44 52                 5 	.ascii "IDR"
      002439 1F E1                    6 	.word const_idr 
      00243B                       6609 	_dict_entry,3,HEX,hex_base
      00243B 24 35                    1 	.word LINK 
                           00243D     2 	LINK=.
      00243D                          3 HEX:
      00243D 03                       4 	.byte 3 	
      00243E 48 45 58                 5 	.ascii "HEX"
      002441 11 23                    6 	.word hex_base 
      002443                       6610 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002443 24 3D                    1 	.word LINK 
                           002445     2 	LINK=.
      002445                          3 GPIO:
      002445 44                       4 	.byte 4+F_IFUNC 	
      002446 47 50 49 4F              5 	.ascii "GPIO"
      00244A 1B C8                    6 	.word gpio 
      00244C                       6611 	_dict_entry,4,GOTO,goto 
      00244C 24 45                    1 	.word LINK 
                           00244E     2 	LINK=.
      00244E                          3 GOTO:
      00244E 04                       4 	.byte 4 	
      00244F 47 4F 54 4F              5 	.ascii "GOTO"
      002453 16 68                    6 	.word goto 
      002455                       6612 	_dict_entry,5,GOSUB,gosub 
      002455 24 4E                    1 	.word LINK 
                           002457     2 	LINK=.
      002457                          3 GOSUB:
      002457 05                       4 	.byte 5 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      002458 47 4F 53 55 42           5 	.ascii "GOSUB"
      00245D 16 83                    6 	.word gosub 
      00245F                       6613 	_dict_entry,6,FORGET,forget 
      00245F 24 57                    1 	.word LINK 
                           002461     2 	LINK=.
      002461                          3 FORGET:
      002461 06                       4 	.byte 6 	
      002462 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002468 1A 71                    6 	.word forget 
      00246A                       6614 	_dict_entry,3,FOR,for 
      00246A 24 61                    1 	.word LINK 
                           00246C     2 	LINK=.
      00246C                          3 FOR:
      00246C 03                       4 	.byte 3 	
      00246D 46 4F 52                 5 	.ascii "FOR"
      002470 15 88                    6 	.word for 
      002472                       6615 	_dict_entry,6,FILETX,file_transmit
      002472 24 6C                    1 	.word LINK 
                           002474     2 	LINK=.
      002474                          3 FILETX:
      002474 06                       4 	.byte 6 	
      002475 46 49 4C 45 54 58        5 	.ascii "FILETX"
      00247B 21 CE                    6 	.word file_transmit 
      00247D                       6616 	_dict_entry,6,FILERX,file_receive 
      00247D 24 74                    1 	.word LINK 
                           00247F     2 	LINK=.
      00247F                          3 FILERX:
      00247F 06                       4 	.byte 6 	
      002480 46 49 4C 45 52 58        5 	.ascii "FILERX"
      002486 21 99                    6 	.word file_receive 
      002488                       6617 	_dict_entry,4,FCPU,fcpu 
      002488 24 7F                    1 	.word LINK 
                           00248A     2 	LINK=.
      00248A                          3 FCPU:
      00248A 04                       4 	.byte 4 	
      00248B 46 43 50 55              5 	.ascii "FCPU"
      00248F 1D 70                    6 	.word fcpu 
      002491                       6618 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      002491 24 8A                    1 	.word LINK 
                           002493     2 	LINK=.
      002493                          3 EEPROM:
      002493 46                       4 	.byte 6+F_IFUNC 	
      002494 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00249A 20 05                    6 	.word const_eeprom_base 
      00249C                       6619 	_dict_entry,3,END,cmd_end  
      00249C 24 93                    1 	.word LINK 
                           00249E     2 	LINK=.
      00249E                          3 END:
      00249E 03                       4 	.byte 3 	
      00249F 45 4E 44                 5 	.ascii "END"
      0024A2 17 13                    6 	.word cmd_end 
      0024A4                       6620 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0024A4 24 9E                    1 	.word LINK 
                           0024A6     2 	LINK=.
      0024A6                          3 DWRITE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0024A6 06                       4 	.byte 6+F_CMD 	
      0024A7 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0024AD 18 03                    6 	.word digital_write 
      0024AF                       6621 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0024AF 24 A6                    1 	.word LINK 
                           0024B1     2 	LINK=.
      0024B1                          3 DREAD:
      0024B1 45                       4 	.byte 5+F_IFUNC 	
      0024B2 44 52 45 41 44           5 	.ascii "DREAD"
      0024B7 17 D3                    6 	.word digital_read 
      0024B9                       6622 	_dict_entry,2,DO,do_loop
      0024B9 24 B1                    1 	.word LINK 
                           0024BB     2 	LINK=.
      0024BB                          3 DO:
      0024BB 02                       4 	.byte 2 	
      0024BC 44 4F                    5 	.ascii "DO"
      0024BE 1F 62                    6 	.word do_loop 
      0024C0                       6623 	_dict_entry,3,DIR,directory 
      0024C0 24 BB                    1 	.word LINK 
                           0024C2     2 	LINK=.
      0024C2                          3 DIR:
      0024C2 03                       4 	.byte 3 	
      0024C3 44 49 52                 5 	.ascii "DIR"
      0024C6 1A B6                    6 	.word directory 
      0024C8                       6624 	_dict_entry,3,DEC,dec_base
      0024C8 24 C2                    1 	.word LINK 
                           0024CA     2 	LINK=.
      0024CA                          3 DEC:
      0024CA 03                       4 	.byte 3 	
      0024CB 44 45 43                 5 	.ascii "DEC"
      0024CE 11 28                    6 	.word dec_base 
      0024D0                       6625 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0024D0 24 CA                    1 	.word LINK 
                           0024D2     2 	LINK=.
      0024D2                          3 DDR:
      0024D2 43                       4 	.byte 3+F_IFUNC 	
      0024D3 44 44 52                 5 	.ascii "DDR"
      0024D6 1F E7                    6 	.word const_ddr 
      0024D8                       6626 	_dict_entry,6,DATALN,data_line  
      0024D8 24 D2                    1 	.word LINK 
                           0024DA     2 	LINK=.
      0024DA                          3 DATALN:
      0024DA 06                       4 	.byte 6 	
      0024DB 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      0024E1 20 11                    6 	.word data_line 
      0024E3                       6627 	_dict_entry,4,DATA,data  
      0024E3 24 DA                    1 	.word LINK 
                           0024E5     2 	LINK=.
      0024E5                          3 DATA:
      0024E5 04                       4 	.byte 4 	
      0024E6 44 41 54 41              5 	.ascii "DATA"
      0024EA 20 0B                    6 	.word data 
      0024EC                       6628 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      0024EC 24 E5                    1 	.word LINK 
                           0024EE     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0024EE                          3 CRL:
      0024EE 43                       4 	.byte 3+F_IFUNC 	
      0024EF 43 52 4C                 5 	.ascii "CRL"
      0024F2 1F ED                    6 	.word const_cr1 
      0024F4                       6629 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      0024F4 24 EE                    1 	.word LINK 
                           0024F6     2 	LINK=.
      0024F6                          3 CRH:
      0024F6 43                       4 	.byte 3+F_IFUNC 	
      0024F7 43 52 48                 5 	.ascii "CRH"
      0024FA 1F F3                    6 	.word const_cr2 
      0024FC                       6630 	_dict_entry,4+F_CFUNC,CHAR,char
      0024FC 24 F6                    1 	.word LINK 
                           0024FE     2 	LINK=.
      0024FE                          3 CHAR:
      0024FE 84                       4 	.byte 4+F_CFUNC 	
      0024FF 43 48 41 52              5 	.ascii "CHAR"
      002503 1B 83                    6 	.word char 
      002505                       6631 	_dict_entry,3,BYE,bye 
      002505 24 FE                    1 	.word LINK 
                           002507     2 	LINK=.
      002507                          3 BYE:
      002507 03                       4 	.byte 3 	
      002508 42 59 45                 5 	.ascii "BYE"
      00250B 1C 15                    6 	.word bye 
      00250D                       6632 	_dict_entry,5,BTOGL,bit_toggle
      00250D 25 07                    1 	.word LINK 
                           00250F     2 	LINK=.
      00250F                          3 BTOGL:
      00250F 05                       4 	.byte 5 	
      002510 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002515 15 01                    6 	.word bit_toggle 
      002517                       6633 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002517 25 0F                    1 	.word LINK 
                           002519     2 	LINK=.
      002519                          3 BTEST:
      002519 45                       4 	.byte 5+F_IFUNC 	
      00251A 42 54 45 53 54           5 	.ascii "BTEST"
      00251F 15 11                    6 	.word bit_test 
      002521                       6634 	_dict_entry,4,BSET,bit_set 
      002521 25 19                    1 	.word LINK 
                           002523     2 	LINK=.
      002523                          3 BSET:
      002523 04                       4 	.byte 4 	
      002524 42 53 45 54              5 	.ascii "BSET"
      002528 14 E0                    6 	.word bit_set 
      00252A                       6635 	_dict_entry,4,BRES,bit_reset
      00252A 25 23                    1 	.word LINK 
                           00252C     2 	LINK=.
      00252C                          3 BRES:
      00252C 04                       4 	.byte 4 	
      00252D 42 52 45 53              5 	.ascii "BRES"
      002531 14 F0                    6 	.word bit_reset 
      002533                       6636 	_dict_entry,3+F_IFUNC,BIT,bitmask
      002533 25 2C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                           002535     2 	LINK=.
      002535                          3 BIT:
      002535 43                       4 	.byte 3+F_IFUNC 	
      002536 42 49 54                 5 	.ascii "BIT"
      002539 1F 39                    6 	.word bitmask 
      00253B                       6637 	_dict_entry,3,AWU,awu 
      00253B 25 35                    1 	.word LINK 
                           00253D     2 	LINK=.
      00253D                          3 AWU:
      00253D 03                       4 	.byte 3 	
      00253E 41 57 55                 5 	.ascii "AWU"
      002541 1C 93                    6 	.word awu 
      002543                       6638 	_dict_entry,7,AUTORUN,autorun
      002543 25 3D                    1 	.word LINK 
                           002545     2 	LINK=.
      002545                          3 AUTORUN:
      002545 07                       4 	.byte 7 	
      002546 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      00254D 1C 1E                    6 	.word autorun 
      00254F                       6639 	_dict_entry,3+F_IFUNC,ASC,ascii
      00254F 25 45                    1 	.word LINK 
                           002551     2 	LINK=.
      002551                          3 ASC:
      002551 43                       4 	.byte 3+F_IFUNC 	
      002552 41 53 43                 5 	.ascii "ASC"
      002555 1B 95                    6 	.word ascii 
      002557                       6640 	_dict_entry,3+F_IFUNC,AND,bit_and
      002557 25 51                    1 	.word LINK 
                           002559     2 	LINK=.
      002559                          3 AND:
      002559 43                       4 	.byte 3+F_IFUNC 	
      00255A 41 4E 44                 5 	.ascii "AND"
      00255D 1C F6                    6 	.word bit_and 
      00255F                       6641 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00255F 25 59                    1 	.word LINK 
                           002561     2 	LINK=.
      002561                          3 ADCREAD:
      002561 47                       4 	.byte 7+F_IFUNC 	
      002562 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002569 17 9F                    6 	.word analog_read 
      00256B                       6642 	_dict_entry,5,ADCON,power_adc 
      00256B 25 61                    1 	.word LINK 
                           00256D     2 	LINK=.
      00256D                          3 ADCON:
      00256D 05                       4 	.byte 5 	
      00256E 41 44 43 4F 4E           5 	.ascii "ADCON"
      002573 17 63                    6 	.word power_adc 
      002575                       6643 kword_dict:
      002575                       6644 	_dict_entry,3+F_IFUNC,ABS,abs
      002575 25 6D                    1 	.word LINK 
                           002577     2 	LINK=.
      002577                          3 ABS:
      002577 43                       4 	.byte 3+F_IFUNC 	
      002578 41 42 53                 5 	.ascii "ABS"
      00257B 1C E2                    6 	.word abs 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                   6645 	
                                   6646 
      002580                       6647 	.bndry 128 ; align on FLASH block.
                                   6648 ; free space for user application  
      002580                       6649 user_space:
                                   6650 ; USR() function test
      002580 89               [ 2] 6651 	pushw x 
      002581 72 1A 50 0A      [ 1] 6652 	bset PC_ODR,#5 
      002585 85               [ 2] 6653 	popw x 
      002586 CD 1C 8A         [ 4] 6654 	call pause02 
      002589 72 1B 50 0A      [ 1] 6655 	bres PC_ODR,#5 
      00258D 81               [ 4] 6656 	ret
                                   6657 
                                   6658 	.area FLASH_DRIVE (ABS)
      010000                       6659 	.org 0x10000
      010000                       6660 fdrive:
                                   6661 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002577 R   |     ACK     =  000006 
  5 ADCON      00256D R   |   5 ADCREAD    002561 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        002559 R   |     ARG_OFS =  000002     |   5 ASC        002551 R
    ATTRIB  =  000002     |   5 AUTORUN    002545 R   |     AUTORUN_=  004000 
  5 AWU        00253D R   |   5 AWUHandl   000001 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   5 BIT        002535 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000B 
  5 BRES       00252C R   |     BS      =  000008     |     BSAVE   =  000002 
  5 BSET       002523 R   |     BSIZE   =  000001     |   5 BTEST      002519 R
  5 BTOGL      00250F R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        002507 R   |     C       =  000001     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       0024FE R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     COMMA   =  000001 
    COUNT   =  000001     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   5 CRH        0024F6 R   |   5 CRL        0024EE R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   5 DATA       0024E5 R
  5 DATALN     0024DA R   |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  5 DDR        0024D2 R   |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   5 DEC        0024CA R   |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   5 DIR        0024C2 R
    DIVIDND =  000007     |     DIVISR  =  000005     |     DIVSOR  =  000001 
    DLE     =  000010     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DO         0024BB R   |     DOLP_ADR=  000003     |     DOLP_INW=  000005 
  5 DREAD      0024B1 R   |   5 DWRITE     0024A6 R   |   5 EEPROM     002493 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EM      =  000019     |   5 END        00249E R   |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    FCOMP   =  000005     |   5 FCPU       00248A R   |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |   5 FILERX     00247F R
  5 FILETX     002474 R   |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   5 FOR        00246C R
  5 FORGET     002461 R   |     FRUN    =  000000     |     FS      =  00001C 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      002457 R
  5 GOTO       00244E R   |   5 GPIO       002445 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    GS      =  00001D     |   5 HEX        00243D R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        002435 R   |   5 IF         00242E R   |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      002424 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   5 INVERT     002419 R
    INW     =  000009     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  5 IWDGEN     00240E R   |   5 IWDGREF    002402 R   |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        0023FA R
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  5 LET        0023F2 R   |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   5 LINK    =  002577 R   |   5 LIST       0023E9 R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   5 LOAD       0023E0 R   |   5 LOG        0023D8 R
  5 LSHIFT     0023CD R   |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        0023BC R   |   5 NEXT       0023C4 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        0023B4 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R
  5 ODR        0023AC R   |     ONOFF   =  000003     |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   5 OR         0023A5 R   |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000028     |   5 PAUSE      00239B R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       002388 R   |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   5 PINP       00237F R   |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      002391 R   |   5 POKE       002376 R   |     PORT    =  000003 
  5 POUT       00236D R   |     PREV    =  000001     |   5 PRINT      002363 R
    PROD    =  000002     |   5 PRTA       00235A R   |   5 PRTB       002351 R
  5 PRTC       002348 R   |   5 PRTD       00233F R   |   5 PRTE       002336 R
  5 PRTF       00232D R   |   5 PRTG       002324 R   |   5 PRTH       00231B R
  5 PRTI       002312 R   |   5 QKEY       002309 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 READ       002300 R
  5 REBOOT     0022F5 R   |     REG     =  000001     |     RELOP   =  000005 
  5 REMARK     0022EA R   |   5 RESTORE    0022DE R   |     RETL1   =  000001 
  5 RETURN     0022D3 R   |     RET_ADDR=  000003     |     RET_INW =  000005 
  5 RND        0022CB R   |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     0022C0 R   |     RST_SR  =  0050B3     |   5 RUN        0022B8 R
    RXCHAR  =  000001     |   5 SAVE       0022AF R   |     SDIVD   =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       0022A6 R   |     SI      =  00000F     |     SIGN    =  000001 
  5 SIZE       00229D R   |     SKIP    =  000005     |   5 SLEEP      002293 R
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  5 SPIEN      00227F R   |   5 SPIRD      002289 R   |   5 SPISEL     002274 R
  5 SPIWR      00226A R   |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       002261 R   |   5 STOP       002258 R
    STX     =  000002     |     SUB     =  00001A     |     SWIM_CSR=  007F80 
    SYN     =  000016     |     TAB     =  000009     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      00224E R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    002238 R   |   5 TIMER      002244 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  00000A     |     TK_CFUNC=  000008 
    TK_CHAR =  000003     |     TK_CMD  =  000006     |     TK_COLON=  000001 
    TK_COMMA=  00000D     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000007     |     TK_INTGR=  000004 
    TK_LE   =  000036     |     TK_LPARE=  00000B     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  00000C     |     TK_SHARP=  00000E 
    TK_VAR  =  000005     |   5 TO         002231 R   |   5 TONE       002228 R
    TWSAVE  =  000001     |   5 Timer4Up   000037 R   |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     00221D R
  5 UBTN_Han   00007A R   |   5 UFLASH     002212 R   |   5 UNTIL      002208 R
    US      =  00001F     |   5 USER_ABO   000082 R   |     USE_BLOC=  000000 
  5 USR        002200 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 Uart1RxH   00000F R   |   5 UserButt   00004D R
    VAR_ADDR=  000006     |     VSIZ    =  000002     |     VSIZE   =  000006 
    VT      =  00000B     |   5 WAIT       0021F7 R   |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      0021ED R
  5 WRITE      0021E3 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        0021DB R   |   5 XPEEK      0021D1 R
    XSAVE   =  000005     |     YSAVE   =  000003     |   5 abs        001CE2 R
  1 acc16      00000C R   |   1 acc24      00000B R   |   1 acc8       00000D R
  5 accept_c   000A39 R   |   5 add        000D9B R   |   5 analog_r   00179F R
  5 ansi_seq   0009FB R   |   5 arduino_   001DCD R   |   5 arg_list   000EDA R
  1 array_si   000023 R   |   5 ascii      001B95 R   |   5 at_tst     000C0C R
  5 atoi24     000D16 R   |   5 atoi_exi   000D84 R   |   5 autorun    001C1E R
  5 autorun_   0005EA R   |   5 awu        001C93 R   |   5 awu02      001C9D R
  5 bad_port   001BED R   |   1 base       00000A R   |   1 basicptr   000004 R
  5 beep       001727 R   |   5 bin_exit   000B10 R   |   5 bit_and    001CF6 R
  5 bit_or     001D0E R   |   5 bit_rese   0014F0 R   |   5 bit_set    0014E0 R
  5 bit_test   001511 R   |   5 bit_togg   001501 R   |   5 bit_xor    001D26 R
  5 bitmask    001F39 R   |   5 bkslsh_t   000BB7 R   |   5 bksp       0001E1 R
  5 break_po   00186C R   |   5 bye        001C15 R   |   5 cancel_a   0005B2 R
  5 char       001B83 R   |   5 check_fu   000376 R   |   5 clear_ba   0005FF R
  5 clear_va   00047F R   |   5 clock_in   00009D R   |   5 cmd_end    001713 R
  5 cmd_line   0007AB R   |   5 cmd_name   000E46 R   |   5 cmp_name   0018E0 R
  5 cold_sta   0004ED R   |   5 colon_ts   000BE0 R   |   5 comma_ts   000BEB R
  5 compile    000385 R   |   5 const_cr   001FED R   |   5 const_cr   001FF3 R
  5 const_dd   001FE7 R   |   5 const_ee   002005 R   |   5 const_id   001FE1 R
  5 const_in   001FFF R   |   5 const_od   001FDB R   |   5 const_ou   001FF9 R
  5 const_po   001FA5 R   |   5 const_po   001FAB R   |   5 const_po   001FB1 R
  5 const_po   001FB7 R   |   5 const_po   001FBD R   |   5 const_po   001FC3 R
  5 const_po   001FC9 R   |   5 const_po   001FCF R   |   5 const_po   001FD5 R
  5 convert_   000A98 R   |   1 count      000003 R   |   5 cp_loop    000E89 R
  5 create_g   0002D5 R   |   5 cs_high    002194 R   |   5 cstk_pro   0010CD R
  5 dash_tst   000C01 R   |   5 data       00200B R   |   1 data_len   000009 R
  5 data_lin   002011 R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   002051 R   |   5 dec_base   001128 R   |   5 del_back   000A2A R
  5 del_line   00029D R   |   5 del_ln     000A1B R   |   5 delete     0001F1 R
  5 digital_   0017D3 R   |   5 digital_   001803 R   |   5 dir_loop   001AC2 R
  5 director   001AB6 R   |   5 divide     000DF1 R   |   5 divu24_8   00094E R
  5 do_loop    001F62 R   |   5 dotr_loo   00109D R   |   5 drive_fr   001B3F R
  5 enable_i   001EE3 R   |   5 eql_tst    000C6C R   |   5 equal      0013BB R
  5 err_bad_   0006E2 R   |   5 err_cmd_   0006A3 R   |   5 err_div0   000665 R
  5 err_dupl   0006BE R   |   5 err_math   00064B R   |   5 err_mem_   00062E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

  5 err_msg    000610 R   |   5 err_no_a   0006EF R   |   5 err_no_d   000723 R
  5 err_no_f   000749 R   |   5 err_no_l   000675 R   |   5 err_no_p   000734 R
  5 err_not_   0006D0 R   |   5 err_run_   00068C R   |   5 err_synt   00063C R
  5 escaped    000AAD R   |   5 expect     000ECD R   |   5 expr_exi   001027 R
  5 expressi   000FE6 R   |   5 factor     000F3D R   |   1 farptr     000018 R
  5 fcpu       001D70 R   |   7 fdrive     010000 R   |   1 ffree      00001B R
  5 file_cou   001B37 R   |   5 file_rec   002199 R   |   5 file_tra   0021CE R
  5 final_te   0009F5 R   |   5 first_li   0011B1 R   |   1 flags      000025 R
  5 for        001588 R   |   5 forget     001A71 R   |   1 free_ram   00005C R
  5 fsize_ms   0021BD R   |   5 func_arg   000F01 R   |   5 func_not   001ED6 R
  5 ge         0013BD R   |   5 get_arra   000F18 R   |   5 get_targ   001652 R
  5 get_tick   001CDC R   |   5 get_toke   000B52 R   |   5 getc       0001CD R
  5 gosub      001683 R   |   5 goto       001668 R   |   5 gpio       001BC8 R
  5 gt         0013B9 R   |   5 gt_tst     000C77 R   |   5 hex_base   001123 R
  5 if         001574 R   |   1 in         000001 R   |   1 in.saved   000002 R
  1 in.w       000000 R   |   5 incr_far   001895 R   |   5 input_ex   0014B2 R
  5 input_lo   001456 R   |   5 input_va   001454 R   |   5 insert_l   00030E R
  5 insert_l   000373 R   |   5 interpre   0007C5 R   |   5 invert     001F53 R
  5 is_alpha   00048D R   |   5 is_digit   00049E R   |   5 itoa       000907 R
  5 itoa_loo   00091F R   |   5 jp_to_ta   001676 R   |   5 key        001BB5 R
  5 kword_di   002575 R   |   5 kword_en   0021CF R   |   5 le         0013C2 R
  5 leading_   001F29 R   |   5 left_arr   0009FB R   |   5 let        001159 R
  5 let_arra   001167 R   |   5 let_var    00116A R   |   5 lines_sk   0011B4 R
  5 list       001184 R   |   5 list_exi   0011FA R   |   5 list_sta   0011D4 R
  5 load       001A3C R   |   5 load_aut   0005C1 R   |   5 load_fil   001A0B R
  5 log2       001F1E R   |   5 logical_   001ECC R   |   5 loop_bac   001635 R
  1 loop_dep   000022 R   |   5 loop_don   00164A R   |   5 lshift     001D3E R
  5 lt         0013C0 R   |   5 lt_tst     000CB0 R   |   5 modulo     000E35 R
  5 move       000237 R   |   5 move_dow   000255 R   |   5 move_exi   000276 R
  5 move_loo   00025A R   |   5 move_up    000247 R   |   5 mul_char   0013AA R
  5 multiply   000DA9 R   |   5 mulu24_8   000976 R   |   5 nbr_tst    000B8D R
  5 ne         0013C5 R   |   5 neg_acc2   0009B0 R   |   5 new        00188A R
  5 next       001608 R   |   5 next_tok   000810 R   |   5 no_match   000E9B R
  5 none       000B52 R   |   5 other      000CE8 R   |   3 pad        001738 R
  5 parse_bi   000AF0 R   |   5 parse_in   000AB5 R   |   5 parse_ke   000B18 R
  5 parse_qu   000A5D R   |   5 pause      001C80 R   |   5 pause02    001C8A R
  5 peek       001547 R   |   5 pin_mode   001D7C R   |   5 plus_tst   000C40 R
  5 poke       001538 R   |   5 power_ad   001763 R   |   5 prcnt_ts   000C61 R
  5 print      0013C8 R   |   5 print_ex   001428 R   |   5 print_in   0008A9 R
  5 print_ty   001434 R   |   5 prt_basi   00124D R   |   5 prt_cmd_   0011FD R
  5 prt_loop   0013CC R   |   5 prt_quot   001211 R   |   5 prti24     000861 R
  1 ptr16      000019 R   |   1 ptr8       00001A R   |   5 putc       0001C4 R
  5 puts       0001D7 R   |   5 qkey       001BBD GR  |   5 qmark_ts   000C17 R
  5 random     001DED R   |   5 read       002089 R   |   5 read01     00208B R
  5 readln     0009D3 R   |   5 readln_l   0009D9 R   |   5 readln_q   000A4E R
  5 refresh_   001F19 R   |   5 rel_exit   00107E R   |   5 relation   00102A R
  5 relop_st   0013AD R   |   5 remark     0014B5 R   |   5 reprint    0009FB R
  5 reset_co   0013CA R   |   5 rest_con   001444 R   |   5 restore    00203E R
  5 return     0016A3 R   |   5 right_ar   0009FB R   |   5 row_loop   001106 R
  5 rparnt_t   000BD5 R   |   5 rshift     001D57 R   |   5 run        0016C1 R
  5 run_it     0016EC R   |   1 rx_char    000027 R   |   5 save       00194C R
  5 save_con   001434 R   |   5 search_d   000E78 R   |   5 search_e   000EC9 R
  5 search_f   001901 R   |   5 search_l   000279 R   |   5 search_l   000281 R
  5 search_n   000E7C R   |   1 seedx      000014 R   |   1 seedy      000016 R
  5 seek_fdr   0018A3 R   |   5 select_p   001DBD R   |   5 set_time   001EBA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

  5 sharp_ts   000BF6 R   |   5 show       001081 R   |   5 show_row   0010F4 R
  5 single_c   0013A6 R   |   5 size       00112D R   |   5 skip       000D88 R
  5 slash_ts   000C56 R   |   5 sleep      001C75 R   |   5 software   0004A7 R
  5 spaces     0001FF R   |   5 spi_clea   00212D R   |   5 spi_disa   002115 R
  5 spi_enab   0020E3 R   |   5 spi_rcv_   00214F R   |   5 spi_read   00217A R
  5 spi_sele   002182 R   |   5 spi_send   002139 R   |   5 spi_writ   00215A R
  3 stack_fu   001760 R   |   3 stack_un   001800 R   |   5 star_tst   000C4B R
  5 step       0015E1 R   |   5 stop       00183E R   |   5 store_lo   0015F5 R
  5 str_matc   000EAA R   |   5 str_tst    000B7C R   |   5 strcmp     000218 R
  5 strcpy     000229 R   |   5 strlen     00020B R   |   5 substrac   000DA3 R
  5 syntax_e   00075D R   |   1 tab_widt   000026 R   |   5 tb_error   00075F R
  5 term       000F97 R   |   5 term01     000FA0 R   |   5 term_exi   000FE3 R
  3 tib        0016E8 R   |   5 tick_tst   000C2E R   |   1 ticks      000010 R
  5 timeout    001EC9 R   |   1 timer      000012 R   |   5 timer2_i   0000B3 R
  5 timer4_i   0000C0 R   |   1 tmp16      00000E R   |   1 tmp8       00000F R
  5 to         0015B1 R   |   5 to_upper   000D0A GR  |   5 token_ch   000CF7 R
  5 token_ex   000D07 R   |   5 tone       00171A R   |   5 try_next   002079 R
  1 txtbgn     00001E R   |   1 txtend     000020 R   |   5 uart1_in   000189 R
  5 uart1_se   000199 R   |   5 ubound     001137 R   |   5 uflash     001BF2 R
  5 unlock_e   0000D5 R   |   5 unlock_f   0000E3 R   |   5 until      001F77 R
  5 user_int   000060 R   |   5 user_spa   002580 R   |   5 usr        001BF8 R
  1 vars       000028 R   |   5 wait       0014BB R   |   5 warm_ini   000594 R
  5 warm_sta   0007A8 R   |   5 words      001E54 R   |   5 words_co   001EA4 R
  5 write      001B4C R   |   5 write_bl   000166 R   |   5 write_by   0000F1 R
  5 write_ee   00012D R   |   5 write_ex   000161 R   |   5 write_fl   000117 R
  5 xpeek      001558 R   |     xreceive   ****** GX

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5C   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    118   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   258E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

