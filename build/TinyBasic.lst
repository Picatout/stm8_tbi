ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           00008C    27 	STACK_SIZE=140
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000003    29         CELL_SIZE=3
                           00003C    30         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    31         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    32 	FRUN=0 ; flags run code in variable flags
                           000001    33 	FTRAP=1 ; inside trap handler 
                           000002    34 	FLOOP=2 ; FOR loop in preparation 
                           000003    35 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    36 	FBREAK=4 ; break point flag 
                           000005    37 	FCOMP=5  ; compiling flags 
                           000006    38 	FAUTORUN=6; auto start program running 
                           000007    39         FUPDATE=7 ; update constant flag 
                                     40 
                                     41 
                           000006    42         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     43 
                           007FFF    44 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     45 
                           000008    46 	RX_QUEUE_SIZE=8 
                                     47 
                           00F424    48         TIM2_CLK_FREQ=62500
                                     49 
                           000050    50 	TIB_SIZE=80
                           000080    51         PAD_SIZE=BLOCK_SIZE 
                                     52 
                                     53 ;--------------------------------------
                                     54 ;   constantes related to Arduino 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                     55 ;   API mapping 
                                     56 ;-------------------------------------
                           000000    57         INP=0
                           000001    58         OUTP=1 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;       token attribute
                                     62 ;--------------------------------------
                                     63         ; bits 4:5 identify token group 
                                     64         ; 0x0n -> miscelinous 
                                     65         ; 0x1n -> +|- operators 
                                     66         ; 0x2n -> *|/|% operators
                                     67         ; 0x3n -> relational operators 
                           000080    68         TK_CMD=128      ; BASIC command   
                           000081    69         TK_IFUNC=129    ; BASIC integer function
                           000082    70         TK_CFUNC=130    ; BASIC character function
                           000083    71         TK_CONST=131    ; BASIC constant 
                           000084    72         TK_INTGR=132    ; 16 bits integer 
                           000085    73         TK_VAR=133
                           000086    74         TK_FLOAT=134    ; float32 
                           000000    75         TK_NONE=0       ; not a token 
                           000002    76         TK_QSTR=2       ; quoted string  
                           000003    77         TK_LABEL=3      ; used for defined, constants, variables
                           000004    78         TK_CHAR=4       ; ASCII character 
                           000005    79         TK_ARRAY=5     ; array variable '@' 
                           000006    80         TK_LPAREN=6     ; left parenthesis '('
                           000007    81         TK_RPAREN=7     ; right parenthesis ')'
                           000008    82         TK_COMMA=8     ; item separator ',' 
                           000009    83         TK_SHARP=9     ; print colon width '#' 
                           00000A    84         TK_COLON=0xa      ; command separator ':' 
                                     85         
                           000010    86         TK_PLUS=0x10    ; addition operator '+'
                           000011    87         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    88         TK_MULT=0x20    ; multiplication operator '*'
                           000021    89         TK_DIV=0x21     ; division operator '/'
                           000022    90         TK_MOD=0x22     ; modulo operator '%'
                                     91 
                                     92         ; don't change these token values 
                                     93         ; values chosen to be used as a mask.
                                     94         ; bit 7   1 for dictionary words else 0 
                                     95         ; bits 6  always 0 
                                     96         ; bits 5:4 identify group 
                                     97         ; bits 3:0 token identifier inside group  
                           000031    98         TK_GT=0x31      ; relation operator '>'
                           000032    99         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   100         TK_GE=0x33      ; relation operator '>='
                           000034   101         TK_LT=0x34      ; relation operator '<'
                           000036   102         TK_LE=0x36      ; relation operator '<='
                           000035   103         TK_NE=0x35      ; relation operator '<>' not equal 
                                    104         ; token groups 
                           000030   105         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   106         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   107         TK_GRP_ADD=0x10  ; additive operators
                           000020   108         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   109         TK_GRP_RELOP=0x30 ;relational operators. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000002   110         CMD_END=2 
                                    111 
                                    112 ;--------------------------------------
                                    113 ;   error codes 
                                    114 ;--------------------------------------
                           000000   115     ERR_NONE=0
                           000001   116     ERR_MEM_FULL=1 
                           000002   117     ERR_SYNTAX=2
                           000003   118     ERR_MATH_OVF=3
                           000004   119     ERR_DIV0=4 
                           000005   120     ERR_NO_LINE=5
                           000006   121     ERR_RUN_ONLY=6
                           000007   122     ERR_CMD_ONLY=7
                           000008   123     ERR_DUPLICATE=8
                           000009   124     ERR_NOT_FILE=9
                           00000A   125     ERR_BAD_VALUE=10
                           00000B   126     ERR_NO_ACCESS=11
                           00000C   127     ERR_NO_DATA=12 
                           00000D   128     ERR_NO_PROG=13
                           00000E   129     ERR_NO_FSPACE=14
                           00000F   130     ERR_BUF_FULL=15
                           000010   131     ERR_OVERFLOW=16 
                                    132 
                                    133 ;--------------------------------------
                                    134 ;   assembler flags 
                                    135 ;-------------------------------------
                                    136 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    137 
                                    138      .macro _usec_dly n 
                                    139     ldw x,#(16*n-2)/4
                                    140     decw x
                                    141     nop 
                                    142     jrne .-4
                                    143     .endm 
                                    144     
                                    145     ; load X register with 
                                    146     ; entry point of dictionary
                                    147     ; before calling 'search_dict'
                                    148     .macro _ldx_dict dict_name
                                    149     ldw x,#dict_name+2
                                    150     .endm 
                                    151 
                                    152     ; reset BASIC pointer
                                    153     ; to beginning of last token
                                    154     ; extracted except if it was end of line 
                                    155     .macro _unget_token 
                                    156      mov in,in.saved  
                                    157     .endm
                                    158 
                                    159 
                                    160 ;---------------------------------------
                                    161 ;    xtack manipulation macros 
                                    162 ;    Y is used as xstack pointer  
                                    163 ;----------------------------------------
                                    164     ; pop in A:X from XSTACK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     .macro _xpop 
                                    166     ld a,(y)
                                    167     ldw x,y 
                                    168     ldw x,(1,x)
                                    169     addw y,#CELL_SIZE 
                                    170     .endm 
                                    171 
                                    172     ; push A:X  to XSTACK 
                                    173     .macro _xpush 
                                    174     subw y,#CELL_SIZE
                                    175     ld (y),a 
                                    176     ldw (1,y),x 
                                    177     .endm 
                                    178 
                                    179     ; drop from XSTACK 
                                    180     .macro _xdrop 
                                    181     addw y,#CELL_SIZE 
                                    182     .endm 
                                    183 
                                    184     ; @T fetch top xstack 
                                    185     .macro _at_top
                                    186     ld a,(y)
                                    187     ldw x,y 
                                    188     ldw x,(1,x)
                                    189     .endm 
                                    190 
                                    191     ; @N  fetch next on xstack 
                                    192     .macro _at_next 
                                    193     ld a,(3,y)
                                    194     ldw x,y 
                                    195     ldw x,(4,x)
                                    196     .endm 
                                    197 
                                    198     ; !T put on top of xtack 
                                    199     .macro _store_top 
                                    200     ld (y),a 
                                    201     ldw (1,y),x     
                                    202     .endm 
                                    203 
                                    204     ; !N put next on xstack 
                                    205     .macro _store_next 
                                    206     ld (3,y),a 
                                    207     ldw (4,y),x 
                                    208     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DDR_IDX=DATA_IDX+2
                           000022    42     DEC_IDX=DDR_IDX+2
                           000024    43     DO_IDX=DEC_IDX+2
                           000026    44     DREAD_IDX=DO_IDX+2
                           000028    45     DWRITE_IDX=DREAD_IDX+2
                           00002A    46     EDIT_IDX=DWRITE_IDX+2
                           00002C    47     EEPROM_IDX=EDIT_IDX+2
                           00002E    48     END_IDX=EEPROM_IDX+2
                           000030    49     ERASE_IDX=END_IDX+2
                           000032    50     FCPU_IDX=ERASE_IDX+2
                           000034    51     SAVE_IDX=FCPU_IDX+2
                           000036    52     FOR_IDX=SAVE_IDX+2
                           000038    53     GOSUB_IDX=FOR_IDX+2
                           00003A    54     GOTO_IDX=GOSUB_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GPIO_IDX=GOTO_IDX+2
                           00003E    56     HEX_IDX=GPIO_IDX+2
                           000040    57     IDR_IDX=HEX_IDX+2
                           000042    58     IF_IDX=IDR_IDX+2
                           000044    59     INPUT_IDX=IF_IDX+2
                           000046    60     INVERT_IDX=INPUT_IDX+2
                           000048    61     IWDGEN_IDX=INVERT_IDX+2
                           00004A    62     IWDGREF_IDX=IWDGEN_IDX+2
                           00004C    63     KEY_IDX=IWDGREF_IDX+2
                           00004E    64     LET_IDX=KEY_IDX+2
                           000050    65     LIST_IDX=LET_IDX+2
                           000052    66     LOG_IDX=LIST_IDX+2
                           000054    67     LSHIFT_IDX=LOG_IDX+2
                                     68 ;    MULDIV_IDX=LSHIFT_IDX+2
                           000056    69     NEXT_IDX=LSHIFT_IDX+2
                           000058    70     NEW_IDX=NEXT_IDX+2
                           00005A    71     NOT_IDX=NEW_IDX+2
                           00005C    72     ODR_IDX=NOT_IDX+2
                           00005E    73     OR_IDX=ODR_IDX+2
                           000060    74     PAD_IDX=OR_IDX+2
                           000062    75     PAUSE_IDX=PAD_IDX+2
                           000064    76     PMODE_IDX=PAUSE_IDX+2
                           000066    77     PEEK_IDX=PMODE_IDX+2
                           000068    78     PINP_IDX=PEEK_IDX+2
                           00006A    79     POKE_IDX=PINP_IDX+2
                           00006C    80     POUT_IDX=POKE_IDX+2
                           00006E    81    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000070    82     PRTA_IDX=PRT_IDX+2
                           000072    83     PRTB_IDX=PRTA_IDX+2
                           000074    84     PRTC_IDX=PRTB_IDX+2
                           000076    85     PRTD_IDX=PRTC_IDX+2
                           000078    86     PRTE_IDX=PRTD_IDX+2
                           00007A    87     PRTF_IDX=PRTE_IDX+2
                           00007C    88     PRTG_IDX=PRTF_IDX+2
                           00007E    89     PRTH_IDX=PRTG_IDX+2
                           000080    90     PRTI_IDX=PRTH_IDX+2
                           000082    91     QKEY_IDX=PRTI_IDX+2
                           000084    92     READ_IDX=QKEY_IDX+2
                           000086    93     RBT_IDX=READ_IDX+2  ; REBOOT
                           000088    94 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008A    95     REST_IDX=REM_IDX+2 ; RESTORE
                           00008C    96     RET_IDX=REST_IDX+2  ; RETURN 
                           00008E    97     RND_IDX=RET_IDX+2 ; RANDOM 
                           000090    98     RSHIFT_IDX=RND_IDX+2
                           000092    99     RUN_IDX=RSHIFT_IDX+2
                           000094   100     SHOW_IDX=RUN_IDX+2
                           000096   101     FREE_IDX=SHOW_IDX+2
                           000098   102     SLEEP_IDX=FREE_IDX+2
                           00009A   103     SPIRD_IDX=SLEEP_IDX+2
                           00009C   104     SPIEN_IDX=SPIRD_IDX+2
                           00009E   105     SPISEL_IDX=SPIEN_IDX+2
                           0000A0   106     SPIWR_IDX=SPISEL_IDX+2
                           0000A2   107     STEP_IDX=SPIWR_IDX+2
                           0000A4   108     STOP_IDX=STEP_IDX+2
                           0000A6   109     TICKS_IDX=STOP_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000A8   110     TIMER_IDX=TICKS_IDX+2
                           0000AA   111     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000AC   112     TO_IDX=TMROUT_IDX+2
                           0000AE   113     TONE_IDX=TO_IDX+2
                           0000B0   114     UBOUND_IDX=TONE_IDX+2
                           0000B2   115     UFLASH_IDX=UBOUND_IDX+2
                           0000B4   116     UNTIL_IDX=UFLASH_IDX+2
                           0000B6   117     USR_IDX=UNTIL_IDX+2
                           0000B8   118     WAIT_IDX=USR_IDX+2
                           0000BA   119     WORDS_IDX=WAIT_IDX+2
                           0000BC   120     WRITE_IDX=WORDS_IDX+2
                           0000BE   121     XOR_IDX=WRITE_IDX+2
                           0000C0   122     SIZE_IDX=XOR_IDX+2 
                           0000C2   123     ON_IDX=SIZE_IDX+2 
                           0000C4   124     GET_IDX=ON_IDX+2
                           0000C6   125     CONST_IDX=GET_IDX+2
                           0000C8   126     EEFREE_IDX=CONST_IDX+2 
                                    127      
                                    128         
                                    129 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 B2             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 33             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 8B             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 1E             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 21      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 83         [ 4]  120 	call print_registers
                                    121 ;	call cmd_itf
      000019 72 13 00 21      [ 1]  122 	bres flags,#FTRAP 	
      00001D 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ;--------------------------------
      00001E                        131 Timer4UpdateHandler:
      00001E 72 5F 53 42      [ 1]  132 	clr TIM4_SR 
      000022 CE 00 0F         [ 2]  133 	ldw x,ticks
      000025 5C               [ 1]  134 	incw x
      000026 CF 00 0F         [ 2]  135 	ldw ticks,x 
      000029 CE 00 11         [ 2]  136 	ldw x,timer
                                    137 ;	tnzw x 
      00002C 27 04            [ 1]  138 	jreq 1$
      00002E 5A               [ 2]  139 	decw x 
      00002F CF 00 11         [ 2]  140 	ldw timer,x 
      000032                        141 1$:	
      000032 80               [11]  142 	iret 
                                    143 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                    144 ;------------------------------------
                                    145 ; Triggered by pressing USER UserButton 
                                    146 ; on NUCLEO card.
                                    147 ; This is used to abort a progam lock 
                                    148 ; in infinite loop. 
                                    149 ;------------------------------------
      000033                        150 UserButtonHandler:
                                    151 ; wait button release
      000033 5F               [ 1]  152 	clrw x
      000034 5A               [ 2]  153 1$: decw x 
      000035 26 FD            [ 1]  154 	jrne 1$
      000037 72 09 50 15 F8   [ 2]  155 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    156 ; if MCU suspended by SLEEP resume program
      00003C 72 07 00 21 05   [ 2]  157     btjf flags,#FSLEEP,2$
      000041 72 17 00 21      [ 1]  158 	bres flags,#FSLEEP 
      000045 80               [11]  159 	iret
      000046                        160 2$:	
      000046                        161 user_interrupted:
      000046 72 00 00 21 02   [ 2]  162     btjt flags,#FRUN,4$
      00004B 20 0A            [ 2]  163 	jra UBTN_Handler_exit 
      00004D                        164 4$:	; program interrupted by user 
      00004D 72 11 00 21      [ 1]  165 	bres flags,#FRUN 
      000051 AE 00 5F         [ 2]  166 	ldw x,#USER_ABORT
      000054 CD 09 5A         [ 4]  167 	call puts 
      000057                        168 UBTN_Handler_exit:
      000057 AE 17 FF         [ 2]  169     ldw x,#STACK_EMPTY 
      00005A 94               [ 1]  170     ldw sp,x
      00005B 9A               [ 1]  171 	rim 
      00005C CC 16 D6         [ 2]  172 5$:	jp warm_start
                                    173 
      00005F 0A 50 72 6F 67 72 61   174 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    175 
                                    176 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    177 ;    peripherals initialization
                                    178 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    179 
                                    180 ;----------------------------------------
                                    181 ; inialize MCU clock 
                                    182 ; input:
                                    183 ;   A 		source  HSI | 1 HSE 
                                    184 ;   XL      CLK_CKDIVR , clock divisor 
                                    185 ; output:
                                    186 ;   none 
                                    187 ;----------------------------------------
      00007A                        188 clock_init:	
      00007A C1 50 C3         [ 1]  189 	cp a,CLK_CMSR 
      00007D 27 0C            [ 1]  190 	jreq 2$ ; no switching required 
                                    191 ; select clock source 
      00007F 72 12 50 C5      [ 1]  192 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000083 C7 50 C4         [ 1]  193 	ld CLK_SWR,a
      000086 C1 50 C3         [ 1]  194 1$:	cp a,CLK_CMSR
      000089 26 FB            [ 1]  195 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B                        196 2$: 	
                                    197 ; HSI and cpu clock divisor 
      00008B 9F               [ 1]  198 	ld a,xl 
      00008C C7 50 C6         [ 1]  199 	ld CLK_CKDIVR,a  
      00008F 81               [ 4]  200 	ret
                                    201 
                                    202 ;----------------------------------
                                    203 ; TIMER2 used as audio tone output 
                                    204 ; on port D:5.
                                    205 ; channel 1 configured as PWM mode 1 
                                    206 ;-----------------------------------  
                                    207 
      000090                        208 timer2_init:
      000090 72 1A 50 C7      [ 1]  209 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000094 35 60 53 05      [ 1]  210  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      000098 35 08 53 0C      [ 1]  211 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009C 81               [ 4]  212 	ret 
                                    213 
                                    214 ;---------------------------------
                                    215 ; TIM4 is configured to generate an 
                                    216 ; interrupt every millisecond 
                                    217 ;----------------------------------
      00009D                        218 timer4_init:
      00009D 72 18 50 C7      [ 1]  219 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A1 35 07 53 45      [ 1]  220 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A5 35 7D 53 46      [ 1]  221 	mov TIM4_ARR,#125 ; set for 1msec.
      0000A9 35 05 53 40      [ 1]  222 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000AD 72 10 53 41      [ 1]  223 	bset TIM4_IER,#TIM4_IER_UIE
      0000B1 81               [ 4]  224 	ret
                                    225 
                                    226 ;-------------------------------------
                                    227 ;  initialization entry point 
                                    228 ;-------------------------------------
      0000B2                        229 cold_start:
                                    230 ;set stack 
      0000B2 AE 17 FF         [ 2]  231 	ldw x,#STACK_EMPTY
      0000B5 94               [ 1]  232 	ldw sp,x
                                    233 ; clear all ram 
      0000B6 7F               [ 1]  234 0$: clr (x)
      0000B7 5A               [ 2]  235 	decw x 
      0000B8 26 FC            [ 1]  236 	jrne 0$
                                    237 ; activate pull up on all inputs 
      0000BA A6 FF            [ 1]  238 	ld a,#255 
      0000BC C7 50 03         [ 1]  239 	ld PA_CR1,a 
      0000BF C7 50 08         [ 1]  240 	ld PB_CR1,a 
      0000C2 C7 50 0D         [ 1]  241 	ld PC_CR1,a 
      0000C5 C7 50 12         [ 1]  242 	ld PD_CR1,a 
      0000C8 C7 50 17         [ 1]  243 	ld PE_CR1,a 
      0000CB C7 50 1C         [ 1]  244 	ld PF_CR1,a 
      0000CE C7 50 21         [ 1]  245 	ld PG_CR1,a 
      0000D1 C7 50 2B         [ 1]  246 	ld PI_CR1,a
                                    247 ; set LD2 pin as output 
      0000D4 72 1A 50 0D      [ 1]  248     bset PC_CR1,#LED2_BIT
      0000D8 72 1A 50 0E      [ 1]  249     bset PC_CR2,#LED2_BIT
      0000DC 72 1A 50 0C      [ 1]  250     bset PC_DDR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000E0 72 1B 50 0A      [ 1]  251 	bres PC_ODR,#LED2_BIT 
                                    252 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000E4 55 00 3F 54 07   [ 1]  253 	mov ADC_TDRL,0x3f
                                    254 ; disable peripherals clocks
                                    255 ;	clr CLK_PCKENR1 
                                    256 ;	clr CLK_PCKENR2
      0000E9 72 5F 50 F2      [ 1]  257 	clr AWU_TBR 
      0000ED 72 14 50 CA      [ 1]  258 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    259 ; select internal clock no divisor: 16 Mhz 	
      0000F1 A6 E1            [ 1]  260 	ld a,#CLK_SWR_HSI 
      0000F3 5F               [ 1]  261 	clrw x  
      0000F4 CD 00 7A         [ 4]  262     call clock_init 
      0000F7 CD 00 9D         [ 4]  263 	call timer4_init
      0000FA CD 00 90         [ 4]  264 	call timer2_init
                                    265 ; UART1 at 115200 BAUD
      0000FD CD 08 B8         [ 4]  266 	call uart1_init
                                    267 ; activate PE_4 (user button interrupt)
      000100 72 18 50 18      [ 1]  268     bset PE_CR2,#USR_BTN_BIT 
                                    269 ; display system information
      000104 9A               [ 1]  270 	rim ; enable interrupts 
      000105 72 5C 00 16      [ 1]  271 	inc seedy+1 
      000109 72 5C 00 14      [ 1]  272 	inc seedx+1 
      00010D CD 1C 65         [ 4]  273 	call func_eefree 
      000110 CD 1B A2         [ 4]  274 	call ubound 
      000113 CD 14 A1         [ 4]  275 	call clear_basic
      000116 CD 24 7D         [ 4]  276 	call beep_1khz  
      000119 CD 14 4E         [ 4]  277 	call system_information
      00011C                        278 2$:	
                                    279 ; check for application in flash memory 
      00011C CE 35 80         [ 2]  280 	ldw x,app_sign 
      00011F C3 27 73         [ 2]  281 	cpw x,SIGNATURE 
      000122 27 03            [ 1]  282 	jreq run_app
      000124 CC 16 D6         [ 2]  283 	jp warm_start 
      000127                        284 run_app:
                                    285 ; run application in FLASH|EEPROM 
      000127 CD 14 7F         [ 4]  286 	call warm_init
      00012A AE 35 84         [ 2]  287 	ldw x,#app 
      00012D CF 00 1A         [ 2]  288 	ldw txtbgn,x
      000130 72 BB 35 82      [ 2]  289 	addw x,app_size 
      000134 CF 00 1C         [ 2]  290 	ldw txtend,x 
      000137 AE 01 45         [ 2]  291 	ldw x,#AUTO_RUN 
      00013A CD 09 5A         [ 4]  292 	call puts 
      00013D CD 1D 82         [ 4]  293 	call program_info 
      000140 CC 24 21         [ 2]  294 	jp run_it_02  
      000143 20 FE            [ 2]  295     jra .  
                                    296 
      000145 20 61 75 74 6F 20 72   297 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    298 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      000158                         35 add24: ; ( i1 i2 -- i1 + i2 )
      000158                         36     _xpop 
      000158 90 F6            [ 1]    1     ld a,(y)
      00015A 93               [ 1]    2     ldw x,y 
      00015B EE 01            [ 2]    3     ldw x,(1,x)
      00015D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000161 89               [ 2]   37     pushw x  
      000162 88               [ 1]   38     push a  
      000163                         39     _xpop 
      000163 90 F6            [ 1]    1     ld a,(y)
      000165 93               [ 1]    2     ldw x,y 
      000166 EE 01            [ 2]    3     ldw x,(1,x)
      000168 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00016C 72 FB 02         [ 2]   40     addw x,(2,sp)
      00016F 19 01            [ 1]   41     adc a, (1,sp)
      000171                         42     _xpush 
      000171 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000175 90 F7            [ 1]    2     ld (y),a 
      000177 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017A                         43     _drop 3 
      00017A 5B 03            [ 2]    1     addw sp,#3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      00017C 81               [ 4]   44     ret 
                                     45 
                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      00017D                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      00017D                         51     _xpop 
      00017D 90 F6            [ 1]    1     ld a,(y)
      00017F 93               [ 1]    2     ldw x,y 
      000180 EE 01            [ 2]    3     ldw x,(1,x)
      000182 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000186 89               [ 2]   52     pushw x 
      000187 88               [ 1]   53     push  a
      000188                         54     _at_top  
      000188 90 F6            [ 1]    1     ld a,(y)
      00018A 93               [ 1]    2     ldw x,y 
      00018B EE 01            [ 2]    3     ldw x,(1,x)
      00018D 72 F0 02         [ 2]   55     subw x,(2,sp) 
      000190 12 01            [ 1]   56     sbc a, (1,sp)
      000192                         57     _store_top  
      000192 90 F7            [ 1]    1     ld (y),a 
      000194 90 EF 01         [ 2]    2     ldw (1,y),x     
      000197                         58     _drop 3 
      000197 5B 03            [ 2]    1     addw sp,#3 
      000199 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24 
                                     63 ; compare acc24 with A:X 
                                     64 ;-------------------------------
      00019A                         65 cp24:
      00019A C1 00 0C         [ 1]   66     cp a,acc24 
      00019D 26 03            [ 1]   67     jrne 9$ 
      00019F C3 00 0D         [ 2]   68     cpw x,acc16
      0001A2                         69 9$: 
      0001A2 81               [ 4]   70     ret 
                                     71 
                                     72 
                                     73 ;-------------------------------
                                     74 ; abs24 
                                     75 ; abolute value of top  
                                     76 ;-------------------------------
      0001A3                         77 abs24: ; ( i -- u )
      0001A3 90 F6            [ 1]   78     ld a,(y)
      0001A5 A1 80            [ 1]   79     cp a,#0x80 
      0001A7 2A 0E            [ 1]   80     jrpl neg24 ; negative integer
      0001A9 81               [ 4]   81     ret  
                                     82 
                                     83 ;----------------------------
                                     84 ;  one's compleement 
                                     85 ;----------------------------
      0001AA                         86 cpl24:  ; i -- ~i 
      0001AA                         87     _at_top 
      0001AA 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      0001AC 93               [ 1]    2     ldw x,y 
      0001AD EE 01            [ 2]    3     ldw x,(1,x)
      0001AF 43               [ 1]   88     cpl a 
      0001B0 53               [ 2]   89     cplw x 
      0001B1                         90     _store_top 
      0001B1 90 F7            [ 1]    1     ld (y),a 
      0001B3 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B6 81               [ 4]   91     ret 
                                     92 
                                     93 ;----------------------------    
                                     94 ; two'2 complement of top  
                                     95 ;---------------------------
      0001B7                         96 neg24: ; (i -- -i )
      0001B7                         97     _at_top
      0001B7 90 F6            [ 1]    1     ld a,(y)
      0001B9 93               [ 1]    2     ldw x,y 
      0001BA EE 01            [ 2]    3     ldw x,(1,x)
      0001BC 43               [ 1]   98     cpl  a  
      0001BD 53               [ 2]   99     cplw x 
      0001BE 1C 00 01         [ 2]  100     addw x,#1
      0001C1 A9 00            [ 1]  101     adc a,#0
      0001C3                        102     _store_top  
      0001C3 90 F7            [ 1]    1     ld (y),a 
      0001C5 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001C8 81               [ 4]  103 9$: ret 
                                    104 
                                    105 ;-----------------------------
                                    106 ; negate integer in A:X 
                                    107 ;----------------------------
      0001C9                        108 neg_ax:
      0001C9 43               [ 1]  109     cpl  a  
      0001CA 53               [ 2]  110     cplw x 
      0001CB 1C 00 01         [ 2]  111     addw x,#1
      0001CE A9 00            [ 1]  112     adc a,#0
      0001D0 81               [ 4]  113     ret 
                                    114 
                                    115 ;------------------------------------
                                    116 ;  two's complement of acc24 
                                    117 ;-------------------------------------
      0001D1                        118 neg_acc24: ; 
      0001D1 72 53 00 0C      [ 1]  119     cpl acc24 
      0001D5 72 53 00 0D      [ 1]  120     cpl acc16 
      0001D9 72 53 00 0E      [ 1]  121     cpl acc8
      0001DD 72 5C 00 0E      [ 1]  122     inc acc8 
      0001E1 26 0A            [ 1]  123     jrne 9$
      0001E3 72 5C 00 0D      [ 1]  124     inc acc16 
      0001E7 26 04            [ 1]  125     jrne 9$
      0001E9 72 5C 00 0C      [ 1]  126     inc acc24 
      0001ED 81               [ 4]  127 9$: ret 
                                    128 
                                    129 
                                    130 ;--------------------------------------
                                    131 ; unsigned multiply uint24_t by uint8_t
                                    132 ; input:
                                    133 ;	acc24	uint24_t 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                    134 ;   A		uint8_t
                                    135 ; output:
                                    136 ;   acc24   A*acc24
                                    137 ;      A    overflow, bits 31..24 
                                    138 ;-------------------------------------
                                    139 ; local variables offset  on sp
                           000001   140 	U8   = 1   ; A pushed on stack
                           000001   141 	VSIZE = 1 
      0001EE                        142 mulu24_8:
      0001EE 89               [ 2]  143 	pushw x    ; save X
                                    144 	; local variable
      0001EF 88               [ 1]  145 	push a     ; U8
      0001F0 72 5F 00 0B      [ 1]  146 	clr acc32 
                                    147 ; multiply bits 7..0 * U8   	
      0001F4 97               [ 1]  148 	ld xl,a 
      0001F5 C6 00 0E         [ 1]  149 	ld a,acc8 
      0001F8 42               [ 4]  150 	mul x,a 
      0001F9 C6 00 0D         [ 1]  151 	ld a, acc16 
      0001FC CF 00 0D         [ 2]  152 	ldw acc16,x
                                    153 ; multiply middle byte, bits 15..8 * U8  	
      0001FF 97               [ 1]  154 	ld xl,a 
      000200 7B 01            [ 1]  155 	ld a,(U8,sp)
      000202 42               [ 4]  156 	mul x,a 
      000203 C6 00 0C         [ 1]  157 	ld a,acc24
      000206 72 5F 00 0C      [ 1]  158 	clr acc24  
      00020A 72 BB 00 0C      [ 2]  159 	addw x,acc24
      00020E CF 00 0C         [ 2]  160 	ldw acc24,x 
                                    161 ; multiply  MSB, bits 23..16 * U8 
      000211 97               [ 1]  162 	ld xl,a 
      000212 7B 01            [ 1]  163 	ld a,(U8,sp)
      000214 42               [ 4]  164 	mul x,a
      000215 72 BB 00 0B      [ 2]  165 	addw x,acc32  
      000219 CF 00 0B         [ 2]  166 	ldw acc32,x 
      00021C 9E               [ 1]  167 	ld a,xh 
      00021D                        168 	_drop VSIZE  
      00021D 5B 01            [ 2]    1     addw sp,#VSIZE 
      00021F 85               [ 2]  169 	popw x 
      000220 81               [ 4]  170 	ret 
                                    171 
                                    172 
                                    173 ;-------------------------------
                                    174 ; mul24 i1 i2 -- i1*i2  
                                    175 ; multiply 24 bits integers 
                                    176 ;------------------------------
                           000001   177     PROD=1 
                           000004   178     N1=4
                           000007   179     N2=7
                           00000A   180     PROD_SIGN=10
                           00000A   181     VSIZE=10 
      000221                        182 mul24:
      000221                        183     _vars VSIZE
      000221 52 0A            [ 2]    1     sub sp,#VSIZE 
      000223 0F 0A            [ 1]  184     clr (PROD_SIGN,sp)
      000225                        185     _xpop 
      000225 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000227 93               [ 1]    2     ldw x,y 
      000228 EE 01            [ 2]    3     ldw x,(1,x)
      00022A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00022E 4D               [ 1]  186     tnz a 
      00022F 2A 05            [ 1]  187     jrpl 0$
      000231 03 0A            [ 1]  188     cpl (PROD_SIGN,sp)
      000233 CD 01 C9         [ 4]  189     call neg_ax 
      000236                        190 0$:    
      000236 6B 04            [ 1]  191     ld (N1,sp),a 
      000238 1F 05            [ 2]  192     ldw (N1+1,sp),x
      00023A                        193     _at_top 
      00023A 90 F6            [ 1]    1     ld a,(y)
      00023C 93               [ 1]    2     ldw x,y 
      00023D EE 01            [ 2]    3     ldw x,(1,x)
      00023F 4D               [ 1]  194     tnz a 
      000240 2A 09            [ 1]  195     jrpl 2$ 
      000242 03 0A            [ 1]  196     cpl (PROD_SIGN,sp) 
      000244 CD 01 C9         [ 4]  197     call neg_ax
      000247 6B 07            [ 1]  198     ld (N2,sp),a 
      000249 1F 08            [ 2]  199     ldw (N2+1,sp),x   
      00024B                        200 2$: 
      00024B C7 00 0C         [ 1]  201     ld acc24,a 
      00024E CF 00 0D         [ 2]  202     ldw acc16,x 
      000251 7B 06            [ 1]  203     ld a,(N1+2,sp); least byte     
      000253 27 12            [ 1]  204     jreq 4$
      000255 CD 01 EE         [ 4]  205     call mulu24_8
      000258 4D               [ 1]  206     tnz a 
      000259 26 61            [ 1]  207     jrne 8$ ; overflow 
      00025B CE 00 0D         [ 2]  208     ldw x,acc16  
      00025E C6 00 0C         [ 1]  209     ld a,acc24
      000261 2B 59            [ 1]  210     jrmi 8$ ; overflow  
      000263 6B 01            [ 1]  211     ld (PROD,sp),a
      000265 1F 02            [ 2]  212     ldw (PROD+1,sp),x 
      000267                        213 4$:
      000267 7B 07            [ 1]  214     ld a,(N2,sp) 
      000269 1E 08            [ 2]  215     ldw x,(N2+1,sp)
      00026B C7 00 0C         [ 1]  216     ld acc24,a 
      00026E CF 00 0D         [ 2]  217     ldw acc16,x 
      000271 7B 05            [ 1]  218     ld a,(N1+1,sp); middle byte     
      000273 27 1F            [ 1]  219     jreq 5$
      000275 CD 01 EE         [ 4]  220     call mulu24_8
      000278 4D               [ 1]  221     tnz a 
      000279 26 41            [ 1]  222     jrne 8$ ; overflow 
      00027B C6 00 0C         [ 1]  223     ld a,acc24 
      00027E 26 3C            [ 1]  224     jrne 8$  ; overflow 
      000280 CE 00 0D         [ 2]  225     ldw x,acc16  
      000283 72 FB 01         [ 2]  226     addw x,(PROD,sp)
      000286 29 34            [ 1]  227     jrv 8$ ; overflow
      000288 1F 01            [ 2]  228     ldw (PROD,sp),x 
      00028A 7B 07            [ 1]  229     ld a,(N2,sp)
      00028C 1E 08            [ 2]  230     ldw x,(N2+1,sp)
      00028E C7 00 0C         [ 1]  231     ld acc24,a 
      000291 CF 00 0D         [ 2]  232     ldw acc16,x 
      000294                        233 5$:
      000294 7B 04            [ 1]  234     ld a,(N1,sp) ; high byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000296 27 16            [ 1]  235     jreq 6$
      000298 CD 01 EE         [ 4]  236     call mulu24_8
      00029B 4D               [ 1]  237     tnz a 
      00029C 26 1E            [ 1]  238     jrne 8$ ; overflow 
      00029E CE 00 0C         [ 2]  239     ldw x,acc24 
      0002A1 26 19            [ 1]  240     jrne 8$ ; overflow 
      0002A3 C6 00 0E         [ 1]  241     ld a,acc8 
      0002A6 2B 14            [ 1]  242     jrmi 8$ ; overflow 
      0002A8 1B 01            [ 1]  243     add a,(PROD,sp)
      0002AA 6B 01            [ 1]  244     ld (PROD,sp),a 
      0002AC 29 0E            [ 1]  245     jrv 8$ ; overflow 
      0002AE                        246 6$:
      0002AE 7B 01            [ 1]  247     ld a,(PROD,sp)
      0002B0 1E 02            [ 2]  248     ldw x,(PROD+1,sp)
      0002B2 0D 0A            [ 1]  249     tnz (PROD_SIGN,sp)
      0002B4 27 03            [ 1]  250     jreq 7$
      0002B6 CD 01 C9         [ 4]  251     call neg_ax 
      0002B9                        252 7$:
      0002B9 98               [ 1]  253     rcf ; C=0 means no overflow 
      0002BA 20 03            [ 2]  254     jra 9$
      0002BC                        255 8$: ; overflow 
      0002BC 4F               [ 1]  256     clr a 
      0002BD 5F               [ 1]  257     clrw x 
      0002BE 99               [ 1]  258     scf ; C=1 means overflow 
      0002BF                        259 9$:    
      0002BF                        260     _store_top 
      0002BF 90 F7            [ 1]    1     ld (y),a 
      0002C1 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002C4                        261     _drop VSIZE 
      0002C4 5B 0A            [ 2]    1     addw sp,#VSIZE 
      0002C6 81               [ 4]  262     ret 
                                    263 
                                    264 ;-------------------------------------
                                    265 ; divide uint24_t by uint8_t
                                    266 ; input:
                                    267 ;	acc24	dividend
                                    268 ;   A 		divisor
                                    269 ; output:
                                    270 ;   acc24	quotient
                                    271 ;   A		remainder
                                    272 ;------------------------------------- 
                                    273 ; offset  on sp of arguments and locals
                           000001   274 	U8   = 1   ; divisor on stack
                           000001   275 	VSIZE =1
      0002C7                        276 divu24_8:
      0002C7 89               [ 2]  277 	pushw x ; save x
      0002C8 88               [ 1]  278 	push a 
                                    279 	; ld dividend UU:MM bytes in X
      0002C9 CE 00 0C         [ 2]  280 	ldw x,acc24
      0002CC 7B 01            [ 1]  281 	ld a,(U8,SP) ; divisor
      0002CE 62               [ 2]  282 	div x,a ; UU:MM/U8
      0002CF 88               [ 1]  283 	push a  ;save remainder
      0002D0 CF 00 0C         [ 2]  284     ldw acc24,x ; quotient 
      0002D3 84               [ 1]  285 	pop a
      0002D4 95               [ 1]  286 	ld xh,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      0002D5 C6 00 0E         [ 1]  287 	ld a,acc8
      0002D8 97               [ 1]  288 	ld xl,a
      0002D9 7B 01            [ 1]  289 	ld a,(U8,sp) ; divisor
      0002DB 62               [ 2]  290 	div x,a  ; R:LL/U8
      0002DC 6B 01            [ 1]  291 	ld (U8,sp),a ; save remainder
      0002DE 9F               [ 1]  292 	ld a,xl
      0002DF C7 00 0E         [ 1]  293 	ld acc8,a
      0002E2 84               [ 1]  294 	pop a
      0002E3 85               [ 2]  295 	popw x
      0002E4 81               [ 4]  296 	ret
                                    297 
                                    298 
                                    299 ;-------------------------------
                                    300 ; div24 N/T   
                                    301 ; divide 24 bits integers
                                    302 ;  i1 i2 -- i1/i2 
                                    303 ;------------------------------
                           000001   304     DIVISOR=1
                           000004   305     CNTR=4
                           000005   306     QSIGN=5
                           000006   307     RSIGN=6 
                           000006   308     VSIZE=6 
      0002E5                        309 div24:
      0002E5                        310     _vars VSIZE 
      0002E5 52 06            [ 2]    1     sub sp,#VSIZE 
      0002E7 0F 06            [ 1]  311     clr (RSIGN,sp)
      0002E9 0F 05            [ 1]  312     clr (QSIGN,sp)
      0002EB                        313     _xpop 
      0002EB 90 F6            [ 1]    1     ld a,(y)
      0002ED 93               [ 1]    2     ldw x,y 
      0002EE EE 01            [ 2]    3     ldw x,(1,x)
      0002F0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0002F4 4D               [ 1]  314     tnz a 
      0002F5 2A 05            [ 1]  315     jrpl 0$ 
      0002F7 03 05            [ 1]  316     cpl (QSIGN,sp)
      0002F9 CD 01 C9         [ 4]  317     call neg_ax
      0002FC                        318 0$:
      0002FC 6B 01            [ 1]  319     ld  (DIVISOR,sp),a
      0002FE 1F 02            [ 2]  320     ldw (DIVISOR+1,sp),x
      000300 1A 02            [ 1]  321     or a,(DIVISOR+1,sp)
      000302 1A 03            [ 1]  322     or a,(DIVISOR+2,sp)
      000304 26 05            [ 1]  323     jrne 1$ 
      000306 A6 04            [ 1]  324     ld a,#ERR_DIV0 
      000308 CC 16 47         [ 2]  325     jp tb_error 
      00030B                        326 1$: 
      00030B                        327     _at_top
      00030B 90 F6            [ 1]    1     ld a,(y)
      00030D 93               [ 1]    2     ldw x,y 
      00030E EE 01            [ 2]    3     ldw x,(1,x)
      000310 4D               [ 1]  328     tnz a 
      000311 2A 07            [ 1]  329     jrpl 2$
      000313 CD 01 C9         [ 4]  330     call neg_ax
      000316 03 05            [ 1]  331     cpl (QSIGN,sp)
      000318 03 06            [ 1]  332     cpl (RSIGN,sp)
      00031A                        333 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00031A C7 00 0C         [ 1]  334     ld acc24,a 
      00031D CF 00 0D         [ 2]  335     ldw acc16,x 
      000320 A6 18            [ 1]  336     ld a,#24 
      000322 6B 04            [ 1]  337     ld (CNTR,sp),a
      000324 7B 01            [ 1]  338     ld a,(DIVISOR,sp)
      000326 1E 02            [ 2]  339     ldw x,(DIVISOR+1,sp)
      000328 CD 01 9A         [ 4]  340     call cp24 ; A:X-acc24 ?
      00032B 23 14            [ 2]  341     jrule 22$ 
                                    342 ; quotient=0, remainder=divisor      
      00032D C6 00 0C         [ 1]  343     ld a,acc24 
      000330 CE 00 0D         [ 2]  344     ldw x,acc16 
      000333 72 5F 00 0C      [ 1]  345     clr acc24 
      000337 72 5F 00 0D      [ 1]  346     clr acc16 
      00033B 72 5F 00 0E      [ 1]  347     clr acc8 
      00033F 20 2E            [ 2]  348     jra 6$
      000341                        349 22$:     
      000341 4F               [ 1]  350     clr a 
      000342 5F               [ 1]  351     clrw x 
      000343 98               [ 1]  352     rcf  
      000344                        353 3$: 
      000344 72 59 00 0E      [ 1]  354     rlc acc8 
      000348 72 59 00 0D      [ 1]  355     rlc acc16
      00034C 72 59 00 0C      [ 1]  356     rlc acc24 
      000350 59               [ 2]  357     rlcw x  
      000351 49               [ 1]  358     rlc a
      000352 72 F0 02         [ 2]  359 4$: subw x,(DIVISOR+1,sp) 
      000355 12 01            [ 1]  360     sbc a,(DIVISOR,sp)
      000357 24 05            [ 1]  361     jrnc 5$
      000359 72 FB 02         [ 2]  362     addw x,(DIVISOR+1,sp)
      00035C 19 01            [ 1]  363     adc a,(DIVISOR,sp)
      00035E                        364 5$: ; shift carry in QUOTIENT 
      00035E 8C               [ 1]  365     ccf
      00035F 0A 04            [ 1]  366     dec (CNTR,sp)
      000361 26 E1            [ 1]  367     jrne 3$ 
      000363 72 59 00 0E      [ 1]  368     rlc acc8 
      000367 72 59 00 0D      [ 1]  369     rlc acc16 
      00036B 72 59 00 0B      [ 1]  370     rlc acc32 
      00036F                        371 6$:    
      00036F 6B 01            [ 1]  372     ld (DIVISOR,sp),a 
      000371 1F 02            [ 2]  373     ldw (DIVISOR+1,sp),x 
      000373 C6 00 0C         [ 1]  374     ld a,acc24 
      000376 CE 00 0D         [ 2]  375     ldw x,acc16 
      000379 0D 05            [ 1]  376     tnz (QSIGN,sp)
      00037B 27 03            [ 1]  377     jreq 8$
      00037D CD 01 C9         [ 4]  378     call neg_ax 
      000380                        379 8$: 
      000380                        380     _store_top 
      000380 90 F7            [ 1]    1     ld (y),a 
      000382 90 EF 01         [ 2]    2     ldw (1,y),x     
      000385 7B 01            [ 1]  381     ld a,(DIVISOR,sp)
      000387 1E 02            [ 2]  382     ldw x,(DIVSOR+1,sp)
      000389                        383 81$:
      000389 0D 06            [ 1]  384     tnz (RSIGN,sp)
      00038B 27 03            [ 1]  385     jreq 9$
      00038D CD 01 C9         [ 4]  386     call neg_ax       
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000390                        387 9$: _drop VSIZE 
      000390 5B 06            [ 2]    1     addw sp,#VSIZE 
      000392 81               [ 4]  388     ret 
                                    389 
                                    390 
                                    391 ;-------------------------------
                                    392 ; mod24 A:X % acc24 
                                    393 ; remainder 24 bits integers 
                                    394 ; input:
                                    395 ;    acc24   dividend 
                                    396 ;    A:X     divisor 
                                    397 ; output:
                                    398 ;    acc24   acc24 % A:X 
                                    399 ;------------------------------
      000393                        400 mod24:
      000393 CD 02 E5         [ 4]  401     call div24 
      000396                        402     _store_top  ; replace quotient by remainder 
      000396 90 F7            [ 1]    1     ld (y),a 
      000398 90 EF 01         [ 2]    2     ldw (1,y),x     
      00039B 81               [ 4]  403     ret 
                                    404 
                                    405 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      00039C                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      00039C                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      00039C                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      00039C                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      00039C                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      00039C                         37 prt_regs::
      00039C AE 03 DF         [ 2]   38 	ldw x,#regs_state 
      00039F CD 09 5A         [ 4]   39 	call puts
                                     40 ; register PC
      0003A2 16 01            [ 2]   41 	ldw y,(1,sp)
      0003A4 AE 05 13         [ 2]   42 	ldw x,#REG_EPC 
      0003A7 CD 04 64         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003AA 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003AC AE 05 24         [ 2]   46 	ldw x,#REG_CC 
      0003AF CD 04 42         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003B2 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003B4 AE 05 20         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0003B7 CD 04 42         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003BA 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003BC AE 05 1C         [ 2]   54 	ldw x,#REG_X 
      0003BF CD 04 64         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      0003C2 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      0003C4 AE 05 18         [ 2]   58 	ldw x,#REG_Y 
      0003C7 CD 04 64         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      0003CA 90 96            [ 1]   61 	ldw y,sp
      0003CC 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      0003D0 AE 05 29         [ 2]   63 	ldw x,#REG_SP
      0003D3 CD 04 64         [ 4]   64 	call prt_reg16
      0003D6 A6 0D            [ 1]   65 	ld a,#CR 
      0003D8 CD 08 FD         [ 4]   66 	call putc
      0003DB CD 08 FD         [ 4]   67 	call putc   
      0003DE 81               [ 4]   68 	ret 
                                     69 
                                     70 
      0003DF 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000406                         81 prt_peek::
      000406 89               [ 2]   82 	pushw x 
      000407 35 10 00 0A      [ 1]   83 	mov base,#16 
      00040B CD 17 A1         [ 4]   84 	call prt_i16  
      00040E A6 3A            [ 1]   85 	ld a,#': 
      000410 CD 08 FD         [ 4]   86 	call putc 
      000413 A6 20            [ 1]   87 	ld a,#SPACE 
      000415 CD 08 FD         [ 4]   88 	call putc 
      000418 85               [ 2]   89 	popw x 
      000419 F6               [ 1]   90 	ld a,(x)
      00041A 5F               [ 1]   91 	clrw x 
      00041B 97               [ 1]   92 	ld xl,a 
      00041C 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000420 CD 17 A1         [ 4]   94 	call prt_i16 
      000423 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000424                        102 ledon:
      000424 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      000428 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      000429                        107 ledoff:
      000429 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00042D 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      00042E                        112 ledtoggle:
      00042E A6 20            [ 1]  113     ld a,#LED2_MASK
      000430 C8 50 0A         [ 1]  114     xor a,PC_ODR
      000433 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000436 81               [ 4]  116     ret 
                                    117 
      000437                        118 left_paren:
      000437 A6 20            [ 1]  119 	ld a,#SPACE 
      000439 CD 08 FD         [ 4]  120 	call putc
      00043C A6 28            [ 1]  121 	ld a,#'( 
      00043E CD 08 FD         [ 4]  122 	call putc 	
      000441 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000442                        133 prt_reg8:
      000442 88               [ 1]  134 	push a 
      000443 CD 09 5A         [ 4]  135 	call puts 
      000446 7B 01            [ 1]  136 	ld a,(1,sp) 
      000448 5F               [ 1]  137 	clrw x 
      000449 97               [ 1]  138 	ld xl,a 
      00044A 35 10 00 0A      [ 1]  139 	mov base,#16
      00044E CD 17 A1         [ 4]  140 	call prt_i16  
      000451 CD 04 37         [ 4]  141 	call left_paren 
      000454 84               [ 1]  142 	pop a 
      000455 5F               [ 1]  143 	clrw x 
      000456 97               [ 1]  144 	ld xl,a 
      000457 35 0A 00 0A      [ 1]  145 	mov base,#10 
      00045B CD 17 A1         [ 4]  146 	call prt_i16  
      00045E A6 29            [ 1]  147 	ld a,#') 
      000460 CD 08 FD         [ 4]  148 	call putc
      000463 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      000464                        159 prt_reg16: 
      000464 90 89            [ 2]  160 	pushw y 
      000466 CD 09 5A         [ 4]  161 	call puts 
      000469 1E 01            [ 2]  162 	ldw x,(1,sp) 
      00046B 35 10 00 0A      [ 1]  163 	mov base,#16 
      00046F CD 17 A1         [ 4]  164 	call prt_i16  
      000472 CD 04 37         [ 4]  165 	call left_paren 
      000475 85               [ 2]  166 	popw x 
      000476 35 0A 00 0A      [ 1]  167 	mov base,#10 
      00047A CD 17 A1         [ 4]  168 	call prt_i16  
      00047D A6 29            [ 1]  169 	ld a,#') 
      00047F CD 08 FD         [ 4]  170 	call putc
      000482 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      000483                        177 print_registers:
      000483 AE 04 D6         [ 2]  178 	ldw x,#STATES
      000486 CD 09 5A         [ 4]  179 	call puts
                                    180 ; print EPC 
      000489 AE 05 13         [ 2]  181 	ldw x, #REG_EPC
      00048C CD 09 5A         [ 4]  182 	call puts 
      00048F 7B 0B            [ 1]  183 	ld a, (11,sp)
      000491 C7 00 0E         [ 1]  184 	ld acc8,a 
      000494 7B 0A            [ 1]  185 	ld a, (10,sp) 
      000496 C7 00 0D         [ 1]  186 	ld acc16,a 
      000499 7B 09            [ 1]  187 	ld a,(9,sp) 
      00049B C7 00 0C         [ 1]  188 	ld acc24,a
      00049E 5F               [ 1]  189 	clrw x  
      00049F A6 10            [ 1]  190 	ld a,#16
      0004A1 CD 17 B1         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004A4 AE 05 1C         [ 2]  193 	ldw x,#REG_X
      0004A7 16 05            [ 2]  194 	ldw y,(5,sp)
      0004A9 CD 04 64         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004AC AE 05 18         [ 2]  197 	ldw x,#REG_Y
      0004AF 16 07            [ 2]  198 	ldw y, (7,sp)
      0004B1 CD 04 64         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004B4 AE 05 20         [ 2]  201 	ldw x,#REG_A
      0004B7 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004B9 CD 04 42         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004BC AE 05 24         [ 2]  205 	ldw x,#REG_CC 
      0004BF 7B 03            [ 1]  206 	ld a, (3,sp) 
      0004C1 CD 04 42         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      0004C4 AE 05 29         [ 2]  209 	ldw x,#REG_SP
      0004C7 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0004C9 72 A9 00 0C      [ 2]  211 	addw y,#12
      0004CD CD 04 64         [ 4]  212 	call prt_reg16  
      0004D0 A6 0A            [ 1]  213 	ld a,#'\n' 
      0004D2 CD 08 FD         [ 4]  214 	call putc
      0004D5 81               [ 4]  215 	ret
                                    216 
      0004D6 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000513 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      000518 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00051C 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000520 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000524 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      000529 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      00052E                        235 cmd_itf:
      00052E 52 01            [ 2]  236 	sub sp,#VSIZE 
      000530 72 5F 00 17      [ 1]  237 	clr farptr 
      000534 72 5F 00 18      [ 1]  238 	clr farptr+1 
      000538 72 5F 00 19      [ 1]  239 	clr farptr+2  
      00053C                        240 repl:
      00053C A6 0D            [ 1]  241 	ld a,#CR 
      00053E CD 08 FD         [ 4]  242 	call putc 
      000541 A6 3F            [ 1]  243 	ld a,#'? 
      000543 CD 08 FD         [ 4]  244 	call putc
      000546 72 5F 00 00      [ 1]  245 	clr in.w 
      00054A 72 5F 00 01      [ 1]  246 	clr in 
      00054E CD 0A 5F         [ 4]  247 	call readln
      000551 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000555 90 F6            [ 1]  249 	ld a,(y)
      000557 27 E3            [ 1]  250 	jreq repl  
      000559 72 5C 00 01      [ 1]  251 	inc in 
      00055D CD 18 30         [ 4]  252 	call to_upper 
      000560 A1 51            [ 1]  253 	cp a,#'Q 
      000562 26 17            [ 1]  254 	jrne test_p
      000564                        255 repl_exit:
      000564 72 5F 16 68      [ 1]  256 	clr tib 
      000568 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00056C 72 5F 00 01      [ 1]  258 	clr in 
      000570                        259 	_drop #VSIZE 	
      000570 5B 01            [ 2]    1     addw sp,##VSIZE 
      000572 81               [ 4]  260 	ret  
      000573                        261 invalid:
      000573 AE 05 F4         [ 2]  262 	ldw x,#invalid_cmd 
      000576 CD 09 5A         [ 4]  263 	call puts 
      000579 20 C1            [ 2]  264 	jra repl 
      00057B                        265 test_p:	
      00057B A1 50            [ 1]  266     cp a,#'P 
      00057D 27 11            [ 1]  267 	jreq mem_peek
      00057F A1 53            [ 1]  268     cp a,#'S 
      000581 26 F0            [ 1]  269 	jrne invalid 
      000583                        270 print_string:	
      000583 CD 0E C7         [ 4]  271 	call get_token
      000586 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      000588 26 E9            [ 1]  273 	jrne invalid 
      00058A CD 09 5A         [ 4]  274 	call puts
      00058D CC 05 3C         [ 2]  275 	jp repl 	
      000590                        276 mem_peek:
      000590 A6 20            [ 1]  277 	ld a,#SPACE 
      000592 CD 0E B4         [ 4]  278 	call skip  	 
      000595 72 B9 00 00      [ 2]  279 	addw y,in.w 
      000599 AE 16 B8         [ 2]  280 	ldw x,#pad 
      00059C CD 13 A5         [ 4]  281 	call strcpy
      00059F AE 16 B8         [ 2]  282 	ldw x,#pad
      0005A2 CD 18 3C         [ 4]  283 	call atoi24 	
      0005A5 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005A8 CA 00 0D         [ 1]  285 	or a,acc16 
      0005AB CA 00 0E         [ 1]  286 	or a,acc8 
      0005AE 26 02            [ 1]  287 	jrne 1$ 
      0005B0 20 0C            [ 2]  288 	jra peek_byte  
      0005B2 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005B5 CF 00 17         [ 2]  290 	ldw farptr,x 
      0005B8 C6 00 0E         [ 1]  291 	ld a,acc8 
      0005BB C7 00 19         [ 1]  292 	ld farptr+2,a 
      0005BE                        293 peek_byte:
      0005BE CD 06 03         [ 4]  294 	call print_farptr 
      0005C1 A6 08            [ 1]  295 	ld a,#8 
      0005C3 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      0005C5 5F               [ 1]  297 	clrw x 
      0005C6 CD 06 1E         [ 4]  298 1$:	call fetchc  
      0005C9 89               [ 2]  299 	pushw x 
      0005CA C7 00 0E         [ 1]  300 	ld acc8,a 
      0005CD 5F               [ 1]  301 	clrw x 
      0005CE CF 00 0C         [ 2]  302 	ldw acc24,x 
      0005D1 A6 90            [ 1]  303 	ld a,#16+128
      0005D3 CD 17 B1         [ 4]  304 	call prt_acc24
      0005D6 85               [ 2]  305 	popw x 
      0005D7 0A 01            [ 1]  306 	dec (PSIZE,sp)
      0005D9 26 EB            [ 1]  307 	jrne 1$ 
      0005DB A6 08            [ 1]  308 	ld a,#8 
      0005DD CB 00 19         [ 1]  309 	add a,farptr+2 
      0005E0 C7 00 19         [ 1]  310 	ld farptr+2,a
      0005E3 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0005E4 C9 00 18         [ 1]  312 	adc a,farptr+1 
      0005E7 C7 00 18         [ 1]  313 	ld farptr+1,a 
      0005EA 4F               [ 1]  314 	clr a 
      0005EB C9 00 17         [ 1]  315 	adc a,farptr 
      0005EE C7 00 17         [ 1]  316 	ld farptr,a 
      0005F1 CC 05 3C         [ 2]  317 	jp repl  
                                    318 
      0005F4 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000603                        324 print_farptr:
      000603 C6 00 19         [ 1]  325 	ld a ,farptr+2 
      000606 C7 00 0E         [ 1]  326 	ld acc8,a 
      000609 CE 00 17         [ 2]  327 	ldw x,farptr 
      00060C CF 00 0C         [ 2]  328 	ldw acc24,x 
      00060F 5F               [ 1]  329 	clrw x 
      000610 A6 10            [ 1]  330 	ld a,#16 
      000612 CD 17 B1         [ 4]  331 	call prt_acc24
      000615 A6 20            [ 1]  332 	ld a,#SPACE 
      000617 CD 08 FD         [ 4]  333 	call putc 
      00061A CD 08 FD         [ 4]  334 	call putc 
      00061D 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      00061E                        346 fetchc: ; @C
      00061E 92 AF 00 17      [ 5]  347 	ldf a,([farptr],x)
      000622 5C               [ 1]  348 	incw x
      000623 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000624                        360 number:
      000624 CD 0E C7         [ 4]  361 	call get_token
      000627 A1 84            [ 1]  362 	cp a,#TK_INTGR
      000629 27 03            [ 1]  363 	jreq 1$
      00062B CC 16 45         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00062E 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      00062F                        380 show_row:
      00062F 4D               [ 1]  381 	tnz a 
      000630 26 01            [ 1]  382 	jrne 1$
      000632 81               [ 4]  383 	ret 
      000633                        384 1$:	
      000633 89               [ 2]  385 	pushw x  
      000634 88               [ 1]  386 	push a 
      000635 35 04 00 22      [ 1]  387 	mov tab_width,#4 
      000639 CD 17 A1         [ 4]  388 	call prt_i16 
      00063C A6 20            [ 1]  389 	ld a,#SPACE  
      00063E CD 08 FD         [ 4]  390 	call putc
      000641                        391 row_loop:
      000641 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000643 F6               [ 1]  393 	ld a,(x)
      000644 5F               [ 1]  394 	clrw x 
      000645 97               [ 1]  395 	ld xl,a 
      000646 CD 17 A1         [ 4]  396 	call prt_i16 
      000649 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      00064B 5C               [ 1]  398 	incw x 
      00064C 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      00064E 0A 01            [ 1]  400 	dec (CNT,sp)
      000650 26 EF            [ 1]  401 	jrne row_loop
      000652                        402 	_drop VSIZE  		
      000652 5B 03            [ 2]    1     addw sp,#VSIZE 
      000654 35 04 00 22      [ 1]  403 	mov tab_width,#4
      000658 A6 0D            [ 1]  404 	ld a,#CR 
      00065A CD 08 FD         [ 4]  405 	call putc 
      00065D 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00065E                        419 hex_dump:
      00065E 88               [ 1]  420 	push a 
      00065F                        421 	_vars VSIZE
      00065F 52 04            [ 2]    1     sub sp,#VSIZE 
      000661 C6 00 0A         [ 1]  422 	ld a,base
      000664 6B 03            [ 1]  423 	ld (BASE,sp),a 
      000666 35 10 00 0A      [ 1]  424 	mov base,#16
      00066A C6 00 22         [ 1]  425 	ld a,tab_width 
      00066D 6B 04            [ 1]  426 	ld (TABW,sp),a
      00066F A6 0D            [ 1]  427 	ld a,#CR 
      000671 CD 08 FD         [ 4]  428 	call putc 
      000674 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      000676 A6 10            [ 1]  430 	ld a,#16
      000678 90 A3 00 10      [ 2]  431 	cpw y,#16
      00067C 2A 02            [ 1]  432 	jrpl 2$
      00067E 90 9F            [ 1]  433 	ld a,yl
      000680                        434 2$: 	
      000680 CD 06 2F         [ 4]  435 	call show_row 
      000683 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      000685 72 A2 00 10      [ 2]  437 	subw y,#16 
      000689 90 A3 00 01      [ 2]  438 	cpw y,#1
      00068D 2A E5            [ 1]  439 	jrpl 1$
      00068F 7B 03            [ 1]  440 	ld a,(BASE,sp)
      000691 C7 00 0A         [ 1]  441 	ld base,a
      000694 7B 04            [ 1]  442 	ld a,(TABW,sp)
      000696 C7 00 22         [ 1]  443 	ld tab_width,a 
      000699                        444 	_drop VSIZE
      000699 5B 04            [ 2]    1     addw sp,#VSIZE 
      00069B 84               [ 1]  445 	pop a 
      00069C 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      00069D                         45 unlock_eeprom:
      00069D 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006A2 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006A6 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006AA 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006AE 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006B2 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006B7 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006B8                         62 unlock_flash:
      0006B8 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006BD 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006C1 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006C5 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006C9 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006CD 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006D2 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006D3                         76 row_erase:
      0006D3 88               [ 1]   77 	push a 
      0006D4 90 89            [ 2]   78 	pushw y 
      0006D6 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006DA 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006DE 4F               [ 1]   81 	clr a 
      0006DF 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0006E1 91 A7 00 17      [ 1]   83 	ldf ([farptr],y),a
      0006E5 90 5C            [ 1]   84     incw y
      0006E7 91 A7 00 17      [ 1]   85 	ldf ([farptr],y),a
      0006EB 90 5C            [ 1]   86     incw y
      0006ED 91 A7 00 17      [ 1]   87 	ldf ([farptr],y),a
      0006F1 90 5C            [ 1]   88     incw y
      0006F3 91 A7 00 17      [ 1]   89 	ldf ([farptr],y),a
      0006F7 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006FC 90 85            [ 2]   91 	popw y 
      0006FE 84               [ 1]   92 	pop a 
      0006FF 81               [ 4]   93 	ret
      000700                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000700                         97 move_erase_to_ram:
      000700 89               [ 2]   98 	pushw x 
      000701 90 89            [ 2]   99 	pushw y 
      000703 AE 07 00         [ 2]  100 	ldw x,#row_erase_end 
      000706 1D 06 D3         [ 2]  101 	subw x,#row_erase
      000709 CF 00 0D         [ 2]  102 	ldw acc16,x 
      00070C AE 16 68         [ 2]  103 	ldw x,#tib 
      00070F 90 AE 06 D3      [ 2]  104 	ldw y,#row_erase 
      000713 CD 13 B5         [ 4]  105 	call move
      000716 90 85            [ 2]  106 	popw y
      000718 85               [ 2]  107 	popw x
      000719 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00071A                        123 program_row:
      00071A 88               [ 1]  124 	push a 
      00071B 90 89            [ 2]  125 	pushw y 
      00071D 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00071F 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000723 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000727 90 5F            [ 1]  130 	clrw y 
      000729 F6               [ 1]  131 1$:	ld a,(x)
      00072A 91 A7 00 17      [ 1]  132 	ldf ([farptr],y),a
      00072E 5C               [ 1]  133 	incw x 
      00072F 90 5C            [ 1]  134 	incw y 
      000731 0A 01            [ 1]  135 	dec (BCNT,sp)
      000733 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000735 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073A                        139 	_drop 1 
      00073A 5B 01            [ 2]    1     addw sp,#1 
      00073C 90 85            [ 2]  140 	popw y 
      00073E 84               [ 1]  141 	pop a 
      00073F 81               [ 4]  142 	ret 
      000740                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000740                        149 move_prg_to_ram:
      000740 89               [ 2]  150 	pushw x 
      000741 90 89            [ 2]  151 	pushw y 
      000743 AE 07 40         [ 2]  152 	ldw x,#program_row_end 
      000746 1D 07 1A         [ 2]  153 	subw x,#program_row 
      000749 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00074C AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00074F 90 AE 07 1A      [ 2]  156 	ldw y,#program_row ; source address 
      000753 CD 13 B5         [ 4]  157 	call move
      000756 90 85            [ 2]  158 	popw y 
      000758 85               [ 2]  159 	popw x  
      000759 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00075A                        169 write_buffer:
      00075A 89               [ 2]  170 	pushw x 
      00075B 72 5D 00 17      [ 1]  171 	tnz farptr 
      00075F 26 0D            [ 1]  172 	jrne to_flash 
      000761 CE 00 18         [ 2]  173 	ldw x,farptr+1 
      000764 A3 35 80         [ 2]  174 	cpw x,#app_space  
      000767 24 05            [ 1]  175 	jruge to_flash 
      000769                        176 to_eeprom:
      000769 CD 06 9D         [ 4]  177 	call unlock_eeprom
      00076C 20 03            [ 2]  178 	jra do_programming
      00076E                        179 to_flash:
      00076E CD 06 B8         [ 4]  180 	call unlock_flash
      000771                        181 do_programming:
      000771 85               [ 2]  182 	popw x 
      000772 CD 16 68         [ 4]  183 	call tib
      000775 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000779 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00077D 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00077E                        197 block_erase:
      00077E 89               [ 2]  198 	pushw x 
      00077F CE 00 18         [ 2]  199 	ldw x,farptr+1
      000782 A3 35 80         [ 2]  200 	cpw x,#app_space 
      000785 24 0C            [ 1]  201 	jruge erase_flash 
                                    202 ; erase eeprom block
      000787 CD 06 9D         [ 4]  203 	call unlock_eeprom 
      00078A CD 16 68         [ 4]  204 	call tib 
      00078D 72 17 50 5F      [ 1]  205 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000791 20 0A            [ 2]  206 	jra erase_exit  
                                    207 ; erase flash block:
      000793                        208 erase_flash:
      000793 CD 06 B8         [ 4]  209 	call unlock_flash 
      000796 CD 16 68         [ 4]  210 	call tib 
      000799 72 13 50 5F      [ 1]  211     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00079D                        212 erase_exit: 
      00079D 85               [ 2]  213 	popw x 
      00079E 81               [ 4]  214 	ret 
                                    215 
                                    216 
                                    217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    218 ; write a byte to FLASH or EEPROM/OPTION  
                                    219 ; input:
                                    220 ;    a  		byte to write
                                    221 ;    farptr  	address
                                    222 ;    x          farptr[x]
                                    223 ; output:
                                    224 ;    none
                                    225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    226 	; variables locales
                           000001   227 	BTW = 1   ; byte to write offset on stack
                           000002   228 	OPT = 2   ; OPTION flag offset on stack
                           000002   229 	VSIZE = 2
      00079F                        230 write_byte:
      00079F 90 89            [ 2]  231 	pushw y
      0007A1                        232 	_vars VSIZE
      0007A1 52 02            [ 2]    1     sub sp,#VSIZE 
      0007A3 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      0007A5 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
                                    235 ; put addr[15:0] in Y, for bounds check.
      0007A7 90 CE 00 18      [ 2]  236 	ldw y,farptr+1   ; Y=addr15:0
                                    237 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007AB 72 5D 00 17      [ 1]  238 	tnz farptr 
      0007AF 26 14            [ 1]  239 	jrne write_flash
      0007B1 90 A3 35 80      [ 2]  240     cpw y,#app_space 	 
      0007B5 24 0E            [ 1]  241     jruge write_flash
      0007B7 90 A3 40 00      [ 2]  242 	cpw y,#EEPROM_BASE  
      0007BB 25 57            [ 1]  243     jrult write_exit
      0007BD 90 A3 48 7F      [ 2]  244 	cpw y,#OPTION_END 
      0007C1 22 51            [ 1]  245 	jrugt write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0007C3 20 16            [ 2]  246 	jra write_eeprom 
                                    247 ; write program memory
      0007C5                        248 write_flash:
      0007C5 CD 06 B8         [ 4]  249 	call unlock_flash 
      0007C8 9B               [ 1]  250 1$:	sim 
      0007C9 7B 01            [ 1]  251 	ld a,(BTW,sp)
      0007CB 92 A7 00 17      [ 4]  252 	ldf ([farptr],x),a ; farptr[x]=A
      0007CF 72 05 50 5F FB   [ 2]  253 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007D4 9A               [ 1]  254     rim 
      0007D5 72 13 50 5F      [ 1]  255     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007D9 20 39            [ 2]  256     jra write_exit
                                    257 ; write eeprom and option
      0007DB                        258 write_eeprom:
      0007DB CD 06 9D         [ 4]  259 	call unlock_eeprom
                                    260 	; check for data eeprom or option eeprom
      0007DE 90 A3 48 00      [ 2]  261 	cpw y,#OPTION_BASE
      0007E2 2B 08            [ 1]  262 	jrmi 1$
      0007E4 90 A3 48 80      [ 2]  263 	cpw y,#OPTION_END+1
      0007E8 2A 02            [ 1]  264 	jrpl 1$
      0007EA 03 02            [ 1]  265 	cpl (OPT,sp)
      0007EC                        266 1$: 
      0007EC 0D 02            [ 1]  267     tnz (OPT,sp)
      0007EE 27 08            [ 1]  268     jreq 2$
                                    269 	; pour modifier une option il faut modifier ces 2 bits
      0007F0 72 1E 50 5B      [ 1]  270     bset FLASH_CR2,#FLASH_CR2_OPT
      0007F4 72 1F 50 5C      [ 1]  271     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007F8                        272 2$: 
      0007F8 7B 01            [ 1]  273     ld a,(BTW,sp)
      0007FA 92 A7 00 17      [ 4]  274     ldf ([farptr],x),a
      0007FE 0D 02            [ 1]  275     tnz (OPT,sp)
      000800 27 08            [ 1]  276     jreq 3$
      000802 5C               [ 1]  277     incw x
      000803 7B 01            [ 1]  278     ld a,(BTW,sp)
      000805 43               [ 1]  279     cpl a
      000806 92 A7 00 17      [ 4]  280     ldf ([farptr],x),a
      00080A 72 05 50 5F FB   [ 2]  281 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00080F 72 0D 50 5F FB   [ 2]  282 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000814                        283 write_exit:
      000814                        284 	_drop VSIZE 
      000814 5B 02            [ 2]    1     addw sp,#VSIZE 
      000816 90 85            [ 2]  285 	popw y
      000818 81               [ 4]  286     ret
                                    287 
                                    288 ;--------------------------------------------
                                    289 ; write a data block to eeprom or flash 
                                    290 ; the block must be erased before 
                                    291 ; using this routine.
                                    292 ; input:
                                    293 ;   Y        source address   
                                    294 ;   X        array index  destination  farptr[x]
                                    295 ;   BSIZE    block size bytes 
                                    296 ;   farptr   write address , byte* 
                                    297 ; output:
                                    298 ;	X 		after last byte written 
                                    299 ;   Y 		after last byte read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    300 ;  farptr   point after block
                                    301 ;---------------------------------------------
      000819                        302 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000819                        303 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    304 	; local var 
                           000001   305 	XSAVE=1 
                           000002   306 	VSIZE=2 
      000819                        307 write_block::
      000819 88               [ 1]  308 	push a 
      00081A                        309 	_vars VSIZE
      00081A 52 02            [ 2]    1     sub sp,#VSIZE 
      00081C 1F 01            [ 2]  310 	ldw (XSAVE,sp),x 
      00081E 1E 06            [ 2]  311 	ldw x,(BSIZE,sp) 
      000820 27 13            [ 1]  312 	jreq 9$
      000822 1E 01            [ 2]  313 1$:	ldw x,(XSAVE,sp)
      000824 90 F6            [ 1]  314 	ld a,(y)
      000826 CD 07 9F         [ 4]  315 	call write_byte 
      000829 5C               [ 1]  316 	incw x 
      00082A 90 5C            [ 1]  317 	incw y 
      00082C 1F 01            [ 2]  318 	ldw (XSAVE,sp),x
      00082E 1E 06            [ 2]  319 	ldw x,(BSIZE,sp)
      000830 5A               [ 2]  320 	decw x
      000831 1F 06            [ 2]  321 	ldw (BSIZE,sp),x 
      000833 26 ED            [ 1]  322 	jrne 1$
      000835                        323 9$:
      000835 1E 01            [ 2]  324 	ldw x,(XSAVE,sp)
      000837 CD 08 6F         [ 4]  325 	call incr_farptr
      00083A                        326 	_drop VSIZE
      00083A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00083C 84               [ 1]  327 	pop a 
      00083D 81               [ 4]  328 	ret 
                                    329 
                                    330 
                                    331 ;------------------------------------
                                    332 ; write n bytes to flash | eeprom 
                                    333 ; if the number of bytes is 
                                    334 ; >=128 it is faster to 
                                    335 ; use write_block
                                    336 ; the bytes are written one by 
                                    337 ; one and auto erased if required. 
                                    338 ; input:
                                    339 ;    farptr    dest address 
                                    340 ;    X         src address 
                                    341 ;    A         count 
                                    342 ; output:
                                    343 ;    none   
                                    344 ;----------------------------------
      00083E                        345 write_nbytes:
      00083E 90 89            [ 2]  346 	pushw y
      000840 88               [ 1]  347 	push a 
      000841 90 93            [ 1]  348 	ldw y,x
      000843 5F               [ 1]  349 	clrw x 
      000844                        350 1$:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      000844 90 F6            [ 1]  351 	ld a,(y)
      000846 90 5C            [ 1]  352 	incw y
      000848 CD 07 9F         [ 4]  353 	call write_byte 
      00084B 5C               [ 1]  354 	incw x 
      00084C 0A 01            [ 1]  355 	dec (1,sp)  
      00084E 26 F4            [ 1]  356 	jrne 1$ 
      000850 84               [ 1]  357 9$: pop a 
      000851 90 85            [ 2]  358 	popw y 
      000853 81               [ 4]  359 	ret 
                                    360 
                                    361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    362 ;;;  flash memory operations
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 
                                    365 ;--------------------------
                                    366 ; align farptr to BLOCK_SIZE 
                                    367 ;---------------------------
      000854                        368 row_align:
      000854 A6 7F            [ 1]  369 	ld a,#0x7f 
      000856 C4 00 19         [ 1]  370 	and a,farptr+2 
      000859 27 13            [ 1]  371 	jreq 1$ 
      00085B CE 00 18         [ 2]  372 	ldw x,farptr+1 
      00085E 1C 00 80         [ 2]  373 	addw x,#BLOCK_SIZE 
      000861 24 04            [ 1]  374 	jrnc 0$
      000863 72 5C 00 17      [ 1]  375 	inc farptr 
      000867 9F               [ 1]  376 0$: ld a,xl 
      000868 A4 80            [ 1]  377 	and a,#0x80
      00086A 97               [ 1]  378 	ld xl,a
      00086B CF 00 18         [ 2]  379 	ldw farptr+1,x  	
      00086E 81               [ 4]  380 1$:	ret
                                    381 
                                    382 ;--------------------
                                    383 ; input:
                                    384 ;   X     increment 
                                    385 ; output:
                                    386 ;   farptr  incremented 
                                    387 ;---------------------
      00086F                        388 incr_farptr:
      00086F 72 BB 00 18      [ 2]  389 	addw x,farptr+1 
      000873 24 04            [ 1]  390 	jrnc 1$
      000875 72 5C 00 17      [ 1]  391 	inc farptr 
      000879 CF 00 18         [ 2]  392 1$:	ldw farptr+1,x  
      00087C 81               [ 4]  393 	ret 
                                    394 
                                    395 ;-----------------------------------
                                    396 ; scan block for non zero byte 
                                    397 ; block are 128 bytes 
                                    398 ; input:
                                    399 ;    farptr     address block  
                                    400 ; output:
                                    401 ;     A     0 cleared, other not cleared  
                                    402 ;-----------------------------------
      00087D                        403 scan_block:
      00087D 5F               [ 1]  404 	clrw x 
      00087E 92 AF 00 17      [ 5]  405 1$: ldf a,([farptr],x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      000882 26 06            [ 1]  406 	jrne 2$
      000884 5C               [ 1]  407 	incw x 
      000885 A3 00 80         [ 2]  408 	cpw x,#BLOCK_SIZE 
      000888 25 F4            [ 1]  409 	jrult 1$ 
      00088A 81               [ 4]  410 2$:	ret 
                                    411 
                                    412 
                                    413 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00088B                         66 Uart1RxHandler: ; console receive char 
      00088B 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000890 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000893 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000895 26 06            [ 1]   70 	jrne 2$
      000897 CD 08 FD         [ 4]   71 	call putc 
      00089A CC 00 46         [ 2]   72 	jp user_interrupted
      00089D                         73 2$:
      00089D A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      00089F 26 03            [ 1]   75 	jrne 3$
      0008A1 CC 00 B2         [ 2]   76 	jp cold_start 	
      0008A4 88               [ 1]   77 3$:	push a 
      0008A5 A6 25            [ 1]   78 	ld a,#rx1_queue 
      0008A7 CB 00 2E         [ 1]   79 	add a,rx1_tail 
      0008AA 5F               [ 1]   80 	clrw x 
      0008AB 97               [ 1]   81 	ld xl,a 
      0008AC 84               [ 1]   82 	pop a 
      0008AD F7               [ 1]   83 	ld (x),a 
      0008AE C6 00 2E         [ 1]   84 	ld a,rx1_tail 
      0008B1 4C               [ 1]   85 	inc a 
      0008B2 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008B4 C7 00 2E         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0008B7 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008B8                         97 uart1_init:
      0008B8 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      0008BC 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      0008C0 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      0008C4 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008C8                        103 uart1_set_baud: 
      0008C8 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008C9 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      0008CB C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      0008CE 27 0A            [ 1]  109 	jreq 2$ 
      0008D0                        110 1$: ; 8 Mhz 	
      0008D0 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008D4 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      0008D8 20 08            [ 2]  113 	jra 3$
      0008DA                        114 2$: ; 16 Mhz 	
      0008DA 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008DE 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      0008E2                        117 3$:
      0008E2 72 5F 52 31      [ 1]  118     clr UART1_DR
      0008E6 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008EA 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      0008EE 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      0008F3 72 5F 00 2D      [ 1]  122     clr rx1_head 
      0008F7 72 5F 00 2E      [ 1]  123 	clr rx1_tail
      0008FB 84               [ 1]  124 	pop a  
      0008FC 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      0008FD                        133 putc:: ; console output always on UART1
      0008FD                        134 uart1_putc:: 
      0008FD 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000902 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      000905 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      000906                        148 qgetc::
      000906                        149 uart1_qgetc::
      000906 C6 00 2D         [ 1]  150 	ld a,rx1_head 
      000909 C0 00 2E         [ 1]  151 	sub a,rx1_tail 
      00090C 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      00090D                        161 getc:: ;console input
      00090D                        162 uart1_getc::
      00090D CD 09 06         [ 4]  163 	call uart1_qgetc
      000910 27 FB            [ 1]  164 	jreq uart1_getc 
      000912 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      000913 A6 25            [ 1]  167 	ld a,#rx1_queue
      000915 CB 00 2D         [ 1]  168 	add a,rx1_head 
      000918 5F               [ 1]  169 	clrw x  
      000919 97               [ 1]  170 	ld xl,a 
      00091A F6               [ 1]  171 	ld a,(x)
      00091B 88               [ 1]  172 	push a
      00091C C6 00 2D         [ 1]  173 	ld a,rx1_head 
      00091F 4C               [ 1]  174 	inc a 
      000920 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000922 C7 00 2D         [ 1]  176 	ld rx1_head,a 
      000925 84               [ 1]  177 	pop a  
      000926 85               [ 2]  178 	popw x
      000927 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      000928 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      000934                        207 get_escape:
      000934 CD 09 0D         [ 4]  208     call getc 
      000937 A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000939 27 02            [ 1]  210     jreq 1$
      00093B 4F               [ 1]  211     clr a
      00093C 81               [ 4]  212     ret
      00093D CD 09 0D         [ 4]  213 1$: call getc 
      000940 AE 09 28         [ 2]  214     ldw x,#convert_table
      000943                        215 2$:
      000943 F1               [ 1]  216     cp a,(x)
      000944 27 08            [ 1]  217     jreq 4$
      000946 1C 00 02         [ 2]  218     addw x,#2
      000949 7D               [ 1]  219     tnz (x)
      00094A 26 F7            [ 1]  220     jrne 2$
      00094C 4F               [ 1]  221     clr a
      00094D 81               [ 4]  222     ret 
      00094E 5C               [ 1]  223 4$: incw x 
      00094F F6               [ 1]  224     ld a,(x)
      000950 A1 84            [ 1]  225     cp a,#SUP
      000952 26 05            [ 1]  226     jrne 5$
      000954 88               [ 1]  227     push a 
      000955 CD 09 0D         [ 4]  228     call getc
      000958 84               [ 1]  229     pop a 
      000959                        230 5$:
      000959 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      00095A                        241 puts::
      00095A F6               [ 1]  242     ld a,(x)
      00095B 27 06            [ 1]  243 	jreq 1$
      00095D CD 08 FD         [ 4]  244 	call putc 
      000960 5C               [ 1]  245 	incw x 
      000961 20 F7            [ 2]  246 	jra puts 
      000963 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      000964                        258 bksp:
      000964 A6 08            [ 1]  259 	ld a,#BS 
      000966 CD 08 FD         [ 4]  260 	call putc 
      000969 A6 20            [ 1]  261 	ld a,#SPACE 
      00096B CD 08 FD         [ 4]  262 	call putc 
      00096E A6 08            [ 1]  263 	ld a,#BS 
      000970 CD 08 FD         [ 4]  264 	call putc 
      000973 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      000974                        274 delete_nchar:
      000974 88               [ 1]  275 	push a 
      000975 0D 01            [ 1]  276 0$:	tnz (1,sp)
      000977 27 07            [ 1]  277 	jreq 1$
      000979 CD 09 64         [ 4]  278 	call bksp 
      00097C 0A 01            [ 1]  279 	dec (1,sp)
      00097E 20 F5            [ 2]  280 	jra 0$
      000980 84               [ 1]  281 1$:	pop a 
      000981 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      000982                        290 send_escape:
      000982 A6 1B            [ 1]  291 	ld a,#ESC 
      000984 CD 08 FD         [ 4]  292 	call putc 
      000987 A6 5B            [ 1]  293 	ld a,#'[
      000989 CD 08 FD         [ 4]  294 	call putc 
      00098C 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      00098D                        311 send_parameter:
      00098D 89               [ 2]  312 	pushw x 
      00098E 5F               [ 1]  313 	clrw x 
      00098F 97               [ 1]  314 	ld xl,a 
      000990 A6 0A            [ 1]  315 	ld a,#10 
      000992 62               [ 2]  316 	div x,a 
      000993 95               [ 1]  317 	ld xh,a 
      000994 9F               [ 1]  318 	ld a,xl
      000995 4D               [ 1]  319     tnz a 
      000996 27 0B            [ 1]  320     jreq 2$
      000998 A1 09            [ 1]  321 	cp a,#9 
      00099A 23 02            [ 2]  322 	jrule 1$
      00099C A6 39            [ 1]  323 	ld a,#'9
      00099E                        324 1$:
      00099E AB 30            [ 1]  325 	add a,#'0 
      0009A0 CD 08 FD         [ 4]  326 	call putc
      0009A3 9E               [ 1]  327 2$:	ld a,xh 
      0009A4 AB 30            [ 1]  328 	add a,#'0
      0009A6 CD 08 FD         [ 4]  329 	call putc 
      0009A9 85               [ 2]  330 	popw x 
      0009AA 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009AB                        344 move_left:
      0009AB 88               [ 1]  345 	push a 
      0009AC CD 09 82         [ 4]  346 	call send_escape
      0009AF 84               [ 1]  347     pop a
      0009B0 CD 09 8D         [ 4]  348 	call send_parameter 
      0009B3 A6 44            [ 1]  349 	ld a,#'D 
      0009B5 CD 08 FD         [ 4]  350 	call putc 
      0009B8 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0009B9                        362 move_right:
      0009B9 88               [ 1]  363 	push a 
      0009BA CD 09 82         [ 4]  364 	call send_escape
      0009BD 84               [ 1]  365     pop a
      0009BE CD 09 8D         [ 4]  366 	call send_parameter 
      0009C1 A6 43            [ 1]  367 	ld a,#'C 
      0009C3 CD 08 FD         [ 4]  368 	call putc 
      0009C6 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      0009C7                        379 spaces::
      0009C7 A6 20            [ 1]  380 	ld a,#SPACE 
      0009C9 5D               [ 2]  381 1$:	tnzw x
      0009CA 27 06            [ 1]  382 	jreq 9$
      0009CC CD 08 FD         [ 4]  383 	call putc 
      0009CF 5A               [ 2]  384 	decw x
      0009D0 20 F7            [ 2]  385 	jra 1$
      0009D2                        386 9$: 
      0009D2 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      0009D3                        404 insert_char: 
      0009D3                        405 	_vars VSIZE 
      0009D3 52 02            [ 2]    1     sub sp,#VSIZE 
      0009D5 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      0009D7 9E               [ 1]  407     ld a,xh 
      0009D8 6B 01            [ 1]  408 	ld (IPOS,sp),a
      0009DA 9F               [ 1]  409     ld a,xl 
      0009DB 6B 03            [ 1]  410     ld (LLEN,sp),a  
      0009DD 93               [ 1]  411     ldw x,y
      0009DE 5C               [ 1]  412     incw x 
      0009DF 7B 03            [ 1]  413     ld a,(LLEN,sp)
      0009E1 10 01            [ 1]  414     sub a,(IPOS,sp)
      0009E3 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0009E4 C7 00 0E         [ 1]  416     ld acc8,a 
      0009E7 72 5F 00 0D      [ 1]  417     clr acc16
      0009EB CD 13 B5         [ 4]  418     call move
      0009EE 90 AE 16 68      [ 2]  419     ldw y,#tib 
      0009F2 7B 01            [ 1]  420     ld a,(IPOS,sp)
      0009F4 C7 00 0E         [ 1]  421     ld acc8,a 
      0009F7 72 B9 00 0D      [ 2]  422     addw y,acc16 
      0009FB 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      0009FD 90 F7            [ 1]  424     ld (y),a
      0009FF 90 5C            [ 1]  425     incw y  
      000A01 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000A03 CD 09 AB         [ 4]  427     call move_left
      000A06 AE 16 68         [ 2]  428     ldw x,#tib 
      000A09 CD 09 5A         [ 4]  429     call puts 
      000A0C 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000A0E 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000A10 CD 09 AB         [ 4]  432     call move_left 
      000A13                        433 	_drop VSIZE 
      000A13 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A15 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      000A16                        447 delete_under:
      000A16                        448 	_vars VSIZE 
      000A16 52 02            [ 2]    1     sub sp,#VSIZE 
      000A18 6B 02            [ 1]  449     ld (LLEN,sp),a 
      000A1A 9F               [ 1]  450     ld a,xl 
      000A1B 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000A1D 93               [ 1]  452     ldw x,y ; move destination
      000A1E 90 5C            [ 1]  453     incw y  ; move source 
      000A20 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000A22 10 01            [ 1]  455     sub a,(CPOS,sp)
      000A24 4C               [ 1]  456     inc a ; move including zero at end.
      000A25 C7 00 0E         [ 1]  457     ld acc8,a 
      000A28 72 5F 00 0D      [ 1]  458     clr acc16 
      000A2C CD 13 B5         [ 4]  459 	call move 
      000A2F 90 AE 16 68      [ 2]  460     ldw y,#tib 
      000A33 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000A35 C7 00 0E         [ 1]  462     ld acc8,a 
      000A38 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000A3C 93               [ 1]  464     ldw x,y 
      000A3D CD 09 5A         [ 4]  465     call puts 
      000A40 A6 20            [ 1]  466     ld a,#SPACE  
      000A42 CD 08 FD         [ 4]  467     call putc
      000A45 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A47 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A49 CD 09 AB         [ 4]  470     call move_left 
      000A4C 0A 02            [ 1]  471     dec (LLEN,sp)
      000A4E                        472 	_drop VSIZE 
      000A4E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A50 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000A51                        485 delete_line:
      000A51 CD 09 82         [ 4]  486     call send_escape
      000A54 A6 32            [ 1]  487 	ld a,#'2
      000A56 CD 08 FD         [ 4]  488 	call putc 
      000A59 A6 4B            [ 1]  489 	ld a,#'K 
      000A5B CD 08 FD         [ 4]  490 	call putc 
      000A5E 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A5F                        523 readln::
      000A5F                        524 	_vars VSIZE 
      000A5F 52 04            [ 2]    1     sub sp,#VSIZE 
      000A61 5F               [ 1]  525 	clrw x 
      000A62 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000A64 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      000A66 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A68 90 AE 16 68      [ 2]  529  	ldw y,#tib ; input buffer
      000A6C                        530 readln_loop:
      000A6C CD 09 0D         [ 4]  531 	call getc
      000A6F 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000A71 A1 1B            [ 1]  533     cp a,#ESC 
      000A73 26 05            [ 1]  534     jrne 0$
      000A75 CD 09 34         [ 4]  535     call get_escape 
      000A78 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      000A7A A1 0D            [ 1]  537 0$:	cp a,#CR
      000A7C 26 03            [ 1]  538 	jrne 1$
      000A7E CC 0C 08         [ 2]  539 	jp readln_quit
      000A81 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000A83 26 03            [ 1]  541 	jrne 2$ 
      000A85 CC 0C 08         [ 2]  542 	jp readln_quit
      000A88                        543 2$:
      000A88 A1 08            [ 1]  544 	cp a,#BS
      000A8A 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000A8C 0D 03            [ 1]  547     tnz (CPOS,sp)
      000A8E 27 DC            [ 1]  548     jreq readln_loop 
      000A90 A6 01            [ 1]  549     ld a,#1 
      000A92 CD 09 AB         [ 4]  550     call move_left
      000A95 0A 03            [ 1]  551     dec (CPOS,sp)
      000A97 90 5A            [ 2]  552     decw y 
      000A99 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      000A9B CC 0B B4         [ 2]  554     jp 12$
      000A9E                        555 3$:
      000A9E A1 04            [ 1]  556 	cp a,#CTRL_D
      000AA0 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000AA2 CD 0A 51         [ 4]  559 	call delete_line 
      000AA5 7B 03            [ 1]  560     ld a,(CPOS,sp)
      000AA7 4C               [ 1]  561     inc a 
      000AA8 CD 09 AB         [ 4]  562     call move_left 
      000AAB A6 3E            [ 1]  563 	ld a,#'> 
      000AAD CD 08 FD         [ 4]  564 	call putc 
      000AB0 90 AE 16 68      [ 2]  565 	ldw y,#tib
      000AB4 90 7F            [ 1]  566 	clr (y)
      000AB6 0F 02            [ 1]  567 	clr (LL,sp)
      000AB8 0F 03            [ 1]  568 	clr (CPOS,sp)
      000ABA 20 B0            [ 2]  569 	jra readln_loop
      000ABC                        570 4$:
      000ABC A1 12            [ 1]  571 	cp a,#CTRL_R 
      000ABE 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000AC0 0D 02            [ 1]  574 	tnz (LL,sp)
      000AC2 26 A8            [ 1]  575 	jrne readln_loop
      000AC4 AE 16 68         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000AC7 CD 13 89         [ 4]  577 	call strlen 
      000ACA 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000ACE 27 9C            [ 1]  579 	jreq readln_loop
      000AD0 6B 02            [ 1]  580 	ld (LL,sp),a 
      000AD2 6B 03            [ 1]  581     ld (CPOS,sp),a
      000AD4 AE 16 68         [ 2]  582 	ldw x,#tib 
      000AD7 CD 09 5A         [ 4]  583 	call puts
      000ADA 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000ADC 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000ADF 20 8B            [ 2]  586 	jra readln_loop 
      000AE1                        587 5$:
      000AE1 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000AE3 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      000AE5 AE 16 68         [ 2]  591 	ldw x,#tib 
      000AE8 CD 18 3C         [ 4]  592 	call atoi24
      000AEB CE 00 0D         [ 2]  593 	ldw x,acc16
      000AEE CD 0C 42         [ 4]  594 	call search_lineno
      000AF1 5D               [ 2]  595 	tnzw x 
      000AF2 26 0B            [ 1]  596 	jrne 51$
      000AF4 0F 02            [ 1]  597 	clr (LL,sp)
      000AF6 90 AE 16 68      [ 2]  598 	ldw y,#tib
      000AFA 90 7F            [ 1]  599     clr (y) 	
      000AFC CC 0C 08         [ 2]  600 	jp readln_quit  
      000AFF                        601 51$:
      000AFF CF 00 04         [ 2]  602 	ldw basicptr,x
      000B02 E6 02            [ 1]  603 	ld a,(2,x)
      000B04 C7 00 03         [ 1]  604 	ld count,a 
      000B07 90 AE 16 68      [ 2]  605 	ldw y,#tib 
      000B0B CD 11 B0         [ 4]  606 	call decompile 
      000B0E 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000B10 A6 0D            [ 1]  608 	ld a,#CR 
      000B12 CD 08 FD         [ 4]  609 	call putc 
      000B15 A6 3E            [ 1]  610 	ld a,#'>
      000B17 CD 08 FD         [ 4]  611 	call putc
      000B1A AE 16 68         [ 2]  612     ldw x,#tib  
      000B1D CD 13 89         [ 4]  613 	call strlen 
      000B20 6B 02            [ 1]  614 	ld (LL,sp),a 
      000B22 CD 09 5A         [ 4]  615 	call puts 
      000B25 90 93            [ 1]  616 	ldw y,x
      000B27 7B 02            [ 1]  617     ld a,(LL,sp)
      000B29 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000B2B CC 0A 6C         [ 2]  619 	jp readln_loop
      000B2E                        620 6$:
      000B2E A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000B30 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000B32 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000B34 11 02            [ 1]  625     cp a,(LL,sp)
      000B36 2B 03            [ 1]  626     jrmi 61$
      000B38 CC 0A 6C         [ 2]  627     jp readln_loop 
      000B3B                        628 61$:
      000B3B A6 01            [ 1]  629     ld a,#1 
      000B3D CD 09 B9         [ 4]  630 	call move_right 
      000B40 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000B42 90 5C            [ 1]  632     incw y 
      000B44 CC 0A 6C         [ 2]  633     jp readln_loop 
      000B47 A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      000B49 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000B4B 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000B4D 26 03            [ 1]  638 	jrne 71$
      000B4F CC 0A 6C         [ 2]  639 	jp readln_loop
      000B52                        640 71$:
      000B52 A6 01            [ 1]  641     ld a,#1 
      000B54 CD 09 AB         [ 4]  642 	call move_left 
      000B57 0A 03            [ 1]  643 	dec (CPOS,sp)
      000B59 90 5A            [ 2]  644     decw y 
      000B5B CC 0A 6C         [ 2]  645 	jp readln_loop 
      000B5E A1 82            [ 1]  646 8$: cp a,#HOME  
      000B60 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000B62 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000B64 CD 09 AB         [ 4]  650     call move_left 
      000B67 0F 03            [ 1]  651 	clr (CPOS,sp)
      000B69 90 AE 16 68      [ 2]  652     ldw y,#tib 
      000B6D CC 0A 6C         [ 2]  653 	jp readln_loop  
      000B70 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000B72 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000B74 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      000B76 11 02            [ 1]  658 	cp a,(LL,sp)
      000B78 26 03            [ 1]  659 	jrne 91$
      000B7A CC 0A 6C         [ 2]  660 	jp readln_loop 
      000B7D                        661 91$:
      000B7D 7B 02            [ 1]  662 	ld a,(LL,sp)
      000B7F 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000B81 CD 09 B9         [ 4]  664 	call move_right 
      000B84 7B 02            [ 1]  665 	ld a,(LL,sp)
      000B86 6B 03            [ 1]  666 	ld (CPOS,sp),a
      000B88 90 AE 16 68      [ 2]  667     ldw y,#tib
      000B8C 72 5F 00 0D      [ 1]  668     clr acc16 
      000B90 C7 00 0E         [ 1]  669     ld acc8,a 
      000B93 72 B9 00 0D      [ 2]  670     addw y,acc16  
      000B97 CC 0A 6C         [ 2]  671 	jp readln_loop 
      000B9A A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000B9C 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000B9E 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000BA0 90 89            [ 2]  676 	pushw y 
      000BA2 CD 24 7D         [ 4]  677 	call beep_1khz
      000BA5 90 85            [ 2]  678 	popw y 
      000BA7 CC 0A 6C         [ 2]  679 	jp readln_loop 
      000BAA A1 84            [ 1]  680 11$: cp a,#SUP 
      000BAC 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000BAE 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000BB0 11 02            [ 1]  684     cp a,(LL,sp)
      000BB2 2A 08            [ 1]  685     jrpl 13$
      000BB4                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000BB4 97               [ 1]  687     ld xl,a    ; cursor position 
      000BB5 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      000BB7 CD 0A 16         [ 4]  689     call delete_under
      000BBA 0A 02            [ 1]  690     dec (LLEN,sp)
      000BBC                        691 13$:
      000BBC CC 0A 6C         [ 2]  692     jp readln_loop 
      000BBF                        693 final_test:
      000BBF A1 20            [ 1]  694 	cp a,#SPACE
      000BC1 2A 03            [ 1]  695 	jrpl accept_char
      000BC3 CC 0A 6C         [ 2]  696 	jp readln_loop
      000BC6                        697 accept_char:
      000BC6 A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      000BC8 11 02            [ 1]  699 	cp a, (LL,sp)
      000BCA 2A 03            [ 1]  700 	jrpl 1$
      000BCC CC 0A 6C         [ 2]  701 	jp readln_loop
      000BCF 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000BD1 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000BD3 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000BD5 11 02            [ 1]  706     cp a,(LL,sp)
      000BD7 27 12            [ 1]  707     jreq overwrite
      000BD9 7B 02            [ 1]  708     ld a,(LL,sp)
      000BDB 97               [ 1]  709     ld xl,a 
      000BDC 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000BDE 95               [ 1]  711     ld xh,a
      000BDF 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000BE1 CD 09 D3         [ 4]  713     call insert_char
      000BE4 0C 02            [ 1]  714     inc (LLEN,sp)
      000BE6 0C 03            [ 1]  715     inc (CPOS,sp)
      000BE8 CC 0A 6C         [ 2]  716     jp readln_loop 
      000BEB                        717 overwrite:
      000BEB 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000BED 90 F7            [ 1]  719 	ld (y),a
      000BEF 90 5C            [ 1]  720     incw y
      000BF1 CD 08 FD         [ 4]  721     call putc 
      000BF4 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      000BF6 11 02            [ 1]  723 	cp a,(LL,sp)
      000BF8 2B 09            [ 1]  724 	jrmi 1$
      000BFA 90 7F            [ 1]  725 	clr (y)
      000BFC 0C 02            [ 1]  726 	inc (LL,sp)
      000BFE 0C 03            [ 1]  727     inc (CPOS,sp)
      000C00 CC 0A 6C         [ 2]  728 	jp readln_loop 
      000C03                        729 1$:	
      000C03 0C 03            [ 1]  730 	inc (CPOS,sp)
      000C05 CC 0A 6C         [ 2]  731 	jp readln_loop 
      000C08                        732 readln_quit:
      000C08 90 AE 16 68      [ 2]  733 	ldw y,#tib
      000C0C 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000C0E 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000C11 90 7F            [ 1]  736     clr (y)
      000C13 7B 02            [ 1]  737 	ld a,(LL,sp)
      000C15 C7 00 03         [ 1]  738 	ld count,a 
      000C18 A6 0D            [ 1]  739 	ld a,#CR
      000C1A CD 08 FD         [ 4]  740 	call putc
      000C1D                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000C1D 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C1F 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000C20                        750 print_hex::
      000C20 88               [ 1]  751 	push a 
      000C21 4E               [ 1]  752 	swap a 
      000C22 CD 0C 37         [ 4]  753 	call to_hex_char 
      000C25 CD 08 FD         [ 4]  754 	call putc 
      000C28 7B 01            [ 1]  755     ld a,(1,sp) 
      000C2A CD 0C 37         [ 4]  756 	call to_hex_char
      000C2D CD 08 FD         [ 4]  757 	call putc
      000C30 A6 20            [ 1]  758 	ld a,#SPACE 
      000C32 CD 08 FD         [ 4]  759 	call putc 
      000C35 84               [ 1]  760 	pop a 
      000C36 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      000C37                        770 to_hex_char::
      000C37 A4 0F            [ 1]  771 	and a,#15 
      000C39 A1 09            [ 1]  772 	cp a,#9 
      000C3B 23 02            [ 2]  773 	jrule 1$ 
      000C3D AB 07            [ 1]  774 	add a,#7
      000C3F AB 30            [ 1]  775 1$: add a,#'0 
      000C41 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C42                         51 search_lineno::
      000C42                         52 	_vars VSIZE
      000C42 52 02            [ 2]    1     sub sp,#VSIZE 
      000C44 0F 01            [ 1]   53 	clr (LL,sp)
      000C46 90 CE 00 1A      [ 2]   54 	ldw y,txtbgn
      000C4A 4D               [ 1]   55 	tnz a 
      000C4B 27 04            [ 1]   56 	jreq search_ln_loop
      000C4D 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C51                         58 search_ln_loop:
      000C51 90 C3 00 1C      [ 2]   59 	cpw y,txtend 
      000C55 2A 10            [ 1]   60 	jrpl 8$
      000C57 90 F3            [ 1]   61 	cpw x,(y)
      000C59 27 0E            [ 1]   62 	jreq 9$
      000C5B 2B 0A            [ 1]   63 	jrmi 8$ 
      000C5D 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C60 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C62 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C65 20 EA            [ 2]   67 	jra search_ln_loop 
      000C67                         68 8$: 
      000C67 5F               [ 1]   69 	clrw x 	
      000C68 51               [ 1]   70 	exgw x,y 
      000C69                         71 9$: _drop VSIZE
      000C69 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6B 51               [ 1]   72 	exgw x,y   
      000C6C 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C6D                         83 del_line: 
      000C6D                         84 	_vars VSIZE 
      000C6D 52 04            [ 2]    1     sub sp,#VSIZE 
      000C6F E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C71 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C73 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C75 90 93            [ 1]   88 	ldw y,x  
      000C77 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7A 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7C 90 CE 00 1C      [ 2]   91 	ldw y,txtend 
      000C80 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C83 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C87 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C89 CD 13 B5         [ 4]   95 	call move
      000C8C 90 CE 00 1C      [ 2]   96 	ldw y,txtend 
      000C90 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C93 90 CF 00 1C      [ 2]   98 	ldw txtend,y  
      000C97                         99 	_drop VSIZE     
      000C97 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C99 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C9A                        115 create_gap:
      000C9A                        116 	_vars VSIZE
      000C9A 52 06            [ 2]    1     sub sp,#VSIZE 
      000C9C 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000C9E 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA0 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CA4 90 93            [ 1]  120 	ldw y,x ; SRC
      000CA6 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CAA 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CAC CE 00 1C         [ 2]  124 	ldw x,txtend 
      000CAF 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CB2 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CB5 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CB7 CD 13 B5         [ 4]  128 	call move
      000CBA CE 00 1C         [ 2]  129 	ldw x,txtend
      000CBD 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC0 CF 00 1C         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000CC3                        132 9$:	_drop VSIZE 
      000CC3 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CC5 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CC6                        150 insert_line:
      000CC6                        151 	_vars VSIZE 
      000CC6 52 08            [ 2]    1     sub sp,#VSIZE 
      000CC8 CE 00 1C         [ 2]  152 	ldw x,txtend  
      000CCB C3 00 1A         [ 2]  153 	cpw x,txtbgn 
      000CCE 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD0 AE 00 02         [ 2]  156 	ldw x,#2 
      000CD3 72 D6 00 18      [ 4]  157 	ld a,([ptr16],x)
      000CD7 A1 03            [ 1]  158 	cp a,#3
      000CD9 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CDB 5F               [ 1]  160 	clrw x 
      000CDC 97               [ 1]  161 	ld xl,a
      000CDD 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CDF CE 00 1A         [ 2]  163 	ldw x,txtbgn
      000CE2 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CE4 CE 00 1C         [ 2]  165 	ldw x,txtend 
      000CE7 20 38            [ 2]  166 	jra 4$
      000CE9 72 CE 00 18      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CED 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CEF AE 00 02         [ 2]  170 	ldw x,#2 
      000CF2 72 D6 00 18      [ 4]  171 	ld a,([ptr16],x)
      000CF6 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CF7 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CF9 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CFB 4F               [ 1]  177 	clr a 
      000CFC CD 0C 42         [ 4]  178 	call search_lineno 
      000CFF 5D               [ 2]  179 	tnzw x 
      000D00 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D02 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D04 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D06 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D08 CD 0C 6D         [ 4]  188 	call del_line
      000D0B                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D0B A6 03            [ 1]  192 	ld a,#3
      000D0D 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D0F 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D11 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D13 C3 00 1C         [ 2]  198 	cpw x,txtend 
      000D16 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D18 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D1A 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D1C CD 0C 9A         [ 4]  204 	call create_gap
      000D1F 20 06            [ 2]  205 	jra 5$
      000D21                        206 4$: 
      000D21 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D24 CF 00 1C         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D27 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D29 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D2C 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D30 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D32 CD 13 B5         [ 4]  214 	call move 
      000D35                        215 insert_ln_exit:	
      000D35                        216 	_drop VSIZE
      000D35 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D37 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D38                        233 parse_quote: 
      000D38                        234 	_vars VSIZE 
      000D38 52 02            [ 2]    1     sub sp,#VSIZE 
      000D3A 4F               [ 1]  235 	clr a
      000D3B 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D3D                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000D3D 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D40 27 24            [ 1]  239 	jreq 6$
      000D42 72 5C 00 01      [ 1]  240 	inc in 
      000D46 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D48 A6 5C            [ 1]  242 	ld a,#'\
      000D4A 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D4C 26 0A            [ 1]  244 	jrne 3$
      000D4E 0F 01            [ 1]  245 	clr (PREV,sp)
      000D50 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D52 AD 1C            [ 4]  247 	callr convert_escape
      000D54 F7               [ 1]  248 	ld (x),a 
      000D55 5C               [ 1]  249 	incw x 
      000D56 20 E5            [ 2]  250 	jra 2$
      000D58                        251 3$:
      000D58 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D5A A1 5C            [ 1]  253 	cp a,#'\'
      000D5C 27 DD            [ 1]  254 	jreq 1$
      000D5E A1 22            [ 1]  255 	cp a,#'"
      000D60 27 04            [ 1]  256 	jreq 6$ 
      000D62 F7               [ 1]  257 	ld (x),a 
      000D63 5C               [ 1]  258 	incw x 
      000D64 20 D7            [ 2]  259 	jra 2$
      000D66                        260 6$:
      000D66 7F               [ 1]  261 	clr (x)
      000D67 5C               [ 1]  262 	incw x 
      000D68 90 93            [ 1]  263 	ldw y,x 
      000D6A 5F               [ 1]  264 	clrw x 
      000D6B A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D6D                        266 	_drop VSIZE
      000D6D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D6F 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D70                        278 convert_escape:
      000D70 89               [ 2]  279 	pushw x 
      000D71 AE 0D 85         [ 2]  280 	ldw x,#escaped 
      000D74 F1               [ 1]  281 1$:	cp a,(x)
      000D75 27 06            [ 1]  282 	jreq 2$
      000D77 7D               [ 1]  283 	tnz (x)
      000D78 27 09            [ 1]  284 	jreq 3$
      000D7A 5C               [ 1]  285 	incw x 
      000D7B 20 F7            [ 2]  286 	jra 1$
      000D7D 1D 0D 85         [ 2]  287 2$: subw x,#escaped 
      000D80 9F               [ 1]  288 	ld a,xl 
      000D81 AB 07            [ 1]  289 	add a,#7
      000D83 85               [ 2]  290 3$:	popw x 
      000D84 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    292 
      000D85 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D8D                        310 parse_integer: ; { -- n }
      000D8D 89               [ 2]  311 	pushw x 	
      000D8E 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D90 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D92 A1 24            [ 1]  314 	cp a,#'$
      000D94 26 04            [ 1]  315 	jrne 2$ 
      000D96                        316     _drop #1
      000D96 5B 01            [ 2]    1     addw sp,##1 
      000D98 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D9A F7               [ 1]  318 2$:	ld (x),a 
      000D9B 5C               [ 1]  319 	incw x 
      000D9C 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000D9F 72 5C 00 01      [ 1]  321 	inc in 
      000DA3 CD 18 30         [ 4]  322 	call to_upper 
      000DA6 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DA8 CD 0E 2E         [ 4]  324 	call is_digit 
      000DAB 25 ED            [ 1]  325 	jrc 2$
      000DAD A6 10            [ 1]  326 	ld a,#16 
      000DAF 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB1 26 0A            [ 1]  328 	jrne 3$ 
      000DB3 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DB5 A1 41            [ 1]  330 	cp a,#'A 
      000DB7 2B 04            [ 1]  331 	jrmi 3$ 
      000DB9 A1 47            [ 1]  332 	cp a,#'G 
      000DBB 2B DD            [ 1]  333 	jrmi 2$ 
      000DBD 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC1 7F               [ 1]  335     clr (x)
      000DC2 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DC4 CD 18 3C         [ 4]  337 	call atoi24
      000DC7 90 93            [ 1]  338 	ldw y,x
      000DC9 C6 00 0C         [ 1]  339 	ld a,acc24 
      000DCC 90 F7            [ 1]  340 	ld (y),a 
      000DCE 72 A9 00 01      [ 2]  341 	addw y,#1  
      000DD2 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DD5 90 FF            [ 2]  343 	ldw (y),x 
      000DD7 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000DDB A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DDD                        346 	_drop VSIZE  
      000DDD 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DDF 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE0                        364 parse_binary: ; { -- n }
      000DE0 4B 00            [ 1]  365 	push #0
      000DE2 4B 00            [ 1]  366 	push #0
      000DE4 4B 00            [ 1]  367 	push #0
      000DE6                        368 2$:	
      000DE6 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DE9 72 5C 00 01      [ 1]  370 	inc in 
      000DED A1 30            [ 1]  371 	cp a,#'0 
      000DEF 27 06            [ 1]  372 	jreq 3$
      000DF1 A1 31            [ 1]  373 	cp a,#'1 
      000DF3 27 02            [ 1]  374 	jreq 3$ 
      000DF5 20 0B            [ 2]  375 	jra bin_exit 
      000DF7 A0 30            [ 1]  376 3$: sub a,#'0 
      000DF9 46               [ 1]  377 	rrc a
      000DFA 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DFC 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DFE 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E00 20 E4            [ 2]  381 	jra 2$  
      000E02                        382 bin_exit:
      000E02 72 5A 00 01      [ 1]  383 	dec in 
      000E06 90 93            [ 1]  384 	ldw y,x
      000E08 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E0A C7 00 0C         [ 1]  386 	ld acc24,a 
      000E0D 1E 02            [ 2]  387 	ldw x,(BINARY+1,sp)
      000E0F CF 00 0D         [ 2]  388 	ldw acc16,x
      000E12 90 FF            [ 2]  389 	ldw (y),x 
      000E14 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E18 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E1A                        392 	_drop VSIZE 
      000E1A 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E1C 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E1D                        402 is_alpha::
      000E1D A1 41            [ 1]  403 	cp a,#'A 
      000E1F 8C               [ 1]  404 	ccf 
      000E20 24 0B            [ 1]  405 	jrnc 9$ 
      000E22 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E24 25 07            [ 1]  407 	jrc 9$ 
      000E26 A1 61            [ 1]  408 	cp a,#'a 
      000E28 8C               [ 1]  409 	ccf 
      000E29 24 02            [ 1]  410 	jrnc 9$
      000E2B A1 7B            [ 1]  411 	cp a,#'z+1
      000E2D 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E2E                        421 is_digit::
      000E2E A1 30            [ 1]  422 	cp a,#'0
      000E30 25 03            [ 1]  423 	jrc 1$
      000E32 A1 3A            [ 1]  424     cp a,#'9+1
      000E34 8C               [ 1]  425 	ccf 
      000E35 8C               [ 1]  426 1$:	ccf 
      000E36 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E37                        438 is_alnum::
      000E37 CD 0E 2E         [ 4]  439 	call is_digit
      000E3A 25 03            [ 1]  440 	jrc 1$ 
      000E3C CD 0E 1D         [ 4]  441 	call is_alpha
      000E3F 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000E40                        453 is_symbol_char: 
      000E40 A1 5F            [ 1]  454 	cp a,#'_ 
      000E42 26 03            [ 1]  455 	jrne 1$
      000E44 99               [ 1]  456 	scf 
      000E45 20 03            [ 2]  457 	jra 9$ 
      000E47 CD 0E 37         [ 4]  458 1$:	call is_alnum 
      000E4A 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4B                        473 parse_symbol:
      000E4B 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E4C                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E4C CD 18 30         [ 4]  477 	call to_upper  
      000E4F F7               [ 1]  478 	ld (x), a 
      000E50 5C               [ 1]  479 	incw x
      000E51 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E54 72 5C 00 01      [ 1]  481 	inc in 
      000E58 CD 0E 40         [ 4]  482 	call is_symbol_char 
      000E5B 25 EF            [ 1]  483 	jrc symb_loop 
      000E5D 7F               [ 1]  484 	clr (x)
      000E5E 72 5A 00 01      [ 1]  485 	dec in  
      000E62 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E63                        502 parse_keyword: 
      000E63 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E64 CD 0E 4B         [ 4]  504 	call parse_symbol
      000E67 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E69 E6 02            [ 1]  506 	ld a,(2,x)
      000E6B 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E6D E6 01            [ 1]  509 	ld a,(1,x) 
      000E6F A0 41            [ 1]  510 	sub a,#'A 
      000E71 AE 00 03         [ 2]  511 	ldw x,#3 
      000E74 42               [ 4]  512 	mul x,a 
      000E75 1C 00 2F         [ 2]  513 	addw x,#vars 
      000E78 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E7A 20 24            [ 2]  515 	jra 4$ 
      000E7C                        516 2$: ; check for keyword, otherwise syntax error.
      000E7C                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E7C AE 32 DE         [ 2]    1     ldw x,#kword_dict+2
      000E7F 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E81 90 5C            [ 1]  519 	incw y 
      000E83 CD 18 A6         [ 4]  520 	call search_dict
      000E86 4D               [ 1]  521 	tnz a
      000E87 26 17            [ 1]  522 	jrne 4$ 
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E89 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8B A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E8D 90 F7            [ 1]  527 	ld (y),a 
      000E8F 90 5C            [ 1]  528 	incw y
      000E91                        529 24$:	
      000E91 90 F6            [ 1]  530     ld a,(y)
      000E93 27 04            [ 1]  531 	jreq 3$
      000E95 90 5C            [ 1]  532 	incw y 
      000E97 20 F8            [ 2]  533 	jra 24$ 
      000E99 90 5C            [ 1]  534 3$: incw y 
      000E9B A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000E9D 5F               [ 1]  536 	clrw x 	
      000E9E 20 11            [ 2]  537 	jra 5$ 
      000EA0                        538 4$:	
      000EA0 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000EA2 A3 00 4E         [ 2]  540 	cpw x,#LET_IDX 
      000EA5 27 0A            [ 1]  541 	jreq 5$  ; don't compile LET command 
      000EA7 90 F7            [ 1]  542 	ld (y),a 
      000EA9 90 5C            [ 1]  543 	incw y 
      000EAB 90 FF            [ 2]  544 	ldw (y),x
      000EAD 72 A9 00 02      [ 2]  545 	addw y,#2  
      000EB1                        546 5$:	_drop VSIZE 
      000EB1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EB3 81               [ 4]  547 	ret  	
                                    548 
                                    549 ;------------------------------------
                                    550 ; skip character c in text starting from 'in'
                                    551 ; input:
                                    552 ;	 y 		point to text buffer
                                    553 ;    a 		character to skip
                                    554 ; output:  
                                    555 ;	'in' ajusted to new position
                                    556 ;------------------------------------
                           000001   557 	C = 1 ; local var
      000EB4                        558 skip:
      000EB4 88               [ 1]  559 	push a
      000EB5 91 D6 00         [ 4]  560 1$:	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000EB8 27 0A            [ 1]  561 	jreq 2$
      000EBA 11 01            [ 1]  562 	cp a,(C,sp)
      000EBC 26 06            [ 1]  563 	jrne 2$
      000EBE 72 5C 00 01      [ 1]  564 	inc in
      000EC2 20 F1            [ 2]  565 	jra 1$
      000EC4                        566 2$: _drop 1 
      000EC4 5B 01            [ 2]    1     addw sp,#1 
      000EC6 81               [ 4]  567 	ret
                                    568 	
                                    569 
                                    570 ;------------------------------------
                                    571 ; scan text for next token
                                    572 ; input: 
                                    573 ;	X 		pointer to buffer where 
                                    574 ;	        token id and value are copied 
                                    575 ; use:
                                    576 ;	Y   pointer to text in tib 
                                    577 ; output:
                                    578 ;   A       token attribute 
                                    579 ;   X 		token value
                                    580 ;   Y       updated position in output buffer   
                                    581 ;------------------------------------
                                    582 	; use to check special character 
                                    583 	.macro _case c t  
                                    584 	ld a,#c 
                                    585 	cp a,(TCHAR,sp) 
                                    586 	jrne t
                                    587 	.endm 
                                    588 
                           000001   589 	TCHAR=1
                           000002   590 	ATTRIB=2
                           000002   591 	VSIZE=2
      000EC7                        592 get_token:: 
      000EC7                        593 	_vars VSIZE
      000EC7 52 02            [ 2]    1     sub sp,#VSIZE 
                                    594 ;	ld a,in 
                                    595 ;	sub a,count
                                    596 ;   jrmi 0$
                                    597 ;	clr a 
                                    598 ;	ret 
      000EC9                        599 0$: 
      000EC9 90 AE 16 68      [ 2]  600 	ldw y,#tib    	
      000ECD A6 20            [ 1]  601 	ld a,#SPACE
      000ECF CD 0E B4         [ 4]  602 	call skip
      000ED2 55 00 01 00 02   [ 1]  603 	mov in.saved,in 
      000ED7 91 D6 00         [ 4]  604 	ld a,([in.w],y)
      000EDA 26 05            [ 1]  605 	jrne 1$
      000EDC 90 93            [ 1]  606 	ldw y,x 
      000EDE CC 10 83         [ 2]  607 	jp token_exit ; end of line 
      000EE1 72 5C 00 01      [ 1]  608 1$:	inc in 
      000EE5 CD 18 30         [ 4]  609 	call to_upper 
      000EE8 6B 01            [ 1]  610 	ld (TCHAR,sp),a 
                                    611 ; check for quoted string
      000EEA                        612 str_tst:  	
      000EEA                        613 	_case '"' nbr_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000EEA A6 22            [ 1]    1 	ld a,#'"' 
      000EEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EEE 26 0A            [ 1]    3 	jrne nbr_tst
      000EF0 A6 02            [ 1]  614 	ld a,#TK_QSTR
      000EF2 F7               [ 1]  615 	ld (x),a 
      000EF3 5C               [ 1]  616 	incw x 
      000EF4 CD 0D 38         [ 4]  617 	call parse_quote
      000EF7 CC 10 83         [ 2]  618 	jp token_exit
      000EFA                        619 nbr_tst:
                                    620 ; check for hexadecimal number 
      000EFA A6 24            [ 1]  621 	ld a,#'$'
      000EFC 11 01            [ 1]  622 	cp a,(TCHAR,sp) 
      000EFE 27 17            [ 1]  623 	jreq 1$
                                    624 ;check for binary number 
      000F00 A6 26            [ 1]  625 	ld a,#'&
      000F02 11 01            [ 1]  626 	cp a,(TCHAR,sp)
      000F04 26 0A            [ 1]  627 	jrne 0$
      000F06 A6 84            [ 1]  628 	ld a,#TK_INTGR
      000F08 F7               [ 1]  629 	ld (x),a 
      000F09 5C               [ 1]  630 	incw x 
      000F0A CD 0D E0         [ 4]  631 	call parse_binary ; expect binary integer 
      000F0D CC 10 83         [ 2]  632 	jp token_exit 
                                    633 ; check for decimal number 	
      000F10 7B 01            [ 1]  634 0$:	ld a,(TCHAR,sp)
      000F12 CD 0E 2E         [ 4]  635 	call is_digit
      000F15 24 0C            [ 1]  636 	jrnc 3$
      000F17 A6 84            [ 1]  637 1$:	ld a,#TK_INTGR 
      000F19 F7               [ 1]  638 	ld (x),a 
      000F1A 5C               [ 1]  639 	incw x 
      000F1B 7B 01            [ 1]  640 	ld a,(TCHAR,sp)
      000F1D CD 0D 8D         [ 4]  641 	call parse_integer 
      000F20 CC 10 83         [ 2]  642 	jp token_exit 
      000F23                        643 3$: 
      000F23                        644 	_case '(' bkslsh_tst 
      000F23 A6 28            [ 1]    1 	ld a,#'(' 
      000F25 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F27 26 05            [ 1]    3 	jrne bkslsh_tst
      000F29 A6 06            [ 1]  645 	ld a,#TK_LPAREN
      000F2B CC 10 7F         [ 2]  646 	jp token_char   	
      000F2E                        647 bkslsh_tst: ; character token 
      000F2E                        648 	_case '\',rparnt_tst
      000F2E A6 5C            [ 1]    1 	ld a,#'\' 
      000F30 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F32 26 16            [ 1]    3 	jrne rparnt_tst
      000F34 A6 04            [ 1]  649 	ld a,#TK_CHAR 
      000F36 F7               [ 1]  650 	ld (x),a 
      000F37 5C               [ 1]  651 	incw x 
      000F38 91 D6 00         [ 4]  652 	ld a,([in.w],y)
      000F3B F7               [ 1]  653 	ld (x),a 
      000F3C 5C               [ 1]  654 	incw x
      000F3D 90 93            [ 1]  655 	ldw y,x 	 
      000F3F 72 5C 00 01      [ 1]  656 	inc in  
      000F43 5F               [ 1]  657 	clrw x 
      000F44 97               [ 1]  658 	ld xl,a 
      000F45 A6 04            [ 1]  659 	ld a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F47 CC 10 83         [ 2]  660 	jp token_exit 
      000F4A                        661 rparnt_tst:		
      000F4A                        662 	_case ')' colon_tst 
      000F4A A6 29            [ 1]    1 	ld a,#')' 
      000F4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4E 26 05            [ 1]    3 	jrne colon_tst
      000F50 A6 07            [ 1]  663 	ld a,#TK_RPAREN 
      000F52 CC 10 7F         [ 2]  664 	jp token_char
      000F55                        665 colon_tst:
      000F55                        666 	_case ':' comma_tst 
      000F55 A6 3A            [ 1]    1 	ld a,#':' 
      000F57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F59 26 05            [ 1]    3 	jrne comma_tst
      000F5B A6 0A            [ 1]  667 	ld a,#TK_COLON 
      000F5D CC 10 7F         [ 2]  668 	jp token_char  
      000F60                        669 comma_tst:
      000F60                        670 	_case COMMA sharp_tst 
      000F60 A6 2C            [ 1]    1 	ld a,#COMMA 
      000F62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F64 26 05            [ 1]    3 	jrne sharp_tst
      000F66 A6 08            [ 1]  671 	ld a,#TK_COMMA
      000F68 CC 10 7F         [ 2]  672 	jp token_char
      000F6B                        673 sharp_tst:
      000F6B                        674 	_case SHARP dash_tst 
      000F6B A6 23            [ 1]    1 	ld a,#SHARP 
      000F6D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F6F 26 05            [ 1]    3 	jrne dash_tst
      000F71 A6 09            [ 1]  675 	ld a,#TK_SHARP
      000F73 CC 10 7F         [ 2]  676 	jp token_char  	 	 
      000F76                        677 dash_tst: 	
      000F76                        678 	_case '-' at_tst 
      000F76 A6 2D            [ 1]    1 	ld a,#'-' 
      000F78 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7A 26 05            [ 1]    3 	jrne at_tst
      000F7C A6 11            [ 1]  679 	ld a,#TK_MINUS  
      000F7E CC 10 7F         [ 2]  680 	jp token_char 
      000F81                        681 at_tst:
      000F81                        682 	_case '@' qmark_tst 
      000F81 A6 40            [ 1]    1 	ld a,#'@' 
      000F83 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F85 26 05            [ 1]    3 	jrne qmark_tst
      000F87 A6 05            [ 1]  683 	ld a,#TK_ARRAY 
      000F89 CC 10 7F         [ 2]  684 	jp token_char
      000F8C                        685 qmark_tst:
      000F8C                        686 	_case '?' tick_tst 
      000F8C A6 3F            [ 1]    1 	ld a,#'?' 
      000F8E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F90 26 12            [ 1]    3 	jrne tick_tst
      000F92 A6 80            [ 1]  687 	ld a,#TK_CMD  
      000F94 F7               [ 1]  688 	ld (x),a 
      000F95 5C               [ 1]  689 	incw x 
      000F96 90 93            [ 1]  690 	ldw y,x 
      000F98 AE 00 6E         [ 2]  691 	ldw x,#PRT_IDX 
      000F9B 90 FF            [ 2]  692 	ldw (y),x 
      000F9D 72 A9 00 02      [ 2]  693 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000FA1 CC 10 83         [ 2]  694 	jp token_exit
      000FA4                        695 tick_tst: ; comment 
      000FA4                        696 	_case TICK plus_tst 
      000FA4 A6 27            [ 1]    1 	ld a,#TICK 
      000FA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA8 26 35            [ 1]    3 	jrne plus_tst
      000FAA A6 80            [ 1]  697 	ld a,#TK_CMD
      000FAC F7               [ 1]  698 	ld (x),a 
      000FAD 5C               [ 1]  699 	incw x
      000FAE 90 AE 00 88      [ 2]  700 	ldw y,#REM_IDX
      000FB2 FF               [ 2]  701 	ldw (x),y 
      000FB3 1C 00 02         [ 2]  702 	addw x,#2  
      000FB6                        703 copy_comment:
      000FB6 90 AE 16 68      [ 2]  704 	ldw y,#tib 
      000FBA 72 B9 00 00      [ 2]  705 	addw y,in.w
      000FBE 90 89            [ 2]  706 	pushw y
      000FC0 CD 13 A5         [ 4]  707 	call strcpy
      000FC3 72 F2 01         [ 2]  708     subw y,(1,sp)
      000FC6 90 9F            [ 1]  709 	ld a,yl 
      000FC8 CB 00 01         [ 1]  710 	add a,in
      000FCB C7 00 01         [ 1]  711 	ld in,a 
      000FCE 1F 01            [ 2]  712 	ldw (1,sp),x
      000FD0 72 F9 01         [ 2]  713 	addw y,(1,sp)
      000FD3 90 5C            [ 1]  714 	incw y 
      000FD5                        715 	_drop 2 
      000FD5 5B 02            [ 2]    1     addw sp,#2 
      000FD7 AE 00 88         [ 2]  716 	ldw x,#REM_IDX 
      000FDA A6 80            [ 1]  717 	ld a,#TK_CMD 
      000FDC CC 10 83         [ 2]  718 	jp token_exit 
      000FDF                        719 plus_tst:
      000FDF                        720 	_case '+' star_tst 
      000FDF A6 2B            [ 1]    1 	ld a,#'+' 
      000FE1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE3 26 05            [ 1]    3 	jrne star_tst
      000FE5 A6 10            [ 1]  721 	ld a,#TK_PLUS  
      000FE7 CC 10 7F         [ 2]  722 	jp token_char 
      000FEA                        723 star_tst:
      000FEA                        724 	_case '*' slash_tst 
      000FEA A6 2A            [ 1]    1 	ld a,#'*' 
      000FEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FEE 26 05            [ 1]    3 	jrne slash_tst
      000FF0 A6 20            [ 1]  725 	ld a,#TK_MULT 
      000FF2 CC 10 7F         [ 2]  726 	jp token_char 
      000FF5                        727 slash_tst: 
      000FF5                        728 	_case '/' prcnt_tst 
      000FF5 A6 2F            [ 1]    1 	ld a,#'/' 
      000FF7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF9 26 05            [ 1]    3 	jrne prcnt_tst
      000FFB A6 21            [ 1]  729 	ld a,#TK_DIV 
      000FFD CC 10 7F         [ 2]  730 	jp token_char 
      001000                        731 prcnt_tst:
      001000                        732 	_case '%' eql_tst 
      001000 A6 25            [ 1]    1 	ld a,#'%' 
      001002 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001004 26 05            [ 1]    3 	jrne eql_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001006 A6 22            [ 1]  733 	ld a,#TK_MOD
      001008 CC 10 7F         [ 2]  734 	jp token_char  
                                    735 ; 1 or 2 character tokens 	
      00100B                        736 eql_tst:
      00100B                        737 	_case '=' gt_tst 		
      00100B A6 3D            [ 1]    1 	ld a,#'=' 
      00100D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100F 26 05            [ 1]    3 	jrne gt_tst
      001011 A6 32            [ 1]  738 	ld a,#TK_EQUAL
      001013 CC 10 7F         [ 2]  739 	jp token_char 
      001016                        740 gt_tst:
      001016                        741 	_case '>' lt_tst 
      001016 A6 3E            [ 1]    1 	ld a,#'>' 
      001018 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101A 26 23            [ 1]    3 	jrne lt_tst
      00101C A6 31            [ 1]  742 	ld a,#TK_GT 
      00101E 6B 02            [ 1]  743 	ld (ATTRIB,sp),a 
      001020 91 D6 00         [ 4]  744 	ld a,([in.w],y)
      001023 72 5C 00 01      [ 1]  745 	inc in 
      001027 A1 3D            [ 1]  746 	cp a,#'=
      001029 26 04            [ 1]  747 	jrne 1$
      00102B A6 33            [ 1]  748 	ld a,#TK_GE 
      00102D 20 50            [ 2]  749 	jra token_char  
      00102F A1 3C            [ 1]  750 1$: cp a,#'<
      001031 26 04            [ 1]  751 	jrne 2$
      001033 A6 35            [ 1]  752 	ld a,#TK_NE 
      001035 20 48            [ 2]  753 	jra token_char 
      001037 72 5A 00 01      [ 1]  754 2$: dec in
      00103B 7B 02            [ 1]  755 	ld a,(ATTRIB,sp)
      00103D 20 40            [ 2]  756 	jra token_char 	 
      00103F                        757 lt_tst:
      00103F                        758 	_case '<' other
      00103F A6 3C            [ 1]    1 	ld a,#'<' 
      001041 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001043 26 23            [ 1]    3 	jrne other
      001045 A6 34            [ 1]  759 	ld a,#TK_LT 
      001047 6B 02            [ 1]  760 	ld (ATTRIB,sp),a 
      001049 91 D6 00         [ 4]  761 	ld a,([in.w],y)
      00104C 72 5C 00 01      [ 1]  762 	inc in 
      001050 A1 3D            [ 1]  763 	cp a,#'=
      001052 26 04            [ 1]  764 	jrne 1$
      001054 A6 36            [ 1]  765 	ld a,#TK_LE 
      001056 20 27            [ 2]  766 	jra token_char 
      001058 A1 3E            [ 1]  767 1$: cp a,#'>
      00105A 26 04            [ 1]  768 	jrne 2$
      00105C A6 35            [ 1]  769 	ld a,#TK_NE 
      00105E 20 1F            [ 2]  770 	jra token_char 
      001060 72 5A 00 01      [ 1]  771 2$: dec in 
      001064 7B 02            [ 1]  772 	ld a,(ATTRIB,sp)
      001066 20 17            [ 2]  773 	jra token_char 	
      001068                        774 other: ; not a special character 	 
      001068 7B 01            [ 1]  775 	ld a,(TCHAR,sp)
      00106A CD 0E 1D         [ 4]  776 	call is_alpha 
      00106D 25 03            [ 1]  777 	jrc 30$ 
      00106F CC 16 45         [ 2]  778 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001072                        779 30$: 
      001072 CD 0E 63         [ 4]  780 	call parse_keyword
      001075 A3 20 4A         [ 2]  781 	cpw x,#remark 
      001078 26 09            [ 1]  782 	jrne token_exit 
      00107A 90 93            [ 1]  783 	ldw y,x 
      00107C CC 0F B6         [ 2]  784 	jp copy_comment 
      00107F                        785 token_char:
      00107F F7               [ 1]  786 	ld (x),a 
      001080 5C               [ 1]  787 	incw x
      001081 90 93            [ 1]  788 	ldw y,x 
      001083                        789 token_exit:
      001083                        790 	_drop VSIZE 
      001083 5B 02            [ 2]    1     addw sp,#VSIZE 
      001085 81               [ 4]  791 	ret
                                    792 
                                    793 
                                    794 ;-----------------------------------
                                    795 ; create token list fromm text line 
                                    796 ; save this list in pad buffer 
                                    797 ;  compiled line format: 
                                    798 ;    line_no  2 bytes {0...32767}
                                    799 ;    count    1 byte  
                                    800 ;    tokens   variable length 
                                    801 ;   
                                    802 ; input:
                                    803 ;   none
                                    804 ; modified variables:
                                    805 ;   basicptr     token list buffer address 
                                    806 ;   in.w  		 3|count, i.e. index in buffer
                                    807 ;   count        length of line | 0  
                                    808 ;-----------------------------------
                           000001   809 	XSAVE=1
                           000002   810 	VSIZE=2
      001086                        811 compile::
      001086 90 89            [ 2]  812 	pushw y 
      001088                        813 	_vars VSIZE 
      001088 52 02            [ 2]    1     sub sp,#VSIZE 
      00108A 55 00 1A 00 04   [ 1]  814 	mov basicptr,txtbgn
      00108F 72 1A 00 21      [ 1]  815 	bset flags,#FCOMP 
      001093 A6 00            [ 1]  816 	ld a,#0
      001095 AE 00 00         [ 2]  817 	ldw x,#0
      001098 CF 16 B8         [ 2]  818 	ldw pad,x ; destination buffer 
      00109B C7 16 BA         [ 1]  819 	ld pad+2,a ; count 
      00109E AE 16 BB         [ 2]  820 	ldw x,#pad+3
      0010A1 72 5F 00 01      [ 1]  821 	clr in 
      0010A5 CD 0E C7         [ 4]  822 	call get_token
      0010A8 A1 84            [ 1]  823 	cp a,#TK_INTGR
      0010AA 26 11            [ 1]  824 	jrne 2$
      0010AC A3 00 01         [ 2]  825 	cpw x,#1 
      0010AF 2A 05            [ 1]  826 	jrpl 1$
      0010B1 A6 0A            [ 1]  827 	ld a,#ERR_BAD_VALUE
      0010B3 CC 16 47         [ 2]  828 	jp tb_error
      0010B6 CF 16 B8         [ 2]  829 1$:	ldw pad,x 
      0010B9 90 AE 16 BB      [ 2]  830 	ldw y,#pad+3 
      0010BD 90 A3 17 74      [ 2]  831 2$:	cpw y,#stack_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0010C1 25 05            [ 1]  832 	jrult 3$
      0010C3 A6 0F            [ 1]  833 	ld a,#ERR_BUF_FULL 
      0010C5 CC 16 47         [ 2]  834 	jp tb_error 
      0010C8                        835 3$:	
      0010C8 93               [ 1]  836 	ldw x,y 
      0010C9 CD 0E C7         [ 4]  837 	call get_token 
      0010CC A1 00            [ 1]  838 	cp a,#TK_NONE 
      0010CE 26 ED            [ 1]  839 	jrne 2$ 
                                    840 ; compilation completed  
      0010D0 72 A2 16 B8      [ 2]  841 	subw y,#pad
      0010D4 90 9F            [ 1]  842     ld a,yl
      0010D6 AE 16 B8         [ 2]  843 	ldw x,#pad 
      0010D9 CF 00 18         [ 2]  844 	ldw ptr16,x 
      0010DC E7 02            [ 1]  845 	ld (2,x),a 
      0010DE FE               [ 2]  846 	ldw x,(x)
      0010DF 27 09            [ 1]  847 	jreq 10$
      0010E1 CD 0C C6         [ 4]  848 	call insert_line
      0010E4 72 5F 00 03      [ 1]  849 	clr  count 
      0010E8 20 0F            [ 2]  850 	jra  11$ 
      0010EA                        851 10$: ; line# is zero 
      0010EA CE 00 18         [ 2]  852 	ldw x,ptr16  
      0010ED CF 00 04         [ 2]  853 	ldw basicptr,x 
      0010F0 E6 02            [ 1]  854 	ld a,(2,x)
      0010F2 C7 00 03         [ 1]  855 	ld count,a 
      0010F5 35 03 00 01      [ 1]  856 	mov in,#3 
      0010F9                        857 11$:
      0010F9                        858 	_drop VSIZE 
      0010F9 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010FB 72 1B 00 21      [ 1]  859 	bres flags,#FCOMP 
      0010FF 90 85            [ 2]  860 	popw y 
      001101 81               [ 4]  861 	ret 
                                    862 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001102                         48 cpy_cmd_name:
      001102 F6               [ 1]   49 	ld a,(x)
      001103 5C               [ 1]   50 	incw x
      001104 A4 0F            [ 1]   51 	and a,#15  
      001106 88               [ 1]   52 	push a 
      001107 0D 01            [ 1]   53     tnz (1,sp) 
      001109 27 0A            [ 1]   54 	jreq 9$
      00110B F6               [ 1]   55 1$:	ld a,(x)
      00110C 90 F7            [ 1]   56 	ld (y),a  
      00110E 5C               [ 1]   57 	incw x
      00110F 90 5C            [ 1]   58 	incw y 
      001111 0A 01            [ 1]   59 	dec (1,sp)	 
      001113 26 F6            [ 1]   60 	jrne 1$
      001115 84               [ 1]   61 9$: pop a 
      001116 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      001117                         72 add_space:
      001117 90 5A            [ 2]   73 	decw y 
      001119 90 F6            [ 1]   74 	ld a,(y)
      00111B 90 5C            [ 1]   75 	incw y
      00111D A1 29            [ 1]   76 	cp a,#') 
      00111F 27 05            [ 1]   77 	jreq 0$
      001121 CD 0E 37         [ 4]   78 	call is_alnum 
      001124 24 06            [ 1]   79 	jrnc 1$
      001126                         80 0$: 
      001126 A6 20            [ 1]   81 	ld a,#SPACE 
      001128 90 F7            [ 1]   82 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      00112A 90 5C            [ 1]   83 	incw y 
      00112C 81               [ 4]   84 1$: ret 
                                     85 
                                     86 ;--------------------------
                                     87 ;  align text in buffer 
                                     88 ;  to tab_width padding 
                                     89 ;  left with  SPACE 
                                     90 ; input:
                                     91 ;   X      str*
                                     92 ;   A      str_length 
                                     93 ; output:
                                     94 ;   X      ajusted
                                     95 ;--------------------------
      00112D                         96 right_align::
      00112D 88               [ 1]   97 	push a 
      00112E 7B 01            [ 1]   98 0$: ld a,(1,sp)
      001130 C1 00 22         [ 1]   99 	cp a,tab_width 
      001133 2A 08            [ 1]  100 	jrpl 1$
      001135 A6 20            [ 1]  101 	ld a,#SPACE 
      001137 5A               [ 2]  102 	decw x
      001138 F7               [ 1]  103 	ld (x),a  
      001139 0C 01            [ 1]  104 	inc (1,sp)
      00113B 20 F1            [ 2]  105 	jra 0$ 
      00113D 84               [ 1]  106 1$: pop a 	
      00113E 81               [ 4]  107 	ret 
                                    108 
                                    109 ;--------------------------
                                    110 ; print TK_QSTR
                                    111 ; converting control character
                                    112 ; to backslash sequence
                                    113 ; input:
                                    114 ;   X        char *
                                    115 ;   Y        dest. buffer 
                                    116 ; output:
                                    117 ;   X        moved forward 
                                    118 ;   Y        moved forward 
                                    119 ;-----------------------------
      00113F                        120 cpy_quote:
      00113F A6 22            [ 1]  121 	ld a,#'"
      001141 90 F7            [ 1]  122 	ld (y),a 
      001143 90 5C            [ 1]  123 	incw y 
      001145 89               [ 2]  124 	pushw x 
      001146 CD 17 72         [ 4]  125 	call skip_string 
      001149 85               [ 2]  126 	popw x 
      00114A F6               [ 1]  127 1$:	ld a,(x)
      00114B 27 30            [ 1]  128 	jreq 9$
      00114D 5C               [ 1]  129 	incw x 
      00114E A1 20            [ 1]  130 	cp a,#SPACE 
      001150 25 0E            [ 1]  131 	jrult 3$
      001152 90 F7            [ 1]  132 	ld (y),a
      001154 90 5C            [ 1]  133 	incw y 
      001156 A1 5C            [ 1]  134 	cp a,#'\ 
      001158 26 F0            [ 1]  135 	jrne 1$ 
      00115A                        136 2$:
      00115A 90 F7            [ 1]  137 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00115C 90 5C            [ 1]  138 	incw y  
      00115E 20 EA            [ 2]  139 	jra 1$
      001160 88               [ 1]  140 3$: push a 
      001161 A6 5C            [ 1]  141 	ld a,#'\
      001163 90 F7            [ 1]  142 	ld (y),a 
      001165 90 5C            [ 1]  143 	incw y  
      001167 84               [ 1]  144 	pop a 
      001168 A0 07            [ 1]  145 	sub a,#7
      00116A C7 00 0E         [ 1]  146 	ld acc8,a 
      00116D 72 5F 00 0D      [ 1]  147 	clr acc16
      001171 89               [ 2]  148 	pushw x
      001172 AE 0D 85         [ 2]  149 	ldw x,#escaped 
      001175 72 BB 00 0D      [ 2]  150 	addw x,acc16 
      001179 F6               [ 1]  151 	ld a,(x)
      00117A 85               [ 2]  152 	popw x
      00117B 20 DD            [ 2]  153 	jra 2$
      00117D A6 22            [ 1]  154 9$: ld a,#'"
      00117F 90 F7            [ 1]  155 	ld (y),a 
      001181 90 5C            [ 1]  156 	incw y  
      001183 5C               [ 1]  157 	incw x 
      001184 81               [ 4]  158 	ret
                                    159 
                                    160 ;--------------------------
                                    161 ; return variable name 
                                    162 ; from its address.
                                    163 ; input:
                                    164 ;   X    variable address
                                    165 ; output:
                                    166 ;   A     variable letter
                                    167 ;--------------------------
      001185                        168 var_name::
      001185 1D 00 2F         [ 2]  169 		subw x,#vars 
      001188 A6 03            [ 1]  170 		ld a,#3
      00118A 62               [ 2]  171 		div x,a 
      00118B 9F               [ 1]  172 		ld a,xl 
      00118C AB 41            [ 1]  173 		add a,#'A 
      00118E 81               [ 4]  174 		ret 
                                    175 
                                    176 ;-----------------------------
                                    177 ; return cmd  idx from its 
                                    178 ; code address 
                                    179 ; input:
                                    180 ;   X      code address 
                                    181 ; output:
                                    182 ;   X      cmd_idx
                                    183 ;-----------------------------
      00118F                        184 get_cmd_idx:
      00118F 90 89            [ 2]  185 	pushw y
      001191 90 AE 32 E4      [ 2]  186 	ldw y,#code_addr 
      001195 90 CF 00 18      [ 2]  187 	ldw ptr16,y 
      001199 90 5F            [ 1]  188 	clrw y 
      00119B 91 D3 18         [ 5]  189 1$:	cpw x,([ptr16],y)
      00119E 27 0C            [ 1]  190 	jreq 3$ 
      0011A0 90 5C            [ 1]  191 	incw y 
      0011A2 91 D6 18         [ 4]  192 	ld a,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0011A5 90 5C            [ 1]  193 	incw y
      0011A7 91 DA 18         [ 4]  194 	or a,([ptr16],y)	
      0011AA 26 EF            [ 1]  195 	jrne 1$
      0011AC 93               [ 1]  196 3$: ldw x,y 
      0011AD 90 85            [ 2]  197 	popw y 
      0011AF 81               [ 4]  198 	ret
                                    199 
                                    200 
                                    201 ;-------------------------------------
                                    202 ; decompile tokens list 
                                    203 ; to original text line 
                                    204 ; input:
                                    205 ;   [basicptr]  pointer at line 
                                    206 ;   Y           output buffer
                                    207 ; output:
                                    208 ;   A           length 
                                    209 ;   Y           after string  
                                    210 ;------------------------------------
                           000001   211 	BASE_SAV=1
                           000002   212 	WIDTH_SAV=2
                           000003   213 	STR=3
                           000004   214 	VSIZE=4 
      0011B0                        215 decompile::
      0011B0                        216 	_vars VSIZE
      0011B0 52 04            [ 2]    1     sub sp,#VSIZE 
      0011B2 C6 00 0A         [ 1]  217 	ld a,base
      0011B5 6B 01            [ 1]  218 	ld (BASE_SAV,sp),a  
      0011B7 C6 00 22         [ 1]  219 	ld a,tab_width 
      0011BA 6B 02            [ 1]  220 	ld (WIDTH_SAV,sp),a 
      0011BC 17 03            [ 2]  221 	ldw (STR,sp),y   
      0011BE 72 CE 00 04      [ 5]  222 	ldw x,[basicptr] ; line number 
      0011C2 35 0A 00 0A      [ 1]  223 	mov base,#10
      0011C6 35 05 00 22      [ 1]  224 	mov tab_width,#5
      0011CA 72 5F 00 0C      [ 1]  225 	clr acc24 
      0011CE CF 00 0D         [ 2]  226 	ldw acc16,x
      0011D1 4F               [ 1]  227 	clr a ; unsigned conversion 
      0011D2 CD 17 D7         [ 4]  228 	call itoa  
      0011D5 CD 11 2D         [ 4]  229 	call right_align 
      0011D8 88               [ 1]  230 	push a 
      0011D9 90 93            [ 1]  231 1$:	ldw y,x ; source
      0011DB 1E 04            [ 2]  232 	ldw x,(STR+1,sp) ; destination
      0011DD CD 13 A5         [ 4]  233 	call strcpy 
      0011E0 90 5F            [ 1]  234 	clrw y 
      0011E2 84               [ 1]  235 	pop a 
      0011E3 90 97            [ 1]  236 	ld yl,a 
      0011E5 72 F9 03         [ 2]  237 	addw y,(STR,sp)
      0011E8 A6 20            [ 1]  238 	ld a,#SPACE 
      0011EA 90 F7            [ 1]  239 	ld (y),a 
      0011EC 90 5C            [ 1]  240 	incw y 
      0011EE 72 5F 00 22      [ 1]  241 	clr tab_width
      0011F2 AE 00 03         [ 2]  242 	ldw x,#3
      0011F5 CF 00 00         [ 2]  243 	ldw in.w,x 
      0011F8                        244 decomp_loop:
      0011F8 90 89            [ 2]  245 	pushw y
      0011FA CD 17 4B         [ 4]  246 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0011FD 90 85            [ 2]  247 	popw y 
      0011FF 4D               [ 1]  248 	tnz a  
      001200 26 03            [ 1]  249 	jrne 1$
      001202 CC 13 1C         [ 2]  250 	jp 20$
      001205 2B 03            [ 1]  251 1$:	jrmi 2$
      001207 CC 12 90         [ 2]  252 	jp 6$
      00120A                        253 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      00120A A1 85            [ 1]  254 	cp a,#TK_VAR 
      00120C 26 0F            [ 1]  255 	jrne 3$
                                    256 ;; TK_VAR 
      00120E CD 11 17         [ 4]  257 	call add_space
      001211 CD 17 81         [ 4]  258 	call get_addr   
      001214 CD 11 85         [ 4]  259 	call var_name
      001217 90 F7            [ 1]  260 	ld (y),a 
      001219 90 5C            [ 1]  261 	incw y  
      00121B 20 DB            [ 2]  262 	jra decomp_loop
      00121D                        263 3$:
      00121D A1 84            [ 1]  264 	cp a,#TK_INTGR
      00121F 26 26            [ 1]  265 	jrne 4$
                                    266 ;; TK_INTGR
      001221 CD 17 8B         [ 4]  267 	call get_int24 
      001224 C7 00 0C         [ 1]  268 	ld acc24,a 
      001227 CF 00 0D         [ 2]  269 	ldw acc16,x 
      00122A CD 11 17         [ 4]  270 	call add_space
      00122D 90 89            [ 2]  271 	pushw y 
      00122F A6 FF            [ 1]  272 	ld a,#255 ; signed conversion 
      001231 CD 17 D7         [ 4]  273 	call itoa  
      001234 16 01            [ 2]  274 	ldw y,(1,sp) 
      001236 88               [ 1]  275 	push a 
      001237 51               [ 1]  276 	exgw x,y 
      001238 CD 13 A5         [ 4]  277 	call strcpy 
      00123B 90 5F            [ 1]  278 	clrw y
      00123D 84               [ 1]  279 	pop a  
      00123E 90 97            [ 1]  280 	ld yl,a 
      001240 72 F9 01         [ 2]  281 	addw y,(1,sp)
      001243                        282 	_drop 2 
      001243 5B 02            [ 2]    1     addw sp,#2 
      001245 20 B1            [ 2]  283 	jra decomp_loop
      001247                        284 4$: ; dictionary keyword 
      001247 FE               [ 2]  285 	ldw x,(x)
      001248 72 5C 00 01      [ 1]  286 	inc in 
      00124C 72 5C 00 01      [ 1]  287 	inc in 
      001250 A3 00 88         [ 2]  288 	cpw x,#REM_IDX
      001253 26 23            [ 1]  289 	jrne 5$
      001255 CE 00 04         [ 2]  290 	ldw x,basicptr 
                                    291 ; copy comment to buffer 
      001258 CD 11 17         [ 4]  292 	call add_space
      00125B A6 27            [ 1]  293 	ld a,#''
      00125D 90 F7            [ 1]  294 	ld (y),a 
      00125F 90 5C            [ 1]  295 	incw y 
      001261                        296 46$:
      001261 72 D6 00 00      [ 4]  297 	ld a,([in.w],x)
      001265 72 5C 00 01      [ 1]  298 	inc in  
      001269 90 F7            [ 1]  299 	ld (y),a 
      00126B 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      00126D C6 00 01         [ 1]  301 	ld a,in 
      001270 C1 00 03         [ 1]  302 	cp a,count 
      001273 2B EC            [ 1]  303 	jrmi 46$
      001275 CC 13 1C         [ 2]  304 	jp 20$  
      001278 A3 00 4E         [ 2]  305 5$: cpw x,#LET_IDX 
      00127B 26 03            [ 1]  306 	jrne 51$
      00127D CC 11 F8         [ 2]  307 	jp decomp_loop ; down display LET 	
      001280                        308 51$: ; insert command name 
      001280 CD 11 17         [ 4]  309 	call add_space  
      001283 90 89            [ 2]  310 	pushw y
      001285 CD 13 57         [ 4]  311 	call cmd_name
      001288 90 85            [ 2]  312 	popw y 
      00128A CD 11 02         [ 4]  313 	call cpy_cmd_name
      00128D CC 11 F8         [ 2]  314 	jp decomp_loop 
      001290                        315 6$:
                                    316 ; label?
      001290 A1 03            [ 1]  317 	cp a,#TK_LABEL 
      001292 26 1E            [ 1]  318 	jrne 64$
                                    319 ; copy label string to output buffer   	
      001294 A6 20            [ 1]  320 	ld a,#32 
      001296 90 F7            [ 1]  321 	ld (y),a 
      001298 90 5C            [ 1]  322 	incw y 
      00129A                        323 61$:
      00129A 89               [ 2]  324 	pushw x 
      00129B CD 17 72         [ 4]  325 	call skip_string 
      00129E 85               [ 2]  326 	popw x 
      00129F                        327 62$:	
      00129F F6               [ 1]  328 	ld a,(x)
      0012A0 27 07            [ 1]  329 	jreq 63$ 
      0012A2 5C               [ 1]  330 	incw x  
      0012A3 90 F7            [ 1]  331 	ld (y),a 
      0012A5 90 5C            [ 1]  332 	incw y 
      0012A7 20 F6            [ 2]  333 	jra 62$ 
      0012A9                        334 63$: 
      0012A9 A6 20            [ 1]  335 	ld a,#32 
      0012AB 90 F7            [ 1]  336 	ld (y),a 
      0012AD 90 5C            [ 1]  337 	incw y 
      0012AF CC 11 F8         [ 2]  338 	jp decomp_loop
      0012B2                        339 64$:
      0012B2 A1 02            [ 1]  340 	cp a,#TK_QSTR 
      0012B4 26 09            [ 1]  341 	jrne 7$
                                    342 ;; TK_QSTR
      0012B6 CD 11 17         [ 4]  343 	call add_space
      0012B9 CD 11 3F         [ 4]  344 	call cpy_quote  
      0012BC CC 11 F8         [ 2]  345 	jp decomp_loop
      0012BF                        346 7$:
      0012BF A1 04            [ 1]  347 	cp a,#TK_CHAR 
      0012C1 26 0D            [ 1]  348 	jrne 8$
                                    349 ;; TK_CHAR 
      0012C3 A6 5C            [ 1]  350 	ld a,#'\ 
      0012C5 90 F7            [ 1]  351 	ld (y),a 
      0012C7 90 5C            [ 1]  352 	incw y
      0012C9 F6               [ 1]  353 	ld a,(x)
      0012CA 72 5C 00 01      [ 1]  354 	inc in  
      0012CE 20 06            [ 2]  355 	jra 81$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0012D0 A1 0A            [ 1]  356 8$: cp a,#TK_COLON 
      0012D2 26 09            [ 1]  357 	jrne 9$
      0012D4 A6 3A            [ 1]  358 	ld a,#':
      0012D6                        359 81$:
      0012D6 90 F7            [ 1]  360 	ld (y),a 
      0012D8 90 5C            [ 1]  361 	incw y 
      0012DA                        362 82$:
      0012DA CC 11 F8         [ 2]  363 	jp decomp_loop
      0012DD                        364 9$: 
      0012DD A1 09            [ 1]  365 	cp a,#TK_SHARP
      0012DF 22 0A            [ 1]  366 	jrugt 10$ 
      0012E1 A0 05            [ 1]  367 	sub a,#TK_ARRAY 
      0012E3 5F               [ 1]  368 	clrw x 
      0012E4 97               [ 1]  369 	ld xl,a
      0012E5 1C 13 32         [ 2]  370 	addw x,#single_char 
      0012E8 F6               [ 1]  371 	ld a,(x)
      0012E9 20 EB            [ 2]  372 	jra 81$ 
      0012EB                        373 10$: 
      0012EB A1 11            [ 1]  374 	cp a,#TK_MINUS 
      0012ED 22 0A            [ 1]  375 	jrugt 11$
      0012EF A0 10            [ 1]  376 	sub a,#TK_PLUS 
      0012F1 5F               [ 1]  377 	clrw x 
      0012F2 97               [ 1]  378 	ld xl,a 
      0012F3 1C 13 37         [ 2]  379 	addw x,#add_char 
      0012F6 F6               [ 1]  380 	ld a,(x)
      0012F7 20 DD            [ 2]  381 	jra 81$
      0012F9                        382 11$:
      0012F9 A1 22            [ 1]  383     cp a,#TK_MOD 
      0012FB 22 0A            [ 1]  384 	jrugt 12$
      0012FD A0 20            [ 1]  385 	sub a,#TK_MULT
      0012FF 5F               [ 1]  386 	clrw x 
      001300 97               [ 1]  387 	ld xl,a 
      001301 1C 13 39         [ 2]  388 	addw x,#mul_char
      001304 F6               [ 1]  389 	ld a,(x)
      001305 20 CF            [ 2]  390 	jra 81$
      001307                        391 12$:
      001307 A0 31            [ 1]  392 	sub a,#TK_GT  
      001309 48               [ 1]  393 	sll a 
      00130A 5F               [ 1]  394 	clrw x 
      00130B 97               [ 1]  395 	ld xl,a 
      00130C 1C 13 3C         [ 2]  396 	addw x,#relop_str 
      00130F FE               [ 2]  397 	ldw x,(x)
      001310 F6               [ 1]  398 	ld a,(x)
      001311 5C               [ 1]  399 	incw x 
      001312 90 F7            [ 1]  400 	ld (y),a
      001314 90 5C            [ 1]  401 	incw y 
      001316 F6               [ 1]  402 	ld a,(x)
      001317 26 BD            [ 1]  403 	jrne 81$
      001319 CC 11 F8         [ 2]  404 	jp decomp_loop 
      00131C                        405 20$: 
      00131C 90 7F            [ 1]  406 	clr (y)
      00131E 1E 03            [ 2]  407 	ldw x,(STR,sp)
      001320 7B 01            [ 1]  408 	ld a,(BASE_SAV,sp)
      001322 C7 00 0A         [ 1]  409 	ld base,a 
      001325 7B 02            [ 1]  410 	ld a,(WIDTH_SAV,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001327 C7 00 22         [ 1]  411 	ld tab_width,a
      00132A 72 F2 03         [ 2]  412 	subw y,(STR,sp) 
      00132D 90 9F            [ 1]  413 	ld a,yl 
      00132F                        414 	_drop VSIZE 
      00132F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001331 81               [ 4]  415 	ret 
                                    416 
      001332 40 28 29 2C 23         417 single_char: .byte '@','(',')',',','#'
      001337 2B 2D                  418 add_char: .byte '+','-'
      001339 2A 2F 25               419 mul_char: .byte '*','/','%'
      00133C 13 48 13 4A 13 4C 13   420 relop_str: .word gt,equal,ge,lt,le,ne 
             4F 13 51 13 54
      001348 3E 00                  421 gt: .asciz ">"
      00134A 3D 00                  422 equal: .asciz "="
      00134C 3E 3D 00               423 ge: .asciz ">="
      00134F 3C 00                  424 lt: .asciz "<"
      001351 3C 3D 00               425 le: .asciz "<="
      001354 3C 3E 00               426 ne:  .asciz "<>"
                                    427 
                                    428 ;----------------------------------
                                    429 ; search in kword_dict name
                                    430 ; from its execution address 
                                    431 ; input:
                                    432 ;   X       	cmd_index 
                                    433 ; output:
                                    434 ;   X 			cstr*  | 0 
                                    435 ;--------------------------------
                           000001   436 	CMDX=1 
                           000003   437 	LINK=3 
                           000004   438 	VSIZE=4
      001357                        439 cmd_name:
      001357                        440 	_vars VSIZE 
      001357 52 04            [ 2]    1     sub sp,#VSIZE 
      001359 72 5F 00 0D      [ 1]  441 	clr acc16 
      00135D 1F 01            [ 2]  442 	ldw (CMDX,sp),x  
      00135F AE 32 DC         [ 2]  443 	ldw x,#kword_dict	
      001362 1F 03            [ 2]  444 1$:	ldw (LINK,sp),x
      001364 E6 02            [ 1]  445 	ld a,(2,x)
      001366 A4 0F            [ 1]  446 	and a,#15 
      001368 C7 00 0E         [ 1]  447 	ld acc8,a 
      00136B 1C 00 03         [ 2]  448 	addw x,#3
      00136E 72 BB 00 0D      [ 2]  449 	addw x,acc16
      001372 FE               [ 2]  450 	ldw x,(x) ; command index  
      001373 13 01            [ 2]  451 	cpw x,(CMDX,sp)
      001375 27 0A            [ 1]  452 	jreq 2$
      001377 1E 03            [ 2]  453 	ldw x,(LINK,sp)
      001379 FE               [ 2]  454 	ldw x,(x) 
      00137A 1D 00 02         [ 2]  455 	subw x,#2  
      00137D 26 E3            [ 1]  456 	jrne 1$
      00137F 20 05            [ 2]  457 	jra 9$
      001381 1E 03            [ 2]  458 2$: ldw x,(LINK,sp)
      001383 1C 00 02         [ 2]  459 	addw x,#2 	
      001386                        460 9$:	_drop VSIZE
      001386 5B 04            [ 2]    1     addw sp,#VSIZE 
      001388 81               [ 4]  461 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    462 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000011                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000013                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000015                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000017                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000018                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000019                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001A                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001C                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001E                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001F                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000021                         88 flags:: .blkb 1 ; various boolean flags
      000022                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000023                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000025                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      00002F                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      001389                        116 strlen::
      001389 89               [ 2]  117 	pushw x 
      00138A 4F               [ 1]  118 	clr a
      00138B 7D               [ 1]  119 1$:	tnz (x) 
      00138C 27 04            [ 1]  120 	jreq 9$ 
      00138E 4C               [ 1]  121 	inc a 
      00138F 5C               [ 1]  122 	incw x 
      001390 20 F9            [ 2]  123 	jra 1$ 
      001392 85               [ 2]  124 9$:	popw x 
      001393 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      001394                        135 strcmp:
      001394 F6               [ 1]  136 	ld a,(x)
      001395 27 0B            [ 1]  137 	jreq 5$ 
      001397 90 F1            [ 1]  138 	cp a,(y) 
      001399 26 05            [ 1]  139 	jrne 4$ 
      00139B 5C               [ 1]  140 	incw x 
      00139C 90 5C            [ 1]  141 	incw y 
      00139E 20 F4            [ 2]  142 	jra strcmp 
      0013A0                        143 4$: ; not same  
      0013A0 4F               [ 1]  144 	clr a 
      0013A1 81               [ 4]  145 	ret 
      0013A2                        146 5$: ; same 
      0013A2 A6 01            [ 1]  147 	ld a,#1 
      0013A4 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      0013A5                        159 strcpy::
      0013A5 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0013A6 89               [ 2]  161 	pushw x 
      0013A7 90 F6            [ 1]  162 1$: ld a,(y)
      0013A9 27 06            [ 1]  163 	jreq 9$ 
      0013AB F7               [ 1]  164 	ld (x),a 
      0013AC 5C               [ 1]  165 	incw x 
      0013AD 90 5C            [ 1]  166 	incw y 
      0013AF 20 F6            [ 2]  167 	jra 1$ 
      0013B1 7F               [ 1]  168 9$:	clr (x)
      0013B2 85               [ 2]  169 	popw x 
      0013B3 84               [ 1]  170 	pop a 
      0013B4 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; increament high byte 
                           000002   183 	LB=2 ; increament low byte 
                           000002   184 	VSIZE=2
      0013B5                        185 move::
      0013B5 88               [ 1]  186 	push a 
      0013B6                        187 	_vars VSIZE 
      0013B6 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B8 0F 01            [ 1]  188 	clr (INCR,sp)
      0013BA 0F 02            [ 1]  189 	clr (LB,sp)
      0013BC 90 89            [ 2]  190 	pushw y 
      0013BE 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      0013C0 90 85            [ 2]  192 	popw y 
      0013C2 27 31            [ 1]  193 	jreq move_exit ; x==y 
      0013C4 2B 0E            [ 1]  194 	jrmi move_down
      0013C6                        195 move_up: ; start from top address with incr=-1
      0013C6 72 BB 00 0D      [ 2]  196 	addw x,acc16
      0013CA 72 B9 00 0D      [ 2]  197 	addw y,acc16
      0013CE 03 01            [ 1]  198 	cpl (INCR,sp)
      0013D0 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      0013D2 20 05            [ 2]  200 	jra move_loop  
      0013D4                        201 move_down: ; start from bottom address with incr=1 
      0013D4 5A               [ 2]  202     decw x 
      0013D5 90 5A            [ 2]  203 	decw y
      0013D7 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      0013D9                        205 move_loop:	
      0013D9 C6 00 0D         [ 1]  206     ld a, acc16 
      0013DC CA 00 0E         [ 1]  207 	or a, acc8
      0013DF 27 14            [ 1]  208 	jreq move_exit 
      0013E1 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      0013E4 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      0013E7 90 F6            [ 1]  211 	ld a,(y)
      0013E9 F7               [ 1]  212 	ld (x),a 
      0013EA 89               [ 2]  213 	pushw x 
      0013EB CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0013EE 5A               [ 2]  215 	decw x 
      0013EF CF 00 0D         [ 2]  216 	ldw acc16,x 
      0013F2 85               [ 2]  217 	popw x 
      0013F3 20 E4            [ 2]  218 	jra move_loop
      0013F5                        219 move_exit:
      0013F5                        220 	_drop VSIZE
      0013F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013F7 84               [ 1]  221 	pop a 
      0013F8 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      0013F9                        231 clear_vars:
      0013F9 89               [ 2]  232 	pushw x 
      0013FA 88               [ 1]  233 	push a  
      0013FB AE 00 2F         [ 2]  234 	ldw x,#vars 
      0013FE A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      001400 7F               [ 1]  236 1$:	clr (x)
      001401 5C               [ 1]  237 	incw x 
      001402 4A               [ 1]  238 	dec a 
      001403 26 FB            [ 1]  239 	jrne 1$
      001405 84               [ 1]  240 	pop a 
      001406 85               [ 2]  241 	popw x 
      001407 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      001408 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      00144E                        253 system_information:
      00144E AE 14 08         [ 2]  254 	ldw x,#software 
      001451 CD 09 5A         [ 4]  255 	call puts 
      001454 A6 02            [ 1]  256 	ld a,#MAJOR 
      001456 C7 00 0E         [ 1]  257 	ld acc8,a 
      001459 5F               [ 1]  258 	clrw x 
      00145A CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      00145D 72 5F 00 22      [ 1]  260 	clr tab_width  
      001461 35 0A 00 0A      [ 1]  261 	mov base, #10 
      001465 CD 17 B1         [ 4]  262 	call prt_acc24 
      001468 A6 2E            [ 1]  263 	ld a,#'.
      00146A CD 08 FD         [ 4]  264 	call putc 
      00146D A6 00            [ 1]  265 	ld a,#MINOR 
      00146F C7 00 0E         [ 1]  266 	ld acc8,a 
      001472 5F               [ 1]  267 	clrw x 
      001473 CF 00 0C         [ 2]  268 	ldw acc24,x 
      001476 CD 17 B1         [ 4]  269 	call prt_acc24
      001479 A6 0D            [ 1]  270 	ld a,#CR 
      00147B CD 08 FD         [ 4]  271 	call putc
                                    272 ;call test 
      00147E 81               [ 4]  273 	ret
                                    274 
      00147F                        275 warm_init:
      00147F 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      001483 72 5F 00 21      [ 1]  277 	clr flags 
      001487 72 5F 00 1E      [ 1]  278 	clr loop_depth 
      00148B 35 04 00 22      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      00148F 35 0A 00 0A      [ 1]  280 	mov base,#10 
      001493 AE 00 00         [ 2]  281 	ldw x,#0 
      001496 CF 00 04         [ 2]  282 	ldw basicptr,x 
      001499 CF 00 00         [ 2]  283 	ldw in.w,x 
      00149C 72 5F 00 03      [ 1]  284 	clr count
      0014A0 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014A1                        291 clear_basic:
      0014A1 89               [ 2]  292 	pushw x 
      0014A2 72 5F 00 03      [ 1]  293 	clr count
      0014A6 72 5F 00 01      [ 1]  294 	clr in  
      0014AA AE 00 80         [ 2]  295 	ldw x,#free_ram 
      0014AD CF 00 1A         [ 2]  296 	ldw txtbgn,x 
      0014B0 CF 00 1C         [ 2]  297 	ldw txtend,x 
      0014B3 CD 13 F9         [ 4]  298 	call clear_vars 
      0014B6 85               [ 2]  299 	popw x
      0014B7 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014B8                        305 err_msg:
      0014B8 00 00 14 DA 14 E7 14   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             F5 15 0E 15 1D
      0014C4 15 33 15 49 15 63 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             74 15 85
      0014CE 15 91 15 C4 15 D4 15   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             E8 15 FB
      0014D8 16 08                  309 	.word err_overflow 
                                    310 
      0014DA 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      0014E7 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014F5 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00150E 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00151D 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      001533 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001549 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      001563 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      001574 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      001585 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001591 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015C4 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015D4 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015E8 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0015FB 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001608 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      001612 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      001624 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001635 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      001645                        332 syntax_error::
      001645 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      001647                        335 tb_error::
      001647 72 0A 00 21 51   [ 2]  336 	btjt flags,#FCOMP,1$
      00164C 88               [ 1]  337 	push a 
      00164D AE 16 12         [ 2]  338 	ldw x, #rt_msg 
      001650 CD 09 5A         [ 4]  339 	call puts 
      001653 84               [ 1]  340 	pop a 
      001654 AE 14 B8         [ 2]  341 	ldw x, #err_msg 
      001657 72 5F 00 0D      [ 1]  342 	clr acc16 
      00165B 48               [ 1]  343 	sll a
      00165C 72 59 00 0D      [ 1]  344 	rlc acc16  
      001660 C7 00 0E         [ 1]  345 	ld acc8, a 
      001663 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      001667 FE               [ 2]  347 	ldw x,(x)
      001668 CD 09 5A         [ 4]  348 	call puts
      00166B CE 00 04         [ 2]  349 	ldw x,basicptr 
      00166E C6 00 03         [ 1]  350 ld a,count 
      001671 90 5F            [ 1]  351 clrw y 
      001673 90 02            [ 1]  352 rlwa y  
      001675 CD 06 5E         [ 4]  353 call hex_dump
      001678 CE 00 04         [ 2]  354 	ldw x,basicptr
      00167B C6 00 01         [ 1]  355 	ld a,in 
      00167E CD 1E F4         [ 4]  356 	call prt_basic_line
      001681 AE 16 35         [ 2]  357 	ldw x,#tk_id 
      001684 CD 09 5A         [ 4]  358 	call puts 
      001687 C6 00 02         [ 1]  359 	ld a,in.saved 
      00168A 5F               [ 1]  360 	clrw x 
      00168B 97               [ 1]  361 	ld xl,a 
      00168C 72 BB 00 04      [ 2]  362 	addw x,basicptr 
      001690 F6               [ 1]  363 	ld a,(x)
      001691 5F               [ 1]  364 	clrw x 
      001692 97               [ 1]  365 	ld xl,a 
      001693 CD 17 A1         [ 4]  366 	call prt_i16
      001696 72 0D 00 21 37   [ 2]  367 	btjf flags,#FAUTORUN ,6$
      00169B 20 35            [ 2]  368 	jra 6$
      00169D                        369 1$:	
      00169D 88               [ 1]  370 	push a 
      00169E AE 16 24         [ 2]  371 	ldw x,#comp_msg
      0016A1 CD 09 5A         [ 4]  372 	call puts 
      0016A4 84               [ 1]  373 	pop a 
      0016A5 AE 14 B8         [ 2]  374 	ldw x, #err_msg 
      0016A8 72 5F 00 0D      [ 1]  375 	clr acc16 
      0016AC 48               [ 1]  376 	sll a
      0016AD 72 59 00 0D      [ 1]  377 	rlc acc16  
      0016B1 C7 00 0E         [ 1]  378 	ld acc8, a 
      0016B4 72 BB 00 0D      [ 2]  379 	addw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      0016B8 FE               [ 2]  380 	ldw x,(x)
      0016B9 CD 09 5A         [ 4]  381 	call puts
      0016BC AE 16 68         [ 2]  382 	ldw x,#tib
      0016BF CD 09 5A         [ 4]  383 	call puts 
      0016C2 A6 0D            [ 1]  384 	ld a,#CR 
      0016C4 CD 08 FD         [ 4]  385 	call putc
      0016C7 CE 00 00         [ 2]  386 	ldw x,in.w
      0016CA CD 09 C7         [ 4]  387 	call spaces
      0016CD A6 5E            [ 1]  388 	ld a,#'^
      0016CF CD 08 FD         [ 4]  389 	call putc 
      0016D2 AE 17 FF         [ 2]  390 6$: ldw x,#STACK_EMPTY 
      0016D5 94               [ 1]  391     ldw sp,x
                                    392 
      0016D6                        393 warm_start:
      0016D6 CD 14 7F         [ 4]  394 	call warm_init
                                    395 ;----------------------------
                                    396 ;   BASIC interpreter
                                    397 ;----------------------------
      0016D9                        398 cmd_line: ; user interface 
      0016D9 A6 0D            [ 1]  399 	ld a,#CR 
      0016DB CD 08 FD         [ 4]  400 	call putc 
      0016DE A6 3E            [ 1]  401 	ld a,#'> 
      0016E0 CD 08 FD         [ 4]  402 	call putc
      0016E3 CD 0A 5F         [ 4]  403 	call readln
      0016E6 72 5D 00 03      [ 1]  404 	tnz count 
      0016EA 27 ED            [ 1]  405 	jreq cmd_line
      0016EC CD 10 86         [ 4]  406 	call compile
                                    407 ;pushw y 
                                    408 ;ldw x,txtbgn  
                                    409 ;ldw y,txtend
                                    410 ;ldw acc16,x   
                                    411 ;subw y,acc16 
                                    412 ;call hex_dump
                                    413 ;popw y 
                                    414 ; if text begin with a line number
                                    415 ; the compiler set count to zero    
                                    416 ; so code is not interpreted
      0016EF 72 5D 00 03      [ 1]  417 	tnz count 
      0016F3 27 E4            [ 1]  418 	jreq cmd_line
                                    419 	
                                    420 ; if direct command 
                                    421 ; it's ready to interpret 
                                    422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    423 ;; This is the interpreter loop
                                    424 ;; for each BASIC code line. 
                                    425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0016F5                        426 interpreter: 
      0016F5 C6 00 01         [ 1]  427 	ld a,in 
      0016F8 C1 00 03         [ 1]  428 	cp a,count 
      0016FB 2B 1D            [ 1]  429 	jrmi interp_loop
      0016FD                        430 next_line:
      0016FD 72 01 00 21 D7   [ 2]  431 	btjf flags, #FRUN, cmd_line
      001702 CE 00 04         [ 2]  432 	ldw x,basicptr
      001705 72 BB 00 00      [ 2]  433 	addw x,in.w 
      001709 C3 00 1C         [ 2]  434 	cpw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00170C 2A C8            [ 1]  435 	jrpl warm_start
      00170E CF 00 04         [ 2]  436 	ldw basicptr,x ; start of next line  
      001711 E6 02            [ 1]  437 	ld a,(2,x)
      001713 C7 00 03         [ 1]  438 	ld count,a 
      001716 35 03 00 01      [ 1]  439 	mov in,#3 ; skip first 3 bytes of line 
      00171A                        440 interp_loop:
      00171A CD 17 4B         [ 4]  441 	call next_token
      00171D A1 00            [ 1]  442 	cp a,#TK_NONE 
      00171F 27 DC            [ 1]  443 	jreq next_line 
      001721 A1 80            [ 1]  444 	cp a,#TK_CMD
      001723 26 06            [ 1]  445 	jrne 1$
      001725 CD 17 65         [ 4]  446 	call get_code_addr
      001728 FD               [ 4]  447 	call (x) 
      001729 20 EF            [ 2]  448 	jra interp_loop 
      00172B                        449 1$:	 
      00172B A1 85            [ 1]  450 	cp a,#TK_VAR
      00172D 26 05            [ 1]  451 	jrne 2$
      00172F CD 1B C0         [ 4]  452 	call let_var  
      001732 20 E6            [ 2]  453 	jra interp_loop 
      001734                        454 2$:	
      001734 A1 05            [ 1]  455 	cp a,#TK_ARRAY 
      001736 26 05            [ 1]  456 	jrne 3$
      001738 CD 1B BB         [ 4]  457 	call let_array 
      00173B 20 DD            [ 2]  458 	jra interp_loop
      00173D                        459 3$:	
      00173D A1 0A            [ 1]  460 	cp a,#TK_COLON 
      00173F 27 D9            [ 1]  461 	jreq interp_loop
      001741 A1 03            [ 1]  462 4$: cp a,#TK_LABEL
      001743 CD 17 72         [ 4]  463 	call skip_string 
      001746 20 D2            [ 2]  464 	jra interp_loop 
      001748 CC 16 45         [ 2]  465 5$:	jp syntax_error 
                                    466 
                                    467 ;--------------------------
                                    468 ; extract next token from
                                    469 ; token list 
                                    470 ; basicptr -> base address 
                                    471 ; in  -> offset in list array 
                                    472 ; output:
                                    473 ;   A 		token attribute
                                    474 ;   X 		*token_value 
                                    475 ;----------------------------------------
      00174B                        476 next_token::
      00174B 5F               [ 1]  477 	clrw x 
      00174C C6 00 01         [ 1]  478 	ld a,in 
      00174F C7 00 02         [ 1]  479 	ld in.saved,a ; in case "_unget_token" needed 
                                    480 ; don't replace sub by "cp a,count" 
                                    481 ; if end of line must return with A=0   	
      001752 C0 00 03         [ 1]  482 	sub a,count 
      001755 27 0D            [ 1]  483 	jreq 9$ ; end of line 
      001757                        484 0$: 
      001757 CE 00 04         [ 2]  485 	ldw x,basicptr 
      00175A 72 BB 00 00      [ 2]  486 	addw x,in.w 
      00175E F6               [ 1]  487 	ld a,(x)
      00175F 5C               [ 1]  488 	incw x
      001760 72 5C 00 01      [ 1]  489 	inc in   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001764 81               [ 4]  490 9$: ret 
                                    491 
                                    492 ;------------------------
                                    493 ; get cmd and function 
                                    494 ; code address 
                                    495 ; input:
                                    496 ;    X   * cmd|func index 
                                    497 ;        in code_addr table 
                                    498 ;------------------------
      001765                        499 get_code_addr:
      001765 FE               [ 2]  500 	ldw x,(x)
      001766 DE 32 E4         [ 2]  501 	ldw x,(code_addr,x)
      001769                        502 skip_2_bytes:
      001769 72 5C 00 01      [ 1]  503 	inc in 
      00176D 72 5C 00 01      [ 1]  504 	inc in 
      001771 81               [ 4]  505 	ret
                                    506 
                                    507 ;-------------------------
                                    508 ;  skip .asciz in BASIC line 
                                    509 ;  name 
                                    510 ;  input:
                                    511 ;     x		* string 
                                    512 ;  output:
                                    513 ;     none 
                                    514 ;-------------------------
      001772                        515 skip_string:
      001772 F6               [ 1]  516 	ld a,(x)
      001773 27 03            [ 1]  517 	jreq 1$
      001775 5C               [ 1]  518 	incw x 
      001776 20 FA            [ 2]  519 	jra skip_string 
      001778 5C               [ 1]  520 1$: incw x 	
      001779 72 B0 00 04      [ 2]  521 	subw x,basicptr 
      00177D CF 00 00         [ 2]  522 	ldw in.w,x 
      001780 81               [ 4]  523 	ret 
                                    524 
                                    525 ;---------------------
                                    526 ; extract 16 bits  
                                    527 ; address from BASIC
                                    528 ; code 
                                    529 ; input:
                                    530 ;    X    *address
                                    531 ; output:
                                    532 ;    X    address 
                                    533 ;-------------------- 
      001781                        534 get_addr:
      001781 FE               [ 2]  535 	ldw x,(x)
      001782 72 5C 00 01      [ 1]  536 	inc in 
      001786 72 5C 00 01      [ 1]  537 	inc in 
      00178A 81               [ 4]  538 	ret 
                                    539 
                                    540 ;--------------------
                                    541 ; extract int24_t  
                                    542 ; value from BASIC 
                                    543 ; code 
                                    544 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    545 ;    X   *integer 
                                    546 ; output:
                                    547 ;    A:X   int24  
                                    548 ;--------------------
      00178B                        549 get_int24:
      00178B F6               [ 1]  550 	ld a,(x)
      00178C EE 01            [ 2]  551 	ldw x,(1,x)
                                    552 ; skip 3 bytes 
      00178E 72 5C 00 01      [ 1]  553 	inc in 
      001792 72 5C 00 01      [ 1]  554 	inc in 
      001796 72 5C 00 01      [ 1]  555 	inc in 
      00179A 81               [ 4]  556 	ret 
                                    557 
                                    558 ;-------------------------
                                    559 ; get character from 
                                    560 ; BASIC code 
                                    561 ; input:
                                    562 ;    X   *char 
                                    563 ; output:
                                    564 ;    A    char 
                                    565 ;-------------------------
      00179B                        566 get_char:
      00179B F6               [ 1]  567 	ld a,(x)
      00179C 72 5C 00 01      [ 1]  568 	inc in  
      0017A0 81               [ 4]  569     ret 
                                    570 
                                    571 ;-----------------------------------
                                    572 ; print a 16 bit integer 
                                    573 ; using variable 'base' as conversion
                                    574 ; format.
                                    575 ; input:
                                    576 ;    X       integer to print 
                                    577 ;   'base'    conversion base 
                                    578 ; output:
                                    579 ;   terminal  
                                    580 ;-----------------------------------
      0017A1                        581 prt_i16:
      0017A1 72 5F 00 0C      [ 1]  582 	clr acc24 
      0017A5 CF 00 0D         [ 2]  583 	ldw acc16,x 
      0017A8 72 0F 00 0D 04   [ 2]  584 	btjf acc16,#7,prt_acc24
      0017AD 72 53 00 0C      [ 1]  585 	cpl acc24 ; sign extend 
                                    586 	
                                    587 ;------------------------------------
                                    588 ; print integer in acc24 
                                    589 ; input:
                                    590 ;	acc24 		integer to print 
                                    591 ;	'base' 		numerical base for conversion 
                                    592 ;   'tab_width' field width 
                                    593 ;    A 			signed||unsigned conversion
                                    594 ;  output:
                                    595 ;    A          string length
                                    596 ;------------------------------------
      0017B1                        597 prt_acc24:
      0017B1 A6 FF            [ 1]  598 	ld a,#255  ; signed conversion  
      0017B3 CD 17 D7         [ 4]  599     call itoa  ; conversion entier en  .asciz
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0017B6 CD 11 2D         [ 4]  600 	call right_align  
      0017B9 88               [ 1]  601 	push a 
      0017BA CD 09 5A         [ 4]  602 	call puts
      0017BD 84               [ 1]  603 	pop a 
      0017BE 81               [ 4]  604     ret	
                                    605 
                                    606 ;---------------------------------------
                                    607 ;  print value at xstack top 
                                    608 ;---------------------------------------
      0017BF                        609 print_top: 
      0017BF                        610 	_xpop 
      0017BF 90 F6            [ 1]    1     ld a,(y)
      0017C1 93               [ 1]    2     ldw x,y 
      0017C2 EE 01            [ 2]    3     ldw x,(1,x)
      0017C4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017C8 C7 00 0C         [ 1]  611 	ld acc24,a 
      0017CB CF 00 0D         [ 2]  612 	ldw acc16,x 
      0017CE CD 17 B1         [ 4]  613 	call prt_acc24 
      0017D1 A6 20            [ 1]  614 	ld a,#SPACE
      0017D3 CD 08 FD         [ 4]  615 	call putc 
      0017D6 81               [ 4]  616 	ret 
                                    617 
                                    618 ;------------------------------------
                                    619 ; convert integer in acc24 to string
                                    620 ; input:
                                    621 ;   'base'	conversion base 
                                    622 ;	acc24	integer to convert
                                    623 ;   A       0=unsigned, else signed 
                                    624 ; output:
                                    625 ;   X  		pointer to first char of string
                                    626 ;   A       string length
                                    627 ;------------------------------------
                           000001   628 	SIGN=1  ; integer sign 
                           000002   629 	LEN=2 
                           000003   630 	PSTR=3
                           000004   631 	VSIZE=4 ;locals size
      0017D7                        632 itoa::
      0017D7                        633 	_vars VSIZE
      0017D7 52 04            [ 2]    1     sub sp,#VSIZE 
      0017D9 0F 02            [ 1]  634 	clr (LEN,sp) ; string length  
      0017DB 0F 01            [ 1]  635 	clr (SIGN,sp)    ; sign
      0017DD 4D               [ 1]  636 	tnz A
      0017DE 27 11            [ 1]  637 	jreq 1$ ; unsigned conversion  
      0017E0 C6 00 0A         [ 1]  638 	ld a,base 
      0017E3 A1 0A            [ 1]  639 	cp a,#10
      0017E5 26 0A            [ 1]  640 	jrne 1$
                                    641 	; base 10 string display with negative sign if bit 23==1
      0017E7 72 0F 00 0C 05   [ 2]  642 	btjf acc24,#7,1$
      0017EC 03 01            [ 1]  643 	cpl (SIGN,sp)
      0017EE CD 01 D1         [ 4]  644 	call neg_acc24
      0017F1                        645 1$:
                                    646 ; initialize string pointer 
      0017F1 AE 16 68         [ 2]  647 	ldw x,#tib 
      0017F4 1C 00 50         [ 2]  648 	addw x,#TIB_SIZE
      0017F7 5A               [ 2]  649 	decw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0017F8 7F               [ 1]  650 	clr (x)
      0017F9                        651 itoa_loop:
      0017F9 C6 00 0A         [ 1]  652     ld a,base
                                    653 ;	ldw (PSTR,sp),x 
      0017FC CD 02 C7         [ 4]  654     call divu24_8 ; acc24/A 
                                    655 ;	ldw x,(PSTR,sp)
      0017FF AB 30            [ 1]  656     add a,#'0  ; remainder of division
      001801 A1 3A            [ 1]  657     cp a,#'9+1
      001803 2B 02            [ 1]  658     jrmi 2$
      001805 AB 07            [ 1]  659     add a,#7 
      001807                        660 2$:	
      001807 5A               [ 2]  661 	decw x
      001808 F7               [ 1]  662     ld (x),a
      001809 0C 02            [ 1]  663 	inc (LEN,sp)
                                    664 	; if acc24==0 conversion done
      00180B C6 00 0C         [ 1]  665 	ld a,acc24
      00180E CA 00 0D         [ 1]  666 	or a,acc16
      001811 CA 00 0E         [ 1]  667 	or a,acc8
      001814 26 E3            [ 1]  668     jrne itoa_loop
                                    669 	;conversion done, next add '$' or '-' as required
      001816 C6 00 0A         [ 1]  670 	ld a,base 
      001819 A1 10            [ 1]  671 	cp a,#16
      00181B 27 08            [ 1]  672 	jreq 8$
      00181D 7B 01            [ 1]  673 	ld a,(SIGN,sp)
      00181F 27 0A            [ 1]  674     jreq 10$
      001821 A6 2D            [ 1]  675     ld a,#'-
      001823 20 02            [ 2]  676 	jra 9$ 
      001825                        677 8$:	
      001825 A6 24            [ 1]  678 	ld a,#'$ 
      001827 5A               [ 2]  679 9$: decw x
      001828 F7               [ 1]  680     ld (x),a
      001829 0C 02            [ 1]  681 	inc (LEN,sp)
      00182B                        682 10$:
      00182B 7B 02            [ 1]  683 	ld a,(LEN,sp)
      00182D                        684 	_drop VSIZE
      00182D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00182F 81               [ 4]  685 	ret
                                    686 
                                    687 ;------------------------------------
                                    688 ; convert alpha to uppercase
                                    689 ; input:
                                    690 ;    a  character to convert
                                    691 ; output:
                                    692 ;    a  uppercase character
                                    693 ;------------------------------------
      001830                        694 to_upper::
      001830 A1 61            [ 1]  695 	cp a,#'a
      001832 2A 01            [ 1]  696 	jrpl 1$
      001834 81               [ 4]  697 0$:	ret
      001835 A1 7A            [ 1]  698 1$: cp a,#'z	
      001837 22 FB            [ 1]  699 	jrugt 0$
      001839 A0 20            [ 1]  700 	sub a,#32
      00183B 81               [ 4]  701 	ret
                                    702 	
                                    703 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    704 ; convert pad content in integer
                                    705 ; input:
                                    706 ;    x		* .asciz to convert
                                    707 ; output:
                                    708 ;    acc24      int24_t
                                    709 ;------------------------------------
                                    710 	; local variables
                           000001   711 	SIGN=1 ; 1 byte, 
                           000002   712 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   713 	TEMP=3 ; 1 byte, temporary storage
                           000003   714 	VSIZE=3 ; 3 bytes reserved for local storage
      00183C                        715 atoi24::
      00183C 89               [ 2]  716 	pushw x 
      00183D                        717 	_vars VSIZE
      00183D 52 03            [ 2]    1     sub sp,#VSIZE 
                                    718 	; acc24=0 
      00183F 72 5F 00 0C      [ 1]  719 	clr acc24    
      001843 72 5F 00 0D      [ 1]  720 	clr acc16
      001847 72 5F 00 0E      [ 1]  721 	clr acc8 
      00184B 0F 01            [ 1]  722 	clr (SIGN,sp)
      00184D A6 0A            [ 1]  723 	ld a,#10
      00184F 6B 02            [ 1]  724 	ld (BASE,sp),a ; default base decimal
      001851 F6               [ 1]  725 	ld a,(x)
      001852 27 47            [ 1]  726 	jreq 9$  ; completed if 0
      001854 A1 2D            [ 1]  727 	cp a,#'-
      001856 26 04            [ 1]  728 	jrne 1$
      001858 03 01            [ 1]  729 	cpl (SIGN,sp)
      00185A 20 08            [ 2]  730 	jra 2$
      00185C A1 24            [ 1]  731 1$: cp a,#'$
      00185E 26 06            [ 1]  732 	jrne 3$
      001860 A6 10            [ 1]  733 	ld a,#16
      001862 6B 02            [ 1]  734 	ld (BASE,sp),a
      001864 5C               [ 1]  735 2$:	incw x
      001865 F6               [ 1]  736 	ld a,(x)
      001866                        737 3$:	
      001866 A1 61            [ 1]  738 	cp a,#'a
      001868 2B 02            [ 1]  739 	jrmi 4$
      00186A A0 20            [ 1]  740 	sub a,#32
      00186C A1 30            [ 1]  741 4$:	cp a,#'0
      00186E 2B 2B            [ 1]  742 	jrmi 9$
      001870 A0 30            [ 1]  743 	sub a,#'0
      001872 A1 0A            [ 1]  744 	cp a,#10
      001874 2B 06            [ 1]  745 	jrmi 5$
      001876 A0 07            [ 1]  746 	sub a,#7
      001878 11 02            [ 1]  747 	cp a,(BASE,sp)
      00187A 2A 1F            [ 1]  748 	jrpl 9$
      00187C 6B 03            [ 1]  749 5$:	ld (TEMP,sp),a
      00187E 7B 02            [ 1]  750 	ld a,(BASE,sp)
      001880 CD 01 EE         [ 4]  751 	call mulu24_8
      001883 7B 03            [ 1]  752 	ld a,(TEMP,sp)
      001885 CB 00 0E         [ 1]  753 	add a,acc24+2
      001888 C7 00 0E         [ 1]  754 	ld acc24+2,a
      00188B 4F               [ 1]  755 	clr a
      00188C C9 00 0D         [ 1]  756 	adc a,acc24+1
      00188F C7 00 0D         [ 1]  757 	ld acc24+1,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      001892 4F               [ 1]  758 	clr a
      001893 C9 00 0C         [ 1]  759 	adc a,acc24
      001896 C7 00 0C         [ 1]  760 	ld acc24,a
      001899 20 C9            [ 2]  761 	jra 2$
      00189B 0D 01            [ 1]  762 9$:	tnz (SIGN,sp)
      00189D 27 03            [ 1]  763     jreq atoi_exit
      00189F CD 01 D1         [ 4]  764     call neg_acc24
      0018A2                        765 atoi_exit: 
      0018A2                        766 	_drop VSIZE
      0018A2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0018A4 85               [ 2]  767 	popw x ; restore x
      0018A5 81               [ 4]  768 	ret
                                    769 
                                    770 
                                    771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    772 ;;   TINY BASIC  operators,
                                    773 ;;   commands and functions 
                                    774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    775 
                                    776 ;---------------------------------
                                    777 ; dictionary search 
                                    778 ; input:
                                    779 ;	X 		dictionary entry point, name field  
                                    780 ;   y		.asciz name to search 
                                    781 ; output:
                                    782 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    783 ;  X		cmd_index
                                    784 ;---------------------------------
                           000001   785 	NLEN=1 ; cmd length 
                           000002   786 	XSAVE=2
                           000004   787 	YSAVE=4
                           000005   788 	VSIZE=5 
      0018A6                        789 search_dict::
      0018A6                        790 	_vars VSIZE 
      0018A6 52 05            [ 2]    1     sub sp,#VSIZE 
      0018A8 17 04            [ 2]  791 	ldw (YSAVE,sp),y 
      0018AA                        792 search_next:
      0018AA 1F 02            [ 2]  793 	ldw (XSAVE,sp),x 
                                    794 ; get name length in dictionary	
      0018AC F6               [ 1]  795 	ld a,(x)
      0018AD A4 0F            [ 1]  796 	and a,#0xf 
      0018AF 6B 01            [ 1]  797 	ld (NLEN,sp),a  
      0018B1 16 04            [ 2]  798 	ldw y,(YSAVE,sp) ; name pointer 
      0018B3 5C               [ 1]  799 	incw x 
      0018B4                        800 cp_loop:
      0018B4 90 F6            [ 1]  801 	ld a,(y)
      0018B6 27 1B            [ 1]  802 	jreq str_match 
      0018B8 0D 01            [ 1]  803 	tnz (NLEN,sp)
      0018BA 27 0A            [ 1]  804 	jreq no_match  
      0018BC F1               [ 1]  805 	cp a,(x)
      0018BD 26 07            [ 1]  806 	jrne no_match 
      0018BF 90 5C            [ 1]  807 	incw y 
      0018C1 5C               [ 1]  808 	incw x
      0018C2 0A 01            [ 1]  809 	dec (NLEN,sp)
      0018C4 20 EE            [ 2]  810 	jra cp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018C6                        811 no_match:
      0018C6 1E 02            [ 2]  812 	ldw x,(XSAVE,sp) 
      0018C8 1D 00 02         [ 2]  813 	subw x,#2 ; move X to link field
      0018CB 4B 00            [ 1]  814 	push #TK_NONE 
      0018CD FE               [ 2]  815 	ldw x,(x) ; next word link 
      0018CE 84               [ 1]  816 	pop a ; TK_NONE 
      0018CF 27 1F            [ 1]  817 	jreq search_exit  ; not found  
                                    818 ;try next 
      0018D1 20 D7            [ 2]  819 	jra search_next
      0018D3                        820 str_match:
      0018D3 1E 02            [ 2]  821 	ldw x,(XSAVE,sp)
      0018D5 F6               [ 1]  822 	ld a,(X)
      0018D6 6B 01            [ 1]  823 	ld (NLEN,sp),a ; needed to test keyword type  
      0018D8 A4 0F            [ 1]  824 	and a,#0xf 
                                    825 ; move x to procedure address field 	
      0018DA 4C               [ 1]  826 	inc a 
      0018DB C7 00 0E         [ 1]  827 	ld acc8,a 
      0018DE 72 5F 00 0D      [ 1]  828 	clr acc16 
      0018E2 72 BB 00 0D      [ 2]  829 	addw x,acc16 
      0018E6 FE               [ 2]  830 	ldw x,(x) ; routine index  
                                    831 ;determine keyword type bits 7:6 
      0018E7 7B 01            [ 1]  832 	ld a,(NLEN,sp)
      0018E9 4E               [ 1]  833 	swap a 
      0018EA A4 0C            [ 1]  834 	and a,#0xc
      0018EC 44               [ 1]  835 	srl a
      0018ED 44               [ 1]  836 	srl a 
      0018EE AB 80            [ 1]  837 	add a,#128
      0018F0                        838 search_exit: 
      0018F0                        839 	_drop VSIZE 
      0018F0 5B 05            [ 2]    1     addw sp,#VSIZE 
      0018F2 81               [ 4]  840 	ret 
                                    841 
                                    842 ;---------------------
                                    843 ; check if next token
                                    844 ;  is of expected type 
                                    845 ; input:
                                    846 ;   A 		 expected token attribute
                                    847 ;  ouput:
                                    848 ;   none     if fail call syntax_error 
                                    849 ;--------------------
      0018F3                        850 expect:
      0018F3 88               [ 1]  851 	push a 
      0018F4 CD 17 4B         [ 4]  852 	call next_token 
      0018F7 11 01            [ 1]  853 	cp a,(1,sp)
      0018F9 27 03            [ 1]  854 	jreq 1$
      0018FB CC 16 45         [ 2]  855 	jp syntax_error
      0018FE 84               [ 1]  856 1$: pop a 
      0018FF 81               [ 4]  857 	ret 
                                    858 
                                    859 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    860 ; parse arguments list 
                                    861 ; between ()
                                    862 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001900                        863 func_args:
      001900 A6 06            [ 1]  864 	ld a,#TK_LPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001902 CD 18 F3         [ 4]  865 	call expect 
                                    866 ; expected to continue in arg_list 
                                    867 ; caller must check for TK_RPAREN 
                                    868 
                                    869 ;-------------------------------
                                    870 ; parse embedded BASIC routines 
                                    871 ; arguments list.
                                    872 ; arg_list::=  expr[','expr]*
                                    873 ; all arguments are of int24_t type
                                    874 ; and pushed on stack 
                                    875 ; input:
                                    876 ;   none
                                    877 ; output:
                                    878 ;   xstack{n}   arguments pushed on xstack
                                    879 ;   A 	number of arguments pushed on xstack  
                                    880 ;--------------------------------
      001905                        881 arg_list:
      001905 4B 00            [ 1]  882 	push #0  
      001907 CD 1A 37         [ 4]  883 1$: call expression
      00190A A1 00            [ 1]  884 	cp a,#TK_NONE 
      00190C 27 1A            [ 1]  885 	jreq 5$
      00190E A1 84            [ 1]  886 	cp a,#TK_INTGR
      001910 26 0D            [ 1]  887 	jrne 4$
      001912                        888 3$: 
      001912 0C 01            [ 1]  889 	inc (1,sp)
      001914 CD 17 4B         [ 4]  890 	call next_token 
      001917 A1 08            [ 1]  891 	cp a,#TK_COMMA 
      001919 27 EC            [ 1]  892 	jreq 1$ 
      00191B A1 00            [ 1]  893 	cp a,#TK_NONE 
      00191D 27 09            [ 1]  894 	jreq 5$ 
      00191F A1 07            [ 1]  895 4$:	cp a,#TK_RPAREN 
      001921 27 05            [ 1]  896 	jreq 5$
      001923                        897 	_unget_token 
      001923 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001928 84               [ 1]  898 5$:	pop a  
      001929 81               [ 4]  899 	ret 
                                    900 
                                    901 ;--------------------------------
                                    902 ;   BASIC commnands 
                                    903 ;--------------------------------
                                    904 
                                    905 ;--------------------------------
                                    906 ;  arithmetic and relational 
                                    907 ;  routines
                                    908 ;  operators precedence
                                    909 ;  highest to lowest
                                    910 ;  operators on same row have 
                                    911 ;  same precedence and are executed
                                    912 ;  from left to right.
                                    913 ;	'*','/','%'
                                    914 ;   '-','+'
                                    915 ;   '=','>','<','>=','<=','<>','><'
                                    916 ;   '<>' and '><' are equivalent for not equal.
                                    917 ;--------------------------------
                                    918 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



                                    919 ;---------------------
                                    920 ; return array element
                                    921 ; address from @(expr)
                                    922 ; input:
                                    923 ;   A 		TK_ARRAY
                                    924 ; output:
                                    925 ;	X 		element address 
                                    926 ;----------------------
      00192A                        927 get_array_element:
      00192A CD 19 00         [ 4]  928 	call func_args 
      00192D A1 01            [ 1]  929 	cp a,#1
      00192F 27 03            [ 1]  930 	jreq 1$
      001931 CC 16 45         [ 2]  931 	jp syntax_error
      001934                        932 1$: _xpop 
      001934 90 F6            [ 1]    1     ld a,(y)
      001936 93               [ 1]    2     ldw x,y 
      001937 EE 01            [ 2]    3     ldw x,(1,x)
      001939 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    933     ; ignore A, index < 65536 in any case 
                                    934 	; check for bounds 
      00193D C3 00 1F         [ 2]  935 	cpw x,array_size 
      001940 23 05            [ 2]  936 	jrule 3$
                                    937 ; bounds {1..array_size}	
      001942 A6 0A            [ 1]  938 2$: ld a,#ERR_BAD_VALUE 
      001944 CC 16 47         [ 2]  939 	jp tb_error 
      001947 5D               [ 2]  940 3$: tnzw  x
      001948 27 F8            [ 1]  941 	jreq 2$ 
      00194A 89               [ 2]  942 	pushw x 
      00194B 58               [ 2]  943 	sllw x 
      00194C 72 FB 01         [ 2]  944 	addw x,(1,sp) ; index*size_of(int24)
      00194F 1F 01            [ 2]  945 	ldw (1,sp),x  
      001951 AE 16 68         [ 2]  946 	ldw x,#tib ; array is below tib 
      001954 72 F0 01         [ 2]  947 	subw x,(1,sp)
      001957                        948 	_drop 2   
      001957 5B 02            [ 2]    1     addw sp,#2 
      001959 81               [ 4]  949 	ret 
                                    950 
                                    951 
                                    952 ;***********************************
                                    953 ;   expression parse,execute 
                                    954 ;***********************************
                                    955 ;-----------------------------------
                                    956 ; factor ::= ['+'|'-'|e]  var | @ |
                                    957 ;			 integer | function |
                                    958 ;			 '('relation')' 
                                    959 ; output:
                                    960 ;   A       token attribute 
                                    961 ;   xstack  value  
                                    962 ; ---------------------------------
                           000001   963 	NEG=1
                           000001   964 	VSIZE=1
      00195A                        965 factor:
      00195A                        966 	_vars VSIZE 
      00195A 52 01            [ 2]    1     sub sp,#VSIZE 
      00195C 0F 01            [ 1]  967 	clr (NEG,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00195E CD 17 4B         [ 4]  968 	call next_token
      001961 A1 02            [ 1]  969 	cp a,#CMD_END  
      001963 25 68            [ 1]  970 	jrult 16$
      001965 A1 10            [ 1]  971 1$:	cp a,#TK_PLUS 
      001967 27 06            [ 1]  972 	jreq 2$
      001969 A1 11            [ 1]  973 	cp a,#TK_MINUS 
      00196B 26 05            [ 1]  974 	jrne 4$ 
      00196D 03 01            [ 1]  975 	cpl (NEG,sp)
      00196F                        976 2$:	
      00196F CD 17 4B         [ 4]  977 	call next_token 
      001972                        978 4$:	
      001972 A1 81            [ 1]  979 	cp a,#TK_IFUNC 
      001974 26 06            [ 1]  980 	jrne 5$ 
      001976 CD 17 65         [ 4]  981 	call get_code_addr 
      001979 FD               [ 4]  982 	call (x); result in A:X  
      00197A 20 5C            [ 2]  983 	jra 18$ 
      00197C                        984 5$:
      00197C A1 84            [ 1]  985 	cp a,#TK_INTGR
      00197E 26 05            [ 1]  986 	jrne 6$
      001980 CD 17 8B         [ 4]  987 	call get_int24 
      001983 20 53            [ 2]  988 	jra 18$
      001985                        989 6$:
      001985 A1 05            [ 1]  990 	cp a,#TK_ARRAY
      001987 26 05            [ 1]  991 	jrne 7$
      001989 CD 19 2A         [ 4]  992 	call get_array_element
      00198C 20 07            [ 2]  993     jra 71$
      00198E                        994 7$:
      00198E A1 85            [ 1]  995 	cp a,#TK_VAR 
      001990 26 08            [ 1]  996 	jrne 8$
      001992 CD 17 81         [ 4]  997 	call get_addr 
      001995                        998 71$:
      001995 F6               [ 1]  999 	ld a,(x)
      001996 EE 01            [ 2] 1000 	ldw x,(1,x)
      001998 20 3E            [ 2] 1001 	jra 18$
      00199A                       1002 8$:
      00199A A1 03            [ 1] 1003 	cp a,#TK_LABEL 
      00199C 26 0C            [ 1] 1004 	jrne 9$ 
      00199E CD 1C 8E         [ 4] 1005 	call search_const 
      0019A1 4F               [ 1] 1006 	clr a 
      0019A2 5D               [ 2] 1007 	tnzw x 
      0019A3 27 28            [ 1] 1008 	jreq 16$
      0019A5 CD 1B F0         [ 4] 1009 	call get_const_value 
      0019A8 20 2E            [ 2] 1010 	jra 18$
      0019AA                       1011 9$: 
      0019AA A1 82            [ 1] 1012 	cp a,#TK_CFUNC 
      0019AC 26 08            [ 1] 1013 	jrne 12$
      0019AE CD 17 65         [ 4] 1014 	call get_code_addr 
      0019B1 FD               [ 4] 1015 	call(x)
      0019B2 5F               [ 1] 1016 	clrw x 
      0019B3 02               [ 1] 1017 	rlwa x 
      0019B4 20 22            [ 2] 1018 	jra 18$ 	 
      0019B6                       1019 12$:			
      0019B6 A1 06            [ 1] 1020 	cp a,#TK_LPAREN
      0019B8 26 13            [ 1] 1021 	jrne 16$
      0019BA CD 1A 37         [ 4] 1022 	call expression
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0019BD A6 07            [ 1] 1023 	ld a,#TK_RPAREN 
      0019BF CD 18 F3         [ 4] 1024 	call expect
      0019C2                       1025 	_xpop 
      0019C2 90 F6            [ 1]    1     ld a,(y)
      0019C4 93               [ 1]    2     ldw x,y 
      0019C5 EE 01            [ 2]    3     ldw x,(1,x)
      0019C7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0019CB 20 0B            [ 2] 1026 	jra 18$	
      0019CD                       1027 16$:
      0019CD 4D               [ 1] 1028 	tnz a 
      0019CE 27 1A            [ 1] 1029 	jreq 20$ 
      0019D0                       1030 	_unget_token
      0019D0 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019D5 4F               [ 1] 1031 	clr a 
      0019D6 20 12            [ 2] 1032 	jra 20$ 
      0019D8                       1033 18$: 
      0019D8 0D 01            [ 1] 1034 	tnz (NEG,sp)
      0019DA 27 03            [ 1] 1035 	jreq 19$
      0019DC CD 01 C9         [ 4] 1036 	call neg_ax   
      0019DF                       1037 19$: _xpush 
      0019DF 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0019E3 90 F7            [ 1]    2     ld (y),a 
      0019E5 90 EF 01         [ 2]    3     ldw (1,y),x 
      0019E8 A6 84            [ 1] 1038      ld a,#TK_INTGR
      0019EA                       1039 20$:
      0019EA                       1040 	_drop VSIZE
      0019EA 5B 01            [ 2]    1     addw sp,#VSIZE 
      0019EC 81               [ 4] 1041 	ret
                                   1042 
                                   1043 
                                   1044 ;-----------------------------------
                                   1045 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1046 ; output:
                                   1047 ;   A    	token attribute 
                                   1048 ;	xstack		value 
                                   1049 ;-----------------------------------
                           000001  1050 	MULOP=1
                           000001  1051 	VSIZE=1
      0019ED                       1052 term:
      0019ED                       1053 	_vars VSIZE
      0019ED 52 01            [ 2]    1     sub sp,#VSIZE 
      0019EF CD 19 5A         [ 4] 1054 	call factor
      0019F2 4D               [ 1] 1055 	tnz a 
      0019F3 27 3F            [ 1] 1056 	jreq term_exit 
      0019F5                       1057 term01:	 ; check for  operator 
      0019F5 CD 17 4B         [ 4] 1058 	call next_token
      0019F8 6B 01            [ 1] 1059 	ld (MULOP,sp),a
      0019FA A1 02            [ 1] 1060 	cp a,#CMD_END
      0019FC 25 2B            [ 1] 1061 	jrult 8$
      0019FE A4 30            [ 1] 1062 	and a,#TK_GRP_MASK
      001A00 A1 20            [ 1] 1063 	cp a,#TK_GRP_MULT
      001A02 27 02            [ 1] 1064 	jreq 1$
      001A04 20 23            [ 2] 1065 	jra 8$
      001A06                       1066 1$:	; got *|/|%
      001A06 CD 19 5A         [ 4] 1067 	call factor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A09 A1 84            [ 1] 1068 	cp a,#TK_INTGR
      001A0B 27 03            [ 1] 1069 	jreq 2$
      001A0D CC 16 45         [ 2] 1070 	jp syntax_error
      001A10                       1071 2$:	
      001A10 7B 01            [ 1] 1072 	ld a,(MULOP,sp) 
      001A12 A1 20            [ 1] 1073 	cp a,#TK_MULT 
      001A14 26 05            [ 1] 1074 	jrne 3$
      001A16 CD 02 21         [ 4] 1075 	call mul24 
      001A19 20 DA            [ 2] 1076 	jra term01
      001A1B A1 21            [ 1] 1077 3$: cp a,#TK_DIV 
      001A1D 26 05            [ 1] 1078 	jrne 4$ 
      001A1F CD 02 E5         [ 4] 1079 	call div24 
      001A22 20 D1            [ 2] 1080 	jra term01 
      001A24 CD 03 93         [ 4] 1081 4$: call mod24
      001A27 20 CC            [ 2] 1082 	jra term01 
      001A29 7B 01            [ 1] 1083 8$: ld a,(MULOP,sp)
      001A2B 27 05            [ 1] 1084 	jreq 9$ 
      001A2D                       1085 	_unget_token
      001A2D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A32                       1086 9$: 
      001A32 A6 84            [ 1] 1087 	ld a,#TK_INTGR 	
      001A34                       1088 term_exit:
      001A34                       1089 	_drop VSIZE 
      001A34 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A36 81               [ 4] 1090 	ret 
                                   1091 
                                   1092 ;-------------------------------
                                   1093 ;  expr ::= term [['+'|'-'] term]*
                                   1094 ;  result range {-32768..32767}
                                   1095 ;  output:
                                   1096 ;   A    token attribute 
                                   1097 ;   xstack	 result    
                                   1098 ;-------------------------------
                           000001  1099 	OP=1 
                           000001  1100 	VSIZE=1 
      001A37                       1101 expression:
      001A37                       1102 	_vars VSIZE 
      001A37 52 01            [ 2]    1     sub sp,#VSIZE 
      001A39 CD 19 ED         [ 4] 1103 	call term
      001A3C 4D               [ 1] 1104 	tnz a 
      001A3D 27 36            [ 1] 1105 	jreq expr_exit 
      001A3F                       1106 1$:	
      001A3F CD 17 4B         [ 4] 1107 	call next_token
      001A42 6B 01            [ 1] 1108 	ld (OP,sp),a 
      001A44 A1 02            [ 1] 1109 	cp a,#CMD_END 
      001A46 25 22            [ 1] 1110 	jrult 8$ 
      001A48 A4 30            [ 1] 1111 	and a,#TK_GRP_MASK
      001A4A A1 10            [ 1] 1112 	cp a,#TK_GRP_ADD 
      001A4C 27 02            [ 1] 1113 	jreq 2$ 
      001A4E 20 1A            [ 2] 1114 	jra 8$
      001A50                       1115 2$: 
      001A50 CD 19 ED         [ 4] 1116 	call term
      001A53 A1 84            [ 1] 1117 	cp a,#TK_INTGR
      001A55 27 03            [ 1] 1118 	jreq 3$
      001A57 CC 16 45         [ 2] 1119 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A5A                       1120 3$:	
      001A5A 7B 01            [ 1] 1121 	ld a,(OP,sp)
      001A5C A1 10            [ 1] 1122 	cp a,#TK_PLUS 
      001A5E 26 05            [ 1] 1123 	jrne 4$
      001A60 CD 01 58         [ 4] 1124 	call add24
      001A63 20 DA            [ 2] 1125 	jra 1$ 
      001A65                       1126 4$:	
      001A65 CD 01 7D         [ 4] 1127 	call sub24
      001A68 20 D5            [ 2] 1128 	jra 1$
      001A6A 7B 01            [ 1] 1129 8$: ld a,(OP,sp)
      001A6C 27 05            [ 1] 1130 	jreq 9$ 
      001A6E                       1131 	_unget_token	
      001A6E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A73                       1132 9$: 
      001A73 A6 84            [ 1] 1133 	ld a,#TK_INTGR	
      001A75                       1134 expr_exit:
      001A75                       1135 	_drop VSIZE 
      001A75 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A77 81               [ 4] 1136 	ret 
                                   1137 
                                   1138 ;---------------------------------------------
                                   1139 ; rel ::= expr rel_op expr
                                   1140 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1141 ;  relation return  integer , zero is false 
                                   1142 ;  output:
                                   1143 ;    A 		token attribute  
                                   1144 ;	 xstack		value  
                                   1145 ;---------------------------------------------
                           000001  1146 	RELOP=1
                           000001  1147 	VSIZE=1 
      001A78                       1148 relation: 
      001A78                       1149 	_vars VSIZE
      001A78 52 01            [ 2]    1     sub sp,#VSIZE 
      001A7A CD 1A 37         [ 4] 1150 	call expression
      001A7D 4D               [ 1] 1151 	tnz a 
      001A7E 26 03            [ 1] 1152 	jrne 1$
      001A80 CC 1A CA         [ 2] 1153 	jp rel_exit
      001A83                       1154 1$:	
                                   1155 ; expect rel_op or leave 
      001A83 CD 17 4B         [ 4] 1156 	call next_token 
      001A86 6B 01            [ 1] 1157 	ld (RELOP,sp),a 
      001A88 A4 30            [ 1] 1158 	and a,#TK_GRP_MASK
      001A8A A1 30            [ 1] 1159 	cp a,#TK_GRP_RELOP 
      001A8C 26 31            [ 1] 1160 	jrne 8$
      001A8E                       1161 2$:	; expect another expression
      001A8E CD 1A 37         [ 4] 1162 	call expression
      001A91 A1 84            [ 1] 1163 	cp a,#TK_INTGR
      001A93 27 03            [ 1] 1164 	jreq 3$
      001A95 CC 16 45         [ 2] 1165 	jp syntax_error 
      001A98                       1166 3$:	
      001A98 CD 01 7D         [ 4] 1167 	call sub24 
      001A9B 26 06            [ 1] 1168 	jrne 4$
      001A9D 35 02 00 0E      [ 1] 1169 	mov acc8,#2 ; n1==n2
      001AA1 20 0C            [ 2] 1170 	jra 6$ 
      001AA3                       1171 4$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001AA3 2C 06            [ 1] 1172 	jrsgt 5$  
      001AA5 35 04 00 0E      [ 1] 1173 	mov acc8,#4 ; n1<2 
      001AA9 20 04            [ 2] 1174 	jra 6$
      001AAB                       1175 5$:
      001AAB 35 01 00 0E      [ 1] 1176 	mov acc8,#1 ; n1>n2 
      001AAF                       1177 6$:
      001AAF 5F               [ 1] 1178 	clrw x 
      001AB0 C6 00 0E         [ 1] 1179 	ld a, acc8  
      001AB3 14 01            [ 1] 1180 	and a,(RELOP,sp)
      001AB5 27 01            [ 1] 1181 	jreq 7$
      001AB7 5C               [ 1] 1182 	incw x
      001AB8                       1183 7$:	_store_top   
      001AB8 90 F7            [ 1]    1     ld (y),a 
      001ABA 90 EF 01         [ 2]    2     ldw (1,y),x     
      001ABD 20 09            [ 2] 1184 	jra 10$  	
      001ABF 7B 01            [ 1] 1185 8$: ld a,(RELOP,sp)
      001AC1 27 05            [ 1] 1186 	jreq 10$
      001AC3                       1187 	_unget_token
      001AC3 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AC8                       1188 10$:
      001AC8 A6 84            [ 1] 1189 	ld a,#TK_INTGR
      001ACA                       1190 rel_exit:
      001ACA                       1191 	_drop VSIZE
      001ACA 5B 01            [ 2]    1     addw sp,#VSIZE 
      001ACC 81               [ 4] 1192 	ret 
                                   1193 
                                   1194 ;--------------------------------
                                   1195 ; BASIC: SHOW 
                                   1196 ; print stack content in hexadecimal bytes 
                                   1197 ; 16 bytes per row 
                                   1198 ;--------------------------------
                           000001  1199 	DEPTH=1
                           000002  1200 	CNTR=2
                           000002  1201 	VSIZE=2
      001ACD                       1202 show:
      001ACD                       1203 	_vars VSIZE 
      001ACD 52 02            [ 2]    1     sub sp,#VSIZE 
      001ACF 0F 02            [ 1] 1204 	clr (CNTR,sp)
      001AD1 AE 1B 1D         [ 2] 1205 	ldw x,#cstk_prompt
      001AD4 CD 09 5A         [ 4] 1206 	call puts 
      001AD7 90 89            [ 2] 1207 	pushw y 
      001AD9 AE 17 73         [ 2] 1208 	ldw x,#XSTACK_EMPTY
      001ADC 72 F0 01         [ 2] 1209 	subw x,(1,sp)
      001ADF                       1210 	_drop 2
      001ADF 5B 02            [ 2]    1     addw sp,#2 
      001AE1 A6 03            [ 1] 1211 	ld a,#CELL_SIZE 
      001AE3 62               [ 2] 1212 	div x,a  
      001AE4 9F               [ 1] 1213 	ld a,xl  
      001AE5 6B 01            [ 1] 1214     ld (DEPTH,sp),a 
      001AE7 90 CF 00 18      [ 2] 1215 	ldw ptr16,y 
      001AEB                       1216 1$: 
      001AEB 72 C6 00 18      [ 4] 1217 	ld a,[ptr16]
      001AEF 72 5C 00 19      [ 1] 1218 	inc ptr8 
      001AF3 72 CE 00 18      [ 5] 1219 	ldw x,[ptr16]
      001AF7 72 5C 00 19      [ 1] 1220 	inc ptr8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001AFB 72 5C 00 19      [ 1] 1221 	inc ptr8 
      001AFF C7 00 0C         [ 1] 1222 	ld acc24,a 
      001B02 CF 00 0D         [ 2] 1223 	ldw acc16,x 
      001B05 CD 17 B1         [ 4] 1224 	call prt_acc24
      001B08 A6 20            [ 1] 1225 	ld a,#SPACE 
      001B0A CD 08 FD         [ 4] 1226 	call putc 
      001B0D 0C 02            [ 1] 1227 	inc (CNTR,sp)
      001B0F 7B 02            [ 1] 1228 	ld a,(CNTR,sp)
      001B11 11 01            [ 1] 1229 	cp a,(DEPTH,sp)
      001B13 2B D6            [ 1] 1230 	jrmi 1$
      001B15 A6 0D            [ 1] 1231 	ld a,#CR 
      001B17 CD 08 FD         [ 4] 1232 	call putc  
      001B1A                       1233 	_drop VSIZE 
      001B1A 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B1C 81               [ 4] 1234 	ret
                                   1235 
      001B1D 0A 63 6F 6E 74 65 6E  1236 cstk_prompt: .asciz "\ncontent of expression stack from top to bottom:\n"
             74 20 6F 66 20 65 78
             70 72 65 73 73 69 6F
             6E 20 73 74 61 63 6B
             20 66 72 6F 6D 20 74
             6F 70 20 74 6F 20 62
             6F 74 74 6F 6D 3A 0A
             00
                                   1237 
                                   1238 
                                   1239 ;--------------------------------------------
                                   1240 ; BASIC: HEX 
                                   1241 ; select hexadecimal base for integer print
                                   1242 ;---------------------------------------------
      001B4F                       1243 hex_base:
      001B4F 35 10 00 0A      [ 1] 1244 	mov base,#16 
      001B53 81               [ 4] 1245 	ret 
                                   1246 
                                   1247 ;--------------------------------------------
                                   1248 ; BASIC: DEC 
                                   1249 ; select decimal base for integer print
                                   1250 ;---------------------------------------------
      001B54                       1251 dec_base:
      001B54 35 0A 00 0A      [ 1] 1252 	mov base,#10
      001B58 81               [ 4] 1253 	ret 
                                   1254 
                                   1255 ;------------------------
                                   1256 ; BASIC: FREE 
                                   1257 ; return free size in RAM 
                                   1258 ; output:
                                   1259 ;   A:x		size 
                                   1260 ;--------------------------
      001B59                       1261 free:
      001B59 90 89            [ 2] 1262 	pushw y 
      001B5B 4F               [ 1] 1263 	clr a 
      001B5C AE 16 68         [ 2] 1264 	ldw x,#tib 
      001B5F 90 CE 00 1A      [ 2] 1265 	ldw y,txtbgn 
      001B63 90 A3 35 80      [ 2] 1266 	cpw y,#app_space
      001B67 25 05            [ 1] 1267 	jrult 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001B69 1D 00 80         [ 2] 1268 	subw x,#free_ram 
      001B6C 20 04            [ 2] 1269 	jra 2$ 
      001B6E                       1270 1$:	
      001B6E 72 B0 00 1C      [ 2] 1271 	subw x,txtend
      001B72 90 85            [ 2] 1272 2$:	popw y 
      001B74 81               [ 4] 1273 	ret 
                                   1274 
                                   1275 ;------------------------------
                                   1276 ; BASIC: SIZE 
                                   1277 ; command that print 
                                   1278 ; program start addres and size 
                                   1279 ;------------------------------
      001B75                       1280 cmd_size:
      001B75 3B 00 0A         [ 1] 1281 	push base 
      001B78 AE 1D C1         [ 2] 1282 	ldw x,#PROG_ADDR 
      001B7B CD 09 5A         [ 4] 1283 	call puts 
      001B7E CE 00 1A         [ 2] 1284 	ldw x,txtbgn     
      001B81 35 10 00 0A      [ 1] 1285 	mov base,#16 
      001B85 CD 17 A1         [ 4] 1286 	call prt_i16
      001B88 32 00 0A         [ 1] 1287 	pop base 
      001B8B AE 1D D3         [ 2] 1288 	ldw x,#PROG_SIZE 
      001B8E CD 09 5A         [ 4] 1289 	call puts 
      001B91 CE 00 1C         [ 2] 1290 	ldw x,txtend 
      001B94 72 B0 00 1A      [ 2] 1291 	subw x,txtbgn 
      001B98 CD 17 A1         [ 4] 1292 	call prt_i16
      001B9B AE 1D E4         [ 2] 1293 	ldw x,#STR_BYTES 
      001B9E CD 09 5A         [ 4] 1294 	call puts  
      001BA1 81               [ 4] 1295 	ret 
                                   1296 
                                   1297 
                                   1298 ;------------------------
                                   1299 ; BASIC: UBOUND  
                                   1300 ; return array variable size 
                                   1301 ; and set 'array_size' variable 
                                   1302 ; output:
                                   1303 ;   A:X 	array_size
                                   1304 ;--------------------------
      001BA2                       1305 ubound:
      001BA2 CD 1B 59         [ 4] 1306 	call free 
      001BA5 A6 03            [ 1] 1307 	ld a,#CELL_SIZE 
      001BA7 42               [ 4] 1308 	mul x,a 
      001BA8 CF 00 1F         [ 2] 1309 	ldw array_size,x
      001BAB 4F               [ 1] 1310 	clr a 
      001BAC 81               [ 4] 1311 	ret 
                                   1312 
                                   1313 ;-----------------------------
                                   1314 ; BASIC: LET var=expr 
                                   1315 ; variable assignement 
                                   1316 ; output:
                                   1317 ;   A 		TK_NONE 
                                   1318 ;-----------------------------
      001BAD                       1319 let::
      001BAD CD 17 4B         [ 4] 1320 	call next_token 
      001BB0 A1 85            [ 1] 1321 	cp a,#TK_VAR 
      001BB2 27 0C            [ 1] 1322 	jreq let_var
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001BB4 A1 05            [ 1] 1323 	cp a,#TK_ARRAY 
      001BB6 27 03            [ 1] 1324 	jreq  let_array
      001BB8 CC 16 45         [ 2] 1325 	jp syntax_error
      001BBB                       1326 let_array:
      001BBB CD 19 2A         [ 4] 1327 	call get_array_element
      001BBE 20 03            [ 2] 1328 	jra let_eval 
      001BC0                       1329 let_var:
      001BC0 CD 17 81         [ 4] 1330 	call get_addr
      001BC3                       1331 let_eval:
      001BC3 CF 00 18         [ 2] 1332 	ldw ptr16,x  ; variable address 
      001BC6 CD 17 4B         [ 4] 1333 	call next_token 
      001BC9 A1 32            [ 1] 1334 	cp a,#TK_EQUAL
      001BCB 27 03            [ 1] 1335 	jreq 1$
      001BCD CC 16 45         [ 2] 1336 	jp syntax_error
      001BD0                       1337 1$:	
      001BD0 CD 1A 37         [ 4] 1338 	call expression    
      001BD3 A1 84            [ 1] 1339 	cp a,#TK_INTGR 
      001BD5 27 03            [ 1] 1340 	jreq 2$
      001BD7 CC 16 45         [ 2] 1341 	jp syntax_error
      001BDA                       1342 2$:	
      001BDA                       1343 	_xpop ; value 
      001BDA 90 F6            [ 1]    1     ld a,(y)
      001BDC 93               [ 1]    2     ldw x,y 
      001BDD EE 01            [ 2]    3     ldw x,(1,x)
      001BDF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BE3                       1344 3$:
      001BE3 72 C7 00 18      [ 4] 1345 	ld [ptr16],a
      001BE7 72 5C 00 19      [ 1] 1346 	inc ptr8  
      001BEB 72 CF 00 18      [ 5] 1347 	ldw [ptr16],x 
      001BEF 81               [ 4] 1348 	ret 
                                   1349 
                                   1350 
                                   1351 ;--------------------------
                                   1352 ; return constant value 
                                   1353 ; from it's record address
                                   1354 ; input:
                                   1355 ;	X	*const record 
                                   1356 ; output:
                                   1357 ;   A:X   const  value
                                   1358 ;--------------------------
      001BF0                       1359 get_const_value: ; -- i 
      001BF0 F6               [ 1] 1360 	ld a,(x) ; record size 
      001BF1 A0 03            [ 1] 1361 	sub a,#3 ; * value 
      001BF3 88               [ 1] 1362 	push a 
      001BF4 4B 00            [ 1] 1363 	push #0 
      001BF6 72 FB 01         [ 2] 1364 	addw x,(1,sp)
      001BF9 F6               [ 1] 1365 	ld a,(x)
      001BFA EE 01            [ 2] 1366 	ldw x,(1,x)
      001BFC                       1367 	_drop 2
      001BFC 5B 02            [ 2]    1     addw sp,#2 
      001BFE 81               [ 4] 1368 	ret 
                                   1369 
                                   1370 
                                   1371 ;--------------------------
                                   1372 ; list constants in EEPROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                   1373 ; call when using LIST \C 
                                   1374 ;-------------------------
                           000001  1375 	COUNT=1
                           000003  1376 	YTEMP=3
                           000004  1377 	VSIZE=4 
      001BFF                       1378 list_const:
      001BFF 90 89            [ 2] 1379 	pushw y 
      001C01                       1380 	_vars 4 
      001C01 52 04            [ 2]    1     sub sp,#4 
      001C03 5F               [ 1] 1381 	clrw x 
      001C04 1F 01            [ 2] 1382 	ldw (COUNT,sp),x  
      001C06 90 AE 40 00      [ 2] 1383 	ldw Y,#EEPROM_BASE 
      001C0A 90 C3 00 23      [ 2] 1384 1$:	cpw y,free_eeprom 
      001C0E 24 30            [ 1] 1385 	jruge 9$
      001C10 17 03            [ 2] 1386     ldw (YTEMP,sp),y 
      001C12 93               [ 1] 1387 	ldw x,y
      001C13 5C               [ 1] 1388 	incw x 
      001C14 CD 09 5A         [ 4] 1389 	call puts  
      001C17 A6 3D            [ 1] 1390 	ld a,#'= 
      001C19 CD 08 FD         [ 4] 1391 	call putc 
      001C1C 1E 03            [ 2] 1392 	ldw x,(YTEMP,sp)
      001C1E CD 1B F0         [ 4] 1393 	call get_const_value 
      001C21 C7 00 0C         [ 1] 1394 	ld acc24,a 
      001C24 CF 00 0D         [ 2] 1395 	ldw acc16,x 
      001C27 CD 17 B1         [ 4] 1396 	call prt_acc24
      001C2A 1E 01            [ 2] 1397 	ldw x,(COUNT,sp)
      001C2C 5C               [ 1] 1398 	incw x 
      001C2D 1F 01            [ 2] 1399 	ldw (COUNT,sp),x 
      001C2F 72 5F 00 0D      [ 1] 1400 	clr acc16 
      001C33 16 03            [ 2] 1401 	ldw y,(YTEMP,sp)
      001C35 90 F6            [ 1] 1402 	ld a,(y)
      001C37 C7 00 0E         [ 1] 1403 	ld acc8,a
      001C3A 72 B9 00 0D      [ 2] 1404 	addw y,acc16 
      001C3E 20 CA            [ 2] 1405 	jra 1$ 
      001C40                       1406 9$:	
      001C40 1E 01            [ 2] 1407 	ldw x,(COUNT,sp)
      001C42 CD 17 A1         [ 4] 1408 	call prt_i16 
      001C45 AE 1C 50         [ 2] 1409 	ldw x,#CONST_COUNT 
      001C48 CD 09 5A         [ 4] 1410 	call puts 
      001C4B                       1411 	_drop VSIZE 
      001C4B 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C4D 90 85            [ 2] 1412 	popw y 
      001C4F 81               [ 4] 1413 	ret 
                                   1414 
      001C50 63 6F 6E 73 74 61 6E  1415 CONST_COUNT: .asciz "constants in EEPROM\n"
             74 73 20 69 6E 20 45
             45 50 52 4F 4D 0A 00
                                   1416 
                                   1417 
                                   1418 ;--------------------------
                                   1419 ; BASIC: EEFREE 
                                   1420 ; eeprom_free 
                                   1421 ; search end of data  
                                   1422 ; in EEPROM 
                                   1423 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1424 ;    none 
                                   1425 ; output:
                                   1426 ;    A:X     address free
                                   1427 ;-------------------------
      001C65                       1428 func_eefree:
      001C65 AE 40 00         [ 2] 1429 	ldw x,#EEPROM_BASE 
      001C68 35 08 00 0E      [ 1] 1430 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001C6C A3 47 F8         [ 2] 1431     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001C6F 24 17            [ 1] 1432 	jruge 8$ ; no free space 
      001C71 F6               [ 1] 1433 2$: ld a,(x)
      001C72 26 0C            [ 1] 1434 	jrne 3$
      001C74 5C               [ 1] 1435 	incw x 
      001C75 72 5A 00 0E      [ 1] 1436 	dec acc8 
      001C79 26 F6            [ 1] 1437 	jrne 2$
      001C7B 1D 00 08         [ 2] 1438 	subw x,#8 
      001C7E 20 09            [ 2] 1439 	jra 9$  
      001C80 F6               [ 1] 1440 3$: ld a,(x)
      001C81 5C               [ 1] 1441 	incw x
      001C82 4D               [ 1] 1442 	tnz a  
      001C83 26 FB            [ 1] 1443 	jrne 3$
      001C85 5A               [ 2] 1444 	decw x   
      001C86 20 E0            [ 2] 1445 	jra 1$ 
      001C88 5F               [ 1] 1446 8$: clrw x ; no free space 
      001C89 4F               [ 1] 1447 9$: clr a 
      001C8A CF 00 23         [ 2] 1448 	ldw free_eeprom,x ; save in system variable 
      001C8D 81               [ 4] 1449 	ret 
                                   1450 
                           000005  1451 CONST_REC_MIN_BYTES=5 
                                   1452 ;--------------------------
                                   1453 ; search constant name 
                                   1454 ; format of constant record  
                                   1455 ;   .byte record length 
                                   1456 ;         = strlen(name)+5 
                                   1457 ;   .asciz name (variable length)
                                   1458 ;   .int24 value (3 bytes )
                                   1459 ; a constant record use 7+ bytes
                                   1460 ; constants are saved in EEPROM  
                                   1461 ; input:
                                   1462 ;    X     *name
                                   1463 ; output:
                                   1464 ;    X     address|0
                                   1465 ; use:
                                   1466 ;   A,Y, acc16 
                                   1467 ;-------------------------
                           000001  1468 	NAMEPTR=1 ; target name pointer 
                           000003  1469 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1470 	RECLEN=5  ; record length of target
                           000005  1471 	VSIZE=5
      001C8E                       1472 search_const:
      001C8E 90 89            [ 2] 1473 	pushw y 
      001C90                       1474 	_vars VSIZE
      001C90 52 05            [ 2]    1     sub sp,#VSIZE 
      001C92 72 5F 00 0D      [ 1] 1475 	clr acc16 
      001C96 CD 13 89         [ 4] 1476 	call strlen 
      001C99 AB 05            [ 1] 1477 	add a,#CONST_REC_MIN_BYTES 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C9B 6B 05            [ 1] 1478 	ld (RECLEN,sp),a    
      001C9D 1F 01            [ 2] 1479 	ldw (NAMEPTR,sp),x
      001C9F 90 AE 40 00      [ 2] 1480 	ldw y,#EEPROM_BASE 
      001CA3 1E 01            [ 2] 1481 1$:	ldw x,(NAMEPTR,sp)
      001CA5 17 03            [ 2] 1482 	ldw (EEPTR,sp),y
      001CA7 90 C3 00 23      [ 2] 1483 	cpw y, free_eeprom 
      001CAB 24 1A            [ 1] 1484 	jruge 7$ ; no match found 
      001CAD 90 F6            [ 1] 1485 	ld a,(y)
      001CAF 11 05            [ 1] 1486 	cp a,(RECLEN,sp)
      001CB1 26 07            [ 1] 1487 	jrne 2$ 
      001CB3 90 5C            [ 1] 1488 	incw y 
      001CB5 CD 13 94         [ 4] 1489 	call strcmp
      001CB8 26 11            [ 1] 1490 	jrne 8$ ; match found 
      001CBA                       1491 2$: ; skip this one 	
      001CBA 16 03            [ 2] 1492 	ldW Y,(EEPTR,sp)
      001CBC 90 F6            [ 1] 1493 	ld a,(y)
      001CBE C7 00 0E         [ 1] 1494 	ld acc8,a 
      001CC1 72 B9 00 0D      [ 2] 1495 	addw y,acc16 
      001CC5 20 DC            [ 2] 1496 	jra 1$  
      001CC7                       1497 7$: ; no match found 
      001CC7 0F 03            [ 1] 1498 	clr (EEPTR,sp)
      001CC9 0F 04            [ 1] 1499 	clr (EEPTR+1,sp)
      001CCB                       1500 8$: ; match found 
      001CCB 1E 03            [ 2] 1501 	ldw x,(EEPTR,sp) ; record address 
      001CCD                       1502 9$:	_DROP VSIZE
      001CCD 5B 05            [ 2]    1     addw sp,#VSIZE 
      001CCF 90 85            [ 2] 1503 	 popw y 
      001CD1 81               [ 4] 1504 	 ret 
                                   1505 
                                   1506 
                                   1507 ;--------------------------------------------
                                   1508 ; BASIC: CONST name=value [, name=value]*
                                   1509 ; define constant(s) saved in EEPROM
                                   1510 ;--------------------------------------------
                           000001  1511 	CNAME=1 
                           000003  1512 	BUFPTR=3
                           000005  1513 	RECLEN=5
                           000005  1514 	VSIZE=5
      001CD2                       1515 cmd_const:
      001CD2 90 89            [ 2] 1516 	pushw y 
      001CD4                       1517 	_vars VSIZE 
      001CD4 52 05            [ 2]    1     sub sp,#VSIZE 
      001CD6 72 1F 00 21      [ 1] 1518 	bres flags,#FUPDATE 
      001CDA CD 17 4B         [ 4] 1519 	call next_token 
      001CDD A1 04            [ 1] 1520 	cp a,#TK_CHAR 
      001CDF 26 0E            [ 1] 1521 	jrne 1$
      001CE1 9F               [ 1] 1522 	ld a,xl
      001CE2 A4 DF            [ 1] 1523 	and a,#0xDF 
      001CE4 A1 55            [ 1] 1524 	cp a,#'U 
      001CE6 26 0B            [ 1] 1525 	jrne 2$
      001CE8 72 1E 00 21      [ 1] 1526 	bset flags,#FUPDATE 
      001CEC                       1527 0$:
      001CEC CD 17 4B         [ 4] 1528 	call next_token 
      001CEF                       1529 1$:	
      001CEF A1 03            [ 1] 1530 	cp a,#TK_LABEL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001CF1 27 03            [ 1] 1531 	jreq 3$
      001CF3                       1532 2$:	 
      001CF3 CC 16 45         [ 2] 1533 	jp syntax_error 
      001CF6                       1534 3$: 
      001CF6 1F 01            [ 2] 1535 	ldw (CNAME,sp),x ; *const_name
      001CF8 1E 01            [ 2] 1536 	ldw x,(CNAME,sp)
      001CFA CD 13 89         [ 4] 1537 	call strlen 
      001CFD AB 05            [ 1] 1538 	add a,#CONST_REC_MIN_BYTES 
      001CFF 6B 05            [ 1] 1539 	ld (RECLEN,sp),a 
                                   1540 ; copy name in buffer  
      001D01 16 01            [ 2] 1541 	ldw y,(CNAME,sp) 
      001D03 AE 16 68         [ 2] 1542 	ldw x,#tib  
      001D06 7B 05            [ 1] 1543 	ld a,(RECLEN,sp)
      001D08 F7               [ 1] 1544 	ld (x),a 
      001D09 5C               [ 1] 1545 	incw x  
      001D0A CD 13 A5         [ 4] 1546 	call strcpy 
      001D0D 1F 03            [ 2] 1547 	ldw (BUFPTR,sp),x 
                                   1548 ; x not updated by strcpy 
                                   1549 ; BUFPTR must be incremented 
                                   1550 ; to point after name 
      001D0F 7B 05            [ 1] 1551 	ld a,(RECLEN,sp)
      001D11 A0 04            [ 1] 1552 	sub a,#CONST_REC_MIN_BYTES-1
      001D13 1B 04            [ 1] 1553 	add a,(BUFPTR+1,sp) ; 
      001D15 6B 04            [ 1] 1554 	ld (BUFPTR+1,sp),a 
      001D17 24 02            [ 1] 1555 	jrnc 4$
      001D19 0C 03            [ 1] 1556     inc (BUFPTR,sp) 
      001D1B                       1557 4$:
      001D1B A6 32            [ 1] 1558 	ld a,#TK_EQUAL 
      001D1D CD 18 F3         [ 4] 1559 	call expect 
      001D20 CD 1A 37         [ 4] 1560 	call expression 
      001D23 A1 84            [ 1] 1561 	cp a,#TK_INTGR 
      001D25 27 03            [ 1] 1562 	jreq 5$ 
      001D27 CC 16 45         [ 2] 1563 	jp syntax_error 
      001D2A 16 03            [ 2] 1564 5$:	ldw y,(BUFPTR,sp)
      001D2C                       1565 	_xpop ; get value from xstack 
      001D2C 90 F6            [ 1]    1     ld a,(y)
      001D2E 93               [ 1]    2     ldw x,y 
      001D2F EE 01            [ 2]    3     ldw x,(1,x)
      001D31 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D35 90 F7            [ 1] 1566 	ld (y),a 
      001D37 90 EF 01         [ 2] 1567 	ldw (1,y),x 
                                   1568 ; record completed in buffer 
                                   1569 ; check if constant already exist 
                                   1570 ; if so update value if \U option set 
      001D3A 72 5F 00 17      [ 1] 1571 	clr farptr 
      001D3E 1E 01            [ 2] 1572 	ldw x,(CNAME,sp)
      001D40 CD 1C 8E         [ 4] 1573 	call search_const 
      001D43 5D               [ 2] 1574 	tnzw x 
      001D44 27 07            [ 1] 1575 	jreq 6$ ; new constant  
      001D46 72 0F 00 21 1B   [ 2] 1576 	btjf flags,#FUPDATE,8$
      001D4B 20 03            [ 2] 1577 	jra 7$	
      001D4D                       1578 6$:	
      001D4D CE 00 23         [ 2] 1579 	ldw x,free_eeprom  
      001D50                       1580 7$:	
      001D50 CF 00 18         [ 2] 1581 	ldw farptr+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001D53 AE 16 68         [ 2] 1582 	ldw x,#tib 
      001D56 7B 05            [ 1] 1583 	ld a,(RECLEN,sp)
      001D58 CD 08 3E         [ 4] 1584 	call write_nbytes
                                   1585 ; update free_eeprom 
      001D5B 5F               [ 1] 1586 	clrw x 
      001D5C 7B 05            [ 1] 1587 	ld a,(RECLEN,sp)
      001D5E 97               [ 1] 1588 	ld xl,a 
      001D5F 72 BB 00 23      [ 2] 1589 	addw x,free_eeprom 
      001D63 CF 00 23         [ 2] 1590 	ldw free_eeprom,x
      001D66                       1591 8$:
      001D66 CD 17 4B         [ 4] 1592 	call next_token 
      001D69 A1 08            [ 1] 1593 	cp a,#TK_COMMA 
      001D6B 26 03            [ 1] 1594 	jrne 9$
      001D6D CC 1C EC         [ 2] 1595 	jp 0$ 
      001D70                       1596 9$: 
      001D70                       1597 	_unget_token    
      001D70 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001D75                       1598 10$: 
      001D75                       1599 	_drop VSIZE 
      001D75 5B 05            [ 2]    1     addw sp,#VSIZE 
      001D77 90 85            [ 2] 1600 	popw y 
      001D79 81               [ 4] 1601 	ret 
                                   1602 
                                   1603 
                                   1604 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1605 ; return program size 
                                   1606 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001D7A                       1607 prog_size:
      001D7A CE 00 1C         [ 2] 1608 	ldw x,txtend 
      001D7D 72 B0 00 1A      [ 2] 1609 	subw x,txtbgn 
      001D81 81               [ 4] 1610 	ret 
                                   1611 
                                   1612 ;----------------------------
                                   1613 ; print program information 
                                   1614 ;---------------------------
      001D82                       1615 program_info: 
      001D82 AE 1D C1         [ 2] 1616 	ldw x,#PROG_ADDR 
      001D85 CD 09 5A         [ 4] 1617 	call puts 
      001D88 CE 00 1A         [ 2] 1618 	ldw x,txtbgn 
      001D8B 35 10 00 0A      [ 1] 1619 	mov base,#16 
      001D8F CD 17 A1         [ 4] 1620 	call prt_i16
      001D92 35 0A 00 0A      [ 1] 1621 	mov base,#10  
      001D96 AE 1D D3         [ 2] 1622 	ldw x,#PROG_SIZE
      001D99 CD 09 5A         [ 4] 1623 	call puts 
      001D9C CD 1D 7A         [ 4] 1624 	call prog_size 
      001D9F CD 17 A1         [ 4] 1625 	call prt_i16 
      001DA2 AE 1D E4         [ 2] 1626 	ldw x,#STR_BYTES 
      001DA5 CD 09 5A         [ 4] 1627 	call puts
      001DA8 CE 00 1A         [ 2] 1628 	ldw x,txtbgn
      001DAB A3 35 84         [ 2] 1629 	cpw x,#app 
      001DAE 25 05            [ 1] 1630 	jrult 2$
      001DB0 AE 1D EB         [ 2] 1631 	ldw x,#FLASH_MEM 
      001DB3 20 03            [ 2] 1632 	jra 3$
      001DB5 AE 1D FC         [ 2] 1633 2$: ldw x,#RAM_MEM 	 
      001DB8 CD 09 5A         [ 4] 1634 3$:	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001DBB A6 0D            [ 1] 1635 	ld a,#CR 
      001DBD CD 08 FD         [ 4] 1636 	call putc
      001DC0 81               [ 4] 1637 	ret 
                                   1638 
      001DC1 70 72 6F 67 72 61 6D  1639 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001DD3 2C 20 70 72 6F 67 72  1640 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001DE4 20 62 79 74 65 73 00  1641 STR_BYTES: .asciz " bytes" 
      001DEB 20 69 6E 20 46 4C 41  1642 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001DFC 20 69 6E 20 52 41 4D  1643 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1644 
                                   1645 
                                   1646 ;----------------------------
                                   1647 ; BASIC: LIST [[start][,end]]
                                   1648 ; list program lines 
                                   1649 ; form start to end 
                                   1650 ; if empty argument list then 
                                   1651 ; list all.
                                   1652 ;----------------------------
                           000001  1653 	FIRST=1
                           000003  1654 	LAST=3 
                           000005  1655 	LN_PTR=5
                           000006  1656 	VSIZE=6 
      001E0B                       1657 list:
      001E0B 72 01 00 21 05   [ 2] 1658 	btjf flags,#FRUN,0$
      001E10 A6 07            [ 1] 1659 	ld a,#ERR_CMD_ONLY
      001E12 CC 16 47         [ 2] 1660 	jp tb_error
      001E15                       1661 0$:	 
      001E15 CD 17 4B         [ 4] 1662 	call next_token 
      001E18 A1 04            [ 1] 1663 	cp a,#TK_CHAR 
      001E1A 26 10            [ 1] 1664 	jrne 2$
      001E1C CD 17 9B         [ 4] 1665 	call get_char 
      001E1F A4 DF            [ 1] 1666 	and a,#0xDF 
      001E21 A1 43            [ 1] 1667 	cp a,#'C 
      001E23 26 04            [ 1] 1668 	jrne 1$
      001E25 CD 1B FF         [ 4] 1669 	call list_const
      001E28 81               [ 4] 1670 	ret 
      001E29 CC 16 45         [ 2] 1671 1$: jp syntax_error 
      001E2C                       1672 2$:	_unget_token 
      001E2C 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E31 CD 1D 7A         [ 4] 1673 	call prog_size 
      001E34 22 01            [ 1] 1674 	jrugt 3$
      001E36 81               [ 4] 1675 	ret 
      001E37                       1676 3$: _vars VSIZE
      001E37 52 06            [ 2]    1     sub sp,#VSIZE 
      001E39 CE 00 1A         [ 2] 1677 	ldw x,txtbgn 
      001E3C 1F 05            [ 2] 1678 	ldw (LN_PTR,sp),x 
      001E3E FE               [ 2] 1679 	ldw x,(x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001E3F 1F 01            [ 2] 1680 	ldw (FIRST,sp),x ; list from first line 
      001E41 AE 7F FF         [ 2] 1681 	ldw x,#MAX_LINENO ; biggest line number 
      001E44 1F 03            [ 2] 1682 	ldw (LAST,sp),x 
      001E46 CD 19 05         [ 4] 1683 	call arg_list
      001E49 4D               [ 1] 1684 	tnz a
      001E4A 27 31            [ 1] 1685 	jreq list_loop 
      001E4C A1 02            [ 1] 1686 	cp a,#2 
      001E4E 27 07            [ 1] 1687 	jreq 4$
      001E50 A1 01            [ 1] 1688 	cp a,#1 
      001E52 27 06            [ 1] 1689 	jreq first_line 
      001E54 CC 16 45         [ 2] 1690 	jp syntax_error 
      001E57 85               [ 2] 1691 4$:	popw x 
      001E58 1F 05            [ 2] 1692 	ldw (LAST+2,sp),x 
      001E5A                       1693 first_line:
      001E5A 85               [ 2] 1694 	popw x
      001E5B 1F 01            [ 2] 1695 	ldw (FIRST,sp),x 
      001E5D                       1696 lines_skip:
      001E5D CE 00 1A         [ 2] 1697 	ldw x,txtbgn
      001E60 1F 05            [ 2] 1698 2$:	ldw (LN_PTR,sp),x 
      001E62 C3 00 1C         [ 2] 1699 	cpw x,txtend 
      001E65 2A 38            [ 1] 1700 	jrpl list_exit 
      001E67 FE               [ 2] 1701 	ldw x,(x) ;line# 
      001E68 13 01            [ 2] 1702 	cpw x,(FIRST,sp)
      001E6A 2A 11            [ 1] 1703 	jrpl list_loop 
      001E6C 1E 05            [ 2] 1704 	ldw x,(LN_PTR,sp) 
      001E6E E6 02            [ 1] 1705 	ld a,(2,x)
      001E70 C7 00 0E         [ 1] 1706 	ld acc8,a 
      001E73 72 5F 00 0D      [ 1] 1707 	clr acc16 
      001E77 72 BB 00 0D      [ 2] 1708 	addw x,acc16
      001E7B 20 E3            [ 2] 1709 	jra 2$ 
                                   1710 ; print loop
      001E7D                       1711 list_loop:
      001E7D 1E 05            [ 2] 1712 	ldw x,(LN_PTR,sp)
      001E7F E6 02            [ 1] 1713 	ld a,(2,x) 
      001E81 CD 1E F4         [ 4] 1714 	call prt_basic_line
      001E84 1E 05            [ 2] 1715 	ldw x,(LN_PTR,sp)
      001E86 E6 02            [ 1] 1716 	ld a,(2,x)
      001E88 C7 00 0E         [ 1] 1717 	ld acc8,a 
      001E8B 72 5F 00 0D      [ 1] 1718 	clr acc16 
      001E8F 72 BB 00 0D      [ 2] 1719 	addw x,acc16
      001E93 C3 00 1C         [ 2] 1720 	cpw x,txtend 
      001E96 2A 07            [ 1] 1721 	jrpl list_exit
      001E98 1F 05            [ 2] 1722 	ldw (LN_PTR,sp),x
      001E9A FE               [ 2] 1723 	ldw x,(x)
      001E9B 13 03            [ 2] 1724 	cpw x,(LAST,sp)  
      001E9D 2F DE            [ 1] 1725 	jrslt list_loop
      001E9F                       1726 list_exit:
      001E9F 55 00 03 00 01   [ 1] 1727 	mov in,count 
      001EA4 AE 16 B8         [ 2] 1728 	ldw x,#pad 
      001EA7 CF 00 04         [ 2] 1729 	ldw basicptr,x 
      001EAA                       1730 	_drop VSIZE 
      001EAA 5B 06            [ 2]    1     addw sp,#VSIZE 
      001EAC CD 1D 82         [ 4] 1731 	call program_info 
      001EAF 81               [ 4] 1732 	ret
                                   1733 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                   1734 
                                   1735 ;--------------------------
                                   1736 ; BASIC: EDIT 
                                   1737 ;  copy program in FLASH 
                                   1738 ;  to RAM for edition 
                                   1739 ;-------------------------
      001EB0                       1740 edit:
      001EB0 CD 26 B3         [ 4] 1741 	call qsign 
      001EB3 27 07            [ 1] 1742 	jreq 1$ 
      001EB5 AE 1E DD         [ 2] 1743 	ldw x,#NOT_SAVED 
      001EB8 CD 09 5A         [ 4] 1744 	call puts 
      001EBB 81               [ 4] 1745 	ret 
      001EBC                       1746 1$: 
      001EBC 90 AE 35 80      [ 2] 1747 	ldw y,#app_sign ; source address 
      001EC0 CE 35 82         [ 2] 1748     ldw x,app_size  
      001EC3 1C 00 04         [ 2] 1749 	addw x,#4 
      001EC6 CF 00 0D         [ 2] 1750 	ldw acc16,x  ; bytes to copy 
      001EC9 AE 00 7C         [ 2] 1751 	ldw x,#rsign ; destination address 
      001ECC CD 13 B5         [ 4] 1752 	call move  
      001ECF AE 00 80         [ 2] 1753 	ldw x,#free_ram 
      001ED2 CF 00 1A         [ 2] 1754 	ldw txtbgn,x 
      001ED5 72 BB 00 7E      [ 2] 1755 	addw x,rsize  
      001ED9 CF 00 1C         [ 2] 1756 	ldw txtend,x 
      001EDC 81               [ 4] 1757 	ret 
                                   1758 
      001EDD 4E 6F 20 61 70 70 6C  1759 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1760 
                                   1761 
                                   1762 ;--------------------------
                                   1763 ; decompile line from token list
                                   1764 ; and print it. 
                                   1765 ; input:
                                   1766 ;   A       stop at this position 
                                   1767 ;   X 		pointer at line
                                   1768 ; output:
                                   1769 ;   none 
                                   1770 ;--------------------------	
      001EF4                       1771 prt_basic_line:
      001EF4 90 89            [ 2] 1772 	pushw y 
      001EF6 C7 00 03         [ 1] 1773 	ld count,a 
      001EF9 E6 02            [ 1] 1774 	ld a,(2,x)
      001EFB C1 00 03         [ 1] 1775 	cp a,count 
      001EFE 2A 03            [ 1] 1776 	jrpl 1$ 
      001F00 C7 00 03         [ 1] 1777 	ld count,a 
      001F03 CF 00 04         [ 2] 1778 1$:	ldw basicptr,x 
      001F06 90 AE 16 68      [ 2] 1779 	ldw y,#tib  
      001F0A CD 11 B0         [ 4] 1780 	call decompile 
      001F0D CD 09 5A         [ 4] 1781 	call puts 
      001F10 A6 0D            [ 1] 1782 	ld a,#CR 
      001F12 CD 08 FD         [ 4] 1783 	call putc 
      001F15 90 85            [ 2] 1784 	popw y 
      001F17 81               [ 4] 1785 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1786 
                                   1787 
                                   1788 
                                   1789 ;---------------------------------
                                   1790 ; BASIC: PRINT|? arg_list 
                                   1791 ; print values from argument list
                                   1792 ;----------------------------------
                           000001  1793 	CCOMMA=1
                           000001  1794 	VSIZE=1
      001F18                       1795 print:
      001F18                       1796 	_vars VSIZE 
      001F18 52 01            [ 2]    1     sub sp,#VSIZE 
      001F1A                       1797 reset_comma:
      001F1A 0F 01            [ 1] 1798 	clr (CCOMMA,sp)
      001F1C                       1799 prt_loop:
      001F1C CD 17 4B         [ 4] 1800 	call next_token
      001F1F A1 02            [ 1] 1801 	cp a,#CMD_END 
      001F21 25 5E            [ 1] 1802 	jrult print_exit ; colon or end of line 
      001F23 A1 02            [ 1] 1803 	cp a,#TK_QSTR
      001F25 27 12            [ 1] 1804 	jreq 1$
      001F27 A1 04            [ 1] 1805 	cp a,#TK_CHAR 
      001F29 27 1B            [ 1] 1806 	jreq 2$ 
      001F2B A1 82            [ 1] 1807 	cp a,#TK_CFUNC 
      001F2D 27 1F            [ 1] 1808 	jreq 3$
      001F2F A1 08            [ 1] 1809 	cp a,#TK_COMMA 
      001F31 27 24            [ 1] 1810 	jreq 4$
      001F33 A1 09            [ 1] 1811 	cp a,#TK_SHARP 
      001F35 27 24            [ 1] 1812 	jreq 5$
      001F37 20 37            [ 2] 1813 	jra 7$ 
      001F39                       1814 1$:	; print string 
      001F39 CD 09 5A         [ 4] 1815 	call puts
      001F3C 5C               [ 1] 1816 	incw x
      001F3D 72 B0 00 04      [ 2] 1817 	subw x,basicptr 
      001F41 CF 00 00         [ 2] 1818 	ldw in.w,x  
      001F44 20 D4            [ 2] 1819 	jra reset_comma
      001F46                       1820 2$:	; print character 
      001F46 CD 17 9B         [ 4] 1821 	call get_char 
      001F49 CD 08 FD         [ 4] 1822 	call putc 
      001F4C 20 CC            [ 2] 1823 	jra reset_comma 
      001F4E                       1824 3$: ; print character function value  	
      001F4E CD 17 65         [ 4] 1825 	call get_code_addr 
      001F51 FD               [ 4] 1826 	call (x)
      001F52 CD 08 FD         [ 4] 1827 	call putc
      001F55 20 C3            [ 2] 1828 	jra reset_comma 
      001F57                       1829 4$: ; set comma state 
      001F57 03 01            [ 1] 1830 	cpl (CCOMMA,sp)
      001F59 20 C1            [ 2] 1831 	jra prt_loop   
      001F5B                       1832 5$: ; # character must be followed by an integer   
      001F5B CD 17 4B         [ 4] 1833 	call next_token
      001F5E A1 84            [ 1] 1834 	cp a,#TK_INTGR 
      001F60 27 03            [ 1] 1835 	jreq 6$
      001F62 CC 16 45         [ 2] 1836 	jp syntax_error 
      001F65                       1837 6$: ; set tab width
      001F65 CD 17 8B         [ 4] 1838 	call get_int24 
      001F68 9F               [ 1] 1839 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001F69 A4 0F            [ 1] 1840 	and a,#15 
      001F6B C7 00 22         [ 1] 1841 	ld tab_width,a 
      001F6E 20 AA            [ 2] 1842 	jra reset_comma 
      001F70                       1843 7$:	
      001F70                       1844 	_unget_token 
      001F70 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F75 CD 1A 37         [ 4] 1845 	call expression  
      001F78 A1 84            [ 1] 1846 	cp a,#TK_INTGR 
      001F7A 26 05            [ 1] 1847 	jrne print_exit 
      001F7C CD 17 BF         [ 4] 1848     call print_top
      001F7F 20 99            [ 2] 1849 	jra reset_comma 
      001F81                       1850 print_exit:
      001F81 0D 01            [ 1] 1851 	tnz (CCOMMA,sp)
      001F83 26 05            [ 1] 1852 	jrne 9$
      001F85 A6 0D            [ 1] 1853 	ld a,#CR 
      001F87 CD 08 FD         [ 4] 1854     call putc 
      001F8A                       1855 9$:	_drop VSIZE 
      001F8A 5B 01            [ 2]    1     addw sp,#VSIZE 
      001F8C 81               [ 4] 1856 	ret 
                                   1857 
                                   1858 ;----------------------
                                   1859 ; 'save_context' and
                                   1860 ; 'rest_context' must be 
                                   1861 ; called at the same 
                                   1862 ; call stack depth 
                                   1863 ; i.e. SP must have the 
                                   1864 ; save value at  
                                   1865 ; entry point of both 
                                   1866 ; routine. 
                                   1867 ;---------------------
                           000004  1868 	CTXT_SIZE=4 ; size of saved data 
                                   1869 ;--------------------
                                   1870 ; save current BASIC
                                   1871 ; interpreter context 
                                   1872 ; on stack 
                                   1873 ;--------------------
      001F8D                       1874 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001F8D                       1875 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001F8D                       1876 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001F8D                       1877 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001F8D                       1878 save_context:
      001F8D CE 00 04         [ 2] 1879 	ldw x,basicptr 
      001F90 1F 03            [ 2] 1880 	ldw (BPTR,sp),x
      001F92 C6 00 01         [ 1] 1881 	ld a,in 
      001F95 6B 05            [ 1] 1882 	ld (IN,sp),a
      001F97 C6 00 03         [ 1] 1883 	ld a,count 
      001F9A 6B 06            [ 1] 1884 	ld (CNT,sp),a  
      001F9C 81               [ 4] 1885 	ret
                                   1886 
                                   1887 ;-----------------------
                                   1888 ; restore previously saved 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   1889 ; BASIC interpreter context 
                                   1890 ; from stack 
                                   1891 ;-------------------------
      001F9D                       1892 rest_context:
      001F9D 1E 03            [ 2] 1893 	ldw x,(BPTR,sp)
      001F9F CF 00 04         [ 2] 1894 	ldw basicptr,x 
      001FA2 7B 05            [ 1] 1895 	ld a,(IN,sp)
      001FA4 C7 00 01         [ 1] 1896 	ld in,a
      001FA7 7B 06            [ 1] 1897 	ld a,(CNT,sp)
      001FA9 C7 00 03         [ 1] 1898 	ld count,a  
      001FAC 81               [ 4] 1899 	ret
                                   1900 
                                   1901 
                                   1902 
                                   1903 ;------------------------------------------
                                   1904 ; BASIC: INPUT [string]var[,[string]var]
                                   1905 ; input value in variables 
                                   1906 ; [string] optionally can be used as prompt 
                                   1907 ;-----------------------------------------
                           000001  1908 	CX_BPTR=1
                           000003  1909 	CX_IN=3
                           000004  1910 	CX_CNT=4
                           000005  1911 	SKIP=5
                           000005  1912 	VSIZE=5
      001FAD                       1913 input_var:
      001FAD 90 89            [ 2] 1914 	pushw y 
      001FAF                       1915 	_vars VSIZE 
      001FAF 52 05            [ 2]    1     sub sp,#VSIZE 
      001FB1                       1916 input_loop:
      001FB1 0F 05            [ 1] 1917 	clr (SKIP,sp)
      001FB3 CD 17 4B         [ 4] 1918 	call next_token 
      001FB6 A1 02            [ 1] 1919 	cp a,#TK_QSTR 
      001FB8 26 10            [ 1] 1920 	jrne 1$ 
      001FBA CD 09 5A         [ 4] 1921 	call puts 
      001FBD 5C               [ 1] 1922 	incw x 
      001FBE 72 B0 00 04      [ 2] 1923 	subw x,basicptr 
      001FC2 CF 00 00         [ 2] 1924 	ldw in.w,x 
      001FC5 03 05            [ 1] 1925 	cpl (SKIP,sp)
      001FC7 CD 17 4B         [ 4] 1926 	call next_token 
      001FCA A1 85            [ 1] 1927 1$: cp a,#TK_VAR  
      001FCC 27 03            [ 1] 1928 	jreq 2$ 
      001FCE CC 16 45         [ 2] 1929 	jp syntax_error
      001FD1 CD 17 81         [ 4] 1930 2$:	call get_addr
      001FD4 CF 00 18         [ 2] 1931 	ldw ptr16,x 
      001FD7 0D 05            [ 1] 1932 	tnz (SKIP,sp)
      001FD9 26 06            [ 1] 1933 	jrne 21$ 
      001FDB CD 11 85         [ 4] 1934 	call var_name 
      001FDE CD 08 FD         [ 4] 1935 	call putc   
      001FE1                       1936 21$:
      001FE1 A6 3A            [ 1] 1937 	ld a,#':
      001FE3 CD 08 FD         [ 4] 1938 	call putc 
      001FE6 CD 1F 8D         [ 4] 1939 	call save_context 
      001FE9 72 5F 00 03      [ 1] 1940 	clr count  
      001FED CD 0A 5F         [ 4] 1941 	call readln 
      001FF0 AE 16 68         [ 2] 1942 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001FF3 3B 00 03         [ 1] 1943 	push count
      001FF6 4B 00            [ 1] 1944 	push #0 
      001FF8 72 FB 01         [ 2] 1945 	addw x,(1,sp)
      001FFB 5C               [ 1] 1946 	incw x 
      001FFC                       1947 	_drop 2 
      001FFC 5B 02            [ 2]    1     addw sp,#2 
      001FFE 72 5F 00 01      [ 1] 1948 	clr in 
      002002 CD 0E C7         [ 4] 1949 	call get_token
      002005 A1 84            [ 1] 1950 	cp a,#TK_INTGR
      002007 27 12            [ 1] 1951 	jreq 3$ 
      002009 A1 11            [ 1] 1952 	cp a,#TK_MINUS
      00200B CD 0E C7         [ 4] 1953 	call get_token 
      00200E A1 84            [ 1] 1954 	cp a,#TK_INTGR 
      002010 27 06            [ 1] 1955 	jreq 22$
      002012 CD 1F 9D         [ 4] 1956 	call rest_context 
      002015 CC 16 45         [ 2] 1957 	jp syntax_error
      002018                       1958 22$:
      002018 CD 01 D1         [ 4] 1959 	call neg_acc24	
      00201B                       1960 3$: 
      00201B C6 00 0C         [ 1] 1961 	ld a,acc24 
      00201E CE 00 0D         [ 2] 1962 	ldw x,acc16 
      002021 72 C7 00 18      [ 4] 1963 	ld [ptr16],a
      002025 72 5C 00 19      [ 1] 1964 	inc ptr8  
      002029 72 CF 00 18      [ 5] 1965 	ldw [ptr16],x 
      00202D CD 1F 9D         [ 4] 1966 	call rest_context
      002030 CD 17 4B         [ 4] 1967 	call next_token 
      002033 A1 08            [ 1] 1968 	cp a,#TK_COMMA
      002035 26 03            [ 1] 1969 	jrne 4$ 
      002037 CC 1F B1         [ 2] 1970 	jp input_loop
      00203A                       1971 4$:
      00203A A1 00            [ 1] 1972 	cp a,#TK_NONE 
      00203C 27 07            [ 1] 1973 	jreq input_exit  
      00203E A1 0A            [ 1] 1974 	cp a,#TK_COLON 
      002040 27 03            [ 1] 1975     jreq input_exit 
      002042 CC 16 45         [ 2] 1976 	jp syntax_error 
      002045                       1977 input_exit:
      002045                       1978 	_drop VSIZE 
      002045 5B 05            [ 2]    1     addw sp,#VSIZE 
      002047 90 85            [ 2] 1979 	popw y 
      002049 81               [ 4] 1980 	ret 
                                   1981 
                                   1982 
                                   1983 ;---------------------
                                   1984 ; BASIC: REM | ' 
                                   1985 ; skip comment to end of line 
                                   1986 ;---------------------- 
      00204A                       1987 remark::
      00204A 55 00 03 00 01   [ 1] 1988 	mov in,count 
      00204F 81               [ 4] 1989  	ret 
                                   1990 
                                   1991 
                                   1992 ;---------------------
                                   1993 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   1994 ; read in loop 'addr'  
                                   1995 ; apply & 'mask' to value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   1996 ; loop while result==0.  
                                   1997 ; 'xor_mask' is used to 
                                   1998 ; invert the wait logic.
                                   1999 ; i.e. loop while not 0.
                                   2000 ;---------------------
                           000001  2001 	XMASK=1 
                           000002  2002 	MASK=2
                           000003  2003 	ADDR=3
                           000004  2004 	VSIZE=4
      002050                       2005 wait: 
      002050                       2006 	_vars VSIZE
      002050 52 04            [ 2]    1     sub sp,#VSIZE 
      002052 0F 01            [ 1] 2007 	clr (XMASK,sp) 
      002054 CD 19 05         [ 4] 2008 	call arg_list 
      002057 A1 02            [ 1] 2009 	cp a,#2
      002059 24 03            [ 1] 2010 	jruge 0$
      00205B CC 16 45         [ 2] 2011 	jp syntax_error 
      00205E A1 03            [ 1] 2012 0$:	cp a,#3
      002060 25 0C            [ 1] 2013 	jrult 1$
      002062                       2014 	_xpop  ; xor mask 
      002062 90 F6            [ 1]    1     ld a,(y)
      002064 93               [ 1]    2     ldw x,y 
      002065 EE 01            [ 2]    3     ldw x,(1,x)
      002067 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00206B 9F               [ 1] 2015 	ld a,xl 
      00206C 6B 01            [ 1] 2016 	ld (XMASK,sp),a 
      00206E                       2017 1$: _xpop ; mask
      00206E 90 F6            [ 1]    1     ld a,(y)
      002070 93               [ 1]    2     ldw x,y 
      002071 EE 01            [ 2]    3     ldw x,(1,x)
      002073 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002077 9F               [ 1] 2018     ld a,xl  
      002078 6B 02            [ 1] 2019 	ld (MASK,sp),a 
      00207A                       2020 	_xpop ; address 
      00207A 90 F6            [ 1]    1     ld a,(y)
      00207C 93               [ 1]    2     ldw x,y 
      00207D EE 01            [ 2]    3     ldw x,(1,x)
      00207F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002083 F6               [ 1] 2021 2$:	ld a,(x)
      002084 14 02            [ 1] 2022 	and a,(MASK,sp)
      002086 18 01            [ 1] 2023 	xor a,(XMASK,sp)
      002088 27 F9            [ 1] 2024 	jreq 2$ 
      00208A                       2025 	_drop VSIZE 
      00208A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00208C 81               [ 4] 2026 	ret 
                                   2027 
                                   2028 ;---------------------
                                   2029 ; BASIC: BSET addr,mask
                                   2030 ; set bits at 'addr' corresponding 
                                   2031 ; to those of 'mask' that are at 1.
                                   2032 ; arguments:
                                   2033 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2034 ;   mask        mask|addr
                                   2035 ; output:
                                   2036 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   2037 ;--------------------------
      00208D                       2038 bit_set:
      00208D CD 19 05         [ 4] 2039 	call arg_list 
      002090 A1 02            [ 1] 2040 	cp a,#2	 
      002092 27 03            [ 1] 2041 	jreq 1$ 
      002094 CC 16 45         [ 2] 2042 	jp syntax_error
      002097                       2043 1$: 
      002097                       2044 	_xpop ; mask 
      002097 90 F6            [ 1]    1     ld a,(y)
      002099 93               [ 1]    2     ldw x,y 
      00209A EE 01            [ 2]    3     ldw x,(1,x)
      00209C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020A0 9F               [ 1] 2045 	ld a,xl
      0020A1 88               [ 1] 2046 	push a  
      0020A2                       2047 	_xpop ; addr  
      0020A2 90 F6            [ 1]    1     ld a,(y)
      0020A4 93               [ 1]    2     ldw x,y 
      0020A5 EE 01            [ 2]    3     ldw x,(1,x)
      0020A7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020AB 84               [ 1] 2048 	pop a 
      0020AC FA               [ 1] 2049 	or a,(x)
      0020AD F7               [ 1] 2050 	ld (x),a
      0020AE 81               [ 4] 2051 	ret 
                                   2052 
                                   2053 ;---------------------
                                   2054 ; BASIC: BRES addr,mask
                                   2055 ; reset bits at 'addr' corresponding 
                                   2056 ; to those of 'mask' that are at 1.
                                   2057 ; arguments:
                                   2058 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2059 ;   mask	    ~mask&*addr  
                                   2060 ; output:
                                   2061 ;	none 
                                   2062 ;--------------------------
      0020AF                       2063 bit_reset:
      0020AF CD 19 05         [ 4] 2064 	call arg_list 
      0020B2 A1 02            [ 1] 2065 	cp a,#2  
      0020B4 27 03            [ 1] 2066 	jreq 1$ 
      0020B6 CC 16 45         [ 2] 2067 	jp syntax_error
      0020B9                       2068 1$: 
      0020B9                       2069 	_xpop ; mask 
      0020B9 90 F6            [ 1]    1     ld a,(y)
      0020BB 93               [ 1]    2     ldw x,y 
      0020BC EE 01            [ 2]    3     ldw x,(1,x)
      0020BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020C2 9F               [ 1] 2070 	ld a,xl 
      0020C3 43               [ 1] 2071 	cpl a
      0020C4 88               [ 1] 2072 	push a  
      0020C5                       2073 	_xpop ; addr  
      0020C5 90 F6            [ 1]    1     ld a,(y)
      0020C7 93               [ 1]    2     ldw x,y 
      0020C8 EE 01            [ 2]    3     ldw x,(1,x)
      0020CA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020CE 84               [ 1] 2074 	pop a 
      0020CF F4               [ 1] 2075 	and a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0020D0 F7               [ 1] 2076 	ld (x),a 
      0020D1 81               [ 4] 2077 	ret 
                                   2078 
                                   2079 ;---------------------
                                   2080 ; BASIC: BTOGL addr,mask
                                   2081 ; toggle bits at 'addr' corresponding 
                                   2082 ; to those of 'mask' that are at 1.
                                   2083 ; arguments:
                                   2084 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2085 ;   mask	    mask^*addr  
                                   2086 ; output:
                                   2087 ;	none 
                                   2088 ;--------------------------
      0020D2                       2089 bit_toggle:
      0020D2 CD 19 05         [ 4] 2090 	call arg_list 
      0020D5 A1 02            [ 1] 2091 	cp a,#2 
      0020D7 27 03            [ 1] 2092 	jreq 1$ 
      0020D9 CC 16 45         [ 2] 2093 	jp syntax_error
      0020DC                       2094 1$: _xpop ; mask 
      0020DC 90 F6            [ 1]    1     ld a,(y)
      0020DE 93               [ 1]    2     ldw x,y 
      0020DF EE 01            [ 2]    3     ldw x,(1,x)
      0020E1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020E5 9F               [ 1] 2095 	ld a,xl
      0020E6 88               [ 1] 2096 	push a 
      0020E7                       2097 	_xpop  ; addr  
      0020E7 90 F6            [ 1]    1     ld a,(y)
      0020E9 93               [ 1]    2     ldw x,y 
      0020EA EE 01            [ 2]    3     ldw x,(1,x)
      0020EC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020F0 84               [ 1] 2098 	pop a 
      0020F1 F8               [ 1] 2099 	xor a,(x)
      0020F2 F7               [ 1] 2100 	ld (x),a 
      0020F3 81               [ 4] 2101 	ret 
                                   2102 
                                   2103 
                                   2104 ;---------------------
                                   2105 ; BASIC: BTEST(addr,bit)
                                   2106 ; return bit value at 'addr' 
                                   2107 ; bit is in range {0..7}.
                                   2108 ; arguments:
                                   2109 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2110 ;   bit 	    bit position {0..7}  
                                   2111 ; output:
                                   2112 ;	A:X       bit value  
                                   2113 ;--------------------------
      0020F4                       2114 bit_test:
      0020F4 CD 19 00         [ 4] 2115 	call func_args 
      0020F7 A1 02            [ 1] 2116 	cp a,#2
      0020F9 27 03            [ 1] 2117 	jreq 0$
      0020FB CC 16 45         [ 2] 2118 	jp syntax_error
      0020FE                       2119 0$:	
      0020FE                       2120 	_xpop 
      0020FE 90 F6            [ 1]    1     ld a,(y)
      002100 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002101 EE 01            [ 2]    3     ldw x,(1,x)
      002103 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002107 9F               [ 1] 2121 	ld a,xl 
      002108 A4 07            [ 1] 2122 	and a,#7
      00210A 88               [ 1] 2123 	push a   
      00210B A6 01            [ 1] 2124 	ld a,#1 
      00210D 0D 01            [ 1] 2125 1$: tnz (1,sp)
      00210F 27 05            [ 1] 2126 	jreq 2$
      002111 48               [ 1] 2127 	sll a 
      002112 0A 01            [ 1] 2128 	dec (1,sp)
      002114 20 F7            [ 2] 2129 	jra 1$
      002116 6B 01            [ 1] 2130 2$: ld (1,sp),a  
      002118                       2131 	_xpop ; address  
      002118 90 F6            [ 1]    1     ld a,(y)
      00211A 93               [ 1]    2     ldw x,y 
      00211B EE 01            [ 2]    3     ldw x,(1,x)
      00211D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002121 84               [ 1] 2132 	pop a 
      002122 F4               [ 1] 2133 	and a,(x)
      002123 27 02            [ 1] 2134 	jreq 3$
      002125 A6 01            [ 1] 2135 	ld a,#1 
      002127 5F               [ 1] 2136 3$:	clrw x 
      002128 97               [ 1] 2137 	ld xl,a
      002129 4F               [ 1] 2138 	clr a  
      00212A 81               [ 4] 2139 	ret
                                   2140 
                                   2141 ;--------------------
                                   2142 ; BASIC: POKE addr,byte
                                   2143 ; put a byte at addr 
                                   2144 ;--------------------
      00212B                       2145 poke:
      00212B CD 19 05         [ 4] 2146 	call arg_list 
      00212E A1 02            [ 1] 2147 	cp a,#2
      002130 27 03            [ 1] 2148 	jreq 1$
      002132 CC 16 45         [ 2] 2149 	jp syntax_error
      002135                       2150 1$:	
      002135                       2151 	_xpop ; byte   
      002135 90 F6            [ 1]    1     ld a,(y)
      002137 93               [ 1]    2     ldw x,y 
      002138 EE 01            [ 2]    3     ldw x,(1,x)
      00213A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00213E 9F               [ 1] 2152     ld a,xl 
      00213F 88               [ 1] 2153 	push a 
      002140                       2154 	_xpop ; address 
      002140 90 F6            [ 1]    1     ld a,(y)
      002142 93               [ 1]    2     ldw x,y 
      002143 EE 01            [ 2]    3     ldw x,(1,x)
      002145 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002149 84               [ 1] 2155 	pop a 
      00214A F7               [ 1] 2156 	ld (x),a 
      00214B 81               [ 4] 2157 	ret 
                                   2158 
                                   2159 ;-----------------------
                                   2160 ; BASIC: PEEK(addr)
                                   2161 ; get the byte at addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



                                   2162 ; input:
                                   2163 ;	none 
                                   2164 ; output:
                                   2165 ;	X 		value 
                                   2166 ;-----------------------
      00214C                       2167 peek:
      00214C CD 19 00         [ 4] 2168 	call func_args
      00214F A1 01            [ 1] 2169 	cp a,#1 
      002151 27 03            [ 1] 2170 	jreq 1$
      002153 CC 16 45         [ 2] 2171 	jp syntax_error
      002156                       2172 1$: _xpop ; address  
      002156 90 F6            [ 1]    1     ld a,(y)
      002158 93               [ 1]    2     ldw x,y 
      002159 EE 01            [ 2]    3     ldw x,(1,x)
      00215B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00215F F6               [ 1] 2173 	ld a,(x)
      002160 5F               [ 1] 2174 	clrw x 
      002161 97               [ 1] 2175 	ld xl,a 
      002162 4F               [ 1] 2176 	clr a 
      002163 81               [ 4] 2177 	ret 
                                   2178 
                                   2179 ;---------------------------
                                   2180 ; BASIC IF expr : instructions
                                   2181 ; evaluate expr and if true 
                                   2182 ; execute instructions on same line. 
                                   2183 ;----------------------------
      002164                       2184 if: 
      002164 CD 1A 78         [ 4] 2185 	call relation 
      002167 A1 84            [ 1] 2186 	cp a,#TK_INTGR
      002169 27 03            [ 1] 2187 	jreq 1$ 
      00216B CC 16 45         [ 2] 2188 	jp syntax_error
      00216E                       2189 1$:	_xpop 
      00216E 90 F6            [ 1]    1     ld a,(y)
      002170 93               [ 1]    2     ldw x,y 
      002171 EE 01            [ 2]    3     ldw x,(1,x)
      002173 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002177 5D               [ 2] 2190 	tnzw x 
      002178 26 05            [ 1] 2191 	jrne 9$ 
                                   2192 ;skip to next line
      00217A 55 00 03 00 01   [ 1] 2193 	mov in,count
      00217F 81               [ 4] 2194 9$:	ret 
                                   2195 
                                   2196 ;------------------------
                                   2197 ; BASIC: FOR var=expr 
                                   2198 ; set variable to expression 
                                   2199 ; leave variable address 
                                   2200 ; on stack and set
                                   2201 ; FLOOP bit in 'flags'
                                   2202 ;-----------------
                           000001  2203 	RETL1=1 ; return address  
                           000003  2204 	FSTEP=3  ; variable increment, int16
                           000005  2205 	LIMIT=5 ; loop limit, int24  
                           000008  2206 	CVAR=8   ; control variable 
                           00000A  2207 	INW=10   ;  in.w saved
                           00000C  2208 	BPTR=12 ; baseptr saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                           00000C  2209 	VSIZE=12  
      002180                       2210 for: ; { -- var_addr }
      002180 85               [ 2] 2211 	popw x ; call return address 
      002181                       2212 	_vars VSIZE 
      002181 52 0C            [ 2]    1     sub sp,#VSIZE 
      002183 89               [ 2] 2213 	pushw x  ; RETL1 
      002184 A6 85            [ 1] 2214 	ld a,#TK_VAR 
      002186 CD 18 F3         [ 4] 2215 	call expect
      002189 CD 17 81         [ 4] 2216 	call get_addr
      00218C 1F 08            [ 2] 2217 	ldw (CVAR,sp),x  ; control variable 
      00218E CD 1B C3         [ 4] 2218 	call let_eval 
      002191 72 14 00 21      [ 1] 2219 	bset flags,#FLOOP 
      002195 CD 17 4B         [ 4] 2220 	call next_token 
      002198 A1 80            [ 1] 2221 	cp a,#TK_CMD 
      00219A 27 03            [ 1] 2222 	jreq 1$
      00219C CC 16 45         [ 2] 2223 	jp syntax_error
      00219F                       2224 1$:  
      00219F CD 17 65         [ 4] 2225 	call get_code_addr
      0021A2 A3 21 AA         [ 2] 2226 	cpw x,#to   
      0021A5 27 03            [ 1] 2227 	jreq to
      0021A7 CC 16 45         [ 2] 2228 	jp syntax_error 
                                   2229 
                                   2230 ;-----------------------------------
                                   2231 ; BASIC: TO expr 
                                   2232 ; second part of FOR loop initilization
                                   2233 ; leave limit on stack and set 
                                   2234 ; FTO bit in 'flags'
                                   2235 ;-----------------------------------
      0021AA                       2236 to: ; { var_addr -- var_addr limit step }
      0021AA 72 04 00 21 03   [ 2] 2237 	btjt flags,#FLOOP,1$
      0021AF CC 16 45         [ 2] 2238 	jp syntax_error
      0021B2 CD 1A 37         [ 4] 2239 1$: call expression   
      0021B5 A1 84            [ 1] 2240 	cp a,#TK_INTGR 
      0021B7 27 03            [ 1] 2241 	jreq 2$ 
      0021B9 CC 16 45         [ 2] 2242 	jp syntax_error
      0021BC                       2243 2$: _xpop
      0021BC 90 F6            [ 1]    1     ld a,(y)
      0021BE 93               [ 1]    2     ldw x,y 
      0021BF EE 01            [ 2]    3     ldw x,(1,x)
      0021C1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C5 6B 05            [ 1] 2244 	ld (LIMIT,sp),a 
      0021C7 1F 06            [ 2] 2245 	ldw (LIMIT+1,sp),x
      0021C9 CD 17 4B         [ 4] 2246 	call next_token
      0021CC A1 00            [ 1] 2247 	cp a,#TK_NONE  
      0021CE 27 11            [ 1] 2248 	jreq 4$ 
      0021D0 A1 80            [ 1] 2249 	cp a,#TK_CMD
      0021D2 26 08            [ 1] 2250 	jrne 3$
      0021D4 CD 17 65         [ 4] 2251 	call get_code_addr
      0021D7 A3 21 E8         [ 2] 2252 	cpw x,#step 
      0021DA 27 0C            [ 1] 2253 	jreq step
      0021DC                       2254 3$:	
      0021DC                       2255 	_unget_token   	 
      0021DC 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0021E1                       2256 4$:	
      0021E1 AE 00 01         [ 2] 2257 	ldw x,#1   ; default step  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021E4 1F 03            [ 2] 2258 	ldw (FSTEP,sp),x 
      0021E6 20 1D            [ 2] 2259 	jra store_loop_addr 
                                   2260 
                                   2261 
                                   2262 ;----------------------------------
                                   2263 ; BASIC: STEP expr 
                                   2264 ; optional third par of FOR loop
                                   2265 ; initialization. 	
                                   2266 ;------------------------------------
      0021E8                       2267 step: ; {var limit -- var limit step}
      0021E8 72 04 00 21 03   [ 2] 2268 	btjt flags,#FLOOP,1$
      0021ED CC 16 45         [ 2] 2269 	jp syntax_error
      0021F0 CD 1A 37         [ 4] 2270 1$: call expression 
      0021F3 A1 84            [ 1] 2271 	cp a,#TK_INTGR
      0021F5 27 03            [ 1] 2272 	jreq 2$
      0021F7 CC 16 45         [ 2] 2273 	jp syntax_error
      0021FA                       2274 2$:	
      0021FA                       2275 	_xpop 
      0021FA 90 F6            [ 1]    1     ld a,(y)
      0021FC 93               [ 1]    2     ldw x,y 
      0021FD EE 01            [ 2]    3     ldw x,(1,x)
      0021FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002203 1F 03            [ 2] 2276 	ldw (FSTEP,sp),x ; step
                                   2277 ; leave loop back entry point on cstack 
                                   2278 ; cstack is 1 call deep from interpreter
      002205                       2279 store_loop_addr:
      002205 CE 00 04         [ 2] 2280 	ldw x,basicptr
      002208 C6 00 01         [ 1] 2281 	ld a,in 
      00220B C1 00 03         [ 1] 2282 	cp a,count 
      00220E 2B 0C            [ 1] 2283 	jrmi 3$
      002210 72 BB 00 00      [ 2] 2284 	addw x,in.w 
      002214 1F 0C            [ 2] 2285 	ldw (BPTR,sp),x 
      002216 AE 00 03         [ 2] 2286 	ldw x,#3 
      002219 1F 0A            [ 2] 2287 	ldw (INW,sp),x 
      00221B 81               [ 4] 2288 	ret 
      00221C 1F 0C            [ 2] 2289 3$:	ldw (BPTR,sp),x 
      00221E CE 00 00         [ 2] 2290 	ldw x,in.w 
      002221 1F 0A            [ 2] 2291 	ldw (INW,sp),x   
      002223 72 15 00 21      [ 1] 2292 	bres flags,#FLOOP 
      002227 72 5C 00 1E      [ 1] 2293 	inc loop_depth  
      00222B 81               [ 4] 2294 	ret 
                                   2295 
                                   2296 ;--------------------------------
                                   2297 ; BASIC: NEXT var 
                                   2298 ; FOR loop control 
                                   2299 ; increment variable with step 
                                   2300 ; and compare with limit 
                                   2301 ; loop if threshold not crossed.
                                   2302 ; else stack. 
                                   2303 ; and decrement 'loop_depth' 
                                   2304 ;--------------------------------
      00222C                       2305 next: ; {var limit step retl1 -- [var limit step ] }
      00222C 72 5D 00 1E      [ 1] 2306 	tnz loop_depth 
      002230 26 03            [ 1] 2307 	jrne 1$ 
      002232 CC 16 45         [ 2] 2308 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002235                       2309 1$: 
      002235 A6 85            [ 1] 2310 	ld a,#TK_VAR 
      002237 CD 18 F3         [ 4] 2311 	call expect
      00223A CD 17 81         [ 4] 2312 	call get_addr 
                                   2313 ; check for good variable after NEXT 	 
      00223D 13 08            [ 2] 2314 	cpw x,(CVAR,sp)
      00223F 27 03            [ 1] 2315 	jreq 2$  
      002241 CC 16 45         [ 2] 2316 	jp syntax_error ; not the good one 
      002244                       2317 2$: 
      002244 CF 00 18         [ 2] 2318 	ldw ptr16,x 
                                   2319 	; increment variable 
      002247 F6               [ 1] 2320 	ld a,(x)
      002248 EE 01            [ 2] 2321 	ldw x,(1,x)  ; get var value 
      00224A 72 FB 03         [ 2] 2322 	addw x,(FSTEP,sp) ; var+step 
      00224D A9 00            [ 1] 2323 	adc a,#0  
      00224F 72 C7 00 18      [ 4] 2324 	ld [ptr16],a
      002253 72 5C 00 19      [ 1] 2325 	inc ptr8  
      002257 72 CF 00 18      [ 5] 2326 	ldw [ptr16],x 
      00225B C7 00 0C         [ 1] 2327 	ld acc24,a 
      00225E CF 00 0D         [ 2] 2328 	ldw acc16,x 
      002261 7B 05            [ 1] 2329 	ld a,(LIMIT,sp)
      002263 1E 06            [ 2] 2330 	ldw x,(LIMIT+1,sp)
      002265 72 B0 00 0D      [ 2] 2331 	subw x,acc16 
      002269 C2 00 0C         [ 1] 2332 	sbc a,acc24
      00226C 8A               [ 1] 2333 	push cc  
                                   2334 ; check sign of STEP  
      00226D A6 80            [ 1] 2335 	ld a,#0x80
      00226F 15 03            [ 1] 2336 	bcp a,(FSTEP,sp)
      002271 2A 05            [ 1] 2337 	jrpl 4$
                                   2338 ;negative step
      002273 86               [ 1] 2339 	pop cc 
      002274 2F 1A            [ 1] 2340 	jrslt loop_done
      002276 20 03            [ 2] 2341 	jra loop_back 
      002278                       2342 4$: ; positive step
      002278 86               [ 1] 2343 	pop cc 
      002279 2C 15            [ 1] 2344 	jrsgt loop_done
      00227B                       2345 loop_back:
      00227B 1E 0C            [ 2] 2346 	ldw x,(BPTR,sp)
      00227D CF 00 04         [ 2] 2347 	ldw basicptr,x 
      002280 72 01 00 21 05   [ 2] 2348 	btjf flags,#FRUN,1$ 
      002285 E6 02            [ 1] 2349 	ld a,(2,x)
      002287 C7 00 03         [ 1] 2350 	ld count,a
      00228A 1E 0A            [ 2] 2351 1$:	ldw x,(INW,sp)
      00228C CF 00 00         [ 2] 2352 	ldw in.w,x 
      00228F 81               [ 4] 2353 	ret 
      002290                       2354 loop_done:
                                   2355 	; remove loop data from stack  
      002290 85               [ 2] 2356 	popw x
      002291                       2357 	_drop VSIZE 
      002291 5B 0C            [ 2]    1     addw sp,#VSIZE 
      002293 72 5A 00 1E      [ 1] 2358 	dec loop_depth 
      002297 FC               [ 2] 2359 	jp (x)
                                   2360 
                                   2361 ;----------------------------
                                   2362 ; called by goto/gosub
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   2363 ; to get target line number 
                                   2364 ; output:
                                   2365 ;    x    line address 
                                   2366 ;---------------------------
      002298                       2367 get_target_line:
      002298 CD 17 4B         [ 4] 2368 	call next_token  
      00229B A1 84            [ 1] 2369 	cp a,#TK_INTGR
      00229D 27 07            [ 1] 2370 	jreq get_target_line_addr 
      00229F A1 03            [ 1] 2371 	cp a,#TK_LABEL 
      0022A1 27 26            [ 1] 2372 	jreq look_target_symbol 
      0022A3 CC 16 45         [ 2] 2373 	jp syntax_error
                                   2374 ; the target is a line number 
                                   2375 ; search it. 
      0022A6                       2376 get_target_line_addr:
      0022A6 90 89            [ 2] 2377 	pushw y 
      0022A8 CD 17 8B         [ 4] 2378 	call get_int24 ; line # 
      0022AB 4F               [ 1] 2379 	clr a
      0022AC 90 CE 00 04      [ 2] 2380 	ldw y,basicptr 
      0022B0 90 FE            [ 2] 2381 	ldw y,(y)
      0022B2 90 89            [ 2] 2382 	pushw y 
      0022B4 13 01            [ 2] 2383 	cpw x,(1,sp)
      0022B6                       2384 	_drop 2  
      0022B6 5B 02            [ 2]    1     addw sp,#2 
      0022B8 25 01            [ 1] 2385 	jrult 11$
      0022BA 4C               [ 1] 2386 	inc a 
      0022BB                       2387 11$: ; scan program for this line# 	
      0022BB CD 0C 42         [ 4] 2388 	call search_lineno  
      0022BE 5D               [ 2] 2389 	tnzw x ; 0| line# address 
      0022BF 26 05            [ 1] 2390 	jrne 2$ 
      0022C1 A6 05            [ 1] 2391 	ld a,#ERR_NO_LINE 
      0022C3 CC 16 47         [ 2] 2392 	jp tb_error 
      0022C6 90 85            [ 2] 2393 2$:	popw y  
      0022C8 81               [ 4] 2394 	ret 
                                   2395 
                                   2396 ; the GOTO|GOSUB target is a symbol.
      0022C9                       2397 look_target_symbol:
      0022C9 90 89            [ 2] 2398 	pushw y 
      0022CB 89               [ 2] 2399 	pushw x 
      0022CC 72 5F 00 0D      [ 1] 2400 	clr acc16 
      0022D0 90 CE 00 1A      [ 2] 2401 	ldw y,txtbgn 
      0022D4 90 E6 03         [ 1] 2402 1$:	ld a,(3,y) ; first TK_ID on line 
      0022D7 A1 03            [ 1] 2403 	cp a,#TK_LABEL 
      0022D9 27 15            [ 1] 2404 	jreq 3$ 
      0022DB 90 E6 02         [ 1] 2405 2$:	ld a,(2,y); line length 
      0022DE C7 00 0E         [ 1] 2406 	ld acc8,a 
      0022E1 72 B9 00 0D      [ 2] 2407 	addw y,acc16 ;point to next line 
      0022E5 90 C3 00 1C      [ 2] 2408 	cpw y,txtend 
      0022E9 25 E9            [ 1] 2409 	jrult 1$
      0022EB A6 0A            [ 1] 2410 	ld a,#ERR_BAD_VALUE
      0022ED CC 16 47         [ 2] 2411 	jp tb_error 
      0022F0                       2412 3$: ; found a TK_LABEL 
                                   2413 	; compare with GOTO|GOSUB target 
      0022F0 90 89            [ 2] 2414 	pushw y ; line address 
      0022F2 72 A9 00 04      [ 2] 2415 	addw y,#4 ; label string 
      0022F6 1E 03            [ 2] 2416 	ldw x,(3,sp) ; target string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0022F8 CD 13 94         [ 4] 2417 	call strcmp
      0022FB 26 04            [ 1] 2418 	jrne 4$
      0022FD 90 85            [ 2] 2419 	popw y 
      0022FF 20 DA            [ 2] 2420 	jra 2$ 
      002301                       2421 4$: ; target found 
      002301 85               [ 2] 2422 	popw x ;  address line target  
      002302                       2423 	_drop 2 ; target string 
      002302 5B 02            [ 2]    1     addw sp,#2 
      002304 90 85            [ 2] 2424 	popw y 
      002306 81               [ 4] 2425 	ret
                                   2426 
                                   2427 
                                   2428 ;--------------------------------
                                   2429 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2430 ; selective goto or gosub 
                                   2431 ;--------------------------------
      002307                       2432 cmd_on:
      002307 72 00 00 21 05   [ 2] 2433 	btjt flags,#FRUN,0$ 
      00230C A6 06            [ 1] 2434 	ld a,#ERR_RUN_ONLY
      00230E CC 16 47         [ 2] 2435 	jp tb_error 
      002311 CD 1A 37         [ 4] 2436 0$:	call expression 
      002314 A1 84            [ 1] 2437 	cp a,#TK_INTGR
      002316 27 03            [ 1] 2438 	jreq 1$
      002318 CC 16 45         [ 2] 2439 	jp syntax_error
      00231B                       2440 1$: _xpop
      00231B 90 F6            [ 1]    1     ld a,(y)
      00231D 93               [ 1]    2     ldw x,y 
      00231E EE 01            [ 2]    3     ldw x,(1,x)
      002320 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2441 ; the selector is the element indice 
                                   2442 ; in the list of arguments. {1..#elements} 
      002324 9F               [ 1] 2443 	ld a,xl ; keep only bits 7..0
      002325 27 62            [ 1] 2444 	jreq 9$ ; element # begin at 1. 
      002327 88               [ 1] 2445 	push a  ; selector  
      002328 CD 17 4B         [ 4] 2446 	call next_token
      00232B A1 80            [ 1] 2447 	cp a,#TK_CMD 
      00232D 27 03            [ 1] 2448 	jreq 2$ 
      00232F CC 16 45         [ 2] 2449 	jp syntax_error 
      002332 CD 17 65         [ 4] 2450 2$: call get_code_addr
                                   2451 ;; must be a GOTO or GOSUB 
      002335 A3 23 8F         [ 2] 2452 	cpw x,#goto 
      002338 27 08            [ 1] 2453 	jreq 4$
      00233A A3 23 A9         [ 2] 2454 	cpw x,#gosub 
      00233D 27 03            [ 1] 2455 	jreq 4$ 
      00233F CC 16 45         [ 2] 2456 	jp syntax_error 
      002342                       2457 4$: 
      002342 84               [ 1] 2458 	pop a 
      002343 89               [ 2] 2459 	pushw x ; save routine address 	
      002344 88               [ 1] 2460 	push a  ; selector  
      002345                       2461 5$: ; skip elements in list until selector==0 
      002345 0A 01            [ 1] 2462 	dec (1,sp)
      002347 27 26            [ 1] 2463 	jreq 6$ 
                                   2464 ; can be a line# or a label 
      002349 CD 17 4B         [ 4] 2465 	call next_token 
      00234C A1 84            [ 1] 2466 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00234E 27 07            [ 1] 2467 	jreq 52$
      002350 A1 03            [ 1] 2468 	cp a,#TK_LABEL 
      002352 27 0D            [ 1] 2469 	jreq 54$
      002354 CC 16 45         [ 2] 2470 	jp syntax_error 
      002357                       2471 52$: ; got a line number 
      002357 C6 00 01         [ 1] 2472 	ld a,in ; skip over int24 value 
      00235A AB 03            [ 1] 2473 	add a,#CELL_SIZE ; integer size  
      00235C C7 00 01         [ 1] 2474 	ld in,a 
      00235F 20 03            [ 2] 2475 	jra 56$
      002361 CD 17 72         [ 4] 2476 54$: call skip_string ; skip over label 	
      002364                       2477 56$: ; if another element comma present 
      002364 CD 17 4B         [ 4] 2478 	call next_token
      002367 A1 08            [ 1] 2479 	cp a,#TK_COMMA 
      002369 27 DA            [ 1] 2480 	jreq 5$ 
                                   2481 ; arg list exhausted, selector to big 
                                   2482 ; continue execution on next line 
      00236B                       2483 	_drop 3 ; drop selector and GOTO|GOSUB address 
      00236B 5B 03            [ 2]    1     addw sp,#3 
      00236D 20 1A            [ 2] 2484 	jra 9$
      00236F                       2485 6$: ;at selected position  
      00236F                       2486 	_drop 1 ; discard selector
      00236F 5B 01            [ 2]    1     addw sp,#1 
                                   2487 ; here only the routine address 
                                   2488 ; of GOTO|GOSUB is on stack 
      002371 CD 22 98         [ 4] 2489     call get_target_line
      002374 CF 00 18         [ 2] 2490 	ldw ptr16,x 	
      002377 55 00 03 00 01   [ 1] 2491 	mov in,count ; move to end of line  
      00237C 85               [ 2] 2492 	popw x ; cmd address, GOTO||GOSUB 
      00237D A3 23 8F         [ 2] 2493 	cpw x,#goto 
      002380 26 05            [ 1] 2494 	jrne 7$ 
      002382 CE 00 18         [ 2] 2495 	ldw x,ptr16 
      002385 20 15            [ 2] 2496 	jra jp_to_target
      002387                       2497 7$: 
      002387 20 31            [ 2] 2498 	jra gosub_2 ; target in ptr16 
      002389                       2499 9$: ; expr out of range skip to end of line
                                   2500     ; this will force a fall to next line  
      002389 55 00 03 00 01   [ 1] 2501 	mov in,count
      00238E 81               [ 4] 2502 	ret 
                                   2503 
                                   2504 
                                   2505 ;------------------------
                                   2506 ; BASIC: GOTO line# 
                                   2507 ; jump to line# 
                                   2508 ; here cstack is 2 call deep from interpreter 
                                   2509 ;------------------------
      00238F                       2510 goto:
      00238F 72 00 00 21 05   [ 2] 2511 	btjt flags,#FRUN,goto_1  
      002394 A6 06            [ 1] 2512 	ld a,#ERR_RUN_ONLY
      002396 CC 16 47         [ 2] 2513 	jp tb_error 
      002399                       2514 goto_1:
      002399 CD 22 98         [ 4] 2515 	call get_target_line
      00239C                       2516 jp_to_target:
      00239C CF 00 04         [ 2] 2517 	ldw basicptr,x 
      00239F E6 02            [ 1] 2518 	ld a,(2,x)
      0023A1 C7 00 03         [ 1] 2519 	ld count,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      0023A4 35 03 00 01      [ 1] 2520 	mov in,#3 
      0023A8 81               [ 4] 2521 	ret 
                                   2522 
                                   2523 
                                   2524 ;--------------------
                                   2525 ; BASIC: GOSUB line#
                                   2526 ; basic subroutine call
                                   2527 ; actual line# and basicptr 
                                   2528 ; are saved on cstack
                                   2529 ; here cstack is 2 call deep from interpreter 
                                   2530 ;--------------------
                           000001  2531 	TARGET=1   ; target address 
                           000003  2532 	RET_ADDR=3 ; subroutine return address 
                           000005  2533 	RET_BPTR=5 ; basicptr return point 
                           000007  2534 	RET_INW=7  ; in.w return point 
                           000004  2535 	VSIZE=4  
      0023A9                       2536 gosub:
      0023A9 72 00 00 21 06   [ 2] 2537 	btjt flags,#FRUN,gosub_1 
      0023AE A6 06            [ 1] 2538 	ld a,#ERR_RUN_ONLY
      0023B0 CC 16 47         [ 2] 2539 	jp tb_error 
      0023B3 81               [ 4] 2540 	ret 
      0023B4                       2541 gosub_1:
      0023B4 CD 22 98         [ 4] 2542 	call get_target_line 
      0023B7 CF 00 18         [ 2] 2543 	ldw ptr16,x 
      0023BA                       2544 gosub_2: 
      0023BA 85               [ 2] 2545 	popw x 
      0023BB                       2546 	_vars VSIZE  
      0023BB 52 04            [ 2]    1     sub sp,#VSIZE 
      0023BD 89               [ 2] 2547 	pushw x ; RET_ADDR 
      0023BE CE 00 18         [ 2] 2548 	ldw x,ptr16 
      0023C1 89               [ 2] 2549 	pushw x ; TARGET
                                   2550 ; save BASIC subroutine return point.   
      0023C2 CE 00 04         [ 2] 2551 	ldw x,basicptr
      0023C5 1F 05            [ 2] 2552 	ldw (RET_BPTR,sp),x 
      0023C7 CE 00 00         [ 2] 2553 	ldw x,in.w 
      0023CA 1F 07            [ 2] 2554 	ldw (RET_INW,sp),x
      0023CC 85               [ 2] 2555 	popw x 
      0023CD 20 CD            [ 2] 2556 	jra jp_to_target
                                   2557 
                                   2558 ;------------------------
                                   2559 ; BASIC: RETURN 
                                   2560 ; exit from BASIC subroutine 
                                   2561 ;------------------------
                           000003  2562 	RET_BPTR=3 ; basicptr return point 
                           000005  2563 	RET_INW=5  ; in.w return point 
                           000004  2564 	VSIZE=4  
      0023CF                       2565 return:
      0023CF 72 00 00 21 05   [ 2] 2566 	btjt flags,#FRUN,0$ 
      0023D4 A6 06            [ 1] 2567 	ld a,#ERR_RUN_ONLY
      0023D6 CC 16 47         [ 2] 2568 	jp tb_error 
      0023D9                       2569 0$:	
      0023D9 1E 03            [ 2] 2570 	ldw x,(RET_ADDR,sp) 
      0023DB CF 00 04         [ 2] 2571 	ldw basicptr,x
      0023DE E6 02            [ 1] 2572 	ld a,(2,x)
      0023E0 C7 00 03         [ 1] 2573 	ld count,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023E3 1E 05            [ 2] 2574 	ldw x,(RET_INW,sp)
      0023E5 CF 00 00         [ 2] 2575 	ldw in.w,x 
      0023E8 85               [ 2] 2576 	popw x 
      0023E9                       2577 	_drop VSIZE 
      0023E9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0023EB 89               [ 2] 2578 	pushw x
      0023EC 81               [ 4] 2579 	ret  
                                   2580 
                                   2581 ;----------------------------------
                                   2582 ; BASIC: RUN
                                   2583 ; run BASIC program in RAM
                                   2584 ;----------------------------------- 
      0023ED                       2585 run: 
      0023ED 72 01 00 21 02   [ 2] 2586 	btjf flags,#FRUN,0$  
      0023F2 4F               [ 1] 2587 	clr a 
      0023F3 81               [ 4] 2588 	ret
      0023F4                       2589 0$: 
      0023F4 72 09 00 21 12   [ 2] 2590 	btjf flags,#FBREAK,1$
      0023F9                       2591 	_drop 2 
      0023F9 5B 02            [ 2]    1     addw sp,#2 
      0023FB CD 1F 9D         [ 4] 2592 	call rest_context
      0023FE                       2593 	_drop CTXT_SIZE 
      0023FE 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002400 72 19 00 21      [ 1] 2594 	bres flags,#FBREAK 
      002404 72 10 00 21      [ 1] 2595 	bset flags,#FRUN 
      002408 CC 16 F5         [ 2] 2596 	jp interpreter 
      00240B CE 00 1A         [ 2] 2597 1$:	ldw x,txtbgn
      00240E C3 00 1C         [ 2] 2598 	cpw x,txtend 
      002411 2B 0C            [ 1] 2599 	jrmi run_it 
      002413 AE 15 D4         [ 2] 2600 	ldw x,#err_no_prog
      002416 CD 09 5A         [ 4] 2601 	call puts 
      002419 55 00 03 00 01   [ 1] 2602 	mov in,count
      00241E 81               [ 4] 2603 	ret 
      00241F                       2604 run_it:	 
      00241F                       2605 	_drop 2 ; drop return address 
      00241F 5B 02            [ 2]    1     addw sp,#2 
      002421                       2606 run_it_02: 
      002421 CD 1B A2         [ 4] 2607     call ubound 
      002424 CD 13 F9         [ 4] 2608 	call clear_vars 
                                   2609 ; clear data pointer 
      002427 5F               [ 1] 2610 	clrw x 
      002428 CF 00 06         [ 2] 2611 	ldw data_ptr,x 
      00242B 72 5F 00 08      [ 1] 2612 	clr data_ofs 
      00242F 72 5F 00 09      [ 1] 2613 	clr data_len 
                                   2614 ; initialize BASIC pointer 
      002433 CE 00 1A         [ 2] 2615 	ldw x,txtbgn 
      002436 CF 00 04         [ 2] 2616 	ldw basicptr,x 
      002439 E6 02            [ 1] 2617 	ld a,(2,x)
      00243B C7 00 03         [ 1] 2618 	ld count,a
      00243E 35 03 00 01      [ 1] 2619 	mov in,#3	
      002442 72 10 00 21      [ 1] 2620 	bset flags,#FRUN 
      002446 CC 16 F5         [ 2] 2621 	jp interpreter 
                                   2622 
                                   2623 
                                   2624 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                   2625 ; BASIC: END
                                   2626 ; end running program
                                   2627 ;---------------------- 
      002449                       2628 cmd_end: 
                                   2629 ; clean stack 
      002449 AE 17 FF         [ 2] 2630 	ldw x,#STACK_EMPTY
      00244C 94               [ 1] 2631 	ldw sp,x 
      00244D CC 16 D6         [ 2] 2632 	jp warm_start
                                   2633 
                                   2634 ;---------------------------
                                   2635 ; BASIC: GET var 
                                   2636 ; receive a key in variable 
                                   2637 ; don't wait 
                                   2638 ;---------------------------
      002450                       2639 cmd_get:
      002450 CD 17 4B         [ 4] 2640 	call next_token 
      002453 A1 85            [ 1] 2641 	cp a,#TK_VAR 
      002455 27 03            [ 1] 2642 	jreq 0$
      002457 CC 16 45         [ 2] 2643 	jp syntax_error 
      00245A CD 17 81         [ 4] 2644 0$: call get_addr 
      00245D CF 00 18         [ 2] 2645 	ldw ptr16,x 
      002460 CD 09 06         [ 4] 2646 	call qgetc 
      002463 27 03            [ 1] 2647 	jreq 2$
      002465 CD 09 0D         [ 4] 2648 	call getc  
      002468 72 3F 00 18      [ 4] 2649 2$: clr [ptr16]
      00246C 72 5C 00 19      [ 1] 2650 	inc ptr8 
      002470 72 3F 00 18      [ 4] 2651 	clr [ptr16]
      002474 72 5C 00 19      [ 1] 2652 	inc ptr8 
      002478 72 C7 00 18      [ 4] 2653 	ld [ptr16],a 
      00247C 81               [ 4] 2654 	ret 
                                   2655 
                                   2656 
                                   2657 ;-----------------
                                   2658 ; 1 Khz beep 
                                   2659 ;-----------------
      00247D                       2660 beep_1khz:: 
      00247D AE 00 64         [ 2] 2661 	ldw x,#100
      002480 90 AE 03 E8      [ 2] 2662 	ldw y,#1000
      002484 20 20            [ 2] 2663 	jra beep
                                   2664 
                                   2665 ;-----------------------
                                   2666 ; BASIC: TONE expr1,expr2
                                   2667 ; used TIMER2 channel 1
                                   2668 ; to produce a tone 
                                   2669 ; arguments:
                                   2670 ;    expr1   frequency 
                                   2671 ;    expr2   duration msec.
                                   2672 ;---------------------------
      002486                       2673 tone:
      002486 CD 19 05         [ 4] 2674 	call arg_list 
      002489 A1 02            [ 1] 2675 	cp a,#2 
      00248B 27 03            [ 1] 2676 	jreq 1$
      00248D CC 16 45         [ 2] 2677 	jp syntax_error 
      002490                       2678 1$: 
      002490                       2679 	_xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002490 90 F6            [ 1]    1     ld a,(y)
      002492 93               [ 1]    2     ldw x,y 
      002493 EE 01            [ 2]    3     ldw x,(1,x)
      002495 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002499 89               [ 2] 2680 	pushw x ; duration 
      00249A                       2681 	_xpop ; frequency
      00249A 90 F6            [ 1]    1     ld a,(y)
      00249C 93               [ 1]    2     ldw x,y 
      00249D EE 01            [ 2]    3     ldw x,(1,x)
      00249F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0024A3 90 93            [ 1] 2682 	ldw y,x ; frequency 
      0024A5 85               [ 2] 2683 	popw x  ; duration 
      0024A6                       2684 beep:  
      0024A6 89               [ 2] 2685 	pushw x 
      0024A7 AE F4 24         [ 2] 2686 	ldw x,#TIM2_CLK_FREQ
      0024AA 65               [ 2] 2687 	divw x,y ; cntr=Fclk/freq 
                                   2688 ; round to nearest integer 
      0024AB 90 A3 7A 12      [ 2] 2689 	cpw y,#TIM2_CLK_FREQ/2
      0024AF 2B 01            [ 1] 2690 	jrmi 2$
      0024B1 5C               [ 1] 2691 	incw x 
      0024B2                       2692 2$:	 
      0024B2 9E               [ 1] 2693 	ld a,xh 
      0024B3 C7 53 0D         [ 1] 2694 	ld TIM2_ARRH,a 
      0024B6 9F               [ 1] 2695 	ld a,xl 
      0024B7 C7 53 0E         [ 1] 2696 	ld TIM2_ARRL,a 
                                   2697 ; 50% duty cycle 
      0024BA 8C               [ 1] 2698 	ccf 
      0024BB 56               [ 2] 2699 	rrcw x 
      0024BC 9E               [ 1] 2700 	ld a,xh 
      0024BD C7 53 0F         [ 1] 2701 	ld TIM2_CCR1H,a 
      0024C0 9F               [ 1] 2702 	ld a,xl
      0024C1 C7 53 10         [ 1] 2703 	ld TIM2_CCR1L,a
      0024C4 72 10 53 08      [ 1] 2704 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0024C8 72 10 53 00      [ 1] 2705 	bset TIM2_CR1,#TIM2_CR1_CEN
      0024CC 72 10 53 04      [ 1] 2706 	bset TIM2_EGR,#TIM2_EGR_UG
      0024D0 85               [ 2] 2707 	popw x 
      0024D1 CD 29 2D         [ 4] 2708 	call pause02
      0024D4 72 11 53 08      [ 1] 2709 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0024D8 72 11 53 00      [ 1] 2710 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0024DC 81               [ 4] 2711 	ret 
                                   2712 
                                   2713 ;-------------------------------
                                   2714 ; BASIC: ADCON 0|1 [,divisor]  
                                   2715 ; disable/enanble ADC 
                                   2716 ;-------------------------------
                           000003  2717 	ONOFF=3 
                           000001  2718 	DIVSOR=1
                           000004  2719 	VSIZE=4 
      0024DD                       2720 power_adc:
      0024DD CD 19 05         [ 4] 2721 	call arg_list 
      0024E0 A1 02            [ 1] 2722 	cp a,#2	
      0024E2 27 12            [ 1] 2723 	jreq 1$
      0024E4 A1 01            [ 1] 2724 	cp a,#1 
      0024E6 27 03            [ 1] 2725 	jreq 0$ 
      0024E8 CC 16 45         [ 2] 2726 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0024EB 4F               [ 1] 2727 0$:	clr a 
      0024EC 5F               [ 1] 2728 	clrw x
      0024ED                       2729 	_xpush   ; divisor  
      0024ED 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0024F1 90 F7            [ 1]    2     ld (y),a 
      0024F3 90 EF 01         [ 2]    3     ldw (1,y),x 
      0024F6                       2730 1$: _at_next 
      0024F6 90 E6 03         [ 1]    1     ld a,(3,y)
      0024F9 93               [ 1]    2     ldw x,y 
      0024FA EE 04            [ 2]    3     ldw x,(4,x)
      0024FC 5D               [ 2] 2731 	tnzw x 
      0024FD 27 25            [ 1] 2732 	jreq 2$ 
      0024FF                       2733 	_xpop
      0024FF 90 F6            [ 1]    1     ld a,(y)
      002501 93               [ 1]    2     ldw x,y 
      002502 EE 01            [ 2]    3     ldw x,(1,x)
      002504 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002508                       2734 	_xdrop  
      002508 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      00250C 9F               [ 1] 2735 	ld a,xl
      00250D A4 07            [ 1] 2736 	and a,#7
      00250F 4E               [ 1] 2737 	swap a 
      002510 C7 54 01         [ 1] 2738 	ld ADC_CR1,a
      002513 72 16 50 CA      [ 1] 2739 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002517 72 10 54 01      [ 1] 2740 	bset ADC_CR1,#ADC_CR1_ADON 
      00251B                       2741 	_usec_dly 7 
      00251B AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00251E 5A               [ 2]    2     decw x
      00251F 9D               [ 1]    3     nop 
      002520 26 FA            [ 1]    4     jrne .-4
      002522 20 08            [ 2] 2742 	jra 3$
      002524 72 11 54 01      [ 1] 2743 2$: bres ADC_CR1,#ADC_CR1_ADON
      002528 72 17 50 CA      [ 1] 2744 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00252C                       2745 3$:	
      00252C 81               [ 4] 2746 	ret
                                   2747 
                                   2748 ;-----------------------------
                                   2749 ; BASIC: ADCREAD (channel)
                                   2750 ; read adc channel {0..5}
                                   2751 ; output:
                                   2752 ;   A 		TK_INTGR 
                                   2753 ;   X 		value 
                                   2754 ;-----------------------------
      00252D                       2755 analog_read:
      00252D CD 19 00         [ 4] 2756 	call func_args 
      002530 A1 01            [ 1] 2757 	cp a,#1 
      002532 27 03            [ 1] 2758 	jreq 1$
      002534 CC 16 45         [ 2] 2759 	jp syntax_error
      002537                       2760 1$: _xpop 
      002537 90 F6            [ 1]    1     ld a,(y)
      002539 93               [ 1]    2     ldw x,y 
      00253A EE 01            [ 2]    3     ldw x,(1,x)
      00253C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002540 A3 00 05         [ 2] 2761 	cpw x,#5 
      002543 23 05            [ 2] 2762 	jrule 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002545 A6 0A            [ 1] 2763 	ld a,#ERR_BAD_VALUE
      002547 CC 16 47         [ 2] 2764 	jp tb_error 
      00254A 9F               [ 1] 2765 2$: ld a,xl
      00254B C7 00 0E         [ 1] 2766 	ld acc8,a 
      00254E A6 05            [ 1] 2767 	ld a,#5
      002550 C0 00 0E         [ 1] 2768 	sub a,acc8 
      002553 C7 54 00         [ 1] 2769 	ld ADC_CSR,a
      002556 72 16 54 02      [ 1] 2770 	bset ADC_CR2,#ADC_CR2_ALIGN
      00255A 72 10 54 01      [ 1] 2771 	bset ADC_CR1,#ADC_CR1_ADON
      00255E 72 0F 54 00 FB   [ 2] 2772 	btjf ADC_CSR,#ADC_CSR_EOC,.
      002563 CE 54 04         [ 2] 2773 	ldw x,ADC_DRH
      002566 A6 84            [ 1] 2774 	ld a,#TK_INTGR
      002568 81               [ 4] 2775 	ret 
                                   2776 
                                   2777 ;-----------------------
                                   2778 ; BASIC: DREAD(pin)
                                   2779 ; Arduino pins 
                                   2780 ; read state of a digital pin 
                                   2781 ; pin# {0..15}
                                   2782 ; output:
                                   2783 ;    A 		TK_INTGR
                                   2784 ;    X      0|1 
                                   2785 ;-------------------------
                           000001  2786 	PINNO=1
                           000001  2787 	VSIZE=1
      002569                       2788 digital_read:
      002569                       2789 	_vars VSIZE 
      002569 52 01            [ 2]    1     sub sp,#VSIZE 
      00256B CD 19 00         [ 4] 2790 	call func_args
      00256E A1 01            [ 1] 2791 	cp a,#1
      002570 27 03            [ 1] 2792 	jreq 1$
      002572 CC 16 45         [ 2] 2793 	jp syntax_error
      002575                       2794 1$: _xpop 
      002575 90 F6            [ 1]    1     ld a,(y)
      002577 93               [ 1]    2     ldw x,y 
      002578 EE 01            [ 2]    3     ldw x,(1,x)
      00257A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00257E A3 00 0F         [ 2] 2795 	cpw x,#15 
      002581 23 05            [ 2] 2796 	jrule 2$
      002583 A6 0A            [ 1] 2797 	ld a,#ERR_BAD_VALUE
      002585 CC 16 47         [ 2] 2798 	jp tb_error 
      002588 CD 2B 04         [ 4] 2799 2$:	call select_pin 
      00258B 6B 01            [ 1] 2800 	ld (PINNO,sp),a
      00258D E6 01            [ 1] 2801 	ld a,(GPIO_IDR,x)
      00258F 0D 01            [ 1] 2802 	tnz (PINNO,sp)
      002591 27 05            [ 1] 2803 	jreq 8$
      002593 44               [ 1] 2804 3$: srl a 
      002594 0A 01            [ 1] 2805 	dec (PINNO,sp)
      002596 26 FB            [ 1] 2806 	jrne 3$ 
      002598 A4 01            [ 1] 2807 8$: and a,#1 
      00259A 5F               [ 1] 2808 	clrw x 
      00259B 97               [ 1] 2809 	ld xl,a 
      00259C A6 84            [ 1] 2810 	ld a,#TK_INTGR
      00259E                       2811 	_drop VSIZE
      00259E 5B 01            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0025A0 81               [ 4] 2812 	ret
                                   2813 
                                   2814 
                                   2815 ;-----------------------
                                   2816 ; BASIC: DWRITE pin,0|1
                                   2817 ; Arduino pins 
                                   2818 ; write to a digital pin 
                                   2819 ; pin# {0..15}
                                   2820 ; output:
                                   2821 ;    A 		TK_INTGR
                                   2822 ;    X      0|1 
                                   2823 ;-------------------------
                           000001  2824 	PINNO=1
                           000002  2825 	PINVAL=2
                           000002  2826 	VSIZE=2
      0025A1                       2827 digital_write:
      0025A1                       2828 	_vars VSIZE 
      0025A1 52 02            [ 2]    1     sub sp,#VSIZE 
      0025A3 CD 19 05         [ 4] 2829 	call arg_list  
      0025A6 A1 02            [ 1] 2830 	cp a,#2 
      0025A8 27 03            [ 1] 2831 	jreq 1$
      0025AA CC 16 45         [ 2] 2832 	jp syntax_error
      0025AD                       2833 1$: _xpop 
      0025AD 90 F6            [ 1]    1     ld a,(y)
      0025AF 93               [ 1]    2     ldw x,y 
      0025B0 EE 01            [ 2]    3     ldw x,(1,x)
      0025B2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025B6 9F               [ 1] 2834 	ld a,xl 
      0025B7 6B 02            [ 1] 2835 	ld (PINVAL,sp),a
      0025B9                       2836 	_xpop 
      0025B9 90 F6            [ 1]    1     ld a,(y)
      0025BB 93               [ 1]    2     ldw x,y 
      0025BC EE 01            [ 2]    3     ldw x,(1,x)
      0025BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025C2 A3 00 0F         [ 2] 2837 	cpw x,#15 
      0025C5 23 05            [ 2] 2838 	jrule 2$
      0025C7 A6 0A            [ 1] 2839 	ld a,#ERR_BAD_VALUE
      0025C9 CC 16 47         [ 2] 2840 	jp tb_error 
      0025CC CD 2B 04         [ 4] 2841 2$:	call select_pin 
      0025CF 6B 01            [ 1] 2842 	ld (PINNO,sp),a 
      0025D1 A6 01            [ 1] 2843 	ld a,#1
      0025D3 0D 01            [ 1] 2844 	tnz (PINNO,sp)
      0025D5 27 05            [ 1] 2845 	jreq 4$
      0025D7 48               [ 1] 2846 3$: sll a
      0025D8 0A 01            [ 1] 2847 	dec (PINNO,sp)
      0025DA 26 FB            [ 1] 2848 	jrne 3$
      0025DC 0D 02            [ 1] 2849 4$: tnz (PINVAL,sp)
      0025DE 26 05            [ 1] 2850 	jrne 5$
      0025E0 43               [ 1] 2851 	cpl a 
      0025E1 E4 00            [ 1] 2852 	and a,(GPIO_ODR,x)
      0025E3 20 02            [ 2] 2853 	jra 8$
      0025E5 EA 00            [ 1] 2854 5$: or a,(GPIO_ODR,x)
      0025E7 E7 00            [ 1] 2855 8$: ld (GPIO_ODR,x),a 
      0025E9                       2856 	_drop VSIZE 
      0025E9 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0025EB 81               [ 4] 2857 	ret
                                   2858 
                                   2859 
                                   2860 ;-----------------------
                                   2861 ; BASIC: STOP
                                   2862 ; stop progam execution  
                                   2863 ; without resetting pointers 
                                   2864 ; the program is resumed
                                   2865 ; with RUN 
                                   2866 ;-------------------------
      0025EC                       2867 stop:
      0025EC 72 00 00 21 02   [ 2] 2868 	btjt flags,#FRUN,2$
      0025F1 4F               [ 1] 2869 	clr a
      0025F2 81               [ 4] 2870 	ret 
      0025F3                       2871 2$:	 
                                   2872 ; create space on cstack to save context 
      0025F3 AE 26 1A         [ 2] 2873 	ldw x,#break_point 
      0025F6 CD 09 5A         [ 4] 2874 	call puts 
      0025F9                       2875 	_drop 2 ;drop return address 
      0025F9 5B 02            [ 2]    1     addw sp,#2 
      0025FB                       2876 	_vars CTXT_SIZE ; context size 
      0025FB 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0025FD CD 1F 8D         [ 4] 2877 	call save_context 
      002600 AE 16 68         [ 2] 2878 	ldw x,#tib 
      002603 CF 00 04         [ 2] 2879 	ldw basicptr,x
      002606 7F               [ 1] 2880 	clr (x)
      002607 72 5F 00 03      [ 1] 2881 	clr count  
      00260B 5F               [ 1] 2882 	clrw x 
      00260C CF 00 00         [ 2] 2883 	ldw in.w,x
      00260F 72 11 00 21      [ 1] 2884 	bres flags,#FRUN 
      002613 72 18 00 21      [ 1] 2885 	bset flags,#FBREAK
      002617 CC 16 F5         [ 2] 2886 	jp interpreter 
      00261A 0A 62 72 65 61 6B 20  2887 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2888 
                                   2889 ;-----------------------
                                   2890 ; BASIC: NEW
                                   2891 ; from command line only 
                                   2892 ; free program memory
                                   2893 ; and clear variables 
                                   2894 ;------------------------
      002638                       2895 new: 
      002638 72 01 00 21 01   [ 2] 2896 	btjf flags,#FRUN,0$ 
      00263D 81               [ 4] 2897 	ret 
      00263E                       2898 0$:	
      00263E CD 14 A1         [ 4] 2899 	call clear_basic 
      002641 81               [ 4] 2900 	ret 
                                   2901 
                                   2902 ;-----------------------------------
                                   2903 ; BASIC: ERASE \E | \F 
                                   2904 ; erase all block in range from 
                                   2905 ;  'app_space' to FLASH end (0x20000)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                                   2906 ;  or all EEPROM 
                                   2907 ; that contains a non zero byte.  
                                   2908 ;-----------------------------------
                           000001  2909 	LIMIT=1 
                           000003  2910 	VSIZE = 3 
      002642                       2911 erase:
      002642 72 5F 00 17      [ 1] 2912 	clr farptr 
      002646                       2913 	_vars VSIZE 
      002646 52 03            [ 2]    1     sub sp,#VSIZE 
      002648 CD 17 4B         [ 4] 2914 	call next_token 
      00264B A1 04            [ 1] 2915 	cp a,#TK_CHAR 
      00264D 27 03            [ 1] 2916 	jreq 0$ 
      00264F CC 16 45         [ 2] 2917 	jp syntax_error
      002652 CD 17 9B         [ 4] 2918 0$: call get_char 
      002655 A4 DF            [ 1] 2919 	and a,#0XDF 
      002657 A1 45            [ 1] 2920 	cp a,#'E
      002659 26 0C            [ 1] 2921 	jrne 1$
      00265B AE 40 00         [ 2] 2922 	ldw x,#EEPROM_BASE 
      00265E CF 00 18         [ 2] 2923 	ldw farptr+1,x 
      002661 AE 47 FF         [ 2] 2924 	ldw x,#EEPROM_END
      002664 4F               [ 1] 2925 	clr a 
      002665 20 15            [ 2] 2926 	jra 3$ 
      002667 A1 46            [ 1] 2927 1$: cp a,#'F 
      002669 27 06            [ 1] 2928 	jreq 2$
      00266B AE 15 85         [ 2] 2929 	ldw x,#err_bad_value
      00266E CC 16 47         [ 2] 2930 	jp tb_error
      002671                       2931 2$:
      002671 AE 35 80         [ 2] 2932 	ldw x,#app_sign 
      002674 CF 00 18         [ 2] 2933 	ldw farptr+1,x 
      002677 A6 02            [ 1] 2934 	ld a,#(FLASH_END>>16)&0XFF 
      002679 AE 7F FF         [ 2] 2935 	ldw x,#FLASH_END&0xffff
      00267C                       2936 3$:
      00267C 6B 01            [ 1] 2937 	ld (LIMIT,sp),a 
      00267E 1F 02            [ 2] 2938 	ldw (LIMIT+1,sp),x 
                                   2939  ; operation done from RAM
                                   2940  ; copy code to RAM in tib   
      002680 CD 07 00         [ 4] 2941 	call move_erase_to_ram
      002683                       2942 4$:	 
      002683 CD 08 7D         [ 4] 2943     call scan_block 
      002686 27 08            [ 1] 2944 	jreq 5$  ; block already erased 
      002688 A6 45            [ 1] 2945     ld a,#'E 
      00268A CD 08 FD         [ 4] 2946     call putc 
      00268D CD 07 7E         [ 4] 2947 	call block_erase   
                                   2948 ; this block is clean, next  
      002690 AE 00 80         [ 2] 2949 5$:	ldw x,#BLOCK_SIZE
      002693 CD 08 6F         [ 4] 2950 	call incr_farptr
                                   2951 ; check limit, 24 bit substraction  	
      002696 7B 01            [ 1] 2952 	ld a,(LIMIT,sp)
      002698 1E 02            [ 2] 2953 	ldw x,(LIMIT+1,sp)
      00269A 72 B0 00 18      [ 2] 2954 	subw x,farptr+1
      00269E C2 00 17         [ 1] 2955 	sbc a,farptr 
      0026A1 22 E0            [ 1] 2956 	jrugt 4$ 
      0026A3 CD 14 A1         [ 4] 2957 9$: call clear_basic
      0026A6 1E 02            [ 2] 2958 	ldw x,(LIMIT+1,sp)
      0026A8 A3 47 FF         [ 2] 2959 	cpw x,#EEPROM_END
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0026AB 26 03            [ 1] 2960 	jrne 10$
      0026AD CD 1C 65         [ 4] 2961 	call func_eefree 
      0026B0                       2962 10$:
      0026B0                       2963 	_drop VSIZE 
      0026B0 5B 03            [ 2]    1     addw sp,#VSIZE 
      0026B2 81               [ 4] 2964 	ret 
                                   2965 	
                                   2966 
                                   2967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2968 ;  check for application signature 
                                   2969 ; output:
                                   2970 ;   Carry    0 app present 
                                   2971 ;            1 no app installed  
                                   2972 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026B3                       2973 qsign: 
      0026B3 CE 35 80         [ 2] 2974 	ldw x,app_sign 
      0026B6 C3 27 73         [ 2] 2975 	cpw x,SIGNATURE ; "BC" 
      0026B9 81               [ 4] 2976 	ret 
                                   2977 
                                   2978 ;--------------------------------------
                                   2979 ;  fill write buffer 
                                   2980 ;  input:
                                   2981 ;    y  point to output buffer 
                                   2982 ;    x  point to source 
                                   2983 ;    a  bytes to write in buffer 
                                   2984 ;  output:
                                   2985 ;    y   += A 
                                   2986 ;    X   += A 
                                   2987 ;    A   0 
                                   2988 ;---------------------------------------
      0026BA                       2989 fill_write_buffer:
      0026BA 88               [ 1] 2990 	push a 
      0026BB 4D               [ 1] 2991 	tnz a 
      0026BC 27 0A            [ 1] 2992 	jreq 9$ 
      0026BE F6               [ 1] 2993 1$: ld a,(x)
      0026BF 5C               [ 1] 2994 	incw x 
      0026C0 90 F7            [ 1] 2995 	ld (y),a 
      0026C2 90 5C            [ 1] 2996 	incw y 
      0026C4 0A 01            [ 1] 2997 	dec (1,sp) 
      0026C6 26 F6            [ 1] 2998 	jrne 1$ 
      0026C8 84               [ 1] 2999 9$:	pop a 
      0026C9 81               [ 4] 3000     ret 	
                                   3001 
                                   3002 ;--------------------------------------
                                   3003 ;  fill pad buffer with zero 
                                   3004 ;  input:
                                   3005 ;	none 
                                   3006 ;  output:
                                   3007 ;    y     buffer address  
                                   3008 ;--------------------------------------
      0026CA                       3009 clear_block_buffer:
      0026CA 88               [ 1] 3010 	push a 
      0026CB 90 AE 16 B8      [ 2] 3011 	ldw y,#block_buffer 
      0026CF 90 89            [ 2] 3012 	pushw y
      0026D1 A6 80            [ 1] 3013 	ld a,#BLOCK_SIZE   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0026D3 90 7F            [ 1] 3014 1$:	clr (y)
      0026D5 90 5C            [ 1] 3015 	incw y
      0026D7 4A               [ 1] 3016 	dec a  
      0026D8 26 F9            [ 1] 3017 	jrne 1$ 	
      0026DA 90 85            [ 2] 3018 9$: popw y 
      0026DC 84               [ 1] 3019 	pop a 			
      0026DD 81               [ 4] 3020 	ret 
                                   3021 
                                   3022 
                                   3023 ;---------------------------------------
                                   3024 ; BASIC: SAVE
                                   3025 ; write application from RAM to FLASH
                                   3026 ;--------------------------------------
                           000001  3027 	XTEMP=1
                           000003  3028 	COUNT=3  ; last count bytes written 
                           000004  3029 	CNT_LO=4 ; count low byte 
                           000005  3030 	TOWRITE=5 ; how bytes left to write  
                           000006  3031 	VSIZE=6 
      0026DE                       3032 save_app:
      0026DE 89               [ 2] 3033 	pushw x 
      0026DF 90 89            [ 2] 3034 	pushw y 
      0026E1                       3035 	_vars VSIZE
      0026E1 52 06            [ 2]    1     sub sp,#VSIZE 
      0026E3 CD 26 B3         [ 4] 3036 	call qsign 
      0026E6 26 09            [ 1] 3037 	jrne 1$
      0026E8 AE 27 75         [ 2] 3038 	ldw x,#CANT_DO 
      0026EB CD 09 5A         [ 4] 3039 	call puts 
      0026EE CC 27 6D         [ 2] 3040 	jp 9$
      0026F1                       3041 1$: 
      0026F1 CE 00 1A         [ 2] 3042 	ldw x,txtbgn
      0026F4 C3 00 1C         [ 2] 3043 	cpw x,txtend 
      0026F7 25 09            [ 1] 3044 	jrult 2$ 
      0026F9 AE 27 B7         [ 2] 3045 	ldw x,#NO_APP
      0026FC CD 09 5A         [ 4] 3046 	call puts 
      0026FF CC 27 6D         [ 2] 3047 	jp 9$
      002702                       3048 2$: 
                                   3049 ; block programming flash
                                   3050 ; must be done from RAM
                                   3051 ; moved in tib  
      002702 CD 07 40         [ 4] 3052 	call move_prg_to_ram
                                   3053 ; initialize farptr 
                                   3054 ; to app_sign address 
      002705 72 5F 00 17      [ 1] 3055 	clr farptr 
      002709 AE 35 80         [ 2] 3056 	ldw x,#app_sign 
      00270C CF 00 18         [ 2] 3057 	ldw farptr+1,x
                                   3058 ; initialize local variables 
      00270F CD 1D 7A         [ 4] 3059 	call prog_size
      002712 1F 05            [ 2] 3060 	ldw (TOWRITE,sp),x
      002714 0F 03            [ 1] 3061 	clr (COUNT,sp)
                                   3062 ; first bock 
                                   3063 ; containt signature 2 bytes 
                                   3064 ; and size 	2 bytes 
                                   3065 ; use Y as pointer to block_buffer
      002716 CD 26 CA         [ 4] 3066 	call clear_block_buffer ; -- y=*block_buffer	
                                   3067 ; write signature
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      002719 CE 27 73         [ 2] 3068 	ldw x,SIGNATURE ; "BC" 
      00271C 90 FF            [ 2] 3069 	ldw (y),x 
      00271E 72 A9 00 02      [ 2] 3070 	addw y,#2
      002722 1E 05            [ 2] 3071 	ldw x,(TOWRITE,sp)
      002724 90 FF            [ 2] 3072 	ldw (y),x
      002726 72 A9 00 02      [ 2] 3073 	addw y,#2   
      00272A A6 7C            [ 1] 3074 	ld a,#(BLOCK_SIZE-4)
      00272C 6B 04            [ 1] 3075 	ld (CNT_LO,sp),a 
      00272E A3 00 7C         [ 2] 3076 	cpw x,#(BLOCK_SIZE-4) 
      002731 22 01            [ 1] 3077 	jrugt 3$
      002733 9F               [ 1] 3078 	ld a,xl 
      002734 6B 04            [ 1] 3079 3$:	ld (CNT_LO,sp),a   
      002736 CE 00 1A         [ 2] 3080 	ldw x,txtbgn 
      002739 1F 01            [ 2] 3081 	ldw (XTEMP,sp),x 
      00273B                       3082 32$: 
      00273B 1E 01            [ 2] 3083 	ldw x,(XTEMP,sp)
      00273D 7B 04            [ 1] 3084 	ld a,(CNT_LO,sp)
      00273F CD 26 BA         [ 4] 3085 	call fill_write_buffer 
      002742 1F 01            [ 2] 3086 	ldw (XTEMP,sp),x 
      002744 AE 16 B8         [ 2] 3087 	ldw x,#block_buffer
      002747 CD 07 5A         [ 4] 3088 	call write_buffer
      00274A AE 00 80         [ 2] 3089 	ldw x,#BLOCK_SIZE 
      00274D CD 08 6F         [ 4] 3090 	call incr_farptr  
                                   3091 ; following blocks 
      002750 1E 01            [ 2] 3092 	ldw x,(XTEMP,sp)
      002752 C3 00 1C         [ 2] 3093 	cpw x,txtend 
      002755 24 16            [ 1] 3094 	jruge 9$ 
      002757 1E 05            [ 2] 3095 	ldw x,(TOWRITE,sp)
      002759 72 F0 03         [ 2] 3096 	subw x,(COUNT,sp)
      00275C 1F 05            [ 2] 3097 	ldw (TOWRITE,sp),x 
      00275E A6 80            [ 1] 3098 	ld a,#BLOCK_SIZE 
      002760 A3 00 80         [ 2] 3099 	cpw x,#BLOCK_SIZE 
      002763 24 01            [ 1] 3100 	jruge 4$ 
      002765 9F               [ 1] 3101 	ld a,xl 
      002766 6B 04            [ 1] 3102 4$:	ld (CNT_LO,sp),a 
      002768 CD 26 CA         [ 4] 3103 	call clear_block_buffer 
      00276B 20 CE            [ 2] 3104 	jra 32$ 
      00276D                       3105 9$:	_drop VSIZE 
      00276D 5B 06            [ 2]    1     addw sp,#VSIZE 
      00276F 90 85            [ 2] 3106     popw y 
      002771 85               [ 2] 3107 	popw x 
      002772 81               [ 4] 3108 	ret 
                                   3109 
                                   3110 
      002773 42 43                 3111 SIGNATURE: .ascii "BC"
      002775 43 61 6E 27 74 20 66  3112 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      0027B7 4E 6F 20 61 70 70 6C  3113 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3114 
                                   3115 ;---------------------
                                   3116 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3117 ; write 1 or more byte to FLASH or EEPROM
                                   3118 ; starting at address  
                                   3119 ; input:
                                   3120 ;   expr1  	is address 
                                   3121 ;   expr2,...,exprn   are bytes to write
                                   3122 ; output:
                                   3123 ;   none 
                                   3124 ;---------------------
      0027CD                       3125 write:
      0027CD CD 1A 37         [ 4] 3126 	call expression
      0027D0 A1 84            [ 1] 3127 	cp a,#TK_INTGR 
      0027D2 27 03            [ 1] 3128 	jreq 0$
      0027D4 CC 16 45         [ 2] 3129 	jp syntax_error
      0027D7                       3130 0$: _xpop 
      0027D7 90 F6            [ 1]    1     ld a,(y)
      0027D9 93               [ 1]    2     ldw x,y 
      0027DA EE 01            [ 2]    3     ldw x,(1,x)
      0027DC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027E0 C7 00 17         [ 1] 3131 	ld farptr,a 
      0027E3 CF 00 18         [ 2] 3132 	ldw ptr16,x 
      0027E6                       3133 1$:	
      0027E6 CD 17 4B         [ 4] 3134 	call next_token 
      0027E9 A1 08            [ 1] 3135 	cp a,#TK_COMMA 
      0027EB 27 02            [ 1] 3136 	jreq 2$ 
      0027ED 20 20            [ 2] 3137 	jra 9$ ; no more data 
      0027EF CD 1A 37         [ 4] 3138 2$:	call expression
      0027F2 A1 84            [ 1] 3139 	cp a,#TK_INTGR
      0027F4 27 03            [ 1] 3140 	jreq 3$
      0027F6 CC 16 45         [ 2] 3141 	jp syntax_error
      0027F9                       3142 3$:	_xpop 
      0027F9 90 F6            [ 1]    1     ld a,(y)
      0027FB 93               [ 1]    2     ldw x,y 
      0027FC EE 01            [ 2]    3     ldw x,(1,x)
      0027FE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002802 9F               [ 1] 3143 	ld a,xl 
      002803 5F               [ 1] 3144 	clrw x 
      002804 CD 07 9F         [ 4] 3145 	call write_byte
      002807 AE 00 01         [ 2] 3146 	ldw x,#1 
      00280A CD 08 6F         [ 4] 3147 	call incr_farptr 
      00280D 20 D7            [ 2] 3148 	jra 1$ 
      00280F                       3149 9$:
      00280F 81               [ 4] 3150 	ret 
                                   3151 
                                   3152 
                                   3153 ;---------------------
                                   3154 ;BASIC: CHAR(expr)
                                   3155 ; évaluate expression 
                                   3156 ; and take the 7 least 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3157 ; bits as ASCII character
                                   3158 ; output: 
                                   3159 ; 	A char 
                                   3160 ;---------------------
      002810                       3161 char:
      002810 CD 19 00         [ 4] 3162 	call func_args 
      002813 A1 01            [ 1] 3163 	cp a,#1
      002815 27 03            [ 1] 3164 	jreq 1$
      002817 CC 16 45         [ 2] 3165 	jp syntax_error
      00281A                       3166 1$:	_xpop
      00281A 90 F6            [ 1]    1     ld a,(y)
      00281C 93               [ 1]    2     ldw x,y 
      00281D EE 01            [ 2]    3     ldw x,(1,x)
      00281F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002823 9F               [ 1] 3167 	ld a,xl
      002824 A4 7F            [ 1] 3168 	and a,#0x7f 
      002826 81               [ 4] 3169 	ret
                                   3170 
                                   3171 ;---------------------
                                   3172 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3173 ; extract first character 
                                   3174 ; of string argument 
                                   3175 ; output:
                                   3176 ;    A:X    int24 
                                   3177 ;---------------------
      002827                       3178 ascii:
      002827 A6 06            [ 1] 3179 	ld a,#TK_LPAREN
      002829 CD 18 F3         [ 4] 3180 	call expect 
      00282C CD 17 4B         [ 4] 3181 	call next_token 
      00282F A1 02            [ 1] 3182 	cp a,#TK_QSTR 
      002831 27 0E            [ 1] 3183 	jreq 1$
      002833 A1 04            [ 1] 3184 	cp a,#TK_CHAR 
      002835 27 12            [ 1] 3185 	jreq 2$ 
      002837 A1 82            [ 1] 3186 	cp a,#TK_CFUNC 
      002839 27 03            [ 1] 3187 	jreq 0$
      00283B CC 16 45         [ 2] 3188 	jp syntax_error
      00283E                       3189 0$: ; cfunc 
      00283E FD               [ 4] 3190 	call (x)
      00283F 20 0B            [ 2] 3191 	jra 3$
      002841                       3192 1$: ; quoted string 
      002841 F6               [ 1] 3193 	ld a,(x)
      002842 88               [ 1] 3194 	push a  
      002843 CD 17 72         [ 4] 3195 	call skip_string
      002846 84               [ 1] 3196 	pop a  	
      002847 20 03            [ 2] 3197 	jra 3$ 
      002849                       3198 2$: ; character 
      002849 CD 17 9B         [ 4] 3199 	call get_char 
      00284C 5F               [ 1] 3200 3$:	clrw x 
      00284D 02               [ 1] 3201 	rlwa x   
      00284E                       3202 4$:	_xpush  
      00284E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002852 90 F7            [ 1]    2     ld (y),a 
      002854 90 EF 01         [ 2]    3     ldw (1,y),x 
      002857 A6 07            [ 1] 3203 	ld a,#TK_RPAREN 
      002859 CD 18 F3         [ 4] 3204 	call expect
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      00285C                       3205 9$:	
      00285C                       3206 	_xpop  
      00285C 90 F6            [ 1]    1     ld a,(y)
      00285E 93               [ 1]    2     ldw x,y 
      00285F EE 01            [ 2]    3     ldw x,(1,x)
      002861 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002865 81               [ 4] 3207 	ret 
                                   3208 
                                   3209 ;---------------------
                                   3210 ;BASIC: KEY
                                   3211 ; wait for a character 
                                   3212 ; received from STDIN 
                                   3213 ; input:
                                   3214 ;	none 
                                   3215 ; output:
                                   3216 ;	a	 character 
                                   3217 ;---------------------
      002866                       3218 key:
      002866 CD 09 0D         [ 4] 3219 	call getc 
      002869 81               [ 4] 3220 	ret
                                   3221 
                                   3222 ;----------------------
                                   3223 ; BASIC: QKEY
                                   3224 ; Return true if there 
                                   3225 ; is a character in 
                                   3226 ; waiting in STDIN 
                                   3227 ; input:
                                   3228 ;  none 
                                   3229 ; output:
                                   3230 ;   A     0|-1
                                   3231 ;-----------------------
      00286A                       3232 qkey:: 
      00286A 5F               [ 1] 3233 	clrw x 
      00286B C6 00 2D         [ 1] 3234 	ld a,rx1_head
      00286E C0 00 2E         [ 1] 3235 	sub a,rx1_tail 
      002871 27 03            [ 1] 3236 	jreq 9$ 
      002873 53               [ 2] 3237 	cplw x
      002874 A6 FF            [ 1] 3238 	ld a,#255    
      002876                       3239 9$: 
      002876 81               [ 4] 3240 	ret 
                                   3241 
                                   3242 ;---------------------
                                   3243 ; BASIC: GPIO(expr,reg)
                                   3244 ; return gpio address 
                                   3245 ; expr {0..8}
                                   3246 ; input:
                                   3247 ;   none 
                                   3248 ; output:
                                   3249 ;   X 		gpio register address
                                   3250 ;----------------------------
                                   3251 ;	N=PORT
                                   3252 ;	T=REG 
      002877                       3253 gpio:
      002877 CD 19 00         [ 4] 3254 	call func_args 
      00287A A1 02            [ 1] 3255 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      00287C 27 03            [ 1] 3256 	jreq 1$
      00287E CC 16 45         [ 2] 3257 	jp syntax_error  
      002881                       3258 1$:	_at_next 
      002881 90 E6 03         [ 1]    1     ld a,(3,y)
      002884 93               [ 1]    2     ldw x,y 
      002885 EE 04            [ 2]    3     ldw x,(4,x)
      002887 5D               [ 2] 3259 	tnzw x 
      002888 2B 23            [ 1] 3260 	jrmi bad_port
      00288A A3 00 09         [ 2] 3261 	cpw x,#9
      00288D 2A 1E            [ 1] 3262 	jrpl bad_port
      00288F A6 05            [ 1] 3263 	ld a,#5
      002891 42               [ 4] 3264 	mul x,a
      002892 1C 50 00         [ 2] 3265 	addw x,#GPIO_BASE 
      002895 89               [ 2] 3266 	pushw x 
      002896                       3267 	_xpop
      002896 90 F6            [ 1]    1     ld a,(y)
      002898 93               [ 1]    2     ldw x,y 
      002899 EE 01            [ 2]    3     ldw x,(1,x)
      00289B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00289F 72 FB 01         [ 2] 3268 	addw x,(1,sp)
      0028A2                       3269 	_drop 2 
      0028A2 5B 02            [ 2]    1     addw sp,#2 
      0028A4 4F               [ 1] 3270 	clr a 
      0028A5                       3271 	_store_top 	
      0028A5 90 F7            [ 1]    1     ld (y),a 
      0028A7 90 EF 01         [ 2]    2     ldw (1,y),x     
      0028AA A6 84            [ 1] 3272 	ld a,#TK_INTGR
      0028AC 81               [ 4] 3273 	ret
      0028AD                       3274 bad_port:
      0028AD A6 0A            [ 1] 3275 	ld a,#ERR_BAD_VALUE
      0028AF CC 16 47         [ 2] 3276 	jp tb_error
                                   3277 
                                   3278 
                                   3279 ;-------------------------
                                   3280 ; BASIC: UFLASH 
                                   3281 ; return free flash address
                                   3282 ; input:
                                   3283 ;  none 
                                   3284 ; output:
                                   3285 ;	A		TK_INTGR
                                   3286 ;   xstack	free address 
                                   3287 ;---------------------------
      0028B2                       3288 uflash:
      0028B2 CE 35 80         [ 2] 3289 	ldw x,app_sign
      0028B5 A3 10 93         [ 2] 3290 	cpw x,#4243 ; signature "BC" 
      0028B8 27 08            [ 1] 3291 	jreq 1$
      0028BA CE 35 82         [ 2] 3292 	ldw x,app_size 
      0028BD 1C 35 84         [ 2] 3293 	addw x,#app
      0028C0 20 03            [ 2] 3294 	jra 2$
      0028C2 AE 35 80         [ 2] 3295 1$:	ldw x,#app_space 
      0028C5 4F               [ 1] 3296 2$:	clr a 
      0028C6 81               [ 4] 3297 	ret 
                                   3298 
                                   3299 
                                   3300 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3301 ; BASIC: USR(addr[,arg])
                                   3302 ; execute a function written 
                                   3303 ; in binary code.
                                   3304 ; binary fonction should 
                                   3305 ; return token attribute in A 
                                   3306 ; and value in YL:X. 
                                   3307 ; input:
                                   3308 ;   addr	routine address 
                                   3309 ;   arg 	is an optional argument 
                                   3310 ; output:
                                   3311 ;   A 		token attribute 
                                   3312 ;   xstack  returned value 
                                   3313 ;---------------------
      0028C7                       3314 usr:
      0028C7 89               [ 2] 3315 	pushw x 
      0028C8 90 89            [ 2] 3316 	pushw y 	
      0028CA CD 19 00         [ 4] 3317 	call func_args 
      0028CD A1 01            [ 1] 3318 	cp a,#1 
      0028CF 27 07            [ 1] 3319 	jreq 1$
      0028D1 A1 02            [ 1] 3320 	cp a,#2
      0028D3 27 03            [ 1] 3321 	jreq 1$  
      0028D5 CC 16 45         [ 2] 3322 	jp syntax_error 
      0028D8 88               [ 1] 3323 1$: push a 
      0028D9                       3324 	_xpop 
      0028D9 90 F6            [ 1]    1     ld a,(y)
      0028DB 93               [ 1]    2     ldw x,y 
      0028DC EE 01            [ 2]    3     ldw x,(1,x)
      0028DE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028E2 90 93            [ 1] 3325 	ldw y,x  ; arg|addr 
      0028E4 84               [ 1] 3326     pop a 
      0028E5 A1 01            [ 1] 3327 	cp a,#1 
      0028E7 27 0A            [ 1] 3328 	jreq 3$
      0028E9                       3329 	_xpop  ; x=code addr  
      0028E9 90 F6            [ 1]    1     ld a,(y)
      0028EB 93               [ 1]    2     ldw x,y 
      0028EC EE 01            [ 2]    3     ldw x,(1,x)
      0028EE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028F2 51               [ 1] 3330 	exgw x,y ; y=code addr, x=arg 
      0028F3 90 FD            [ 4] 3331 3$: call (y)
      0028F5 88               [ 1] 3332 	push a 
      0028F6 90 9F            [ 1] 3333 	ld a,yl  
      0028F8                       3334 	_xpush 
      0028F8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0028FC 90 F7            [ 1]    2     ld (y),a 
      0028FE 90 EF 01         [ 2]    3     ldw (1,y),x 
      002901 84               [ 1] 3335 	pop a 
      002902 90 85            [ 2] 3336 	popw y 
      002904 85               [ 2] 3337 	popw x 
      002905 81               [ 4] 3338 	ret 
                                   3339 
                                   3340 
                                   3341 ;------------------------------
                                   3342 ; BASIC: BYE 
                                   3343 ; halt mcu in its lowest power mode 
                                   3344 ; wait for reset or external interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3345 ; do a cold start on wakeup.
                                   3346 ;------------------------------
      002906                       3347 bye:
      002906 72 0D 52 30 FB   [ 2] 3348 	btjf UART1_SR,#UART_SR_TC,.
      00290B 8E               [10] 3349 	halt
      00290C CC 00 B2         [ 2] 3350 	jp cold_start  
                                   3351 
                                   3352 ;----------------------------------
                                   3353 ; BASIC: SLEEP 
                                   3354 ; halt mcu until reset or external
                                   3355 ; interrupt.
                                   3356 ; Resume progam after SLEEP command
                                   3357 ;----------------------------------
      00290F                       3358 sleep:
      00290F 72 0D 52 30 FB   [ 2] 3359 	btjf UART1_SR,#UART_SR_TC,.
      002914 72 16 00 21      [ 1] 3360 	bset flags,#FSLEEP
      002918 8E               [10] 3361 	halt 
      002919 81               [ 4] 3362 	ret 
                                   3363 
                                   3364 ;-------------------------------
                                   3365 ; BASIC: PAUSE expr 
                                   3366 ; suspend execution for n msec.
                                   3367 ; input:
                                   3368 ;	none
                                   3369 ; output:
                                   3370 ;	none 
                                   3371 ;------------------------------
      00291A                       3372 pause:
      00291A CD 1A 37         [ 4] 3373 	call expression
      00291D A1 84            [ 1] 3374 	cp a,#TK_INTGR
      00291F 27 03            [ 1] 3375 	jreq 1$ 
      002921 CC 16 45         [ 2] 3376 	jp syntax_error
      002924                       3377 1$: _xpop 
      002924 90 F6            [ 1]    1     ld a,(y)
      002926 93               [ 1]    2     ldw x,y 
      002927 EE 01            [ 2]    3     ldw x,(1,x)
      002929 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00292D                       3378 pause02:
      00292D CF 00 11         [ 2] 3379 	ldw timer,x 
      002930 CE 00 11         [ 2] 3380 1$: ldw x,timer 
      002933 5D               [ 2] 3381 	tnzw x 
      002934 27 03            [ 1] 3382 	jreq 2$
      002936 8F               [10] 3383 	wfi 
      002937 26 F7            [ 1] 3384 	jrne 1$
      002939 4F               [ 1] 3385 2$:	clr a 
      00293A 81               [ 4] 3386 	ret 
                                   3387 
                                   3388 ;------------------------------
                                   3389 ; BASIC: AWU expr
                                   3390 ; halt mcu for 'expr' milliseconds
                                   3391 ; use Auto wakeup peripheral
                                   3392 ; all oscillators stopped except LSI
                                   3393 ; range: 1ms - 511ms
                                   3394 ; input:
                                   3395 ;  none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3396 ; output:
                                   3397 ;  none:
                                   3398 ;------------------------------
      00293B                       3399 awu:
      00293B CD 1A 37         [ 4] 3400   call expression
      00293E A1 84            [ 1] 3401   cp a,#TK_INTGR
      002940 27 03            [ 1] 3402   jreq 1$
      002942 CC 16 45         [ 2] 3403   jp syntax_error
      002945                       3404 1$: _xpop 
      002945 90 F6            [ 1]    1     ld a,(y)
      002947 93               [ 1]    2     ldw x,y 
      002948 EE 01            [ 2]    3     ldw x,(1,x)
      00294A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00294E                       3405 awu02:
      00294E A3 14 00         [ 2] 3406   cpw x,#5120
      002951 2B 0C            [ 1] 3407   jrmi 1$ 
      002953 35 0F 50 F2      [ 1] 3408   mov AWU_TBR,#15 
      002957 A6 1E            [ 1] 3409   ld a,#30
      002959 62               [ 2] 3410   div x,a
      00295A A6 10            [ 1] 3411   ld a,#16
      00295C 62               [ 2] 3412   div x,a 
      00295D 20 1E            [ 2] 3413   jra 4$
      00295F                       3414 1$: 
      00295F A3 08 00         [ 2] 3415   cpw x,#2048
      002962 2B 09            [ 1] 3416   jrmi 2$ 
      002964 35 0E 50 F2      [ 1] 3417   mov AWU_TBR,#14
      002968 A6 50            [ 1] 3418   ld a,#80
      00296A 62               [ 2] 3419   div x,a 
      00296B 20 10            [ 2] 3420   jra 4$   
      00296D                       3421 2$:
      00296D 35 07 50 F2      [ 1] 3422   mov AWU_TBR,#7
      002971                       3423 3$:  
                                   3424 ; while X > 64  divide by 2 and increment AWU_TBR 
      002971 A3 00 40         [ 2] 3425   cpw x,#64 
      002974 23 07            [ 2] 3426   jrule 4$ 
      002976 72 5C 50 F2      [ 1] 3427   inc AWU_TBR 
      00297A 54               [ 2] 3428   srlw x 
      00297B 20 F4            [ 2] 3429   jra 3$ 
      00297D                       3430 4$:
      00297D 9F               [ 1] 3431   ld a, xl
      00297E 4A               [ 1] 3432   dec a 
      00297F 27 01            [ 1] 3433   jreq 5$
      002981 4A               [ 1] 3434   dec a 	
      002982                       3435 5$: 
      002982 A4 3E            [ 1] 3436   and a,#0x3e 
      002984 C7 50 F1         [ 1] 3437   ld AWU_APR,a 
      002987 72 18 50 F0      [ 1] 3438   bset AWU_CSR,#AWU_CSR_AWUEN
      00298B 8E               [10] 3439   halt 
                                   3440 
      00298C 81               [ 4] 3441   ret 
                                   3442 
                                   3443 ;------------------------------
                                   3444 ; BASIC: TICKS
                                   3445 ; return msec ticks counter value 
                                   3446 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3447 ; 	none 
                                   3448 ; output:
                                   3449 ;	X 		TK_INTGR
                                   3450 ;-------------------------------
      00298D                       3451 get_ticks:
      00298D CE 00 0F         [ 2] 3452 	ldw x,ticks 
      002990 4F               [ 1] 3453 	clr a 
      002991                       3454 	_xpush 
      002991 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002995 90 F7            [ 1]    2     ld (y),a 
      002997 90 EF 01         [ 2]    3     ldw (1,y),x 
      00299A A6 84            [ 1] 3455 	ld a,#TK_INTGR
      00299C 81               [ 4] 3456 	ret 
                                   3457 
                                   3458 ;------------------------------
                                   3459 ; BASIC: ABS(expr)
                                   3460 ; return absolute value of expr.
                                   3461 ; input:
                                   3462 ;   none
                                   3463 ; output:
                                   3464 ;   xstack    positive int24 
                                   3465 ;-------------------------------
      00299D                       3466 abs:
      00299D CD 19 00         [ 4] 3467 	call func_args 
      0029A0 A1 01            [ 1] 3468 	cp a,#1 
      0029A2 27 03            [ 1] 3469 	jreq 0$ 
      0029A4 CC 16 45         [ 2] 3470 	jp syntax_error
      0029A7                       3471 0$:  
      0029A7 CD 01 A3         [ 4] 3472 	call abs24 
      0029AA A6 84            [ 1] 3473     ld a,#TK_INTGR 
      0029AC 81               [ 4] 3474 	ret 
                                   3475 
                                   3476 ;------------------------------
                                   3477 ; BASIC: AND(expr1,expr2)
                                   3478 ; Apply bit AND relation between
                                   3479 ; the 2 arguments, i.e expr1 & expr2 
                                   3480 ; output:
                                   3481 ; 	A 		TK_INTGR
                                   3482 ;   X 		result 
                                   3483 ;------------------------------
      0029AD                       3484 bit_and: ; i1 i2 -- i1 & i2 
      0029AD CD 19 00         [ 4] 3485 	call func_args 
      0029B0 A1 02            [ 1] 3486 	cp a,#2
      0029B2 27 03            [ 1] 3487 	jreq 1$
      0029B4 CC 16 45         [ 2] 3488 	jp syntax_error 
      0029B7                       3489 1$:	_xpop 
      0029B7 90 F6            [ 1]    1     ld a,(y)
      0029B9 93               [ 1]    2     ldw x,y 
      0029BA EE 01            [ 2]    3     ldw x,(1,x)
      0029BC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029C0 89               [ 2] 3490     pushw x 
      0029C1 88               [ 1] 3491 	push  a 
      0029C2                       3492 	_at_top 
      0029C2 90 F6            [ 1]    1     ld a,(y)
      0029C4 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029C5 EE 01            [ 2]    3     ldw x,(1,x)
      0029C7 14 01            [ 1] 3493 	and a,(1,sp)
      0029C9 02               [ 1] 3494 	rlwa x 
      0029CA 14 02            [ 1] 3495 	and a,(2,sp)
      0029CC 02               [ 1] 3496 	rlwa x 
      0029CD 14 03            [ 1] 3497 	and a,(3,sp)
      0029CF 02               [ 1] 3498 	rlwa x 
      0029D0                       3499 	_drop 3 
      0029D0 5B 03            [ 2]    1     addw sp,#3 
      0029D2                       3500 	_store_top 
      0029D2 90 F7            [ 1]    1     ld (y),a 
      0029D4 90 EF 01         [ 2]    2     ldw (1,y),x     
      0029D7 A6 84            [ 1] 3501 	ld a,#TK_INTGR
      0029D9 81               [ 4] 3502 	ret
                                   3503 
                                   3504 ;------------------------------
                                   3505 ; BASIC: OR(expr1,expr2)
                                   3506 ; Apply bit OR relation between
                                   3507 ; the 2 arguments, i.e expr1 | expr2 
                                   3508 ; output:
                                   3509 ; 	A 		TK_INTGR
                                   3510 ;   X 		result 
                                   3511 ;------------------------------
      0029DA                       3512 bit_or:
      0029DA CD 19 00         [ 4] 3513 	call func_args 
      0029DD A1 02            [ 1] 3514 	cp a,#2
      0029DF 27 03            [ 1] 3515 	jreq 1$
      0029E1 CC 16 45         [ 2] 3516 	jp syntax_error 
      0029E4                       3517 1$:	_xpop 
      0029E4 90 F6            [ 1]    1     ld a,(y)
      0029E6 93               [ 1]    2     ldw x,y 
      0029E7 EE 01            [ 2]    3     ldw x,(1,x)
      0029E9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029ED 89               [ 2] 3518     pushw x 
      0029EE 88               [ 1] 3519 	push  a 
      0029EF                       3520 	_at_top 
      0029EF 90 F6            [ 1]    1     ld a,(y)
      0029F1 93               [ 1]    2     ldw x,y 
      0029F2 EE 01            [ 2]    3     ldw x,(1,x)
      0029F4 1A 01            [ 1] 3521 	or a,(1,sp)
      0029F6 90 97            [ 1] 3522 	ld yl,a 
      0029F8 9E               [ 1] 3523 	ld a,xh 
      0029F9 1A 02            [ 1] 3524 	or a,(2,sp)
      0029FB 95               [ 1] 3525 	ld xh,a 
      0029FC 9F               [ 1] 3526 	ld a,xl 
      0029FD 1A 03            [ 1] 3527 	or a,(3,sp)
      0029FF 97               [ 1] 3528 	ld xl,a 
      002A00 90 9F            [ 1] 3529 	ld a,yl 
      002A02                       3530 	_drop 3 
      002A02 5B 03            [ 2]    1     addw sp,#3 
      002A04                       3531 	_store_top 
      002A04 90 F7            [ 1]    1     ld (y),a 
      002A06 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A09 A6 84            [ 1] 3532 	ld a,#TK_INTGR
      002A0B 81               [ 4] 3533 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3534 
                                   3535 ;------------------------------
                                   3536 ; BASIC: XOR(expr1,expr2)
                                   3537 ; Apply bit XOR relation between
                                   3538 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3539 ; output:
                                   3540 ; 	A 		TK_INTGR
                                   3541 ;   X 		result 
                                   3542 ;------------------------------
      002A0C                       3543 bit_xor:
      002A0C CD 19 00         [ 4] 3544 	call func_args 
      002A0F A1 02            [ 1] 3545 	cp a,#2
      002A11 27 03            [ 1] 3546 	jreq 1$
      002A13 CC 16 45         [ 2] 3547 	jp syntax_error 
      002A16                       3548 1$:	_xpop 
      002A16 90 F6            [ 1]    1     ld a,(y)
      002A18 93               [ 1]    2     ldw x,y 
      002A19 EE 01            [ 2]    3     ldw x,(1,x)
      002A1B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A1F 89               [ 2] 3549     pushw x 
      002A20 88               [ 1] 3550 	push  a 
      002A21                       3551 	_at_top 
      002A21 90 F6            [ 1]    1     ld a,(y)
      002A23 93               [ 1]    2     ldw x,y 
      002A24 EE 01            [ 2]    3     ldw x,(1,x)
      002A26 18 01            [ 1] 3552 	xor a,(1,sp)
      002A28 90 97            [ 1] 3553 	ld yl,a 
      002A2A 9E               [ 1] 3554 	ld a,xh 
      002A2B 18 02            [ 1] 3555 	xor a,(2,sp)
      002A2D 95               [ 1] 3556 	ld xh,a 
      002A2E 9F               [ 1] 3557 	ld a,xl 
      002A2F 18 03            [ 1] 3558 	xor a,(3,sp)
      002A31 97               [ 1] 3559 	ld xl,a 
      002A32 90 9F            [ 1] 3560 	ld a,yl 
      002A34                       3561 	_drop 3 
      002A34 5B 03            [ 2]    1     addw sp,#3 
      002A36                       3562 	_store_top 
      002A36 90 F7            [ 1]    1     ld (y),a 
      002A38 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A3B A6 84            [ 1] 3563 	ld a,#TK_INTGR
      002A3D 81               [ 4] 3564 	ret
                                   3565 
                                   3566 ;------------------------------
                                   3567 ; BASIC: LSHIFT(expr1,expr2)
                                   3568 ; logical shift left expr1 by 
                                   3569 ; expr2 bits 
                                   3570 ; output:
                                   3571 ; 	A 		TK_INTGR
                                   3572 ;   X 		result 
                                   3573 ;------------------------------
      002A3E                       3574 lshift:
      002A3E CD 19 00         [ 4] 3575 	call func_args
      002A41 A1 02            [ 1] 3576 	cp a,#2 
      002A43 27 03            [ 1] 3577 	jreq 1$
      002A45 CC 16 45         [ 2] 3578 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      002A48                       3579 1$: _xpop 
      002A48 90 F6            [ 1]    1     ld a,(y)
      002A4A 93               [ 1]    2     ldw x,y 
      002A4B EE 01            [ 2]    3     ldw x,(1,x)
      002A4D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A51 90 93            [ 1] 3580     ldw y,x    
      002A53                       3581 	_at_top  ; T@ 
      002A53 90 F6            [ 1]    1     ld a,(y)
      002A55 93               [ 1]    2     ldw x,y 
      002A56 EE 01            [ 2]    3     ldw x,(1,x)
      002A58 90 5D            [ 2] 3582 	tnzw y 
      002A5A 27 07            [ 1] 3583 	jreq 4$
      002A5C 98               [ 1] 3584 2$:	rcf 
      002A5D 59               [ 2] 3585 	rlcw x 
      002A5E 49               [ 1] 3586 	rlc a 
      002A5F 90 5A            [ 2] 3587 	decw y 
      002A61 26 F9            [ 1] 3588 	jrne 2$
      002A63                       3589 4$: _store_top  ; T! 
      002A63 90 F7            [ 1]    1     ld (y),a 
      002A65 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A68 A6 84            [ 1] 3590 	ld a,#TK_INTGR
      002A6A 81               [ 4] 3591 	ret
                                   3592 
                                   3593 ;------------------------------
                                   3594 ; BASIC: RSHIFT(expr1,expr2)
                                   3595 ; logical shift right expr1 by 
                                   3596 ; expr2 bits.
                                   3597 ; output:
                                   3598 ; 	A 		TK_INTGR
                                   3599 ;   X 		result 
                                   3600 ;------------------------------
      002A6B                       3601 rshift:
      002A6B CD 19 00         [ 4] 3602 	call func_args
      002A6E A1 02            [ 1] 3603 	cp a,#2 
      002A70 27 03            [ 1] 3604 	jreq 1$
      002A72 CC 16 45         [ 2] 3605 	jp syntax_error
      002A75                       3606 1$: _xpop 
      002A75 90 F6            [ 1]    1     ld a,(y)
      002A77 93               [ 1]    2     ldw x,y 
      002A78 EE 01            [ 2]    3     ldw x,(1,x)
      002A7A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A7E 90 93            [ 1] 3607     ldw y,x   
      002A80                       3608 	_at_top  ; T@  
      002A80 90 F6            [ 1]    1     ld a,(y)
      002A82 93               [ 1]    2     ldw x,y 
      002A83 EE 01            [ 2]    3     ldw x,(1,x)
      002A85 90 5D            [ 2] 3609 	tnzw y 
      002A87 27 07            [ 1] 3610 	jreq 4$
      002A89 98               [ 1] 3611 2$:	rcf 
      002A8A 56               [ 2] 3612 	rrcw x
      002A8B 46               [ 1] 3613 	rrc a  
      002A8C 90 5A            [ 2] 3614 	decw y 
      002A8E 26 F9            [ 1] 3615 	jrne 2$
      002A90                       3616 4$: _store_top  ; T! 
      002A90 90 F7            [ 1]    1     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002A92 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A95 A6 84            [ 1] 3617 	ld a,#TK_INTGR
      002A97 81               [ 4] 3618 	ret
                                   3619 
                                   3620 ;--------------------------
                                   3621 ; BASIC: FCPU integer
                                   3622 ; set CPU frequency 
                                   3623 ;-------------------------- 
                                   3624 
      002A98                       3625 fcpu:
      002A98 A6 84            [ 1] 3626 	ld a,#TK_INTGR
      002A9A CD 18 F3         [ 4] 3627 	call expect 
      002A9D CD 17 8B         [ 4] 3628 	call get_int24 
      002AA0 9F               [ 1] 3629 	ld a,xl 
      002AA1 A4 07            [ 1] 3630 	and a,#7 
      002AA3 C7 50 C6         [ 1] 3631 	ld CLK_CKDIVR,a 
      002AA6 81               [ 4] 3632 	ret 
                                   3633 
                                   3634 ;------------------------------
                                   3635 ; BASIC: PMODE pin#, mode 
                                   3636 ; Arduino pin. 
                                   3637 ; define pin as input or output
                                   3638 ; pin#: {0..15}
                                   3639 ; mode: INPUT|OUTPUT  
                                   3640 ;------------------------------
                           000001  3641 	PINNO=1
                           000001  3642 	VSIZE=1
      002AA7                       3643 pin_mode:
      002AA7                       3644 	_vars VSIZE 
      002AA7 52 01            [ 2]    1     sub sp,#VSIZE 
      002AA9 CD 19 05         [ 4] 3645 	call arg_list 
      002AAC A1 02            [ 1] 3646 	cp a,#2 
      002AAE 27 03            [ 1] 3647 	jreq 1$
      002AB0 CC 16 45         [ 2] 3648 	jp syntax_error 
      002AB3                       3649 1$: _xpop 
      002AB3 90 F6            [ 1]    1     ld a,(y)
      002AB5 93               [ 1]    2     ldw x,y 
      002AB6 EE 01            [ 2]    3     ldw x,(1,x)
      002AB8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002ABC 90 93            [ 1] 3650 	ldw y,x ; mode 
      002ABE                       3651 	_xpop ; Dx pin 
      002ABE 90 F6            [ 1]    1     ld a,(y)
      002AC0 93               [ 1]    2     ldw x,y 
      002AC1 EE 01            [ 2]    3     ldw x,(1,x)
      002AC3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AC7 CD 2B 04         [ 4] 3652 	call select_pin 
      002ACA 6B 01            [ 1] 3653 	ld (PINNO,sp),a  
      002ACC A6 01            [ 1] 3654 	ld a,#1 
      002ACE 0D 01            [ 1] 3655 	tnz (PINNO,sp)
      002AD0 27 0D            [ 1] 3656 	jreq 4$
      002AD2 48               [ 1] 3657 2$:	sll a 
      002AD3 0A 01            [ 1] 3658 	dec (PINNO,sp)
      002AD5 26 FB            [ 1] 3659 	jrne 2$ 
      002AD7 6B 01            [ 1] 3660 	ld (PINNO,sp),a
      002AD9 7B 01            [ 1] 3661 	ld a,(PINNO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002ADB EA 03            [ 1] 3662 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002ADD E7 03            [ 1] 3663 	ld (GPIO_CR1,x),a 
      002ADF 90 A3 00 01      [ 2] 3664 4$:	cpw y,#OUTP 
      002AE3 27 10            [ 1] 3665 	jreq 6$
                                   3666 ; input mode
                                   3667 ; disable external interrupt 
      002AE5 7B 01            [ 1] 3668 	ld a,(PINNO,sp)
      002AE7 43               [ 1] 3669 	cpl a 
      002AE8 E4 04            [ 1] 3670 	and a,(GPIO_CR2,x)
      002AEA E7 04            [ 1] 3671 	ld (GPIO_CR2,x),a 
                                   3672 ;clear bit in DDR for input mode 
      002AEC 7B 01            [ 1] 3673 	ld a,(PINNO,sp)
      002AEE 43               [ 1] 3674 	cpl a 
      002AEF E4 02            [ 1] 3675 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002AF1 E7 02            [ 1] 3676 	ld (GPIO_DDR,x),a 
      002AF3 20 0C            [ 2] 3677 	jra 9$
      002AF5                       3678 6$: ;output mode  
      002AF5 7B 01            [ 1] 3679 	ld a,(PINNO,sp)
      002AF7 EA 02            [ 1] 3680 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002AF9 E7 02            [ 1] 3681 	ld (GPIO_DDR,x),a 
      002AFB 7B 01            [ 1] 3682 	ld a,(PINNO,sp)
      002AFD EA 04            [ 1] 3683 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002AFF E7 04            [ 1] 3684 	ld (GPIO_CR2,x),a 
      002B01                       3685 9$:	
      002B01                       3686 	_drop VSIZE 
      002B01 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B03 81               [ 4] 3687 	ret
                                   3688 
                                   3689 ;------------------------
                                   3690 ; select Arduino pin 
                                   3691 ; input:
                                   3692 ;   X 	 {0..15} Arduino Dx 
                                   3693 ; output:
                                   3694 ;   A     stm8s208 pin 
                                   3695 ;   X     base address s208 GPIO port 
                                   3696 ;---------------------------
      002B04                       3697 select_pin:
      002B04 58               [ 2] 3698 	sllw x 
      002B05 1C 2B 14         [ 2] 3699 	addw x,#arduino_to_8s208 
      002B08 FE               [ 2] 3700 	ldw x,(x)
      002B09 9F               [ 1] 3701 	ld a,xl 
      002B0A 88               [ 1] 3702 	push a 
      002B0B 5E               [ 1] 3703 	swapw x 
      002B0C A6 05            [ 1] 3704 	ld a,#5 
      002B0E 42               [ 4] 3705 	mul x,a 
      002B0F 1C 50 00         [ 2] 3706 	addw x,#GPIO_BASE 
      002B12 84               [ 1] 3707 	pop a 
      002B13 81               [ 4] 3708 	ret 
                                   3709 ; translation from Arduino D0..D15 to stm8s208rb 
      002B14                       3710 arduino_to_8s208:
      002B14 03 06                 3711 .byte 3,6 ; D0 
      002B16 03 05                 3712 .byte 3,5 ; D1 
      002B18 04 00                 3713 .byte 4,0 ; D2 
      002B1A 02 01                 3714 .byte 2,1 ; D3
      002B1C 06 00                 3715 .byte 6,0 ; D4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002B1E 02 02                 3716 .byte 2,2 ; D5
      002B20 02 03                 3717 .byte 2,3 ; D6
      002B22 03 01                 3718 .byte 3,1 ; D7
      002B24 03 03                 3719 .byte 3,3 ; D8
      002B26 02 04                 3720 .byte 2,4 ; D9
      002B28 04 05                 3721 .byte 4,5 ; D10
      002B2A 02 06                 3722 .byte 2,6 ; D11
      002B2C 02 07                 3723 .byte 2,7 ; D12
      002B2E 02 05                 3724 .byte 2,5 ; D13
      002B30 04 02                 3725 .byte 4,2 ; D14
      002B32 04 01                 3726 .byte 4,1 ; D15
                                   3727 
                                   3728 
                                   3729 ;------------------------------
                                   3730 ; BASIC: RND(expr)
                                   3731 ; return random number 
                                   3732 ; between 1 and expr inclusive
                                   3733 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3734 ; input:
                                   3735 ; 	none 
                                   3736 ; output:
                                   3737 ;	xstack 	random positive integer 
                                   3738 ;------------------------------
      002B34                       3739 random:
      002B34 CD 19 00         [ 4] 3740 	call func_args 
      002B37 A1 01            [ 1] 3741 	cp a,#1
      002B39 27 03            [ 1] 3742 	jreq 1$
      002B3B CC 16 45         [ 2] 3743 	jp syntax_error
      002B3E                       3744 1$:  
      002B3E                       3745 	_xpop   
      002B3E 90 F6            [ 1]    1     ld a,(y)
      002B40 93               [ 1]    2     ldw x,y 
      002B41 EE 01            [ 2]    3     ldw x,(1,x)
      002B43 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B47 89               [ 2] 3746 	pushw x 
      002B48 88               [ 1] 3747 	push a  
      002B49 A6 80            [ 1] 3748 	ld a,#0x80 
      002B4B 15 01            [ 1] 3749 	bcp a,(1,sp)
      002B4D 27 05            [ 1] 3750 	jreq 2$
      002B4F A6 0A            [ 1] 3751 	ld a,#ERR_BAD_VALUE
      002B51 CC 16 47         [ 2] 3752 	jp tb_error
      002B54                       3753 2$: 
                                   3754 ; acc16=(x<<5)^x 
      002B54 CE 00 13         [ 2] 3755 	ldw x,seedx 
      002B57 58               [ 2] 3756 	sllw x 
      002B58 58               [ 2] 3757 	sllw x 
      002B59 58               [ 2] 3758 	sllw x 
      002B5A 58               [ 2] 3759 	sllw x 
      002B5B 58               [ 2] 3760 	sllw x 
      002B5C 9E               [ 1] 3761 	ld a,xh 
      002B5D C8 00 13         [ 1] 3762 	xor a,seedx 
      002B60 C7 00 0D         [ 1] 3763 	ld acc16,a 
      002B63 9F               [ 1] 3764 	ld a,xl 
      002B64 C8 00 14         [ 1] 3765 	xor a,seedx+1 
      002B67 C7 00 0E         [ 1] 3766 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                   3767 ; seedx=seedy 
      002B6A CE 00 15         [ 2] 3768 	ldw x,seedy 
      002B6D CF 00 13         [ 2] 3769 	ldw seedx,x  
                                   3770 ; seedy=seedy^(seedy>>1)
      002B70 90 54            [ 2] 3771 	srlw y 
      002B72 90 9E            [ 1] 3772 	ld a,yh 
      002B74 C8 00 15         [ 1] 3773 	xor a,seedy 
      002B77 C7 00 15         [ 1] 3774 	ld seedy,a  
      002B7A 90 9F            [ 1] 3775 	ld a,yl 
      002B7C C8 00 16         [ 1] 3776 	xor a,seedy+1 
      002B7F C7 00 16         [ 1] 3777 	ld seedy+1,a 
                                   3778 ; acc16>>3 
      002B82 CE 00 0D         [ 2] 3779 	ldw x,acc16 
      002B85 54               [ 2] 3780 	srlw x 
      002B86 54               [ 2] 3781 	srlw x 
      002B87 54               [ 2] 3782 	srlw x 
                                   3783 ; x=acc16^x 
      002B88 9E               [ 1] 3784 	ld a,xh 
      002B89 C8 00 0D         [ 1] 3785 	xor a,acc16 
      002B8C 95               [ 1] 3786 	ld xh,a 
      002B8D 9F               [ 1] 3787 	ld a,xl 
      002B8E C8 00 0E         [ 1] 3788 	xor a,acc8 
      002B91 97               [ 1] 3789 	ld xl,a 
                                   3790 ; seedy=x^seedy 
      002B92 C8 00 16         [ 1] 3791 	xor a,seedy+1
      002B95 97               [ 1] 3792 	ld xl,a 
      002B96 9E               [ 1] 3793 	ld a,xh 
      002B97 C8 00 15         [ 1] 3794 	xor a,seedy
      002B9A 95               [ 1] 3795 	ld xh,a 
      002B9B CF 00 15         [ 2] 3796 	ldw seedy,x 
                                   3797 ; return seedy modulo expr + 1 
      002B9E C6 00 14         [ 1] 3798 	ld a,seedx+1 
      002BA1                       3799 	_xpush 
      002BA1 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BA5 90 F7            [ 1]    2     ld (y),a 
      002BA7 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BAA 84               [ 1] 3800 	pop a 
      002BAB 85               [ 2] 3801 	popw x 
      002BAC                       3802 	_xpush 
      002BAC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002BB0 90 F7            [ 1]    2     ld (y),a 
      002BB2 90 EF 01         [ 2]    3     ldw (1,y),x 
      002BB5 CD 02 E5         [ 4] 3803 	call div24 
      002BB8                       3804 10$:
      002BB8 A6 84            [ 1] 3805 	ld a,#TK_INTGR
      002BBA 81               [ 4] 3806 	ret 
                                   3807 
                                   3808 ;---------------------------------
                                   3809 ; BASIC: WORDS 
                                   3810 ; affiche la listes des mots du
                                   3811 ; dictionnaire ainsi que le nombre
                                   3812 ; de mots.
                                   3813 ;---------------------------------
                           000001  3814 	WLEN=1 ; word length
                           000002  3815 	LLEN=2 ; character sent to console
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                           000003  3816 	WCNT=3 ; count words printed 
                           000003  3817 	VSIZE=3 
      002BBB                       3818 words:
      002BBB                       3819 	_vars VSIZE
      002BBB 52 03            [ 2]    1     sub sp,#VSIZE 
      002BBD 0F 02            [ 1] 3820 	clr (LLEN,sp)
      002BBF 0F 03            [ 1] 3821 	clr (WCNT,sp)
      002BC1 90 AE 32 DE      [ 2] 3822 	ldw y,#kword_dict+2
      002BC5 93               [ 1] 3823 0$:	ldw x,y
      002BC6 F6               [ 1] 3824 	ld a,(x)
      002BC7 A4 0F            [ 1] 3825 	and a,#15 
      002BC9 6B 01            [ 1] 3826 	ld (WLEN,sp),a 
      002BCB 0C 03            [ 1] 3827 	inc (WCNT,sp)
      002BCD 5C               [ 1] 3828 1$:	incw x 
      002BCE F6               [ 1] 3829 	ld a,(x)
      002BCF CD 08 FD         [ 4] 3830 	call putc 
      002BD2 0C 02            [ 1] 3831 	inc (LLEN,sp)
      002BD4 0A 01            [ 1] 3832 	dec (WLEN,sp)
      002BD6 26 F5            [ 1] 3833 	jrne 1$
      002BD8 A6 46            [ 1] 3834 	ld a,#70
      002BDA 11 02            [ 1] 3835 	cp a,(LLEN,sp)
      002BDC 2B 09            [ 1] 3836 	jrmi 2$   
      002BDE A6 20            [ 1] 3837 	ld a,#SPACE 
      002BE0 CD 08 FD         [ 4] 3838 	call putc 
      002BE3 0C 02            [ 1] 3839 	inc (LLEN,sp) 
      002BE5 20 07            [ 2] 3840 	jra 3$
      002BE7 A6 0D            [ 1] 3841 2$: ld a,#CR 
      002BE9 CD 08 FD         [ 4] 3842 	call putc 
      002BEC 0F 02            [ 1] 3843 	clr (LLEN,sp)
      002BEE 72 A2 00 02      [ 2] 3844 3$:	subw y,#2 
      002BF2 90 FE            [ 2] 3845 	ldw y,(y)
      002BF4 26 CF            [ 1] 3846 	jrne 0$ 
      002BF6 A6 0D            [ 1] 3847 	ld a,#CR 
      002BF8 CD 08 FD         [ 4] 3848 	call putc  
      002BFB 5F               [ 1] 3849 	clrw x 
      002BFC 7B 03            [ 1] 3850 	ld a,(WCNT,sp)
      002BFE 97               [ 1] 3851 	ld xl,a 
      002BFF CD 17 A1         [ 4] 3852 	call prt_i16 
      002C02 AE 2C 0B         [ 2] 3853 	ldw x,#words_count_msg
      002C05 CD 09 5A         [ 4] 3854 	call puts 
      002C08                       3855 	_drop VSIZE 
      002C08 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C0A 81               [ 4] 3856 	ret 
      002C0B 20 77 6F 72 64 73 20  3857 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3858 
                                   3859 
                                   3860 ;-----------------------------
                                   3861 ; BASIC: TIMER expr 
                                   3862 ; initialize count down timer 
                                   3863 ;-----------------------------
      002C21                       3864 set_timer:
      002C21 CD 19 05         [ 4] 3865 	call arg_list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002C24 A1 01            [ 1] 3866 	cp a,#1 
      002C26 27 03            [ 1] 3867 	jreq 1$
      002C28 CC 16 45         [ 2] 3868 	jp syntax_error
      002C2B                       3869 1$: 
      002C2B                       3870 	_xpop  
      002C2B 90 F6            [ 1]    1     ld a,(y)
      002C2D 93               [ 1]    2     ldw x,y 
      002C2E EE 01            [ 2]    3     ldw x,(1,x)
      002C30 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C34 CF 00 11         [ 2] 3871 	ldw timer,x 
      002C37 81               [ 4] 3872 	ret 
                                   3873 
                                   3874 ;------------------------------
                                   3875 ; BASIC: TIMEOUT 
                                   3876 ; return state of timer 
                                   3877 ;------------------------------
      002C38                       3878 timeout:
      002C38 CE 00 11         [ 2] 3879 	ldw x,timer 
      002C3B                       3880 logical_complement:
      002C3B A6 FF            [ 1] 3881 	ld a,#255 
      002C3D 53               [ 2] 3882 	cplw x 
      002C3E A3 FF FF         [ 2] 3883 	cpw x,#-1
      002C41 27 02            [ 1] 3884 	jreq 2$
      002C43 5F               [ 1] 3885 	clrw x
      002C44 4F               [ 1] 3886 	clr a 
      002C45                       3887 2$:	_xpush  
      002C45 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C49 90 F7            [ 1]    2     ld (y),a 
      002C4B 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C4E A6 84            [ 1] 3888 	ld a,#TK_INTGR
      002C50 81               [ 4] 3889 	ret 
                                   3890 
                                   3891 ;--------------------------------
                                   3892 ; BASIC NOT(expr) 
                                   3893 ; return logical complement of expr
                                   3894 ;--------------------------------
      002C51                       3895 func_not:
      002C51 CD 19 00         [ 4] 3896 	call func_args  
      002C54 A1 01            [ 1] 3897 	cp a,#1
      002C56 27 03            [ 1] 3898 	jreq 1$
      002C58 CC 16 45         [ 2] 3899 	jp syntax_error
      002C5B                       3900 1$:  
      002C5B CD 01 AA         [ 4] 3901 	call cpl24 
      002C5E A6 84            [ 1] 3902 	ld a,#TK_INTGR
      002C60 81               [ 4] 3903 	ret 
                                   3904 
                                   3905 
                                   3906 
                                   3907 ;-----------------------------------
                                   3908 ; BASIC: IWDGEN expr1 
                                   3909 ; enable independant watchdog timer
                                   3910 ; expr1 is delay in multiple of 62.5µsec
                                   3911 ; expr1 -> {1..16383}
                                   3912 ;-----------------------------------
      002C61                       3913 enable_iwdg:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C61 CD 19 05         [ 4] 3914 	call arg_list
      002C64 A1 01            [ 1] 3915 	cp a,#1 
      002C66 27 03            [ 1] 3916 	jreq 1$
      002C68 CC 16 45         [ 2] 3917 	jp syntax_error 
      002C6B                       3918 1$: _xpop  
      002C6B 90 F6            [ 1]    1     ld a,(y)
      002C6D 93               [ 1]    2     ldw x,y 
      002C6E EE 01            [ 2]    3     ldw x,(1,x)
      002C70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C74 4B 00            [ 1] 3919 	push #0
      002C76 35 CC 50 E0      [ 1] 3920 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002C7A 9E               [ 1] 3921 	ld a,xh 
      002C7B A4 3F            [ 1] 3922 	and a,#0x3f
      002C7D 95               [ 1] 3923 	ld xh,a  
      002C7E A3 00 FF         [ 2] 3924 2$:	cpw x,#255
      002C81 23 06            [ 2] 3925 	jrule 3$
      002C83 0C 01            [ 1] 3926 	inc (1,sp)
      002C85 98               [ 1] 3927 	rcf 
      002C86 56               [ 2] 3928 	rrcw x 
      002C87 20 F5            [ 2] 3929 	jra 2$
      002C89 35 55 50 E0      [ 1] 3930 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002C8D 84               [ 1] 3931 	pop a  
      002C8E C7 50 E1         [ 1] 3932 	ld IWDG_PR,a 
      002C91 9F               [ 1] 3933 	ld a,xl
      002C92 4A               [ 1] 3934 	dec a 
      002C93 35 55 50 E0      [ 1] 3935 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002C97 C7 50 E2         [ 1] 3936 	ld IWDG_RLR,a 
      002C9A 35 AA 50 E0      [ 1] 3937 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002C9E 81               [ 4] 3938 	ret 
                                   3939 
                                   3940 
                                   3941 ;-----------------------------------
                                   3942 ; BASIC: IWDGREF  
                                   3943 ; refresh independant watchdog count down 
                                   3944 ; timer before it reset MCU. 
                                   3945 ;-----------------------------------
      002C9F                       3946 refresh_iwdg:
      002C9F 35 AA 50 E0      [ 1] 3947 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002CA3 81               [ 4] 3948 	ret 
                                   3949 
                                   3950 
                                   3951 ;-------------------------------------
                                   3952 ; BASIC: LOG(expr)
                                   3953 ; return logarithm base 2 of expr 
                                   3954 ; this is the position of most significant
                                   3955 ; bit set. 
                                   3956 ; input: 
                                   3957 ; output:
                                   3958 ;   A     TK_INTGR 
                                   3959 ;   xstack log2 
                                   3960 ;*********************************
      002CA4                       3961 log2:
      002CA4 CD 19 00         [ 4] 3962 	call func_args 
      002CA7 A1 01            [ 1] 3963 	cp a,#1 
      002CA9 27 03            [ 1] 3964 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002CAB CC 16 45         [ 2] 3965 	jp syntax_error 
      002CAE                       3966 1$: _at_top   
      002CAE 90 F6            [ 1]    1     ld a,(y)
      002CB0 93               [ 1]    2     ldw x,y 
      002CB1 EE 01            [ 2]    3     ldw x,(1,x)
      002CB3                       3967 leading_one:
      002CB3 4D               [ 1] 3968 	tnz a
      002CB4 26 06            [ 1] 3969 	jrne 2$ 
      002CB6 5D               [ 2] 3970 	tnzw x 
      002CB7 26 03            [ 1] 3971 	jrne 2$
      002CB9 4C               [ 1] 3972 	inc a  
      002CBA 20 0E            [ 2] 3973 	jra 9$
      002CBC 4B 18            [ 1] 3974 2$:	push #24  
      002CBE 59               [ 2] 3975 3$: rlcw x 
      002CBF 49               [ 1] 3976     rlc a 
      002CC0 25 04            [ 1] 3977 	jrc 4$
      002CC2 0A 01            [ 1] 3978 	dec (1,sp) 
      002CC4 26 F8            [ 1] 3979 	jrne 3$
      002CC6 5F               [ 1] 3980 4$: clrw x 
      002CC7 84               [ 1] 3981     pop a 
      002CC8 97               [ 1] 3982 	ld xl,a 
      002CC9 4F               [ 1] 3983 	clr a 
      002CCA                       3984 9$:	_store_top 
      002CCA 90 F7            [ 1]    1     ld (y),a 
      002CCC 90 EF 01         [ 2]    2     ldw (1,y),x     
      002CCF A6 84            [ 1] 3985 	ld a,#TK_INTGR
      002CD1 81               [ 4] 3986 	ret 
                                   3987 
                                   3988 ;-----------------------------------
                                   3989 ; BASIC: BIT(expr) 
                                   3990 ; expr ->{0..15}
                                   3991 ; return 2^expr 
                                   3992 ; output:
                                   3993 ;    x    2^expr 
                                   3994 ;-----------------------------------
      002CD2                       3995 bitmask:
      002CD2 CD 19 00         [ 4] 3996     call func_args 
      002CD5 A1 01            [ 1] 3997 	cp a,#1
      002CD7 27 03            [ 1] 3998 	jreq 1$
      002CD9 CC 16 45         [ 2] 3999 	jp syntax_error 
      002CDC                       4000 1$: _xpop 
      002CDC 90 F6            [ 1]    1     ld a,(y)
      002CDE 93               [ 1]    2     ldw x,y 
      002CDF EE 01            [ 2]    3     ldw x,(1,x)
      002CE1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CE5 9F               [ 1] 4001 	ld a,xl 
      002CE6 A4 0F            [ 1] 4002 	and a,#15
      002CE8 5F               [ 1] 4003 	clrw x 
      002CE9 5C               [ 1] 4004 	incw x 
      002CEA 4D               [ 1] 4005 2$: tnz a 
      002CEB 27 04            [ 1] 4006 	jreq 3$
      002CED 58               [ 2] 4007 	slaw x 
      002CEE 4A               [ 1] 4008 	dec a 
      002CEF 26 F9            [ 1] 4009 	jrne 2$ 
      002CF1                       4010 3$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CF1 81               [ 4] 4011 	ret 
                                   4012 
                                   4013 ;------------------------------
                                   4014 ; BASIC: INVERT(expr)
                                   4015 ; 1's complement 
                                   4016 ;--------------------------------
      002CF2                       4017 invert:
      002CF2 CD 19 00         [ 4] 4018 	call func_args
      002CF5 A1 01            [ 1] 4019 	cp a,#1 
      002CF7 27 03            [ 1] 4020 	jreq 1$
      002CF9 CC 16 45         [ 2] 4021 	jp syntax_error
      002CFC                       4022 1$: _xpop 
      002CFC 90 F6            [ 1]    1     ld a,(y)
      002CFE 93               [ 1]    2     ldw x,y 
      002CFF EE 01            [ 2]    3     ldw x,(1,x)
      002D01 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D05 43               [ 1] 4023 	cpl a 
      002D06 53               [ 2] 4024 	cplw x 
      002D07 81               [ 4] 4025 	ret 
                                   4026 
                                   4027 ;------------------------------
                                   4028 ; BASIC: DO 
                                   4029 ; initiate a DO ... UNTIL loop 
                                   4030 ;------------------------------
                           000003  4031 	DOLP_ADR=3 
                           000005  4032 	DOLP_INW=5
                           000004  4033 	VSIZE=4 
      002D08                       4034 do_loop:
      002D08 85               [ 2] 4035 	popw x 
      002D09                       4036 	_vars VSIZE 
      002D09 52 04            [ 2]    1     sub sp,#VSIZE 
      002D0B 89               [ 2] 4037 	pushw x 
      002D0C 90 CE 00 04      [ 2] 4038 	ldw y,basicptr 
      002D10 17 03            [ 2] 4039 	ldw (DOLP_ADR,sp),y
      002D12 CE 00 00         [ 2] 4040 	ldw x,in.w 
      002D15 1F 05            [ 2] 4041 	ldw (DOLP_INW,sp),x
      002D17 72 5C 00 1E      [ 1] 4042 	inc loop_depth 
      002D1B 81               [ 4] 4043 	ret 
                                   4044 
                                   4045 ;--------------------------------
                                   4046 ; BASIC: UNTIL expr 
                                   4047 ; loop if exprssion is false 
                                   4048 ; else terminate loop
                                   4049 ;--------------------------------
      002D1C                       4050 until: 
      002D1C 72 5D 00 1E      [ 1] 4051 	tnz loop_depth 
      002D20 26 03            [ 1] 4052 	jrne 1$ 
      002D22 CC 16 45         [ 2] 4053 	jp syntax_error 
      002D25                       4054 1$: 
      002D25 CD 1A 78         [ 4] 4055 	call relation 
      002D28 A1 84            [ 1] 4056 	cp a,#TK_INTGR
      002D2A 27 03            [ 1] 4057 	jreq 2$
      002D2C CC 16 45         [ 2] 4058 	jp syntax_error
      002D2F                       4059 2$: 
      002D2F                       4060 	_xpop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D2F 90 F6            [ 1]    1     ld a,(y)
      002D31 93               [ 1]    2     ldw x,y 
      002D32 EE 01            [ 2]    3     ldw x,(1,x)
      002D34 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D38 4D               [ 1] 4061 	tnz a 
      002D39 26 13            [ 1] 4062 	jrne 9$ 
      002D3B 5D               [ 2] 4063 	tnzw x   
      002D3C 26 10            [ 1] 4064 	jrne 9$
      002D3E 1E 03            [ 2] 4065 	ldw x,(DOLP_ADR,sp)
      002D40 CF 00 04         [ 2] 4066 	ldw basicptr,x 
      002D43 E6 02            [ 1] 4067 	ld a,(2,x)
      002D45 C7 00 03         [ 1] 4068 	ld count,a 
      002D48 1E 05            [ 2] 4069 	ldw x,(DOLP_INW,sp)
      002D4A CF 00 00         [ 2] 4070 	ldw in.w,x 
      002D4D 81               [ 4] 4071 	ret 
      002D4E                       4072 9$:	; remove loop data from stack  
      002D4E 85               [ 2] 4073 	popw x
      002D4F                       4074 	_drop VSIZE
      002D4F 5B 04            [ 2]    1     addw sp,#VSIZE 
      002D51 72 5A 00 1E      [ 1] 4075 	dec loop_depth 
      002D55 FC               [ 2] 4076 	jp (x)
                                   4077 
                                   4078 ;--------------------------
                                   4079 ; BASIC: PRTA...PRTI  
                                   4080 ;  return constant value 
                                   4081 ;  PORT  offset in GPIO
                                   4082 ;  array
                                   4083 ;---------------------------
      002D56                       4084 const_porta:
      002D56 AE 00 00         [ 2] 4085 	ldw x,#0
      002D59 A6 84            [ 1] 4086 	ld a,#TK_INTGR 
      002D5B 81               [ 4] 4087 	ret 
      002D5C                       4088 const_portb:
      002D5C AE 00 01         [ 2] 4089 	ldw x,#1
      002D5F A6 84            [ 1] 4090 	ld a,#TK_INTGR 
      002D61 81               [ 4] 4091 	ret 
      002D62                       4092 const_portc:
      002D62 AE 00 02         [ 2] 4093 	ldw x,#2
      002D65 A6 84            [ 1] 4094 	ld a,#TK_INTGR 
      002D67 81               [ 4] 4095 	ret 
      002D68                       4096 const_portd:
      002D68 AE 00 03         [ 2] 4097 	ldw x,#3
      002D6B A6 84            [ 1] 4098 	ld a,#TK_INTGR 
      002D6D 81               [ 4] 4099 	ret 
      002D6E                       4100 const_porte:
      002D6E AE 00 04         [ 2] 4101 	ldw x,#4
      002D71 A6 84            [ 1] 4102 	ld a,#TK_INTGR 
      002D73 81               [ 4] 4103 	ret 
      002D74                       4104 const_portf:
      002D74 AE 00 05         [ 2] 4105 	ldw x,#5
      002D77 A6 84            [ 1] 4106 	ld a,#TK_INTGR 
      002D79 81               [ 4] 4107 	ret 
      002D7A                       4108 const_portg:
      002D7A AE 00 06         [ 2] 4109 	ldw x,#6
      002D7D A6 84            [ 1] 4110 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D7F 81               [ 4] 4111 	ret 
      002D80                       4112 const_porth:
      002D80 AE 00 07         [ 2] 4113 	ldw x,#7
      002D83 A6 84            [ 1] 4114 	ld a,#TK_INTGR 
      002D85 81               [ 4] 4115 	ret 
      002D86                       4116 const_porti:
      002D86 AE 00 08         [ 2] 4117 	ldw x,#8
      002D89 A6 84            [ 1] 4118 	ld a,#TK_INTGR 
      002D8B 81               [ 4] 4119 	ret 
                                   4120 
                                   4121 ;-------------------------------
                                   4122 ; following return constant 
                                   4123 ; related to GPIO register offset 
                                   4124 ;---------------------------------
      002D8C                       4125 const_odr:
      002D8C A6 84            [ 1] 4126 	ld a,#TK_INTGR 
      002D8E AE 00 00         [ 2] 4127 	ldw x,#GPIO_ODR
      002D91 81               [ 4] 4128 	ret 
      002D92                       4129 const_idr:
      002D92 A6 84            [ 1] 4130 	ld a,#TK_INTGR 
      002D94 AE 00 01         [ 2] 4131 	ldw x,#GPIO_IDR
      002D97 81               [ 4] 4132 	ret 
      002D98                       4133 const_ddr:
      002D98 A6 84            [ 1] 4134 	ld a,#TK_INTGR 
      002D9A AE 00 02         [ 2] 4135 	ldw x,#GPIO_DDR
      002D9D 81               [ 4] 4136 	ret 
      002D9E                       4137 const_cr1:
      002D9E A6 84            [ 1] 4138 	ld a,#TK_INTGR 
      002DA0 AE 00 03         [ 2] 4139 	ldw x,#GPIO_CR1
      002DA3 81               [ 4] 4140 	ret 
      002DA4                       4141 const_cr2:
      002DA4 A6 84            [ 1] 4142 	ld a,#TK_INTGR 
      002DA6 AE 00 04         [ 2] 4143 	ldw x,#GPIO_CR2
      002DA9 81               [ 4] 4144 	ret 
                                   4145 ;-------------------------
                                   4146 ; BASIC: POUT 
                                   4147 ;  constant for port mode
                                   4148 ;  used by PMODE 
                                   4149 ;  to set pin as output
                                   4150 ;------------------------
      002DAA                       4151 const_output:
      002DAA A6 84            [ 1] 4152 	ld a,#TK_INTGR 
      002DAC AE 00 01         [ 2] 4153 	ldw x,#OUTP
      002DAF 81               [ 4] 4154 	ret 
                                   4155 
                                   4156 ;-------------------------
                                   4157 ; BASIC: PINP 
                                   4158 ;  constant for port mode
                                   4159 ;  used by PMODE 
                                   4160 ;  to set pin as input
                                   4161 ;------------------------
      002DB0                       4162 const_input:
      002DB0 A6 84            [ 1] 4163 	ld a,#TK_INTGR 
      002DB2 AE 00 00         [ 2] 4164 	ldw x,#INP 
      002DB5 81               [ 4] 4165 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



                                   4166 	
                                   4167 ;-----------------------
                                   4168 ; memory area constants
                                   4169 ;-----------------------
      002DB6                       4170 const_eeprom_base:
      002DB6 A6 84            [ 1] 4171 	ld a,#TK_INTGR 
      002DB8 AE 40 00         [ 2] 4172 	ldw x,#EEPROM_BASE 
      002DBB 81               [ 4] 4173 	ret 
                                   4174 
                                   4175 ;---------------------------
                                   4176 ; BASIC: DATA 
                                   4177 ; when the interpreter find 
                                   4178 ; a DATA line it skip it.
                                   4179 ;---------------------------
      002DBC                       4180 data:
      002DBC 55 00 03 00 01   [ 1] 4181 	mov in,count 
      002DC1 81               [ 4] 4182 	ret 
                                   4183 
                                   4184 ;------------------------------
                                   4185 ; check if it is a DATA line 
                                   4186 ; input: 
                                   4187 ;    X    line address 
                                   4188 ; output:
                                   4189 ;    Z    set if DATA line 
                                   4190 ;----------------------------
      002DC2                       4191 is_data_line:
      002DC2 EE 04            [ 2] 4192 	ldw x,(4,x)
      002DC4 DE 32 E4         [ 2] 4193 	ldw x,(code_addr,x)
      002DC7 A3 2D BC         [ 2] 4194 	cpw x,#data 
      002DCA 81               [ 4] 4195 	ret 
                                   4196 
                                   4197 ;---------------------------
                                   4198 ; set DATA pointer at line# 
                                   4199 ; specified by X 
                                   4200 ;---------------------------
      002DCB                       4201 data_line:
      002DCB 4F               [ 1] 4202     clr a 
      002DCC CD 0C 42         [ 4] 4203 	call search_lineno
      002DCF 5D               [ 2] 4204 	tnzw x 
      002DD0 26 05            [ 1] 4205 	jrne 3$
      002DD2 A6 05            [ 1] 4206 2$:	ld a,#ERR_NO_LINE 
      002DD4 CC 16 47         [ 2] 4207 	jp tb_error
      002DD7                       4208 3$: ; check if valid data line 
      002DD7 90 93            [ 1] 4209     ldw y,x 
      002DD9 CD 2D C2         [ 4] 4210 	call is_data_line 
      002DDC 26 F4            [ 1] 4211 	jrne 2$ 
      002DDE                       4212 set_data_ptr: 	
      002DDE 90 CF 00 06      [ 2] 4213 	ldw data_ptr,y
      002DE2 90 E6 02         [ 1] 4214 	ld a,(2,y)
      002DE5 C7 00 09         [ 1] 4215 	ld data_len,a 
      002DE8 35 06 00 08      [ 1] 4216 	mov data_ofs,#FIRST_DATA_ITEM 
      002DEC 81               [ 4] 4217 	ret
                                   4218 
                                   4219 ;---------------------------------
                                   4220 ; BASIC: RESTORE [line#]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



                                   4221 ; set data_ptr to first data line
                                   4222 ; if no DATA found pointer set to
                                   4223 ; zero.
                                   4224 ; if a line# is given as argument 
                                   4225 ; a data line with that number 
                                   4226 ; is searched and the data pointer 
                                   4227 ; is set to it. If there is no 
                                   4228 ; data line with that number 
                                   4229 ; the program is interrupted. 
                                   4230 ;---------------------------------
      002DED                       4231 restore:
      002DED 72 5F 00 06      [ 1] 4232 	clr data_ptr 
      002DF1 72 5F 00 07      [ 1] 4233 	clr data_ptr+1
      002DF5 72 5F 00 08      [ 1] 4234 	clr data_ofs 
      002DF9 72 5F 00 09      [ 1] 4235 	clr data_len
      002DFD CD 17 4B         [ 4] 4236 	call next_token 
      002E00 A1 84            [ 1] 4237 	cp a,#TK_INTGR
      002E02 27 C7            [ 1] 4238 	jreq data_line
      002E04                       4239 	_unget_token 
      002E04 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002E09 CE 00 1A         [ 2] 4240 	ldw x,txtbgn
                                   4241 ; search first DATA line 
      002E0C                       4242 data_search_loop: 	
      002E0C C3 00 1C         [ 2] 4243 	cpw x,txtend
      002E0F 24 17            [ 1] 4244 	jruge restore_error 
      002E11 90 93            [ 1] 4245 	ldw y,x 
      002E13 CD 2D C2         [ 4] 4246 	call is_data_line 
      002E16 27 C6            [ 1] 4247 	jreq set_data_ptr
      002E18                       4248 try_next_line: 
      002E18 93               [ 1] 4249 	ldw x,y 
      002E19 E6 02            [ 1] 4250 	ld a,(2,x)
      002E1B C7 00 0E         [ 1] 4251 	ld acc8,a 
      002E1E 72 5F 00 0D      [ 1] 4252 	clr acc16 
      002E22 72 BB 00 0D      [ 2] 4253 	addw x,acc16 
      002E26 20 E4            [ 2] 4254 	jra data_search_loop
      002E28                       4255 restore_error:	
      002E28 A6 0C            [ 1] 4256     ld a,#ERR_NO_DATA 
      002E2A CC 16 47         [ 2] 4257 	jp tb_error 
                                   4258 
                                   4259 
                                   4260 ;---------------------------------
                                   4261 ; BASIC: READ 
                                   4262 ; return next data item | 0 
                                   4263 ;---------------------------------
                           000001  4264 	CTX_BPTR=1 
                           000003  4265 	CTX_IN=3 
                           000004  4266 	CTX_COUNT=4 
                           000005  4267 	XSAVE=5
                           000006  4268 	VSIZE=6
      002E2D                       4269 read:
      002E2D                       4270 	_vars  VSIZE 
      002E2D 52 06            [ 2]    1     sub sp,#VSIZE 
      002E2F                       4271 read01:	
      002E2F C6 00 08         [ 1] 4272 	ld a,data_ofs
      002E32 C1 00 09         [ 1] 4273 	cp a,data_len 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002E35 27 37            [ 1] 4274 	jreq 2$ ; end of line  
      002E37 CD 1F 8D         [ 4] 4275 	call save_context
      002E3A CE 00 06         [ 2] 4276 	ldw x,data_ptr 
      002E3D CF 00 04         [ 2] 4277 	ldw basicptr,x 
      002E40 55 00 08 00 01   [ 1] 4278 	mov in,data_ofs 
      002E45 55 00 09 00 03   [ 1] 4279 	mov count,data_len  
      002E4A CD 1A 37         [ 4] 4280 	call expression 
      002E4D A1 84            [ 1] 4281 	cp a,#TK_INTGR 
      002E4F 27 03            [ 1] 4282 	jreq 1$ 
      002E51 CC 16 45         [ 2] 4283 	jp syntax_error 
      002E54                       4284 1$:
      002E54 1F 05            [ 2] 4285 	ldw (XSAVE,SP),x
      002E56 CD 17 4B         [ 4] 4286 	call next_token ; skip comma
      002E59 CE 00 04         [ 2] 4287 	ldw x,basicptr 
      002E5C CF 00 06         [ 2] 4288 	ldw data_ptr,x 
      002E5F 55 00 01 00 08   [ 1] 4289 	mov data_ofs,in 
      002E64 CD 1F 9D         [ 4] 4290 	call rest_context
      002E67 1E 05            [ 2] 4291 	ldw x,(XSAVE,sp)
      002E69 A6 84            [ 1] 4292 	ld a,#TK_INTGR
      002E6B                       4293 	_drop VSIZE 
      002E6B 5B 06            [ 2]    1     addw sp,#VSIZE 
      002E6D 81               [ 4] 4294 	ret 
      002E6E                       4295 2$: ; end of line reached 
      002E6E 90 CE 00 06      [ 2] 4296 	ldw y, data_ptr 
      002E72 72 5F 00 06      [ 1] 4297 	clr data_ptr
      002E76 72 5F 00 07      [ 1] 4298 	clr data_ptr+1   
      002E7A 72 5F 00 08      [ 1] 4299 	clr data_ofs 
      002E7E 72 5F 00 09      [ 1] 4300 	clr data_len 
      002E82 CD 2E 18         [ 4] 4301 	call try_next_line 
      002E85 20 A8            [ 2] 4302 	jra read01
                                   4303 
                                   4304 
                                   4305 ;---------------------------------
                                   4306 ; BASIC: SPIEN clkdiv, 0|1  
                                   4307 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4308 ; if clkdiv==-1 disable SPI
                                   4309 ; 0|1 -> disable|enable  
                                   4310 ;--------------------------------- 
                           000005  4311 SPI_CS_BIT=5
      002E87                       4312 spi_enable:
      002E87 CD 19 05         [ 4] 4313 	call arg_list 
      002E8A A1 02            [ 1] 4314 	cp a,#2
      002E8C 27 03            [ 1] 4315 	jreq 1$
      002E8E CC 16 45         [ 2] 4316 	jp syntax_error 
      002E91                       4317 1$: 
      002E91 72 12 50 C7      [ 1] 4318 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002E95 85               [ 2] 4319 	popw x  
      002E96 5D               [ 2] 4320 	tnzw x 
      002E97 27 21            [ 1] 4321 	jreq spi_disable 
      002E99 85               [ 2] 4322 	popw x 
      002E9A A6 08            [ 1] 4323 	ld a,#(1<<SPI_CR1_BR)
      002E9C 42               [ 4] 4324 	mul x,a 
      002E9D 9F               [ 1] 4325 	ld a,xl 
      002E9E C7 52 00         [ 1] 4326 	ld SPI_CR1,a 
                                   4327 ; configure ~CS on PE5 (D10 on CN8) as output. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002EA1 72 1A 50 14      [ 1] 4328 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EA5 72 1A 50 16      [ 1] 4329 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4330 ; configure SPI as master mode 0.	
      002EA9 72 14 52 00      [ 1] 4331 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4332 ; ~CS line controlled by sofware 	
      002EAD 72 12 52 01      [ 1] 4333 	bset SPI_CR2,#SPI_CR2_SSM 
      002EB1 72 10 52 01      [ 1] 4334     bset SPI_CR2,#SPI_CR2_SSI 
                                   4335 ; enable SPI
      002EB5 72 1C 52 00      [ 1] 4336 	bset SPI_CR1,#SPI_CR1_SPE 	
      002EB9 81               [ 4] 4337 	ret 
      002EBA                       4338 spi_disable:
      002EBA                       4339 	_drop #2; throw first argument.
      002EBA 5B 02            [ 2]    1     addw sp,##2 
                                   4340 ; wait spi idle 
      002EBC A6 82            [ 1] 4341 1$:	ld a,#0x82 
      002EBE C4 52 03         [ 1] 4342 	and a,SPI_SR
      002EC1 A1 02            [ 1] 4343 	cp a,#2 
      002EC3 26 F7            [ 1] 4344 	jrne 1$
      002EC5 72 1D 52 00      [ 1] 4345 	bres SPI_CR1,#SPI_CR1_SPE
      002EC9 72 13 50 C7      [ 1] 4346 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002ECD 72 1B 50 16      [ 1] 4347 	bres PE_DDR,#SPI_CS_BIT 
      002ED1 81               [ 4] 4348 	ret 
                                   4349 
      002ED2                       4350 spi_clear_error:
      002ED2 A6 78            [ 1] 4351 	ld a,#0x78 
      002ED4 C5 52 03         [ 1] 4352 	bcp a,SPI_SR 
      002ED7 27 04            [ 1] 4353 	jreq 1$
      002ED9 72 5F 52 03      [ 1] 4354 	clr SPI_SR 
      002EDD 81               [ 4] 4355 1$: ret 
                                   4356 
      002EDE                       4357 spi_send_byte:
      002EDE 88               [ 1] 4358 	push a 
      002EDF CD 2E D2         [ 4] 4359 	call spi_clear_error
      002EE2 84               [ 1] 4360 	pop a 
      002EE3 72 03 52 03 FB   [ 2] 4361 	btjf SPI_SR,#SPI_SR_TXE,.
      002EE8 C7 52 04         [ 1] 4362 	ld SPI_DR,a
      002EEB 72 01 52 03 FB   [ 2] 4363 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002EF0 C6 52 04         [ 1] 4364 	ld a,SPI_DR 
      002EF3 81               [ 4] 4365 	ret 
                                   4366 
      002EF4                       4367 spi_rcv_byte:
      002EF4 A6 FF            [ 1] 4368 	ld a,#255
      002EF6 72 01 52 03 E3   [ 2] 4369 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002EFB C6 52 04         [ 1] 4370 	ld a,SPI_DR 
      002EFE 81               [ 4] 4371 	ret
                                   4372 
                                   4373 ;------------------------------
                                   4374 ; BASIC: SPIWR byte [,byte]
                                   4375 ; write 1 or more byte
                                   4376 ;------------------------------
      002EFF                       4377 spi_write:
      002EFF CD 1A 37         [ 4] 4378 	call expression
      002F02 A1 84            [ 1] 4379 	cp a,#TK_INTGR 
      002F04 27 03            [ 1] 4380 	jreq 1$
      002F06 CC 16 45         [ 2] 4381 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002F09                       4382 1$:	
      002F09 9F               [ 1] 4383 	ld a,xl 
      002F0A CD 2E DE         [ 4] 4384 	call spi_send_byte 
      002F0D CD 17 4B         [ 4] 4385 	call next_token 
      002F10 A1 08            [ 1] 4386 	cp a,#TK_COMMA 
      002F12 26 02            [ 1] 4387 	jrne 2$ 
      002F14 20 E9            [ 2] 4388 	jra spi_write 
      002F16 4D               [ 1] 4389 2$:	tnz a 
      002F17 27 05            [ 1] 4390 	jreq 3$
      002F19                       4391 	_unget_token  
      002F19 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F1E 81               [ 4] 4392 3$:	ret 
                                   4393 
                                   4394 
                                   4395 ;-------------------------------
                                   4396 ; BASIC: SPIRD 	
                                   4397 ; read one byte from SPI 
                                   4398 ;-------------------------------
      002F1F                       4399 spi_read:
      002F1F CD 2E F4         [ 4] 4400 	call spi_rcv_byte 
      002F22 5F               [ 1] 4401 	clrw x 
      002F23 97               [ 1] 4402 	ld xl,a 
      002F24 A6 84            [ 1] 4403 	ld a,#TK_INTGR 
      002F26 81               [ 4] 4404 	ret 
                                   4405 
                                   4406 ;------------------------------
                                   4407 ; BASIC: SPISEL 0|1 
                                   4408 ; set state of ~CS line
                                   4409 ; 0|1 deselect|select  
                                   4410 ;------------------------------
      002F27                       4411 spi_select:
      002F27 CD 17 4B         [ 4] 4412 	call next_token 
      002F2A A1 84            [ 1] 4413 	cp a,#TK_INTGR 
      002F2C 27 03            [ 1] 4414 	jreq 1$
      002F2E CC 16 45         [ 2] 4415 	jp syntax_error 
      002F31 5D               [ 2] 4416 1$: tnzw x  
      002F32 27 05            [ 1] 4417 	jreq cs_high 
      002F34 72 1B 50 14      [ 1] 4418 	bres PE_ODR,#SPI_CS_BIT
      002F38 81               [ 4] 4419 	ret 
      002F39                       4420 cs_high: 
      002F39 72 1A 50 14      [ 1] 4421 	bset PE_ODR,#SPI_CS_BIT
      002F3D 81               [ 4] 4422 	ret 
                                   4423 
                                   4424 ;-------------------------------
                                   4425 ; BASIC: PAD 
                                   4426 ; Return pad buffer address.
                                   4427 ;------------------------------
      002F3E                       4428 pad_ref:
      002F3E AE 16 B8         [ 2] 4429 	ldw x,#pad 
      002F41 B6 84            [ 1] 4430 	ld a,TK_INTGR
      002F43 81               [ 4] 4431 	ret 
                                   4432 
                                   4433 
                                   4434 ;------------------------------
                                   4435 ;      dictionary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4436 ; format:
                                   4437 ;   link:   2 bytes 
                                   4438 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4439 ;   cmd_name: 16 byte max 
                                   4440 ;   cmd_index: 2 bytes 
                                   4441 ;------------------------------
                                   4442 	.macro _dict_entry len,name,cmd_idx 
                                   4443 	.word LINK 
                                   4444 	LINK=.
                                   4445 name:
                                   4446 	.byte len 	
                                   4447 	.ascii "name"
                                   4448 	.word cmd_idx 
                                   4449 	.endm 
                                   4450 
                           000000  4451 	LINK=0
                                   4452 ; respect alphabetic order for BASIC names from Z-A
                                   4453 ; this sort order is for a cleaner WORDS cmd output. 	
      002F44                       4454 kword_end:
      002F44                       4455 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002F44 00 00                    1 	.word LINK 
                           002F46     2 	LINK=.
      002F46                          3 XOR:
      002F46 43                       4 	.byte 3+F_IFUNC 	
      002F47 58 4F 52                 5 	.ascii "XOR"
      002F4A 00 BE                    6 	.word XOR_IDX 
      002F4C                       4456 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002F4C 2F 46                    1 	.word LINK 
                           002F4E     2 	LINK=.
      002F4E                          3 WRITE:
      002F4E 05                       4 	.byte 5 	
      002F4F 57 52 49 54 45           5 	.ascii "WRITE"
      002F54 00 BC                    6 	.word WRITE_IDX 
      002F56                       4457 	_dict_entry,5,WORDS,WORDS_IDX;words 
      002F56 2F 4E                    1 	.word LINK 
                           002F58     2 	LINK=.
      002F58                          3 WORDS:
      002F58 05                       4 	.byte 5 	
      002F59 57 4F 52 44 53           5 	.ascii "WORDS"
      002F5E 00 BA                    6 	.word WORDS_IDX 
      002F60                       4458 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002F60 2F 58                    1 	.word LINK 
                           002F62     2 	LINK=.
      002F62                          3 WAIT:
      002F62 04                       4 	.byte 4 	
      002F63 57 41 49 54              5 	.ascii "WAIT"
      002F67 00 B8                    6 	.word WAIT_IDX 
      002F69                       4459 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      002F69 2F 62                    1 	.word LINK 
                           002F6B     2 	LINK=.
      002F6B                          3 USR:
      002F6B 43                       4 	.byte 3+F_IFUNC 	
      002F6C 55 53 52                 5 	.ascii "USR"
      002F6F 00 B6                    6 	.word USR_IDX 
      002F71                       4460 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      002F71 2F 6B                    1 	.word LINK 
                           002F73     2 	LINK=.
      002F73                          3 UNTIL:
      002F73 05                       4 	.byte 5 	
      002F74 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002F79 00 B4                    6 	.word UNTIL_IDX 
      002F7B                       4461 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      002F7B 2F 73                    1 	.word LINK 
                           002F7D     2 	LINK=.
      002F7D                          3 UFLASH:
      002F7D 46                       4 	.byte 6+F_IFUNC 	
      002F7E 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002F84 00 B2                    6 	.word UFLASH_IDX 
      002F86                       4462 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      002F86 2F 7D                    1 	.word LINK 
                           002F88     2 	LINK=.
      002F88                          3 UBOUND:
      002F88 46                       4 	.byte 6+F_IFUNC 	
      002F89 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002F8F 00 B0                    6 	.word UBOUND_IDX 
      002F91                       4463 	_dict_entry,4,TONE,TONE_IDX;tone  
      002F91 2F 88                    1 	.word LINK 
                           002F93     2 	LINK=.
      002F93                          3 TONE:
      002F93 04                       4 	.byte 4 	
      002F94 54 4F 4E 45              5 	.ascii "TONE"
      002F98 00 AE                    6 	.word TONE_IDX 
      002F9A                       4464 	_dict_entry,2,TO,TO_IDX;to
      002F9A 2F 93                    1 	.word LINK 
                           002F9C     2 	LINK=.
      002F9C                          3 TO:
      002F9C 02                       4 	.byte 2 	
      002F9D 54 4F                    5 	.ascii "TO"
      002F9F 00 AC                    6 	.word TO_IDX 
      002FA1                       4465 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      002FA1 2F 9C                    1 	.word LINK 
                           002FA3     2 	LINK=.
      002FA3                          3 TIMER:
      002FA3 05                       4 	.byte 5 	
      002FA4 54 49 4D 45 52           5 	.ascii "TIMER"
      002FA9 00 A8                    6 	.word TIMER_IDX 
      002FAB                       4466 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      002FAB 2F A3                    1 	.word LINK 
                           002FAD     2 	LINK=.
      002FAD                          3 TIMEOUT:
      002FAD 47                       4 	.byte 7+F_IFUNC 	
      002FAE 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002FB5 00 AA                    6 	.word TMROUT_IDX 
      002FB7                       4467 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      002FB7 2F AD                    1 	.word LINK 
                           002FB9     2 	LINK=.
      002FB9                          3 TICKS:
      002FB9 45                       4 	.byte 5+F_IFUNC 	
      002FBA 54 49 43 4B 53           5 	.ascii "TICKS"
      002FBF 00 A6                    6 	.word TICKS_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002FC1                       4468 	_dict_entry,4,STOP,STOP_IDX;stop 
      002FC1 2F B9                    1 	.word LINK 
                           002FC3     2 	LINK=.
      002FC3                          3 STOP:
      002FC3 04                       4 	.byte 4 	
      002FC4 53 54 4F 50              5 	.ascii "STOP"
      002FC8 00 A4                    6 	.word STOP_IDX 
      002FCA                       4469 	_dict_entry,4,STEP,STEP_IDX;step 
      002FCA 2F C3                    1 	.word LINK 
                           002FCC     2 	LINK=.
      002FCC                          3 STEP:
      002FCC 04                       4 	.byte 4 	
      002FCD 53 54 45 50              5 	.ascii "STEP"
      002FD1 00 A2                    6 	.word STEP_IDX 
      002FD3                       4470 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      002FD3 2F CC                    1 	.word LINK 
                           002FD5     2 	LINK=.
      002FD5                          3 SPIWR:
      002FD5 05                       4 	.byte 5 	
      002FD6 53 50 49 57 52           5 	.ascii "SPIWR"
      002FDB 00 A0                    6 	.word SPIWR_IDX 
      002FDD                       4471 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      002FDD 2F D5                    1 	.word LINK 
                           002FDF     2 	LINK=.
      002FDF                          3 SPISEL:
      002FDF 06                       4 	.byte 6 	
      002FE0 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002FE6 00 9E                    6 	.word SPISEL_IDX 
      002FE8                       4472 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      002FE8 2F DF                    1 	.word LINK 
                           002FEA     2 	LINK=.
      002FEA                          3 SPIRD:
      002FEA 45                       4 	.byte 5+F_IFUNC 	
      002FEB 53 50 49 52 44           5 	.ascii "SPIRD"
      002FF0 00 9A                    6 	.word SPIRD_IDX 
      002FF2                       4473 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      002FF2 2F EA                    1 	.word LINK 
                           002FF4     2 	LINK=.
      002FF4                          3 SPIEN:
      002FF4 05                       4 	.byte 5 	
      002FF5 53 50 49 45 4E           5 	.ascii "SPIEN"
      002FFA 00 9C                    6 	.word SPIEN_IDX 
      002FFC                       4474 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      002FFC 2F F4                    1 	.word LINK 
                           002FFE     2 	LINK=.
      002FFE                          3 SLEEP:
      002FFE 05                       4 	.byte 5 	
      002FFF 53 4C 45 45 50           5 	.ascii "SLEEP"
      003004 00 98                    6 	.word SLEEP_IDX 
      003006                       4475     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      003006 2F FE                    1 	.word LINK 
                           003008     2 	LINK=.
      003008                          3 SIZE:
      003008 04                       4 	.byte 4 	
      003009 53 49 5A 45              5 	.ascii "SIZE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      00300D 00 C0                    6 	.word SIZE_IDX 
      00300F                       4476 	_dict_entry,4,SHOW,SHOW_IDX;show 
      00300F 30 08                    1 	.word LINK 
                           003011     2 	LINK=.
      003011                          3 SHOW:
      003011 04                       4 	.byte 4 	
      003012 53 48 4F 57              5 	.ascii "SHOW"
      003016 00 94                    6 	.word SHOW_IDX 
      003018                       4477 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      003018 30 11                    1 	.word LINK 
                           00301A     2 	LINK=.
      00301A                          3 SAVE:
      00301A 04                       4 	.byte 4 	
      00301B 53 41 56 45              5 	.ascii "SAVE"
      00301F 00 34                    6 	.word SAVE_IDX 
      003021                       4478 	_dict_entry 3,RUN,RUN_IDX;run
      003021 30 1A                    1 	.word LINK 
                           003023     2 	LINK=.
      003023                          3 RUN:
      003023 03                       4 	.byte 3 	
      003024 52 55 4E                 5 	.ascii "RUN"
      003027 00 92                    6 	.word RUN_IDX 
      003029                       4479 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      003029 30 23                    1 	.word LINK 
                           00302B     2 	LINK=.
      00302B                          3 RSHIFT:
      00302B 46                       4 	.byte 6+F_IFUNC 	
      00302C 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      003032 00 90                    6 	.word RSHIFT_IDX 
      003034                       4480 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      003034 30 2B                    1 	.word LINK 
                           003036     2 	LINK=.
      003036                          3 RND:
      003036 43                       4 	.byte 3+F_IFUNC 	
      003037 52 4E 44                 5 	.ascii "RND"
      00303A 00 8E                    6 	.word RND_IDX 
      00303C                       4481 	_dict_entry,6,RETURN,RET_IDX;return 
      00303C 30 36                    1 	.word LINK 
                           00303E     2 	LINK=.
      00303E                          3 RETURN:
      00303E 06                       4 	.byte 6 	
      00303F 52 45 54 55 52 4E        5 	.ascii "RETURN"
      003045 00 8C                    6 	.word RET_IDX 
      003047                       4482 	_dict_entry,7,RESTORE,REST_IDX;restore 
      003047 30 3E                    1 	.word LINK 
                           003049     2 	LINK=.
      003049                          3 RESTORE:
      003049 07                       4 	.byte 7 	
      00304A 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      003051 00 8A                    6 	.word REST_IDX 
      003053                       4483 	_dict_entry 3,REM,REM_IDX;remark 
      003053 30 49                    1 	.word LINK 
                           003055     2 	LINK=.
      003055                          3 REM:
      003055 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      003056 52 45 4D                 5 	.ascii "REM"
      003059 00 88                    6 	.word REM_IDX 
      00305B                       4484 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      00305B 30 55                    1 	.word LINK 
                           00305D     2 	LINK=.
      00305D                          3 REBOOT:
      00305D 06                       4 	.byte 6 	
      00305E 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      003064 00 86                    6 	.word RBT_IDX 
      003066                       4485 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      003066 30 5D                    1 	.word LINK 
                           003068     2 	LINK=.
      003068                          3 READ:
      003068 44                       4 	.byte 4+F_IFUNC 	
      003069 52 45 41 44              5 	.ascii "READ"
      00306D 00 84                    6 	.word READ_IDX 
      00306F                       4486 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      00306F 30 68                    1 	.word LINK 
                           003071     2 	LINK=.
      003071                          3 QKEY:
      003071 44                       4 	.byte 4+F_IFUNC 	
      003072 51 4B 45 59              5 	.ascii "QKEY"
      003076 00 82                    6 	.word QKEY_IDX 
      003078                       4487 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      003078 30 71                    1 	.word LINK 
                           00307A     2 	LINK=.
      00307A                          3 PRTI:
      00307A 44                       4 	.byte 4+F_IFUNC 	
      00307B 50 52 54 49              5 	.ascii "PRTI"
      00307F 00 80                    6 	.word PRTI_IDX 
      003081                       4488 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      003081 30 7A                    1 	.word LINK 
                           003083     2 	LINK=.
      003083                          3 PRTH:
      003083 44                       4 	.byte 4+F_IFUNC 	
      003084 50 52 54 48              5 	.ascii "PRTH"
      003088 00 7E                    6 	.word PRTH_IDX 
      00308A                       4489 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      00308A 30 83                    1 	.word LINK 
                           00308C     2 	LINK=.
      00308C                          3 PRTG:
      00308C 44                       4 	.byte 4+F_IFUNC 	
      00308D 50 52 54 47              5 	.ascii "PRTG"
      003091 00 7C                    6 	.word PRTG_IDX 
      003093                       4490 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      003093 30 8C                    1 	.word LINK 
                           003095     2 	LINK=.
      003095                          3 PRTF:
      003095 44                       4 	.byte 4+F_IFUNC 	
      003096 50 52 54 46              5 	.ascii "PRTF"
      00309A 00 7A                    6 	.word PRTF_IDX 
      00309C                       4491 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      00309C 30 95                    1 	.word LINK 
                           00309E     2 	LINK=.
      00309E                          3 PRTE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      00309E 44                       4 	.byte 4+F_IFUNC 	
      00309F 50 52 54 45              5 	.ascii "PRTE"
      0030A3 00 78                    6 	.word PRTE_IDX 
      0030A5                       4492 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      0030A5 30 9E                    1 	.word LINK 
                           0030A7     2 	LINK=.
      0030A7                          3 PRTD:
      0030A7 44                       4 	.byte 4+F_IFUNC 	
      0030A8 50 52 54 44              5 	.ascii "PRTD"
      0030AC 00 76                    6 	.word PRTD_IDX 
      0030AE                       4493 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      0030AE 30 A7                    1 	.word LINK 
                           0030B0     2 	LINK=.
      0030B0                          3 PRTC:
      0030B0 44                       4 	.byte 4+F_IFUNC 	
      0030B1 50 52 54 43              5 	.ascii "PRTC"
      0030B5 00 74                    6 	.word PRTC_IDX 
      0030B7                       4494 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      0030B7 30 B0                    1 	.word LINK 
                           0030B9     2 	LINK=.
      0030B9                          3 PRTB:
      0030B9 44                       4 	.byte 4+F_IFUNC 	
      0030BA 50 52 54 42              5 	.ascii "PRTB"
      0030BE 00 72                    6 	.word PRTB_IDX 
      0030C0                       4495 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      0030C0 30 B9                    1 	.word LINK 
                           0030C2     2 	LINK=.
      0030C2                          3 PRTA:
      0030C2 44                       4 	.byte 4+F_IFUNC 	
      0030C3 50 52 54 41              5 	.ascii "PRTA"
      0030C7 00 70                    6 	.word PRTA_IDX 
      0030C9                       4496 	_dict_entry 5,PRINT,PRT_IDX;print 
      0030C9 30 C2                    1 	.word LINK 
                           0030CB     2 	LINK=.
      0030CB                          3 PRINT:
      0030CB 05                       4 	.byte 5 	
      0030CC 50 52 49 4E 54           5 	.ascii "PRINT"
      0030D1 00 6E                    6 	.word PRT_IDX 
      0030D3                       4497 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      0030D3 30 CB                    1 	.word LINK 
                           0030D5     2 	LINK=.
      0030D5                          3 POUT:
      0030D5 44                       4 	.byte 4+F_IFUNC 	
      0030D6 50 4F 55 54              5 	.ascii "POUT"
      0030DA 00 6C                    6 	.word POUT_IDX 
      0030DC                       4498 	_dict_entry,4,POKE,POKE_IDX;poke 
      0030DC 30 D5                    1 	.word LINK 
                           0030DE     2 	LINK=.
      0030DE                          3 POKE:
      0030DE 04                       4 	.byte 4 	
      0030DF 50 4F 4B 45              5 	.ascii "POKE"
      0030E3 00 6A                    6 	.word POKE_IDX 
      0030E5                       4499 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      0030E5 30 DE                    1 	.word LINK 
                           0030E7     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      0030E7                          3 PMODE:
      0030E7 05                       4 	.byte 5 	
      0030E8 50 4D 4F 44 45           5 	.ascii "PMODE"
      0030ED 00 64                    6 	.word PMODE_IDX 
      0030EF                       4500 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      0030EF 30 E7                    1 	.word LINK 
                           0030F1     2 	LINK=.
      0030F1                          3 PINP:
      0030F1 44                       4 	.byte 4+F_IFUNC 	
      0030F2 50 49 4E 50              5 	.ascii "PINP"
      0030F6 00 68                    6 	.word PINP_IDX 
      0030F8                       4501 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      0030F8 30 F1                    1 	.word LINK 
                           0030FA     2 	LINK=.
      0030FA                          3 PEEK:
      0030FA 44                       4 	.byte 4+F_IFUNC 	
      0030FB 50 45 45 4B              5 	.ascii "PEEK"
      0030FF 00 66                    6 	.word PEEK_IDX 
      003101                       4502 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      003101 30 FA                    1 	.word LINK 
                           003103     2 	LINK=.
      003103                          3 PAUSE:
      003103 05                       4 	.byte 5 	
      003104 50 41 55 53 45           5 	.ascii "PAUSE"
      003109 00 62                    6 	.word PAUSE_IDX 
      00310B                       4503 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      00310B 31 03                    1 	.word LINK 
                           00310D     2 	LINK=.
      00310D                          3 PAD:
      00310D 43                       4 	.byte 3+F_IFUNC 	
      00310E 50 41 44                 5 	.ascii "PAD"
      003111 00 60                    6 	.word PAD_IDX 
      003113                       4504 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      003113 31 0D                    1 	.word LINK 
                           003115     2 	LINK=.
      003115                          3 OR:
      003115 42                       4 	.byte 2+F_IFUNC 	
      003116 4F 52                    5 	.ascii "OR"
      003118 00 5E                    6 	.word OR_IDX 
      00311A                       4505 	_dict_entry,2,ON,ON_IDX; cmd_on 
      00311A 31 15                    1 	.word LINK 
                           00311C     2 	LINK=.
      00311C                          3 ON:
      00311C 02                       4 	.byte 2 	
      00311D 4F 4E                    5 	.ascii "ON"
      00311F 00 C2                    6 	.word ON_IDX 
      003121                       4506 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      003121 31 1C                    1 	.word LINK 
                           003123     2 	LINK=.
      003123                          3 ODR:
      003123 43                       4 	.byte 3+F_IFUNC 	
      003124 4F 44 52                 5 	.ascii "ODR"
      003127 00 5C                    6 	.word ODR_IDX 
      003129                       4507 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      003129 31 23                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



                           00312B     2 	LINK=.
      00312B                          3 NOT:
      00312B 43                       4 	.byte 3+F_IFUNC 	
      00312C 4E 4F 54                 5 	.ascii "NOT"
      00312F 00 5A                    6 	.word NOT_IDX 
      003131                       4508 	_dict_entry,4,NEXT,NEXT_IDX;next 
      003131 31 2B                    1 	.word LINK 
                           003133     2 	LINK=.
      003133                          3 NEXT:
      003133 04                       4 	.byte 4 	
      003134 4E 45 58 54              5 	.ascii "NEXT"
      003138 00 56                    6 	.word NEXT_IDX 
      00313A                       4509 	_dict_entry,3,NEW,NEW_IDX;new
      00313A 31 33                    1 	.word LINK 
                           00313C     2 	LINK=.
      00313C                          3 NEW:
      00313C 03                       4 	.byte 3 	
      00313D 4E 45 57                 5 	.ascii "NEW"
      003140 00 58                    6 	.word NEW_IDX 
                                   4510 ;	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      003142                       4511 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      003142 31 3C                    1 	.word LINK 
                           003144     2 	LINK=.
      003144                          3 LSHIFT:
      003144 46                       4 	.byte 6+F_IFUNC 	
      003145 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      00314B 00 54                    6 	.word LSHIFT_IDX 
      00314D                       4512 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      00314D 31 44                    1 	.word LINK 
                           00314F     2 	LINK=.
      00314F                          3 LOG:
      00314F 43                       4 	.byte 3+F_IFUNC 	
      003150 4C 4F 47                 5 	.ascii "LOG"
      003153 00 52                    6 	.word LOG_IDX 
      003155                       4513 	_dict_entry 4,LIST,LIST_IDX;list
      003155 31 4F                    1 	.word LINK 
                           003157     2 	LINK=.
      003157                          3 LIST:
      003157 04                       4 	.byte 4 	
      003158 4C 49 53 54              5 	.ascii "LIST"
      00315C 00 50                    6 	.word LIST_IDX 
      00315E                       4514 	_dict_entry 3,LET,LET_IDX;let 
      00315E 31 57                    1 	.word LINK 
                           003160     2 	LINK=.
      003160                          3 LET:
      003160 03                       4 	.byte 3 	
      003161 4C 45 54                 5 	.ascii "LET"
      003164 00 4E                    6 	.word LET_IDX 
      003166                       4515 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      003166 31 60                    1 	.word LINK 
                           003168     2 	LINK=.
      003168                          3 KEY:
      003168 83                       4 	.byte 3+F_CFUNC 	
      003169 4B 45 59                 5 	.ascii "KEY"
      00316C 00 4C                    6 	.word KEY_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      00316E                       4516 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      00316E 31 68                    1 	.word LINK 
                           003170     2 	LINK=.
      003170                          3 IWDGREF:
      003170 07                       4 	.byte 7 	
      003171 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003178 00 4A                    6 	.word IWDGREF_IDX 
      00317A                       4517 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      00317A 31 70                    1 	.word LINK 
                           00317C     2 	LINK=.
      00317C                          3 IWDGEN:
      00317C 06                       4 	.byte 6 	
      00317D 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003183 00 48                    6 	.word IWDGEN_IDX 
      003185                       4518 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      003185 31 7C                    1 	.word LINK 
                           003187     2 	LINK=.
      003187                          3 INVERT:
      003187 46                       4 	.byte 6+F_IFUNC 	
      003188 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00318E 00 46                    6 	.word INVERT_IDX 
      003190                       4519 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      003190 31 87                    1 	.word LINK 
                           003192     2 	LINK=.
      003192                          3 INPUT:
      003192 05                       4 	.byte 5 	
      003193 49 4E 50 55 54           5 	.ascii "INPUT"
      003198 00 44                    6 	.word INPUT_IDX 
      00319A                       4520 	_dict_entry,2,IF,IF_IDX;if 
      00319A 31 92                    1 	.word LINK 
                           00319C     2 	LINK=.
      00319C                          3 IF:
      00319C 02                       4 	.byte 2 	
      00319D 49 46                    5 	.ascii "IF"
      00319F 00 42                    6 	.word IF_IDX 
      0031A1                       4521 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      0031A1 31 9C                    1 	.word LINK 
                           0031A3     2 	LINK=.
      0031A3                          3 IDR:
      0031A3 43                       4 	.byte 3+F_IFUNC 	
      0031A4 49 44 52                 5 	.ascii "IDR"
      0031A7 00 40                    6 	.word IDR_IDX 
      0031A9                       4522 	_dict_entry,3,HEX,HEX_IDX;hex_base
      0031A9 31 A3                    1 	.word LINK 
                           0031AB     2 	LINK=.
      0031AB                          3 HEX:
      0031AB 03                       4 	.byte 3 	
      0031AC 48 45 58                 5 	.ascii "HEX"
      0031AF 00 3E                    6 	.word HEX_IDX 
      0031B1                       4523 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      0031B1 31 AB                    1 	.word LINK 
                           0031B3     2 	LINK=.
      0031B3                          3 GPIO:
      0031B3 44                       4 	.byte 4+F_IFUNC 	
      0031B4 47 50 49 4F              5 	.ascii "GPIO"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      0031B8 00 3C                    6 	.word GPIO_IDX 
      0031BA                       4524 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      0031BA 31 B3                    1 	.word LINK 
                           0031BC     2 	LINK=.
      0031BC                          3 GOTO:
      0031BC 04                       4 	.byte 4 	
      0031BD 47 4F 54 4F              5 	.ascii "GOTO"
      0031C1 00 3A                    6 	.word GOTO_IDX 
      0031C3                       4525 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      0031C3 31 BC                    1 	.word LINK 
                           0031C5     2 	LINK=.
      0031C5                          3 GOSUB:
      0031C5 05                       4 	.byte 5 	
      0031C6 47 4F 53 55 42           5 	.ascii "GOSUB"
      0031CB 00 38                    6 	.word GOSUB_IDX 
      0031CD                       4526 	_dict_entry,3,GET,GET_IDX; cmd_get 
      0031CD 31 C5                    1 	.word LINK 
                           0031CF     2 	LINK=.
      0031CF                          3 GET:
      0031CF 03                       4 	.byte 3 	
      0031D0 47 45 54                 5 	.ascii "GET"
      0031D3 00 C4                    6 	.word GET_IDX 
      0031D5                       4527 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      0031D5 31 CF                    1 	.word LINK 
                           0031D7     2 	LINK=.
      0031D7                          3 FREE:
      0031D7 44                       4 	.byte 4+F_IFUNC 	
      0031D8 46 52 45 45              5 	.ascii "FREE"
      0031DC 00 96                    6 	.word FREE_IDX 
      0031DE                       4528 	_dict_entry,3,FOR,FOR_IDX;for 
      0031DE 31 D7                    1 	.word LINK 
                           0031E0     2 	LINK=.
      0031E0                          3 FOR:
      0031E0 03                       4 	.byte 3 	
      0031E1 46 4F 52                 5 	.ascii "FOR"
      0031E4 00 36                    6 	.word FOR_IDX 
      0031E6                       4529 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      0031E6 31 E0                    1 	.word LINK 
                           0031E8     2 	LINK=.
      0031E8                          3 FCPU:
      0031E8 04                       4 	.byte 4 	
      0031E9 46 43 50 55              5 	.ascii "FCPU"
      0031ED 00 32                    6 	.word FCPU_IDX 
      0031EF                       4530 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      0031EF 31 E8                    1 	.word LINK 
                           0031F1     2 	LINK=.
      0031F1                          3 ERASE:
      0031F1 05                       4 	.byte 5 	
      0031F2 45 52 41 53 45           5 	.ascii "ERASE"
      0031F7 00 30                    6 	.word ERASE_IDX 
      0031F9                       4531 	_dict_entry,3,END,END_IDX;cmd_end  
      0031F9 31 F1                    1 	.word LINK 
                           0031FB     2 	LINK=.
      0031FB                          3 END:
      0031FB 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0031FC 45 4E 44                 5 	.ascii "END"
      0031FF 00 2E                    6 	.word END_IDX 
      003201                       4532 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      003201 31 FB                    1 	.word LINK 
                           003203     2 	LINK=.
      003203                          3 EEPROM:
      003203 46                       4 	.byte 6+F_IFUNC 	
      003204 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00320A 00 2C                    6 	.word EEPROM_IDX 
      00320C                       4533 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      00320C 32 03                    1 	.word LINK 
                           00320E     2 	LINK=.
      00320E                          3 EEFREE:
      00320E 46                       4 	.byte 6+F_IFUNC 	
      00320F 45 45 46 52 45 45        5 	.ascii "EEFREE"
      003215 00 C8                    6 	.word EEFREE_IDX 
      003217                       4534 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      003217 32 0E                    1 	.word LINK 
                           003219     2 	LINK=.
      003219                          3 EDIT:
      003219 04                       4 	.byte 4 	
      00321A 45 44 49 54              5 	.ascii "EDIT"
      00321E 00 2A                    6 	.word EDIT_IDX 
      003220                       4535 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      003220 32 19                    1 	.word LINK 
                           003222     2 	LINK=.
      003222                          3 DWRITE:
      003222 06                       4 	.byte 6+F_CMD 	
      003223 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003229 00 28                    6 	.word DWRITE_IDX 
      00322B                       4536 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      00322B 32 22                    1 	.word LINK 
                           00322D     2 	LINK=.
      00322D                          3 DREAD:
      00322D 45                       4 	.byte 5+F_IFUNC 	
      00322E 44 52 45 41 44           5 	.ascii "DREAD"
      003233 00 26                    6 	.word DREAD_IDX 
      003235                       4537 	_dict_entry,2,DO,DO_IDX;do_loop
      003235 32 2D                    1 	.word LINK 
                           003237     2 	LINK=.
      003237                          3 DO:
      003237 02                       4 	.byte 2 	
      003238 44 4F                    5 	.ascii "DO"
      00323A 00 24                    6 	.word DO_IDX 
      00323C                       4538 	_dict_entry,3,DEC,DEC_IDX;dec_base
      00323C 32 37                    1 	.word LINK 
                           00323E     2 	LINK=.
      00323E                          3 DEC:
      00323E 03                       4 	.byte 3 	
      00323F 44 45 43                 5 	.ascii "DEC"
      003242 00 22                    6 	.word DEC_IDX 
      003244                       4539 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      003244 32 3E                    1 	.word LINK 
                           003246     2 	LINK=.
      003246                          3 DDR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      003246 43                       4 	.byte 3+F_IFUNC 	
      003247 44 44 52                 5 	.ascii "DDR"
      00324A 00 20                    6 	.word DDR_IDX 
      00324C                       4540 	_dict_entry,4,DATA,DATA_IDX;data  
      00324C 32 46                    1 	.word LINK 
                           00324E     2 	LINK=.
      00324E                          3 DATA:
      00324E 04                       4 	.byte 4 	
      00324F 44 41 54 41              5 	.ascii "DATA"
      003253 00 1E                    6 	.word DATA_IDX 
      003255                       4541 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      003255 32 4E                    1 	.word LINK 
                           003257     2 	LINK=.
      003257                          3 CRL:
      003257 43                       4 	.byte 3+F_IFUNC 	
      003258 43 52 4C                 5 	.ascii "CRL"
      00325B 00 1C                    6 	.word CRL_IDX 
      00325D                       4542 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      00325D 32 57                    1 	.word LINK 
                           00325F     2 	LINK=.
      00325F                          3 CRH:
      00325F 43                       4 	.byte 3+F_IFUNC 	
      003260 43 52 48                 5 	.ascii "CRH"
      003263 00 1A                    6 	.word CRH_IDX 
      003265                       4543 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      003265 32 5F                    1 	.word LINK 
                           003267     2 	LINK=.
      003267                          3 CONST:
      003267 05                       4 	.byte 5 	
      003268 43 4F 4E 53 54           5 	.ascii "CONST"
      00326D 00 C6                    6 	.word CONST_IDX 
      00326F                       4544 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      00326F 32 67                    1 	.word LINK 
                           003271     2 	LINK=.
      003271                          3 CHAR:
      003271 84                       4 	.byte 4+F_CFUNC 	
      003272 43 48 41 52              5 	.ascii "CHAR"
      003276 00 18                    6 	.word CHAR_IDX 
      003278                       4545 	_dict_entry,3,BYE,BYE_IDX;bye 
      003278 32 71                    1 	.word LINK 
                           00327A     2 	LINK=.
      00327A                          3 BYE:
      00327A 03                       4 	.byte 3 	
      00327B 42 59 45                 5 	.ascii "BYE"
      00327E 00 16                    6 	.word BYE_IDX 
      003280                       4546 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      003280 32 7A                    1 	.word LINK 
                           003282     2 	LINK=.
      003282                          3 BTOGL:
      003282 05                       4 	.byte 5 	
      003283 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003288 00 14                    6 	.word BTOGL_IDX 
      00328A                       4547 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00328A 32 82                    1 	.word LINK 
                           00328C     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00328C                          3 BTEST:
      00328C 45                       4 	.byte 5+F_IFUNC 	
      00328D 42 54 45 53 54           5 	.ascii "BTEST"
      003292 00 12                    6 	.word BTEST_IDX 
      003294                       4548 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      003294 32 8C                    1 	.word LINK 
                           003296     2 	LINK=.
      003296                          3 BSET:
      003296 04                       4 	.byte 4 	
      003297 42 53 45 54              5 	.ascii "BSET"
      00329B 00 10                    6 	.word BSET_IDX 
      00329D                       4549 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      00329D 32 96                    1 	.word LINK 
                           00329F     2 	LINK=.
      00329F                          3 BRES:
      00329F 04                       4 	.byte 4 	
      0032A0 42 52 45 53              5 	.ascii "BRES"
      0032A4 00 0E                    6 	.word BRES_IDX 
      0032A6                       4550 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      0032A6 32 9F                    1 	.word LINK 
                           0032A8     2 	LINK=.
      0032A8                          3 BIT:
      0032A8 43                       4 	.byte 3+F_IFUNC 	
      0032A9 42 49 54                 5 	.ascii "BIT"
      0032AC 00 0C                    6 	.word BIT_IDX 
      0032AE                       4551 	_dict_entry,3,AWU,AWU_IDX;awu 
      0032AE 32 A8                    1 	.word LINK 
                           0032B0     2 	LINK=.
      0032B0                          3 AWU:
      0032B0 03                       4 	.byte 3 	
      0032B1 41 57 55                 5 	.ascii "AWU"
      0032B4 00 0A                    6 	.word AWU_IDX 
      0032B6                       4552 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      0032B6 32 B0                    1 	.word LINK 
                           0032B8     2 	LINK=.
      0032B8                          3 ASC:
      0032B8 43                       4 	.byte 3+F_IFUNC 	
      0032B9 41 53 43                 5 	.ascii "ASC"
      0032BC 00 08                    6 	.word ASC_IDX 
      0032BE                       4553 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      0032BE 32 B8                    1 	.word LINK 
                           0032C0     2 	LINK=.
      0032C0                          3 AND:
      0032C0 43                       4 	.byte 3+F_IFUNC 	
      0032C1 41 4E 44                 5 	.ascii "AND"
      0032C4 00 06                    6 	.word AND_IDX 
      0032C6                       4554 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      0032C6 32 C0                    1 	.word LINK 
                           0032C8     2 	LINK=.
      0032C8                          3 ADCREAD:
      0032C8 47                       4 	.byte 7+F_IFUNC 	
      0032C9 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0032D0 00 04                    6 	.word ADCREAD_IDX 
      0032D2                       4555 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      0032D2 32 C8                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



                           0032D4     2 	LINK=.
      0032D4                          3 ADCON:
      0032D4 05                       4 	.byte 5 	
      0032D5 41 44 43 4F 4E           5 	.ascii "ADCON"
      0032DA 00 02                    6 	.word ADCON_IDX 
      0032DC                       4556 kword_dict::
      0032DC                       4557 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      0032DC 32 D4                    1 	.word LINK 
                           0032DE     2 	LINK=.
      0032DE                          3 ABS:
      0032DE 43                       4 	.byte 3+F_IFUNC 	
      0032DF 41 42 53                 5 	.ascii "ABS"
      0032E2 00 00                    6 	.word ABS_IDX 
                                   4558 
                                   4559 ;comands and fonctions address table 	
      0032E4                       4560 code_addr::
      0032E4 29 9D 24 DD 25 2D 29  4561 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             AD 28 27 29 3B 2C D2
      0032F2 20 AF 20 8D 20 F4 20  4562 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             D2 29 06 28 10 2D A4
      003300 2D 9E 2D BC 2D 98 1B  4563 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             54 2D 08 25 69 25 A1
      00330E 1E B0 2D B6 24 49 26  4564 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             42 2A 98 26 DE 21 80
             23 A9 23 8F 28 77
      003322 1B 4F 2D 92 21 64 1F  4565 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             AD 2C F2 2C 61 2C 9F
             28 66
      003332 1B AD 1E 0B 2C A4 2A  4566 	.word let,list,log2,lshift,next,new ; 40..47
             3E 22 2C 26 38
      00333E 2C 51 2D 8C 29 DA 2F  4567 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             3E 29 1A 2A A7 21 4C
             2D B0
      00334E 21 2B 2D AA 1F 18 2D  4568 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             56 2D 5C 2D 62 2D 68
             2D 6E
      00335E 2D 74 2D 7A 2D 80 2D  4569 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             86 28 6A 2E 2D 00 B2
             20 4A
      00336E 2D ED 23 CF 2B 34 2A  4570 	.word restore,return, random,rshift,run,show,free ; 72..79
             6B 23 ED 1A CD 1B 59
      00337C 29 0F 2F 1F 2E 87 2F  4571 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             27 2E FF 21 E8 25 EC
             29 8D
      00338C 2C 21 2C 38 21 AA 24  4572 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             86 1B A2 28 B2 2D 1C
             28 C7
      00339C 20 50 2B BB 27 CD 2A  4573 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             0C 1B 75 23 07 24 50
             1C D2
      0033AC 1C 65 00 00           4574 	.word func_eefree,0 
                                   4575 
                                   4576 
                                   4577 
                                   4578 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0033B0                         30 test:
      0033B0                         31     _vars VSIZE 
      0033B0 52 08            [ 2]    1     sub sp,#VSIZE 
      0033B2 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0033B5 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0033B7 CE 00 0F         [ 2]   34     ldw x,ticks 
      0033BA 1F 01            [ 2]   35     ldw (T,sp),x
      0033BC                         36 1$: ; test add24 
      0033BC A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0033BE AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0033C1 C7 00 0C         [ 1]   39     ld acc24,a 
      0033C4 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0033C7 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0033C9 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0033CC CD 01 58         [ 4]   43     call add24 
      0033CF 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0033D1 1D 00 01         [ 2]   45     subw x,#1
      0033D4 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0033D6 26 E4            [ 1]   47     jrne 1$
      0033D8 CD 17 B1         [ 4]   48     call prt_acc24
      0033DB A6 20            [ 1]   49     ld a,#SPACE 
      0033DD CD 08 FD         [ 4]   50     call putc 
      0033E0 CE 00 0F         [ 2]   51     ldw x,ticks 
      0033E3 72 F0 01         [ 2]   52     subw x,(T,sp)
      0033E6 CD 17 A1         [ 4]   53     call prt_i16  
      0033E9 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      0033EB CD 08 FD         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0033EE CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0033F1 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0033F3 CE 00 0F         [ 2]   60     ldw x,ticks 
      0033F6 1F 01            [ 2]   61     ldw (T,sp),x 
      0033F8                         62 2$: 
      0033F8 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0033FA AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0033FD C7 00 0C         [ 1]   65     ld acc24,a 
      003400 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003403 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003405 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003408 CD 02 21         [ 4]   69     call mul24 
      00340B 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      00340D 1D 00 01         [ 2]   71     subw x,#1
      003410 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003412 26 E4            [ 1]   73     jrne 2$ 
      003414 CD 17 B1         [ 4]   74    call prt_acc24 
      003417 A6 20            [ 1]   75    ld a,#SPACE 
      003419 CD 08 FD         [ 4]   76    call putc 
      00341C CE 00 0F         [ 2]   77     ldw x,ticks 
      00341F 72 F0 01         [ 2]   78     subw x,(T,sp)
      003422 CD 17 A1         [ 4]   79     call prt_i16 
      003425 A6 0D            [ 1]   80     ld a,#CR 
      003427 CD 08 FD         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00342A CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      00342D 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      00342F CE 00 0F         [ 2]   85     ldw x,ticks 
      003432 1F 01            [ 2]   86     ldw (T,sp),x 
      003434                         87 3$: 
      003434 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003436 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003439 C7 00 0C         [ 1]   90     ld acc24,a 
      00343C CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00343F A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003441 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003444 CD 02 21         [ 4]   94     call mul24 
      003447 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003449 1D 00 01         [ 2]   96     subw x,#1
      00344C 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00344E 26 E4            [ 1]   98     jrne 3$ 
      003450 CD 17 B1         [ 4]   99     call prt_acc24    
      003453 A6 20            [ 1]  100     ld a,#SPACE 
      003455 CD 08 FD         [ 4]  101     call putc 
      003458 CE 00 0F         [ 2]  102     ldw x,ticks 
      00345B 72 F0 01         [ 2]  103     subw x,(T,sp)
      00345E CD 17 A1         [ 4]  104     call prt_i16 
      003461 A6 0D            [ 1]  105     ld a,#CR 
      003463 CD 08 FD         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003466 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003469 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      00346B CE 00 0F         [ 2]  110     ldw x,ticks 
      00346E 1F 01            [ 2]  111     ldw (T,sp),x 
      003470                        112 4$:
      003470 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003472 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003475 C7 00 0C         [ 1]  115     ld acc24,a 
      003478 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      00347B A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      00347D AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      003480 CD 02 21         [ 4]  119     call mul24 
      003483 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003485 1D 00 01         [ 2]  121     subw x,#1
      003488 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      00348A 26 E4            [ 1]  123     jrne 4$ 
      00348C CD 17 B1         [ 4]  124     call prt_acc24 
      00348F A6 20            [ 1]  125     ld a,#SPACE 
      003491 CD 08 FD         [ 4]  126     call putc 
      003494 CE 00 0F         [ 2]  127     ldw x,ticks 
      003497 72 F0 01         [ 2]  128     subw x,(T,sp)
      00349A CD 17 A1         [ 4]  129     call prt_i16 
      00349D A6 0D            [ 1]  130     ld a,#CR 
      00349F CD 08 FD         [ 4]  131     call putc 
                                    132 ; test abs24 
      0034A2 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0034A5 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0034A7 CE 00 0F         [ 2]  135     ldw x,ticks 
      0034AA 1F 01            [ 2]  136     ldw (T,sp),x 
      0034AC                        137 5$: 
      0034AC A6 FF            [ 1]  138     ld a,#0xff
      0034AE AE FF FF         [ 2]  139     ldw x,#0xffff
      0034B1 CD 01 A3         [ 4]  140     call abs24 
      0034B4 C7 00 0C         [ 1]  141     ld acc24,a 
      0034B7 CF 00 0D         [ 2]  142     ldw acc24+1,x
      0034BA 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0034BC 1D 00 01         [ 2]  144     subw x,#1
      0034BF 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0034C1 26 E9            [ 1]  146     jrne 5$ 
      0034C3 CD 17 B1         [ 4]  147     call prt_acc24 
      0034C6 A6 20            [ 1]  148     ld a,#SPACE 
      0034C8 CD 08 FD         [ 4]  149     call putc 
      0034CB CE 00 0F         [ 2]  150     ldw x,ticks 
      0034CE 72 F0 01         [ 2]  151     subw x,(T,sp)
      0034D1 CD 17 A1         [ 4]  152     call prt_i16 
      0034D4                        153 6$:
      0034D4 A6 0D            [ 1]  154     ld a,#CR 
      0034D6 CD 08 FD         [ 4]  155     call putc 
      0034D9 CD 35 1F         [ 4]  156     call read_integer 
      0034DC 55 00 0C 00 17   [ 1]  157     mov farptr,acc24 
      0034E1 55 00 0D 00 18   [ 1]  158     mov farptr+1,acc16 
      0034E6 55 00 0E 00 19   [ 1]  159     mov farptr+2,acc8 
      0034EB CD 35 1F         [ 4]  160     call read_integer 
      0034EE C6 00 0C         [ 1]  161     ld a,acc24 
      0034F1 CE 00 0D         [ 2]  162     ldw x,acc16 
      0034F4 55 00 17 00 0C   [ 1]  163     mov acc24,farptr 
      0034F9 55 00 18 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034FE 55 00 19 00 0E   [ 1]  165     mov acc8,farptr+2 
      003503 CD 02 E5         [ 4]  166     call div24 
      003506 88               [ 1]  167     push a 
      003507 89               [ 2]  168     pushw x 
      003508 CD 17 B1         [ 4]  169     call prt_acc24 
      00350B A6 20            [ 1]  170     ld a,#SPACE 
      00350D CD 08 FD         [ 4]  171     call putc 
      003510 85               [ 2]  172     popw x
      003511 CF 00 0D         [ 2]  173     ldw acc16,x  
      003514 32 00 0C         [ 1]  174     pop acc24 
      003517 CD 17 B1         [ 4]  175     call prt_acc24
      00351A 20 B8            [ 2]  176     jra 6$
      00351C                        177     _drop VSIZE 
      00351C 5B 08            [ 2]    1     addw sp,#VSIZE 
      00351E 81               [ 4]  178     ret 
                                    179 
                                    180 
      00351F                        181 read_integer:
      00351F A6 3F            [ 1]  182     ld a,#'? 
      003521 CD 08 FD         [ 4]  183     call putc  
      003524 72 5F 00 03      [ 1]  184 	clr count  
      003528 CD 0A 5F         [ 4]  185 	call readln 
      00352B AE 16 68         [ 2]  186 	ldw x,#tib 
      00352E 3B 00 03         [ 1]  187 	push count
      003531 4B 00            [ 1]  188 	push #0 
      003533 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003536 5C               [ 1]  190 	incw x 
      003537                        191 	_drop 2 
      003537 5B 02            [ 2]    1     addw sp,#2 
      003539 72 5F 00 01      [ 1]  192 	clr in 
      00353D CD 0E C7         [ 4]  193 	call get_token
      003540 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003542 27 0F            [ 1]  195 	jreq 3$ 
      003544 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003546 CD 0E C7         [ 4]  197 	call get_token 
      003549 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00354B 27 03            [ 1]  199 	jreq 2$
      00354D CC 16 45         [ 2]  200 	jp syntax_error
      003550                        201 2$:
      003550 CD 01 D1         [ 4]  202 	call neg_acc24  	
      003553                        203 3$: 
      003553 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003580                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003580                         30 app_space::
      003580 00 00                   31 app_sign: .word 0 ; .ascii "BC"  ; signature 
      003582 00 00                   32 app_size: .word 0 ; 31 
      003584                         33 app: 
                                     34 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     35 ;;  BASIC code demo 'BLINK.BAS' 
                                     36 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     37 ;; byte code generated by compiler.
                                     38 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     39 ;.byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
                                     40 ;.byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
                                     41 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0032DE R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      0032D4 R
    ADCON_ID=  000002     |   4 ADCREAD    0032C8 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        0032C0 R   |     AND_IDX =  000006     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        0032B8 R
    ASC_IDX =  000008     |     ATTRIB  =  000002     |   4 AUTO_RUN   000145 R
  4 AWU        0032B0 R   |   4 AWUHandl   000004 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000A 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   4 BIT        0032A8 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BIT_IDX =  00000C     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000C 
  4 BRES       00329F R   |     BRES_IDX=  00000E     |     BS      =  000008 
  4 BSET       003296 R   |     BSET_IDX=  000010     |     BSIZE   =  000006 
  4 BTEST      00328C R   |     BTEST_ID=  000012     |   4 BTOGL      003282 R
    BTOGL_ID=  000014     |     BTW     =  000001     |     BUFPTR  =  000003 
  4 BYE        00327A R   |     BYE_IDX =  000016     |     C       =  000001 
    CAN     =  000018     |   4 CANT_DO    002775 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       003271 R
    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     COMMA   =  00002C     |   4 CONST      003267 R
  4 CONST_CO   001C50 R   |     CONST_ID=  0000C6     |     CONST_RE=  000005 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CRH        00325F R
    CRH_IDX =  00001A     |   4 CRL        003257 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000008     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       00324E R
    DATA_IDX=  00001E     |     DBG_A   =  000008     |     DBG_CC  =  000009 
    DBG_X   =  000006     |     DBG_Y   =  000004     |     DC1     =  000011 
    DC2     =  000012     |     DC3     =  000013     |     DC4     =  000014 
  4 DDR        003246 R   |     DDR_IDX =  000020     |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        00323E R
    DEC_IDX =  000022     |     DEPTH   =  000001     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         003237 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000024     |   4 DREAD      00322D R
    DREAD_ID=  000026     |   4 DWRITE     003222 R   |     DWRITE_I=  000028 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       003219 R   |     EDIT_IDX=  00002A     |   4 EEFREE     00320E R
    EEFREE_I=  0000C8     |   4 EEPROM     003203 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002C     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        0031FB R
    END_IDX =  00002E     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      0031F1 R   |     ERASE_ID=  000030 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   4 FCPU       0031E8 R   |     FCPU_IDX=  000032 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001DEB R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   4 FOR        0031E0 R
    FOR_IDX =  000036     |   4 FREE       0031D7 R   |     FREE_IDX=  000096 
    FRUN    =  000000     |     FS      =  00001C     |     FSLEEP  =  000003 
    FSTEP   =  000003     |     FTRAP   =  000001     |     FUPDATE =  000007 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   4 GET        0031CF R   |     GET_IDX =  0000C4 
  4 GOSUB      0031C5 R   |     GOSUB_ID=  000038     |   4 GOTO       0031BC R
    GOTO_IDX=  00003A     |   4 GPIO       0031B3 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_IDX=  00003C     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        0031AB R
    HEX_IDX =  00003E     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        0031A3 R   |     IDR_IDX =  000040     |   4 IF         00319C R
    IF_IDX  =  000042     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      003192 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000044 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   4 INVERT     003187 R
    INVERT_I=  000046     |     INW     =  00000A     |     IPOS    =  000001 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   4 IWDGEN     00317C R
    IWDGEN_I=  000048     |   4 IWDGREF    003170 R   |     IWDGREF_=  00004A 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    KCHAR   =  000002     |   4 KEY        003168 R   |     KEY_END =  000083 
    KEY_IDX =  00004C     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        003160 R   |     LET_IDX =  00004E 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  0032DE R   |   4 LIST       003157 R   |     LIST_IDX=  000050 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG        00314F R   |     LOG_IDX =  000052 
    LOOP_CNT=  002710     |   4 LSHIFT     003144 R   |     LSHIFT_I=  000054 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000004 
    N2      =  000007     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        00313C R   |     NEW_IDX =  000058     |   4 NEXT       003133 R
    NEXT_IDX=  000056     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        00312B R   |     NOT_IDX =  00005A     |   4 NOT_SAVE   001EDD R
  4 NO_APP     0027B7 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        003123 R
    ODR_IDX =  00005C     |   4 ON         00311C R   |     ONOFF   =  000003 
    ON_IDX  =  0000C2     |     OP      =  000001     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         003115 R   |     OR_IDX  =  00005E     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        00310D R   |     PAD_IDX =  000060     |     PAD_SIZE=  000080 
  4 PAUSE      003103 R   |     PAUSE_ID=  000062     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       0030FA R   |     PEEK_IDX=  000066     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PINNO   =  000001     |   4 PINP       0030F1 R   |     PINP_IDX=  000068 
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      0030E7 R   |     PMODE_ID=  000064 
  4 POKE       0030DE R   |     POKE_IDX=  00006A     |   4 POUT       0030D5 R
    POUT_IDX=  00006C     |     PREV    =  000001     |   4 PRINT      0030CB R
    PROD    =  000001     |     PROD_SIG=  00000A     |   4 PROG_ADD   001DC1 R
  4 PROG_SIZ   001DD3 R   |   4 PRTA       0030C2 R   |     PRTA_IDX=  000070 
  4 PRTB       0030B9 R   |     PRTB_IDX=  000072     |   4 PRTC       0030B0 R
    PRTC_IDX=  000074     |   4 PRTD       0030A7 R   |     PRTD_IDX=  000076 
  4 PRTE       00309E R   |     PRTE_IDX=  000078     |   4 PRTF       003095 R
    PRTF_IDX=  00007A     |   4 PRTG       00308C R   |     PRTG_IDX=  00007C 
  4 PRTH       003083 R   |     PRTH_IDX=  00007E     |   4 PRTI       00307A R
    PRTI_IDX=  000080     |     PRT_IDX =  00006E     |     PSIZE   =  000001 
    PSTR    =  000003     |   4 QKEY       003071 R   |     QKEY_IDX=  000082 
    QSIGN   =  000005     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
  4 RAM_MEM    001DFC R   |     RAM_SIZE=  001800     |     RBT_IDX =  000086 
  4 READ       003068 R   |     READ_IDX=  000084     |   4 REBOOT     00305D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    RECLEN  =  000005     |   4 REG_A      000520 R   |   4 REG_CC     000524 R
  4 REG_EPC    000513 R   |   4 REG_SP     000529 R   |   4 REG_X      00051C R
  4 REG_Y      000518 R   |     RELOP   =  000001     |   4 REM        003055 R
    REM_IDX =  000088     |   4 RESTORE    003049 R   |     REST_IDX=  00008A 
    RETL1   =  000001     |   4 RETURN     00303E R   |     RET_ADDR=  000003 
    RET_BPTR=  000003     |     RET_IDX =  00008C     |     RET_INW =  000005 
  4 RND        003036 R   |     RND_IDX =  00008E     |     ROP     =  004800 
    RS      =  00001E     |   4 RSHIFT     00302B R   |     RSHIFT_I=  000090 
    RSIGN   =  000006     |     RST_SR  =  0050B3     |   4 RUN        003023 R
    RUN_IDX =  000092     |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
    R_A     =  000007     |     R_CC    =  000008     |     R_X     =  000005 
    R_Y     =  000003     |   4 SAVE       00301A R   |     SAVE_IDX=  000034 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   4 SHOW       003011 R   |     SHOW_IDX=  000094 
    SI      =  00000F     |     SIGN    =  000001     |   4 SIGNATUR   002773 R
  4 SIZE       003008 R   |     SIZE_IDX=  0000C0     |     SKIP    =  000005 
  4 SLEEP      002FFE R   |     SLEEP_ID=  000098     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      002FF4 R
    SPIEN_ID=  00009C     |   4 SPIRD      002FEA R   |     SPIRD_ID=  00009A 
  4 SPISEL     002FDF R   |     SPISEL_I=  00009E     |   4 SPIWR      002FD5 R
    SPIWR_ID=  0000A0     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STATES     0004D6 R   |   4 STEP       002FCC R   |     STEP_IDX=  0000A2 
  4 STOP       002FC3 R   |     STOP_IDX=  0000A4     |     STR     =  000003 
  4 STR_BYTE   001DE4 R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    T       =  000001     |     TAB     =  000009     |     TABW    =  000004 
    TAB_WIDT=  000004     |     TARGET  =  000001     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  4 TICKS      002FB9 R   |     TICKS_ID=  0000A6     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    002FAD R   |   4 TIMER      002FA3 R   |     TIMER_ID=  0000A8 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000007 
    TK_SHARP=  000009     |     TK_VAR  =  000085     |     TMROUT_I=  0000AA 
  4 TO         002F9C R   |   4 TONE       002F93 R   |     TONE_IDX=  0000AE 
    TOWRITE =  000005     |     TO_IDX  =  0000AC     |   4 Timer4Up   00001E R
  4 TrapHand   000012 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     002F88 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    UBOUND_I=  0000B0     |   4 UBTN_Han   000057 R   |   4 UFLASH     002F7D R
    UFLASH_I=  0000B2     |   4 UNTIL      002F73 R   |     UNTIL_ID=  0000B4 
    US      =  00001F     |   4 USER_ABO   00005F R   |   4 USR        002F6B R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000B6     |   4 Uart1RxH   00088B R   |   4 UserButt   000033 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VSISE   =  000003 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       002F62 R
    WAIT_IDX=  0000B8     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  4 WORDS      002F58 R   |     WORDS_ID=  0000BA     |   4 WRITE      002F4E R
    WRITE_ID=  0000BC     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        002F46 R   |     XOR_IDX =  0000BE 
    XSAVE   =  000005     |     XSTACK_E=  001773     |     XSTACK_S=  00003C 
    XTEMP   =  000001     |     YSAVE   =  000004     |     YTEMP   =  000003 
  4 abs        00299D R   |   4 abs24      0001A3 R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000BC6 R   |   4 add24      000158 R   |   4 add_char   001337 R
  4 add_spac   001117 R   |   4 analog_r   00252D R   |   4 app        003584 R
  4 app_sign   003580 R   |   4 app_size   003582 R   |   4 app_spac   003580 GR
  4 arduino_   002B14 R   |   4 arg_list   001905 R   |   5 array_si   00001F R
  4 ascii      002827 R   |   4 at_tst     000F81 R   |   4 atoi24     00183C GR
  4 atoi_exi   0018A2 R   |   4 awu        00293B R   |   4 awu02      00294E R
  4 bad_port   0028AD R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       0024A6 R   |   4 beep_1kh   00247D GR  |   4 bin_exit   000E02 R
  4 bit_and    0029AD R   |   4 bit_or     0029DA R   |   4 bit_rese   0020AF R
  4 bit_set    00208D R   |   4 bit_test   0020F4 R   |   4 bit_togg   0020D2 R
  4 bit_xor    002A0C R   |   4 bitmask    002CD2 R   |   4 bkslsh_t   000F2E R
  4 bksp       000964 R   |   2 block_bu   0016B8 GR  |   4 block_er   00077E R
  4 break_po   00261A R   |   4 bye        002906 R   |   4 char       002810 R
  4 clear_ba   0014A1 R   |   4 clear_bl   0026CA R   |   4 clear_va   0013F9 R
  4 clock_in   00007A R   |   4 cmd_cons   001CD2 R   |   4 cmd_end    002449 R
  4 cmd_get    002450 R   |   4 cmd_itf    00052E R   |   4 cmd_line   0016D9 R
  4 cmd_name   001357 R   |   4 cmd_on     002307 R   |   4 cmd_size   001B75 R
  4 code_add   0032E4 GR  |   4 cold_sta   0000B2 R   |   4 colon_ts   000F55 R
  4 comma_ts   000F60 R   |   4 comp_msg   001624 R   |   4 compile    001086 GR
  4 const_cr   002D9E R   |   4 const_cr   002DA4 R   |   4 const_dd   002D98 R
  4 const_ee   002DB6 R   |   4 const_id   002D92 R   |   4 const_in   002DB0 R
  4 const_od   002D8C R   |   4 const_ou   002DAA R   |   4 const_po   002D56 R
  4 const_po   002D5C R   |   4 const_po   002D62 R   |   4 const_po   002D68 R
  4 const_po   002D6E R   |   4 const_po   002D74 R   |   4 const_po   002D7A R
  4 const_po   002D80 R   |   4 const_po   002D86 R   |   4 convert_   000D70 R
  4 convert_   000928 R   |   4 copy_com   000FB6 R   |   5 count      000003 GR
  4 cp24       00019A R   |   4 cp_loop    0018B4 R   |   4 cpl24      0001AA R
  4 cpy_cmd_   001102 R   |   4 cpy_quot   00113F R   |   4 create_g   000C9A R
  4 cs_high    002F39 R   |   4 cstk_pro   001B1D R   |   4 dash_tst   000F76 R
  4 data       002DBC R   |   5 data_len   000009 R   |   4 data_lin   002DCB R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 data_sea   002E0C R
  4 dec_base   001B54 R   |   4 decomp_l   0011F8 R   |   4 decompil   0011B0 GR
  4 del_line   000C6D R   |   4 delete_l   000A51 R   |   4 delete_n   000974 R
  4 delete_u   000A16 R   |   4 digital_   002569 R   |   4 digital_   0025A1 R
  4 div24      0002E5 R   |   4 divu24_8   0002C7 R   |   4 do_loop    002D08 R
  4 do_progr   000771 R   |   4 edit       001EB0 R   |   4 enable_i   002C61 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

  4 eql_tst    00100B R   |   4 equal      00134A R   |   4 erase      002642 R
  4 erase_ex   00079D R   |   4 erase_fl   000793 R   |   4 err_bad_   001585 R
  4 err_buf_   0015FB R   |   4 err_cmd_   001549 R   |   4 err_div0   00150E R
  4 err_dupl   001563 R   |   4 err_math   0014F5 R   |   4 err_mem_   0014DA R
  4 err_msg    0014B8 R   |   4 err_no_a   001591 R   |   4 err_no_d   0015C4 R
  4 err_no_f   0015E8 R   |   4 err_no_l   00151D R   |   4 err_no_p   0015D4 R
  4 err_not_   001574 R   |   4 err_over   001608 R   |   4 err_run_   001533 R
  4 err_synt   0014E7 R   |   4 escaped    000D85 GR  |   4 expect     0018F3 R
  4 expr_exi   001A75 R   |   4 expressi   001A37 R   |   4 factor     00195A R
  5 farptr     000017 R   |   4 fcpu       002A98 R   |   4 fetchc     00061E R
  4 fill_wri   0026BA R   |   4 final_te   000BBF R   |   4 first_li   001E5A R
  5 flags      000021 GR  |   4 for        002180 R   |   4 free       001B59 R
  5 free_eep   000023 R   |   7 free_ram   000080 R   |   4 func_arg   001900 R
  4 func_eef   001C65 R   |   4 func_not   002C51 R   |   4 ge         00134C R
  4 get_addr   001781 R   |   4 get_arra   00192A R   |   4 get_char   00179B R
  4 get_cmd_   00118F R   |   4 get_code   001765 R   |   4 get_cons   001BF0 R
  4 get_esca   000934 R   |   4 get_int2   00178B R   |   4 get_targ   002298 R
  4 get_targ   0022A6 R   |   4 get_tick   00298D R   |   4 get_toke   000EC7 GR
  4 getc       00090D GR  |   4 gosub      0023A9 R   |   4 gosub_1    0023B4 R
  4 gosub_2    0023BA R   |   4 goto       00238F R   |   4 goto_1     002399 R
  4 gpio       002877 R   |   4 gt         001348 R   |   4 gt_tst     001016 R
  4 hex_base   001B4F R   |   4 hex_dump   00065E R   |   4 if         002164 R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   00086F R   |   4 input_ex   002045 R   |   4 input_lo   001FB1 R
  4 input_va   001FAD R   |   4 insert_c   0009D3 R   |   4 insert_l   000CC6 R
  4 insert_l   000D35 R   |   4 interp_l   00171A R   |   4 interpre   0016F5 R
  4 invalid    000573 R   |   4 invalid_   0005F4 R   |   4 invert     002CF2 R
  4 is_alnum   000E37 GR  |   4 is_alpha   000E1D GR  |   4 is_data_   002DC2 R
  4 is_digit   000E2E GR  |   4 is_symbo   000E40 R   |   4 itoa       0017D7 GR
  4 itoa_loo   0017F9 R   |   4 jp_to_ta   00239C R   |   4 key        002866 R
  4 kword_di   0032DC GR  |   4 kword_en   002F44 R   |   4 le         001351 R
  4 leading_   002CB3 R   |   4 ledoff     000429 R   |   4 ledon      000424 R
  4 ledtoggl   00042E R   |   4 left_par   000437 R   |   4 let        001BAD GR
  4 let_arra   001BBB R   |   4 let_eval   001BC3 R   |   4 let_var    001BC0 R
  4 lines_sk   001E5D R   |   4 list       001E0B R   |   4 list_con   001BFF R
  4 list_exi   001E9F R   |   4 list_loo   001E7D R   |   4 log2       002CA4 R
  4 logical_   002C3B R   |   4 look_tar   0022C9 R   |   4 loop_bac   00227B R
  5 loop_dep   00001E R   |   4 loop_don   002290 R   |   4 lshift     002A3E R
  4 lt         00134F R   |   4 lt_tst     00103F R   |   4 mem_peek   000590 R
  4 mod24      000393 R   |   4 move       0013B5 GR  |   4 move_dow   0013D4 R
  4 move_era   000700 R   |   4 move_exi   0013F5 R   |   4 move_lef   0009AB R
  4 move_loo   0013D9 R   |   4 move_prg   000740 R   |   4 move_rig   0009B9 R
  4 move_up    0013C6 R   |   4 mul24      000221 R   |   4 mul_char   001339 R
  4 mulu24_8   0001EE R   |   4 nbr_tst    000EFA R   |   4 ne         001354 R
  4 neg24      0001B7 R   |   4 neg_acc2   0001D1 R   |   4 neg_ax     0001C9 R
  4 new        002638 R   |   4 next       00222C R   |   4 next_lin   0016FD R
  4 next_tok   00174B GR  |   4 no_match   0018C6 R   |   4 number     000624 R
  4 other      001068 R   |   4 overwrit   000BEB R   |   2 pad        0016B8 GR
  4 pad_ref    002F3E R   |   4 parse_bi   000DE0 R   |   4 parse_in   000D8D R
  4 parse_ke   000E63 R   |   4 parse_qu   000D38 R   |   4 parse_sy   000E4B R
  4 pause      00291A R   |   4 pause02    00292D R   |   4 peek       00214C R
  4 peek_byt   0005BE R   |   4 pin_mode   002AA7 R   |   4 plus_tst   000FDF R
  4 poke       00212B R   |   4 power_ad   0024DD R   |   4 prcnt_ts   001000 R
  4 print      001F18 R   |   4 print_ex   001F81 R   |   4 print_fa   000603 R
  4 print_he   000C20 GR  |   4 print_re   000483 R   |   4 print_st   000583 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

  4 print_to   0017BF R   |   4 prog_siz   001D7A R   |   4 program_   001D82 R
  4 program_   00071A R   |   4 program_   000740 R   |   4 prt_acc2   0017B1 R
  4 prt_basi   001EF4 R   |   4 prt_i16    0017A1 R   |   4 prt_loop   001F1C R
  4 prt_peek   000406 GR  |   4 prt_reg1   000464 R   |   4 prt_reg8   000442 R
  4 prt_regs   00039C GR  |   5 ptr16      000018 GR  |   5 ptr8       000019 R
  4 putc       0008FD GR  |   4 puts       00095A GR  |   4 qgetc      000906 GR
  4 qkey       00286A GR  |   4 qmark_ts   000F8C R   |   4 qsign      0026B3 R
  4 random     002B34 R   |   4 read       002E2D R   |   4 read01     002E2F R
  4 read_int   00351F R   |   4 readln     000A5F GR  |   4 readln_l   000A6C R
  4 readln_q   000C08 R   |   4 refresh_   002C9F R   |   4 regs_sta   0003DF R
  4 rel_exit   001ACA R   |   4 relation   001A78 R   |   4 relop_st   00133C R
  4 remark     00204A GR  |   4 repl       00053C R   |   4 repl_exi   000564 R
  4 reset_co   001F1A R   |   4 rest_con   001F9D R   |   4 restore    002DED R
  4 restore_   002E28 R   |   4 return     0023CF R   |   4 right_al   00112D GR
  4 row_alig   000854 R   |   4 row_eras   0006D3 R   |   4 row_eras   000700 R
  4 row_loop   000641 R   |   4 rparnt_t   000F4A R   |   4 rshift     002A6B R
  7 rsign      00007C R   |   7 rsize      00007E R   |   4 rt_msg     001612 R
  4 run        0023ED R   |   4 run_app    000127 R   |   4 run_it     00241F R
  4 run_it_0   002421 R   |   5 rx1_head   00002D R   |   5 rx1_queu   000025 R
  5 rx1_tail   00002E R   |   4 save_app   0026DE R   |   4 save_con   001F8D R
  4 scan_blo   00087D R   |   4 search_c   001C8E R   |   4 search_d   0018A6 GR
  4 search_e   0018F0 R   |   4 search_l   000C42 GR  |   4 search_l   000C51 R
  4 search_n   0018AA R   |   5 seedx      000013 R   |   5 seedy      000015 R
  4 select_p   002B04 R   |   4 send_esc   000982 R   |   4 send_par   00098D R
  4 set_data   002DDE R   |   4 set_time   002C21 R   |   4 sharp_ts   000F6B R
  4 show       001ACD R   |   4 show_row   00062F R   |   4 single_c   001332 R
  4 skip       000EB4 R   |   4 skip_2_b   001769 R   |   4 skip_str   001772 R
  4 slash_ts   000FF5 R   |   4 sleep      00290F R   |   4 software   001408 R
  4 spaces     0009C7 GR  |   4 spi_clea   002ED2 R   |   4 spi_disa   002EBA R
  4 spi_enab   002E87 R   |   4 spi_rcv_   002EF4 R   |   4 spi_read   002F1F R
  4 spi_sele   002F27 R   |   4 spi_send   002EDE R   |   4 spi_writ   002EFF R
  2 stack_fu   001774 GR  |   2 stack_un   001800 R   |   4 star_tst   000FEA R
  4 step       0021E8 R   |   4 stop       0025EC R   |   4 store_lo   002205 R
  4 str_matc   0018D3 R   |   4 str_tst    000EEA R   |   4 strcmp     001394 R
  4 strcpy     0013A5 GR  |   4 strlen     001389 GR  |   4 sub24      00017D R
  4 symb_loo   000E4C R   |   4 syntax_e   001645 GR  |   4 system_i   00144E R
  5 tab_widt   000022 GR  |   4 tb_error   001647 GR  |   4 term       0019ED R
  4 term01     0019F5 R   |   4 term_exi   001A34 R   |   4 test       0033B0 R
  4 test_p     00057B R   |   2 tib        001668 GR  |   4 tick_tst   000FA4 R
  5 ticks      00000F R   |   4 timeout    002C38 R   |   5 timer      000011 GR
  4 timer2_i   000090 R   |   4 timer4_i   00009D R   |   4 tk_id      001635 R
  4 to         0021AA R   |   4 to_eepro   000769 R   |   4 to_flash   00076E R
  4 to_hex_c   000C37 GR  |   4 to_upper   001830 GR  |   4 token_ch   00107F R
  4 token_ex   001083 R   |   4 tone       002486 R   |   4 try_next   002E18 R
  5 txtbgn     00001A GR  |   5 txtend     00001C GR  |   4 uart1_ge   00090D GR
  4 uart1_in   0008B8 R   |   4 uart1_pu   0008FD GR  |   4 uart1_qg   000906 GR
  4 uart1_se   0008C8 R   |   4 ubound     001BA2 R   |   4 uflash     0028B2 R
  4 unlock_e   00069D R   |   4 unlock_f   0006B8 R   |   4 until      002D1C R
  4 user_int   000046 R   |   4 usr        0028C7 R   |   4 var_name   001185 GR
  5 vars       00002F GR  |   4 wait       002050 R   |   4 warm_ini   00147F R
  4 warm_sta   0016D6 R   |   4 words      002BBB R   |   4 words_co   002C0B R
  4 write      0027CD R   |   4 write_bl   000819 GR  |   4 write_bu   00075A R
  4 write_by   00079F R   |   4 write_ee   0007DB R   |   4 write_ex   000814 R
  4 write_fl   0007C5 R   |   4 write_nb   00083E R   |   2 xstack_f   001738 GR
  2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3584   flags    0
   5 DATA       size     7D   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

