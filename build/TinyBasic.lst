ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                     28   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44
                           00003A    86 		COLON = 58 
                           00003B    87 		SEMIC = 59  
                           000023    88 		SHARP = 35
                           000027    89 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                           000006    45         FLN_REJECTED=6 ; a memory full error occured while in *insert_line*. 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5      ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8      ; item separator ',' 
                           000009    94         TK_COLON=9      ; command separator ':' 
                           00000A    95         TK_SEMIC=10     ; used in PRINT command.  ';' 
                                     96 
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                           000012   144     ERR_NO_PROGRAM=18
                                    145 
                                    146 ;--------------------------------------
                                    147 ;   assembler flags 
                                    148 ;-------------------------------------
                                    149 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    150 
                                    151      .macro _usec_dly n 
                                    152     ldw x,#(16*n-2)/4
                                    153     decw x
                                    154     nop 
                                    155     jrne .-4
                                    156     .endm 
                                    157     
                                    158     ; load X register with 
                                    159     ; entry point of dictionary
                                    160     ; before calling 'search_dict'
                                    161     .macro _ldx_dict dict_name
                                    162     ldw x,#dict_name+2
                                    163     .endm 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; reset BASIC pointer
                                    166     ; to beginning of last token
                                    167     ; extracted except if it was end of line 
                                    168     .macro _unget_token 
                                    169      mov in,in.saved  
                                    170     .endm
                                    171 
                                    172 
                                    173     ; extract code address for 
                                    174     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    175     .macro _get_code_addr
                                    176         ldw x,(x)
                                    177         inc in 
                                    178         inc in 
                                    179     .endm 
                                    180 
                                    181 
                                    182 
                                    183 ;---------------------------------------
                                    184 ;    xtack manipulation macros 
                                    185 ;    Y is used as xstack pointer  
                                    186 ;----------------------------------------
                                    187     ; pop in A:X from XSTACK 
                                    188     .macro _xpop 
                                    189     ld a,(y)
                                    190     ldw x,y 
                                    191     ldw x,(1,x)
                                    192     addw y,#CELL_SIZE 
                                    193     .endm 
                                    194 
                                    195     ; push A:X  to XSTACK 
                                    196     .macro _xpush 
                                    197     subw y,#CELL_SIZE
                                    198     ld (y),a 
                                    199     ldw (1,y),x 
                                    200     .endm 
                                    201 
                                    202     ; drop from XSTACK 
                                    203     .macro _xdrop 
                                    204     addw y,#CELL_SIZE 
                                    205     .endm 
                                    206 
                                    207     ; @T fetch top xstack 
                                    208     .macro _at_top
                                    209     ld a,(y)
                                    210     ldw x,y 
                                    211     ldw x,(1,x)
                                    212     .endm 
                                    213 
                                    214     ; @N  fetch next on xstack 
                                    215     .macro _at_next 
                                    216     ld a,(3,y)
                                    217     ldw x,y 
                                    218     ldw x,(4,x)
                                    219     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220 
                                    221     ; !T put on top of xtack 
                                    222     .macro _store_top 
                                    223     ld (y),a 
                                    224     ldw (1,y),x     
                                    225     .endm 
                                    226 
                                    227     ; !N put next on xstack 
                                    228     .macro _store_next 
                                    229     ld (3,y),a 
                                    230     ldw (4,y),x 
                                    231     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33   
                                     34 ;;-----------------------------------
                                     35     .area SSEG (ABS)
                                     36 ;; working buffers and stack at end of RAM. 	
                                     37 ;;-----------------------------------
      001668                         38     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE*CELL_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         39 tib:: .ds TIB_SIZE             ; terminal input buffer
      0016B8                         40 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         41 pad:: .ds PAD_SIZE             ; working buffer
      001738                         42 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      001774                         43 xstack_unf:: ; xstack underflow 
      001774                         44 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         45 stack_unf: ; stack underflow ; control_stack bottom 
                                     46 
                                     47 ;;--------------------------------------
                                     48     .area HOME 
                                     49 ;; interrupt vector table at 0x8000
                                     50 ;;--------------------------------------
                                     51 
      000000 82 00 00 B5             52     int cold_start			; RESET vector 
      000004 82 00 00 12             53 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             54 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             55 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             56 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             57 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             58 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             59 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             60 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             61 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             62 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             63 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             64 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             65 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             66 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             67 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             68 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             69 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             70 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             71 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 C4             72 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             73 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             74 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             75 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             76 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             77 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             78 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             79 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             80 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             81 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             82 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             83 	int NonHandledInterrupt ;int29  not used
                                     84 
                                     85 ;---------------------------------------
                                     86     .area CODE
                                     87 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                     88 
                                     89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     90 ; non handled interrupt 
                                     91 ; reset MCU
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         93 NonHandledInterrupt:
      000000                         94 	_swreset ; see "inc/gen_macros.inc"
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; auto wakeup from halt
                                     98 ; at iret, program continue 
                                     99 ; after halt instruction
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        101 AWUHandler:
      000004 72 19 50 F0      [ 1]  102 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  103 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  104 	clr AWU_TBR 
      000011 80               [11]  105 	iret
                                    106 
                                    107 ;------------------------------------
                                    108 ; system call handler  
                                    109 ;------------------------------------
      000012                        110 SysCall:
                                    111 
      000012 80               [11]  112 	iret 
                                    113 
                                    114 ;------------------------------
                                    115 ; TIMER 4 is used to maintain 
                                    116 ; a milliseconds 'ticks' counter
                                    117 ; and decrement 'timer' varaiable
                                    118 ; ticks range {0..2^23-1}
                                    119 ; timer range {0..65535}
                                    120 ;--------------------------------
      000013                        121 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  122 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  123 	ld a,ticks 
      00001A CE 00 10         [ 2]  124 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  125 	addw x,#1 
      000020 A9 00            [ 1]  126 	adc a,#0 
      000022 2A 02            [ 1]  127 	jrpl 0$
                                    128 ; reset to 0 when negatif 
      000024 4F               [ 1]  129 	clr a 
      000025 5F               [ 1]  130 	clrw x 
      000026 C7 00 0F         [ 1]  131 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  132 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  133 	ldw x,timer
      00002F 27 04            [ 1]  134 	jreq 1$
      000031 5A               [ 2]  135 	decw x 
      000032 CF 00 12         [ 2]  136 	ldw timer,x 
      000035                        137 1$:	
      000035 80               [11]  138 	iret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                    142 ; on NUCLEO card.
                                    143 ; This is used to abort a progam lock 
                                    144 ; in infinite loop. 
                                    145 ;------------------------------------
      000036                        146 UserButtonHandler:
                                    147 ; wait button release
      000036 5F               [ 1]  148 	clrw x
      000037 5A               [ 2]  149 1$: decw x 
      000038 26 FD            [ 1]  150 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  151 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    152 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  153     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  154 	bres flags,#FSLEEP 
      000048 80               [11]  155 	iret
      000049                        156 2$:	
      000049                        157 user_interrupted:
      000049 72 00 00 22 02   [ 2]  158     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  159 	jra UBTN_Handler_exit 
      000050                        160 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  161 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  162 	ldw x,#USER_ABORT
      000057 CD 09 A4         [ 4]  163 	call puts 
      00005A                        164 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  165     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  166     ldw sp,x
      00005E 9A               [ 1]  167 	rim 
      00005F CC 17 63         [ 2]  168 5$:	jp warm_start
                                    169 
      000062 0A 50 72 6F 67 72 61   170 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    171 
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    173 ;    peripherals initialization
                                    174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    175 
                                    176 ;----------------------------------------
                                    177 ; inialize MCU clock 
                                    178 ; input:
                                    179 ;   A 		source  HSI | 1 HSE 
                                    180 ;   XL      CLK_CKDIVR , clock divisor 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;----------------------------------------
      00007D                        184 clock_init:	
      00007D C1 50 C3         [ 1]  185 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  186 	jreq 2$ ; no switching required 
                                    187 ; select clock source 
      000082 72 12 50 C5      [ 1]  188 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  189 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  190 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  191 	jrne 1$
      00008E                        192 2$: 	
                                    193 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  194 	ld a,xl 
      00008F C7 50 C6         [ 1]  195 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  196 	ret
                                    197 
                                    198 ;----------------------------------
                                    199 ; TIMER2 used as audio tone output 
                                    200 ; on port D:5. CN9-6
                                    201 ; channel 1 configured as PWM mode 1 
                                    202 ;-----------------------------------  
                                    203 
      000093                        204 timer2_init:
      000093 72 1A 50 C7      [ 1]  205 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  206  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  207 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  208 	ret 
                                    209 
                                    210 ;---------------------------------
                                    211 ; TIM4 is configured to generate an 
                                    212 ; interrupt every millisecond 
                                    213 ;----------------------------------
      0000A0                        214 timer4_init:
      0000A0 72 18 50 C7      [ 1]  215 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  216 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  217 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  218 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  219 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  220 	ret
                                    221 
                                    222 ;-------------------------------------
                                    223 ;  initialization entry point 
                                    224 ;-------------------------------------
      0000B5                        225 cold_start:
                                    226 ;set stack 
      0000B5 AE 17 FF         [ 2]  227 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  228 	ldw sp,x
                                    229 ; clear all ram 
      0000B9 7F               [ 1]  230 0$: clr (x)
      0000BA 5A               [ 2]  231 	decw x 
      0000BB 26 FC            [ 1]  232 	jrne 0$
                                    233 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  234 	ld a,#255 
      0000BF C7 50 03         [ 1]  235 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  236 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  237 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  238 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  239 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  240 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  241 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  242 	ld PI_CR1,a
                                    243 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  244     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  245     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  246     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  247 	bres PC_ODR,#LED2_BIT ; turn off LD2 
                                    248 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  249 	mov ADC_TDRL,0x3f
                                    250 ; initialize auto wakeup with LSI clock
      0000EC 72 5F 50 F2      [ 1]  251 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  252 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    253 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  254 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  255 	clrw x  
      0000F7 CD 00 7D         [ 4]  256     call clock_init 
      0000FA CD 00 A0         [ 4]  257 	call timer4_init
      0000FD CD 00 93         [ 4]  258 	call timer2_init	
                                    259 ; UART1 at 115200 BAUD
                                    260 ; used for user interface 
                                    261 ; via USB emulation through STLINK programmer.
      000100 CD 09 02         [ 4]  262 	call uart1_init
                                    263 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  264     bset PE_CR2,#USR_BTN_BIT 
                                    265 ; display system information
      000107 9A               [ 1]  266 	rim ; enable interrupts 
                                    267 ; RND function seed 
                                    268 ; must be initialized 
                                    269 ; to value other than 0.
      000108 72 5C 00 17      [ 1]  270 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  271 	inc seedx+1 
      000110 CD 1D 87         [ 4]  272 	call func_eefree ; eeprom free address 
      000113 CD 1D 28         [ 4]  273 	call ubound ; @() size 
      000116 CD 14 E3         [ 4]  274 	call clear_basic
      000119 CD 26 31         [ 4]  275 	call beep_1khz  ; 
      00011C CD 14 98         [ 4]  276 	call system_information ; display system information 
      00011F                        277 2$:	
                                    278 ; check for autorun application
      00011F CE 40 00         [ 2]  279 	ldw x,EEPROM_BASE 
      000122 C3 32 21         [ 2]  280 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  281 	jreq run_app
      000127 CC 17 63         [ 2]  282 	jp warm_start 
      00012A                        283 run_app:
      00012A 4F               [ 1]  284 	clr a 
      00012B CE 40 02         [ 2]  285 	ldw x,EEPROM_BASE+2
      00012E CD 25 37         [ 4]  286 	call is_program_addr 
      000131 27 03            [ 1]  287 	jreq 1$
      000133 CC 17 63         [ 2]  288 	jp warm_start ; no autorun application.
      000136                        289 1$:	
                                    290 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  291 	ldw y,XSTACK_EMPTY
      00013A CD 14 C5         [ 4]  292 	call warm_init
      00013D CE 40 02         [ 2]  293 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  294 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  295 	subw x,#2 
      000146 FE               [ 2]  296 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  297 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  298 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  299 	ldw x,#AUTO_RUN 
      000151 CD 09 A4         [ 4]  300 	call puts 
      000154 CD 1E 9B         [ 4]  301 	call program_info 
      000157 CC 25 A7         [ 2]  302 	jp run_it_02  
      00015A 20 FE            [ 2]  303     jra .  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    304 
      00015C 20 61 75 74 6F 20 72   305 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 16 D9         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0002E6 CC 16 D9         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 16 D9         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      0003AA                         48 prt_peek::
      0003AA 89               [ 2]   49 	pushw x 
      0003AB 35 10 00 0A      [ 1]   50 	mov base,#16 
      0003AF CD 18 86         [ 4]   51 	call prt_i16  
      0003B2 A6 3A            [ 1]   52 	ld a,#': 
      0003B4 CD 09 47         [ 4]   53 	call putc 
      0003B7 A6 20            [ 1]   54 	ld a,#SPACE 
      0003B9 CD 09 47         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      0003BC 85               [ 2]   56 	popw x 
      0003BD F6               [ 1]   57 	ld a,(x)
      0003BE 5F               [ 1]   58 	clrw x 
      0003BF 97               [ 1]   59 	ld xl,a 
      0003C0 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003C4 CD 18 86         [ 4]   61 	call prt_i16 
      0003C7 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003C8                         69 ledon:
      0003C8 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003CC 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003CD                         74 ledoff:
      0003CD 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003D1 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003D2                         79 ledtoggle:
      0003D2 A6 20            [ 1]   80     ld a,#LED2_MASK
      0003D4 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003D7 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003DA 81               [ 4]   83     ret 
                                     84 
      0003DB                         85 left_paren:
      0003DB A6 20            [ 1]   86 	ld a,#SPACE 
      0003DD CD 09 47         [ 4]   87 	call putc
      0003E0 A6 28            [ 1]   88 	ld a,#'( 
      0003E2 CD 09 47         [ 4]   89 	call putc 	
      0003E5 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003E6                        100 prt_reg8:
      0003E6 88               [ 1]  101 	push a 
      0003E7 CD 09 A4         [ 4]  102 	call puts 
      0003EA 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003EC 5F               [ 1]  104 	clrw x 
      0003ED 97               [ 1]  105 	ld xl,a 
      0003EE 35 10 00 0A      [ 1]  106 	mov base,#16
      0003F2 CD 18 86         [ 4]  107 	call prt_i16  
      0003F5 CD 03 DB         [ 4]  108 	call left_paren 
      0003F8 84               [ 1]  109 	pop a 
      0003F9 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      0003FA 97               [ 1]  111 	ld xl,a 
      0003FB 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003FF CD 18 86         [ 4]  113 	call prt_i16  
      000402 A6 29            [ 1]  114 	ld a,#') 
      000404 CD 09 47         [ 4]  115 	call putc
      000407 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      000408                        126 prt_reg16: 
      000408 90 89            [ 2]  127 	pushw y 
      00040A CD 09 A4         [ 4]  128 	call puts 
      00040D 1E 01            [ 2]  129 	ldw x,(1,sp) 
      00040F 35 10 00 0A      [ 1]  130 	mov base,#16 
      000413 CD 18 86         [ 4]  131 	call prt_i16  
      000416 CD 03 DB         [ 4]  132 	call left_paren 
      000419 85               [ 2]  133 	popw x 
      00041A 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00041E CD 18 86         [ 4]  135 	call prt_i16  
      000421 A6 29            [ 1]  136 	ld a,#') 
      000423 CD 09 47         [ 4]  137 	call putc
      000426 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000427                        152 print_registers:
      000427 8A               [ 1]  153 	push cc 
      000428                        154 	_vars VSIZE 
      000428 52 08            [ 2]    1     sub sp,#VSIZE 
      00042A 6B 01            [ 1]  155 	ld (R_A,sp),a 
      00042C 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00042E 17 04            [ 2]  157 	ldw (R_Y,sp),y
      000430 C6 00 0C         [ 1]  158 	ld a,acc24 
      000433 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000436 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000438 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      00043A AE 04 91         [ 2]  162 	ldw x,#STATES
      00043D CD 09 A4         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000440 AE 04 CE         [ 2]  165 	ldw x, #REG_PC
      000443 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000445 72 A2 00 03      [ 2]  167 	subw y,#3
      000449 CD 04 08         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      00044C AE 04 D6         [ 2]  170 	ldw x,#REG_X
      00044F 16 02            [ 2]  171 	ldw y,(R_X,sp)
      000451 CD 04 08         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000454 AE 04 D2         [ 2]  174 	ldw x,#REG_Y
      000457 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000459 CD 04 08         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      00045C AE 04 DA         [ 2]  178 	ldw x,#REG_A
      00045F 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      000461 CD 03 E6         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000464 AE 04 DE         [ 2]  182 	ldw x,#REG_CC 
      000467 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000469 CD 03 E6         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      00046C AE 04 E3         [ 2]  186 	ldw x,#REG_SP
      00046F 90 96            [ 1]  187 	ldw y,sp 
      000471 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000475 CD 04 08         [ 4]  189 	call prt_reg16  
      000478 A6 0A            [ 1]  190 	ld a,#'\n' 
      00047A CD 09 47         [ 4]  191 	call putc
      00047D 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00047F 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      000481 C7 00 0C         [ 1]  194 	ld acc24,a 
      000484 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000487 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000489 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      00048B 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00048D                        199 	_drop VSIZE
      00048D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00048F 86               [ 1]  200 	pop cc   	
      000490 81               [ 4]  201 	ret
                                    202 
      000491 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004CE 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004D2 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004D6 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004DA 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004DE 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004E3 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004E8                        217 parse_addr:
      0004E8 A6 20            [ 1]  218 	ld a,#SPACE 
      0004EA CD 0F 2A         [ 4]  219 	call skip  	 
      0004ED 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004F1 AE 16 B8         [ 2]  221 	ldw x,#pad 
      0004F4 CD 13 EF         [ 4]  222 	call strcpy
      0004F7 AE 16 B8         [ 2]  223 	ldw x,#pad
      0004FA CD 19 25         [ 4]  224 	call atoi24 	
      0004FD 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004FE                        244 cmd_itf:
      0004FE 8A               [ 1]  245 	push cc 
      0004FF                        246 	_vars VSIZE
      0004FF 52 0B            [ 2]    1     sub sp,#VSIZE 
      000501 6B 01            [ 1]  247 	ld (R_A,sp),a
      000503 C6 00 02         [ 1]  248 	ld a,count 
      000506 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      000508 C6 00 01         [ 1]  250 	ld a,in 
      00050B 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      00050D 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      00050F 17 04            [ 2]  253 	ldw (R_Y,sp),y
      000511 C6 00 0C         [ 1]  254 	ld a,acc24 
      000514 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000517 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000519 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      00051B 72 5F 00 18      [ 1]  258 	clr farptr 
      00051F 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000523 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000527                        261 repl:
      000527 A6 0D            [ 1]  262 	ld a,#CR 
      000529 CD 09 47         [ 4]  263 	call putc 
      00052C A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00052E CD 09 47         [ 4]  265 	call putc
      000531 72 5F 00 00      [ 1]  266 	clr in.w 
      000535 72 5F 00 01      [ 1]  267 	clr in 
      000539 CD 0A A9         [ 4]  268 	call readln
      00053C 90 AE 16 68      [ 2]  269 	ldw y,#tib  
      000540 90 F6            [ 1]  270 	ld a,(y)
      000542 27 E3            [ 1]  271 	jreq repl  
      000544 72 5C 00 01      [ 1]  272 	inc in 
      000548 CD 19 19         [ 4]  273 	call to_upper 
      00054B A1 51            [ 1]  274 	cp a,#'Q 
      00054D 26 26            [ 1]  275 	jrne test_p
      00054F                        276 repl_exit:
                                    277 ; restore original context 
      00054F 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      000551 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000553 C7 00 0C         [ 1]  280 	ld acc24,a 
      000556 CF 00 0D         [ 2]  281 	ldw acc16,x
      000559 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      00055B C7 00 02         [ 1]  283 	ld count,a 
      00055E 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      000560 C7 00 01         [ 1]  285 	ld in,a 
      000563 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000565 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000567 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000569                        289 	_drop VSIZE
      000569 5B 0B            [ 2]    1     addw sp,#VSIZE 
      00056B 86               [ 1]  290 	pop cc 
      00056C 81               [ 4]  291 	ret  
      00056D                        292 invalid:
      00056D AE 05 DB         [ 2]  293 	ldw x,#invalid_cmd 
      000570 CD 09 A4         [ 4]  294 	call puts 
      000573 20 B2            [ 2]  295 	jra repl 
      000575                        296 test_p:	
      000575 A1 50            [ 1]  297     cp a,#'P 
      000577 27 10            [ 1]  298 	jreq mem_peek
      000579 A1 53            [ 1]  299     cp a,#'S 
      00057B 26 F0            [ 1]  300 	jrne invalid 
      00057D                        301 print_string:
      00057D CD 04 E8         [ 4]  302 	call parse_addr 	
      000580 CE 00 0D         [ 2]  303 	ldw x,acc16
      000583 CD 09 A4         [ 4]  304 	call puts
      000586 CC 05 27         [ 2]  305 	jp repl 	
      000589                        306 mem_peek:
      000589 CD 04 E8         [ 4]  307 	call parse_addr 
      00058C C6 00 0C         [ 1]  308 	ld a, acc24 
      00058F CA 00 0D         [ 1]  309 	or a,acc16 
      000592 CA 00 0E         [ 1]  310 	or a,acc8 
      000595 26 02            [ 1]  311 	jrne 1$ 
      000597 20 0C            [ 2]  312 	jra peek_byte  
      000599 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      00059C CF 00 18         [ 2]  314 	ldw farptr,x 
      00059F C6 00 0E         [ 1]  315 	ld a,acc8 
      0005A2 C7 00 1A         [ 1]  316 	ld farptr+2,a 
      0005A5                        317 peek_byte:
      0005A5 CD 05 EA         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0005A8 A6 08            [ 1]  319 	ld a,#8 
      0005AA 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      0005AC 5F               [ 1]  321 	clrw x 
      0005AD CD 06 05         [ 4]  322 1$:	call fetchc  
      0005B0 89               [ 2]  323 	pushw x 
      0005B1 C7 00 0E         [ 1]  324 	ld acc8,a 
      0005B4 5F               [ 1]  325 	clrw x 
      0005B5 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005B8 A6 90            [ 1]  327 	ld a,#16+128
      0005BA CD 18 9D         [ 4]  328 	call prt_acc24
      0005BD 85               [ 2]  329 	popw x 
      0005BE 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005C0 26 EB            [ 1]  331 	jrne 1$ 
      0005C2 A6 08            [ 1]  332 	ld a,#8 
      0005C4 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005C7 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005CA 4F               [ 1]  335 	clr a 
      0005CB C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005CE C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005D1 4F               [ 1]  338 	clr a 
      0005D2 C9 00 18         [ 1]  339 	adc a,farptr 
      0005D5 C7 00 18         [ 1]  340 	ld farptr,a 
      0005D8 CC 05 27         [ 2]  341 	jp repl  
                                    342 
      0005DB 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005EA                        348 print_farptr:
      0005EA C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005ED C7 00 0E         [ 1]  350 	ld acc8,a 
      0005F0 CE 00 18         [ 2]  351 	ldw x,farptr 
      0005F3 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005F6 5F               [ 1]  353 	clrw x 
      0005F7 A6 10            [ 1]  354 	ld a,#16 
      0005F9 CD 18 9D         [ 4]  355 	call prt_acc24
      0005FC A6 20            [ 1]  356 	ld a,#SPACE 
      0005FE CD 09 47         [ 4]  357 	call putc 
      000601 CD 09 47         [ 4]  358 	call putc 
      000604 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      000605                        370 fetchc: ; @C
      000605 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000609 5C               [ 1]  372 	incw x
      00060A 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      00060B                        384 number:
      00060B CD 0F 3D         [ 4]  385 	call get_token
      00060E A1 84            [ 1]  386 	cp a,#TK_INTGR
      000610 27 03            [ 1]  387 	jreq 1$
      000612 CC 16 D7         [ 2]  388 	jp syntax_error
      000615 81               [ 4]  389 1$:	ret
                                    390 
                                    391 ;----------------------
                                    392 ; called by show_row 
                                    393 ; print character 
                                    394 ; corresponding to hex 
                                    395 ; in row
                                    396 ; characters stored in pad 
                                    397 ; input:
                                    398 ;    A count  
                                    399 ;------------------------
      000616                        400 print_chars:
      000616 88               [ 1]  401 	push a 
      000617 AE 16 B8         [ 2]  402 	ldw x,#pad 
      00061A F6               [ 1]  403 1$:	ld a,(x)
      00061B A1 20            [ 1]  404 	cp a,#SPACE 
      00061D 25 06            [ 1]  405 	jrult 2$
      00061F A1 7F            [ 1]  406 	cp a,#127 
      000621 24 02            [ 1]  407 	jruge 2$ 
      000623 20 02            [ 2]  408 	jra 3$ 
      000625 A6 5F            [ 1]  409 2$: ld a,#'_ 
      000627                        410 3$:	
      000627 CD 09 47         [ 4]  411 	call putc 
      00062A 5C               [ 1]  412 	incw x 
      00062B 0A 01            [ 1]  413 	dec (1,sp)
      00062D 26 EB            [ 1]  414 	jrne 1$
      00062F 84               [ 1]  415 	pop a 
      000630 81               [ 4]  416 	ret 
                                    417 
                                    418 
                                    419 ;---------------------
                                    420 ; display n bytes row 
                                    421 ; from memory.
                                    422 ; input:
                                    423 ;   A        bytes to print 
                                    424 ;	farptr   address 
                                    425 ; output:
                                    426 ;   farptr  address after last shown  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    427 ;---------------------
                           000001   428 	CNT=1
                           000002   429 	CNTDWN=2 
                           000003   430 	BYTE=3
                           000003   431 	VSIZE=3 
      000631                        432 show_row:
      000631 4D               [ 1]  433 	tnz a 
      000632 26 01            [ 1]  434 	jrne 1$
      000634 81               [ 4]  435 	ret 
      000635                        436 1$:	
      000635                        437 	_vars VSIZE 
      000635 52 03            [ 2]    1     sub sp,#VSIZE 
      000637 6B 01            [ 1]  438 	ld (CNT,sp),a 
      000639 6B 02            [ 1]  439 	ld (CNTDWN,sp),a 
      00063B C6 00 18         [ 1]  440 	ld a,farptr 
      00063E CE 00 19         [ 2]  441 	ldw x,ptr16 
      000641 C7 00 0C         [ 1]  442 	ld acc24,a 
      000644 CF 00 0D         [ 2]  443 	ldw acc16,x 
      000647 CD 18 BB         [ 4]  444 	call itoa 
      00064A A6 07            [ 1]  445 	ld a,#7 
      00064C CD 11 9B         [ 4]  446 	call right_align
      00064F CD 09 A4         [ 4]  447 	call puts 
      000652 A6 09            [ 1]  448 	ld a,#9 
      000654 CD 09 47         [ 4]  449 	call putc 
      000657                        450 row_loop:
      000657 92 BC 00 18      [ 5]  451 	ldf a,[farptr]
      00065B 6B 03            [ 1]  452 	ld (BYTE,sp),a
      00065D 7B 01            [ 1]  453 	ld a,(CNT,sp)
      00065F 10 02            [ 1]  454 	sub a,(CNTDWN,sp)
      000661 5F               [ 1]  455 	clrw x 
      000662 97               [ 1]  456 	ld xl,a 
      000663 1C 16 B8         [ 2]  457 	addw x,#pad 
      000666 7B 03            [ 1]  458 	ld a,(BYTE,sp)
      000668 F7               [ 1]  459 	ld (x),a 
      000669 72 5F 00 0C      [ 1]  460 	clr acc24 
      00066D 72 5F 00 0D      [ 1]  461 	clr acc16 
      000671 C7 00 0E         [ 1]  462 	ld acc8,a 
      000674 CD 18 BB         [ 4]  463 	call itoa 
      000677 A6 04            [ 1]  464 	ld a,#4
      000679 CD 11 9B         [ 4]  465 	call right_align 
      00067C CD 09 A4         [ 4]  466 	call puts 
      00067F AE 00 01         [ 2]  467 	ldw x,#1 	
      000682 CD 08 A8         [ 4]  468 	call incr_farptr
      000685 0A 02            [ 1]  469 	dec (CNTDWN,sp)
      000687 26 CE            [ 1]  470 	jrne row_loop
      000689 A6 20            [ 1]  471 	ld a,#SPACE 
      00068B CD 09 47         [ 4]  472 	call putc
      00068E 7B 01            [ 1]  473 	ld a,(CNT,sp) 
      000690 CD 06 16         [ 4]  474 	call print_chars 
      000693 A6 0D            [ 1]  475 	ld a,#CR 
      000695 CD 09 47         [ 4]  476 	call putc 
      000698                        477 	_drop VSIZE   
      000698 5B 03            [ 2]    1     addw sp,#VSIZE 
      00069A 81               [ 4]  478 	ret 
                                    479 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    480 ;--------------------------
                                    481 ; print memory content 
                                    482 ; in hexadecimal format
                                    483 ;  input:
                                    484 ;    farptr  start address 
                                    485 ;    X       count bytes to print 
                                    486 ;--------------------------
                           000001   487 	BCNT=1
                           000003   488 	BASE=3
                           000003   489 	VSIZE=3   
      00069B                        490 hex_dump:
      00069B 88               [ 1]  491 	push a 
      00069C                        492 	_vars VSIZE
      00069C 52 03            [ 2]    1     sub sp,#VSIZE 
      00069E C6 00 0A         [ 1]  493 	ld a,base
      0006A1 6B 03            [ 1]  494 	ld (BASE,sp),a 
      0006A3 35 10 00 0A      [ 1]  495 	mov base,#16
      0006A7 A6 0D            [ 1]  496 	ld a,#CR 
      0006A9 CD 09 47         [ 4]  497 	call putc 
      0006AC 1F 01            [ 2]  498 1$: ldw (BCNT,sp),x
      0006AE A6 10            [ 1]  499 	ld a,#16
      0006B0 A3 00 10         [ 2]  500 	cpw x,#16
      0006B3 2A 01            [ 1]  501 	jrpl 2$
      0006B5 9F               [ 1]  502 	ld a,xl
      0006B6                        503 2$: 	
      0006B6 CD 06 31         [ 4]  504 	call show_row 
      0006B9 1E 01            [ 2]  505 	ldw x,(BCNT,sp) 
      0006BB 1D 00 10         [ 2]  506 	subw x,#16 
      0006BE A3 00 01         [ 2]  507 	cpw x,#1
      0006C1 2A E9            [ 1]  508 	jrpl 1$
      0006C3 7B 03            [ 1]  509 	ld a,(BASE,sp)
      0006C5 C7 00 0A         [ 1]  510 	ld base,a
      0006C8                        511 	_drop VSIZE
      0006C8 5B 03            [ 2]    1     addw sp,#VSIZE 
      0006CA 84               [ 1]  512 	pop a 
      0006CB 81               [ 4]  513 	ret 
                                    514 
                                    515 .endif ; DEBUG 
                                    516 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006CC                         45 unlock_eeprom:
      0006CC 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006D1 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006D5 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006D9 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006DD 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006E1 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006E6 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006E7                         62 unlock_flash:
      0006E7 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006EC 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006F0 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006F4 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006F8 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006FC 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000701 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      000702                         76 row_erase:
      000702 88               [ 1]   77 	push a 
      000703 90 89            [ 2]   78 	pushw y 
      000705 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000709 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00070D 4F               [ 1]   81 	clr a 
      00070E 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000710 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      000714 90 5C            [ 1]   84     incw y
      000716 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      00071A 90 5C            [ 1]   86     incw y
      00071C 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      000720 90 5C            [ 1]   88     incw y
      000722 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000726 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00072B 90 85            [ 2]   91 	popw y 
      00072D 84               [ 1]   92 	pop a 
      00072E 81               [ 4]   93 	ret
      00072F                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      00072F                         97 move_erase_to_ram:
      00072F 89               [ 2]   98 	pushw x 
      000730 90 89            [ 2]   99 	pushw y 
      000732 AE 07 2F         [ 2]  100 	ldw x,#row_erase_end 
      000735 1D 07 02         [ 2]  101 	subw x,#row_erase
      000738 CF 00 0D         [ 2]  102 	ldw acc16,x 
      00073B AE 16 68         [ 2]  103 	ldw x,#tib 
      00073E 90 AE 07 02      [ 2]  104 	ldw y,#row_erase 
      000742 CD 13 FF         [ 4]  105 	call move
      000745 90 85            [ 2]  106 	popw y
      000747 85               [ 2]  107 	popw x
      000748 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000749                        123 program_row:
      000749 88               [ 1]  124 	push a 
      00074A 90 89            [ 2]  125 	pushw y 
      00074C 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00074E 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000752 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000756 90 5F            [ 1]  130 	clrw y 
      000758 F6               [ 1]  131 1$:	ld a,(x)
      000759 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      00075D 5C               [ 1]  133 	incw x 
      00075E 90 5C            [ 1]  134 	incw y 
      000760 0A 01            [ 1]  135 	dec (BCNT,sp)
      000762 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000764 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000769                        139 	_drop 1 
      000769 5B 01            [ 2]    1     addw sp,#1 
      00076B 90 85            [ 2]  140 	popw y 
      00076D 84               [ 1]  141 	pop a 
      00076E 81               [ 4]  142 	ret 
      00076F                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      00076F                        149 move_prg_to_ram:
      00076F 89               [ 2]  150 	pushw x 
      000770 90 89            [ 2]  151 	pushw y 
      000772 AE 07 6F         [ 2]  152 	ldw x,#program_row_end 
      000775 1D 07 49         [ 2]  153 	subw x,#program_row 
      000778 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00077B AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00077E 90 AE 07 49      [ 2]  156 	ldw y,#program_row ; source address 
      000782 CD 13 FF         [ 4]  157 	call move
      000785 90 85            [ 2]  158 	popw y 
      000787 85               [ 2]  159 	popw x  
      000788 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000789                        169 write_buffer:
      000789 89               [ 2]  170 	pushw x 
      00078A 72 5D 00 18      [ 1]  171 	tnz farptr 
      00078E 26 0D            [ 1]  172 	jrne to_flash 
      000790 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000793 A3 38 80         [ 2]  174 	cpw x,#app_space  
      000796 24 05            [ 1]  175 	jruge to_flash 
      000798                        176 to_eeprom:
      000798 CD 06 CC         [ 4]  177 	call unlock_eeprom
      00079B 20 03            [ 2]  178 	jra do_programming
      00079D                        179 to_flash:
      00079D CD 06 E7         [ 4]  180 	call unlock_flash
      0007A0                        181 do_programming:
      0007A0 85               [ 2]  182 	popw x 
      0007A1 CD 16 68         [ 4]  183 	call tib
      0007A4 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0007A8 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0007AC 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0007AD                        197 block_erase:
      0007AD 89               [ 2]  198 	pushw x 
      0007AE C6 00 18         [ 1]  199 	ld a,farptr 
      0007B1 26 14            [ 1]  200 	jrne erase_flash
      0007B3 CE 00 19         [ 2]  201 	ldw x,farptr+1
      0007B6 A3 38 80         [ 2]  202 	cpw x,#app_space 
      0007B9 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      0007BB CD 06 CC         [ 4]  205 	call unlock_eeprom 
      0007BE CD 16 68         [ 4]  206 	call tib 
      0007C1 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007C5 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007C7                        210 erase_flash:
      0007C7 CD 06 E7         [ 4]  211 	call unlock_flash 
      0007CA CD 16 68         [ 4]  212 	call tib 
      0007CD 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007D1                        214 erase_exit: 
      0007D1 85               [ 2]  215 	popw x 
      0007D2 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007D3                        232 write_byte:
      0007D3 90 89            [ 2]  233 	pushw y
      0007D5                        234 	_vars VSIZE
      0007D5 52 02            [ 2]    1     sub sp,#VSIZE 
      0007D7 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007D9 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007DB 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007DF 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007E3 26 14            [ 1]  241 	jrne write_flash
      0007E5 90 A3 38 80      [ 2]  242     cpw y,#app_space 	 
      0007E9 24 0E            [ 1]  243     jruge write_flash
      0007EB 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007EF 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0007F1 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007F5 22 51            [ 1]  247 	jrugt write_exit
      0007F7 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007F9                        250 write_flash:
      0007F9 CD 06 E7         [ 4]  251 	call unlock_flash 
      0007FC 9B               [ 1]  252 1$:	sim 
      0007FD 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007FF 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      000803 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000808 9A               [ 1]  256     rim 
      000809 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00080D 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      00080F                        260 write_eeprom:
      00080F CD 06 CC         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      000812 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      000816 2B 08            [ 1]  264 	jrmi 1$
      000818 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      00081C 2A 02            [ 1]  266 	jrpl 1$
      00081E 03 02            [ 1]  267 	cpl (OPT,sp)
      000820                        268 1$: 
      000820 0D 02            [ 1]  269     tnz (OPT,sp)
      000822 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000824 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000828 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00082C                        274 2$: 
      00082C 7B 01            [ 1]  275     ld a,(BTW,sp)
      00082E 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000832 0D 02            [ 1]  277     tnz (OPT,sp)
      000834 27 08            [ 1]  278     jreq 3$
      000836 5C               [ 1]  279     incw x
      000837 7B 01            [ 1]  280     ld a,(BTW,sp)
      000839 43               [ 1]  281     cpl a
      00083A 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      00083E 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000843 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000848                        285 write_exit:
      000848 5C               [ 1]  286 	incw x 
      000849 CD 08 A8         [ 4]  287 	call incr_farptr
      00084C 5F               [ 1]  288 	clrw x 
      00084D                        289 	_drop VSIZE 
      00084D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00084F 90 85            [ 2]  290 	popw y
      000851 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      000852                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000852                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      000852                        312 write_block::
      000852 88               [ 1]  313 	push a 
      000853                        314 	_vars VSIZE
      000853 52 02            [ 2]    1     sub sp,#VSIZE 
      000855 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      000857 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000859 27 13            [ 1]  317 	jreq 9$
      00085B 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      00085D 90 F6            [ 1]  319 	ld a,(y)
      00085F CD 07 D3         [ 4]  320 	call write_byte 
      000862 5C               [ 1]  321 	incw x 
      000863 90 5C            [ 1]  322 	incw y 
      000865 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      000867 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000869 5A               [ 2]  325 	decw x
      00086A 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      00086C 26 ED            [ 1]  327 	jrne 1$
      00086E                        328 9$:
      00086E 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      000870 CD 08 A8         [ 4]  330 	call incr_farptr
      000873                        331 	_drop VSIZE
      000873 5B 02            [ 2]    1     addw sp,#VSIZE 
      000875 84               [ 1]  332 	pop a 
      000876 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      000877                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000877 90 89            [ 2]  351 	pushw y
      000879 88               [ 1]  352 	push a 
      00087A 90 93            [ 1]  353 	ldw y,x
      00087C 5F               [ 1]  354 	clrw x 
      00087D                        355 1$:  
      00087D 90 F6            [ 1]  356 	ld a,(y)
      00087F 90 5C            [ 1]  357 	incw y
      000881 CD 07 D3         [ 4]  358 	call write_byte 
      000884 5C               [ 1]  359 	incw x 
      000885 0A 01            [ 1]  360 	dec (1,sp)  
      000887 26 F4            [ 1]  361 	jrne 1$ 
      000889 84               [ 1]  362 9$: pop a 
      00088A 90 85            [ 2]  363 	popw y 
      00088C 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      00088D                        373 row_align:
      00088D A6 7F            [ 1]  374 	ld a,#0x7f 
      00088F C4 00 1A         [ 1]  375 	and a,farptr+2 
      000892 27 13            [ 1]  376 	jreq 1$ 
      000894 CE 00 19         [ 2]  377 	ldw x,farptr+1 
      000897 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      00089A 24 04            [ 1]  379 	jrnc 0$
      00089C 72 5C 00 18      [ 1]  380 	inc farptr 
      0008A0 9F               [ 1]  381 0$: ld a,xl 
      0008A1 A4 80            [ 1]  382 	and a,#0x80
      0008A3 97               [ 1]  383 	ld xl,a
      0008A4 CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      0008A7 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      0008A8                        393 incr_farptr:
      0008A8 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      0008AC 24 04            [ 1]  395 	jrnc 1$
      0008AE 72 5C 00 18      [ 1]  396 	inc farptr 
      0008B2 CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      0008B5 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      0008B6                        408 scan_block:
      0008B6 5F               [ 1]  409 	clrw x 
      0008B7 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      0008BB 26 06            [ 1]  411 	jrne 2$
      0008BD 5C               [ 1]  412 	incw x 
      0008BE A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      0008C1 25 F4            [ 1]  414 	jrult 1$ 
      0008C3 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; defined functions:
                                     23 ;   getc   wait for a character 
                                     24 ;   qgetc  check if char available 
                                     25 ;   putc   send a char to terminal
                                     26 ;   puts   print a string to terminal
                                     27 ;   readln  read text line from terminal 
                                     28 ;   spaces  print n spaces on terminal 
                                     29 ;   print_hex  print hex value from A 
                                     30 ;------------------------------
                                     31 
                                     32     .module TERMINAL
                                     33 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                     34     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     35 
                           000000    36 .if SEPARATE
                                     37 	.include "inc/nucleo_8s208.inc"
                                     38 	.include "inc/stm8s208.inc"
                                     39 	.include "inc/ascii.inc"
                                     40 	.include "inc/gen_macros.inc" 
                                     41 	.include "tbi_macros.inc" 
                                     42 .endif 
                                     43 
                                     44     .area CODE 
                                     45 
                                     46 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     47 ;;   UART1 subroutines
                                     48 ;;   used for user interface 
                                     49 ;;   communication channel.
                                     50 ;;   settings: 
                                     51 ;;		115200 8N1 no flow control
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 
                                     54 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     55 ;;; Uart1 intterrupt handler 
                                     56 ;;; on receive character 
                                     57 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     58 ;--------------------------
                                     59 ; UART1 receive character
                                     60 ; in a FIFO buffer 
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ; CTLR+Z erase EEPROM autorun 
                                     66 ;        information and reboot
                                     67 ;--------------------------
      0008C4                         68 Uart1RxHandler: ; console receive char 
      0008C4 72 0B 52 30 31   [ 2]   69 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008C9 C6 52 31         [ 1]   70 	ld a,UART1_DR 
      0008CC A1 03            [ 1]   71 	cp a,#CTRL_C 
      0008CE 26 06            [ 1]   72 	jrne 2$
      0008D0 CD 09 47         [ 4]   73 	call putc 
      0008D3 CC 00 49         [ 2]   74 	jp user_interrupted
      0008D6                         75 2$:
      0008D6 A1 18            [ 1]   76 	cp a,#CAN ; CTRL_X 
      0008D8 26 03            [ 1]   77 	jrne 3$
      0008DA CC 00 B5         [ 2]   78 	jp cold_start 	
      0008DD A1 1A            [ 1]   79 3$:	cp a,#CTRL_Z 
      0008DF 26 06            [ 1]   80 	jrne 4$
      0008E1 CD 08 FB         [ 4]   81 	call clear_autorun
      0008E4 CC 00 B5         [ 2]   82 	jp cold_start 
      0008E7                         83 4$:
      0008E7 88               [ 1]   84 	push a 
      0008E8 A6 25            [ 1]   85 	ld a,#rx1_queue 
      0008EA CB 00 2E         [ 1]   86 	add a,rx1_tail 
      0008ED 5F               [ 1]   87 	clrw x 
      0008EE 97               [ 1]   88 	ld xl,a 
      0008EF 84               [ 1]   89 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0008F0 F7               [ 1]   90 	ld (x),a 
      0008F1 C6 00 2E         [ 1]   91 	ld a,rx1_tail 
      0008F4 4C               [ 1]   92 	inc a 
      0008F5 A4 07            [ 1]   93 	and a,#RX_QUEUE_SIZE-1
      0008F7 C7 00 2E         [ 1]   94 	ld rx1_tail,a 
      0008FA 80               [11]   95 5$:	iret 
                                     96 
      0008FB                         97 clear_autorun:
      0008FB AE 40 00         [ 2]   98 	ldw x,#EEPROM_BASE 
      0008FE CD 29 2B         [ 4]   99 	call erase_header ; in TinyBasic.asm 
      000901 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; initialize UART1, 115200 8N1
                                    104 ; called from cold_start in hardware_init.asm 
                                    105 ; input:
                                    106 ;	none
                                    107 ; output:
                                    108 ;   none
                                    109 ;---------------------------------------------
      000902                        110 uart1_init:
      000902 72 1A 50 02      [ 1]  111     bset PA_DDR,#UART1_TX_PIN
      000906 72 1A 50 03      [ 1]  112     bset PA_CR1,#UART1_TX_PIN 
      00090A 72 1A 50 04      [ 1]  113     bset PA_CR2,#UART1_TX_PIN 
                                    114 ; enable UART1 clock
      00090E 72 14 50 C7      [ 1]  115 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000912                        116 uart1_set_baud: 
      000912 88               [ 1]  117 	push a 
                                    118 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    119 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000913 A6 E1            [ 1]  120 	ld a,#CLK_SWR_HSI
      000915 C1 50 C3         [ 1]  121 	cp a,CLK_CMSR 
      000918 27 0A            [ 1]  122 	jreq 2$ 
      00091A                        123 1$: ; 8 Mhz 	
      00091A 35 05 52 33      [ 1]  124 	mov UART1_BRR2,#0x05 ; must be loaded first
      00091E 35 04 52 32      [ 1]  125 	mov UART1_BRR1,#0x4
      000922 20 08            [ 2]  126 	jra 3$
      000924                        127 2$: ; 16 Mhz 	
      000924 35 0B 52 33      [ 1]  128 	mov UART1_BRR2,#0x0b ; must be loaded first
      000928 35 08 52 32      [ 1]  129 	mov UART1_BRR1,#0x08
      00092C                        130 3$:
      00092C 72 5F 52 31      [ 1]  131     clr UART1_DR
      000930 35 2C 52 35      [ 1]  132 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000934 72 10 52 35      [ 1]  133 	bset UART1_CR2,#UART_CR2_SBK
      000938 72 0D 52 30 FB   [ 2]  134     btjf UART1_SR,#UART_SR_TC,.
      00093D 72 5F 00 2D      [ 1]  135     clr rx1_head 
      000941 72 5F 00 2E      [ 1]  136 	clr rx1_tail
      000945 84               [ 1]  137 	pop a  
      000946 81               [ 4]  138 	ret
                                    139 
                                    140 ;---------------------------------
                                    141 ; uart1_putc
                                    142 ; send a character via UART1
                                    143 ; input:
                                    144 ;    A  	character to send
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                    145 ;---------------------------------
      000947                        146 putc:: ; console output always on UART1
      000947                        147 uart1_putc:: 
      000947 72 0F 52 30 FB   [ 2]  148 	btjf UART1_SR,#UART_SR_TXE,.
      00094C C7 52 31         [ 1]  149 	ld UART1_DR,a 
      00094F 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------
                                    154 ; Query for character in rx1_queue
                                    155 ; input:
                                    156 ;   none 
                                    157 ; output:
                                    158 ;   A     0 no charcter available
                                    159 ;   Z     1 no character available
                                    160 ;---------------------------------
      000950                        161 qgetc::
      000950                        162 uart1_qgetc::
      000950 C6 00 2D         [ 1]  163 	ld a,rx1_head 
      000953 C0 00 2E         [ 1]  164 	sub a,rx1_tail 
      000956 81               [ 4]  165 	ret 
                                    166 
                                    167 ;---------------------------------
                                    168 ; wait character from UART1 
                                    169 ; input:
                                    170 ;   none
                                    171 ; output:
                                    172 ;   A 			char  
                                    173 ;--------------------------------	
      000957                        174 getc:: ;console input
      000957                        175 uart1_getc::
      000957 CD 09 50         [ 4]  176 	call uart1_qgetc
      00095A 27 FB            [ 1]  177 	jreq uart1_getc 
      00095C 89               [ 2]  178 	pushw x 
                                    179 ;; rx1_queue must be in page 0 	
      00095D A6 25            [ 1]  180 	ld a,#rx1_queue
      00095F CB 00 2D         [ 1]  181 	add a,rx1_head 
      000962 5F               [ 1]  182 	clrw x  
      000963 97               [ 1]  183 	ld xl,a 
      000964 F6               [ 1]  184 	ld a,(x)
      000965 88               [ 1]  185 	push a
      000966 C6 00 2D         [ 1]  186 	ld a,rx1_head 
      000969 4C               [ 1]  187 	inc a 
      00096A A4 07            [ 1]  188 	and a,#RX_QUEUE_SIZE-1
      00096C C7 00 2D         [ 1]  189 	ld rx1_head,a 
      00096F 84               [ 1]  190 	pop a  
      000970 85               [ 2]  191 	popw x
      000971 81               [ 4]  192 	ret 
                                    193 
                                    194 ;-----------------------------
                                    195 ;  constants replacing 
                                    196 ;  ANSI sequence received 
                                    197 ;  from terminal.
                                    198 ;  These are the ANSI sequences
                                    199 ;  accepted by readln function
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    200 ;------------------------------
                           000080   201     ARROW_LEFT=128
                           000081   202     ARROW_RIGHT=129
                           000082   203     HOME=130
                           000083   204     KEY_END=131
                           000084   205     SUP=132 
                                    206 
      000972 43 81 44 80 48 82 46   207 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    208 
                                    209 ;--------------------------------
                                    210 ; receive ANSI ESC 
                                    211 ; sequence and convert it
                                    212 ; to a single character code 
                                    213 ; in range {128..255}
                                    214 ; This is called after receiving 
                                    215 ; ESC character. 
                                    216 ; ignored sequence return 0 
                                    217 ; output:
                                    218 ;   A    converted character 
                                    219 ;-------------------------------
      00097E                        220 get_escape:
      00097E CD 09 57         [ 4]  221     call getc 
      000981 A1 5B            [ 1]  222     cp a,#'[ ; this character is expected after ESC 
      000983 27 02            [ 1]  223     jreq 1$
      000985 4F               [ 1]  224     clr a
      000986 81               [ 4]  225     ret
      000987 CD 09 57         [ 4]  226 1$: call getc 
      00098A AE 09 72         [ 2]  227     ldw x,#convert_table
      00098D                        228 2$:
      00098D F1               [ 1]  229     cp a,(x)
      00098E 27 08            [ 1]  230     jreq 4$
      000990 1C 00 02         [ 2]  231     addw x,#2
      000993 7D               [ 1]  232     tnz (x)
      000994 26 F7            [ 1]  233     jrne 2$
      000996 4F               [ 1]  234     clr a
      000997 81               [ 4]  235     ret 
      000998 5C               [ 1]  236 4$: incw x 
      000999 F6               [ 1]  237     ld a,(x)
      00099A A1 84            [ 1]  238     cp a,#SUP
      00099C 26 05            [ 1]  239     jrne 5$
      00099E 88               [ 1]  240     push a 
      00099F CD 09 57         [ 4]  241     call getc
      0009A2 84               [ 1]  242     pop a 
      0009A3                        243 5$:
      0009A3 81               [ 4]  244     ret 
                                    245 
                                    246 
                                    247 ;-----------------------------
                                    248 ; send an ASCIZ string to UART1 
                                    249 ; input: 
                                    250 ;   x 		char * 
                                    251 ; output:
                                    252 ;   none 
                                    253 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0009A4                        254 puts::
      0009A4 F6               [ 1]  255     ld a,(x)
      0009A5 27 06            [ 1]  256 	jreq 1$
      0009A7 CD 09 47         [ 4]  257 	call putc 
      0009AA 5C               [ 1]  258 	incw x 
      0009AB 20 F7            [ 2]  259 	jra puts 
      0009AD 81               [ 4]  260 1$:	ret 
                                    261 
                                    262 
                                    263 ;---------------------------
                                    264 ; delete character at left 
                                    265 ; of cursor on terminal 
                                    266 ; input:
                                    267 ;   none 
                                    268 ; output:
                                    269 ;	none 
                                    270 ;---------------------------
      0009AE                        271 bksp:
      0009AE A6 08            [ 1]  272 	ld a,#BS 
      0009B0 CD 09 47         [ 4]  273 	call putc 
      0009B3 A6 20            [ 1]  274 	ld a,#SPACE 
      0009B5 CD 09 47         [ 4]  275 	call putc 
      0009B8 A6 08            [ 1]  276 	ld a,#BS 
      0009BA CD 09 47         [ 4]  277 	call putc 
      0009BD 81               [ 4]  278 	ret 
                                    279 ;---------------------------
                                    280 ; delete n character left of cursor 
                                    281 ; at terminal.
                                    282 ; input: 
                                    283 ;   A   number of characters to delete.
                                    284 ; output:
                                    285 ;    none 
                                    286 ;--------------------------	
      0009BE                        287 delete_nchar:
      0009BE 88               [ 1]  288 	push a 
      0009BF 0D 01            [ 1]  289 0$:	tnz (1,sp)
      0009C1 27 07            [ 1]  290 	jreq 1$
      0009C3 CD 09 AE         [ 4]  291 	call bksp 
      0009C6 0A 01            [ 1]  292 	dec (1,sp)
      0009C8 20 F5            [ 2]  293 	jra 0$
      0009CA 84               [ 1]  294 1$:	pop a 
      0009CB 81               [ 4]  295 	ret
                                    296 
                                    297 ;--------------------------
                                    298 ; send ANSI escape sequence
                                    299 ; ANSI: ESC[
                                    300 ; note: ESC is ASCII 27
                                    301 ;       [   is ASCII 91  
                                    302 ;-------------------------- 
      0009CC                        303 send_escape:
      0009CC A6 1B            [ 1]  304 	ld a,#ESC 
      0009CE CD 09 47         [ 4]  305 	call putc 
      0009D1 A6 5B            [ 1]  306 	ld a,#'[
      0009D3 CD 09 47         [ 4]  307 	call putc 
      0009D6 81               [ 4]  308 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    309 
                                    310 ;---------------------
                                    311 ;send ANSI parameter value
                                    312 ; ANSI parameter values are 
                                    313 ; sent as ASCII charater 
                                    314 ; not as binary number.
                                    315 ; this routine 
                                    316 ; convert binary number to 
                                    317 ; ASCII string and send it.
                                    318 ; expected range {0..99}
                                    319 ; input: 
                                    320 ; 	A {0..99} 
                                    321 ; output:
                                    322 ;   none 
                                    323 ;---------------------
      0009D7                        324 send_parameter:
      0009D7 89               [ 2]  325 	pushw x 
      0009D8 5F               [ 1]  326 	clrw x 
      0009D9 97               [ 1]  327 	ld xl,a 
      0009DA A6 0A            [ 1]  328 	ld a,#10 
      0009DC 62               [ 2]  329 	div x,a 
      0009DD 95               [ 1]  330 	ld xh,a 
      0009DE 9F               [ 1]  331 	ld a,xl
      0009DF 4D               [ 1]  332     tnz a 
      0009E0 27 0B            [ 1]  333     jreq 2$
      0009E2 A1 09            [ 1]  334 	cp a,#9 
      0009E4 23 02            [ 2]  335 	jrule 1$
      0009E6 A6 09            [ 1]  336 	ld a,#9
      0009E8                        337 1$:
      0009E8 AB 30            [ 1]  338 	add a,#'0 
      0009EA CD 09 47         [ 4]  339 	call putc
      0009ED 9E               [ 1]  340 2$:	ld a,xh 
      0009EE AB 30            [ 1]  341 	add a,#'0
      0009F0 CD 09 47         [ 4]  342 	call putc 
      0009F3 85               [ 2]  343 	popw x 
      0009F4 81               [ 4]  344 	ret 
                                    345 
                                    346 ;--------------------------
                                    347 ; move cursor left n character
                                    348 ; ANSI: ESC[PnD 
                                    349 ; 'Pn' est a numerical parameter
                                    350 ; specifying number of characters 
                                    351 ; displacement.
                                    352 ; input:
                                    353 ;   A     character count
                                    354 ; output:
                                    355 ;   none
                                    356 ;--------------------------
      0009F5                        357 move_left:
      0009F5 88               [ 1]  358 	push a 
      0009F6 CD 09 CC         [ 4]  359 	call send_escape
      0009F9 84               [ 1]  360     pop a
      0009FA CD 09 D7         [ 4]  361 	call send_parameter 
      0009FD A6 44            [ 1]  362 	ld a,#'D 
      0009FF CD 09 47         [ 4]  363 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      000A02 81               [ 4]  364 	ret	
                                    365 
                                    366 
                                    367 ;--------------------------
                                    368 ; move cursor right n character 
                                    369 ; ANSI: ESC[PnC 
                                    370 ; input:
                                    371 ;   A     character count
                                    372 ; output:
                                    373 ;   none
                                    374 ;--------------------------
      000A03                        375 move_right:
      000A03 88               [ 1]  376 	push a 
      000A04 CD 09 CC         [ 4]  377 	call send_escape
      000A07 84               [ 1]  378     pop a
      000A08 CD 09 D7         [ 4]  379 	call send_parameter 
      000A0B A6 43            [ 1]  380 	ld a,#'C 
      000A0D CD 09 47         [ 4]  381 	call putc 
      000A10 81               [ 4]  382 	ret 
                                    383 
                                    384 
                                    385 ;--------------------------
                                    386 ; print n spaces on terminal
                                    387 ; input:
                                    388 ;  X 		number of spaces 
                                    389 ; output:
                                    390 ;	none 
                                    391 ;---------------------------
      000A11                        392 spaces::
      000A11 A6 20            [ 1]  393 	ld a,#SPACE 
      000A13 5D               [ 2]  394 1$:	tnzw x
      000A14 27 06            [ 1]  395 	jreq 9$
      000A16 CD 09 47         [ 4]  396 	call putc 
      000A19 5A               [ 2]  397 	decw x
      000A1A 20 F7            [ 2]  398 	jra 1$
      000A1C                        399 9$: 
      000A1C 81               [ 4]  400 	ret 
                                    401 
                                    402 ;--------------------------
                                    403 ; insert character in text 
                                    404 ; line 
                                    405 ; input:
                                    406 ;   A       character to insert 
                                    407 ;   xl      line length
                                    408 ;   xh      insert position 
                                    409 ;   Y       line pointer 
                                    410 ; output:
                                    411 ;   tib     updated 
                                    412 ;   Y       updated  
                                    413 ;-------------------------
                           000001   414 	IPOS=1
                           000002   415 	KCHAR=2 
                           000003   416     LLEN=3 
                           000003   417 	VSIZE=3 
      000A1D                        418 insert_char: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      000A1D                        419 	_vars VSIZE 
      000A1D 52 03            [ 2]    1     sub sp,#VSIZE 
      000A1F 6B 02            [ 1]  420     ld (KCHAR,sp),a 
      000A21 9E               [ 1]  421     ld a,xh 
      000A22 6B 01            [ 1]  422 	ld (IPOS,sp),a
      000A24 9F               [ 1]  423     ld a,xl 
      000A25 6B 03            [ 1]  424     ld (LLEN,sp),a  
      000A27 93               [ 1]  425     ldw x,y
      000A28 5C               [ 1]  426     incw x 
      000A29 7B 03            [ 1]  427     ld a,(LLEN,sp)
      000A2B 10 01            [ 1]  428     sub a,(IPOS,sp)
      000A2D 4C               [ 1]  429     inc a 
      000A2E C7 00 0E         [ 1]  430     ld acc8,a 
      000A31 72 5F 00 0D      [ 1]  431     clr acc16
      000A35 CD 13 FF         [ 4]  432     call move
      000A38 90 AE 16 68      [ 2]  433     ldw y,#tib 
      000A3C 7B 01            [ 1]  434     ld a,(IPOS,sp)
      000A3E C7 00 0E         [ 1]  435     ld acc8,a 
      000A41 72 B9 00 0D      [ 2]  436     addw y,acc16 
      000A45 7B 02            [ 1]  437     ld a,(KCHAR,sp)
      000A47 90 F7            [ 1]  438     ld (y),a
      000A49 90 5C            [ 1]  439     incw y  
      000A4B 7B 01            [ 1]  440     ld a,(IPOS,sp)
      000A4D CD 09 F5         [ 4]  441     call move_left
      000A50 AE 16 68         [ 2]  442     ldw x,#tib 
      000A53 CD 09 A4         [ 4]  443     call puts 
      000A56 7B 03            [ 1]  444     ld a,(LLEN,sp)
      000A58 10 01            [ 1]  445     sub a,(IPOS,sp) 
      000A5A CD 09 F5         [ 4]  446     call move_left 
      000A5D                        447 	_drop VSIZE 
      000A5D 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A5F 81               [ 4]  448 	ret 
                                    449 
                                    450 
                                    451 ;--------------------------
                                    452 ; delete character under cursor
                                    453 ; input:
                                    454 ;   A       line length   
                                    455 ;   xl      delete position
                                    456 ;   Y       line pointer 
                                    457 ;-------------------------
                           000001   458 	CPOS=1
                           000002   459 	LLEN=2
                           000002   460 	VSIZE=2
      000A60                        461 delete_under:
      000A60                        462 	_vars VSIZE 
      000A60 52 02            [ 2]    1     sub sp,#VSIZE 
      000A62 6B 02            [ 1]  463     ld (LLEN,sp),a 
      000A64 9F               [ 1]  464     ld a,xl 
      000A65 6B 01            [ 1]  465     ld (CPOS,sp),a 
      000A67 93               [ 1]  466     ldw x,y ; move destination
      000A68 90 5C            [ 1]  467     incw y  ; move source 
      000A6A 7B 02            [ 1]  468     ld a,(LLEN,sp)
      000A6C 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A6E 4C               [ 1]  470     inc a ; move including zero at end.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      000A6F C7 00 0E         [ 1]  471     ld acc8,a 
      000A72 72 5F 00 0D      [ 1]  472     clr acc16 
      000A76 CD 13 FF         [ 4]  473 	call move 
      000A79 90 AE 16 68      [ 2]  474     ldw y,#tib 
      000A7D 7B 01            [ 1]  475     ld a,(CPOS,sp)
      000A7F C7 00 0E         [ 1]  476     ld acc8,a 
      000A82 72 B9 00 0D      [ 2]  477     addw y,acc16 
      000A86 93               [ 1]  478     ldw x,y 
      000A87 CD 09 A4         [ 4]  479     call puts 
      000A8A A6 20            [ 1]  480     ld a,#SPACE  
      000A8C CD 09 47         [ 4]  481     call putc
      000A8F 7B 02            [ 1]  482     ld a,(LLEN,sp)
      000A91 10 01            [ 1]  483     sub a,(CPOS,sp)
      000A93 CD 09 F5         [ 4]  484     call move_left 
      000A96 0A 02            [ 1]  485     dec (LLEN,sp)
      000A98                        486 	_drop VSIZE 
      000A98 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A9A 81               [ 4]  487 	ret 
                                    488 
                                    489 ;-----------------------------
                                    490 ; send ANSI sequence to delete
                                    491 ; whole line. Cursor position
                                    492 ; is not updated.
                                    493 ; ANSI: ESC[2K
                                    494 ; input:
                                    495 ;   none
                                    496 ; output:
                                    497 ;   none 
                                    498 ;-----------------------------
      000A9B                        499 delete_line:
      000A9B CD 09 CC         [ 4]  500     call send_escape
      000A9E A6 32            [ 1]  501 	ld a,#'2
      000AA0 CD 09 47         [ 4]  502 	call putc 
      000AA3 A6 4B            [ 1]  503 	ld a,#'K 
      000AA5 CD 09 47         [ 4]  504 	call putc 
      000AA8 81               [ 4]  505 	ret 
                                    506 
                                    507 
                                    508 
                                    509 ;------------------------------------
                                    510 ; read a line of text from terminal
                                    511 ;  control keys: 
                                    512 ;    BS   efface caractère à gauche 
                                    513 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    514 ;    CTRL_R  edit previous line.
                                    515 ;    CTRL_D  delete line  
                                    516 ;    HOME  go to start of line  
                                    517 ;    KEY_END  go to end of line 
                                    518 ;    ARROW_LEFT  move cursor left 
                                    519 ;    ARROW_RIGHT  move cursor right 
                                    520 ;    CTRL_O  toggle between insert/overwrite
                                    521 ; input:
                                    522 ;	none
                                    523 ; local variable on stack:
                                    524 ;	LL  line length
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    525 ;   RXCHAR last received character 
                                    526 ; output:
                                    527 ;   text in tib  buffer
                                    528 ;   count  line length 
                                    529 ;------------------------------------
                                    530 	; local variables
                           000001   531 	LL_HB=1  ; line length high byte 
                           000001   532 	RXCHAR = 1 ; last char received
                           000002   533 	LL = 2  ; accepted line length
                           000003   534 	CPOS=3  ; cursor position 
                           000004   535 	OVRWR=4 ; overwrite flag 
                           000005   536 	YTEMP=5 ; 
                           000006   537 	VSIZE=6 
      000AA9                        538 readln::
      000AA9 90 89            [ 2]  539 	pushw y 
      000AAB                        540 	_vars VSIZE 
      000AAB 52 06            [ 2]    1     sub sp,#VSIZE 
      000AAD 5F               [ 1]  541 	clrw x 
      000AAE 1F 02            [ 2]  542 	ldw (LL,sp),x 
      000AB0 1F 03            [ 2]  543 	ldw (CPOS,sp),x 
      000AB2 03 04            [ 1]  544 	cpl (OVRWR,sp) ; default to overwrite mode 
      000AB4 90 AE 16 68      [ 2]  545  	ldw y,#tib ; terminal input buffer
      000AB8                        546 readln_loop:
      000AB8 CD 09 57         [ 4]  547 	call getc
      000ABB 6B 01            [ 1]  548 	ld (RXCHAR,sp),a
      000ABD A1 1B            [ 1]  549     cp a,#ESC 
      000ABF 26 05            [ 1]  550     jrne 0$
      000AC1 CD 09 7E         [ 4]  551     call get_escape 
      000AC4 6B 01            [ 1]  552     ld (RXCHAR,sp),a 
      000AC6 A1 0D            [ 1]  553 0$:	cp a,#CR
      000AC8 26 03            [ 1]  554 	jrne 1$
      000ACA CC 0C 51         [ 2]  555 	jp readln_quit
      000ACD A1 0A            [ 1]  556 1$:	cp a,#LF 
      000ACF 26 03            [ 1]  557 	jrne 2$ 
      000AD1 CC 0C 51         [ 2]  558 	jp readln_quit
      000AD4                        559 2$:
      000AD4 A1 08            [ 1]  560 	cp a,#BS
      000AD6 26 12            [ 1]  561 	jrne 3$
                                    562 ; delete left 
      000AD8 0D 03            [ 1]  563     tnz (CPOS,sp)
      000ADA 27 DC            [ 1]  564     jreq readln_loop 
      000ADC A6 01            [ 1]  565     ld a,#1 
      000ADE CD 09 F5         [ 4]  566     call move_left
      000AE1 0A 03            [ 1]  567     dec (CPOS,sp)
      000AE3 90 5A            [ 2]  568     decw y 
      000AE5 7B 03            [ 1]  569     ld a,(CPOS,sp) 
      000AE7 CC 0B FD         [ 2]  570     jp 12$
      000AEA                        571 3$:
      000AEA A1 04            [ 1]  572 	cp a,#CTRL_D
      000AEC 26 1A            [ 1]  573 	jrne 4$
                                    574 ;delete line 
      000AEE CD 0A 9B         [ 4]  575 	call delete_line 
      000AF1 7B 03            [ 1]  576     ld a,(CPOS,sp)
      000AF3 4C               [ 1]  577     inc a 
      000AF4 CD 09 F5         [ 4]  578     call move_left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000AF7 A6 3E            [ 1]  579 	ld a,#'> 
      000AF9 CD 09 47         [ 4]  580 	call putc 
      000AFC 90 AE 16 68      [ 2]  581 	ldw y,#tib
      000B00 90 7F            [ 1]  582 	clr (y)
      000B02 0F 02            [ 1]  583 	clr (LL,sp)
      000B04 0F 03            [ 1]  584 	clr (CPOS,sp)
      000B06 20 B0            [ 2]  585 	jra readln_loop
      000B08                        586 4$:
      000B08 A1 12            [ 1]  587 	cp a,#CTRL_R 
      000B0A 26 1E            [ 1]  588 	jrne 5$
                                    589 ;repeat line 
      000B0C 0D 02            [ 1]  590 	tnz (LL,sp)
      000B0E 26 A8            [ 1]  591 	jrne readln_loop
      000B10 90 AE 16 68      [ 2]  592 	ldw y,#tib 
      000B14 93               [ 1]  593 	ldw x,y
      000B15 CD 13 D3         [ 4]  594 	call strlen
      000B18 4D               [ 1]  595 	tnz a  
      000B19 27 9D            [ 1]  596 	jreq readln_loop
      000B1B 6B 02            [ 1]  597 	ld (LL,sp),a 
      000B1D 6B 03            [ 1]  598     ld (CPOS,sp),a
      000B1F 93               [ 1]  599 	ldw x,y  
      000B20 CD 09 A4         [ 4]  600 	call puts
      000B23 0F 01            [ 1]  601 	clr (LL_HB,sp)
      000B25 72 F9 01         [ 2]  602 	addw y,(LL_HB,sp)
      000B28 20 8E            [ 2]  603 	jra readln_loop 
      000B2A                        604 5$:
      000B2A A1 05            [ 1]  605 	cp a,#CTRL_E 
      000B2C 26 4D            [ 1]  606 	jrne 6$
                                    607 ;edit line number 
      000B2E AE 16 68         [ 2]  608 	ldw x,#tib 
      000B31 17 05            [ 2]  609 	ldw (YTEMP,sp),y  
      000B33 16 07            [ 2]  610 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000B35 CD 19 25         [ 4]  611 	call atoi24
      000B38 16 05            [ 2]  612 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000B3A 4F               [ 1]  613 	clr a
      000B3B CD 0C 8D         [ 4]  614 	call search_lineno
      000B3E 5D               [ 2]  615 	tnzw x 
      000B3F 26 0B            [ 1]  616 	jrne 51$
      000B41 0F 02            [ 1]  617 	clr (LL,sp)
      000B43 90 AE 16 68      [ 2]  618 	ldw y,#tib
      000B47 90 7F            [ 1]  619     clr (y) 	
      000B49 CC 0C 51         [ 2]  620 	jp readln_quit  
      000B4C                        621 51$:
      000B4C CF 00 04         [ 2]  622 	ldw basicptr,x
      000B4F E6 02            [ 1]  623 	ld a,(2,x)
      000B51 C7 00 02         [ 1]  624 	ld count,a 
      000B54 90 AE 16 68      [ 2]  625 	ldw y,#tib 
      000B58 CD 12 06         [ 4]  626 	call decompile 
      000B5B 0F 01            [ 1]  627 	clr (LL_HB,sp)
      000B5D A6 0D            [ 1]  628 	ld a,#CR 
      000B5F CD 09 47         [ 4]  629 	call putc 
      000B62 A6 3E            [ 1]  630 	ld a,#'>
      000B64 CD 09 47         [ 4]  631 	call putc
      000B67 AE 16 68         [ 2]  632     ldw x,#tib  
      000B6A CD 13 D3         [ 4]  633 	call strlen 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000B6D 6B 02            [ 1]  634 	ld (LL,sp),a 
      000B6F CD 09 A4         [ 4]  635 	call puts 
      000B72 90 93            [ 1]  636 	ldw y,x
      000B74 7B 02            [ 1]  637     ld a,(LL,sp)
      000B76 6B 03            [ 1]  638     ld (CPOS,sp),a  
      000B78 CC 0A B8         [ 2]  639 	jp readln_loop
      000B7B                        640 6$:
      000B7B A1 81            [ 1]  641 	cp a,#ARROW_RIGHT
      000B7D 26 15            [ 1]  642    	jrne 7$ 
                                    643 ; right arrow
      000B7F 7B 03            [ 1]  644 	ld a,(CPOS,sp)
      000B81 11 02            [ 1]  645     cp a,(LL,sp)
      000B83 2B 03            [ 1]  646     jrmi 61$
      000B85 CC 0A B8         [ 2]  647     jp readln_loop 
      000B88                        648 61$:
      000B88 A6 01            [ 1]  649     ld a,#1 
      000B8A CD 0A 03         [ 4]  650 	call move_right 
      000B8D 0C 03            [ 1]  651 	inc (CPOS,sp)
      000B8F 90 5C            [ 1]  652     incw y 
      000B91 CC 0A B8         [ 2]  653     jp readln_loop 
      000B94 A1 80            [ 1]  654 7$: cp a,#ARROW_LEFT  
      000B96 26 13            [ 1]  655 	jrne 8$
                                    656 ; left arrow 
      000B98 0D 03            [ 1]  657 	tnz (CPOS,sp)
      000B9A 26 03            [ 1]  658 	jrne 71$
      000B9C CC 0A B8         [ 2]  659 	jp readln_loop
      000B9F                        660 71$:
      000B9F A6 01            [ 1]  661     ld a,#1 
      000BA1 CD 09 F5         [ 4]  662 	call move_left 
      000BA4 0A 03            [ 1]  663 	dec (CPOS,sp)
      000BA6 90 5A            [ 2]  664     decw y 
      000BA8 CC 0A B8         [ 2]  665 	jp readln_loop 
      000BAB A1 82            [ 1]  666 8$: cp a,#HOME  
      000BAD 26 0E            [ 1]  667 	jrne 9$
                                    668 ; HOME 
      000BAF 7B 03            [ 1]  669     ld a,(CPOS,sp)
      000BB1 CD 09 F5         [ 4]  670     call move_left 
      000BB4 0F 03            [ 1]  671 	clr (CPOS,sp)
      000BB6 90 AE 16 68      [ 2]  672     ldw y,#tib 
      000BBA CC 0A B8         [ 2]  673 	jp readln_loop  
      000BBD A1 83            [ 1]  674 9$: cp a,#KEY_END  
      000BBF 26 26            [ 1]  675 	jrne 10$
                                    676 ; KEY_END 
      000BC1 7B 03            [ 1]  677 	ld a,(CPOS,sp)
      000BC3 11 02            [ 1]  678 	cp a,(LL,sp)
      000BC5 26 03            [ 1]  679 	jrne 91$
      000BC7 CC 0A B8         [ 2]  680 	jp readln_loop 
      000BCA                        681 91$:
      000BCA 7B 02            [ 1]  682 	ld a,(LL,sp)
      000BCC 10 03            [ 1]  683 	sub a,(CPOS,sp)
      000BCE CD 0A 03         [ 4]  684 	call move_right 
      000BD1 7B 02            [ 1]  685 	ld a,(LL,sp)
      000BD3 6B 03            [ 1]  686 	ld (CPOS,sp),a
      000BD5 90 AE 16 68      [ 2]  687     ldw y,#tib
      000BD9 72 5F 00 0D      [ 1]  688     clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000BDD C7 00 0E         [ 1]  689     ld acc8,a 
      000BE0 72 B9 00 0D      [ 2]  690     addw y,acc16  
      000BE4 CC 0A B8         [ 2]  691 	jp readln_loop 
      000BE7 A1 0F            [ 1]  692 10$: cp a,#CTRL_O
      000BE9 26 08            [ 1]  693 	jrne 11$ 
                                    694 ; toggle between insert/overwrite
      000BEB 03 04            [ 1]  695 	cpl (OVRWR,sp)
      000BED CD 26 31         [ 4]  696 	call beep_1khz
      000BF0 CC 0A B8         [ 2]  697 	jp readln_loop 
      000BF3 A1 84            [ 1]  698 11$: cp a,#SUP 
      000BF5 26 11            [ 1]  699     jrne final_test 
                                    700 ; del character under cursor 
      000BF7 7B 03            [ 1]  701     ld a,(CPOS,sp)
      000BF9 11 02            [ 1]  702     cp a,(LL,sp)
      000BFB 2A 08            [ 1]  703     jrpl 13$
      000BFD                        704 12$:
      000BFD 97               [ 1]  705     ld xl,a    ; cursor position 
      000BFE 7B 02            [ 1]  706     ld a,(LL,sp)  ; line length
      000C00 CD 0A 60         [ 4]  707     call delete_under
      000C03 0A 02            [ 1]  708     dec (LLEN,sp)
      000C05                        709 13$:
      000C05 CC 0A B8         [ 2]  710     jp readln_loop 
      000C08                        711 final_test:
      000C08 A1 20            [ 1]  712 	cp a,#SPACE
      000C0A 2A 03            [ 1]  713 	jrpl accept_char
      000C0C CC 0A B8         [ 2]  714 	jp readln_loop
      000C0F                        715 accept_char:
      000C0F A6 4F            [ 1]  716 	ld a,#TIB_SIZE-1
      000C11 11 02            [ 1]  717 	cp a, (LL,sp)
      000C13 2A 03            [ 1]  718 	jrpl 1$
      000C15 CC 0A B8         [ 2]  719 	jp readln_loop
      000C18 0D 04            [ 1]  720 1$:	tnz (OVRWR,sp)
      000C1A 26 18            [ 1]  721 	jrne overwrite
                                    722 ; insert mode 
      000C1C 7B 03            [ 1]  723     ld a,(CPOS,sp)
      000C1E 11 02            [ 1]  724     cp a,(LL,sp)
      000C20 27 12            [ 1]  725     jreq overwrite
      000C22 7B 02            [ 1]  726     ld a,(LL,sp)
      000C24 97               [ 1]  727     ld xl,a 
      000C25 7B 03            [ 1]  728     ld a,(CPOS,sp)
      000C27 95               [ 1]  729     ld xh,a
      000C28 7B 01            [ 1]  730     ld a,(RXCHAR,sp)
      000C2A CD 0A 1D         [ 4]  731     call insert_char
      000C2D 0C 02            [ 1]  732     inc (LLEN,sp)
      000C2F 0C 03            [ 1]  733     inc (CPOS,sp)	
      000C31 CC 0A B8         [ 2]  734     jp readln_loop 
      000C34                        735 overwrite:
      000C34 7B 01            [ 1]  736 	ld a,(RXCHAR,sp)
      000C36 90 F7            [ 1]  737 	ld (y),a
      000C38 90 5C            [ 1]  738     incw y
      000C3A CD 09 47         [ 4]  739     call putc 
      000C3D 7B 03            [ 1]  740 	ld a,(CPOS,sp)
      000C3F 11 02            [ 1]  741 	cp a,(LL,sp)
      000C41 2B 09            [ 1]  742 	jrmi 1$
      000C43 90 7F            [ 1]  743 	clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000C45 0C 02            [ 1]  744 	inc (LL,sp)
      000C47 0C 03            [ 1]  745     inc (CPOS,sp)
      000C49 CC 0A B8         [ 2]  746 	jp readln_loop 
      000C4C                        747 1$:	
      000C4C 0C 03            [ 1]  748 	inc (CPOS,sp)
      000C4E CC 0A B8         [ 2]  749 	jp readln_loop 
      000C51                        750 readln_quit:
      000C51 90 AE 16 68      [ 2]  751 	ldw y,#tib
      000C55 0F 01            [ 1]  752     clr (LL_HB,sp) 
      000C57 72 F9 01         [ 2]  753     addw y,(LL_HB,sp)
      000C5A 90 7F            [ 1]  754     clr (y)
      000C5C 7B 02            [ 1]  755 	ld a,(LL,sp)
      000C5E C7 00 02         [ 1]  756 	ld count,a 
      000C61 A6 0D            [ 1]  757 	ld a,#CR
      000C63 CD 09 47         [ 4]  758 	call putc
      000C66                        759 	_drop VSIZE 
      000C66 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C68 90 85            [ 2]  760 	popw y 
      000C6A 81               [ 4]  761 	ret
                                    762 
                                    763 ;------------------------------
                                    764 ; print byte  in hexadecimal 
                                    765 ; on console
                                    766 ; input:
                                    767 ;    A		byte to print
                                    768 ;------------------------------
      000C6B                        769 print_hex::
      000C6B 88               [ 1]  770 	push a 
      000C6C 4E               [ 1]  771 	swap a 
      000C6D CD 0C 82         [ 4]  772 	call to_hex_char 
      000C70 CD 09 47         [ 4]  773 	call putc 
      000C73 7B 01            [ 1]  774     ld a,(1,sp) 
      000C75 CD 0C 82         [ 4]  775 	call to_hex_char
      000C78 CD 09 47         [ 4]  776 	call putc
      000C7B A6 20            [ 1]  777 	ld a,#SPACE 
      000C7D CD 09 47         [ 4]  778 	call putc 
      000C80 84               [ 1]  779 	pop a 
      000C81 81               [ 4]  780 	ret 
                                    781 
                                    782 ;----------------------------------
                                    783 ; convert to hexadecimal digit 
                                    784 ; input:
                                    785 ;   A       digit to convert 
                                    786 ; output:
                                    787 ;   A       hexdecimal character 
                                    788 ;----------------------------------
      000C82                        789 to_hex_char::
      000C82 A4 0F            [ 1]  790 	and a,#15 
      000C84 A1 09            [ 1]  791 	cp a,#9 
      000C86 23 02            [ 2]  792 	jrule 1$ 
      000C88 AB 07            [ 1]  793 	add a,#7
      000C8A AB 30            [ 1]  794 1$: add a,#'0 
      000C8C 81               [ 4]  795 	ret 
                                    796 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C8D                         51 search_lineno::
      000C8D                         52 	_vars VSIZE
      000C8D 52 02            [ 2]    1     sub sp,#VSIZE 
      000C8F 0F 01            [ 1]   53 	clr (LL,sp)
      000C91 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C95 4D               [ 1]   55 	tnz a 
      000C96 27 04            [ 1]   56 	jreq search_ln_loop
      000C98 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C9C                         58 search_ln_loop:
      000C9C 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000CA0 2A 10            [ 1]   60 	jrpl 8$
      000CA2 90 F3            [ 1]   61 	cpw x,(y)
      000CA4 27 0E            [ 1]   62 	jreq 9$
      000CA6 2B 0A            [ 1]   63 	jrmi 8$ 
      000CA8 90 E6 02         [ 1]   64 	ld a,(2,y)
      000CAB 6B 02            [ 1]   65 	ld (LB,sp),a 
      000CAD 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000CB0 20 EA            [ 2]   67 	jra search_ln_loop 
      000CB2                         68 8$: 
      000CB2 5F               [ 1]   69 	clrw x 	
      000CB3 51               [ 1]   70 	exgw x,y 
      000CB4                         71 9$: _drop VSIZE
      000CB4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CB6 51               [ 1]   72 	exgw x,y   
      000CB7 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000CB8                         83 del_line: 
      000CB8                         84 	_vars VSIZE 
      000CB8 52 04            [ 2]    1     sub sp,#VSIZE 
      000CBA E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000CBC 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000CBE 0F 01            [ 1]   87 	clr (LLEN,sp)
      000CC0 90 93            [ 1]   88 	ldw y,x  
      000CC2 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000CC5 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000CC7 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000CCB 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000CCE 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000CD2 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000CD4 CD 13 FF         [ 4]   95 	call move
      000CD7 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000CDB 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000CDE 90 CF 00 1D      [ 2]   98 	ldw txtend,y
      000CE2 90 CF 00 2F      [ 2]   99 	ldw dvar_bgn,y 
      000CE6 90 CF 00 31      [ 2]  100 	ldw dvar_end,y   
      000CEA                        101 	_drop VSIZE     
      000CEA 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CEC 81               [ 4]  102 	ret 
                                    103 
                                    104 ;---------------------------------------------
                                    105 ; open a gap in text area to 
                                    106 ; move new line in this gap
                                    107 ; input:
                                    108 ;    X 			addr gap start 
                                    109 ;    Y 			gap length 
                                    110 ; output:
                                    111 ;    X 			addr gap start 
                                    112 ;--------------------------------------------
                           000001   113 	DEST=1
                           000003   114 	SRC=3
                           000005   115 	LEN=5
                           000006   116 	VSIZE=6 
      000CED                        117 open_gap:
      000CED C3 00 1D         [ 2]  118 	cpw x,txtend 
      000CF0 24 31            [ 1]  119 	jruge 9$
      000CF2                        120 	_vars VSIZE
      000CF2 52 06            [ 2]    1     sub sp,#VSIZE 
      000CF4 1F 03            [ 2]  121 	ldw (SRC,sp),x 
      000CF6 17 05            [ 2]  122 	ldw (LEN,sp),y 
      000CF8 90 CF 00 0D      [ 2]  123 	ldw acc16,y 
      000CFC 90 93            [ 1]  124 	ldw y,x ; SRC
      000CFE 72 BB 00 0D      [ 2]  125 	addw x,acc16  
      000D02 1F 01            [ 2]  126 	ldw (DEST,sp),x 
                                    127 ;compute size to move 	
      000D04 CE 00 1D         [ 2]  128 	ldw x,txtend 
      000D07 72 F0 03         [ 2]  129 	subw x,(SRC,sp)
      000D0A CF 00 0D         [ 2]  130 	ldw acc16,x ; size to move
      000D0D 1E 01            [ 2]  131 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000D0F CD 13 FF         [ 4]  132 	call move
      000D12 CE 00 1D         [ 2]  133 	ldw x,txtend
      000D15 72 FB 05         [ 2]  134 	addw x,(LEN,sp)
      000D18 CF 00 1D         [ 2]  135 	ldw txtend,x
      000D1B CF 00 2F         [ 2]  136 	ldw dvar_bgn,x 
      000D1E CF 00 31         [ 2]  137 	ldw dvar_end,x 
      000D21                        138 	_drop VSIZE 
      000D21 5B 06            [ 2]    1     addw sp,#VSIZE 
      000D23 81               [ 4]  139 9$:	ret 
                                    140 
                                    141 ;--------------------------------------------
                                    142 ; insert line in pad into text area 
                                    143 ; first search for already existing 
                                    144 ; replace existing 
                                    145 ; if new line empty delete existing one. 
                                    146 ; input:
                                    147 ;   ptr16		pointer to tokenized line  
                                    148 ; output:
                                    149 ;   none
                                    150 ;---------------------------------------------
                           000001   151 	DEST=1  ; text area insertion address 
                           000003   152 	SRC=3   ; str to insert address 
                           000005   153 	LINENO=5 ; line number 
                           000007   154 	LLEN=7 ; line length 
                           000008   155 	VSIZE=8  
      000D24                        156 insert_line:
      000D24                        157 	_vars VSIZE 
      000D24 52 08            [ 2]    1     sub sp,#VSIZE 
      000D26 72 CE 00 19      [ 5]  158 	ldw x,[ptr16]
      000D2A 1F 05            [ 2]  159 	ldw (LINENO,sp),x 
      000D2C 0F 07            [ 1]  160 	clr (LLEN,sp)
      000D2E CE 00 19         [ 2]  161 	ldw x,ptr16 
      000D31 E6 02            [ 1]  162 	ld a,(2,x)
      000D33 6B 08            [ 1]  163 	ld (LLEN+1,sp),a 
      000D35 4F               [ 1]  164 	clr a 
      000D36 1E 05            [ 2]  165 	ldw x,(LINENO,sp)
      000D38 CD 0C 8D         [ 4]  166 	call search_lineno
      000D3B 5D               [ 2]  167 	tnzw x 
      000D3C 27 07            [ 1]  168 	jreq 0$ 
      000D3E 1F 01            [ 2]  169 	ldw (DEST,sp),x 
      000D40 CD 0C B8         [ 4]  170 	call del_line 
      000D43 20 02            [ 2]  171 	jra 1$
      000D45 17 01            [ 2]  172 0$: ldw (DEST,sp),y
      000D47 A6 03            [ 1]  173 1$: ld a,#3 
      000D49 11 08            [ 1]  174 	cp a,(LLEN+1,sp)
      000D4B 27 42            [ 1]  175 	jreq 9$
                                    176 ; check for space 
      000D4D CE 00 1D         [ 2]  177 	ldw x,txtend 
      000D50 72 FB 07         [ 2]  178 	addw x,(LLEN,sp)
      000D53 A3 16 4A         [ 2]  179 	cpw x,#tib-10*CELL_SIZE ; keep 10 slots space for @() array.  
      000D56 25 0C            [ 1]  180 	jrult 3$
      000D58 72 1C 00 22      [ 1]  181 	bset flags,#FLN_REJECTED
      000D5C AE 15 2A         [ 2]  182 	ldw x,#err_mem_full 
      000D5F CD 09 A4         [ 4]  183 	call puts 
      000D62 20 2B            [ 2]  184 	jra 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000D64                        185 3$: ; create gap to insert line 
      000D64 1E 01            [ 2]  186 	ldw x,(DEST,sp) 
      000D66 16 07            [ 2]  187 	ldw y,(LLEN,sp)
      000D68 CD 0C ED         [ 4]  188 	call open_gap 
                                    189 ; move new line in gap 
      000D6B 1E 07            [ 2]  190 	ldw x,(LLEN,sp)
      000D6D CF 00 0D         [ 2]  191 	ldw acc16,x 
      000D70 90 AE 16 B8      [ 2]  192 	ldw y,#pad ;SRC 
      000D74 1E 01            [ 2]  193 	ldw x,(DEST,sp) ; dest address 
      000D76 CD 13 FF         [ 4]  194 	call move
      000D79 1E 01            [ 2]  195 	ldw x,(DEST,sp)
      000D7B C3 00 1D         [ 2]  196 	cpw x,txtend 
      000D7E 25 0F            [ 1]  197 	jrult 9$ 
      000D80 1E 07            [ 2]  198 	ldw x,(LLEN,sp)
      000D82 72 BB 00 1D      [ 2]  199 	addw x,txtend 
      000D86 CF 00 1D         [ 2]  200 	ldw txtend,x 
      000D89 CF 00 2F         [ 2]  201 	ldw dvar_bgn,x 
      000D8C CF 00 31         [ 2]  202 	ldw dvar_end,x 
      000D8F                        203 9$:	
      000D8F                        204 	_drop VSIZE
      000D8F 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D91 81               [ 4]  205 	ret
                                    206 
                                    207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    208 ;; compiler routines        ;;
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;------------------------------------
                                    211 ; parse quoted string 
                                    212 ; input:
                                    213 ;   Y 	pointer to tib 
                                    214 ;   X   pointer to output buffer 
                                    215 ; output:
                                    216 ;	buffer   parsed string
                                    217 ;------------------------------------
                           000001   218 	PREV = 1
                           000002   219 	CURR =2
                           000002   220 	VSIZE=2
      000D92                        221 parse_quote: 
      000D92                        222 	_vars VSIZE 
      000D92 52 02            [ 2]    1     sub sp,#VSIZE 
      000D94 4F               [ 1]  223 	clr a
      000D95 6B 01            [ 1]  224 1$:	ld (PREV,sp),a 
      000D97                        225 2$:	
      000D97 91 D6 00         [ 4]  226 	ld a,([in.w],y)
      000D9A 27 24            [ 1]  227 	jreq 6$
      000D9C 72 5C 00 01      [ 1]  228 	inc in 
      000DA0 6B 02            [ 1]  229 	ld (CURR,sp),a 
      000DA2 A6 5C            [ 1]  230 	ld a,#'\
      000DA4 11 01            [ 1]  231 	cp a, (PREV,sp)
      000DA6 26 0A            [ 1]  232 	jrne 3$
      000DA8 0F 01            [ 1]  233 	clr (PREV,sp)
      000DAA 7B 02            [ 1]  234 	ld a,(CURR,sp)
      000DAC AD 1C            [ 4]  235 	callr convert_escape
      000DAE F7               [ 1]  236 	ld (x),a 
      000DAF 5C               [ 1]  237 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000DB0 20 E5            [ 2]  238 	jra 2$
      000DB2                        239 3$:
      000DB2 7B 02            [ 1]  240 	ld a,(CURR,sp)
      000DB4 A1 5C            [ 1]  241 	cp a,#'\'
      000DB6 27 DD            [ 1]  242 	jreq 1$
      000DB8 A1 22            [ 1]  243 	cp a,#'"
      000DBA 27 04            [ 1]  244 	jreq 6$ 
      000DBC F7               [ 1]  245 	ld (x),a 
      000DBD 5C               [ 1]  246 	incw x 
      000DBE 20 D7            [ 2]  247 	jra 2$
      000DC0                        248 6$:
      000DC0 7F               [ 1]  249 	clr (x)
      000DC1 5C               [ 1]  250 	incw x 
      000DC2 90 93            [ 1]  251 	ldw y,x 
      000DC4 5F               [ 1]  252 	clrw x 
      000DC5 A6 02            [ 1]  253 	ld a,#TK_QSTR  
      000DC7                        254 	_drop VSIZE
      000DC7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DC9 81               [ 4]  255 	ret 
                                    256 
                                    257 ;---------------------------------------
                                    258 ; called by parse_quote
                                    259 ; subtitute escaped character 
                                    260 ; by their ASCII value .
                                    261 ; input:
                                    262 ;   A  character following '\'
                                    263 ; output:
                                    264 ;   A  substitued char or same if not valid.
                                    265 ;---------------------------------------
      000DCA                        266 convert_escape:
      000DCA 89               [ 2]  267 	pushw x 
      000DCB AE 0D DF         [ 2]  268 	ldw x,#escaped 
      000DCE F1               [ 1]  269 1$:	cp a,(x)
      000DCF 27 06            [ 1]  270 	jreq 2$
      000DD1 7D               [ 1]  271 	tnz (x)
      000DD2 27 09            [ 1]  272 	jreq 3$
      000DD4 5C               [ 1]  273 	incw x 
      000DD5 20 F7            [ 2]  274 	jra 1$
      000DD7 1D 0D DF         [ 2]  275 2$: subw x,#escaped 
      000DDA 9F               [ 1]  276 	ld a,xl 
      000DDB AB 07            [ 1]  277 	add a,#7
      000DDD 85               [ 2]  278 3$:	popw x 
      000DDE 81               [ 4]  279 	ret 
                                    280 
      000DDF 61 62 74 6E 76 66 72   281 escaped:: .asciz "abtnvfr"
             00
                                    282 
                                    283 ;-------------------------
                                    284 ; integer parser 
                                    285 ; input:
                                    286 ;   X 		point to output buffer  
                                    287 ;   Y 		point to tib 
                                    288 ;   A 	    first digit|'$' 
                                    289 ; output:  
                                    290 ;   X 		integer bits 15..0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    291 ;   A 		TK_INTGR
                                    292 ;   acc24   24 bits integer 
                                    293 ;-------------------------
                           000001   294 	BASE=1
                           000002   295 	TCHAR=2 
                           000003   296 	XSAVE=3
                           000004   297 	VSIZE=4 
      000DE7                        298 parse_integer: ; { -- n }
      000DE7 89               [ 2]  299 	pushw x 	
      000DE8 4B 00            [ 1]  300 	push #0 ; TCHAR
      000DEA 4B 0A            [ 1]  301 	push #10 ; BASE=10
      000DEC A1 24            [ 1]  302 	cp a,#'$
      000DEE 26 04            [ 1]  303 	jrne 2$ 
      000DF0                        304     _drop #1
      000DF0 5B 01            [ 2]    1     addw sp,##1 
      000DF2 4B 10            [ 1]  305 	push #16  ; BASE=16
      000DF4 F7               [ 1]  306 2$:	ld (x),a 
      000DF5 5C               [ 1]  307 	incw x 
      000DF6 91 D6 00         [ 4]  308 	ld a,([in.w],y)
      000DF9 72 5C 00 01      [ 1]  309 	inc in 
      000DFD CD 19 19         [ 4]  310 	call to_upper 
      000E00 6B 02            [ 1]  311 	ld (TCHAR,sp),a 
      000E02 CD 0E 88         [ 4]  312 	call is_digit 
      000E05 25 ED            [ 1]  313 	jrc 2$
      000E07 A6 10            [ 1]  314 	ld a,#16 
      000E09 11 01            [ 1]  315 	cp a,(BASE,sp)
      000E0B 26 0A            [ 1]  316 	jrne 3$ 
      000E0D 7B 02            [ 1]  317 	ld a,(TCHAR,sp)
      000E0F A1 41            [ 1]  318 	cp a,#'A 
      000E11 2B 04            [ 1]  319 	jrmi 3$ 
      000E13 A1 47            [ 1]  320 	cp a,#'G 
      000E15 2B DD            [ 1]  321 	jrmi 2$ 
      000E17 72 5A 00 01      [ 1]  322 3$: dec in 	
      000E1B 7F               [ 1]  323     clr (x)
      000E1C 1E 03            [ 2]  324 	ldw x,(XSAVE,sp)
      000E1E 90 AE 17 73      [ 2]  325 	ldw y,#XSTACK_EMPTY 
      000E22 CD 19 25         [ 4]  326 	call atoi24
      000E25 16 03            [ 2]  327 	ldw y,(XSAVE,sp)
      000E27 C6 00 0C         [ 1]  328 	ld a,acc24 
      000E2A 90 F7            [ 1]  329 	ld (y),a 
      000E2C 90 5C            [ 1]  330 	incw y  
      000E2E CE 00 0D         [ 2]  331 	ldw x,acc16 
      000E31 90 FF            [ 2]  332 	ldw (y),x 
      000E33 72 A9 00 02      [ 2]  333 	addw y,#2
      000E37 A6 84            [ 1]  334 	ld a,#TK_INTGR
      000E39                        335 	_drop VSIZE  
      000E39 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E3B 81               [ 4]  336 	ret 	
                                    337 
                                    338 ;-------------------------
                                    339 ; binary integer parser
                                    340 ; build integer in acc24  
                                    341 ; input:
                                    342 ;   X 		point to output buffer  
                                    343 ;   Y 		point to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    344 ;   A 	    '&' 
                                    345 ; output:  
                                    346 ;   buffer  TK_INTGR integer  
                                    347 ;   X 		int16 
                                    348 ;   A 		TK_INTGR
                                    349 ;   acc24    int24 
                                    350 ;-------------------------
                           000001   351 	BINARY=1 ; 24 bits integer 
                           000003   352 	VSIZE=3
      000E3C                        353 parse_binary: ; { -- n }
      000E3C 4B 00            [ 1]  354 	push #0
      000E3E 4B 00            [ 1]  355 	push #0
      000E40 4B 00            [ 1]  356 	push #0
      000E42                        357 2$:	
      000E42 91 D6 00         [ 4]  358 	ld a,([in.w],y)
      000E45 72 5C 00 01      [ 1]  359 	inc in 
      000E49 A1 30            [ 1]  360 	cp a,#'0 
      000E4B 27 06            [ 1]  361 	jreq 3$
      000E4D A1 31            [ 1]  362 	cp a,#'1 
      000E4F 27 02            [ 1]  363 	jreq 3$ 
      000E51 20 0B            [ 2]  364 	jra bin_exit 
      000E53 A0 30            [ 1]  365 3$: sub a,#'0 
      000E55 46               [ 1]  366 	rrc a
      000E56 09 03            [ 1]  367 	rlc (BINARY+2,sp) 
      000E58 09 02            [ 1]  368 	rlc (BINARY+1,sp)
      000E5A 09 01            [ 1]  369 	rlc (BINARY,sp) 
      000E5C 20 E4            [ 2]  370 	jra 2$  
      000E5E                        371 bin_exit:
      000E5E 72 5A 00 01      [ 1]  372 	dec in 
      000E62 90 93            [ 1]  373 	ldw y,x
      000E64 7B 01            [ 1]  374 	ld a,(BINARY,sp)
      000E66 90 F7            [ 1]  375 	ld (y),a 
      000E68 90 5C            [ 1]  376 	incw y 
      000E6A 1E 02            [ 2]  377 	ldw x,(BINARY+1,sp)
      000E6C 90 FF            [ 2]  378 	ldw (y),x 
      000E6E 72 A9 00 02      [ 2]  379 	addw y,#2  
      000E72 A6 84            [ 1]  380 	ld a,#TK_INTGR 	
      000E74                        381 	_drop VSIZE 
      000E74 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E76 81               [ 4]  382 	ret
                                    383 
                                    384 ;-------------------------------------
                                    385 ; check if A is a letter 
                                    386 ; input:
                                    387 ;   A 			character to test 
                                    388 ; output:
                                    389 ;   C flag      1 true, 0 false 
                                    390 ;-------------------------------------
      000E77                        391 is_alpha::
      000E77 A1 41            [ 1]  392 	cp a,#'A 
      000E79 8C               [ 1]  393 	ccf 
      000E7A 24 0B            [ 1]  394 	jrnc 9$ 
      000E7C A1 5B            [ 1]  395 	cp a,#'Z+1 
      000E7E 25 07            [ 1]  396 	jrc 9$ 
      000E80 A1 61            [ 1]  397 	cp a,#'a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000E82 8C               [ 1]  398 	ccf 
      000E83 24 02            [ 1]  399 	jrnc 9$
      000E85 A1 7B            [ 1]  400 	cp a,#'z+1
      000E87 81               [ 4]  401 9$: ret 	
                                    402 
                                    403 ;------------------------------------
                                    404 ; check if character in {'0'..'9'}
                                    405 ; input:
                                    406 ;    A  character to test
                                    407 ; output:
                                    408 ;    Carry  0 not digit | 1 digit
                                    409 ;------------------------------------
      000E88                        410 is_digit::
      000E88 A1 30            [ 1]  411 	cp a,#'0
      000E8A 25 03            [ 1]  412 	jrc 1$
      000E8C A1 3A            [ 1]  413     cp a,#'9+1
      000E8E 8C               [ 1]  414 	ccf 
      000E8F 8C               [ 1]  415 1$:	ccf 
      000E90 81               [ 4]  416     ret
                                    417 
                                    418 ;-------------------------------------
                                    419 ; return true if character in  A 
                                    420 ; is letter or digit.
                                    421 ; input:
                                    422 ;   A     ASCII character 
                                    423 ; output:
                                    424 ;   A     no change 
                                    425 ;   Carry    0 false| 1 true 
                                    426 ;--------------------------------------
      000E91                        427 is_alnum::
      000E91 CD 0E 88         [ 4]  428 	call is_digit
      000E94 25 03            [ 1]  429 	jrc 1$ 
      000E96 CD 0E 77         [ 4]  430 	call is_alpha
      000E99 81               [ 4]  431 1$:	ret 
                                    432 
                                    433 ;-----------------------------
                                    434 ; check if character in A 
                                    435 ; is a valid symbol character 
                                    436 ; valid: Upper case LETTER,DIGIT,'_' 
                                    437 ; input:
                                    438 ;    A   character to validate
                                    439 ; output:
                                    440 ;    Carry   set if valid 
                                    441 ;----------------------------
      000E9A                        442 is_symbol_char: 
      000E9A A1 5F            [ 1]  443 	cp a,#'_ 
      000E9C 26 03            [ 1]  444 	jrne 1$
      000E9E 99               [ 1]  445 	scf 
      000E9F 20 03            [ 2]  446 	jra 9$ 
      000EA1 CD 0E 91         [ 4]  447 1$:	call is_alnum 
      000EA4 81               [ 4]  448 9$: ret 
                                    449 
                                    450 ;---------------------------
                                    451 ;  when lexical unit begin 
                                    452 ;  with a letter a symbol 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    453 ;  is expected.
                                    454 ; input:
                                    455 ;   A   first character of symbol 
                                    456 ;	X   point to output buffer 
                                    457 ;   Y   point to input text 
                                    458 ; output:
                                    459 ;	X   after symbol 
                                    460 ;   Y   point after lexical unit 
                                    461 ;---------------------------
      000EA5                        462 parse_symbol:
      000EA5 5C               [ 1]  463 	incw x ; keep space for TK_ID 
      000EA6                        464 symb_loop: 
                                    465 ; symbol are converted to upper case 
      000EA6 CD 19 19         [ 4]  466 	call to_upper  
      000EA9 F7               [ 1]  467 	ld (x), a 
      000EAA 5C               [ 1]  468 	incw x
      000EAB 91 D6 00         [ 4]  469 	ld a,([in.w],y)
      000EAE 72 5C 00 01      [ 1]  470 	inc in 
      000EB2 CD 0E 9A         [ 4]  471 	call is_symbol_char 
      000EB5 25 EF            [ 1]  472 	jrc symb_loop 
      000EB7 7F               [ 1]  473 	clr (x)
      000EB8 72 5A 00 01      [ 1]  474 	dec in  
      000EBC 81               [ 4]  475 	ret 
                                    476 
                                    477 ;---------------------------
                                    478 ;  token begin with a letter,
                                    479 ;  is keyword or variable. 	
                                    480 ; input:
                                    481 ;   X 		point to pad 
                                    482 ;   Y 		point to text
                                    483 ;   A 	    first letter  
                                    484 ; output:
                                    485 ;   X		exec_addr|var_addr 
                                    486 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    487 ;   pad 	keyword|var_name  
                                    488 ;--------------------------  
                           000001   489 	XFIRST=1
                           000002   490 	VSIZE=2
      000EBD                        491 parse_keyword: 
      000EBD 89               [ 2]  492 	pushw x ; preserve *symbol 
      000EBE CD 0E A5         [ 4]  493 	call parse_symbol
      000EC1 1E 01            [ 2]  494 	ldw x,(XFIRST,sp) 
      000EC3 E6 02            [ 1]  495 	ld a,(2,x)
      000EC5 26 0F            [ 1]  496 	jrne 2$
                                    497 ; one letter variable name 
      000EC7 E6 01            [ 1]  498 	ld a,(1,x) 
      000EC9 A0 41            [ 1]  499 	sub a,#'A 
      000ECB AE 00 03         [ 2]  500 	ldw x,#3 
      000ECE 42               [ 4]  501 	mul x,a 
      000ECF 1C 00 34         [ 2]  502 	addw x,#vars 
      000ED2 A6 85            [ 1]  503 	ld a,#TK_VAR 
      000ED4 20 36            [ 2]  504 	jra 4$ 
      000ED6                        505 2$: ; check for keyword, otherwise syntax error.
      000ED6                        506 	_ldx_dict kword_dict ; dictionary entry point
      000ED6 AE 36 BD         [ 2]    1     ldw x,#kword_dict+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000ED9 16 01            [ 2]  507 	ldw y,(XFIRST,sp) ; name to search for
      000EDB 90 5C            [ 1]  508 	incw y 
      000EDD CD 19 A6         [ 4]  509 	call search_dict
      000EE0 4D               [ 1]  510 	tnz a
      000EE1 26 29            [ 1]  511 	jrne 4$
                                    512 ; not in dictionary
                                    513 ; compile it as TK_LABEL
      000EE3 16 01            [ 2]  514 	ldw y,(XFIRST,sp)
      000EE5 A6 03            [ 1]  515 	ld a,#TK_LABEL 
      000EE7 90 F7            [ 1]  516 	ld (y),a 
      000EE9 90 5C            [ 1]  517 	incw y
      000EEB 93               [ 1]  518 	ldw x,y 
      000EEC CD 13 D3         [ 4]  519 	call strlen
      000EEF A1 0F            [ 1]  520 	cp a,#NAME_MAX_LEN 
      000EF1 23 02            [ 2]  521 	jrule 22$ 
      000EF3 A6 0F            [ 1]  522 	ld a,#NAME_MAX_LEN 
      000EF5                        523 22$:	
      000EF5 88               [ 1]  524 	push a 
      000EF6                        525 24$:
      000EF6 90 F6            [ 1]  526     ld a,(y)
      000EF8 27 09            [ 1]  527 	jreq 3$
      000EFA 90 5C            [ 1]  528 	incw y
      000EFC 0A 01            [ 1]  529 	dec (1,sp) 
      000EFE 26 F6            [ 1]  530 	jrne 24$
      000F00 4F               [ 1]  531 	clr a 
      000F01 90 F7            [ 1]  532 	ld (y),a 
      000F03 90 5C            [ 1]  533 3$: incw y 
      000F05                        534 	_drop 1 
      000F05 5B 01            [ 2]    1     addw sp,#1 
      000F07 A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000F09 5F               [ 1]  536 	clrw x 
      000F0A 20 1B            [ 2]  537 	jra 5$ 
      000F0C                        538 4$:	
      000F0C 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000F0E A1 87            [ 1]  540 	cp a,#TK_NOT 
      000F10 2B 06            [ 1]  541 	jrmi 41$
      000F12 90 F7            [ 1]  542 	ld (y),a 
      000F14 90 5C            [ 1]  543 	incw y 
      000F16 20 0F            [ 2]  544 	jra 5$ 
      000F18                        545 41$:	
      000F18 A3 1D 33         [ 2]  546 	cpw x,#let  
      000F1B 27 0A            [ 1]  547 	jreq 5$  ; don't compile LET command 
      000F1D 90 F7            [ 1]  548 	ld (y),a 
      000F1F 90 5C            [ 1]  549 	incw y 
      000F21 90 FF            [ 2]  550 	ldw (y),x
      000F23 72 A9 00 02      [ 2]  551 	addw y,#2  
      000F27                        552 5$:	_drop VSIZE 
      000F27 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F29 81               [ 4]  553 	ret  	
                                    554 
                                    555 ;------------------------------------
                                    556 ; skip character c in text starting from 'in'
                                    557 ; input:
                                    558 ;	 y 		point to text buffer
                                    559 ;    a 		character to skip
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    560 ; output:  
                                    561 ;	'in' ajusted to new position
                                    562 ;------------------------------------
                           000001   563 	C = 1 ; local var
      000F2A                        564 skip:
      000F2A 88               [ 1]  565 	push a
      000F2B 91 D6 00         [ 4]  566 1$:	ld a,([in.w],y)
      000F2E 27 0A            [ 1]  567 	jreq 2$
      000F30 11 01            [ 1]  568 	cp a,(C,sp)
      000F32 26 06            [ 1]  569 	jrne 2$
      000F34 72 5C 00 01      [ 1]  570 	inc in
      000F38 20 F1            [ 2]  571 	jra 1$
      000F3A                        572 2$: _drop 1 
      000F3A 5B 01            [ 2]    1     addw sp,#1 
      000F3C 81               [ 4]  573 	ret
                                    574 	
                                    575 
                                    576 ;------------------------------------
                                    577 ; scan text for next token
                                    578 ; input: 
                                    579 ;	X 		pointer to buffer where 
                                    580 ;	        token id and value are copied 
                                    581 ; use:
                                    582 ;	Y       pointer to text in tib 
                                    583 ; output:
                                    584 ;   A       token attribute 
                                    585 ;   X 		token value
                                    586 ;   Y       updated position in output buffer   
                                    587 ;------------------------------------
                                    588 	; use to check special character 
                                    589 	.macro _case c t  
                                    590 	ld a,#c 
                                    591 	cp a,(TCHAR,sp) 
                                    592 	jrne t
                                    593 	.endm 
                                    594 
                           000001   595 	TCHAR=1
                           000002   596 	ATTRIB=2
                           000002   597 	VSIZE=2
      000F3D                        598 get_token:: 
      000F3D                        599 	_vars VSIZE
      000F3D 52 02            [ 2]    1     sub sp,#VSIZE 
                                    600 ;	ld a,in 
                                    601 ;	sub a,count
                                    602 ;   jrmi 0$
                                    603 ;	clr a 
                                    604 ;	ret 
      000F3F                        605 0$: 
      000F3F 90 AE 16 68      [ 2]  606 	ldw y,#tib    	
      000F43 A6 20            [ 1]  607 	ld a,#SPACE
      000F45 CD 0F 2A         [ 4]  608 	call skip
      000F48 55 00 01 00 03   [ 1]  609 	mov in.saved,in 
      000F4D 91 D6 00         [ 4]  610 	ld a,([in.w],y)
      000F50 26 05            [ 1]  611 	jrne 1$
      000F52 90 93            [ 1]  612 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000F54 CC 10 EE         [ 2]  613 	jp token_exit ; end of line 
      000F57 72 5C 00 01      [ 1]  614 1$:	inc in 
      000F5B CD 19 19         [ 4]  615 	call to_upper 
      000F5E 6B 01            [ 1]  616 	ld (TCHAR,sp),a 
                                    617 ; check for quoted string
      000F60                        618 str_tst:  	
      000F60                        619 	_case '"' nbr_tst
      000F60 A6 22            [ 1]    1 	ld a,#'"' 
      000F62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F64 26 0A            [ 1]    3 	jrne nbr_tst
      000F66 A6 02            [ 1]  620 	ld a,#TK_QSTR
      000F68 F7               [ 1]  621 	ld (x),a 
      000F69 5C               [ 1]  622 	incw x 
      000F6A CD 0D 92         [ 4]  623 	call parse_quote
      000F6D CC 10 EE         [ 2]  624 	jp token_exit
      000F70                        625 nbr_tst:
                                    626 ; check for hexadecimal number 
      000F70 A6 24            [ 1]  627 	ld a,#'$'
      000F72 11 01            [ 1]  628 	cp a,(TCHAR,sp) 
      000F74 27 17            [ 1]  629 	jreq 1$
                                    630 ;check for binary number 
      000F76 A6 26            [ 1]  631 	ld a,#'&
      000F78 11 01            [ 1]  632 	cp a,(TCHAR,sp)
      000F7A 26 0A            [ 1]  633 	jrne 0$
      000F7C A6 84            [ 1]  634 	ld a,#TK_INTGR
      000F7E F7               [ 1]  635 	ld (x),a 
      000F7F 5C               [ 1]  636 	incw x 
      000F80 CD 0E 3C         [ 4]  637 	call parse_binary ; expect binary integer 
      000F83 CC 10 EE         [ 2]  638 	jp token_exit 
                                    639 ; check for decimal number 	
      000F86 7B 01            [ 1]  640 0$:	ld a,(TCHAR,sp)
      000F88 CD 0E 88         [ 4]  641 	call is_digit
      000F8B 24 0C            [ 1]  642 	jrnc 3$
      000F8D A6 84            [ 1]  643 1$:	ld a,#TK_INTGR 
      000F8F F7               [ 1]  644 	ld (x),a 
      000F90 5C               [ 1]  645 	incw x 
      000F91 7B 01            [ 1]  646 	ld a,(TCHAR,sp)
      000F93 CD 0D E7         [ 4]  647 	call parse_integer 
      000F96 CC 10 EE         [ 2]  648 	jp token_exit 
      000F99                        649 3$: 
      000F99                        650 	_case '(' bkslsh_tst 
      000F99 A6 28            [ 1]    1 	ld a,#'(' 
      000F9B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F9D 26 05            [ 1]    3 	jrne bkslsh_tst
      000F9F A6 06            [ 1]  651 	ld a,#TK_LPAREN
      000FA1 CC 10 EA         [ 2]  652 	jp token_char   	
      000FA4                        653 bkslsh_tst: ; character token 
      000FA4                        654 	_case '\',rparnt_tst
      000FA4 A6 5C            [ 1]    1 	ld a,#'\' 
      000FA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA8 26 16            [ 1]    3 	jrne rparnt_tst
      000FAA A6 04            [ 1]  655 	ld a,#TK_CHAR 
      000FAC F7               [ 1]  656 	ld (x),a 
      000FAD 5C               [ 1]  657 	incw x 
      000FAE 91 D6 00         [ 4]  658 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000FB1 F7               [ 1]  659 	ld (x),a 
      000FB2 5C               [ 1]  660 	incw x
      000FB3 90 93            [ 1]  661 	ldw y,x 	 
      000FB5 72 5C 00 01      [ 1]  662 	inc in  
      000FB9 5F               [ 1]  663 	clrw x 
      000FBA 97               [ 1]  664 	ld xl,a 
      000FBB A6 04            [ 1]  665 	ld a,#TK_CHAR 
      000FBD CC 10 EE         [ 2]  666 	jp token_exit 
      000FC0                        667 rparnt_tst:		
      000FC0                        668 	_case ')' colon_tst 
      000FC0 A6 29            [ 1]    1 	ld a,#')' 
      000FC2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC4 26 05            [ 1]    3 	jrne colon_tst
      000FC6 A6 07            [ 1]  669 	ld a,#TK_RPAREN 
      000FC8 CC 10 EA         [ 2]  670 	jp token_char
      000FCB                        671 colon_tst:
      000FCB                        672 	_case ':' comma_tst 
      000FCB A6 3A            [ 1]    1 	ld a,#':' 
      000FCD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FCF 26 05            [ 1]    3 	jrne comma_tst
      000FD1 A6 09            [ 1]  673 	ld a,#TK_COLON 
      000FD3 CC 10 EA         [ 2]  674 	jp token_char  
      000FD6                        675 comma_tst:
      000FD6                        676 	_case COMMA semic_tst 
      000FD6 A6 2C            [ 1]    1 	ld a,#COMMA 
      000FD8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDA 26 05            [ 1]    3 	jrne semic_tst
      000FDC A6 08            [ 1]  677 	ld a,#TK_COMMA
      000FDE CC 10 EA         [ 2]  678 	jp token_char
      000FE1                        679 semic_tst:
      000FE1                        680 	_case SEMIC dash_tst
      000FE1 A6 3B            [ 1]    1 	ld a,#SEMIC 
      000FE3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE5 26 05            [ 1]    3 	jrne dash_tst
      000FE7 A6 0A            [ 1]  681 	ld a,#TK_SEMIC 
      000FE9 CC 10 EA         [ 2]  682 	jp token_char 	
      000FEC                        683 dash_tst: 	
      000FEC                        684 	_case '-' at_tst 
      000FEC A6 2D            [ 1]    1 	ld a,#'-' 
      000FEE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF0 26 05            [ 1]    3 	jrne at_tst
      000FF2 A6 11            [ 1]  685 	ld a,#TK_MINUS  
      000FF4 CC 10 EA         [ 2]  686 	jp token_char 
      000FF7                        687 at_tst:
      000FF7                        688 	_case '@' qmark_tst 
      000FF7 A6 40            [ 1]    1 	ld a,#'@' 
      000FF9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FFB 26 05            [ 1]    3 	jrne qmark_tst
      000FFD A6 05            [ 1]  689 	ld a,#TK_ARRAY 
      000FFF CC 10 EA         [ 2]  690 	jp token_char
      001002                        691 qmark_tst:
      001002                        692 	_case '?' tick_tst 
      001002 A6 3F            [ 1]    1 	ld a,#'?' 
      001004 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001006 26 12            [ 1]    3 	jrne tick_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001008 A6 80            [ 1]  693 	ld a,#TK_CMD  
      00100A F7               [ 1]  694 	ld (x),a 
      00100B 5C               [ 1]  695 	incw x 
      00100C 90 93            [ 1]  696 	ldw y,x 
      00100E AE 20 4D         [ 2]  697 	ldw x,#print
      001011 90 FF            [ 2]  698 	ldw (y),x 
      001013 72 A9 00 02      [ 2]  699 	addw y,#2
      001017 CC 10 EE         [ 2]  700 	jp token_exit
      00101A                        701 tick_tst: ; comment 
      00101A                        702 	_case TICK plus_tst 
      00101A A6 27            [ 1]    1 	ld a,#TICK 
      00101C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00101E 26 2B            [ 1]    3 	jrne plus_tst
      001020 A6 80            [ 1]  703 	ld a,#TK_CMD
      001022 F7               [ 1]  704 	ld (x),a 
      001023 5C               [ 1]  705 	incw x
      001024 90 AE 21 88      [ 2]  706 	ldw y,#remark 
      001028 FF               [ 2]  707 	ldw (x),y 
      001029 1C 00 02         [ 2]  708 	addw x,#2  
      00102C                        709 copy_comment:
      00102C 90 AE 16 68      [ 2]  710 	ldw y,#tib 
      001030 72 B9 00 00      [ 2]  711 	addw y,in.w
      001034 90 89            [ 2]  712 	pushw y 
      001036 CD 13 EF         [ 4]  713 	call strcpy
      001039 72 F2 01         [ 2]  714 	subw y,(1,sp)
      00103C 90 5C            [ 1]  715 	incw y ; strlen+1 
      00103E 17 01            [ 2]  716 	ldw (1,sp),y 
      001040 72 FB 01         [ 2]  717 	addw x,(1,sp) 
      001043                        718 	_drop 2 
      001043 5B 02            [ 2]    1     addw sp,#2 
      001045 4F               [ 1]  719 	clr a 
      001046 90 93            [ 1]  720 	ldw y,x 
      001048 CC 10 EE         [ 2]  721 	jp token_exit 
      00104B                        722 plus_tst:
      00104B                        723 	_case '+' star_tst 
      00104B A6 2B            [ 1]    1 	ld a,#'+' 
      00104D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00104F 26 05            [ 1]    3 	jrne star_tst
      001051 A6 10            [ 1]  724 	ld a,#TK_PLUS  
      001053 CC 10 EA         [ 2]  725 	jp token_char 
      001056                        726 star_tst:
      001056                        727 	_case '*' slash_tst 
      001056 A6 2A            [ 1]    1 	ld a,#'*' 
      001058 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00105A 26 05            [ 1]    3 	jrne slash_tst
      00105C A6 20            [ 1]  728 	ld a,#TK_MULT 
      00105E CC 10 EA         [ 2]  729 	jp token_char 
      001061                        730 slash_tst: 
      001061                        731 	_case '/' prcnt_tst 
      001061 A6 2F            [ 1]    1 	ld a,#'/' 
      001063 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001065 26 05            [ 1]    3 	jrne prcnt_tst
      001067 A6 21            [ 1]  732 	ld a,#TK_DIV 
      001069 CC 10 EA         [ 2]  733 	jp token_char 
      00106C                        734 prcnt_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      00106C                        735 	_case '%' eql_tst 
      00106C A6 25            [ 1]    1 	ld a,#'%' 
      00106E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001070 26 05            [ 1]    3 	jrne eql_tst
      001072 A6 22            [ 1]  736 	ld a,#TK_MOD
      001074 CC 10 EA         [ 2]  737 	jp token_char  
                                    738 ; 1 or 2 character tokens 	
      001077                        739 eql_tst:
      001077                        740 	_case '=' gt_tst 		
      001077 A6 3D            [ 1]    1 	ld a,#'=' 
      001079 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00107B 26 05            [ 1]    3 	jrne gt_tst
      00107D A6 32            [ 1]  741 	ld a,#TK_EQUAL
      00107F CC 10 EA         [ 2]  742 	jp token_char 
      001082                        743 gt_tst:
      001082                        744 	_case '>' lt_tst 
      001082 A6 3E            [ 1]    1 	ld a,#'>' 
      001084 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001086 26 23            [ 1]    3 	jrne lt_tst
      001088 A6 31            [ 1]  745 	ld a,#TK_GT 
      00108A 6B 02            [ 1]  746 	ld (ATTRIB,sp),a 
      00108C 91 D6 00         [ 4]  747 	ld a,([in.w],y)
      00108F 72 5C 00 01      [ 1]  748 	inc in 
      001093 A1 3D            [ 1]  749 	cp a,#'=
      001095 26 04            [ 1]  750 	jrne 1$
      001097 A6 33            [ 1]  751 	ld a,#TK_GE 
      001099 20 4F            [ 2]  752 	jra token_char  
      00109B A1 3C            [ 1]  753 1$: cp a,#'<
      00109D 26 04            [ 1]  754 	jrne 2$
      00109F A6 35            [ 1]  755 	ld a,#TK_NE 
      0010A1 20 47            [ 2]  756 	jra token_char 
      0010A3 72 5A 00 01      [ 1]  757 2$: dec in
      0010A7 7B 02            [ 1]  758 	ld a,(ATTRIB,sp)
      0010A9 20 3F            [ 2]  759 	jra token_char 	 
      0010AB                        760 lt_tst:
      0010AB                        761 	_case '<' other
      0010AB A6 3C            [ 1]    1 	ld a,#'<' 
      0010AD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0010AF 26 23            [ 1]    3 	jrne other
      0010B1 A6 34            [ 1]  762 	ld a,#TK_LT 
      0010B3 6B 02            [ 1]  763 	ld (ATTRIB,sp),a 
      0010B5 91 D6 00         [ 4]  764 	ld a,([in.w],y)
      0010B8 72 5C 00 01      [ 1]  765 	inc in 
      0010BC A1 3D            [ 1]  766 	cp a,#'=
      0010BE 26 04            [ 1]  767 	jrne 1$
      0010C0 A6 36            [ 1]  768 	ld a,#TK_LE 
      0010C2 20 26            [ 2]  769 	jra token_char 
      0010C4 A1 3E            [ 1]  770 1$: cp a,#'>
      0010C6 26 04            [ 1]  771 	jrne 2$
      0010C8 A6 35            [ 1]  772 	ld a,#TK_NE 
      0010CA 20 1E            [ 2]  773 	jra token_char 
      0010CC 72 5A 00 01      [ 1]  774 2$: dec in 
      0010D0 7B 02            [ 1]  775 	ld a,(ATTRIB,sp)
      0010D2 20 16            [ 2]  776 	jra token_char 	
      0010D4                        777 other: ; not a special character 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0010D4 7B 01            [ 1]  778 	ld a,(TCHAR,sp)
      0010D6 CD 0E 77         [ 4]  779 	call is_alpha 
      0010D9 25 03            [ 1]  780 	jrc 30$ 
      0010DB CC 16 D7         [ 2]  781 	jp syntax_error 
      0010DE                        782 30$: 
      0010DE CD 0E BD         [ 4]  783 	call parse_keyword
      0010E1 A3 21 88         [ 2]  784 	cpw x,#remark 
      0010E4 26 08            [ 1]  785 	jrne token_exit 
      0010E6 93               [ 1]  786 	ldw x,y 
      0010E7 CC 10 2C         [ 2]  787 	jp copy_comment 
      0010EA                        788 token_char:
      0010EA F7               [ 1]  789 	ld (x),a 
      0010EB 5C               [ 1]  790 	incw x
      0010EC 90 93            [ 1]  791 	ldw y,x 
      0010EE                        792 token_exit:
      0010EE                        793 	_drop VSIZE 
      0010EE 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010F0 81               [ 4]  794 	ret
                                    795 
                                    796 
                                    797 ;-----------------------------------
                                    798 ; create token list fromm text line 
                                    799 ; save this list in pad buffer 
                                    800 ;  compiled line format: 
                                    801 ;    line_no  2 bytes {0...32767}
                                    802 ;    line length    1 byte  
                                    803 ;    tokens list  variable length 
                                    804 ;   
                                    805 ; input:
                                    806 ;   none
                                    807 ; modified variables:
                                    808 ;   basicptr     token list buffer address 
                                    809 ;   in.w  		 3|count, i.e. index in buffer
                                    810 ;   count        length of line | 0  
                                    811 ;-----------------------------------
                           000001   812 	XSAVE=1
                           000002   813 	VSIZE=2
      0010F1                        814 compile::
      0010F1 90 89            [ 2]  815 	pushw y ; preserve xstack pointer 
      0010F3                        816 	_vars VSIZE 
      0010F3 52 02            [ 2]    1     sub sp,#VSIZE 
      0010F5 55 00 1B 00 04   [ 1]  817 	mov basicptr,txtbgn
      0010FA 72 1A 00 22      [ 1]  818 	bset flags,#FCOMP 
      0010FE A6 00            [ 1]  819 	ld a,#0
      001100 AE 00 00         [ 2]  820 	ldw x,#0
      001103 CF 16 B8         [ 2]  821 	ldw pad,x ; destination buffer 
      001106 C7 16 BA         [ 1]  822 	ld pad+2,a ; count 
      001109 AE 16 BB         [ 2]  823 	ldw x,#pad+3
      00110C 72 5F 00 01      [ 1]  824 	clr in 
      001110 CD 0F 3D         [ 4]  825 	call get_token
      001113 A1 84            [ 1]  826 	cp a,#TK_INTGR
      001115 26 11            [ 1]  827 	jrne 2$
      001117 A3 00 01         [ 2]  828 	cpw x,#1 
      00111A 2A 05            [ 1]  829 	jrpl 1$
      00111C A6 0A            [ 1]  830 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      00111E CC 16 D9         [ 2]  831 	jp tb_error
      001121 CF 16 B8         [ 2]  832 1$:	ldw pad,x ; line# 
      001124 90 AE 16 BB      [ 2]  833 	ldw y,#pad+3 
      001128 90 A3 17 38      [ 2]  834 2$:	cpw y,#xstack_full 
      00112C 25 05            [ 1]  835 	jrult 3$
      00112E A6 0F            [ 1]  836 	ld a,#ERR_BUF_FULL 
      001130 CC 16 D9         [ 2]  837 	jp tb_error 
      001133                        838 3$:	
      001133 93               [ 1]  839 	ldw x,y 
      001134 CD 0F 3D         [ 4]  840 	call get_token 
      001137 A1 00            [ 1]  841 	cp a,#TK_NONE 
      001139 26 ED            [ 1]  842 	jrne 2$ 
                                    843 ; compilation completed  
      00113B 72 A2 16 B8      [ 2]  844 	subw y,#pad ; compiled line length 
      00113F 90 9F            [ 1]  845     ld a,yl
      001141 AE 16 B8         [ 2]  846 	ldw x,#pad 
      001144 CF 00 19         [ 2]  847 	ldw ptr16,x 
      001147 E7 02            [ 1]  848 	ld (2,x),a 
      001149 FE               [ 2]  849 	ldw x,(x)  ; line# 
      00114A 27 09            [ 1]  850 	jreq 10$
      00114C CD 0D 24         [ 4]  851 	call insert_line
      00114F 72 5F 00 02      [ 1]  852 	clr  count 
      001153 20 0F            [ 2]  853 	jra  11$ 
      001155                        854 10$: ; line# is zero 
      001155 CE 00 19         [ 2]  855 	ldw x,ptr16  
      001158 CF 00 04         [ 2]  856 	ldw basicptr,x 
      00115B E6 02            [ 1]  857 	ld a,(2,x)
      00115D C7 00 02         [ 1]  858 	ld count,a 
      001160 35 03 00 01      [ 1]  859 	mov in,#3 
      001164                        860 11$:
      001164                        861 	_drop VSIZE 
      001164 5B 02            [ 2]    1     addw sp,#VSIZE 
      001166 72 1B 00 22      [ 1]  862 	bres flags,#FCOMP 
      00116A 90 85            [ 2]  863 	popw y 
      00116C 81               [ 4]  864 	ret 
                                    865 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      00116D                         48 cpy_cmd_name:
      00116D 5D               [ 2]   49 	tnzw x 
      00116E 27 14            [ 1]   50 	jreq 10$
      001170 F6               [ 1]   51 	ld a,(x)
      001171 5C               [ 1]   52 	incw x
      001172 A4 0F            [ 1]   53 	and a,#15  
      001174 88               [ 1]   54 	push a 
      001175 0D 01            [ 1]   55     tnz (1,sp) 
      001177 27 0A            [ 1]   56 	jreq 9$
      001179 F6               [ 1]   57 1$:	ld a,(x)
      00117A 90 F7            [ 1]   58 	ld (y),a  
      00117C 5C               [ 1]   59 	incw x
      00117D 90 5C            [ 1]   60 	incw y 
      00117F 0A 01            [ 1]   61 	dec (1,sp)	 
      001181 26 F6            [ 1]   62 	jrne 1$
      001183 84               [ 1]   63 9$: pop a 
      001184                         64 10$: 
      001184 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      001185                         75 add_space:
      001185 90 5A            [ 2]   76 	decw y 
      001187 90 F6            [ 1]   77 	ld a,(y)
      001189 90 5C            [ 1]   78 	incw y
      00118B A1 29            [ 1]   79 	cp a,#') 
      00118D 27 05            [ 1]   80 	jreq 0$
      00118F CD 0E 91         [ 4]   81 	call is_alnum 
      001192 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001194                         83 0$: 
      001194 A6 20            [ 1]   84 	ld a,#SPACE 
      001196 90 F7            [ 1]   85 	ld (y),a 
      001198 90 5C            [ 1]   86 	incw y 
      00119A 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  by  padding left  
                                     92 ;  with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      width  
                                     96 ; output:
                                     97 ;   A      strlen
                                     98 ;   X      ajusted
                                     99 ;--------------------------
                           000001   100 	WIDTH=1 ; column width 
                           000002   101 	SLEN=2  ; string length 
                           000002   102 	VSIZE=2 
      00119B                        103 right_align::
      00119B                        104 	_vars VSIZE 
      00119B 52 02            [ 2]    1     sub sp,#VSIZE 
      00119D 6B 01            [ 1]  105 	ld (WIDTH,sp),a 
      00119F CD 13 D3         [ 4]  106 	call strlen 
      0011A2 6B 02            [ 1]  107 0$:	ld (SLEN,sp),a  
      0011A4 11 01            [ 1]  108 	cp a,(WIDTH,sp) 
      0011A6 2A 09            [ 1]  109 	jrpl 1$
      0011A8 5A               [ 2]  110 	decw x
      0011A9 A6 20            [ 1]  111 	ld a,#SPACE 
      0011AB F7               [ 1]  112 	ld (x),a  
      0011AC 7B 02            [ 1]  113 	ld a,(SLEN,sp)
      0011AE 4C               [ 1]  114 	inc a 
      0011AF 20 F1            [ 2]  115 	jra 0$ 
      0011B1 7B 02            [ 1]  116 1$: ld a,(SLEN,sp)	
      0011B3                        117 	_drop VSIZE 
      0011B3 5B 02            [ 2]    1     addw sp,#VSIZE 
      0011B5 81               [ 4]  118 	ret 
                                    119 
                                    120 ;--------------------------
                                    121 ; print TK_QSTR
                                    122 ; converting control character
                                    123 ; to backslash sequence
                                    124 ; input:
                                    125 ;   X        char *
                                    126 ;   Y        dest. buffer 
                                    127 ; output:
                                    128 ;   X        moved forward 
                                    129 ;   Y        moved forward 
                                    130 ;-----------------------------
      0011B6                        131 cpy_quote:
      0011B6 A6 22            [ 1]  132 	ld a,#'"
      0011B8 90 F7            [ 1]  133 	ld (y),a 
      0011BA 90 5C            [ 1]  134 	incw y 
      0011BC 89               [ 2]  135 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0011BD CD 18 57         [ 4]  136 	call skip_string 
      0011C0 85               [ 2]  137 	popw x 
      0011C1 F6               [ 1]  138 1$:	ld a,(x)
      0011C2 27 30            [ 1]  139 	jreq 9$
      0011C4 5C               [ 1]  140 	incw x 
      0011C5 A1 20            [ 1]  141 	cp a,#SPACE 
      0011C7 25 0E            [ 1]  142 	jrult 3$
      0011C9 90 F7            [ 1]  143 	ld (y),a
      0011CB 90 5C            [ 1]  144 	incw y 
      0011CD A1 5C            [ 1]  145 	cp a,#'\ 
      0011CF 26 F0            [ 1]  146 	jrne 1$ 
      0011D1                        147 2$:
      0011D1 90 F7            [ 1]  148 	ld (y),a
      0011D3 90 5C            [ 1]  149 	incw y  
      0011D5 20 EA            [ 2]  150 	jra 1$
      0011D7 88               [ 1]  151 3$: push a 
      0011D8 A6 5C            [ 1]  152 	ld a,#'\
      0011DA 90 F7            [ 1]  153 	ld (y),a 
      0011DC 90 5C            [ 1]  154 	incw y  
      0011DE 84               [ 1]  155 	pop a 
      0011DF A0 07            [ 1]  156 	sub a,#7
      0011E1 C7 00 0E         [ 1]  157 	ld acc8,a 
      0011E4 72 5F 00 0D      [ 1]  158 	clr acc16
      0011E8 89               [ 2]  159 	pushw x
      0011E9 AE 0D DF         [ 2]  160 	ldw x,#escaped 
      0011EC 72 BB 00 0D      [ 2]  161 	addw x,acc16 
      0011F0 F6               [ 1]  162 	ld a,(x)
      0011F1 85               [ 2]  163 	popw x
      0011F2 20 DD            [ 2]  164 	jra 2$
      0011F4 A6 22            [ 1]  165 9$: ld a,#'"
      0011F6 90 F7            [ 1]  166 	ld (y),a 
      0011F8 90 5C            [ 1]  167 	incw y  
      0011FA 5C               [ 1]  168 	incw x 
      0011FB 81               [ 4]  169 	ret
                                    170 
                                    171 ;--------------------------
                                    172 ; return variable name 
                                    173 ; from its address.
                                    174 ; input:
                                    175 ;   X    variable address
                                    176 ; output:
                                    177 ;   A     variable letter
                                    178 ;--------------------------
      0011FC                        179 var_name::
      0011FC 1D 00 34         [ 2]  180 		subw x,#vars 
      0011FF A6 03            [ 1]  181 		ld a,#3
      001201 62               [ 2]  182 		div x,a 
      001202 9F               [ 1]  183 		ld a,xl 
      001203 AB 41            [ 1]  184 		add a,#'A 
      001205 81               [ 4]  185 		ret 
                                    186 
                                    187 
                                    188 
                                    189 ;-------------------------------------
                                    190 ; decompile tokens list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    191 ; to original text line 
                                    192 ; input:
                                    193 ;   [basicptr]  pointer at line 
                                    194 ;   Y           output buffer
                                    195 ; output:
                                    196 ;   A           length 
                                    197 ;   Y           after string  
                                    198 ;------------------------------------
                           000001   199 	BASE_SAV=1
                           000002   200 	STR=2
                           000003   201 	VSIZE=3 
      001206                        202 decompile::
      001206                        203 	_vars VSIZE
      001206 52 03            [ 2]    1     sub sp,#VSIZE 
      001208 C6 00 0A         [ 1]  204 	ld a,base
      00120B 6B 01            [ 1]  205 	ld (BASE_SAV,sp),a  
      00120D 17 02            [ 2]  206 	ldw (STR,sp),y   
      00120F 72 CE 00 04      [ 5]  207 	ldw x,[basicptr] ; line number 
      001213 35 0A 00 0A      [ 1]  208 	mov base,#10
      001217 72 5F 00 0C      [ 1]  209 	clr acc24 
      00121B CF 00 0D         [ 2]  210 	ldw acc16,x
      00121E 4F               [ 1]  211 	clr a ; unsigned conversion 
      00121F CD 18 BB         [ 4]  212 	call itoa  
      001222 A6 05            [ 1]  213 	ld a,#5 
      001224 CD 11 9B         [ 4]  214 	call right_align 
      001227 88               [ 1]  215 	push a 
      001228 90 93            [ 1]  216 1$:	ldw y,x ; source
      00122A 1E 03            [ 2]  217 	ldw x,(STR+1,sp) ; destination
      00122C CD 13 EF         [ 4]  218 	call strcpy 
      00122F 90 5F            [ 1]  219 	clrw y 
      001231 84               [ 1]  220 	pop a 
      001232 90 97            [ 1]  221 	ld yl,a 
      001234 72 F9 02         [ 2]  222 	addw y,(STR,sp)
      001237 A6 20            [ 1]  223 	ld a,#SPACE 
      001239 90 F7            [ 1]  224 	ld (y),a 
      00123B 90 5C            [ 1]  225 	incw y 
      00123D AE 00 03         [ 2]  226 	ldw x,#3
      001240 CF 00 00         [ 2]  227 	ldw in.w,x 
      001243                        228 decomp_loop:
      001243 90 89            [ 2]  229 	pushw y
      001245 CD 18 3E         [ 4]  230 	call next_token 
      001248 90 85            [ 2]  231 	popw y 
      00124A 4D               [ 1]  232 	tnz a  
      00124B 26 03            [ 1]  233 	jrne 1$
      00124D CC 13 68         [ 2]  234 	jp 20$
      001250 2B 03            [ 1]  235 1$:	jrmi 2$
      001252 CC 12 E1         [ 2]  236 	jp 6$
      001255                        237 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      001255 A1 85            [ 1]  238 	cp a,#TK_VAR 
      001257 26 0F            [ 1]  239 	jrne 3$
                                    240 ;; TK_VAR 
      001259 CD 11 85         [ 4]  241 	call add_space
      00125C CD 18 66         [ 4]  242 	call get_addr   
      00125F CD 11 FC         [ 4]  243 	call var_name
      001262 90 F7            [ 1]  244 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001264 90 5C            [ 1]  245 	incw y  
      001266 20 DB            [ 2]  246 	jra decomp_loop
      001268                        247 3$:
      001268 A1 84            [ 1]  248 	cp a,#TK_INTGR
      00126A 26 26            [ 1]  249 	jrne 4$
                                    250 ;; TK_INTGR
      00126C CD 18 70         [ 4]  251 	call get_int24 
      00126F C7 00 0C         [ 1]  252 	ld acc24,a 
      001272 CF 00 0D         [ 2]  253 	ldw acc16,x 
      001275 CD 11 85         [ 4]  254 	call add_space
      001278 90 89            [ 2]  255 	pushw y 
      00127A A6 FF            [ 1]  256 	ld a,#255 ; signed conversion 
      00127C CD 18 BB         [ 4]  257 	call itoa  
      00127F 16 01            [ 2]  258 	ldw y,(1,sp) 
      001281 88               [ 1]  259 	push a 
      001282 51               [ 1]  260 	exgw x,y 
      001283 CD 13 EF         [ 4]  261 	call strcpy 
      001286 90 5F            [ 1]  262 	clrw y
      001288 84               [ 1]  263 	pop a  
      001289 90 97            [ 1]  264 	ld yl,a 
      00128B 72 F9 01         [ 2]  265 	addw y,(1,sp)
      00128E                        266 	_drop 2 
      00128E 5B 02            [ 2]    1     addw sp,#2 
      001290 20 B1            [ 2]  267 	jra decomp_loop
      001292                        268 4$: ; dictionary keyword
      001292 A1 87            [ 1]  269 	cp a,#TK_NOT 
      001294 24 39            [ 1]  270 	jruge 50$ 
      001296 FE               [ 2]  271 	ldw x,(x)
      001297 72 5C 00 01      [ 1]  272 	inc in 
      00129B 72 5C 00 01      [ 1]  273 	inc in 
      00129F A3 21 88         [ 2]  274 	cpw x,#remark 
      0012A2 26 23            [ 1]  275 	jrne 5$
      0012A4 CE 00 04         [ 2]  276 	ldw x,basicptr 
                                    277 ; copy comment to buffer 
      0012A7 CD 11 85         [ 4]  278 	call add_space
      0012AA A6 27            [ 1]  279 	ld a,#''
      0012AC 90 F7            [ 1]  280 	ld (y),a 
      0012AE 90 5C            [ 1]  281 	incw y 
      0012B0                        282 46$:
      0012B0 72 D6 00 00      [ 4]  283 	ld a,([in.w],x)
      0012B4 72 5C 00 01      [ 1]  284 	inc in  
      0012B8 90 F7            [ 1]  285 	ld (y),a 
      0012BA 90 5C            [ 1]  286 	incw y 
      0012BC C6 00 01         [ 1]  287 	ld a,in 
      0012BF C1 00 02         [ 1]  288 	cp a,count 
      0012C2 2B EC            [ 1]  289 	jrmi 46$
      0012C4 CC 13 68         [ 2]  290 	jp 20$  
      0012C7 A3 1D 33         [ 2]  291 5$: cpw x,#let  
      0012CA 26 05            [ 1]  292 	jrne 54$
      0012CC CC 12 43         [ 2]  293 	jp decomp_loop ; down display LET
      0012CF                        294 50$:
      0012CF 5F               [ 1]  295 	clrw x 
      0012D0 97               [ 1]  296 	ld xl,a 
      0012D1                        297 54$: ; insert command name 
      0012D1 CD 11 85         [ 4]  298 	call add_space  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0012D4 90 89            [ 2]  299 	pushw y
      0012D6 CD 13 9F         [ 4]  300 	call cmd_name
      0012D9 90 85            [ 2]  301 	popw y 
      0012DB CD 11 6D         [ 4]  302 	call cpy_cmd_name
      0012DE CC 12 43         [ 2]  303 	jp decomp_loop 
      0012E1                        304 6$:
                                    305 ; label?
      0012E1 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      0012E3 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      0012E5 A6 20            [ 1]  309 	ld a,#32 
      0012E7 90 F7            [ 1]  310 	ld (y),a 
      0012E9 90 5C            [ 1]  311 	incw y 
      0012EB                        312 61$:
      0012EB 89               [ 2]  313 	pushw x 
      0012EC CD 18 57         [ 4]  314 	call skip_string 
      0012EF 85               [ 2]  315 	popw x 
      0012F0                        316 62$:	
      0012F0 F6               [ 1]  317 	ld a,(x)
      0012F1 27 07            [ 1]  318 	jreq 63$ 
      0012F3 5C               [ 1]  319 	incw x  
      0012F4 90 F7            [ 1]  320 	ld (y),a 
      0012F6 90 5C            [ 1]  321 	incw y 
      0012F8 20 F6            [ 2]  322 	jra 62$ 
      0012FA                        323 63$: 
      0012FA A6 20            [ 1]  324 	ld a,#32 
      0012FC 90 F7            [ 1]  325 	ld (y),a 
      0012FE 90 5C            [ 1]  326 	incw y 
      001300 CC 12 43         [ 2]  327 	jp decomp_loop
      001303                        328 64$:
      001303 A1 02            [ 1]  329 	cp a,#TK_QSTR 
      001305 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      001307 CD 11 85         [ 4]  332 	call add_space
      00130A CD 11 B6         [ 4]  333 	call cpy_quote  
      00130D CC 12 43         [ 2]  334 	jp decomp_loop
      001310                        335 7$:
      001310 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      001312 26 15            [ 1]  337 	jrne 9$
                                    338 ;; TK_CHAR
      001314 CD 11 85         [ 4]  339 	call add_space 
      001317 A6 5C            [ 1]  340 	ld a,#'\ 
      001319 90 F7            [ 1]  341 	ld (y),a 
      00131B 90 5C            [ 1]  342 	incw y
      00131D F6               [ 1]  343 	ld a,(x)
      00131E 72 5C 00 01      [ 1]  344 	inc in  
      001322                        345 8$:
      001322 90 F7            [ 1]  346 	ld (y),a 
      001324 90 5C            [ 1]  347 	incw y 
      001326                        348 82$:
      001326 CC 12 43         [ 2]  349 	jp decomp_loop
      001329                        350 9$: 
      001329 A1 0A            [ 1]  351 	cp a,#TK_SEMIC 
      00132B 22 0A            [ 1]  352 	jrugt 10$ 
      00132D A0 05            [ 1]  353 	sub a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00132F 5F               [ 1]  354 	clrw x 
      001330 97               [ 1]  355 	ld xl,a
      001331 1C 13 79         [ 2]  356 	addw x,#single_char 
      001334 F6               [ 1]  357 	ld a,(x)
      001335 20 EB            [ 2]  358 	jra 8$ 
      001337                        359 10$: 
      001337 A1 11            [ 1]  360 	cp a,#TK_MINUS 
      001339 22 0A            [ 1]  361 	jrugt 11$
      00133B A0 10            [ 1]  362 	sub a,#TK_PLUS 
      00133D 5F               [ 1]  363 	clrw x 
      00133E 97               [ 1]  364 	ld xl,a 
      00133F 1C 13 7F         [ 2]  365 	addw x,#add_char 
      001342 F6               [ 1]  366 	ld a,(x)
      001343 20 DD            [ 2]  367 	jra 8$
      001345                        368 11$:
      001345 A1 22            [ 1]  369     cp a,#TK_MOD 
      001347 22 0A            [ 1]  370 	jrugt 12$
      001349 A0 20            [ 1]  371 	sub a,#TK_MULT
      00134B 5F               [ 1]  372 	clrw x 
      00134C 97               [ 1]  373 	ld xl,a 
      00134D 1C 13 81         [ 2]  374 	addw x,#mul_char
      001350 F6               [ 1]  375 	ld a,(x)
      001351 20 CF            [ 2]  376 	jra 8$
      001353                        377 12$:
      001353 A0 31            [ 1]  378 	sub a,#TK_GT  
      001355 48               [ 1]  379 	sll a 
      001356 5F               [ 1]  380 	clrw x 
      001357 97               [ 1]  381 	ld xl,a 
      001358 1C 13 84         [ 2]  382 	addw x,#relop_str 
      00135B FE               [ 2]  383 	ldw x,(x)
      00135C F6               [ 1]  384 	ld a,(x)
      00135D 5C               [ 1]  385 	incw x 
      00135E 90 F7            [ 1]  386 	ld (y),a
      001360 90 5C            [ 1]  387 	incw y 
      001362 F6               [ 1]  388 	ld a,(x)
      001363 26 BD            [ 1]  389 	jrne 8$
      001365 CC 12 43         [ 2]  390 	jp decomp_loop 
      001368                        391 20$: 
      001368 90 7F            [ 1]  392 	clr (y)
      00136A 1E 02            [ 2]  393 	ldw x,(STR,sp)
      00136C 7B 01            [ 1]  394 	ld a,(BASE_SAV,sp)
      00136E C7 00 0A         [ 1]  395 	ld base,a 
      001371 72 F2 02         [ 2]  396 	subw y,(STR,sp) 
      001374 90 9F            [ 1]  397 	ld a,yl 
      001376                        398 	_drop VSIZE 
      001376 5B 03            [ 2]    1     addw sp,#VSIZE 
      001378 81               [ 4]  399 	ret 
                                    400 
      001379 40 28 29 2C 3A 3B      401 single_char: .byte '@','(',')',',',':',';' 
      00137F 2B 2D                  402 add_char: .byte '+','-'
      001381 2A 2F 25               403 mul_char: .byte '*','/','%'
      001384 13 90 13 92 13 94 13   404 relop_str: .word gt,equal,ge,lt,ne,le 
             97 13 9C 13 99
      001390 3E 00                  405 gt: .asciz ">"
      001392 3D 00                  406 equal: .asciz "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001394 3E 3D 00               407 ge: .asciz ">="
      001397 3C 00                  408 lt: .asciz "<"
      001399 3C 3D 00               409 le: .asciz "<="
      00139C 3C 3E 00               410 ne:  .asciz "<>"
                                    411 
                                    412 ;----------------------------------
                                    413 ; search in kword_dict name
                                    414 ; from its execution address 
                                    415 ; input:
                                    416 ;   X       	routine_address  
                                    417 ; output:
                                    418 ;   X 			cstr*  | 0 
                                    419 ;--------------------------------
                           000001   420 	CODE_ADDR=1 
                           000003   421 	LINK=3 
                           000004   422 	VSIZE=4
      00139F                        423 cmd_name:
      00139F                        424 	_vars VSIZE 
      00139F 52 04            [ 2]    1     sub sp,#VSIZE 
      0013A1 72 5F 00 0D      [ 1]  425 	clr acc16 
      0013A5 1F 01            [ 2]  426 	ldw (CODE_ADDR,sp),x  
      0013A7 AE 36 BB         [ 2]  427 	ldw x,#kword_dict	
      0013AA 1F 03            [ 2]  428 1$:	ldw (LINK,sp),x
      0013AC E6 02            [ 1]  429 	ld a,(2,x)
      0013AE A4 0F            [ 1]  430 	and a,#15 
      0013B0 C7 00 0E         [ 1]  431 	ld acc8,a 
      0013B3 1C 00 03         [ 2]  432 	addw x,#3
      0013B6 72 BB 00 0D      [ 2]  433 	addw x,acc16
      0013BA FE               [ 2]  434 	ldw x,(x) ; code address   
      0013BB 13 01            [ 2]  435 	cpw x,(CODE_ADDR,sp)
      0013BD 27 0C            [ 1]  436 	jreq 2$
      0013BF 1E 03            [ 2]  437 	ldw x,(LINK,sp)
      0013C1 FE               [ 2]  438 	ldw x,(x) 
      0013C2 1D 00 02         [ 2]  439 	subw x,#2  
      0013C5 26 E3            [ 1]  440 	jrne 1$
      0013C7 4F               [ 1]  441 	clr a 
      0013C8 5F               [ 1]  442 	clrw x 
      0013C9 20 05            [ 2]  443 	jra 9$
      0013CB 1E 03            [ 2]  444 2$: ldw x,(LINK,sp)
      0013CD 1C 00 02         [ 2]  445 	addw x,#2 	
      0013D0                        446 9$:	_drop VSIZE
      0013D0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0013D2 81               [ 4]  447 	ret
                                    448 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
                                     64 ; keep the following 3 variables in this order 
      000000                         65 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         66 in::    .blkb 1 ; low byte of in.w 
      000002                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000003                         68 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000004                         69 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         70 data_ptr:  .blkw 1  ; point to DATA address
      000008                         71 data_ofs:  .blkb 1  ; index to next data item 
      000009                         72 data_len:  .blkb 1  ; length of data line 
      00000A                         73 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         74 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         75 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         76 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         77 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         78 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         79 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         80 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         81 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         82 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         83 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         84 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         85 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         86 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         87 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         88 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         89 flags:: .blkb 1 ; various boolean flags
      000023                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000025                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002F                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000031                         95 dvar_end:: .blkw 1 ; DIM variables end address 
      000033                         96 chain_level: .blkb 1 ; increment for each CHAIN command 
                                     97 ; 24 bits integer variables 
      000034                         98 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     99 
                                    100 	.area BTXT (ABS)
      00008C                        101 	.org 0x8C  
                                    102 ; keep 'free_ram' as last variable 
                                    103 ; basic code compiled here. 
      00008C                        104 rsign: .blkw 1 ; "TB" 
      00008E                        105 rsize: .blkw 1 ; code size 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      000090                        106 free_ram: ; from here RAM free for BASIC text 
                                    107 
                                    108 	.area CODE 
                                    109 
                                    110 
                                    111 ;-------------------------------------
                                    112 ; retrun string length
                                    113 ; input:
                                    114 ;   X         .asciz  pointer 
                                    115 ; output:
                                    116 ;   X         not affected 
                                    117 ;   A         length 
                                    118 ;-------------------------------------
      0013D3                        119 strlen::
      0013D3 89               [ 2]  120 	pushw x 
      0013D4 4F               [ 1]  121 	clr a
      0013D5 7D               [ 1]  122 1$:	tnz (x) 
      0013D6 27 04            [ 1]  123 	jreq 9$ 
      0013D8 4C               [ 1]  124 	inc a 
      0013D9 5C               [ 1]  125 	incw x 
      0013DA 20 F9            [ 2]  126 	jra 1$ 
      0013DC 85               [ 2]  127 9$:	popw x 
      0013DD 81               [ 4]  128 	ret 
                                    129 
                                    130 ;------------------------------------
                                    131 ; compare 2 strings
                                    132 ; input:
                                    133 ;   X 		char* first string 
                                    134 ;   Y       char* second string 
                                    135 ; output:
                                    136 ;   A 		0 not == |1 ==  
                                    137 ;-------------------------------------
      0013DE                        138 strcmp:
      0013DE F6               [ 1]  139 	ld a,(x)
      0013DF 27 0B            [ 1]  140 	jreq 5$ 
      0013E1 90 F1            [ 1]  141 	cp a,(y) 
      0013E3 26 05            [ 1]  142 	jrne 4$ 
      0013E5 5C               [ 1]  143 	incw x 
      0013E6 90 5C            [ 1]  144 	incw y 
      0013E8 20 F4            [ 2]  145 	jra strcmp 
      0013EA                        146 4$: ; not same  
      0013EA 4F               [ 1]  147 	clr a 
      0013EB 81               [ 4]  148 	ret 
      0013EC                        149 5$: ; same 
      0013EC A6 01            [ 1]  150 	ld a,#1 
      0013EE 81               [ 4]  151 	ret 
                                    152 
                                    153 
                                    154 ;---------------------------------------
                                    155 ;  copy src to dest 
                                    156 ; input:
                                    157 ;   X 		dest 
                                    158 ;   Y 		src 
                                    159 ; output: 
                                    160 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    161 ;----------------------------------
      0013EF                        162 strcpy::
      0013EF 88               [ 1]  163 	push a 
      0013F0 89               [ 2]  164 	pushw x 
      0013F1 90 F6            [ 1]  165 1$: ld a,(y)
      0013F3 27 06            [ 1]  166 	jreq 9$ 
      0013F5 F7               [ 1]  167 	ld (x),a 
      0013F6 5C               [ 1]  168 	incw x 
      0013F7 90 5C            [ 1]  169 	incw y 
      0013F9 20 F6            [ 2]  170 	jra 1$ 
      0013FB 7F               [ 1]  171 9$:	clr (x)
      0013FC 85               [ 2]  172 	popw x 
      0013FD 84               [ 1]  173 	pop a 
      0013FE 81               [ 4]  174 	ret 
                                    175 
                                    176 ;---------------------------------------
                                    177 ; move memory block 
                                    178 ; input:
                                    179 ;   X 		destination 
                                    180 ;   Y 	    source 
                                    181 ;   acc16	bytes count 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;--------------------------------------
                           000001   185 	INCR=1 ; incrament high byte 
                           000002   186 	LB=2 ; increment low byte 
                           000002   187 	VSIZE=2
      0013FF                        188 move::
      0013FF 88               [ 1]  189 	push a 
      001400                        190 	_vars VSIZE 
      001400 52 02            [ 2]    1     sub sp,#VSIZE 
      001402 0F 01            [ 1]  191 	clr (INCR,sp)
      001404 0F 02            [ 1]  192 	clr (LB,sp)
      001406 90 89            [ 2]  193 	pushw y 
      001408 13 01            [ 2]  194 	cpw x,(1,sp) ; compare DEST to SRC 
      00140A 90 85            [ 2]  195 	popw y 
      00140C 27 31            [ 1]  196 	jreq move_exit ; x==y 
      00140E 2B 0E            [ 1]  197 	jrmi move_down
      001410                        198 move_up: ; start from top address with incr=-1
      001410 72 BB 00 0D      [ 2]  199 	addw x,acc16
      001414 72 B9 00 0D      [ 2]  200 	addw y,acc16
      001418 03 01            [ 1]  201 	cpl (INCR,sp)
      00141A 03 02            [ 1]  202 	cpl (LB,sp)   ; increment = -1 
      00141C 20 05            [ 2]  203 	jra move_loop  
      00141E                        204 move_down: ; start from bottom address with incr=1 
      00141E 5A               [ 2]  205     decw x 
      00141F 90 5A            [ 2]  206 	decw y
      001421 0C 02            [ 1]  207 	inc (LB,sp) ; incr=1 
      001423                        208 move_loop:	
      001423 C6 00 0D         [ 1]  209     ld a, acc16 
      001426 CA 00 0E         [ 1]  210 	or a, acc8
      001429 27 14            [ 1]  211 	jreq move_exit 
      00142B 72 FB 01         [ 2]  212 	addw x,(INCR,sp)
      00142E 72 F9 01         [ 2]  213 	addw y,(INCR,sp) 
      001431 90 F6            [ 1]  214 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001433 F7               [ 1]  215 	ld (x),a 
      001434 89               [ 2]  216 	pushw x 
      001435 CE 00 0D         [ 2]  217 	ldw x,acc16 
      001438 5A               [ 2]  218 	decw x 
      001439 CF 00 0D         [ 2]  219 	ldw acc16,x 
      00143C 85               [ 2]  220 	popw x 
      00143D 20 E4            [ 2]  221 	jra move_loop
      00143F                        222 move_exit:
      00143F                        223 	_drop VSIZE
      00143F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001441 84               [ 1]  224 	pop a 
      001442 81               [ 4]  225 	ret 	
                                    226 
                                    227 ;------------------------------------
                                    228 ;  set all variables to zero 
                                    229 ; input:
                                    230 ;   none 
                                    231 ; output:
                                    232 ;	none
                                    233 ;------------------------------------
      001443                        234 clear_vars:
      001443 89               [ 2]  235 	pushw x 
      001444 88               [ 1]  236 	push a  
      001445 AE 00 34         [ 2]  237 	ldw x,#vars 
      001448 A6 4E            [ 1]  238 	ld a,#CELL_SIZE*26 
      00144A 7F               [ 1]  239 1$:	clr (x)
      00144B 5C               [ 1]  240 	incw x 
      00144C 4A               [ 1]  241 	dec a 
      00144D 26 FB            [ 1]  242 	jrne 1$
      00144F 84               [ 1]  243 	pop a 
      001450 85               [ 2]  244 	popw x 
      001451 81               [ 4]  245 	ret 
                                    246 
                                    247 
                                    248 ;-----------------------
                                    249 ;  display system 
                                    250 ;  information 
                                    251 ;-----------------------
                           000002   252 	MAJOR=2
                           000000   253 	MINOR=0 
      001452 0A 0A 54 69 6E 79 20   254 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    255 
      001498                        256 system_information:
      001498 AE 14 52         [ 2]  257 	ldw x,#software 
      00149B CD 09 A4         [ 4]  258 	call puts 
      00149E A6 02            [ 1]  259 	ld a,#MAJOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0014A0 C7 00 0E         [ 1]  260 	ld acc8,a 
      0014A3 5F               [ 1]  261 	clrw x 
      0014A4 CF 00 0C         [ 2]  262 	ldw acc24,x
      0014A7 35 0A 00 0A      [ 1]  263 	mov base, #10 
      0014AB CD 18 9D         [ 4]  264 	call prt_acc24 
      0014AE A6 2E            [ 1]  265 	ld a,#'.
      0014B0 CD 09 47         [ 4]  266 	call putc 
      0014B3 A6 00            [ 1]  267 	ld a,#MINOR 
      0014B5 C7 00 0E         [ 1]  268 	ld acc8,a 
      0014B8 5F               [ 1]  269 	clrw x 
      0014B9 CF 00 0C         [ 2]  270 	ldw acc24,x 
      0014BC CD 18 9D         [ 4]  271 	call prt_acc24
      0014BF A6 0D            [ 1]  272 	ld a,#CR 
      0014C1 CD 09 47         [ 4]  273 	call putc
                                    274 ;call test 
      0014C4 81               [ 4]  275 	ret
                                    276 
      0014C5                        277 warm_init:
      0014C5 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      0014C9 72 5F 00 22      [ 1]  279 	clr flags 
      0014CD 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      0014D1 35 0A 00 0A      [ 1]  281 	mov base,#10 
      0014D5 AE 00 00         [ 2]  282 	ldw x,#0 
      0014D8 CF 00 04         [ 2]  283 	ldw basicptr,x 
      0014DB CF 00 00         [ 2]  284 	ldw in.w,x 
      0014DE 72 5F 00 02      [ 1]  285 	clr count
      0014E2 81               [ 4]  286 	ret 
                                    287 
                                    288 ;---------------------------
                                    289 ; reset BASIC text variables 
                                    290 ; and clear variables 
                                    291 ;---------------------------
      0014E3                        292 clear_basic:
      0014E3 89               [ 2]  293 	pushw x 
      0014E4 72 5F 00 02      [ 1]  294 	clr count
      0014E8 72 5F 00 01      [ 1]  295 	clr in  
      0014EC AE 00 90         [ 2]  296 	ldw x,#free_ram 
      0014EF CF 00 1B         [ 2]  297 	ldw txtbgn,x 
      0014F2 CF 00 1D         [ 2]  298 	ldw txtend,x 
      0014F5 CF 00 2F         [ 2]  299 	ldw dvar_bgn,x 
      0014F8 CF 00 31         [ 2]  300 	ldw dvar_end,x 
      0014FB CD 14 43         [ 4]  301 	call clear_vars 
      0014FE 72 5F 00 33      [ 1]  302 	clr chain_level
      001502 85               [ 2]  303 	popw x
      001503 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001504                        309 err_msg:
      001504 00 00 15 2A 15 41 15   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             4F 15 68 15 77
      001510 15 8D 15 A3 15 BD 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             CE 15 DF
      00151A 15 EB 16 1E 16 2E 16   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



             42 16 55
      001524 16 62 16 6C 16 88      313 	.word err_overflow,err_read_only,err_not_program  
                                    314 
      00152A 52 65 6A 65 63 74 65   315 err_mem_full: .asciz "Rejected, memory full\n" 
             64 2C 20 6D 65 6D 6F
             72 79 20 66 75 6C 6C
             0A 00
      001541 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00154F 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001568 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001577 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00158D 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0015A3 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0015BD 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0015CE 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015DF 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015EB 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00161E 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00162E 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001642 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001655 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001662 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
      00166C 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      001688 6E 6F 20 70 72 6F 67   332 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    333 
                                    334 ;-------------------------------------
      0016A4 0A 72 75 6E 20 74 69   335 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      0016B6 0A 63 6F 6D 70 69 6C   336 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0016C7 6C 61 73 74 20 74 6F   337 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    338 
      0016D7                        339 syntax_error::
      0016D7 A6 02            [ 1]  340 	ld a,#ERR_SYNTAX 
                                    341 
      0016D9                        342 tb_error::
      0016D9 72 0A 00 22 4C   [ 2]  343 	btjt flags,#FCOMP,1$
      0016DE 88               [ 1]  344 	push a 
      0016DF AE 16 A4         [ 2]  345 	ldw x, #rt_msg 
      0016E2 CD 09 A4         [ 4]  346 	call puts 
      0016E5 84               [ 1]  347 	pop a 
      0016E6 AE 15 04         [ 2]  348 	ldw x, #err_msg 
      0016E9 72 5F 00 0D      [ 1]  349 	clr acc16 
      0016ED 48               [ 1]  350 	sll a
      0016EE 72 59 00 0D      [ 1]  351 	rlc acc16  
      0016F2 C7 00 0E         [ 1]  352 	ld acc8, a 
      0016F5 72 BB 00 0D      [ 2]  353 	addw x,acc16 
      0016F9 FE               [ 2]  354 	ldw x,(x)
      0016FA CD 09 A4         [ 4]  355 	call puts
      0016FD CE 00 04         [ 2]  356 	ldw x,basicptr 
                           000001   357 .if DEBUG 
      001700 C6 00 02         [ 1]  358 ld a,count 
      001703 90 5F            [ 1]  359 clrw y 
      001705 90 02            [ 1]  360 rlwa y  
      001707 CD 06 9B         [ 4]  361 call hex_dump
      00170A CE 00 04         [ 2]  362 ldw x,basicptr
                                    363 .endif 
      00170D C6 00 01         [ 1]  364 	ld a,in 
      001710 CD 20 29         [ 4]  365 	call prt_basic_line
      001713 AE 16 C7         [ 2]  366 	ldw x,#tk_id 
      001716 CD 09 A4         [ 4]  367 	call puts 
      001719 C6 00 03         [ 1]  368 	ld a,in.saved 
      00171C 5F               [ 1]  369 	clrw x 
      00171D 97               [ 1]  370 	ld xl,a 
      00171E 72 BB 00 04      [ 2]  371 	addw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      001722 F6               [ 1]  372 	ld a,(x)
      001723 5F               [ 1]  373 	clrw x 
      001724 97               [ 1]  374 	ld xl,a 
      001725 CD 18 86         [ 4]  375 	call prt_i16
      001728 20 35            [ 2]  376 	jra 6$
      00172A                        377 1$:	
      00172A 88               [ 1]  378 	push a 
      00172B AE 16 B6         [ 2]  379 	ldw x,#comp_msg
      00172E CD 09 A4         [ 4]  380 	call puts 
      001731 84               [ 1]  381 	pop a 
      001732 AE 15 04         [ 2]  382 	ldw x, #err_msg 
      001735 72 5F 00 0D      [ 1]  383 	clr acc16 
      001739 48               [ 1]  384 	sll a
      00173A 72 59 00 0D      [ 1]  385 	rlc acc16  
      00173E C7 00 0E         [ 1]  386 	ld acc8, a 
      001741 72 BB 00 0D      [ 2]  387 	addw x,acc16 
      001745 FE               [ 2]  388 	ldw x,(x)
      001746 CD 09 A4         [ 4]  389 	call puts
      001749 AE 16 68         [ 2]  390 	ldw x,#tib
      00174C CD 09 A4         [ 4]  391 	call puts 
      00174F A6 0D            [ 1]  392 	ld a,#CR 
      001751 CD 09 47         [ 4]  393 	call putc
      001754 CE 00 00         [ 2]  394 	ldw x,in.w
      001757 CD 0A 11         [ 4]  395 	call spaces
      00175A A6 5E            [ 1]  396 	ld a,#'^
      00175C CD 09 47         [ 4]  397 	call putc 
      00175F AE 17 FF         [ 2]  398 6$: ldw x,#STACK_EMPTY 
      001762 94               [ 1]  399     ldw sp,x
                                    400 
      001763                        401 warm_start:
      001763 CD 14 C5         [ 4]  402 	call warm_init
                                    403 ;----------------------------
                                    404 ;   BASIC interpreter
                                    405 ;----------------------------
      001766                        406 cmd_line: ; user interface 
      001766 A6 0D            [ 1]  407 	ld a,#CR 
      001768 CD 09 47         [ 4]  408 	call putc 
      00176B A6 3E            [ 1]  409 	ld a,#'> 
      00176D CD 09 47         [ 4]  410 	call putc
      001770 CD 0A A9         [ 4]  411 	call readln
      001773 72 5D 00 02      [ 1]  412 	tnz count 
      001777 27 ED            [ 1]  413 	jreq cmd_line
      001779 CD 10 F1         [ 4]  414 	call compile
                                    415 ;;;;;;;;;;;;;;;;;;;;;;	
                                    416 ;pushw y 
                                    417 ;ldw x,txtbgn  
                                    418 ;ldw y,txtend
                                    419 ;ldw acc16,x   
                                    420 ;subw y,acc16 
                                    421 ;call hex_dump
                                    422 ;popw y 
                                    423 ;;;;;;;;;;;;;;;;;;;;;;
                                    424 
                                    425 ; if text begin with a line number
                                    426 ; the compiler set count to zero    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    427 ; so code is not interpreted
      00177C 72 5D 00 02      [ 1]  428 	tnz count 
      001780 27 E4            [ 1]  429 	jreq cmd_line
                                    430 	
                                    431 ; if direct command 
                                    432 ; it's ready to interpret 
                                    433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    434 ;; This is the interpreter loop
                                    435 ;; for each BASIC code line. 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001782                        437 interpreter: 
      001782 C6 00 01         [ 1]  438 	ld a,in 
      001785 C1 00 02         [ 1]  439 	cp a,count 
      001788 2B 20            [ 1]  440 	jrmi interp_loop
      00178A                        441 next_line:
      00178A 72 01 00 22 D7   [ 2]  442 	btjf flags, #FRUN, cmd_line
      00178F CE 00 04         [ 2]  443 	ldw x,basicptr
      001792 72 BB 00 00      [ 2]  444 	addw x,in.w 
      001796 C3 00 1D         [ 2]  445 	cpw x,txtend 
      001799 2B 03            [ 1]  446 	jrmi 0$
      00179B CD 25 D8         [ 4]  447 	call cmd_end 
      00179E CF 00 04         [ 2]  448 0$:	ldw basicptr,x ; start of next line  
      0017A1 E6 02            [ 1]  449 	ld a,(2,x)
      0017A3 C7 00 02         [ 1]  450 	ld count,a 
      0017A6 35 03 00 01      [ 1]  451 	mov in,#3 ; skip first 3 bytes of line 
      0017AA                        452 interp_loop:
      0017AA CD 18 3E         [ 4]  453 	call next_token
      0017AD A1 00            [ 1]  454 	cp a,#TK_NONE 
      0017AF 27 D9            [ 1]  455 	jreq next_line 
      0017B1 A1 80            [ 1]  456 	cp a,#TK_CMD
      0017B3 26 0C            [ 1]  457 	jrne 1$
      0017B5                        458 	_get_code_addr
      0017B5 FE               [ 2]    1         ldw x,(x)
      0017B6 72 5C 00 01      [ 1]    2         inc in 
      0017BA 72 5C 00 01      [ 1]    3         inc in 
      0017BE FD               [ 4]  459 	call(x)
      0017BF 20 E9            [ 2]  460 	jra interp_loop 
      0017C1                        461 1$:	 
      0017C1 A1 85            [ 1]  462 	cp a,#TK_VAR
      0017C3 26 05            [ 1]  463 	jrne 2$
      0017C5 CD 1D 46         [ 4]  464 	call let_var  
      0017C8 20 E0            [ 2]  465 	jra interp_loop 
      0017CA                        466 2$:	
      0017CA A1 05            [ 1]  467 	cp a,#TK_ARRAY 
      0017CC 26 05            [ 1]  468 	jrne 3$
      0017CE CD 1D 41         [ 4]  469 	call let_array 
      0017D1 20 D7            [ 2]  470 	jra interp_loop
      0017D3                        471 3$:	
      0017D3 A1 03            [ 1]  472 	cp a,#TK_LABEL
      0017D5 26 05            [ 1]  473 	jrne 4$
      0017D7 CD 17 E3         [ 4]  474 	call let_dvar  
      0017DA 20 CE            [ 2]  475 	jra interp_loop 
      0017DC                        476 4$: 
      0017DC A1 09            [ 1]  477 	cp a,#TK_COLON 
      0017DE 27 CA            [ 1]  478 	jreq interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0017E0 CC 16 D7         [ 2]  479 5$:	jp syntax_error 
                                    480 
                                    481 
                                    482 ;----------------------
                                    483 ; when a label is met 
                                    484 ; at interp_loop
                                    485 ; it may be a variable 
                                    486 ; assignement to DIM 
                                    487 ; variable 
                                    488 ;----------------------
                           000001   489 	VAR_NAME=1 
                           000003   490 	REC_LEN=3
                           000004   491 	VSIZE=4 
      0017E3                        492 let_dvar:
      0017E3                        493 	_vars VSIZE 
      0017E3 52 04            [ 2]    1     sub sp,#VSIZE 
      0017E5 1F 01            [ 2]  494 	ldw (VAR_NAME,sp),x
      0017E7 0F 03            [ 1]  495 	clr (REC_LEN,sp) 
      0017E9 CD 18 57         [ 4]  496 	call skip_string 
      0017EC CE 00 04         [ 2]  497 	ldw x,basicptr 
      0017EF 72 BB 00 00      [ 2]  498 	addw x,in.w 
      0017F3 F6               [ 1]  499 	ld a,(x)
      0017F4 A1 32            [ 1]  500 	cp a,#TK_EQUAL 
      0017F6 26 43            [ 1]  501 	jrne 9$ 
                                    502 ; dvar assignment 
      0017F8 72 5C 00 01      [ 1]  503 	inc in  
      0017FC CD 1C 74         [ 4]  504 	call condition  
      0017FF A1 84            [ 1]  505 	cp a,#TK_INTGR 
      001801 27 03            [ 1]  506 	jreq 1$ 
      001803 CC 16 D7         [ 2]  507 0$:	jp syntax_error 
      001806                        508 1$: 
      001806 1E 01            [ 2]  509 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      001808 CD 13 D3         [ 4]  510 	call strlen 
      00180B AB 05            [ 1]  511 	add a,#REC_XTRA_BYTES
      00180D 6B 04            [ 1]  512 	ld (REC_LEN+1,sp),a 
      00180F CD 1D B0         [ 4]  513 	call search_name 
      001812 5D               [ 2]  514 	tnzw x 
      001813 27 EE            [ 1]  515 	jreq 0$ 
      001815 F6               [ 1]  516 	ld a,(x)
      001816 2A 05            [ 1]  517 	jrpl 2$
      001818 A6 11            [ 1]  518 	ld a,#ERR_RD_ONLY 
      00181A CC 16 D9         [ 2]  519 	jp tb_error 
      00181D                        520 2$:
      00181D 72 FB 03         [ 2]  521 	addw x,(REC_LEN,sp)
      001820 1D 00 03         [ 2]  522 	subw x,#CELL_SIZE 
      001823 CF 00 19         [ 2]  523 	ldw ptr16,x
      001826                        524 	_xpop 
      001826 90 F6            [ 1]    1     ld a,(y)
      001828 93               [ 1]    2     ldw x,y 
      001829 EE 01            [ 2]    3     ldw x,(1,x)
      00182B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00182F 72 C7 00 19      [ 4]  525 	ld [ptr16],a 
      001833 72 5C 00 1A      [ 1]  526 	inc ptr8 
      001837 72 CF 00 19      [ 5]  527 	ldw [ptr16],x 
      00183B                        528 9$: _drop VSIZE 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00183B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00183D 81               [ 4]  529 	ret 
                                    530 
                                    531 
                                    532 ;--------------------------
                                    533 ; extract next token from
                                    534 ; token list 
                                    535 ; basicptr -> base address 
                                    536 ; in  -> offset in list array 
                                    537 ; output:
                                    538 ;   A 		token attribute
                                    539 ;   X 		*token_value 
                                    540 ;----------------------------------------
      00183E                        541 next_token::
                                    542 ;	clrw x 
      00183E C6 00 01         [ 1]  543 	ld a,in 
      001841 C7 00 03         [ 1]  544 	ld in.saved,a ; in case "_unget_token" needed 
                                    545 ; don't replace sub by "cp a,count" 
                                    546 ; if end of line must return with A=0   	
      001844 C0 00 02         [ 1]  547 	sub a,count 
      001847 27 0D            [ 1]  548 	jreq 9$ ; end of line 
      001849                        549 0$: 
      001849 CE 00 04         [ 2]  550 	ldw x,basicptr 
      00184C 72 BB 00 00      [ 2]  551 	addw x,in.w 
      001850 F6               [ 1]  552 	ld a,(x)
      001851 5C               [ 1]  553 	incw x
      001852 72 5C 00 01      [ 1]  554 	inc in   
      001856 81               [ 4]  555 9$: ret 
                                    556 
                                    557 ;-------------------------
                                    558 ;  skip .asciz in BASIC line 
                                    559 ;  name 
                                    560 ;  input:
                                    561 ;     x		* string 
                                    562 ;  output:
                                    563 ;     none 
                                    564 ;-------------------------
      001857                        565 skip_string:
      001857 F6               [ 1]  566 	ld a,(x)
      001858 27 03            [ 1]  567 	jreq 1$
      00185A 5C               [ 1]  568 	incw x 
      00185B 20 FA            [ 2]  569 	jra skip_string 
      00185D 5C               [ 1]  570 1$: incw x 	
      00185E 72 B0 00 04      [ 2]  571 	subw x,basicptr 
      001862 CF 00 00         [ 2]  572 	ldw in.w,x 
      001865 81               [ 4]  573 	ret 
                                    574 
                                    575 ;---------------------
                                    576 ; extract 16 bits  
                                    577 ; address from BASIC
                                    578 ; code 
                                    579 ; input:
                                    580 ;    X    *address
                                    581 ; output:
                                    582 ;    X    address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    583 ;-------------------- 
      001866                        584 get_addr:
      001866 FE               [ 2]  585 	ldw x,(x)
      001867 72 5C 00 01      [ 1]  586 	inc in 
      00186B 72 5C 00 01      [ 1]  587 	inc in 
      00186F 81               [ 4]  588 	ret 
                                    589 
                                    590 ;--------------------
                                    591 ; extract int24_t  
                                    592 ; value from BASIC 
                                    593 ; code 
                                    594 ; input:
                                    595 ;    X   *integer 
                                    596 ; output:
                                    597 ;    A:X   int24  
                                    598 ;--------------------
      001870                        599 get_int24:
      001870 F6               [ 1]  600 	ld a,(x)
      001871 EE 01            [ 2]  601 	ldw x,(1,x)
                                    602 ; skip 3 bytes 
      001873 72 5C 00 01      [ 1]  603 	inc in 
      001877 72 5C 00 01      [ 1]  604 	inc in 
      00187B 72 5C 00 01      [ 1]  605 	inc in 
      00187F 81               [ 4]  606 	ret 
                                    607 
                                    608 ;-------------------------
                                    609 ; get character from 
                                    610 ; BASIC code 
                                    611 ; input:
                                    612 ;    X   *char 
                                    613 ; output:
                                    614 ;    A    char 
                                    615 ;-------------------------
      001880                        616 get_char:
      001880 F6               [ 1]  617 	ld a,(x)
      001881 72 5C 00 01      [ 1]  618 	inc in  
      001885 81               [ 4]  619     ret 
                                    620 
                                    621 ;-----------------------------------
                                    622 ; print a 16 bit integer 
                                    623 ; using variable 'base' as conversion
                                    624 ; format.
                                    625 ; input:
                                    626 ;    X       integer to print 
                                    627 ;   'base'    conversion base 
                                    628 ; output:
                                    629 ;   terminal  
                                    630 ;-----------------------------------
      001886                        631 prt_i16:
      001886 72 5F 00 0C      [ 1]  632 	clr acc24 
      00188A CF 00 0D         [ 2]  633 	ldw acc16,x 
      00188D A6 10            [ 1]  634 	ld a,#16
      00188F C1 00 0A         [ 1]  635 	cp a,base
      001892 27 09            [ 1]  636 	jreq prt_acc24  
      001894 72 0F 00 0D 04   [ 2]  637 	btjf acc16,#7,prt_acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      001899 72 53 00 0C      [ 1]  638 	cpl acc24 ; sign extend 
                                    639 	
                                    640 ;------------------------------------
                                    641 ; print integer in acc24 
                                    642 ; input:
                                    643 ;	acc24 		integer to print 
                                    644 ;	'base' 		numerical base for conversion 
                                    645 ;    A 			signed||unsigned conversion
                                    646 ;  output:
                                    647 ;    A          string length
                                    648 ;------------------------------------
      00189D                        649 prt_acc24:
      00189D A6 FF            [ 1]  650 	ld a,#255  ; signed conversion  
      00189F CD 18 BB         [ 4]  651     call itoa  ; conversion entier en  .asciz
      0018A2 88               [ 1]  652 	push a 
      0018A3 CD 09 A4         [ 4]  653 	call puts
      0018A6 84               [ 1]  654 	pop a 
      0018A7 81               [ 4]  655     ret	
                                    656 
                                    657 ;---------------------------------------
                                    658 ;  print value at xstack top 
                                    659 ;---------------------------------------
      0018A8                        660 print_top: 
      0018A8                        661 	_xpop 
      0018A8 90 F6            [ 1]    1     ld a,(y)
      0018AA 93               [ 1]    2     ldw x,y 
      0018AB EE 01            [ 2]    3     ldw x,(1,x)
      0018AD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0018B1 C7 00 0C         [ 1]  662 	ld acc24,a 
      0018B4 CF 00 0D         [ 2]  663 	ldw acc16,x 
      0018B7 CD 18 9D         [ 4]  664 	call prt_acc24 
      0018BA 81               [ 4]  665 	ret 
                                    666 
                                    667 ;------------------------------------
                                    668 ; convert integer in acc24 to string
                                    669 ; input:
                                    670 ;   'base'	conversion base 
                                    671 ;	acc24	integer to convert
                                    672 ;   A       0=unsigned, else signed 
                                    673 ; output:
                                    674 ;   X  		pointer to first char of string
                                    675 ;   A       string length
                                    676 ;------------------------------------
                           000001   677 	SIGN=1  ; integer sign 
                           000002   678 	LEN=2 
                           000003   679 	PSTR=3
                           000004   680 	VSIZE=4 ;locals size
      0018BB                        681 itoa::
      0018BB                        682 	_vars VSIZE
      0018BB 52 04            [ 2]    1     sub sp,#VSIZE 
      0018BD 0F 02            [ 1]  683 	clr (LEN,sp) ; string length  
      0018BF 0F 01            [ 1]  684 	clr (SIGN,sp)    ; sign
      0018C1 4D               [ 1]  685 	tnz A
      0018C2 27 11            [ 1]  686 	jreq 1$ ; unsigned conversion  
      0018C4 C6 00 0A         [ 1]  687 	ld a,base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0018C7 A1 0A            [ 1]  688 	cp a,#10
      0018C9 26 0A            [ 1]  689 	jrne 1$
                                    690 	; base 10 string display with negative sign if bit 23==1
      0018CB 72 0F 00 0C 05   [ 2]  691 	btjf acc24,#7,1$
      0018D0 03 01            [ 1]  692 	cpl (SIGN,sp)
      0018D2 CD 02 1D         [ 4]  693 	call neg_acc24
      0018D5                        694 1$:
                                    695 ; initialize string pointer 
      0018D5 AE 16 68         [ 2]  696 	ldw x,#tib 
      0018D8 1C 00 50         [ 2]  697 	addw x,#TIB_SIZE
      0018DB 5A               [ 2]  698 	decw x 
      0018DC 7F               [ 1]  699 	clr (x)
      0018DD                        700 itoa_loop:
      0018DD C6 00 0A         [ 1]  701     ld a,base
      0018E0 CD 02 E9         [ 4]  702     call divu24_8 ; acc24/A 
      0018E3 AB 30            [ 1]  703     add a,#'0  ; remainder of division
      0018E5 A1 3A            [ 1]  704     cp a,#'9+1
      0018E7 2B 02            [ 1]  705     jrmi 2$
      0018E9 AB 07            [ 1]  706     add a,#7 
      0018EB                        707 2$:	
      0018EB 5A               [ 2]  708 	decw x
      0018EC F7               [ 1]  709     ld (x),a
      0018ED 0C 02            [ 1]  710 	inc (LEN,sp)
                                    711 	; if acc24==0 conversion done
      0018EF C6 00 0C         [ 1]  712 	ld a,acc24
      0018F2 CA 00 0D         [ 1]  713 	or a,acc16
      0018F5 CA 00 0E         [ 1]  714 	or a,acc8
      0018F8 26 E3            [ 1]  715     jrne itoa_loop
                                    716 	;conversion done, next add '$' or '-' as required
      0018FA C6 00 0A         [ 1]  717 	ld a,base 
      0018FD A1 10            [ 1]  718 	cp a,#16
      0018FF 27 08            [ 1]  719 	jreq 8$
      001901 7B 01            [ 1]  720 	ld a,(SIGN,sp)
      001903 27 0A            [ 1]  721     jreq 10$
      001905 A6 2D            [ 1]  722     ld a,#'-
      001907 20 02            [ 2]  723 	jra 9$ 
      001909                        724 8$:	
      001909 A6 24            [ 1]  725 	ld a,#'$ 
      00190B 5A               [ 2]  726 9$: decw x
      00190C F7               [ 1]  727     ld (x),a
      00190D 0C 02            [ 1]  728 	inc (LEN,sp)
      00190F                        729 10$:
                                    730 ; add a space
      00190F 5A               [ 2]  731 	decw x 
      001910 A6 20            [ 1]  732 	ld a,#SPACE 
      001912 F7               [ 1]  733 	ld (x),a
      001913 7B 02            [ 1]  734 	ld a,(LEN,sp)
      001915 4C               [ 1]  735 	inc a 
      001916                        736 	_drop VSIZE
      001916 5B 04            [ 2]    1     addw sp,#VSIZE 
      001918 81               [ 4]  737 	ret
                                    738 
                                    739 ;------------------------------------
                                    740 ; convert alpha to uppercase
                                    741 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    742 ;    a  character to convert
                                    743 ; output:
                                    744 ;    a  uppercase character
                                    745 ;------------------------------------
      001919                        746 to_upper::
      001919 A1 61            [ 1]  747 	cp a,#'a
      00191B 2A 01            [ 1]  748 	jrpl 1$
      00191D 81               [ 4]  749 0$:	ret
      00191E A1 7A            [ 1]  750 1$: cp a,#'z	
      001920 22 FB            [ 1]  751 	jrugt 0$
      001922 A0 20            [ 1]  752 	sub a,#32
      001924 81               [ 4]  753 	ret
                                    754 	
                                    755 ;------------------------------------
                                    756 ; convert pad content in integer
                                    757 ; input:
                                    758 ;    x		* .asciz to convert
                                    759 ; output:
                                    760 ;    A:X        int24_t 
                                    761 ;    acc24      int24_t
                                    762 ;------------------------------------
                                    763 	; local variables
                           000001   764 	SIGN=1 ; 1 byte, 
                           000002   765 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   766 	TEMP=3 ; 1 byte, temporary storage
                           000004   767 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   768 	VSIZE=5 ; 5 bytes reserved for local storage
      001925                        769 atoi24::
      001925                        770 	_vars VSIZE
      001925 52 05            [ 2]    1     sub sp,#VSIZE 
      001927 1F 04            [ 2]  771 	ldw (XTEMP,sp),x 
                                    772 ; conversion made on xstack 
      001929 4F               [ 1]  773 	clr a 
      00192A 5F               [ 1]  774 	clrw x 
      00192B                        775 	_xpush 
      00192B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00192F 90 F7            [ 1]    2     ld (y),a 
      001931 90 EF 01         [ 2]    3     ldw (1,y),x 
      001934 0F 01            [ 1]  776 	clr (SIGN,sp)
      001936 A6 0A            [ 1]  777 	ld a,#10
      001938 6B 02            [ 1]  778 	ld (BASE,sp),a ; default base decimal
      00193A 1E 04            [ 2]  779 	ldw x,(XTEMP,sp)
      00193C F6               [ 1]  780 	ld a,(x)
      00193D 27 4E            [ 1]  781 	jreq 9$  ; completed if 0
      00193F A1 2D            [ 1]  782 	cp a,#'-
      001941 26 04            [ 1]  783 	jrne 1$
      001943 03 01            [ 1]  784 	cpl (SIGN,sp)
      001945 20 08            [ 2]  785 	jra 2$
      001947 A1 24            [ 1]  786 1$: cp a,#'$
      001949 26 08            [ 1]  787 	jrne 3$
      00194B A6 10            [ 1]  788 	ld a,#16
      00194D 6B 02            [ 1]  789 	ld (BASE,sp),a
      00194F 5C               [ 1]  790 2$:	incw x
      001950 1F 04            [ 2]  791 	ldw (XTEMP,sp),x 
      001952 F6               [ 1]  792 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001953                        793 3$:	; char to digit 
      001953 A1 61            [ 1]  794 	cp a,#'a
      001955 2B 02            [ 1]  795 	jrmi 4$
      001957 A0 20            [ 1]  796 	sub a,#32
      001959 A1 30            [ 1]  797 4$:	cp a,#'0
      00195B 2B 30            [ 1]  798 	jrmi 9$
      00195D A0 30            [ 1]  799 	sub a,#'0
      00195F A1 0A            [ 1]  800 	cp a,#10
      001961 2B 06            [ 1]  801 	jrmi 5$
      001963 A0 07            [ 1]  802 	sub a,#7
      001965 11 02            [ 1]  803 	cp a,(BASE,sp)
      001967 2A 24            [ 1]  804 	jrpl 9$
      001969 6B 03            [ 1]  805 5$:	ld (TEMP,sp),a
      00196B 7B 02            [ 1]  806 	ld a,(BASE,sp)
      00196D CD 02 3A         [ 4]  807 	call mulu24_8
      001970                        808 	_xpush 
      001970 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001974 90 F7            [ 1]    2     ld (y),a 
      001976 90 EF 01         [ 2]    3     ldw (1,y),x 
      001979 5F               [ 1]  809 	clrw x 
      00197A 7B 03            [ 1]  810 	ld a,(TEMP,sp)
      00197C 02               [ 1]  811 	rlwa x 
      00197D                        812 	_xpush 
      00197D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001981 90 F7            [ 1]    2     ld (y),a 
      001983 90 EF 01         [ 2]    3     ldw (1,y),x 
      001986 CD 01 7E         [ 4]  813 	call add24 
      001989 1E 04            [ 2]  814 	ldw x,(XTEMP,sp)
      00198B 20 C2            [ 2]  815 	jra 2$
      00198D 0D 01            [ 1]  816 9$:	tnz (SIGN,sp)
      00198F 27 03            [ 1]  817     jreq atoi_exit
      001991 CD 02 03         [ 4]  818     call neg24
      001994                        819 atoi_exit:
      001994                        820 	_xpop 
      001994 90 F6            [ 1]    1     ld a,(y)
      001996 93               [ 1]    2     ldw x,y 
      001997 EE 01            [ 2]    3     ldw x,(1,x)
      001999 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00199D C7 00 0C         [ 1]  821 	ld acc24,a 
      0019A0 CF 00 0D         [ 2]  822 	ldw acc16,x  
      0019A3                        823 	_drop VSIZE
      0019A3 5B 05            [ 2]    1     addw sp,#VSIZE 
      0019A5 81               [ 4]  824 	ret
                                    825 
                                    826 
                                    827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    828 ;;   TINY BASIC  operators,
                                    829 ;;   commands and functions 
                                    830 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    831 
                                    832 ;---------------------------------
                                    833 ; dictionary search 
                                    834 ; input:
                                    835 ;	X 		dictionary entry point, name field  
                                    836 ;   y		.asciz name to search 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    837 ; output:
                                    838 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    839 ;  X		routine address|TK_OP 
                                    840 ;---------------------------------
                           000001   841 	NLEN=1 ; cmd length 
                           000002   842 	XSAVE=2
                           000004   843 	YSAVE=4
                           000005   844 	VSIZE=5 
      0019A6                        845 search_dict::
      0019A6                        846 	_vars VSIZE 
      0019A6 52 05            [ 2]    1     sub sp,#VSIZE 
      0019A8 17 04            [ 2]  847 	ldw (YSAVE,sp),y 
      0019AA                        848 search_next:
      0019AA 1F 02            [ 2]  849 	ldw (XSAVE,sp),x 
                                    850 ; get name length in dictionary	
      0019AC F6               [ 1]  851 	ld a,(x)
      0019AD A4 0F            [ 1]  852 	and a,#0xf 
      0019AF 6B 01            [ 1]  853 	ld (NLEN,sp),a  
      0019B1 16 04            [ 2]  854 	ldw y,(YSAVE,sp) ; name pointer 
      0019B3 5C               [ 1]  855 	incw x 
      0019B4                        856 cp_loop:
      0019B4 90 F6            [ 1]  857 	ld a,(y)
      0019B6 27 1B            [ 1]  858 	jreq str_match 
      0019B8 0D 01            [ 1]  859 	tnz (NLEN,sp)
      0019BA 27 0A            [ 1]  860 	jreq no_match  
      0019BC F1               [ 1]  861 	cp a,(x)
      0019BD 26 07            [ 1]  862 	jrne no_match 
      0019BF 90 5C            [ 1]  863 	incw y 
      0019C1 5C               [ 1]  864 	incw x
      0019C2 0A 01            [ 1]  865 	dec (NLEN,sp)
      0019C4 20 EE            [ 2]  866 	jra cp_loop 
      0019C6                        867 no_match:
      0019C6 1E 02            [ 2]  868 	ldw x,(XSAVE,sp) 
      0019C8 1D 00 02         [ 2]  869 	subw x,#2 ; move X to link field
      0019CB 4B 00            [ 1]  870 	push #TK_NONE 
      0019CD FE               [ 2]  871 	ldw x,(x) ; next word link 
      0019CE 84               [ 1]  872 	pop a ; TK_NONE 
      0019CF 27 1D            [ 1]  873 	jreq search_exit  ; not found  
                                    874 ;try next 
      0019D1 20 D7            [ 2]  875 	jra search_next
      0019D3                        876 str_match:
      0019D3 1E 02            [ 2]  877 	ldw x,(XSAVE,sp)
      0019D5 F6               [ 1]  878 	ld a,(X)
      0019D6 6B 01            [ 1]  879 	ld (NLEN,sp),a ; needed to test keyword type  
      0019D8 A4 0F            [ 1]  880 	and a,#NLEN_MASK 
                                    881 ; move x to procedure address field 	
      0019DA 4C               [ 1]  882 	inc a 
      0019DB C7 00 0E         [ 1]  883 	ld acc8,a 
      0019DE 72 5F 00 0D      [ 1]  884 	clr acc16 
      0019E2 72 BB 00 0D      [ 2]  885 	addw x,acc16 
      0019E6 FE               [ 2]  886 	ldw x,(x) ; routine address  
                                    887 ;determine keyword type bits 7:4 
      0019E7 7B 01            [ 1]  888 	ld a,(NLEN,sp)
      0019E9 A4 F0            [ 1]  889 	and a,#KW_TYPE_MASK 
      0019EB 4E               [ 1]  890 	swap a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0019EC AB 80            [ 1]  891 	add a,#128
      0019EE                        892 search_exit: 
      0019EE                        893 	_drop VSIZE 
      0019EE 5B 05            [ 2]    1     addw sp,#VSIZE 
      0019F0 81               [ 4]  894 	ret 
                                    895 
                                    896 ;--------------------------------
                                    897 ;  called by command that should 
                                    898 ;  be invoked only from command 
                                    899 ;  line.
                                    900 ;  Display an error if 
                                    901 ;  invoked from program.
                                    902 ;---------------------------------
      0019F1                        903 cmd_line_only:
      0019F1 72 01 00 22 05   [ 2]  904 	btjf flags,#FRUN,0$
      0019F6 A6 07            [ 1]  905 	ld a,#ERR_CMD_ONLY
      0019F8 CC 16 D9         [ 2]  906 	jp tb_error 
      0019FB 81               [ 4]  907 0$: ret 
                                    908 
                                    909 ;--------------------------------
                                    910 ; called by command/function that 
                                    911 ; should be invoked only at run time
                                    912 ; Display an error if invoked from 
                                    913 ; command line. 
                                    914 ;---------------------------------
      0019FC                        915 runtime_only:
      0019FC 72 00 00 22 05   [ 2]  916 	btjt flags,#FRUN,0$ 
      001A01 A6 06            [ 1]  917 	ld a,#ERR_RUN_ONLY
      001A03 CC 16 D9         [ 2]  918 	jp tb_error 
      001A06 81               [ 4]  919 0$:	ret 
                                    920 
                                    921 ;---------------------
                                    922 ; check if next token
                                    923 ;  is of expected type 
                                    924 ; input:
                                    925 ;   A 		 expected token attribute
                                    926 ;  ouput:
                                    927 ;   none     if fail call syntax_error 
                                    928 ;--------------------
      001A07                        929 expect:
      001A07 88               [ 1]  930 	push a 
      001A08 CD 18 3E         [ 4]  931 	call next_token 
      001A0B 11 01            [ 1]  932 	cp a,(1,sp)
      001A0D 27 03            [ 1]  933 	jreq 1$
      001A0F CC 16 D7         [ 2]  934 	jp syntax_error
      001A12 84               [ 1]  935 1$: pop a 
      001A13 81               [ 4]  936 	ret 
                                    937 
                                    938 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    939 ; parse arguments list 
                                    940 ; between ()
                                    941 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A14                        942 func_args:
      001A14 A6 06            [ 1]  943 	ld a,#TK_LPAREN 
      001A16 CD 1A 07         [ 4]  944 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    945 ; expected to continue in arg_list 
                                    946 ; caller must check for TK_RPAREN 
                                    947 
                                    948 ;-------------------------------
                                    949 ; parse embedded BASIC routines 
                                    950 ; arguments list.
                                    951 ; arg_list::=  expr[','expr]*
                                    952 ; all arguments are of int24_t type
                                    953 ; and pushed on stack 
                                    954 ; input:
                                    955 ;   none
                                    956 ; output:
                                    957 ;   xstack{n}   arguments pushed on xstack
                                    958 ;   A 	number of arguments pushed on xstack  
                                    959 ;--------------------------------
      001A19                        960 arg_list:
      001A19 4B 00            [ 1]  961 	push #0
      001A1B CD 1C 74         [ 4]  962 1$:	call condition 
      001A1E 4D               [ 1]  963 	tnz a 
      001A1F 27 12            [ 1]  964 	jreq 7$  
      001A21 0C 01            [ 1]  965 	inc (1,sp)
      001A23 CD 18 3E         [ 4]  966 	call next_token 
      001A26 A1 08            [ 1]  967 	cp a,#TK_COMMA 
      001A28 27 F1            [ 1]  968 	jreq 1$ 
      001A2A A1 07            [ 1]  969 	cp a,#TK_RPAREN
      001A2C 27 05            [ 1]  970 	jreq 7$
      001A2E                        971 	_unget_token 
      001A2E 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001A33 84               [ 1]  972 7$:	pop a  
      001A34 81               [ 4]  973 	ret 
                                    974 
                                    975 ;--------------------------------
                                    976 ;   BASIC commnands 
                                    977 ;--------------------------------
                                    978 
                                    979 ;--------------------------------
                                    980 ;  arithmetic and relational 
                                    981 ;  routines
                                    982 ;  operators precedence
                                    983 ;  highest to lowest
                                    984 ;  operators on same row have 
                                    985 ;  same precedence and are executed
                                    986 ;  from left to right.
                                    987 ;	'*','/','%'
                                    988 ;   '-','+'
                                    989 ;   '=','>','<','>=','<=','<>','><'
                                    990 ;   '<>' and '><' are equivalent for not equal.
                                    991 ;--------------------------------
                                    992 
                                    993 ;---------------------
                                    994 ; return array element
                                    995 ; address from @(expr)
                                    996 ; input:
                                    997 ;   A 		TK_ARRAY
                                    998 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    999 ;	X 		element address 
                                   1000 ;----------------------
      001A35                       1001 get_array_element:
      001A35 CD 1A 14         [ 4] 1002 	call func_args 
      001A38 A1 01            [ 1] 1003 	cp a,#1
      001A3A 27 03            [ 1] 1004 	jreq 1$
      001A3C CC 16 D7         [ 2] 1005 	jp syntax_error
      001A3F                       1006 1$: _xpop 
      001A3F 90 F6            [ 1]    1     ld a,(y)
      001A41 93               [ 1]    2     ldw x,y 
      001A42 EE 01            [ 2]    3     ldw x,(1,x)
      001A44 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   1007     ; ignore A, index < 65536 in any case 
                                   1008 	; check for bounds 
      001A48 C3 00 20         [ 2] 1009 	cpw x,array_size 
      001A4B 23 05            [ 2] 1010 	jrule 3$
                                   1011 ; bounds {1..array_size}	
      001A4D A6 0A            [ 1] 1012 2$: ld a,#ERR_BAD_VALUE 
      001A4F CC 16 D9         [ 2] 1013 	jp tb_error 
      001A52 5D               [ 2] 1014 3$: tnzw  x
      001A53 27 F8            [ 1] 1015 	jreq 2$ 
      001A55 A6 03            [ 1] 1016 	ld a,#CELL_SIZE  
      001A57 42               [ 4] 1017 	mul x,a 
      001A58 CF 00 0D         [ 2] 1018 	ldw acc16,x   
      001A5B AE 16 68         [ 2] 1019 	ldw x,#tib ; array is below tib 
      001A5E 72 B0 00 0D      [ 2] 1020 	subw x,acc16 
      001A62 81               [ 4] 1021 	ret 
                                   1022 
                                   1023 
                                   1024 ;***********************************
                                   1025 ;   expression parse,execute 
                                   1026 ;***********************************
                                   1027 ;-----------------------------------
                                   1028 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1029 ;			 integer | function |
                                   1030 ;			 '('relation')' 
                                   1031 ; output:
                                   1032 ;   A       token attribute 
                                   1033 ;   xstack  value  
                                   1034 ; ---------------------------------
                           000001  1035 	NEG=1
                           000001  1036 	VSIZE=1
      001A63                       1037 factor:
      001A63                       1038 	_vars VSIZE 
      001A63 52 01            [ 2]    1     sub sp,#VSIZE 
      001A65 0F 01            [ 1] 1039 	clr (NEG,sp)
      001A67 CD 18 3E         [ 4] 1040 	call next_token
      001A6A 4D               [ 1] 1041 	tnz a 
      001A6B 26 03            [ 1] 1042 	jrne 1$ 
      001A6D CC 1B 15         [ 2] 1043 	jp 22$ 
      001A70 A1 10            [ 1] 1044 1$:	cp a,#TK_PLUS 
      001A72 27 06            [ 1] 1045 	jreq 2$
      001A74 A1 11            [ 1] 1046 	cp a,#TK_MINUS 
      001A76 26 05            [ 1] 1047 	jrne 4$ 
      001A78 03 01            [ 1] 1048 	cpl (NEG,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      001A7A                       1049 2$:	
      001A7A CD 18 3E         [ 4] 1050 	call next_token
      001A7D                       1051 4$:
      001A7D 4D               [ 1] 1052 	tnz a 
      001A7E 26 03            [ 1] 1053 	jrne 41$ 
      001A80 CC 16 D7         [ 2] 1054 	jp syntax_error  
      001A83                       1055 41$:	
      001A83 A1 81            [ 1] 1056 	cp a,#TK_IFUNC 
      001A85 26 0C            [ 1] 1057 	jrne 5$ 
      001A87                       1058 	_get_code_addr 
      001A87 FE               [ 2]    1         ldw x,(x)
      001A88 72 5C 00 01      [ 1]    2         inc in 
      001A8C 72 5C 00 01      [ 1]    3         inc in 
      001A90 FD               [ 4] 1059 	call (x); result in A:X  
      001A91 20 70            [ 2] 1060 	jra 18$ 
      001A93                       1061 5$:
      001A93 A1 84            [ 1] 1062 	cp a,#TK_INTGR
      001A95 26 05            [ 1] 1063 	jrne 6$
      001A97 CD 18 70         [ 4] 1064 	call get_int24 ; A:X
      001A9A 20 67            [ 2] 1065 	jra 18$
      001A9C                       1066 6$:
      001A9C A1 05            [ 1] 1067 	cp a,#TK_ARRAY
      001A9E 26 05            [ 1] 1068 	jrne 7$
      001AA0 CD 1A 35         [ 4] 1069 	call get_array_element
      001AA3 20 07            [ 2] 1070     jra 71$
      001AA5                       1071 7$:
      001AA5 A1 85            [ 1] 1072 	cp a,#TK_VAR 
      001AA7 26 08            [ 1] 1073 	jrne 8$
      001AA9 CD 18 66         [ 4] 1074 	call get_addr 
      001AAC                       1075 71$: ; put value in A:X
      001AAC F6               [ 1] 1076 	ld a,(x)
      001AAD EE 01            [ 2] 1077 	ldw x,(1,x)
      001AAF 20 52            [ 2] 1078 	jra 18$
      001AB1                       1079 8$:
      001AB1 A1 03            [ 1] 1080 	cp a,#TK_LABEL 
      001AB3 26 1D            [ 1] 1081 	jrne 9$
      001AB5 90 89            [ 2] 1082 	pushw y  
      001AB7 89               [ 2] 1083 	pushw x 
      001AB8 CD 18 57         [ 4] 1084 	call skip_string
      001ABB 85               [ 2] 1085 	popw x  
      001ABC CD 13 D3         [ 4] 1086 	call strlen 
      001ABF AB 05            [ 1] 1087 	add a,#REC_XTRA_BYTES
      001AC1 CD 1D B0         [ 4] 1088 	call search_name
      001AC4 5D               [ 2] 1089 	tnzw x 
      001AC5 26 04            [ 1] 1090 	jrne 82$ 
      001AC7 90 85            [ 2] 1091 	popw y 
      001AC9 20 30            [ 2] 1092 	jra 16$
      001ACB                       1093 82$:
      001ACB 90 85            [ 2] 1094 	popw y   
      001ACD CD 1D 76         [ 4] 1095 	call get_value ; in A:X 
      001AD0 20 31            [ 2] 1096 	jra 18$
      001AD2                       1097 9$: 
      001AD2 A1 82            [ 1] 1098 	cp a,#TK_CFUNC 
      001AD4 26 0E            [ 1] 1099 	jrne 12$
      001AD6                       1100 	_get_code_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001AD6 FE               [ 2]    1         ldw x,(x)
      001AD7 72 5C 00 01      [ 1]    2         inc in 
      001ADB 72 5C 00 01      [ 1]    3         inc in 
      001ADF FD               [ 4] 1101 	call(x)
      001AE0 5F               [ 1] 1102 	clrw x 
      001AE1 02               [ 1] 1103 	rlwa x  ; char>int24 in A:X 
      001AE2 20 1F            [ 2] 1104 	jra 18$ 	 
      001AE4                       1105 12$:			
      001AE4 A1 06            [ 1] 1106 	cp a,#TK_LPAREN
      001AE6 26 13            [ 1] 1107 	jrne 16$
      001AE8 CD 1B 5B         [ 4] 1108 	call expression
      001AEB A6 07            [ 1] 1109 	ld a,#TK_RPAREN 
      001AED CD 1A 07         [ 4] 1110 	call expect
      001AF0                       1111 	_xpop 
      001AF0 90 F6            [ 1]    1     ld a,(y)
      001AF2 93               [ 1]    2     ldw x,y 
      001AF3 EE 01            [ 2]    3     ldw x,(1,x)
      001AF5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AF9 20 08            [ 2] 1112 	jra 18$	
      001AFB                       1113 16$:
      001AFB                       1114 	_unget_token 
      001AFB 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B00 4F               [ 1] 1115 	clr a 
      001B01 20 12            [ 2] 1116 	jra 22$ 
      001B03                       1117 18$: 
      001B03 0D 01            [ 1] 1118 	tnz (NEG,sp)
      001B05 27 03            [ 1] 1119 	jreq 20$
      001B07 CD 02 15         [ 4] 1120 	call neg_ax   
      001B0A                       1121 20$:
      001B0A                       1122 	_xpush 
      001B0A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B0E 90 F7            [ 1]    2     ld (y),a 
      001B10 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B13 A6 84            [ 1] 1123 	ld a,#TK_INTGR
      001B15                       1124 22$:
      001B15                       1125 	_drop VSIZE
      001B15 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B17 81               [ 4] 1126 	ret
                                   1127 
                                   1128 
                                   1129 ;-----------------------------------
                                   1130 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1131 ; output:
                                   1132 ;   A    	token attribute 
                                   1133 ;	xstack		value 
                                   1134 ;-----------------------------------
                           000001  1135 	MULOP=1
                           000001  1136 	VSIZE=1
      001B18                       1137 term:
      001B18                       1138 	_vars VSIZE
      001B18 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1139 ; first factor 	
      001B1A CD 1A 63         [ 4] 1140 	call factor
      001B1D 4D               [ 1] 1141 	tnz a 
      001B1E 27 38            [ 1] 1142 	jreq term_exit  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001B20                       1143 term01:	 ; check for  operator '*'|'/'|'%' 
      001B20 CD 18 3E         [ 4] 1144 	call next_token
      001B23 6B 01            [ 1] 1145 	ld (MULOP,sp),a
      001B25 A4 30            [ 1] 1146 	and a,#TK_GRP_MASK
      001B27 A1 20            [ 1] 1147 	cp a,#TK_GRP_MULT
      001B29 27 09            [ 1] 1148 	jreq 1$
      001B2B A6 84            [ 1] 1149 	ld a,#TK_INTGR
      001B2D                       1150 	_unget_token 
      001B2D 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B32 20 24            [ 2] 1151 	jra term_exit 
      001B34                       1152 1$:	; got *|/|%
                                   1153 ;second factor
      001B34 CD 1A 63         [ 4] 1154 	call factor
      001B37 4D               [ 1] 1155 	tnz a 
      001B38 26 03            [ 1] 1156 	jrne 2$ 
      001B3A CC 16 D7         [ 2] 1157 	jp syntax_error 
      001B3D                       1158 2$: ; select operation 	
      001B3D 7B 01            [ 1] 1159 	ld a,(MULOP,sp) 
      001B3F A1 20            [ 1] 1160 	cp a,#TK_MULT 
      001B41 26 05            [ 1] 1161 	jrne 3$
                                   1162 ; '*' operator
      001B43 CD 02 79         [ 4] 1163 	call mul24 
      001B46 20 D8            [ 2] 1164 	jra term01
      001B48 A1 21            [ 1] 1165 3$: cp a,#TK_DIV 
      001B4A 26 05            [ 1] 1166 	jrne 4$ 
                                   1167 ; '/' operator	
      001B4C CD 03 07         [ 4] 1168 	call div24 
      001B4F 20 CF            [ 2] 1169 	jra term01 
      001B51                       1170 4$: ; '%' operator
      001B51 CD 03 A1         [ 4] 1171 	call mod24
      001B54 20 CA            [ 2] 1172 	jra term01 
      001B56                       1173 9$: 
      001B56 A6 84            [ 1] 1174 	ld a,#TK_INTGR
      001B58                       1175 term_exit:
      001B58                       1176 	_drop VSIZE 
      001B58 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B5A 81               [ 4] 1177 	ret 
                                   1178 
                                   1179 ;-------------------------------
                                   1180 ;  expr ::= term [['+'|'-'] term]*
                                   1181 ;  result range {-32768..32767}
                                   1182 ;  output:
                                   1183 ;   A    token attribute 
                                   1184 ;   xstack	 result    
                                   1185 ;-------------------------------
                           000001  1186 	OP=1 
                           000001  1187 	VSIZE=1 
      001B5B                       1188 expression:
      001B5B                       1189 	_vars VSIZE 
      001B5B 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1190 ; first term 	
      001B5D CD 1B 18         [ 4] 1191 	call term
      001B60 4D               [ 1] 1192 	tnz a 
      001B61 27 2D            [ 1] 1193 	jreq 9$
      001B63                       1194 1$:	; operator '+'|'-'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001B63 CD 18 3E         [ 4] 1195 	call next_token
      001B66 6B 01            [ 1] 1196 	ld (OP,sp),a 
      001B68 A4 30            [ 1] 1197 	and a,#TK_GRP_MASK
      001B6A A1 10            [ 1] 1198 	cp a,#TK_GRP_ADD 
      001B6C 27 09            [ 1] 1199 	jreq 2$ 
      001B6E                       1200 	_unget_token 
      001B6E 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B73 A6 84            [ 1] 1201 	ld a,#TK_INTGR
      001B75 20 19            [ 2] 1202 	jra 9$ 
      001B77                       1203 2$: ; second term 
      001B77 CD 1B 18         [ 4] 1204 	call term
      001B7A 4D               [ 1] 1205 	tnz a 
      001B7B 26 03            [ 1] 1206 	jrne 3$
      001B7D CC 16 D7         [ 2] 1207 	jp syntax_error
      001B80                       1208 3$:
      001B80 7B 01            [ 1] 1209 	ld a,(OP,sp)
      001B82 A1 10            [ 1] 1210 	cp a,#TK_PLUS 
      001B84 26 05            [ 1] 1211 	jrne 4$
                                   1212 ; '+' operator	
      001B86 CD 01 7E         [ 4] 1213 	call add24
      001B89 20 D8            [ 2] 1214 	jra 1$ 
      001B8B                       1215 4$:	; '-' operator 
      001B8B CD 01 9B         [ 4] 1216 	call sub24
      001B8E 20 D3            [ 2] 1217 	jra 1$
      001B90                       1218 9$:
      001B90                       1219 	_drop VSIZE 
      001B90 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B92 81               [ 4] 1220 	ret 
                                   1221 
                                   1222 ;---------------------------------------------
                                   1223 ; rel ::= expr rel_op expr
                                   1224 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1225 ;  relation return  integer , zero is false 
                                   1226 ;  output:
                                   1227 ;	 xstack		value  
                                   1228 ;---------------------------------------------
                           000001  1229 	RELOP=1
                           000001  1230 	VSIZE=1 
      001B93                       1231 relation: 
      001B93                       1232 	_vars VSIZE
      001B93 52 01            [ 2]    1     sub sp,#VSIZE 
      001B95 CD 1B 5B         [ 4] 1233 	call expression
      001B98 4D               [ 1] 1234 	tnz a 
      001B99 27 54            [ 1] 1235 	jreq 9$ 
                                   1236 ; expect rel_op or leave 
      001B9B CD 18 3E         [ 4] 1237 	call next_token 
      001B9E 6B 01            [ 1] 1238 	ld (RELOP,sp),a 
      001BA0 A4 30            [ 1] 1239 	and a,#TK_GRP_MASK
      001BA2 A1 30            [ 1] 1240 	cp a,#TK_GRP_RELOP 
      001BA4 27 09            [ 1] 1241 	jreq 2$
      001BA6 A6 84            [ 1] 1242 	ld a,#TK_INTGR 
      001BA8                       1243 	_unget_token 
      001BA8 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001BAD 20 40            [ 2] 1244 	jra 9$ 
      001BAF                       1245 2$:	; expect another expression
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001BAF CD 1B 5B         [ 4] 1246 	call expression
      001BB2 4D               [ 1] 1247 	tnz a 
      001BB3 26 03            [ 1] 1248 	jrne 3$
      001BB5 CC 16 D7         [ 2] 1249 	jp syntax_error 
      001BB8                       1250 3$: 
      001BB8 CD 01 B8         [ 4] 1251 	call cp24 
      001BBB                       1252 	_xpop  
      001BBB 90 F6            [ 1]    1     ld a,(y)
      001BBD 93               [ 1]    2     ldw x,y 
      001BBE EE 01            [ 2]    3     ldw x,(1,x)
      001BC0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BC4 4D               [ 1] 1253 	tnz a 
      001BC5 2B 08            [ 1] 1254 	jrmi 4$
      001BC7 26 0C            [ 1] 1255 	jrne 5$
      001BC9 35 02 00 0E      [ 1] 1256 	mov acc8,#2 ; i1==i2
      001BCD 20 0A            [ 2] 1257 	jra 6$ 
      001BCF                       1258 4$: ; i1<i2
      001BCF 35 04 00 0E      [ 1] 1259 	mov acc8,#4 
      001BD3 20 04            [ 2] 1260 	jra 6$
      001BD5                       1261 5$: ; i1>i2
      001BD5 35 01 00 0E      [ 1] 1262 	mov acc8,#1  
      001BD9                       1263 6$: ; 0=false, -1=true 
      001BD9 5F               [ 1] 1264 	clrw x 
      001BDA C6 00 0E         [ 1] 1265 	ld a, acc8  
      001BDD 14 01            [ 1] 1266 	and a,(RELOP,sp)
      001BDF 27 03            [ 1] 1267 	jreq 7$
      001BE1 53               [ 2] 1268 	cplw x 
      001BE2 A6 FF            [ 1] 1269 	ld a,#255 
      001BE4                       1270 7$:	_xpush 
      001BE4 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001BE8 90 F7            [ 1]    2     ld (y),a 
      001BEA 90 EF 01         [ 2]    3     ldw (1,y),x 
      001BED A6 84            [ 1] 1271 	ld a,#TK_INTGR
      001BEF                       1272 9$: 
      001BEF                       1273 	_drop VSIZE
      001BEF 5B 01            [ 2]    1     addw sp,#VSIZE 
      001BF1 81               [ 4] 1274 	ret 
                                   1275 
                                   1276 ;-------------------------------------------
                                   1277 ;  AND factor:  [NOT] relation | (condition)
                                   1278 ;  output:
                                   1279 ;     A      TK_INTGR|0
                                   1280 ;-------------------------------------------
                           000001  1281 	NOT_OP=1
      001BF2                       1282 and_factor:
      001BF2 4B 00            [ 1] 1283 	push #0 
      001BF4 CD 18 3E         [ 4] 1284 0$:	call next_token  
      001BF7 4D               [ 1] 1285 	tnz a 
      001BF8 27 25            [ 1] 1286 	jreq 8$ 
      001BFA A1 87            [ 1] 1287 	cp a,#TK_NOT 
      001BFC 26 04            [ 1] 1288 	jrne 1$ 
      001BFE 03 01            [ 1] 1289 	cpl (NOT_OP,sp)
      001C00 20 F2            [ 2] 1290 	jra 0$ 
      001C02                       1291 1$:	
      001C02 A1 06            [ 1] 1292 	cp a,#TK_LPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001C04 26 0A            [ 1] 1293 	jrne 2$
      001C06 CD 1C 74         [ 4] 1294 	call condition
      001C09 A6 07            [ 1] 1295 	ld a,#TK_RPAREN 
      001C0B CD 1A 07         [ 4] 1296 	call expect
      001C0E 20 08            [ 2] 1297 	jra 3$
      001C10                       1298 2$: _unget_token 
      001C10 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C15 CD 1B 93         [ 4] 1299 	call relation
      001C18                       1300 3$:
      001C18 0D 01            [ 1] 1301 	tnz (NOT_OP,sp)
      001C1A 27 03            [ 1] 1302 	jreq 8$ 
      001C1C CD 01 FA         [ 4] 1303 	call cpl24
      001C1F                       1304 8$:
      001C1F                       1305 	_drop 1  
      001C1F 5B 01            [ 2]    1     addw sp,#1 
      001C21 81               [ 4] 1306     ret 
                                   1307 
                                   1308 
                                   1309 ;--------------------------------------------
                                   1310 ;  AND operator as priority over OR||XOR 
                                   1311 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1312 ;          
                                   1313 ;  output:
                                   1314 ;     A     TK_INTGR|0
                                   1315 ;    xtack   value 
                                   1316 ;--------------------------------------------
      001C22                       1317 and_cond:
      001C22 CD 1B F2         [ 4] 1318 	call and_factor
      001C25 4D               [ 1] 1319 	tnz a 
      001C26 27 4B            [ 1] 1320 	jreq 9$  
      001C28 CD 18 3E         [ 4] 1321 1$: call next_token 
      001C2B 4D               [ 1] 1322 	tnz a 
      001C2C 27 43            [ 1] 1323 	jreq 6$ 
      001C2E A1 88            [ 1] 1324 	cp a,#TK_AND 
      001C30 27 07            [ 1] 1325 	jreq 3$
      001C32                       1326 	_unget_token 
      001C32 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C37 20 38            [ 2] 1327 	jra 6$ 
      001C39 CD 1B F2         [ 4] 1328 3$:	call and_factor  
      001C3C 4D               [ 1] 1329 	tnz a 
      001C3D 26 03            [ 1] 1330 	jrne 4$
      001C3F CC 16 D7         [ 2] 1331 	jp syntax_error 
      001C42                       1332 4$:	
      001C42                       1333 	_xpop 
      001C42 90 F6            [ 1]    1     ld a,(y)
      001C44 93               [ 1]    2     ldw x,y 
      001C45 EE 01            [ 2]    3     ldw x,(1,x)
      001C47 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C4B C7 00 0C         [ 1] 1334 	ld acc24,a 
      001C4E CF 00 0D         [ 2] 1335 	ldw acc16,x
      001C51                       1336 	_xpop 
      001C51 90 F6            [ 1]    1     ld a,(y)
      001C53 93               [ 1]    2     ldw x,y 
      001C54 EE 01            [ 2]    3     ldw x,(1,x)
      001C56 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001C5A C4 00 0C         [ 1] 1337 	and a,acc24 
      001C5D 02               [ 1] 1338 	rlwa x 
      001C5E C4 00 0D         [ 1] 1339 	and a,acc16 
      001C61 02               [ 1] 1340 	rlwa x 
      001C62 C4 00 0E         [ 1] 1341 	and a,acc8 
      001C65 02               [ 1] 1342 	rlwa x
      001C66                       1343 	_xpush
      001C66 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C6A 90 F7            [ 1]    2     ld (y),a 
      001C6C 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C6F 20 B7            [ 2] 1344 	jra 1$  
      001C71 A6 84            [ 1] 1345 6$: ld a,#TK_INTGR 
      001C73 81               [ 4] 1346 9$:	ret 	 
                                   1347 
                                   1348 
                                   1349 ;--------------------------------------------
                                   1350 ; condition for IF and UNTIL 
                                   1351 ; operators: OR,XOR 
                                   1352 ; format:  and_cond [ OP and_cond ]* 
                                   1353 ; output:
                                   1354 ;    A        INTGR|0 
                                   1355 ;    xstack   value 
                                   1356 ;--------------------------------------------
                           000001  1357 	ATMP=1
                           000002  1358 	OP=2
                           000002  1359 	VSIZE=2 
      001C74                       1360 condition:
      001C74                       1361 	_vars VSIZE 
      001C74 52 02            [ 2]    1     sub sp,#VSIZE 
      001C76 CD 1C 22         [ 4] 1362 	call and_cond
      001C79 4D               [ 1] 1363 	tnz a 
      001C7A 27 69            [ 1] 1364 	jreq 9$ 
      001C7C CD 18 3E         [ 4] 1365 1$:	call next_token 
      001C7F A1 89            [ 1] 1366 	cp a,#TK_OR 
      001C81 27 0B            [ 1] 1367 	jreq 2$
      001C83 A1 8A            [ 1] 1368 	cp a,#TK_XOR
      001C85 27 07            [ 1] 1369 	jreq 2$ 
      001C87                       1370 	_unget_token 
      001C87 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001C8C 20 55            [ 2] 1371 	jra 8$ 
      001C8E 6B 02            [ 1] 1372 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001C90 CD 1C 22         [ 4] 1373 	call and_cond
      001C93 A1 84            [ 1] 1374 	cp a,#TK_INTGR 
      001C95 27 03            [ 1] 1375 	jreq 3$
      001C97 CC 16 D7         [ 2] 1376 	jp syntax_error 
      001C9A                       1377 3$:	 
      001C9A                       1378 	_xpop  ; rigth arg 
      001C9A 90 F6            [ 1]    1     ld a,(y)
      001C9C 93               [ 1]    2     ldw x,y 
      001C9D EE 01            [ 2]    3     ldw x,(1,x)
      001C9F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CA3 C7 00 0C         [ 1] 1379 	ld acc24,a 
      001CA6 CF 00 0D         [ 2] 1380 	ldw acc16,x 
      001CA9                       1381 	_xpop  ; left arg  
      001CA9 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001CAB 93               [ 1]    2     ldw x,y 
      001CAC EE 01            [ 2]    3     ldw x,(1,x)
      001CAE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001CB2 6B 01            [ 1] 1382 	ld (ATMP,sp),a 
      001CB4 7B 02            [ 1] 1383 	ld a,(OP,sp)
      001CB6 A1 8A            [ 1] 1384 	cp a,#TK_XOR 
      001CB8 27 10            [ 1] 1385 	jreq 5$ 
      001CBA                       1386 4$: ; A:X OR acc24   
      001CBA 7B 01            [ 1] 1387 	ld a,(ATMP,sp)
      001CBC CA 00 0C         [ 1] 1388 	or a,acc24 
      001CBF 02               [ 1] 1389 	rlwa x 
      001CC0 CA 00 0D         [ 1] 1390 	or a,acc16 
      001CC3 02               [ 1] 1391 	rlwa x 
      001CC4 CA 00 0E         [ 1] 1392 	or a,acc8 
      001CC7 02               [ 1] 1393 	rlwa x 
      001CC8 20 0E            [ 2] 1394 	jra 6$  
      001CCA                       1395 5$: ; A:X XOR acc24 
      001CCA 7B 01            [ 1] 1396 	ld a,(ATMP,sp)
      001CCC C8 00 0C         [ 1] 1397 	xor a,acc24 
      001CCF 02               [ 1] 1398 	rlwa x 
      001CD0 C8 00 0D         [ 1] 1399 	xor a,acc16 
      001CD3 02               [ 1] 1400 	rlwa x 
      001CD4 C8 00 0E         [ 1] 1401 	xor a,acc8 
      001CD7 02               [ 1] 1402 	rlwa x 
      001CD8                       1403 6$: _xpush
      001CD8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001CDC 90 F7            [ 1]    2     ld (y),a 
      001CDE 90 EF 01         [ 2]    3     ldw (1,y),x 
      001CE1 20 99            [ 2] 1404 	jra 1$ 
      001CE3 A6 84            [ 1] 1405 8$:	ld a,#TK_INTGR 
      001CE5                       1406 9$:	_drop VSIZE 
      001CE5 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CE7 81               [ 4] 1407 	ret 
                                   1408 
                                   1409 
                                   1410 ;--------------------------------------------
                                   1411 ; BASIC: HEX 
                                   1412 ; select hexadecimal base for integer print
                                   1413 ;---------------------------------------------
      001CE8                       1414 hex_base:
      001CE8 35 10 00 0A      [ 1] 1415 	mov base,#16 
      001CEC 81               [ 4] 1416 	ret 
                                   1417 
                                   1418 ;--------------------------------------------
                                   1419 ; BASIC: DEC 
                                   1420 ; select decimal base for integer print
                                   1421 ;---------------------------------------------
      001CED                       1422 dec_base:
      001CED 35 0A 00 0A      [ 1] 1423 	mov base,#10
      001CF1 81               [ 4] 1424 	ret 
                                   1425 
                                   1426 ;------------------------
                                   1427 ; BASIC: FREE 
                                   1428 ; return free size in RAM 
                                   1429 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                   1430 ;   A:x		size 
                                   1431 ;--------------------------
      001CF2                       1432 free:
      001CF2 4F               [ 1] 1433 	clr a 
      001CF3 AE 16 68         [ 2] 1434 	ldw x,#tib 
      001CF6 72 B0 00 31      [ 2] 1435 	subw x,dvar_end 
      001CFA 81               [ 4] 1436 	ret 
                                   1437 
                                   1438 ;------------------------------
                                   1439 ; BASIC: SIZE 
                                   1440 ; command that print 
                                   1441 ; program start addres and size 
                                   1442 ;------------------------------
      001CFB                       1443 cmd_size:
      001CFB 3B 00 0A         [ 1] 1444 	push base 
      001CFE AE 1E DA         [ 2] 1445 	ldw x,#PROG_ADDR 
      001D01 CD 09 A4         [ 4] 1446 	call puts 
      001D04 CE 00 1B         [ 2] 1447 	ldw x,txtbgn     
      001D07 35 10 00 0A      [ 1] 1448 	mov base,#16 
      001D0B CD 18 86         [ 4] 1449 	call prt_i16
      001D0E 32 00 0A         [ 1] 1450 	pop base 
      001D11 AE 1E EC         [ 2] 1451 	ldw x,#PROG_SIZE 
      001D14 CD 09 A4         [ 4] 1452 	call puts 
      001D17 CE 00 1D         [ 2] 1453 	ldw x,txtend 
      001D1A 72 B0 00 1B      [ 2] 1454 	subw x,txtbgn 
      001D1E CD 18 86         [ 4] 1455 	call prt_i16
      001D21 AE 1E FD         [ 2] 1456 	ldw x,#STR_BYTES 
      001D24 CD 09 A4         [ 4] 1457 	call puts  
      001D27 81               [ 4] 1458 	ret 
                                   1459 
                                   1460 
                                   1461 ;------------------------
                                   1462 ; BASIC: UBOUND  
                                   1463 ; return array variable size 
                                   1464 ; and set 'array_size' variable 
                                   1465 ; output:
                                   1466 ;   A:X 	array_size
                                   1467 ;--------------------------
      001D28                       1468 ubound:
      001D28 CD 1C F2         [ 4] 1469 	call free 
      001D2B A6 03            [ 1] 1470 	ld a,#CELL_SIZE 
      001D2D 62               [ 2] 1471 	div x,a 
      001D2E CF 00 20         [ 2] 1472 	ldw array_size,x
      001D31 4F               [ 1] 1473 	clr a 
      001D32 81               [ 4] 1474 	ret 
                                   1475 
                                   1476 ;-----------------------------
                                   1477 ; BASIC: LET var=expr 
                                   1478 ; variable assignement 
                                   1479 ; output:
                                   1480 ;   A 		TK_NONE 
                                   1481 ;-----------------------------
      001D33                       1482 let::
      001D33 CD 18 3E         [ 4] 1483 	call next_token 
      001D36 A1 85            [ 1] 1484 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001D38 27 0C            [ 1] 1485 	jreq let_var
      001D3A A1 05            [ 1] 1486 	cp a,#TK_ARRAY 
      001D3C 27 03            [ 1] 1487 	jreq  let_array
      001D3E CC 16 D7         [ 2] 1488 	jp syntax_error
      001D41                       1489 let_array:
      001D41 CD 1A 35         [ 4] 1490 	call get_array_element
      001D44 20 03            [ 2] 1491 	jra let_eval 
      001D46                       1492 let_var:
      001D46 CD 18 66         [ 4] 1493 	call get_addr
      001D49                       1494 let_eval:
      001D49 CF 00 19         [ 2] 1495 	ldw ptr16,x  ; variable address 
      001D4C CD 18 3E         [ 4] 1496 	call next_token 
      001D4F A1 32            [ 1] 1497 	cp a,#TK_EQUAL
      001D51 27 03            [ 1] 1498 	jreq 1$
      001D53 CC 16 D7         [ 2] 1499 	jp syntax_error
      001D56                       1500 1$:	
      001D56 CD 1C 74         [ 4] 1501 	call condition   
      001D59 A1 84            [ 1] 1502 	cp a,#TK_INTGR 
      001D5B 27 03            [ 1] 1503 	jreq 2$
      001D5D CC 16 D7         [ 2] 1504 	jp syntax_error
      001D60                       1505 2$:	
      001D60                       1506 	_xpop ; value 
      001D60 90 F6            [ 1]    1     ld a,(y)
      001D62 93               [ 1]    2     ldw x,y 
      001D63 EE 01            [ 2]    3     ldw x,(1,x)
      001D65 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D69                       1507 3$:
      001D69 72 C7 00 19      [ 4] 1508 	ld [ptr16],a
      001D6D 72 5C 00 1A      [ 1] 1509 	inc ptr8  
      001D71 72 CF 00 19      [ 5] 1510 	ldw [ptr16],x 
      001D75 81               [ 4] 1511 	ret 
                                   1512 
                                   1513 
                                   1514 ;--------------------------
                                   1515 ; return constant/dvar value 
                                   1516 ; from it's record address
                                   1517 ; input:
                                   1518 ;	X	*const record 
                                   1519 ; output:
                                   1520 ;   A:X   const  value
                                   1521 ;--------------------------
      001D76                       1522 get_value: ; -- i 
      001D76 F6               [ 1] 1523 	ld a,(x) ; record size 
      001D77 A4 0F            [ 1] 1524 	and a,#NAME_MAX_LEN
      001D79 A0 03            [ 1] 1525 	sub a,#CELL_SIZE ; * value 
      001D7B 88               [ 1] 1526 	push a 
      001D7C 4B 00            [ 1] 1527 	push #0 
      001D7E 72 FB 01         [ 2] 1528 	addw x,(1,sp)
      001D81 F6               [ 1] 1529 	ld a,(x)
      001D82 EE 01            [ 2] 1530 	ldw x,(1,x)
      001D84                       1531 	_drop 2
      001D84 5B 02            [ 2]    1     addw sp,#2 
      001D86 81               [ 4] 1532 	ret 
                                   1533 
                                   1534 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1535 ;--------------------------
                                   1536 ; BASIC: EEFREE 
                                   1537 ; eeprom_free 
                                   1538 ; search end of data  
                                   1539 ; in EEPROM 
                                   1540 ; input:
                                   1541 ;    none 
                                   1542 ; output:
                                   1543 ;    A:X     address free
                                   1544 ;-------------------------
      001D87                       1545 func_eefree:
      001D87 AE 40 00         [ 2] 1546 	ldw x,#EEPROM_BASE 
      001D8A 35 08 00 0E      [ 1] 1547 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D8E A3 47 F8         [ 2] 1548     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D91 24 17            [ 1] 1549 	jruge 8$ ; no free space 
      001D93 F6               [ 1] 1550 2$: ld a,(x)
      001D94 26 0C            [ 1] 1551 	jrne 3$
      001D96 5C               [ 1] 1552 	incw x 
      001D97 72 5A 00 0E      [ 1] 1553 	dec acc8 
      001D9B 26 F6            [ 1] 1554 	jrne 2$
      001D9D 1D 00 08         [ 2] 1555 	subw x,#8 
      001DA0 20 09            [ 2] 1556 	jra 9$  
      001DA2 F6               [ 1] 1557 3$: ld a,(x)
      001DA3 5C               [ 1] 1558 	incw x
      001DA4 4D               [ 1] 1559 	tnz a  
      001DA5 26 FB            [ 1] 1560 	jrne 3$
      001DA7 5A               [ 2] 1561 	decw x   
      001DA8 20 E0            [ 2] 1562 	jra 1$ 
      001DAA 5F               [ 1] 1563 8$: clrw x ; no free space 
      001DAB 4F               [ 1] 1564 9$: clr a 
      001DAC CF 00 23         [ 2] 1565 	ldw free_eeprom,x ; save in system variable 
      001DAF 81               [ 4] 1566 	ret 
                                   1567 
                           000005  1568 REC_XTRA_BYTES=5 
                                   1569 ;--------------------------
                                   1570 ; search constant/dim_var name 
                                   1571 ; format of record  
                                   1572 ;   .byte record length 
                                   1573 ;         = strlen(name)+5 
                                   1574 ;   .asciz name (variable length)
                                   1575 ;   .int24 value (3 bytes )
                                   1576 ; a constant record use 7+ bytes
                                   1577 ; constants are saved in EEPROM  
                                   1578 ; input:
                                   1579 ;    A     record_len 
                                   1580 ;    X     *name
                                   1581 ; output:
                                   1582 ;    X     address|0
                                   1583 ; use:
                                   1584 ;   A,Y, acc16 
                                   1585 ;-------------------------
                           000001  1586 	NAMEPTR=1 ; target name pointer 
                           000003  1587 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1588 	RECLEN=5  ; record length of target
                           000007  1589 	LIMIT=7   ; search area limit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                           000008  1590 	VSIZE=8  
      001DB0                       1591 search_name:
      001DB0 90 89            [ 2] 1592 	pushw y 
      001DB2                       1593 	_vars VSIZE
      001DB2 52 08            [ 2]    1     sub sp,#VSIZE 
      001DB4 72 5F 00 0D      [ 1] 1594 	clr acc16 
      001DB8 6B 05            [ 1] 1595 	ld (RECLEN,sp),a    
      001DBA 1F 01            [ 2] 1596 	ldw (NAMEPTR,sp),x
      001DBC CE 00 31         [ 2] 1597 	ldw x,dvar_end 
      001DBF 1F 07            [ 2] 1598 	ldw (LIMIT,sp),x 
      001DC1 90 CE 00 2F      [ 2] 1599 	ldw y,dvar_bgn
      001DC5 17 03            [ 2] 1600 1$:	ldw (WLKPTR,sp),y
      001DC7 93               [ 1] 1601 	ldw x,y 
      001DC8 13 07            [ 2] 1602 	cpw x, (LIMIT,sp) 
      001DCA 24 20            [ 1] 1603 	jruge 7$ ; no match found 
      001DCC 90 F6            [ 1] 1604 	ld a,(y)
      001DCE A4 0F            [ 1] 1605 	and a,#NAME_MAX_LEN
      001DD0 11 05            [ 1] 1606 	cp a,(RECLEN,sp)
      001DD2 26 09            [ 1] 1607 	jrne 2$ 
      001DD4 90 5C            [ 1] 1608 	incw y 
      001DD6 1E 01            [ 2] 1609 	ldw x,(NAMEPTR,sp)
      001DD8 CD 13 DE         [ 4] 1610 	call strcmp
      001DDB 26 13            [ 1] 1611 	jrne 8$ ; match found 
      001DDD                       1612 2$: ; skip this one 	
      001DDD 16 03            [ 2] 1613 	ldW Y,(WLKPTR,sp)
      001DDF 90 F6            [ 1] 1614 	ld a,(y)
      001DE1 A4 0F            [ 1] 1615 	and a,#NAME_MAX_LEN 
      001DE3 C7 00 0E         [ 1] 1616 	ld acc8,a 
      001DE6 72 B9 00 0D      [ 2] 1617 	addw y,acc16 
      001DEA 20 D9            [ 2] 1618 	jra 1$  
      001DEC                       1619 7$: ; no match found 
      001DEC 0F 03            [ 1] 1620 	clr (WLKPTR,sp)
      001DEE 0F 04            [ 1] 1621 	clr (WLKPTR+1,sp)
      001DF0                       1622 8$: ; match found 
      001DF0 1E 03            [ 2] 1623 	ldw x,(WLKPTR,sp) ; record address 
      001DF2                       1624 9$:	_DROP VSIZE
      001DF2 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DF4 90 85            [ 2] 1625 	popw y 
      001DF6 81               [ 4] 1626 	 ret 
                                   1627 
                                   1628 ;--------------------------------------------
                                   1629 ; BASIC: CONST name=value [, name=value]*
                                   1630 ; define constant(s) saved in EEPROM
                                   1631 ; share most of his code with cmd_dim 
                                   1632 ;--------------------------------------------
                           000001  1633 	VAR_NAME=1 
                           000003  1634 	REC_LEN=3
                           000005  1635 	RONLY=5
                           000005  1636 	VSIZE=5
      001DF7                       1637 cmd_const:
      001DF7 CD 19 FC         [ 4] 1638 	call runtime_only
      001DFA                       1639 	_vars VSIZE 
      001DFA 52 05            [ 2]    1     sub sp,#VSIZE 
      001DFC A6 80            [ 1] 1640 	ld a,#128 
      001DFE 6B 05            [ 1] 1641 	ld (RONLY,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001E00 0F 03            [ 1] 1642 	clr (REC_LEN,sp)
      001E02 20 09            [ 2] 1643 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1644 
                                   1645 ;---------------------------------
                                   1646 ; BASIC: DIM var_name [var_name]* 
                                   1647 ; create named variables at end 
                                   1648 ; of BASIC program. 
                                   1649 ; These variables are initialized 
                                   1650 ; to 0. 
                                   1651 ; record format same ast CONST 
                                   1652 ; but r/w because stored in RAM 
                                   1653 ;---------------------------------
      001E04                       1654 cmd_dim:
      001E04 CD 19 FC         [ 4] 1655 	call runtime_only
      001E07                       1656 cmd_dim1:	
      001E07                       1657 	_vars VSIZE
      001E07 52 05            [ 2]    1     sub sp,#VSIZE 
      001E09 0F 03            [ 1] 1658 	clr (REC_LEN,sp )
      001E0B 0F 05            [ 1] 1659 	clr (RONLY,sp)
      001E0D                       1660 cmd_dim2: 
      001E0D CD 18 3E         [ 4] 1661 0$:	call next_token 
      001E10 A1 03            [ 1] 1662 	cp a,#TK_LABEL  
      001E12 27 03            [ 1] 1663 	jreq 1$ 
      001E14 CC 16 D7         [ 2] 1664 	jp syntax_error 
      001E17 1F 01            [ 2] 1665 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001E19 CD 13 D3         [ 4] 1666 	call strlen
      001E1C AB 05            [ 1] 1667 	add a,#REC_XTRA_BYTES
      001E1E 6B 04            [ 1] 1668 	ld (REC_LEN+1,sp),a
      001E20 CD 18 57         [ 4] 1669 	call skip_string 
      001E23 7B 04            [ 1] 1670 	ld a,(REC_LEN+1,sp)
      001E25 1E 01            [ 2] 1671 	ldw x,(VAR_NAME,sp) 
      001E27 CD 1D B0         [ 4] 1672 	call search_name  
      001E2A 5D               [ 2] 1673 	tnzw x 
      001E2B 27 05            [ 1] 1674 	jreq 2$
      001E2D A6 08            [ 1] 1675 	ld a,#ERR_DUPLICATE
      001E2F CC 16 D9         [ 2] 1676 	jp tb_error  
      001E32 CE 00 31         [ 2] 1677 2$:	ldw x,dvar_end 
      001E35 7B 04            [ 1] 1678 	ld a,(REC_LEN+1,sp)
      001E37 1A 05            [ 1] 1679 	or a,(RONLY,sp)
      001E39 F7               [ 1] 1680 	ld (x),a 
      001E3A 5C               [ 1] 1681 	incw x 
      001E3B 90 89            [ 2] 1682 	pushw y 
      001E3D 16 03            [ 2] 1683 	ldw y,(VAR_NAME+2,sp)
      001E3F CD 13 EF         [ 4] 1684 	call strcpy
      001E42 90 85            [ 2] 1685 	popw y 
      001E44 5A               [ 2] 1686 	decw x
      001E45 72 FB 03         [ 2] 1687 	addw x,(REC_LEN,sp)
      001E48 CF 00 31         [ 2] 1688 	ldw dvar_end,x 
      001E4B 1D 00 03         [ 2] 1689 	subw x,#CELL_SIZE  
      001E4E 7F               [ 1] 1690 	clr (x)
      001E4F 6F 01            [ 1] 1691 	clr (1,x)  
      001E51 6F 02            [ 1] 1692 	clr (2,x)
      001E53 CD 18 3E         [ 4] 1693 4$: call next_token 
      001E56 A1 08            [ 1] 1694 	cp a,#TK_COMMA 
      001E58 27 B3            [ 1] 1695 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001E5A A1 32            [ 1] 1696 	cp a,#TK_EQUAL 
      001E5C 26 2A            [ 1] 1697 	jrne 8$
                                   1698 ; initialize variable 
      001E5E CD 1C 74         [ 4] 1699 	call condition 
      001E61 A1 84            [ 1] 1700 	cp a,#TK_INTGR
      001E63 27 03            [ 1] 1701 	jreq 5$
      001E65 CC 16 D7         [ 2] 1702 	jp syntax_error
      001E68 CE 00 31         [ 2] 1703 5$: ldw x,dvar_end 
      001E6B 1D 00 03         [ 2] 1704 	subw x,#CELL_SIZE 
      001E6E CF 00 19         [ 2] 1705 	ldw ptr16,x 
      001E71                       1706 	_xpop 
      001E71 90 F6            [ 1]    1     ld a,(y)
      001E73 93               [ 1]    2     ldw x,y 
      001E74 EE 01            [ 2]    3     ldw x,(1,x)
      001E76 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E7A 72 C7 00 19      [ 4] 1707 	ld [ptr16],a 
      001E7E 72 5C 00 1A      [ 1] 1708 	inc ptr8 
      001E82 72 CF 00 19      [ 5] 1709 	ldw [ptr16],x 
      001E86 20 CB            [ 2] 1710 	jra 4$ 
      001E88                       1711 8$:	
      001E88                       1712 	_unget_token 	
      001E88 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001E8D                       1713 	_drop VSIZE 
      001E8D 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E8F CD 1D 28         [ 4] 1714 	call ubound 
      001E92 81               [ 4] 1715 	ret 
                                   1716 
                                   1717 
                                   1718 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1719 ; return program size 
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E93                       1721 prog_size:
      001E93 CE 00 1D         [ 2] 1722 	ldw x,txtend 
      001E96 72 B0 00 1B      [ 2] 1723 	subw x,txtbgn 
      001E9A 81               [ 4] 1724 	ret 
                                   1725 
                                   1726 ;----------------------------
                                   1727 ; print program information 
                                   1728 ;---------------------------
      001E9B                       1729 program_info: 
      001E9B AE 1E DA         [ 2] 1730 	ldw x,#PROG_ADDR 
      001E9E CD 09 A4         [ 4] 1731 	call puts 
      001EA1 CE 00 1B         [ 2] 1732 	ldw x,txtbgn 
      001EA4 35 10 00 0A      [ 1] 1733 	mov base,#16 
      001EA8 CD 18 86         [ 4] 1734 	call prt_i16
      001EAB 35 0A 00 0A      [ 1] 1735 	mov base,#10  
      001EAF AE 1E EC         [ 2] 1736 	ldw x,#PROG_SIZE
      001EB2 CD 09 A4         [ 4] 1737 	call puts 
      001EB5 CD 1E 93         [ 4] 1738 	call prog_size 
      001EB8 CD 18 86         [ 4] 1739 	call prt_i16 
      001EBB AE 1E FD         [ 2] 1740 	ldw x,#STR_BYTES 
      001EBE CD 09 A4         [ 4] 1741 	call puts
      001EC1 CE 00 1B         [ 2] 1742 	ldw x,txtbgn
      001EC4 A3 38 84         [ 2] 1743 	cpw x,#app 
      001EC7 25 05            [ 1] 1744 	jrult 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001EC9 AE 1F 04         [ 2] 1745 	ldw x,#FLASH_MEM 
      001ECC 20 03            [ 2] 1746 	jra 3$
      001ECE AE 1F 15         [ 2] 1747 2$: ldw x,#RAM_MEM 	 
      001ED1 CD 09 A4         [ 4] 1748 3$:	call puts 
      001ED4 A6 0D            [ 1] 1749 	ld a,#CR 
      001ED6 CD 09 47         [ 4] 1750 	call putc
      001ED9 81               [ 4] 1751 	ret 
                                   1752 
      001EDA 70 72 6F 67 72 61 6D  1753 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001EEC 2C 20 70 72 6F 67 72  1754 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EFD 20 62 79 74 65 73 00  1755 STR_BYTES: .asciz " bytes" 
      001F04 20 69 6E 20 46 4C 41  1756 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001F15 20 69 6E 20 52 41 4D  1757 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1758 
                                   1759 
                                   1760 ;----------------------------
                                   1761 ; BASIC: LIST [[start][-end]]
                                   1762 ; list program lines 
                                   1763 ; form start to end 
                                   1764 ; if empty argument list then 
                                   1765 ; list all.
                                   1766 ;----------------------------
                           000001  1767 	FIRST=1
                           000003  1768 	LAST=3 
                           000005  1769 	LN_PTR=5
                           000006  1770 	VSIZE=6 
      001F24                       1771 cmd_list:
      001F24 CD 19 F1         [ 4] 1772 	call cmd_line_only
      001F27 CD 1E 93         [ 4] 1773 	call prog_size 
      001F2A 22 01            [ 1] 1774 	jrugt 3$
      001F2C 81               [ 4] 1775 	ret 
      001F2D                       1776 3$: _vars VSIZE
      001F2D 52 06            [ 2]    1     sub sp,#VSIZE 
      001F2F CE 00 1B         [ 2] 1777 	ldw x,txtbgn 
      001F32 1F 05            [ 2] 1778 	ldw (LN_PTR,sp),x 
      001F34 FE               [ 2] 1779 	ldw x,(x) 
      001F35 1F 01            [ 2] 1780 	ldw (FIRST,sp),x ; list from first line 
      001F37 AE 7F FF         [ 2] 1781 	ldw x,#MAX_LINENO ; biggest line number 
      001F3A 1F 03            [ 2] 1782 	ldw (LAST,sp),x 
      001F3C CD 18 3E         [ 4] 1783 	call next_token 
      001F3F A1 84            [ 1] 1784 	cp a,#TK_INTGR
      001F41 27 0B            [ 1] 1785 	jreq start_from 
      001F43                       1786 is_minus: 	
      001F43 A1 11            [ 1] 1787 	cp a,#TK_MINUS 
      001F45 27 27            [ 1] 1788 	jreq end_at_line
      001F47                       1789 	_unget_token 
      001F47 55 00 03 00 01   [ 1]    1      mov in,in.saved  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001F4C 20 33            [ 2] 1790 	jra list_loop 
      001F4E                       1791 start_from:	 
      001F4E CD 18 70         [ 4] 1792 	call get_int24
      001F51 1F 01            [ 2] 1793 	ldw (FIRST,sp),x	
      001F53                       1794 lines_skip:
      001F53 90 89            [ 2] 1795 	pushw y 
      001F55 4F               [ 1] 1796 	clr a 
      001F56 CD 0C 8D         [ 4] 1797 	call search_lineno 
      001F59 5D               [ 2] 1798 	tnzw x 
      001F5A 26 01            [ 1] 1799 	jrne 1$
      001F5C 93               [ 1] 1800 	ldw x,y 
      001F5D 90 85            [ 2] 1801 1$:	popw y 
      001F5F 1F 05            [ 2] 1802 	ldw (LN_PTR,sp),x 
      001F61 CD 18 3E         [ 4] 1803 	call next_token 
      001F64 A1 11            [ 1] 1804 	cp a,#TK_MINUS 
      001F66 27 06            [ 1] 1805 	jreq end_at_line 
      001F68 1E 01            [ 2] 1806 	ldw x,(FIRST,sp)
      001F6A 1F 03            [ 2] 1807 	ldw (LAST,sp),x 
      001F6C 20 13            [ 2] 1808 	jra list_loop 
      001F6E                       1809 end_at_line:
                                   1810 ; expect ending line# 
      001F6E CD 18 3E         [ 4] 1811     call next_token 
      001F71 A1 84            [ 1] 1812 	cp a,#TK_INTGR
      001F73 27 07            [ 1] 1813 	jreq 1$
      001F75                       1814 	_unget_token 
      001F75 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001F7A 20 05            [ 2] 1815 	jra list_loop
      001F7C                       1816 1$:
      001F7C CD 18 70         [ 4] 1817 	call get_int24 
      001F7F 1F 03            [ 2] 1818 	ldw (LAST,sp),x 
                                   1819 ; print loop
      001F81                       1820 list_loop:
      001F81 1E 05            [ 2] 1821 	ldw x,(LN_PTR,sp)
      001F83 E6 02            [ 1] 1822 	ld a,(2,x) 
      001F85 CD 20 29         [ 4] 1823 	call prt_basic_line
      001F88 1E 05            [ 2] 1824 	ldw x,(LN_PTR,sp)
      001F8A E6 02            [ 1] 1825 	ld a,(2,x)
      001F8C C7 00 0E         [ 1] 1826 	ld acc8,a 
      001F8F 72 5F 00 0D      [ 1] 1827 	clr acc16 
      001F93 72 BB 00 0D      [ 2] 1828 	addw x,acc16
      001F97 C3 00 1D         [ 2] 1829 	cpw x,txtend 
      001F9A 2A 07            [ 1] 1830 	jrpl list_exit
      001F9C 1F 05            [ 2] 1831 	ldw (LN_PTR,sp),x
      001F9E FE               [ 2] 1832 	ldw x,(x)
      001F9F 13 03            [ 2] 1833 	cpw x,(LAST,sp)  
      001FA1 2D DE            [ 1] 1834 	jrsle list_loop
      001FA3                       1835 list_exit:
      001FA3 55 00 02 00 01   [ 1] 1836 	mov in,count 
      001FA8 AE 16 B8         [ 2] 1837 	ldw x,#pad 
      001FAB CF 00 04         [ 2] 1838 	ldw basicptr,x 
      001FAE                       1839 	_drop VSIZE 
      001FAE 5B 06            [ 2]    1     addw sp,#VSIZE 
      001FB0 CD 1E 9B         [ 4] 1840 	call program_info
      001FB3 72 0D 00 22 06   [ 2] 1841 	btjf flags,#FLN_REJECTED,9$
      001FB8 AE 1F BF         [ 2] 1842 	ldw x,#LINES_REJECTED
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001FBB CD 09 A4         [ 4] 1843 	call puts
      001FBE                       1844 9$: 
      001FBE 81               [ 4] 1845 	ret
      001FBF 57 41 52 4E 49 4E 47  1846 LINES_REJECTED: .asciz "WARNING: lines missing in this program.\n"
             3A 20 6C 69 6E 65 73
             20 6D 69 73 73 69 6E
             67 20 69 6E 20 74 68
             69 73 20 70 72 6F 67
             72 61 6D 2E 0A 00
                                   1847 
                                   1848 ;--------------------------
                                   1849 ; BASIC: EDIT label 
                                   1850 ;  copy program in FLASH 
                                   1851 ;  to RAM for edition 
                                   1852 ;-------------------------
      001FE8                       1853 cmd_edit:
      001FE8 CD 19 F1         [ 4] 1854 	call cmd_line_only
      001FEB A6 03            [ 1] 1855 	ld a,#TK_LABEL 
      001FED CD 1A 07         [ 4] 1856 	call expect  
      001FF0 89               [ 2] 1857 	pushw x 
      001FF1 CD 18 57         [ 4] 1858 	call skip_string
      001FF4 85               [ 2] 1859 	popw x 
      001FF5 CD 32 23         [ 4] 1860 	call search_program 
      001FF8 26 06            [ 1] 1861     jrne 1$ 
      001FFA AE 00 12         [ 2] 1862 	ldw x,#ERR_NO_PROGRAM
      001FFD CC 16 D9         [ 2] 1863 	jp tb_error 
      002000 90 89            [ 2] 1864 1$: pushw y 
      002002 90 93            [ 1] 1865 	ldw y,x ; source address 
      002004 1D 00 04         [ 2] 1866 	subw x,#4
      002007 EE 02            [ 2] 1867 	ldw x,(2,x) ; program size 
      002009 1C 00 04         [ 2] 1868 	addw x,#4 
      00200C CF 00 0D         [ 2] 1869 	ldw acc16,x  ; bytes to copy 
      00200F AE 00 8C         [ 2] 1870 	ldw x,#rsign ; destination address 
      002012 72 A2 00 04      [ 2] 1871 	subw y,#4 
      002016 CD 13 FF         [ 4] 1872 	call move  
      002019 AE 00 90         [ 2] 1873 	ldw x,#free_ram 
      00201C CF 00 1B         [ 2] 1874 	ldw txtbgn,x 
      00201F 72 BB 00 8E      [ 2] 1875 	addw x,rsize  
      002023 CF 00 1D         [ 2] 1876 	ldw txtend,x
      002026 90 85            [ 2] 1877 	popw y  
      002028 81               [ 4] 1878 	ret 
                                   1879 
                                   1880 ;--------------------------
                                   1881 ; decompile line from token list
                                   1882 ; and print it. 
                                   1883 ; input:
                                   1884 ;   A       stop at this position 
                                   1885 ;   X 		pointer at line
                                   1886 ; output:
                                   1887 ;   none 
                                   1888 ;--------------------------	
      002029                       1889 prt_basic_line:
      002029 90 89            [ 2] 1890 	pushw y 
      00202B C7 00 02         [ 1] 1891 	ld count,a 
      00202E E6 02            [ 1] 1892 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      002030 C1 00 02         [ 1] 1893 	cp a,count 
      002033 2A 03            [ 1] 1894 	jrpl 1$ 
      002035 C7 00 02         [ 1] 1895 	ld count,a 
      002038 CF 00 04         [ 2] 1896 1$:	ldw basicptr,x 
      00203B 90 AE 16 68      [ 2] 1897 	ldw y,#tib  
      00203F CD 12 06         [ 4] 1898 	call decompile 
      002042 CD 09 A4         [ 4] 1899 	call puts 
      002045 A6 0D            [ 1] 1900 	ld a,#CR 
      002047 CD 09 47         [ 4] 1901 	call putc 
      00204A 90 85            [ 2] 1902 	popw y 
      00204C 81               [ 4] 1903 	ret 
                                   1904 
                                   1905 
                                   1906 ;---------------------------------
                                   1907 ; BASIC: PRINT|? arg_list 
                                   1908 ; print values from argument list
                                   1909 ;----------------------------------
                           000001  1910 	SEMICOL=1
                           000001  1911 	VSIZE=1
      00204D                       1912 print:
      00204D                       1913 	_vars VSIZE 
      00204D 52 01            [ 2]    1     sub sp,#VSIZE 
      00204F                       1914 reset_semicol:
      00204F 0F 01            [ 1] 1915 	clr (SEMICOL,sp)
      002051                       1916 prt_loop:
      002051 CD 18 3E         [ 4] 1917 	call next_token
      002054 A1 02            [ 1] 1918 	cp a,#CMD_END 
      002056 25 08            [ 1] 1919 	jrult 0$
      002058 A1 09            [ 1] 1920 	cp a,#TK_COLON 
      00205A 27 04            [ 1] 1921 	jreq 0$
      00205C A1 80            [ 1] 1922 	cp a,#TK_CMD
      00205E 26 07            [ 1] 1923 	jrne 10$
      002060                       1924 0$:
      002060                       1925 	_unget_token 
      002060 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002065 20 56            [ 2] 1926 	jra 8$ 
      002067                       1927 10$:	
      002067 A1 02            [ 1] 1928 	cp a,#TK_QSTR
      002069 27 12            [ 1] 1929 	jreq 1$
      00206B A1 04            [ 1] 1930 	cp a,#TK_CHAR 
      00206D 27 1B            [ 1] 1931 	jreq 2$ 
      00206F A1 82            [ 1] 1932 	cp a,#TK_CFUNC 
      002071 27 1F            [ 1] 1933 	jreq 3$
      002073 A1 0A            [ 1] 1934 	cp a,#TK_SEMIC  
      002075 27 2A            [ 1] 1935 	jreq 4$
      002077 A1 08            [ 1] 1936 	cp a,#TK_COMMA
      002079 27 2A            [ 1] 1937 	jreq 5$
      00207B 20 2F            [ 2] 1938 	jra 7$ 
      00207D                       1939 1$:	; print string 
      00207D CD 09 A4         [ 4] 1940 	call puts
      002080 5C               [ 1] 1941 	incw x
      002081 72 B0 00 04      [ 2] 1942 	subw x,basicptr 
      002085 CF 00 00         [ 2] 1943 	ldw in.w,x  
      002088 20 C5            [ 2] 1944 	jra reset_semicol
      00208A                       1945 2$:	; print character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      00208A CD 18 80         [ 4] 1946 	call get_char 
      00208D CD 09 47         [ 4] 1947 	call putc 
      002090 20 BD            [ 2] 1948 	jra reset_semicol 
      002092                       1949 3$: ; print character function value  	
      002092                       1950 	_get_code_addr 
      002092 FE               [ 2]    1         ldw x,(x)
      002093 72 5C 00 01      [ 1]    2         inc in 
      002097 72 5C 00 01      [ 1]    3         inc in 
      00209B FD               [ 4] 1951 	call (x)
      00209C CD 09 47         [ 4] 1952 	call putc
      00209F 20 AE            [ 2] 1953 	jra reset_semicol 
      0020A1                       1954 4$: ; set semi-colon  state 
      0020A1 03 01            [ 1] 1955 	cpl (SEMICOL,sp)
      0020A3 20 AC            [ 2] 1956 	jra prt_loop 
      0020A5                       1957 5$: ; skip to next terminal tabulation
                                   1958      ; terminal TAB are 8 colons 
      0020A5 A6 09            [ 1] 1959      ld a,#9 
      0020A7 CD 09 47         [ 4] 1960 	 call putc 
      0020AA 20 A3            [ 2] 1961 	 jra reset_semicol	    
      0020AC                       1962 7$:	
      0020AC                       1963 	_unget_token 
      0020AC 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0020B1 CD 1C 74         [ 4] 1964 	call condition
      0020B4 4D               [ 1] 1965 	tnz a 
      0020B5 27 06            [ 1] 1966 	jreq 8$    
      0020B7 CD 18 A8         [ 4] 1967     call print_top
      0020BA CC 20 4F         [ 2] 1968 	jp reset_semicol 
      0020BD                       1969 8$:
      0020BD 0D 01            [ 1] 1970 	tnz (SEMICOL,sp)
      0020BF 26 05            [ 1] 1971 	jrne 9$
      0020C1 A6 0D            [ 1] 1972 	ld a,#CR 
      0020C3 CD 09 47         [ 4] 1973     call putc 
      0020C6                       1974 9$:	_drop VSIZE 
      0020C6 5B 01            [ 2]    1     addw sp,#VSIZE 
      0020C8 81               [ 4] 1975 	ret 
                                   1976 
                                   1977 ;----------------------
                                   1978 ; 'save_context' and
                                   1979 ; 'rest_context' must be 
                                   1980 ; called at the same 
                                   1981 ; call stack depth 
                                   1982 ; i.e. SP must have the 
                                   1983 ; save value at  
                                   1984 ; entry point of both 
                                   1985 ; routine. 
                                   1986 ;---------------------
                           000004  1987 	CTXT_SIZE=4 ; size of saved data 
                                   1988 ;--------------------
                                   1989 ; save current BASIC
                                   1990 ; interpreter context 
                                   1991 ; on stack 
                                   1992 ;--------------------
      0020C9                       1993 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0020C9                       1994 	_arg BPTR 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                           000003     1     BPTR=ARG_OFS+1 
      0020C9                       1995 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      0020C9                       1996 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      0020C9                       1997 save_context:
      0020C9 CE 00 04         [ 2] 1998 	ldw x,basicptr 
      0020CC 1F 03            [ 2] 1999 	ldw (BPTR,sp),x
      0020CE C6 00 01         [ 1] 2000 	ld a,in 
      0020D1 6B 05            [ 1] 2001 	ld (IN,sp),a
      0020D3 C6 00 02         [ 1] 2002 	ld a,count 
      0020D6 6B 06            [ 1] 2003 	ld (CNT,sp),a  
      0020D8 81               [ 4] 2004 	ret
                                   2005 
                                   2006 ;-----------------------
                                   2007 ; restore previously saved 
                                   2008 ; BASIC interpreter context 
                                   2009 ; from stack 
                                   2010 ;-------------------------
      0020D9                       2011 rest_context:
      0020D9 1E 03            [ 2] 2012 	ldw x,(BPTR,sp)
      0020DB CF 00 04         [ 2] 2013 	ldw basicptr,x 
      0020DE 7B 05            [ 1] 2014 	ld a,(IN,sp)
      0020E0 C7 00 01         [ 1] 2015 	ld in,a
      0020E3 7B 06            [ 1] 2016 	ld a,(CNT,sp)
      0020E5 C7 00 02         [ 1] 2017 	ld count,a  
      0020E8 81               [ 4] 2018 	ret
                                   2019 
                                   2020 
                                   2021 
                                   2022 ;------------------------------------------
                                   2023 ; BASIC: INPUT [string]var[,[string]var]
                                   2024 ; input value in variables 
                                   2025 ; [string] optionally can be used as prompt 
                                   2026 ;-----------------------------------------
                           000001  2027 	CX_BPTR=1
                           000003  2028 	CX_IN=3
                           000004  2029 	CX_CNT=4
                           000005  2030 	SKIP=5
                           000005  2031 	VSIZE=5
      0020E9                       2032 input_var:
      0020E9 90 89            [ 2] 2033 	pushw y 
      0020EB                       2034 	_vars VSIZE 
      0020EB 52 05            [ 2]    1     sub sp,#VSIZE 
      0020ED                       2035 input_loop:
      0020ED 0F 05            [ 1] 2036 	clr (SKIP,sp)
      0020EF CD 18 3E         [ 4] 2037 	call next_token 
      0020F2 A1 02            [ 1] 2038 	cp a,#TK_QSTR 
      0020F4 26 10            [ 1] 2039 	jrne 1$ 
      0020F6 CD 09 A4         [ 4] 2040 	call puts 
      0020F9 5C               [ 1] 2041 	incw x 
      0020FA 72 B0 00 04      [ 2] 2042 	subw x,basicptr 
      0020FE CF 00 00         [ 2] 2043 	ldw in.w,x 
      002101 03 05            [ 1] 2044 	cpl (SKIP,sp)
      002103 CD 18 3E         [ 4] 2045 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      002106 A1 85            [ 1] 2046 1$: cp a,#TK_VAR  
      002108 27 03            [ 1] 2047 	jreq 2$ 
      00210A CC 16 D7         [ 2] 2048 	jp syntax_error
      00210D CD 18 66         [ 4] 2049 2$:	call get_addr
      002110 CF 00 19         [ 2] 2050 	ldw ptr16,x 
      002113 0D 05            [ 1] 2051 	tnz (SKIP,sp)
      002115 26 06            [ 1] 2052 	jrne 21$ 
      002117 CD 11 FC         [ 4] 2053 	call var_name 
      00211A CD 09 47         [ 4] 2054 	call putc   
      00211D                       2055 21$:
      00211D A6 3A            [ 1] 2056 	ld a,#':
      00211F CD 09 47         [ 4] 2057 	call putc 
      002122 CD 20 C9         [ 4] 2058 	call save_context 
      002125 72 5F 00 02      [ 1] 2059 	clr count  
      002129 CD 0A A9         [ 4] 2060 	call readln 
      00212C AE 16 68         [ 2] 2061 	ldw x,#tib 
      00212F 3B 00 02         [ 1] 2062 	push count
      002132 4B 00            [ 1] 2063 	push #0 
      002134 72 FB 01         [ 2] 2064 	addw x,(1,sp)
      002137 5C               [ 1] 2065 	incw x 
      002138                       2066 	_drop 2 
      002138 5B 02            [ 2]    1     addw sp,#2 
      00213A 72 5F 00 01      [ 1] 2067 	clr in 
      00213E CD 0F 3D         [ 4] 2068 	call get_token
      002141 A1 84            [ 1] 2069 	cp a,#TK_INTGR
      002143 27 14            [ 1] 2070 	jreq 3$ 
      002145 A1 11            [ 1] 2071 	cp a,#TK_MINUS
      002147 26 07            [ 1] 2072 	jrne 22$
      002149 CD 0F 3D         [ 4] 2073 	call get_token 
      00214C A1 84            [ 1] 2074 	cp a,#TK_INTGR 
      00214E 27 06            [ 1] 2075 	jreq 23$
      002150                       2076 22$:
      002150 CD 20 D9         [ 4] 2077 	call rest_context 
      002153 CC 16 D7         [ 2] 2078 	jp syntax_error
      002156                       2079 23$:
      002156 CD 02 1D         [ 4] 2080 	call neg_acc24	
      002159                       2081 3$: 
      002159 C6 00 0C         [ 1] 2082 	ld a,acc24 
      00215C CE 00 0D         [ 2] 2083 	ldw x,acc16 
      00215F 72 C7 00 19      [ 4] 2084 	ld [ptr16],a
      002163 72 5C 00 1A      [ 1] 2085 	inc ptr8  
      002167 72 CF 00 19      [ 5] 2086 	ldw [ptr16],x 
      00216B CD 20 D9         [ 4] 2087 	call rest_context
      00216E CD 18 3E         [ 4] 2088 	call next_token 
      002171 A1 08            [ 1] 2089 	cp a,#TK_COMMA
      002173 26 03            [ 1] 2090 	jrne 4$ 
      002175 CC 20 ED         [ 2] 2091 	jp input_loop
      002178                       2092 4$:
      002178 A1 00            [ 1] 2093 	cp a,#TK_NONE 
      00217A 27 07            [ 1] 2094 	jreq input_exit  
      00217C A1 09            [ 1] 2095 	cp a,#TK_COLON 
      00217E 27 03            [ 1] 2096     jreq input_exit 
      002180 CC 16 D7         [ 2] 2097 	jp syntax_error 
      002183                       2098 input_exit:
      002183                       2099 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      002183 5B 05            [ 2]    1     addw sp,#VSIZE 
      002185 90 85            [ 2] 2100 	popw y 
      002187 81               [ 4] 2101 	ret 
                                   2102 
                                   2103 
                                   2104 ;---------------------
                                   2105 ; BASIC: REM | ' 
                                   2106 ; skip comment to end of line 
                                   2107 ;---------------------- 
      002188                       2108 remark::
      002188 55 00 02 00 01   [ 1] 2109 	mov in,count 
      00218D 81               [ 4] 2110  	ret 
                                   2111 
                                   2112 
                                   2113 ;---------------------
                                   2114 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2115 ; read in loop 'addr'  
                                   2116 ; apply & 'mask' to value 
                                   2117 ; loop while result==0.  
                                   2118 ; 'xor_mask' is used to 
                                   2119 ; invert the wait logic.
                                   2120 ; i.e. loop while not 0.
                                   2121 ;---------------------
                           000001  2122 	XMASK=1 
                           000002  2123 	MASK=2
                           000003  2124 	ADDR=3
                           000004  2125 	VSIZE=4
      00218E                       2126 wait: 
      00218E                       2127 	_vars VSIZE
      00218E 52 04            [ 2]    1     sub sp,#VSIZE 
      002190 0F 01            [ 1] 2128 	clr (XMASK,sp) 
      002192 CD 1A 19         [ 4] 2129 	call arg_list 
      002195 A1 02            [ 1] 2130 	cp a,#2
      002197 24 03            [ 1] 2131 	jruge 0$
      002199 CC 16 D7         [ 2] 2132 	jp syntax_error 
      00219C A1 03            [ 1] 2133 0$:	cp a,#3
      00219E 25 0C            [ 1] 2134 	jrult 1$
      0021A0                       2135 	_xpop  ; xor mask 
      0021A0 90 F6            [ 1]    1     ld a,(y)
      0021A2 93               [ 1]    2     ldw x,y 
      0021A3 EE 01            [ 2]    3     ldw x,(1,x)
      0021A5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A9 9F               [ 1] 2136 	ld a,xl 
      0021AA 6B 01            [ 1] 2137 	ld (XMASK,sp),a 
      0021AC                       2138 1$: _xpop ; mask
      0021AC 90 F6            [ 1]    1     ld a,(y)
      0021AE 93               [ 1]    2     ldw x,y 
      0021AF EE 01            [ 2]    3     ldw x,(1,x)
      0021B1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B5 9F               [ 1] 2139     ld a,xl  
      0021B6 6B 02            [ 1] 2140 	ld (MASK,sp),a 
      0021B8                       2141 	_xpop ; address 
      0021B8 90 F6            [ 1]    1     ld a,(y)
      0021BA 93               [ 1]    2     ldw x,y 
      0021BB EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0021BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021C1 F6               [ 1] 2142 2$:	ld a,(x)
      0021C2 14 02            [ 1] 2143 	and a,(MASK,sp)
      0021C4 18 01            [ 1] 2144 	xor a,(XMASK,sp)
      0021C6 27 F9            [ 1] 2145 	jreq 2$ 
      0021C8                       2146 	_drop VSIZE 
      0021C8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0021CA 81               [ 4] 2147 	ret 
                                   2148 
                                   2149 ;---------------------
                                   2150 ; BASIC: BSET addr,mask
                                   2151 ; set bits at 'addr' corresponding 
                                   2152 ; to those of 'mask' that are at 1.
                                   2153 ; arguments:
                                   2154 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2155 ;   mask        mask|addr
                                   2156 ; output:
                                   2157 ;	none 
                                   2158 ;--------------------------
      0021CB                       2159 bit_set:
      0021CB CD 1A 19         [ 4] 2160 	call arg_list 
      0021CE A1 02            [ 1] 2161 	cp a,#2	 
      0021D0 27 03            [ 1] 2162 	jreq 1$ 
      0021D2 CC 16 D7         [ 2] 2163 	jp syntax_error
      0021D5                       2164 1$: 
      0021D5                       2165 	_xpop ; mask 
      0021D5 90 F6            [ 1]    1     ld a,(y)
      0021D7 93               [ 1]    2     ldw x,y 
      0021D8 EE 01            [ 2]    3     ldw x,(1,x)
      0021DA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021DE 9F               [ 1] 2166 	ld a,xl
      0021DF 88               [ 1] 2167 	push a  
      0021E0                       2168 	_xpop ; addr  
      0021E0 90 F6            [ 1]    1     ld a,(y)
      0021E2 93               [ 1]    2     ldw x,y 
      0021E3 EE 01            [ 2]    3     ldw x,(1,x)
      0021E5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021E9 84               [ 1] 2169 	pop a 
      0021EA FA               [ 1] 2170 	or a,(x)
      0021EB F7               [ 1] 2171 	ld (x),a
      0021EC 81               [ 4] 2172 	ret 
                                   2173 
                                   2174 ;---------------------
                                   2175 ; BASIC: BRES addr,mask
                                   2176 ; reset bits at 'addr' corresponding 
                                   2177 ; to those of 'mask' that are at 1.
                                   2178 ; arguments:
                                   2179 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2180 ;   mask	    ~mask&*addr  
                                   2181 ; output:
                                   2182 ;	none 
                                   2183 ;--------------------------
      0021ED                       2184 bit_reset:
      0021ED CD 1A 19         [ 4] 2185 	call arg_list 
      0021F0 A1 02            [ 1] 2186 	cp a,#2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      0021F2 27 03            [ 1] 2187 	jreq 1$ 
      0021F4 CC 16 D7         [ 2] 2188 	jp syntax_error
      0021F7                       2189 1$: 
      0021F7                       2190 	_xpop ; mask 
      0021F7 90 F6            [ 1]    1     ld a,(y)
      0021F9 93               [ 1]    2     ldw x,y 
      0021FA EE 01            [ 2]    3     ldw x,(1,x)
      0021FC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002200 9F               [ 1] 2191 	ld a,xl 
      002201 43               [ 1] 2192 	cpl a
      002202 88               [ 1] 2193 	push a  
      002203                       2194 	_xpop ; addr  
      002203 90 F6            [ 1]    1     ld a,(y)
      002205 93               [ 1]    2     ldw x,y 
      002206 EE 01            [ 2]    3     ldw x,(1,x)
      002208 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00220C 84               [ 1] 2195 	pop a 
      00220D F4               [ 1] 2196 	and a,(x)
      00220E F7               [ 1] 2197 	ld (x),a 
      00220F 81               [ 4] 2198 	ret 
                                   2199 
                                   2200 ;---------------------
                                   2201 ; BASIC: BTOGL addr,mask
                                   2202 ; toggle bits at 'addr' corresponding 
                                   2203 ; to those of 'mask' that are at 1.
                                   2204 ; arguments:
                                   2205 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2206 ;   mask	    mask^*addr  
                                   2207 ; output:
                                   2208 ;	none 
                                   2209 ;--------------------------
      002210                       2210 bit_toggle:
      002210 CD 1A 19         [ 4] 2211 	call arg_list 
      002213 A1 02            [ 1] 2212 	cp a,#2 
      002215 27 03            [ 1] 2213 	jreq 1$ 
      002217 CC 16 D7         [ 2] 2214 	jp syntax_error
      00221A                       2215 1$: _xpop ; mask 
      00221A 90 F6            [ 1]    1     ld a,(y)
      00221C 93               [ 1]    2     ldw x,y 
      00221D EE 01            [ 2]    3     ldw x,(1,x)
      00221F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002223 9F               [ 1] 2216 	ld a,xl
      002224 88               [ 1] 2217 	push a 
      002225                       2218 	_xpop  ; addr  
      002225 90 F6            [ 1]    1     ld a,(y)
      002227 93               [ 1]    2     ldw x,y 
      002228 EE 01            [ 2]    3     ldw x,(1,x)
      00222A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00222E 84               [ 1] 2219 	pop a 
      00222F F8               [ 1] 2220 	xor a,(x)
      002230 F7               [ 1] 2221 	ld (x),a 
      002231 81               [ 4] 2222 	ret 
                                   2223 
                                   2224 
                                   2225 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                   2226 ; BASIC: BTEST(addr,bit)
                                   2227 ; return bit value at 'addr' 
                                   2228 ; bit is in range {0..7}.
                                   2229 ; arguments:
                                   2230 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2231 ;   bit 	    bit position {0..7}  
                                   2232 ; output:
                                   2233 ;	A:X       bit value  
                                   2234 ;--------------------------
      002232                       2235 bit_test:
      002232 CD 1A 14         [ 4] 2236 	call func_args 
      002235 A1 02            [ 1] 2237 	cp a,#2
      002237 27 03            [ 1] 2238 	jreq 0$
      002239 CC 16 D7         [ 2] 2239 	jp syntax_error
      00223C                       2240 0$:	
      00223C                       2241 	_xpop 
      00223C 90 F6            [ 1]    1     ld a,(y)
      00223E 93               [ 1]    2     ldw x,y 
      00223F EE 01            [ 2]    3     ldw x,(1,x)
      002241 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002245 9F               [ 1] 2242 	ld a,xl 
      002246 A4 07            [ 1] 2243 	and a,#7
      002248 88               [ 1] 2244 	push a   
      002249 A6 01            [ 1] 2245 	ld a,#1 
      00224B 0D 01            [ 1] 2246 1$: tnz (1,sp)
      00224D 27 05            [ 1] 2247 	jreq 2$
      00224F 48               [ 1] 2248 	sll a 
      002250 0A 01            [ 1] 2249 	dec (1,sp)
      002252 20 F7            [ 2] 2250 	jra 1$
      002254 6B 01            [ 1] 2251 2$: ld (1,sp),a  
      002256                       2252 	_xpop ; address  
      002256 90 F6            [ 1]    1     ld a,(y)
      002258 93               [ 1]    2     ldw x,y 
      002259 EE 01            [ 2]    3     ldw x,(1,x)
      00225B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00225F 84               [ 1] 2253 	pop a 
      002260 F4               [ 1] 2254 	and a,(x)
      002261 27 02            [ 1] 2255 	jreq 3$
      002263 A6 01            [ 1] 2256 	ld a,#1 
      002265 5F               [ 1] 2257 3$:	clrw x 
      002266 97               [ 1] 2258 	ld xl,a
      002267 4F               [ 1] 2259 	clr a  
      002268 81               [ 4] 2260 	ret
                                   2261 
                                   2262 ;--------------------
                                   2263 ; BASIC: POKE addr,byte
                                   2264 ; put a byte at addr 
                                   2265 ;--------------------
      002269                       2266 poke:
      002269 CD 1A 19         [ 4] 2267 	call arg_list 
      00226C A1 02            [ 1] 2268 	cp a,#2
      00226E 27 03            [ 1] 2269 	jreq 1$
      002270 CC 16 D7         [ 2] 2270 	jp syntax_error
      002273                       2271 1$:	
      002273                       2272 	_xpop ; byte   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      002273 90 F6            [ 1]    1     ld a,(y)
      002275 93               [ 1]    2     ldw x,y 
      002276 EE 01            [ 2]    3     ldw x,(1,x)
      002278 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00227C 9F               [ 1] 2273     ld a,xl 
      00227D 88               [ 1] 2274 	push a 
      00227E                       2275 	_xpop ; address 
      00227E 90 F6            [ 1]    1     ld a,(y)
      002280 93               [ 1]    2     ldw x,y 
      002281 EE 01            [ 2]    3     ldw x,(1,x)
      002283 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002287 84               [ 1] 2276 	pop a 
      002288 F7               [ 1] 2277 	ld (x),a 
      002289 81               [ 4] 2278 	ret 
                                   2279 
                                   2280 ;-----------------------
                                   2281 ; BASIC: PEEK(addr)
                                   2282 ; get the byte at addr 
                                   2283 ; input:
                                   2284 ;	none 
                                   2285 ; output:
                                   2286 ;	X 		value 
                                   2287 ;-----------------------
      00228A                       2288 peek:
      00228A CD 1A 14         [ 4] 2289 	call func_args
      00228D A1 01            [ 1] 2290 	cp a,#1 
      00228F 27 03            [ 1] 2291 	jreq 1$
      002291 CC 16 D7         [ 2] 2292 	jp syntax_error
      002294                       2293 1$: _xpop ; address  
      002294 90 F6            [ 1]    1     ld a,(y)
      002296 93               [ 1]    2     ldw x,y 
      002297 EE 01            [ 2]    3     ldw x,(1,x)
      002299 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00229D C7 00 18         [ 1] 2294 	ld farptr,a 
      0022A0 CF 00 19         [ 2] 2295 	ldw ptr16,x 
      0022A3 92 BC 00 18      [ 5] 2296 	ldf a,[farptr]
      0022A7 5F               [ 1] 2297 	clrw x 
      0022A8 97               [ 1] 2298 	ld xl,a 
      0022A9 4F               [ 1] 2299 	clr a 
      0022AA 81               [ 4] 2300 	ret 
                                   2301 
                                   2302 ;---------------------------
                                   2303 ; BASIC IF expr : instructions
                                   2304 ; evaluate expr and if true 
                                   2305 ; execute instructions on same line. 
                                   2306 ;----------------------------
      0022AB                       2307 if: 
      0022AB CD 1C 74         [ 4] 2308 	call condition  
      0022AE                       2309 	_xpop 
      0022AE 90 F6            [ 1]    1     ld a,(y)
      0022B0 93               [ 1]    2     ldw x,y 
      0022B1 EE 01            [ 2]    3     ldw x,(1,x)
      0022B3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022B7 4D               [ 1] 2310 	tnz  a  
      0022B8 26 0D            [ 1] 2311 	jrne 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0022BA 5D               [ 2] 2312 	tnzw x 
      0022BB 26 0A            [ 1] 2313 	jrne 9$  
                                   2314 ;skip to next line
      0022BD 55 00 02 00 01   [ 1] 2315 	mov in,count
      0022C2                       2316 	_drop 2 
      0022C2 5B 02            [ 2]    1     addw sp,#2 
      0022C4 CC 17 8A         [ 2] 2317 	jp next_line
      0022C7 81               [ 4] 2318 9$:	ret 
                                   2319 
                                   2320 ;------------------------
                                   2321 ; BASIC: FOR var=expr 
                                   2322 ; set variable to expression 
                                   2323 ; leave variable address 
                                   2324 ; on stack and set
                                   2325 ; FLOOP bit in 'flags'
                                   2326 ;-----------------
                           000001  2327 	RETL1=1 ; return address  
                           000003  2328 	FSTEP=3  ; variable increment int24
                           000006  2329 	LIMIT=6 ; loop limit, int24  
                           000009  2330 	CVAR=9   ; control variable 
                           00000B  2331 	INW=11   ;  in.w saved
                           00000D  2332 	BPTR=13 ; baseptr saved
                           00000D  2333 	VSIZE=13  
      0022C8                       2334 for: ; { -- var_addr }
      0022C8 85               [ 2] 2335 	popw x ; call return address 
      0022C9                       2336 	_vars VSIZE 
      0022C9 52 0D            [ 2]    1     sub sp,#VSIZE 
      0022CB 89               [ 2] 2337 	pushw x  ; RETL1 
      0022CC A6 85            [ 1] 2338 	ld a,#TK_VAR 
      0022CE CD 1A 07         [ 4] 2339 	call expect
      0022D1 CD 18 66         [ 4] 2340 	call get_addr
      0022D4 1F 09            [ 2] 2341 	ldw (CVAR,sp),x  ; control variable 
      0022D6 CD 1D 49         [ 4] 2342 	call let_eval 
      0022D9 72 14 00 22      [ 1] 2343 	bset flags,#FLOOP 
      0022DD CD 18 3E         [ 4] 2344 	call next_token 
      0022E0 A1 80            [ 1] 2345 	cp a,#TK_CMD 
      0022E2 27 03            [ 1] 2346 	jreq 1$
      0022E4 CC 16 D7         [ 2] 2347 	jp syntax_error
      0022E7                       2348 1$:  
      0022E7                       2349 	_get_code_addr
      0022E7 FE               [ 2]    1         ldw x,(x)
      0022E8 72 5C 00 01      [ 1]    2         inc in 
      0022EC 72 5C 00 01      [ 1]    3         inc in 
      0022F0 A3 22 F8         [ 2] 2350 	cpw x,#to   
      0022F3 27 03            [ 1] 2351 	jreq to
      0022F5 CC 16 D7         [ 2] 2352 	jp syntax_error 
                                   2353 
                                   2354 ;-----------------------------------
                                   2355 ; BASIC: TO expr 
                                   2356 ; second part of FOR loop initilization
                                   2357 ; leave limit on stack and set 
                                   2358 ; FTO bit in 'flags'
                                   2359 ;-----------------------------------
      0022F8                       2360 to: ; { var_addr -- var_addr limit step }
      0022F8 72 04 00 22 03   [ 2] 2361 	btjt flags,#FLOOP,1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      0022FD CC 16 D7         [ 2] 2362 	jp syntax_error
      002300 CD 1B 5B         [ 4] 2363 1$: call expression   
      002303 A1 84            [ 1] 2364 	cp a,#TK_INTGR 
      002305 27 03            [ 1] 2365 	jreq 2$ 
      002307 CC 16 D7         [ 2] 2366 	jp syntax_error
      00230A                       2367 2$: _xpop
      00230A 90 F6            [ 1]    1     ld a,(y)
      00230C 93               [ 1]    2     ldw x,y 
      00230D EE 01            [ 2]    3     ldw x,(1,x)
      00230F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002313 6B 06            [ 1] 2368 	ld (LIMIT,sp),a 
      002315 1F 07            [ 2] 2369 	ldw (LIMIT+1,sp),x
      002317 CD 18 3E         [ 4] 2370 	call next_token
      00231A A1 00            [ 1] 2371 	cp a,#TK_NONE  
      00231C 27 17            [ 1] 2372 	jreq 4$ 
      00231E A1 80            [ 1] 2373 	cp a,#TK_CMD
      002320 26 0E            [ 1] 2374 	jrne 3$
      002322                       2375 	_get_code_addr
      002322 FE               [ 2]    1         ldw x,(x)
      002323 72 5C 00 01      [ 1]    2         inc in 
      002327 72 5C 00 01      [ 1]    3         inc in 
      00232B A3 23 3E         [ 2] 2376 	cpw x,#step 
      00232E 27 0E            [ 1] 2377 	jreq step
      002330                       2378 3$:	
      002330                       2379 	_unget_token   	 
      002330 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002335                       2380 4$:	
      002335 0F 03            [ 1] 2381 	clr (FSTEP,sp) 
      002337 AE 00 01         [ 2] 2382 	ldw x,#1   ; default step  
      00233A 1F 04            [ 2] 2383 	ldw (FSTEP+1,sp),x 
      00233C 20 2F            [ 2] 2384 	jra store_loop_addr 
                                   2385 
                                   2386 
                                   2387 ;----------------------------------
                                   2388 ; BASIC: STEP expr 
                                   2389 ; optional third par of FOR loop
                                   2390 ; initialization. 	
                                   2391 ;------------------------------------
      00233E                       2392 step: ; {var limit -- var limit step}
      00233E 72 04 00 22 03   [ 2] 2393 	btjt flags,#FLOOP,1$
      002343 CC 16 D7         [ 2] 2394 	jp syntax_error
      002346 CD 1B 5B         [ 4] 2395 1$: call expression 
      002349 A1 84            [ 1] 2396 	cp a,#TK_INTGR
      00234B 27 03            [ 1] 2397 	jreq 2$
      00234D CC 16 D7         [ 2] 2398 	jp syntax_error
      002350                       2399 2$:	
      002350                       2400 	_xpop 
      002350 90 F6            [ 1]    1     ld a,(y)
      002352 93               [ 1]    2     ldw x,y 
      002353 EE 01            [ 2]    3     ldw x,(1,x)
      002355 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002359 6B 03            [ 1] 2401 	ld (FSTEP,sp),a 
      00235B 1F 04            [ 2] 2402 	ldw (FSTEP+1,sp),x ; step
                                   2403 ; if step < 0 decrement LIMIT 
      00235D 4D               [ 1] 2404 	tnz a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      00235E 2A 0D            [ 1] 2405 	jrpl store_loop_addr 
      002360 7B 06            [ 1] 2406 	ld a,(LIMIT,sp)
      002362 1E 07            [ 2] 2407 	ldw x,(LIMIT+1,sp)
      002364 1D 00 01         [ 2] 2408 	subw x,#1 
      002367 A2 00            [ 1] 2409 	sbc a,#0 
      002369 6B 06            [ 1] 2410 	ld (LIMIT,sp),a 
      00236B 1F 07            [ 2] 2411 	ldw (LIMIT+1,sp),x 
                                   2412 ; leave loop back entry point on cstack 
                                   2413 ; cstack is 1 call deep from interpreter
      00236D                       2414 store_loop_addr:
      00236D CE 00 04         [ 2] 2415 	ldw x,basicptr
      002370 1F 0D            [ 2] 2416 	ldw (BPTR,sp),x 
      002372 CE 00 00         [ 2] 2417 	ldw x,in.w 
      002375 1F 0B            [ 2] 2418 	ldw (INW,sp),x   
      002377 72 15 00 22      [ 1] 2419 	bres flags,#FLOOP 
      00237B 72 5C 00 1F      [ 1] 2420 	inc loop_depth  
      00237F 81               [ 4] 2421 	ret 
                                   2422 
                                   2423 ;--------------------------------
                                   2424 ; BASIC: NEXT var 
                                   2425 ; FOR loop control 
                                   2426 ; increment variable with step 
                                   2427 ; and compare with limit 
                                   2428 ; loop if threshold not crossed.
                                   2429 ; else stack. 
                                   2430 ; and decrement 'loop_depth' 
                                   2431 ;--------------------------------
      002380                       2432 next: ; {var limit step retl1 -- [var limit step ] }
      002380 72 5D 00 1F      [ 1] 2433 	tnz loop_depth 
      002384 26 03            [ 1] 2434 	jrne 1$ 
      002386 CC 16 D7         [ 2] 2435 	jp syntax_error 
      002389                       2436 1$: 
      002389 A6 85            [ 1] 2437 	ld a,#TK_VAR 
      00238B CD 1A 07         [ 4] 2438 	call expect
      00238E CD 18 66         [ 4] 2439 	call get_addr 
                                   2440 ; check for good variable after NEXT 	 
      002391 13 09            [ 2] 2441 	cpw x,(CVAR,sp)
      002393 27 03            [ 1] 2442 	jreq 2$  
      002395 CC 16 D7         [ 2] 2443 	jp syntax_error ; not the good one 
      002398                       2444 2$: 
      002398 CF 00 19         [ 2] 2445 	ldw ptr16,x 
                                   2446 	; increment variable 
      00239B F6               [ 1] 2447 	ld a,(x)
      00239C EE 01            [ 2] 2448 	ldw x,(1,x)  ; get var value 
      00239E 72 FB 04         [ 2] 2449 	addw x,(FSTEP+1,sp) ; var+step 
      0023A1 19 03            [ 1] 2450 	adc a,(FSTEP,sp)
      0023A3 72 C7 00 19      [ 4] 2451 	ld [ptr16],a
      0023A7 72 5C 00 1A      [ 1] 2452 	inc ptr8  
      0023AB 72 CF 00 19      [ 5] 2453 	ldw [ptr16],x 
      0023AF C7 00 0C         [ 1] 2454 	ld acc24,a 
      0023B2 CF 00 0D         [ 2] 2455 	ldw acc16,x 
      0023B5 7B 06            [ 1] 2456 	ld a,(LIMIT,sp)
      0023B7 1E 07            [ 2] 2457 	ldw x,(LIMIT+1,sp)
      0023B9 72 B0 00 0D      [ 2] 2458 	subw x,acc16 
      0023BD C2 00 0C         [ 1] 2459 	sbc a,acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0023C0 18 03            [ 1] 2460 	xor a,(FSTEP,sp)
      0023C2 A8 80            [ 1] 2461 	xor a,#0x80
      0023C4 2B 12            [ 1] 2462 	jrmi loop_back  
      0023C6 20 25            [ 2] 2463 	jra loop_done   
                                   2464 ; check sign of STEP  
      0023C8 7B 03            [ 1] 2465 	ld a,(FSTEP,sp)
      0023CA 2A 07            [ 1] 2466 	jrpl 4$
                                   2467 ;negative step
      0023CC C6 00 0E         [ 1] 2468     ld a,acc8 
      0023CF 2F 07            [ 1] 2469 	jrslt loop_back   
      0023D1 20 1A            [ 2] 2470 	jra loop_done  
      0023D3                       2471 4$: ; positive step
      0023D3 72 0E 00 0E 15   [ 2] 2472 	btjt acc8,#7,loop_done 
      0023D8                       2473 loop_back:
      0023D8 1E 0D            [ 2] 2474 	ldw x,(BPTR,sp)
      0023DA CF 00 04         [ 2] 2475 	ldw basicptr,x 
      0023DD 72 01 00 22 05   [ 2] 2476 	btjf flags,#FRUN,1$ 
      0023E2 E6 02            [ 1] 2477 	ld a,(2,x)
      0023E4 C7 00 02         [ 1] 2478 	ld count,a
      0023E7 1E 0B            [ 2] 2479 1$:	ldw x,(INW,sp)
      0023E9 CF 00 00         [ 2] 2480 	ldw in.w,x 
      0023EC 81               [ 4] 2481 	ret 
      0023ED                       2482 loop_done:
                                   2483 	; remove loop data from stack  
      0023ED 85               [ 2] 2484 	popw x
      0023EE                       2485 	_drop VSIZE 
      0023EE 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0023F0 72 5A 00 1F      [ 1] 2486 	dec loop_depth 
      0023F4 FC               [ 2] 2487 	jp (x)
                                   2488 
                                   2489 ;----------------------------
                                   2490 ; called by goto/gosub
                                   2491 ; to get target line number 
                                   2492 ; output:
                                   2493 ;    x    line address 
                                   2494 ;---------------------------
      0023F5                       2495 get_target_line:
      0023F5 CD 18 3E         [ 4] 2496 	call next_token  
      0023F8 A1 84            [ 1] 2497 	cp a,#TK_INTGR
      0023FA 27 07            [ 1] 2498 	jreq get_target_line_addr 
      0023FC A1 03            [ 1] 2499 	cp a,#TK_LABEL 
      0023FE 27 26            [ 1] 2500 	jreq look_target_symbol 
      002400 CC 16 D7         [ 2] 2501 	jp syntax_error
                                   2502 ; the target is a line number 
                                   2503 ; search it. 
      002403                       2504 get_target_line_addr:
      002403 90 89            [ 2] 2505 	pushw y 
      002405 CD 18 70         [ 4] 2506 	call get_int24 ; line # 
      002408 4F               [ 1] 2507 	clr a
      002409 90 CE 00 04      [ 2] 2508 	ldw y,basicptr 
      00240D 90 FE            [ 2] 2509 	ldw y,(y)
      00240F 90 89            [ 2] 2510 	pushw y 
      002411 13 01            [ 2] 2511 	cpw x,(1,sp)
      002413                       2512 	_drop 2  
      002413 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002415 25 01            [ 1] 2513 	jrult 11$
      002417 4C               [ 1] 2514 	inc a 
      002418                       2515 11$: ; scan program for this line# 	
      002418 CD 0C 8D         [ 4] 2516 	call search_lineno  
      00241B 5D               [ 2] 2517 	tnzw x ; 0| line# address 
      00241C 26 05            [ 1] 2518 	jrne 2$ 
      00241E A6 05            [ 1] 2519 	ld a,#ERR_NO_LINE 
      002420 CC 16 D9         [ 2] 2520 	jp tb_error 
      002423 90 85            [ 2] 2521 2$:	popw y  
      002425 81               [ 4] 2522 	ret 
                                   2523 
                                   2524 ; the GOTO|GOSUB target is a symbol.
                                   2525 ; output:
                                   2526 ;    X    line address|0 
      002426                       2527 look_target_symbol:
      002426 90 89            [ 2] 2528 	pushw y 
      002428 89               [ 2] 2529 	pushw x 
      002429 CD 18 57         [ 4] 2530 	call skip_string 
      00242C 72 5F 00 0D      [ 1] 2531 	clr acc16 
      002430 90 CE 00 1B      [ 2] 2532 	ldw y,txtbgn 
      002434 90 E6 03         [ 1] 2533 1$:	ld a,(3,y) ; first TK_ID on line 
      002437 A1 03            [ 1] 2534 	cp a,#TK_LABEL 
      002439 27 15            [ 1] 2535 	jreq 3$ 
      00243B 90 E6 02         [ 1] 2536 2$:	ld a,(2,y); line length 
      00243E C7 00 0E         [ 1] 2537 	ld acc8,a 
      002441 72 B9 00 0D      [ 2] 2538 	addw y,acc16 ;point to next line 
      002445 90 C3 00 1D      [ 2] 2539 	cpw y,txtend 
      002449 25 E9            [ 1] 2540 	jrult 1$
      00244B A6 0A            [ 1] 2541 	ld a,#ERR_BAD_VALUE
      00244D CC 16 D9         [ 2] 2542 	jp tb_error 
      002450                       2543 3$: ; found a TK_LABEL 
                                   2544 	; compare with GOTO|GOSUB target 
      002450 90 89            [ 2] 2545 	pushw y ; line address 
      002452 72 A9 00 04      [ 2] 2546 	addw y,#4 ; label string 
      002456 1E 03            [ 2] 2547 	ldw x,(3,sp) ; target string 
      002458 CD 13 DE         [ 4] 2548 	call strcmp
      00245B 26 04            [ 1] 2549 	jrne 4$
      00245D 90 85            [ 2] 2550 	popw y 
      00245F 20 DA            [ 2] 2551 	jra 2$ 
      002461                       2552 4$: ; target found 
      002461 85               [ 2] 2553 	popw x ;  address line target  
      002462                       2554 	_drop 2 ; target string 
      002462 5B 02            [ 2]    1     addw sp,#2 
      002464 90 85            [ 2] 2555 	popw y 
      002466 81               [ 4] 2556 	ret
                                   2557 
                                   2558 
                                   2559 ;--------------------------------
                                   2560 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2561 ; selective goto or gosub 
                                   2562 ;--------------------------------
      002467                       2563 cmd_on:
      002467 CD 19 FC         [ 4] 2564 	call runtime_only
      00246A CD 1B 5B         [ 4] 2565 0$:	call expression 
      00246D A1 84            [ 1] 2566 	cp a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      00246F 27 03            [ 1] 2567 	jreq 1$
      002471 CC 16 D7         [ 2] 2568 	jp syntax_error
      002474                       2569 1$: _xpop
      002474 90 F6            [ 1]    1     ld a,(y)
      002476 93               [ 1]    2     ldw x,y 
      002477 EE 01            [ 2]    3     ldw x,(1,x)
      002479 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2570 ; the selector is the element indice 
                                   2571 ; in the list of arguments. {1..#elements} 
      00247D 9F               [ 1] 2572 	ld a,xl ; keep only bits 7..0
      00247E 27 68            [ 1] 2573 	jreq 9$ ; element # begin at 1. 
      002480 88               [ 1] 2574 	push a  ; selector  
      002481 CD 18 3E         [ 4] 2575 	call next_token
      002484 A1 80            [ 1] 2576 	cp a,#TK_CMD 
      002486 27 03            [ 1] 2577 	jreq 2$ 
      002488 CC 16 D7         [ 2] 2578 	jp syntax_error 
      00248B                       2579 2$: _get_code_addr
      00248B FE               [ 2]    1         ldw x,(x)
      00248C 72 5C 00 01      [ 1]    2         inc in 
      002490 72 5C 00 01      [ 1]    3         inc in 
                                   2580 ;; must be a GOTO or GOSUB 
      002494 A3 24 F2         [ 2] 2581 	cpw x,#goto 
      002497 27 08            [ 1] 2582 	jreq 4$
      002499 A3 25 05         [ 2] 2583 	cpw x,#gosub 
      00249C 27 03            [ 1] 2584 	jreq 4$ 
      00249E CC 16 D7         [ 2] 2585 	jp syntax_error 
      0024A1                       2586 4$: 
      0024A1 84               [ 1] 2587 	pop a 
      0024A2 89               [ 2] 2588 	pushw x ; save routine address 	
      0024A3 88               [ 1] 2589 	push a  ; selector  
      0024A4                       2590 5$: ; skip elements in list until selector==0 
      0024A4 0A 01            [ 1] 2591 	dec (1,sp)
      0024A6 27 26            [ 1] 2592 	jreq 6$ 
                                   2593 ; can be a line# or a label 
      0024A8 CD 18 3E         [ 4] 2594 	call next_token 
      0024AB A1 84            [ 1] 2595 	cp a,#TK_INTGR 
      0024AD 27 07            [ 1] 2596 	jreq 52$
      0024AF A1 03            [ 1] 2597 	cp a,#TK_LABEL 
      0024B1 27 0D            [ 1] 2598 	jreq 54$
      0024B3 CC 16 D7         [ 2] 2599 	jp syntax_error 
      0024B6                       2600 52$: ; got a line number 
      0024B6 C6 00 01         [ 1] 2601 	ld a,in ; skip over int24 value 
      0024B9 AB 03            [ 1] 2602 	add a,#CELL_SIZE ; integer size  
      0024BB C7 00 01         [ 1] 2603 	ld in,a 
      0024BE 20 03            [ 2] 2604 	jra 56$
      0024C0 CD 18 57         [ 4] 2605 54$: call skip_string ; skip over label 	
      0024C3                       2606 56$: ; if another element comma present 
      0024C3 CD 18 3E         [ 4] 2607 	call next_token
      0024C6 A1 08            [ 1] 2608 	cp a,#TK_COMMA 
      0024C8 27 DA            [ 1] 2609 	jreq 5$ 
                                   2610 ; arg list exhausted, selector to big 
                                   2611 ; continue execution on next line 
      0024CA                       2612 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0024CA 5B 03            [ 2]    1     addw sp,#3 
      0024CC 20 1A            [ 2] 2613 	jra 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0024CE                       2614 6$: ;at selected position  
      0024CE                       2615 	_drop 1 ; discard selector
      0024CE 5B 01            [ 2]    1     addw sp,#1 
                                   2616 ; here only the routine address 
                                   2617 ; of GOTO|GOSUB is on stack 
      0024D0 CD 23 F5         [ 4] 2618     call get_target_line
      0024D3 CF 00 19         [ 2] 2619 	ldw ptr16,x 	
      0024D6 55 00 02 00 01   [ 1] 2620 	mov in,count ; move to end of line  
      0024DB 85               [ 2] 2621 	popw x ; cmd address, GOTO||GOSUB 
      0024DC A3 24 F2         [ 2] 2622 	cpw x,#goto 
      0024DF 26 05            [ 1] 2623 	jrne 7$ 
      0024E1 CE 00 19         [ 2] 2624 	ldw x,ptr16 
      0024E4 20 12            [ 2] 2625 	jra jp_to_target
      0024E6                       2626 7$: 
      0024E6 20 26            [ 2] 2627 	jra gosub_2 ; target in ptr16 
      0024E8                       2628 9$: ; expr out of range skip to end of line
                                   2629     ; this will force a fall to next line  
      0024E8 55 00 02 00 01   [ 1] 2630 	mov in,count
      0024ED                       2631 	_drop 2
      0024ED 5B 02            [ 2]    1     addw sp,#2 
      0024EF CC 17 8A         [ 2] 2632 	jp next_line  
                                   2633 
                                   2634 
                                   2635 ;------------------------
                                   2636 ; BASIC: GOTO line# 
                                   2637 ; jump to line# 
                                   2638 ; here cstack is 2 call deep from interpreter 
                                   2639 ;------------------------
      0024F2                       2640 goto:
      0024F2 CD 19 FC         [ 4] 2641 	call runtime_only
      0024F5                       2642 goto_1:
      0024F5 CD 23 F5         [ 4] 2643 	call get_target_line
      0024F8                       2644 jp_to_target:
      0024F8 CF 00 04         [ 2] 2645 	ldw basicptr,x 
      0024FB E6 02            [ 1] 2646 	ld a,(2,x)
      0024FD C7 00 02         [ 1] 2647 	ld count,a 
      002500 35 03 00 01      [ 1] 2648 	mov in,#3 
      002504 81               [ 4] 2649 	ret 
                                   2650 
                                   2651 
                                   2652 ;--------------------
                                   2653 ; BASIC: GOSUB line#
                                   2654 ; basic subroutine call
                                   2655 ; actual line# and basicptr 
                                   2656 ; are saved on cstack
                                   2657 ; here cstack is 2 call deep from interpreter 
                                   2658 ;--------------------
                           000001  2659 	RET_ADDR=1 ; subroutine return address 
                           000003  2660 	RET_BPTR=3 ; basicptr return point 
                           000005  2661 	RET_INW=5  ; in.w return point 
                           000004  2662 	VSIZE=4 
      002505                       2663 gosub:
      002505 CD 19 FC         [ 4] 2664 	call runtime_only
      002508                       2665 gosub_1:
      002508 CD 23 F5         [ 4] 2666 	call get_target_line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00250B CF 00 19         [ 2] 2667 	ldw ptr16,x
      00250E                       2668 gosub_2: 
      00250E 85               [ 2] 2669 	popw x 
      00250F                       2670 	_vars VSIZE  
      00250F 52 04            [ 2]    1     sub sp,#VSIZE 
      002511 89               [ 2] 2671 	pushw x ; RET_ADDR 
                                   2672 ; save BASIC subroutine return point.   
      002512 CE 00 04         [ 2] 2673 	ldw x,basicptr
      002515 1F 03            [ 2] 2674 	ldw (RET_BPTR,sp),x 
      002517 CE 00 00         [ 2] 2675 	ldw x,in.w 
      00251A 1F 05            [ 2] 2676 	ldw (RET_INW,sp),x
      00251C CE 00 19         [ 2] 2677 	ldw x,ptr16  
      00251F 20 D7            [ 2] 2678 	jra jp_to_target
                                   2679 
                                   2680 ;------------------------
                                   2681 ; BASIC: RETURN 
                                   2682 ; exit from BASIC subroutine 
                                   2683 ;------------------------
      002521                       2684 return:
      002521 CD 19 FC         [ 4] 2685 	call runtime_only
      002524 1E 03            [ 2] 2686 	ldw x,(RET_BPTR,sp) 
      002526 CF 00 04         [ 2] 2687 	ldw basicptr,x
      002529 E6 02            [ 1] 2688 	ld a,(2,x)
      00252B C7 00 02         [ 1] 2689 	ld count,a  
      00252E 1E 05            [ 2] 2690 	ldw x,(RET_INW,sp)
      002530 CF 00 00         [ 2] 2691 	ldw in.w,x 
      002533 85               [ 2] 2692 	popw x 
      002534                       2693 	_drop VSIZE 
      002534 5B 04            [ 2]    1     addw sp,#VSIZE 
      002536 FC               [ 2] 2694 	jp (x)
                                   2695 
                                   2696 ;---------------------------------
                                   2697 ; check if A:X contain the address 
                                   2698 ; of a program in FLASH 
                                   2699 ; output:
                                   2700 ;     Z    set is progam 
                                   2701 ;----------------------------------
      002537                       2702 is_program_addr:
      002537 4D               [ 1] 2703 	tnz a 
      002538 26 0D            [ 1] 2704 	jrne 9$
      00253A A3 38 80         [ 2] 2705 	cpw x,#app_space 
      00253D 25 07            [ 1] 2706 	jrult 8$
      00253F 89               [ 2] 2707 	pushw x 
      002540 CD 28 C8         [ 4] 2708 	call qsign 
      002543 85               [ 2] 2709 	popw x 
      002544 27 01            [ 1] 2710 	jreq 9$ 
      002546 43               [ 1] 2711 8$:	cpl a ; clr Z bit  
      002547 81               [ 4] 2712 9$:	ret 
                                   2713 
                                   2714 ;----------------------------------
                                   2715 ; BASIC: RUN [label]
                                   2716 ; run BASIC program in RAM
                                   2717 ;----------------------------------- 
      002548                       2718 cmd_run: 
      002548 72 01 00 22 02   [ 2] 2719 	btjf flags,#FRUN,0$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      00254D 4F               [ 1] 2720 	clr a 
      00254E 81               [ 4] 2721 	ret
      00254F                       2722 0$: ; check for STOP condition 
      00254F 72 09 00 22 12   [ 2] 2723 	btjf flags,#FBREAK,1$
      002554                       2724 	_drop 2 
      002554 5B 02            [ 2]    1     addw sp,#2 
      002556 CD 20 D9         [ 4] 2725 	call rest_context
      002559                       2726 	_drop CTXT_SIZE 
      002559 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00255B 72 19 00 22      [ 1] 2727 	bres flags,#FBREAK 
      00255F 72 10 00 22      [ 1] 2728 	bset flags,#FRUN 
      002563 CC 17 82         [ 2] 2729 	jp interpreter 
      002566                       2730 1$:	; check for label option 
      002566 CD 18 3E         [ 4] 2731 	call next_token 
      002569 A1 03            [ 1] 2732 	cp a,#TK_LABEL 
      00256B 26 1F            [ 1] 2733 	jrne 3$
      00256D 89               [ 2] 2734 	pushw x 
      00256E CD 18 57         [ 4] 2735 	call skip_string 
      002571 85               [ 2] 2736 	popw x  
      002572 CD 32 23         [ 4] 2737 	call search_program
      002575 26 05            [ 1] 2738 	jrne 2$
      002577 A6 12            [ 1] 2739 	ld a,#ERR_NO_PROGRAM
      002579 CC 16 D9         [ 2] 2740 	jp tb_error 
      00257C CF 00 1B         [ 2] 2741 2$: ldw txtbgn,x 
      00257F 1D 00 02         [ 2] 2742 	subw x,#2 
      002582 FE               [ 2] 2743 	ldw x,(x)
      002583 72 BB 00 1B      [ 2] 2744 	addw x,txtbgn 
      002587 CF 00 1D         [ 2] 2745 	ldw txtend,x 
      00258A 20 19            [ 2] 2746 	jra run_it 	
      00258C                       2747 3$:	_unget_token 
      00258C 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002591 CE 00 1B         [ 2] 2748 	ldw x,txtbgn
      002594 C3 00 1D         [ 2] 2749 	cpw x,txtend 
      002597 2B 0C            [ 1] 2750 	jrmi run_it 
      002599 AE 16 2E         [ 2] 2751 	ldw x,#err_no_prog
      00259C CD 09 A4         [ 4] 2752 	call puts 
      00259F 55 00 02 00 01   [ 1] 2753 	mov in,count
      0025A4 81               [ 4] 2754 	ret 
      0025A5                       2755 run_it:	 
      0025A5                       2756 	_drop 2 ; drop return address 
      0025A5 5B 02            [ 2]    1     addw sp,#2 
      0025A7                       2757 run_it_02: 
      0025A7 CD 1D 28         [ 4] 2758     call ubound 
      0025AA CD 14 43         [ 4] 2759 	call clear_vars
                                   2760 ; initialize DIM variables pointers 
      0025AD CE 00 1D         [ 2] 2761 	ldw x,txtend 
      0025B0 CF 00 2F         [ 2] 2762 	ldw dvar_bgn,x 
      0025B3 CF 00 31         [ 2] 2763 	ldw dvar_end,x 	 
                                   2764 ; clear data pointer 
      0025B6 5F               [ 1] 2765 	clrw x 
      0025B7 CF 00 06         [ 2] 2766 	ldw data_ptr,x 
      0025BA 72 5F 00 08      [ 1] 2767 	clr data_ofs 
      0025BE 72 5F 00 09      [ 1] 2768 	clr data_len 
                                   2769 ; initialize BASIC pointer 
      0025C2 CE 00 1B         [ 2] 2770 	ldw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0025C5 CF 00 04         [ 2] 2771 	ldw basicptr,x 
      0025C8 E6 02            [ 1] 2772 	ld a,(2,x)
      0025CA C7 00 02         [ 1] 2773 	ld count,a
      0025CD 35 03 00 01      [ 1] 2774 	mov in,#3	
      0025D1 72 10 00 22      [ 1] 2775 	bset flags,#FRUN 
      0025D5 CC 17 82         [ 2] 2776 	jp interpreter 
                                   2777 
                                   2778 
                                   2779 ;----------------------
                                   2780 ; BASIC: END
                                   2781 ; end running program
                                   2782 ;---------------------- 
                           000001  2783 	CHAIN_BP=1 
                           000003  2784 	CHAIN_IN=3
                           000005  2785 	CHAIN_TXTBGN=5
                           000007  2786 	CHAIN_TXTEND=7
                           000008  2787 	CHAIN_CNTX_SIZE=8  
      0025D8                       2788 cmd_end: 
      0025D8                       2789 	_drop 2 ; no need for return address 
      0025D8 5B 02            [ 2]    1     addw sp,#2 
                                   2790 ; check for chained program 
      0025DA 72 5D 00 33      [ 1] 2791 	tnz chain_level
      0025DE 27 1D            [ 1] 2792 	jreq 8$
                                   2793 ; restore chain context 
      0025E0 72 5A 00 33      [ 1] 2794 	dec chain_level 
      0025E4 1E 01            [ 2] 2795 	ldw x,(CHAIN_BP,sp) ; chain saved basicptr 
      0025E6 CF 00 04         [ 2] 2796 	ldw basicptr,x 
      0025E9 1E 03            [ 2] 2797 	ldw x,(CHAIN_IN,sp) ; chain saved in and count  
      0025EB CF 00 01         [ 2] 2798 	ldw in,x 
      0025EE 1E 05            [ 2] 2799 	ldw x,(CHAIN_TXTBGN,sp)
      0025F0 CF 00 1B         [ 2] 2800 	ldw txtbgn,x 
      0025F3 1E 07            [ 2] 2801 	ldw x,(CHAIN_TXTEND,sp)
      0025F5 CF 00 1D         [ 2] 2802 	ldw txtend,x 
      0025F8                       2803 	_drop CHAIN_CNTX_SIZE ; CHAIN saved data size  
      0025F8 5B 08            [ 2]    1     addw sp,#CHAIN_CNTX_SIZE 
      0025FA CC 17 82         [ 2] 2804 	jp interpreter 
      0025FD                       2805 8$: ; clean stack 
      0025FD AE 17 FF         [ 2] 2806 	ldw x,#STACK_EMPTY
      002600 94               [ 1] 2807 	ldw sp,x 
      002601 CC 17 63         [ 2] 2808 	jp warm_start
                                   2809 
                                   2810 ;---------------------------
                                   2811 ; BASIC: GET var 
                                   2812 ; receive a key in variable 
                                   2813 ; don't wait 
                                   2814 ;---------------------------
      002604                       2815 cmd_get:
      002604 CD 18 3E         [ 4] 2816 	call next_token 
      002607 A1 85            [ 1] 2817 	cp a,#TK_VAR 
      002609 27 03            [ 1] 2818 	jreq 0$
      00260B CC 16 D7         [ 2] 2819 	jp syntax_error 
      00260E CD 18 66         [ 4] 2820 0$: call get_addr 
      002611 CF 00 19         [ 2] 2821 	ldw ptr16,x 
      002614 CD 09 50         [ 4] 2822 	call qgetc 
      002617 27 03            [ 1] 2823 	jreq 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002619 CD 09 57         [ 4] 2824 	call getc  
      00261C 72 3F 00 19      [ 4] 2825 2$: clr [ptr16]
      002620 72 5C 00 1A      [ 1] 2826 	inc ptr8 
      002624 72 3F 00 19      [ 4] 2827 	clr [ptr16]
      002628 72 5C 00 1A      [ 1] 2828 	inc ptr8 
      00262C 72 C7 00 19      [ 4] 2829 	ld [ptr16],a 
      002630 81               [ 4] 2830 	ret 
                                   2831 
                                   2832 
                                   2833 ;-----------------
                                   2834 ; 1 Khz beep 
                                   2835 ;-----------------
      002631                       2836 beep_1khz:: 
      002631 90 89            [ 2] 2837 	pushw y 
      002633 AE 00 64         [ 2] 2838 	ldw x,#100
      002636 90 AE 03 E8      [ 2] 2839 	ldw y,#1000
      00263A 20 22            [ 2] 2840 	jra beep
                                   2841 
                                   2842 ;-----------------------
                                   2843 ; BASIC: TONE expr1,expr2
                                   2844 ; used TIMER2 channel 1
                                   2845 ; to produce a tone 
                                   2846 ; arguments:
                                   2847 ;    expr1   frequency 
                                   2848 ;    expr2   duration msec.
                                   2849 ;---------------------------
      00263C                       2850 tone:
      00263C 90 89            [ 2] 2851 	pushw y 
      00263E CD 1A 19         [ 4] 2852 	call arg_list 
      002641 A1 02            [ 1] 2853 	cp a,#2 
      002643 27 03            [ 1] 2854 	jreq 1$
      002645 CC 16 D7         [ 2] 2855 	jp syntax_error 
      002648                       2856 1$: 
      002648                       2857 	_xpop 
      002648 90 F6            [ 1]    1     ld a,(y)
      00264A 93               [ 1]    2     ldw x,y 
      00264B EE 01            [ 2]    3     ldw x,(1,x)
      00264D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002651 89               [ 2] 2858 	pushw x ; duration 
      002652                       2859 	_xpop ; frequency
      002652 90 F6            [ 1]    1     ld a,(y)
      002654 93               [ 1]    2     ldw x,y 
      002655 EE 01            [ 2]    3     ldw x,(1,x)
      002657 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00265B 90 93            [ 1] 2860 	ldw y,x ; frequency 
      00265D 85               [ 2] 2861 	popw x  ; duration 
      00265E                       2862 beep:  
      00265E 89               [ 2] 2863 	pushw x 
      00265F AE F4 24         [ 2] 2864 	ldw x,#TIM2_CLK_FREQ
      002662 65               [ 2] 2865 	divw x,y ; cntr=Fclk/freq 
                                   2866 ; round to nearest integer 
      002663 90 A3 7A 12      [ 2] 2867 	cpw y,#TIM2_CLK_FREQ/2
      002667 2B 01            [ 1] 2868 	jrmi 2$
      002669 5C               [ 1] 2869 	incw x 
      00266A                       2870 2$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      00266A 9E               [ 1] 2871 	ld a,xh 
      00266B C7 53 0D         [ 1] 2872 	ld TIM2_ARRH,a 
      00266E 9F               [ 1] 2873 	ld a,xl 
      00266F C7 53 0E         [ 1] 2874 	ld TIM2_ARRL,a 
                                   2875 ; 50% duty cycle 
      002672 8C               [ 1] 2876 	ccf 
      002673 56               [ 2] 2877 	rrcw x 
      002674 9E               [ 1] 2878 	ld a,xh 
      002675 C7 53 0F         [ 1] 2879 	ld TIM2_CCR1H,a 
      002678 9F               [ 1] 2880 	ld a,xl
      002679 C7 53 10         [ 1] 2881 	ld TIM2_CCR1L,a
      00267C 72 10 53 08      [ 1] 2882 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002680 72 10 53 00      [ 1] 2883 	bset TIM2_CR1,#TIM2_CR1_CEN
      002684 72 10 53 04      [ 1] 2884 	bset TIM2_EGR,#TIM2_EGR_UG
      002688 85               [ 2] 2885 	popw x 
      002689 CD 2B 98         [ 4] 2886 	call pause02
      00268C 72 11 53 08      [ 1] 2887 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002690 72 11 53 00      [ 1] 2888 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002694 90 85            [ 2] 2889 	popw y 
      002696 81               [ 4] 2890 	ret 
                                   2891 
                                   2892 ;-------------------------------
                                   2893 ; BASIC: ADCON 0|1 [,divisor]  
                                   2894 ; disable/enanble ADC 
                                   2895 ;-------------------------------
                           000003  2896 	ONOFF=3 
                           000001  2897 	DIVSOR=1
                           000004  2898 	VSIZE=4 
      002697                       2899 power_adc:
      002697 CD 1A 19         [ 4] 2900 	call arg_list 
      00269A A1 02            [ 1] 2901 	cp a,#2	
      00269C 27 12            [ 1] 2902 	jreq 1$
      00269E A1 01            [ 1] 2903 	cp a,#1 
      0026A0 27 03            [ 1] 2904 	jreq 0$ 
      0026A2 CC 16 D7         [ 2] 2905 	jp syntax_error 
      0026A5 4F               [ 1] 2906 0$:	clr a 
      0026A6 5F               [ 1] 2907 	clrw x
      0026A7                       2908 	_xpush   ; divisor  
      0026A7 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0026AB 90 F7            [ 1]    2     ld (y),a 
      0026AD 90 EF 01         [ 2]    3     ldw (1,y),x 
      0026B0                       2909 1$: _at_next 
      0026B0 90 E6 03         [ 1]    1     ld a,(3,y)
      0026B3 93               [ 1]    2     ldw x,y 
      0026B4 EE 04            [ 2]    3     ldw x,(4,x)
      0026B6 5D               [ 2] 2910 	tnzw x 
      0026B7 27 25            [ 1] 2911 	jreq 2$ 
      0026B9                       2912 	_xpop
      0026B9 90 F6            [ 1]    1     ld a,(y)
      0026BB 93               [ 1]    2     ldw x,y 
      0026BC EE 01            [ 2]    3     ldw x,(1,x)
      0026BE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026C2                       2913 	_xdrop  
      0026C2 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0026C6 9F               [ 1] 2914 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0026C7 A4 07            [ 1] 2915 	and a,#7
      0026C9 4E               [ 1] 2916 	swap a 
      0026CA C7 54 01         [ 1] 2917 	ld ADC_CR1,a
      0026CD 72 16 50 CA      [ 1] 2918 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026D1 72 10 54 01      [ 1] 2919 	bset ADC_CR1,#ADC_CR1_ADON 
      0026D5                       2920 	_usec_dly 7 
      0026D5 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0026D8 5A               [ 2]    2     decw x
      0026D9 9D               [ 1]    3     nop 
      0026DA 26 FA            [ 1]    4     jrne .-4
      0026DC 20 08            [ 2] 2921 	jra 3$
      0026DE 72 11 54 01      [ 1] 2922 2$: bres ADC_CR1,#ADC_CR1_ADON
      0026E2 72 17 50 CA      [ 1] 2923 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0026E6                       2924 3$:	
      0026E6 81               [ 4] 2925 	ret
                                   2926 
                                   2927 ;-----------------------------
                                   2928 ; BASIC: ADCREAD (channel)
                                   2929 ; read adc channel {0..5}
                                   2930 ; output:
                                   2931 ;   A 		TK_INTGR 
                                   2932 ;   X 		value 
                                   2933 ;-----------------------------
      0026E7                       2934 analog_read:
      0026E7 CD 1A 14         [ 4] 2935 	call func_args 
      0026EA A1 01            [ 1] 2936 	cp a,#1 
      0026EC 27 03            [ 1] 2937 	jreq 1$
      0026EE CC 16 D7         [ 2] 2938 	jp syntax_error
      0026F1                       2939 1$: _xpop 
      0026F1 90 F6            [ 1]    1     ld a,(y)
      0026F3 93               [ 1]    2     ldw x,y 
      0026F4 EE 01            [ 2]    3     ldw x,(1,x)
      0026F6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026FA A3 00 05         [ 2] 2940 	cpw x,#5 
      0026FD 23 05            [ 2] 2941 	jrule 2$
      0026FF A6 0A            [ 1] 2942 	ld a,#ERR_BAD_VALUE
      002701 CC 16 D9         [ 2] 2943 	jp tb_error 
      002704 9F               [ 1] 2944 2$: ld a,xl
      002705 C7 00 0E         [ 1] 2945 	ld acc8,a 
      002708 A6 05            [ 1] 2946 	ld a,#5
      00270A C0 00 0E         [ 1] 2947 	sub a,acc8 
      00270D C7 54 00         [ 1] 2948 	ld ADC_CSR,a
      002710 72 16 54 02      [ 1] 2949 	bset ADC_CR2,#ADC_CR2_ALIGN
      002714 72 10 54 01      [ 1] 2950 	bset ADC_CR1,#ADC_CR1_ADON
      002718 72 0F 54 00 FB   [ 2] 2951 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00271D CE 54 04         [ 2] 2952 	ldw x,ADC_DRH
      002720 A6 84            [ 1] 2953 	ld a,#TK_INTGR
      002722 81               [ 4] 2954 	ret 
                                   2955 
                                   2956 ;-----------------------
                                   2957 ; BASIC: DREAD(pin)
                                   2958 ; Arduino pins 
                                   2959 ; read state of a digital pin 
                                   2960 ; pin# {0..15}
                                   2961 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



                                   2962 ;    A 		TK_INTGR
                                   2963 ;    X      0|1 
                                   2964 ;-------------------------
                           000001  2965 	PINNO=1
                           000001  2966 	VSIZE=1
      002723                       2967 digital_read:
      002723                       2968 	_vars VSIZE 
      002723 52 01            [ 2]    1     sub sp,#VSIZE 
      002725 CD 1A 14         [ 4] 2969 	call func_args
      002728 A1 01            [ 1] 2970 	cp a,#1
      00272A 27 03            [ 1] 2971 	jreq 1$
      00272C CC 16 D7         [ 2] 2972 	jp syntax_error
      00272F                       2973 1$: _xpop 
      00272F 90 F6            [ 1]    1     ld a,(y)
      002731 93               [ 1]    2     ldw x,y 
      002732 EE 01            [ 2]    3     ldw x,(1,x)
      002734 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002738 A3 00 0F         [ 2] 2974 	cpw x,#15 
      00273B 23 05            [ 2] 2975 	jrule 2$
      00273D A6 0A            [ 1] 2976 	ld a,#ERR_BAD_VALUE
      00273F CC 16 D9         [ 2] 2977 	jp tb_error 
      002742 CD 2C DB         [ 4] 2978 2$:	call select_pin 
      002745 6B 01            [ 1] 2979 	ld (PINNO,sp),a
      002747 E6 01            [ 1] 2980 	ld a,(GPIO_IDR,x)
      002749 0D 01            [ 1] 2981 	tnz (PINNO,sp)
      00274B 27 05            [ 1] 2982 	jreq 8$
      00274D 44               [ 1] 2983 3$: srl a 
      00274E 0A 01            [ 1] 2984 	dec (PINNO,sp)
      002750 26 FB            [ 1] 2985 	jrne 3$ 
      002752 A4 01            [ 1] 2986 8$: and a,#1 
      002754 5F               [ 1] 2987 	clrw x 
      002755 97               [ 1] 2988 	ld xl,a 
      002756 4F               [ 1] 2989 	clr a 
      002757                       2990 	_drop VSIZE
      002757 5B 01            [ 2]    1     addw sp,#VSIZE 
      002759 81               [ 4] 2991 	ret
                                   2992 
                                   2993 
                                   2994 ;-----------------------
                                   2995 ; BASIC: DWRITE pin,0|1
                                   2996 ; Arduino pins 
                                   2997 ; write to a digital pin 
                                   2998 ; pin# {0..15}
                                   2999 ; output:
                                   3000 ;    A 		TK_INTGR
                                   3001 ;    X      0|1 
                                   3002 ;-------------------------
                           000001  3003 	PINNO=1
                           000002  3004 	PINVAL=2
                           000002  3005 	VSIZE=2
      00275A                       3006 digital_write:
      00275A                       3007 	_vars VSIZE 
      00275A 52 02            [ 2]    1     sub sp,#VSIZE 
      00275C CD 1A 19         [ 4] 3008 	call arg_list  
      00275F A1 02            [ 1] 3009 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002761 27 03            [ 1] 3010 	jreq 1$
      002763 CC 16 D7         [ 2] 3011 	jp syntax_error
      002766                       3012 1$: _xpop 
      002766 90 F6            [ 1]    1     ld a,(y)
      002768 93               [ 1]    2     ldw x,y 
      002769 EE 01            [ 2]    3     ldw x,(1,x)
      00276B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00276F 9F               [ 1] 3013 	ld a,xl 
      002770 6B 02            [ 1] 3014 	ld (PINVAL,sp),a
      002772                       3015 	_xpop 
      002772 90 F6            [ 1]    1     ld a,(y)
      002774 93               [ 1]    2     ldw x,y 
      002775 EE 01            [ 2]    3     ldw x,(1,x)
      002777 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00277B A3 00 0F         [ 2] 3016 	cpw x,#15 
      00277E 23 05            [ 2] 3017 	jrule 2$
      002780 A6 0A            [ 1] 3018 	ld a,#ERR_BAD_VALUE
      002782 CC 16 D9         [ 2] 3019 	jp tb_error 
      002785 CD 2C DB         [ 4] 3020 2$:	call select_pin 
      002788 6B 01            [ 1] 3021 	ld (PINNO,sp),a 
      00278A A6 01            [ 1] 3022 	ld a,#1
      00278C 0D 01            [ 1] 3023 	tnz (PINNO,sp)
      00278E 27 05            [ 1] 3024 	jreq 4$
      002790 48               [ 1] 3025 3$: sll a
      002791 0A 01            [ 1] 3026 	dec (PINNO,sp)
      002793 26 FB            [ 1] 3027 	jrne 3$
      002795 0D 02            [ 1] 3028 4$: tnz (PINVAL,sp)
      002797 26 05            [ 1] 3029 	jrne 5$
      002799 43               [ 1] 3030 	cpl a 
      00279A E4 00            [ 1] 3031 	and a,(GPIO_ODR,x)
      00279C 20 02            [ 2] 3032 	jra 8$
      00279E EA 00            [ 1] 3033 5$: or a,(GPIO_ODR,x)
      0027A0 E7 00            [ 1] 3034 8$: ld (GPIO_ODR,x),a 
      0027A2                       3035 	_drop VSIZE 
      0027A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0027A4 81               [ 4] 3036 	ret
                                   3037 
                                   3038 
                                   3039 ;-----------------------
                                   3040 ; BASIC: STOP
                                   3041 ; stop progam execution  
                                   3042 ; without resetting pointers 
                                   3043 ; the program is resumed
                                   3044 ; with RUN 
                                   3045 ;-------------------------
      0027A5                       3046 stop:
      0027A5 72 00 00 22 01   [ 2] 3047 	btjt flags,#FRUN,2$
      0027AA 81               [ 4] 3048 	ret 
      0027AB                       3049 2$:	 
                                   3050 ; create space on cstack to save context 
      0027AB AE 27 D2         [ 2] 3051 	ldw x,#break_point 
      0027AE CD 09 A4         [ 4] 3052 	call puts 
      0027B1                       3053 	_drop 2 ;drop return address 
      0027B1 5B 02            [ 2]    1     addw sp,#2 
      0027B3                       3054 	_vars CTXT_SIZE ; context size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      0027B3 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0027B5 CD 20 C9         [ 4] 3055 	call save_context 
      0027B8 AE 16 68         [ 2] 3056 	ldw x,#tib 
      0027BB CF 00 04         [ 2] 3057 	ldw basicptr,x
      0027BE 7F               [ 1] 3058 	clr (x)
      0027BF 72 5F 00 02      [ 1] 3059 	clr count  
      0027C3 5F               [ 1] 3060 	clrw x 
      0027C4 CF 00 00         [ 2] 3061 	ldw in.w,x
      0027C7 72 11 00 22      [ 1] 3062 	bres flags,#FRUN 
      0027CB 72 18 00 22      [ 1] 3063 	bset flags,#FBREAK
      0027CF CC 17 82         [ 2] 3064 	jp interpreter 
      0027D2 0A 62 72 65 61 6B 20  3065 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3066 
                                   3067 ;-----------------------
                                   3068 ; BASIC: NEW
                                   3069 ; from command line only 
                                   3070 ; free program memory
                                   3071 ; and clear variables 
                                   3072 ;------------------------
      0027F0                       3073 new: 
      0027F0 CD 19 F1         [ 4] 3074 	call cmd_line_only
      0027F3 72 5F 00 22      [ 1] 3075 0$:	clr flags 
      0027F7 CD 14 E3         [ 4] 3076 	call clear_basic 
      0027FA 81               [ 4] 3077 	ret 
                                   3078 
                                   3079 ;-----------------------------------
                                   3080 ; erase program at specified address
                                   3081 ; keep signature and size fields. 
                                   3082 ; signature replaced by "XX"
                                   3083 ; input:
                                   3084 ;    X    address 
                                   3085 ;-----------------------------------
                           000001  3086 	ADDR=1    ; program address
                           000003  3087 	PRG_SIZE=3    ; program size 
                           000005  3088 	BLOCKS=5 ; blocks to erase 
                           000006  3089 	VSIZE=6
      0027FB                       3090 erase_program:
      0027FB 89               [ 2] 3091 	pushw x 
      0027FC CD 18 57         [ 4] 3092 	call skip_string 
      0027FF 85               [ 2] 3093 	popw x 
      002800 CD 32 23         [ 4] 3094 	call search_program 
      002803 27 4A            [ 1] 3095 	jreq 9$
      002805 CD 07 2F         [ 4] 3096 	call move_erase_to_ram
      002808 72 5F 00 18      [ 1] 3097 	clr farptr 
      00280C                       3098 	_vars VSIZE 
      00280C 52 06            [ 2]    1     sub sp,#VSIZE 
      00280E 1D 00 04         [ 2] 3099 1$:	subw x,#4 
      002811 1F 01            [ 2] 3100 	ldw (ADDR,sp),x
      002813 EE 02            [ 2] 3101 	ldw x,(2,x)
      002815 1F 03            [ 2] 3102 	ldw (PRG_SIZE,sp),x
      002817 A6 80            [ 1] 3103 	ld a,#BLOCK_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002819 62               [ 2] 3104 	div x,a 
      00281A 4D               [ 1] 3105 	tnz a 
      00281B 27 01            [ 1] 3106 	jreq 2$ 
      00281D 5C               [ 1] 3107 	incw x 
      00281E 1F 05            [ 2] 3108 2$:	ldw (BLOCKS,sp),x 
      002820 1E 01            [ 2] 3109 	ldw x,(ADDR,sp)
      002822 CF 00 19         [ 2] 3110 	ldw ptr16,x 
      002825 CD 07 AD         [ 4] 3111 3$:	call block_erase
      002828 AE 00 80         [ 2] 3112 	ldw x,#BLOCK_SIZE 
      00282B CD 08 A8         [ 4] 3113 	call incr_farptr
      00282E 1E 05            [ 2] 3114 	ldw x,(BLOCKS,sp)
      002830 5A               [ 2] 3115 	decw x 
      002831 1F 05            [ 2] 3116 	ldw (BLOCKS,sp),x 
      002833 26 F0            [ 1] 3117 	jrne 3$ 
                                   3118 ; write XX and size at addr 
      002835 1E 01            [ 2] 3119 	ldw x,(ADDR,sp)
      002837 CF 00 19         [ 2] 3120 	ldw ptr16,x 
      00283A A6 58            [ 1] 3121 	ld a,#'X 
      00283C 5F               [ 1] 3122 	clrw x 
      00283D CD 07 D3         [ 4] 3123 	call write_byte 
      002840 CD 07 D3         [ 4] 3124 	call write_byte 
      002843 7B 03            [ 1] 3125 	ld a,(PRG_SIZE,sp)
      002845 CD 07 D3         [ 4] 3126 	call write_byte 
      002848 7B 04            [ 1] 3127 	ld a,(PRG_SIZE+1,sp)
      00284A CD 07 D3         [ 4] 3128 	call write_byte 
      00284D                       3129 	_drop VSIZE 
      00284D 5B 06            [ 2]    1     addw sp,#VSIZE 
      00284F                       3130 9$:	
      00284F 81               [ 4] 3131 	ret 
                                   3132 
                                   3133 ;-----------------------------------
                                   3134 ; BASIC: ERASE \E | \F || address
                                   3135 ; erase all block in range from 
                                   3136 ;  'app_space' to FLASH end (0x27fff)
                                   3137 ;  or all EEPROM 
                                   3138 ; that contains a non zero byte. 
                                   3139 ; if the argument is an address  
                                   3140 ; mark the program at this address 
                                   3141 ; as erased. Erase the blocks 
                                   3142 ; replace signature by 'XX' and 
                                   3143 ; keep size field.  
                                   3144 ;-----------------------------------
                           000001  3145 	LIMIT=1 
                           000003  3146 	VSIZE = 3 
      002850                       3147 cmd_erase:
      002850 CD 19 F1         [ 4] 3148 	call cmd_line_only
      002853 72 5F 00 18      [ 1] 3149 	clr farptr 
      002857 CD 18 3E         [ 4] 3150 	call next_token
      00285A A1 03            [ 1] 3151 	cp a,#TK_LABEL 
      00285C 27 9D            [ 1] 3152 	jreq erase_program  
      00285E                       3153 	_vars VSIZE 
      00285E 52 03            [ 2]    1     sub sp,#VSIZE 
      002860 A1 04            [ 1] 3154 	cp a,#TK_CHAR 
      002862 27 03            [ 1] 3155 	jreq 0$ 
      002864 CC 16 D7         [ 2] 3156 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002867 CD 18 80         [ 4] 3157 0$: call get_char 
      00286A A4 DF            [ 1] 3158 	and a,#0XDF 
      00286C A1 45            [ 1] 3159 	cp a,#'E
      00286E 26 0C            [ 1] 3160 	jrne 1$
      002870 AE 40 00         [ 2] 3161 	ldw x,#EEPROM_BASE 
      002873 CF 00 19         [ 2] 3162 	ldw farptr+1,x 
      002876 AE 47 FF         [ 2] 3163 	ldw x,#EEPROM_END
      002879 4F               [ 1] 3164 	clr a 
      00287A 20 15            [ 2] 3165 	jra 3$ 
      00287C A1 46            [ 1] 3166 1$: cp a,#'F 
      00287E 27 06            [ 1] 3167 	jreq 2$
      002880 AE 15 DF         [ 2] 3168 	ldw x,#err_bad_value
      002883 CC 16 D9         [ 2] 3169 	jp tb_error
      002886                       3170 2$:
      002886 AE 38 80         [ 2] 3171 	ldw x,#app_space  
      002889 CF 00 19         [ 2] 3172 	ldw farptr+1,x 
      00288C A6 02            [ 1] 3173 	ld a,#(FLASH_END>>16)&0XFF 
      00288E AE 7F FF         [ 2] 3174 	ldw x,#FLASH_END&0xffff
      002891                       3175 3$:
      002891 6B 01            [ 1] 3176 	ld (LIMIT,sp),a 
      002893 1F 02            [ 2] 3177 	ldw (LIMIT+1,sp),x 
                                   3178 ; operation done from RAM
                                   3179 ; copy code to RAM in tib   
      002895 CD 07 2F         [ 4] 3180 	call move_erase_to_ram
      002898                       3181 4$:	 
      002898 CD 08 B6         [ 4] 3182     call scan_block 
      00289B 27 08            [ 1] 3183 	jreq 5$  ; block already erased 
      00289D A6 45            [ 1] 3184     ld a,#'E 
      00289F CD 09 47         [ 4] 3185     call putc 
      0028A2 CD 07 AD         [ 4] 3186 	call block_erase   
                                   3187 ; this block is clean, next  
      0028A5 AE 00 80         [ 2] 3188 5$:	ldw x,#BLOCK_SIZE
      0028A8 CD 08 A8         [ 4] 3189 	call incr_farptr
                                   3190 ; check limit, 24 bit substraction  	
      0028AB 7B 01            [ 1] 3191 	ld a,(LIMIT,sp)
      0028AD 1E 02            [ 2] 3192 	ldw x,(LIMIT+1,sp)
      0028AF 72 B0 00 19      [ 2] 3193 	subw x,farptr+1
      0028B3 C2 00 18         [ 1] 3194 	sbc a,farptr 
      0028B6 22 E0            [ 1] 3195 	jrugt 4$ 
      0028B8 CD 14 E3         [ 4] 3196 9$: call clear_basic
      0028BB 1E 02            [ 2] 3197 	ldw x,(LIMIT+1,sp)
      0028BD A3 47 FF         [ 2] 3198 	cpw x,#EEPROM_END
      0028C0 26 03            [ 1] 3199 	jrne 10$
      0028C2 CD 1D 87         [ 4] 3200 	call func_eefree 
      0028C5                       3201 10$:
      0028C5                       3202 	_drop VSIZE 
      0028C5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0028C7 81               [ 4] 3203 	ret 
                                   3204 	
                                   3205 
                                   3206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3207 ;  check for application signature 
                                   3208 ; input:
                                   3209 ;	x       address to check 
                                   3210 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



                                   3211 ;   Z      1  signature present 
                                   3212 ;          0 not app signature  
                                   3213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C8                       3214 qsign: 
      0028C8 89               [ 2] 3215 	pushw x 
                                   3216 ; align to block 
      0028C9 9F               [ 1] 3217 	ld a,xl 
      0028CA A4 80            [ 1] 3218 	and a,#BLOCK_SIZE 
      0028CC 97               [ 1] 3219 	ld xl,a 
      0028CD FE               [ 2] 3220 	ldw x,(x)
      0028CE C3 29 E3         [ 2] 3221 	cpw x,SIGNATURE ; "TB" 
      0028D1 85               [ 2] 3222 	popw x 
      0028D2 81               [ 4] 3223 	ret 
                                   3224 
                                   3225 ;--------------------------------------
                                   3226 ;  fill write buffer 
                                   3227 ;  input:
                                   3228 ;    y  point to output buffer 
                                   3229 ;    x  point to source 
                                   3230 ;    a  bytes to write in buffer 
                                   3231 ;  output:
                                   3232 ;    y   += A 
                                   3233 ;    X   += A 
                                   3234 ;    A   0 
                                   3235 ;---------------------------------------
      0028D3                       3236 fill_write_buffer:
      0028D3 88               [ 1] 3237 	push a 
      0028D4 4D               [ 1] 3238 	tnz a 
      0028D5 27 0A            [ 1] 3239 	jreq 9$ 
      0028D7 F6               [ 1] 3240 1$: ld a,(x)
      0028D8 5C               [ 1] 3241 	incw x 
      0028D9 90 F7            [ 1] 3242 	ld (y),a 
      0028DB 90 5C            [ 1] 3243 	incw y 
      0028DD 0A 01            [ 1] 3244 	dec (1,sp) 
      0028DF 26 F6            [ 1] 3245 	jrne 1$ 
      0028E1 84               [ 1] 3246 9$:	pop a 
      0028E2 81               [ 4] 3247     ret 	
                                   3248 
                                   3249 ;--------------------------------------
                                   3250 ;  fill pad buffer with zero 
                                   3251 ;  input:
                                   3252 ;	none 
                                   3253 ;  output:
                                   3254 ;    y     buffer address  
                                   3255 ;--------------------------------------
      0028E3                       3256 clear_block_buffer:
      0028E3 88               [ 1] 3257 	push a 
      0028E4 90 AE 16 B8      [ 2] 3258 	ldw y,#block_buffer 
      0028E8 90 89            [ 2] 3259 	pushw y
      0028EA A6 80            [ 1] 3260 	ld a,#BLOCK_SIZE   
      0028EC 90 7F            [ 1] 3261 1$:	clr (y)
      0028EE 90 5C            [ 1] 3262 	incw y
      0028F0 4A               [ 1] 3263 	dec a  
      0028F1 26 F9            [ 1] 3264 	jrne 1$ 	
      0028F3 90 85            [ 2] 3265 9$: popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0028F5 84               [ 1] 3266 	pop a 			
      0028F6 81               [ 4] 3267 	ret 
                                   3268 
                                   3269 
                                   3270 ;----------------------------------
                                   3271 ;  search  a free space space that 
                                   3272 ;  fit program size 
                                   3273 ; input:
                                   3274 ;    X    program size 
                                   3275 ; output:
                                   3276 ;    X    address | 0 
                                   3277 ;------------------------------------
                           000001  3278 	PG_SIZE=1 
                           000002  3279 	VSIZE=2 
      0028F7                       3280 search_fit:
      0028F7 89               [ 2] 3281 	pushw x; PG_SIZE 
      0028F8 AE 38 80         [ 2] 3282 	ldw x,#app_space 
      0028FB CD 29 E7         [ 4] 3283 1$:	call is_erased 
      0028FE 27 0D            [ 1] 3284 	jreq 4$
      002900 F6               [ 1] 3285 	ld a,(x)
      002901 EA 01            [ 1] 3286 	or a,(1,x)
      002903 27 23            [ 1] 3287 	jreq 9$ ; free space 
      002905 CD 29 F2         [ 4] 3288 2$:	call skip_to_next
      002908 5D               [ 2] 3289 	tnzw x 
      002909 26 F0            [ 1] 3290 	jrne 1$
      00290B 20 1B            [ 2] 3291 	jra 9$
      00290D                       3292 4$: ; erased program 
                                   3293     ; does it fit? 
      00290D CF 00 0D         [ 2] 3294 	ldw acc16,x 
      002910 EE 02            [ 2] 3295 	ldw x,(2,x) ; size erased program
                                   3296 ; top multiple of BLOCK_SIZE 
      002912 1C 00 04         [ 2] 3297 	addw x,#4 
      002915 1C 00 7F         [ 2] 3298 	addw x,#BLOCK_SIZE-1 
      002918 9F               [ 1] 3299 	ld a,xl 
      002919 A4 80            [ 1] 3300 	and a,#BLOCK_SIZE 
      00291B 97               [ 1] 3301 	ld xl,a  
      00291C 13 01            [ 2] 3302 	cpw x,(1,sp) ; size program to save 
      00291E 24 05            [ 1] 3303 	jruge 8$   ; fit 
      002920 CE 00 0D         [ 2] 3304 	ldw x,acc16 
      002923 20 E0            [ 2] 3305 	jra 2$ 
      002925 CE 00 0D         [ 2] 3306 8$: ldw x,acc16 ; fit in this one 	
      002928                       3307 9$:	_drop VSIZE 
      002928 5B 02            [ 2]    1     addw sp,#VSIZE 
      00292A 81               [ 4] 3308 	ret  
                                   3309 
                                   3310 ;-------------------------
                                   3311 ; erase header and 
                                   3312 ; size fields 
                                   3313 ; input: 
                                   3314 ;    X    program address 
                                   3315 ; output:
                                   3316 ;    X    unchanged 
                                   3317 ;-------------------------
                           000001  3318 	COUNT=1 
      00292B                       3319 erase_header:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



      00292B 89               [ 2] 3320 	pushw x 
      00292C 4B 04            [ 1] 3321 	push #4 ; COUNT 
      00292E 72 5F 00 18      [ 1] 3322 	clr farptr 
      002932 CF 00 19         [ 2] 3323 	ldw ptr16,x 
      002935 4F               [ 1] 3324 	clr a 
      002936 5F               [ 1] 3325 	clrw x 
      002937 CD 07 D3         [ 4] 3326 1$:	call write_byte 
      00293A 0A 01            [ 1] 3327 	dec (COUNT,sp)
      00293C 26 F9            [ 1] 3328 	jrne 1$
      00293E                       3329 	_drop 1 
      00293E 5B 01            [ 2]    1     addw sp,#1 
      002940 85               [ 2] 3330 	popw x 
      002941 CF 00 19         [ 2] 3331 	ldw ptr16,x 
      002944 81               [ 4] 3332 	ret 
                                   3333 
                                   3334 ;---------------------------------------
                                   3335 ; BASIC: SAVE
                                   3336 ; write application from RAM to FLASH
                                   3337 ; at UFLASH address
                                   3338 ;--------------------------------------
                           000001  3339 	XTEMP=1
                           000003  3340 	COUNT=3  ; last count bytes written 
                           000004  3341 	CNT_LO=4 ; count low byte 
                           000005  3342 	TOWRITE=5 ; how bytes left to write  
                           000006  3343 	VSIZE=6 
      002945                       3344 cmd_save:
      002945 CD 19 F1         [ 4] 3345 	call cmd_line_only
      002948 89               [ 2] 3346 	pushw x 
      002949 90 89            [ 2] 3347 	pushw y 
      00294B                       3348 	_vars VSIZE
      00294B 52 06            [ 2]    1     sub sp,#VSIZE 
      00294D CD 1E 93         [ 4] 3349 	call prog_size 
      002950 26 03            [ 1] 3350 	jrne 0$ 
      002952 CC 29 DD         [ 2] 3351 	jp 9$ ; no program to save 
      002955 1F 05            [ 2] 3352 0$:	ldw (TOWRITE,sp),x ; program size
      002957 72 5F 00 18      [ 1] 3353 	clr farptr 
      00295B CD 28 F7         [ 4] 3354 	call search_fit
      00295E CF 00 19         [ 2] 3355 	ldw ptr16,x 
      002961 AE FF FF         [ 2] 3356 	ldw x,#0xFFFF
      002964 72 B0 00 19      [ 2] 3357 	subw x,ptr16 ; free flash 
      002968 1D 00 04         [ 2] 3358 	subw x,#4 ; signature and size field 
      00296B 13 05            [ 2] 3359 	cpw x,(TOWRITE,sp)
      00296D 24 05            [ 1] 3360 	jruge 1$
      00296F A6 01            [ 1] 3361 	ld a,#ERR_MEM_FULL
      002971 CC 16 D9         [ 2] 3362 	jp tb_error 
      002974                       3363 1$: ; check if header bytes are zero's 
      002974 CE 00 19         [ 2] 3364 	ldw x,ptr16 
      002977 F6               [ 1] 3365 	ld a,(x)
      002978 EA 01            [ 1] 3366 	or a,(1,x)
      00297A EA 02            [ 1] 3367 	or a,(2,x)
      00297C EA 03            [ 1] 3368 	or a,(3,x)
      00297E 27 03            [ 1] 3369 	jreq 2$
      002980 CD 29 2B         [ 4] 3370 	call erase_header ; preserve X and farptr 
      002983                       3371 2$: 
                                   3372 ; block programming flash
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3373 ; must be done from RAM
                                   3374 ; moved in tib  
      002983 CD 07 6F         [ 4] 3375 	call move_prg_to_ram
                                   3376 ; initialize written bytes count  
      002986 0F 03            [ 1] 3377 	clr (COUNT,sp)
                                   3378 ; first bock 
                                   3379 ; containt signature 2 bytes 
                                   3380 ; and size 	2 bytes 
                                   3381 ; use Y as pointer to block_buffer
      002988 CD 28 E3         [ 4] 3382 	call clear_block_buffer ; -- y=*block_buffer	
                                   3383 ; write signature
      00298B CE 29 E3         [ 2] 3384 	ldw x,SIGNATURE ; "TB" 
      00298E 90 FF            [ 2] 3385 	ldw (y),x 
      002990 72 A9 00 02      [ 2] 3386 	addw y,#2
      002994 1E 05            [ 2] 3387 	ldw x,(TOWRITE,sp)
      002996 90 FF            [ 2] 3388 	ldw (y),x
      002998 72 A9 00 02      [ 2] 3389 	addw y,#2   
      00299C A6 7C            [ 1] 3390 	ld a,#(BLOCK_SIZE-4)
      00299E A3 00 7C         [ 2] 3391 	cpw x,#(BLOCK_SIZE-4) 
      0029A1 22 01            [ 1] 3392 	jrugt 3$
      0029A3 9F               [ 1] 3393 	ld a,xl 
      0029A4 6B 04            [ 1] 3394 3$:	ld (CNT_LO,sp),a   
      0029A6 CE 00 1B         [ 2] 3395 	ldw x,txtbgn 
      0029A9 1F 01            [ 2] 3396 	ldw (XTEMP,sp),x 
      0029AB                       3397 32$: 
      0029AB 1E 01            [ 2] 3398 	ldw x,(XTEMP,sp)
      0029AD 7B 04            [ 1] 3399 	ld a,(CNT_LO,sp)
      0029AF CD 28 D3         [ 4] 3400 	call fill_write_buffer 
      0029B2 1F 01            [ 2] 3401 	ldw (XTEMP,sp),x 
      0029B4 AE 16 B8         [ 2] 3402 	ldw x,#block_buffer
      0029B7 CD 07 89         [ 4] 3403 	call write_buffer
      0029BA AE 00 80         [ 2] 3404 	ldw x,#BLOCK_SIZE 
      0029BD CD 08 A8         [ 4] 3405 	call incr_farptr  
                                   3406 ; following blocks 
      0029C0 1E 01            [ 2] 3407 	ldw x,(XTEMP,sp)
      0029C2 C3 00 1D         [ 2] 3408 	cpw x,txtend 
      0029C5 24 16            [ 1] 3409 	jruge 9$ 
      0029C7 1E 05            [ 2] 3410 	ldw x,(TOWRITE,sp)
      0029C9 72 F0 03         [ 2] 3411 	subw x,(COUNT,sp)
      0029CC 1F 05            [ 2] 3412 	ldw (TOWRITE,sp),x 
      0029CE A6 80            [ 1] 3413 	ld a,#BLOCK_SIZE 
      0029D0 A3 00 80         [ 2] 3414 	cpw x,#BLOCK_SIZE 
      0029D3 24 01            [ 1] 3415 	jruge 4$ 
      0029D5 9F               [ 1] 3416 	ld a,xl 
      0029D6 6B 04            [ 1] 3417 4$:	ld (CNT_LO,sp),a 
      0029D8 CD 28 E3         [ 4] 3418 	call clear_block_buffer 
      0029DB 20 CE            [ 2] 3419 	jra 32$ 
      0029DD                       3420 9$:	_drop VSIZE 
      0029DD 5B 06            [ 2]    1     addw sp,#VSIZE 
      0029DF 90 85            [ 2] 3421     popw y 
      0029E1 85               [ 2] 3422 	popw x 
      0029E2 81               [ 4] 3423 	ret 
                                   3424 
      0029E3 54 42                 3425 SIGNATURE: .ascii "TB"
      0029E5 58 58                 3426 ERASED: .ascii "XX" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3427 
                                   3428 ;---------------------
                                   3429 ; check if there is 
                                   3430 ; an erased program 
                                   3431 ; at this address 
                                   3432 ; input:
                                   3433 ;    X    address 
                                   3434 ; output:
                                   3435 ;    Z    Set=erased program 
                                   3436 ;--------------------
      0029E7                       3437 is_erased:
      0029E7 89               [ 2] 3438 	pushw x 
                                   3439 ; align to BLOCK 
      0029E8 9F               [ 1] 3440 	ld a,xl 
      0029E9 A4 80            [ 1] 3441 	and a,#BLOCK_SIZE 
      0029EB 97               [ 1] 3442 	ld xl,a 
      0029EC FE               [ 2] 3443 	ldw x,(x)
      0029ED C3 29 E5         [ 2] 3444 	cpw x,ERASED 
      0029F0 85               [ 2] 3445 	popw x 
      0029F1 81               [ 4] 3446 	ret 
                                   3447 
                                   3448 ;----------------------------
                                   3449 ;  skip to next program
                                   3450 ;  block 
                                   3451 ; input:
                                   3452 ;    X   actual program addr
                                   3453 ; output:
                                   3454 ;    X   next block 
                                   3455 ;        after program 
                                   3456 ;----------------------------
      0029F2                       3457 skip_to_next:
                                   3458 ; align to block 
      0029F2 9F               [ 1] 3459 	ld a,xl 
      0029F3 A4 80            [ 1] 3460 	and a,#BLOCK_SIZE 
      0029F5 97               [ 1] 3461 	ld xl,a 
      0029F6 CF 00 0D         [ 2] 3462 	ldw acc16,x 
      0029F9 EE 02            [ 2] 3463 	ldw x,(2,x)
      0029FB 72 BB 00 0D      [ 2] 3464 	addw x,acc16 ; blk_addr+prg_size 
      0029FF 1C 00 04         [ 2] 3465 	addw x,#4 ; +header fields 
                                   3466 ; align to next block 
      002A02 1C 00 7F         [ 2] 3467 	addw x,#BLOCK_SIZE-1 
      002A05 9F               [ 1] 3468 	ld a,xl 
      002A06 A4 80            [ 1] 3469 	and a,#0x80 
      002A08 97               [ 1] 3470 	ld xl,a  
      002A09 81               [ 4] 3471 	ret 
                                   3472 
                                   3473 
                                   3474 ;---------------------
                                   3475 ; BASIC: DIR 
                                   3476 ; list programs saved 
                                   3477 ; in flash 
                                   3478 ;--------------------
                           000001  3479 	XTEMP=1 
      002A0A                       3480 cmd_dir:
      002A0A CD 19 F1         [ 4] 3481 	call cmd_line_only
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002A0D AE 38 80         [ 2] 3482 	ldw x,#app_space 
      002A10 89               [ 2] 3483 	pushw x 
      002A11                       3484 1$: 
      002A11 CD 28 C8         [ 4] 3485 	call qsign 
      002A14 26 3B            [ 1] 3486 	jrne 4$
      002A16 1C 00 04         [ 2] 3487 	addw x,#4
      002A19 35 10 00 0A      [ 1] 3488 	mov base,#16
      002A1D CD 18 86         [ 4] 3489 	call prt_i16
      002A20 A6 20            [ 1] 3490 	ld a,#SPACE 
      002A22 CD 09 47         [ 4] 3491 	call putc 
      002A25 1E 01            [ 2] 3492 	ldw x,(1,sp)
      002A27 EE 02            [ 2] 3493 	ldw x,(2,x)
      002A29 35 0A 00 0A      [ 1] 3494 	mov base,#10  
      002A2D CD 18 86         [ 4] 3495 	call prt_i16 
      002A30 AE 1E FD         [ 2] 3496 	ldw x,#STR_BYTES
      002A33 CD 09 A4         [ 4] 3497 	call puts
      002A36 A6 2C            [ 1] 3498 	ld a,#', 
      002A38 CD 09 47         [ 4] 3499 	call putc
      002A3B 1E 01            [ 2] 3500 	ldw x,(1,sp)
      002A3D 1C 00 08         [ 2] 3501 	addw x,#8
      002A40 CD 09 A4         [ 4] 3502 	call puts 
      002A43 A6 0D            [ 1] 3503 	ld a,#CR 
      002A45 CD 09 47         [ 4] 3504 	call putc
      002A48 1E 01            [ 2] 3505 	ldw x,(1,sp)
      002A4A CD 29 F2         [ 4] 3506 3$:	call skip_to_next
      002A4D 1F 01            [ 2] 3507 	ldw (1,sp),x 
      002A4F 20 C0            [ 2] 3508 	jra 1$
      002A51                       3509 4$: ; check if it is an erased program 
      002A51 CD 29 E7         [ 4] 3510 	call is_erased 
      002A54 27 F4            [ 1] 3511 	jreq 3$ 
      002A56                       3512 8$: ; done 
      002A56                       3513 	_drop 2 
      002A56 5B 02            [ 2]    1     addw sp,#2 
      002A58 81               [ 4] 3514 	ret 
                                   3515 
                                   3516 ;---------------------
                                   3517 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3518 ; write 1 or more byte to FLASH or EEPROM
                                   3519 ; starting at address  
                                   3520 ; input:
                                   3521 ;   expr1  	is address 
                                   3522 ;   expr2,...,exprn   are bytes to write
                                   3523 ; output:
                                   3524 ;   none 
                                   3525 ;---------------------
      002A59                       3526 write:
      002A59 CD 1B 5B         [ 4] 3527 	call expression
      002A5C A1 84            [ 1] 3528 	cp a,#TK_INTGR 
      002A5E 27 03            [ 1] 3529 	jreq 0$
      002A60 CC 16 D7         [ 2] 3530 	jp syntax_error
      002A63                       3531 0$: _xpop 
      002A63 90 F6            [ 1]    1     ld a,(y)
      002A65 93               [ 1]    2     ldw x,y 
      002A66 EE 01            [ 2]    3     ldw x,(1,x)
      002A68 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      002A6C C7 00 18         [ 1] 3532 	ld farptr,a 
      002A6F CF 00 19         [ 2] 3533 	ldw ptr16,x 
      002A72                       3534 1$:	
      002A72 CD 18 3E         [ 4] 3535 	call next_token 
      002A75 A1 08            [ 1] 3536 	cp a,#TK_COMMA 
      002A77 27 02            [ 1] 3537 	jreq 2$ 
      002A79 20 46            [ 2] 3538 	jra 9$ ; no more data 
      002A7B CD 18 3E         [ 4] 3539 2$:	call next_token 
      002A7E A1 04            [ 1] 3540 	cp a,#TK_CHAR 
      002A80 27 23            [ 1] 3541 	jreq 4$ 
      002A82 A1 02            [ 1] 3542 	cp a,#TK_QSTR
      002A84 27 2A            [ 1] 3543 	jreq 6$
      002A86                       3544 	_unget_token 
      002A86 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002A8B CD 1B 5B         [ 4] 3545 	call expression
      002A8E A1 84            [ 1] 3546 	cp a,#TK_INTGR
      002A90 27 03            [ 1] 3547 	jreq 3$
      002A92 CC 16 D7         [ 2] 3548 	jp syntax_error
      002A95                       3549 3$:	_xpop 
      002A95 90 F6            [ 1]    1     ld a,(y)
      002A97 93               [ 1]    2     ldw x,y 
      002A98 EE 01            [ 2]    3     ldw x,(1,x)
      002A9A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A9E 9F               [ 1] 3550 	ld a,xl 
      002A9F 5F               [ 1] 3551 	clrw x 
      002AA0 CD 07 D3         [ 4] 3552 	call write_byte
      002AA3 20 CD            [ 2] 3553 	jra 1$ 
      002AA5                       3554 4$: ; write character 
      002AA5 F6               [ 1] 3555 	ld a,(x)
      002AA6 72 5C 00 01      [ 1] 3556 	inc in 
      002AAA 5F               [ 1] 3557 	clrw x 
      002AAB CD 07 D3         [ 4] 3558 	call write_byte 
      002AAE 20 C2            [ 2] 3559 	jra 1$ 
      002AB0                       3560 6$: ; write string 
      002AB0 89               [ 2] 3561 	pushw x 
      002AB1 F6               [ 1] 3562 	ld a,(x)
      002AB2 72 5C 00 01      [ 1] 3563 	inc in 
      002AB6 5F               [ 1] 3564 	clrw x 
      002AB7 CD 07 D3         [ 4] 3565 	call write_byte 
      002ABA 85               [ 2] 3566 	popw x 
      002ABB F6               [ 1] 3567 	ld a,(x)
      002ABC 27 B4            [ 1] 3568 	jreq 1$
      002ABE 5C               [ 1] 3569 	incw x 
      002ABF 20 EF            [ 2] 3570 	jra 6$ 	
      002AC1                       3571 9$:
      002AC1 81               [ 4] 3572 	ret 
                                   3573 
                                   3574 
                                   3575 ;---------------------
                                   3576 ;BASIC: CHAR(expr)
                                   3577 ; évaluate expression 
                                   3578 ; and take the 7 least 
                                   3579 ; bits as ASCII character
                                   3580 ; output: 
                                   3581 ; 	A char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



                                   3582 ;---------------------
      002AC2                       3583 func_char:
      002AC2 CD 1A 14         [ 4] 3584 	call func_args 
      002AC5 A1 01            [ 1] 3585 	cp a,#1
      002AC7 27 03            [ 1] 3586 	jreq 1$
      002AC9 CC 16 D7         [ 2] 3587 	jp syntax_error
      002ACC                       3588 1$:	_xpop
      002ACC 90 F6            [ 1]    1     ld a,(y)
      002ACE 93               [ 1]    2     ldw x,y 
      002ACF EE 01            [ 2]    3     ldw x,(1,x)
      002AD1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AD5 9F               [ 1] 3589 	ld a,xl
      002AD6 A4 7F            [ 1] 3590 	and a,#0x7f 
      002AD8 81               [ 4] 3591 	ret
                                   3592 
                                   3593 ;---------------------
                                   3594 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3595 ; extract first character 
                                   3596 ; of string argument 
                                   3597 ; output:
                                   3598 ;    A:X    int24 
                                   3599 ;---------------------
      002AD9                       3600 ascii:
      002AD9 A6 06            [ 1] 3601 	ld a,#TK_LPAREN
      002ADB CD 1A 07         [ 4] 3602 	call expect 
      002ADE CD 18 3E         [ 4] 3603 	call next_token 
      002AE1 A1 02            [ 1] 3604 	cp a,#TK_QSTR 
      002AE3 27 0E            [ 1] 3605 	jreq 1$
      002AE5 A1 04            [ 1] 3606 	cp a,#TK_CHAR 
      002AE7 27 12            [ 1] 3607 	jreq 2$ 
      002AE9 A1 82            [ 1] 3608 	cp a,#TK_CFUNC 
      002AEB 27 03            [ 1] 3609 	jreq 0$
      002AED CC 16 D7         [ 2] 3610 	jp syntax_error
      002AF0                       3611 0$: ; cfunc 
      002AF0 FD               [ 4] 3612 	call (x)
      002AF1 20 0B            [ 2] 3613 	jra 3$
      002AF3                       3614 1$: ; quoted string 
      002AF3 F6               [ 1] 3615 	ld a,(x)
      002AF4 88               [ 1] 3616 	push a  
      002AF5 CD 18 57         [ 4] 3617 	call skip_string
      002AF8 84               [ 1] 3618 	pop a  	
      002AF9 20 03            [ 2] 3619 	jra 3$ 
      002AFB                       3620 2$: ; character 
      002AFB CD 18 80         [ 4] 3621 	call get_char 
      002AFE 5F               [ 1] 3622 3$:	clrw x 
      002AFF 02               [ 1] 3623 	rlwa x   
      002B00                       3624 4$:	_xpush  
      002B00 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002B04 90 F7            [ 1]    2     ld (y),a 
      002B06 90 EF 01         [ 2]    3     ldw (1,y),x 
      002B09 A6 07            [ 1] 3625 	ld a,#TK_RPAREN 
      002B0B CD 1A 07         [ 4] 3626 	call expect
      002B0E                       3627 9$:	
      002B0E                       3628 	_xpop  
      002B0E 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      002B10 93               [ 1]    2     ldw x,y 
      002B11 EE 01            [ 2]    3     ldw x,(1,x)
      002B13 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B17 81               [ 4] 3629 	ret 
                                   3630 
                                   3631 ;---------------------
                                   3632 ;BASIC: KEY
                                   3633 ; wait for a character 
                                   3634 ; received from STDIN 
                                   3635 ; input:
                                   3636 ;	none 
                                   3637 ; output:
                                   3638 ;	a	 character 
                                   3639 ;---------------------
      002B18                       3640 key:
      002B18 CD 09 57         [ 4] 3641 	call getc 
      002B1B 81               [ 4] 3642 	ret
                                   3643 
                                   3644 ;----------------------
                                   3645 ; BASIC: QKEY
                                   3646 ; Return true if there 
                                   3647 ; is a character in 
                                   3648 ; waiting in STDIN 
                                   3649 ; input:
                                   3650 ;  none 
                                   3651 ; output:
                                   3652 ;   A     0|-1
                                   3653 ;-----------------------
      002B1C                       3654 qkey:: 
      002B1C 5F               [ 1] 3655 	clrw x 
      002B1D C6 00 2D         [ 1] 3656 	ld a,rx1_head
      002B20 C0 00 2E         [ 1] 3657 	sub a,rx1_tail 
      002B23 27 03            [ 1] 3658 	jreq 9$ 
      002B25 53               [ 2] 3659 	cplw x
      002B26 A6 FF            [ 1] 3660 	ld a,#255    
      002B28                       3661 9$: 
      002B28 81               [ 4] 3662 	ret 
                                   3663 
                                   3664 ;-------------------------
                                   3665 ; BASIC: UFLASH 
                                   3666 ; return free flash address
                                   3667 ; scan all block starting at 
                                   3668 ; app_space and return 
                                   3669 ; address of first free block 
                                   3670 ; below extended memory.  
                                   3671 ; return 0 if no free block 
                                   3672 ; input:
                                   3673 ;  none 
                                   3674 ; output:
                                   3675 ;	A:X		FLASH free address
                                   3676 ;---------------------------
      002B29                       3677 uflash:
      002B29 72 5F 00 18      [ 1] 3678 	clr farptr 
      002B2D AE 38 80         [ 2] 3679 	ldw x,#app_space 
      002B30 89               [ 2] 3680 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002B31 CF 00 19         [ 2] 3681 1$:	ldw ptr16,x 
      002B34 CD 08 B6         [ 4] 3682 	call scan_block 
      002B37 27 0F            [ 1] 3683 	jreq 8$
      002B39 1E 01            [ 2] 3684 	ldw x,(1,sp)
      002B3B 1C 00 80         [ 2] 3685 	addw x,#BLOCK_SIZE 
      002B3E 27 04            [ 1] 3686 	jreq 7$ 
      002B40 1F 01            [ 2] 3687 	ldw (1,sp),x 
      002B42 20 ED            [ 2] 3688 	jra 1$ 
      002B44                       3689 7$: ; no free block 
      002B44 0F 01            [ 1] 3690 	clr (1,sp) 
      002B46 0F 02            [ 1] 3691 	clr (2,sp)
      002B48 85               [ 2] 3692 8$: popw x 
      002B49 4F               [ 1] 3693 	clr a 
      002B4A 81               [ 4] 3694 	ret 
                                   3695 
                                   3696 
                                   3697 ;---------------------
                                   3698 ; BASIC: USR(addr,arg)
                                   3699 ; execute a function written 
                                   3700 ; in binary code.
                                   3701 ; input:
                                   3702 ;   addr	routine address 
                                   3703 ;   arg 	is an argument
                                   3704 ;           it can be ignore 
                                   3705 ;           by cally. 
                                   3706 ; output:
                                   3707 ;   xstack 	value returned by cally  
                                   3708 ;---------------------
      002B4B                       3709 usr:
      002B4B CD 1A 14         [ 4] 3710 	call func_args 
      002B4E A1 02            [ 1] 3711 	cp a,#2
      002B50 27 03            [ 1] 3712 	jreq 1$  
      002B52 CC 16 D7         [ 2] 3713 	jp syntax_error 
      002B55                       3714 1$: 
      002B55                       3715 	_at_next ; A:X addr 
      002B55 90 E6 03         [ 1]    1     ld a,(3,y)
      002B58 93               [ 1]    2     ldw x,y 
      002B59 EE 04            [ 2]    3     ldw x,(4,x)
      002B5B CF 00 19         [ 2] 3716 	ldw ptr16,X 
      002B5E                       3717 	_xpop  ; arg 
      002B5E 90 F6            [ 1]    1     ld a,(y)
      002B60 93               [ 1]    2     ldw x,y 
      002B61 EE 01            [ 2]    3     ldw x,(1,x)
      002B63 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B67                       3718 	_store_top ; overwrite addr 
      002B67 90 F7            [ 1]    1     ld (y),a 
      002B69 90 EF 01         [ 2]    2     ldw (1,y),x     
      002B6C 72 CD 00 19      [ 6] 3719     call [ptr16]
      002B70 81               [ 4] 3720 	ret 
                                   3721 
                                   3722 
                                   3723 ;------------------------------
                                   3724 ; BASIC: BYE 
                                   3725 ; halt mcu in its lowest power mode 
                                   3726 ; wait for reset or external interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



                                   3727 ; do a cold start on wakeup.
                                   3728 ;------------------------------
      002B71                       3729 bye:
      002B71 72 0D 52 30 FB   [ 2] 3730 	btjf UART1_SR,#UART_SR_TC,.
      002B76 8E               [10] 3731 	halt
      002B77 CC 00 B5         [ 2] 3732 	jp cold_start  
                                   3733 
                                   3734 ;----------------------------------
                                   3735 ; BASIC: SLEEP 
                                   3736 ; halt mcu until reset or external
                                   3737 ; interrupt.
                                   3738 ; Resume progam after SLEEP command
                                   3739 ;----------------------------------
      002B7A                       3740 sleep:
      002B7A 72 0D 52 30 FB   [ 2] 3741 	btjf UART1_SR,#UART_SR_TC,.
      002B7F 72 16 00 22      [ 1] 3742 	bset flags,#FSLEEP
      002B83 8E               [10] 3743 	halt 
      002B84 81               [ 4] 3744 	ret 
                                   3745 
                                   3746 ;-------------------------------
                                   3747 ; BASIC: PAUSE expr 
                                   3748 ; suspend execution for n msec.
                                   3749 ; input:
                                   3750 ;	none
                                   3751 ; output:
                                   3752 ;	none 
                                   3753 ;------------------------------
      002B85                       3754 pause:
      002B85 CD 1B 5B         [ 4] 3755 	call expression
      002B88 A1 84            [ 1] 3756 	cp a,#TK_INTGR
      002B8A 27 03            [ 1] 3757 	jreq 1$ 
      002B8C CC 16 D7         [ 2] 3758 	jp syntax_error
      002B8F                       3759 1$: _xpop 
      002B8F 90 F6            [ 1]    1     ld a,(y)
      002B91 93               [ 1]    2     ldw x,y 
      002B92 EE 01            [ 2]    3     ldw x,(1,x)
      002B94 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B98                       3760 pause02:
      002B98 CF 00 12         [ 2] 3761 	ldw timer,x 
      002B9B CE 00 12         [ 2] 3762 1$: ldw x,timer 
      002B9E 5D               [ 2] 3763 	tnzw x 
      002B9F 27 03            [ 1] 3764 	jreq 2$
      002BA1 8F               [10] 3765 	wfi 
      002BA2 26 F7            [ 1] 3766 	jrne 1$
      002BA4                       3767 2$:	
      002BA4 81               [ 4] 3768 	ret 
                                   3769 
                                   3770 ;------------------------------
                                   3771 ; BASIC: AWU expr
                                   3772 ; halt mcu for 'expr' milliseconds
                                   3773 ; use Auto wakeup peripheral
                                   3774 ; all oscillators stopped except LSI
                                   3775 ; range: 1ms - 511ms
                                   3776 ; input:
                                   3777 ;  none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



                                   3778 ; output:
                                   3779 ;  none:
                                   3780 ;------------------------------
      002BA5                       3781 awu:
      002BA5 CD 1B 5B         [ 4] 3782   call expression
      002BA8 A1 84            [ 1] 3783   cp a,#TK_INTGR
      002BAA 27 03            [ 1] 3784   jreq 1$
      002BAC CC 16 D7         [ 2] 3785   jp syntax_error
      002BAF                       3786 1$: _xpop 
      002BAF 90 F6            [ 1]    1     ld a,(y)
      002BB1 93               [ 1]    2     ldw x,y 
      002BB2 EE 01            [ 2]    3     ldw x,(1,x)
      002BB4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BB8                       3787 awu02:
      002BB8 A3 14 00         [ 2] 3788   cpw x,#5120
      002BBB 2B 0C            [ 1] 3789   jrmi 1$ 
      002BBD 35 0F 50 F2      [ 1] 3790   mov AWU_TBR,#15 
      002BC1 A6 1E            [ 1] 3791   ld a,#30
      002BC3 62               [ 2] 3792   div x,a
      002BC4 A6 10            [ 1] 3793   ld a,#16
      002BC6 62               [ 2] 3794   div x,a 
      002BC7 20 1E            [ 2] 3795   jra 4$
      002BC9                       3796 1$: 
      002BC9 A3 08 00         [ 2] 3797   cpw x,#2048
      002BCC 2B 09            [ 1] 3798   jrmi 2$ 
      002BCE 35 0E 50 F2      [ 1] 3799   mov AWU_TBR,#14
      002BD2 A6 50            [ 1] 3800   ld a,#80
      002BD4 62               [ 2] 3801   div x,a 
      002BD5 20 10            [ 2] 3802   jra 4$   
      002BD7                       3803 2$:
      002BD7 35 07 50 F2      [ 1] 3804   mov AWU_TBR,#7
      002BDB                       3805 3$:  
                                   3806 ; while X > 64  divide by 2 and increment AWU_TBR 
      002BDB A3 00 40         [ 2] 3807   cpw x,#64 
      002BDE 23 07            [ 2] 3808   jrule 4$ 
      002BE0 72 5C 50 F2      [ 1] 3809   inc AWU_TBR 
      002BE4 54               [ 2] 3810   srlw x 
      002BE5 20 F4            [ 2] 3811   jra 3$ 
      002BE7                       3812 4$:
      002BE7 9F               [ 1] 3813   ld a, xl
      002BE8 4A               [ 1] 3814   dec a 
      002BE9 27 01            [ 1] 3815   jreq 5$
      002BEB 4A               [ 1] 3816   dec a 	
      002BEC                       3817 5$: 
      002BEC A4 3E            [ 1] 3818   and a,#0x3e 
      002BEE C7 50 F1         [ 1] 3819   ld AWU_APR,a 
      002BF1 72 18 50 F0      [ 1] 3820   bset AWU_CSR,#AWU_CSR_AWUEN
      002BF5 8E               [10] 3821   halt 
                                   3822 
      002BF6 81               [ 4] 3823   ret 
                                   3824 
                                   3825 ;------------------------------
                                   3826 ; BASIC: TICKS
                                   3827 ; return msec ticks counter value 
                                   3828 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                                   3829 ; 	none 
                                   3830 ; output:
                                   3831 ;	X 		TK_INTGR
                                   3832 ;-------------------------------
      002BF7                       3833 get_ticks:
      002BF7 C6 00 0F         [ 1] 3834 	ld a,ticks 
      002BFA CE 00 10         [ 2] 3835 	ldw x,ticks+1 
      002BFD 81               [ 4] 3836 	ret 
                                   3837 
                                   3838 ;------------------------------
                                   3839 ; BASIC: ABS(expr)
                                   3840 ; return absolute value of expr.
                                   3841 ; input:
                                   3842 ;   none
                                   3843 ; output:
                                   3844 ;   xstack    positive int24 
                                   3845 ;-------------------------------
      002BFE                       3846 abs:
      002BFE CD 1A 14         [ 4] 3847 	call func_args 
      002C01 A1 01            [ 1] 3848 	cp a,#1 
      002C03 27 03            [ 1] 3849 	jreq 0$ 
      002C05 CC 16 D7         [ 2] 3850 	jp syntax_error
      002C08                       3851 0$:  
      002C08 CD 01 F3         [ 4] 3852 	call abs24 
      002C0B                       3853 	_xpop 
      002C0B 90 F6            [ 1]    1     ld a,(y)
      002C0D 93               [ 1]    2     ldw x,y 
      002C0E EE 01            [ 2]    3     ldw x,(1,x)
      002C10 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C14 81               [ 4] 3854 	ret 
                                   3855 
                                   3856 ;------------------------------
                                   3857 ; BASIC: LSHIFT(expr1,expr2)
                                   3858 ; logical shift left expr1 by 
                                   3859 ; expr2 bits 
                                   3860 ; output:
                                   3861 ; 	A:x 	result 
                                   3862 ;------------------------------
      002C15                       3863 lshift:
      002C15 CD 1A 14         [ 4] 3864 	call func_args
      002C18 A1 02            [ 1] 3865 	cp a,#2 
      002C1A 27 03            [ 1] 3866 	jreq 1$
      002C1C CC 16 D7         [ 2] 3867 	jp syntax_error
      002C1F                       3868 1$: _xpop 
      002C1F 90 F6            [ 1]    1     ld a,(y)
      002C21 93               [ 1]    2     ldw x,y 
      002C22 EE 01            [ 2]    3     ldw x,(1,x)
      002C24 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C28 9F               [ 1] 3869 	ld a,xl 
      002C29 88               [ 1] 3870 	push a      
      002C2A                       3871 	_xpop  ; T>A:X 
      002C2A 90 F6            [ 1]    1     ld a,(y)
      002C2C 93               [ 1]    2     ldw x,y 
      002C2D EE 01            [ 2]    3     ldw x,(1,x)
      002C2F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002C33 0D 01            [ 1] 3872 	tnz (1,sp) 
      002C35 27 07            [ 1] 3873 	jreq 4$
      002C37 98               [ 1] 3874 2$:	rcf 
      002C38 59               [ 2] 3875 	rlcw x 
      002C39 49               [ 1] 3876 	rlc a 
      002C3A 0A 01            [ 1] 3877 	dec (1,sp) 
      002C3C 26 F9            [ 1] 3878 	jrne 2$
      002C3E                       3879 4$: _drop 1 
      002C3E 5B 01            [ 2]    1     addw sp,#1 
      002C40 81               [ 4] 3880 	ret
                                   3881 
                                   3882 ;------------------------------
                                   3883 ; BASIC: RSHIFT(expr1,expr2)
                                   3884 ; logical shift right expr1 by 
                                   3885 ; expr2 bits.
                                   3886 ; output:
                                   3887 ; 	A 		TK_INTGR
                                   3888 ;   X 		result 
                                   3889 ;------------------------------
      002C41                       3890 rshift:
      002C41 CD 1A 14         [ 4] 3891 	call func_args
      002C44 A1 02            [ 1] 3892 	cp a,#2 
      002C46 27 03            [ 1] 3893 	jreq 1$
      002C48 CC 16 D7         [ 2] 3894 	jp syntax_error
      002C4B                       3895 1$: _xpop ; T>A:X
      002C4B 90 F6            [ 1]    1     ld a,(y)
      002C4D 93               [ 1]    2     ldw x,y 
      002C4E EE 01            [ 2]    3     ldw x,(1,x)
      002C50 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C54 9F               [ 1] 3896     ld a,xl 
      002C55 88               [ 1] 3897 	push a    
      002C56                       3898 	_xpop  
      002C56 90 F6            [ 1]    1     ld a,(y)
      002C58 93               [ 1]    2     ldw x,y 
      002C59 EE 01            [ 2]    3     ldw x,(1,x)
      002C5B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C5F 0D 01            [ 1] 3899 	tnz (1,sp)
      002C61 27 07            [ 1] 3900 	jreq 4$
      002C63 98               [ 1] 3901 2$:	rcf 
      002C64 46               [ 1] 3902 	rrc a 
      002C65 56               [ 2] 3903 	rrcw x 
      002C66 0A 01            [ 1] 3904 	dec (1,sp) 
      002C68 26 F9            [ 1] 3905 	jrne 2$
      002C6A                       3906 4$: _drop 1 
      002C6A 5B 01            [ 2]    1     addw sp,#1 
      002C6C 81               [ 4] 3907 	ret
                                   3908 
                                   3909 ;--------------------------
                                   3910 ; BASIC: FCPU integer
                                   3911 ; set CPU frequency 
                                   3912 ;-------------------------- 
                                   3913 
      002C6D                       3914 fcpu:
      002C6D A6 84            [ 1] 3915 	ld a,#TK_INTGR
      002C6F CD 1A 07         [ 4] 3916 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002C72 CD 18 70         [ 4] 3917 	call get_int24 
      002C75 9F               [ 1] 3918 	ld a,xl 
      002C76 A4 07            [ 1] 3919 	and a,#7 
      002C78 C7 50 C6         [ 1] 3920 	ld CLK_CKDIVR,a 
      002C7B 81               [ 4] 3921 	ret 
                                   3922 
                                   3923 ;------------------------------
                                   3924 ; BASIC: PMODE pin#, mode 
                                   3925 ; Arduino pin. 
                                   3926 ; define pin as input or output
                                   3927 ; pin#: {0..15}
                                   3928 ; mode: INPUT|OUTPUT  
                                   3929 ;------------------------------
                           000001  3930 	PINNO=1
                           000001  3931 	VSIZE=1
      002C7C                       3932 pin_mode:
      002C7C                       3933 	_vars VSIZE 
      002C7C 52 01            [ 2]    1     sub sp,#VSIZE 
      002C7E CD 1A 19         [ 4] 3934 	call arg_list 
      002C81 A1 02            [ 1] 3935 	cp a,#2 
      002C83 27 03            [ 1] 3936 	jreq 1$
      002C85 CC 16 D7         [ 2] 3937 	jp syntax_error 
      002C88                       3938 1$: _xpop 
      002C88 90 F6            [ 1]    1     ld a,(y)
      002C8A 93               [ 1]    2     ldw x,y 
      002C8B EE 01            [ 2]    3     ldw x,(1,x)
      002C8D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C91 CF 00 19         [ 2] 3939 	ldw ptr16,x ; mode 
      002C94                       3940 	_xpop ; Dx pin 
      002C94 90 F6            [ 1]    1     ld a,(y)
      002C96 93               [ 1]    2     ldw x,y 
      002C97 EE 01            [ 2]    3     ldw x,(1,x)
      002C99 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C9D CD 2C DB         [ 4] 3941 	call select_pin 
      002CA0 6B 01            [ 1] 3942 	ld (PINNO,sp),a  
      002CA2 A6 01            [ 1] 3943 	ld a,#1 
      002CA4 0D 01            [ 1] 3944 	tnz (PINNO,sp)
      002CA6 27 0D            [ 1] 3945 	jreq 4$
      002CA8 48               [ 1] 3946 2$:	sll a 
      002CA9 0A 01            [ 1] 3947 	dec (PINNO,sp)
      002CAB 26 FB            [ 1] 3948 	jrne 2$ 
      002CAD 6B 01            [ 1] 3949 	ld (PINNO,sp),a
      002CAF 7B 01            [ 1] 3950 	ld a,(PINNO,sp)
      002CB1 EA 03            [ 1] 3951 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002CB3 E7 03            [ 1] 3952 	ld (GPIO_CR1,x),a 
      002CB5 A6 01            [ 1] 3953 4$:	ld a,#OUTP
      002CB7 C1 00 0E         [ 1] 3954 	cp a,acc8 
      002CBA 27 10            [ 1] 3955 	jreq 6$
                                   3956 ; input mode
                                   3957 ; disable external interrupt 
      002CBC 7B 01            [ 1] 3958 	ld a,(PINNO,sp)
      002CBE 43               [ 1] 3959 	cpl a 
      002CBF E4 04            [ 1] 3960 	and a,(GPIO_CR2,x)
      002CC1 E7 04            [ 1] 3961 	ld (GPIO_CR2,x),a 
                                   3962 ;clear bit in DDR for input mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002CC3 7B 01            [ 1] 3963 	ld a,(PINNO,sp)
      002CC5 43               [ 1] 3964 	cpl a 
      002CC6 E4 02            [ 1] 3965 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002CC8 E7 02            [ 1] 3966 	ld (GPIO_DDR,x),a 
      002CCA 20 0C            [ 2] 3967 	jra 9$
      002CCC                       3968 6$: ;output mode  
      002CCC 7B 01            [ 1] 3969 	ld a,(PINNO,sp)
      002CCE EA 02            [ 1] 3970 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002CD0 E7 02            [ 1] 3971 	ld (GPIO_DDR,x),a 
      002CD2 7B 01            [ 1] 3972 	ld a,(PINNO,sp)
      002CD4 EA 04            [ 1] 3973 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002CD6 E7 04            [ 1] 3974 	ld (GPIO_CR2,x),a 
      002CD8                       3975 9$:	
      002CD8                       3976 	_drop VSIZE 
      002CD8 5B 01            [ 2]    1     addw sp,#VSIZE 
      002CDA 81               [ 4] 3977 	ret
                                   3978 
                                   3979 ;------------------------
                                   3980 ; select Arduino pin 
                                   3981 ; input:
                                   3982 ;   X 	 {0..15} Arduino Dx 
                                   3983 ; output:
                                   3984 ;   A     stm8s208 pin 
                                   3985 ;   X     base address s208 GPIO port 
                                   3986 ;---------------------------
      002CDB                       3987 select_pin:
      002CDB 58               [ 2] 3988 	sllw x 
      002CDC 1C 2C EB         [ 2] 3989 	addw x,#arduino_to_8s208 
      002CDF FE               [ 2] 3990 	ldw x,(x)
      002CE0 9F               [ 1] 3991 	ld a,xl 
      002CE1 88               [ 1] 3992 	push a 
      002CE2 5E               [ 1] 3993 	swapw x 
      002CE3 A6 05            [ 1] 3994 	ld a,#5 
      002CE5 42               [ 4] 3995 	mul x,a 
      002CE6 1C 50 00         [ 2] 3996 	addw x,#GPIO_BASE 
      002CE9 84               [ 1] 3997 	pop a 
      002CEA 81               [ 4] 3998 	ret 
                                   3999 ; translation from Arduino D0..D15 to stm8s208rb 
      002CEB                       4000 arduino_to_8s208:
      002CEB 03 06                 4001 .byte 3,6 ; D0 
      002CED 03 05                 4002 .byte 3,5 ; D1 
      002CEF 04 00                 4003 .byte 4,0 ; D2 
      002CF1 02 01                 4004 .byte 2,1 ; D3
      002CF3 06 00                 4005 .byte 6,0 ; D4
      002CF5 02 02                 4006 .byte 2,2 ; D5
      002CF7 02 03                 4007 .byte 2,3 ; D6
      002CF9 03 01                 4008 .byte 3,1 ; D7
      002CFB 03 03                 4009 .byte 3,3 ; D8
      002CFD 02 04                 4010 .byte 2,4 ; D9
      002CFF 04 05                 4011 .byte 4,5 ; D10
      002D01 02 06                 4012 .byte 2,6 ; D11
      002D03 02 07                 4013 .byte 2,7 ; D12
      002D05 02 05                 4014 .byte 2,5 ; D13
      002D07 04 02                 4015 .byte 4,2 ; D14
      002D09 04 01                 4016 .byte 4,1 ; D15
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                   4017 
                                   4018 
                                   4019 ;------------------------------
                                   4020 ; BASIC: RND(expr)
                                   4021 ; return random number 
                                   4022 ; between 1 and expr inclusive
                                   4023 ; xorshift16 
                                   4024 ; ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4025 ; input:
                                   4026 ; 	none 
                                   4027 ; output:
                                   4028 ;	xstack 	random positive integer 
                                   4029 ;------------------------------
      002D0B                       4030 random:
      002D0B CD 1A 14         [ 4] 4031 	call func_args 
      002D0E A1 01            [ 1] 4032 	cp a,#1
      002D10 27 03            [ 1] 4033 	jreq 1$
      002D12 CC 16 D7         [ 2] 4034 	jp syntax_error
      002D15                       4035 1$:  
      002D15                       4036 	_xpop   
      002D15 90 F6            [ 1]    1     ld a,(y)
      002D17 93               [ 1]    2     ldw x,y 
      002D18 EE 01            [ 2]    3     ldw x,(1,x)
      002D1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D1E 89               [ 2] 4037 	pushw x 
      002D1F 88               [ 1] 4038 	push a  
      002D20 A6 80            [ 1] 4039 	ld a,#0x80 
      002D22 15 01            [ 1] 4040 	bcp a,(1,sp)
      002D24 27 05            [ 1] 4041 	jreq 2$
      002D26 A6 0A            [ 1] 4042 	ld a,#ERR_BAD_VALUE
      002D28 CC 16 D9         [ 2] 4043 	jp tb_error
      002D2B                       4044 2$: 
                                   4045 ; acc16=(x<<5)^x 
      002D2B CE 00 14         [ 2] 4046 	ldw x,seedx 
      002D2E 58               [ 2] 4047 	sllw x 
      002D2F 58               [ 2] 4048 	sllw x 
      002D30 58               [ 2] 4049 	sllw x 
      002D31 58               [ 2] 4050 	sllw x 
      002D32 58               [ 2] 4051 	sllw x 
      002D33 9E               [ 1] 4052 	ld a,xh 
      002D34 C8 00 14         [ 1] 4053 	xor a,seedx 
      002D37 C7 00 0D         [ 1] 4054 	ld acc16,a 
      002D3A 9F               [ 1] 4055 	ld a,xl 
      002D3B C8 00 15         [ 1] 4056 	xor a,seedx+1 
      002D3E C7 00 0E         [ 1] 4057 	ld acc8,a 
                                   4058 ; seedx=seedy 
      002D41 CE 00 16         [ 2] 4059 	ldw x,seedy 
      002D44 CF 00 14         [ 2] 4060 	ldw seedx,x  
                                   4061 ; seedy=seedy^(seedy>>1)
      002D47 CE 00 16         [ 2] 4062 	ldw x,seedy 
      002D4A 54               [ 2] 4063 	srlw x 
      002D4B 9E               [ 1] 4064 	ld a,xh 
      002D4C C8 00 16         [ 1] 4065 	xor a,seedy 
      002D4F C7 00 16         [ 1] 4066 	ld seedy,a  
      002D52 9F               [ 1] 4067 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002D53 C8 00 17         [ 1] 4068 	xor a,seedy+1 
      002D56 C7 00 17         [ 1] 4069 	ld seedy+1,a 
                                   4070 ; acc16>>3 
      002D59 CE 00 0D         [ 2] 4071 	ldw x,acc16 
      002D5C 54               [ 2] 4072 	srlw x 
      002D5D 54               [ 2] 4073 	srlw x 
      002D5E 54               [ 2] 4074 	srlw x 
                                   4075 ; x=acc16^x 
      002D5F 9E               [ 1] 4076 	ld a,xh 
      002D60 C8 00 0D         [ 1] 4077 	xor a,acc16 
      002D63 C7 00 0D         [ 1] 4078 	ld acc16,a 
      002D66 9F               [ 1] 4079 	ld a,xl 
      002D67 C8 00 0E         [ 1] 4080 	xor a,acc8 
      002D6A C7 00 0E         [ 1] 4081 	ld acc8,a 
                                   4082 ; seedy=acc16^seedy 
      002D6D C8 00 17         [ 1] 4083 	xor a,seedy+1
      002D70 97               [ 1] 4084 	ld xl,a 
      002D71 C6 00 0D         [ 1] 4085 	ld a,acc16 
      002D74 C8 00 16         [ 1] 4086 	xor a,seedy
      002D77 95               [ 1] 4087 	ld xh,a 
      002D78 CF 00 16         [ 2] 4088 	ldw seedy,x 
                                   4089 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002D7B C6 00 15         [ 1] 4090 	ld a,seedx+1
      002D7E A4 7F            [ 1] 4091 	and a,#127
      002D80                       4092 	_xpush 
      002D80 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D84 90 F7            [ 1]    2     ld (y),a 
      002D86 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D89 84               [ 1] 4093 	pop a 
      002D8A 85               [ 2] 4094 	popw x 
      002D8B                       4095 	_xpush 
      002D8B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D8F 90 F7            [ 1]    2     ld (y),a 
      002D91 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D94 CD 03 A1         [ 4] 4096 	call mod24 
      002D97                       4097 	_xpop
      002D97 90 F6            [ 1]    1     ld a,(y)
      002D99 93               [ 1]    2     ldw x,y 
      002D9A EE 01            [ 2]    3     ldw x,(1,x)
      002D9C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DA0 1C 00 01         [ 2] 4098 	addw x,#1 
      002DA3 A9 00            [ 1] 4099 	adc a,#0  
      002DA5 81               [ 4] 4100 	ret 
                                   4101 
                                   4102 ;---------------------------------
                                   4103 ; BASIC: WORDS 
                                   4104 ; affiche la listes des mots du
                                   4105 ; dictionnaire ainsi que le nombre
                                   4106 ; de mots.
                                   4107 ;---------------------------------
                           000001  4108 	WLEN=1 ; word length
                           000002  4109 	LLEN=2 ; character sent to console
                           000003  4110 	WCNT=3 ; count words printed 
                           000003  4111 	VSIZE=3 
      002DA6                       4112 words:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002DA6 CD 19 F1         [ 4] 4113 	call cmd_line_only
      002DA9 90 89            [ 2] 4114 	pushw y
      002DAB                       4115 	_vars VSIZE
      002DAB 52 03            [ 2]    1     sub sp,#VSIZE 
      002DAD 0F 02            [ 1] 4116 	clr (LLEN,sp)
      002DAF 0F 03            [ 1] 4117 	clr (WCNT,sp)
      002DB1 90 AE 36 BD      [ 2] 4118 	ldw y,#kword_dict+2
      002DB5 93               [ 1] 4119 0$:	ldw x,y
      002DB6 F6               [ 1] 4120 	ld a,(x)
      002DB7 A4 0F            [ 1] 4121 	and a,#15 
      002DB9 6B 01            [ 1] 4122 	ld (WLEN,sp),a 
      002DBB 0C 03            [ 1] 4123 	inc (WCNT,sp)
      002DBD 5C               [ 1] 4124 1$:	incw x 
      002DBE F6               [ 1] 4125 	ld a,(x)
      002DBF CD 09 47         [ 4] 4126 	call putc 
      002DC2 0C 02            [ 1] 4127 	inc (LLEN,sp)
      002DC4 0A 01            [ 1] 4128 	dec (WLEN,sp)
      002DC6 26 F5            [ 1] 4129 	jrne 1$
      002DC8 A6 46            [ 1] 4130 	ld a,#70
      002DCA 11 02            [ 1] 4131 	cp a,(LLEN,sp)
      002DCC 2B 09            [ 1] 4132 	jrmi 2$   
      002DCE A6 20            [ 1] 4133 	ld a,#SPACE 
      002DD0 CD 09 47         [ 4] 4134 	call putc 
      002DD3 0C 02            [ 1] 4135 	inc (LLEN,sp) 
      002DD5 20 07            [ 2] 4136 	jra 3$
      002DD7 A6 0D            [ 1] 4137 2$: ld a,#CR 
      002DD9 CD 09 47         [ 4] 4138 	call putc 
      002DDC 0F 02            [ 1] 4139 	clr (LLEN,sp)
      002DDE 72 A2 00 02      [ 2] 4140 3$:	subw y,#2 
      002DE2 90 FE            [ 2] 4141 	ldw y,(y)
      002DE4 26 CF            [ 1] 4142 	jrne 0$ 
      002DE6 A6 0D            [ 1] 4143 	ld a,#CR 
      002DE8 CD 09 47         [ 4] 4144 	call putc  
      002DEB 5F               [ 1] 4145 	clrw x 
      002DEC 7B 03            [ 1] 4146 	ld a,(WCNT,sp)
      002DEE 97               [ 1] 4147 	ld xl,a 
      002DEF CD 18 86         [ 4] 4148 	call prt_i16 
      002DF2 AE 2D FD         [ 2] 4149 	ldw x,#words_count_msg
      002DF5 CD 09 A4         [ 4] 4150 	call puts 
      002DF8                       4151 	_drop VSIZE 
      002DF8 5B 03            [ 2]    1     addw sp,#VSIZE 
      002DFA 90 85            [ 2] 4152 	popw y 
      002DFC 81               [ 4] 4153 	ret 
      002DFD 20 77 6F 72 64 73 20  4154 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4155 
                                   4156 
                                   4157 ;-----------------------------
                                   4158 ; BASIC: TIMER expr 
                                   4159 ; initialize count down timer 
                                   4160 ;-----------------------------
      002E13                       4161 set_timer:
      002E13 CD 1A 19         [ 4] 4162 	call arg_list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002E16 A1 01            [ 1] 4163 	cp a,#1 
      002E18 27 03            [ 1] 4164 	jreq 1$
      002E1A CC 16 D7         [ 2] 4165 	jp syntax_error
      002E1D                       4166 1$: 
      002E1D                       4167 	_xpop  
      002E1D 90 F6            [ 1]    1     ld a,(y)
      002E1F 93               [ 1]    2     ldw x,y 
      002E20 EE 01            [ 2]    3     ldw x,(1,x)
      002E22 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E26 CF 00 12         [ 2] 4168 	ldw timer,x 
      002E29 81               [ 4] 4169 	ret 
                                   4170 
                                   4171 ;------------------------------
                                   4172 ; BASIC: TIMEOUT 
                                   4173 ; return state of timer 
                                   4174 ; output:
                                   4175 ;   A:X     0 not timeout 
                                   4176 ;   A:X     -1 timeout 
                                   4177 ;------------------------------
      002E2A                       4178 timeout:
      002E2A 4F               [ 1] 4179 	clr a 
      002E2B CE 00 12         [ 2] 4180 	ldw x,timer 
      002E2E 27 02            [ 1] 4181 	jreq 1$
      002E30 5F               [ 1] 4182 	clrw x
      002E31 81               [ 4] 4183 	ret  
      002E32 43               [ 1] 4184 1$:	cpl a
      002E33 53               [ 2] 4185 	cplw x 
      002E34 81               [ 4] 4186 	ret 
                                   4187  	
                                   4188 
                                   4189 
                                   4190 
                                   4191 ;-----------------------------------
                                   4192 ; BASIC: IWDGEN expr1 
                                   4193 ; enable independant watchdog timer
                                   4194 ; expr1 is delay in multiple of 62.5µsec
                                   4195 ; expr1 -> {1..16383}
                                   4196 ;-----------------------------------
      002E35                       4197 enable_iwdg:
      002E35 CD 1A 19         [ 4] 4198 	call arg_list
      002E38 A1 01            [ 1] 4199 	cp a,#1 
      002E3A 27 03            [ 1] 4200 	jreq 1$
      002E3C CC 16 D7         [ 2] 4201 	jp syntax_error 
      002E3F                       4202 1$: _xpop  
      002E3F 90 F6            [ 1]    1     ld a,(y)
      002E41 93               [ 1]    2     ldw x,y 
      002E42 EE 01            [ 2]    3     ldw x,(1,x)
      002E44 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E48 4B 00            [ 1] 4203 	push #0
      002E4A 35 CC 50 E0      [ 1] 4204 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002E4E 9E               [ 1] 4205 	ld a,xh 
      002E4F A4 3F            [ 1] 4206 	and a,#0x3f
      002E51 95               [ 1] 4207 	ld xh,a  
      002E52 A3 00 FF         [ 2] 4208 2$:	cpw x,#255
      002E55 23 06            [ 2] 4209 	jrule 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002E57 0C 01            [ 1] 4210 	inc (1,sp)
      002E59 98               [ 1] 4211 	rcf 
      002E5A 56               [ 2] 4212 	rrcw x 
      002E5B 20 F5            [ 2] 4213 	jra 2$
      002E5D 35 55 50 E0      [ 1] 4214 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E61 84               [ 1] 4215 	pop a  
      002E62 C7 50 E1         [ 1] 4216 	ld IWDG_PR,a 
      002E65 9F               [ 1] 4217 	ld a,xl
      002E66 4A               [ 1] 4218 	dec a 
      002E67 35 55 50 E0      [ 1] 4219 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002E6B C7 50 E2         [ 1] 4220 	ld IWDG_RLR,a 
      002E6E 35 AA 50 E0      [ 1] 4221 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002E72 81               [ 4] 4222 	ret 
                                   4223 
                                   4224 
                                   4225 ;-----------------------------------
                                   4226 ; BASIC: IWDGREF  
                                   4227 ; refresh independant watchdog count down 
                                   4228 ; timer before it reset MCU. 
                                   4229 ;-----------------------------------
      002E73                       4230 refresh_iwdg:
      002E73 35 AA 50 E0      [ 1] 4231 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002E77 81               [ 4] 4232 	ret 
                                   4233 
                                   4234 
                                   4235 ;-------------------------------------
                                   4236 ; BASIC: LOG2(expr)
                                   4237 ; return logarithm base 2 of expr 
                                   4238 ; this is the position of most significant
                                   4239 ; bit set. 
                                   4240 ; input: 
                                   4241 ; output:
                                   4242 ;   A     TK_INTGR 
                                   4243 ;   xstack log2 
                                   4244 ;*********************************
      002E78                       4245 log2:
      002E78 CD 1A 14         [ 4] 4246 	call func_args 
      002E7B A1 01            [ 1] 4247 	cp a,#1 
      002E7D 27 03            [ 1] 4248 	jreq 1$
      002E7F CC 16 D7         [ 2] 4249 	jp syntax_error 
      002E82                       4250 1$: 
      002E82                       4251 	_xpop    
      002E82 90 F6            [ 1]    1     ld a,(y)
      002E84 93               [ 1]    2     ldw x,y 
      002E85 EE 01            [ 2]    3     ldw x,(1,x)
      002E87 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E8B 4D               [ 1] 4252 	tnz a
      002E8C 26 08            [ 1] 4253 	jrne 2$ 
      002E8E 5D               [ 2] 4254 	tnzw x 
      002E8F 26 05            [ 1] 4255 	jrne 2$
      002E91 A6 0A            [ 1] 4256 	ld a,#ERR_BAD_VALUE
      002E93 CC 16 D9         [ 2] 4257 	jp tb_error 
      002E96 4B 18            [ 1] 4258 2$: push #24 
      002E98 59               [ 2] 4259 3$: rlcw x 
      002E99 49               [ 1] 4260     rlc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002E9A 25 04            [ 1] 4261 	jrc 4$
      002E9C 0A 01            [ 1] 4262 	dec (1,sp) 
      002E9E 26 F8            [ 1] 4263 	jrne 3$
      002EA0 5F               [ 1] 4264 4$: clrw x 
      002EA1 84               [ 1] 4265     pop a 
      002EA2 4A               [ 1] 4266 	dec a
      002EA3 02               [ 1] 4267 	rlwa x  
      002EA4                       4268 9$:	
      002EA4 81               [ 4] 4269 	ret 
                                   4270 
                                   4271 ;-----------------------------------
                                   4272 ; BASIC: BIT(expr) 
                                   4273 ; expr ->{0..23}
                                   4274 ; return 2^expr 
                                   4275 ; output:
                                   4276 ;    A:X    2^expr 
                                   4277 ;-----------------------------------
      002EA5                       4278 bitmask:
      002EA5 CD 1A 14         [ 4] 4279     call func_args 
      002EA8 A1 01            [ 1] 4280 	cp a,#1
      002EAA 27 03            [ 1] 4281 	jreq 1$
      002EAC CC 16 D7         [ 2] 4282 	jp syntax_error 
      002EAF                       4283 1$: _xpop 
      002EAF 90 F6            [ 1]    1     ld a,(y)
      002EB1 93               [ 1]    2     ldw x,y 
      002EB2 EE 01            [ 2]    3     ldw x,(1,x)
      002EB4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EB8 9F               [ 1] 4284 	ld a,xl 
      002EB9 AE 00 01         [ 2] 4285 	ldw x,#1 
      002EBC A4 17            [ 1] 4286 	and a,#23
      002EBE 27 0A            [ 1] 4287 	jreq 9$
      002EC0 88               [ 1] 4288 	push a 
      002EC1 4F               [ 1] 4289 	clr a 
      002EC2                       4290 2$: 
      002EC2 58               [ 2] 4291 	slaw x 
      002EC3 49               [ 1] 4292 	rlc a 	
      002EC4 0A 01            [ 1] 4293 	dec (1,sp)
      002EC6 26 FA            [ 1] 4294 	jrne 2$ 
      002EC8                       4295 4$:
      002EC8                       4296     _drop 1 
      002EC8 5B 01            [ 2]    1     addw sp,#1 
      002ECA 81               [ 4] 4297 9$:	ret 
                                   4298 
                                   4299 ;------------------------------
                                   4300 ; BASIC: DO 
                                   4301 ; initiate a DO ... UNTIL loop 
                                   4302 ;------------------------------
                           000003  4303 	DOLP_ADR=3 
                           000005  4304 	DOLP_INW=5
                           000004  4305 	VSIZE=4 
      002ECB                       4306 do_loop:
      002ECB 85               [ 2] 4307 	popw x 
      002ECC                       4308 	_vars VSIZE 
      002ECC 52 04            [ 2]    1     sub sp,#VSIZE 
      002ECE 89               [ 2] 4309 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002ECF CE 00 04         [ 2] 4310 	ldw x,basicptr 
      002ED2 1F 03            [ 2] 4311 	ldw (DOLP_ADR,sp),x
      002ED4 CE 00 00         [ 2] 4312 	ldw x,in.w 
      002ED7 1F 05            [ 2] 4313 	ldw (DOLP_INW,sp),x
      002ED9 72 5C 00 1F      [ 1] 4314 	inc loop_depth 
      002EDD 81               [ 4] 4315 	ret 
                                   4316 
                                   4317 ;--------------------------------
                                   4318 ; BASIC: UNTIL expr 
                                   4319 ; loop if exprssion is false 
                                   4320 ; else terminate loop
                                   4321 ;--------------------------------
      002EDE                       4322 until: 
      002EDE 72 5D 00 1F      [ 1] 4323 	tnz loop_depth 
      002EE2 26 03            [ 1] 4324 	jrne 1$ 
      002EE4 CC 16 D7         [ 2] 4325 	jp syntax_error 
      002EE7                       4326 1$: 
      002EE7 CD 1C 74         [ 4] 4327 	call condition  
      002EEA                       4328 	_xpop 
      002EEA 90 F6            [ 1]    1     ld a,(y)
      002EEC 93               [ 1]    2     ldw x,y 
      002EED EE 01            [ 2]    3     ldw x,(1,x)
      002EEF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EF3 4D               [ 1] 4329 	tnz a 
      002EF4 26 13            [ 1] 4330 	jrne 9$ 
      002EF6 5D               [ 2] 4331 	tnzw x 
      002EF7 26 10            [ 1] 4332 	jrne 9$ 
      002EF9 1E 03            [ 2] 4333 	ldw x,(DOLP_ADR,sp)
      002EFB CF 00 04         [ 2] 4334 	ldw basicptr,x 
      002EFE E6 02            [ 1] 4335 	ld a,(2,x)
      002F00 C7 00 02         [ 1] 4336 	ld count,a 
      002F03 1E 05            [ 2] 4337 	ldw x,(DOLP_INW,sp)
      002F05 CF 00 00         [ 2] 4338 	ldw in.w,x 
      002F08 81               [ 4] 4339 	ret 
      002F09                       4340 9$:	; remove loop data from stack  
      002F09 85               [ 2] 4341 	popw x
      002F0A                       4342 	_drop VSIZE
      002F0A 5B 04            [ 2]    1     addw sp,#VSIZE 
      002F0C 72 5A 00 1F      [ 1] 4343 	dec loop_depth 
      002F10 FC               [ 2] 4344 	jp (x)
                                   4345 
                                   4346 ;--------------------------
                                   4347 ; BASIC: PORTA...PORTI  
                                   4348 ;  return constant value 
                                   4349 ;  PORT  base address 
                                   4350 ;---------------------------
      002F11                       4351 const_porta:
      002F11 AE 50 00         [ 2] 4352 	ldw x,#PA_BASE 
      002F14 4F               [ 1] 4353 	clr a 
      002F15 81               [ 4] 4354 	ret 
      002F16                       4355 const_portb:
      002F16 AE 50 05         [ 2] 4356 	ldw x,#PB_BASE 
      002F19 4F               [ 1] 4357 	clr a 
      002F1A 81               [ 4] 4358 	ret 
      002F1B                       4359 const_portc:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002F1B AE 50 0A         [ 2] 4360 	ldw x,#PC_BASE 
      002F1E 4F               [ 1] 4361 	clr a 
      002F1F 81               [ 4] 4362 	ret 
      002F20                       4363 const_portd:
      002F20 AE 50 0F         [ 2] 4364 	ldw x,#PD_BASE 
      002F23 4F               [ 1] 4365 	clr a 
      002F24 81               [ 4] 4366 	ret 
      002F25                       4367 const_porte:
      002F25 AE 50 14         [ 2] 4368 	ldw x,#PE_BASE 
      002F28 4F               [ 1] 4369 	clr a 
      002F29 81               [ 4] 4370 	ret 
      002F2A                       4371 const_portf:
      002F2A AE 50 19         [ 2] 4372 	ldw x,#PF_BASE 
      002F2D 4F               [ 1] 4373 	clr a 
      002F2E 81               [ 4] 4374 	ret 
      002F2F                       4375 const_portg:
      002F2F AE 50 1E         [ 2] 4376 	ldw x,#PG_BASE 
      002F32 4F               [ 1] 4377 	clr a 
      002F33 81               [ 4] 4378 	ret 
      002F34                       4379 const_porti:
      002F34 AE 50 28         [ 2] 4380 	ldw x,#PI_BASE 
      002F37 4F               [ 1] 4381 	clr a 
      002F38 81               [ 4] 4382 	ret 
                                   4383 
                                   4384 ;-------------------------------
                                   4385 ; following return constant 
                                   4386 ; related to GPIO register offset 
                                   4387 ;---------------------------------
      002F39                       4388 const_odr:
      002F39 4F               [ 1] 4389 	clr a 
      002F3A AE 00 00         [ 2] 4390 	ldw x,#GPIO_ODR
      002F3D 81               [ 4] 4391 	ret 
      002F3E                       4392 const_idr:
      002F3E 4F               [ 1] 4393 	clr a 
      002F3F AE 00 01         [ 2] 4394 	ldw x,#GPIO_IDR
      002F42 81               [ 4] 4395 	ret 
      002F43                       4396 const_ddr:
      002F43 4F               [ 1] 4397 	clr a
      002F44 AE 00 02         [ 2] 4398 	ldw x,#GPIO_DDR
      002F47 81               [ 4] 4399 	ret 
      002F48                       4400 const_cr1:
      002F48 4F               [ 1] 4401 	clr a 
      002F49 AE 00 03         [ 2] 4402 	ldw x,#GPIO_CR1
      002F4C 81               [ 4] 4403 	ret 
      002F4D                       4404 const_cr2:
      002F4D 4F               [ 1] 4405 	clr a
      002F4E AE 00 04         [ 2] 4406 	ldw x,#GPIO_CR2
      002F51 81               [ 4] 4407 	ret 
                                   4408 ;-------------------------
                                   4409 ; BASIC: POUT 
                                   4410 ;  constant for port mode
                                   4411 ;  used by PMODE 
                                   4412 ;  to set pin as output
                                   4413 ;------------------------
      002F52                       4414 const_output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002F52 4F               [ 1] 4415 	clr a 
      002F53 AE 00 01         [ 2] 4416 	ldw x,#OUTP
      002F56 81               [ 4] 4417 	ret 
                                   4418 
                                   4419 ;-------------------------
                                   4420 ; BASIC: PINP 
                                   4421 ;  constant for port mode
                                   4422 ;  used by PMODE 
                                   4423 ;  to set pin as input
                                   4424 ;------------------------
      002F57                       4425 const_input:
      002F57 4F               [ 1] 4426 	clr a  
      002F58 AE 00 00         [ 2] 4427 	ldw x,#INP 
      002F5B 81               [ 4] 4428 	ret 
                                   4429 	
                                   4430 ;-----------------------
                                   4431 ; memory area constants
                                   4432 ;-----------------------
      002F5C                       4433 const_eeprom_base:
      002F5C 4F               [ 1] 4434 	clr a  
      002F5D AE 40 00         [ 2] 4435 	ldw x,#EEPROM_BASE 
      002F60 81               [ 4] 4436 	ret 
                                   4437 
                                   4438 ;---------------------------
                                   4439 ; BASIC: DATA 
                                   4440 ; when the interpreter find 
                                   4441 ; a DATA line it skip it.
                                   4442 ;---------------------------
      002F61                       4443 data:
      002F61 55 00 02 00 01   [ 1] 4444 	mov in,count 
      002F66 81               [ 4] 4445 	ret 
                                   4446 
                                   4447 ;------------------------------
                                   4448 ; check if it is a DATA line 
                                   4449 ; input: 
                                   4450 ;    X    line address 
                                   4451 ; output:
                                   4452 ;    Z    set if DATA line 
                                   4453 ;----------------------------
      002F67                       4454 is_data_line:
      002F67 89               [ 2] 4455 	pushw x 
      002F68 E6 03            [ 1] 4456 	ld a,(3,x)
      002F6A A1 80            [ 1] 4457 	cp a,#TK_CMD 
      002F6C 26 05            [ 1] 4458 	jrne 9$
      002F6E EE 04            [ 2] 4459 	ldw x,(4,x)
      002F70 A3 2F 61         [ 2] 4460 	cpw x,#data  
      002F73 85               [ 2] 4461 9$: popw x 
      002F74 81               [ 4] 4462 	ret 
                                   4463 
                                   4464 ;---------------------------------
                                   4465 ; BASIC: RESTORE [line#]
                                   4466 ; set data_ptr to first data line
                                   4467 ; if no DATA found pointer set to
                                   4468 ; zero.
                                   4469 ; if a line# is given as argument 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



                                   4470 ; a data line with that number 
                                   4471 ; is searched and the data pointer 
                                   4472 ; is set to it. If there is no 
                                   4473 ; data line with that number 
                                   4474 ; the program is interrupted. 
                                   4475 ;---------------------------------
      002F75                       4476 restore:
      002F75 CD 19 FC         [ 4] 4477 	call runtime_only
      002F78 5F               [ 1] 4478 	clrw x 
      002F79 CF 00 06         [ 2] 4479 	ldw data_ptr,x 
      002F7C CF 00 08         [ 2] 4480 	ldw data_ofs,x 
      002F7F CE 00 1B         [ 2] 4481 	ldw x,txtbgn 
      002F82 CD 18 3E         [ 4] 4482 	call next_token 
      002F85 A1 84            [ 1] 4483 	cp a,#TK_INTGR
      002F87 26 10            [ 1] 4484 	jrne 0$
      002F89 CD 18 70         [ 4] 4485 	call get_int24
      002F8C 90 89            [ 2] 4486 	pushw y 
      002F8E 4F               [ 1] 4487 	clr a 
      002F8F CD 0C 8D         [ 4] 4488 	call search_lineno  
      002F92 90 85            [ 2] 4489 	popw y 
      002F94 5D               [ 2] 4490 	tnzw x 
      002F95 26 17            [ 1] 4491 	jrne set_data_pointer 
      002F97 20 44            [ 2] 4492 	jra data_error 
      002F99                       4493 0$:
      002F99                       4494 	_unget_token  
      002F99 55 00 03 00 01   [ 1]    1      mov in,in.saved  
                                   4495 ; search first DATA line 	
      002F9E C3 00 1D         [ 2] 4496 1$:	cpw x,txtend
      002FA1 24 3A            [ 1] 4497 	jruge data_error 
      002FA3                       4498 2$:	
      002FA3 CD 2F 67         [ 4] 4499 	call is_data_line 
      002FA6 26 00            [ 1] 4500 	jrne 4$
      002FA8 CD 2F BB         [ 4] 4501 4$:	call try_next_line 
      002FAB 26 FB            [ 1] 4502 	jrne 4$ 
      002FAD 81               [ 4] 4503 	ret 
                                   4504 
                                   4505 ;---------------------
                                   4506 ; set data pointer 
                                   4507 ; variables at new line 
                                   4508 ; input:
                                   4509 ;    X    line address 
                                   4510 ;----------------------
      002FAE                       4511 set_data_pointer:
      002FAE CF 00 06         [ 2] 4512 	ldw data_ptr,x
      002FB1 E6 02            [ 1] 4513 	ld a,(2,x)
      002FB3 C7 00 09         [ 1] 4514 	ld data_len,a 
      002FB6 35 06 00 08      [ 1] 4515 	mov data_ofs,#FIRST_DATA_ITEM
      002FBA 81               [ 4] 4516 	ret 
                                   4517 
                                   4518 
                                   4519 ;--------------------
                                   4520 ; at end of data line 
                                   4521 ; check if next line 
                                   4522 ; is a data line 
                                   4523 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4524 ;    X   actual line address 
                                   4525 ;  
                                   4526 ;-------------------
      002FBB                       4527 try_next_line: 
      002FBB E6 02            [ 1] 4528 	ld a,(2,x)
      002FBD C7 00 0E         [ 1] 4529 	ld acc8,a 
      002FC0 72 5F 00 0D      [ 1] 4530 	clr acc16 
      002FC4 72 BB 00 0D      [ 2] 4531 	addw x,acc16 
      002FC8 C3 00 1D         [ 2] 4532 	cpw x,txtend 
      002FCB 25 02            [ 1] 4533 	jrult 1$
      002FCD 20 0E            [ 2] 4534 	jra data_error 
      002FCF                       4535 1$:	
      002FCF CD 2F 67         [ 4] 4536 	call is_data_line 
      002FD2 27 04            [ 1] 4537 	jreq 2$
      002FD4 A6 01            [ 1] 4538 	ld a,#1  
      002FD6 20 04            [ 2] 4539 	jra 9$
      002FD8 CD 2F AE         [ 4] 4540 2$:	call set_data_pointer
      002FDB 4F               [ 1] 4541 	clr a  
      002FDC 81               [ 4] 4542 9$:	ret 
      002FDD                       4543 data_error:	
      002FDD A6 0C            [ 1] 4544     ld a,#ERR_NO_DATA 
      002FDF CC 16 D9         [ 2] 4545 	jp tb_error 
                                   4546 
                                   4547 
                                   4548 ;---------------------------------
                                   4549 ; BASIC: READ 
                                   4550 ; return next data item | 0 
                                   4551 ;---------------------------------
                           000001  4552 	CTX_BPTR=1 
                           000003  4553 	CTX_IN=3 
                           000004  4554 	CTX_COUNT=4 
                           000005  4555 	INT24=5
                           000007  4556 	VSIZE=7 
      002FE2                       4557 read:
      002FE2 CD 19 FC         [ 4] 4558 	call runtime_only
      002FE5                       4559 	_vars  VSIZE 
      002FE5 52 07            [ 2]    1     sub sp,#VSIZE 
      002FE7 CD 20 C9         [ 4] 4560 	call save_context
      002FEA                       4561 read01:	
      002FEA C6 00 08         [ 1] 4562 	ld a,data_ofs
      002FED C1 00 09         [ 1] 4563 	cp a,data_len 
      002FF0 27 37            [ 1] 4564 	jreq 2$ ; end of line  
      002FF2                       4565 0$:
      002FF2 CE 00 06         [ 2] 4566 	ldw x,data_ptr 
      002FF5 CF 00 04         [ 2] 4567 	ldw basicptr,x 
      002FF8 55 00 08 00 01   [ 1] 4568 	mov in,data_ofs 
      002FFD 55 00 09 00 02   [ 1] 4569 	mov count,data_len  
      003002 CD 1B 5B         [ 4] 4570 	call expression 
      003005 A1 84            [ 1] 4571 	cp a,#TK_INTGR 
      003007 27 03            [ 1] 4572 	jreq 1$ 
      003009 CC 16 D7         [ 2] 4573 	jp syntax_error 
      00300C                       4574 1$:
      00300C CD 18 3E         [ 4] 4575 	call next_token ; skip comma
      00300F CE 00 04         [ 2] 4576 	ldw x,basicptr 
      003012 CF 00 06         [ 2] 4577 	ldw data_ptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      003015 55 00 01 00 08   [ 1] 4578 	mov data_ofs,in 
      00301A CD 20 D9         [ 4] 4579 	call rest_context
      00301D                       4580 	_xpop 
      00301D 90 F6            [ 1]    1     ld a,(y)
      00301F 93               [ 1]    2     ldw x,y 
      003020 EE 01            [ 2]    3     ldw x,(1,x)
      003022 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003026                       4581 	_drop VSIZE 
      003026 5B 07            [ 2]    1     addw sp,#VSIZE 
      003028 81               [ 4] 4582 	ret 
      003029                       4583 2$: ; end of line reached 
                                   4584 	; try next line 
      003029 CE 00 06         [ 2] 4585 	ldw x,data_ptr  
      00302C CD 2F BB         [ 4] 4586 	call try_next_line
      00302F 27 C1            [ 1] 4587 	jreq 0$ 
      003031 20 AA            [ 2] 4588 	jra data_error 
                                   4589 
                                   4590 ;---------------------------------
                                   4591 ; BASIC: SPIEN clkdiv, 0|1  
                                   4592 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4593 ; if clkdiv==-1 disable SPI
                                   4594 ; 0|1 -> disable|enable  
                                   4595 ;--------------------------------- 
                           000005  4596 SPI_CS_BIT=5
      003033                       4597 spi_enable:
      003033 CD 1A 19         [ 4] 4598 	call arg_list 
      003036 A1 02            [ 1] 4599 	cp a,#2
      003038 27 03            [ 1] 4600 	jreq 1$
      00303A CC 16 D7         [ 2] 4601 	jp syntax_error 
      00303D                       4602 1$: 
      00303D 72 12 50 C7      [ 1] 4603 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      003041 85               [ 2] 4604 	popw x  
      003042 5D               [ 2] 4605 	tnzw x 
      003043 27 21            [ 1] 4606 	jreq spi_disable 
      003045 85               [ 2] 4607 	popw x 
      003046 A6 08            [ 1] 4608 	ld a,#(1<<SPI_CR1_BR)
      003048 42               [ 4] 4609 	mul x,a 
      003049 9F               [ 1] 4610 	ld a,xl 
      00304A C7 52 00         [ 1] 4611 	ld SPI_CR1,a 
                                   4612 ; configure ~CS on PE5 (D10 on CN8) as output. 
      00304D 72 1A 50 14      [ 1] 4613 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      003051 72 1A 50 16      [ 1] 4614 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4615 ; configure SPI as master mode 0.	
      003055 72 14 52 00      [ 1] 4616 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4617 ; ~CS line controlled by sofware 	
      003059 72 12 52 01      [ 1] 4618 	bset SPI_CR2,#SPI_CR2_SSM 
      00305D 72 10 52 01      [ 1] 4619     bset SPI_CR2,#SPI_CR2_SSI 
                                   4620 ; enable SPI
      003061 72 1C 52 00      [ 1] 4621 	bset SPI_CR1,#SPI_CR1_SPE 	
      003065 81               [ 4] 4622 	ret 
      003066                       4623 spi_disable:
      003066                       4624 	_drop #2; throw first argument.
      003066 5B 02            [ 2]    1     addw sp,##2 
                                   4625 ; wait spi idle 
      003068 A6 82            [ 1] 4626 1$:	ld a,#0x82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      00306A C4 52 03         [ 1] 4627 	and a,SPI_SR
      00306D A1 02            [ 1] 4628 	cp a,#2 
      00306F 26 F7            [ 1] 4629 	jrne 1$
      003071 72 1D 52 00      [ 1] 4630 	bres SPI_CR1,#SPI_CR1_SPE
      003075 72 13 50 C7      [ 1] 4631 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      003079 72 1B 50 16      [ 1] 4632 	bres PE_DDR,#SPI_CS_BIT 
      00307D 81               [ 4] 4633 	ret 
                                   4634 
      00307E                       4635 spi_clear_error:
      00307E A6 78            [ 1] 4636 	ld a,#0x78 
      003080 C5 52 03         [ 1] 4637 	bcp a,SPI_SR 
      003083 27 04            [ 1] 4638 	jreq 1$
      003085 72 5F 52 03      [ 1] 4639 	clr SPI_SR 
      003089 81               [ 4] 4640 1$: ret 
                                   4641 
      00308A                       4642 spi_send_byte:
      00308A 88               [ 1] 4643 	push a 
      00308B CD 30 7E         [ 4] 4644 	call spi_clear_error
      00308E 84               [ 1] 4645 	pop a 
      00308F 72 03 52 03 FB   [ 2] 4646 	btjf SPI_SR,#SPI_SR_TXE,.
      003094 C7 52 04         [ 1] 4647 	ld SPI_DR,a
      003097 72 01 52 03 FB   [ 2] 4648 	btjf SPI_SR,#SPI_SR_RXNE,.  
      00309C C6 52 04         [ 1] 4649 	ld a,SPI_DR 
      00309F 81               [ 4] 4650 	ret 
                                   4651 
      0030A0                       4652 spi_rcv_byte:
      0030A0 A6 FF            [ 1] 4653 	ld a,#255
      0030A2 72 01 52 03 E3   [ 2] 4654 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      0030A7 C6 52 04         [ 1] 4655 	ld a,SPI_DR 
      0030AA 81               [ 4] 4656 	ret
                                   4657 
                                   4658 ;------------------------------
                                   4659 ; BASIC: SPIWR byte [,byte]
                                   4660 ; write 1 or more byte
                                   4661 ;------------------------------
      0030AB                       4662 spi_write:
      0030AB CD 1B 5B         [ 4] 4663 	call expression
      0030AE A1 84            [ 1] 4664 	cp a,#TK_INTGR 
      0030B0 27 03            [ 1] 4665 	jreq 1$
      0030B2 CC 16 D7         [ 2] 4666 	jp syntax_error 
      0030B5                       4667 1$:	
      0030B5 9F               [ 1] 4668 	ld a,xl 
      0030B6 CD 30 8A         [ 4] 4669 	call spi_send_byte 
      0030B9 CD 18 3E         [ 4] 4670 	call next_token 
      0030BC A1 08            [ 1] 4671 	cp a,#TK_COMMA 
      0030BE 26 02            [ 1] 4672 	jrne 2$ 
      0030C0 20 E9            [ 2] 4673 	jra spi_write 
      0030C2 4D               [ 1] 4674 2$:	tnz a 
      0030C3 27 05            [ 1] 4675 	jreq 3$
      0030C5                       4676 	_unget_token  
      0030C5 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0030CA 81               [ 4] 4677 3$:	ret 
                                   4678 
                                   4679 
                                   4680 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4681 ; BASIC: SPIRD 	
                                   4682 ; read one byte from SPI 
                                   4683 ;-------------------------------
      0030CB                       4684 spi_read:
      0030CB CD 30 A0         [ 4] 4685 	call spi_rcv_byte 
      0030CE 5F               [ 1] 4686 	clrw x 
      0030CF 97               [ 1] 4687 	ld xl,a 
      0030D0 4F               [ 1] 4688 	clr a  
      0030D1 81               [ 4] 4689 	ret 
                                   4690 
                                   4691 ;------------------------------
                                   4692 ; BASIC: SPISEL 0|1 
                                   4693 ; set state of ~CS line
                                   4694 ; 0|1 deselect|select  
                                   4695 ;------------------------------
      0030D2                       4696 spi_select:
      0030D2 CD 18 3E         [ 4] 4697 	call next_token 
      0030D5 A1 84            [ 1] 4698 	cp a,#TK_INTGR 
      0030D7 27 03            [ 1] 4699 	jreq 1$
      0030D9 CC 16 D7         [ 2] 4700 	jp syntax_error 
      0030DC 5D               [ 2] 4701 1$: tnzw x  
      0030DD 27 05            [ 1] 4702 	jreq cs_high 
      0030DF 72 1B 50 14      [ 1] 4703 	bres PE_ODR,#SPI_CS_BIT
      0030E3 81               [ 4] 4704 	ret 
      0030E4                       4705 cs_high: 
      0030E4 72 1A 50 14      [ 1] 4706 	bset PE_ODR,#SPI_CS_BIT
      0030E8 81               [ 4] 4707 	ret 
                                   4708 
                                   4709 ;-------------------------------
                                   4710 ; BASIC: PAD 
                                   4711 ; Return pad buffer address.
                                   4712 ;------------------------------
      0030E9                       4713 pad_ref:
      0030E9 AE 16 B8         [ 2] 4714 	ldw x,#pad 
      0030EC 4F               [ 1] 4715 	clr a
      0030ED 81               [ 4] 4716 	ret 
                                   4717 
                                   4718 ;****************************
                                   4719 ; expression stack 
                                   4720 ; manipulation routines
                                   4721 ;****************************
                                   4722 
                                   4723 ;-----------------------------
                                   4724 ; BASIC: PUSH expr|rel|cond 
                                   4725 ; push the result on xtack
                                   4726 ;-----------------------------
      0030EE                       4727 xpush:
      0030EE CD 1C 74         [ 4] 4728 	call condition 
      0030F1 81               [ 4] 4729 	ret 
                                   4730 
                                   4731 ;------------------------------
                                   4732 ; BASIC: POP 
                                   4733 ; pop top of xstack 
                                   4734 ;------------------------------
      0030F2                       4735 xpop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      0030F2                       4736 	_xpop 
      0030F2 90 F6            [ 1]    1     ld a,(y)
      0030F4 93               [ 1]    2     ldw x,y 
      0030F5 EE 01            [ 2]    3     ldw x,(1,x)
      0030F7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030FB 81               [ 4] 4737 	ret 
                                   4738 
                                   4739 
                                   4740 ;------------------------------
                                   4741 ; BASIC: ALLOC expr 
                                   4742 ; allocate expr element on xtack 
                                   4743 ;-------------------------------
      0030FC                       4744 xalloc: 
      0030FC CD 1B 5B         [ 4] 4745 	call expression 
      0030FF A1 84            [ 1] 4746 	cp a,#TK_INTGR
      003101 27 03            [ 1] 4747 	jreq 1$ 
      003103 CC 16 D7         [ 2] 4748 	jp syntax_error
      003106                       4749 1$: _xpop 
      003106 90 F6            [ 1]    1     ld a,(y)
      003108 93               [ 1]    2     ldw x,y 
      003109 EE 01            [ 2]    3     ldw x,(1,x)
      00310B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00310F 4D               [ 1] 4750 	tnz a 
      003110 27 05            [ 1] 4751 	jreq 3$ 
      003112 A6 0A            [ 1] 4752 2$:	ld a,#ERR_BAD_VALUE
      003114 CC 16 D9         [ 2] 4753 	jp tb_error 
      003117 A3 00 14         [ 2] 4754 3$: cpw x,#XSTACK_SIZE 
      00311A 22 F6            [ 1] 4755 	jrugt 2$
      00311C A6 03            [ 1] 4756 	ld a,#CELL_SIZE 
      00311E 42               [ 4] 4757 	mul x,a 
      00311F CF 00 0D         [ 2] 4758 	ldw acc16,x 
      003122 72 B2 00 0D      [ 2] 4759 	subw y,acc16 
      003126 90 A3 17 38      [ 2] 4760 	cpw y,#xstack_full
      00312A 22 05            [ 1] 4761 	jrugt 9$
      00312C A6 01            [ 1] 4762 	ld a,#ERR_MEM_FULL
      00312E CC 16 D9         [ 2] 4763 	jp tb_error 
      003131                       4764 9$:	 
      003131 81               [ 4] 4765 	ret 
                                   4766 
                                   4767 
                                   4768 ;------------------------------
                                   4769 ;  BASIC DROP expr 
                                   4770 ;  expr in range {0..XSTACK_SIZE}
                                   4771 ;  discard n elements from xtack
                                   4772 ;------------------------------
      003132                       4773 xdrop:
      003132 CD 1B 5B         [ 4] 4774 	call expression 
      003135 A1 84            [ 1] 4775 	cp a,#TK_INTGR
      003137 27 03            [ 1] 4776 	jreq 1$ 
      003139 CC 16 D7         [ 2] 4777 	jp syntax_error 
      00313C                       4778 1$:	_xpop 
      00313C 90 F6            [ 1]    1     ld a,(y)
      00313E 93               [ 1]    2     ldw x,y 
      00313F EE 01            [ 2]    3     ldw x,(1,x)
      003141 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      003145 9F               [ 1] 4779 	ld a,xl 
      003146 A4 1F            [ 1] 4780 	and a,#0x1f 
      003148 5F               [ 1] 4781 	clrw x 
      003149 97               [ 1] 4782 	ld xl,a 
      00314A A6 03            [ 1] 4783 	ld a,#CELL_SIZE 
      00314C 42               [ 4] 4784 	mul x,a 
      00314D CF 00 0D         [ 2] 4785 	ldw acc16,x  
      003150 72 B9 00 0D      [ 2] 4786 	addw y,acc16 
      003154 90 A3 17 73      [ 2] 4787 	cpw y,#XSTACK_EMPTY 
      003158 23 04            [ 2] 4788 	jrule 9$
      00315A 90 AE 17 73      [ 2] 4789 	ldw y,#XSTACK_EMPTY 
      00315E 81               [ 4] 4790 9$:	ret 
                                   4791 
                                   4792 ;-----------------------
                                   4793 ; check if value in A:X 
                                   4794 ; is inside xstack bound
                                   4795 ; output:
                                   4796 ;    X     slot address  
                                   4797 ;-----------------------
      00315F                       4798 xstack_bound:
      00315F 4D               [ 1] 4799 	tnz a 
      003160 26 16            [ 1] 4800 	jrne 8$ 
      003162 A3 00 14         [ 2] 4801 1$: cpw x,#XSTACK_SIZE 
      003165 22 11            [ 1] 4802 	jrugt 8$
      003167 A6 03            [ 1] 4803 	ld a,#CELL_SIZE 
      003169 42               [ 4] 4804 	mul x,a
      00316A CF 00 0D         [ 2] 4805 	ldw acc16,x 
      00316D 93               [ 1] 4806 	ldw x,y 
      00316E 72 BB 00 0D      [ 2] 4807 	addw x,acc16 
      003172 A3 17 73         [ 2] 4808 	cpw x,#XSTACK_EMPTY 
      003175 24 01            [ 1] 4809 	jruge 8$  
      003177 81               [ 4] 4810 	ret 
      003178 A6 0A            [ 1] 4811 8$: ld a,#ERR_BAD_VALUE
      00317A CC 16 D9         [ 2] 4812 	jp tb_error 
                                   4813 
                                   4814 ;-------------------------
                                   4815 ; BASIC: PUT expr, cond 
                                   4816 ; expr -> slot 
                                   4817 ; cond -> valut to put 
                                   4818 ; on xstack 
                                   4819 ;-------------------------
      00317D                       4820 xput:
      00317D CD 1A 19         [ 4] 4821 	call arg_list 
      003180 A1 02            [ 1] 4822 	cp a,#2 
      003182 27 03            [ 1] 4823 	jreq 1$ 
      003184 CC 16 D7         [ 2] 4824 0$:	jp syntax_error
      003187                       4825 1$: _xpop   ; value to put 
      003187 90 F6            [ 1]    1     ld a,(y)
      003189 93               [ 1]    2     ldw x,y 
      00318A EE 01            [ 2]    3     ldw x,(1,x)
      00318C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003190 89               [ 2] 4826 	pushw x 
      003191 88               [ 1] 4827 	push a 
      003192                       4828 	_xpop    ; slot 
      003192 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      003194 93               [ 1]    2     ldw x,y 
      003195 EE 01            [ 2]    3     ldw x,(1,x)
      003197 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00319B CD 31 5F         [ 4] 4829 	call xstack_bound
      00319E CF 00 19         [ 2] 4830     ldw ptr16,x 
      0031A1 84               [ 1] 4831 	pop a 
      0031A2 85               [ 2] 4832 	popw x 
      0031A3 72 C7 00 19      [ 4] 4833 	ld [ptr16],a 
      0031A7 72 5C 00 1A      [ 1] 4834 	inc ptr8 
      0031AB 72 CF 00 19      [ 5] 4835 	ldw [ptr16],x 
      0031AF 81               [ 4] 4836 	ret 
                                   4837 
                                   4838 ;------------------------
                                   4839 ; BASIC: PICK expr 
                                   4840 ; get nième element on 
                                   4841 ; xtack. 
                                   4842 ;-----------------------
      0031B0                       4843 xpick:
      0031B0 CD 1A 14         [ 4] 4844 	call func_args 
      0031B3 A1 01            [ 1] 4845 	cp a,#1 
      0031B5 27 03            [ 1] 4846 	jreq 1$
      0031B7 CC 16 D7         [ 2] 4847 	jp syntax_error 
      0031BA                       4848 1$: _xpop 
      0031BA 90 F6            [ 1]    1     ld a,(y)
      0031BC 93               [ 1]    2     ldw x,y 
      0031BD EE 01            [ 2]    3     ldw x,(1,x)
      0031BF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0031C3 CD 31 5F         [ 4] 4849 	call xstack_bound
      0031C6 F6               [ 1] 4850     ld a,(x)
      0031C7 EE 01            [ 2] 4851 	ldw x,(1,x)				
      0031C9 81               [ 4] 4852 	ret 
                                   4853 
                                   4854 
                                   4855 ;----------------------------
                                   4856 ; BASIC: AUTORUN \C | label  
                                   4857 ;  \C -> cancel autorun 
                                   4858 ;  addr -> register an 
                                   4859 ;    autorun program 
                                   4860 ;    this program execute at 
                                   4861 ;     reset/boot 
                                   4862 ;----------------------------
      0031CA                       4863 cmd_auto_run:
      0031CA CD 19 F1         [ 4] 4864 	call cmd_line_only
      0031CD CD 18 3E         [ 4] 4865 	call next_token 
      0031D0 A1 03            [ 1] 4866 	cp a,#TK_LABEL 
      0031D2 27 19            [ 1] 4867 	jreq 1$ 
      0031D4 A1 04            [ 1] 4868 	cp a,#TK_CHAR 
      0031D6 26 12            [ 1] 4869 	jrne 0$ 
      0031D8 F6               [ 1] 4870 	ld a,(x)
      0031D9 72 5C 00 01      [ 1] 4871 	inc in 
      0031DD A4 DF            [ 1] 4872 	and a,#0xDF 
      0031DF A1 43            [ 1] 4873 	cp a,#'C 
      0031E1 26 07            [ 1] 4874 	jrne 0$ 
      0031E3 AE 40 00         [ 2] 4875 	ldw x,#EEPROM_BASE 
      0031E6 CD 29 2B         [ 4] 4876 	call erase_header
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      0031E9 81               [ 4] 4877 	ret 
      0031EA CC 16 D7         [ 2] 4878 0$:	jp syntax_error
      0031ED 89               [ 2] 4879 1$:	pushw x 
      0031EE CD 18 57         [ 4] 4880 	call skip_string
      0031F1 85               [ 2] 4881 	popw x 
      0031F2 CD 32 23         [ 4] 4882 	call search_program
      0031F5 26 05            [ 1] 4883 	jrne 2$ 
      0031F7 A6 0A            [ 1] 4884 	ld a,#ERR_BAD_VALUE
      0031F9 CC 16 D9         [ 2] 4885 	jp tb_error 
      0031FC 89               [ 2] 4886 2$: pushw x 
      0031FD 72 5F 00 18      [ 1] 4887 	clr farptr 
      003201 AE 40 00         [ 2] 4888 	ldw x,#EEPROM_BASE
      003204 CF 00 19         [ 2] 4889 	ldw ptr16,x 
      003207 C6 32 21         [ 1] 4890 	ld a,AR_SIGN 
      00320A 5F               [ 1] 4891 	clrw x 	 
      00320B CD 07 D3         [ 4] 4892 	call write_byte
      00320E C6 32 22         [ 1] 4893 	ld a,AR_SIGN+1
      003211 CD 07 D3         [ 4] 4894 	call write_byte 
      003214 7B 01            [ 1] 4895 	ld a,(1,sp)
      003216 CD 07 D3         [ 4] 4896 	call write_byte 
      003219 7B 02            [ 1] 4897 	ld a,(2,sp)
      00321B CD 07 D3         [ 4] 4898 	call write_byte 
      00321E                       4899 	_drop 2 
      00321E 5B 02            [ 2]    1     addw sp,#2 
      003220 81               [ 4] 4900 	ret 
                                   4901 
      003221 41 52                 4902 AR_SIGN: .ascii "AR" ; autorun signature 
                                   4903 
                                   4904 ;-------------------------------
                                   4905 ; search a program in flash 
                                   4906 ; memory with a label at first 
                                   4907 ; that correspond to name 
                                   4908 ; pointed by X 
                                   4909 ; input:
                                   4910 ;    x      *name 
                                   4911 ; output: 
                                   4912 ;    X     prog_addr|0
                                   4913 ;-------------------------------
                           000001  4914 	WLKPTR=1 
                           000003  4915 	PNAME=3
                           000005  4916 	LIMIT=5
                           000007  4917 	YSAVE=7
                           000006  4918 	VSIZE=6 
      003223                       4919 search_program:
      003223 90 89            [ 2] 4920 	pushw y 
      003225                       4921 	_vars VSIZE 
      003225 52 06            [ 2]    1     sub sp,#VSIZE 
      003227 1F 03            [ 2] 4922 	ldw (PNAME,sp),x 
      003229 CD 2B 29         [ 4] 4923 	call uflash 
      00322C 1F 05            [ 2] 4924 	ldw (LIMIT,sp),x 
      00322E AE 38 80         [ 2] 4925 	ldw x,#app_space 
      003231 1F 01            [ 2] 4926 1$:	ldw (WLKPTR,sp),x  
      003233 4F               [ 1] 4927 	clr a 
      003234 CD 25 37         [ 4] 4928 	call is_program_addr
      003237 26 10            [ 1] 4929 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      003239 1C 00 07         [ 2] 4930 	addw x,#7 
      00323C F6               [ 1] 4931 	ld a,(x)
      00323D A1 03            [ 1] 4932 	cp a,#TK_LABEL 
      00323F 26 08            [ 1] 4933 	jrne 4$ 
      003241 5C               [ 1] 4934 	incw x 
      003242 16 03            [ 2] 4935 	ldw y,(PNAME,sp)
      003244 CD 13 DE         [ 4] 4936 	call strcmp
      003247 26 0A            [ 1] 4937 	jrne 6$
      003249                       4938 4$: 
      003249 CD 29 F2         [ 4] 4939 	call skip_to_next
      00324C 13 05            [ 2] 4940 	cpw x,(LIMIT,sp)
      00324E 25 E1            [ 1] 4941 	jrult 1$
      003250 5F               [ 1] 4942 	clrw x 
      003251 20 05            [ 2] 4943 	jra 8$
      003253                       4944 6$: ; found label 
      003253 1E 01            [ 2] 4945 	ldw x,(WLKPTR,sp)
      003255 1C 00 04         [ 2] 4946 	addw x,#4 	
      003258                       4947 8$:	
      003258                       4948 	_drop VSIZE  
      003258 5B 06            [ 2]    1     addw sp,#VSIZE 
      00325A 90 85            [ 2] 4949 	popw y 
      00325C 81               [ 4] 4950 	ret 
                                   4951 
                                   4952 
                                   4953 ;-------------------------------
                                   4954 ; BASIC: CHAIN label [, line#]
                                   4955 ; Execute another program like it 
                                   4956 ; is a sub-routine. When the 
                                   4957 ; called program terminate 
                                   4958 ; execution continue at caller 
                                   4959 ; after CHAIN command. 
                                   4960 ; if a line# is given, the 
                                   4961 ; chained program start execution 
                                   4962 ; at this line#.
                                   4963 ;---------------------------------
                           000003  4964 	CHAIN_LN=3 
                           000005  4965 	CHAIN_ADDR=5 
                           000007  4966 	CHAIN_BP=7
                           000009  4967 	CHAIN_IN=9
                           00000A  4968 	CHAIN_COUNT=10 
                           00000B  4969 	CHAIN_TXTBGN=11 
                           00000D  4970 	CHAIN_TXTEND=13 
                           00000C  4971 	VSIZE=12 
                           000004  4972 	DISCARD=4 
      00325D                       4973 cmd_chain:
      00325D 85               [ 2] 4974 	popw x 
      00325E                       4975 	_vars VSIZE 
      00325E 52 0C            [ 2]    1     sub sp,#VSIZE 
      003260 89               [ 2] 4976 	pushw x
      003261 0F 03            [ 1] 4977 	clr (CHAIN_LN,sp) 
      003263 0F 04            [ 1] 4978 	clr (CHAIN_LN+1,sp)  
      003265 A6 03            [ 1] 4979 	ld a,#TK_LABEL 
      003267 CD 1A 07         [ 4] 4980 	call expect 
      00326A 89               [ 2] 4981 	pushw x 
      00326B CD 18 57         [ 4] 4982 	call skip_string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00326E 85               [ 2] 4983 	popw x 
      00326F CD 32 23         [ 4] 4984 	call search_program 
      003272 5D               [ 2] 4985 	tnzw x  
      003273 26 05            [ 1] 4986 	jrne 1$ 
      003275 A6 0A            [ 1] 4987 0$:	ld a,#ERR_BAD_VALUE
      003277 CC 16 D9         [ 2] 4988 	jp tb_error 
      00327A 1F 05            [ 2] 4989 1$: ldw (CHAIN_ADDR,sp), x ; program addr 
      00327C CD 18 3E         [ 4] 4990     call next_token 
      00327F A1 08            [ 1] 4991 	cp a,#TK_COMMA 
      003281 26 0C            [ 1] 4992 	jrne 4$
      003283 A6 84            [ 1] 4993 	ld a,#TK_INTGR
      003285 CD 1A 07         [ 4] 4994 	call expect 
      003288 CD 18 70         [ 4] 4995 	call get_int24 
      00328B 1F 03            [ 2] 4996 	ldw (CHAIN_LN,sp),x
      00328D 20 05            [ 2] 4997 	jra 6$ 
      00328F                       4998 4$: _unget_token 
      00328F 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      003294                       4999 6$: ; save chain context 
      003294 CE 00 04         [ 2] 5000 	ldw x,basicptr 
      003297 1F 07            [ 2] 5001 	ldw (CHAIN_BP,sp),x 
      003299 CE 00 01         [ 2] 5002 	ldw x,in
      00329C 1F 09            [ 2] 5003 	ldw (CHAIN_IN,sp),x
      00329E CE 00 1B         [ 2] 5004 	ldw x,txtbgn 
      0032A1 1F 0B            [ 2] 5005 	ldw (CHAIN_TXTBGN,sp),x
      0032A3 CE 00 1D         [ 2] 5006 	ldw x,txtend 
      0032A6 1F 0D            [ 2] 5007 	ldw (CHAIN_TXTEND,sp),x  
                                   5008 ; set chained program context 	
      0032A8 1E 05            [ 2] 5009 	ldw x,(CHAIN_ADDR,sp)
      0032AA CF 00 04         [ 2] 5010 	ldw basicptr,x 
      0032AD CF 00 1B         [ 2] 5011 	ldw txtbgn,x 
      0032B0 1D 00 02         [ 2] 5012 	subw x,#2
      0032B3 FE               [ 2] 5013 	ldw x,(x)
      0032B4 72 FB 05         [ 2] 5014 	addw x,(CHAIN_ADDR,sp)
      0032B7 CF 00 1D         [ 2] 5015 	ldw txtend,x  
      0032BA 1E 05            [ 2] 5016 	ldw x,(CHAIN_ADDR,sp)
      0032BC E6 02            [ 1] 5017 	ld a,(2,x)
      0032BE C7 00 02         [ 1] 5018 	ld count,a 
      0032C1 35 03 00 01      [ 1] 5019 	mov in,#3 
      0032C5 1E 03            [ 2] 5020 	ldw x,(CHAIN_LN,sp)
      0032C7 5D               [ 2] 5021 	tnzw x 
      0032C8 27 13            [ 1] 5022 	jreq 8$ 
      0032CA 90 89            [ 2] 5023 	pushw y
      0032CC 4F               [ 1] 5024 	clr a  
      0032CD CD 0C 8D         [ 4] 5025 	call search_lineno
      0032D0 90 85            [ 2] 5026 	popw y 
      0032D2 5D               [ 2] 5027 	tnzw x 
      0032D3 27 A0            [ 1] 5028 	jreq 0$ 
      0032D5 CF 00 04         [ 2] 5029 	ldw basicptr,x 
      0032D8 E6 02            [ 1] 5030 	ld a,(2,x)
      0032DA C7 00 02         [ 1] 5031 	ld count,a 
      0032DD 72 5C 00 33      [ 1] 5032 8$: inc chain_level
      0032E1 85               [ 2] 5033 	popw x 
      0032E2                       5034 	_drop DISCARD
      0032E2 5B 04            [ 2]    1     addw sp,#DISCARD 
      0032E4 FC               [ 2] 5035 	jp (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



                                   5036 
                                   5037 
                                   5038 ;------------------------------
                                   5039 ;      dictionary 
                                   5040 ; format:
                                   5041 ;   link:   2 bytes 
                                   5042 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   5043 ;   cmd_name: 16 byte max 
                                   5044 ;   code_addr: 2 bytes 
                                   5045 ;------------------------------
                                   5046 	.macro _dict_entry len,name,code_addr 
                                   5047 	.word LINK 
                                   5048 	LINK=.
                                   5049 name:
                                   5050 	.byte len   	
                                   5051 	.ascii "name"
                                   5052 	.word code_addr  
                                   5053 	.endm 
                                   5054 
                           000000  5055 	LINK=0
                                   5056 ; respect alphabetic order for BASIC names from Z-A
                                   5057 ; this sort order is for a cleaner WORDS cmd output. 	
      0032E5                       5058 kword_end:
      0032E5                       5059 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      0032E5 00 00                    1 	.word LINK 
                           0032E7     2 	LINK=.
      0032E7                          3 XOR:
      0032E7 A3                       4 	.byte 3+F_XOR   	
      0032E8 58 4F 52                 5 	.ascii "XOR"
      0032EB 00 8A                    6 	.word TK_XOR  
      0032ED                       5060 	_dict_entry,5,WRITE,write  
      0032ED 32 E7                    1 	.word LINK 
                           0032EF     2 	LINK=.
      0032EF                          3 WRITE:
      0032EF 05                       4 	.byte 5   	
      0032F0 57 52 49 54 45           5 	.ascii "WRITE"
      0032F5 2A 59                    6 	.word write  
      0032F7                       5061 	_dict_entry,5,WORDS,words 
      0032F7 32 EF                    1 	.word LINK 
                           0032F9     2 	LINK=.
      0032F9                          3 WORDS:
      0032F9 05                       4 	.byte 5   	
      0032FA 57 4F 52 44 53           5 	.ascii "WORDS"
      0032FF 2D A6                    6 	.word words  
      003301                       5062 	_dict_entry 4,WAIT,wait 
      003301 32 F9                    1 	.word LINK 
                           003303     2 	LINK=.
      003303                          3 WAIT:
      003303 04                       4 	.byte 4   	
      003304 57 41 49 54              5 	.ascii "WAIT"
      003308 21 8E                    6 	.word wait  
      00330A                       5063 	_dict_entry,3+F_IFUNC,USR,usr
      00330A 33 03                    1 	.word LINK 
                           00330C     2 	LINK=.
      00330C                          3 USR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      00330C 13                       4 	.byte 3+F_IFUNC   	
      00330D 55 53 52                 5 	.ascii "USR"
      003310 2B 4B                    6 	.word usr  
      003312                       5064 	_dict_entry,5,UNTIL,until 
      003312 33 0C                    1 	.word LINK 
                           003314     2 	LINK=.
      003314                          3 UNTIL:
      003314 05                       4 	.byte 5   	
      003315 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00331A 2E DE                    6 	.word until  
      00331C                       5065 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00331C 33 14                    1 	.word LINK 
                           00331E     2 	LINK=.
      00331E                          3 UFLASH:
      00331E 16                       4 	.byte 6+F_IFUNC   	
      00331F 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      003325 2B 29                    6 	.word uflash  
      003327                       5066 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      003327 33 1E                    1 	.word LINK 
                           003329     2 	LINK=.
      003329                          3 UBOUND:
      003329 16                       4 	.byte 6+F_IFUNC   	
      00332A 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      003330 1D 28                    6 	.word ubound  
      003332                       5067 	_dict_entry,4,TONE,tone  
      003332 33 29                    1 	.word LINK 
                           003334     2 	LINK=.
      003334                          3 TONE:
      003334 04                       4 	.byte 4   	
      003335 54 4F 4E 45              5 	.ascii "TONE"
      003339 26 3C                    6 	.word tone  
      00333B                       5068 	_dict_entry,2,TO,to
      00333B 33 34                    1 	.word LINK 
                           00333D     2 	LINK=.
      00333D                          3 TO:
      00333D 02                       4 	.byte 2   	
      00333E 54 4F                    5 	.ascii "TO"
      003340 22 F8                    6 	.word to  
      003342                       5069 	_dict_entry,5,TIMER,set_timer
      003342 33 3D                    1 	.word LINK 
                           003344     2 	LINK=.
      003344                          3 TIMER:
      003344 05                       4 	.byte 5   	
      003345 54 49 4D 45 52           5 	.ascii "TIMER"
      00334A 2E 13                    6 	.word set_timer  
      00334C                       5070 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00334C 33 44                    1 	.word LINK 
                           00334E     2 	LINK=.
      00334E                          3 TIMEOUT:
      00334E 17                       4 	.byte 7+F_IFUNC   	
      00334F 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003356 2E 2A                    6 	.word timeout  
      003358                       5071 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      003358 33 4E                    1 	.word LINK 
                           00335A     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      00335A                          3 TICKS:
      00335A 15                       4 	.byte 5+F_IFUNC   	
      00335B 54 49 43 4B 53           5 	.ascii "TICKS"
      003360 2B F7                    6 	.word get_ticks  
      003362                       5072 	_dict_entry,4,STOP,stop 
      003362 33 5A                    1 	.word LINK 
                           003364     2 	LINK=.
      003364                          3 STOP:
      003364 04                       4 	.byte 4   	
      003365 53 54 4F 50              5 	.ascii "STOP"
      003369 27 A5                    6 	.word stop  
      00336B                       5073 	_dict_entry,4,STEP,step 
      00336B 33 64                    1 	.word LINK 
                           00336D     2 	LINK=.
      00336D                          3 STEP:
      00336D 04                       4 	.byte 4   	
      00336E 53 54 45 50              5 	.ascii "STEP"
      003372 23 3E                    6 	.word step  
      003374                       5074 	_dict_entry,5,SPIWR,spi_write
      003374 33 6D                    1 	.word LINK 
                           003376     2 	LINK=.
      003376                          3 SPIWR:
      003376 05                       4 	.byte 5   	
      003377 53 50 49 57 52           5 	.ascii "SPIWR"
      00337C 30 AB                    6 	.word spi_write  
      00337E                       5075 	_dict_entry,6,SPISEL,spi_select
      00337E 33 76                    1 	.word LINK 
                           003380     2 	LINK=.
      003380                          3 SPISEL:
      003380 06                       4 	.byte 6   	
      003381 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003387 30 D2                    6 	.word spi_select  
      003389                       5076 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      003389 33 80                    1 	.word LINK 
                           00338B     2 	LINK=.
      00338B                          3 SPIRD:
      00338B 15                       4 	.byte 5+F_IFUNC   	
      00338C 53 50 49 52 44           5 	.ascii "SPIRD"
      003391 30 CB                    6 	.word spi_read  
      003393                       5077 	_dict_entry,5,SPIEN,spi_enable 
      003393 33 8B                    1 	.word LINK 
                           003395     2 	LINK=.
      003395                          3 SPIEN:
      003395 05                       4 	.byte 5   	
      003396 53 50 49 45 4E           5 	.ascii "SPIEN"
      00339B 30 33                    6 	.word spi_enable  
      00339D                       5078 	_dict_entry,5,SLEEP,sleep 
      00339D 33 95                    1 	.word LINK 
                           00339F     2 	LINK=.
      00339F                          3 SLEEP:
      00339F 05                       4 	.byte 5   	
      0033A0 53 4C 45 45 50           5 	.ascii "SLEEP"
      0033A5 2B 7A                    6 	.word sleep  
      0033A7                       5079     _dict_entry,4,SIZE,cmd_size 
      0033A7 33 9F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



                           0033A9     2 	LINK=.
      0033A9                          3 SIZE:
      0033A9 04                       4 	.byte 4   	
      0033AA 53 49 5A 45              5 	.ascii "SIZE"
      0033AE 1C FB                    6 	.word cmd_size  
      0033B0                       5080 	_dict_entry,4,SAVE,cmd_save 
      0033B0 33 A9                    1 	.word LINK 
                           0033B2     2 	LINK=.
      0033B2                          3 SAVE:
      0033B2 04                       4 	.byte 4   	
      0033B3 53 41 56 45              5 	.ascii "SAVE"
      0033B7 29 45                    6 	.word cmd_save  
      0033B9                       5081 	_dict_entry 3,RUN,cmd_run
      0033B9 33 B2                    1 	.word LINK 
                           0033BB     2 	LINK=.
      0033BB                          3 RUN:
      0033BB 03                       4 	.byte 3   	
      0033BC 52 55 4E                 5 	.ascii "RUN"
      0033BF 25 48                    6 	.word cmd_run  
      0033C1                       5082 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0033C1 33 BB                    1 	.word LINK 
                           0033C3     2 	LINK=.
      0033C3                          3 RSHIFT:
      0033C3 16                       4 	.byte 6+F_IFUNC   	
      0033C4 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0033CA 2C 41                    6 	.word rshift  
      0033CC                       5083 	_dict_entry,3+F_IFUNC,RND,random 
      0033CC 33 C3                    1 	.word LINK 
                           0033CE     2 	LINK=.
      0033CE                          3 RND:
      0033CE 13                       4 	.byte 3+F_IFUNC   	
      0033CF 52 4E 44                 5 	.ascii "RND"
      0033D2 2D 0B                    6 	.word random  
      0033D4                       5084 	_dict_entry,6,RETURN,return 
      0033D4 33 CE                    1 	.word LINK 
                           0033D6     2 	LINK=.
      0033D6                          3 RETURN:
      0033D6 06                       4 	.byte 6   	
      0033D7 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0033DD 25 21                    6 	.word return  
      0033DF                       5085 	_dict_entry,7,RESTORE,restore 
      0033DF 33 D6                    1 	.word LINK 
                           0033E1     2 	LINK=.
      0033E1                          3 RESTORE:
      0033E1 07                       4 	.byte 7   	
      0033E2 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0033E9 2F 75                    6 	.word restore  
      0033EB                       5086 	_dict_entry 3,REM,remark 
      0033EB 33 E1                    1 	.word LINK 
                           0033ED     2 	LINK=.
      0033ED                          3 REM:
      0033ED 03                       4 	.byte 3   	
      0033EE 52 45 4D                 5 	.ascii "REM"
      0033F1 21 88                    6 	.word remark  
      0033F3                       5087 	_dict_entry,6,REBOOT,cold_start
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      0033F3 33 ED                    1 	.word LINK 
                           0033F5     2 	LINK=.
      0033F5                          3 REBOOT:
      0033F5 06                       4 	.byte 6   	
      0033F6 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0033FC 00 B5                    6 	.word cold_start  
      0033FE                       5088 	_dict_entry,4+F_IFUNC,READ,read  
      0033FE 33 F5                    1 	.word LINK 
                           003400     2 	LINK=.
      003400                          3 READ:
      003400 14                       4 	.byte 4+F_IFUNC   	
      003401 52 45 41 44              5 	.ascii "READ"
      003405 2F E2                    6 	.word read  
      003407                       5089 	_dict_entry,4+F_IFUNC,QKEY,qkey
      003407 34 00                    1 	.word LINK 
                           003409     2 	LINK=.
      003409                          3 QKEY:
      003409 14                       4 	.byte 4+F_IFUNC   	
      00340A 51 4B 45 59              5 	.ascii "QKEY"
      00340E 2B 1C                    6 	.word qkey  
      003410                       5090 	_dict_entry,3,PUT,xput 
      003410 34 09                    1 	.word LINK 
                           003412     2 	LINK=.
      003412                          3 PUT:
      003412 03                       4 	.byte 3   	
      003413 50 55 54                 5 	.ascii "PUT"
      003416 31 7D                    6 	.word xput  
      003418                       5091 	_dict_entry,4,PUSH,xpush   
      003418 34 12                    1 	.word LINK 
                           00341A     2 	LINK=.
      00341A                          3 PUSH:
      00341A 04                       4 	.byte 4   	
      00341B 50 55 53 48              5 	.ascii "PUSH"
      00341F 30 EE                    6 	.word xpush  
      003421                       5092 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003421 34 1A                    1 	.word LINK 
                           003423     2 	LINK=.
      003423                          3 PORTI:
      003423 15                       4 	.byte 5+F_IFUNC   	
      003424 50 4F 52 54 49           5 	.ascii "PORTI"
      003429 2F 34                    6 	.word const_porti  
      00342B                       5093 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      00342B 34 23                    1 	.word LINK 
                           00342D     2 	LINK=.
      00342D                          3 PORTG:
      00342D 15                       4 	.byte 5+F_IFUNC   	
      00342E 50 4F 52 54 47           5 	.ascii "PORTG"
      003433 2F 2F                    6 	.word const_portg  
      003435                       5094 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003435 34 2D                    1 	.word LINK 
                           003437     2 	LINK=.
      003437                          3 PORTF:
      003437 15                       4 	.byte 5+F_IFUNC   	
      003438 50 4F 52 54 46           5 	.ascii "PORTF"
      00343D 2F 2A                    6 	.word const_portf  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      00343F                       5095 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      00343F 34 37                    1 	.word LINK 
                           003441     2 	LINK=.
      003441                          3 PORTE:
      003441 15                       4 	.byte 5+F_IFUNC   	
      003442 50 4F 52 54 45           5 	.ascii "PORTE"
      003447 2F 25                    6 	.word const_porte  
      003449                       5096 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      003449 34 41                    1 	.word LINK 
                           00344B     2 	LINK=.
      00344B                          3 PORTD:
      00344B 15                       4 	.byte 5+F_IFUNC   	
      00344C 50 4F 52 54 44           5 	.ascii "PORTD"
      003451 2F 20                    6 	.word const_portd  
      003453                       5097 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003453 34 4B                    1 	.word LINK 
                           003455     2 	LINK=.
      003455                          3 PORTC:
      003455 15                       4 	.byte 5+F_IFUNC   	
      003456 50 4F 52 54 43           5 	.ascii "PORTC"
      00345B 2F 1B                    6 	.word const_portc  
      00345D                       5098 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      00345D 34 55                    1 	.word LINK 
                           00345F     2 	LINK=.
      00345F                          3 PORTB:
      00345F 15                       4 	.byte 5+F_IFUNC   	
      003460 50 4F 52 54 42           5 	.ascii "PORTB"
      003465 2F 16                    6 	.word const_portb  
      003467                       5099 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      003467 34 5F                    1 	.word LINK 
                           003469     2 	LINK=.
      003469                          3 PORTA:
      003469 15                       4 	.byte 5+F_IFUNC   	
      00346A 50 4F 52 54 41           5 	.ascii "PORTA"
      00346F 2F 11                    6 	.word const_porta  
      003471                       5100 	_dict_entry 5,PRINT,print 
      003471 34 69                    1 	.word LINK 
                           003473     2 	LINK=.
      003473                          3 PRINT:
      003473 05                       4 	.byte 5   	
      003474 50 52 49 4E 54           5 	.ascii "PRINT"
      003479 20 4D                    6 	.word print  
      00347B                       5101 	_dict_entry,4+F_IFUNC,POUT,const_output
      00347B 34 73                    1 	.word LINK 
                           00347D     2 	LINK=.
      00347D                          3 POUT:
      00347D 14                       4 	.byte 4+F_IFUNC   	
      00347E 50 4F 55 54              5 	.ascii "POUT"
      003482 2F 52                    6 	.word const_output  
      003484                       5102 	_dict_entry,3+F_IFUNC,POP,xpop 
      003484 34 7D                    1 	.word LINK 
                           003486     2 	LINK=.
      003486                          3 POP:
      003486 13                       4 	.byte 3+F_IFUNC   	
      003487 50 4F 50                 5 	.ascii "POP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      00348A 30 F2                    6 	.word xpop  
      00348C                       5103 	_dict_entry,4,POKE,poke 
      00348C 34 86                    1 	.word LINK 
                           00348E     2 	LINK=.
      00348E                          3 POKE:
      00348E 04                       4 	.byte 4   	
      00348F 50 4F 4B 45              5 	.ascii "POKE"
      003493 22 69                    6 	.word poke  
      003495                       5104 	_dict_entry,5,PMODE,pin_mode 
      003495 34 8E                    1 	.word LINK 
                           003497     2 	LINK=.
      003497                          3 PMODE:
      003497 05                       4 	.byte 5   	
      003498 50 4D 4F 44 45           5 	.ascii "PMODE"
      00349D 2C 7C                    6 	.word pin_mode  
      00349F                       5105 	_dict_entry,4+F_IFUNC,PINP,const_input
      00349F 34 97                    1 	.word LINK 
                           0034A1     2 	LINK=.
      0034A1                          3 PINP:
      0034A1 14                       4 	.byte 4+F_IFUNC   	
      0034A2 50 49 4E 50              5 	.ascii "PINP"
      0034A6 2F 57                    6 	.word const_input  
      0034A8                       5106 	_dict_entry,4+F_IFUNC,PICK,xpick 
      0034A8 34 A1                    1 	.word LINK 
                           0034AA     2 	LINK=.
      0034AA                          3 PICK:
      0034AA 14                       4 	.byte 4+F_IFUNC   	
      0034AB 50 49 43 4B              5 	.ascii "PICK"
      0034AF 31 B0                    6 	.word xpick  
      0034B1                       5107 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0034B1 34 AA                    1 	.word LINK 
                           0034B3     2 	LINK=.
      0034B3                          3 PEEK:
      0034B3 14                       4 	.byte 4+F_IFUNC   	
      0034B4 50 45 45 4B              5 	.ascii "PEEK"
      0034B8 22 8A                    6 	.word peek  
      0034BA                       5108 	_dict_entry,5,PAUSE,pause 
      0034BA 34 B3                    1 	.word LINK 
                           0034BC     2 	LINK=.
      0034BC                          3 PAUSE:
      0034BC 05                       4 	.byte 5   	
      0034BD 50 41 55 53 45           5 	.ascii "PAUSE"
      0034C2 2B 85                    6 	.word pause  
      0034C4                       5109 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0034C4 34 BC                    1 	.word LINK 
                           0034C6     2 	LINK=.
      0034C6                          3 PAD:
      0034C6 13                       4 	.byte 3+F_IFUNC   	
      0034C7 50 41 44                 5 	.ascii "PAD"
      0034CA 30 E9                    6 	.word pad_ref  
      0034CC                       5110 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0034CC 34 C6                    1 	.word LINK 
                           0034CE     2 	LINK=.
      0034CE                          3 OR:
      0034CE 92                       4 	.byte 2+F_OR   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0034CF 4F 52                    5 	.ascii "OR"
      0034D1 00 89                    6 	.word TK_OR  
      0034D3                       5111 	_dict_entry,2,ON,cmd_on 
      0034D3 34 CE                    1 	.word LINK 
                           0034D5     2 	LINK=.
      0034D5                          3 ON:
      0034D5 02                       4 	.byte 2   	
      0034D6 4F 4E                    5 	.ascii "ON"
      0034D8 24 67                    6 	.word cmd_on  
      0034DA                       5112 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0034DA 34 D5                    1 	.word LINK 
                           0034DC     2 	LINK=.
      0034DC                          3 ODR:
      0034DC 13                       4 	.byte 3+F_IFUNC   	
      0034DD 4F 44 52                 5 	.ascii "ODR"
      0034E0 2F 39                    6 	.word const_odr  
      0034E2                       5113 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0034E2 34 DC                    1 	.word LINK 
                           0034E4     2 	LINK=.
      0034E4                          3 NOT:
      0034E4 73                       4 	.byte 3+F_NOT   	
      0034E5 4E 4F 54                 5 	.ascii "NOT"
      0034E8 00 87                    6 	.word TK_NOT  
      0034EA                       5114 	_dict_entry,4,NEXT,next 
      0034EA 34 E4                    1 	.word LINK 
                           0034EC     2 	LINK=.
      0034EC                          3 NEXT:
      0034EC 04                       4 	.byte 4   	
      0034ED 4E 45 58 54              5 	.ascii "NEXT"
      0034F1 23 80                    6 	.word next  
      0034F3                       5115 	_dict_entry,3,NEW,new
      0034F3 34 EC                    1 	.word LINK 
                           0034F5     2 	LINK=.
      0034F5                          3 NEW:
      0034F5 03                       4 	.byte 3   	
      0034F6 4E 45 57                 5 	.ascii "NEW"
      0034F9 27 F0                    6 	.word new  
      0034FB                       5116 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0034FB 34 F5                    1 	.word LINK 
                           0034FD     2 	LINK=.
      0034FD                          3 LSHIFT:
      0034FD 16                       4 	.byte 6+F_IFUNC   	
      0034FE 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      003504 2C 15                    6 	.word lshift  
      003506                       5117 	_dict_entry,4+F_IFUNC,LOG2,log2 
      003506 34 FD                    1 	.word LINK 
                           003508     2 	LINK=.
      003508                          3 LOG2:
      003508 14                       4 	.byte 4+F_IFUNC   	
      003509 4C 4F 47 32              5 	.ascii "LOG2"
      00350D 2E 78                    6 	.word log2  
      00350F                       5118 	_dict_entry 4,LIST,cmd_list
      00350F 35 08                    1 	.word LINK 
                           003511     2 	LINK=.
      003511                          3 LIST:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      003511 04                       4 	.byte 4   	
      003512 4C 49 53 54              5 	.ascii "LIST"
      003516 1F 24                    6 	.word cmd_list  
      003518                       5119 	_dict_entry 3,LET,let 
      003518 35 11                    1 	.word LINK 
                           00351A     2 	LINK=.
      00351A                          3 LET:
      00351A 03                       4 	.byte 3   	
      00351B 4C 45 54                 5 	.ascii "LET"
      00351E 1D 33                    6 	.word let  
      003520                       5120 	_dict_entry,3+F_CFUNC,KEY,key 
      003520 35 1A                    1 	.word LINK 
                           003522     2 	LINK=.
      003522                          3 KEY:
      003522 23                       4 	.byte 3+F_CFUNC   	
      003523 4B 45 59                 5 	.ascii "KEY"
      003526 2B 18                    6 	.word key  
      003528                       5121 	_dict_entry,7,IWDGREF,refresh_iwdg
      003528 35 22                    1 	.word LINK 
                           00352A     2 	LINK=.
      00352A                          3 IWDGREF:
      00352A 07                       4 	.byte 7   	
      00352B 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003532 2E 73                    6 	.word refresh_iwdg  
      003534                       5122 	_dict_entry,6,IWDGEN,enable_iwdg
      003534 35 2A                    1 	.word LINK 
                           003536     2 	LINK=.
      003536                          3 IWDGEN:
      003536 06                       4 	.byte 6   	
      003537 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00353D 2E 35                    6 	.word enable_iwdg  
      00353F                       5123 	_dict_entry,5,INPUT,input_var  
      00353F 35 36                    1 	.word LINK 
                           003541     2 	LINK=.
      003541                          3 INPUT:
      003541 05                       4 	.byte 5   	
      003542 49 4E 50 55 54           5 	.ascii "INPUT"
      003547 20 E9                    6 	.word input_var  
      003549                       5124 	_dict_entry,2,IF,if 
      003549 35 41                    1 	.word LINK 
                           00354B     2 	LINK=.
      00354B                          3 IF:
      00354B 02                       4 	.byte 2   	
      00354C 49 46                    5 	.ascii "IF"
      00354E 22 AB                    6 	.word if  
      003550                       5125 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003550 35 4B                    1 	.word LINK 
                           003552     2 	LINK=.
      003552                          3 IDR:
      003552 13                       4 	.byte 3+F_IFUNC   	
      003553 49 44 52                 5 	.ascii "IDR"
      003556 2F 3E                    6 	.word const_idr  
      003558                       5126 	_dict_entry,3,HEX,hex_base
      003558 35 52                    1 	.word LINK 
                           00355A     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      00355A                          3 HEX:
      00355A 03                       4 	.byte 3   	
      00355B 48 45 58                 5 	.ascii "HEX"
      00355E 1C E8                    6 	.word hex_base  
      003560                       5127 	_dict_entry,4,GOTO,goto 
      003560 35 5A                    1 	.word LINK 
                           003562     2 	LINK=.
      003562                          3 GOTO:
      003562 04                       4 	.byte 4   	
      003563 47 4F 54 4F              5 	.ascii "GOTO"
      003567 24 F2                    6 	.word goto  
      003569                       5128 	_dict_entry,5,GOSUB,gosub 
      003569 35 62                    1 	.word LINK 
                           00356B     2 	LINK=.
      00356B                          3 GOSUB:
      00356B 05                       4 	.byte 5   	
      00356C 47 4F 53 55 42           5 	.ascii "GOSUB"
      003571 25 05                    6 	.word gosub  
      003573                       5129 	_dict_entry,3,GET,cmd_get 
      003573 35 6B                    1 	.word LINK 
                           003575     2 	LINK=.
      003575                          3 GET:
      003575 03                       4 	.byte 3   	
      003576 47 45 54                 5 	.ascii "GET"
      003579 26 04                    6 	.word cmd_get  
      00357B                       5130 	_dict_entry,4+F_IFUNC,FREE,free
      00357B 35 75                    1 	.word LINK 
                           00357D     2 	LINK=.
      00357D                          3 FREE:
      00357D 14                       4 	.byte 4+F_IFUNC   	
      00357E 46 52 45 45              5 	.ascii "FREE"
      003582 1C F2                    6 	.word free  
      003584                       5131 	_dict_entry,3,FOR,for 
      003584 35 7D                    1 	.word LINK 
                           003586     2 	LINK=.
      003586                          3 FOR:
      003586 03                       4 	.byte 3   	
      003587 46 4F 52                 5 	.ascii "FOR"
      00358A 22 C8                    6 	.word for  
      00358C                       5132 	_dict_entry,4,FCPU,fcpu 
      00358C 35 86                    1 	.word LINK 
                           00358E     2 	LINK=.
      00358E                          3 FCPU:
      00358E 04                       4 	.byte 4   	
      00358F 46 43 50 55              5 	.ascii "FCPU"
      003593 2C 6D                    6 	.word fcpu  
      003595                       5133 	_dict_entry,5,ERASE,cmd_erase 
      003595 35 8E                    1 	.word LINK 
                           003597     2 	LINK=.
      003597                          3 ERASE:
      003597 05                       4 	.byte 5   	
      003598 45 52 41 53 45           5 	.ascii "ERASE"
      00359D 28 50                    6 	.word cmd_erase  
      00359F                       5134 	_dict_entry,3,END,cmd_end  
      00359F 35 97                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



                           0035A1     2 	LINK=.
      0035A1                          3 END:
      0035A1 03                       4 	.byte 3   	
      0035A2 45 4E 44                 5 	.ascii "END"
      0035A5 25 D8                    6 	.word cmd_end  
      0035A7                       5135 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      0035A7 35 A1                    1 	.word LINK 
                           0035A9     2 	LINK=.
      0035A9                          3 EEPROM:
      0035A9 16                       4 	.byte 6+F_IFUNC   	
      0035AA 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0035B0 2F 5C                    6 	.word const_eeprom_base  
      0035B2                       5136 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      0035B2 35 A9                    1 	.word LINK 
                           0035B4     2 	LINK=.
      0035B4                          3 EEFREE:
      0035B4 16                       4 	.byte 6+F_IFUNC   	
      0035B5 45 45 46 52 45 45        5 	.ascii "EEFREE"
      0035BB 1D 87                    6 	.word func_eefree  
      0035BD                       5137 	_dict_entry,4,EDIT,cmd_edit 
      0035BD 35 B4                    1 	.word LINK 
                           0035BF     2 	LINK=.
      0035BF                          3 EDIT:
      0035BF 04                       4 	.byte 4   	
      0035C0 45 44 49 54              5 	.ascii "EDIT"
      0035C4 1F E8                    6 	.word cmd_edit  
      0035C6                       5138 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0035C6 35 BF                    1 	.word LINK 
                           0035C8     2 	LINK=.
      0035C8                          3 DWRITE:
      0035C8 06                       4 	.byte 6+F_CMD   	
      0035C9 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0035CF 27 5A                    6 	.word digital_write  
      0035D1                       5139 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0035D1 35 C8                    1 	.word LINK 
                           0035D3     2 	LINK=.
      0035D3                          3 DROP:
      0035D3 04                       4 	.byte 4   	
      0035D4 44 52 4F 50              5 	.ascii "DROP"
      0035D8 31 32                    6 	.word xdrop  
      0035DA                       5140 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0035DA 35 D3                    1 	.word LINK 
                           0035DC     2 	LINK=.
      0035DC                          3 DREAD:
      0035DC 15                       4 	.byte 5+F_IFUNC   	
      0035DD 44 52 45 41 44           5 	.ascii "DREAD"
      0035E2 27 23                    6 	.word digital_read  
      0035E4                       5141 	_dict_entry,2,DO,do_loop
      0035E4 35 DC                    1 	.word LINK 
                           0035E6     2 	LINK=.
      0035E6                          3 DO:
      0035E6 02                       4 	.byte 2   	
      0035E7 44 4F                    5 	.ascii "DO"
      0035E9 2E CB                    6 	.word do_loop  
      0035EB                       5142 	_dict_entry,3,DIR,cmd_dir
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      0035EB 35 E6                    1 	.word LINK 
                           0035ED     2 	LINK=.
      0035ED                          3 DIR:
      0035ED 03                       4 	.byte 3   	
      0035EE 44 49 52                 5 	.ascii "DIR"
      0035F1 2A 0A                    6 	.word cmd_dir  
      0035F3                       5143 	_dict_entry,3,DIM,cmd_dim 
      0035F3 35 ED                    1 	.word LINK 
                           0035F5     2 	LINK=.
      0035F5                          3 DIM:
      0035F5 03                       4 	.byte 3   	
      0035F6 44 49 4D                 5 	.ascii "DIM"
      0035F9 1E 04                    6 	.word cmd_dim  
      0035FB                       5144 	_dict_entry,3,DEC,dec_base
      0035FB 35 F5                    1 	.word LINK 
                           0035FD     2 	LINK=.
      0035FD                          3 DEC:
      0035FD 03                       4 	.byte 3   	
      0035FE 44 45 43                 5 	.ascii "DEC"
      003601 1C ED                    6 	.word dec_base  
      003603                       5145 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      003603 35 FD                    1 	.word LINK 
                           003605     2 	LINK=.
      003605                          3 DDR:
      003605 13                       4 	.byte 3+F_IFUNC   	
      003606 44 44 52                 5 	.ascii "DDR"
      003609 2F 43                    6 	.word const_ddr  
      00360B                       5146 	_dict_entry,4,DATA,data  
      00360B 36 05                    1 	.word LINK 
                           00360D     2 	LINK=.
      00360D                          3 DATA:
      00360D 04                       4 	.byte 4   	
      00360E 44 41 54 41              5 	.ascii "DATA"
      003612 2F 61                    6 	.word data  
      003614                       5147 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      003614 36 0D                    1 	.word LINK 
                           003616     2 	LINK=.
      003616                          3 CR2:
      003616 13                       4 	.byte 3+F_IFUNC   	
      003617 43 52 32                 5 	.ascii "CR2"
      00361A 2F 4D                    6 	.word const_cr2  
      00361C                       5148 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      00361C 36 16                    1 	.word LINK 
                           00361E     2 	LINK=.
      00361E                          3 CR1:
      00361E 13                       4 	.byte 3+F_IFUNC   	
      00361F 43 52 31                 5 	.ascii "CR1"
      003622 2F 48                    6 	.word const_cr1  
      003624                       5149 	_dict_entry,5,CONST,cmd_const 
      003624 36 1E                    1 	.word LINK 
                           003626     2 	LINK=.
      003626                          3 CONST:
      003626 05                       4 	.byte 5   	
      003627 43 4F 4E 53 54           5 	.ascii "CONST"
      00362C 1D F7                    6 	.word cmd_const  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      00362E                       5150 	_dict_entry,4+F_CFUNC,CHAR,func_char
      00362E 36 26                    1 	.word LINK 
                           003630     2 	LINK=.
      003630                          3 CHAR:
      003630 24                       4 	.byte 4+F_CFUNC   	
      003631 43 48 41 52              5 	.ascii "CHAR"
      003635 2A C2                    6 	.word func_char  
      003637                       5151 	_dict_entry,5,CHAIN,cmd_chain
      003637 36 30                    1 	.word LINK 
                           003639     2 	LINK=.
      003639                          3 CHAIN:
      003639 05                       4 	.byte 5   	
      00363A 43 48 41 49 4E           5 	.ascii "CHAIN"
      00363F 32 5D                    6 	.word cmd_chain  
      003641                       5152 	_dict_entry,3,BYE,bye 
      003641 36 39                    1 	.word LINK 
                           003643     2 	LINK=.
      003643                          3 BYE:
      003643 03                       4 	.byte 3   	
      003644 42 59 45                 5 	.ascii "BYE"
      003647 2B 71                    6 	.word bye  
      003649                       5153 	_dict_entry,5,BTOGL,bit_toggle
      003649 36 43                    1 	.word LINK 
                           00364B     2 	LINK=.
      00364B                          3 BTOGL:
      00364B 05                       4 	.byte 5   	
      00364C 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003651 22 10                    6 	.word bit_toggle  
      003653                       5154 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      003653 36 4B                    1 	.word LINK 
                           003655     2 	LINK=.
      003655                          3 BTEST:
      003655 15                       4 	.byte 5+F_IFUNC   	
      003656 42 54 45 53 54           5 	.ascii "BTEST"
      00365B 22 32                    6 	.word bit_test  
      00365D                       5155 	_dict_entry,4,BSET,bit_set 
      00365D 36 55                    1 	.word LINK 
                           00365F     2 	LINK=.
      00365F                          3 BSET:
      00365F 04                       4 	.byte 4   	
      003660 42 53 45 54              5 	.ascii "BSET"
      003664 21 CB                    6 	.word bit_set  
      003666                       5156 	_dict_entry,4,BRES,bit_reset
      003666 36 5F                    1 	.word LINK 
                           003668     2 	LINK=.
      003668                          3 BRES:
      003668 04                       4 	.byte 4   	
      003669 42 52 45 53              5 	.ascii "BRES"
      00366D 21 ED                    6 	.word bit_reset  
      00366F                       5157 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00366F 36 68                    1 	.word LINK 
                           003671     2 	LINK=.
      003671                          3 BIT:
      003671 13                       4 	.byte 3+F_IFUNC   	
      003672 42 49 54                 5 	.ascii "BIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      003675 2E A5                    6 	.word bitmask  
      003677                       5158 	_dict_entry,3,AWU,awu 
      003677 36 71                    1 	.word LINK 
                           003679     2 	LINK=.
      003679                          3 AWU:
      003679 03                       4 	.byte 3   	
      00367A 41 57 55                 5 	.ascii "AWU"
      00367D 2B A5                    6 	.word awu  
      00367F                       5159 	_dict_entry,7,AUTORUN,cmd_auto_run
      00367F 36 79                    1 	.word LINK 
                           003681     2 	LINK=.
      003681                          3 AUTORUN:
      003681 07                       4 	.byte 7   	
      003682 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      003689 31 CA                    6 	.word cmd_auto_run  
      00368B                       5160 	_dict_entry,3+F_IFUNC,ASC,ascii
      00368B 36 81                    1 	.word LINK 
                           00368D     2 	LINK=.
      00368D                          3 ASC:
      00368D 13                       4 	.byte 3+F_IFUNC   	
      00368E 41 53 43                 5 	.ascii "ASC"
      003691 2A D9                    6 	.word ascii  
      003693                       5161 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      003693 36 8D                    1 	.word LINK 
                           003695     2 	LINK=.
      003695                          3 AND:
      003695 83                       4 	.byte 3+F_AND   	
      003696 41 4E 44                 5 	.ascii "AND"
      003699 00 88                    6 	.word TK_AND  
      00369B                       5162 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      00369B 36 95                    1 	.word LINK 
                           00369D     2 	LINK=.
      00369D                          3 ALLOC:
      00369D 05                       4 	.byte 5   	
      00369E 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      0036A3 30 FC                    6 	.word xalloc  
      0036A5                       5163 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      0036A5 36 9D                    1 	.word LINK 
                           0036A7     2 	LINK=.
      0036A7                          3 ADCREAD:
      0036A7 17                       4 	.byte 7+F_IFUNC   	
      0036A8 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      0036AF 26 E7                    6 	.word analog_read  
      0036B1                       5164 	_dict_entry,5,ADCON,power_adc 
      0036B1 36 A7                    1 	.word LINK 
                           0036B3     2 	LINK=.
      0036B3                          3 ADCON:
      0036B3 05                       4 	.byte 5   	
      0036B4 41 44 43 4F 4E           5 	.ascii "ADCON"
      0036B9 26 97                    6 	.word power_adc  
      0036BB                       5165 kword_dict::
      0036BB                       5166 	_dict_entry,3+F_IFUNC,ABS,abs
      0036BB 36 B3                    1 	.word LINK 
                           0036BD     2 	LINK=.
      0036BD                          3 ABS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      0036BD 13                       4 	.byte 3+F_IFUNC   	
      0036BE 41 42 53                 5 	.ascii "ABS"
      0036C1 2B FE                    6 	.word abs  
                                   5167 
                                   5168 
                                   5169 
                                   5170 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      0036C3                         30 test:
      0036C3                         31     _vars VSIZE 
      0036C3 52 08            [ 2]    1     sub sp,#VSIZE 
      0036C5 AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      0036C8 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      0036CA CE 00 0F         [ 2]   34     ldw x,ticks 
      0036CD 1F 01            [ 2]   35     ldw (T,sp),x
      0036CF                         36 1$: ; test add24 
      0036CF A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      0036D1 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      0036D4 C7 00 0C         [ 1]   39     ld acc24,a 
      0036D7 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      0036DA A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      0036DC AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      0036DF CD 01 7E         [ 4]   43     call add24 
      0036E2 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      0036E4 1D 00 01         [ 2]   45     subw x,#1
      0036E7 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0036E9 26 E4            [ 1]   47     jrne 1$
      0036EB CD 18 9D         [ 4]   48     call prt_acc24
      0036EE A6 20            [ 1]   49     ld a,#SPACE 
      0036F0 CD 09 47         [ 4]   50     call putc 
      0036F3 CE 00 0F         [ 2]   51     ldw x,ticks 
      0036F6 72 F0 01         [ 2]   52     subw x,(T,sp)
      0036F9 CD 18 86         [ 4]   53     call prt_i16  
      0036FC A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      0036FE CD 09 47         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003701 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      003704 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      003706 CE 00 0F         [ 2]   60     ldw x,ticks 
      003709 1F 01            [ 2]   61     ldw (T,sp),x 
      00370B                         62 2$: 
      00370B A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      00370D AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003710 C7 00 0C         [ 1]   65     ld acc24,a 
      003713 CF 00 0D         [ 2]   66     ldw acc24+1,x  
      003716 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003718 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      00371B CD 02 79         [ 4]   69     call mul24 
      00371E 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003720 1D 00 01         [ 2]   71     subw x,#1
      003723 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      003725 26 E4            [ 1]   73     jrne 2$ 
      003727 CD 18 9D         [ 4]   74    call prt_acc24 
      00372A A6 20            [ 1]   75    ld a,#SPACE 
      00372C CD 09 47         [ 4]   76    call putc 
      00372F CE 00 0F         [ 2]   77     ldw x,ticks 
      003732 72 F0 01         [ 2]   78     subw x,(T,sp)
      003735 CD 18 86         [ 4]   79     call prt_i16 
      003738 A6 0D            [ 1]   80     ld a,#CR 
      00373A CD 09 47         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      00373D CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      003740 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      003742 CE 00 0F         [ 2]   85     ldw x,ticks 
      003745 1F 01            [ 2]   86     ldw (T,sp),x 
      003747                         87 3$: 
      003747 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003749 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      00374C C7 00 0C         [ 1]   90     ld acc24,a 
      00374F CF 00 0D         [ 2]   91     ldw acc24+1,x  
      003752 A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      003754 AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003757 CD 02 79         [ 4]   94     call mul24 
      00375A 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      00375C 1D 00 01         [ 2]   96     subw x,#1
      00375F 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      003761 26 E4            [ 1]   98     jrne 3$ 
      003763 CD 18 9D         [ 4]   99     call prt_acc24    
      003766 A6 20            [ 1]  100     ld a,#SPACE 
      003768 CD 09 47         [ 4]  101     call putc 
      00376B CE 00 0F         [ 2]  102     ldw x,ticks 
      00376E 72 F0 01         [ 2]  103     subw x,(T,sp)
      003771 CD 18 86         [ 4]  104     call prt_i16 
      003774 A6 0D            [ 1]  105     ld a,#CR 
      003776 CD 09 47         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003779 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      00377C 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



      00377E CE 00 0F         [ 2]  110     ldw x,ticks 
      003781 1F 01            [ 2]  111     ldw (T,sp),x 
      003783                        112 4$:
      003783 A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      003785 AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003788 C7 00 0C         [ 1]  115     ld acc24,a 
      00378B CF 00 0D         [ 2]  116     ldw acc24+1,x  
      00378E A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      003790 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      003793 CD 02 79         [ 4]  119     call mul24 
      003796 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003798 1D 00 01         [ 2]  121     subw x,#1
      00379B 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      00379D 26 E4            [ 1]  123     jrne 4$ 
      00379F CD 18 9D         [ 4]  124     call prt_acc24 
      0037A2 A6 20            [ 1]  125     ld a,#SPACE 
      0037A4 CD 09 47         [ 4]  126     call putc 
      0037A7 CE 00 0F         [ 2]  127     ldw x,ticks 
      0037AA 72 F0 01         [ 2]  128     subw x,(T,sp)
      0037AD CD 18 86         [ 4]  129     call prt_i16 
      0037B0 A6 0D            [ 1]  130     ld a,#CR 
      0037B2 CD 09 47         [ 4]  131     call putc 
                                    132 ; test abs24 
      0037B5 CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      0037B8 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      0037BA CE 00 0F         [ 2]  135     ldw x,ticks 
      0037BD 1F 01            [ 2]  136     ldw (T,sp),x 
      0037BF                        137 5$: 
      0037BF A6 FF            [ 1]  138     ld a,#0xff
      0037C1 AE FF FF         [ 2]  139     ldw x,#0xffff
      0037C4 CD 01 F3         [ 4]  140     call abs24 
      0037C7 C7 00 0C         [ 1]  141     ld acc24,a 
      0037CA CF 00 0D         [ 2]  142     ldw acc24+1,x
      0037CD 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      0037CF 1D 00 01         [ 2]  144     subw x,#1
      0037D2 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      0037D4 26 E9            [ 1]  146     jrne 5$ 
      0037D6 CD 18 9D         [ 4]  147     call prt_acc24 
      0037D9 A6 20            [ 1]  148     ld a,#SPACE 
      0037DB CD 09 47         [ 4]  149     call putc 
      0037DE CE 00 0F         [ 2]  150     ldw x,ticks 
      0037E1 72 F0 01         [ 2]  151     subw x,(T,sp)
      0037E4 CD 18 86         [ 4]  152     call prt_i16 
      0037E7                        153 6$:
      0037E7 A6 0D            [ 1]  154     ld a,#CR 
      0037E9 CD 09 47         [ 4]  155     call putc 
      0037EC CD 38 32         [ 4]  156     call read_integer 
      0037EF 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0037F4 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0037F9 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0037FE CD 38 32         [ 4]  160     call read_integer 
      003801 C6 00 0C         [ 1]  161     ld a,acc24 
      003804 CE 00 0D         [ 2]  162     ldw x,acc16 
      003807 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      00380C 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



      003811 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      003816 CD 03 07         [ 4]  166     call div24 
      003819 88               [ 1]  167     push a 
      00381A 89               [ 2]  168     pushw x 
      00381B CD 18 9D         [ 4]  169     call prt_acc24 
      00381E A6 20            [ 1]  170     ld a,#SPACE 
      003820 CD 09 47         [ 4]  171     call putc 
      003823 85               [ 2]  172     popw x
      003824 CF 00 0D         [ 2]  173     ldw acc16,x  
      003827 32 00 0C         [ 1]  174     pop acc24 
      00382A CD 18 9D         [ 4]  175     call prt_acc24
      00382D 20 B8            [ 2]  176     jra 6$
      00382F                        177     _drop VSIZE 
      00382F 5B 08            [ 2]    1     addw sp,#VSIZE 
      003831 81               [ 4]  178     ret 
                                    179 
                                    180 
      003832                        181 read_integer:
      003832 A6 3F            [ 1]  182     ld a,#'? 
      003834 CD 09 47         [ 4]  183     call putc  
      003837 72 5F 00 02      [ 1]  184 	clr count  
      00383B CD 0A A9         [ 4]  185 	call readln 
      00383E AE 16 68         [ 2]  186 	ldw x,#tib 
      003841 3B 00 02         [ 1]  187 	push count
      003844 4B 00            [ 1]  188 	push #0 
      003846 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003849 5C               [ 1]  190 	incw x 
      00384A                        191 	_drop 2 
      00384A 5B 02            [ 2]    1     addw sp,#2 
      00384C 72 5F 00 01      [ 1]  192 	clr in 
      003850 CD 0F 3D         [ 4]  193 	call get_token
      003853 A1 84            [ 1]  194 	cp a,#TK_INTGR
      003855 27 0F            [ 1]  195 	jreq 3$ 
      003857 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003859 CD 0F 3D         [ 4]  197 	call get_token 
      00385C A1 84            [ 1]  198 	cp a,#TK_INTGR 
      00385E 27 03            [ 1]  199 	jreq 2$
      003860 CC 16 D7         [ 2]  200 	jp syntax_error
      003863                        201 2$:
      003863 CD 02 1D         [ 4]  202 	call neg_acc24  	
      003866                        203 3$: 
      003866 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003880                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003880                         30 app_space::
      003880 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003882 00 00                   32 app_size: .word 0 
      003884                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        0036BD R
    ACK     =  000006     |   4 ADCON      0036B3 R   |   4 ADCREAD    0036A7 R
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   4 ALLOC      00369D R
  4 AND        003695 R   |     ARG_OFS =  000002     |     ARROW_LE=  000080 
    ARROW_RI=  000081     |   4 AR_SIGN    003221 R   |   4 ASC        00368D R
    ATMP    =  000001     |     ATTRIB  =  000002     |   4 AUTORUN    003681 R
  4 AUTO_RUN   00015C R   |   4 AWU        003679 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   4 BIT        003671 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCKS  =  000005     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000D 
  4 BRES       003668 R   |     BS      =  000008     |   4 BSET       00365F R
    BSIZE   =  000006     |   4 BTEST      003655 R   |   4 BTOGL      00364B R
    BTW     =  000001     |   4 BYE        003643 R   |     BYTE    =  000003 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000003     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   4 CHAIN      003639 R   |     CHAIN_AD=  000005 
    CHAIN_BP=  000007     |     CHAIN_CN=  000008     |     CHAIN_CO=  00000A 
    CHAIN_IN=  000009     |     CHAIN_LN=  000003     |     CHAIN_TX=  00000B 
    CHAIN_TX=  00000D     |   4 CHAR       003630 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000006     |     CNTDWN  =  000002     |     CNTR    =  000003 
    CNT_LO  =  000004     |     CODE_ADD=  000001     |     COLON   =  00003A 
    COMMA   =  00002C     |   4 CONST      003626 R   |     COUNT   =  000003 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   4 CR1        00361E R   |   4 CR2        003616 R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       00360D R
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        003605 R   |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        0035FD R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        0035F5 R   |   4 DIR        0035ED R   |     DISCARD =  000004 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         0035E6 R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |   4 DREAD      0035DC R
  4 DROP       0035D3 R   |   4 DWRITE     0035C8 R   |   4 EDIT       0035BF R
  4 EEFREE     0035B4 R   |   4 EEPROM     0035A9 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        0035A1 R   |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      003597 R   |   4 ERASED     0029E5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_NO_P=  000012 
    ERR_OVER=  000010     |     ERR_RD_O=  000011     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       00358E R
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001F04 R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLN_REJE=  000006     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        003586 R   |   4 FREE       00357D R   |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        003575 R   |   4 GOSUB      00356B R   |   4 GOTO       003562 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        00355A R
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        003552 R
  4 IF         00354B R   |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      003541 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT24   =  000005     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     003536 R   |   4 IWDGREF    00352A R   |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        003522 R   |     KEY_END =  000083     |     KW_TYPE_=  0000F0 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        00351A R   |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   4 LINES_RE   001FBF R   |   4 LINK    =  0036BD R
  4 LIST       003511 R   |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG2       003508 R
    LOOP_CNT=  002710     |   4 LSHIFT     0034FD R   |     MAJOR   =  000002 
    MASK    =  000002     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000001     |     N1      =  000005     |     NAFR    =  004804 
    NAK     =  000015     |     NAMEPTR =  000001     |     NAME_MAX=  00000F 
    NCLKOPT =  004808     |     NEG     =  000001     |   4 NEW        0034F5 R
  4 NEXT       0034EC R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        0034E4 R   |     NOT_OP  =  000001 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  4 NonHandl   000000 R   |   4 ODR        0034DC R   |   4 ON         0034D5 R
    ONOFF   =  000003     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         0034CE R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVRWR   =  000004     |     PA      =  000000     |   4 PAD        0034C6 R
    PAD_SIZE=  000080     |   4 PAUSE      0034BC R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       0034B3 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PG_SIZE =  000001     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  4 PICK       0034AA R   |     PINNO   =  000001     |   4 PINP       0034A1 R
    PINVAL  =  000002     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   4 PMODE      003497 R   |     PNAME   =  000003 
  4 POKE       00348E R   |   4 POP        003486 R   |   4 PORTA      003469 R
  4 PORTB      00345F R   |   4 PORTC      003455 R   |   4 PORTD      00344B R
  4 PORTE      003441 R   |   4 PORTF      003437 R   |   4 PORTG      00342D R
  4 PORTI      003423 R   |   4 POUT       00347D R   |     PREV    =  000001 
    PRG_SIZE=  000003     |   4 PRINT      003473 R   |     PROD    =  000001 
    PROD_SIG=  000004     |   4 PROG_ADD   001EDA R   |   4 PROG_SIZ   001EEC R
    PSIZE   =  00000B     |     PSTR    =  000003     |   4 PUSH       00341A R
  4 PUT        003412 R   |   4 QKEY       003409 R   |     QSIGN   =  000005 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   4 RAM_MEM    001F15 R
    RAM_SIZE=  001800     |   4 READ       003400 R   |   4 REBOOT     0033F5 R
    RECLEN  =  000005     |     REC_LEN =  000003     |     REC_XTRA=  000005 
  4 REG_A      0004DA R   |   4 REG_CC     0004DE R   |   4 REG_PC     0004CE R
  4 REG_SP     0004E3 R   |   4 REG_X      0004D6 R   |   4 REG_Y      0004D2 R
    RELOP   =  000001     |   4 REM        0033ED R   |   4 RESTORE    0033E1 R
    RETL1   =  000001     |   4 RETURN     0033D6 R   |     RET_ADDR=  000001 
    RET_BPTR=  000003     |     RET_INW =  000005     |   4 RND        0033CE R
    RONLY   =  000005     |     ROP     =  004800     |     RS      =  00001E 
  4 RSHIFT     0033C3 R   |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        0033BB R   |     RXCHAR  =  000001     |     RX_QUEUE=  000008 
    R_A     =  000001     |     R_CC    =  000009     |     R_PC    =  00000A 
    R_X     =  000002     |     R_Y     =  000004     |   4 SAVE       0033B2 R
    SAV_ACC1=  000006     |     SAV_ACC2=  000008     |     SAV_COUN=  00000A 
    SAV_IN  =  000009     |     SEMIC   =  00003B     |     SEMICOL =  000001 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   0029E3 R   |   4 SIZE       0033A9 R   |     SKIP    =  000005 
  4 SLEEP      00339F R   |     SLEN    =  000002     |     SO      =  00000E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    SOH     =  000001     |     SPACE   =  000020     |   4 SPIEN      003395 R
  4 SPIRD      00338B R   |   4 SPISEL     003380 R   |   4 SPIWR      003376 R
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     000491 R
  4 STEP       00336D R   |   4 STOP       003364 R   |     STR     =  000002 
  4 STR_BYTE   001EFD R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
  4 SysCall    000012 R   |     T       =  000001     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      00335A R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    00334E R   |   4 TIMER      003344 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_AND  =  000088 
    TK_ARRAY=  000005     |     TK_CFUNC=  000082     |     TK_CHAR =  000004 
    TK_CMD  =  000080     |     TK_COLON=  000009     |     TK_COMMA=  000008 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FLOAT=  000086     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000081 
    TK_INTGR=  000084     |     TK_LABEL=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000006     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_NOT  =  000087     |     TK_OR   =  000089 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    TK_PLUS =  000010     |     TK_QSTR =  000002     |     TK_RPARE=  000007 
    TK_SEMIC=  00000A     |     TK_VAR  =  000085     |     TK_XOR  =  00008A 
  4 TO         00333D R   |   4 TONE       003334 R   |     TOWRITE =  000005 
  4 Timer4Up   000013 R   |     U8      =  000001     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART2   =  000001     |     UART3   =  000002     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   4 UBOUND     003329 R
  4 UBTN_Han   00005A R   |   4 UFLASH     00331E R   |   4 UNTIL      003314 R
    US      =  00001F     |   4 USER_ABO   000062 R   |   4 USR        00330C R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  4 Uart1RxH   0008C4 R   |   4 UserButt   000036 R   |     VAL1    =  02FFFF 
    VAL2    =  00002A     |     VAL3    =  000003     |     VAL4    =  0005FF 
    VAL5    =  FFFFFFFD     |     VAR_NAME=  000001     |     VSIZE   =  000008 
    VT      =  00000B     |   4 WAIT       003303 R   |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WLEN    =  000001     |     WLKPTR  =  000001     |   4 WORDS      0032F9 R
  4 WRITE      0032EF R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        0032E7 R   |     XSAVE   =  000002 
    XSTACK_E=  001773     |     XSTACK_S=  000014     |     XTEMP   =  000001 
    YSAVE   =  000007     |     YTEMP   =  000005     |   4 abs        002BFE R
  4 abs24      0001F3 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   000C0F R
  4 add24      00017E R   |   4 add_char   00137F R   |   4 add_spac   001185 R
  4 analog_r   0026E7 R   |   4 and_cond   001C22 R   |   4 and_fact   001BF2 R
  4 app        003884 R   |   4 app_sign   003880 R   |   4 app_size   003882 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

  4 app_spac   003880 GR  |   4 arduino_   002CEB R   |   4 arg_list   001A19 R
  5 array_si   000020 R   |   4 ascii      002AD9 R   |   4 at_tst     000FF7 R
  4 atoi24     001925 GR  |   4 atoi_exi   001994 R   |   4 awu        002BA5 R
  4 awu02      002BB8 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       00265E R   |   4 beep_1kh   002631 GR  |   4 bin_exit   000E5E R
  4 bit_rese   0021ED R   |   4 bit_set    0021CB R   |   4 bit_test   002232 R
  4 bit_togg   002210 R   |   4 bitmask    002EA5 R   |   4 bkslsh_t   000FA4 R
  4 bksp       0009AE R   |   2 block_bu   0016B8 GR  |   4 block_er   0007AD R
  4 break_po   0027D2 R   |   4 bye        002B71 R   |   5 chain_le   000033 R
  4 clear_au   0008FB R   |   4 clear_ba   0014E3 R   |   4 clear_bl   0028E3 R
  4 clear_va   001443 R   |   4 clock_in   00007D R   |   4 cmd_auto   0031CA R
  4 cmd_chai   00325D R   |   4 cmd_cons   001DF7 R   |   4 cmd_dim    001E04 R
  4 cmd_dim1   001E07 R   |   4 cmd_dim2   001E0D R   |   4 cmd_dir    002A0A R
  4 cmd_edit   001FE8 R   |   4 cmd_end    0025D8 R   |   4 cmd_eras   002850 R
  4 cmd_get    002604 R   |   4 cmd_itf    0004FE R   |   4 cmd_line   001766 R
  4 cmd_line   0019F1 R   |   4 cmd_list   001F24 R   |   4 cmd_name   00139F R
  4 cmd_on     002467 R   |   4 cmd_run    002548 R   |   4 cmd_save   002945 R
  4 cmd_size   001CFB R   |   4 cold_sta   0000B5 R   |   4 colon_ts   000FCB R
  4 comma_ts   000FD6 R   |   4 comp_msg   0016B6 R   |   4 compile    0010F1 GR
  4 conditio   001C74 R   |   4 const_cr   002F48 R   |   4 const_cr   002F4D R
  4 const_dd   002F43 R   |   4 const_ee   002F5C R   |   4 const_id   002F3E R
  4 const_in   002F57 R   |   4 const_od   002F39 R   |   4 const_ou   002F52 R
  4 const_po   002F11 R   |   4 const_po   002F16 R   |   4 const_po   002F1B R
  4 const_po   002F20 R   |   4 const_po   002F25 R   |   4 const_po   002F2A R
  4 const_po   002F2F R   |   4 const_po   002F34 R   |   4 convert_   000DCA R
  4 convert_   000972 R   |   4 copy_com   00102C R   |   5 count      000002 GR
  4 cp24       0001B8 R   |   4 cp24_ax    0001EA R   |   4 cp_loop    0019B4 R
  4 cpl24      0001FA R   |   4 cpy_cmd_   00116D R   |   4 cpy_quot   0011B6 R
  4 cs_high    0030E4 R   |   4 dash_tst   000FEC R   |   4 data       002F61 R
  4 data_err   002FDD R   |   5 data_len   000009 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 dec_base   001CED R   |   4 decomp_l   001243 R
  4 decompil   001206 GR  |   4 del_line   000CB8 R   |   4 delete_l   000A9B R
  4 delete_n   0009BE R   |   4 delete_u   000A60 R   |   4 digital_   002723 R
  4 digital_   00275A R   |   4 div24      000307 R   |   4 divu24_8   0002E9 R
  4 do_loop    002ECB R   |   4 do_progr   0007A0 R   |   4 dup24      00016F R
  5 dvar_bgn   00002F GR  |   5 dvar_end   000031 GR  |   4 enable_i   002E35 R
  4 end_at_l   001F6E R   |   4 eql_tst    001077 R   |   4 equal      001392 R
  4 erase_ex   0007D1 R   |   4 erase_fl   0007C7 R   |   4 erase_he   00292B R
  4 erase_pr   0027FB R   |   4 err_bad_   0015DF R   |   4 err_buf_   001655 R
  4 err_cmd_   0015A3 R   |   4 err_div0   001568 R   |   4 err_dupl   0015BD R
  4 err_math   00154F R   |   4 err_mem_   00152A R   |   4 err_msg    001504 R
  4 err_no_a   0015EB R   |   4 err_no_d   00161E R   |   4 err_no_f   001642 R
  4 err_no_l   001577 R   |   4 err_no_p   00162E R   |   4 err_not_   0015CE R
  4 err_not_   001688 R   |   4 err_over   001662 R   |   4 err_read   00166C R
  4 err_run_   00158D R   |   4 err_synt   001541 R   |   4 escaped    000DDF GR
  4 expect     001A07 R   |   4 expressi   001B5B R   |   4 factor     001A63 R
  5 farptr     000018 R   |   4 fcpu       002C6D R   |   4 fetchc     000605 R
  4 fill_wri   0028D3 R   |   4 final_te   000C08 R   |   5 flags      000022 GR
  4 for        0022C8 R   |   4 free       001CF2 R   |   5 free_eep   000023 R
  7 free_ram   000090 R   |   4 func_arg   001A14 R   |   4 func_cha   002AC2 R
  4 func_eef   001D87 R   |   4 ge         001394 R   |   4 get_addr   001866 R
  4 get_arra   001A35 R   |   4 get_char   001880 R   |   4 get_esca   00097E R
  4 get_int2   001870 R   |   4 get_targ   0023F5 R   |   4 get_targ   002403 R
  4 get_tick   002BF7 R   |   4 get_toke   000F3D GR  |   4 get_valu   001D76 R
  4 getc       000957 GR  |   4 gosub      002505 R   |   4 gosub_1    002508 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

  4 gosub_2    00250E R   |   4 goto       0024F2 R   |   4 goto_1     0024F5 R
  4 gt         001390 R   |   4 gt_tst     001082 R   |   4 hex_base   001CE8 R
  4 hex_dump   00069B R   |   4 if         0022AB R   |   5 in         000001 GR
  5 in.saved   000003 GR  |   5 in.w       000000 GR  |   4 incr_far   0008A8 R
  4 input_ex   002183 R   |   4 input_lo   0020ED R   |   4 input_va   0020E9 R
  4 insert_c   000A1D R   |   4 insert_l   000D24 R   |   4 interp_l   0017AA R
  4 interpre   001782 R   |   4 invalid    00056D R   |   4 invalid_   0005DB R
  4 is_alnum   000E91 GR  |   4 is_alpha   000E77 GR  |   4 is_data_   002F67 R
  4 is_digit   000E88 GR  |   4 is_erase   0029E7 R   |   4 is_minus   001F43 R
  4 is_progr   002537 R   |   4 is_symbo   000E9A R   |   4 itoa       0018BB GR
  4 itoa_loo   0018DD R   |   4 jp_to_ta   0024F8 R   |   4 key        002B18 R
  4 kword_di   0036BB GR  |   4 kword_en   0032E5 R   |   4 le         001399 R
  4 ledoff     0003CD R   |   4 ledon      0003C8 R   |   4 ledtoggl   0003D2 R
  4 left_par   0003DB R   |   4 let        001D33 GR  |   4 let_arra   001D41 R
  4 let_dvar   0017E3 R   |   4 let_eval   001D49 R   |   4 let_var    001D46 R
  4 lines_sk   001F53 R   |   4 list_exi   001FA3 R   |   4 list_loo   001F81 R
  4 log2       002E78 R   |   4 look_tar   002426 R   |   4 loop_bac   0023D8 R
  5 loop_dep   00001F R   |   4 loop_don   0023ED R   |   4 lshift     002C15 R
  4 lt         001397 R   |   4 lt_tst     0010AB R   |   4 mem_peek   000589 R
  4 mod24      0003A1 R   |   4 move       0013FF GR  |   4 move_dow   00141E R
  4 move_era   00072F R   |   4 move_exi   00143F R   |   4 move_lef   0009F5 R
  4 move_loo   001423 R   |   4 move_prg   00076F R   |   4 move_rig   000A03 R
  4 move_up    001410 R   |   4 mul24      000279 R   |   4 mul_char   001381 R
  4 mulu24_8   00023A R   |   4 nbr_tst    000F70 R   |   4 ne         00139C R
  4 neg24      000203 R   |   4 neg_acc2   00021D R   |   4 neg_ax     000215 R
  4 new        0027F0 R   |   4 next       002380 R   |   4 next_lin   00178A R
  4 next_tok   00183E GR  |   4 no_match   0019C6 R   |   4 number     00060B R
  4 open_gap   000CED R   |   4 other      0010D4 R   |   4 overwrit   000C34 R
  2 pad        0016B8 GR  |   4 pad_ref    0030E9 R   |   4 parse_ad   0004E8 R
  4 parse_bi   000E3C R   |   4 parse_in   000DE7 R   |   4 parse_ke   000EBD R
  4 parse_qu   000D92 R   |   4 parse_sy   000EA5 R   |   4 pause      002B85 R
  4 pause02    002B98 R   |   4 peek       00228A R   |   4 peek_byt   0005A5 R
  4 pin_mode   002C7C R   |   4 plus_tst   00104B R   |   4 poke       002269 R
  4 power_ad   002697 R   |   4 prcnt_ts   00106C R   |   4 print      00204D R
  4 print_ch   000616 R   |   4 print_fa   0005EA R   |   4 print_he   000C6B GR
  4 print_re   000427 R   |   4 print_st   00057D R   |   4 print_to   0018A8 R
  4 prog_siz   001E93 R   |   4 program_   001E9B R   |   4 program_   000749 R
  4 program_   00076F R   |   4 prt_acc2   00189D R   |   4 prt_basi   002029 R
  4 prt_i16    001886 R   |   4 prt_loop   002051 R   |   4 prt_peek   0003AA GR
  4 prt_reg1   000408 R   |   4 prt_reg8   0003E6 R   |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       000947 GR  |   4 puts       0009A4 GR
  4 qgetc      000950 GR  |   4 qkey       002B1C GR  |   4 qmark_ts   001002 R
  4 qsign      0028C8 R   |   4 random     002D0B R   |   4 read       002FE2 R
  4 read01     002FEA R   |   4 read_int   003832 R   |   4 readln     000AA9 GR
  4 readln_l   000AB8 R   |   4 readln_q   000C51 R   |   4 refresh_   002E73 R
  4 relation   001B93 R   |   4 relop_st   001384 R   |   4 remark     002188 GR
  4 repl       000527 R   |   4 repl_exi   00054F R   |   4 reset_se   00204F R
  4 rest_con   0020D9 R   |   4 restore    002F75 R   |   4 return     002521 R
  4 right_al   00119B GR  |   4 row_alig   00088D R   |   4 row_eras   000702 R
  4 row_eras   00072F R   |   4 row_loop   000657 R   |   4 rparnt_t   000FC0 R
  4 rshift     002C41 R   |   7 rsign      00008C R   |   7 rsize      00008E R
  4 rt_msg     0016A4 R   |   4 run_app    00012A R   |   4 run_it     0025A5 R
  4 run_it_0   0025A7 R   |   4 runtime_   0019FC R   |   5 rx1_head   00002D R
  5 rx1_queu   000025 R   |   5 rx1_tail   00002E R   |   4 save_con   0020C9 R
  4 scan_blo   0008B6 R   |   4 search_d   0019A6 GR  |   4 search_e   0019EE R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

  4 search_f   0028F7 R   |   4 search_l   000C8D GR  |   4 search_l   000C9C R
  4 search_n   001DB0 R   |   4 search_n   0019AA R   |   4 search_p   003223 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002CDB R
  4 semic_ts   000FE1 R   |   4 send_esc   0009CC R   |   4 send_par   0009D7 R
  4 set_data   002FAE R   |   4 set_time   002E13 R   |   4 show_row   000631 R
  4 single_c   001379 R   |   4 skip       000F2A R   |   4 skip_str   001857 R
  4 skip_to_   0029F2 R   |   4 slash_ts   001061 R   |   4 sleep      002B7A R
  4 software   001452 R   |   4 spaces     000A11 GR  |   4 spi_clea   00307E R
  4 spi_disa   003066 R   |   4 spi_enab   003033 R   |   4 spi_rcv_   0030A0 R
  4 spi_read   0030CB R   |   4 spi_sele   0030D2 R   |   4 spi_send   00308A R
  4 spi_writ   0030AB R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   001056 R   |   4 start_fr   001F4E R   |   4 step       00233E R
  4 stop       0027A5 R   |   4 store_lo   00236D R   |   4 str_matc   0019D3 R
  4 str_tst    000F60 R   |   4 strcmp     0013DE R   |   4 strcpy     0013EF GR
  4 strlen     0013D3 GR  |   4 sub24      00019B R   |   4 symb_loo   000EA6 R
  4 syntax_e   0016D7 GR  |   4 system_i   001498 R   |   4 tb_error   0016D9 GR
  4 term       001B18 R   |   4 term01     001B20 R   |   4 term_exi   001B58 R
  4 test       0036C3 R   |   4 test_p     000575 R   |   2 tib        001668 GR
  4 tick_tst   00101A R   |   5 ticks      00000F R   |   4 timeout    002E2A R
  5 timer      000012 GR  |   4 timer2_i   000093 R   |   4 timer4_i   0000A0 R
  4 tk_id      0016C7 R   |   4 to         0022F8 R   |   4 to_eepro   000798 R
  4 to_flash   00079D R   |   4 to_hex_c   000C82 GR  |   4 to_upper   001919 GR
  4 token_ch   0010EA R   |   4 token_ex   0010EE R   |   4 tone       00263C R
  4 try_next   002FBB R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   000957 GR  |   4 uart1_in   000902 R   |   4 uart1_pu   000947 GR
  4 uart1_qg   000950 GR  |   4 uart1_se   000912 R   |   4 ubound     001D28 R
  4 uflash     002B29 R   |   4 unlock_e   0006CC R   |   4 unlock_f   0006E7 R
  4 until      002EDE R   |   4 user_int   000049 R   |   4 usr        002B4B R
  4 var_name   0011FC GR  |   5 vars       000034 GR  |   4 wait       00218E R
  4 warm_ini   0014C5 R   |   4 warm_sta   001763 R   |   4 words      002DA6 R
  4 words_co   002DFD R   |   4 write      002A59 R   |   4 write_bl   000852 GR
  4 write_bu   000789 R   |   4 write_by   0007D3 R   |   4 write_ee   00080F R
  4 write_ex   000848 R   |   4 write_fl   0007F9 R   |   4 write_nb   000877 R
  4 xalloc     0030FC R   |   4 xdrop      003132 R   |   4 xpick      0031B0 R
  4 xpop       0030F2 R   |   4 xpush      0030EE R   |   4 xput       00317D R
  4 xstack_b   00315F R   |   2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3884   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

