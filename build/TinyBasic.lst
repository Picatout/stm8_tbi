ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                     28   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44
                           00003A    86 		COLON = 58 
                           00003B    87 		SEMIC = 59  
                           000023    88 		SHARP = 35
                           000027    89 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                           000006    45         FLN_REJECTED=6 ; a memory full error occured while in *insert_line*. 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5      ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8      ; item separator ',' 
                           000009    94         TK_COLON=9      ; command separator ':' 
                           00000A    95         TK_SEMIC=10     ; used in PRINT command.  ';' 
                                     96 
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                           000012   144     ERR_NO_PROGRAM=18
                                    145 
                                    146 ;--------------------------------------
                                    147 ;   assembler flags 
                                    148 ;-------------------------------------
                                    149 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    150 
                                    151      .macro _usec_dly n 
                                    152     ldw x,#(16*n-2)/4
                                    153     decw x
                                    154     nop 
                                    155     jrne .-4
                                    156     .endm 
                                    157     
                                    158     ; load X register with 
                                    159     ; entry point of dictionary
                                    160     ; before calling 'search_dict'
                                    161     .macro _ldx_dict dict_name
                                    162     ldw x,#dict_name+2
                                    163     .endm 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; reset BASIC pointer
                                    166     ; to beginning of last token
                                    167     ; extracted except if it was end of line 
                                    168     .macro _unget_token 
                                    169      mov in,in.saved  
                                    170     .endm
                                    171 
                                    172 
                                    173     ; extract code address for 
                                    174     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    175     .macro _get_code_addr
                                    176         ldw x,(x)
                                    177         inc in 
                                    178         inc in 
                                    179     .endm 
                                    180 
                                    181 
                                    182 
                                    183 ;---------------------------------------
                                    184 ;    xtack manipulation macros 
                                    185 ;    Y is used as xstack pointer  
                                    186 ;----------------------------------------
                                    187     ; pop in A:X from XSTACK 
                                    188     .macro _xpop 
                                    189     ld a,(y)
                                    190     ldw x,y 
                                    191     ldw x,(1,x)
                                    192     addw y,#CELL_SIZE 
                                    193     .endm 
                                    194 
                                    195     ; push A:X  to XSTACK 
                                    196     .macro _xpush 
                                    197     subw y,#CELL_SIZE
                                    198     ld (y),a 
                                    199     ldw (1,y),x 
                                    200     .endm 
                                    201 
                                    202     ; drop from XSTACK 
                                    203     .macro _xdrop 
                                    204     addw y,#CELL_SIZE 
                                    205     .endm 
                                    206 
                                    207     ; @T fetch top xstack 
                                    208     .macro _at_top
                                    209     ld a,(y)
                                    210     ldw x,y 
                                    211     ldw x,(1,x)
                                    212     .endm 
                                    213 
                                    214     ; @N  fetch next on xstack 
                                    215     .macro _at_next 
                                    216     ld a,(3,y)
                                    217     ldw x,y 
                                    218     ldw x,(4,x)
                                    219     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220 
                                    221     ; !T put on top of xtack 
                                    222     .macro _store_top 
                                    223     ld (y),a 
                                    224     ldw (1,y),x     
                                    225     .endm 
                                    226 
                                    227     ; !N put next on xstack 
                                    228     .macro _store_next 
                                    229     ld (3,y),a 
                                    230     ldw (4,y),x 
                                    231     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33   
                                     34 ;;-----------------------------------
                                     35     .area SSEG (ABS)
                                     36 ;; working buffers and stack at end of RAM. 	
                                     37 ;;-----------------------------------
      001668                         38     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE*CELL_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         39 tib:: .ds TIB_SIZE             ; terminal input buffer
      0016B8                         40 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         41 pad:: .ds PAD_SIZE             ; working buffer
      001738                         42 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      001774                         43 xstack_unf:: ; xstack underflow 
      001774                         44 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         45 stack_unf: ; stack underflow ; control_stack bottom 
                                     46 
                                     47 ;;--------------------------------------
                                     48     .area HOME 
                                     49 ;; interrupt vector table at 0x8000
                                     50 ;;--------------------------------------
                                     51 
      000000 82 00 00 B5             52     int cold_start			; RESET vector 
      000004 82 00 00 12             53 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             54 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             55 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             56 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             57 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             58 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             59 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             60 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             61 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             62 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             63 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             64 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             65 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             66 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             67 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             68 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             69 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             70 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             71 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 05 A2             72 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             73 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             74 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             75 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             76 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             77 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             78 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             79 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             80 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             81 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             82 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             83 	int NonHandledInterrupt ;int29  not used
                                     84 
                                     85 ;---------------------------------------
                                     86     .area CODE
                                     87 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                     88 
                                     89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     90 ; non handled interrupt 
                                     91 ; reset MCU
                                     92 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         93 NonHandledInterrupt:
      000000                         94 	_swreset ; see "inc/gen_macros.inc"
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; auto wakeup from halt
                                     98 ; at iret, program continue 
                                     99 ; after halt instruction
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        101 AWUHandler:
      000004 72 19 50 F0      [ 1]  102 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  103 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  104 	clr AWU_TBR 
      000011 80               [11]  105 	iret
                                    106 
                                    107 ;------------------------------------
                                    108 ; system call handler  
                                    109 ;------------------------------------
      000012                        110 SysCall:
                                    111 
      000012 80               [11]  112 	iret 
                                    113 
                                    114 ;------------------------------
                                    115 ; TIMER 4 is used to maintain 
                                    116 ; a milliseconds 'ticks' counter
                                    117 ; and decrement 'timer' varaiable
                                    118 ; ticks range {0..2^23-1}
                                    119 ; timer range {0..65535}
                                    120 ;--------------------------------
      000013                        121 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  122 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  123 	ld a,ticks 
      00001A CE 00 10         [ 2]  124 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  125 	addw x,#1 
      000020 A9 00            [ 1]  126 	adc a,#0 
      000022 2A 02            [ 1]  127 	jrpl 0$
                                    128 ; reset to 0 when negatif 
      000024 4F               [ 1]  129 	clr a 
      000025 5F               [ 1]  130 	clrw x 
      000026 C7 00 0F         [ 1]  131 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  132 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  133 	ldw x,timer
      00002F 27 04            [ 1]  134 	jreq 1$
      000031 5A               [ 2]  135 	decw x 
      000032 CF 00 12         [ 2]  136 	ldw timer,x 
      000035                        137 1$:	
      000035 80               [11]  138 	iret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                    142 ; on NUCLEO card.
                                    143 ; This is used to abort a progam lock 
                                    144 ; in infinite loop. 
                                    145 ;------------------------------------
      000036                        146 UserButtonHandler:
                                    147 ; wait button release
      000036 5F               [ 1]  148 	clrw x
      000037 5A               [ 2]  149 1$: decw x 
      000038 26 FD            [ 1]  150 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  151 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    152 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  153     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  154 	bres flags,#FSLEEP 
      000048 80               [11]  155 	iret
      000049                        156 2$:	
      000049                        157 user_interrupted:
      000049 72 00 00 22 02   [ 2]  158     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  159 	jra UBTN_Handler_exit 
      000050                        160 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  161 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  162 	ldw x,#USER_ABORT
      000057 CD 06 82         [ 4]  163 	call puts 
      00005A                        164 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  165     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  166     ldw sp,x
      00005E 9A               [ 1]  167 	rim 
      00005F CC 14 34         [ 2]  168 5$:	jp warm_start
                                    169 
      000062 0A 50 72 6F 67 72 61   170 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    171 
                                    172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    173 ;    peripherals initialization
                                    174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    175 
                                    176 ;----------------------------------------
                                    177 ; inialize MCU clock 
                                    178 ; input:
                                    179 ;   A 		source  HSI | 1 HSE 
                                    180 ;   XL      CLK_CKDIVR , clock divisor 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;----------------------------------------
      00007D                        184 clock_init:	
      00007D C1 50 C3         [ 1]  185 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  186 	jreq 2$ ; no switching required 
                                    187 ; select clock source 
      000082 72 12 50 C5      [ 1]  188 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  189 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  190 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  191 	jrne 1$
      00008E                        192 2$: 	
                                    193 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  194 	ld a,xl 
      00008F C7 50 C6         [ 1]  195 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  196 	ret
                                    197 
                                    198 ;----------------------------------
                                    199 ; TIMER2 used as audio tone output 
                                    200 ; on port D:5. CN9-6
                                    201 ; channel 1 configured as PWM mode 1 
                                    202 ;-----------------------------------  
                                    203 
      000093                        204 timer2_init:
      000093 72 1A 50 C7      [ 1]  205 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  206  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  207 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  208 	ret 
                                    209 
                                    210 ;---------------------------------
                                    211 ; TIM4 is configured to generate an 
                                    212 ; interrupt every millisecond 
                                    213 ;----------------------------------
      0000A0                        214 timer4_init:
      0000A0 72 18 50 C7      [ 1]  215 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  216 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  217 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  218 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  219 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  220 	ret
                                    221 
                                    222 ;-------------------------------------
                                    223 ;  initialization entry point 
                                    224 ;-------------------------------------
      0000B5                        225 cold_start:
                                    226 ;set stack 
      0000B5 AE 17 FF         [ 2]  227 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  228 	ldw sp,x
                                    229 ; clear all ram 
      0000B9 7F               [ 1]  230 0$: clr (x)
      0000BA 5A               [ 2]  231 	decw x 
      0000BB 26 FC            [ 1]  232 	jrne 0$
                                    233 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  234 	ld a,#255 
      0000BF C7 50 03         [ 1]  235 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  236 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  237 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  238 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  239 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  240 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  241 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  242 	ld PI_CR1,a
                                    243 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  244     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  245     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  246     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  247 	bres PC_ODR,#LED2_BIT ; turn off LD2 
                                    248 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  249 	mov ADC_TDRL,0x3f
                                    250 ; initialize auto wakeup with LSI clock
      0000EC 72 5F 50 F2      [ 1]  251 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  252 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    253 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  254 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  255 	clrw x  
      0000F7 CD 00 7D         [ 4]  256     call clock_init 
      0000FA CD 00 A0         [ 4]  257 	call timer4_init
      0000FD CD 00 93         [ 4]  258 	call timer2_init	
                                    259 ; UART1 at 115200 BAUD
                                    260 ; used for user interface 
                                    261 ; via USB emulation through STLINK programmer.
      000100 CD 05 E0         [ 4]  262 	call uart1_init
                                    263 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  264     bset PE_CR2,#USR_BTN_BIT 
                                    265 ; display system information
      000107 9A               [ 1]  266 	rim ; enable interrupts 
                                    267 ; RND function seed 
                                    268 ; must be initialized 
                                    269 ; to value other than 0.
      000108 72 5C 00 17      [ 1]  270 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  271 	inc seedx+1 
      000110 CD 1A 58         [ 4]  272 	call func_eefree ; eeprom free address 
      000113 CD 19 F9         [ 4]  273 	call ubound ; @() size 
      000116 CD 11 C1         [ 4]  274 	call clear_basic
      000119 CD 23 15         [ 4]  275 	call beep_1khz  ; 
      00011C CD 11 76         [ 4]  276 	call system_information ; display system information 
      00011F                        277 2$:	
                                    278 ; check for autorun application
      00011F CE 40 00         [ 2]  279 	ldw x,EEPROM_BASE 
      000122 C3 2F 05         [ 2]  280 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  281 	jreq run_app
      000127 CC 14 34         [ 2]  282 	jp warm_start 
      00012A                        283 run_app:
      00012A 4F               [ 1]  284 	clr a 
      00012B CE 40 02         [ 2]  285 	ldw x,EEPROM_BASE+2
      00012E CD 22 1B         [ 4]  286 	call is_program_addr 
      000131 27 03            [ 1]  287 	jreq 1$
      000133 CC 14 34         [ 2]  288 	jp warm_start ; no autorun application.
      000136                        289 1$:	
                                    290 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  291 	ldw y,XSTACK_EMPTY
      00013A CD 11 A3         [ 4]  292 	call warm_init
      00013D CE 40 02         [ 2]  293 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  294 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  295 	subw x,#2 
      000146 FE               [ 2]  296 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  297 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  298 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  299 	ldw x,#AUTO_RUN 
      000151 CD 06 82         [ 4]  300 	call puts 
      000154 CD 1B 6C         [ 4]  301 	call program_info 
      000157 CC 22 8B         [ 2]  302 	jp run_it_02  
      00015A 20 FE            [ 2]  303     jra .  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    304 
      00015C 20 61 75 74 6F 20 72   305 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
             72 61 6D 0A 00
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 13 B7         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0002E6 CC 13 B7         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 13 B7         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000000    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
                                     48 prt_peek::
                                     49 	pushw x 
                                     50 	mov base,#16 
                                     51 	call prt_i16  
                                     52 	ld a,#': 
                                     53 	call putc 
                                     54 	ld a,#SPACE 
                                     55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                     56 	popw x 
                                     57 	ld a,(x)
                                     58 	clrw x 
                                     59 	ld xl,a 
                                     60 	mov base,#10 
                                     61 	call prt_i16 
                                     62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
                                     69 ledon:
                                     70     bset PC_ODR,#LED2_BIT
                                     71     ret 
                                     72 
                                     73 ; turn LED off 
                                     74 ledoff:
                                     75     bres PC_ODR,#LED2_BIT 
                                     76     ret 
                                     77 
                                     78 ; invert LED status 
                                     79 ledtoggle:
                                     80     ld a,#LED2_MASK
                                     81     xor a,PC_ODR
                                     82     ld PC_ODR,a
                                     83     ret 
                                     84 
                                     85 left_paren:
                                     86 	ld a,#SPACE 
                                     87 	call putc
                                     88 	ld a,#'( 
                                     89 	call putc 	
                                     90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
                                    100 prt_reg8:
                                    101 	push a 
                                    102 	call puts 
                                    103 	ld a,(1,sp) 
                                    104 	clrw x 
                                    105 	ld xl,a 
                                    106 	mov base,#16
                                    107 	call prt_i16  
                                    108 	call left_paren 
                                    109 	pop a 
                                    110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                    111 	ld xl,a 
                                    112 	mov base,#10 
                                    113 	call prt_i16  
                                    114 	ld a,#') 
                                    115 	call putc
                                    116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
                                    126 prt_reg16: 
                                    127 	pushw y 
                                    128 	call puts 
                                    129 	ldw x,(1,sp) 
                                    130 	mov base,#16 
                                    131 	call prt_i16  
                                    132 	call left_paren 
                                    133 	popw x 
                                    134 	mov base,#10 
                                    135 	call prt_i16  
                                    136 	ld a,#') 
                                    137 	call putc
                                    138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                                    144 	R_PC=10 
                                    145 	R_CC=9
                                    146 	SAV_ACC24=8
                                    147 	SAV_ACC16=6
                                    148 	R_Y=4
                                    149 	R_X=2
                                    150 	R_A=1
                                    151 	VSIZE=8 
                                    152 print_registers:
                                    153 	push cc 
                                    154 	_vars VSIZE 
                                    155 	ld (R_A,sp),a 
                                    156 	ldw (R_X,sp),x 
                                    157 	ldw (R_Y,sp),y
                                    158 	ld a,acc24 
                                    159 	ldw x,acc16 
                                    160 	ld (SAV_ACC24,sp),a 
                                    161 	ldw (SAV_ACC16,sp),x 
                                    162 	ldw x,#STATES
                                    163 	call puts
                                    164 ; print PC 
                                    165 	ldw x, #REG_PC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                    166 	ldw y, (R_PC,sp)
                                    167 	subw y,#3
                                    168 	call prt_reg16 
                                    169 ; print x
                                    170 	ldw x,#REG_X
                                    171 	ldw y,(R_X,sp)
                                    172 	call prt_reg16  
                                    173 ; print Y 
                                    174 	ldw x,#REG_Y
                                    175 	ldw y, (R_Y,sp)
                                    176 	call prt_reg16  
                                    177 ; print A 
                                    178 	ldw x,#REG_A
                                    179 	ld a, (R_A,sp) 
                                    180 	call prt_reg8
                                    181 ; print CC 
                                    182 	ldw x,#REG_CC 
                                    183 	ld a, (R_CC,sp) 
                                    184 	call prt_reg8 
                                    185 ; print SP 
                                    186 	ldw x,#REG_SP
                                    187 	ldw y,sp 
                                    188 	addw y,#(VSIZE+3)
                                    189 	call prt_reg16  
                                    190 	ld a,#'\n' 
                                    191 	call putc
                                    192 	ld a,(SAV_ACC24,sp)
                                    193 	ldw x,(SAV_ACC16,sp)
                                    194 	ld acc24,a 
                                    195 	ldw acc16,x 
                                    196 	ld a,(R_A,sp)
                                    197 	ldw x,(R_X,sp)
                                    198 	ldw y,(R_Y,sp)
                                    199 	_drop VSIZE
                                    200 	pop cc   	
                                    201 	ret
                                    202 
                                    203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
                                    204 REG_PC: .asciz "PC:"
                                    205 REG_Y:   .asciz "\nY:" 
                                    206 REG_X:   .asciz "\nX:"
                                    207 REG_A:   .asciz "\nA:" 
                                    208 REG_CC:  .asciz "\nCC:"
                                    209 REG_SP:  .asciz "\nSP:"
                                    210 
                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
                                    217 parse_addr:
                                    218 	ld a,#SPACE 
                                    219 	call skip  	 
                                    220 	addw y,in.w 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                    221 	ldw x,#pad 
                                    222 	call strcpy
                                    223 	ldw x,#pad
                                    224 	call atoi24 	
                                    225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                                    235 	PSIZE=11
                                    236 	SAV_COUNT=10
                                    237 	SAV_IN=9
                                    238 	SAV_ACC24=8
                                    239 	SAV_ACC16=6
                                    240 	R_Y=4
                                    241 	R_X=2
                                    242 	R_A=1
                                    243 	VSIZE=11
                                    244 cmd_itf:
                                    245 	push cc 
                                    246 	_vars VSIZE
                                    247 	ld (R_A,sp),a
                                    248 	ld a,count 
                                    249 	ld (SAV_COUNT,sp),a 
                                    250 	ld a,in 
                                    251 	ld (SAV_IN,sp),a  
                                    252 	ldw (R_X,sp),x 
                                    253 	ldw (R_Y,sp),y
                                    254 	ld a,acc24 
                                    255 	ldw x,acc16 
                                    256 	ld (SAV_ACC24,sp),a 
                                    257 	ldw (SAV_ACC16,sp),x 
                                    258 	clr farptr 
                                    259 	clr farptr+1 
                                    260 	clr farptr+2  
                                    261 repl:
                                    262 	ld a,#CR 
                                    263 	call putc 
                                    264 	ld a,#'? 
                                    265 	call putc
                                    266 	clr in.w 
                                    267 	clr in 
                                    268 	call readln
                                    269 	ldw y,#tib  
                                    270 	ld a,(y)
                                    271 	jreq repl  
                                    272 	inc in 
                                    273 	call to_upper 
                                    274 	cp a,#'Q 
                                    275 	jrne test_p
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                    276 repl_exit:
                                    277 ; restore original context 
                                    278 	ld a,(SAV_ACC24,sp)
                                    279 	ldw x,(SAV_ACC16,sp)
                                    280 	ld acc24,a 
                                    281 	ldw acc16,x
                                    282 	ld a,(SAV_COUNT,sp)
                                    283 	ld count,a 
                                    284 	ld a,(SAV_IN,sp)
                                    285 	ld in,a 
                                    286 	ldw y,(R_Y,sp)
                                    287 	ldw x,(R_X,sp)
                                    288 	ld a,(R_A,sp)
                                    289 	_drop VSIZE
                                    290 	pop cc 
                                    291 	ret  
                                    292 invalid:
                                    293 	ldw x,#invalid_cmd 
                                    294 	call puts 
                                    295 	jra repl 
                                    296 test_p:	
                                    297     cp a,#'P 
                                    298 	jreq mem_peek
                                    299     cp a,#'S 
                                    300 	jrne invalid 
                                    301 print_string:
                                    302 	call parse_addr 	
                                    303 	ldw x,acc16
                                    304 	call puts
                                    305 	jp repl 	
                                    306 mem_peek:
                                    307 	call parse_addr 
                                    308 	ld a, acc24 
                                    309 	or a,acc16 
                                    310 	or a,acc8 
                                    311 	jrne 1$ 
                                    312 	jra peek_byte  
                                    313 1$:	ldw x,acc24 
                                    314 	ldw farptr,x 
                                    315 	ld a,acc8 
                                    316 	ld farptr+2,a 
                                    317 peek_byte:
                                    318 	call print_farptr 
                                    319 	ld a,#8 
                                    320 	ld (PSIZE,sp),a 
                                    321 	clrw x 
                                    322 1$:	call fetchc  
                                    323 	pushw x 
                                    324 	ld acc8,a 
                                    325 	clrw x 
                                    326 	ldw acc24,x 
                                    327 	ld a,#16+128
                                    328 	call prt_acc24
                                    329 	popw x 
                                    330 	dec (PSIZE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                    331 	jrne 1$ 
                                    332 	ld a,#8 
                                    333 	add a,farptr+2 
                                    334 	ld farptr+2,a
                                    335 	clr a 
                                    336 	adc a,farptr+1 
                                    337 	ld farptr+1,a 
                                    338 	clr a 
                                    339 	adc a,farptr 
                                    340 	ld farptr,a 
                                    341 	jp repl  
                                    342 
                                    343 invalid_cmd: .asciz "not a command\n" 
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
                                    348 print_farptr:
                                    349 	ld a ,farptr+2 
                                    350 	ld acc8,a 
                                    351 	ldw x,farptr 
                                    352 	ldw acc24,x 
                                    353 	clrw x 
                                    354 	ld a,#16 
                                    355 	call prt_acc24
                                    356 	ld a,#SPACE 
                                    357 	call putc 
                                    358 	call putc 
                                    359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
                                    370 fetchc: ; @C
                                    371 	ldf a,([farptr],x)
                                    372 	incw x
                                    373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
                                    384 number:
                                    385 	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    386 	cp a,#TK_INTGR
                                    387 	jreq 1$
                                    388 	jp syntax_error
                                    389 1$:	ret
                                    390 
                                    391 ;----------------------
                                    392 ; called by show_row 
                                    393 ; print character 
                                    394 ; corresponding to hex 
                                    395 ; in row
                                    396 ; characters stored in pad 
                                    397 ; input:
                                    398 ;    A count  
                                    399 ;------------------------
                                    400 print_chars:
                                    401 	push a 
                                    402 	ldw x,#pad 
                                    403 1$:	ld a,(x)
                                    404 	cp a,#SPACE 
                                    405 	jrult 2$
                                    406 	cp a,#127 
                                    407 	jruge 2$ 
                                    408 	jra 3$ 
                                    409 2$: ld a,#'_ 
                                    410 3$:	
                                    411 	call putc 
                                    412 	incw x 
                                    413 	dec (1,sp)
                                    414 	jrne 1$
                                    415 	pop a 
                                    416 	ret 
                                    417 
                                    418 
                                    419 ;---------------------
                                    420 ; display n bytes row 
                                    421 ; from memory.
                                    422 ; input:
                                    423 ;   A        bytes to print 
                                    424 ;	farptr   address 
                                    425 ; output:
                                    426 ;   farptr  address after last shown  
                                    427 ;---------------------
                                    428 	CNT=1
                                    429 	CNTDWN=2 
                                    430 	BYTE=3
                                    431 	VSIZE=3 
                                    432 show_row:
                                    433 	tnz a 
                                    434 	jrne 1$
                                    435 	ret 
                                    436 1$:	
                                    437 	_vars VSIZE 
                                    438 	ld (CNT,sp),a 
                                    439 	ld (CNTDWN,sp),a 
                                    440 	ld a,farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    441 	ldw x,ptr16 
                                    442 	ld acc24,a 
                                    443 	ldw acc16,x 
                                    444 	call itoa 
                                    445 	ld a,#7 
                                    446 	call right_align
                                    447 	call puts 
                                    448 	ld a,#9 
                                    449 	call putc 
                                    450 row_loop:
                                    451 	ldf a,[farptr]
                                    452 	ld (BYTE,sp),a
                                    453 	ld a,(CNT,sp)
                                    454 	sub a,(CNTDWN,sp)
                                    455 	clrw x 
                                    456 	ld xl,a 
                                    457 	addw x,#pad 
                                    458 	ld a,(BYTE,sp)
                                    459 	ld (x),a 
                                    460 	clr acc24 
                                    461 	clr acc16 
                                    462 	ld acc8,a 
                                    463 	call itoa 
                                    464 	ld a,#4
                                    465 	call right_align 
                                    466 	call puts 
                                    467 	ldw x,#1 	
                                    468 	call incr_farptr
                                    469 	dec (CNTDWN,sp)
                                    470 	jrne row_loop
                                    471 	ld a,#SPACE 
                                    472 	call putc
                                    473 	ld a,(CNT,sp) 
                                    474 	call print_chars 
                                    475 	ld a,#CR 
                                    476 	call putc 
                                    477 	_drop VSIZE   
                                    478 	ret 
                                    479 
                                    480 ;--------------------------
                                    481 ; print memory content 
                                    482 ; in hexadecimal format
                                    483 ;  input:
                                    484 ;    farptr  start address 
                                    485 ;    X       count bytes to print 
                                    486 ;--------------------------
                                    487 	BCNT=1
                                    488 	BASE=3
                                    489 	VSIZE=3   
                                    490 hex_dump:
                                    491 	push a 
                                    492 	_vars VSIZE
                                    493 	ld a,base
                                    494 	ld (BASE,sp),a 
                                    495 	mov base,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    496 	ld a,#CR 
                                    497 	call putc 
                                    498 1$: ldw (BCNT,sp),x
                                    499 	ld a,#16
                                    500 	cpw x,#16
                                    501 	jrpl 2$
                                    502 	ld a,xl
                                    503 2$: 	
                                    504 	call show_row 
                                    505 	ldw x,(BCNT,sp) 
                                    506 	subw x,#16 
                                    507 	cpw x,#1
                                    508 	jrpl 1$
                                    509 	ld a,(BASE,sp)
                                    510 	ld base,a
                                    511 	_drop VSIZE
                                    512 	pop a 
                                    513 	ret 
                                    514 
                                    515 .endif ; DEBUG 
                                    516 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0003AA                         45 unlock_eeprom:
      0003AA 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0003AF 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0003B3 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0003B7 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0003BB 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0003BF 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0003C4 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0003C5                         62 unlock_flash:
      0003C5 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0003CA 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0003CE 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0003D2 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0003D6 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0003DA 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0003DF 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0003E0                         76 row_erase:
      0003E0 88               [ 1]   77 	push a 
      0003E1 90 89            [ 2]   78 	pushw y 
      0003E3 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0003E7 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0003EB 4F               [ 1]   81 	clr a 
      0003EC 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0003EE 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0003F2 90 5C            [ 1]   84     incw y
      0003F4 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0003F8 90 5C            [ 1]   86     incw y
      0003FA 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0003FE 90 5C            [ 1]   88     incw y
      000400 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000404 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000409 90 85            [ 2]   91 	popw y 
      00040B 84               [ 1]   92 	pop a 
      00040C 81               [ 4]   93 	ret
      00040D                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      00040D                         97 move_erase_to_ram:
      00040D 89               [ 2]   98 	pushw x 
      00040E 90 89            [ 2]   99 	pushw y 
      000410 AE 04 0D         [ 2]  100 	ldw x,#row_erase_end 
      000413 1D 03 E0         [ 2]  101 	subw x,#row_erase
      000416 CF 00 0D         [ 2]  102 	ldw acc16,x 
      000419 AE 16 68         [ 2]  103 	ldw x,#tib 
      00041C 90 AE 03 E0      [ 2]  104 	ldw y,#row_erase 
      000420 CD 10 DD         [ 4]  105 	call move
      000423 90 85            [ 2]  106 	popw y
      000425 85               [ 2]  107 	popw x
      000426 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000427                        123 program_row:
      000427 88               [ 1]  124 	push a 
      000428 90 89            [ 2]  125 	pushw y 
      00042A 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      00042C 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000430 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000434 90 5F            [ 1]  130 	clrw y 
      000436 F6               [ 1]  131 1$:	ld a,(x)
      000437 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      00043B 5C               [ 1]  133 	incw x 
      00043C 90 5C            [ 1]  134 	incw y 
      00043E 0A 01            [ 1]  135 	dec (BCNT,sp)
      000440 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000442 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000447                        139 	_drop 1 
      000447 5B 01            [ 2]    1     addw sp,#1 
      000449 90 85            [ 2]  140 	popw y 
      00044B 84               [ 1]  141 	pop a 
      00044C 81               [ 4]  142 	ret 
      00044D                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      00044D                        149 move_prg_to_ram:
      00044D 89               [ 2]  150 	pushw x 
      00044E 90 89            [ 2]  151 	pushw y 
      000450 AE 04 4D         [ 2]  152 	ldw x,#program_row_end 
      000453 1D 04 27         [ 2]  153 	subw x,#program_row 
      000456 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000459 AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      00045C 90 AE 04 27      [ 2]  156 	ldw y,#program_row ; source address 
      000460 CD 10 DD         [ 4]  157 	call move
      000463 90 85            [ 2]  158 	popw y 
      000465 85               [ 2]  159 	popw x  
      000466 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000467                        169 write_buffer:
      000467 89               [ 2]  170 	pushw x 
      000468 72 5D 00 18      [ 1]  171 	tnz farptr 
      00046C 26 0D            [ 1]  172 	jrne to_flash 
      00046E CE 00 19         [ 2]  173 	ldw x,farptr+1 
      000471 A3 34 00         [ 2]  174 	cpw x,#app_space  
      000474 24 05            [ 1]  175 	jruge to_flash 
      000476                        176 to_eeprom:
      000476 CD 03 AA         [ 4]  177 	call unlock_eeprom
      000479 20 03            [ 2]  178 	jra do_programming
      00047B                        179 to_flash:
      00047B CD 03 C5         [ 4]  180 	call unlock_flash
      00047E                        181 do_programming:
      00047E 85               [ 2]  182 	popw x 
      00047F CD 16 68         [ 4]  183 	call tib
      000482 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000486 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      00048A 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      00048B                        197 block_erase:
      00048B 89               [ 2]  198 	pushw x 
      00048C C6 00 18         [ 1]  199 	ld a,farptr 
      00048F 26 14            [ 1]  200 	jrne erase_flash
      000491 CE 00 19         [ 2]  201 	ldw x,farptr+1
      000494 A3 34 00         [ 2]  202 	cpw x,#app_space 
      000497 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000499 CD 03 AA         [ 4]  205 	call unlock_eeprom 
      00049C CD 16 68         [ 4]  206 	call tib 
      00049F 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0004A3 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0004A5                        210 erase_flash:
      0004A5 CD 03 C5         [ 4]  211 	call unlock_flash 
      0004A8 CD 16 68         [ 4]  212 	call tib 
      0004AB 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0004AF                        214 erase_exit: 
      0004AF 85               [ 2]  215 	popw x 
      0004B0 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0004B1                        232 write_byte:
      0004B1 90 89            [ 2]  233 	pushw y
      0004B3                        234 	_vars VSIZE
      0004B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0004B5 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0004B7 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0004B9 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0004BD 72 5D 00 18      [ 1]  240 	tnz farptr 
      0004C1 26 14            [ 1]  241 	jrne write_flash
      0004C3 90 A3 34 00      [ 2]  242     cpw y,#app_space 	 
      0004C7 24 0E            [ 1]  243     jruge write_flash
      0004C9 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0004CD 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0004CF 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0004D3 22 51            [ 1]  247 	jrugt write_exit
      0004D5 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0004D7                        250 write_flash:
      0004D7 CD 03 C5         [ 4]  251 	call unlock_flash 
      0004DA 9B               [ 1]  252 1$:	sim 
      0004DB 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0004DD 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0004E1 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0004E6 9A               [ 1]  256     rim 
      0004E7 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0004EB 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0004ED                        260 write_eeprom:
      0004ED CD 03 AA         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0004F0 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0004F4 2B 08            [ 1]  264 	jrmi 1$
      0004F6 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0004FA 2A 02            [ 1]  266 	jrpl 1$
      0004FC 03 02            [ 1]  267 	cpl (OPT,sp)
      0004FE                        268 1$: 
      0004FE 0D 02            [ 1]  269     tnz (OPT,sp)
      000500 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000502 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      000506 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00050A                        274 2$: 
      00050A 7B 01            [ 1]  275     ld a,(BTW,sp)
      00050C 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000510 0D 02            [ 1]  277     tnz (OPT,sp)
      000512 27 08            [ 1]  278     jreq 3$
      000514 5C               [ 1]  279     incw x
      000515 7B 01            [ 1]  280     ld a,(BTW,sp)
      000517 43               [ 1]  281     cpl a
      000518 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      00051C 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000521 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000526                        285 write_exit:
      000526 5C               [ 1]  286 	incw x 
      000527 CD 05 86         [ 4]  287 	call incr_farptr
      00052A 5F               [ 1]  288 	clrw x 
      00052B                        289 	_drop VSIZE 
      00052B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00052D 90 85            [ 2]  290 	popw y
      00052F 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      000530                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000530                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      000530                        312 write_block::
      000530 88               [ 1]  313 	push a 
      000531                        314 	_vars VSIZE
      000531 52 02            [ 2]    1     sub sp,#VSIZE 
      000533 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      000535 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000537 27 13            [ 1]  317 	jreq 9$
      000539 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      00053B 90 F6            [ 1]  319 	ld a,(y)
      00053D CD 04 B1         [ 4]  320 	call write_byte 
      000540 5C               [ 1]  321 	incw x 
      000541 90 5C            [ 1]  322 	incw y 
      000543 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      000545 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000547 5A               [ 2]  325 	decw x
      000548 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      00054A 26 ED            [ 1]  327 	jrne 1$
      00054C                        328 9$:
      00054C 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      00054E CD 05 86         [ 4]  330 	call incr_farptr
      000551                        331 	_drop VSIZE
      000551 5B 02            [ 2]    1     addw sp,#VSIZE 
      000553 84               [ 1]  332 	pop a 
      000554 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      000555                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000555 90 89            [ 2]  351 	pushw y
      000557 88               [ 1]  352 	push a 
      000558 90 93            [ 1]  353 	ldw y,x
      00055A 5F               [ 1]  354 	clrw x 
      00055B                        355 1$:  
      00055B 90 F6            [ 1]  356 	ld a,(y)
      00055D 90 5C            [ 1]  357 	incw y
      00055F CD 04 B1         [ 4]  358 	call write_byte 
      000562 5C               [ 1]  359 	incw x 
      000563 0A 01            [ 1]  360 	dec (1,sp)  
      000565 26 F4            [ 1]  361 	jrne 1$ 
      000567 84               [ 1]  362 9$: pop a 
      000568 90 85            [ 2]  363 	popw y 
      00056A 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      00056B                        373 row_align:
      00056B A6 7F            [ 1]  374 	ld a,#0x7f 
      00056D C4 00 1A         [ 1]  375 	and a,farptr+2 
      000570 27 13            [ 1]  376 	jreq 1$ 
      000572 CE 00 19         [ 2]  377 	ldw x,farptr+1 
      000575 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      000578 24 04            [ 1]  379 	jrnc 0$
      00057A 72 5C 00 18      [ 1]  380 	inc farptr 
      00057E 9F               [ 1]  381 0$: ld a,xl 
      00057F A4 80            [ 1]  382 	and a,#0x80
      000581 97               [ 1]  383 	ld xl,a
      000582 CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      000585 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      000586                        393 incr_farptr:
      000586 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      00058A 24 04            [ 1]  395 	jrnc 1$
      00058C 72 5C 00 18      [ 1]  396 	inc farptr 
      000590 CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      000593 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      000594                        408 scan_block:
      000594 5F               [ 1]  409 	clrw x 
      000595 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      000599 26 06            [ 1]  411 	jrne 2$
      00059B 5C               [ 1]  412 	incw x 
      00059C A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      00059F 25 F4            [ 1]  414 	jrult 1$ 
      0005A1 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; defined functions:
                                     23 ;   getc   wait for a character 
                                     24 ;   qgetc  check if char available 
                                     25 ;   putc   send a char to terminal
                                     26 ;   puts   print a string to terminal
                                     27 ;   readln  read text line from terminal 
                                     28 ;   spaces  print n spaces on terminal 
                                     29 ;   print_hex  print hex value from A 
                                     30 ;------------------------------
                                     31 
                                     32     .module TERMINAL
                                     33 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                     34     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                     35 
                           000000    36 .if SEPARATE
                                     37 	.include "inc/nucleo_8s208.inc"
                                     38 	.include "inc/stm8s208.inc"
                                     39 	.include "inc/ascii.inc"
                                     40 	.include "inc/gen_macros.inc" 
                                     41 	.include "tbi_macros.inc" 
                                     42 .endif 
                                     43 
                                     44     .area CODE 
                                     45 
                                     46 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     47 ;;   UART1 subroutines
                                     48 ;;   used for user interface 
                                     49 ;;   communication channel.
                                     50 ;;   settings: 
                                     51 ;;		115200 8N1 no flow control
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     53 
                                     54 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     55 ;;; Uart1 intterrupt handler 
                                     56 ;;; on receive character 
                                     57 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     58 ;--------------------------
                                     59 ; UART1 receive character
                                     60 ; in a FIFO buffer 
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ; CTLR+Z erase EEPROM autorun 
                                     66 ;        information and reboot
                                     67 ;--------------------------
      0005A2                         68 Uart1RxHandler: ; console receive char 
      0005A2 72 0B 52 30 31   [ 2]   69 	btjf UART1_SR,#UART_SR_RXNE,5$
      0005A7 C6 52 31         [ 1]   70 	ld a,UART1_DR 
      0005AA A1 03            [ 1]   71 	cp a,#CTRL_C 
      0005AC 26 06            [ 1]   72 	jrne 2$
      0005AE CD 06 25         [ 4]   73 	call putc 
      0005B1 CC 00 49         [ 2]   74 	jp user_interrupted
      0005B4                         75 2$:
      0005B4 A1 18            [ 1]   76 	cp a,#CAN ; CTRL_X 
      0005B6 26 03            [ 1]   77 	jrne 3$
      0005B8 CC 00 B5         [ 2]   78 	jp cold_start 	
      0005BB A1 1A            [ 1]   79 3$:	cp a,#CTRL_Z 
      0005BD 26 06            [ 1]   80 	jrne 4$
      0005BF CD 05 D9         [ 4]   81 	call clear_autorun
      0005C2 CC 00 B5         [ 2]   82 	jp cold_start 
      0005C5                         83 4$:
      0005C5 88               [ 1]   84 	push a 
      0005C6 A6 25            [ 1]   85 	ld a,#rx1_queue 
      0005C8 CB 00 2E         [ 1]   86 	add a,rx1_tail 
      0005CB 5F               [ 1]   87 	clrw x 
      0005CC 97               [ 1]   88 	ld xl,a 
      0005CD 84               [ 1]   89 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0005CE F7               [ 1]   90 	ld (x),a 
      0005CF C6 00 2E         [ 1]   91 	ld a,rx1_tail 
      0005D2 4C               [ 1]   92 	inc a 
      0005D3 A4 07            [ 1]   93 	and a,#RX_QUEUE_SIZE-1
      0005D5 C7 00 2E         [ 1]   94 	ld rx1_tail,a 
      0005D8 80               [11]   95 5$:	iret 
                                     96 
      0005D9                         97 clear_autorun:
      0005D9 AE 40 00         [ 2]   98 	ldw x,#EEPROM_BASE 
      0005DC CD 26 0F         [ 4]   99 	call erase_header ; in TinyBasic.asm 
      0005DF 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; initialize UART1, 115200 8N1
                                    104 ; called from cold_start in hardware_init.asm 
                                    105 ; input:
                                    106 ;	none
                                    107 ; output:
                                    108 ;   none
                                    109 ;---------------------------------------------
      0005E0                        110 uart1_init:
      0005E0 72 1A 50 02      [ 1]  111     bset PA_DDR,#UART1_TX_PIN
      0005E4 72 1A 50 03      [ 1]  112     bset PA_CR1,#UART1_TX_PIN 
      0005E8 72 1A 50 04      [ 1]  113     bset PA_CR2,#UART1_TX_PIN 
                                    114 ; enable UART1 clock
      0005EC 72 14 50 C7      [ 1]  115 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0005F0                        116 uart1_set_baud: 
      0005F0 88               [ 1]  117 	push a 
                                    118 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    119 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0005F1 A6 E1            [ 1]  120 	ld a,#CLK_SWR_HSI
      0005F3 C1 50 C3         [ 1]  121 	cp a,CLK_CMSR 
      0005F6 27 0A            [ 1]  122 	jreq 2$ 
      0005F8                        123 1$: ; 8 Mhz 	
      0005F8 35 05 52 33      [ 1]  124 	mov UART1_BRR2,#0x05 ; must be loaded first
      0005FC 35 04 52 32      [ 1]  125 	mov UART1_BRR1,#0x4
      000600 20 08            [ 2]  126 	jra 3$
      000602                        127 2$: ; 16 Mhz 	
      000602 35 0B 52 33      [ 1]  128 	mov UART1_BRR2,#0x0b ; must be loaded first
      000606 35 08 52 32      [ 1]  129 	mov UART1_BRR1,#0x08
      00060A                        130 3$:
      00060A 72 5F 52 31      [ 1]  131     clr UART1_DR
      00060E 35 2C 52 35      [ 1]  132 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000612 72 10 52 35      [ 1]  133 	bset UART1_CR2,#UART_CR2_SBK
      000616 72 0D 52 30 FB   [ 2]  134     btjf UART1_SR,#UART_SR_TC,.
      00061B 72 5F 00 2D      [ 1]  135     clr rx1_head 
      00061F 72 5F 00 2E      [ 1]  136 	clr rx1_tail
      000623 84               [ 1]  137 	pop a  
      000624 81               [ 4]  138 	ret
                                    139 
                                    140 ;---------------------------------
                                    141 ; uart1_putc
                                    142 ; send a character via UART1
                                    143 ; input:
                                    144 ;    A  	character to send
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                    145 ;---------------------------------
      000625                        146 putc:: ; console output always on UART1
      000625                        147 uart1_putc:: 
      000625 72 0F 52 30 FB   [ 2]  148 	btjf UART1_SR,#UART_SR_TXE,.
      00062A C7 52 31         [ 1]  149 	ld UART1_DR,a 
      00062D 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------
                                    154 ; Query for character in rx1_queue
                                    155 ; input:
                                    156 ;   none 
                                    157 ; output:
                                    158 ;   A     0 no charcter available
                                    159 ;   Z     1 no character available
                                    160 ;---------------------------------
      00062E                        161 qgetc::
      00062E                        162 uart1_qgetc::
      00062E C6 00 2D         [ 1]  163 	ld a,rx1_head 
      000631 C0 00 2E         [ 1]  164 	sub a,rx1_tail 
      000634 81               [ 4]  165 	ret 
                                    166 
                                    167 ;---------------------------------
                                    168 ; wait character from UART1 
                                    169 ; input:
                                    170 ;   none
                                    171 ; output:
                                    172 ;   A 			char  
                                    173 ;--------------------------------	
      000635                        174 getc:: ;console input
      000635                        175 uart1_getc::
      000635 CD 06 2E         [ 4]  176 	call uart1_qgetc
      000638 27 FB            [ 1]  177 	jreq uart1_getc 
      00063A 89               [ 2]  178 	pushw x 
                                    179 ;; rx1_queue must be in page 0 	
      00063B A6 25            [ 1]  180 	ld a,#rx1_queue
      00063D CB 00 2D         [ 1]  181 	add a,rx1_head 
      000640 5F               [ 1]  182 	clrw x  
      000641 97               [ 1]  183 	ld xl,a 
      000642 F6               [ 1]  184 	ld a,(x)
      000643 88               [ 1]  185 	push a
      000644 C6 00 2D         [ 1]  186 	ld a,rx1_head 
      000647 4C               [ 1]  187 	inc a 
      000648 A4 07            [ 1]  188 	and a,#RX_QUEUE_SIZE-1
      00064A C7 00 2D         [ 1]  189 	ld rx1_head,a 
      00064D 84               [ 1]  190 	pop a  
      00064E 85               [ 2]  191 	popw x
      00064F 81               [ 4]  192 	ret 
                                    193 
                                    194 ;-----------------------------
                                    195 ;  constants replacing 
                                    196 ;  ANSI sequence received 
                                    197 ;  from terminal.
                                    198 ;  These are the ANSI sequences
                                    199 ;  accepted by readln function
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                    200 ;------------------------------
                           000080   201     ARROW_LEFT=128
                           000081   202     ARROW_RIGHT=129
                           000082   203     HOME=130
                           000083   204     KEY_END=131
                           000084   205     SUP=132 
                                    206 
      000650 43 81 44 80 48 82 46   207 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    208 
                                    209 ;--------------------------------
                                    210 ; receive ANSI ESC 
                                    211 ; sequence and convert it
                                    212 ; to a single character code 
                                    213 ; in range {128..255}
                                    214 ; This is called after receiving 
                                    215 ; ESC character. 
                                    216 ; ignored sequence return 0 
                                    217 ; output:
                                    218 ;   A    converted character 
                                    219 ;-------------------------------
      00065C                        220 get_escape:
      00065C CD 06 35         [ 4]  221     call getc 
      00065F A1 5B            [ 1]  222     cp a,#'[ ; this character is expected after ESC 
      000661 27 02            [ 1]  223     jreq 1$
      000663 4F               [ 1]  224     clr a
      000664 81               [ 4]  225     ret
      000665 CD 06 35         [ 4]  226 1$: call getc 
      000668 AE 06 50         [ 2]  227     ldw x,#convert_table
      00066B                        228 2$:
      00066B F1               [ 1]  229     cp a,(x)
      00066C 27 08            [ 1]  230     jreq 4$
      00066E 1C 00 02         [ 2]  231     addw x,#2
      000671 7D               [ 1]  232     tnz (x)
      000672 26 F7            [ 1]  233     jrne 2$
      000674 4F               [ 1]  234     clr a
      000675 81               [ 4]  235     ret 
      000676 5C               [ 1]  236 4$: incw x 
      000677 F6               [ 1]  237     ld a,(x)
      000678 A1 84            [ 1]  238     cp a,#SUP
      00067A 26 05            [ 1]  239     jrne 5$
      00067C 88               [ 1]  240     push a 
      00067D CD 06 35         [ 4]  241     call getc
      000680 84               [ 1]  242     pop a 
      000681                        243 5$:
      000681 81               [ 4]  244     ret 
                                    245 
                                    246 
                                    247 ;-----------------------------
                                    248 ; send an ASCIZ string to UART1 
                                    249 ; input: 
                                    250 ;   x 		char * 
                                    251 ; output:
                                    252 ;   none 
                                    253 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      000682                        254 puts::
      000682 F6               [ 1]  255     ld a,(x)
      000683 27 06            [ 1]  256 	jreq 1$
      000685 CD 06 25         [ 4]  257 	call putc 
      000688 5C               [ 1]  258 	incw x 
      000689 20 F7            [ 2]  259 	jra puts 
      00068B 81               [ 4]  260 1$:	ret 
                                    261 
                                    262 
                                    263 ;---------------------------
                                    264 ; delete character at left 
                                    265 ; of cursor on terminal 
                                    266 ; input:
                                    267 ;   none 
                                    268 ; output:
                                    269 ;	none 
                                    270 ;---------------------------
      00068C                        271 bksp:
      00068C A6 08            [ 1]  272 	ld a,#BS 
      00068E CD 06 25         [ 4]  273 	call putc 
      000691 A6 20            [ 1]  274 	ld a,#SPACE 
      000693 CD 06 25         [ 4]  275 	call putc 
      000696 A6 08            [ 1]  276 	ld a,#BS 
      000698 CD 06 25         [ 4]  277 	call putc 
      00069B 81               [ 4]  278 	ret 
                                    279 ;---------------------------
                                    280 ; delete n character left of cursor 
                                    281 ; at terminal.
                                    282 ; input: 
                                    283 ;   A   number of characters to delete.
                                    284 ; output:
                                    285 ;    none 
                                    286 ;--------------------------	
      00069C                        287 delete_nchar:
      00069C 88               [ 1]  288 	push a 
      00069D 0D 01            [ 1]  289 0$:	tnz (1,sp)
      00069F 27 07            [ 1]  290 	jreq 1$
      0006A1 CD 06 8C         [ 4]  291 	call bksp 
      0006A4 0A 01            [ 1]  292 	dec (1,sp)
      0006A6 20 F5            [ 2]  293 	jra 0$
      0006A8 84               [ 1]  294 1$:	pop a 
      0006A9 81               [ 4]  295 	ret
                                    296 
                                    297 ;--------------------------
                                    298 ; send ANSI escape sequence
                                    299 ; ANSI: ESC[
                                    300 ; note: ESC is ASCII 27
                                    301 ;       [   is ASCII 91  
                                    302 ;-------------------------- 
      0006AA                        303 send_escape:
      0006AA A6 1B            [ 1]  304 	ld a,#ESC 
      0006AC CD 06 25         [ 4]  305 	call putc 
      0006AF A6 5B            [ 1]  306 	ld a,#'[
      0006B1 CD 06 25         [ 4]  307 	call putc 
      0006B4 81               [ 4]  308 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    309 
                                    310 ;---------------------
                                    311 ;send ANSI parameter value
                                    312 ; ANSI parameter values are 
                                    313 ; sent as ASCII charater 
                                    314 ; not as binary number.
                                    315 ; this routine 
                                    316 ; convert binary number to 
                                    317 ; ASCII string and send it.
                                    318 ; expected range {0..99}
                                    319 ; input: 
                                    320 ; 	A {0..99} 
                                    321 ; output:
                                    322 ;   none 
                                    323 ;---------------------
      0006B5                        324 send_parameter:
      0006B5 89               [ 2]  325 	pushw x 
      0006B6 5F               [ 1]  326 	clrw x 
      0006B7 97               [ 1]  327 	ld xl,a 
      0006B8 A6 0A            [ 1]  328 	ld a,#10 
      0006BA 62               [ 2]  329 	div x,a 
      0006BB 95               [ 1]  330 	ld xh,a 
      0006BC 9F               [ 1]  331 	ld a,xl
      0006BD 4D               [ 1]  332     tnz a 
      0006BE 27 0B            [ 1]  333     jreq 2$
      0006C0 A1 09            [ 1]  334 	cp a,#9 
      0006C2 23 02            [ 2]  335 	jrule 1$
      0006C4 A6 09            [ 1]  336 	ld a,#9
      0006C6                        337 1$:
      0006C6 AB 30            [ 1]  338 	add a,#'0 
      0006C8 CD 06 25         [ 4]  339 	call putc
      0006CB 9E               [ 1]  340 2$:	ld a,xh 
      0006CC AB 30            [ 1]  341 	add a,#'0
      0006CE CD 06 25         [ 4]  342 	call putc 
      0006D1 85               [ 2]  343 	popw x 
      0006D2 81               [ 4]  344 	ret 
                                    345 
                                    346 ;--------------------------
                                    347 ; move cursor left n character
                                    348 ; ANSI: ESC[PnD 
                                    349 ; 'Pn' est a numerical parameter
                                    350 ; specifying number of characters 
                                    351 ; displacement.
                                    352 ; input:
                                    353 ;   A     character count
                                    354 ; output:
                                    355 ;   none
                                    356 ;--------------------------
      0006D3                        357 move_left:
      0006D3 88               [ 1]  358 	push a 
      0006D4 CD 06 AA         [ 4]  359 	call send_escape
      0006D7 84               [ 1]  360     pop a
      0006D8 CD 06 B5         [ 4]  361 	call send_parameter 
      0006DB A6 44            [ 1]  362 	ld a,#'D 
      0006DD CD 06 25         [ 4]  363 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0006E0 81               [ 4]  364 	ret	
                                    365 
                                    366 
                                    367 ;--------------------------
                                    368 ; move cursor right n character 
                                    369 ; ANSI: ESC[PnC 
                                    370 ; input:
                                    371 ;   A     character count
                                    372 ; output:
                                    373 ;   none
                                    374 ;--------------------------
      0006E1                        375 move_right:
      0006E1 88               [ 1]  376 	push a 
      0006E2 CD 06 AA         [ 4]  377 	call send_escape
      0006E5 84               [ 1]  378     pop a
      0006E6 CD 06 B5         [ 4]  379 	call send_parameter 
      0006E9 A6 43            [ 1]  380 	ld a,#'C 
      0006EB CD 06 25         [ 4]  381 	call putc 
      0006EE 81               [ 4]  382 	ret 
                                    383 
                                    384 
                                    385 ;--------------------------
                                    386 ; print n spaces on terminal
                                    387 ; input:
                                    388 ;  X 		number of spaces 
                                    389 ; output:
                                    390 ;	none 
                                    391 ;---------------------------
      0006EF                        392 spaces::
      0006EF A6 20            [ 1]  393 	ld a,#SPACE 
      0006F1 5D               [ 2]  394 1$:	tnzw x
      0006F2 27 06            [ 1]  395 	jreq 9$
      0006F4 CD 06 25         [ 4]  396 	call putc 
      0006F7 5A               [ 2]  397 	decw x
      0006F8 20 F7            [ 2]  398 	jra 1$
      0006FA                        399 9$: 
      0006FA 81               [ 4]  400 	ret 
                                    401 
                                    402 ;--------------------------
                                    403 ; insert character in text 
                                    404 ; line 
                                    405 ; input:
                                    406 ;   A       character to insert 
                                    407 ;   xl      line length
                                    408 ;   xh      insert position 
                                    409 ;   Y       line pointer 
                                    410 ; output:
                                    411 ;   tib     updated 
                                    412 ;   Y       updated  
                                    413 ;-------------------------
                           000001   414 	IPOS=1
                           000002   415 	KCHAR=2 
                           000003   416     LLEN=3 
                           000003   417 	VSIZE=3 
      0006FB                        418 insert_char: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0006FB                        419 	_vars VSIZE 
      0006FB 52 03            [ 2]    1     sub sp,#VSIZE 
      0006FD 6B 02            [ 1]  420     ld (KCHAR,sp),a 
      0006FF 9E               [ 1]  421     ld a,xh 
      000700 6B 01            [ 1]  422 	ld (IPOS,sp),a
      000702 9F               [ 1]  423     ld a,xl 
      000703 6B 03            [ 1]  424     ld (LLEN,sp),a  
      000705 93               [ 1]  425     ldw x,y
      000706 5C               [ 1]  426     incw x 
      000707 7B 03            [ 1]  427     ld a,(LLEN,sp)
      000709 10 01            [ 1]  428     sub a,(IPOS,sp)
      00070B 4C               [ 1]  429     inc a 
      00070C C7 00 0E         [ 1]  430     ld acc8,a 
      00070F 72 5F 00 0D      [ 1]  431     clr acc16
      000713 CD 10 DD         [ 4]  432     call move
      000716 90 AE 16 68      [ 2]  433     ldw y,#tib 
      00071A 7B 01            [ 1]  434     ld a,(IPOS,sp)
      00071C C7 00 0E         [ 1]  435     ld acc8,a 
      00071F 72 B9 00 0D      [ 2]  436     addw y,acc16 
      000723 7B 02            [ 1]  437     ld a,(KCHAR,sp)
      000725 90 F7            [ 1]  438     ld (y),a
      000727 90 5C            [ 1]  439     incw y  
      000729 7B 01            [ 1]  440     ld a,(IPOS,sp)
      00072B CD 06 D3         [ 4]  441     call move_left
      00072E AE 16 68         [ 2]  442     ldw x,#tib 
      000731 CD 06 82         [ 4]  443     call puts 
      000734 7B 03            [ 1]  444     ld a,(LLEN,sp)
      000736 10 01            [ 1]  445     sub a,(IPOS,sp) 
      000738 CD 06 D3         [ 4]  446     call move_left 
      00073B                        447 	_drop VSIZE 
      00073B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00073D 81               [ 4]  448 	ret 
                                    449 
                                    450 
                                    451 ;--------------------------
                                    452 ; delete character under cursor
                                    453 ; input:
                                    454 ;   A       line length   
                                    455 ;   xl      delete position
                                    456 ;   Y       line pointer 
                                    457 ;-------------------------
                           000001   458 	CPOS=1
                           000002   459 	LLEN=2
                           000002   460 	VSIZE=2
      00073E                        461 delete_under:
      00073E                        462 	_vars VSIZE 
      00073E 52 02            [ 2]    1     sub sp,#VSIZE 
      000740 6B 02            [ 1]  463     ld (LLEN,sp),a 
      000742 9F               [ 1]  464     ld a,xl 
      000743 6B 01            [ 1]  465     ld (CPOS,sp),a 
      000745 93               [ 1]  466     ldw x,y ; move destination
      000746 90 5C            [ 1]  467     incw y  ; move source 
      000748 7B 02            [ 1]  468     ld a,(LLEN,sp)
      00074A 10 01            [ 1]  469     sub a,(CPOS,sp)
      00074C 4C               [ 1]  470     inc a ; move including zero at end.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00074D C7 00 0E         [ 1]  471     ld acc8,a 
      000750 72 5F 00 0D      [ 1]  472     clr acc16 
      000754 CD 10 DD         [ 4]  473 	call move 
      000757 90 AE 16 68      [ 2]  474     ldw y,#tib 
      00075B 7B 01            [ 1]  475     ld a,(CPOS,sp)
      00075D C7 00 0E         [ 1]  476     ld acc8,a 
      000760 72 B9 00 0D      [ 2]  477     addw y,acc16 
      000764 93               [ 1]  478     ldw x,y 
      000765 CD 06 82         [ 4]  479     call puts 
      000768 A6 20            [ 1]  480     ld a,#SPACE  
      00076A CD 06 25         [ 4]  481     call putc
      00076D 7B 02            [ 1]  482     ld a,(LLEN,sp)
      00076F 10 01            [ 1]  483     sub a,(CPOS,sp)
      000771 CD 06 D3         [ 4]  484     call move_left 
      000774 0A 02            [ 1]  485     dec (LLEN,sp)
      000776                        486 	_drop VSIZE 
      000776 5B 02            [ 2]    1     addw sp,#VSIZE 
      000778 81               [ 4]  487 	ret 
                                    488 
                                    489 ;-----------------------------
                                    490 ; send ANSI sequence to delete
                                    491 ; whole line. Cursor position
                                    492 ; is not updated.
                                    493 ; ANSI: ESC[2K
                                    494 ; input:
                                    495 ;   none
                                    496 ; output:
                                    497 ;   none 
                                    498 ;-----------------------------
      000779                        499 delete_line:
      000779 CD 06 AA         [ 4]  500     call send_escape
      00077C A6 32            [ 1]  501 	ld a,#'2
      00077E CD 06 25         [ 4]  502 	call putc 
      000781 A6 4B            [ 1]  503 	ld a,#'K 
      000783 CD 06 25         [ 4]  504 	call putc 
      000786 81               [ 4]  505 	ret 
                                    506 
                                    507 
                                    508 
                                    509 ;------------------------------------
                                    510 ; read a line of text from terminal
                                    511 ;  control keys: 
                                    512 ;    BS   efface caractère à gauche 
                                    513 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    514 ;    CTRL_R  edit previous line.
                                    515 ;    CTRL_D  delete line  
                                    516 ;    HOME  go to start of line  
                                    517 ;    KEY_END  go to end of line 
                                    518 ;    ARROW_LEFT  move cursor left 
                                    519 ;    ARROW_RIGHT  move cursor right 
                                    520 ;    CTRL_O  toggle between insert/overwrite
                                    521 ; input:
                                    522 ;	none
                                    523 ; local variable on stack:
                                    524 ;	LL  line length
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    525 ;   RXCHAR last received character 
                                    526 ; output:
                                    527 ;   text in tib  buffer
                                    528 ;   count  line length 
                                    529 ;------------------------------------
                                    530 	; local variables
                           000001   531 	LL_HB=1  ; line length high byte 
                           000001   532 	RXCHAR = 1 ; last char received
                           000002   533 	LL = 2  ; accepted line length
                           000003   534 	CPOS=3  ; cursor position 
                           000004   535 	OVRWR=4 ; overwrite flag 
                           000005   536 	YTEMP=5 ; 
                           000006   537 	VSIZE=6 
      000787                        538 readln::
      000787 90 89            [ 2]  539 	pushw y 
      000789                        540 	_vars VSIZE 
      000789 52 06            [ 2]    1     sub sp,#VSIZE 
      00078B 5F               [ 1]  541 	clrw x 
      00078C 1F 02            [ 2]  542 	ldw (LL,sp),x 
      00078E 1F 03            [ 2]  543 	ldw (CPOS,sp),x 
      000790 03 04            [ 1]  544 	cpl (OVRWR,sp) ; default to overwrite mode 
      000792 90 AE 16 68      [ 2]  545  	ldw y,#tib ; terminal input buffer
      000796                        546 readln_loop:
      000796 CD 06 35         [ 4]  547 	call getc
      000799 6B 01            [ 1]  548 	ld (RXCHAR,sp),a
      00079B A1 1B            [ 1]  549     cp a,#ESC 
      00079D 26 05            [ 1]  550     jrne 0$
      00079F CD 06 5C         [ 4]  551     call get_escape 
      0007A2 6B 01            [ 1]  552     ld (RXCHAR,sp),a 
      0007A4 A1 0D            [ 1]  553 0$:	cp a,#CR
      0007A6 26 03            [ 1]  554 	jrne 1$
      0007A8 CC 09 2F         [ 2]  555 	jp readln_quit
      0007AB A1 0A            [ 1]  556 1$:	cp a,#LF 
      0007AD 26 03            [ 1]  557 	jrne 2$ 
      0007AF CC 09 2F         [ 2]  558 	jp readln_quit
      0007B2                        559 2$:
      0007B2 A1 08            [ 1]  560 	cp a,#BS
      0007B4 26 12            [ 1]  561 	jrne 3$
                                    562 ; delete left 
      0007B6 0D 03            [ 1]  563     tnz (CPOS,sp)
      0007B8 27 DC            [ 1]  564     jreq readln_loop 
      0007BA A6 01            [ 1]  565     ld a,#1 
      0007BC CD 06 D3         [ 4]  566     call move_left
      0007BF 0A 03            [ 1]  567     dec (CPOS,sp)
      0007C1 90 5A            [ 2]  568     decw y 
      0007C3 7B 03            [ 1]  569     ld a,(CPOS,sp) 
      0007C5 CC 08 DB         [ 2]  570     jp 12$
      0007C8                        571 3$:
      0007C8 A1 04            [ 1]  572 	cp a,#CTRL_D
      0007CA 26 1A            [ 1]  573 	jrne 4$
                                    574 ;delete line 
      0007CC CD 07 79         [ 4]  575 	call delete_line 
      0007CF 7B 03            [ 1]  576     ld a,(CPOS,sp)
      0007D1 4C               [ 1]  577     inc a 
      0007D2 CD 06 D3         [ 4]  578     call move_left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0007D5 A6 3E            [ 1]  579 	ld a,#'> 
      0007D7 CD 06 25         [ 4]  580 	call putc 
      0007DA 90 AE 16 68      [ 2]  581 	ldw y,#tib
      0007DE 90 7F            [ 1]  582 	clr (y)
      0007E0 0F 02            [ 1]  583 	clr (LL,sp)
      0007E2 0F 03            [ 1]  584 	clr (CPOS,sp)
      0007E4 20 B0            [ 2]  585 	jra readln_loop
      0007E6                        586 4$:
      0007E6 A1 12            [ 1]  587 	cp a,#CTRL_R 
      0007E8 26 1E            [ 1]  588 	jrne 5$
                                    589 ;repeat line 
      0007EA 0D 02            [ 1]  590 	tnz (LL,sp)
      0007EC 26 A8            [ 1]  591 	jrne readln_loop
      0007EE 90 AE 16 68      [ 2]  592 	ldw y,#tib 
      0007F2 93               [ 1]  593 	ldw x,y
      0007F3 CD 10 B1         [ 4]  594 	call strlen
      0007F6 4D               [ 1]  595 	tnz a  
      0007F7 27 9D            [ 1]  596 	jreq readln_loop
      0007F9 6B 02            [ 1]  597 	ld (LL,sp),a 
      0007FB 6B 03            [ 1]  598     ld (CPOS,sp),a
      0007FD 93               [ 1]  599 	ldw x,y  
      0007FE CD 06 82         [ 4]  600 	call puts
      000801 0F 01            [ 1]  601 	clr (LL_HB,sp)
      000803 72 F9 01         [ 2]  602 	addw y,(LL_HB,sp)
      000806 20 8E            [ 2]  603 	jra readln_loop 
      000808                        604 5$:
      000808 A1 05            [ 1]  605 	cp a,#CTRL_E 
      00080A 26 4D            [ 1]  606 	jrne 6$
                                    607 ;edit line number 
      00080C AE 16 68         [ 2]  608 	ldw x,#tib 
      00080F 17 05            [ 2]  609 	ldw (YTEMP,sp),y  
      000811 16 07            [ 2]  610 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000813 CD 15 F6         [ 4]  611 	call atoi24
      000816 16 05            [ 2]  612 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000818 4F               [ 1]  613 	clr a
      000819 CD 09 6B         [ 4]  614 	call search_lineno
      00081C 5D               [ 2]  615 	tnzw x 
      00081D 26 0B            [ 1]  616 	jrne 51$
      00081F 0F 02            [ 1]  617 	clr (LL,sp)
      000821 90 AE 16 68      [ 2]  618 	ldw y,#tib
      000825 90 7F            [ 1]  619     clr (y) 	
      000827 CC 09 2F         [ 2]  620 	jp readln_quit  
      00082A                        621 51$:
      00082A CF 00 04         [ 2]  622 	ldw basicptr,x
      00082D E6 02            [ 1]  623 	ld a,(2,x)
      00082F C7 00 02         [ 1]  624 	ld count,a 
      000832 90 AE 16 68      [ 2]  625 	ldw y,#tib 
      000836 CD 0E E4         [ 4]  626 	call decompile 
      000839 0F 01            [ 1]  627 	clr (LL_HB,sp)
      00083B A6 0D            [ 1]  628 	ld a,#CR 
      00083D CD 06 25         [ 4]  629 	call putc 
      000840 A6 3E            [ 1]  630 	ld a,#'>
      000842 CD 06 25         [ 4]  631 	call putc
      000845 AE 16 68         [ 2]  632     ldw x,#tib  
      000848 CD 10 B1         [ 4]  633 	call strlen 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00084B 6B 02            [ 1]  634 	ld (LL,sp),a 
      00084D CD 06 82         [ 4]  635 	call puts 
      000850 90 93            [ 1]  636 	ldw y,x
      000852 7B 02            [ 1]  637     ld a,(LL,sp)
      000854 6B 03            [ 1]  638     ld (CPOS,sp),a  
      000856 CC 07 96         [ 2]  639 	jp readln_loop
      000859                        640 6$:
      000859 A1 81            [ 1]  641 	cp a,#ARROW_RIGHT
      00085B 26 15            [ 1]  642    	jrne 7$ 
                                    643 ; right arrow
      00085D 7B 03            [ 1]  644 	ld a,(CPOS,sp)
      00085F 11 02            [ 1]  645     cp a,(LL,sp)
      000861 2B 03            [ 1]  646     jrmi 61$
      000863 CC 07 96         [ 2]  647     jp readln_loop 
      000866                        648 61$:
      000866 A6 01            [ 1]  649     ld a,#1 
      000868 CD 06 E1         [ 4]  650 	call move_right 
      00086B 0C 03            [ 1]  651 	inc (CPOS,sp)
      00086D 90 5C            [ 1]  652     incw y 
      00086F CC 07 96         [ 2]  653     jp readln_loop 
      000872 A1 80            [ 1]  654 7$: cp a,#ARROW_LEFT  
      000874 26 13            [ 1]  655 	jrne 8$
                                    656 ; left arrow 
      000876 0D 03            [ 1]  657 	tnz (CPOS,sp)
      000878 26 03            [ 1]  658 	jrne 71$
      00087A CC 07 96         [ 2]  659 	jp readln_loop
      00087D                        660 71$:
      00087D A6 01            [ 1]  661     ld a,#1 
      00087F CD 06 D3         [ 4]  662 	call move_left 
      000882 0A 03            [ 1]  663 	dec (CPOS,sp)
      000884 90 5A            [ 2]  664     decw y 
      000886 CC 07 96         [ 2]  665 	jp readln_loop 
      000889 A1 82            [ 1]  666 8$: cp a,#HOME  
      00088B 26 0E            [ 1]  667 	jrne 9$
                                    668 ; HOME 
      00088D 7B 03            [ 1]  669     ld a,(CPOS,sp)
      00088F CD 06 D3         [ 4]  670     call move_left 
      000892 0F 03            [ 1]  671 	clr (CPOS,sp)
      000894 90 AE 16 68      [ 2]  672     ldw y,#tib 
      000898 CC 07 96         [ 2]  673 	jp readln_loop  
      00089B A1 83            [ 1]  674 9$: cp a,#KEY_END  
      00089D 26 26            [ 1]  675 	jrne 10$
                                    676 ; KEY_END 
      00089F 7B 03            [ 1]  677 	ld a,(CPOS,sp)
      0008A1 11 02            [ 1]  678 	cp a,(LL,sp)
      0008A3 26 03            [ 1]  679 	jrne 91$
      0008A5 CC 07 96         [ 2]  680 	jp readln_loop 
      0008A8                        681 91$:
      0008A8 7B 02            [ 1]  682 	ld a,(LL,sp)
      0008AA 10 03            [ 1]  683 	sub a,(CPOS,sp)
      0008AC CD 06 E1         [ 4]  684 	call move_right 
      0008AF 7B 02            [ 1]  685 	ld a,(LL,sp)
      0008B1 6B 03            [ 1]  686 	ld (CPOS,sp),a
      0008B3 90 AE 16 68      [ 2]  687     ldw y,#tib
      0008B7 72 5F 00 0D      [ 1]  688     clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0008BB C7 00 0E         [ 1]  689     ld acc8,a 
      0008BE 72 B9 00 0D      [ 2]  690     addw y,acc16  
      0008C2 CC 07 96         [ 2]  691 	jp readln_loop 
      0008C5 A1 0F            [ 1]  692 10$: cp a,#CTRL_O
      0008C7 26 08            [ 1]  693 	jrne 11$ 
                                    694 ; toggle between insert/overwrite
      0008C9 03 04            [ 1]  695 	cpl (OVRWR,sp)
      0008CB CD 23 15         [ 4]  696 	call beep_1khz
      0008CE CC 07 96         [ 2]  697 	jp readln_loop 
      0008D1 A1 84            [ 1]  698 11$: cp a,#SUP 
      0008D3 26 11            [ 1]  699     jrne final_test 
                                    700 ; del character under cursor 
      0008D5 7B 03            [ 1]  701     ld a,(CPOS,sp)
      0008D7 11 02            [ 1]  702     cp a,(LL,sp)
      0008D9 2A 08            [ 1]  703     jrpl 13$
      0008DB                        704 12$:
      0008DB 97               [ 1]  705     ld xl,a    ; cursor position 
      0008DC 7B 02            [ 1]  706     ld a,(LL,sp)  ; line length
      0008DE CD 07 3E         [ 4]  707     call delete_under
      0008E1 0A 02            [ 1]  708     dec (LLEN,sp)
      0008E3                        709 13$:
      0008E3 CC 07 96         [ 2]  710     jp readln_loop 
      0008E6                        711 final_test:
      0008E6 A1 20            [ 1]  712 	cp a,#SPACE
      0008E8 2A 03            [ 1]  713 	jrpl accept_char
      0008EA CC 07 96         [ 2]  714 	jp readln_loop
      0008ED                        715 accept_char:
      0008ED A6 4F            [ 1]  716 	ld a,#TIB_SIZE-1
      0008EF 11 02            [ 1]  717 	cp a, (LL,sp)
      0008F1 2A 03            [ 1]  718 	jrpl 1$
      0008F3 CC 07 96         [ 2]  719 	jp readln_loop
      0008F6 0D 04            [ 1]  720 1$:	tnz (OVRWR,sp)
      0008F8 26 18            [ 1]  721 	jrne overwrite
                                    722 ; insert mode 
      0008FA 7B 03            [ 1]  723     ld a,(CPOS,sp)
      0008FC 11 02            [ 1]  724     cp a,(LL,sp)
      0008FE 27 12            [ 1]  725     jreq overwrite
      000900 7B 02            [ 1]  726     ld a,(LL,sp)
      000902 97               [ 1]  727     ld xl,a 
      000903 7B 03            [ 1]  728     ld a,(CPOS,sp)
      000905 95               [ 1]  729     ld xh,a
      000906 7B 01            [ 1]  730     ld a,(RXCHAR,sp)
      000908 CD 06 FB         [ 4]  731     call insert_char
      00090B 0C 02            [ 1]  732     inc (LLEN,sp)
      00090D 0C 03            [ 1]  733     inc (CPOS,sp)	
      00090F CC 07 96         [ 2]  734     jp readln_loop 
      000912                        735 overwrite:
      000912 7B 01            [ 1]  736 	ld a,(RXCHAR,sp)
      000914 90 F7            [ 1]  737 	ld (y),a
      000916 90 5C            [ 1]  738     incw y
      000918 CD 06 25         [ 4]  739     call putc 
      00091B 7B 03            [ 1]  740 	ld a,(CPOS,sp)
      00091D 11 02            [ 1]  741 	cp a,(LL,sp)
      00091F 2B 09            [ 1]  742 	jrmi 1$
      000921 90 7F            [ 1]  743 	clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000923 0C 02            [ 1]  744 	inc (LL,sp)
      000925 0C 03            [ 1]  745     inc (CPOS,sp)
      000927 CC 07 96         [ 2]  746 	jp readln_loop 
      00092A                        747 1$:	
      00092A 0C 03            [ 1]  748 	inc (CPOS,sp)
      00092C CC 07 96         [ 2]  749 	jp readln_loop 
      00092F                        750 readln_quit:
      00092F 90 AE 16 68      [ 2]  751 	ldw y,#tib
      000933 0F 01            [ 1]  752     clr (LL_HB,sp) 
      000935 72 F9 01         [ 2]  753     addw y,(LL_HB,sp)
      000938 90 7F            [ 1]  754     clr (y)
      00093A 7B 02            [ 1]  755 	ld a,(LL,sp)
      00093C C7 00 02         [ 1]  756 	ld count,a 
      00093F A6 0D            [ 1]  757 	ld a,#CR
      000941 CD 06 25         [ 4]  758 	call putc
      000944                        759 	_drop VSIZE 
      000944 5B 06            [ 2]    1     addw sp,#VSIZE 
      000946 90 85            [ 2]  760 	popw y 
      000948 81               [ 4]  761 	ret
                                    762 
                                    763 ;------------------------------
                                    764 ; print byte  in hexadecimal 
                                    765 ; on console
                                    766 ; input:
                                    767 ;    A		byte to print
                                    768 ;------------------------------
      000949                        769 print_hex::
      000949 88               [ 1]  770 	push a 
      00094A 4E               [ 1]  771 	swap a 
      00094B CD 09 60         [ 4]  772 	call to_hex_char 
      00094E CD 06 25         [ 4]  773 	call putc 
      000951 7B 01            [ 1]  774     ld a,(1,sp) 
      000953 CD 09 60         [ 4]  775 	call to_hex_char
      000956 CD 06 25         [ 4]  776 	call putc
      000959 A6 20            [ 1]  777 	ld a,#SPACE 
      00095B CD 06 25         [ 4]  778 	call putc 
      00095E 84               [ 1]  779 	pop a 
      00095F 81               [ 4]  780 	ret 
                                    781 
                                    782 ;----------------------------------
                                    783 ; convert to hexadecimal digit 
                                    784 ; input:
                                    785 ;   A       digit to convert 
                                    786 ; output:
                                    787 ;   A       hexdecimal character 
                                    788 ;----------------------------------
      000960                        789 to_hex_char::
      000960 A4 0F            [ 1]  790 	and a,#15 
      000962 A1 09            [ 1]  791 	cp a,#9 
      000964 23 02            [ 2]  792 	jrule 1$ 
      000966 AB 07            [ 1]  793 	add a,#7
      000968 AB 30            [ 1]  794 1$: add a,#'0 
      00096A 81               [ 4]  795 	ret 
                                    796 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      00096B                         51 search_lineno::
      00096B                         52 	_vars VSIZE
      00096B 52 02            [ 2]    1     sub sp,#VSIZE 
      00096D 0F 01            [ 1]   53 	clr (LL,sp)
      00096F 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000973 4D               [ 1]   55 	tnz a 
      000974 27 04            [ 1]   56 	jreq search_ln_loop
      000976 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      00097A                         58 search_ln_loop:
      00097A 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      00097E 2A 10            [ 1]   60 	jrpl 8$
      000980 90 F3            [ 1]   61 	cpw x,(y)
      000982 27 0E            [ 1]   62 	jreq 9$
      000984 2B 0A            [ 1]   63 	jrmi 8$ 
      000986 90 E6 02         [ 1]   64 	ld a,(2,y)
      000989 6B 02            [ 1]   65 	ld (LB,sp),a 
      00098B 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      00098E 20 EA            [ 2]   67 	jra search_ln_loop 
      000990                         68 8$: 
      000990 5F               [ 1]   69 	clrw x 	
      000991 51               [ 1]   70 	exgw x,y 
      000992                         71 9$: _drop VSIZE
      000992 5B 02            [ 2]    1     addw sp,#VSIZE 
      000994 51               [ 1]   72 	exgw x,y   
      000995 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000996                         83 del_line: 
      000996                         84 	_vars VSIZE 
      000996 52 04            [ 2]    1     sub sp,#VSIZE 
      000998 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      00099A 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      00099C 0F 01            [ 1]   87 	clr (LLEN,sp)
      00099E 90 93            [ 1]   88 	ldw y,x  
      0009A0 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      0009A3 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      0009A5 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      0009A9 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      0009AC 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      0009B0 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      0009B2 CD 10 DD         [ 4]   95 	call move
      0009B5 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      0009B9 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      0009BC 90 CF 00 1D      [ 2]   98 	ldw txtend,y
      0009C0 90 CF 00 2F      [ 2]   99 	ldw dvar_bgn,y 
      0009C4 90 CF 00 31      [ 2]  100 	ldw dvar_end,y   
      0009C8                        101 	_drop VSIZE     
      0009C8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0009CA 81               [ 4]  102 	ret 
                                    103 
                                    104 ;---------------------------------------------
                                    105 ; open a gap in text area to 
                                    106 ; move new line in this gap
                                    107 ; input:
                                    108 ;    X 			addr gap start 
                                    109 ;    Y 			gap length 
                                    110 ; output:
                                    111 ;    X 			addr gap start 
                                    112 ;--------------------------------------------
                           000001   113 	DEST=1
                           000003   114 	SRC=3
                           000005   115 	LEN=5
                           000006   116 	VSIZE=6 
      0009CB                        117 open_gap:
      0009CB C3 00 1D         [ 2]  118 	cpw x,txtend 
      0009CE 24 31            [ 1]  119 	jruge 9$
      0009D0                        120 	_vars VSIZE
      0009D0 52 06            [ 2]    1     sub sp,#VSIZE 
      0009D2 1F 03            [ 2]  121 	ldw (SRC,sp),x 
      0009D4 17 05            [ 2]  122 	ldw (LEN,sp),y 
      0009D6 90 CF 00 0D      [ 2]  123 	ldw acc16,y 
      0009DA 90 93            [ 1]  124 	ldw y,x ; SRC
      0009DC 72 BB 00 0D      [ 2]  125 	addw x,acc16  
      0009E0 1F 01            [ 2]  126 	ldw (DEST,sp),x 
                                    127 ;compute size to move 	
      0009E2 CE 00 1D         [ 2]  128 	ldw x,txtend 
      0009E5 72 F0 03         [ 2]  129 	subw x,(SRC,sp)
      0009E8 CF 00 0D         [ 2]  130 	ldw acc16,x ; size to move
      0009EB 1E 01            [ 2]  131 	ldw x,(DEST,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      0009ED CD 10 DD         [ 4]  132 	call move
      0009F0 CE 00 1D         [ 2]  133 	ldw x,txtend
      0009F3 72 FB 05         [ 2]  134 	addw x,(LEN,sp)
      0009F6 CF 00 1D         [ 2]  135 	ldw txtend,x
      0009F9 CF 00 2F         [ 2]  136 	ldw dvar_bgn,x 
      0009FC CF 00 31         [ 2]  137 	ldw dvar_end,x 
      0009FF                        138 	_drop VSIZE 
      0009FF 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A01 81               [ 4]  139 9$:	ret 
                                    140 
                                    141 ;--------------------------------------------
                                    142 ; insert line in pad into text area 
                                    143 ; first search for already existing 
                                    144 ; replace existing 
                                    145 ; if new line empty delete existing one. 
                                    146 ; input:
                                    147 ;   ptr16		pointer to tokenized line  
                                    148 ; output:
                                    149 ;   none
                                    150 ;---------------------------------------------
                           000001   151 	DEST=1  ; text area insertion address 
                           000003   152 	SRC=3   ; str to insert address 
                           000005   153 	LINENO=5 ; line number 
                           000007   154 	LLEN=7 ; line length 
                           000008   155 	VSIZE=8  
      000A02                        156 insert_line:
      000A02                        157 	_vars VSIZE 
      000A02 52 08            [ 2]    1     sub sp,#VSIZE 
      000A04 72 CE 00 19      [ 5]  158 	ldw x,[ptr16]
      000A08 1F 05            [ 2]  159 	ldw (LINENO,sp),x 
      000A0A 0F 07            [ 1]  160 	clr (LLEN,sp)
      000A0C CE 00 19         [ 2]  161 	ldw x,ptr16 
      000A0F E6 02            [ 1]  162 	ld a,(2,x)
      000A11 6B 08            [ 1]  163 	ld (LLEN+1,sp),a 
      000A13 4F               [ 1]  164 	clr a 
      000A14 1E 05            [ 2]  165 	ldw x,(LINENO,sp)
      000A16 CD 09 6B         [ 4]  166 	call search_lineno
      000A19 5D               [ 2]  167 	tnzw x 
      000A1A 27 07            [ 1]  168 	jreq 0$ 
      000A1C 1F 01            [ 2]  169 	ldw (DEST,sp),x 
      000A1E CD 09 96         [ 4]  170 	call del_line 
      000A21 20 02            [ 2]  171 	jra 1$
      000A23 17 01            [ 2]  172 0$: ldw (DEST,sp),y
      000A25 A6 03            [ 1]  173 1$: ld a,#3 
      000A27 11 08            [ 1]  174 	cp a,(LLEN+1,sp)
      000A29 27 42            [ 1]  175 	jreq 9$
                                    176 ; check for space 
      000A2B CE 00 1D         [ 2]  177 	ldw x,txtend 
      000A2E 72 FB 07         [ 2]  178 	addw x,(LLEN,sp)
      000A31 A3 16 4A         [ 2]  179 	cpw x,#tib-10*CELL_SIZE ; keep 10 slots space for @() array.  
      000A34 25 0C            [ 1]  180 	jrult 3$
      000A36 72 1C 00 22      [ 1]  181 	bset flags,#FLN_REJECTED
      000A3A AE 12 08         [ 2]  182 	ldw x,#err_mem_full 
      000A3D CD 06 82         [ 4]  183 	call puts 
      000A40 20 2B            [ 2]  184 	jra 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      000A42                        185 3$: ; create gap to insert line 
      000A42 1E 01            [ 2]  186 	ldw x,(DEST,sp) 
      000A44 16 07            [ 2]  187 	ldw y,(LLEN,sp)
      000A46 CD 09 CB         [ 4]  188 	call open_gap 
                                    189 ; move new line in gap 
      000A49 1E 07            [ 2]  190 	ldw x,(LLEN,sp)
      000A4B CF 00 0D         [ 2]  191 	ldw acc16,x 
      000A4E 90 AE 16 B8      [ 2]  192 	ldw y,#pad ;SRC 
      000A52 1E 01            [ 2]  193 	ldw x,(DEST,sp) ; dest address 
      000A54 CD 10 DD         [ 4]  194 	call move
      000A57 1E 01            [ 2]  195 	ldw x,(DEST,sp)
      000A59 C3 00 1D         [ 2]  196 	cpw x,txtend 
      000A5C 25 0F            [ 1]  197 	jrult 9$ 
      000A5E 1E 07            [ 2]  198 	ldw x,(LLEN,sp)
      000A60 72 BB 00 1D      [ 2]  199 	addw x,txtend 
      000A64 CF 00 1D         [ 2]  200 	ldw txtend,x 
      000A67 CF 00 2F         [ 2]  201 	ldw dvar_bgn,x 
      000A6A CF 00 31         [ 2]  202 	ldw dvar_end,x 
      000A6D                        203 9$:	
      000A6D                        204 	_drop VSIZE
      000A6D 5B 08            [ 2]    1     addw sp,#VSIZE 
      000A6F 81               [ 4]  205 	ret
                                    206 
                                    207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    208 ;; compiler routines        ;;
                                    209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    210 ;------------------------------------
                                    211 ; parse quoted string 
                                    212 ; input:
                                    213 ;   Y 	pointer to tib 
                                    214 ;   X   pointer to output buffer 
                                    215 ; output:
                                    216 ;	buffer   parsed string
                                    217 ;------------------------------------
                           000001   218 	PREV = 1
                           000002   219 	CURR =2
                           000002   220 	VSIZE=2
      000A70                        221 parse_quote: 
      000A70                        222 	_vars VSIZE 
      000A70 52 02            [ 2]    1     sub sp,#VSIZE 
      000A72 4F               [ 1]  223 	clr a
      000A73 6B 01            [ 1]  224 1$:	ld (PREV,sp),a 
      000A75                        225 2$:	
      000A75 91 D6 00         [ 4]  226 	ld a,([in.w],y)
      000A78 27 24            [ 1]  227 	jreq 6$
      000A7A 72 5C 00 01      [ 1]  228 	inc in 
      000A7E 6B 02            [ 1]  229 	ld (CURR,sp),a 
      000A80 A6 5C            [ 1]  230 	ld a,#'\
      000A82 11 01            [ 1]  231 	cp a, (PREV,sp)
      000A84 26 0A            [ 1]  232 	jrne 3$
      000A86 0F 01            [ 1]  233 	clr (PREV,sp)
      000A88 7B 02            [ 1]  234 	ld a,(CURR,sp)
      000A8A AD 1C            [ 4]  235 	callr convert_escape
      000A8C F7               [ 1]  236 	ld (x),a 
      000A8D 5C               [ 1]  237 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000A8E 20 E5            [ 2]  238 	jra 2$
      000A90                        239 3$:
      000A90 7B 02            [ 1]  240 	ld a,(CURR,sp)
      000A92 A1 5C            [ 1]  241 	cp a,#'\'
      000A94 27 DD            [ 1]  242 	jreq 1$
      000A96 A1 22            [ 1]  243 	cp a,#'"
      000A98 27 04            [ 1]  244 	jreq 6$ 
      000A9A F7               [ 1]  245 	ld (x),a 
      000A9B 5C               [ 1]  246 	incw x 
      000A9C 20 D7            [ 2]  247 	jra 2$
      000A9E                        248 6$:
      000A9E 7F               [ 1]  249 	clr (x)
      000A9F 5C               [ 1]  250 	incw x 
      000AA0 90 93            [ 1]  251 	ldw y,x 
      000AA2 5F               [ 1]  252 	clrw x 
      000AA3 A6 02            [ 1]  253 	ld a,#TK_QSTR  
      000AA5                        254 	_drop VSIZE
      000AA5 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AA7 81               [ 4]  255 	ret 
                                    256 
                                    257 ;---------------------------------------
                                    258 ; called by parse_quote
                                    259 ; subtitute escaped character 
                                    260 ; by their ASCII value .
                                    261 ; input:
                                    262 ;   A  character following '\'
                                    263 ; output:
                                    264 ;   A  substitued char or same if not valid.
                                    265 ;---------------------------------------
      000AA8                        266 convert_escape:
      000AA8 89               [ 2]  267 	pushw x 
      000AA9 AE 0A BD         [ 2]  268 	ldw x,#escaped 
      000AAC F1               [ 1]  269 1$:	cp a,(x)
      000AAD 27 06            [ 1]  270 	jreq 2$
      000AAF 7D               [ 1]  271 	tnz (x)
      000AB0 27 09            [ 1]  272 	jreq 3$
      000AB2 5C               [ 1]  273 	incw x 
      000AB3 20 F7            [ 2]  274 	jra 1$
      000AB5 1D 0A BD         [ 2]  275 2$: subw x,#escaped 
      000AB8 9F               [ 1]  276 	ld a,xl 
      000AB9 AB 07            [ 1]  277 	add a,#7
      000ABB 85               [ 2]  278 3$:	popw x 
      000ABC 81               [ 4]  279 	ret 
                                    280 
      000ABD 61 62 74 6E 76 66 72   281 escaped:: .asciz "abtnvfr"
             00
                                    282 
                                    283 ;-------------------------
                                    284 ; integer parser 
                                    285 ; input:
                                    286 ;   X 		point to output buffer  
                                    287 ;   Y 		point to tib 
                                    288 ;   A 	    first digit|'$' 
                                    289 ; output:  
                                    290 ;   X 		integer bits 15..0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    291 ;   A 		TK_INTGR
                                    292 ;   acc24   24 bits integer 
                                    293 ;-------------------------
                           000001   294 	BASE=1
                           000002   295 	TCHAR=2 
                           000003   296 	XSAVE=3
                           000004   297 	VSIZE=4 
      000AC5                        298 parse_integer: ; { -- n }
      000AC5 89               [ 2]  299 	pushw x 	
      000AC6 4B 00            [ 1]  300 	push #0 ; TCHAR
      000AC8 4B 0A            [ 1]  301 	push #10 ; BASE=10
      000ACA A1 24            [ 1]  302 	cp a,#'$
      000ACC 26 04            [ 1]  303 	jrne 2$ 
      000ACE                        304     _drop #1
      000ACE 5B 01            [ 2]    1     addw sp,##1 
      000AD0 4B 10            [ 1]  305 	push #16  ; BASE=16
      000AD2 F7               [ 1]  306 2$:	ld (x),a 
      000AD3 5C               [ 1]  307 	incw x 
      000AD4 91 D6 00         [ 4]  308 	ld a,([in.w],y)
      000AD7 72 5C 00 01      [ 1]  309 	inc in 
      000ADB CD 15 EA         [ 4]  310 	call to_upper 
      000ADE 6B 02            [ 1]  311 	ld (TCHAR,sp),a 
      000AE0 CD 0B 66         [ 4]  312 	call is_digit 
      000AE3 25 ED            [ 1]  313 	jrc 2$
      000AE5 A6 10            [ 1]  314 	ld a,#16 
      000AE7 11 01            [ 1]  315 	cp a,(BASE,sp)
      000AE9 26 0A            [ 1]  316 	jrne 3$ 
      000AEB 7B 02            [ 1]  317 	ld a,(TCHAR,sp)
      000AED A1 41            [ 1]  318 	cp a,#'A 
      000AEF 2B 04            [ 1]  319 	jrmi 3$ 
      000AF1 A1 47            [ 1]  320 	cp a,#'G 
      000AF3 2B DD            [ 1]  321 	jrmi 2$ 
      000AF5 72 5A 00 01      [ 1]  322 3$: dec in 	
      000AF9 7F               [ 1]  323     clr (x)
      000AFA 1E 03            [ 2]  324 	ldw x,(XSAVE,sp)
      000AFC 90 AE 17 73      [ 2]  325 	ldw y,#XSTACK_EMPTY 
      000B00 CD 15 F6         [ 4]  326 	call atoi24
      000B03 16 03            [ 2]  327 	ldw y,(XSAVE,sp)
      000B05 C6 00 0C         [ 1]  328 	ld a,acc24 
      000B08 90 F7            [ 1]  329 	ld (y),a 
      000B0A 90 5C            [ 1]  330 	incw y  
      000B0C CE 00 0D         [ 2]  331 	ldw x,acc16 
      000B0F 90 FF            [ 2]  332 	ldw (y),x 
      000B11 72 A9 00 02      [ 2]  333 	addw y,#2
      000B15 A6 84            [ 1]  334 	ld a,#TK_INTGR
      000B17                        335 	_drop VSIZE  
      000B17 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B19 81               [ 4]  336 	ret 	
                                    337 
                                    338 ;-------------------------
                                    339 ; binary integer parser
                                    340 ; build integer in acc24  
                                    341 ; input:
                                    342 ;   X 		point to output buffer  
                                    343 ;   Y 		point to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    344 ;   A 	    '&' 
                                    345 ; output:  
                                    346 ;   buffer  TK_INTGR integer  
                                    347 ;   X 		int16 
                                    348 ;   A 		TK_INTGR
                                    349 ;   acc24    int24 
                                    350 ;-------------------------
                           000001   351 	BINARY=1 ; 24 bits integer 
                           000003   352 	VSIZE=3
      000B1A                        353 parse_binary: ; { -- n }
      000B1A 4B 00            [ 1]  354 	push #0
      000B1C 4B 00            [ 1]  355 	push #0
      000B1E 4B 00            [ 1]  356 	push #0
      000B20                        357 2$:	
      000B20 91 D6 00         [ 4]  358 	ld a,([in.w],y)
      000B23 72 5C 00 01      [ 1]  359 	inc in 
      000B27 A1 30            [ 1]  360 	cp a,#'0 
      000B29 27 06            [ 1]  361 	jreq 3$
      000B2B A1 31            [ 1]  362 	cp a,#'1 
      000B2D 27 02            [ 1]  363 	jreq 3$ 
      000B2F 20 0B            [ 2]  364 	jra bin_exit 
      000B31 A0 30            [ 1]  365 3$: sub a,#'0 
      000B33 46               [ 1]  366 	rrc a
      000B34 09 03            [ 1]  367 	rlc (BINARY+2,sp) 
      000B36 09 02            [ 1]  368 	rlc (BINARY+1,sp)
      000B38 09 01            [ 1]  369 	rlc (BINARY,sp) 
      000B3A 20 E4            [ 2]  370 	jra 2$  
      000B3C                        371 bin_exit:
      000B3C 72 5A 00 01      [ 1]  372 	dec in 
      000B40 90 93            [ 1]  373 	ldw y,x
      000B42 7B 01            [ 1]  374 	ld a,(BINARY,sp)
      000B44 90 F7            [ 1]  375 	ld (y),a 
      000B46 90 5C            [ 1]  376 	incw y 
      000B48 1E 02            [ 2]  377 	ldw x,(BINARY+1,sp)
      000B4A 90 FF            [ 2]  378 	ldw (y),x 
      000B4C 72 A9 00 02      [ 2]  379 	addw y,#2  
      000B50 A6 84            [ 1]  380 	ld a,#TK_INTGR 	
      000B52                        381 	_drop VSIZE 
      000B52 5B 03            [ 2]    1     addw sp,#VSIZE 
      000B54 81               [ 4]  382 	ret
                                    383 
                                    384 ;-------------------------------------
                                    385 ; check if A is a letter 
                                    386 ; input:
                                    387 ;   A 			character to test 
                                    388 ; output:
                                    389 ;   C flag      1 true, 0 false 
                                    390 ;-------------------------------------
      000B55                        391 is_alpha::
      000B55 A1 41            [ 1]  392 	cp a,#'A 
      000B57 8C               [ 1]  393 	ccf 
      000B58 24 0B            [ 1]  394 	jrnc 9$ 
      000B5A A1 5B            [ 1]  395 	cp a,#'Z+1 
      000B5C 25 07            [ 1]  396 	jrc 9$ 
      000B5E A1 61            [ 1]  397 	cp a,#'a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000B60 8C               [ 1]  398 	ccf 
      000B61 24 02            [ 1]  399 	jrnc 9$
      000B63 A1 7B            [ 1]  400 	cp a,#'z+1
      000B65 81               [ 4]  401 9$: ret 	
                                    402 
                                    403 ;------------------------------------
                                    404 ; check if character in {'0'..'9'}
                                    405 ; input:
                                    406 ;    A  character to test
                                    407 ; output:
                                    408 ;    Carry  0 not digit | 1 digit
                                    409 ;------------------------------------
      000B66                        410 is_digit::
      000B66 A1 30            [ 1]  411 	cp a,#'0
      000B68 25 03            [ 1]  412 	jrc 1$
      000B6A A1 3A            [ 1]  413     cp a,#'9+1
      000B6C 8C               [ 1]  414 	ccf 
      000B6D 8C               [ 1]  415 1$:	ccf 
      000B6E 81               [ 4]  416     ret
                                    417 
                                    418 ;-------------------------------------
                                    419 ; return true if character in  A 
                                    420 ; is letter or digit.
                                    421 ; input:
                                    422 ;   A     ASCII character 
                                    423 ; output:
                                    424 ;   A     no change 
                                    425 ;   Carry    0 false| 1 true 
                                    426 ;--------------------------------------
      000B6F                        427 is_alnum::
      000B6F CD 0B 66         [ 4]  428 	call is_digit
      000B72 25 03            [ 1]  429 	jrc 1$ 
      000B74 CD 0B 55         [ 4]  430 	call is_alpha
      000B77 81               [ 4]  431 1$:	ret 
                                    432 
                                    433 ;-----------------------------
                                    434 ; check if character in A 
                                    435 ; is a valid symbol character 
                                    436 ; valid: Upper case LETTER,DIGIT,'_' 
                                    437 ; input:
                                    438 ;    A   character to validate
                                    439 ; output:
                                    440 ;    Carry   set if valid 
                                    441 ;----------------------------
      000B78                        442 is_symbol_char: 
      000B78 A1 5F            [ 1]  443 	cp a,#'_ 
      000B7A 26 03            [ 1]  444 	jrne 1$
      000B7C 99               [ 1]  445 	scf 
      000B7D 20 03            [ 2]  446 	jra 9$ 
      000B7F CD 0B 6F         [ 4]  447 1$:	call is_alnum 
      000B82 81               [ 4]  448 9$: ret 
                                    449 
                                    450 ;---------------------------
                                    451 ;  when lexical unit begin 
                                    452 ;  with a letter a symbol 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    453 ;  is expected.
                                    454 ; input:
                                    455 ;   A   first character of symbol 
                                    456 ;	X   point to output buffer 
                                    457 ;   Y   point to input text 
                                    458 ; output:
                                    459 ;	X   after symbol 
                                    460 ;   Y   point after lexical unit 
                                    461 ;---------------------------
      000B83                        462 parse_symbol:
      000B83 5C               [ 1]  463 	incw x ; keep space for TK_ID 
      000B84                        464 symb_loop: 
                                    465 ; symbol are converted to upper case 
      000B84 CD 15 EA         [ 4]  466 	call to_upper  
      000B87 F7               [ 1]  467 	ld (x), a 
      000B88 5C               [ 1]  468 	incw x
      000B89 91 D6 00         [ 4]  469 	ld a,([in.w],y)
      000B8C 72 5C 00 01      [ 1]  470 	inc in 
      000B90 CD 0B 78         [ 4]  471 	call is_symbol_char 
      000B93 25 EF            [ 1]  472 	jrc symb_loop 
      000B95 7F               [ 1]  473 	clr (x)
      000B96 72 5A 00 01      [ 1]  474 	dec in  
      000B9A 81               [ 4]  475 	ret 
                                    476 
                                    477 ;---------------------------
                                    478 ;  token begin with a letter,
                                    479 ;  is keyword or variable. 	
                                    480 ; input:
                                    481 ;   X 		point to pad 
                                    482 ;   Y 		point to text
                                    483 ;   A 	    first letter  
                                    484 ; output:
                                    485 ;   X		exec_addr|var_addr 
                                    486 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    487 ;   pad 	keyword|var_name  
                                    488 ;--------------------------  
                           000001   489 	XFIRST=1
                           000002   490 	VSIZE=2
      000B9B                        491 parse_keyword: 
      000B9B 89               [ 2]  492 	pushw x ; preserve *symbol 
      000B9C CD 0B 83         [ 4]  493 	call parse_symbol
      000B9F 1E 01            [ 2]  494 	ldw x,(XFIRST,sp) 
      000BA1 E6 02            [ 1]  495 	ld a,(2,x)
      000BA3 26 0F            [ 1]  496 	jrne 2$
                                    497 ; one letter variable name 
      000BA5 E6 01            [ 1]  498 	ld a,(1,x) 
      000BA7 A0 41            [ 1]  499 	sub a,#'A 
      000BA9 AE 00 03         [ 2]  500 	ldw x,#3 
      000BAC 42               [ 4]  501 	mul x,a 
      000BAD 1C 00 34         [ 2]  502 	addw x,#vars 
      000BB0 A6 85            [ 1]  503 	ld a,#TK_VAR 
      000BB2 20 36            [ 2]  504 	jra 4$ 
      000BB4                        505 2$: ; check for keyword, otherwise syntax error.
      000BB4                        506 	_ldx_dict kword_dict ; dictionary entry point
      000BB4 AE 33 A1         [ 2]    1     ldw x,#kword_dict+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000BB7 16 01            [ 2]  507 	ldw y,(XFIRST,sp) ; name to search for
      000BB9 90 5C            [ 1]  508 	incw y 
      000BBB CD 16 77         [ 4]  509 	call search_dict
      000BBE 4D               [ 1]  510 	tnz a
      000BBF 26 29            [ 1]  511 	jrne 4$
                                    512 ; not in dictionary
                                    513 ; compile it as TK_LABEL
      000BC1 16 01            [ 2]  514 	ldw y,(XFIRST,sp)
      000BC3 A6 03            [ 1]  515 	ld a,#TK_LABEL 
      000BC5 90 F7            [ 1]  516 	ld (y),a 
      000BC7 90 5C            [ 1]  517 	incw y
      000BC9 93               [ 1]  518 	ldw x,y 
      000BCA CD 10 B1         [ 4]  519 	call strlen
      000BCD A1 0F            [ 1]  520 	cp a,#NAME_MAX_LEN 
      000BCF 23 02            [ 2]  521 	jrule 22$ 
      000BD1 A6 0F            [ 1]  522 	ld a,#NAME_MAX_LEN 
      000BD3                        523 22$:	
      000BD3 88               [ 1]  524 	push a 
      000BD4                        525 24$:
      000BD4 90 F6            [ 1]  526     ld a,(y)
      000BD6 27 09            [ 1]  527 	jreq 3$
      000BD8 90 5C            [ 1]  528 	incw y
      000BDA 0A 01            [ 1]  529 	dec (1,sp) 
      000BDC 26 F6            [ 1]  530 	jrne 24$
      000BDE 4F               [ 1]  531 	clr a 
      000BDF 90 F7            [ 1]  532 	ld (y),a 
      000BE1 90 5C            [ 1]  533 3$: incw y 
      000BE3                        534 	_drop 1 
      000BE3 5B 01            [ 2]    1     addw sp,#1 
      000BE5 A6 03            [ 1]  535 	ld a,#TK_LABEL 
      000BE7 5F               [ 1]  536 	clrw x 
      000BE8 20 1B            [ 2]  537 	jra 5$ 
      000BEA                        538 4$:	
      000BEA 16 01            [ 2]  539 	ldw y,(XFIRST,sp)
      000BEC A1 87            [ 1]  540 	cp a,#TK_NOT 
      000BEE 2B 06            [ 1]  541 	jrmi 41$
      000BF0 90 F7            [ 1]  542 	ld (y),a 
      000BF2 90 5C            [ 1]  543 	incw y 
      000BF4 20 0F            [ 2]  544 	jra 5$ 
      000BF6                        545 41$:	
      000BF6 A3 1A 04         [ 2]  546 	cpw x,#let  
      000BF9 27 0A            [ 1]  547 	jreq 5$  ; don't compile LET command 
      000BFB 90 F7            [ 1]  548 	ld (y),a 
      000BFD 90 5C            [ 1]  549 	incw y 
      000BFF 90 FF            [ 2]  550 	ldw (y),x
      000C01 72 A9 00 02      [ 2]  551 	addw y,#2  
      000C05                        552 5$:	_drop VSIZE 
      000C05 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C07 81               [ 4]  553 	ret  	
                                    554 
                                    555 ;------------------------------------
                                    556 ; skip character c in text starting from 'in'
                                    557 ; input:
                                    558 ;	 y 		point to text buffer
                                    559 ;    a 		character to skip
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    560 ; output:  
                                    561 ;	'in' ajusted to new position
                                    562 ;------------------------------------
                           000001   563 	C = 1 ; local var
      000C08                        564 skip:
      000C08 88               [ 1]  565 	push a
      000C09 91 D6 00         [ 4]  566 1$:	ld a,([in.w],y)
      000C0C 27 0A            [ 1]  567 	jreq 2$
      000C0E 11 01            [ 1]  568 	cp a,(C,sp)
      000C10 26 06            [ 1]  569 	jrne 2$
      000C12 72 5C 00 01      [ 1]  570 	inc in
      000C16 20 F1            [ 2]  571 	jra 1$
      000C18                        572 2$: _drop 1 
      000C18 5B 01            [ 2]    1     addw sp,#1 
      000C1A 81               [ 4]  573 	ret
                                    574 	
                                    575 
                                    576 ;------------------------------------
                                    577 ; scan text for next token
                                    578 ; input: 
                                    579 ;	X 		pointer to buffer where 
                                    580 ;	        token id and value are copied 
                                    581 ; use:
                                    582 ;	Y       pointer to text in tib 
                                    583 ; output:
                                    584 ;   A       token attribute 
                                    585 ;   X 		token value
                                    586 ;   Y       updated position in output buffer   
                                    587 ;------------------------------------
                                    588 	; use to check special character 
                                    589 	.macro _case c t  
                                    590 	ld a,#c 
                                    591 	cp a,(TCHAR,sp) 
                                    592 	jrne t
                                    593 	.endm 
                                    594 
                           000001   595 	TCHAR=1
                           000002   596 	ATTRIB=2
                           000002   597 	VSIZE=2
      000C1B                        598 get_token:: 
      000C1B                        599 	_vars VSIZE
      000C1B 52 02            [ 2]    1     sub sp,#VSIZE 
                                    600 ;	ld a,in 
                                    601 ;	sub a,count
                                    602 ;   jrmi 0$
                                    603 ;	clr a 
                                    604 ;	ret 
      000C1D                        605 0$: 
      000C1D 90 AE 16 68      [ 2]  606 	ldw y,#tib    	
      000C21 A6 20            [ 1]  607 	ld a,#SPACE
      000C23 CD 0C 08         [ 4]  608 	call skip
      000C26 55 00 01 00 03   [ 1]  609 	mov in.saved,in 
      000C2B 91 D6 00         [ 4]  610 	ld a,([in.w],y)
      000C2E 26 05            [ 1]  611 	jrne 1$
      000C30 90 93            [ 1]  612 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000C32 CC 0D CC         [ 2]  613 	jp token_exit ; end of line 
      000C35 72 5C 00 01      [ 1]  614 1$:	inc in 
      000C39 CD 15 EA         [ 4]  615 	call to_upper 
      000C3C 6B 01            [ 1]  616 	ld (TCHAR,sp),a 
                                    617 ; check for quoted string
      000C3E                        618 str_tst:  	
      000C3E                        619 	_case '"' nbr_tst
      000C3E A6 22            [ 1]    1 	ld a,#'"' 
      000C40 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C42 26 0A            [ 1]    3 	jrne nbr_tst
      000C44 A6 02            [ 1]  620 	ld a,#TK_QSTR
      000C46 F7               [ 1]  621 	ld (x),a 
      000C47 5C               [ 1]  622 	incw x 
      000C48 CD 0A 70         [ 4]  623 	call parse_quote
      000C4B CC 0D CC         [ 2]  624 	jp token_exit
      000C4E                        625 nbr_tst:
                                    626 ; check for hexadecimal number 
      000C4E A6 24            [ 1]  627 	ld a,#'$'
      000C50 11 01            [ 1]  628 	cp a,(TCHAR,sp) 
      000C52 27 17            [ 1]  629 	jreq 1$
                                    630 ;check for binary number 
      000C54 A6 26            [ 1]  631 	ld a,#'&
      000C56 11 01            [ 1]  632 	cp a,(TCHAR,sp)
      000C58 26 0A            [ 1]  633 	jrne 0$
      000C5A A6 84            [ 1]  634 	ld a,#TK_INTGR
      000C5C F7               [ 1]  635 	ld (x),a 
      000C5D 5C               [ 1]  636 	incw x 
      000C5E CD 0B 1A         [ 4]  637 	call parse_binary ; expect binary integer 
      000C61 CC 0D CC         [ 2]  638 	jp token_exit 
                                    639 ; check for decimal number 	
      000C64 7B 01            [ 1]  640 0$:	ld a,(TCHAR,sp)
      000C66 CD 0B 66         [ 4]  641 	call is_digit
      000C69 24 0C            [ 1]  642 	jrnc 3$
      000C6B A6 84            [ 1]  643 1$:	ld a,#TK_INTGR 
      000C6D F7               [ 1]  644 	ld (x),a 
      000C6E 5C               [ 1]  645 	incw x 
      000C6F 7B 01            [ 1]  646 	ld a,(TCHAR,sp)
      000C71 CD 0A C5         [ 4]  647 	call parse_integer 
      000C74 CC 0D CC         [ 2]  648 	jp token_exit 
      000C77                        649 3$: 
      000C77                        650 	_case '(' bkslsh_tst 
      000C77 A6 28            [ 1]    1 	ld a,#'(' 
      000C79 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C7B 26 05            [ 1]    3 	jrne bkslsh_tst
      000C7D A6 06            [ 1]  651 	ld a,#TK_LPAREN
      000C7F CC 0D C8         [ 2]  652 	jp token_char   	
      000C82                        653 bkslsh_tst: ; character token 
      000C82                        654 	_case '\',rparnt_tst
      000C82 A6 5C            [ 1]    1 	ld a,#'\' 
      000C84 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C86 26 16            [ 1]    3 	jrne rparnt_tst
      000C88 A6 04            [ 1]  655 	ld a,#TK_CHAR 
      000C8A F7               [ 1]  656 	ld (x),a 
      000C8B 5C               [ 1]  657 	incw x 
      000C8C 91 D6 00         [ 4]  658 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000C8F F7               [ 1]  659 	ld (x),a 
      000C90 5C               [ 1]  660 	incw x
      000C91 90 93            [ 1]  661 	ldw y,x 	 
      000C93 72 5C 00 01      [ 1]  662 	inc in  
      000C97 5F               [ 1]  663 	clrw x 
      000C98 97               [ 1]  664 	ld xl,a 
      000C99 A6 04            [ 1]  665 	ld a,#TK_CHAR 
      000C9B CC 0D CC         [ 2]  666 	jp token_exit 
      000C9E                        667 rparnt_tst:		
      000C9E                        668 	_case ')' colon_tst 
      000C9E A6 29            [ 1]    1 	ld a,#')' 
      000CA0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA2 26 05            [ 1]    3 	jrne colon_tst
      000CA4 A6 07            [ 1]  669 	ld a,#TK_RPAREN 
      000CA6 CC 0D C8         [ 2]  670 	jp token_char
      000CA9                        671 colon_tst:
      000CA9                        672 	_case ':' comma_tst 
      000CA9 A6 3A            [ 1]    1 	ld a,#':' 
      000CAB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CAD 26 05            [ 1]    3 	jrne comma_tst
      000CAF A6 09            [ 1]  673 	ld a,#TK_COLON 
      000CB1 CC 0D C8         [ 2]  674 	jp token_char  
      000CB4                        675 comma_tst:
      000CB4                        676 	_case COMMA semic_tst 
      000CB4 A6 2C            [ 1]    1 	ld a,#COMMA 
      000CB6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB8 26 05            [ 1]    3 	jrne semic_tst
      000CBA A6 08            [ 1]  677 	ld a,#TK_COMMA
      000CBC CC 0D C8         [ 2]  678 	jp token_char
      000CBF                        679 semic_tst:
      000CBF                        680 	_case SEMIC dash_tst
      000CBF A6 3B            [ 1]    1 	ld a,#SEMIC 
      000CC1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC3 26 05            [ 1]    3 	jrne dash_tst
      000CC5 A6 0A            [ 1]  681 	ld a,#TK_SEMIC 
      000CC7 CC 0D C8         [ 2]  682 	jp token_char 	
      000CCA                        683 dash_tst: 	
      000CCA                        684 	_case '-' at_tst 
      000CCA A6 2D            [ 1]    1 	ld a,#'-' 
      000CCC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CCE 26 05            [ 1]    3 	jrne at_tst
      000CD0 A6 11            [ 1]  685 	ld a,#TK_MINUS  
      000CD2 CC 0D C8         [ 2]  686 	jp token_char 
      000CD5                        687 at_tst:
      000CD5                        688 	_case '@' qmark_tst 
      000CD5 A6 40            [ 1]    1 	ld a,#'@' 
      000CD7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CD9 26 05            [ 1]    3 	jrne qmark_tst
      000CDB A6 05            [ 1]  689 	ld a,#TK_ARRAY 
      000CDD CC 0D C8         [ 2]  690 	jp token_char
      000CE0                        691 qmark_tst:
      000CE0                        692 	_case '?' tick_tst 
      000CE0 A6 3F            [ 1]    1 	ld a,#'?' 
      000CE2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE4 26 12            [ 1]    3 	jrne tick_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000CE6 A6 80            [ 1]  693 	ld a,#TK_CMD  
      000CE8 F7               [ 1]  694 	ld (x),a 
      000CE9 5C               [ 1]  695 	incw x 
      000CEA 90 93            [ 1]  696 	ldw y,x 
      000CEC AE 1D 31         [ 2]  697 	ldw x,#cmd_print
      000CEF 90 FF            [ 2]  698 	ldw (y),x 
      000CF1 72 A9 00 02      [ 2]  699 	addw y,#2
      000CF5 CC 0D CC         [ 2]  700 	jp token_exit
      000CF8                        701 tick_tst: ; comment 
      000CF8                        702 	_case TICK plus_tst 
      000CF8 A6 27            [ 1]    1 	ld a,#TICK 
      000CFA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CFC 26 2B            [ 1]    3 	jrne plus_tst
      000CFE A6 80            [ 1]  703 	ld a,#TK_CMD
      000D00 F7               [ 1]  704 	ld (x),a 
      000D01 5C               [ 1]  705 	incw x
      000D02 90 AE 1E 6C      [ 2]  706 	ldw y,#remark 
      000D06 FF               [ 2]  707 	ldw (x),y 
      000D07 1C 00 02         [ 2]  708 	addw x,#2  
      000D0A                        709 copy_comment:
      000D0A 90 AE 16 68      [ 2]  710 	ldw y,#tib 
      000D0E 72 B9 00 00      [ 2]  711 	addw y,in.w
      000D12 90 89            [ 2]  712 	pushw y 
      000D14 CD 10 CD         [ 4]  713 	call strcpy
      000D17 72 F2 01         [ 2]  714 	subw y,(1,sp)
      000D1A 90 5C            [ 1]  715 	incw y ; strlen+1 
      000D1C 17 01            [ 2]  716 	ldw (1,sp),y 
      000D1E 72 FB 01         [ 2]  717 	addw x,(1,sp) 
      000D21                        718 	_drop 2 
      000D21 5B 02            [ 2]    1     addw sp,#2 
      000D23 4F               [ 1]  719 	clr a 
      000D24 90 93            [ 1]  720 	ldw y,x 
      000D26 CC 0D CC         [ 2]  721 	jp token_exit 
      000D29                        722 plus_tst:
      000D29                        723 	_case '+' star_tst 
      000D29 A6 2B            [ 1]    1 	ld a,#'+' 
      000D2B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D2D 26 05            [ 1]    3 	jrne star_tst
      000D2F A6 10            [ 1]  724 	ld a,#TK_PLUS  
      000D31 CC 0D C8         [ 2]  725 	jp token_char 
      000D34                        726 star_tst:
      000D34                        727 	_case '*' slash_tst 
      000D34 A6 2A            [ 1]    1 	ld a,#'*' 
      000D36 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D38 26 05            [ 1]    3 	jrne slash_tst
      000D3A A6 20            [ 1]  728 	ld a,#TK_MULT 
      000D3C CC 0D C8         [ 2]  729 	jp token_char 
      000D3F                        730 slash_tst: 
      000D3F                        731 	_case '/' prcnt_tst 
      000D3F A6 2F            [ 1]    1 	ld a,#'/' 
      000D41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D43 26 05            [ 1]    3 	jrne prcnt_tst
      000D45 A6 21            [ 1]  732 	ld a,#TK_DIV 
      000D47 CC 0D C8         [ 2]  733 	jp token_char 
      000D4A                        734 prcnt_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000D4A                        735 	_case '%' eql_tst 
      000D4A A6 25            [ 1]    1 	ld a,#'%' 
      000D4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D4E 26 05            [ 1]    3 	jrne eql_tst
      000D50 A6 22            [ 1]  736 	ld a,#TK_MOD
      000D52 CC 0D C8         [ 2]  737 	jp token_char  
                                    738 ; 1 or 2 character tokens 	
      000D55                        739 eql_tst:
      000D55                        740 	_case '=' gt_tst 		
      000D55 A6 3D            [ 1]    1 	ld a,#'=' 
      000D57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D59 26 05            [ 1]    3 	jrne gt_tst
      000D5B A6 32            [ 1]  741 	ld a,#TK_EQUAL
      000D5D CC 0D C8         [ 2]  742 	jp token_char 
      000D60                        743 gt_tst:
      000D60                        744 	_case '>' lt_tst 
      000D60 A6 3E            [ 1]    1 	ld a,#'>' 
      000D62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D64 26 23            [ 1]    3 	jrne lt_tst
      000D66 A6 31            [ 1]  745 	ld a,#TK_GT 
      000D68 6B 02            [ 1]  746 	ld (ATTRIB,sp),a 
      000D6A 91 D6 00         [ 4]  747 	ld a,([in.w],y)
      000D6D 72 5C 00 01      [ 1]  748 	inc in 
      000D71 A1 3D            [ 1]  749 	cp a,#'=
      000D73 26 04            [ 1]  750 	jrne 1$
      000D75 A6 33            [ 1]  751 	ld a,#TK_GE 
      000D77 20 4F            [ 2]  752 	jra token_char  
      000D79 A1 3C            [ 1]  753 1$: cp a,#'<
      000D7B 26 04            [ 1]  754 	jrne 2$
      000D7D A6 35            [ 1]  755 	ld a,#TK_NE 
      000D7F 20 47            [ 2]  756 	jra token_char 
      000D81 72 5A 00 01      [ 1]  757 2$: dec in
      000D85 7B 02            [ 1]  758 	ld a,(ATTRIB,sp)
      000D87 20 3F            [ 2]  759 	jra token_char 	 
      000D89                        760 lt_tst:
      000D89                        761 	_case '<' other
      000D89 A6 3C            [ 1]    1 	ld a,#'<' 
      000D8B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D8D 26 23            [ 1]    3 	jrne other
      000D8F A6 34            [ 1]  762 	ld a,#TK_LT 
      000D91 6B 02            [ 1]  763 	ld (ATTRIB,sp),a 
      000D93 91 D6 00         [ 4]  764 	ld a,([in.w],y)
      000D96 72 5C 00 01      [ 1]  765 	inc in 
      000D9A A1 3D            [ 1]  766 	cp a,#'=
      000D9C 26 04            [ 1]  767 	jrne 1$
      000D9E A6 36            [ 1]  768 	ld a,#TK_LE 
      000DA0 20 26            [ 2]  769 	jra token_char 
      000DA2 A1 3E            [ 1]  770 1$: cp a,#'>
      000DA4 26 04            [ 1]  771 	jrne 2$
      000DA6 A6 35            [ 1]  772 	ld a,#TK_NE 
      000DA8 20 1E            [ 2]  773 	jra token_char 
      000DAA 72 5A 00 01      [ 1]  774 2$: dec in 
      000DAE 7B 02            [ 1]  775 	ld a,(ATTRIB,sp)
      000DB0 20 16            [ 2]  776 	jra token_char 	
      000DB2                        777 other: ; not a special character 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000DB2 7B 01            [ 1]  778 	ld a,(TCHAR,sp)
      000DB4 CD 0B 55         [ 4]  779 	call is_alpha 
      000DB7 25 03            [ 1]  780 	jrc 30$ 
      000DB9 CC 13 B5         [ 2]  781 	jp syntax_error 
      000DBC                        782 30$: 
      000DBC CD 0B 9B         [ 4]  783 	call parse_keyword
      000DBF A3 1E 6C         [ 2]  784 	cpw x,#remark 
      000DC2 26 08            [ 1]  785 	jrne token_exit 
      000DC4 93               [ 1]  786 	ldw x,y 
      000DC5 CC 0D 0A         [ 2]  787 	jp copy_comment 
      000DC8                        788 token_char:
      000DC8 F7               [ 1]  789 	ld (x),a 
      000DC9 5C               [ 1]  790 	incw x
      000DCA 90 93            [ 1]  791 	ldw y,x 
      000DCC                        792 token_exit:
      000DCC                        793 	_drop VSIZE 
      000DCC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DCE 81               [ 4]  794 	ret
                                    795 
                                    796 
                                    797 ;-----------------------------------
                                    798 ; create token list fromm text line 
                                    799 ; save this list in pad buffer 
                                    800 ;  compiled line format: 
                                    801 ;    line_no  2 bytes {0...32767}
                                    802 ;    line length    1 byte  
                                    803 ;    tokens list  variable length 
                                    804 ;   
                                    805 ; input:
                                    806 ;   none
                                    807 ; modified variables:
                                    808 ;   basicptr     token list buffer address 
                                    809 ;   in.w  		 3|count, i.e. index in buffer
                                    810 ;   count        length of line | 0  
                                    811 ;-----------------------------------
                           000001   812 	XSAVE=1
                           000002   813 	VSIZE=2
      000DCF                        814 compile::
      000DCF 90 89            [ 2]  815 	pushw y ; preserve xstack pointer 
      000DD1                        816 	_vars VSIZE 
      000DD1 52 02            [ 2]    1     sub sp,#VSIZE 
      000DD3 55 00 1B 00 04   [ 1]  817 	mov basicptr,txtbgn
      000DD8 72 1A 00 22      [ 1]  818 	bset flags,#FCOMP 
      000DDC A6 00            [ 1]  819 	ld a,#0
      000DDE AE 00 00         [ 2]  820 	ldw x,#0
      000DE1 CF 16 B8         [ 2]  821 	ldw pad,x ; destination buffer 
      000DE4 C7 16 BA         [ 1]  822 	ld pad+2,a ; count 
      000DE7 AE 16 BB         [ 2]  823 	ldw x,#pad+3
      000DEA 72 5F 00 01      [ 1]  824 	clr in 
      000DEE CD 0C 1B         [ 4]  825 	call get_token
      000DF1 A1 84            [ 1]  826 	cp a,#TK_INTGR
      000DF3 26 11            [ 1]  827 	jrne 2$
      000DF5 A3 00 01         [ 2]  828 	cpw x,#1 
      000DF8 2A 05            [ 1]  829 	jrpl 1$
      000DFA A6 0A            [ 1]  830 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000DFC CC 13 B7         [ 2]  831 	jp tb_error
      000DFF CF 16 B8         [ 2]  832 1$:	ldw pad,x ; line# 
      000E02 90 AE 16 BB      [ 2]  833 	ldw y,#pad+3 
      000E06 90 A3 17 38      [ 2]  834 2$:	cpw y,#xstack_full 
      000E0A 25 05            [ 1]  835 	jrult 3$
      000E0C A6 0F            [ 1]  836 	ld a,#ERR_BUF_FULL 
      000E0E CC 13 B7         [ 2]  837 	jp tb_error 
      000E11                        838 3$:	
      000E11 93               [ 1]  839 	ldw x,y 
      000E12 CD 0C 1B         [ 4]  840 	call get_token 
      000E15 A1 00            [ 1]  841 	cp a,#TK_NONE 
      000E17 26 ED            [ 1]  842 	jrne 2$ 
                                    843 ; compilation completed  
      000E19 72 A2 16 B8      [ 2]  844 	subw y,#pad ; compiled line length 
      000E1D 90 9F            [ 1]  845     ld a,yl
      000E1F AE 16 B8         [ 2]  846 	ldw x,#pad 
      000E22 CF 00 19         [ 2]  847 	ldw ptr16,x 
      000E25 E7 02            [ 1]  848 	ld (2,x),a 
      000E27 FE               [ 2]  849 	ldw x,(x)  ; line# 
      000E28 27 09            [ 1]  850 	jreq 10$
      000E2A CD 0A 02         [ 4]  851 	call insert_line
      000E2D 72 5F 00 02      [ 1]  852 	clr  count 
      000E31 20 0F            [ 2]  853 	jra  11$ 
      000E33                        854 10$: ; line# is zero 
      000E33 CE 00 19         [ 2]  855 	ldw x,ptr16  
      000E36 CF 00 04         [ 2]  856 	ldw basicptr,x 
      000E39 E6 02            [ 1]  857 	ld a,(2,x)
      000E3B C7 00 02         [ 1]  858 	ld count,a 
      000E3E 35 03 00 01      [ 1]  859 	mov in,#3 
      000E42                        860 11$:
      000E42                        861 	_drop VSIZE 
      000E42 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E44 72 1B 00 22      [ 1]  862 	bres flags,#FCOMP 
      000E48 90 85            [ 2]  863 	popw y 
      000E4A 81               [ 4]  864 	ret 
                                    865 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      000E4B                         48 cpy_cmd_name:
      000E4B 5D               [ 2]   49 	tnzw x 
      000E4C 27 14            [ 1]   50 	jreq 10$
      000E4E F6               [ 1]   51 	ld a,(x)
      000E4F 5C               [ 1]   52 	incw x
      000E50 A4 0F            [ 1]   53 	and a,#15  
      000E52 88               [ 1]   54 	push a 
      000E53 0D 01            [ 1]   55     tnz (1,sp) 
      000E55 27 0A            [ 1]   56 	jreq 9$
      000E57 F6               [ 1]   57 1$:	ld a,(x)
      000E58 90 F7            [ 1]   58 	ld (y),a  
      000E5A 5C               [ 1]   59 	incw x
      000E5B 90 5C            [ 1]   60 	incw y 
      000E5D 0A 01            [ 1]   61 	dec (1,sp)	 
      000E5F 26 F6            [ 1]   62 	jrne 1$
      000E61 84               [ 1]   63 9$: pop a 
      000E62                         64 10$: 
      000E62 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      000E63                         75 add_space:
      000E63 90 5A            [ 2]   76 	decw y 
      000E65 90 F6            [ 1]   77 	ld a,(y)
      000E67 90 5C            [ 1]   78 	incw y
      000E69 A1 29            [ 1]   79 	cp a,#') 
      000E6B 27 05            [ 1]   80 	jreq 0$
      000E6D CD 0B 6F         [ 4]   81 	call is_alnum 
      000E70 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      000E72                         83 0$: 
      000E72 A6 20            [ 1]   84 	ld a,#SPACE 
      000E74 90 F7            [ 1]   85 	ld (y),a 
      000E76 90 5C            [ 1]   86 	incw y 
      000E78 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  by  padding left  
                                     92 ;  with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      width  
                                     96 ; output:
                                     97 ;   A      strlen
                                     98 ;   X      ajusted
                                     99 ;--------------------------
                           000001   100 	WIDTH=1 ; column width 
                           000002   101 	SLEN=2  ; string length 
                           000002   102 	VSIZE=2 
      000E79                        103 right_align::
      000E79                        104 	_vars VSIZE 
      000E79 52 02            [ 2]    1     sub sp,#VSIZE 
      000E7B 6B 01            [ 1]  105 	ld (WIDTH,sp),a 
      000E7D CD 10 B1         [ 4]  106 	call strlen 
      000E80 6B 02            [ 1]  107 0$:	ld (SLEN,sp),a  
      000E82 11 01            [ 1]  108 	cp a,(WIDTH,sp) 
      000E84 2A 09            [ 1]  109 	jrpl 1$
      000E86 5A               [ 2]  110 	decw x
      000E87 A6 20            [ 1]  111 	ld a,#SPACE 
      000E89 F7               [ 1]  112 	ld (x),a  
      000E8A 7B 02            [ 1]  113 	ld a,(SLEN,sp)
      000E8C 4C               [ 1]  114 	inc a 
      000E8D 20 F1            [ 2]  115 	jra 0$ 
      000E8F 7B 02            [ 1]  116 1$: ld a,(SLEN,sp)	
      000E91                        117 	_drop VSIZE 
      000E91 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E93 81               [ 4]  118 	ret 
                                    119 
                                    120 ;--------------------------
                                    121 ; print TK_QSTR
                                    122 ; converting control character
                                    123 ; to backslash sequence
                                    124 ; input:
                                    125 ;   X        char *
                                    126 ;   Y        dest. buffer 
                                    127 ; output:
                                    128 ;   X        moved forward 
                                    129 ;   Y        moved forward 
                                    130 ;-----------------------------
      000E94                        131 cpy_quote:
      000E94 A6 22            [ 1]  132 	ld a,#'"
      000E96 90 F7            [ 1]  133 	ld (y),a 
      000E98 90 5C            [ 1]  134 	incw y 
      000E9A 89               [ 2]  135 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      000E9B CD 15 28         [ 4]  136 	call skip_string 
      000E9E 85               [ 2]  137 	popw x 
      000E9F F6               [ 1]  138 1$:	ld a,(x)
      000EA0 27 30            [ 1]  139 	jreq 9$
      000EA2 5C               [ 1]  140 	incw x 
      000EA3 A1 20            [ 1]  141 	cp a,#SPACE 
      000EA5 25 0E            [ 1]  142 	jrult 3$
      000EA7 90 F7            [ 1]  143 	ld (y),a
      000EA9 90 5C            [ 1]  144 	incw y 
      000EAB A1 5C            [ 1]  145 	cp a,#'\ 
      000EAD 26 F0            [ 1]  146 	jrne 1$ 
      000EAF                        147 2$:
      000EAF 90 F7            [ 1]  148 	ld (y),a
      000EB1 90 5C            [ 1]  149 	incw y  
      000EB3 20 EA            [ 2]  150 	jra 1$
      000EB5 88               [ 1]  151 3$: push a 
      000EB6 A6 5C            [ 1]  152 	ld a,#'\
      000EB8 90 F7            [ 1]  153 	ld (y),a 
      000EBA 90 5C            [ 1]  154 	incw y  
      000EBC 84               [ 1]  155 	pop a 
      000EBD A0 07            [ 1]  156 	sub a,#7
      000EBF C7 00 0E         [ 1]  157 	ld acc8,a 
      000EC2 72 5F 00 0D      [ 1]  158 	clr acc16
      000EC6 89               [ 2]  159 	pushw x
      000EC7 AE 0A BD         [ 2]  160 	ldw x,#escaped 
      000ECA 72 BB 00 0D      [ 2]  161 	addw x,acc16 
      000ECE F6               [ 1]  162 	ld a,(x)
      000ECF 85               [ 2]  163 	popw x
      000ED0 20 DD            [ 2]  164 	jra 2$
      000ED2 A6 22            [ 1]  165 9$: ld a,#'"
      000ED4 90 F7            [ 1]  166 	ld (y),a 
      000ED6 90 5C            [ 1]  167 	incw y  
      000ED8 5C               [ 1]  168 	incw x 
      000ED9 81               [ 4]  169 	ret
                                    170 
                                    171 ;--------------------------
                                    172 ; return variable name 
                                    173 ; from its address.
                                    174 ; input:
                                    175 ;   X    variable address
                                    176 ; output:
                                    177 ;   A     variable letter
                                    178 ;--------------------------
      000EDA                        179 var_name::
      000EDA 1D 00 34         [ 2]  180 		subw x,#vars 
      000EDD A6 03            [ 1]  181 		ld a,#3
      000EDF 62               [ 2]  182 		div x,a 
      000EE0 9F               [ 1]  183 		ld a,xl 
      000EE1 AB 41            [ 1]  184 		add a,#'A 
      000EE3 81               [ 4]  185 		ret 
                                    186 
                                    187 
                                    188 
                                    189 ;-------------------------------------
                                    190 ; decompile tokens list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    191 ; to original text line 
                                    192 ; input:
                                    193 ;   [basicptr]  pointer at line 
                                    194 ;   Y           output buffer
                                    195 ; output:
                                    196 ;   A           length 
                                    197 ;   Y           after string  
                                    198 ;------------------------------------
                           000001   199 	BASE_SAV=1
                           000002   200 	STR=2
                           000003   201 	VSIZE=3 
      000EE4                        202 decompile::
      000EE4                        203 	_vars VSIZE
      000EE4 52 03            [ 2]    1     sub sp,#VSIZE 
      000EE6 C6 00 0A         [ 1]  204 	ld a,base
      000EE9 6B 01            [ 1]  205 	ld (BASE_SAV,sp),a  
      000EEB 17 02            [ 2]  206 	ldw (STR,sp),y   
      000EED 72 CE 00 04      [ 5]  207 	ldw x,[basicptr] ; line number 
      000EF1 35 0A 00 0A      [ 1]  208 	mov base,#10
      000EF5 72 5F 00 0C      [ 1]  209 	clr acc24 
      000EF9 CF 00 0D         [ 2]  210 	ldw acc16,x
      000EFC 4F               [ 1]  211 	clr a ; unsigned conversion 
      000EFD CD 15 8C         [ 4]  212 	call itoa  
      000F00 A6 05            [ 1]  213 	ld a,#5 
      000F02 CD 0E 79         [ 4]  214 	call right_align 
      000F05 88               [ 1]  215 	push a 
      000F06 90 93            [ 1]  216 1$:	ldw y,x ; source
      000F08 1E 03            [ 2]  217 	ldw x,(STR+1,sp) ; destination
      000F0A CD 10 CD         [ 4]  218 	call strcpy 
      000F0D 90 5F            [ 1]  219 	clrw y 
      000F0F 84               [ 1]  220 	pop a 
      000F10 90 97            [ 1]  221 	ld yl,a 
      000F12 72 F9 02         [ 2]  222 	addw y,(STR,sp)
      000F15 A6 20            [ 1]  223 	ld a,#SPACE 
      000F17 90 F7            [ 1]  224 	ld (y),a 
      000F19 90 5C            [ 1]  225 	incw y 
      000F1B AE 00 03         [ 2]  226 	ldw x,#3
      000F1E CF 00 00         [ 2]  227 	ldw in.w,x 
      000F21                        228 decomp_loop:
      000F21 90 89            [ 2]  229 	pushw y
      000F23 CD 15 0F         [ 4]  230 	call next_token 
      000F26 90 85            [ 2]  231 	popw y 
      000F28 4D               [ 1]  232 	tnz a  
      000F29 26 03            [ 1]  233 	jrne 1$
      000F2B CC 10 46         [ 2]  234 	jp 20$
      000F2E 2B 03            [ 1]  235 1$:	jrmi 2$
      000F30 CC 0F BF         [ 2]  236 	jp 6$
      000F33                        237 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      000F33 A1 85            [ 1]  238 	cp a,#TK_VAR 
      000F35 26 0F            [ 1]  239 	jrne 3$
                                    240 ;; TK_VAR 
      000F37 CD 0E 63         [ 4]  241 	call add_space
      000F3A CD 15 37         [ 4]  242 	call get_addr   
      000F3D CD 0E DA         [ 4]  243 	call var_name
      000F40 90 F7            [ 1]  244 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      000F42 90 5C            [ 1]  245 	incw y  
      000F44 20 DB            [ 2]  246 	jra decomp_loop
      000F46                        247 3$:
      000F46 A1 84            [ 1]  248 	cp a,#TK_INTGR
      000F48 26 26            [ 1]  249 	jrne 4$
                                    250 ;; TK_INTGR
      000F4A CD 15 41         [ 4]  251 	call get_int24 
      000F4D C7 00 0C         [ 1]  252 	ld acc24,a 
      000F50 CF 00 0D         [ 2]  253 	ldw acc16,x 
      000F53 CD 0E 63         [ 4]  254 	call add_space
      000F56 90 89            [ 2]  255 	pushw y 
      000F58 A6 FF            [ 1]  256 	ld a,#255 ; signed conversion 
      000F5A CD 15 8C         [ 4]  257 	call itoa  
      000F5D 16 01            [ 2]  258 	ldw y,(1,sp) 
      000F5F 88               [ 1]  259 	push a 
      000F60 51               [ 1]  260 	exgw x,y 
      000F61 CD 10 CD         [ 4]  261 	call strcpy 
      000F64 90 5F            [ 1]  262 	clrw y
      000F66 84               [ 1]  263 	pop a  
      000F67 90 97            [ 1]  264 	ld yl,a 
      000F69 72 F9 01         [ 2]  265 	addw y,(1,sp)
      000F6C                        266 	_drop 2 
      000F6C 5B 02            [ 2]    1     addw sp,#2 
      000F6E 20 B1            [ 2]  267 	jra decomp_loop
      000F70                        268 4$: ; dictionary keyword
      000F70 A1 87            [ 1]  269 	cp a,#TK_NOT 
      000F72 24 39            [ 1]  270 	jruge 50$ 
      000F74 FE               [ 2]  271 	ldw x,(x)
      000F75 72 5C 00 01      [ 1]  272 	inc in 
      000F79 72 5C 00 01      [ 1]  273 	inc in 
      000F7D A3 1E 6C         [ 2]  274 	cpw x,#remark 
      000F80 26 23            [ 1]  275 	jrne 5$
      000F82 CE 00 04         [ 2]  276 	ldw x,basicptr 
                                    277 ; copy comment to buffer 
      000F85 CD 0E 63         [ 4]  278 	call add_space
      000F88 A6 27            [ 1]  279 	ld a,#''
      000F8A 90 F7            [ 1]  280 	ld (y),a 
      000F8C 90 5C            [ 1]  281 	incw y 
      000F8E                        282 46$:
      000F8E 72 D6 00 00      [ 4]  283 	ld a,([in.w],x)
      000F92 72 5C 00 01      [ 1]  284 	inc in  
      000F96 90 F7            [ 1]  285 	ld (y),a 
      000F98 90 5C            [ 1]  286 	incw y 
      000F9A C6 00 01         [ 1]  287 	ld a,in 
      000F9D C1 00 02         [ 1]  288 	cp a,count 
      000FA0 2B EC            [ 1]  289 	jrmi 46$
      000FA2 CC 10 46         [ 2]  290 	jp 20$  
      000FA5 A3 1A 04         [ 2]  291 5$: cpw x,#let  
      000FA8 26 05            [ 1]  292 	jrne 54$
      000FAA CC 0F 21         [ 2]  293 	jp decomp_loop ; down display LET
      000FAD                        294 50$:
      000FAD 5F               [ 1]  295 	clrw x 
      000FAE 97               [ 1]  296 	ld xl,a 
      000FAF                        297 54$: ; insert command name 
      000FAF CD 0E 63         [ 4]  298 	call add_space  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      000FB2 90 89            [ 2]  299 	pushw y
      000FB4 CD 10 7D         [ 4]  300 	call cmd_name
      000FB7 90 85            [ 2]  301 	popw y 
      000FB9 CD 0E 4B         [ 4]  302 	call cpy_cmd_name
      000FBC CC 0F 21         [ 2]  303 	jp decomp_loop 
      000FBF                        304 6$:
                                    305 ; label?
      000FBF A1 03            [ 1]  306 	cp a,#TK_LABEL 
      000FC1 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      000FC3 A6 20            [ 1]  309 	ld a,#32 
      000FC5 90 F7            [ 1]  310 	ld (y),a 
      000FC7 90 5C            [ 1]  311 	incw y 
      000FC9                        312 61$:
      000FC9 89               [ 2]  313 	pushw x 
      000FCA CD 15 28         [ 4]  314 	call skip_string 
      000FCD 85               [ 2]  315 	popw x 
      000FCE                        316 62$:	
      000FCE F6               [ 1]  317 	ld a,(x)
      000FCF 27 07            [ 1]  318 	jreq 63$ 
      000FD1 5C               [ 1]  319 	incw x  
      000FD2 90 F7            [ 1]  320 	ld (y),a 
      000FD4 90 5C            [ 1]  321 	incw y 
      000FD6 20 F6            [ 2]  322 	jra 62$ 
      000FD8                        323 63$: 
      000FD8 A6 20            [ 1]  324 	ld a,#32 
      000FDA 90 F7            [ 1]  325 	ld (y),a 
      000FDC 90 5C            [ 1]  326 	incw y 
      000FDE CC 0F 21         [ 2]  327 	jp decomp_loop
      000FE1                        328 64$:
      000FE1 A1 02            [ 1]  329 	cp a,#TK_QSTR 
      000FE3 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      000FE5 CD 0E 63         [ 4]  332 	call add_space
      000FE8 CD 0E 94         [ 4]  333 	call cpy_quote  
      000FEB CC 0F 21         [ 2]  334 	jp decomp_loop
      000FEE                        335 7$:
      000FEE A1 04            [ 1]  336 	cp a,#TK_CHAR 
      000FF0 26 15            [ 1]  337 	jrne 9$
                                    338 ;; TK_CHAR
      000FF2 CD 0E 63         [ 4]  339 	call add_space 
      000FF5 A6 5C            [ 1]  340 	ld a,#'\ 
      000FF7 90 F7            [ 1]  341 	ld (y),a 
      000FF9 90 5C            [ 1]  342 	incw y
      000FFB F6               [ 1]  343 	ld a,(x)
      000FFC 72 5C 00 01      [ 1]  344 	inc in  
      001000                        345 8$:
      001000 90 F7            [ 1]  346 	ld (y),a 
      001002 90 5C            [ 1]  347 	incw y 
      001004                        348 82$:
      001004 CC 0F 21         [ 2]  349 	jp decomp_loop
      001007                        350 9$: 
      001007 A1 0A            [ 1]  351 	cp a,#TK_SEMIC 
      001009 22 0A            [ 1]  352 	jrugt 10$ 
      00100B A0 05            [ 1]  353 	sub a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00100D 5F               [ 1]  354 	clrw x 
      00100E 97               [ 1]  355 	ld xl,a
      00100F 1C 10 57         [ 2]  356 	addw x,#single_char 
      001012 F6               [ 1]  357 	ld a,(x)
      001013 20 EB            [ 2]  358 	jra 8$ 
      001015                        359 10$: 
      001015 A1 11            [ 1]  360 	cp a,#TK_MINUS 
      001017 22 0A            [ 1]  361 	jrugt 11$
      001019 A0 10            [ 1]  362 	sub a,#TK_PLUS 
      00101B 5F               [ 1]  363 	clrw x 
      00101C 97               [ 1]  364 	ld xl,a 
      00101D 1C 10 5D         [ 2]  365 	addw x,#add_char 
      001020 F6               [ 1]  366 	ld a,(x)
      001021 20 DD            [ 2]  367 	jra 8$
      001023                        368 11$:
      001023 A1 22            [ 1]  369     cp a,#TK_MOD 
      001025 22 0A            [ 1]  370 	jrugt 12$
      001027 A0 20            [ 1]  371 	sub a,#TK_MULT
      001029 5F               [ 1]  372 	clrw x 
      00102A 97               [ 1]  373 	ld xl,a 
      00102B 1C 10 5F         [ 2]  374 	addw x,#mul_char
      00102E F6               [ 1]  375 	ld a,(x)
      00102F 20 CF            [ 2]  376 	jra 8$
      001031                        377 12$:
      001031 A0 31            [ 1]  378 	sub a,#TK_GT  
      001033 48               [ 1]  379 	sll a 
      001034 5F               [ 1]  380 	clrw x 
      001035 97               [ 1]  381 	ld xl,a 
      001036 1C 10 62         [ 2]  382 	addw x,#relop_str 
      001039 FE               [ 2]  383 	ldw x,(x)
      00103A F6               [ 1]  384 	ld a,(x)
      00103B 5C               [ 1]  385 	incw x 
      00103C 90 F7            [ 1]  386 	ld (y),a
      00103E 90 5C            [ 1]  387 	incw y 
      001040 F6               [ 1]  388 	ld a,(x)
      001041 26 BD            [ 1]  389 	jrne 8$
      001043 CC 0F 21         [ 2]  390 	jp decomp_loop 
      001046                        391 20$: 
      001046 90 7F            [ 1]  392 	clr (y)
      001048 1E 02            [ 2]  393 	ldw x,(STR,sp)
      00104A 7B 01            [ 1]  394 	ld a,(BASE_SAV,sp)
      00104C C7 00 0A         [ 1]  395 	ld base,a 
      00104F 72 F2 02         [ 2]  396 	subw y,(STR,sp) 
      001052 90 9F            [ 1]  397 	ld a,yl 
      001054                        398 	_drop VSIZE 
      001054 5B 03            [ 2]    1     addw sp,#VSIZE 
      001056 81               [ 4]  399 	ret 
                                    400 
      001057 40 28 29 2C 3A 3B      401 single_char: .byte '@','(',')',',',':',';' 
      00105D 2B 2D                  402 add_char: .byte '+','-'
      00105F 2A 2F 25               403 mul_char: .byte '*','/','%'
      001062 10 6E 10 70 10 72 10   404 relop_str: .word gt,equal,ge,lt,ne,le 
             75 10 7A 10 77
      00106E 3E 00                  405 gt: .asciz ">"
      001070 3D 00                  406 equal: .asciz "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001072 3E 3D 00               407 ge: .asciz ">="
      001075 3C 00                  408 lt: .asciz "<"
      001077 3C 3D 00               409 le: .asciz "<="
      00107A 3C 3E 00               410 ne:  .asciz "<>"
                                    411 
                                    412 ;----------------------------------
                                    413 ; search in kword_dict name
                                    414 ; from its execution address 
                                    415 ; input:
                                    416 ;   X       	routine_address  
                                    417 ; output:
                                    418 ;   X 			cstr*  | 0 
                                    419 ;--------------------------------
                           000001   420 	CODE_ADDR=1 
                           000003   421 	LINK=3 
                           000004   422 	VSIZE=4
      00107D                        423 cmd_name:
      00107D                        424 	_vars VSIZE 
      00107D 52 04            [ 2]    1     sub sp,#VSIZE 
      00107F 72 5F 00 0D      [ 1]  425 	clr acc16 
      001083 1F 01            [ 2]  426 	ldw (CODE_ADDR,sp),x  
      001085 AE 33 9F         [ 2]  427 	ldw x,#kword_dict	
      001088 1F 03            [ 2]  428 1$:	ldw (LINK,sp),x
      00108A E6 02            [ 1]  429 	ld a,(2,x)
      00108C A4 0F            [ 1]  430 	and a,#15 
      00108E C7 00 0E         [ 1]  431 	ld acc8,a 
      001091 1C 00 03         [ 2]  432 	addw x,#3
      001094 72 BB 00 0D      [ 2]  433 	addw x,acc16
      001098 FE               [ 2]  434 	ldw x,(x) ; code address   
      001099 13 01            [ 2]  435 	cpw x,(CODE_ADDR,sp)
      00109B 27 0C            [ 1]  436 	jreq 2$
      00109D 1E 03            [ 2]  437 	ldw x,(LINK,sp)
      00109F FE               [ 2]  438 	ldw x,(x) 
      0010A0 1D 00 02         [ 2]  439 	subw x,#2  
      0010A3 26 E3            [ 1]  440 	jrne 1$
      0010A5 4F               [ 1]  441 	clr a 
      0010A6 5F               [ 1]  442 	clrw x 
      0010A7 20 05            [ 2]  443 	jra 9$
      0010A9 1E 03            [ 2]  444 2$: ldw x,(LINK,sp)
      0010AB 1C 00 02         [ 2]  445 	addw x,#2 	
      0010AE                        446 9$:	_drop VSIZE
      0010AE 5B 04            [ 2]    1     addw sp,#VSIZE 
      0010B0 81               [ 4]  447 	ret
                                    448 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000000     5 DEBUG=0 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
                                     64 ; keep the following 3 variables in this order 
      000000                         65 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         66 in::    .blkb 1 ; low byte of in.w 
      000002                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000003                         68 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000004                         69 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         70 data_ptr:  .blkw 1  ; point to DATA address
      000008                         71 data_ofs:  .blkb 1  ; index to next data item 
      000009                         72 data_len:  .blkb 1  ; length of data line 
      00000A                         73 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         74 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         75 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         76 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         77 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         78 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         79 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         80 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         81 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         82 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         83 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         84 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         85 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         86 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         87 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         88 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         89 flags:: .blkb 1 ; various boolean flags
      000023                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000025                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002D                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002E                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      00002F                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000031                         95 dvar_end:: .blkw 1 ; DIM variables end address 
      000033                         96 chain_level: .blkb 1 ; increment for each CHAIN command 
                                     97 ; 24 bits integer variables 
      000034                         98 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     99 
                                    100 	.area BTXT (ABS)
      00008C                        101 	.org 0x8C  
                                    102 ; keep 'free_ram' as last variable 
                                    103 ; basic code compiled here. 
      00008C                        104 rsign: .blkw 1 ; "TB" 
      00008E                        105 rsize: .blkw 1 ; code size 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      000090                        106 free_ram: ; from here RAM free for BASIC text 
                                    107 
                                    108 	.area CODE 
                                    109 
                                    110 
                                    111 ;-------------------------------------
                                    112 ; retrun string length
                                    113 ; input:
                                    114 ;   X         .asciz  pointer 
                                    115 ; output:
                                    116 ;   X         not affected 
                                    117 ;   A         length 
                                    118 ;-------------------------------------
      0010B1                        119 strlen::
      0010B1 89               [ 2]  120 	pushw x 
      0010B2 4F               [ 1]  121 	clr a
      0010B3 7D               [ 1]  122 1$:	tnz (x) 
      0010B4 27 04            [ 1]  123 	jreq 9$ 
      0010B6 4C               [ 1]  124 	inc a 
      0010B7 5C               [ 1]  125 	incw x 
      0010B8 20 F9            [ 2]  126 	jra 1$ 
      0010BA 85               [ 2]  127 9$:	popw x 
      0010BB 81               [ 4]  128 	ret 
                                    129 
                                    130 ;------------------------------------
                                    131 ; compare 2 strings
                                    132 ; input:
                                    133 ;   X 		char* first string 
                                    134 ;   Y       char* second string 
                                    135 ; output:
                                    136 ;   A 		0 not == |1 ==  
                                    137 ;-------------------------------------
      0010BC                        138 strcmp:
      0010BC F6               [ 1]  139 	ld a,(x)
      0010BD 27 0B            [ 1]  140 	jreq 5$ 
      0010BF 90 F1            [ 1]  141 	cp a,(y) 
      0010C1 26 05            [ 1]  142 	jrne 4$ 
      0010C3 5C               [ 1]  143 	incw x 
      0010C4 90 5C            [ 1]  144 	incw y 
      0010C6 20 F4            [ 2]  145 	jra strcmp 
      0010C8                        146 4$: ; not same  
      0010C8 4F               [ 1]  147 	clr a 
      0010C9 81               [ 4]  148 	ret 
      0010CA                        149 5$: ; same 
      0010CA A6 01            [ 1]  150 	ld a,#1 
      0010CC 81               [ 4]  151 	ret 
                                    152 
                                    153 
                                    154 ;---------------------------------------
                                    155 ;  copy src to dest 
                                    156 ; input:
                                    157 ;   X 		dest 
                                    158 ;   Y 		src 
                                    159 ; output: 
                                    160 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                    161 ;----------------------------------
      0010CD                        162 strcpy::
      0010CD 88               [ 1]  163 	push a 
      0010CE 89               [ 2]  164 	pushw x 
      0010CF 90 F6            [ 1]  165 1$: ld a,(y)
      0010D1 27 06            [ 1]  166 	jreq 9$ 
      0010D3 F7               [ 1]  167 	ld (x),a 
      0010D4 5C               [ 1]  168 	incw x 
      0010D5 90 5C            [ 1]  169 	incw y 
      0010D7 20 F6            [ 2]  170 	jra 1$ 
      0010D9 7F               [ 1]  171 9$:	clr (x)
      0010DA 85               [ 2]  172 	popw x 
      0010DB 84               [ 1]  173 	pop a 
      0010DC 81               [ 4]  174 	ret 
                                    175 
                                    176 ;---------------------------------------
                                    177 ; move memory block 
                                    178 ; input:
                                    179 ;   X 		destination 
                                    180 ;   Y 	    source 
                                    181 ;   acc16	bytes count 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;--------------------------------------
                           000001   185 	INCR=1 ; incrament high byte 
                           000002   186 	LB=2 ; increment low byte 
                           000002   187 	VSIZE=2
      0010DD                        188 move::
      0010DD 88               [ 1]  189 	push a 
      0010DE                        190 	_vars VSIZE 
      0010DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0010E0 0F 01            [ 1]  191 	clr (INCR,sp)
      0010E2 0F 02            [ 1]  192 	clr (LB,sp)
      0010E4 90 89            [ 2]  193 	pushw y 
      0010E6 13 01            [ 2]  194 	cpw x,(1,sp) ; compare DEST to SRC 
      0010E8 90 85            [ 2]  195 	popw y 
      0010EA 27 31            [ 1]  196 	jreq move_exit ; x==y 
      0010EC 2B 0E            [ 1]  197 	jrmi move_down
      0010EE                        198 move_up: ; start from top address with incr=-1
      0010EE 72 BB 00 0D      [ 2]  199 	addw x,acc16
      0010F2 72 B9 00 0D      [ 2]  200 	addw y,acc16
      0010F6 03 01            [ 1]  201 	cpl (INCR,sp)
      0010F8 03 02            [ 1]  202 	cpl (LB,sp)   ; increment = -1 
      0010FA 20 05            [ 2]  203 	jra move_loop  
      0010FC                        204 move_down: ; start from bottom address with incr=1 
      0010FC 5A               [ 2]  205     decw x 
      0010FD 90 5A            [ 2]  206 	decw y
      0010FF 0C 02            [ 1]  207 	inc (LB,sp) ; incr=1 
      001101                        208 move_loop:	
      001101 C6 00 0D         [ 1]  209     ld a, acc16 
      001104 CA 00 0E         [ 1]  210 	or a, acc8
      001107 27 14            [ 1]  211 	jreq move_exit 
      001109 72 FB 01         [ 2]  212 	addw x,(INCR,sp)
      00110C 72 F9 01         [ 2]  213 	addw y,(INCR,sp) 
      00110F 90 F6            [ 1]  214 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      001111 F7               [ 1]  215 	ld (x),a 
      001112 89               [ 2]  216 	pushw x 
      001113 CE 00 0D         [ 2]  217 	ldw x,acc16 
      001116 5A               [ 2]  218 	decw x 
      001117 CF 00 0D         [ 2]  219 	ldw acc16,x 
      00111A 85               [ 2]  220 	popw x 
      00111B 20 E4            [ 2]  221 	jra move_loop
      00111D                        222 move_exit:
      00111D                        223 	_drop VSIZE
      00111D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00111F 84               [ 1]  224 	pop a 
      001120 81               [ 4]  225 	ret 	
                                    226 
                                    227 ;------------------------------------
                                    228 ;  set all variables to zero 
                                    229 ; input:
                                    230 ;   none 
                                    231 ; output:
                                    232 ;	none
                                    233 ;------------------------------------
      001121                        234 clear_vars:
      001121 89               [ 2]  235 	pushw x 
      001122 88               [ 1]  236 	push a  
      001123 AE 00 34         [ 2]  237 	ldw x,#vars 
      001126 A6 4E            [ 1]  238 	ld a,#CELL_SIZE*26 
      001128 7F               [ 1]  239 1$:	clr (x)
      001129 5C               [ 1]  240 	incw x 
      00112A 4A               [ 1]  241 	dec a 
      00112B 26 FB            [ 1]  242 	jrne 1$
      00112D 84               [ 1]  243 	pop a 
      00112E 85               [ 2]  244 	popw x 
      00112F 81               [ 4]  245 	ret 
                                    246 
                                    247 
                                    248 ;-----------------------
                                    249 ;  display system 
                                    250 ;  information 
                                    251 ;-----------------------
                           000002   252 	MAJOR=2
                           000000   253 	MINOR=0 
      001130 0A 0A 54 69 6E 79 20   254 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    255 
      001176                        256 system_information:
      001176 AE 11 30         [ 2]  257 	ldw x,#software 
      001179 CD 06 82         [ 4]  258 	call puts 
      00117C A6 02            [ 1]  259 	ld a,#MAJOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00117E C7 00 0E         [ 1]  260 	ld acc8,a 
      001181 5F               [ 1]  261 	clrw x 
      001182 CF 00 0C         [ 2]  262 	ldw acc24,x
      001185 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001189 CD 15 6E         [ 4]  264 	call prt_acc24 
      00118C A6 2E            [ 1]  265 	ld a,#'.
      00118E CD 06 25         [ 4]  266 	call putc 
      001191 A6 00            [ 1]  267 	ld a,#MINOR 
      001193 C7 00 0E         [ 1]  268 	ld acc8,a 
      001196 5F               [ 1]  269 	clrw x 
      001197 CF 00 0C         [ 2]  270 	ldw acc24,x 
      00119A CD 15 6E         [ 4]  271 	call prt_acc24
      00119D A6 0D            [ 1]  272 	ld a,#CR 
      00119F CD 06 25         [ 4]  273 	call putc
                                    274 ;call test 
      0011A2 81               [ 4]  275 	ret
                                    276 
      0011A3                        277 warm_init:
      0011A3 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      0011A7 72 5F 00 22      [ 1]  279 	clr flags 
      0011AB 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      0011AF 35 0A 00 0A      [ 1]  281 	mov base,#10 
      0011B3 AE 00 00         [ 2]  282 	ldw x,#0 
      0011B6 CF 00 04         [ 2]  283 	ldw basicptr,x 
      0011B9 CF 00 00         [ 2]  284 	ldw in.w,x 
      0011BC 72 5F 00 02      [ 1]  285 	clr count
      0011C0 81               [ 4]  286 	ret 
                                    287 
                                    288 ;---------------------------
                                    289 ; reset BASIC text variables 
                                    290 ; and clear variables 
                                    291 ;---------------------------
      0011C1                        292 clear_basic:
      0011C1 89               [ 2]  293 	pushw x 
      0011C2 72 5F 00 02      [ 1]  294 	clr count
      0011C6 72 5F 00 01      [ 1]  295 	clr in  
      0011CA AE 00 90         [ 2]  296 	ldw x,#free_ram 
      0011CD CF 00 1B         [ 2]  297 	ldw txtbgn,x 
      0011D0 CF 00 1D         [ 2]  298 	ldw txtend,x 
      0011D3 CF 00 2F         [ 2]  299 	ldw dvar_bgn,x 
      0011D6 CF 00 31         [ 2]  300 	ldw dvar_end,x 
      0011D9 CD 11 21         [ 4]  301 	call clear_vars 
      0011DC 72 5F 00 33      [ 1]  302 	clr chain_level
      0011E0 85               [ 2]  303 	popw x
      0011E1 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011E2                        309 err_msg:
      0011E2 00 00 12 08 12 1F 12   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             2D 12 46 12 55
      0011EE 12 6B 12 81 12 9B 12   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             AC 12 BD
      0011F8 12 C9 12 FC 13 0C 13   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



             20 13 33
      001202 13 40 13 4A 13 66      313 	.word err_overflow,err_read_only,err_not_program  
                                    314 
      001208 52 65 6A 65 63 74 65   315 err_mem_full: .asciz "Rejected, memory full\n" 
             64 2C 20 6D 65 6D 6F
             72 79 20 66 75 6C 6C
             0A 00
      00121F 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      00122D 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001246 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001255 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00126B 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001281 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00129B 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0012AC 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0012BD 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0012C9 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0012FC 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00130C 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001320 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001333 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001340 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
      00134A 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      001366 6E 6F 20 70 72 6F 67   332 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    333 
                                    334 ;-------------------------------------
      001382 0A 72 75 6E 20 74 69   335 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001394 0A 63 6F 6D 70 69 6C   336 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      0013A5 6C 61 73 74 20 74 6F   337 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    338 
      0013B5                        339 syntax_error::
      0013B5 A6 02            [ 1]  340 	ld a,#ERR_SYNTAX 
                                    341 
      0013B7                        342 tb_error::
      0013B7 72 0A 00 22 3F   [ 2]  343 	btjt flags,#FCOMP,1$
      0013BC 88               [ 1]  344 	push a 
      0013BD AE 13 82         [ 2]  345 	ldw x, #rt_msg 
      0013C0 CD 06 82         [ 4]  346 	call puts 
      0013C3 84               [ 1]  347 	pop a 
      0013C4 AE 11 E2         [ 2]  348 	ldw x, #err_msg 
      0013C7 72 5F 00 0D      [ 1]  349 	clr acc16 
      0013CB 48               [ 1]  350 	sll a
      0013CC 72 59 00 0D      [ 1]  351 	rlc acc16  
      0013D0 C7 00 0E         [ 1]  352 	ld acc8, a 
      0013D3 72 BB 00 0D      [ 2]  353 	addw x,acc16 
      0013D7 FE               [ 2]  354 	ldw x,(x)
      0013D8 CD 06 82         [ 4]  355 	call puts
      0013DB CE 00 04         [ 2]  356 	ldw x,basicptr 
                           000000   357 .if DEBUG 
                                    358 ld a,count 
                                    359 clrw y 
                                    360 rlwa y  
                                    361 call hex_dump
                                    362 ldw x,basicptr
                                    363 .endif 
      0013DE C6 00 01         [ 1]  364 	ld a,in 
      0013E1 CD 1D 0D         [ 4]  365 	call prt_basic_line
      0013E4 AE 13 A5         [ 2]  366 	ldw x,#tk_id 
      0013E7 CD 06 82         [ 4]  367 	call puts 
      0013EA C6 00 03         [ 1]  368 	ld a,in.saved 
      0013ED 5F               [ 1]  369 	clrw x 
      0013EE 97               [ 1]  370 	ld xl,a 
      0013EF 72 BB 00 04      [ 2]  371 	addw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0013F3 F6               [ 1]  372 	ld a,(x)
      0013F4 5F               [ 1]  373 	clrw x 
      0013F5 97               [ 1]  374 	ld xl,a 
      0013F6 CD 15 57         [ 4]  375 	call prt_i16
      0013F9 20 35            [ 2]  376 	jra 6$
      0013FB                        377 1$:	
      0013FB 88               [ 1]  378 	push a 
      0013FC AE 13 94         [ 2]  379 	ldw x,#comp_msg
      0013FF CD 06 82         [ 4]  380 	call puts 
      001402 84               [ 1]  381 	pop a 
      001403 AE 11 E2         [ 2]  382 	ldw x, #err_msg 
      001406 72 5F 00 0D      [ 1]  383 	clr acc16 
      00140A 48               [ 1]  384 	sll a
      00140B 72 59 00 0D      [ 1]  385 	rlc acc16  
      00140F C7 00 0E         [ 1]  386 	ld acc8, a 
      001412 72 BB 00 0D      [ 2]  387 	addw x,acc16 
      001416 FE               [ 2]  388 	ldw x,(x)
      001417 CD 06 82         [ 4]  389 	call puts
      00141A AE 16 68         [ 2]  390 	ldw x,#tib
      00141D CD 06 82         [ 4]  391 	call puts 
      001420 A6 0D            [ 1]  392 	ld a,#CR 
      001422 CD 06 25         [ 4]  393 	call putc
      001425 CE 00 00         [ 2]  394 	ldw x,in.w
      001428 CD 06 EF         [ 4]  395 	call spaces
      00142B A6 5E            [ 1]  396 	ld a,#'^
      00142D CD 06 25         [ 4]  397 	call putc 
      001430 AE 17 FF         [ 2]  398 6$: ldw x,#STACK_EMPTY 
      001433 94               [ 1]  399     ldw sp,x
                                    400 
      001434                        401 warm_start:
      001434 CD 11 A3         [ 4]  402 	call warm_init
                                    403 ;----------------------------
                                    404 ;   BASIC interpreter
                                    405 ;----------------------------
      001437                        406 cmd_line: ; user interface 
      001437 A6 0D            [ 1]  407 	ld a,#CR 
      001439 CD 06 25         [ 4]  408 	call putc 
      00143C A6 3E            [ 1]  409 	ld a,#'> 
      00143E CD 06 25         [ 4]  410 	call putc
      001441 CD 07 87         [ 4]  411 	call readln
      001444 72 5D 00 02      [ 1]  412 	tnz count 
      001448 27 ED            [ 1]  413 	jreq cmd_line
      00144A CD 0D CF         [ 4]  414 	call compile
                                    415 ;;;;;;;;;;;;;;;;;;;;;;	
                                    416 ;pushw y 
                                    417 ;ldw x,txtbgn  
                                    418 ;ldw y,txtend
                                    419 ;ldw acc16,x   
                                    420 ;subw y,acc16 
                                    421 ;call hex_dump
                                    422 ;popw y 
                                    423 ;;;;;;;;;;;;;;;;;;;;;;
                                    424 
                                    425 ; if text begin with a line number
                                    426 ; the compiler set count to zero    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



                                    427 ; so code is not interpreted
      00144D 72 5D 00 02      [ 1]  428 	tnz count 
      001451 27 E4            [ 1]  429 	jreq cmd_line
                                    430 	
                                    431 ; if direct command 
                                    432 ; it's ready to interpret 
                                    433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    434 ;; This is the interpreter loop
                                    435 ;; for each BASIC code line. 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      001453                        437 interpreter: 
      001453 C6 00 01         [ 1]  438 	ld a,in 
      001456 C1 00 02         [ 1]  439 	cp a,count 
      001459 2B 20            [ 1]  440 	jrmi interp_loop
      00145B                        441 next_line:
      00145B 72 01 00 22 D7   [ 2]  442 	btjf flags, #FRUN, cmd_line
      001460 CE 00 04         [ 2]  443 	ldw x,basicptr
      001463 72 BB 00 00      [ 2]  444 	addw x,in.w 
      001467 C3 00 1D         [ 2]  445 	cpw x,txtend 
      00146A 2B 03            [ 1]  446 	jrmi 0$
      00146C CD 22 BC         [ 4]  447 	call cmd_end 
      00146F CF 00 04         [ 2]  448 0$:	ldw basicptr,x ; start of next line  
      001472 E6 02            [ 1]  449 	ld a,(2,x)
      001474 C7 00 02         [ 1]  450 	ld count,a 
      001477 35 03 00 01      [ 1]  451 	mov in,#3 ; skip first 3 bytes of line 
      00147B                        452 interp_loop:
      00147B CD 15 0F         [ 4]  453 	call next_token
      00147E A1 00            [ 1]  454 	cp a,#TK_NONE 
      001480 27 D9            [ 1]  455 	jreq next_line 
      001482 A1 80            [ 1]  456 	cp a,#TK_CMD
      001484 26 0C            [ 1]  457 	jrne 1$
      001486                        458 	_get_code_addr
      001486 FE               [ 2]    1         ldw x,(x)
      001487 72 5C 00 01      [ 1]    2         inc in 
      00148B 72 5C 00 01      [ 1]    3         inc in 
      00148F FD               [ 4]  459 	call(x)
      001490 20 E9            [ 2]  460 	jra interp_loop 
      001492                        461 1$:	 
      001492 A1 85            [ 1]  462 	cp a,#TK_VAR
      001494 26 05            [ 1]  463 	jrne 2$
      001496 CD 1A 17         [ 4]  464 	call let_var  
      001499 20 E0            [ 2]  465 	jra interp_loop 
      00149B                        466 2$:	
      00149B A1 05            [ 1]  467 	cp a,#TK_ARRAY 
      00149D 26 05            [ 1]  468 	jrne 3$
      00149F CD 1A 12         [ 4]  469 	call let_array 
      0014A2 20 D7            [ 2]  470 	jra interp_loop
      0014A4                        471 3$:	
      0014A4 A1 03            [ 1]  472 	cp a,#TK_LABEL
      0014A6 26 05            [ 1]  473 	jrne 4$
      0014A8 CD 14 B4         [ 4]  474 	call let_dvar  
      0014AB 20 CE            [ 2]  475 	jra interp_loop 
      0014AD                        476 4$: 
      0014AD A1 09            [ 1]  477 	cp a,#TK_COLON 
      0014AF 27 CA            [ 1]  478 	jreq interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0014B1 CC 13 B5         [ 2]  479 5$:	jp syntax_error 
                                    480 
                                    481 
                                    482 ;----------------------
                                    483 ; when a label is met 
                                    484 ; at interp_loop
                                    485 ; it may be a variable 
                                    486 ; assignement to DIM 
                                    487 ; variable 
                                    488 ;----------------------
                           000001   489 	VAR_NAME=1 
                           000003   490 	REC_LEN=3
                           000004   491 	VSIZE=4 
      0014B4                        492 let_dvar:
      0014B4                        493 	_vars VSIZE 
      0014B4 52 04            [ 2]    1     sub sp,#VSIZE 
      0014B6 1F 01            [ 2]  494 	ldw (VAR_NAME,sp),x
      0014B8 0F 03            [ 1]  495 	clr (REC_LEN,sp) 
      0014BA CD 15 28         [ 4]  496 	call skip_string 
      0014BD CE 00 04         [ 2]  497 	ldw x,basicptr 
      0014C0 72 BB 00 00      [ 2]  498 	addw x,in.w 
      0014C4 F6               [ 1]  499 	ld a,(x)
      0014C5 A1 32            [ 1]  500 	cp a,#TK_EQUAL 
      0014C7 26 43            [ 1]  501 	jrne 9$ 
                                    502 ; dvar assignment 
      0014C9 72 5C 00 01      [ 1]  503 	inc in  
      0014CD CD 19 45         [ 4]  504 	call condition  
      0014D0 A1 84            [ 1]  505 	cp a,#TK_INTGR 
      0014D2 27 03            [ 1]  506 	jreq 1$ 
      0014D4 CC 13 B5         [ 2]  507 0$:	jp syntax_error 
      0014D7                        508 1$: 
      0014D7 1E 01            [ 2]  509 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      0014D9 CD 10 B1         [ 4]  510 	call strlen 
      0014DC AB 05            [ 1]  511 	add a,#REC_XTRA_BYTES
      0014DE 6B 04            [ 1]  512 	ld (REC_LEN+1,sp),a 
      0014E0 CD 1A 81         [ 4]  513 	call search_name 
      0014E3 5D               [ 2]  514 	tnzw x 
      0014E4 27 EE            [ 1]  515 	jreq 0$ 
      0014E6 F6               [ 1]  516 	ld a,(x)
      0014E7 2A 05            [ 1]  517 	jrpl 2$
      0014E9 A6 11            [ 1]  518 	ld a,#ERR_RD_ONLY 
      0014EB CC 13 B7         [ 2]  519 	jp tb_error 
      0014EE                        520 2$:
      0014EE 72 FB 03         [ 2]  521 	addw x,(REC_LEN,sp)
      0014F1 1D 00 03         [ 2]  522 	subw x,#CELL_SIZE 
      0014F4 CF 00 19         [ 2]  523 	ldw ptr16,x
      0014F7                        524 	_xpop 
      0014F7 90 F6            [ 1]    1     ld a,(y)
      0014F9 93               [ 1]    2     ldw x,y 
      0014FA EE 01            [ 2]    3     ldw x,(1,x)
      0014FC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001500 72 C7 00 19      [ 4]  525 	ld [ptr16],a 
      001504 72 5C 00 1A      [ 1]  526 	inc ptr8 
      001508 72 CF 00 19      [ 5]  527 	ldw [ptr16],x 
      00150C                        528 9$: _drop VSIZE 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00150C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00150E 81               [ 4]  529 	ret 
                                    530 
                                    531 
                                    532 ;--------------------------
                                    533 ; extract next token from
                                    534 ; token list 
                                    535 ; basicptr -> base address 
                                    536 ; in  -> offset in list array 
                                    537 ; output:
                                    538 ;   A 		token attribute
                                    539 ;   X 		*token_value 
                                    540 ;----------------------------------------
      00150F                        541 next_token::
                                    542 ;	clrw x 
      00150F C6 00 01         [ 1]  543 	ld a,in 
      001512 C7 00 03         [ 1]  544 	ld in.saved,a ; in case "_unget_token" needed 
                                    545 ; don't replace sub by "cp a,count" 
                                    546 ; if end of line must return with A=0   	
      001515 C0 00 02         [ 1]  547 	sub a,count 
      001518 27 0D            [ 1]  548 	jreq 9$ ; end of line 
      00151A                        549 0$: 
      00151A CE 00 04         [ 2]  550 	ldw x,basicptr 
      00151D 72 BB 00 00      [ 2]  551 	addw x,in.w 
      001521 F6               [ 1]  552 	ld a,(x)
      001522 5C               [ 1]  553 	incw x
      001523 72 5C 00 01      [ 1]  554 	inc in   
      001527 81               [ 4]  555 9$: ret 
                                    556 
                                    557 ;-------------------------
                                    558 ;  skip .asciz in BASIC line 
                                    559 ;  name 
                                    560 ;  input:
                                    561 ;     x		* string 
                                    562 ;  output:
                                    563 ;     none 
                                    564 ;-------------------------
      001528                        565 skip_string:
      001528 F6               [ 1]  566 	ld a,(x)
      001529 27 03            [ 1]  567 	jreq 1$
      00152B 5C               [ 1]  568 	incw x 
      00152C 20 FA            [ 2]  569 	jra skip_string 
      00152E 5C               [ 1]  570 1$: incw x 	
      00152F 72 B0 00 04      [ 2]  571 	subw x,basicptr 
      001533 CF 00 00         [ 2]  572 	ldw in.w,x 
      001536 81               [ 4]  573 	ret 
                                    574 
                                    575 ;---------------------
                                    576 ; extract 16 bits  
                                    577 ; address from BASIC
                                    578 ; code 
                                    579 ; input:
                                    580 ;    X    *address
                                    581 ; output:
                                    582 ;    X    address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    583 ;-------------------- 
      001537                        584 get_addr:
      001537 FE               [ 2]  585 	ldw x,(x)
      001538 72 5C 00 01      [ 1]  586 	inc in 
      00153C 72 5C 00 01      [ 1]  587 	inc in 
      001540 81               [ 4]  588 	ret 
                                    589 
                                    590 ;--------------------
                                    591 ; extract int24_t  
                                    592 ; value from BASIC 
                                    593 ; code 
                                    594 ; input:
                                    595 ;    X   *integer 
                                    596 ; output:
                                    597 ;    A:X   int24  
                                    598 ;--------------------
      001541                        599 get_int24:
      001541 F6               [ 1]  600 	ld a,(x)
      001542 EE 01            [ 2]  601 	ldw x,(1,x)
                                    602 ; skip 3 bytes 
      001544 72 5C 00 01      [ 1]  603 	inc in 
      001548 72 5C 00 01      [ 1]  604 	inc in 
      00154C 72 5C 00 01      [ 1]  605 	inc in 
      001550 81               [ 4]  606 	ret 
                                    607 
                                    608 ;-------------------------
                                    609 ; get character from 
                                    610 ; BASIC code 
                                    611 ; input:
                                    612 ;    X   *char 
                                    613 ; output:
                                    614 ;    A    char 
                                    615 ;-------------------------
      001551                        616 get_char:
      001551 F6               [ 1]  617 	ld a,(x)
      001552 72 5C 00 01      [ 1]  618 	inc in  
      001556 81               [ 4]  619     ret 
                                    620 
                                    621 ;-----------------------------------
                                    622 ; print a 16 bit integer 
                                    623 ; using variable 'base' as conversion
                                    624 ; format.
                                    625 ; input:
                                    626 ;    X       integer to print 
                                    627 ;   'base'    conversion base 
                                    628 ; output:
                                    629 ;   terminal  
                                    630 ;-----------------------------------
      001557                        631 prt_i16:
      001557 72 5F 00 0C      [ 1]  632 	clr acc24 
      00155B CF 00 0D         [ 2]  633 	ldw acc16,x 
      00155E A6 10            [ 1]  634 	ld a,#16
      001560 C1 00 0A         [ 1]  635 	cp a,base
      001563 27 09            [ 1]  636 	jreq prt_acc24  
      001565 72 0F 00 0D 04   [ 2]  637 	btjf acc16,#7,prt_acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00156A 72 53 00 0C      [ 1]  638 	cpl acc24 ; sign extend 
                                    639 	
                                    640 ;------------------------------------
                                    641 ; print integer in acc24 
                                    642 ; input:
                                    643 ;	acc24 		integer to print 
                                    644 ;	'base' 		numerical base for conversion 
                                    645 ;    A 			signed||unsigned conversion
                                    646 ;  output:
                                    647 ;    A          string length
                                    648 ;------------------------------------
      00156E                        649 prt_acc24:
      00156E A6 FF            [ 1]  650 	ld a,#255  ; signed conversion  
      001570 CD 15 8C         [ 4]  651     call itoa  ; conversion entier en  .asciz
      001573 88               [ 1]  652 	push a 
      001574 CD 06 82         [ 4]  653 	call puts
      001577 84               [ 1]  654 	pop a 
      001578 81               [ 4]  655     ret	
                                    656 
                                    657 ;---------------------------------------
                                    658 ;  print value at xstack top 
                                    659 ;---------------------------------------
      001579                        660 print_top: 
      001579                        661 	_xpop 
      001579 90 F6            [ 1]    1     ld a,(y)
      00157B 93               [ 1]    2     ldw x,y 
      00157C EE 01            [ 2]    3     ldw x,(1,x)
      00157E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001582 C7 00 0C         [ 1]  662 	ld acc24,a 
      001585 CF 00 0D         [ 2]  663 	ldw acc16,x 
      001588 CD 15 6E         [ 4]  664 	call prt_acc24 
      00158B 81               [ 4]  665 	ret 
                                    666 
                                    667 ;------------------------------------
                                    668 ; convert integer in acc24 to string
                                    669 ; input:
                                    670 ;   'base'	conversion base 
                                    671 ;	acc24	integer to convert
                                    672 ;   A       0=unsigned, else signed 
                                    673 ; output:
                                    674 ;   X  		pointer to first char of string
                                    675 ;   A       string length
                                    676 ;------------------------------------
                           000001   677 	SIGN=1  ; integer sign 
                           000002   678 	LEN=2 
                           000003   679 	PSTR=3
                           000004   680 	VSIZE=4 ;locals size
      00158C                        681 itoa::
      00158C                        682 	_vars VSIZE
      00158C 52 04            [ 2]    1     sub sp,#VSIZE 
      00158E 0F 02            [ 1]  683 	clr (LEN,sp) ; string length  
      001590 0F 01            [ 1]  684 	clr (SIGN,sp)    ; sign
      001592 4D               [ 1]  685 	tnz A
      001593 27 11            [ 1]  686 	jreq 1$ ; unsigned conversion  
      001595 C6 00 0A         [ 1]  687 	ld a,base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      001598 A1 0A            [ 1]  688 	cp a,#10
      00159A 26 0A            [ 1]  689 	jrne 1$
                                    690 	; base 10 string display with negative sign if bit 23==1
      00159C 72 0F 00 0C 05   [ 2]  691 	btjf acc24,#7,1$
      0015A1 03 01            [ 1]  692 	cpl (SIGN,sp)
      0015A3 CD 02 1D         [ 4]  693 	call neg_acc24
      0015A6                        694 1$:
                                    695 ; initialize string pointer 
      0015A6 AE 16 68         [ 2]  696 	ldw x,#tib 
      0015A9 1C 00 50         [ 2]  697 	addw x,#TIB_SIZE
      0015AC 5A               [ 2]  698 	decw x 
      0015AD 7F               [ 1]  699 	clr (x)
      0015AE                        700 itoa_loop:
      0015AE C6 00 0A         [ 1]  701     ld a,base
      0015B1 CD 02 E9         [ 4]  702     call divu24_8 ; acc24/A 
      0015B4 AB 30            [ 1]  703     add a,#'0  ; remainder of division
      0015B6 A1 3A            [ 1]  704     cp a,#'9+1
      0015B8 2B 02            [ 1]  705     jrmi 2$
      0015BA AB 07            [ 1]  706     add a,#7 
      0015BC                        707 2$:	
      0015BC 5A               [ 2]  708 	decw x
      0015BD F7               [ 1]  709     ld (x),a
      0015BE 0C 02            [ 1]  710 	inc (LEN,sp)
                                    711 	; if acc24==0 conversion done
      0015C0 C6 00 0C         [ 1]  712 	ld a,acc24
      0015C3 CA 00 0D         [ 1]  713 	or a,acc16
      0015C6 CA 00 0E         [ 1]  714 	or a,acc8
      0015C9 26 E3            [ 1]  715     jrne itoa_loop
                                    716 	;conversion done, next add '$' or '-' as required
      0015CB C6 00 0A         [ 1]  717 	ld a,base 
      0015CE A1 10            [ 1]  718 	cp a,#16
      0015D0 27 08            [ 1]  719 	jreq 8$
      0015D2 7B 01            [ 1]  720 	ld a,(SIGN,sp)
      0015D4 27 0A            [ 1]  721     jreq 10$
      0015D6 A6 2D            [ 1]  722     ld a,#'-
      0015D8 20 02            [ 2]  723 	jra 9$ 
      0015DA                        724 8$:	
      0015DA A6 24            [ 1]  725 	ld a,#'$ 
      0015DC 5A               [ 2]  726 9$: decw x
      0015DD F7               [ 1]  727     ld (x),a
      0015DE 0C 02            [ 1]  728 	inc (LEN,sp)
      0015E0                        729 10$:
                                    730 ; add a space
      0015E0 5A               [ 2]  731 	decw x 
      0015E1 A6 20            [ 1]  732 	ld a,#SPACE 
      0015E3 F7               [ 1]  733 	ld (x),a
      0015E4 7B 02            [ 1]  734 	ld a,(LEN,sp)
      0015E6 4C               [ 1]  735 	inc a 
      0015E7                        736 	_drop VSIZE
      0015E7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015E9 81               [ 4]  737 	ret
                                    738 
                                    739 ;------------------------------------
                                    740 ; convert alpha to uppercase
                                    741 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    742 ;    a  character to convert
                                    743 ; output:
                                    744 ;    a  uppercase character
                                    745 ;------------------------------------
      0015EA                        746 to_upper::
      0015EA A1 61            [ 1]  747 	cp a,#'a
      0015EC 2A 01            [ 1]  748 	jrpl 1$
      0015EE 81               [ 4]  749 0$:	ret
      0015EF A1 7A            [ 1]  750 1$: cp a,#'z	
      0015F1 22 FB            [ 1]  751 	jrugt 0$
      0015F3 A0 20            [ 1]  752 	sub a,#32
      0015F5 81               [ 4]  753 	ret
                                    754 	
                                    755 ;------------------------------------
                                    756 ; convert pad content in integer
                                    757 ; input:
                                    758 ;    x		* .asciz to convert
                                    759 ; output:
                                    760 ;    A:X        int24_t 
                                    761 ;    acc24      int24_t
                                    762 ;------------------------------------
                                    763 	; local variables
                           000001   764 	SIGN=1 ; 1 byte, 
                           000002   765 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   766 	TEMP=3 ; 1 byte, temporary storage
                           000004   767 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   768 	VSIZE=5 ; 5 bytes reserved for local storage
      0015F6                        769 atoi24::
      0015F6                        770 	_vars VSIZE
      0015F6 52 05            [ 2]    1     sub sp,#VSIZE 
      0015F8 1F 04            [ 2]  771 	ldw (XTEMP,sp),x 
                                    772 ; conversion made on xstack 
      0015FA 4F               [ 1]  773 	clr a 
      0015FB 5F               [ 1]  774 	clrw x 
      0015FC                        775 	_xpush 
      0015FC 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001600 90 F7            [ 1]    2     ld (y),a 
      001602 90 EF 01         [ 2]    3     ldw (1,y),x 
      001605 0F 01            [ 1]  776 	clr (SIGN,sp)
      001607 A6 0A            [ 1]  777 	ld a,#10
      001609 6B 02            [ 1]  778 	ld (BASE,sp),a ; default base decimal
      00160B 1E 04            [ 2]  779 	ldw x,(XTEMP,sp)
      00160D F6               [ 1]  780 	ld a,(x)
      00160E 27 4E            [ 1]  781 	jreq 9$  ; completed if 0
      001610 A1 2D            [ 1]  782 	cp a,#'-
      001612 26 04            [ 1]  783 	jrne 1$
      001614 03 01            [ 1]  784 	cpl (SIGN,sp)
      001616 20 08            [ 2]  785 	jra 2$
      001618 A1 24            [ 1]  786 1$: cp a,#'$
      00161A 26 08            [ 1]  787 	jrne 3$
      00161C A6 10            [ 1]  788 	ld a,#16
      00161E 6B 02            [ 1]  789 	ld (BASE,sp),a
      001620 5C               [ 1]  790 2$:	incw x
      001621 1F 04            [ 2]  791 	ldw (XTEMP,sp),x 
      001623 F6               [ 1]  792 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001624                        793 3$:	; char to digit 
      001624 A1 61            [ 1]  794 	cp a,#'a
      001626 2B 02            [ 1]  795 	jrmi 4$
      001628 A0 20            [ 1]  796 	sub a,#32
      00162A A1 30            [ 1]  797 4$:	cp a,#'0
      00162C 2B 30            [ 1]  798 	jrmi 9$
      00162E A0 30            [ 1]  799 	sub a,#'0
      001630 A1 0A            [ 1]  800 	cp a,#10
      001632 2B 06            [ 1]  801 	jrmi 5$
      001634 A0 07            [ 1]  802 	sub a,#7
      001636 11 02            [ 1]  803 	cp a,(BASE,sp)
      001638 2A 24            [ 1]  804 	jrpl 9$
      00163A 6B 03            [ 1]  805 5$:	ld (TEMP,sp),a
      00163C 7B 02            [ 1]  806 	ld a,(BASE,sp)
      00163E CD 02 3A         [ 4]  807 	call mulu24_8
      001641                        808 	_xpush 
      001641 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001645 90 F7            [ 1]    2     ld (y),a 
      001647 90 EF 01         [ 2]    3     ldw (1,y),x 
      00164A 5F               [ 1]  809 	clrw x 
      00164B 7B 03            [ 1]  810 	ld a,(TEMP,sp)
      00164D 02               [ 1]  811 	rlwa x 
      00164E                        812 	_xpush 
      00164E 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001652 90 F7            [ 1]    2     ld (y),a 
      001654 90 EF 01         [ 2]    3     ldw (1,y),x 
      001657 CD 01 7E         [ 4]  813 	call add24 
      00165A 1E 04            [ 2]  814 	ldw x,(XTEMP,sp)
      00165C 20 C2            [ 2]  815 	jra 2$
      00165E 0D 01            [ 1]  816 9$:	tnz (SIGN,sp)
      001660 27 03            [ 1]  817     jreq atoi_exit
      001662 CD 02 03         [ 4]  818     call neg24
      001665                        819 atoi_exit:
      001665                        820 	_xpop 
      001665 90 F6            [ 1]    1     ld a,(y)
      001667 93               [ 1]    2     ldw x,y 
      001668 EE 01            [ 2]    3     ldw x,(1,x)
      00166A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00166E C7 00 0C         [ 1]  821 	ld acc24,a 
      001671 CF 00 0D         [ 2]  822 	ldw acc16,x  
      001674                        823 	_drop VSIZE
      001674 5B 05            [ 2]    1     addw sp,#VSIZE 
      001676 81               [ 4]  824 	ret
                                    825 
                                    826 
                                    827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    828 ;;   TINY BASIC  operators,
                                    829 ;;   commands and functions 
                                    830 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    831 
                                    832 ;---------------------------------
                                    833 ; dictionary search 
                                    834 ; input:
                                    835 ;	X 		dictionary entry point, name field  
                                    836 ;   y		.asciz name to search 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    837 ; output:
                                    838 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    839 ;  X		routine address|TK_OP 
                                    840 ;---------------------------------
                           000001   841 	NLEN=1 ; cmd length 
                           000002   842 	XSAVE=2
                           000004   843 	YSAVE=4
                           000005   844 	VSIZE=5 
      001677                        845 search_dict::
      001677                        846 	_vars VSIZE 
      001677 52 05            [ 2]    1     sub sp,#VSIZE 
      001679 17 04            [ 2]  847 	ldw (YSAVE,sp),y 
      00167B                        848 search_next:
      00167B 1F 02            [ 2]  849 	ldw (XSAVE,sp),x 
                                    850 ; get name length in dictionary	
      00167D F6               [ 1]  851 	ld a,(x)
      00167E A4 0F            [ 1]  852 	and a,#0xf 
      001680 6B 01            [ 1]  853 	ld (NLEN,sp),a  
      001682 16 04            [ 2]  854 	ldw y,(YSAVE,sp) ; name pointer 
      001684 5C               [ 1]  855 	incw x 
      001685                        856 cp_loop:
      001685 90 F6            [ 1]  857 	ld a,(y)
      001687 27 1B            [ 1]  858 	jreq str_match 
      001689 0D 01            [ 1]  859 	tnz (NLEN,sp)
      00168B 27 0A            [ 1]  860 	jreq no_match  
      00168D F1               [ 1]  861 	cp a,(x)
      00168E 26 07            [ 1]  862 	jrne no_match 
      001690 90 5C            [ 1]  863 	incw y 
      001692 5C               [ 1]  864 	incw x
      001693 0A 01            [ 1]  865 	dec (NLEN,sp)
      001695 20 EE            [ 2]  866 	jra cp_loop 
      001697                        867 no_match:
      001697 1E 02            [ 2]  868 	ldw x,(XSAVE,sp) 
      001699 1D 00 02         [ 2]  869 	subw x,#2 ; move X to link field
      00169C 4B 00            [ 1]  870 	push #TK_NONE 
      00169E FE               [ 2]  871 	ldw x,(x) ; next word link 
      00169F 84               [ 1]  872 	pop a ; TK_NONE 
      0016A0 27 1D            [ 1]  873 	jreq search_exit  ; not found  
                                    874 ;try next 
      0016A2 20 D7            [ 2]  875 	jra search_next
      0016A4                        876 str_match:
      0016A4 1E 02            [ 2]  877 	ldw x,(XSAVE,sp)
      0016A6 F6               [ 1]  878 	ld a,(X)
      0016A7 6B 01            [ 1]  879 	ld (NLEN,sp),a ; needed to test keyword type  
      0016A9 A4 0F            [ 1]  880 	and a,#NLEN_MASK 
                                    881 ; move x to procedure address field 	
      0016AB 4C               [ 1]  882 	inc a 
      0016AC C7 00 0E         [ 1]  883 	ld acc8,a 
      0016AF 72 5F 00 0D      [ 1]  884 	clr acc16 
      0016B3 72 BB 00 0D      [ 2]  885 	addw x,acc16 
      0016B7 FE               [ 2]  886 	ldw x,(x) ; routine address  
                                    887 ;determine keyword type bits 7:4 
      0016B8 7B 01            [ 1]  888 	ld a,(NLEN,sp)
      0016BA A4 F0            [ 1]  889 	and a,#KW_TYPE_MASK 
      0016BC 4E               [ 1]  890 	swap a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      0016BD AB 80            [ 1]  891 	add a,#128
      0016BF                        892 search_exit: 
      0016BF                        893 	_drop VSIZE 
      0016BF 5B 05            [ 2]    1     addw sp,#VSIZE 
      0016C1 81               [ 4]  894 	ret 
                                    895 
                                    896 ;--------------------------------
                                    897 ;  called by command that should 
                                    898 ;  be invoked only from command 
                                    899 ;  line.
                                    900 ;  Display an error if 
                                    901 ;  invoked from program.
                                    902 ;---------------------------------
      0016C2                        903 cmd_line_only:
      0016C2 72 01 00 22 05   [ 2]  904 	btjf flags,#FRUN,0$
      0016C7 A6 07            [ 1]  905 	ld a,#ERR_CMD_ONLY
      0016C9 CC 13 B7         [ 2]  906 	jp tb_error 
      0016CC 81               [ 4]  907 0$: ret 
                                    908 
                                    909 ;--------------------------------
                                    910 ; called by command/function that 
                                    911 ; should be invoked only at run time
                                    912 ; Display an error if invoked from 
                                    913 ; command line. 
                                    914 ;---------------------------------
      0016CD                        915 runtime_only:
      0016CD 72 00 00 22 05   [ 2]  916 	btjt flags,#FRUN,0$ 
      0016D2 A6 06            [ 1]  917 	ld a,#ERR_RUN_ONLY
      0016D4 CC 13 B7         [ 2]  918 	jp tb_error 
      0016D7 81               [ 4]  919 0$:	ret 
                                    920 
                                    921 ;---------------------
                                    922 ; check if next token
                                    923 ;  is of expected type 
                                    924 ; input:
                                    925 ;   A 		 expected token attribute
                                    926 ;  ouput:
                                    927 ;   none     if fail call syntax_error 
                                    928 ;--------------------
      0016D8                        929 expect:
      0016D8 88               [ 1]  930 	push a 
      0016D9 CD 15 0F         [ 4]  931 	call next_token 
      0016DC 11 01            [ 1]  932 	cp a,(1,sp)
      0016DE 27 03            [ 1]  933 	jreq 1$
      0016E0 CC 13 B5         [ 2]  934 	jp syntax_error
      0016E3 84               [ 1]  935 1$: pop a 
      0016E4 81               [ 4]  936 	ret 
                                    937 
                                    938 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    939 ; parse arguments list 
                                    940 ; between ()
                                    941 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E5                        942 func_args:
      0016E5 A6 06            [ 1]  943 	ld a,#TK_LPAREN 
      0016E7 CD 16 D8         [ 4]  944 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                    945 ; expected to continue in arg_list 
                                    946 ; caller must check for TK_RPAREN 
                                    947 
                                    948 ;-------------------------------
                                    949 ; parse embedded BASIC routines 
                                    950 ; arguments list.
                                    951 ; arg_list::=  expr[','expr]*
                                    952 ; all arguments are of int24_t type
                                    953 ; and pushed on stack 
                                    954 ; input:
                                    955 ;   none
                                    956 ; output:
                                    957 ;   xstack{n}   arguments pushed on xstack
                                    958 ;   A 	number of arguments pushed on xstack  
                                    959 ;--------------------------------
      0016EA                        960 arg_list:
      0016EA 4B 00            [ 1]  961 	push #0
      0016EC CD 19 45         [ 4]  962 1$:	call condition 
      0016EF 4D               [ 1]  963 	tnz a 
      0016F0 27 12            [ 1]  964 	jreq 7$  
      0016F2 0C 01            [ 1]  965 	inc (1,sp)
      0016F4 CD 15 0F         [ 4]  966 	call next_token 
      0016F7 A1 08            [ 1]  967 	cp a,#TK_COMMA 
      0016F9 27 F1            [ 1]  968 	jreq 1$ 
      0016FB A1 07            [ 1]  969 	cp a,#TK_RPAREN
      0016FD 27 05            [ 1]  970 	jreq 7$
      0016FF                        971 	_unget_token 
      0016FF 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001704 84               [ 1]  972 7$:	pop a  
      001705 81               [ 4]  973 	ret 
                                    974 
                                    975 ;--------------------------------
                                    976 ;   BASIC commnands 
                                    977 ;--------------------------------
                                    978 
                                    979 ;--------------------------------
                                    980 ;  arithmetic and relational 
                                    981 ;  routines
                                    982 ;  operators precedence
                                    983 ;  highest to lowest
                                    984 ;  operators on same row have 
                                    985 ;  same precedence and are executed
                                    986 ;  from left to right.
                                    987 ;	'*','/','%'
                                    988 ;   '-','+'
                                    989 ;   '=','>','<','>=','<=','<>','><'
                                    990 ;   '<>' and '><' are equivalent for not equal.
                                    991 ;--------------------------------
                                    992 
                                    993 ;---------------------
                                    994 ; return array element
                                    995 ; address from @(expr)
                                    996 ; input:
                                    997 ;   A 		TK_ARRAY
                                    998 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



                                    999 ;	X 		element address 
                                   1000 ;----------------------
      001706                       1001 get_array_element:
      001706 CD 16 E5         [ 4] 1002 	call func_args 
      001709 A1 01            [ 1] 1003 	cp a,#1
      00170B 27 03            [ 1] 1004 	jreq 1$
      00170D CC 13 B5         [ 2] 1005 	jp syntax_error
      001710                       1006 1$: _xpop 
      001710 90 F6            [ 1]    1     ld a,(y)
      001712 93               [ 1]    2     ldw x,y 
      001713 EE 01            [ 2]    3     ldw x,(1,x)
      001715 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   1007     ; ignore A, index < 65536 in any case 
                                   1008 	; check for bounds 
      001719 C3 00 20         [ 2] 1009 	cpw x,array_size 
      00171C 23 05            [ 2] 1010 	jrule 3$
                                   1011 ; bounds {1..array_size}	
      00171E A6 0A            [ 1] 1012 2$: ld a,#ERR_BAD_VALUE 
      001720 CC 13 B7         [ 2] 1013 	jp tb_error 
      001723 5D               [ 2] 1014 3$: tnzw  x
      001724 27 F8            [ 1] 1015 	jreq 2$ 
      001726 A6 03            [ 1] 1016 	ld a,#CELL_SIZE  
      001728 42               [ 4] 1017 	mul x,a 
      001729 CF 00 0D         [ 2] 1018 	ldw acc16,x   
      00172C AE 16 68         [ 2] 1019 	ldw x,#tib ; array is below tib 
      00172F 72 B0 00 0D      [ 2] 1020 	subw x,acc16 
      001733 81               [ 4] 1021 	ret 
                                   1022 
                                   1023 
                                   1024 ;***********************************
                                   1025 ;   expression parse,execute 
                                   1026 ;***********************************
                                   1027 ;-----------------------------------
                                   1028 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1029 ;			 integer | function |
                                   1030 ;			 '('relation')' 
                                   1031 ; output:
                                   1032 ;   A       token attribute 
                                   1033 ;   xstack  value  
                                   1034 ; ---------------------------------
                           000001  1035 	NEG=1
                           000001  1036 	VSIZE=1
      001734                       1037 factor:
      001734                       1038 	_vars VSIZE 
      001734 52 01            [ 2]    1     sub sp,#VSIZE 
      001736 0F 01            [ 1] 1039 	clr (NEG,sp)
      001738 CD 15 0F         [ 4] 1040 	call next_token
      00173B 4D               [ 1] 1041 	tnz a 
      00173C 26 03            [ 1] 1042 	jrne 1$ 
      00173E CC 17 E6         [ 2] 1043 	jp 22$ 
      001741 A1 10            [ 1] 1044 1$:	cp a,#TK_PLUS 
      001743 27 06            [ 1] 1045 	jreq 2$
      001745 A1 11            [ 1] 1046 	cp a,#TK_MINUS 
      001747 26 05            [ 1] 1047 	jrne 4$ 
      001749 03 01            [ 1] 1048 	cpl (NEG,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      00174B                       1049 2$:	
      00174B CD 15 0F         [ 4] 1050 	call next_token
      00174E                       1051 4$:
      00174E 4D               [ 1] 1052 	tnz a 
      00174F 26 03            [ 1] 1053 	jrne 41$ 
      001751 CC 13 B5         [ 2] 1054 	jp syntax_error  
      001754                       1055 41$:	
      001754 A1 81            [ 1] 1056 	cp a,#TK_IFUNC 
      001756 26 0C            [ 1] 1057 	jrne 5$ 
      001758                       1058 	_get_code_addr 
      001758 FE               [ 2]    1         ldw x,(x)
      001759 72 5C 00 01      [ 1]    2         inc in 
      00175D 72 5C 00 01      [ 1]    3         inc in 
      001761 FD               [ 4] 1059 	call (x); result in A:X  
      001762 20 70            [ 2] 1060 	jra 18$ 
      001764                       1061 5$:
      001764 A1 84            [ 1] 1062 	cp a,#TK_INTGR
      001766 26 05            [ 1] 1063 	jrne 6$
      001768 CD 15 41         [ 4] 1064 	call get_int24 ; A:X
      00176B 20 67            [ 2] 1065 	jra 18$
      00176D                       1066 6$:
      00176D A1 05            [ 1] 1067 	cp a,#TK_ARRAY
      00176F 26 05            [ 1] 1068 	jrne 7$
      001771 CD 17 06         [ 4] 1069 	call get_array_element
      001774 20 07            [ 2] 1070     jra 71$
      001776                       1071 7$:
      001776 A1 85            [ 1] 1072 	cp a,#TK_VAR 
      001778 26 08            [ 1] 1073 	jrne 8$
      00177A CD 15 37         [ 4] 1074 	call get_addr 
      00177D                       1075 71$: ; put value in A:X
      00177D F6               [ 1] 1076 	ld a,(x)
      00177E EE 01            [ 2] 1077 	ldw x,(1,x)
      001780 20 52            [ 2] 1078 	jra 18$
      001782                       1079 8$:
      001782 A1 03            [ 1] 1080 	cp a,#TK_LABEL 
      001784 26 1D            [ 1] 1081 	jrne 9$
      001786 90 89            [ 2] 1082 	pushw y  
      001788 89               [ 2] 1083 	pushw x 
      001789 CD 15 28         [ 4] 1084 	call skip_string
      00178C 85               [ 2] 1085 	popw x  
      00178D CD 10 B1         [ 4] 1086 	call strlen 
      001790 AB 05            [ 1] 1087 	add a,#REC_XTRA_BYTES
      001792 CD 1A 81         [ 4] 1088 	call search_name
      001795 5D               [ 2] 1089 	tnzw x 
      001796 26 04            [ 1] 1090 	jrne 82$ 
      001798 90 85            [ 2] 1091 	popw y 
      00179A 20 30            [ 2] 1092 	jra 16$
      00179C                       1093 82$:
      00179C 90 85            [ 2] 1094 	popw y   
      00179E CD 1A 47         [ 4] 1095 	call get_value ; in A:X 
      0017A1 20 31            [ 2] 1096 	jra 18$
      0017A3                       1097 9$: 
      0017A3 A1 82            [ 1] 1098 	cp a,#TK_CFUNC 
      0017A5 26 0E            [ 1] 1099 	jrne 12$
      0017A7                       1100 	_get_code_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0017A7 FE               [ 2]    1         ldw x,(x)
      0017A8 72 5C 00 01      [ 1]    2         inc in 
      0017AC 72 5C 00 01      [ 1]    3         inc in 
      0017B0 FD               [ 4] 1101 	call(x)
      0017B1 5F               [ 1] 1102 	clrw x 
      0017B2 02               [ 1] 1103 	rlwa x  ; char>int24 in A:X 
      0017B3 20 1F            [ 2] 1104 	jra 18$ 	 
      0017B5                       1105 12$:			
      0017B5 A1 06            [ 1] 1106 	cp a,#TK_LPAREN
      0017B7 26 13            [ 1] 1107 	jrne 16$
      0017B9 CD 18 2C         [ 4] 1108 	call expression
      0017BC A6 07            [ 1] 1109 	ld a,#TK_RPAREN 
      0017BE CD 16 D8         [ 4] 1110 	call expect
      0017C1                       1111 	_xpop 
      0017C1 90 F6            [ 1]    1     ld a,(y)
      0017C3 93               [ 1]    2     ldw x,y 
      0017C4 EE 01            [ 2]    3     ldw x,(1,x)
      0017C6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017CA 20 08            [ 2] 1112 	jra 18$	
      0017CC                       1113 16$:
      0017CC                       1114 	_unget_token 
      0017CC 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0017D1 4F               [ 1] 1115 	clr a 
      0017D2 20 12            [ 2] 1116 	jra 22$ 
      0017D4                       1117 18$: 
      0017D4 0D 01            [ 1] 1118 	tnz (NEG,sp)
      0017D6 27 03            [ 1] 1119 	jreq 20$
      0017D8 CD 02 15         [ 4] 1120 	call neg_ax   
      0017DB                       1121 20$:
      0017DB                       1122 	_xpush 
      0017DB 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0017DF 90 F7            [ 1]    2     ld (y),a 
      0017E1 90 EF 01         [ 2]    3     ldw (1,y),x 
      0017E4 A6 84            [ 1] 1123 	ld a,#TK_INTGR
      0017E6                       1124 22$:
      0017E6                       1125 	_drop VSIZE
      0017E6 5B 01            [ 2]    1     addw sp,#VSIZE 
      0017E8 81               [ 4] 1126 	ret
                                   1127 
                                   1128 
                                   1129 ;-----------------------------------
                                   1130 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1131 ; output:
                                   1132 ;   A    	token attribute 
                                   1133 ;	xstack		value 
                                   1134 ;-----------------------------------
                           000001  1135 	MULOP=1
                           000001  1136 	VSIZE=1
      0017E9                       1137 term:
      0017E9                       1138 	_vars VSIZE
      0017E9 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1139 ; first factor 	
      0017EB CD 17 34         [ 4] 1140 	call factor
      0017EE 4D               [ 1] 1141 	tnz a 
      0017EF 27 38            [ 1] 1142 	jreq term_exit  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0017F1                       1143 term01:	 ; check for  operator '*'|'/'|'%' 
      0017F1 CD 15 0F         [ 4] 1144 	call next_token
      0017F4 6B 01            [ 1] 1145 	ld (MULOP,sp),a
      0017F6 A4 30            [ 1] 1146 	and a,#TK_GRP_MASK
      0017F8 A1 20            [ 1] 1147 	cp a,#TK_GRP_MULT
      0017FA 27 09            [ 1] 1148 	jreq 1$
      0017FC A6 84            [ 1] 1149 	ld a,#TK_INTGR
      0017FE                       1150 	_unget_token 
      0017FE 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001803 20 24            [ 2] 1151 	jra term_exit 
      001805                       1152 1$:	; got *|/|%
                                   1153 ;second factor
      001805 CD 17 34         [ 4] 1154 	call factor
      001808 4D               [ 1] 1155 	tnz a 
      001809 26 03            [ 1] 1156 	jrne 2$ 
      00180B CC 13 B5         [ 2] 1157 	jp syntax_error 
      00180E                       1158 2$: ; select operation 	
      00180E 7B 01            [ 1] 1159 	ld a,(MULOP,sp) 
      001810 A1 20            [ 1] 1160 	cp a,#TK_MULT 
      001812 26 05            [ 1] 1161 	jrne 3$
                                   1162 ; '*' operator
      001814 CD 02 79         [ 4] 1163 	call mul24 
      001817 20 D8            [ 2] 1164 	jra term01
      001819 A1 21            [ 1] 1165 3$: cp a,#TK_DIV 
      00181B 26 05            [ 1] 1166 	jrne 4$ 
                                   1167 ; '/' operator	
      00181D CD 03 07         [ 4] 1168 	call div24 
      001820 20 CF            [ 2] 1169 	jra term01 
      001822                       1170 4$: ; '%' operator
      001822 CD 03 A1         [ 4] 1171 	call mod24
      001825 20 CA            [ 2] 1172 	jra term01 
      001827                       1173 9$: 
      001827 A6 84            [ 1] 1174 	ld a,#TK_INTGR
      001829                       1175 term_exit:
      001829                       1176 	_drop VSIZE 
      001829 5B 01            [ 2]    1     addw sp,#VSIZE 
      00182B 81               [ 4] 1177 	ret 
                                   1178 
                                   1179 ;-------------------------------
                                   1180 ;  expr ::= term [['+'|'-'] term]*
                                   1181 ;  result range {-32768..32767}
                                   1182 ;  output:
                                   1183 ;   A    token attribute 
                                   1184 ;   xstack	 result    
                                   1185 ;-------------------------------
                           000001  1186 	OP=1 
                           000001  1187 	VSIZE=1 
      00182C                       1188 expression:
      00182C                       1189 	_vars VSIZE 
      00182C 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1190 ; first term 	
      00182E CD 17 E9         [ 4] 1191 	call term
      001831 4D               [ 1] 1192 	tnz a 
      001832 27 2D            [ 1] 1193 	jreq 9$
      001834                       1194 1$:	; operator '+'|'-'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001834 CD 15 0F         [ 4] 1195 	call next_token
      001837 6B 01            [ 1] 1196 	ld (OP,sp),a 
      001839 A4 30            [ 1] 1197 	and a,#TK_GRP_MASK
      00183B A1 10            [ 1] 1198 	cp a,#TK_GRP_ADD 
      00183D 27 09            [ 1] 1199 	jreq 2$ 
      00183F                       1200 	_unget_token 
      00183F 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001844 A6 84            [ 1] 1201 	ld a,#TK_INTGR
      001846 20 19            [ 2] 1202 	jra 9$ 
      001848                       1203 2$: ; second term 
      001848 CD 17 E9         [ 4] 1204 	call term
      00184B 4D               [ 1] 1205 	tnz a 
      00184C 26 03            [ 1] 1206 	jrne 3$
      00184E CC 13 B5         [ 2] 1207 	jp syntax_error
      001851                       1208 3$:
      001851 7B 01            [ 1] 1209 	ld a,(OP,sp)
      001853 A1 10            [ 1] 1210 	cp a,#TK_PLUS 
      001855 26 05            [ 1] 1211 	jrne 4$
                                   1212 ; '+' operator	
      001857 CD 01 7E         [ 4] 1213 	call add24
      00185A 20 D8            [ 2] 1214 	jra 1$ 
      00185C                       1215 4$:	; '-' operator 
      00185C CD 01 9B         [ 4] 1216 	call sub24
      00185F 20 D3            [ 2] 1217 	jra 1$
      001861                       1218 9$:
      001861                       1219 	_drop VSIZE 
      001861 5B 01            [ 2]    1     addw sp,#VSIZE 
      001863 81               [ 4] 1220 	ret 
                                   1221 
                                   1222 ;---------------------------------------------
                                   1223 ; rel ::= expr rel_op expr
                                   1224 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1225 ;  relation return  integer , zero is false 
                                   1226 ;  output:
                                   1227 ;	 xstack		value  
                                   1228 ;---------------------------------------------
                           000001  1229 	RELOP=1
                           000001  1230 	VSIZE=1 
      001864                       1231 relation: 
      001864                       1232 	_vars VSIZE
      001864 52 01            [ 2]    1     sub sp,#VSIZE 
      001866 CD 18 2C         [ 4] 1233 	call expression
      001869 4D               [ 1] 1234 	tnz a 
      00186A 27 54            [ 1] 1235 	jreq 9$ 
                                   1236 ; expect rel_op or leave 
      00186C CD 15 0F         [ 4] 1237 	call next_token 
      00186F 6B 01            [ 1] 1238 	ld (RELOP,sp),a 
      001871 A4 30            [ 1] 1239 	and a,#TK_GRP_MASK
      001873 A1 30            [ 1] 1240 	cp a,#TK_GRP_RELOP 
      001875 27 09            [ 1] 1241 	jreq 2$
      001877 A6 84            [ 1] 1242 	ld a,#TK_INTGR 
      001879                       1243 	_unget_token 
      001879 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00187E 20 40            [ 2] 1244 	jra 9$ 
      001880                       1245 2$:	; expect another expression
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001880 CD 18 2C         [ 4] 1246 	call expression
      001883 4D               [ 1] 1247 	tnz a 
      001884 26 03            [ 1] 1248 	jrne 3$
      001886 CC 13 B5         [ 2] 1249 	jp syntax_error 
      001889                       1250 3$: 
      001889 CD 01 B8         [ 4] 1251 	call cp24 
      00188C                       1252 	_xpop  
      00188C 90 F6            [ 1]    1     ld a,(y)
      00188E 93               [ 1]    2     ldw x,y 
      00188F EE 01            [ 2]    3     ldw x,(1,x)
      001891 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001895 4D               [ 1] 1253 	tnz a 
      001896 2B 08            [ 1] 1254 	jrmi 4$
      001898 26 0C            [ 1] 1255 	jrne 5$
      00189A 35 02 00 0E      [ 1] 1256 	mov acc8,#2 ; i1==i2
      00189E 20 0A            [ 2] 1257 	jra 6$ 
      0018A0                       1258 4$: ; i1<i2
      0018A0 35 04 00 0E      [ 1] 1259 	mov acc8,#4 
      0018A4 20 04            [ 2] 1260 	jra 6$
      0018A6                       1261 5$: ; i1>i2
      0018A6 35 01 00 0E      [ 1] 1262 	mov acc8,#1  
      0018AA                       1263 6$: ; 0=false, -1=true 
      0018AA 5F               [ 1] 1264 	clrw x 
      0018AB C6 00 0E         [ 1] 1265 	ld a, acc8  
      0018AE 14 01            [ 1] 1266 	and a,(RELOP,sp)
      0018B0 27 03            [ 1] 1267 	jreq 7$
      0018B2 53               [ 2] 1268 	cplw x 
      0018B3 A6 FF            [ 1] 1269 	ld a,#255 
      0018B5                       1270 7$:	_xpush 
      0018B5 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018B9 90 F7            [ 1]    2     ld (y),a 
      0018BB 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018BE A6 84            [ 1] 1271 	ld a,#TK_INTGR
      0018C0                       1272 9$: 
      0018C0                       1273 	_drop VSIZE
      0018C0 5B 01            [ 2]    1     addw sp,#VSIZE 
      0018C2 81               [ 4] 1274 	ret 
                                   1275 
                                   1276 ;-------------------------------------------
                                   1277 ;  AND factor:  [NOT] relation | (condition)
                                   1278 ;  output:
                                   1279 ;     A      TK_INTGR|0
                                   1280 ;-------------------------------------------
                           000001  1281 	NOT_OP=1
      0018C3                       1282 and_factor:
      0018C3 4B 00            [ 1] 1283 	push #0 
      0018C5 CD 15 0F         [ 4] 1284 0$:	call next_token  
      0018C8 4D               [ 1] 1285 	tnz a 
      0018C9 27 25            [ 1] 1286 	jreq 8$ 
      0018CB A1 87            [ 1] 1287 	cp a,#TK_NOT 
      0018CD 26 04            [ 1] 1288 	jrne 1$ 
      0018CF 03 01            [ 1] 1289 	cpl (NOT_OP,sp)
      0018D1 20 F2            [ 2] 1290 	jra 0$ 
      0018D3                       1291 1$:	
      0018D3 A1 06            [ 1] 1292 	cp a,#TK_LPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      0018D5 26 0A            [ 1] 1293 	jrne 2$
      0018D7 CD 19 45         [ 4] 1294 	call condition
      0018DA A6 07            [ 1] 1295 	ld a,#TK_RPAREN 
      0018DC CD 16 D8         [ 4] 1296 	call expect
      0018DF 20 08            [ 2] 1297 	jra 3$
      0018E1                       1298 2$: _unget_token 
      0018E1 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      0018E6 CD 18 64         [ 4] 1299 	call relation
      0018E9                       1300 3$:
      0018E9 0D 01            [ 1] 1301 	tnz (NOT_OP,sp)
      0018EB 27 03            [ 1] 1302 	jreq 8$ 
      0018ED CD 01 FA         [ 4] 1303 	call cpl24
      0018F0                       1304 8$:
      0018F0                       1305 	_drop 1  
      0018F0 5B 01            [ 2]    1     addw sp,#1 
      0018F2 81               [ 4] 1306     ret 
                                   1307 
                                   1308 
                                   1309 ;--------------------------------------------
                                   1310 ;  AND operator as priority over OR||XOR 
                                   1311 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1312 ;          
                                   1313 ;  output:
                                   1314 ;     A     TK_INTGR|0
                                   1315 ;    xtack   value 
                                   1316 ;--------------------------------------------
      0018F3                       1317 and_cond:
      0018F3 CD 18 C3         [ 4] 1318 	call and_factor
      0018F6 4D               [ 1] 1319 	tnz a 
      0018F7 27 4B            [ 1] 1320 	jreq 9$  
      0018F9 CD 15 0F         [ 4] 1321 1$: call next_token 
      0018FC 4D               [ 1] 1322 	tnz a 
      0018FD 27 43            [ 1] 1323 	jreq 6$ 
      0018FF A1 88            [ 1] 1324 	cp a,#TK_AND 
      001901 27 07            [ 1] 1325 	jreq 3$
      001903                       1326 	_unget_token 
      001903 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001908 20 38            [ 2] 1327 	jra 6$ 
      00190A CD 18 C3         [ 4] 1328 3$:	call and_factor  
      00190D 4D               [ 1] 1329 	tnz a 
      00190E 26 03            [ 1] 1330 	jrne 4$
      001910 CC 13 B5         [ 2] 1331 	jp syntax_error 
      001913                       1332 4$:	
      001913                       1333 	_xpop 
      001913 90 F6            [ 1]    1     ld a,(y)
      001915 93               [ 1]    2     ldw x,y 
      001916 EE 01            [ 2]    3     ldw x,(1,x)
      001918 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00191C C7 00 0C         [ 1] 1334 	ld acc24,a 
      00191F CF 00 0D         [ 2] 1335 	ldw acc16,x
      001922                       1336 	_xpop 
      001922 90 F6            [ 1]    1     ld a,(y)
      001924 93               [ 1]    2     ldw x,y 
      001925 EE 01            [ 2]    3     ldw x,(1,x)
      001927 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      00192B C4 00 0C         [ 1] 1337 	and a,acc24 
      00192E 02               [ 1] 1338 	rlwa x 
      00192F C4 00 0D         [ 1] 1339 	and a,acc16 
      001932 02               [ 1] 1340 	rlwa x 
      001933 C4 00 0E         [ 1] 1341 	and a,acc8 
      001936 02               [ 1] 1342 	rlwa x
      001937                       1343 	_xpush
      001937 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00193B 90 F7            [ 1]    2     ld (y),a 
      00193D 90 EF 01         [ 2]    3     ldw (1,y),x 
      001940 20 B7            [ 2] 1344 	jra 1$  
      001942 A6 84            [ 1] 1345 6$: ld a,#TK_INTGR 
      001944 81               [ 4] 1346 9$:	ret 	 
                                   1347 
                                   1348 
                                   1349 ;--------------------------------------------
                                   1350 ; condition for IF and UNTIL 
                                   1351 ; operators: OR,XOR 
                                   1352 ; format:  and_cond [ OP and_cond ]* 
                                   1353 ; output:
                                   1354 ;    A        INTGR|0 
                                   1355 ;    xstack   value 
                                   1356 ;--------------------------------------------
                           000001  1357 	ATMP=1
                           000002  1358 	OP=2
                           000002  1359 	VSIZE=2 
      001945                       1360 condition:
      001945                       1361 	_vars VSIZE 
      001945 52 02            [ 2]    1     sub sp,#VSIZE 
      001947 CD 18 F3         [ 4] 1362 	call and_cond
      00194A 4D               [ 1] 1363 	tnz a 
      00194B 27 69            [ 1] 1364 	jreq 9$ 
      00194D CD 15 0F         [ 4] 1365 1$:	call next_token 
      001950 A1 89            [ 1] 1366 	cp a,#TK_OR 
      001952 27 0B            [ 1] 1367 	jreq 2$
      001954 A1 8A            [ 1] 1368 	cp a,#TK_XOR
      001956 27 07            [ 1] 1369 	jreq 2$ 
      001958                       1370 	_unget_token 
      001958 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00195D 20 55            [ 2] 1371 	jra 8$ 
      00195F 6B 02            [ 1] 1372 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001961 CD 18 F3         [ 4] 1373 	call and_cond
      001964 A1 84            [ 1] 1374 	cp a,#TK_INTGR 
      001966 27 03            [ 1] 1375 	jreq 3$
      001968 CC 13 B5         [ 2] 1376 	jp syntax_error 
      00196B                       1377 3$:	 
      00196B                       1378 	_xpop  ; rigth arg 
      00196B 90 F6            [ 1]    1     ld a,(y)
      00196D 93               [ 1]    2     ldw x,y 
      00196E EE 01            [ 2]    3     ldw x,(1,x)
      001970 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001974 C7 00 0C         [ 1] 1379 	ld acc24,a 
      001977 CF 00 0D         [ 2] 1380 	ldw acc16,x 
      00197A                       1381 	_xpop  ; left arg  
      00197A 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      00197C 93               [ 1]    2     ldw x,y 
      00197D EE 01            [ 2]    3     ldw x,(1,x)
      00197F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001983 6B 01            [ 1] 1382 	ld (ATMP,sp),a 
      001985 7B 02            [ 1] 1383 	ld a,(OP,sp)
      001987 A1 8A            [ 1] 1384 	cp a,#TK_XOR 
      001989 27 10            [ 1] 1385 	jreq 5$ 
      00198B                       1386 4$: ; A:X OR acc24   
      00198B 7B 01            [ 1] 1387 	ld a,(ATMP,sp)
      00198D CA 00 0C         [ 1] 1388 	or a,acc24 
      001990 02               [ 1] 1389 	rlwa x 
      001991 CA 00 0D         [ 1] 1390 	or a,acc16 
      001994 02               [ 1] 1391 	rlwa x 
      001995 CA 00 0E         [ 1] 1392 	or a,acc8 
      001998 02               [ 1] 1393 	rlwa x 
      001999 20 0E            [ 2] 1394 	jra 6$  
      00199B                       1395 5$: ; A:X XOR acc24 
      00199B 7B 01            [ 1] 1396 	ld a,(ATMP,sp)
      00199D C8 00 0C         [ 1] 1397 	xor a,acc24 
      0019A0 02               [ 1] 1398 	rlwa x 
      0019A1 C8 00 0D         [ 1] 1399 	xor a,acc16 
      0019A4 02               [ 1] 1400 	rlwa x 
      0019A5 C8 00 0E         [ 1] 1401 	xor a,acc8 
      0019A8 02               [ 1] 1402 	rlwa x 
      0019A9                       1403 6$: _xpush
      0019A9 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0019AD 90 F7            [ 1]    2     ld (y),a 
      0019AF 90 EF 01         [ 2]    3     ldw (1,y),x 
      0019B2 20 99            [ 2] 1404 	jra 1$ 
      0019B4 A6 84            [ 1] 1405 8$:	ld a,#TK_INTGR 
      0019B6                       1406 9$:	_drop VSIZE 
      0019B6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0019B8 81               [ 4] 1407 	ret 
                                   1408 
                                   1409 
                                   1410 ;--------------------------------------------
                                   1411 ; BASIC: HEX 
                                   1412 ; select hexadecimal base for integer print
                                   1413 ;---------------------------------------------
      0019B9                       1414 hex_base:
      0019B9 35 10 00 0A      [ 1] 1415 	mov base,#16 
      0019BD 81               [ 4] 1416 	ret 
                                   1417 
                                   1418 ;--------------------------------------------
                                   1419 ; BASIC: DEC 
                                   1420 ; select decimal base for integer print
                                   1421 ;---------------------------------------------
      0019BE                       1422 dec_base:
      0019BE 35 0A 00 0A      [ 1] 1423 	mov base,#10
      0019C2 81               [ 4] 1424 	ret 
                                   1425 
                                   1426 ;------------------------
                                   1427 ; BASIC: FREE 
                                   1428 ; return free size in RAM 
                                   1429 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



                                   1430 ;   A:x		size 
                                   1431 ;--------------------------
      0019C3                       1432 free:
      0019C3 4F               [ 1] 1433 	clr a 
      0019C4 AE 16 68         [ 2] 1434 	ldw x,#tib 
      0019C7 72 B0 00 31      [ 2] 1435 	subw x,dvar_end 
      0019CB 81               [ 4] 1436 	ret 
                                   1437 
                                   1438 ;------------------------------
                                   1439 ; BASIC: SIZE 
                                   1440 ; command that print 
                                   1441 ; program start addres and size 
                                   1442 ;------------------------------
      0019CC                       1443 cmd_size:
      0019CC 3B 00 0A         [ 1] 1444 	push base 
      0019CF AE 1B AB         [ 2] 1445 	ldw x,#PROG_ADDR 
      0019D2 CD 06 82         [ 4] 1446 	call puts 
      0019D5 CE 00 1B         [ 2] 1447 	ldw x,txtbgn     
      0019D8 35 10 00 0A      [ 1] 1448 	mov base,#16 
      0019DC CD 15 57         [ 4] 1449 	call prt_i16
      0019DF 32 00 0A         [ 1] 1450 	pop base 
      0019E2 AE 1B BD         [ 2] 1451 	ldw x,#PROG_SIZE 
      0019E5 CD 06 82         [ 4] 1452 	call puts 
      0019E8 CE 00 1D         [ 2] 1453 	ldw x,txtend 
      0019EB 72 B0 00 1B      [ 2] 1454 	subw x,txtbgn 
      0019EF CD 15 57         [ 4] 1455 	call prt_i16
      0019F2 AE 1B CE         [ 2] 1456 	ldw x,#STR_BYTES 
      0019F5 CD 06 82         [ 4] 1457 	call puts  
      0019F8 81               [ 4] 1458 	ret 
                                   1459 
                                   1460 
                                   1461 ;------------------------
                                   1462 ; BASIC: UBOUND  
                                   1463 ; return array variable size 
                                   1464 ; and set 'array_size' variable 
                                   1465 ; output:
                                   1466 ;   A:X 	array_size
                                   1467 ;--------------------------
      0019F9                       1468 ubound:
      0019F9 CD 19 C3         [ 4] 1469 	call free 
      0019FC A6 03            [ 1] 1470 	ld a,#CELL_SIZE 
      0019FE 62               [ 2] 1471 	div x,a 
      0019FF CF 00 20         [ 2] 1472 	ldw array_size,x
      001A02 4F               [ 1] 1473 	clr a 
      001A03 81               [ 4] 1474 	ret 
                                   1475 
                                   1476 ;-----------------------------
                                   1477 ; BASIC: LET var=expr 
                                   1478 ; variable assignement 
                                   1479 ; output:
                                   1480 ;   A 		TK_NONE 
                                   1481 ;-----------------------------
      001A04                       1482 let::
      001A04 CD 15 0F         [ 4] 1483 	call next_token 
      001A07 A1 85            [ 1] 1484 	cp a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001A09 27 0C            [ 1] 1485 	jreq let_var
      001A0B A1 05            [ 1] 1486 	cp a,#TK_ARRAY 
      001A0D 27 03            [ 1] 1487 	jreq  let_array
      001A0F CC 13 B5         [ 2] 1488 	jp syntax_error
      001A12                       1489 let_array:
      001A12 CD 17 06         [ 4] 1490 	call get_array_element
      001A15 20 03            [ 2] 1491 	jra let_eval 
      001A17                       1492 let_var:
      001A17 CD 15 37         [ 4] 1493 	call get_addr
      001A1A                       1494 let_eval:
      001A1A CF 00 19         [ 2] 1495 	ldw ptr16,x  ; variable address 
      001A1D CD 15 0F         [ 4] 1496 	call next_token 
      001A20 A1 32            [ 1] 1497 	cp a,#TK_EQUAL
      001A22 27 03            [ 1] 1498 	jreq 1$
      001A24 CC 13 B5         [ 2] 1499 	jp syntax_error
      001A27                       1500 1$:	
      001A27 CD 19 45         [ 4] 1501 	call condition   
      001A2A A1 84            [ 1] 1502 	cp a,#TK_INTGR 
      001A2C 27 03            [ 1] 1503 	jreq 2$
      001A2E CC 13 B5         [ 2] 1504 	jp syntax_error
      001A31                       1505 2$:	
      001A31                       1506 	_xpop ; value 
      001A31 90 F6            [ 1]    1     ld a,(y)
      001A33 93               [ 1]    2     ldw x,y 
      001A34 EE 01            [ 2]    3     ldw x,(1,x)
      001A36 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A3A                       1507 3$:
      001A3A 72 C7 00 19      [ 4] 1508 	ld [ptr16],a
      001A3E 72 5C 00 1A      [ 1] 1509 	inc ptr8  
      001A42 72 CF 00 19      [ 5] 1510 	ldw [ptr16],x 
      001A46 81               [ 4] 1511 	ret 
                                   1512 
                                   1513 
                                   1514 ;--------------------------
                                   1515 ; return constant/dvar value 
                                   1516 ; from it's record address
                                   1517 ; input:
                                   1518 ;	X	*const record 
                                   1519 ; output:
                                   1520 ;   A:X   const  value
                                   1521 ;--------------------------
      001A47                       1522 get_value: ; -- i 
      001A47 F6               [ 1] 1523 	ld a,(x) ; record size 
      001A48 A4 0F            [ 1] 1524 	and a,#NAME_MAX_LEN
      001A4A A0 03            [ 1] 1525 	sub a,#CELL_SIZE ; * value 
      001A4C 88               [ 1] 1526 	push a 
      001A4D 4B 00            [ 1] 1527 	push #0 
      001A4F 72 FB 01         [ 2] 1528 	addw x,(1,sp)
      001A52 F6               [ 1] 1529 	ld a,(x)
      001A53 EE 01            [ 2] 1530 	ldw x,(1,x)
      001A55                       1531 	_drop 2
      001A55 5B 02            [ 2]    1     addw sp,#2 
      001A57 81               [ 4] 1532 	ret 
                                   1533 
                                   1534 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



                                   1535 ;--------------------------
                                   1536 ; BASIC: EEFREE 
                                   1537 ; eeprom_free 
                                   1538 ; search end of data  
                                   1539 ; in EEPROM 
                                   1540 ; input:
                                   1541 ;    none 
                                   1542 ; output:
                                   1543 ;    A:X     address free
                                   1544 ;-------------------------
      001A58                       1545 func_eefree:
      001A58 AE 40 00         [ 2] 1546 	ldw x,#EEPROM_BASE 
      001A5B 35 08 00 0E      [ 1] 1547 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001A5F A3 47 F8         [ 2] 1548     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001A62 24 17            [ 1] 1549 	jruge 8$ ; no free space 
      001A64 F6               [ 1] 1550 2$: ld a,(x)
      001A65 26 0C            [ 1] 1551 	jrne 3$
      001A67 5C               [ 1] 1552 	incw x 
      001A68 72 5A 00 0E      [ 1] 1553 	dec acc8 
      001A6C 26 F6            [ 1] 1554 	jrne 2$
      001A6E 1D 00 08         [ 2] 1555 	subw x,#8 
      001A71 20 09            [ 2] 1556 	jra 9$  
      001A73 F6               [ 1] 1557 3$: ld a,(x)
      001A74 5C               [ 1] 1558 	incw x
      001A75 4D               [ 1] 1559 	tnz a  
      001A76 26 FB            [ 1] 1560 	jrne 3$
      001A78 5A               [ 2] 1561 	decw x   
      001A79 20 E0            [ 2] 1562 	jra 1$ 
      001A7B 5F               [ 1] 1563 8$: clrw x ; no free space 
      001A7C 4F               [ 1] 1564 9$: clr a 
      001A7D CF 00 23         [ 2] 1565 	ldw free_eeprom,x ; save in system variable 
      001A80 81               [ 4] 1566 	ret 
                                   1567 
                           000005  1568 REC_XTRA_BYTES=5 
                                   1569 ;--------------------------
                                   1570 ; search constant/dim_var name 
                                   1571 ; format of record  
                                   1572 ;   .byte record length 
                                   1573 ;         = strlen(name)+5 
                                   1574 ;   .asciz name (variable length)
                                   1575 ;   .int24 value (3 bytes )
                                   1576 ; a constant record use 7+ bytes
                                   1577 ; constants are saved in EEPROM  
                                   1578 ; input:
                                   1579 ;    A     record_len 
                                   1580 ;    X     *name
                                   1581 ; output:
                                   1582 ;    X     address|0
                                   1583 ; use:
                                   1584 ;   A,Y, acc16 
                                   1585 ;-------------------------
                           000001  1586 	NAMEPTR=1 ; target name pointer 
                           000003  1587 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1588 	RECLEN=5  ; record length of target
                           000007  1589 	LIMIT=7   ; search area limit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                           000008  1590 	VSIZE=8  
      001A81                       1591 search_name:
      001A81 90 89            [ 2] 1592 	pushw y 
      001A83                       1593 	_vars VSIZE
      001A83 52 08            [ 2]    1     sub sp,#VSIZE 
      001A85 72 5F 00 0D      [ 1] 1594 	clr acc16 
      001A89 6B 05            [ 1] 1595 	ld (RECLEN,sp),a    
      001A8B 1F 01            [ 2] 1596 	ldw (NAMEPTR,sp),x
      001A8D CE 00 31         [ 2] 1597 	ldw x,dvar_end 
      001A90 1F 07            [ 2] 1598 	ldw (LIMIT,sp),x 
      001A92 90 CE 00 2F      [ 2] 1599 	ldw y,dvar_bgn
      001A96 17 03            [ 2] 1600 1$:	ldw (WLKPTR,sp),y
      001A98 93               [ 1] 1601 	ldw x,y 
      001A99 13 07            [ 2] 1602 	cpw x, (LIMIT,sp) 
      001A9B 24 20            [ 1] 1603 	jruge 7$ ; no match found 
      001A9D 90 F6            [ 1] 1604 	ld a,(y)
      001A9F A4 0F            [ 1] 1605 	and a,#NAME_MAX_LEN
      001AA1 11 05            [ 1] 1606 	cp a,(RECLEN,sp)
      001AA3 26 09            [ 1] 1607 	jrne 2$ 
      001AA5 90 5C            [ 1] 1608 	incw y 
      001AA7 1E 01            [ 2] 1609 	ldw x,(NAMEPTR,sp)
      001AA9 CD 10 BC         [ 4] 1610 	call strcmp
      001AAC 26 13            [ 1] 1611 	jrne 8$ ; match found 
      001AAE                       1612 2$: ; skip this one 	
      001AAE 16 03            [ 2] 1613 	ldW Y,(WLKPTR,sp)
      001AB0 90 F6            [ 1] 1614 	ld a,(y)
      001AB2 A4 0F            [ 1] 1615 	and a,#NAME_MAX_LEN 
      001AB4 C7 00 0E         [ 1] 1616 	ld acc8,a 
      001AB7 72 B9 00 0D      [ 2] 1617 	addw y,acc16 
      001ABB 20 D9            [ 2] 1618 	jra 1$  
      001ABD                       1619 7$: ; no match found 
      001ABD 0F 03            [ 1] 1620 	clr (WLKPTR,sp)
      001ABF 0F 04            [ 1] 1621 	clr (WLKPTR+1,sp)
      001AC1                       1622 8$: ; match found 
      001AC1 1E 03            [ 2] 1623 	ldw x,(WLKPTR,sp) ; record address 
      001AC3                       1624 9$:	_DROP VSIZE
      001AC3 5B 08            [ 2]    1     addw sp,#VSIZE 
      001AC5 90 85            [ 2] 1625 	popw y 
      001AC7 81               [ 4] 1626 	 ret 
                                   1627 
                                   1628 ;--------------------------------------------
                                   1629 ; BASIC: CONST name=value [, name=value]*
                                   1630 ; define constant(s) saved in EEPROM
                                   1631 ; share most of his code with cmd_dim 
                                   1632 ;--------------------------------------------
                           000001  1633 	VAR_NAME=1 
                           000003  1634 	REC_LEN=3
                           000005  1635 	RONLY=5
                           000005  1636 	VSIZE=5
      001AC8                       1637 cmd_const:
      001AC8 CD 16 CD         [ 4] 1638 	call runtime_only
      001ACB                       1639 	_vars VSIZE 
      001ACB 52 05            [ 2]    1     sub sp,#VSIZE 
      001ACD A6 80            [ 1] 1640 	ld a,#128 
      001ACF 6B 05            [ 1] 1641 	ld (RONLY,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001AD1 0F 03            [ 1] 1642 	clr (REC_LEN,sp)
      001AD3 20 09            [ 2] 1643 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1644 
                                   1645 ;---------------------------------
                                   1646 ; BASIC: DIM var_name [var_name]* 
                                   1647 ; create named variables at end 
                                   1648 ; of BASIC program. 
                                   1649 ; These variables are initialized 
                                   1650 ; to 0. 
                                   1651 ; record format same ast CONST 
                                   1652 ; but r/w because stored in RAM 
                                   1653 ;---------------------------------
      001AD5                       1654 cmd_dim:
      001AD5 CD 16 CD         [ 4] 1655 	call runtime_only
      001AD8                       1656 cmd_dim1:	
      001AD8                       1657 	_vars VSIZE
      001AD8 52 05            [ 2]    1     sub sp,#VSIZE 
      001ADA 0F 03            [ 1] 1658 	clr (REC_LEN,sp )
      001ADC 0F 05            [ 1] 1659 	clr (RONLY,sp)
      001ADE                       1660 cmd_dim2: 
      001ADE CD 15 0F         [ 4] 1661 0$:	call next_token 
      001AE1 A1 03            [ 1] 1662 	cp a,#TK_LABEL  
      001AE3 27 03            [ 1] 1663 	jreq 1$ 
      001AE5 CC 13 B5         [ 2] 1664 	jp syntax_error 
      001AE8 1F 01            [ 2] 1665 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001AEA CD 10 B1         [ 4] 1666 	call strlen
      001AED AB 05            [ 1] 1667 	add a,#REC_XTRA_BYTES
      001AEF 6B 04            [ 1] 1668 	ld (REC_LEN+1,sp),a
      001AF1 CD 15 28         [ 4] 1669 	call skip_string 
      001AF4 7B 04            [ 1] 1670 	ld a,(REC_LEN+1,sp)
      001AF6 1E 01            [ 2] 1671 	ldw x,(VAR_NAME,sp) 
      001AF8 CD 1A 81         [ 4] 1672 	call search_name  
      001AFB 5D               [ 2] 1673 	tnzw x 
      001AFC 27 05            [ 1] 1674 	jreq 2$
      001AFE A6 08            [ 1] 1675 	ld a,#ERR_DUPLICATE
      001B00 CC 13 B7         [ 2] 1676 	jp tb_error  
      001B03 CE 00 31         [ 2] 1677 2$:	ldw x,dvar_end 
      001B06 7B 04            [ 1] 1678 	ld a,(REC_LEN+1,sp)
      001B08 1A 05            [ 1] 1679 	or a,(RONLY,sp)
      001B0A F7               [ 1] 1680 	ld (x),a 
      001B0B 5C               [ 1] 1681 	incw x 
      001B0C 90 89            [ 2] 1682 	pushw y 
      001B0E 16 03            [ 2] 1683 	ldw y,(VAR_NAME+2,sp)
      001B10 CD 10 CD         [ 4] 1684 	call strcpy
      001B13 90 85            [ 2] 1685 	popw y 
      001B15 5A               [ 2] 1686 	decw x
      001B16 72 FB 03         [ 2] 1687 	addw x,(REC_LEN,sp)
      001B19 CF 00 31         [ 2] 1688 	ldw dvar_end,x 
      001B1C 1D 00 03         [ 2] 1689 	subw x,#CELL_SIZE  
      001B1F 7F               [ 1] 1690 	clr (x)
      001B20 6F 01            [ 1] 1691 	clr (1,x)  
      001B22 6F 02            [ 1] 1692 	clr (2,x)
      001B24 CD 15 0F         [ 4] 1693 4$: call next_token 
      001B27 A1 08            [ 1] 1694 	cp a,#TK_COMMA 
      001B29 27 B3            [ 1] 1695 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001B2B A1 32            [ 1] 1696 	cp a,#TK_EQUAL 
      001B2D 26 2A            [ 1] 1697 	jrne 8$
                                   1698 ; initialize variable 
      001B2F CD 19 45         [ 4] 1699 	call condition 
      001B32 A1 84            [ 1] 1700 	cp a,#TK_INTGR
      001B34 27 03            [ 1] 1701 	jreq 5$
      001B36 CC 13 B5         [ 2] 1702 	jp syntax_error
      001B39 CE 00 31         [ 2] 1703 5$: ldw x,dvar_end 
      001B3C 1D 00 03         [ 2] 1704 	subw x,#CELL_SIZE 
      001B3F CF 00 19         [ 2] 1705 	ldw ptr16,x 
      001B42                       1706 	_xpop 
      001B42 90 F6            [ 1]    1     ld a,(y)
      001B44 93               [ 1]    2     ldw x,y 
      001B45 EE 01            [ 2]    3     ldw x,(1,x)
      001B47 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B4B 72 C7 00 19      [ 4] 1707 	ld [ptr16],a 
      001B4F 72 5C 00 1A      [ 1] 1708 	inc ptr8 
      001B53 72 CF 00 19      [ 5] 1709 	ldw [ptr16],x 
      001B57 20 CB            [ 2] 1710 	jra 4$ 
      001B59                       1711 8$:	
      001B59                       1712 	_unget_token 	
      001B59 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001B5E                       1713 	_drop VSIZE 
      001B5E 5B 05            [ 2]    1     addw sp,#VSIZE 
      001B60 CD 19 F9         [ 4] 1714 	call ubound 
      001B63 81               [ 4] 1715 	ret 
                                   1716 
                                   1717 
                                   1718 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1719 ; return program size 
                                   1720 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B64                       1721 prog_size:
      001B64 CE 00 1D         [ 2] 1722 	ldw x,txtend 
      001B67 72 B0 00 1B      [ 2] 1723 	subw x,txtbgn 
      001B6B 81               [ 4] 1724 	ret 
                                   1725 
                                   1726 ;----------------------------
                                   1727 ; print program information 
                                   1728 ;---------------------------
      001B6C                       1729 program_info: 
      001B6C AE 1B AB         [ 2] 1730 	ldw x,#PROG_ADDR 
      001B6F CD 06 82         [ 4] 1731 	call puts 
      001B72 CE 00 1B         [ 2] 1732 	ldw x,txtbgn 
      001B75 35 10 00 0A      [ 1] 1733 	mov base,#16 
      001B79 CD 15 57         [ 4] 1734 	call prt_i16
      001B7C 35 0A 00 0A      [ 1] 1735 	mov base,#10  
      001B80 AE 1B BD         [ 2] 1736 	ldw x,#PROG_SIZE
      001B83 CD 06 82         [ 4] 1737 	call puts 
      001B86 CD 1B 64         [ 4] 1738 	call prog_size 
      001B89 CD 15 57         [ 4] 1739 	call prt_i16 
      001B8C AE 1B CE         [ 2] 1740 	ldw x,#STR_BYTES 
      001B8F CD 06 82         [ 4] 1741 	call puts
      001B92 CE 00 1B         [ 2] 1742 	ldw x,txtbgn
      001B95 A3 34 04         [ 2] 1743 	cpw x,#app 
      001B98 25 05            [ 1] 1744 	jrult 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001B9A AE 1B D5         [ 2] 1745 	ldw x,#FLASH_MEM 
      001B9D 20 03            [ 2] 1746 	jra 3$
      001B9F AE 1B E6         [ 2] 1747 2$: ldw x,#RAM_MEM 	 
      001BA2 CD 06 82         [ 4] 1748 3$:	call puts 
      001BA5 A6 0D            [ 1] 1749 	ld a,#CR 
      001BA7 CD 06 25         [ 4] 1750 	call putc
      001BAA 81               [ 4] 1751 	ret 
                                   1752 
      001BAB 70 72 6F 67 72 61 6D  1753 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001BBD 2C 20 70 72 6F 67 72  1754 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001BCE 20 62 79 74 65 73 00  1755 STR_BYTES: .asciz " bytes" 
      001BD5 20 69 6E 20 46 4C 41  1756 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001BE6 20 69 6E 20 52 41 4D  1757 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1758 
                                   1759 
                                   1760 ;----------------------------
                                   1761 ; BASIC: LIST [[start][-end]]
                                   1762 ; list program lines 
                                   1763 ; form start to end 
                                   1764 ; if empty argument list then 
                                   1765 ; list all.
                                   1766 ;----------------------------
                           000001  1767 	FIRST=1
                           000003  1768 	LAST=3 
                           000005  1769 	LN_PTR=5
                           000006  1770 	VSIZE=6 
      001BF5                       1771 cmd_list:
      001BF5 CD 16 C2         [ 4] 1772 	call cmd_line_only
      001BF8 CD 1B 64         [ 4] 1773 	call prog_size 
      001BFB 22 01            [ 1] 1774 	jrugt 3$
      001BFD 81               [ 4] 1775 	ret 
      001BFE                       1776 3$: _vars VSIZE
      001BFE 52 06            [ 2]    1     sub sp,#VSIZE 
      001C00 CE 00 1B         [ 2] 1777 	ldw x,txtbgn 
      001C03 1F 05            [ 2] 1778 	ldw (LN_PTR,sp),x 
      001C05 FE               [ 2] 1779 	ldw x,(x) 
      001C06 1F 01            [ 2] 1780 	ldw (FIRST,sp),x ; list from first line 
      001C08 AE 7F FF         [ 2] 1781 	ldw x,#MAX_LINENO ; biggest line number 
      001C0B 1F 03            [ 2] 1782 	ldw (LAST,sp),x 
      001C0D CD 15 0F         [ 4] 1783 	call next_token 
      001C10 A1 84            [ 1] 1784 	cp a,#TK_INTGR
      001C12 27 0F            [ 1] 1785 	jreq start_from 
      001C14                       1786 is_minus: 	
      001C14 A1 11            [ 1] 1787 	cp a,#TK_MINUS 
      001C16 27 36            [ 1] 1788 	jreq end_at_line
      001C18 A1 00            [ 1] 1789 	cp a,#TK_NONE
      001C1A 27 49            [ 1] 1790 	jreq list_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001C1C A1 09            [ 1] 1791 	cp a,#TK_COLON 
      001C1E 27 45            [ 1] 1792 	jreq list_loop
      001C20 CC 13 B5         [ 2] 1793 	jp syntax_error
      001C23                       1794 start_from:	 
      001C23 CD 15 41         [ 4] 1795 	call get_int24
      001C26 1F 01            [ 2] 1796 	ldw (FIRST,sp),x	
      001C28                       1797 lines_skip:
      001C28 90 89            [ 2] 1798 	pushw y 
      001C2A 4F               [ 1] 1799 	clr a 
      001C2B CD 09 6B         [ 4] 1800 	call search_lineno 
      001C2E 5D               [ 2] 1801 	tnzw x 
      001C2F 26 01            [ 1] 1802 	jrne 1$
      001C31 93               [ 1] 1803 	ldw x,y 
      001C32 90 85            [ 2] 1804 1$:	popw y 
      001C34 1F 05            [ 2] 1805 	ldw (LN_PTR,sp),x 
      001C36 CD 15 0F         [ 4] 1806 	call next_token 
      001C39 A1 11            [ 1] 1807 	cp a,#TK_MINUS 
      001C3B 27 11            [ 1] 1808 	jreq end_at_line 
      001C3D A1 00            [ 1] 1809 	cp a,#TK_NONE 
      001C3F 27 07            [ 1] 1810 	jreq 2$
      001C41 A1 09            [ 1] 1811 	cp a,#TK_COLON 
      001C43 27 03            [ 1] 1812 	jreq 2$
      001C45 CC 13 B5         [ 2] 1813 	jp syntax_error 
      001C48                       1814 2$:
      001C48 1E 01            [ 2] 1815 	ldw x,(FIRST,sp)
      001C4A 1F 03            [ 2] 1816 	ldw (LAST,sp),x 
      001C4C 20 17            [ 2] 1817 	jra list_loop 
      001C4E                       1818 end_at_line:
                                   1819 ; expect ending line# 
      001C4E CD 15 0F         [ 4] 1820     call next_token 
      001C51 A1 84            [ 1] 1821 	cp a,#TK_INTGR
      001C53 27 0B            [ 1] 1822 	jreq 1$
      001C55 A1 00            [ 1] 1823 	cp a,#TK_NONE 
      001C57 27 0C            [ 1] 1824 	jreq list_loop 
      001C59 A1 09            [ 1] 1825 	cp a,#TK_COLON 
      001C5B 27 08            [ 1] 1826 	jreq list_loop 
      001C5D CC 13 B5         [ 2] 1827 	jp syntax_error 
      001C60                       1828 1$:
      001C60 CD 15 41         [ 4] 1829 	call get_int24 
      001C63 1F 03            [ 2] 1830 	ldw (LAST,sp),x 
                                   1831 ; print loop
      001C65                       1832 list_loop:
      001C65 1E 05            [ 2] 1833 	ldw x,(LN_PTR,sp)
      001C67 E6 02            [ 1] 1834 	ld a,(2,x) 
      001C69 CD 1D 0D         [ 4] 1835 	call prt_basic_line
      001C6C 1E 05            [ 2] 1836 	ldw x,(LN_PTR,sp)
      001C6E E6 02            [ 1] 1837 	ld a,(2,x)
      001C70 C7 00 0E         [ 1] 1838 	ld acc8,a 
      001C73 72 5F 00 0D      [ 1] 1839 	clr acc16 
      001C77 72 BB 00 0D      [ 2] 1840 	addw x,acc16
      001C7B C3 00 1D         [ 2] 1841 	cpw x,txtend 
      001C7E 2A 07            [ 1] 1842 	jrpl list_exit
      001C80 1F 05            [ 2] 1843 	ldw (LN_PTR,sp),x
      001C82 FE               [ 2] 1844 	ldw x,(x)
      001C83 13 03            [ 2] 1845 	cpw x,(LAST,sp)  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001C85 2D DE            [ 1] 1846 	jrsle list_loop
      001C87                       1847 list_exit:
      001C87 55 00 02 00 01   [ 1] 1848 	mov in,count 
      001C8C AE 16 B8         [ 2] 1849 	ldw x,#pad 
      001C8F CF 00 04         [ 2] 1850 	ldw basicptr,x 
      001C92                       1851 	_drop VSIZE 
      001C92 5B 06            [ 2]    1     addw sp,#VSIZE 
      001C94 CD 1B 6C         [ 4] 1852 	call program_info
      001C97 72 0D 00 22 06   [ 2] 1853 	btjf flags,#FLN_REJECTED,9$
      001C9C AE 1C A3         [ 2] 1854 	ldw x,#LINES_REJECTED
      001C9F CD 06 82         [ 4] 1855 	call puts
      001CA2                       1856 9$: 
      001CA2 81               [ 4] 1857 	ret
      001CA3 57 41 52 4E 49 4E 47  1858 LINES_REJECTED: .asciz "WARNING: lines missing in this program.\n"
             3A 20 6C 69 6E 65 73
             20 6D 69 73 73 69 6E
             67 20 69 6E 20 74 68
             69 73 20 70 72 6F 67
             72 61 6D 2E 0A 00
                                   1859 
                                   1860 ;--------------------------
                                   1861 ; BASIC: EDIT label 
                                   1862 ;  copy program in FLASH 
                                   1863 ;  to RAM for edition 
                                   1864 ;-------------------------
      001CCC                       1865 cmd_edit:
      001CCC CD 16 C2         [ 4] 1866 	call cmd_line_only
      001CCF A6 03            [ 1] 1867 	ld a,#TK_LABEL 
      001CD1 CD 16 D8         [ 4] 1868 	call expect  
      001CD4 89               [ 2] 1869 	pushw x 
      001CD5 CD 15 28         [ 4] 1870 	call skip_string
      001CD8 85               [ 2] 1871 	popw x 
      001CD9 CD 2F 07         [ 4] 1872 	call search_program 
      001CDC 26 06            [ 1] 1873     jrne 1$ 
      001CDE AE 00 12         [ 2] 1874 	ldw x,#ERR_NO_PROGRAM
      001CE1 CC 13 B7         [ 2] 1875 	jp tb_error 
      001CE4 90 89            [ 2] 1876 1$: pushw y 
      001CE6 90 93            [ 1] 1877 	ldw y,x ; source address 
      001CE8 1D 00 04         [ 2] 1878 	subw x,#4
      001CEB EE 02            [ 2] 1879 	ldw x,(2,x) ; program size 
      001CED 1C 00 04         [ 2] 1880 	addw x,#4 
      001CF0 CF 00 0D         [ 2] 1881 	ldw acc16,x  ; bytes to copy 
      001CF3 AE 00 8C         [ 2] 1882 	ldw x,#rsign ; destination address 
      001CF6 72 A2 00 04      [ 2] 1883 	subw y,#4 
      001CFA CD 10 DD         [ 4] 1884 	call move  
      001CFD AE 00 90         [ 2] 1885 	ldw x,#free_ram 
      001D00 CF 00 1B         [ 2] 1886 	ldw txtbgn,x 
      001D03 72 BB 00 8E      [ 2] 1887 	addw x,rsize  
      001D07 CF 00 1D         [ 2] 1888 	ldw txtend,x
      001D0A 90 85            [ 2] 1889 	popw y  
      001D0C 81               [ 4] 1890 	ret 
                                   1891 
                                   1892 ;--------------------------
                                   1893 ; decompile line from token list
                                   1894 ; and print it. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1895 ; input:
                                   1896 ;   A       stop at this position 
                                   1897 ;   X 		pointer at line
                                   1898 ; output:
                                   1899 ;   none 
                                   1900 ;--------------------------	
      001D0D                       1901 prt_basic_line:
      001D0D 90 89            [ 2] 1902 	pushw y 
      001D0F C7 00 02         [ 1] 1903 	ld count,a 
      001D12 E6 02            [ 1] 1904 	ld a,(2,x)
      001D14 C1 00 02         [ 1] 1905 	cp a,count 
      001D17 2A 03            [ 1] 1906 	jrpl 1$ 
      001D19 C7 00 02         [ 1] 1907 	ld count,a 
      001D1C CF 00 04         [ 2] 1908 1$:	ldw basicptr,x 
      001D1F 90 AE 16 68      [ 2] 1909 	ldw y,#tib  
      001D23 CD 0E E4         [ 4] 1910 	call decompile 
      001D26 CD 06 82         [ 4] 1911 	call puts 
      001D29 A6 0D            [ 1] 1912 	ld a,#CR 
      001D2B CD 06 25         [ 4] 1913 	call putc 
      001D2E 90 85            [ 2] 1914 	popw y 
      001D30 81               [ 4] 1915 	ret 
                                   1916 
                                   1917 
                                   1918 ;---------------------------------
                                   1919 ; BASIC: PRINT|? arg_list 
                                   1920 ; print values from argument list
                                   1921 ;----------------------------------
                           000001  1922 	SEMICOL=1
                           000001  1923 	VSIZE=1
      001D31                       1924 cmd_print:
      001D31                       1925 	_vars VSIZE 
      001D31 52 01            [ 2]    1     sub sp,#VSIZE 
      001D33                       1926 reset_semicol:
      001D33 0F 01            [ 1] 1927 	clr (SEMICOL,sp)
      001D35                       1928 prt_loop:
      001D35 CD 15 0F         [ 4] 1929 	call next_token
      001D38 A1 02            [ 1] 1930 	cp a,#CMD_END 
      001D3A 25 08            [ 1] 1931 	jrult 0$
      001D3C A1 09            [ 1] 1932 	cp a,#TK_COLON 
      001D3E 27 04            [ 1] 1933 	jreq 0$
      001D40 A1 80            [ 1] 1934 	cp a,#TK_CMD
      001D42 26 07            [ 1] 1935 	jrne 10$
      001D44                       1936 0$:
      001D44                       1937 	_unget_token 
      001D44 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001D49 20 56            [ 2] 1938 	jra 8$ 
      001D4B                       1939 10$:	
      001D4B A1 02            [ 1] 1940 	cp a,#TK_QSTR
      001D4D 27 12            [ 1] 1941 	jreq 1$
      001D4F A1 04            [ 1] 1942 	cp a,#TK_CHAR 
      001D51 27 1B            [ 1] 1943 	jreq 2$ 
      001D53 A1 82            [ 1] 1944 	cp a,#TK_CFUNC 
      001D55 27 1F            [ 1] 1945 	jreq 3$
      001D57 A1 0A            [ 1] 1946 	cp a,#TK_SEMIC  
      001D59 27 2A            [ 1] 1947 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001D5B A1 08            [ 1] 1948 	cp a,#TK_COMMA
      001D5D 27 2A            [ 1] 1949 	jreq 5$
      001D5F 20 2F            [ 2] 1950 	jra 7$ 
      001D61                       1951 1$:	; print string 
      001D61 CD 06 82         [ 4] 1952 	call puts
      001D64 5C               [ 1] 1953 	incw x
      001D65 72 B0 00 04      [ 2] 1954 	subw x,basicptr 
      001D69 CF 00 00         [ 2] 1955 	ldw in.w,x  
      001D6C 20 C5            [ 2] 1956 	jra reset_semicol
      001D6E                       1957 2$:	; print character 
      001D6E CD 15 51         [ 4] 1958 	call get_char 
      001D71 CD 06 25         [ 4] 1959 	call putc 
      001D74 20 BD            [ 2] 1960 	jra reset_semicol 
      001D76                       1961 3$: ; print character function value  	
      001D76                       1962 	_get_code_addr 
      001D76 FE               [ 2]    1         ldw x,(x)
      001D77 72 5C 00 01      [ 1]    2         inc in 
      001D7B 72 5C 00 01      [ 1]    3         inc in 
      001D7F FD               [ 4] 1963 	call (x)
      001D80 CD 06 25         [ 4] 1964 	call putc
      001D83 20 AE            [ 2] 1965 	jra reset_semicol 
      001D85                       1966 4$: ; set semi-colon  state 
      001D85 03 01            [ 1] 1967 	cpl (SEMICOL,sp)
      001D87 20 AC            [ 2] 1968 	jra prt_loop 
      001D89                       1969 5$: ; skip to next terminal tabulation
                                   1970      ; terminal TAB are 8 colons 
      001D89 A6 09            [ 1] 1971      ld a,#9 
      001D8B CD 06 25         [ 4] 1972 	 call putc 
      001D8E 20 A3            [ 2] 1973 	 jra reset_semicol	    
      001D90                       1974 7$:	
      001D90                       1975 	_unget_token 
      001D90 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      001D95 CD 19 45         [ 4] 1976 	call condition
      001D98 4D               [ 1] 1977 	tnz a 
      001D99 27 06            [ 1] 1978 	jreq 8$    
      001D9B CD 15 79         [ 4] 1979     call print_top
      001D9E CC 1D 33         [ 2] 1980 	jp reset_semicol 
      001DA1                       1981 8$:
      001DA1 0D 01            [ 1] 1982 	tnz (SEMICOL,sp)
      001DA3 26 05            [ 1] 1983 	jrne 9$
      001DA5 A6 0D            [ 1] 1984 	ld a,#CR 
      001DA7 CD 06 25         [ 4] 1985     call putc 
      001DAA                       1986 9$:	_drop VSIZE 
      001DAA 5B 01            [ 2]    1     addw sp,#VSIZE 
      001DAC 81               [ 4] 1987 	ret 
                                   1988 
                                   1989 ;----------------------
                                   1990 ; 'save_context' and
                                   1991 ; 'rest_context' must be 
                                   1992 ; called at the same 
                                   1993 ; call stack depth 
                                   1994 ; i.e. SP must have the 
                                   1995 ; save value at  
                                   1996 ; entry point of both 
                                   1997 ; routine. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   1998 ;---------------------
                           000004  1999 	CTXT_SIZE=4 ; size of saved data 
                                   2000 ;--------------------
                                   2001 ; save current BASIC
                                   2002 ; interpreter context 
                                   2003 ; on stack 
                                   2004 ;--------------------
      001DAD                       2005 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001DAD                       2006 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001DAD                       2007 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001DAD                       2008 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001DAD                       2009 save_context:
      001DAD CE 00 04         [ 2] 2010 	ldw x,basicptr 
      001DB0 1F 03            [ 2] 2011 	ldw (BPTR,sp),x
      001DB2 C6 00 01         [ 1] 2012 	ld a,in 
      001DB5 6B 05            [ 1] 2013 	ld (IN,sp),a
      001DB7 C6 00 02         [ 1] 2014 	ld a,count 
      001DBA 6B 06            [ 1] 2015 	ld (CNT,sp),a  
      001DBC 81               [ 4] 2016 	ret
                                   2017 
                                   2018 ;-----------------------
                                   2019 ; restore previously saved 
                                   2020 ; BASIC interpreter context 
                                   2021 ; from stack 
                                   2022 ;-------------------------
      001DBD                       2023 rest_context:
      001DBD 1E 03            [ 2] 2024 	ldw x,(BPTR,sp)
      001DBF CF 00 04         [ 2] 2025 	ldw basicptr,x 
      001DC2 7B 05            [ 1] 2026 	ld a,(IN,sp)
      001DC4 C7 00 01         [ 1] 2027 	ld in,a
      001DC7 7B 06            [ 1] 2028 	ld a,(CNT,sp)
      001DC9 C7 00 02         [ 1] 2029 	ld count,a  
      001DCC 81               [ 4] 2030 	ret
                                   2031 
                                   2032 
                                   2033 
                                   2034 ;------------------------------------------
                                   2035 ; BASIC: INPUT [string]var[,[string]var]
                                   2036 ; input value in variables 
                                   2037 ; [string] optionally can be used as prompt 
                                   2038 ;-----------------------------------------
                           000001  2039 	CX_BPTR=1
                           000003  2040 	CX_IN=3
                           000004  2041 	CX_CNT=4
                           000005  2042 	SKIP=5
                           000005  2043 	VSIZE=5
      001DCD                       2044 input_var:
      001DCD 90 89            [ 2] 2045 	pushw y 
      001DCF                       2046 	_vars VSIZE 
      001DCF 52 05            [ 2]    1     sub sp,#VSIZE 
      001DD1                       2047 input_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001DD1 0F 05            [ 1] 2048 	clr (SKIP,sp)
      001DD3 CD 15 0F         [ 4] 2049 	call next_token 
      001DD6 A1 02            [ 1] 2050 	cp a,#TK_QSTR 
      001DD8 26 10            [ 1] 2051 	jrne 1$ 
      001DDA CD 06 82         [ 4] 2052 	call puts 
      001DDD 5C               [ 1] 2053 	incw x 
      001DDE 72 B0 00 04      [ 2] 2054 	subw x,basicptr 
      001DE2 CF 00 00         [ 2] 2055 	ldw in.w,x 
      001DE5 03 05            [ 1] 2056 	cpl (SKIP,sp)
      001DE7 CD 15 0F         [ 4] 2057 	call next_token 
      001DEA A1 85            [ 1] 2058 1$: cp a,#TK_VAR  
      001DEC 27 03            [ 1] 2059 	jreq 2$ 
      001DEE CC 13 B5         [ 2] 2060 	jp syntax_error
      001DF1 CD 15 37         [ 4] 2061 2$:	call get_addr
      001DF4 CF 00 19         [ 2] 2062 	ldw ptr16,x 
      001DF7 0D 05            [ 1] 2063 	tnz (SKIP,sp)
      001DF9 26 06            [ 1] 2064 	jrne 21$ 
      001DFB CD 0E DA         [ 4] 2065 	call var_name 
      001DFE CD 06 25         [ 4] 2066 	call putc   
      001E01                       2067 21$:
      001E01 A6 3A            [ 1] 2068 	ld a,#':
      001E03 CD 06 25         [ 4] 2069 	call putc 
      001E06 CD 1D AD         [ 4] 2070 	call save_context 
      001E09 72 5F 00 02      [ 1] 2071 	clr count  
      001E0D CD 07 87         [ 4] 2072 	call readln 
      001E10 AE 16 68         [ 2] 2073 	ldw x,#tib 
      001E13 3B 00 02         [ 1] 2074 	push count
      001E16 4B 00            [ 1] 2075 	push #0 
      001E18 72 FB 01         [ 2] 2076 	addw x,(1,sp)
      001E1B 5C               [ 1] 2077 	incw x 
      001E1C                       2078 	_drop 2 
      001E1C 5B 02            [ 2]    1     addw sp,#2 
      001E1E 72 5F 00 01      [ 1] 2079 	clr in 
      001E22 CD 0C 1B         [ 4] 2080 	call get_token
      001E25 A1 84            [ 1] 2081 	cp a,#TK_INTGR
      001E27 27 14            [ 1] 2082 	jreq 3$ 
      001E29 A1 11            [ 1] 2083 	cp a,#TK_MINUS
      001E2B 26 07            [ 1] 2084 	jrne 22$
      001E2D CD 0C 1B         [ 4] 2085 	call get_token 
      001E30 A1 84            [ 1] 2086 	cp a,#TK_INTGR 
      001E32 27 06            [ 1] 2087 	jreq 23$
      001E34                       2088 22$:
      001E34 CD 1D BD         [ 4] 2089 	call rest_context 
      001E37 CC 13 B5         [ 2] 2090 	jp syntax_error
      001E3A                       2091 23$:
      001E3A CD 02 1D         [ 4] 2092 	call neg_acc24	
      001E3D                       2093 3$: 
      001E3D C6 00 0C         [ 1] 2094 	ld a,acc24 
      001E40 CE 00 0D         [ 2] 2095 	ldw x,acc16 
      001E43 72 C7 00 19      [ 4] 2096 	ld [ptr16],a
      001E47 72 5C 00 1A      [ 1] 2097 	inc ptr8  
      001E4B 72 CF 00 19      [ 5] 2098 	ldw [ptr16],x 
      001E4F CD 1D BD         [ 4] 2099 	call rest_context
      001E52 CD 15 0F         [ 4] 2100 	call next_token 
      001E55 A1 08            [ 1] 2101 	cp a,#TK_COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001E57 26 03            [ 1] 2102 	jrne 4$ 
      001E59 CC 1D D1         [ 2] 2103 	jp input_loop
      001E5C                       2104 4$:
      001E5C A1 00            [ 1] 2105 	cp a,#TK_NONE 
      001E5E 27 07            [ 1] 2106 	jreq input_exit  
      001E60 A1 09            [ 1] 2107 	cp a,#TK_COLON 
      001E62 27 03            [ 1] 2108     jreq input_exit 
      001E64 CC 13 B5         [ 2] 2109 	jp syntax_error 
      001E67                       2110 input_exit:
      001E67                       2111 	_drop VSIZE 
      001E67 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E69 90 85            [ 2] 2112 	popw y 
      001E6B 81               [ 4] 2113 	ret 
                                   2114 
                                   2115 
                                   2116 ;---------------------
                                   2117 ; BASIC: REM | ' 
                                   2118 ; skip comment to end of line 
                                   2119 ;---------------------- 
      001E6C                       2120 remark::
      001E6C 55 00 02 00 01   [ 1] 2121 	mov in,count 
      001E71 81               [ 4] 2122  	ret 
                                   2123 
                                   2124 
                                   2125 ;---------------------
                                   2126 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2127 ; read in loop 'addr'  
                                   2128 ; apply & 'mask' to value 
                                   2129 ; loop while result==0.  
                                   2130 ; 'xor_mask' is used to 
                                   2131 ; invert the wait logic.
                                   2132 ; i.e. loop while not 0.
                                   2133 ;---------------------
                           000001  2134 	XMASK=1 
                           000002  2135 	MASK=2
                           000003  2136 	ADDR=3
                           000004  2137 	VSIZE=4
      001E72                       2138 wait: 
      001E72                       2139 	_vars VSIZE
      001E72 52 04            [ 2]    1     sub sp,#VSIZE 
      001E74 0F 01            [ 1] 2140 	clr (XMASK,sp) 
      001E76 CD 16 EA         [ 4] 2141 	call arg_list 
      001E79 A1 02            [ 1] 2142 	cp a,#2
      001E7B 24 03            [ 1] 2143 	jruge 0$
      001E7D CC 13 B5         [ 2] 2144 	jp syntax_error 
      001E80 A1 03            [ 1] 2145 0$:	cp a,#3
      001E82 25 0C            [ 1] 2146 	jrult 1$
      001E84                       2147 	_xpop  ; xor mask 
      001E84 90 F6            [ 1]    1     ld a,(y)
      001E86 93               [ 1]    2     ldw x,y 
      001E87 EE 01            [ 2]    3     ldw x,(1,x)
      001E89 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E8D 9F               [ 1] 2148 	ld a,xl 
      001E8E 6B 01            [ 1] 2149 	ld (XMASK,sp),a 
      001E90                       2150 1$: _xpop ; mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001E90 90 F6            [ 1]    1     ld a,(y)
      001E92 93               [ 1]    2     ldw x,y 
      001E93 EE 01            [ 2]    3     ldw x,(1,x)
      001E95 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E99 9F               [ 1] 2151     ld a,xl  
      001E9A 6B 02            [ 1] 2152 	ld (MASK,sp),a 
      001E9C                       2153 	_xpop ; address 
      001E9C 90 F6            [ 1]    1     ld a,(y)
      001E9E 93               [ 1]    2     ldw x,y 
      001E9F EE 01            [ 2]    3     ldw x,(1,x)
      001EA1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EA5 F6               [ 1] 2154 2$:	ld a,(x)
      001EA6 14 02            [ 1] 2155 	and a,(MASK,sp)
      001EA8 18 01            [ 1] 2156 	xor a,(XMASK,sp)
      001EAA 27 F9            [ 1] 2157 	jreq 2$ 
      001EAC                       2158 	_drop VSIZE 
      001EAC 5B 04            [ 2]    1     addw sp,#VSIZE 
      001EAE 81               [ 4] 2159 	ret 
                                   2160 
                                   2161 ;---------------------
                                   2162 ; BASIC: BSET addr,mask
                                   2163 ; set bits at 'addr' corresponding 
                                   2164 ; to those of 'mask' that are at 1.
                                   2165 ; arguments:
                                   2166 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2167 ;   mask        mask|addr
                                   2168 ; output:
                                   2169 ;	none 
                                   2170 ;--------------------------
      001EAF                       2171 bit_set:
      001EAF CD 16 EA         [ 4] 2172 	call arg_list 
      001EB2 A1 02            [ 1] 2173 	cp a,#2	 
      001EB4 27 03            [ 1] 2174 	jreq 1$ 
      001EB6 CC 13 B5         [ 2] 2175 	jp syntax_error
      001EB9                       2176 1$: 
      001EB9                       2177 	_xpop ; mask 
      001EB9 90 F6            [ 1]    1     ld a,(y)
      001EBB 93               [ 1]    2     ldw x,y 
      001EBC EE 01            [ 2]    3     ldw x,(1,x)
      001EBE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EC2 9F               [ 1] 2178 	ld a,xl
      001EC3 88               [ 1] 2179 	push a  
      001EC4                       2180 	_xpop ; addr  
      001EC4 90 F6            [ 1]    1     ld a,(y)
      001EC6 93               [ 1]    2     ldw x,y 
      001EC7 EE 01            [ 2]    3     ldw x,(1,x)
      001EC9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001ECD 84               [ 1] 2181 	pop a 
      001ECE FA               [ 1] 2182 	or a,(x)
      001ECF F7               [ 1] 2183 	ld (x),a
      001ED0 81               [ 4] 2184 	ret 
                                   2185 
                                   2186 ;---------------------
                                   2187 ; BASIC: BRES addr,mask
                                   2188 ; reset bits at 'addr' corresponding 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   2189 ; to those of 'mask' that are at 1.
                                   2190 ; arguments:
                                   2191 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2192 ;   mask	    ~mask&*addr  
                                   2193 ; output:
                                   2194 ;	none 
                                   2195 ;--------------------------
      001ED1                       2196 bit_reset:
      001ED1 CD 16 EA         [ 4] 2197 	call arg_list 
      001ED4 A1 02            [ 1] 2198 	cp a,#2  
      001ED6 27 03            [ 1] 2199 	jreq 1$ 
      001ED8 CC 13 B5         [ 2] 2200 	jp syntax_error
      001EDB                       2201 1$: 
      001EDB                       2202 	_xpop ; mask 
      001EDB 90 F6            [ 1]    1     ld a,(y)
      001EDD 93               [ 1]    2     ldw x,y 
      001EDE EE 01            [ 2]    3     ldw x,(1,x)
      001EE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EE4 9F               [ 1] 2203 	ld a,xl 
      001EE5 43               [ 1] 2204 	cpl a
      001EE6 88               [ 1] 2205 	push a  
      001EE7                       2206 	_xpop ; addr  
      001EE7 90 F6            [ 1]    1     ld a,(y)
      001EE9 93               [ 1]    2     ldw x,y 
      001EEA EE 01            [ 2]    3     ldw x,(1,x)
      001EEC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001EF0 84               [ 1] 2207 	pop a 
      001EF1 F4               [ 1] 2208 	and a,(x)
      001EF2 F7               [ 1] 2209 	ld (x),a 
      001EF3 81               [ 4] 2210 	ret 
                                   2211 
                                   2212 ;---------------------
                                   2213 ; BASIC: BTOGL addr,mask
                                   2214 ; toggle bits at 'addr' corresponding 
                                   2215 ; to those of 'mask' that are at 1.
                                   2216 ; arguments:
                                   2217 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2218 ;   mask	    mask^*addr  
                                   2219 ; output:
                                   2220 ;	none 
                                   2221 ;--------------------------
      001EF4                       2222 bit_toggle:
      001EF4 CD 16 EA         [ 4] 2223 	call arg_list 
      001EF7 A1 02            [ 1] 2224 	cp a,#2 
      001EF9 27 03            [ 1] 2225 	jreq 1$ 
      001EFB CC 13 B5         [ 2] 2226 	jp syntax_error
      001EFE                       2227 1$: _xpop ; mask 
      001EFE 90 F6            [ 1]    1     ld a,(y)
      001F00 93               [ 1]    2     ldw x,y 
      001F01 EE 01            [ 2]    3     ldw x,(1,x)
      001F03 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F07 9F               [ 1] 2228 	ld a,xl
      001F08 88               [ 1] 2229 	push a 
      001F09                       2230 	_xpop  ; addr  
      001F09 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      001F0B 93               [ 1]    2     ldw x,y 
      001F0C EE 01            [ 2]    3     ldw x,(1,x)
      001F0E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F12 84               [ 1] 2231 	pop a 
      001F13 F8               [ 1] 2232 	xor a,(x)
      001F14 F7               [ 1] 2233 	ld (x),a 
      001F15 81               [ 4] 2234 	ret 
                                   2235 
                                   2236 
                                   2237 ;---------------------
                                   2238 ; BASIC: BTEST(addr,bit)
                                   2239 ; return bit value at 'addr' 
                                   2240 ; bit is in range {0..7}.
                                   2241 ; arguments:
                                   2242 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2243 ;   bit 	    bit position {0..7}  
                                   2244 ; output:
                                   2245 ;	A:X       bit value  
                                   2246 ;--------------------------
      001F16                       2247 bit_test:
      001F16 CD 16 E5         [ 4] 2248 	call func_args 
      001F19 A1 02            [ 1] 2249 	cp a,#2
      001F1B 27 03            [ 1] 2250 	jreq 0$
      001F1D CC 13 B5         [ 2] 2251 	jp syntax_error
      001F20                       2252 0$:	
      001F20                       2253 	_xpop 
      001F20 90 F6            [ 1]    1     ld a,(y)
      001F22 93               [ 1]    2     ldw x,y 
      001F23 EE 01            [ 2]    3     ldw x,(1,x)
      001F25 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F29 9F               [ 1] 2254 	ld a,xl 
      001F2A A4 07            [ 1] 2255 	and a,#7
      001F2C 88               [ 1] 2256 	push a   
      001F2D A6 01            [ 1] 2257 	ld a,#1 
      001F2F 0D 01            [ 1] 2258 1$: tnz (1,sp)
      001F31 27 05            [ 1] 2259 	jreq 2$
      001F33 48               [ 1] 2260 	sll a 
      001F34 0A 01            [ 1] 2261 	dec (1,sp)
      001F36 20 F7            [ 2] 2262 	jra 1$
      001F38 6B 01            [ 1] 2263 2$: ld (1,sp),a  
      001F3A                       2264 	_xpop ; address  
      001F3A 90 F6            [ 1]    1     ld a,(y)
      001F3C 93               [ 1]    2     ldw x,y 
      001F3D EE 01            [ 2]    3     ldw x,(1,x)
      001F3F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F43 84               [ 1] 2265 	pop a 
      001F44 F4               [ 1] 2266 	and a,(x)
      001F45 27 02            [ 1] 2267 	jreq 3$
      001F47 A6 01            [ 1] 2268 	ld a,#1 
      001F49 5F               [ 1] 2269 3$:	clrw x 
      001F4A 97               [ 1] 2270 	ld xl,a
      001F4B 4F               [ 1] 2271 	clr a  
      001F4C 81               [ 4] 2272 	ret
                                   2273 
                                   2274 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                   2275 ; BASIC: POKE addr,byte
                                   2276 ; put a byte at addr 
                                   2277 ;--------------------
      001F4D                       2278 poke:
      001F4D CD 16 EA         [ 4] 2279 	call arg_list 
      001F50 A1 02            [ 1] 2280 	cp a,#2
      001F52 27 03            [ 1] 2281 	jreq 1$
      001F54 CC 13 B5         [ 2] 2282 	jp syntax_error
      001F57                       2283 1$:	
      001F57                       2284 	_xpop ; byte   
      001F57 90 F6            [ 1]    1     ld a,(y)
      001F59 93               [ 1]    2     ldw x,y 
      001F5A EE 01            [ 2]    3     ldw x,(1,x)
      001F5C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F60 9F               [ 1] 2285     ld a,xl 
      001F61 88               [ 1] 2286 	push a 
      001F62                       2287 	_xpop ; address 
      001F62 90 F6            [ 1]    1     ld a,(y)
      001F64 93               [ 1]    2     ldw x,y 
      001F65 EE 01            [ 2]    3     ldw x,(1,x)
      001F67 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F6B 84               [ 1] 2288 	pop a 
      001F6C F7               [ 1] 2289 	ld (x),a 
      001F6D 81               [ 4] 2290 	ret 
                                   2291 
                                   2292 ;-----------------------
                                   2293 ; BASIC: PEEK(addr)
                                   2294 ; get the byte at addr 
                                   2295 ; input:
                                   2296 ;	none 
                                   2297 ; output:
                                   2298 ;	X 		value 
                                   2299 ;-----------------------
      001F6E                       2300 peek:
      001F6E CD 16 E5         [ 4] 2301 	call func_args
      001F71 A1 01            [ 1] 2302 	cp a,#1 
      001F73 27 03            [ 1] 2303 	jreq 1$
      001F75 CC 13 B5         [ 2] 2304 	jp syntax_error
      001F78                       2305 1$: _xpop ; address  
      001F78 90 F6            [ 1]    1     ld a,(y)
      001F7A 93               [ 1]    2     ldw x,y 
      001F7B EE 01            [ 2]    3     ldw x,(1,x)
      001F7D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F81 C7 00 18         [ 1] 2306 	ld farptr,a 
      001F84 CF 00 19         [ 2] 2307 	ldw ptr16,x 
      001F87 92 BC 00 18      [ 5] 2308 	ldf a,[farptr]
      001F8B 5F               [ 1] 2309 	clrw x 
      001F8C 97               [ 1] 2310 	ld xl,a 
      001F8D 4F               [ 1] 2311 	clr a 
      001F8E 81               [ 4] 2312 	ret 
                                   2313 
                                   2314 ;---------------------------
                                   2315 ; BASIC IF expr : instructions
                                   2316 ; evaluate expr and if true 
                                   2317 ; execute instructions on same line. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



                                   2318 ;----------------------------
      001F8F                       2319 if: 
      001F8F CD 19 45         [ 4] 2320 	call condition  
      001F92                       2321 	_xpop 
      001F92 90 F6            [ 1]    1     ld a,(y)
      001F94 93               [ 1]    2     ldw x,y 
      001F95 EE 01            [ 2]    3     ldw x,(1,x)
      001F97 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001F9B 4D               [ 1] 2322 	tnz  a  
      001F9C 26 0D            [ 1] 2323 	jrne 9$
      001F9E 5D               [ 2] 2324 	tnzw x 
      001F9F 26 0A            [ 1] 2325 	jrne 9$  
                                   2326 ;skip to next line
      001FA1 55 00 02 00 01   [ 1] 2327 	mov in,count
      001FA6                       2328 	_drop 2 
      001FA6 5B 02            [ 2]    1     addw sp,#2 
      001FA8 CC 14 5B         [ 2] 2329 	jp next_line
      001FAB 81               [ 4] 2330 9$:	ret 
                                   2331 
                                   2332 ;------------------------
                                   2333 ; BASIC: FOR var=expr 
                                   2334 ; set variable to expression 
                                   2335 ; leave variable address 
                                   2336 ; on stack and set
                                   2337 ; FLOOP bit in 'flags'
                                   2338 ;-----------------
                           000001  2339 	RETL1=1 ; return address  
                           000003  2340 	FSTEP=3  ; variable increment int24
                           000006  2341 	LIMIT=6 ; loop limit, int24  
                           000009  2342 	CVAR=9   ; control variable 
                           00000B  2343 	INW=11   ;  in.w saved
                           00000D  2344 	BPTR=13 ; baseptr saved
                           00000D  2345 	VSIZE=13  
      001FAC                       2346 for: ; { -- var_addr }
      001FAC 85               [ 2] 2347 	popw x ; call return address 
      001FAD                       2348 	_vars VSIZE 
      001FAD 52 0D            [ 2]    1     sub sp,#VSIZE 
      001FAF 89               [ 2] 2349 	pushw x  ; RETL1 
      001FB0 A6 85            [ 1] 2350 	ld a,#TK_VAR 
      001FB2 CD 16 D8         [ 4] 2351 	call expect
      001FB5 CD 15 37         [ 4] 2352 	call get_addr
      001FB8 1F 09            [ 2] 2353 	ldw (CVAR,sp),x  ; control variable 
      001FBA CD 1A 1A         [ 4] 2354 	call let_eval 
      001FBD 72 14 00 22      [ 1] 2355 	bset flags,#FLOOP 
      001FC1 CD 15 0F         [ 4] 2356 	call next_token 
      001FC4 A1 80            [ 1] 2357 	cp a,#TK_CMD 
      001FC6 27 03            [ 1] 2358 	jreq 1$
      001FC8 CC 13 B5         [ 2] 2359 	jp syntax_error
      001FCB                       2360 1$:  
      001FCB                       2361 	_get_code_addr
      001FCB FE               [ 2]    1         ldw x,(x)
      001FCC 72 5C 00 01      [ 1]    2         inc in 
      001FD0 72 5C 00 01      [ 1]    3         inc in 
      001FD4 A3 1F DC         [ 2] 2362 	cpw x,#to   
      001FD7 27 03            [ 1] 2363 	jreq to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      001FD9 CC 13 B5         [ 2] 2364 	jp syntax_error 
                                   2365 
                                   2366 ;-----------------------------------
                                   2367 ; BASIC: TO expr 
                                   2368 ; second part of FOR loop initilization
                                   2369 ; leave limit on stack and set 
                                   2370 ; FTO bit in 'flags'
                                   2371 ;-----------------------------------
      001FDC                       2372 to: ; { var_addr -- var_addr limit step }
      001FDC 72 04 00 22 03   [ 2] 2373 	btjt flags,#FLOOP,1$
      001FE1 CC 13 B5         [ 2] 2374 	jp syntax_error
      001FE4 CD 18 2C         [ 4] 2375 1$: call expression   
      001FE7 A1 84            [ 1] 2376 	cp a,#TK_INTGR 
      001FE9 27 03            [ 1] 2377 	jreq 2$ 
      001FEB CC 13 B5         [ 2] 2378 	jp syntax_error
      001FEE                       2379 2$: _xpop
      001FEE 90 F6            [ 1]    1     ld a,(y)
      001FF0 93               [ 1]    2     ldw x,y 
      001FF1 EE 01            [ 2]    3     ldw x,(1,x)
      001FF3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001FF7 6B 06            [ 1] 2380 	ld (LIMIT,sp),a 
      001FF9 1F 07            [ 2] 2381 	ldw (LIMIT+1,sp),x
      001FFB CD 15 0F         [ 4] 2382 	call next_token
      001FFE A1 00            [ 1] 2383 	cp a,#TK_NONE  
      002000 27 17            [ 1] 2384 	jreq 4$ 
      002002 A1 80            [ 1] 2385 	cp a,#TK_CMD
      002004 26 0E            [ 1] 2386 	jrne 3$
      002006                       2387 	_get_code_addr
      002006 FE               [ 2]    1         ldw x,(x)
      002007 72 5C 00 01      [ 1]    2         inc in 
      00200B 72 5C 00 01      [ 1]    3         inc in 
      00200F A3 20 22         [ 2] 2388 	cpw x,#step 
      002012 27 0E            [ 1] 2389 	jreq step
      002014                       2390 3$:	
      002014                       2391 	_unget_token   	 
      002014 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002019                       2392 4$:	
      002019 0F 03            [ 1] 2393 	clr (FSTEP,sp) 
      00201B AE 00 01         [ 2] 2394 	ldw x,#1   ; default step  
      00201E 1F 04            [ 2] 2395 	ldw (FSTEP+1,sp),x 
      002020 20 2F            [ 2] 2396 	jra store_loop_addr 
                                   2397 
                                   2398 
                                   2399 ;----------------------------------
                                   2400 ; BASIC: STEP expr 
                                   2401 ; optional third par of FOR loop
                                   2402 ; initialization. 	
                                   2403 ;------------------------------------
      002022                       2404 step: ; {var limit -- var limit step}
      002022 72 04 00 22 03   [ 2] 2405 	btjt flags,#FLOOP,1$
      002027 CC 13 B5         [ 2] 2406 	jp syntax_error
      00202A CD 18 2C         [ 4] 2407 1$: call expression 
      00202D A1 84            [ 1] 2408 	cp a,#TK_INTGR
      00202F 27 03            [ 1] 2409 	jreq 2$
      002031 CC 13 B5         [ 2] 2410 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002034                       2411 2$:	
      002034                       2412 	_xpop 
      002034 90 F6            [ 1]    1     ld a,(y)
      002036 93               [ 1]    2     ldw x,y 
      002037 EE 01            [ 2]    3     ldw x,(1,x)
      002039 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00203D 6B 03            [ 1] 2413 	ld (FSTEP,sp),a 
      00203F 1F 04            [ 2] 2414 	ldw (FSTEP+1,sp),x ; step
                                   2415 ; if step < 0 decrement LIMIT 
      002041 4D               [ 1] 2416 	tnz a
      002042 2A 0D            [ 1] 2417 	jrpl store_loop_addr 
      002044 7B 06            [ 1] 2418 	ld a,(LIMIT,sp)
      002046 1E 07            [ 2] 2419 	ldw x,(LIMIT+1,sp)
      002048 1D 00 01         [ 2] 2420 	subw x,#1 
      00204B A2 00            [ 1] 2421 	sbc a,#0 
      00204D 6B 06            [ 1] 2422 	ld (LIMIT,sp),a 
      00204F 1F 07            [ 2] 2423 	ldw (LIMIT+1,sp),x 
                                   2424 ; leave loop back entry point on cstack 
                                   2425 ; cstack is 1 call deep from interpreter
      002051                       2426 store_loop_addr:
      002051 CE 00 04         [ 2] 2427 	ldw x,basicptr
      002054 1F 0D            [ 2] 2428 	ldw (BPTR,sp),x 
      002056 CE 00 00         [ 2] 2429 	ldw x,in.w 
      002059 1F 0B            [ 2] 2430 	ldw (INW,sp),x   
      00205B 72 15 00 22      [ 1] 2431 	bres flags,#FLOOP 
      00205F 72 5C 00 1F      [ 1] 2432 	inc loop_depth  
      002063 81               [ 4] 2433 	ret 
                                   2434 
                                   2435 ;--------------------------------
                                   2436 ; BASIC: NEXT var 
                                   2437 ; FOR loop control 
                                   2438 ; increment variable with step 
                                   2439 ; and compare with limit 
                                   2440 ; loop if threshold not crossed.
                                   2441 ; else stack. 
                                   2442 ; and decrement 'loop_depth' 
                                   2443 ;--------------------------------
      002064                       2444 next: ; {var limit step retl1 -- [var limit step ] }
      002064 72 5D 00 1F      [ 1] 2445 	tnz loop_depth 
      002068 26 03            [ 1] 2446 	jrne 1$ 
      00206A CC 13 B5         [ 2] 2447 	jp syntax_error 
      00206D                       2448 1$: 
      00206D A6 85            [ 1] 2449 	ld a,#TK_VAR 
      00206F CD 16 D8         [ 4] 2450 	call expect
      002072 CD 15 37         [ 4] 2451 	call get_addr 
                                   2452 ; check for good variable after NEXT 	 
      002075 13 09            [ 2] 2453 	cpw x,(CVAR,sp)
      002077 27 03            [ 1] 2454 	jreq 2$  
      002079 CC 13 B5         [ 2] 2455 	jp syntax_error ; not the good one 
      00207C                       2456 2$: 
      00207C CF 00 19         [ 2] 2457 	ldw ptr16,x 
                                   2458 	; increment variable 
      00207F F6               [ 1] 2459 	ld a,(x)
      002080 EE 01            [ 2] 2460 	ldw x,(1,x)  ; get var value 
      002082 72 FB 04         [ 2] 2461 	addw x,(FSTEP+1,sp) ; var+step 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002085 19 03            [ 1] 2462 	adc a,(FSTEP,sp)
      002087 72 C7 00 19      [ 4] 2463 	ld [ptr16],a
      00208B 72 5C 00 1A      [ 1] 2464 	inc ptr8  
      00208F 72 CF 00 19      [ 5] 2465 	ldw [ptr16],x 
      002093 C7 00 0C         [ 1] 2466 	ld acc24,a 
      002096 CF 00 0D         [ 2] 2467 	ldw acc16,x 
      002099 7B 06            [ 1] 2468 	ld a,(LIMIT,sp)
      00209B 1E 07            [ 2] 2469 	ldw x,(LIMIT+1,sp)
      00209D 72 B0 00 0D      [ 2] 2470 	subw x,acc16 
      0020A1 C2 00 0C         [ 1] 2471 	sbc a,acc24
      0020A4 18 03            [ 1] 2472 	xor a,(FSTEP,sp)
      0020A6 A8 80            [ 1] 2473 	xor a,#0x80
      0020A8 2B 12            [ 1] 2474 	jrmi loop_back  
      0020AA 20 25            [ 2] 2475 	jra loop_done   
                                   2476 ; check sign of STEP  
      0020AC 7B 03            [ 1] 2477 	ld a,(FSTEP,sp)
      0020AE 2A 07            [ 1] 2478 	jrpl 4$
                                   2479 ;negative step
      0020B0 C6 00 0E         [ 1] 2480     ld a,acc8 
      0020B3 2F 07            [ 1] 2481 	jrslt loop_back   
      0020B5 20 1A            [ 2] 2482 	jra loop_done  
      0020B7                       2483 4$: ; positive step
      0020B7 72 0E 00 0E 15   [ 2] 2484 	btjt acc8,#7,loop_done 
      0020BC                       2485 loop_back:
      0020BC 1E 0D            [ 2] 2486 	ldw x,(BPTR,sp)
      0020BE CF 00 04         [ 2] 2487 	ldw basicptr,x 
      0020C1 72 01 00 22 05   [ 2] 2488 	btjf flags,#FRUN,1$ 
      0020C6 E6 02            [ 1] 2489 	ld a,(2,x)
      0020C8 C7 00 02         [ 1] 2490 	ld count,a
      0020CB 1E 0B            [ 2] 2491 1$:	ldw x,(INW,sp)
      0020CD CF 00 00         [ 2] 2492 	ldw in.w,x 
      0020D0 81               [ 4] 2493 	ret 
      0020D1                       2494 loop_done:
                                   2495 	; remove loop data from stack  
      0020D1 85               [ 2] 2496 	popw x
      0020D2                       2497 	_drop VSIZE 
      0020D2 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0020D4 72 5A 00 1F      [ 1] 2498 	dec loop_depth 
      0020D8 FC               [ 2] 2499 	jp (x)
                                   2500 
                                   2501 ;----------------------------
                                   2502 ; called by goto/gosub
                                   2503 ; to get target line number 
                                   2504 ; output:
                                   2505 ;    x    line address 
                                   2506 ;---------------------------
      0020D9                       2507 get_target_line:
      0020D9 CD 15 0F         [ 4] 2508 	call next_token  
      0020DC A1 84            [ 1] 2509 	cp a,#TK_INTGR
      0020DE 27 07            [ 1] 2510 	jreq get_target_line_addr 
      0020E0 A1 03            [ 1] 2511 	cp a,#TK_LABEL 
      0020E2 27 26            [ 1] 2512 	jreq look_target_symbol 
      0020E4 CC 13 B5         [ 2] 2513 	jp syntax_error
                                   2514 ; the target is a line number 
                                   2515 ; search it. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      0020E7                       2516 get_target_line_addr:
      0020E7 90 89            [ 2] 2517 	pushw y 
      0020E9 CD 15 41         [ 4] 2518 	call get_int24 ; line # 
      0020EC 4F               [ 1] 2519 	clr a
      0020ED 90 CE 00 04      [ 2] 2520 	ldw y,basicptr 
      0020F1 90 FE            [ 2] 2521 	ldw y,(y)
      0020F3 90 89            [ 2] 2522 	pushw y 
      0020F5 13 01            [ 2] 2523 	cpw x,(1,sp)
      0020F7                       2524 	_drop 2  
      0020F7 5B 02            [ 2]    1     addw sp,#2 
      0020F9 25 01            [ 1] 2525 	jrult 11$
      0020FB 4C               [ 1] 2526 	inc a 
      0020FC                       2527 11$: ; scan program for this line# 	
      0020FC CD 09 6B         [ 4] 2528 	call search_lineno  
      0020FF 5D               [ 2] 2529 	tnzw x ; 0| line# address 
      002100 26 05            [ 1] 2530 	jrne 2$ 
      002102 A6 05            [ 1] 2531 	ld a,#ERR_NO_LINE 
      002104 CC 13 B7         [ 2] 2532 	jp tb_error 
      002107 90 85            [ 2] 2533 2$:	popw y  
      002109 81               [ 4] 2534 	ret 
                                   2535 
                                   2536 ; the GOTO|GOSUB target is a symbol.
                                   2537 ; output:
                                   2538 ;    X    line address|0 
      00210A                       2539 look_target_symbol:
      00210A 90 89            [ 2] 2540 	pushw y 
      00210C 89               [ 2] 2541 	pushw x 
      00210D CD 15 28         [ 4] 2542 	call skip_string 
      002110 72 5F 00 0D      [ 1] 2543 	clr acc16 
      002114 90 CE 00 1B      [ 2] 2544 	ldw y,txtbgn 
      002118 90 E6 03         [ 1] 2545 1$:	ld a,(3,y) ; first TK_ID on line 
      00211B A1 03            [ 1] 2546 	cp a,#TK_LABEL 
      00211D 27 15            [ 1] 2547 	jreq 3$ 
      00211F 90 E6 02         [ 1] 2548 2$:	ld a,(2,y); line length 
      002122 C7 00 0E         [ 1] 2549 	ld acc8,a 
      002125 72 B9 00 0D      [ 2] 2550 	addw y,acc16 ;point to next line 
      002129 90 C3 00 1D      [ 2] 2551 	cpw y,txtend 
      00212D 25 E9            [ 1] 2552 	jrult 1$
      00212F A6 0A            [ 1] 2553 	ld a,#ERR_BAD_VALUE
      002131 CC 13 B7         [ 2] 2554 	jp tb_error 
      002134                       2555 3$: ; found a TK_LABEL 
                                   2556 	; compare with GOTO|GOSUB target 
      002134 90 89            [ 2] 2557 	pushw y ; line address 
      002136 72 A9 00 04      [ 2] 2558 	addw y,#4 ; label string 
      00213A 1E 03            [ 2] 2559 	ldw x,(3,sp) ; target string 
      00213C CD 10 BC         [ 4] 2560 	call strcmp
      00213F 26 04            [ 1] 2561 	jrne 4$
      002141 90 85            [ 2] 2562 	popw y 
      002143 20 DA            [ 2] 2563 	jra 2$ 
      002145                       2564 4$: ; target found 
      002145 85               [ 2] 2565 	popw x ;  address line target  
      002146                       2566 	_drop 2 ; target string 
      002146 5B 02            [ 2]    1     addw sp,#2 
      002148 90 85            [ 2] 2567 	popw y 
      00214A 81               [ 4] 2568 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   2569 
                                   2570 
                                   2571 ;--------------------------------
                                   2572 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2573 ; selective goto or gosub 
                                   2574 ;--------------------------------
      00214B                       2575 cmd_on:
      00214B CD 16 CD         [ 4] 2576 	call runtime_only
      00214E CD 18 2C         [ 4] 2577 0$:	call expression 
      002151 A1 84            [ 1] 2578 	cp a,#TK_INTGR
      002153 27 03            [ 1] 2579 	jreq 1$
      002155 CC 13 B5         [ 2] 2580 	jp syntax_error
      002158                       2581 1$: _xpop
      002158 90 F6            [ 1]    1     ld a,(y)
      00215A 93               [ 1]    2     ldw x,y 
      00215B EE 01            [ 2]    3     ldw x,(1,x)
      00215D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2582 ; the selector is the element indice 
                                   2583 ; in the list of arguments. {1..#elements} 
      002161 9F               [ 1] 2584 	ld a,xl ; keep only bits 7..0
      002162 27 68            [ 1] 2585 	jreq 9$ ; element # begin at 1. 
      002164 88               [ 1] 2586 	push a  ; selector  
      002165 CD 15 0F         [ 4] 2587 	call next_token
      002168 A1 80            [ 1] 2588 	cp a,#TK_CMD 
      00216A 27 03            [ 1] 2589 	jreq 2$ 
      00216C CC 13 B5         [ 2] 2590 	jp syntax_error 
      00216F                       2591 2$: _get_code_addr
      00216F FE               [ 2]    1         ldw x,(x)
      002170 72 5C 00 01      [ 1]    2         inc in 
      002174 72 5C 00 01      [ 1]    3         inc in 
                                   2592 ;; must be a GOTO or GOSUB 
      002178 A3 21 D6         [ 2] 2593 	cpw x,#goto 
      00217B 27 08            [ 1] 2594 	jreq 4$
      00217D A3 21 E9         [ 2] 2595 	cpw x,#gosub 
      002180 27 03            [ 1] 2596 	jreq 4$ 
      002182 CC 13 B5         [ 2] 2597 	jp syntax_error 
      002185                       2598 4$: 
      002185 84               [ 1] 2599 	pop a 
      002186 89               [ 2] 2600 	pushw x ; save routine address 	
      002187 88               [ 1] 2601 	push a  ; selector  
      002188                       2602 5$: ; skip elements in list until selector==0 
      002188 0A 01            [ 1] 2603 	dec (1,sp)
      00218A 27 26            [ 1] 2604 	jreq 6$ 
                                   2605 ; can be a line# or a label 
      00218C CD 15 0F         [ 4] 2606 	call next_token 
      00218F A1 84            [ 1] 2607 	cp a,#TK_INTGR 
      002191 27 07            [ 1] 2608 	jreq 52$
      002193 A1 03            [ 1] 2609 	cp a,#TK_LABEL 
      002195 27 0D            [ 1] 2610 	jreq 54$
      002197 CC 13 B5         [ 2] 2611 	jp syntax_error 
      00219A                       2612 52$: ; got a line number 
      00219A C6 00 01         [ 1] 2613 	ld a,in ; skip over int24 value 
      00219D AB 03            [ 1] 2614 	add a,#CELL_SIZE ; integer size  
      00219F C7 00 01         [ 1] 2615 	ld in,a 
      0021A2 20 03            [ 2] 2616 	jra 56$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0021A4 CD 15 28         [ 4] 2617 54$: call skip_string ; skip over label 	
      0021A7                       2618 56$: ; if another element comma present 
      0021A7 CD 15 0F         [ 4] 2619 	call next_token
      0021AA A1 08            [ 1] 2620 	cp a,#TK_COMMA 
      0021AC 27 DA            [ 1] 2621 	jreq 5$ 
                                   2622 ; arg list exhausted, selector to big 
                                   2623 ; continue execution on next line 
      0021AE                       2624 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0021AE 5B 03            [ 2]    1     addw sp,#3 
      0021B0 20 1A            [ 2] 2625 	jra 9$
      0021B2                       2626 6$: ;at selected position  
      0021B2                       2627 	_drop 1 ; discard selector
      0021B2 5B 01            [ 2]    1     addw sp,#1 
                                   2628 ; here only the routine address 
                                   2629 ; of GOTO|GOSUB is on stack 
      0021B4 CD 20 D9         [ 4] 2630     call get_target_line
      0021B7 CF 00 19         [ 2] 2631 	ldw ptr16,x 	
      0021BA 55 00 02 00 01   [ 1] 2632 	mov in,count ; move to end of line  
      0021BF 85               [ 2] 2633 	popw x ; cmd address, GOTO||GOSUB 
      0021C0 A3 21 D6         [ 2] 2634 	cpw x,#goto 
      0021C3 26 05            [ 1] 2635 	jrne 7$ 
      0021C5 CE 00 19         [ 2] 2636 	ldw x,ptr16 
      0021C8 20 12            [ 2] 2637 	jra jp_to_target
      0021CA                       2638 7$: 
      0021CA 20 26            [ 2] 2639 	jra gosub_2 ; target in ptr16 
      0021CC                       2640 9$: ; expr out of range skip to end of line
                                   2641     ; this will force a fall to next line  
      0021CC 55 00 02 00 01   [ 1] 2642 	mov in,count
      0021D1                       2643 	_drop 2
      0021D1 5B 02            [ 2]    1     addw sp,#2 
      0021D3 CC 14 5B         [ 2] 2644 	jp next_line  
                                   2645 
                                   2646 
                                   2647 ;------------------------
                                   2648 ; BASIC: GOTO line# 
                                   2649 ; jump to line# 
                                   2650 ; here cstack is 2 call deep from interpreter 
                                   2651 ;------------------------
      0021D6                       2652 goto:
      0021D6 CD 16 CD         [ 4] 2653 	call runtime_only
      0021D9                       2654 goto_1:
      0021D9 CD 20 D9         [ 4] 2655 	call get_target_line
      0021DC                       2656 jp_to_target:
      0021DC CF 00 04         [ 2] 2657 	ldw basicptr,x 
      0021DF E6 02            [ 1] 2658 	ld a,(2,x)
      0021E1 C7 00 02         [ 1] 2659 	ld count,a 
      0021E4 35 03 00 01      [ 1] 2660 	mov in,#3 
      0021E8 81               [ 4] 2661 	ret 
                                   2662 
                                   2663 
                                   2664 ;--------------------
                                   2665 ; BASIC: GOSUB line#
                                   2666 ; basic subroutine call
                                   2667 ; actual line# and basicptr 
                                   2668 ; are saved on cstack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



                                   2669 ; here cstack is 2 call deep from interpreter 
                                   2670 ;--------------------
                           000001  2671 	RET_ADDR=1 ; subroutine return address 
                           000003  2672 	RET_BPTR=3 ; basicptr return point 
                           000005  2673 	RET_INW=5  ; in.w return point 
                           000004  2674 	VSIZE=4 
      0021E9                       2675 gosub:
      0021E9 CD 16 CD         [ 4] 2676 	call runtime_only
      0021EC                       2677 gosub_1:
      0021EC CD 20 D9         [ 4] 2678 	call get_target_line 
      0021EF CF 00 19         [ 2] 2679 	ldw ptr16,x
      0021F2                       2680 gosub_2: 
      0021F2 85               [ 2] 2681 	popw x 
      0021F3                       2682 	_vars VSIZE  
      0021F3 52 04            [ 2]    1     sub sp,#VSIZE 
      0021F5 89               [ 2] 2683 	pushw x ; RET_ADDR 
                                   2684 ; save BASIC subroutine return point.   
      0021F6 CE 00 04         [ 2] 2685 	ldw x,basicptr
      0021F9 1F 03            [ 2] 2686 	ldw (RET_BPTR,sp),x 
      0021FB CE 00 00         [ 2] 2687 	ldw x,in.w 
      0021FE 1F 05            [ 2] 2688 	ldw (RET_INW,sp),x
      002200 CE 00 19         [ 2] 2689 	ldw x,ptr16  
      002203 20 D7            [ 2] 2690 	jra jp_to_target
                                   2691 
                                   2692 ;------------------------
                                   2693 ; BASIC: RETURN 
                                   2694 ; exit from BASIC subroutine 
                                   2695 ;------------------------
      002205                       2696 return:
      002205 CD 16 CD         [ 4] 2697 	call runtime_only
      002208 1E 03            [ 2] 2698 	ldw x,(RET_BPTR,sp) 
      00220A CF 00 04         [ 2] 2699 	ldw basicptr,x
      00220D E6 02            [ 1] 2700 	ld a,(2,x)
      00220F C7 00 02         [ 1] 2701 	ld count,a  
      002212 1E 05            [ 2] 2702 	ldw x,(RET_INW,sp)
      002214 CF 00 00         [ 2] 2703 	ldw in.w,x 
      002217 85               [ 2] 2704 	popw x 
      002218                       2705 	_drop VSIZE 
      002218 5B 04            [ 2]    1     addw sp,#VSIZE 
      00221A FC               [ 2] 2706 	jp (x)
                                   2707 
                                   2708 ;---------------------------------
                                   2709 ; check if A:X contain the address 
                                   2710 ; of a program in FLASH 
                                   2711 ; output:
                                   2712 ;     Z    set is progam 
                                   2713 ;----------------------------------
      00221B                       2714 is_program_addr:
      00221B 4D               [ 1] 2715 	tnz a 
      00221C 26 0D            [ 1] 2716 	jrne 9$
      00221E A3 34 00         [ 2] 2717 	cpw x,#app_space 
      002221 25 07            [ 1] 2718 	jrult 8$
      002223 89               [ 2] 2719 	pushw x 
      002224 CD 25 AC         [ 4] 2720 	call qsign 
      002227 85               [ 2] 2721 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002228 27 01            [ 1] 2722 	jreq 9$ 
      00222A 43               [ 1] 2723 8$:	cpl a ; clr Z bit  
      00222B 81               [ 4] 2724 9$:	ret 
                                   2725 
                                   2726 ;----------------------------------
                                   2727 ; BASIC: RUN [label]
                                   2728 ; run BASIC program in RAM
                                   2729 ;----------------------------------- 
      00222C                       2730 cmd_run: 
      00222C 72 01 00 22 02   [ 2] 2731 	btjf flags,#FRUN,0$  
      002231 4F               [ 1] 2732 	clr a 
      002232 81               [ 4] 2733 	ret
      002233                       2734 0$: ; check for STOP condition 
      002233 72 09 00 22 12   [ 2] 2735 	btjf flags,#FBREAK,1$
      002238                       2736 	_drop 2 
      002238 5B 02            [ 2]    1     addw sp,#2 
      00223A CD 1D BD         [ 4] 2737 	call rest_context
      00223D                       2738 	_drop CTXT_SIZE 
      00223D 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00223F 72 19 00 22      [ 1] 2739 	bres flags,#FBREAK 
      002243 72 10 00 22      [ 1] 2740 	bset flags,#FRUN 
      002247 CC 14 53         [ 2] 2741 	jp interpreter 
      00224A                       2742 1$:	; check for label option 
      00224A CD 15 0F         [ 4] 2743 	call next_token 
      00224D A1 03            [ 1] 2744 	cp a,#TK_LABEL 
      00224F 26 1F            [ 1] 2745 	jrne 3$
      002251 89               [ 2] 2746 	pushw x 
      002252 CD 15 28         [ 4] 2747 	call skip_string 
      002255 85               [ 2] 2748 	popw x  
      002256 CD 2F 07         [ 4] 2749 	call search_program
      002259 26 05            [ 1] 2750 	jrne 2$
      00225B A6 12            [ 1] 2751 	ld a,#ERR_NO_PROGRAM
      00225D CC 13 B7         [ 2] 2752 	jp tb_error 
      002260 CF 00 1B         [ 2] 2753 2$: ldw txtbgn,x 
      002263 1D 00 02         [ 2] 2754 	subw x,#2 
      002266 FE               [ 2] 2755 	ldw x,(x)
      002267 72 BB 00 1B      [ 2] 2756 	addw x,txtbgn 
      00226B CF 00 1D         [ 2] 2757 	ldw txtend,x 
      00226E 20 19            [ 2] 2758 	jra run_it 	
      002270                       2759 3$:	_unget_token 
      002270 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002275 CE 00 1B         [ 2] 2760 	ldw x,txtbgn
      002278 C3 00 1D         [ 2] 2761 	cpw x,txtend 
      00227B 2B 0C            [ 1] 2762 	jrmi run_it 
      00227D AE 13 0C         [ 2] 2763 	ldw x,#err_no_prog
      002280 CD 06 82         [ 4] 2764 	call puts 
      002283 55 00 02 00 01   [ 1] 2765 	mov in,count
      002288 81               [ 4] 2766 	ret 
      002289                       2767 run_it:	 
      002289                       2768 	_drop 2 ; drop return address 
      002289 5B 02            [ 2]    1     addw sp,#2 
      00228B                       2769 run_it_02: 
      00228B CD 19 F9         [ 4] 2770     call ubound 
      00228E CD 11 21         [ 4] 2771 	call clear_vars
                                   2772 ; initialize DIM variables pointers 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      002291 CE 00 1D         [ 2] 2773 	ldw x,txtend 
      002294 CF 00 2F         [ 2] 2774 	ldw dvar_bgn,x 
      002297 CF 00 31         [ 2] 2775 	ldw dvar_end,x 	 
                                   2776 ; clear data pointer 
      00229A 5F               [ 1] 2777 	clrw x 
      00229B CF 00 06         [ 2] 2778 	ldw data_ptr,x 
      00229E 72 5F 00 08      [ 1] 2779 	clr data_ofs 
      0022A2 72 5F 00 09      [ 1] 2780 	clr data_len 
                                   2781 ; initialize BASIC pointer 
      0022A6 CE 00 1B         [ 2] 2782 	ldw x,txtbgn 
      0022A9 CF 00 04         [ 2] 2783 	ldw basicptr,x 
      0022AC E6 02            [ 1] 2784 	ld a,(2,x)
      0022AE C7 00 02         [ 1] 2785 	ld count,a
      0022B1 35 03 00 01      [ 1] 2786 	mov in,#3	
      0022B5 72 10 00 22      [ 1] 2787 	bset flags,#FRUN 
      0022B9 CC 14 53         [ 2] 2788 	jp interpreter 
                                   2789 
                                   2790 
                                   2791 ;----------------------
                                   2792 ; BASIC: END
                                   2793 ; end running program
                                   2794 ;---------------------- 
                           000001  2795 	CHAIN_BP=1 
                           000003  2796 	CHAIN_IN=3
                           000005  2797 	CHAIN_TXTBGN=5
                           000007  2798 	CHAIN_TXTEND=7
                           000008  2799 	CHAIN_CNTX_SIZE=8  
      0022BC                       2800 cmd_end: 
      0022BC                       2801 	_drop 2 ; no need for return address 
      0022BC 5B 02            [ 2]    1     addw sp,#2 
                                   2802 ; check for chained program 
      0022BE 72 5D 00 33      [ 1] 2803 	tnz chain_level
      0022C2 27 1D            [ 1] 2804 	jreq 8$
                                   2805 ; restore chain context 
      0022C4 72 5A 00 33      [ 1] 2806 	dec chain_level 
      0022C8 1E 01            [ 2] 2807 	ldw x,(CHAIN_BP,sp) ; chain saved basicptr 
      0022CA CF 00 04         [ 2] 2808 	ldw basicptr,x 
      0022CD 1E 03            [ 2] 2809 	ldw x,(CHAIN_IN,sp) ; chain saved in and count  
      0022CF CF 00 01         [ 2] 2810 	ldw in,x 
      0022D2 1E 05            [ 2] 2811 	ldw x,(CHAIN_TXTBGN,sp)
      0022D4 CF 00 1B         [ 2] 2812 	ldw txtbgn,x 
      0022D7 1E 07            [ 2] 2813 	ldw x,(CHAIN_TXTEND,sp)
      0022D9 CF 00 1D         [ 2] 2814 	ldw txtend,x 
      0022DC                       2815 	_drop CHAIN_CNTX_SIZE ; CHAIN saved data size  
      0022DC 5B 08            [ 2]    1     addw sp,#CHAIN_CNTX_SIZE 
      0022DE CC 14 53         [ 2] 2816 	jp interpreter 
      0022E1                       2817 8$: ; clean stack 
      0022E1 AE 17 FF         [ 2] 2818 	ldw x,#STACK_EMPTY
      0022E4 94               [ 1] 2819 	ldw sp,x 
      0022E5 CC 14 34         [ 2] 2820 	jp warm_start
                                   2821 
                                   2822 ;---------------------------
                                   2823 ; BASIC: GET var 
                                   2824 ; receive a key in variable 
                                   2825 ; don't wait 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                                   2826 ;---------------------------
      0022E8                       2827 cmd_get:
      0022E8 CD 15 0F         [ 4] 2828 	call next_token 
      0022EB A1 85            [ 1] 2829 	cp a,#TK_VAR 
      0022ED 27 03            [ 1] 2830 	jreq 0$
      0022EF CC 13 B5         [ 2] 2831 	jp syntax_error 
      0022F2 CD 15 37         [ 4] 2832 0$: call get_addr 
      0022F5 CF 00 19         [ 2] 2833 	ldw ptr16,x 
      0022F8 CD 06 2E         [ 4] 2834 	call qgetc 
      0022FB 27 03            [ 1] 2835 	jreq 2$
      0022FD CD 06 35         [ 4] 2836 	call getc  
      002300 72 3F 00 19      [ 4] 2837 2$: clr [ptr16]
      002304 72 5C 00 1A      [ 1] 2838 	inc ptr8 
      002308 72 3F 00 19      [ 4] 2839 	clr [ptr16]
      00230C 72 5C 00 1A      [ 1] 2840 	inc ptr8 
      002310 72 C7 00 19      [ 4] 2841 	ld [ptr16],a 
      002314 81               [ 4] 2842 	ret 
                                   2843 
                                   2844 
                                   2845 ;-----------------
                                   2846 ; 1 Khz beep 
                                   2847 ;-----------------
      002315                       2848 beep_1khz:: 
      002315 90 89            [ 2] 2849 	pushw y 
      002317 AE 00 64         [ 2] 2850 	ldw x,#100
      00231A 90 AE 03 E8      [ 2] 2851 	ldw y,#1000
      00231E 20 22            [ 2] 2852 	jra beep
                                   2853 
                                   2854 ;-----------------------
                                   2855 ; BASIC: TONE expr1,expr2
                                   2856 ; used TIMER2 channel 1
                                   2857 ; to produce a tone 
                                   2858 ; arguments:
                                   2859 ;    expr1   frequency 
                                   2860 ;    expr2   duration msec.
                                   2861 ;---------------------------
      002320                       2862 tone:
      002320 90 89            [ 2] 2863 	pushw y 
      002322 CD 16 EA         [ 4] 2864 	call arg_list 
      002325 A1 02            [ 1] 2865 	cp a,#2 
      002327 27 03            [ 1] 2866 	jreq 1$
      002329 CC 13 B5         [ 2] 2867 	jp syntax_error 
      00232C                       2868 1$: 
      00232C                       2869 	_xpop 
      00232C 90 F6            [ 1]    1     ld a,(y)
      00232E 93               [ 1]    2     ldw x,y 
      00232F EE 01            [ 2]    3     ldw x,(1,x)
      002331 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002335 89               [ 2] 2870 	pushw x ; duration 
      002336                       2871 	_xpop ; frequency
      002336 90 F6            [ 1]    1     ld a,(y)
      002338 93               [ 1]    2     ldw x,y 
      002339 EE 01            [ 2]    3     ldw x,(1,x)
      00233B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00233F 90 93            [ 1] 2872 	ldw y,x ; frequency 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002341 85               [ 2] 2873 	popw x  ; duration 
      002342                       2874 beep:  
      002342 89               [ 2] 2875 	pushw x 
      002343 AE F4 24         [ 2] 2876 	ldw x,#TIM2_CLK_FREQ
      002346 65               [ 2] 2877 	divw x,y ; cntr=Fclk/freq 
                                   2878 ; round to nearest integer 
      002347 90 A3 7A 12      [ 2] 2879 	cpw y,#TIM2_CLK_FREQ/2
      00234B 2B 01            [ 1] 2880 	jrmi 2$
      00234D 5C               [ 1] 2881 	incw x 
      00234E                       2882 2$:	 
      00234E 9E               [ 1] 2883 	ld a,xh 
      00234F C7 53 0D         [ 1] 2884 	ld TIM2_ARRH,a 
      002352 9F               [ 1] 2885 	ld a,xl 
      002353 C7 53 0E         [ 1] 2886 	ld TIM2_ARRL,a 
                                   2887 ; 50% duty cycle 
      002356 8C               [ 1] 2888 	ccf 
      002357 56               [ 2] 2889 	rrcw x 
      002358 9E               [ 1] 2890 	ld a,xh 
      002359 C7 53 0F         [ 1] 2891 	ld TIM2_CCR1H,a 
      00235C 9F               [ 1] 2892 	ld a,xl
      00235D C7 53 10         [ 1] 2893 	ld TIM2_CCR1L,a
      002360 72 10 53 08      [ 1] 2894 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      002364 72 10 53 00      [ 1] 2895 	bset TIM2_CR1,#TIM2_CR1_CEN
      002368 72 10 53 04      [ 1] 2896 	bset TIM2_EGR,#TIM2_EGR_UG
      00236C 85               [ 2] 2897 	popw x 
      00236D CD 28 7C         [ 4] 2898 	call pause02
      002370 72 11 53 08      [ 1] 2899 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      002374 72 11 53 00      [ 1] 2900 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002378 90 85            [ 2] 2901 	popw y 
      00237A 81               [ 4] 2902 	ret 
                                   2903 
                                   2904 ;-------------------------------
                                   2905 ; BASIC: ADCON 0|1 [,divisor]  
                                   2906 ; disable/enanble ADC 
                                   2907 ;-------------------------------
                           000003  2908 	ONOFF=3 
                           000001  2909 	DIVSOR=1
                           000004  2910 	VSIZE=4 
      00237B                       2911 power_adc:
      00237B CD 16 EA         [ 4] 2912 	call arg_list 
      00237E A1 02            [ 1] 2913 	cp a,#2	
      002380 27 12            [ 1] 2914 	jreq 1$
      002382 A1 01            [ 1] 2915 	cp a,#1 
      002384 27 03            [ 1] 2916 	jreq 0$ 
      002386 CC 13 B5         [ 2] 2917 	jp syntax_error 
      002389 4F               [ 1] 2918 0$:	clr a 
      00238A 5F               [ 1] 2919 	clrw x
      00238B                       2920 	_xpush   ; divisor  
      00238B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00238F 90 F7            [ 1]    2     ld (y),a 
      002391 90 EF 01         [ 2]    3     ldw (1,y),x 
      002394                       2921 1$: _at_next 
      002394 90 E6 03         [ 1]    1     ld a,(3,y)
      002397 93               [ 1]    2     ldw x,y 
      002398 EE 04            [ 2]    3     ldw x,(4,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      00239A 5D               [ 2] 2922 	tnzw x 
      00239B 27 25            [ 1] 2923 	jreq 2$ 
      00239D                       2924 	_xpop
      00239D 90 F6            [ 1]    1     ld a,(y)
      00239F 93               [ 1]    2     ldw x,y 
      0023A0 EE 01            [ 2]    3     ldw x,(1,x)
      0023A2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0023A6                       2925 	_xdrop  
      0023A6 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      0023AA 9F               [ 1] 2926 	ld a,xl
      0023AB A4 07            [ 1] 2927 	and a,#7
      0023AD 4E               [ 1] 2928 	swap a 
      0023AE C7 54 01         [ 1] 2929 	ld ADC_CR1,a
      0023B1 72 16 50 CA      [ 1] 2930 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0023B5 72 10 54 01      [ 1] 2931 	bset ADC_CR1,#ADC_CR1_ADON 
      0023B9                       2932 	_usec_dly 7 
      0023B9 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0023BC 5A               [ 2]    2     decw x
      0023BD 9D               [ 1]    3     nop 
      0023BE 26 FA            [ 1]    4     jrne .-4
      0023C0 20 08            [ 2] 2933 	jra 3$
      0023C2 72 11 54 01      [ 1] 2934 2$: bres ADC_CR1,#ADC_CR1_ADON
      0023C6 72 17 50 CA      [ 1] 2935 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0023CA                       2936 3$:	
      0023CA 81               [ 4] 2937 	ret
                                   2938 
                                   2939 ;-----------------------------
                                   2940 ; BASIC: ADCREAD (channel)
                                   2941 ; read adc channel {0..5}
                                   2942 ; output:
                                   2943 ;   A 		TK_INTGR 
                                   2944 ;   X 		value 
                                   2945 ;-----------------------------
      0023CB                       2946 analog_read:
      0023CB CD 16 E5         [ 4] 2947 	call func_args 
      0023CE A1 01            [ 1] 2948 	cp a,#1 
      0023D0 27 03            [ 1] 2949 	jreq 1$
      0023D2 CC 13 B5         [ 2] 2950 	jp syntax_error
      0023D5                       2951 1$: _xpop 
      0023D5 90 F6            [ 1]    1     ld a,(y)
      0023D7 93               [ 1]    2     ldw x,y 
      0023D8 EE 01            [ 2]    3     ldw x,(1,x)
      0023DA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0023DE A3 00 05         [ 2] 2952 	cpw x,#5 
      0023E1 23 05            [ 2] 2953 	jrule 2$
      0023E3 A6 0A            [ 1] 2954 	ld a,#ERR_BAD_VALUE
      0023E5 CC 13 B7         [ 2] 2955 	jp tb_error 
      0023E8 9F               [ 1] 2956 2$: ld a,xl
      0023E9 C7 00 0E         [ 1] 2957 	ld acc8,a 
      0023EC A6 05            [ 1] 2958 	ld a,#5
      0023EE C0 00 0E         [ 1] 2959 	sub a,acc8 
      0023F1 C7 54 00         [ 1] 2960 	ld ADC_CSR,a
      0023F4 72 16 54 02      [ 1] 2961 	bset ADC_CR2,#ADC_CR2_ALIGN
      0023F8 72 10 54 01      [ 1] 2962 	bset ADC_CR1,#ADC_CR1_ADON
      0023FC 72 0F 54 00 FB   [ 2] 2963 	btjf ADC_CSR,#ADC_CSR_EOC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002401 CE 54 04         [ 2] 2964 	ldw x,ADC_DRH
      002404 A6 84            [ 1] 2965 	ld a,#TK_INTGR
      002406 81               [ 4] 2966 	ret 
                                   2967 
                                   2968 ;-----------------------
                                   2969 ; BASIC: DREAD(pin)
                                   2970 ; Arduino pins 
                                   2971 ; read state of a digital pin 
                                   2972 ; pin# {0..15}
                                   2973 ; output:
                                   2974 ;    A 		TK_INTGR
                                   2975 ;    X      0|1 
                                   2976 ;-------------------------
                           000001  2977 	PINNO=1
                           000001  2978 	VSIZE=1
      002407                       2979 digital_read:
      002407                       2980 	_vars VSIZE 
      002407 52 01            [ 2]    1     sub sp,#VSIZE 
      002409 CD 16 E5         [ 4] 2981 	call func_args
      00240C A1 01            [ 1] 2982 	cp a,#1
      00240E 27 03            [ 1] 2983 	jreq 1$
      002410 CC 13 B5         [ 2] 2984 	jp syntax_error
      002413                       2985 1$: _xpop 
      002413 90 F6            [ 1]    1     ld a,(y)
      002415 93               [ 1]    2     ldw x,y 
      002416 EE 01            [ 2]    3     ldw x,(1,x)
      002418 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00241C A3 00 0F         [ 2] 2986 	cpw x,#15 
      00241F 23 05            [ 2] 2987 	jrule 2$
      002421 A6 0A            [ 1] 2988 	ld a,#ERR_BAD_VALUE
      002423 CC 13 B7         [ 2] 2989 	jp tb_error 
      002426 CD 29 BF         [ 4] 2990 2$:	call select_pin 
      002429 6B 01            [ 1] 2991 	ld (PINNO,sp),a
      00242B E6 01            [ 1] 2992 	ld a,(GPIO_IDR,x)
      00242D 0D 01            [ 1] 2993 	tnz (PINNO,sp)
      00242F 27 05            [ 1] 2994 	jreq 8$
      002431 44               [ 1] 2995 3$: srl a 
      002432 0A 01            [ 1] 2996 	dec (PINNO,sp)
      002434 26 FB            [ 1] 2997 	jrne 3$ 
      002436 A4 01            [ 1] 2998 8$: and a,#1 
      002438 5F               [ 1] 2999 	clrw x 
      002439 97               [ 1] 3000 	ld xl,a 
      00243A 4F               [ 1] 3001 	clr a 
      00243B                       3002 	_drop VSIZE
      00243B 5B 01            [ 2]    1     addw sp,#VSIZE 
      00243D 81               [ 4] 3003 	ret
                                   3004 
                                   3005 
                                   3006 ;-----------------------
                                   3007 ; BASIC: DWRITE pin,0|1
                                   3008 ; Arduino pins 
                                   3009 ; write to a digital pin 
                                   3010 ; pin# {0..15}
                                   3011 ; output:
                                   3012 ;    A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



                                   3013 ;    X      0|1 
                                   3014 ;-------------------------
                           000001  3015 	PINNO=1
                           000002  3016 	PINVAL=2
                           000002  3017 	VSIZE=2
      00243E                       3018 digital_write:
      00243E                       3019 	_vars VSIZE 
      00243E 52 02            [ 2]    1     sub sp,#VSIZE 
      002440 CD 16 EA         [ 4] 3020 	call arg_list  
      002443 A1 02            [ 1] 3021 	cp a,#2 
      002445 27 03            [ 1] 3022 	jreq 1$
      002447 CC 13 B5         [ 2] 3023 	jp syntax_error
      00244A                       3024 1$: _xpop 
      00244A 90 F6            [ 1]    1     ld a,(y)
      00244C 93               [ 1]    2     ldw x,y 
      00244D EE 01            [ 2]    3     ldw x,(1,x)
      00244F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002453 9F               [ 1] 3025 	ld a,xl 
      002454 6B 02            [ 1] 3026 	ld (PINVAL,sp),a
      002456                       3027 	_xpop 
      002456 90 F6            [ 1]    1     ld a,(y)
      002458 93               [ 1]    2     ldw x,y 
      002459 EE 01            [ 2]    3     ldw x,(1,x)
      00245B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00245F A3 00 0F         [ 2] 3028 	cpw x,#15 
      002462 23 05            [ 2] 3029 	jrule 2$
      002464 A6 0A            [ 1] 3030 	ld a,#ERR_BAD_VALUE
      002466 CC 13 B7         [ 2] 3031 	jp tb_error 
      002469 CD 29 BF         [ 4] 3032 2$:	call select_pin 
      00246C 6B 01            [ 1] 3033 	ld (PINNO,sp),a 
      00246E A6 01            [ 1] 3034 	ld a,#1
      002470 0D 01            [ 1] 3035 	tnz (PINNO,sp)
      002472 27 05            [ 1] 3036 	jreq 4$
      002474 48               [ 1] 3037 3$: sll a
      002475 0A 01            [ 1] 3038 	dec (PINNO,sp)
      002477 26 FB            [ 1] 3039 	jrne 3$
      002479 0D 02            [ 1] 3040 4$: tnz (PINVAL,sp)
      00247B 26 05            [ 1] 3041 	jrne 5$
      00247D 43               [ 1] 3042 	cpl a 
      00247E E4 00            [ 1] 3043 	and a,(GPIO_ODR,x)
      002480 20 02            [ 2] 3044 	jra 8$
      002482 EA 00            [ 1] 3045 5$: or a,(GPIO_ODR,x)
      002484 E7 00            [ 1] 3046 8$: ld (GPIO_ODR,x),a 
      002486                       3047 	_drop VSIZE 
      002486 5B 02            [ 2]    1     addw sp,#VSIZE 
      002488 81               [ 4] 3048 	ret
                                   3049 
                                   3050 
                                   3051 ;-----------------------
                                   3052 ; BASIC: STOP
                                   3053 ; stop progam execution  
                                   3054 ; without resetting pointers 
                                   3055 ; the program is resumed
                                   3056 ; with RUN 
                                   3057 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



      002489                       3058 stop:
      002489 72 00 00 22 01   [ 2] 3059 	btjt flags,#FRUN,2$
      00248E 81               [ 4] 3060 	ret 
      00248F                       3061 2$:	 
                                   3062 ; create space on cstack to save context 
      00248F AE 24 B6         [ 2] 3063 	ldw x,#break_point 
      002492 CD 06 82         [ 4] 3064 	call puts 
      002495                       3065 	_drop 2 ;drop return address 
      002495 5B 02            [ 2]    1     addw sp,#2 
      002497                       3066 	_vars CTXT_SIZE ; context size 
      002497 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002499 CD 1D AD         [ 4] 3067 	call save_context 
      00249C AE 16 68         [ 2] 3068 	ldw x,#tib 
      00249F CF 00 04         [ 2] 3069 	ldw basicptr,x
      0024A2 7F               [ 1] 3070 	clr (x)
      0024A3 72 5F 00 02      [ 1] 3071 	clr count  
      0024A7 5F               [ 1] 3072 	clrw x 
      0024A8 CF 00 00         [ 2] 3073 	ldw in.w,x
      0024AB 72 11 00 22      [ 1] 3074 	bres flags,#FRUN 
      0024AF 72 18 00 22      [ 1] 3075 	bset flags,#FBREAK
      0024B3 CC 14 53         [ 2] 3076 	jp interpreter 
      0024B6 0A 62 72 65 61 6B 20  3077 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3078 
                                   3079 ;-----------------------
                                   3080 ; BASIC: NEW
                                   3081 ; from command line only 
                                   3082 ; free program memory
                                   3083 ; and clear variables 
                                   3084 ;------------------------
      0024D4                       3085 new: 
      0024D4 CD 16 C2         [ 4] 3086 	call cmd_line_only
      0024D7 72 5F 00 22      [ 1] 3087 0$:	clr flags 
      0024DB CD 11 C1         [ 4] 3088 	call clear_basic 
      0024DE 81               [ 4] 3089 	ret 
                                   3090 
                                   3091 ;-----------------------------------
                                   3092 ; erase program at specified address
                                   3093 ; keep signature and size fields. 
                                   3094 ; signature replaced by "XX"
                                   3095 ; input:
                                   3096 ;    X    address 
                                   3097 ;-----------------------------------
                           000001  3098 	ADDR=1    ; program address
                           000003  3099 	PRG_SIZE=3    ; program size 
                           000005  3100 	BLOCKS=5 ; blocks to erase 
                           000006  3101 	VSIZE=6
      0024DF                       3102 erase_program:
      0024DF 89               [ 2] 3103 	pushw x 
      0024E0 CD 15 28         [ 4] 3104 	call skip_string 
      0024E3 85               [ 2] 3105 	popw x 
      0024E4 CD 2F 07         [ 4] 3106 	call search_program 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      0024E7 27 4A            [ 1] 3107 	jreq 9$
      0024E9 CD 04 0D         [ 4] 3108 	call move_erase_to_ram
      0024EC 72 5F 00 18      [ 1] 3109 	clr farptr 
      0024F0                       3110 	_vars VSIZE 
      0024F0 52 06            [ 2]    1     sub sp,#VSIZE 
      0024F2 1D 00 04         [ 2] 3111 1$:	subw x,#4 
      0024F5 1F 01            [ 2] 3112 	ldw (ADDR,sp),x
      0024F7 EE 02            [ 2] 3113 	ldw x,(2,x)
      0024F9 1F 03            [ 2] 3114 	ldw (PRG_SIZE,sp),x
      0024FB A6 80            [ 1] 3115 	ld a,#BLOCK_SIZE 
      0024FD 62               [ 2] 3116 	div x,a 
      0024FE 4D               [ 1] 3117 	tnz a 
      0024FF 27 01            [ 1] 3118 	jreq 2$ 
      002501 5C               [ 1] 3119 	incw x 
      002502 1F 05            [ 2] 3120 2$:	ldw (BLOCKS,sp),x 
      002504 1E 01            [ 2] 3121 	ldw x,(ADDR,sp)
      002506 CF 00 19         [ 2] 3122 	ldw ptr16,x 
      002509 CD 04 8B         [ 4] 3123 3$:	call block_erase
      00250C AE 00 80         [ 2] 3124 	ldw x,#BLOCK_SIZE 
      00250F CD 05 86         [ 4] 3125 	call incr_farptr
      002512 1E 05            [ 2] 3126 	ldw x,(BLOCKS,sp)
      002514 5A               [ 2] 3127 	decw x 
      002515 1F 05            [ 2] 3128 	ldw (BLOCKS,sp),x 
      002517 26 F0            [ 1] 3129 	jrne 3$ 
                                   3130 ; write XX and size at addr 
      002519 1E 01            [ 2] 3131 	ldw x,(ADDR,sp)
      00251B CF 00 19         [ 2] 3132 	ldw ptr16,x 
      00251E A6 58            [ 1] 3133 	ld a,#'X 
      002520 5F               [ 1] 3134 	clrw x 
      002521 CD 04 B1         [ 4] 3135 	call write_byte 
      002524 CD 04 B1         [ 4] 3136 	call write_byte 
      002527 7B 03            [ 1] 3137 	ld a,(PRG_SIZE,sp)
      002529 CD 04 B1         [ 4] 3138 	call write_byte 
      00252C 7B 04            [ 1] 3139 	ld a,(PRG_SIZE+1,sp)
      00252E CD 04 B1         [ 4] 3140 	call write_byte 
      002531                       3141 	_drop VSIZE 
      002531 5B 06            [ 2]    1     addw sp,#VSIZE 
      002533                       3142 9$:	
      002533 81               [ 4] 3143 	ret 
                                   3144 
                                   3145 ;-----------------------------------
                                   3146 ; BASIC: ERASE \E | \F || address
                                   3147 ; erase all block in range from 
                                   3148 ;  'app_space' to FLASH end (0x27fff)
                                   3149 ;  or all EEPROM 
                                   3150 ; that contains a non zero byte. 
                                   3151 ; if the argument is an address  
                                   3152 ; mark the program at this address 
                                   3153 ; as erased. Erase the blocks 
                                   3154 ; replace signature by 'XX' and 
                                   3155 ; keep size field.  
                                   3156 ;-----------------------------------
                           000001  3157 	LIMIT=1 
                           000003  3158 	VSIZE = 3 
      002534                       3159 cmd_erase:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002534 CD 16 C2         [ 4] 3160 	call cmd_line_only
      002537 72 5F 00 18      [ 1] 3161 	clr farptr 
      00253B CD 15 0F         [ 4] 3162 	call next_token
      00253E A1 03            [ 1] 3163 	cp a,#TK_LABEL 
      002540 27 9D            [ 1] 3164 	jreq erase_program  
      002542                       3165 	_vars VSIZE 
      002542 52 03            [ 2]    1     sub sp,#VSIZE 
      002544 A1 04            [ 1] 3166 	cp a,#TK_CHAR 
      002546 27 03            [ 1] 3167 	jreq 0$ 
      002548 CC 13 B5         [ 2] 3168 	jp syntax_error
      00254B CD 15 51         [ 4] 3169 0$: call get_char 
      00254E A4 DF            [ 1] 3170 	and a,#0XDF 
      002550 A1 45            [ 1] 3171 	cp a,#'E
      002552 26 0C            [ 1] 3172 	jrne 1$
      002554 AE 40 00         [ 2] 3173 	ldw x,#EEPROM_BASE 
      002557 CF 00 19         [ 2] 3174 	ldw farptr+1,x 
      00255A AE 47 FF         [ 2] 3175 	ldw x,#EEPROM_END
      00255D 4F               [ 1] 3176 	clr a 
      00255E 20 15            [ 2] 3177 	jra 3$ 
      002560 A1 46            [ 1] 3178 1$: cp a,#'F 
      002562 27 06            [ 1] 3179 	jreq 2$
      002564 AE 12 BD         [ 2] 3180 	ldw x,#err_bad_value
      002567 CC 13 B7         [ 2] 3181 	jp tb_error
      00256A                       3182 2$:
      00256A AE 34 00         [ 2] 3183 	ldw x,#app_space  
      00256D CF 00 19         [ 2] 3184 	ldw farptr+1,x 
      002570 A6 02            [ 1] 3185 	ld a,#(FLASH_END>>16)&0XFF 
      002572 AE 7F FF         [ 2] 3186 	ldw x,#FLASH_END&0xffff
      002575                       3187 3$:
      002575 6B 01            [ 1] 3188 	ld (LIMIT,sp),a 
      002577 1F 02            [ 2] 3189 	ldw (LIMIT+1,sp),x 
                                   3190 ; operation done from RAM
                                   3191 ; copy code to RAM in tib   
      002579 CD 04 0D         [ 4] 3192 	call move_erase_to_ram
      00257C                       3193 4$:	 
      00257C CD 05 94         [ 4] 3194     call scan_block 
      00257F 27 08            [ 1] 3195 	jreq 5$  ; block already erased 
      002581 A6 45            [ 1] 3196     ld a,#'E 
      002583 CD 06 25         [ 4] 3197     call putc 
      002586 CD 04 8B         [ 4] 3198 	call block_erase   
                                   3199 ; this block is clean, next  
      002589 AE 00 80         [ 2] 3200 5$:	ldw x,#BLOCK_SIZE
      00258C CD 05 86         [ 4] 3201 	call incr_farptr
                                   3202 ; check limit, 24 bit substraction  	
      00258F 7B 01            [ 1] 3203 	ld a,(LIMIT,sp)
      002591 1E 02            [ 2] 3204 	ldw x,(LIMIT+1,sp)
      002593 72 B0 00 19      [ 2] 3205 	subw x,farptr+1
      002597 C2 00 18         [ 1] 3206 	sbc a,farptr 
      00259A 22 E0            [ 1] 3207 	jrugt 4$ 
      00259C CD 11 C1         [ 4] 3208 9$: call clear_basic
      00259F 1E 02            [ 2] 3209 	ldw x,(LIMIT+1,sp)
      0025A1 A3 47 FF         [ 2] 3210 	cpw x,#EEPROM_END
      0025A4 26 03            [ 1] 3211 	jrne 10$
      0025A6 CD 1A 58         [ 4] 3212 	call func_eefree 
      0025A9                       3213 10$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0025A9                       3214 	_drop VSIZE 
      0025A9 5B 03            [ 2]    1     addw sp,#VSIZE 
      0025AB 81               [ 4] 3215 	ret 
                                   3216 	
                                   3217 
                                   3218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3219 ;  check for application signature 
                                   3220 ; input:
                                   3221 ;	x       address to check 
                                   3222 ; output:
                                   3223 ;   Z      1  signature present 
                                   3224 ;          0 not app signature  
                                   3225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0025AC                       3226 qsign: 
      0025AC 89               [ 2] 3227 	pushw x 
                                   3228 ; align to block 
      0025AD 9F               [ 1] 3229 	ld a,xl 
      0025AE A4 80            [ 1] 3230 	and a,#BLOCK_SIZE 
      0025B0 97               [ 1] 3231 	ld xl,a 
      0025B1 FE               [ 2] 3232 	ldw x,(x)
      0025B2 C3 26 C7         [ 2] 3233 	cpw x,SIGNATURE ; "TB" 
      0025B5 85               [ 2] 3234 	popw x 
      0025B6 81               [ 4] 3235 	ret 
                                   3236 
                                   3237 ;--------------------------------------
                                   3238 ;  fill write buffer 
                                   3239 ;  input:
                                   3240 ;    y  point to output buffer 
                                   3241 ;    x  point to source 
                                   3242 ;    a  bytes to write in buffer 
                                   3243 ;  output:
                                   3244 ;    y   += A 
                                   3245 ;    X   += A 
                                   3246 ;    A   0 
                                   3247 ;---------------------------------------
      0025B7                       3248 fill_write_buffer:
      0025B7 88               [ 1] 3249 	push a 
      0025B8 4D               [ 1] 3250 	tnz a 
      0025B9 27 0A            [ 1] 3251 	jreq 9$ 
      0025BB F6               [ 1] 3252 1$: ld a,(x)
      0025BC 5C               [ 1] 3253 	incw x 
      0025BD 90 F7            [ 1] 3254 	ld (y),a 
      0025BF 90 5C            [ 1] 3255 	incw y 
      0025C1 0A 01            [ 1] 3256 	dec (1,sp) 
      0025C3 26 F6            [ 1] 3257 	jrne 1$ 
      0025C5 84               [ 1] 3258 9$:	pop a 
      0025C6 81               [ 4] 3259     ret 	
                                   3260 
                                   3261 ;--------------------------------------
                                   3262 ;  fill pad buffer with zero 
                                   3263 ;  input:
                                   3264 ;	none 
                                   3265 ;  output:
                                   3266 ;    y     buffer address  
                                   3267 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0025C7                       3268 clear_block_buffer:
      0025C7 88               [ 1] 3269 	push a 
      0025C8 90 AE 16 B8      [ 2] 3270 	ldw y,#block_buffer 
      0025CC 90 89            [ 2] 3271 	pushw y
      0025CE A6 80            [ 1] 3272 	ld a,#BLOCK_SIZE   
      0025D0 90 7F            [ 1] 3273 1$:	clr (y)
      0025D2 90 5C            [ 1] 3274 	incw y
      0025D4 4A               [ 1] 3275 	dec a  
      0025D5 26 F9            [ 1] 3276 	jrne 1$ 	
      0025D7 90 85            [ 2] 3277 9$: popw y 
      0025D9 84               [ 1] 3278 	pop a 			
      0025DA 81               [ 4] 3279 	ret 
                                   3280 
                                   3281 
                                   3282 ;----------------------------------
                                   3283 ;  search  a free space space that 
                                   3284 ;  fit program size 
                                   3285 ; input:
                                   3286 ;    X    program size 
                                   3287 ; output:
                                   3288 ;    X    address | 0 
                                   3289 ;------------------------------------
                           000001  3290 	PG_SIZE=1 
                           000002  3291 	VSIZE=2 
      0025DB                       3292 search_fit:
      0025DB 89               [ 2] 3293 	pushw x; PG_SIZE 
      0025DC AE 34 00         [ 2] 3294 	ldw x,#app_space 
      0025DF CD 26 CB         [ 4] 3295 1$:	call is_erased 
      0025E2 27 0D            [ 1] 3296 	jreq 4$
      0025E4 F6               [ 1] 3297 	ld a,(x)
      0025E5 EA 01            [ 1] 3298 	or a,(1,x)
      0025E7 27 23            [ 1] 3299 	jreq 9$ ; free space 
      0025E9 CD 26 D6         [ 4] 3300 2$:	call skip_to_next
      0025EC 5D               [ 2] 3301 	tnzw x 
      0025ED 26 F0            [ 1] 3302 	jrne 1$
      0025EF 20 1B            [ 2] 3303 	jra 9$
      0025F1                       3304 4$: ; erased program 
                                   3305     ; does it fit? 
      0025F1 CF 00 0D         [ 2] 3306 	ldw acc16,x 
      0025F4 EE 02            [ 2] 3307 	ldw x,(2,x) ; size erased program
                                   3308 ; top multiple of BLOCK_SIZE 
      0025F6 1C 00 04         [ 2] 3309 	addw x,#4 
      0025F9 1C 00 7F         [ 2] 3310 	addw x,#BLOCK_SIZE-1 
      0025FC 9F               [ 1] 3311 	ld a,xl 
      0025FD A4 80            [ 1] 3312 	and a,#BLOCK_SIZE 
      0025FF 97               [ 1] 3313 	ld xl,a  
      002600 13 01            [ 2] 3314 	cpw x,(1,sp) ; size program to save 
      002602 24 05            [ 1] 3315 	jruge 8$   ; fit 
      002604 CE 00 0D         [ 2] 3316 	ldw x,acc16 
      002607 20 E0            [ 2] 3317 	jra 2$ 
      002609 CE 00 0D         [ 2] 3318 8$: ldw x,acc16 ; fit in this one 	
      00260C                       3319 9$:	_drop VSIZE 
      00260C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00260E 81               [ 4] 3320 	ret  
                                   3321 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3322 ;-------------------------
                                   3323 ; erase header and 
                                   3324 ; size fields 
                                   3325 ; input: 
                                   3326 ;    X    program address 
                                   3327 ; output:
                                   3328 ;    X    unchanged 
                                   3329 ;-------------------------
                           000001  3330 	COUNT=1 
      00260F                       3331 erase_header:
      00260F 89               [ 2] 3332 	pushw x 
      002610 4B 04            [ 1] 3333 	push #4 ; COUNT 
      002612 72 5F 00 18      [ 1] 3334 	clr farptr 
      002616 CF 00 19         [ 2] 3335 	ldw ptr16,x 
      002619 4F               [ 1] 3336 	clr a 
      00261A 5F               [ 1] 3337 	clrw x 
      00261B CD 04 B1         [ 4] 3338 1$:	call write_byte 
      00261E 0A 01            [ 1] 3339 	dec (COUNT,sp)
      002620 26 F9            [ 1] 3340 	jrne 1$
      002622                       3341 	_drop 1 
      002622 5B 01            [ 2]    1     addw sp,#1 
      002624 85               [ 2] 3342 	popw x 
      002625 CF 00 19         [ 2] 3343 	ldw ptr16,x 
      002628 81               [ 4] 3344 	ret 
                                   3345 
                                   3346 ;---------------------------------------
                                   3347 ; BASIC: SAVE
                                   3348 ; write application from RAM to FLASH
                                   3349 ; at UFLASH address
                                   3350 ;--------------------------------------
                           000001  3351 	XTEMP=1
                           000003  3352 	COUNT=3  ; last count bytes written 
                           000004  3353 	CNT_LO=4 ; count low byte 
                           000005  3354 	TOWRITE=5 ; how bytes left to write  
                           000006  3355 	VSIZE=6 
      002629                       3356 cmd_save:
      002629 CD 16 C2         [ 4] 3357 	call cmd_line_only
      00262C 89               [ 2] 3358 	pushw x 
      00262D 90 89            [ 2] 3359 	pushw y 
      00262F                       3360 	_vars VSIZE
      00262F 52 06            [ 2]    1     sub sp,#VSIZE 
      002631 CD 1B 64         [ 4] 3361 	call prog_size 
      002634 26 03            [ 1] 3362 	jrne 0$ 
      002636 CC 26 C1         [ 2] 3363 	jp 9$ ; no program to save 
      002639 1F 05            [ 2] 3364 0$:	ldw (TOWRITE,sp),x ; program size
      00263B 72 5F 00 18      [ 1] 3365 	clr farptr 
      00263F CD 25 DB         [ 4] 3366 	call search_fit
      002642 CF 00 19         [ 2] 3367 	ldw ptr16,x 
      002645 AE FF FF         [ 2] 3368 	ldw x,#0xFFFF
      002648 72 B0 00 19      [ 2] 3369 	subw x,ptr16 ; free flash 
      00264C 1D 00 04         [ 2] 3370 	subw x,#4 ; signature and size field 
      00264F 13 05            [ 2] 3371 	cpw x,(TOWRITE,sp)
      002651 24 05            [ 1] 3372 	jruge 1$
      002653 A6 01            [ 1] 3373 	ld a,#ERR_MEM_FULL
      002655 CC 13 B7         [ 2] 3374 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      002658                       3375 1$: ; check if header bytes are zero's 
      002658 CE 00 19         [ 2] 3376 	ldw x,ptr16 
      00265B F6               [ 1] 3377 	ld a,(x)
      00265C EA 01            [ 1] 3378 	or a,(1,x)
      00265E EA 02            [ 1] 3379 	or a,(2,x)
      002660 EA 03            [ 1] 3380 	or a,(3,x)
      002662 27 03            [ 1] 3381 	jreq 2$
      002664 CD 26 0F         [ 4] 3382 	call erase_header ; preserve X and farptr 
      002667                       3383 2$: 
                                   3384 ; block programming flash
                                   3385 ; must be done from RAM
                                   3386 ; moved in tib  
      002667 CD 04 4D         [ 4] 3387 	call move_prg_to_ram
                                   3388 ; initialize written bytes count  
      00266A 0F 03            [ 1] 3389 	clr (COUNT,sp)
                                   3390 ; first bock 
                                   3391 ; containt signature 2 bytes 
                                   3392 ; and size 	2 bytes 
                                   3393 ; use Y as pointer to block_buffer
      00266C CD 25 C7         [ 4] 3394 	call clear_block_buffer ; -- y=*block_buffer	
                                   3395 ; write signature
      00266F CE 26 C7         [ 2] 3396 	ldw x,SIGNATURE ; "TB" 
      002672 90 FF            [ 2] 3397 	ldw (y),x 
      002674 72 A9 00 02      [ 2] 3398 	addw y,#2
      002678 1E 05            [ 2] 3399 	ldw x,(TOWRITE,sp)
      00267A 90 FF            [ 2] 3400 	ldw (y),x
      00267C 72 A9 00 02      [ 2] 3401 	addw y,#2   
      002680 A6 7C            [ 1] 3402 	ld a,#(BLOCK_SIZE-4)
      002682 A3 00 7C         [ 2] 3403 	cpw x,#(BLOCK_SIZE-4) 
      002685 22 01            [ 1] 3404 	jrugt 3$
      002687 9F               [ 1] 3405 	ld a,xl 
      002688 6B 04            [ 1] 3406 3$:	ld (CNT_LO,sp),a   
      00268A CE 00 1B         [ 2] 3407 	ldw x,txtbgn 
      00268D 1F 01            [ 2] 3408 	ldw (XTEMP,sp),x 
      00268F                       3409 32$: 
      00268F 1E 01            [ 2] 3410 	ldw x,(XTEMP,sp)
      002691 7B 04            [ 1] 3411 	ld a,(CNT_LO,sp)
      002693 CD 25 B7         [ 4] 3412 	call fill_write_buffer 
      002696 1F 01            [ 2] 3413 	ldw (XTEMP,sp),x 
      002698 AE 16 B8         [ 2] 3414 	ldw x,#block_buffer
      00269B CD 04 67         [ 4] 3415 	call write_buffer
      00269E AE 00 80         [ 2] 3416 	ldw x,#BLOCK_SIZE 
      0026A1 CD 05 86         [ 4] 3417 	call incr_farptr  
                                   3418 ; following blocks 
      0026A4 1E 01            [ 2] 3419 	ldw x,(XTEMP,sp)
      0026A6 C3 00 1D         [ 2] 3420 	cpw x,txtend 
      0026A9 24 16            [ 1] 3421 	jruge 9$ 
      0026AB 1E 05            [ 2] 3422 	ldw x,(TOWRITE,sp)
      0026AD 72 F0 03         [ 2] 3423 	subw x,(COUNT,sp)
      0026B0 1F 05            [ 2] 3424 	ldw (TOWRITE,sp),x 
      0026B2 A6 80            [ 1] 3425 	ld a,#BLOCK_SIZE 
      0026B4 A3 00 80         [ 2] 3426 	cpw x,#BLOCK_SIZE 
      0026B7 24 01            [ 1] 3427 	jruge 4$ 
      0026B9 9F               [ 1] 3428 	ld a,xl 
      0026BA 6B 04            [ 1] 3429 4$:	ld (CNT_LO,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0026BC CD 25 C7         [ 4] 3430 	call clear_block_buffer 
      0026BF 20 CE            [ 2] 3431 	jra 32$ 
      0026C1                       3432 9$:	_drop VSIZE 
      0026C1 5B 06            [ 2]    1     addw sp,#VSIZE 
      0026C3 90 85            [ 2] 3433     popw y 
      0026C5 85               [ 2] 3434 	popw x 
      0026C6 81               [ 4] 3435 	ret 
                                   3436 
      0026C7 54 42                 3437 SIGNATURE: .ascii "TB"
      0026C9 58 58                 3438 ERASED: .ascii "XX" 
                                   3439 
                                   3440 ;---------------------
                                   3441 ; check if there is 
                                   3442 ; an erased program 
                                   3443 ; at this address 
                                   3444 ; input:
                                   3445 ;    X    address 
                                   3446 ; output:
                                   3447 ;    Z    Set=erased program 
                                   3448 ;--------------------
      0026CB                       3449 is_erased:
      0026CB 89               [ 2] 3450 	pushw x 
                                   3451 ; align to BLOCK 
      0026CC 9F               [ 1] 3452 	ld a,xl 
      0026CD A4 80            [ 1] 3453 	and a,#BLOCK_SIZE 
      0026CF 97               [ 1] 3454 	ld xl,a 
      0026D0 FE               [ 2] 3455 	ldw x,(x)
      0026D1 C3 26 C9         [ 2] 3456 	cpw x,ERASED 
      0026D4 85               [ 2] 3457 	popw x 
      0026D5 81               [ 4] 3458 	ret 
                                   3459 
                                   3460 ;----------------------------
                                   3461 ;  skip to next program
                                   3462 ;  block 
                                   3463 ; input:
                                   3464 ;    X   actual program addr
                                   3465 ; output:
                                   3466 ;    X   next block 
                                   3467 ;        after program 
                                   3468 ;----------------------------
      0026D6                       3469 skip_to_next:
                                   3470 ; align to block 
      0026D6 9F               [ 1] 3471 	ld a,xl 
      0026D7 A4 80            [ 1] 3472 	and a,#BLOCK_SIZE 
      0026D9 97               [ 1] 3473 	ld xl,a 
      0026DA CF 00 0D         [ 2] 3474 	ldw acc16,x 
      0026DD EE 02            [ 2] 3475 	ldw x,(2,x)
      0026DF 72 BB 00 0D      [ 2] 3476 	addw x,acc16 ; blk_addr+prg_size 
      0026E3 1C 00 04         [ 2] 3477 	addw x,#4 ; +header fields 
                                   3478 ; align to next block 
      0026E6 1C 00 7F         [ 2] 3479 	addw x,#BLOCK_SIZE-1 
      0026E9 9F               [ 1] 3480 	ld a,xl 
      0026EA A4 80            [ 1] 3481 	and a,#0x80 
      0026EC 97               [ 1] 3482 	ld xl,a  
      0026ED 81               [ 4] 3483 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



                                   3484 
                                   3485 
                                   3486 ;---------------------
                                   3487 ; BASIC: DIR 
                                   3488 ; list programs saved 
                                   3489 ; in flash 
                                   3490 ;--------------------
                           000001  3491 	XTEMP=1 
      0026EE                       3492 cmd_dir:
      0026EE CD 16 C2         [ 4] 3493 	call cmd_line_only
      0026F1 AE 34 00         [ 2] 3494 	ldw x,#app_space 
      0026F4 89               [ 2] 3495 	pushw x 
      0026F5                       3496 1$: 
      0026F5 CD 25 AC         [ 4] 3497 	call qsign 
      0026F8 26 3B            [ 1] 3498 	jrne 4$
      0026FA 1C 00 04         [ 2] 3499 	addw x,#4
      0026FD 35 10 00 0A      [ 1] 3500 	mov base,#16
      002701 CD 15 57         [ 4] 3501 	call prt_i16
      002704 A6 20            [ 1] 3502 	ld a,#SPACE 
      002706 CD 06 25         [ 4] 3503 	call putc 
      002709 1E 01            [ 2] 3504 	ldw x,(1,sp)
      00270B EE 02            [ 2] 3505 	ldw x,(2,x)
      00270D 35 0A 00 0A      [ 1] 3506 	mov base,#10  
      002711 CD 15 57         [ 4] 3507 	call prt_i16 
      002714 AE 1B CE         [ 2] 3508 	ldw x,#STR_BYTES
      002717 CD 06 82         [ 4] 3509 	call puts
      00271A A6 2C            [ 1] 3510 	ld a,#', 
      00271C CD 06 25         [ 4] 3511 	call putc
      00271F 1E 01            [ 2] 3512 	ldw x,(1,sp)
      002721 1C 00 08         [ 2] 3513 	addw x,#8
      002724 CD 06 82         [ 4] 3514 	call puts 
      002727 A6 0D            [ 1] 3515 	ld a,#CR 
      002729 CD 06 25         [ 4] 3516 	call putc
      00272C 1E 01            [ 2] 3517 	ldw x,(1,sp)
      00272E CD 26 D6         [ 4] 3518 3$:	call skip_to_next
      002731 1F 01            [ 2] 3519 	ldw (1,sp),x 
      002733 20 C0            [ 2] 3520 	jra 1$
      002735                       3521 4$: ; check if it is an erased program 
      002735 CD 26 CB         [ 4] 3522 	call is_erased 
      002738 27 F4            [ 1] 3523 	jreq 3$ 
      00273A                       3524 8$: ; done 
      00273A                       3525 	_drop 2 
      00273A 5B 02            [ 2]    1     addw sp,#2 
      00273C 81               [ 4] 3526 	ret 
                                   3527 
                                   3528 ;---------------------
                                   3529 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3530 ; write 1 or more byte to FLASH or EEPROM
                                   3531 ; starting at address  
                                   3532 ; input:
                                   3533 ;   expr1  	is address 
                                   3534 ;   expr2,...,exprn   are bytes to write
                                   3535 ; output:
                                   3536 ;   none 
                                   3537 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



      00273D                       3538 write:
      00273D CD 18 2C         [ 4] 3539 	call expression
      002740 A1 84            [ 1] 3540 	cp a,#TK_INTGR 
      002742 27 03            [ 1] 3541 	jreq 0$
      002744 CC 13 B5         [ 2] 3542 	jp syntax_error
      002747                       3543 0$: _xpop 
      002747 90 F6            [ 1]    1     ld a,(y)
      002749 93               [ 1]    2     ldw x,y 
      00274A EE 01            [ 2]    3     ldw x,(1,x)
      00274C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002750 C7 00 18         [ 1] 3544 	ld farptr,a 
      002753 CF 00 19         [ 2] 3545 	ldw ptr16,x 
      002756                       3546 1$:	
      002756 CD 15 0F         [ 4] 3547 	call next_token 
      002759 A1 08            [ 1] 3548 	cp a,#TK_COMMA 
      00275B 27 02            [ 1] 3549 	jreq 2$ 
      00275D 20 46            [ 2] 3550 	jra 9$ ; no more data 
      00275F CD 15 0F         [ 4] 3551 2$:	call next_token 
      002762 A1 04            [ 1] 3552 	cp a,#TK_CHAR 
      002764 27 23            [ 1] 3553 	jreq 4$ 
      002766 A1 02            [ 1] 3554 	cp a,#TK_QSTR
      002768 27 2A            [ 1] 3555 	jreq 6$
      00276A                       3556 	_unget_token 
      00276A 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      00276F CD 18 2C         [ 4] 3557 	call expression
      002772 A1 84            [ 1] 3558 	cp a,#TK_INTGR
      002774 27 03            [ 1] 3559 	jreq 3$
      002776 CC 13 B5         [ 2] 3560 	jp syntax_error
      002779                       3561 3$:	_xpop 
      002779 90 F6            [ 1]    1     ld a,(y)
      00277B 93               [ 1]    2     ldw x,y 
      00277C EE 01            [ 2]    3     ldw x,(1,x)
      00277E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002782 9F               [ 1] 3562 	ld a,xl 
      002783 5F               [ 1] 3563 	clrw x 
      002784 CD 04 B1         [ 4] 3564 	call write_byte
      002787 20 CD            [ 2] 3565 	jra 1$ 
      002789                       3566 4$: ; write character 
      002789 F6               [ 1] 3567 	ld a,(x)
      00278A 72 5C 00 01      [ 1] 3568 	inc in 
      00278E 5F               [ 1] 3569 	clrw x 
      00278F CD 04 B1         [ 4] 3570 	call write_byte 
      002792 20 C2            [ 2] 3571 	jra 1$ 
      002794                       3572 6$: ; write string 
      002794 89               [ 2] 3573 	pushw x 
      002795 F6               [ 1] 3574 	ld a,(x)
      002796 72 5C 00 01      [ 1] 3575 	inc in 
      00279A 5F               [ 1] 3576 	clrw x 
      00279B CD 04 B1         [ 4] 3577 	call write_byte 
      00279E 85               [ 2] 3578 	popw x 
      00279F F6               [ 1] 3579 	ld a,(x)
      0027A0 27 B4            [ 1] 3580 	jreq 1$
      0027A2 5C               [ 1] 3581 	incw x 
      0027A3 20 EF            [ 2] 3582 	jra 6$ 	
      0027A5                       3583 9$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0027A5 81               [ 4] 3584 	ret 
                                   3585 
                                   3586 
                                   3587 ;---------------------
                                   3588 ;BASIC: CHAR(expr)
                                   3589 ; évaluate expression 
                                   3590 ; and take the 7 least 
                                   3591 ; bits as ASCII character
                                   3592 ; output: 
                                   3593 ; 	A char 
                                   3594 ;---------------------
      0027A6                       3595 func_char:
      0027A6 CD 16 E5         [ 4] 3596 	call func_args 
      0027A9 A1 01            [ 1] 3597 	cp a,#1
      0027AB 27 03            [ 1] 3598 	jreq 1$
      0027AD CC 13 B5         [ 2] 3599 	jp syntax_error
      0027B0                       3600 1$:	_xpop
      0027B0 90 F6            [ 1]    1     ld a,(y)
      0027B2 93               [ 1]    2     ldw x,y 
      0027B3 EE 01            [ 2]    3     ldw x,(1,x)
      0027B5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027B9 9F               [ 1] 3601 	ld a,xl
      0027BA A4 7F            [ 1] 3602 	and a,#0x7f 
      0027BC 81               [ 4] 3603 	ret
                                   3604 
                                   3605 ;---------------------
                                   3606 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3607 ; extract first character 
                                   3608 ; of string argument 
                                   3609 ; output:
                                   3610 ;    A:X    int24 
                                   3611 ;---------------------
      0027BD                       3612 ascii:
      0027BD A6 06            [ 1] 3613 	ld a,#TK_LPAREN
      0027BF CD 16 D8         [ 4] 3614 	call expect 
      0027C2 CD 15 0F         [ 4] 3615 	call next_token 
      0027C5 A1 02            [ 1] 3616 	cp a,#TK_QSTR 
      0027C7 27 0E            [ 1] 3617 	jreq 1$
      0027C9 A1 04            [ 1] 3618 	cp a,#TK_CHAR 
      0027CB 27 12            [ 1] 3619 	jreq 2$ 
      0027CD A1 82            [ 1] 3620 	cp a,#TK_CFUNC 
      0027CF 27 03            [ 1] 3621 	jreq 0$
      0027D1 CC 13 B5         [ 2] 3622 	jp syntax_error
      0027D4                       3623 0$: ; cfunc 
      0027D4 FD               [ 4] 3624 	call (x)
      0027D5 20 0B            [ 2] 3625 	jra 3$
      0027D7                       3626 1$: ; quoted string 
      0027D7 F6               [ 1] 3627 	ld a,(x)
      0027D8 88               [ 1] 3628 	push a  
      0027D9 CD 15 28         [ 4] 3629 	call skip_string
      0027DC 84               [ 1] 3630 	pop a  	
      0027DD 20 03            [ 2] 3631 	jra 3$ 
      0027DF                       3632 2$: ; character 
      0027DF CD 15 51         [ 4] 3633 	call get_char 
      0027E2 5F               [ 1] 3634 3$:	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      0027E3 02               [ 1] 3635 	rlwa x   
      0027E4                       3636 4$:	_xpush  
      0027E4 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0027E8 90 F7            [ 1]    2     ld (y),a 
      0027EA 90 EF 01         [ 2]    3     ldw (1,y),x 
      0027ED A6 07            [ 1] 3637 	ld a,#TK_RPAREN 
      0027EF CD 16 D8         [ 4] 3638 	call expect
      0027F2                       3639 9$:	
      0027F2                       3640 	_xpop  
      0027F2 90 F6            [ 1]    1     ld a,(y)
      0027F4 93               [ 1]    2     ldw x,y 
      0027F5 EE 01            [ 2]    3     ldw x,(1,x)
      0027F7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0027FB 81               [ 4] 3641 	ret 
                                   3642 
                                   3643 ;---------------------
                                   3644 ;BASIC: KEY
                                   3645 ; wait for a character 
                                   3646 ; received from STDIN 
                                   3647 ; input:
                                   3648 ;	none 
                                   3649 ; output:
                                   3650 ;	a	 character 
                                   3651 ;---------------------
      0027FC                       3652 key:
      0027FC CD 06 35         [ 4] 3653 	call getc 
      0027FF 81               [ 4] 3654 	ret
                                   3655 
                                   3656 ;----------------------
                                   3657 ; BASIC: QKEY
                                   3658 ; Return true if there 
                                   3659 ; is a character in 
                                   3660 ; waiting in STDIN 
                                   3661 ; input:
                                   3662 ;  none 
                                   3663 ; output:
                                   3664 ;   A     0|-1
                                   3665 ;-----------------------
      002800                       3666 qkey:: 
      002800 5F               [ 1] 3667 	clrw x 
      002801 C6 00 2D         [ 1] 3668 	ld a,rx1_head
      002804 C0 00 2E         [ 1] 3669 	sub a,rx1_tail 
      002807 27 03            [ 1] 3670 	jreq 9$ 
      002809 53               [ 2] 3671 	cplw x
      00280A A6 FF            [ 1] 3672 	ld a,#255    
      00280C                       3673 9$: 
      00280C 81               [ 4] 3674 	ret 
                                   3675 
                                   3676 ;-------------------------
                                   3677 ; BASIC: UFLASH 
                                   3678 ; return free flash address
                                   3679 ; scan all block starting at 
                                   3680 ; app_space and return 
                                   3681 ; address of first free block 
                                   3682 ; below extended memory.  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3683 ; return 0 if no free block 
                                   3684 ; input:
                                   3685 ;  none 
                                   3686 ; output:
                                   3687 ;	A:X		FLASH free address
                                   3688 ;---------------------------
      00280D                       3689 uflash:
      00280D 72 5F 00 18      [ 1] 3690 	clr farptr 
      002811 AE 34 00         [ 2] 3691 	ldw x,#app_space 
      002814 89               [ 2] 3692 	pushw x 
      002815 CF 00 19         [ 2] 3693 1$:	ldw ptr16,x 
      002818 CD 05 94         [ 4] 3694 	call scan_block 
      00281B 27 0F            [ 1] 3695 	jreq 8$
      00281D 1E 01            [ 2] 3696 	ldw x,(1,sp)
      00281F 1C 00 80         [ 2] 3697 	addw x,#BLOCK_SIZE 
      002822 27 04            [ 1] 3698 	jreq 7$ 
      002824 1F 01            [ 2] 3699 	ldw (1,sp),x 
      002826 20 ED            [ 2] 3700 	jra 1$ 
      002828                       3701 7$: ; no free block 
      002828 0F 01            [ 1] 3702 	clr (1,sp) 
      00282A 0F 02            [ 1] 3703 	clr (2,sp)
      00282C 85               [ 2] 3704 8$: popw x 
      00282D 4F               [ 1] 3705 	clr a 
      00282E 81               [ 4] 3706 	ret 
                                   3707 
                                   3708 
                                   3709 ;---------------------
                                   3710 ; BASIC: USR(addr,arg)
                                   3711 ; execute a function written 
                                   3712 ; in binary code.
                                   3713 ; input:
                                   3714 ;   addr	routine address 
                                   3715 ;   arg 	is an argument
                                   3716 ;           it can be ignore 
                                   3717 ;           by cally. 
                                   3718 ; output:
                                   3719 ;   xstack 	value returned by cally  
                                   3720 ;---------------------
      00282F                       3721 usr:
      00282F CD 16 E5         [ 4] 3722 	call func_args 
      002832 A1 02            [ 1] 3723 	cp a,#2
      002834 27 03            [ 1] 3724 	jreq 1$  
      002836 CC 13 B5         [ 2] 3725 	jp syntax_error 
      002839                       3726 1$: 
      002839                       3727 	_at_next ; A:X addr 
      002839 90 E6 03         [ 1]    1     ld a,(3,y)
      00283C 93               [ 1]    2     ldw x,y 
      00283D EE 04            [ 2]    3     ldw x,(4,x)
      00283F CF 00 19         [ 2] 3728 	ldw ptr16,X 
      002842                       3729 	_xpop  ; arg 
      002842 90 F6            [ 1]    1     ld a,(y)
      002844 93               [ 1]    2     ldw x,y 
      002845 EE 01            [ 2]    3     ldw x,(1,x)
      002847 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00284B                       3730 	_store_top ; overwrite addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      00284B 90 F7            [ 1]    1     ld (y),a 
      00284D 90 EF 01         [ 2]    2     ldw (1,y),x     
      002850 72 CD 00 19      [ 6] 3731     call [ptr16]
      002854 81               [ 4] 3732 	ret 
                                   3733 
                                   3734 
                                   3735 ;------------------------------
                                   3736 ; BASIC: BYE 
                                   3737 ; halt mcu in its lowest power mode 
                                   3738 ; wait for reset or external interrupt
                                   3739 ; do a cold start on wakeup.
                                   3740 ;------------------------------
      002855                       3741 bye:
      002855 72 0D 52 30 FB   [ 2] 3742 	btjf UART1_SR,#UART_SR_TC,.
      00285A 8E               [10] 3743 	halt
      00285B CC 00 B5         [ 2] 3744 	jp cold_start  
                                   3745 
                                   3746 ;----------------------------------
                                   3747 ; BASIC: SLEEP 
                                   3748 ; halt mcu until reset or external
                                   3749 ; interrupt.
                                   3750 ; Resume progam after SLEEP command
                                   3751 ;----------------------------------
      00285E                       3752 sleep:
      00285E 72 0D 52 30 FB   [ 2] 3753 	btjf UART1_SR,#UART_SR_TC,.
      002863 72 16 00 22      [ 1] 3754 	bset flags,#FSLEEP
      002867 8E               [10] 3755 	halt 
      002868 81               [ 4] 3756 	ret 
                                   3757 
                                   3758 ;-------------------------------
                                   3759 ; BASIC: PAUSE expr 
                                   3760 ; suspend execution for n msec.
                                   3761 ; input:
                                   3762 ;	none
                                   3763 ; output:
                                   3764 ;	none 
                                   3765 ;------------------------------
      002869                       3766 pause:
      002869 CD 18 2C         [ 4] 3767 	call expression
      00286C A1 84            [ 1] 3768 	cp a,#TK_INTGR
      00286E 27 03            [ 1] 3769 	jreq 1$ 
      002870 CC 13 B5         [ 2] 3770 	jp syntax_error
      002873                       3771 1$: _xpop 
      002873 90 F6            [ 1]    1     ld a,(y)
      002875 93               [ 1]    2     ldw x,y 
      002876 EE 01            [ 2]    3     ldw x,(1,x)
      002878 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00287C                       3772 pause02:
      00287C CF 00 12         [ 2] 3773 	ldw timer,x 
      00287F CE 00 12         [ 2] 3774 1$: ldw x,timer 
      002882 5D               [ 2] 3775 	tnzw x 
      002883 27 03            [ 1] 3776 	jreq 2$
      002885 8F               [10] 3777 	wfi 
      002886 26 F7            [ 1] 3778 	jrne 1$
      002888                       3779 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002888 81               [ 4] 3780 	ret 
                                   3781 
                                   3782 ;------------------------------
                                   3783 ; BASIC: AWU expr
                                   3784 ; halt mcu for 'expr' milliseconds
                                   3785 ; use Auto wakeup peripheral
                                   3786 ; all oscillators stopped except LSI
                                   3787 ; range: 1ms - 511ms
                                   3788 ; input:
                                   3789 ;  none
                                   3790 ; output:
                                   3791 ;  none:
                                   3792 ;------------------------------
      002889                       3793 awu:
      002889 CD 18 2C         [ 4] 3794   call expression
      00288C A1 84            [ 1] 3795   cp a,#TK_INTGR
      00288E 27 03            [ 1] 3796   jreq 1$
      002890 CC 13 B5         [ 2] 3797   jp syntax_error
      002893                       3798 1$: _xpop 
      002893 90 F6            [ 1]    1     ld a,(y)
      002895 93               [ 1]    2     ldw x,y 
      002896 EE 01            [ 2]    3     ldw x,(1,x)
      002898 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00289C                       3799 awu02:
      00289C A3 14 00         [ 2] 3800   cpw x,#5120
      00289F 2B 0C            [ 1] 3801   jrmi 1$ 
      0028A1 35 0F 50 F2      [ 1] 3802   mov AWU_TBR,#15 
      0028A5 A6 1E            [ 1] 3803   ld a,#30
      0028A7 62               [ 2] 3804   div x,a
      0028A8 A6 10            [ 1] 3805   ld a,#16
      0028AA 62               [ 2] 3806   div x,a 
      0028AB 20 1E            [ 2] 3807   jra 4$
      0028AD                       3808 1$: 
      0028AD A3 08 00         [ 2] 3809   cpw x,#2048
      0028B0 2B 09            [ 1] 3810   jrmi 2$ 
      0028B2 35 0E 50 F2      [ 1] 3811   mov AWU_TBR,#14
      0028B6 A6 50            [ 1] 3812   ld a,#80
      0028B8 62               [ 2] 3813   div x,a 
      0028B9 20 10            [ 2] 3814   jra 4$   
      0028BB                       3815 2$:
      0028BB 35 07 50 F2      [ 1] 3816   mov AWU_TBR,#7
      0028BF                       3817 3$:  
                                   3818 ; while X > 64  divide by 2 and increment AWU_TBR 
      0028BF A3 00 40         [ 2] 3819   cpw x,#64 
      0028C2 23 07            [ 2] 3820   jrule 4$ 
      0028C4 72 5C 50 F2      [ 1] 3821   inc AWU_TBR 
      0028C8 54               [ 2] 3822   srlw x 
      0028C9 20 F4            [ 2] 3823   jra 3$ 
      0028CB                       3824 4$:
      0028CB 9F               [ 1] 3825   ld a, xl
      0028CC 4A               [ 1] 3826   dec a 
      0028CD 27 01            [ 1] 3827   jreq 5$
      0028CF 4A               [ 1] 3828   dec a 	
      0028D0                       3829 5$: 
      0028D0 A4 3E            [ 1] 3830   and a,#0x3e 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



      0028D2 C7 50 F1         [ 1] 3831   ld AWU_APR,a 
      0028D5 72 18 50 F0      [ 1] 3832   bset AWU_CSR,#AWU_CSR_AWUEN
      0028D9 8E               [10] 3833   halt 
                                   3834 
      0028DA 81               [ 4] 3835   ret 
                                   3836 
                                   3837 ;------------------------------
                                   3838 ; BASIC: TICKS
                                   3839 ; return msec ticks counter value 
                                   3840 ; input:
                                   3841 ; 	none 
                                   3842 ; output:
                                   3843 ;	X 		TK_INTGR
                                   3844 ;-------------------------------
      0028DB                       3845 get_ticks:
      0028DB C6 00 0F         [ 1] 3846 	ld a,ticks 
      0028DE CE 00 10         [ 2] 3847 	ldw x,ticks+1 
      0028E1 81               [ 4] 3848 	ret 
                                   3849 
                                   3850 ;------------------------------
                                   3851 ; BASIC: ABS(expr)
                                   3852 ; return absolute value of expr.
                                   3853 ; input:
                                   3854 ;   none
                                   3855 ; output:
                                   3856 ;   xstack    positive int24 
                                   3857 ;-------------------------------
      0028E2                       3858 abs:
      0028E2 CD 16 E5         [ 4] 3859 	call func_args 
      0028E5 A1 01            [ 1] 3860 	cp a,#1 
      0028E7 27 03            [ 1] 3861 	jreq 0$ 
      0028E9 CC 13 B5         [ 2] 3862 	jp syntax_error
      0028EC                       3863 0$:  
      0028EC CD 01 F3         [ 4] 3864 	call abs24 
      0028EF                       3865 	_xpop 
      0028EF 90 F6            [ 1]    1     ld a,(y)
      0028F1 93               [ 1]    2     ldw x,y 
      0028F2 EE 01            [ 2]    3     ldw x,(1,x)
      0028F4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028F8 81               [ 4] 3866 	ret 
                                   3867 
                                   3868 ;------------------------------
                                   3869 ; BASIC: LSHIFT(expr1,expr2)
                                   3870 ; logical shift left expr1 by 
                                   3871 ; expr2 bits 
                                   3872 ; output:
                                   3873 ; 	A:x 	result 
                                   3874 ;------------------------------
      0028F9                       3875 lshift:
      0028F9 CD 16 E5         [ 4] 3876 	call func_args
      0028FC A1 02            [ 1] 3877 	cp a,#2 
      0028FE 27 03            [ 1] 3878 	jreq 1$
      002900 CC 13 B5         [ 2] 3879 	jp syntax_error
      002903                       3880 1$: _xpop 
      002903 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002905 93               [ 1]    2     ldw x,y 
      002906 EE 01            [ 2]    3     ldw x,(1,x)
      002908 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00290C 9F               [ 1] 3881 	ld a,xl 
      00290D 88               [ 1] 3882 	push a      
      00290E                       3883 	_xpop  ; T>A:X 
      00290E 90 F6            [ 1]    1     ld a,(y)
      002910 93               [ 1]    2     ldw x,y 
      002911 EE 01            [ 2]    3     ldw x,(1,x)
      002913 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002917 0D 01            [ 1] 3884 	tnz (1,sp) 
      002919 27 07            [ 1] 3885 	jreq 4$
      00291B 98               [ 1] 3886 2$:	rcf 
      00291C 59               [ 2] 3887 	rlcw x 
      00291D 49               [ 1] 3888 	rlc a 
      00291E 0A 01            [ 1] 3889 	dec (1,sp) 
      002920 26 F9            [ 1] 3890 	jrne 2$
      002922                       3891 4$: _drop 1 
      002922 5B 01            [ 2]    1     addw sp,#1 
      002924 81               [ 4] 3892 	ret
                                   3893 
                                   3894 ;------------------------------
                                   3895 ; BASIC: RSHIFT(expr1,expr2)
                                   3896 ; logical shift right expr1 by 
                                   3897 ; expr2 bits.
                                   3898 ; output:
                                   3899 ; 	A 		TK_INTGR
                                   3900 ;   X 		result 
                                   3901 ;------------------------------
      002925                       3902 rshift:
      002925 CD 16 E5         [ 4] 3903 	call func_args
      002928 A1 02            [ 1] 3904 	cp a,#2 
      00292A 27 03            [ 1] 3905 	jreq 1$
      00292C CC 13 B5         [ 2] 3906 	jp syntax_error
      00292F                       3907 1$: _xpop ; T>A:X
      00292F 90 F6            [ 1]    1     ld a,(y)
      002931 93               [ 1]    2     ldw x,y 
      002932 EE 01            [ 2]    3     ldw x,(1,x)
      002934 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002938 9F               [ 1] 3908     ld a,xl 
      002939 88               [ 1] 3909 	push a    
      00293A                       3910 	_xpop  
      00293A 90 F6            [ 1]    1     ld a,(y)
      00293C 93               [ 1]    2     ldw x,y 
      00293D EE 01            [ 2]    3     ldw x,(1,x)
      00293F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002943 0D 01            [ 1] 3911 	tnz (1,sp)
      002945 27 07            [ 1] 3912 	jreq 4$
      002947 98               [ 1] 3913 2$:	rcf 
      002948 46               [ 1] 3914 	rrc a 
      002949 56               [ 2] 3915 	rrcw x 
      00294A 0A 01            [ 1] 3916 	dec (1,sp) 
      00294C 26 F9            [ 1] 3917 	jrne 2$
      00294E                       3918 4$: _drop 1 
      00294E 5B 01            [ 2]    1     addw sp,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



      002950 81               [ 4] 3919 	ret
                                   3920 
                                   3921 ;--------------------------
                                   3922 ; BASIC: FCPU integer
                                   3923 ; set CPU frequency 
                                   3924 ;-------------------------- 
                                   3925 
      002951                       3926 fcpu:
      002951 A6 84            [ 1] 3927 	ld a,#TK_INTGR
      002953 CD 16 D8         [ 4] 3928 	call expect 
      002956 CD 15 41         [ 4] 3929 	call get_int24 
      002959 9F               [ 1] 3930 	ld a,xl 
      00295A A4 07            [ 1] 3931 	and a,#7 
      00295C C7 50 C6         [ 1] 3932 	ld CLK_CKDIVR,a 
      00295F 81               [ 4] 3933 	ret 
                                   3934 
                                   3935 ;------------------------------
                                   3936 ; BASIC: PMODE pin#, mode 
                                   3937 ; Arduino pin. 
                                   3938 ; define pin as input or output
                                   3939 ; pin#: {0..15}
                                   3940 ; mode: INPUT|OUTPUT  
                                   3941 ;------------------------------
                           000001  3942 	PINNO=1
                           000001  3943 	VSIZE=1
      002960                       3944 pin_mode:
      002960                       3945 	_vars VSIZE 
      002960 52 01            [ 2]    1     sub sp,#VSIZE 
      002962 CD 16 EA         [ 4] 3946 	call arg_list 
      002965 A1 02            [ 1] 3947 	cp a,#2 
      002967 27 03            [ 1] 3948 	jreq 1$
      002969 CC 13 B5         [ 2] 3949 	jp syntax_error 
      00296C                       3950 1$: _xpop 
      00296C 90 F6            [ 1]    1     ld a,(y)
      00296E 93               [ 1]    2     ldw x,y 
      00296F EE 01            [ 2]    3     ldw x,(1,x)
      002971 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002975 CF 00 19         [ 2] 3951 	ldw ptr16,x ; mode 
      002978                       3952 	_xpop ; Dx pin 
      002978 90 F6            [ 1]    1     ld a,(y)
      00297A 93               [ 1]    2     ldw x,y 
      00297B EE 01            [ 2]    3     ldw x,(1,x)
      00297D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002981 CD 29 BF         [ 4] 3953 	call select_pin 
      002984 6B 01            [ 1] 3954 	ld (PINNO,sp),a  
      002986 A6 01            [ 1] 3955 	ld a,#1 
      002988 0D 01            [ 1] 3956 	tnz (PINNO,sp)
      00298A 27 0D            [ 1] 3957 	jreq 4$
      00298C 48               [ 1] 3958 2$:	sll a 
      00298D 0A 01            [ 1] 3959 	dec (PINNO,sp)
      00298F 26 FB            [ 1] 3960 	jrne 2$ 
      002991 6B 01            [ 1] 3961 	ld (PINNO,sp),a
      002993 7B 01            [ 1] 3962 	ld a,(PINNO,sp)
      002995 EA 03            [ 1] 3963 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002997 E7 03            [ 1] 3964 	ld (GPIO_CR1,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



      002999 A6 01            [ 1] 3965 4$:	ld a,#OUTP
      00299B C1 00 0E         [ 1] 3966 	cp a,acc8 
      00299E 27 10            [ 1] 3967 	jreq 6$
                                   3968 ; input mode
                                   3969 ; disable external interrupt 
      0029A0 7B 01            [ 1] 3970 	ld a,(PINNO,sp)
      0029A2 43               [ 1] 3971 	cpl a 
      0029A3 E4 04            [ 1] 3972 	and a,(GPIO_CR2,x)
      0029A5 E7 04            [ 1] 3973 	ld (GPIO_CR2,x),a 
                                   3974 ;clear bit in DDR for input mode 
      0029A7 7B 01            [ 1] 3975 	ld a,(PINNO,sp)
      0029A9 43               [ 1] 3976 	cpl a 
      0029AA E4 02            [ 1] 3977 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0029AC E7 02            [ 1] 3978 	ld (GPIO_DDR,x),a 
      0029AE 20 0C            [ 2] 3979 	jra 9$
      0029B0                       3980 6$: ;output mode  
      0029B0 7B 01            [ 1] 3981 	ld a,(PINNO,sp)
      0029B2 EA 02            [ 1] 3982 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0029B4 E7 02            [ 1] 3983 	ld (GPIO_DDR,x),a 
      0029B6 7B 01            [ 1] 3984 	ld a,(PINNO,sp)
      0029B8 EA 04            [ 1] 3985 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0029BA E7 04            [ 1] 3986 	ld (GPIO_CR2,x),a 
      0029BC                       3987 9$:	
      0029BC                       3988 	_drop VSIZE 
      0029BC 5B 01            [ 2]    1     addw sp,#VSIZE 
      0029BE 81               [ 4] 3989 	ret
                                   3990 
                                   3991 ;------------------------
                                   3992 ; select Arduino pin 
                                   3993 ; input:
                                   3994 ;   X 	 {0..15} Arduino Dx 
                                   3995 ; output:
                                   3996 ;   A     stm8s208 pin 
                                   3997 ;   X     base address s208 GPIO port 
                                   3998 ;---------------------------
      0029BF                       3999 select_pin:
      0029BF 58               [ 2] 4000 	sllw x 
      0029C0 1C 29 CF         [ 2] 4001 	addw x,#arduino_to_8s208 
      0029C3 FE               [ 2] 4002 	ldw x,(x)
      0029C4 9F               [ 1] 4003 	ld a,xl 
      0029C5 88               [ 1] 4004 	push a 
      0029C6 5E               [ 1] 4005 	swapw x 
      0029C7 A6 05            [ 1] 4006 	ld a,#5 
      0029C9 42               [ 4] 4007 	mul x,a 
      0029CA 1C 50 00         [ 2] 4008 	addw x,#GPIO_BASE 
      0029CD 84               [ 1] 4009 	pop a 
      0029CE 81               [ 4] 4010 	ret 
                                   4011 ; translation from Arduino D0..D15 to stm8s208rb 
      0029CF                       4012 arduino_to_8s208:
      0029CF 03 06                 4013 .byte 3,6 ; D0 
      0029D1 03 05                 4014 .byte 3,5 ; D1 
      0029D3 04 00                 4015 .byte 4,0 ; D2 
      0029D5 02 01                 4016 .byte 2,1 ; D3
      0029D7 06 00                 4017 .byte 6,0 ; D4
      0029D9 02 02                 4018 .byte 2,2 ; D5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      0029DB 02 03                 4019 .byte 2,3 ; D6
      0029DD 03 01                 4020 .byte 3,1 ; D7
      0029DF 03 03                 4021 .byte 3,3 ; D8
      0029E1 02 04                 4022 .byte 2,4 ; D9
      0029E3 04 05                 4023 .byte 4,5 ; D10
      0029E5 02 06                 4024 .byte 2,6 ; D11
      0029E7 02 07                 4025 .byte 2,7 ; D12
      0029E9 02 05                 4026 .byte 2,5 ; D13
      0029EB 04 02                 4027 .byte 4,2 ; D14
      0029ED 04 01                 4028 .byte 4,1 ; D15
                                   4029 
                                   4030 
                                   4031 ;------------------------------
                                   4032 ; BASIC: RND(expr)
                                   4033 ; return random number 
                                   4034 ; between 1 and expr inclusive
                                   4035 ; xorshift16 
                                   4036 ; ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4037 ; input:
                                   4038 ; 	none 
                                   4039 ; output:
                                   4040 ;	xstack 	random positive integer 
                                   4041 ;------------------------------
      0029EF                       4042 random:
      0029EF CD 16 E5         [ 4] 4043 	call func_args 
      0029F2 A1 01            [ 1] 4044 	cp a,#1
      0029F4 27 03            [ 1] 4045 	jreq 1$
      0029F6 CC 13 B5         [ 2] 4046 	jp syntax_error
      0029F9                       4047 1$:  
      0029F9                       4048 	_xpop   
      0029F9 90 F6            [ 1]    1     ld a,(y)
      0029FB 93               [ 1]    2     ldw x,y 
      0029FC EE 01            [ 2]    3     ldw x,(1,x)
      0029FE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A02 89               [ 2] 4049 	pushw x 
      002A03 88               [ 1] 4050 	push a  
      002A04 A6 80            [ 1] 4051 	ld a,#0x80 
      002A06 15 01            [ 1] 4052 	bcp a,(1,sp)
      002A08 27 05            [ 1] 4053 	jreq 2$
      002A0A A6 0A            [ 1] 4054 	ld a,#ERR_BAD_VALUE
      002A0C CC 13 B7         [ 2] 4055 	jp tb_error
      002A0F                       4056 2$: 
                                   4057 ; acc16=(x<<5)^x 
      002A0F CE 00 14         [ 2] 4058 	ldw x,seedx 
      002A12 58               [ 2] 4059 	sllw x 
      002A13 58               [ 2] 4060 	sllw x 
      002A14 58               [ 2] 4061 	sllw x 
      002A15 58               [ 2] 4062 	sllw x 
      002A16 58               [ 2] 4063 	sllw x 
      002A17 9E               [ 1] 4064 	ld a,xh 
      002A18 C8 00 14         [ 1] 4065 	xor a,seedx 
      002A1B C7 00 0D         [ 1] 4066 	ld acc16,a 
      002A1E 9F               [ 1] 4067 	ld a,xl 
      002A1F C8 00 15         [ 1] 4068 	xor a,seedx+1 
      002A22 C7 00 0E         [ 1] 4069 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                                   4070 ; seedx=seedy 
      002A25 CE 00 16         [ 2] 4071 	ldw x,seedy 
      002A28 CF 00 14         [ 2] 4072 	ldw seedx,x  
                                   4073 ; seedy=seedy^(seedy>>1)
      002A2B CE 00 16         [ 2] 4074 	ldw x,seedy 
      002A2E 54               [ 2] 4075 	srlw x 
      002A2F 9E               [ 1] 4076 	ld a,xh 
      002A30 C8 00 16         [ 1] 4077 	xor a,seedy 
      002A33 C7 00 16         [ 1] 4078 	ld seedy,a  
      002A36 9F               [ 1] 4079 	ld a,xl 
      002A37 C8 00 17         [ 1] 4080 	xor a,seedy+1 
      002A3A C7 00 17         [ 1] 4081 	ld seedy+1,a 
                                   4082 ; acc16>>3 
      002A3D CE 00 0D         [ 2] 4083 	ldw x,acc16 
      002A40 54               [ 2] 4084 	srlw x 
      002A41 54               [ 2] 4085 	srlw x 
      002A42 54               [ 2] 4086 	srlw x 
                                   4087 ; x=acc16^x 
      002A43 9E               [ 1] 4088 	ld a,xh 
      002A44 C8 00 0D         [ 1] 4089 	xor a,acc16 
      002A47 C7 00 0D         [ 1] 4090 	ld acc16,a 
      002A4A 9F               [ 1] 4091 	ld a,xl 
      002A4B C8 00 0E         [ 1] 4092 	xor a,acc8 
      002A4E C7 00 0E         [ 1] 4093 	ld acc8,a 
                                   4094 ; seedy=acc16^seedy 
      002A51 C8 00 17         [ 1] 4095 	xor a,seedy+1
      002A54 97               [ 1] 4096 	ld xl,a 
      002A55 C6 00 0D         [ 1] 4097 	ld a,acc16 
      002A58 C8 00 16         [ 1] 4098 	xor a,seedy
      002A5B 95               [ 1] 4099 	ld xh,a 
      002A5C CF 00 16         [ 2] 4100 	ldw seedy,x 
                                   4101 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002A5F C6 00 15         [ 1] 4102 	ld a,seedx+1
      002A62 A4 7F            [ 1] 4103 	and a,#127
      002A64                       4104 	_xpush 
      002A64 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002A68 90 F7            [ 1]    2     ld (y),a 
      002A6A 90 EF 01         [ 2]    3     ldw (1,y),x 
      002A6D 84               [ 1] 4105 	pop a 
      002A6E 85               [ 2] 4106 	popw x 
      002A6F                       4107 	_xpush 
      002A6F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002A73 90 F7            [ 1]    2     ld (y),a 
      002A75 90 EF 01         [ 2]    3     ldw (1,y),x 
      002A78 CD 03 A1         [ 4] 4108 	call mod24 
      002A7B                       4109 	_xpop
      002A7B 90 F6            [ 1]    1     ld a,(y)
      002A7D 93               [ 1]    2     ldw x,y 
      002A7E EE 01            [ 2]    3     ldw x,(1,x)
      002A80 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A84 1C 00 01         [ 2] 4110 	addw x,#1 
      002A87 A9 00            [ 1] 4111 	adc a,#0  
      002A89 81               [ 4] 4112 	ret 
                                   4113 
                                   4114 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



                                   4115 ; BASIC: WORDS 
                                   4116 ; affiche la listes des mots du
                                   4117 ; dictionnaire ainsi que le nombre
                                   4118 ; de mots.
                                   4119 ;---------------------------------
                           000001  4120 	WLEN=1 ; word length
                           000002  4121 	LLEN=2 ; character sent to console
                           000003  4122 	WCNT=3 ; count words printed 
                           000003  4123 	VSIZE=3 
      002A8A                       4124 words:
      002A8A CD 16 C2         [ 4] 4125 	call cmd_line_only
      002A8D 90 89            [ 2] 4126 	pushw y
      002A8F                       4127 	_vars VSIZE
      002A8F 52 03            [ 2]    1     sub sp,#VSIZE 
      002A91 0F 02            [ 1] 4128 	clr (LLEN,sp)
      002A93 0F 03            [ 1] 4129 	clr (WCNT,sp)
      002A95 90 AE 33 A1      [ 2] 4130 	ldw y,#kword_dict+2
      002A99 93               [ 1] 4131 0$:	ldw x,y
      002A9A F6               [ 1] 4132 	ld a,(x)
      002A9B A4 0F            [ 1] 4133 	and a,#15 
      002A9D 6B 01            [ 1] 4134 	ld (WLEN,sp),a 
      002A9F 0C 03            [ 1] 4135 	inc (WCNT,sp)
      002AA1 5C               [ 1] 4136 1$:	incw x 
      002AA2 F6               [ 1] 4137 	ld a,(x)
      002AA3 CD 06 25         [ 4] 4138 	call putc 
      002AA6 0C 02            [ 1] 4139 	inc (LLEN,sp)
      002AA8 0A 01            [ 1] 4140 	dec (WLEN,sp)
      002AAA 26 F5            [ 1] 4141 	jrne 1$
      002AAC A6 46            [ 1] 4142 	ld a,#70
      002AAE 11 02            [ 1] 4143 	cp a,(LLEN,sp)
      002AB0 2B 09            [ 1] 4144 	jrmi 2$   
      002AB2 A6 20            [ 1] 4145 	ld a,#SPACE 
      002AB4 CD 06 25         [ 4] 4146 	call putc 
      002AB7 0C 02            [ 1] 4147 	inc (LLEN,sp) 
      002AB9 20 07            [ 2] 4148 	jra 3$
      002ABB A6 0D            [ 1] 4149 2$: ld a,#CR 
      002ABD CD 06 25         [ 4] 4150 	call putc 
      002AC0 0F 02            [ 1] 4151 	clr (LLEN,sp)
      002AC2 72 A2 00 02      [ 2] 4152 3$:	subw y,#2 
      002AC6 90 FE            [ 2] 4153 	ldw y,(y)
      002AC8 26 CF            [ 1] 4154 	jrne 0$ 
      002ACA A6 0D            [ 1] 4155 	ld a,#CR 
      002ACC CD 06 25         [ 4] 4156 	call putc  
      002ACF 5F               [ 1] 4157 	clrw x 
      002AD0 7B 03            [ 1] 4158 	ld a,(WCNT,sp)
      002AD2 97               [ 1] 4159 	ld xl,a 
      002AD3 CD 15 57         [ 4] 4160 	call prt_i16 
      002AD6 AE 2A E1         [ 2] 4161 	ldw x,#words_count_msg
      002AD9 CD 06 82         [ 4] 4162 	call puts 
      002ADC                       4163 	_drop VSIZE 
      002ADC 5B 03            [ 2]    1     addw sp,#VSIZE 
      002ADE 90 85            [ 2] 4164 	popw y 
      002AE0 81               [ 4] 4165 	ret 
      002AE1 20 77 6F 72 64 73 20  4166 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



             69 6F 6E 61 72 79 0A
             00
                                   4167 
                                   4168 
                                   4169 ;-----------------------------
                                   4170 ; BASIC: TIMER expr 
                                   4171 ; initialize count down timer 
                                   4172 ;-----------------------------
      002AF7                       4173 set_timer:
      002AF7 CD 16 EA         [ 4] 4174 	call arg_list
      002AFA A1 01            [ 1] 4175 	cp a,#1 
      002AFC 27 03            [ 1] 4176 	jreq 1$
      002AFE CC 13 B5         [ 2] 4177 	jp syntax_error
      002B01                       4178 1$: 
      002B01                       4179 	_xpop  
      002B01 90 F6            [ 1]    1     ld a,(y)
      002B03 93               [ 1]    2     ldw x,y 
      002B04 EE 01            [ 2]    3     ldw x,(1,x)
      002B06 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B0A CF 00 12         [ 2] 4180 	ldw timer,x 
      002B0D 81               [ 4] 4181 	ret 
                                   4182 
                                   4183 ;------------------------------
                                   4184 ; BASIC: TIMEOUT 
                                   4185 ; return state of timer 
                                   4186 ; output:
                                   4187 ;   A:X     0 not timeout 
                                   4188 ;   A:X     -1 timeout 
                                   4189 ;------------------------------
      002B0E                       4190 timeout:
      002B0E 4F               [ 1] 4191 	clr a 
      002B0F CE 00 12         [ 2] 4192 	ldw x,timer 
      002B12 27 02            [ 1] 4193 	jreq 1$
      002B14 5F               [ 1] 4194 	clrw x
      002B15 81               [ 4] 4195 	ret  
      002B16 43               [ 1] 4196 1$:	cpl a
      002B17 53               [ 2] 4197 	cplw x 
      002B18 81               [ 4] 4198 	ret 
                                   4199  	
                                   4200 
                                   4201 
                                   4202 
                                   4203 ;-----------------------------------
                                   4204 ; BASIC: IWDGEN expr1 
                                   4205 ; enable independant watchdog timer
                                   4206 ; expr1 is delay in multiple of 62.5µsec
                                   4207 ; expr1 -> {1..16383}
                                   4208 ;-----------------------------------
      002B19                       4209 enable_iwdg:
      002B19 CD 16 EA         [ 4] 4210 	call arg_list
      002B1C A1 01            [ 1] 4211 	cp a,#1 
      002B1E 27 03            [ 1] 4212 	jreq 1$
      002B20 CC 13 B5         [ 2] 4213 	jp syntax_error 
      002B23                       4214 1$: _xpop  
      002B23 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002B25 93               [ 1]    2     ldw x,y 
      002B26 EE 01            [ 2]    3     ldw x,(1,x)
      002B28 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B2C 4B 00            [ 1] 4215 	push #0
      002B2E 35 CC 50 E0      [ 1] 4216 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002B32 9E               [ 1] 4217 	ld a,xh 
      002B33 A4 3F            [ 1] 4218 	and a,#0x3f
      002B35 95               [ 1] 4219 	ld xh,a  
      002B36 A3 00 FF         [ 2] 4220 2$:	cpw x,#255
      002B39 23 06            [ 2] 4221 	jrule 3$
      002B3B 0C 01            [ 1] 4222 	inc (1,sp)
      002B3D 98               [ 1] 4223 	rcf 
      002B3E 56               [ 2] 4224 	rrcw x 
      002B3F 20 F5            [ 2] 4225 	jra 2$
      002B41 35 55 50 E0      [ 1] 4226 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002B45 84               [ 1] 4227 	pop a  
      002B46 C7 50 E1         [ 1] 4228 	ld IWDG_PR,a 
      002B49 9F               [ 1] 4229 	ld a,xl
      002B4A 4A               [ 1] 4230 	dec a 
      002B4B 35 55 50 E0      [ 1] 4231 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002B4F C7 50 E2         [ 1] 4232 	ld IWDG_RLR,a 
      002B52 35 AA 50 E0      [ 1] 4233 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002B56 81               [ 4] 4234 	ret 
                                   4235 
                                   4236 
                                   4237 ;-----------------------------------
                                   4238 ; BASIC: IWDGREF  
                                   4239 ; refresh independant watchdog count down 
                                   4240 ; timer before it reset MCU. 
                                   4241 ;-----------------------------------
      002B57                       4242 refresh_iwdg:
      002B57 35 AA 50 E0      [ 1] 4243 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002B5B 81               [ 4] 4244 	ret 
                                   4245 
                                   4246 
                                   4247 ;-------------------------------------
                                   4248 ; BASIC: LOG2(expr)
                                   4249 ; return logarithm base 2 of expr 
                                   4250 ; this is the position of most significant
                                   4251 ; bit set. 
                                   4252 ; input: 
                                   4253 ; output:
                                   4254 ;   A     TK_INTGR 
                                   4255 ;   xstack log2 
                                   4256 ;*********************************
      002B5C                       4257 log2:
      002B5C CD 16 E5         [ 4] 4258 	call func_args 
      002B5F A1 01            [ 1] 4259 	cp a,#1 
      002B61 27 03            [ 1] 4260 	jreq 1$
      002B63 CC 13 B5         [ 2] 4261 	jp syntax_error 
      002B66                       4262 1$: 
      002B66                       4263 	_xpop    
      002B66 90 F6            [ 1]    1     ld a,(y)
      002B68 93               [ 1]    2     ldw x,y 
      002B69 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002B6B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B6F 4D               [ 1] 4264 	tnz a
      002B70 26 08            [ 1] 4265 	jrne 2$ 
      002B72 5D               [ 2] 4266 	tnzw x 
      002B73 26 05            [ 1] 4267 	jrne 2$
      002B75 A6 0A            [ 1] 4268 	ld a,#ERR_BAD_VALUE
      002B77 CC 13 B7         [ 2] 4269 	jp tb_error 
      002B7A 4B 18            [ 1] 4270 2$: push #24 
      002B7C 59               [ 2] 4271 3$: rlcw x 
      002B7D 49               [ 1] 4272     rlc a 
      002B7E 25 04            [ 1] 4273 	jrc 4$
      002B80 0A 01            [ 1] 4274 	dec (1,sp) 
      002B82 26 F8            [ 1] 4275 	jrne 3$
      002B84 5F               [ 1] 4276 4$: clrw x 
      002B85 84               [ 1] 4277     pop a 
      002B86 4A               [ 1] 4278 	dec a
      002B87 02               [ 1] 4279 	rlwa x  
      002B88                       4280 9$:	
      002B88 81               [ 4] 4281 	ret 
                                   4282 
                                   4283 ;-----------------------------------
                                   4284 ; BASIC: BIT(expr) 
                                   4285 ; expr ->{0..23}
                                   4286 ; return 2^expr 
                                   4287 ; output:
                                   4288 ;    A:X    2^expr 
                                   4289 ;-----------------------------------
      002B89                       4290 bitmask:
      002B89 CD 16 E5         [ 4] 4291     call func_args 
      002B8C A1 01            [ 1] 4292 	cp a,#1
      002B8E 27 03            [ 1] 4293 	jreq 1$
      002B90 CC 13 B5         [ 2] 4294 	jp syntax_error 
      002B93                       4295 1$: _xpop 
      002B93 90 F6            [ 1]    1     ld a,(y)
      002B95 93               [ 1]    2     ldw x,y 
      002B96 EE 01            [ 2]    3     ldw x,(1,x)
      002B98 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B9C 9F               [ 1] 4296 	ld a,xl 
      002B9D AE 00 01         [ 2] 4297 	ldw x,#1 
      002BA0 A4 17            [ 1] 4298 	and a,#23
      002BA2 27 0A            [ 1] 4299 	jreq 9$
      002BA4 88               [ 1] 4300 	push a 
      002BA5 4F               [ 1] 4301 	clr a 
      002BA6                       4302 2$: 
      002BA6 58               [ 2] 4303 	slaw x 
      002BA7 49               [ 1] 4304 	rlc a 	
      002BA8 0A 01            [ 1] 4305 	dec (1,sp)
      002BAA 26 FA            [ 1] 4306 	jrne 2$ 
      002BAC                       4307 4$:
      002BAC                       4308     _drop 1 
      002BAC 5B 01            [ 2]    1     addw sp,#1 
      002BAE 81               [ 4] 4309 9$:	ret 
                                   4310 
                                   4311 ;------------------------------
                                   4312 ; BASIC: DO 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4313 ; initiate a DO ... UNTIL loop 
                                   4314 ;------------------------------
                           000003  4315 	DOLP_ADR=3 
                           000005  4316 	DOLP_INW=5
                           000004  4317 	VSIZE=4 
      002BAF                       4318 do_loop:
      002BAF 85               [ 2] 4319 	popw x 
      002BB0                       4320 	_vars VSIZE 
      002BB0 52 04            [ 2]    1     sub sp,#VSIZE 
      002BB2 89               [ 2] 4321 	pushw x 
      002BB3 CE 00 04         [ 2] 4322 	ldw x,basicptr 
      002BB6 1F 03            [ 2] 4323 	ldw (DOLP_ADR,sp),x
      002BB8 CE 00 00         [ 2] 4324 	ldw x,in.w 
      002BBB 1F 05            [ 2] 4325 	ldw (DOLP_INW,sp),x
      002BBD 72 5C 00 1F      [ 1] 4326 	inc loop_depth 
      002BC1 81               [ 4] 4327 	ret 
                                   4328 
                                   4329 ;--------------------------------
                                   4330 ; BASIC: UNTIL expr 
                                   4331 ; loop if exprssion is false 
                                   4332 ; else terminate loop
                                   4333 ;--------------------------------
      002BC2                       4334 until: 
      002BC2 72 5D 00 1F      [ 1] 4335 	tnz loop_depth 
      002BC6 26 03            [ 1] 4336 	jrne 1$ 
      002BC8 CC 13 B5         [ 2] 4337 	jp syntax_error 
      002BCB                       4338 1$: 
      002BCB CD 19 45         [ 4] 4339 	call condition  
      002BCE                       4340 	_xpop 
      002BCE 90 F6            [ 1]    1     ld a,(y)
      002BD0 93               [ 1]    2     ldw x,y 
      002BD1 EE 01            [ 2]    3     ldw x,(1,x)
      002BD3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BD7 4D               [ 1] 4341 	tnz a 
      002BD8 26 13            [ 1] 4342 	jrne 9$ 
      002BDA 5D               [ 2] 4343 	tnzw x 
      002BDB 26 10            [ 1] 4344 	jrne 9$ 
      002BDD 1E 03            [ 2] 4345 	ldw x,(DOLP_ADR,sp)
      002BDF CF 00 04         [ 2] 4346 	ldw basicptr,x 
      002BE2 E6 02            [ 1] 4347 	ld a,(2,x)
      002BE4 C7 00 02         [ 1] 4348 	ld count,a 
      002BE7 1E 05            [ 2] 4349 	ldw x,(DOLP_INW,sp)
      002BE9 CF 00 00         [ 2] 4350 	ldw in.w,x 
      002BEC 81               [ 4] 4351 	ret 
      002BED                       4352 9$:	; remove loop data from stack  
      002BED 85               [ 2] 4353 	popw x
      002BEE                       4354 	_drop VSIZE
      002BEE 5B 04            [ 2]    1     addw sp,#VSIZE 
      002BF0 72 5A 00 1F      [ 1] 4355 	dec loop_depth 
      002BF4 FC               [ 2] 4356 	jp (x)
                                   4357 
                                   4358 ;--------------------------
                                   4359 ; BASIC: PORTA...PORTI  
                                   4360 ;  return constant value 
                                   4361 ;  PORT  base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4362 ;---------------------------
      002BF5                       4363 const_porta:
      002BF5 AE 50 00         [ 2] 4364 	ldw x,#PA_BASE 
      002BF8 4F               [ 1] 4365 	clr a 
      002BF9 81               [ 4] 4366 	ret 
      002BFA                       4367 const_portb:
      002BFA AE 50 05         [ 2] 4368 	ldw x,#PB_BASE 
      002BFD 4F               [ 1] 4369 	clr a 
      002BFE 81               [ 4] 4370 	ret 
      002BFF                       4371 const_portc:
      002BFF AE 50 0A         [ 2] 4372 	ldw x,#PC_BASE 
      002C02 4F               [ 1] 4373 	clr a 
      002C03 81               [ 4] 4374 	ret 
      002C04                       4375 const_portd:
      002C04 AE 50 0F         [ 2] 4376 	ldw x,#PD_BASE 
      002C07 4F               [ 1] 4377 	clr a 
      002C08 81               [ 4] 4378 	ret 
      002C09                       4379 const_porte:
      002C09 AE 50 14         [ 2] 4380 	ldw x,#PE_BASE 
      002C0C 4F               [ 1] 4381 	clr a 
      002C0D 81               [ 4] 4382 	ret 
      002C0E                       4383 const_portf:
      002C0E AE 50 19         [ 2] 4384 	ldw x,#PF_BASE 
      002C11 4F               [ 1] 4385 	clr a 
      002C12 81               [ 4] 4386 	ret 
      002C13                       4387 const_portg:
      002C13 AE 50 1E         [ 2] 4388 	ldw x,#PG_BASE 
      002C16 4F               [ 1] 4389 	clr a 
      002C17 81               [ 4] 4390 	ret 
      002C18                       4391 const_porti:
      002C18 AE 50 28         [ 2] 4392 	ldw x,#PI_BASE 
      002C1B 4F               [ 1] 4393 	clr a 
      002C1C 81               [ 4] 4394 	ret 
                                   4395 
                                   4396 ;-------------------------------
                                   4397 ; following return constant 
                                   4398 ; related to GPIO register offset 
                                   4399 ;---------------------------------
      002C1D                       4400 const_odr:
      002C1D 4F               [ 1] 4401 	clr a 
      002C1E AE 00 00         [ 2] 4402 	ldw x,#GPIO_ODR
      002C21 81               [ 4] 4403 	ret 
      002C22                       4404 const_idr:
      002C22 4F               [ 1] 4405 	clr a 
      002C23 AE 00 01         [ 2] 4406 	ldw x,#GPIO_IDR
      002C26 81               [ 4] 4407 	ret 
      002C27                       4408 const_ddr:
      002C27 4F               [ 1] 4409 	clr a
      002C28 AE 00 02         [ 2] 4410 	ldw x,#GPIO_DDR
      002C2B 81               [ 4] 4411 	ret 
      002C2C                       4412 const_cr1:
      002C2C 4F               [ 1] 4413 	clr a 
      002C2D AE 00 03         [ 2] 4414 	ldw x,#GPIO_CR1
      002C30 81               [ 4] 4415 	ret 
      002C31                       4416 const_cr2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002C31 4F               [ 1] 4417 	clr a
      002C32 AE 00 04         [ 2] 4418 	ldw x,#GPIO_CR2
      002C35 81               [ 4] 4419 	ret 
                                   4420 ;-------------------------
                                   4421 ; BASIC: POUT 
                                   4422 ;  constant for port mode
                                   4423 ;  used by PMODE 
                                   4424 ;  to set pin as output
                                   4425 ;------------------------
      002C36                       4426 const_output:
      002C36 4F               [ 1] 4427 	clr a 
      002C37 AE 00 01         [ 2] 4428 	ldw x,#OUTP
      002C3A 81               [ 4] 4429 	ret 
                                   4430 
                                   4431 ;-------------------------
                                   4432 ; BASIC: PINP 
                                   4433 ;  constant for port mode
                                   4434 ;  used by PMODE 
                                   4435 ;  to set pin as input
                                   4436 ;------------------------
      002C3B                       4437 const_input:
      002C3B 4F               [ 1] 4438 	clr a  
      002C3C AE 00 00         [ 2] 4439 	ldw x,#INP 
      002C3F 81               [ 4] 4440 	ret 
                                   4441 	
                                   4442 ;-----------------------
                                   4443 ; memory area constants
                                   4444 ;-----------------------
      002C40                       4445 const_eeprom_base:
      002C40 4F               [ 1] 4446 	clr a  
      002C41 AE 40 00         [ 2] 4447 	ldw x,#EEPROM_BASE 
      002C44 81               [ 4] 4448 	ret 
                                   4449 
                                   4450 ;---------------------------
                                   4451 ; BASIC: DATA 
                                   4452 ; when the interpreter find 
                                   4453 ; a DATA line it skip it.
                                   4454 ;---------------------------
      002C45                       4455 data:
      002C45 55 00 02 00 01   [ 1] 4456 	mov in,count 
      002C4A 81               [ 4] 4457 	ret 
                                   4458 
                                   4459 ;------------------------------
                                   4460 ; check if it is a DATA line 
                                   4461 ; input: 
                                   4462 ;    X    line address 
                                   4463 ; output:
                                   4464 ;    Z    set if DATA line 
                                   4465 ;----------------------------
      002C4B                       4466 is_data_line:
      002C4B 89               [ 2] 4467 	pushw x 
      002C4C E6 03            [ 1] 4468 	ld a,(3,x)
      002C4E A1 80            [ 1] 4469 	cp a,#TK_CMD 
      002C50 26 05            [ 1] 4470 	jrne 9$
      002C52 EE 04            [ 2] 4471 	ldw x,(4,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002C54 A3 2C 45         [ 2] 4472 	cpw x,#data  
      002C57 85               [ 2] 4473 9$: popw x 
      002C58 81               [ 4] 4474 	ret 
                                   4475 
                                   4476 ;---------------------------------
                                   4477 ; BASIC: RESTORE [line#]
                                   4478 ; set data_ptr to first data line
                                   4479 ; if no DATA found pointer set to
                                   4480 ; zero.
                                   4481 ; if a line# is given as argument 
                                   4482 ; a data line with that number 
                                   4483 ; is searched and the data pointer 
                                   4484 ; is set to it. If there is no 
                                   4485 ; data line with that number 
                                   4486 ; the program is interrupted. 
                                   4487 ;---------------------------------
      002C59                       4488 restore:
      002C59 CD 16 CD         [ 4] 4489 	call runtime_only
      002C5C 5F               [ 1] 4490 	clrw x 
      002C5D CF 00 06         [ 2] 4491 	ldw data_ptr,x 
      002C60 CF 00 08         [ 2] 4492 	ldw data_ofs,x 
      002C63 CE 00 1B         [ 2] 4493 	ldw x,txtbgn 
      002C66 CD 15 0F         [ 4] 4494 	call next_token 
      002C69 A1 84            [ 1] 4495 	cp a,#TK_INTGR
      002C6B 26 10            [ 1] 4496 	jrne 0$
      002C6D CD 15 41         [ 4] 4497 	call get_int24
      002C70 90 89            [ 2] 4498 	pushw y 
      002C72 4F               [ 1] 4499 	clr a 
      002C73 CD 09 6B         [ 4] 4500 	call search_lineno  
      002C76 90 85            [ 2] 4501 	popw y 
      002C78 5D               [ 2] 4502 	tnzw x 
      002C79 26 17            [ 1] 4503 	jrne set_data_pointer 
      002C7B 20 44            [ 2] 4504 	jra data_error 
      002C7D                       4505 0$:
      002C7D                       4506 	_unget_token  
      002C7D 55 00 03 00 01   [ 1]    1      mov in,in.saved  
                                   4507 ; search first DATA line 	
      002C82 C3 00 1D         [ 2] 4508 1$:	cpw x,txtend
      002C85 24 3A            [ 1] 4509 	jruge data_error 
      002C87                       4510 2$:	
      002C87 CD 2C 4B         [ 4] 4511 	call is_data_line 
      002C8A 26 00            [ 1] 4512 	jrne 4$
      002C8C CD 2C 9F         [ 4] 4513 4$:	call try_next_line 
      002C8F 26 FB            [ 1] 4514 	jrne 4$ 
      002C91 81               [ 4] 4515 	ret 
                                   4516 
                                   4517 ;---------------------
                                   4518 ; set data pointer 
                                   4519 ; variables at new line 
                                   4520 ; input:
                                   4521 ;    X    line address 
                                   4522 ;----------------------
      002C92                       4523 set_data_pointer:
      002C92 CF 00 06         [ 2] 4524 	ldw data_ptr,x
      002C95 E6 02            [ 1] 4525 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



      002C97 C7 00 09         [ 1] 4526 	ld data_len,a 
      002C9A 35 06 00 08      [ 1] 4527 	mov data_ofs,#FIRST_DATA_ITEM
      002C9E 81               [ 4] 4528 	ret 
                                   4529 
                                   4530 
                                   4531 ;--------------------
                                   4532 ; at end of data line 
                                   4533 ; check if next line 
                                   4534 ; is a data line 
                                   4535 ; input:
                                   4536 ;    X   actual line address 
                                   4537 ;  
                                   4538 ;-------------------
      002C9F                       4539 try_next_line: 
      002C9F E6 02            [ 1] 4540 	ld a,(2,x)
      002CA1 C7 00 0E         [ 1] 4541 	ld acc8,a 
      002CA4 72 5F 00 0D      [ 1] 4542 	clr acc16 
      002CA8 72 BB 00 0D      [ 2] 4543 	addw x,acc16 
      002CAC C3 00 1D         [ 2] 4544 	cpw x,txtend 
      002CAF 25 02            [ 1] 4545 	jrult 1$
      002CB1 20 0E            [ 2] 4546 	jra data_error 
      002CB3                       4547 1$:	
      002CB3 CD 2C 4B         [ 4] 4548 	call is_data_line 
      002CB6 27 04            [ 1] 4549 	jreq 2$
      002CB8 A6 01            [ 1] 4550 	ld a,#1  
      002CBA 20 04            [ 2] 4551 	jra 9$
      002CBC CD 2C 92         [ 4] 4552 2$:	call set_data_pointer
      002CBF 4F               [ 1] 4553 	clr a  
      002CC0 81               [ 4] 4554 9$:	ret 
      002CC1                       4555 data_error:	
      002CC1 A6 0C            [ 1] 4556     ld a,#ERR_NO_DATA 
      002CC3 CC 13 B7         [ 2] 4557 	jp tb_error 
                                   4558 
                                   4559 
                                   4560 ;---------------------------------
                                   4561 ; BASIC: READ 
                                   4562 ; return next data item | 0 
                                   4563 ;---------------------------------
                           000001  4564 	CTX_BPTR=1 
                           000003  4565 	CTX_IN=3 
                           000004  4566 	CTX_COUNT=4 
                           000005  4567 	INT24=5
                           000007  4568 	VSIZE=7 
      002CC6                       4569 read:
      002CC6 CD 16 CD         [ 4] 4570 	call runtime_only
      002CC9                       4571 	_vars  VSIZE 
      002CC9 52 07            [ 2]    1     sub sp,#VSIZE 
      002CCB CD 1D AD         [ 4] 4572 	call save_context
      002CCE                       4573 read01:	
      002CCE C6 00 08         [ 1] 4574 	ld a,data_ofs
      002CD1 C1 00 09         [ 1] 4575 	cp a,data_len 
      002CD4 27 37            [ 1] 4576 	jreq 2$ ; end of line  
      002CD6                       4577 0$:
      002CD6 CE 00 06         [ 2] 4578 	ldw x,data_ptr 
      002CD9 CF 00 04         [ 2] 4579 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002CDC 55 00 08 00 01   [ 1] 4580 	mov in,data_ofs 
      002CE1 55 00 09 00 02   [ 1] 4581 	mov count,data_len  
      002CE6 CD 18 2C         [ 4] 4582 	call expression 
      002CE9 A1 84            [ 1] 4583 	cp a,#TK_INTGR 
      002CEB 27 03            [ 1] 4584 	jreq 1$ 
      002CED CC 13 B5         [ 2] 4585 	jp syntax_error 
      002CF0                       4586 1$:
      002CF0 CD 15 0F         [ 4] 4587 	call next_token ; skip comma
      002CF3 CE 00 04         [ 2] 4588 	ldw x,basicptr 
      002CF6 CF 00 06         [ 2] 4589 	ldw data_ptr,x 
      002CF9 55 00 01 00 08   [ 1] 4590 	mov data_ofs,in 
      002CFE CD 1D BD         [ 4] 4591 	call rest_context
      002D01                       4592 	_xpop 
      002D01 90 F6            [ 1]    1     ld a,(y)
      002D03 93               [ 1]    2     ldw x,y 
      002D04 EE 01            [ 2]    3     ldw x,(1,x)
      002D06 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D0A                       4593 	_drop VSIZE 
      002D0A 5B 07            [ 2]    1     addw sp,#VSIZE 
      002D0C 81               [ 4] 4594 	ret 
      002D0D                       4595 2$: ; end of line reached 
                                   4596 	; try next line 
      002D0D CE 00 06         [ 2] 4597 	ldw x,data_ptr  
      002D10 CD 2C 9F         [ 4] 4598 	call try_next_line
      002D13 27 C1            [ 1] 4599 	jreq 0$ 
      002D15 20 AA            [ 2] 4600 	jra data_error 
                                   4601 
                                   4602 ;---------------------------------
                                   4603 ; BASIC: SPIEN clkdiv, 0|1  
                                   4604 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4605 ; if clkdiv==-1 disable SPI
                                   4606 ; 0|1 -> disable|enable  
                                   4607 ;--------------------------------- 
                           000005  4608 SPI_CS_BIT=5
      002D17                       4609 spi_enable:
      002D17 CD 16 EA         [ 4] 4610 	call arg_list 
      002D1A A1 02            [ 1] 4611 	cp a,#2
      002D1C 27 03            [ 1] 4612 	jreq 1$
      002D1E CC 13 B5         [ 2] 4613 	jp syntax_error 
      002D21                       4614 1$: 
      002D21 72 12 50 C7      [ 1] 4615 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002D25 85               [ 2] 4616 	popw x  
      002D26 5D               [ 2] 4617 	tnzw x 
      002D27 27 21            [ 1] 4618 	jreq spi_disable 
      002D29 85               [ 2] 4619 	popw x 
      002D2A A6 08            [ 1] 4620 	ld a,#(1<<SPI_CR1_BR)
      002D2C 42               [ 4] 4621 	mul x,a 
      002D2D 9F               [ 1] 4622 	ld a,xl 
      002D2E C7 52 00         [ 1] 4623 	ld SPI_CR1,a 
                                   4624 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002D31 72 1A 50 14      [ 1] 4625 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002D35 72 1A 50 16      [ 1] 4626 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4627 ; configure SPI as master mode 0.	
      002D39 72 14 52 00      [ 1] 4628 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4629 ; ~CS line controlled by sofware 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002D3D 72 12 52 01      [ 1] 4630 	bset SPI_CR2,#SPI_CR2_SSM 
      002D41 72 10 52 01      [ 1] 4631     bset SPI_CR2,#SPI_CR2_SSI 
                                   4632 ; enable SPI
      002D45 72 1C 52 00      [ 1] 4633 	bset SPI_CR1,#SPI_CR1_SPE 	
      002D49 81               [ 4] 4634 	ret 
      002D4A                       4635 spi_disable:
      002D4A                       4636 	_drop #2; throw first argument.
      002D4A 5B 02            [ 2]    1     addw sp,##2 
                                   4637 ; wait spi idle 
      002D4C A6 82            [ 1] 4638 1$:	ld a,#0x82 
      002D4E C4 52 03         [ 1] 4639 	and a,SPI_SR
      002D51 A1 02            [ 1] 4640 	cp a,#2 
      002D53 26 F7            [ 1] 4641 	jrne 1$
      002D55 72 1D 52 00      [ 1] 4642 	bres SPI_CR1,#SPI_CR1_SPE
      002D59 72 13 50 C7      [ 1] 4643 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002D5D 72 1B 50 16      [ 1] 4644 	bres PE_DDR,#SPI_CS_BIT 
      002D61 81               [ 4] 4645 	ret 
                                   4646 
      002D62                       4647 spi_clear_error:
      002D62 A6 78            [ 1] 4648 	ld a,#0x78 
      002D64 C5 52 03         [ 1] 4649 	bcp a,SPI_SR 
      002D67 27 04            [ 1] 4650 	jreq 1$
      002D69 72 5F 52 03      [ 1] 4651 	clr SPI_SR 
      002D6D 81               [ 4] 4652 1$: ret 
                                   4653 
      002D6E                       4654 spi_send_byte:
      002D6E 88               [ 1] 4655 	push a 
      002D6F CD 2D 62         [ 4] 4656 	call spi_clear_error
      002D72 84               [ 1] 4657 	pop a 
      002D73 72 03 52 03 FB   [ 2] 4658 	btjf SPI_SR,#SPI_SR_TXE,.
      002D78 C7 52 04         [ 1] 4659 	ld SPI_DR,a
      002D7B 72 01 52 03 FB   [ 2] 4660 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002D80 C6 52 04         [ 1] 4661 	ld a,SPI_DR 
      002D83 81               [ 4] 4662 	ret 
                                   4663 
      002D84                       4664 spi_rcv_byte:
      002D84 A6 FF            [ 1] 4665 	ld a,#255
      002D86 72 01 52 03 E3   [ 2] 4666 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002D8B C6 52 04         [ 1] 4667 	ld a,SPI_DR 
      002D8E 81               [ 4] 4668 	ret
                                   4669 
                                   4670 ;------------------------------
                                   4671 ; BASIC: SPIWR byte [,byte]
                                   4672 ; write 1 or more byte
                                   4673 ;------------------------------
      002D8F                       4674 spi_write:
      002D8F CD 18 2C         [ 4] 4675 	call expression
      002D92 A1 84            [ 1] 4676 	cp a,#TK_INTGR 
      002D94 27 03            [ 1] 4677 	jreq 1$
      002D96 CC 13 B5         [ 2] 4678 	jp syntax_error 
      002D99                       4679 1$:	
      002D99 9F               [ 1] 4680 	ld a,xl 
      002D9A CD 2D 6E         [ 4] 4681 	call spi_send_byte 
      002D9D CD 15 0F         [ 4] 4682 	call next_token 
      002DA0 A1 08            [ 1] 4683 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002DA2 26 02            [ 1] 4684 	jrne 2$ 
      002DA4 20 E9            [ 2] 4685 	jra spi_write 
      002DA6 4D               [ 1] 4686 2$:	tnz a 
      002DA7 27 05            [ 1] 4687 	jreq 3$
      002DA9                       4688 	_unget_token  
      002DA9 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002DAE 81               [ 4] 4689 3$:	ret 
                                   4690 
                                   4691 
                                   4692 ;-------------------------------
                                   4693 ; BASIC: SPIRD 	
                                   4694 ; read one byte from SPI 
                                   4695 ;-------------------------------
      002DAF                       4696 spi_read:
      002DAF CD 2D 84         [ 4] 4697 	call spi_rcv_byte 
      002DB2 5F               [ 1] 4698 	clrw x 
      002DB3 97               [ 1] 4699 	ld xl,a 
      002DB4 4F               [ 1] 4700 	clr a  
      002DB5 81               [ 4] 4701 	ret 
                                   4702 
                                   4703 ;------------------------------
                                   4704 ; BASIC: SPISEL 0|1 
                                   4705 ; set state of ~CS line
                                   4706 ; 0|1 deselect|select  
                                   4707 ;------------------------------
      002DB6                       4708 spi_select:
      002DB6 CD 15 0F         [ 4] 4709 	call next_token 
      002DB9 A1 84            [ 1] 4710 	cp a,#TK_INTGR 
      002DBB 27 03            [ 1] 4711 	jreq 1$
      002DBD CC 13 B5         [ 2] 4712 	jp syntax_error 
      002DC0 5D               [ 2] 4713 1$: tnzw x  
      002DC1 27 05            [ 1] 4714 	jreq cs_high 
      002DC3 72 1B 50 14      [ 1] 4715 	bres PE_ODR,#SPI_CS_BIT
      002DC7 81               [ 4] 4716 	ret 
      002DC8                       4717 cs_high: 
      002DC8 72 1A 50 14      [ 1] 4718 	bset PE_ODR,#SPI_CS_BIT
      002DCC 81               [ 4] 4719 	ret 
                                   4720 
                                   4721 ;-------------------------------
                                   4722 ; BASIC: PAD 
                                   4723 ; Return pad buffer address.
                                   4724 ;------------------------------
      002DCD                       4725 pad_ref:
      002DCD AE 16 B8         [ 2] 4726 	ldw x,#pad 
      002DD0 4F               [ 1] 4727 	clr a
      002DD1 81               [ 4] 4728 	ret 
                                   4729 
                                   4730 ;****************************
                                   4731 ; expression stack 
                                   4732 ; manipulation routines
                                   4733 ;****************************
                                   4734 
                                   4735 ;-----------------------------
                                   4736 ; BASIC: PUSH expr|rel|cond 
                                   4737 ; push the result on xtack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4738 ;-----------------------------
      002DD2                       4739 xpush:
      002DD2 CD 19 45         [ 4] 4740 	call condition 
      002DD5 81               [ 4] 4741 	ret 
                                   4742 
                                   4743 ;------------------------------
                                   4744 ; BASIC: POP 
                                   4745 ; pop top of xstack 
                                   4746 ;------------------------------
      002DD6                       4747 xpop:
      002DD6                       4748 	_xpop 
      002DD6 90 F6            [ 1]    1     ld a,(y)
      002DD8 93               [ 1]    2     ldw x,y 
      002DD9 EE 01            [ 2]    3     ldw x,(1,x)
      002DDB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DDF 81               [ 4] 4749 	ret 
                                   4750 
                                   4751 
                                   4752 ;------------------------------
                                   4753 ; BASIC: ALLOC expr 
                                   4754 ; allocate expr element on xtack 
                                   4755 ;-------------------------------
      002DE0                       4756 xalloc: 
      002DE0 CD 18 2C         [ 4] 4757 	call expression 
      002DE3 A1 84            [ 1] 4758 	cp a,#TK_INTGR
      002DE5 27 03            [ 1] 4759 	jreq 1$ 
      002DE7 CC 13 B5         [ 2] 4760 	jp syntax_error
      002DEA                       4761 1$: _xpop 
      002DEA 90 F6            [ 1]    1     ld a,(y)
      002DEC 93               [ 1]    2     ldw x,y 
      002DED EE 01            [ 2]    3     ldw x,(1,x)
      002DEF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DF3 4D               [ 1] 4762 	tnz a 
      002DF4 27 05            [ 1] 4763 	jreq 3$ 
      002DF6 A6 0A            [ 1] 4764 2$:	ld a,#ERR_BAD_VALUE
      002DF8 CC 13 B7         [ 2] 4765 	jp tb_error 
      002DFB A3 00 14         [ 2] 4766 3$: cpw x,#XSTACK_SIZE 
      002DFE 22 F6            [ 1] 4767 	jrugt 2$
      002E00 A6 03            [ 1] 4768 	ld a,#CELL_SIZE 
      002E02 42               [ 4] 4769 	mul x,a 
      002E03 CF 00 0D         [ 2] 4770 	ldw acc16,x 
      002E06 72 B2 00 0D      [ 2] 4771 	subw y,acc16 
      002E0A 90 A3 17 38      [ 2] 4772 	cpw y,#xstack_full
      002E0E 22 05            [ 1] 4773 	jrugt 9$
      002E10 A6 01            [ 1] 4774 	ld a,#ERR_MEM_FULL
      002E12 CC 13 B7         [ 2] 4775 	jp tb_error 
      002E15                       4776 9$:	 
      002E15 81               [ 4] 4777 	ret 
                                   4778 
                                   4779 
                                   4780 ;------------------------------
                                   4781 ;  BASIC DROP expr 
                                   4782 ;  expr in range {0..XSTACK_SIZE}
                                   4783 ;  discard n elements from xtack
                                   4784 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      002E16                       4785 xdrop:
      002E16 CD 18 2C         [ 4] 4786 	call expression 
      002E19 A1 84            [ 1] 4787 	cp a,#TK_INTGR
      002E1B 27 03            [ 1] 4788 	jreq 1$ 
      002E1D CC 13 B5         [ 2] 4789 	jp syntax_error 
      002E20                       4790 1$:	_xpop 
      002E20 90 F6            [ 1]    1     ld a,(y)
      002E22 93               [ 1]    2     ldw x,y 
      002E23 EE 01            [ 2]    3     ldw x,(1,x)
      002E25 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E29 9F               [ 1] 4791 	ld a,xl 
      002E2A A4 1F            [ 1] 4792 	and a,#0x1f 
      002E2C 5F               [ 1] 4793 	clrw x 
      002E2D 97               [ 1] 4794 	ld xl,a 
      002E2E A6 03            [ 1] 4795 	ld a,#CELL_SIZE 
      002E30 42               [ 4] 4796 	mul x,a 
      002E31 CF 00 0D         [ 2] 4797 	ldw acc16,x  
      002E34 72 B9 00 0D      [ 2] 4798 	addw y,acc16 
      002E38 90 A3 17 73      [ 2] 4799 	cpw y,#XSTACK_EMPTY 
      002E3C 23 04            [ 2] 4800 	jrule 9$
      002E3E 90 AE 17 73      [ 2] 4801 	ldw y,#XSTACK_EMPTY 
      002E42 81               [ 4] 4802 9$:	ret 
                                   4803 
                                   4804 ;-----------------------
                                   4805 ; check if value in A:X 
                                   4806 ; is inside xstack bound
                                   4807 ; output:
                                   4808 ;    X     slot address  
                                   4809 ;-----------------------
      002E43                       4810 xstack_bound:
      002E43 4D               [ 1] 4811 	tnz a 
      002E44 26 16            [ 1] 4812 	jrne 8$ 
      002E46 A3 00 14         [ 2] 4813 1$: cpw x,#XSTACK_SIZE 
      002E49 22 11            [ 1] 4814 	jrugt 8$
      002E4B A6 03            [ 1] 4815 	ld a,#CELL_SIZE 
      002E4D 42               [ 4] 4816 	mul x,a
      002E4E CF 00 0D         [ 2] 4817 	ldw acc16,x 
      002E51 93               [ 1] 4818 	ldw x,y 
      002E52 72 BB 00 0D      [ 2] 4819 	addw x,acc16 
      002E56 A3 17 73         [ 2] 4820 	cpw x,#XSTACK_EMPTY 
      002E59 24 01            [ 1] 4821 	jruge 8$  
      002E5B 81               [ 4] 4822 	ret 
      002E5C A6 0A            [ 1] 4823 8$: ld a,#ERR_BAD_VALUE
      002E5E CC 13 B7         [ 2] 4824 	jp tb_error 
                                   4825 
                                   4826 ;-------------------------
                                   4827 ; BASIC: PUT expr, cond 
                                   4828 ; expr -> slot 
                                   4829 ; cond -> valut to put 
                                   4830 ; on xstack 
                                   4831 ;-------------------------
      002E61                       4832 xput:
      002E61 CD 16 EA         [ 4] 4833 	call arg_list 
      002E64 A1 02            [ 1] 4834 	cp a,#2 
      002E66 27 03            [ 1] 4835 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      002E68 CC 13 B5         [ 2] 4836 0$:	jp syntax_error
      002E6B                       4837 1$: _xpop   ; value to put 
      002E6B 90 F6            [ 1]    1     ld a,(y)
      002E6D 93               [ 1]    2     ldw x,y 
      002E6E EE 01            [ 2]    3     ldw x,(1,x)
      002E70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E74 89               [ 2] 4838 	pushw x 
      002E75 88               [ 1] 4839 	push a 
      002E76                       4840 	_xpop    ; slot 
      002E76 90 F6            [ 1]    1     ld a,(y)
      002E78 93               [ 1]    2     ldw x,y 
      002E79 EE 01            [ 2]    3     ldw x,(1,x)
      002E7B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E7F CD 2E 43         [ 4] 4841 	call xstack_bound
      002E82 CF 00 19         [ 2] 4842     ldw ptr16,x 
      002E85 84               [ 1] 4843 	pop a 
      002E86 85               [ 2] 4844 	popw x 
      002E87 72 C7 00 19      [ 4] 4845 	ld [ptr16],a 
      002E8B 72 5C 00 1A      [ 1] 4846 	inc ptr8 
      002E8F 72 CF 00 19      [ 5] 4847 	ldw [ptr16],x 
      002E93 81               [ 4] 4848 	ret 
                                   4849 
                                   4850 ;------------------------
                                   4851 ; BASIC: PICK expr 
                                   4852 ; get nième element on 
                                   4853 ; xtack. 
                                   4854 ;-----------------------
      002E94                       4855 xpick:
      002E94 CD 16 E5         [ 4] 4856 	call func_args 
      002E97 A1 01            [ 1] 4857 	cp a,#1 
      002E99 27 03            [ 1] 4858 	jreq 1$
      002E9B CC 13 B5         [ 2] 4859 	jp syntax_error 
      002E9E                       4860 1$: _xpop 
      002E9E 90 F6            [ 1]    1     ld a,(y)
      002EA0 93               [ 1]    2     ldw x,y 
      002EA1 EE 01            [ 2]    3     ldw x,(1,x)
      002EA3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EA7 CD 2E 43         [ 4] 4861 	call xstack_bound
      002EAA F6               [ 1] 4862     ld a,(x)
      002EAB EE 01            [ 2] 4863 	ldw x,(1,x)				
      002EAD 81               [ 4] 4864 	ret 
                                   4865 
                                   4866 
                                   4867 ;----------------------------
                                   4868 ; BASIC: AUTORUN \C | label  
                                   4869 ;  \C -> cancel autorun 
                                   4870 ;  addr -> register an 
                                   4871 ;    autorun program 
                                   4872 ;    this program execute at 
                                   4873 ;     reset/boot 
                                   4874 ;----------------------------
      002EAE                       4875 cmd_auto_run:
      002EAE CD 16 C2         [ 4] 4876 	call cmd_line_only
      002EB1 CD 15 0F         [ 4] 4877 	call next_token 
      002EB4 A1 03            [ 1] 4878 	cp a,#TK_LABEL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      002EB6 27 19            [ 1] 4879 	jreq 1$ 
      002EB8 A1 04            [ 1] 4880 	cp a,#TK_CHAR 
      002EBA 26 12            [ 1] 4881 	jrne 0$ 
      002EBC F6               [ 1] 4882 	ld a,(x)
      002EBD 72 5C 00 01      [ 1] 4883 	inc in 
      002EC1 A4 DF            [ 1] 4884 	and a,#0xDF 
      002EC3 A1 43            [ 1] 4885 	cp a,#'C 
      002EC5 26 07            [ 1] 4886 	jrne 0$ 
      002EC7 AE 40 00         [ 2] 4887 	ldw x,#EEPROM_BASE 
      002ECA CD 26 0F         [ 4] 4888 	call erase_header
      002ECD 81               [ 4] 4889 	ret 
      002ECE CC 13 B5         [ 2] 4890 0$:	jp syntax_error
      002ED1 89               [ 2] 4891 1$:	pushw x 
      002ED2 CD 15 28         [ 4] 4892 	call skip_string
      002ED5 85               [ 2] 4893 	popw x 
      002ED6 CD 2F 07         [ 4] 4894 	call search_program
      002ED9 26 05            [ 1] 4895 	jrne 2$ 
      002EDB A6 0A            [ 1] 4896 	ld a,#ERR_BAD_VALUE
      002EDD CC 13 B7         [ 2] 4897 	jp tb_error 
      002EE0 89               [ 2] 4898 2$: pushw x 
      002EE1 72 5F 00 18      [ 1] 4899 	clr farptr 
      002EE5 AE 40 00         [ 2] 4900 	ldw x,#EEPROM_BASE
      002EE8 CF 00 19         [ 2] 4901 	ldw ptr16,x 
      002EEB C6 2F 05         [ 1] 4902 	ld a,AR_SIGN 
      002EEE 5F               [ 1] 4903 	clrw x 	 
      002EEF CD 04 B1         [ 4] 4904 	call write_byte
      002EF2 C6 2F 06         [ 1] 4905 	ld a,AR_SIGN+1
      002EF5 CD 04 B1         [ 4] 4906 	call write_byte 
      002EF8 7B 01            [ 1] 4907 	ld a,(1,sp)
      002EFA CD 04 B1         [ 4] 4908 	call write_byte 
      002EFD 7B 02            [ 1] 4909 	ld a,(2,sp)
      002EFF CD 04 B1         [ 4] 4910 	call write_byte 
      002F02                       4911 	_drop 2 
      002F02 5B 02            [ 2]    1     addw sp,#2 
      002F04 81               [ 4] 4912 	ret 
                                   4913 
      002F05 41 52                 4914 AR_SIGN: .ascii "AR" ; autorun signature 
                                   4915 
                                   4916 ;-------------------------------
                                   4917 ; search a program in flash 
                                   4918 ; memory with a label at first 
                                   4919 ; that correspond to name 
                                   4920 ; pointed by X 
                                   4921 ; input:
                                   4922 ;    x      *name 
                                   4923 ; output: 
                                   4924 ;    X     prog_addr|0
                                   4925 ;-------------------------------
                           000001  4926 	WLKPTR=1 
                           000003  4927 	PNAME=3
                           000005  4928 	LIMIT=5
                           000007  4929 	YSAVE=7
                           000006  4930 	VSIZE=6 
      002F07                       4931 search_program:
      002F07 90 89            [ 2] 4932 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      002F09                       4933 	_vars VSIZE 
      002F09 52 06            [ 2]    1     sub sp,#VSIZE 
      002F0B 1F 03            [ 2] 4934 	ldw (PNAME,sp),x 
      002F0D CD 28 0D         [ 4] 4935 	call uflash 
      002F10 1F 05            [ 2] 4936 	ldw (LIMIT,sp),x 
      002F12 AE 34 00         [ 2] 4937 	ldw x,#app_space 
      002F15 1F 01            [ 2] 4938 1$:	ldw (WLKPTR,sp),x  
      002F17 4F               [ 1] 4939 	clr a 
      002F18 CD 22 1B         [ 4] 4940 	call is_program_addr
      002F1B 26 10            [ 1] 4941 	jrne 4$
      002F1D 1C 00 07         [ 2] 4942 	addw x,#7 
      002F20 F6               [ 1] 4943 	ld a,(x)
      002F21 A1 03            [ 1] 4944 	cp a,#TK_LABEL 
      002F23 26 08            [ 1] 4945 	jrne 4$ 
      002F25 5C               [ 1] 4946 	incw x 
      002F26 16 03            [ 2] 4947 	ldw y,(PNAME,sp)
      002F28 CD 10 BC         [ 4] 4948 	call strcmp
      002F2B 26 0A            [ 1] 4949 	jrne 6$
      002F2D                       4950 4$: 
      002F2D CD 26 D6         [ 4] 4951 	call skip_to_next
      002F30 13 05            [ 2] 4952 	cpw x,(LIMIT,sp)
      002F32 25 E1            [ 1] 4953 	jrult 1$
      002F34 5F               [ 1] 4954 	clrw x 
      002F35 20 05            [ 2] 4955 	jra 8$
      002F37                       4956 6$: ; found label 
      002F37 1E 01            [ 2] 4957 	ldw x,(WLKPTR,sp)
      002F39 1C 00 04         [ 2] 4958 	addw x,#4 	
      002F3C                       4959 8$:	
      002F3C                       4960 	_drop VSIZE  
      002F3C 5B 06            [ 2]    1     addw sp,#VSIZE 
      002F3E 90 85            [ 2] 4961 	popw y 
      002F40 81               [ 4] 4962 	ret 
                                   4963 
                                   4964 
                                   4965 ;-------------------------------
                                   4966 ; BASIC: CHAIN label [, line#]
                                   4967 ; Execute another program like it 
                                   4968 ; is a sub-routine. When the 
                                   4969 ; called program terminate 
                                   4970 ; execution continue at caller 
                                   4971 ; after CHAIN command. 
                                   4972 ; if a line# is given, the 
                                   4973 ; chained program start execution 
                                   4974 ; at this line#.
                                   4975 ;---------------------------------
                           000003  4976 	CHAIN_LN=3 
                           000005  4977 	CHAIN_ADDR=5 
                           000007  4978 	CHAIN_BP=7
                           000009  4979 	CHAIN_IN=9
                           00000A  4980 	CHAIN_COUNT=10 
                           00000B  4981 	CHAIN_TXTBGN=11 
                           00000D  4982 	CHAIN_TXTEND=13 
                           00000C  4983 	VSIZE=12 
                           000004  4984 	DISCARD=4 
      002F41                       4985 cmd_chain:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      002F41 85               [ 2] 4986 	popw x 
      002F42                       4987 	_vars VSIZE 
      002F42 52 0C            [ 2]    1     sub sp,#VSIZE 
      002F44 89               [ 2] 4988 	pushw x
      002F45 0F 03            [ 1] 4989 	clr (CHAIN_LN,sp) 
      002F47 0F 04            [ 1] 4990 	clr (CHAIN_LN+1,sp)  
      002F49 A6 03            [ 1] 4991 	ld a,#TK_LABEL 
      002F4B CD 16 D8         [ 4] 4992 	call expect 
      002F4E 89               [ 2] 4993 	pushw x 
      002F4F CD 15 28         [ 4] 4994 	call skip_string
      002F52 85               [ 2] 4995 	popw x 
      002F53 CD 2F 07         [ 4] 4996 	call search_program 
      002F56 5D               [ 2] 4997 	tnzw x  
      002F57 26 05            [ 1] 4998 	jrne 1$ 
      002F59 A6 0A            [ 1] 4999 0$:	ld a,#ERR_BAD_VALUE
      002F5B CC 13 B7         [ 2] 5000 	jp tb_error 
      002F5E 1F 05            [ 2] 5001 1$: ldw (CHAIN_ADDR,sp), x ; program addr 
      002F60 CD 15 0F         [ 4] 5002     call next_token 
      002F63 A1 08            [ 1] 5003 	cp a,#TK_COMMA 
      002F65 26 0C            [ 1] 5004 	jrne 4$
      002F67 A6 84            [ 1] 5005 	ld a,#TK_INTGR
      002F69 CD 16 D8         [ 4] 5006 	call expect 
      002F6C CD 15 41         [ 4] 5007 	call get_int24 
      002F6F 1F 03            [ 2] 5008 	ldw (CHAIN_LN,sp),x
      002F71 20 05            [ 2] 5009 	jra 6$ 
      002F73                       5010 4$: _unget_token 
      002F73 55 00 03 00 01   [ 1]    1      mov in,in.saved  
      002F78                       5011 6$: ; save chain context 
      002F78 CE 00 04         [ 2] 5012 	ldw x,basicptr 
      002F7B 1F 07            [ 2] 5013 	ldw (CHAIN_BP,sp),x 
      002F7D CE 00 01         [ 2] 5014 	ldw x,in
      002F80 1F 09            [ 2] 5015 	ldw (CHAIN_IN,sp),x
      002F82 CE 00 1B         [ 2] 5016 	ldw x,txtbgn 
      002F85 1F 0B            [ 2] 5017 	ldw (CHAIN_TXTBGN,sp),x
      002F87 CE 00 1D         [ 2] 5018 	ldw x,txtend 
      002F8A 1F 0D            [ 2] 5019 	ldw (CHAIN_TXTEND,sp),x  
                                   5020 ; set chained program context 	
      002F8C 1E 05            [ 2] 5021 	ldw x,(CHAIN_ADDR,sp)
      002F8E CF 00 04         [ 2] 5022 	ldw basicptr,x 
      002F91 CF 00 1B         [ 2] 5023 	ldw txtbgn,x 
      002F94 1D 00 02         [ 2] 5024 	subw x,#2
      002F97 FE               [ 2] 5025 	ldw x,(x)
      002F98 72 FB 05         [ 2] 5026 	addw x,(CHAIN_ADDR,sp)
      002F9B CF 00 1D         [ 2] 5027 	ldw txtend,x  
      002F9E 1E 05            [ 2] 5028 	ldw x,(CHAIN_ADDR,sp)
      002FA0 E6 02            [ 1] 5029 	ld a,(2,x)
      002FA2 C7 00 02         [ 1] 5030 	ld count,a 
      002FA5 35 03 00 01      [ 1] 5031 	mov in,#3 
      002FA9 1E 03            [ 2] 5032 	ldw x,(CHAIN_LN,sp)
      002FAB 5D               [ 2] 5033 	tnzw x 
      002FAC 27 13            [ 1] 5034 	jreq 8$ 
      002FAE 90 89            [ 2] 5035 	pushw y
      002FB0 4F               [ 1] 5036 	clr a  
      002FB1 CD 09 6B         [ 4] 5037 	call search_lineno
      002FB4 90 85            [ 2] 5038 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      002FB6 5D               [ 2] 5039 	tnzw x 
      002FB7 27 A0            [ 1] 5040 	jreq 0$ 
      002FB9 CF 00 04         [ 2] 5041 	ldw basicptr,x 
      002FBC E6 02            [ 1] 5042 	ld a,(2,x)
      002FBE C7 00 02         [ 1] 5043 	ld count,a 
      002FC1 72 5C 00 33      [ 1] 5044 8$: inc chain_level
      002FC5 85               [ 2] 5045 	popw x 
      002FC6                       5046 	_drop DISCARD
      002FC6 5B 04            [ 2]    1     addw sp,#DISCARD 
      002FC8 FC               [ 2] 5047 	jp (x)
                                   5048 
                                   5049 
                                   5050 ;------------------------------
                                   5051 ;      dictionary 
                                   5052 ; format:
                                   5053 ;   link:   2 bytes 
                                   5054 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   5055 ;   cmd_name: 16 byte max 
                                   5056 ;   code_addr: 2 bytes 
                                   5057 ;------------------------------
                                   5058 	.macro _dict_entry len,name,code_addr 
                                   5059 	.word LINK 
                                   5060 	LINK=.
                                   5061 name:
                                   5062 	.byte len   	
                                   5063 	.ascii "name"
                                   5064 	.word code_addr  
                                   5065 	.endm 
                                   5066 
                           000000  5067 	LINK=0
                                   5068 ; respect alphabetic order for BASIC names from Z-A
                                   5069 ; this sort order is for a cleaner WORDS cmd output. 	
      002FC9                       5070 kword_end:
      002FC9                       5071 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      002FC9 00 00                    1 	.word LINK 
                           002FCB     2 	LINK=.
      002FCB                          3 XOR:
      002FCB A3                       4 	.byte 3+F_XOR   	
      002FCC 58 4F 52                 5 	.ascii "XOR"
      002FCF 00 8A                    6 	.word TK_XOR  
      002FD1                       5072 	_dict_entry,5,WRITE,write  
      002FD1 2F CB                    1 	.word LINK 
                           002FD3     2 	LINK=.
      002FD3                          3 WRITE:
      002FD3 05                       4 	.byte 5   	
      002FD4 57 52 49 54 45           5 	.ascii "WRITE"
      002FD9 27 3D                    6 	.word write  
      002FDB                       5073 	_dict_entry,5,WORDS,words 
      002FDB 2F D3                    1 	.word LINK 
                           002FDD     2 	LINK=.
      002FDD                          3 WORDS:
      002FDD 05                       4 	.byte 5   	
      002FDE 57 4F 52 44 53           5 	.ascii "WORDS"
      002FE3 2A 8A                    6 	.word words  
      002FE5                       5074 	_dict_entry 4,WAIT,wait 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      002FE5 2F DD                    1 	.word LINK 
                           002FE7     2 	LINK=.
      002FE7                          3 WAIT:
      002FE7 04                       4 	.byte 4   	
      002FE8 57 41 49 54              5 	.ascii "WAIT"
      002FEC 1E 72                    6 	.word wait  
      002FEE                       5075 	_dict_entry,3+F_IFUNC,USR,usr
      002FEE 2F E7                    1 	.word LINK 
                           002FF0     2 	LINK=.
      002FF0                          3 USR:
      002FF0 13                       4 	.byte 3+F_IFUNC   	
      002FF1 55 53 52                 5 	.ascii "USR"
      002FF4 28 2F                    6 	.word usr  
      002FF6                       5076 	_dict_entry,5,UNTIL,until 
      002FF6 2F F0                    1 	.word LINK 
                           002FF8     2 	LINK=.
      002FF8                          3 UNTIL:
      002FF8 05                       4 	.byte 5   	
      002FF9 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002FFE 2B C2                    6 	.word until  
      003000                       5077 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      003000 2F F8                    1 	.word LINK 
                           003002     2 	LINK=.
      003002                          3 UFLASH:
      003002 16                       4 	.byte 6+F_IFUNC   	
      003003 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      003009 28 0D                    6 	.word uflash  
      00300B                       5078 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      00300B 30 02                    1 	.word LINK 
                           00300D     2 	LINK=.
      00300D                          3 UBOUND:
      00300D 16                       4 	.byte 6+F_IFUNC   	
      00300E 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      003014 19 F9                    6 	.word ubound  
      003016                       5079 	_dict_entry,4,TONE,tone  
      003016 30 0D                    1 	.word LINK 
                           003018     2 	LINK=.
      003018                          3 TONE:
      003018 04                       4 	.byte 4   	
      003019 54 4F 4E 45              5 	.ascii "TONE"
      00301D 23 20                    6 	.word tone  
      00301F                       5080 	_dict_entry,2,TO,to
      00301F 30 18                    1 	.word LINK 
                           003021     2 	LINK=.
      003021                          3 TO:
      003021 02                       4 	.byte 2   	
      003022 54 4F                    5 	.ascii "TO"
      003024 1F DC                    6 	.word to  
      003026                       5081 	_dict_entry,5,TIMER,set_timer
      003026 30 21                    1 	.word LINK 
                           003028     2 	LINK=.
      003028                          3 TIMER:
      003028 05                       4 	.byte 5   	
      003029 54 49 4D 45 52           5 	.ascii "TIMER"
      00302E 2A F7                    6 	.word set_timer  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003030                       5082 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      003030 30 28                    1 	.word LINK 
                           003032     2 	LINK=.
      003032                          3 TIMEOUT:
      003032 17                       4 	.byte 7+F_IFUNC   	
      003033 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00303A 2B 0E                    6 	.word timeout  
      00303C                       5083 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00303C 30 32                    1 	.word LINK 
                           00303E     2 	LINK=.
      00303E                          3 TICKS:
      00303E 15                       4 	.byte 5+F_IFUNC   	
      00303F 54 49 43 4B 53           5 	.ascii "TICKS"
      003044 28 DB                    6 	.word get_ticks  
      003046                       5084 	_dict_entry,4,STOP,stop 
      003046 30 3E                    1 	.word LINK 
                           003048     2 	LINK=.
      003048                          3 STOP:
      003048 04                       4 	.byte 4   	
      003049 53 54 4F 50              5 	.ascii "STOP"
      00304D 24 89                    6 	.word stop  
      00304F                       5085 	_dict_entry,4,STEP,step 
      00304F 30 48                    1 	.word LINK 
                           003051     2 	LINK=.
      003051                          3 STEP:
      003051 04                       4 	.byte 4   	
      003052 53 54 45 50              5 	.ascii "STEP"
      003056 20 22                    6 	.word step  
      003058                       5086 	_dict_entry,5,SPIWR,spi_write
      003058 30 51                    1 	.word LINK 
                           00305A     2 	LINK=.
      00305A                          3 SPIWR:
      00305A 05                       4 	.byte 5   	
      00305B 53 50 49 57 52           5 	.ascii "SPIWR"
      003060 2D 8F                    6 	.word spi_write  
      003062                       5087 	_dict_entry,6,SPISEL,spi_select
      003062 30 5A                    1 	.word LINK 
                           003064     2 	LINK=.
      003064                          3 SPISEL:
      003064 06                       4 	.byte 6   	
      003065 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00306B 2D B6                    6 	.word spi_select  
      00306D                       5088 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      00306D 30 64                    1 	.word LINK 
                           00306F     2 	LINK=.
      00306F                          3 SPIRD:
      00306F 15                       4 	.byte 5+F_IFUNC   	
      003070 53 50 49 52 44           5 	.ascii "SPIRD"
      003075 2D AF                    6 	.word spi_read  
      003077                       5089 	_dict_entry,5,SPIEN,spi_enable 
      003077 30 6F                    1 	.word LINK 
                           003079     2 	LINK=.
      003079                          3 SPIEN:
      003079 05                       4 	.byte 5   	
      00307A 53 50 49 45 4E           5 	.ascii "SPIEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      00307F 2D 17                    6 	.word spi_enable  
      003081                       5090 	_dict_entry,5,SLEEP,sleep 
      003081 30 79                    1 	.word LINK 
                           003083     2 	LINK=.
      003083                          3 SLEEP:
      003083 05                       4 	.byte 5   	
      003084 53 4C 45 45 50           5 	.ascii "SLEEP"
      003089 28 5E                    6 	.word sleep  
      00308B                       5091     _dict_entry,4,SIZE,cmd_size 
      00308B 30 83                    1 	.word LINK 
                           00308D     2 	LINK=.
      00308D                          3 SIZE:
      00308D 04                       4 	.byte 4   	
      00308E 53 49 5A 45              5 	.ascii "SIZE"
      003092 19 CC                    6 	.word cmd_size  
      003094                       5092 	_dict_entry,4,SAVE,cmd_save 
      003094 30 8D                    1 	.word LINK 
                           003096     2 	LINK=.
      003096                          3 SAVE:
      003096 04                       4 	.byte 4   	
      003097 53 41 56 45              5 	.ascii "SAVE"
      00309B 26 29                    6 	.word cmd_save  
      00309D                       5093 	_dict_entry 3,RUN,cmd_run
      00309D 30 96                    1 	.word LINK 
                           00309F     2 	LINK=.
      00309F                          3 RUN:
      00309F 03                       4 	.byte 3   	
      0030A0 52 55 4E                 5 	.ascii "RUN"
      0030A3 22 2C                    6 	.word cmd_run  
      0030A5                       5094 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0030A5 30 9F                    1 	.word LINK 
                           0030A7     2 	LINK=.
      0030A7                          3 RSHIFT:
      0030A7 16                       4 	.byte 6+F_IFUNC   	
      0030A8 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0030AE 29 25                    6 	.word rshift  
      0030B0                       5095 	_dict_entry,3+F_IFUNC,RND,random 
      0030B0 30 A7                    1 	.word LINK 
                           0030B2     2 	LINK=.
      0030B2                          3 RND:
      0030B2 13                       4 	.byte 3+F_IFUNC   	
      0030B3 52 4E 44                 5 	.ascii "RND"
      0030B6 29 EF                    6 	.word random  
      0030B8                       5096 	_dict_entry,6,RETURN,return 
      0030B8 30 B2                    1 	.word LINK 
                           0030BA     2 	LINK=.
      0030BA                          3 RETURN:
      0030BA 06                       4 	.byte 6   	
      0030BB 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0030C1 22 05                    6 	.word return  
      0030C3                       5097 	_dict_entry,7,RESTORE,restore 
      0030C3 30 BA                    1 	.word LINK 
                           0030C5     2 	LINK=.
      0030C5                          3 RESTORE:
      0030C5 07                       4 	.byte 7   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      0030C6 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0030CD 2C 59                    6 	.word restore  
      0030CF                       5098 	_dict_entry 3,REM,remark 
      0030CF 30 C5                    1 	.word LINK 
                           0030D1     2 	LINK=.
      0030D1                          3 REM:
      0030D1 03                       4 	.byte 3   	
      0030D2 52 45 4D                 5 	.ascii "REM"
      0030D5 1E 6C                    6 	.word remark  
      0030D7                       5099 	_dict_entry,6,REBOOT,cold_start
      0030D7 30 D1                    1 	.word LINK 
                           0030D9     2 	LINK=.
      0030D9                          3 REBOOT:
      0030D9 06                       4 	.byte 6   	
      0030DA 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0030E0 00 B5                    6 	.word cold_start  
      0030E2                       5100 	_dict_entry,4+F_IFUNC,READ,read  
      0030E2 30 D9                    1 	.word LINK 
                           0030E4     2 	LINK=.
      0030E4                          3 READ:
      0030E4 14                       4 	.byte 4+F_IFUNC   	
      0030E5 52 45 41 44              5 	.ascii "READ"
      0030E9 2C C6                    6 	.word read  
      0030EB                       5101 	_dict_entry,4+F_IFUNC,QKEY,qkey
      0030EB 30 E4                    1 	.word LINK 
                           0030ED     2 	LINK=.
      0030ED                          3 QKEY:
      0030ED 14                       4 	.byte 4+F_IFUNC   	
      0030EE 51 4B 45 59              5 	.ascii "QKEY"
      0030F2 28 00                    6 	.word qkey  
      0030F4                       5102 	_dict_entry,3,PUT,xput 
      0030F4 30 ED                    1 	.word LINK 
                           0030F6     2 	LINK=.
      0030F6                          3 PUT:
      0030F6 03                       4 	.byte 3   	
      0030F7 50 55 54                 5 	.ascii "PUT"
      0030FA 2E 61                    6 	.word xput  
      0030FC                       5103 	_dict_entry,4,PUSH,xpush   
      0030FC 30 F6                    1 	.word LINK 
                           0030FE     2 	LINK=.
      0030FE                          3 PUSH:
      0030FE 04                       4 	.byte 4   	
      0030FF 50 55 53 48              5 	.ascii "PUSH"
      003103 2D D2                    6 	.word xpush  
      003105                       5104 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      003105 30 FE                    1 	.word LINK 
                           003107     2 	LINK=.
      003107                          3 PORTI:
      003107 15                       4 	.byte 5+F_IFUNC   	
      003108 50 4F 52 54 49           5 	.ascii "PORTI"
      00310D 2C 18                    6 	.word const_porti  
      00310F                       5105 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      00310F 31 07                    1 	.word LINK 
                           003111     2 	LINK=.
      003111                          3 PORTG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003111 15                       4 	.byte 5+F_IFUNC   	
      003112 50 4F 52 54 47           5 	.ascii "PORTG"
      003117 2C 13                    6 	.word const_portg  
      003119                       5106 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      003119 31 11                    1 	.word LINK 
                           00311B     2 	LINK=.
      00311B                          3 PORTF:
      00311B 15                       4 	.byte 5+F_IFUNC   	
      00311C 50 4F 52 54 46           5 	.ascii "PORTF"
      003121 2C 0E                    6 	.word const_portf  
      003123                       5107 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      003123 31 1B                    1 	.word LINK 
                           003125     2 	LINK=.
      003125                          3 PORTE:
      003125 15                       4 	.byte 5+F_IFUNC   	
      003126 50 4F 52 54 45           5 	.ascii "PORTE"
      00312B 2C 09                    6 	.word const_porte  
      00312D                       5108 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      00312D 31 25                    1 	.word LINK 
                           00312F     2 	LINK=.
      00312F                          3 PORTD:
      00312F 15                       4 	.byte 5+F_IFUNC   	
      003130 50 4F 52 54 44           5 	.ascii "PORTD"
      003135 2C 04                    6 	.word const_portd  
      003137                       5109 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003137 31 2F                    1 	.word LINK 
                           003139     2 	LINK=.
      003139                          3 PORTC:
      003139 15                       4 	.byte 5+F_IFUNC   	
      00313A 50 4F 52 54 43           5 	.ascii "PORTC"
      00313F 2B FF                    6 	.word const_portc  
      003141                       5110 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      003141 31 39                    1 	.word LINK 
                           003143     2 	LINK=.
      003143                          3 PORTB:
      003143 15                       4 	.byte 5+F_IFUNC   	
      003144 50 4F 52 54 42           5 	.ascii "PORTB"
      003149 2B FA                    6 	.word const_portb  
      00314B                       5111 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      00314B 31 43                    1 	.word LINK 
                           00314D     2 	LINK=.
      00314D                          3 PORTA:
      00314D 15                       4 	.byte 5+F_IFUNC   	
      00314E 50 4F 52 54 41           5 	.ascii "PORTA"
      003153 2B F5                    6 	.word const_porta  
      003155                       5112 	_dict_entry 5,PRINT,cmd_print 
      003155 31 4D                    1 	.word LINK 
                           003157     2 	LINK=.
      003157                          3 PRINT:
      003157 05                       4 	.byte 5   	
      003158 50 52 49 4E 54           5 	.ascii "PRINT"
      00315D 1D 31                    6 	.word cmd_print  
      00315F                       5113 	_dict_entry,4+F_IFUNC,POUT,const_output
      00315F 31 57                    1 	.word LINK 
                           003161     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      003161                          3 POUT:
      003161 14                       4 	.byte 4+F_IFUNC   	
      003162 50 4F 55 54              5 	.ascii "POUT"
      003166 2C 36                    6 	.word const_output  
      003168                       5114 	_dict_entry,3+F_IFUNC,POP,xpop 
      003168 31 61                    1 	.word LINK 
                           00316A     2 	LINK=.
      00316A                          3 POP:
      00316A 13                       4 	.byte 3+F_IFUNC   	
      00316B 50 4F 50                 5 	.ascii "POP"
      00316E 2D D6                    6 	.word xpop  
      003170                       5115 	_dict_entry,4,POKE,poke 
      003170 31 6A                    1 	.word LINK 
                           003172     2 	LINK=.
      003172                          3 POKE:
      003172 04                       4 	.byte 4   	
      003173 50 4F 4B 45              5 	.ascii "POKE"
      003177 1F 4D                    6 	.word poke  
      003179                       5116 	_dict_entry,5,PMODE,pin_mode 
      003179 31 72                    1 	.word LINK 
                           00317B     2 	LINK=.
      00317B                          3 PMODE:
      00317B 05                       4 	.byte 5   	
      00317C 50 4D 4F 44 45           5 	.ascii "PMODE"
      003181 29 60                    6 	.word pin_mode  
      003183                       5117 	_dict_entry,4+F_IFUNC,PINP,const_input
      003183 31 7B                    1 	.word LINK 
                           003185     2 	LINK=.
      003185                          3 PINP:
      003185 14                       4 	.byte 4+F_IFUNC   	
      003186 50 49 4E 50              5 	.ascii "PINP"
      00318A 2C 3B                    6 	.word const_input  
      00318C                       5118 	_dict_entry,4+F_IFUNC,PICK,xpick 
      00318C 31 85                    1 	.word LINK 
                           00318E     2 	LINK=.
      00318E                          3 PICK:
      00318E 14                       4 	.byte 4+F_IFUNC   	
      00318F 50 49 43 4B              5 	.ascii "PICK"
      003193 2E 94                    6 	.word xpick  
      003195                       5119 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003195 31 8E                    1 	.word LINK 
                           003197     2 	LINK=.
      003197                          3 PEEK:
      003197 14                       4 	.byte 4+F_IFUNC   	
      003198 50 45 45 4B              5 	.ascii "PEEK"
      00319C 1F 6E                    6 	.word peek  
      00319E                       5120 	_dict_entry,5,PAUSE,pause 
      00319E 31 97                    1 	.word LINK 
                           0031A0     2 	LINK=.
      0031A0                          3 PAUSE:
      0031A0 05                       4 	.byte 5   	
      0031A1 50 41 55 53 45           5 	.ascii "PAUSE"
      0031A6 28 69                    6 	.word pause  
      0031A8                       5121 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      0031A8 31 A0                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



                           0031AA     2 	LINK=.
      0031AA                          3 PAD:
      0031AA 13                       4 	.byte 3+F_IFUNC   	
      0031AB 50 41 44                 5 	.ascii "PAD"
      0031AE 2D CD                    6 	.word pad_ref  
      0031B0                       5122 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      0031B0 31 AA                    1 	.word LINK 
                           0031B2     2 	LINK=.
      0031B2                          3 OR:
      0031B2 92                       4 	.byte 2+F_OR   	
      0031B3 4F 52                    5 	.ascii "OR"
      0031B5 00 89                    6 	.word TK_OR  
      0031B7                       5123 	_dict_entry,2,ON,cmd_on 
      0031B7 31 B2                    1 	.word LINK 
                           0031B9     2 	LINK=.
      0031B9                          3 ON:
      0031B9 02                       4 	.byte 2   	
      0031BA 4F 4E                    5 	.ascii "ON"
      0031BC 21 4B                    6 	.word cmd_on  
      0031BE                       5124 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0031BE 31 B9                    1 	.word LINK 
                           0031C0     2 	LINK=.
      0031C0                          3 ODR:
      0031C0 13                       4 	.byte 3+F_IFUNC   	
      0031C1 4F 44 52                 5 	.ascii "ODR"
      0031C4 2C 1D                    6 	.word const_odr  
      0031C6                       5125 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0031C6 31 C0                    1 	.word LINK 
                           0031C8     2 	LINK=.
      0031C8                          3 NOT:
      0031C8 73                       4 	.byte 3+F_NOT   	
      0031C9 4E 4F 54                 5 	.ascii "NOT"
      0031CC 00 87                    6 	.word TK_NOT  
      0031CE                       5126 	_dict_entry,4,NEXT,next 
      0031CE 31 C8                    1 	.word LINK 
                           0031D0     2 	LINK=.
      0031D0                          3 NEXT:
      0031D0 04                       4 	.byte 4   	
      0031D1 4E 45 58 54              5 	.ascii "NEXT"
      0031D5 20 64                    6 	.word next  
      0031D7                       5127 	_dict_entry,3,NEW,new
      0031D7 31 D0                    1 	.word LINK 
                           0031D9     2 	LINK=.
      0031D9                          3 NEW:
      0031D9 03                       4 	.byte 3   	
      0031DA 4E 45 57                 5 	.ascii "NEW"
      0031DD 24 D4                    6 	.word new  
      0031DF                       5128 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0031DF 31 D9                    1 	.word LINK 
                           0031E1     2 	LINK=.
      0031E1                          3 LSHIFT:
      0031E1 16                       4 	.byte 6+F_IFUNC   	
      0031E2 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0031E8 28 F9                    6 	.word lshift  
      0031EA                       5129 	_dict_entry,4+F_IFUNC,LOG2,log2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



      0031EA 31 E1                    1 	.word LINK 
                           0031EC     2 	LINK=.
      0031EC                          3 LOG2:
      0031EC 14                       4 	.byte 4+F_IFUNC   	
      0031ED 4C 4F 47 32              5 	.ascii "LOG2"
      0031F1 2B 5C                    6 	.word log2  
      0031F3                       5130 	_dict_entry 4,LIST,cmd_list
      0031F3 31 EC                    1 	.word LINK 
                           0031F5     2 	LINK=.
      0031F5                          3 LIST:
      0031F5 04                       4 	.byte 4   	
      0031F6 4C 49 53 54              5 	.ascii "LIST"
      0031FA 1B F5                    6 	.word cmd_list  
      0031FC                       5131 	_dict_entry 3,LET,let 
      0031FC 31 F5                    1 	.word LINK 
                           0031FE     2 	LINK=.
      0031FE                          3 LET:
      0031FE 03                       4 	.byte 3   	
      0031FF 4C 45 54                 5 	.ascii "LET"
      003202 1A 04                    6 	.word let  
      003204                       5132 	_dict_entry,3+F_CFUNC,KEY,key 
      003204 31 FE                    1 	.word LINK 
                           003206     2 	LINK=.
      003206                          3 KEY:
      003206 23                       4 	.byte 3+F_CFUNC   	
      003207 4B 45 59                 5 	.ascii "KEY"
      00320A 27 FC                    6 	.word key  
      00320C                       5133 	_dict_entry,7,IWDGREF,refresh_iwdg
      00320C 32 06                    1 	.word LINK 
                           00320E     2 	LINK=.
      00320E                          3 IWDGREF:
      00320E 07                       4 	.byte 7   	
      00320F 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      003216 2B 57                    6 	.word refresh_iwdg  
      003218                       5134 	_dict_entry,6,IWDGEN,enable_iwdg
      003218 32 0E                    1 	.word LINK 
                           00321A     2 	LINK=.
      00321A                          3 IWDGEN:
      00321A 06                       4 	.byte 6   	
      00321B 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003221 2B 19                    6 	.word enable_iwdg  
      003223                       5135 	_dict_entry,5,INPUT,input_var  
      003223 32 1A                    1 	.word LINK 
                           003225     2 	LINK=.
      003225                          3 INPUT:
      003225 05                       4 	.byte 5   	
      003226 49 4E 50 55 54           5 	.ascii "INPUT"
      00322B 1D CD                    6 	.word input_var  
      00322D                       5136 	_dict_entry,2,IF,if 
      00322D 32 25                    1 	.word LINK 
                           00322F     2 	LINK=.
      00322F                          3 IF:
      00322F 02                       4 	.byte 2   	
      003230 49 46                    5 	.ascii "IF"
      003232 1F 8F                    6 	.word if  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003234                       5137 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003234 32 2F                    1 	.word LINK 
                           003236     2 	LINK=.
      003236                          3 IDR:
      003236 13                       4 	.byte 3+F_IFUNC   	
      003237 49 44 52                 5 	.ascii "IDR"
      00323A 2C 22                    6 	.word const_idr  
      00323C                       5138 	_dict_entry,3,HEX,hex_base
      00323C 32 36                    1 	.word LINK 
                           00323E     2 	LINK=.
      00323E                          3 HEX:
      00323E 03                       4 	.byte 3   	
      00323F 48 45 58                 5 	.ascii "HEX"
      003242 19 B9                    6 	.word hex_base  
      003244                       5139 	_dict_entry,4,GOTO,goto 
      003244 32 3E                    1 	.word LINK 
                           003246     2 	LINK=.
      003246                          3 GOTO:
      003246 04                       4 	.byte 4   	
      003247 47 4F 54 4F              5 	.ascii "GOTO"
      00324B 21 D6                    6 	.word goto  
      00324D                       5140 	_dict_entry,5,GOSUB,gosub 
      00324D 32 46                    1 	.word LINK 
                           00324F     2 	LINK=.
      00324F                          3 GOSUB:
      00324F 05                       4 	.byte 5   	
      003250 47 4F 53 55 42           5 	.ascii "GOSUB"
      003255 21 E9                    6 	.word gosub  
      003257                       5141 	_dict_entry,3,GET,cmd_get 
      003257 32 4F                    1 	.word LINK 
                           003259     2 	LINK=.
      003259                          3 GET:
      003259 03                       4 	.byte 3   	
      00325A 47 45 54                 5 	.ascii "GET"
      00325D 22 E8                    6 	.word cmd_get  
      00325F                       5142 	_dict_entry,4+F_IFUNC,FREE,free
      00325F 32 59                    1 	.word LINK 
                           003261     2 	LINK=.
      003261                          3 FREE:
      003261 14                       4 	.byte 4+F_IFUNC   	
      003262 46 52 45 45              5 	.ascii "FREE"
      003266 19 C3                    6 	.word free  
      003268                       5143 	_dict_entry,3,FOR,for 
      003268 32 61                    1 	.word LINK 
                           00326A     2 	LINK=.
      00326A                          3 FOR:
      00326A 03                       4 	.byte 3   	
      00326B 46 4F 52                 5 	.ascii "FOR"
      00326E 1F AC                    6 	.word for  
      003270                       5144 	_dict_entry,4,FCPU,fcpu 
      003270 32 6A                    1 	.word LINK 
                           003272     2 	LINK=.
      003272                          3 FCPU:
      003272 04                       4 	.byte 4   	
      003273 46 43 50 55              5 	.ascii "FCPU"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      003277 29 51                    6 	.word fcpu  
      003279                       5145 	_dict_entry,5,ERASE,cmd_erase 
      003279 32 72                    1 	.word LINK 
                           00327B     2 	LINK=.
      00327B                          3 ERASE:
      00327B 05                       4 	.byte 5   	
      00327C 45 52 41 53 45           5 	.ascii "ERASE"
      003281 25 34                    6 	.word cmd_erase  
      003283                       5146 	_dict_entry,3,END,cmd_end  
      003283 32 7B                    1 	.word LINK 
                           003285     2 	LINK=.
      003285                          3 END:
      003285 03                       4 	.byte 3   	
      003286 45 4E 44                 5 	.ascii "END"
      003289 22 BC                    6 	.word cmd_end  
      00328B                       5147 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      00328B 32 85                    1 	.word LINK 
                           00328D     2 	LINK=.
      00328D                          3 EEPROM:
      00328D 16                       4 	.byte 6+F_IFUNC   	
      00328E 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003294 2C 40                    6 	.word const_eeprom_base  
      003296                       5148 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003296 32 8D                    1 	.word LINK 
                           003298     2 	LINK=.
      003298                          3 EEFREE:
      003298 16                       4 	.byte 6+F_IFUNC   	
      003299 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00329F 1A 58                    6 	.word func_eefree  
      0032A1                       5149 	_dict_entry,4,EDIT,cmd_edit 
      0032A1 32 98                    1 	.word LINK 
                           0032A3     2 	LINK=.
      0032A3                          3 EDIT:
      0032A3 04                       4 	.byte 4   	
      0032A4 45 44 49 54              5 	.ascii "EDIT"
      0032A8 1C CC                    6 	.word cmd_edit  
      0032AA                       5150 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0032AA 32 A3                    1 	.word LINK 
                           0032AC     2 	LINK=.
      0032AC                          3 DWRITE:
      0032AC 06                       4 	.byte 6+F_CMD   	
      0032AD 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0032B3 24 3E                    6 	.word digital_write  
      0032B5                       5151 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      0032B5 32 AC                    1 	.word LINK 
                           0032B7     2 	LINK=.
      0032B7                          3 DROP:
      0032B7 04                       4 	.byte 4   	
      0032B8 44 52 4F 50              5 	.ascii "DROP"
      0032BC 2E 16                    6 	.word xdrop  
      0032BE                       5152 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0032BE 32 B7                    1 	.word LINK 
                           0032C0     2 	LINK=.
      0032C0                          3 DREAD:
      0032C0 15                       4 	.byte 5+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      0032C1 44 52 45 41 44           5 	.ascii "DREAD"
      0032C6 24 07                    6 	.word digital_read  
      0032C8                       5153 	_dict_entry,2,DO,do_loop
      0032C8 32 C0                    1 	.word LINK 
                           0032CA     2 	LINK=.
      0032CA                          3 DO:
      0032CA 02                       4 	.byte 2   	
      0032CB 44 4F                    5 	.ascii "DO"
      0032CD 2B AF                    6 	.word do_loop  
      0032CF                       5154 	_dict_entry,3,DIR,cmd_dir
      0032CF 32 CA                    1 	.word LINK 
                           0032D1     2 	LINK=.
      0032D1                          3 DIR:
      0032D1 03                       4 	.byte 3   	
      0032D2 44 49 52                 5 	.ascii "DIR"
      0032D5 26 EE                    6 	.word cmd_dir  
      0032D7                       5155 	_dict_entry,3,DIM,cmd_dim 
      0032D7 32 D1                    1 	.word LINK 
                           0032D9     2 	LINK=.
      0032D9                          3 DIM:
      0032D9 03                       4 	.byte 3   	
      0032DA 44 49 4D                 5 	.ascii "DIM"
      0032DD 1A D5                    6 	.word cmd_dim  
      0032DF                       5156 	_dict_entry,3,DEC,dec_base
      0032DF 32 D9                    1 	.word LINK 
                           0032E1     2 	LINK=.
      0032E1                          3 DEC:
      0032E1 03                       4 	.byte 3   	
      0032E2 44 45 43                 5 	.ascii "DEC"
      0032E5 19 BE                    6 	.word dec_base  
      0032E7                       5157 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0032E7 32 E1                    1 	.word LINK 
                           0032E9     2 	LINK=.
      0032E9                          3 DDR:
      0032E9 13                       4 	.byte 3+F_IFUNC   	
      0032EA 44 44 52                 5 	.ascii "DDR"
      0032ED 2C 27                    6 	.word const_ddr  
      0032EF                       5158 	_dict_entry,4,DATA,data  
      0032EF 32 E9                    1 	.word LINK 
                           0032F1     2 	LINK=.
      0032F1                          3 DATA:
      0032F1 04                       4 	.byte 4   	
      0032F2 44 41 54 41              5 	.ascii "DATA"
      0032F6 2C 45                    6 	.word data  
      0032F8                       5159 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      0032F8 32 F1                    1 	.word LINK 
                           0032FA     2 	LINK=.
      0032FA                          3 CR2:
      0032FA 13                       4 	.byte 3+F_IFUNC   	
      0032FB 43 52 32                 5 	.ascii "CR2"
      0032FE 2C 31                    6 	.word const_cr2  
      003300                       5160 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      003300 32 FA                    1 	.word LINK 
                           003302     2 	LINK=.
      003302                          3 CR1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      003302 13                       4 	.byte 3+F_IFUNC   	
      003303 43 52 31                 5 	.ascii "CR1"
      003306 2C 2C                    6 	.word const_cr1  
      003308                       5161 	_dict_entry,5,CONST,cmd_const 
      003308 33 02                    1 	.word LINK 
                           00330A     2 	LINK=.
      00330A                          3 CONST:
      00330A 05                       4 	.byte 5   	
      00330B 43 4F 4E 53 54           5 	.ascii "CONST"
      003310 1A C8                    6 	.word cmd_const  
      003312                       5162 	_dict_entry,4+F_CFUNC,CHAR,func_char
      003312 33 0A                    1 	.word LINK 
                           003314     2 	LINK=.
      003314                          3 CHAR:
      003314 24                       4 	.byte 4+F_CFUNC   	
      003315 43 48 41 52              5 	.ascii "CHAR"
      003319 27 A6                    6 	.word func_char  
      00331B                       5163 	_dict_entry,5,CHAIN,cmd_chain
      00331B 33 14                    1 	.word LINK 
                           00331D     2 	LINK=.
      00331D                          3 CHAIN:
      00331D 05                       4 	.byte 5   	
      00331E 43 48 41 49 4E           5 	.ascii "CHAIN"
      003323 2F 41                    6 	.word cmd_chain  
      003325                       5164 	_dict_entry,3,BYE,bye 
      003325 33 1D                    1 	.word LINK 
                           003327     2 	LINK=.
      003327                          3 BYE:
      003327 03                       4 	.byte 3   	
      003328 42 59 45                 5 	.ascii "BYE"
      00332B 28 55                    6 	.word bye  
      00332D                       5165 	_dict_entry,5,BTOGL,bit_toggle
      00332D 33 27                    1 	.word LINK 
                           00332F     2 	LINK=.
      00332F                          3 BTOGL:
      00332F 05                       4 	.byte 5   	
      003330 42 54 4F 47 4C           5 	.ascii "BTOGL"
      003335 1E F4                    6 	.word bit_toggle  
      003337                       5166 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      003337 33 2F                    1 	.word LINK 
                           003339     2 	LINK=.
      003339                          3 BTEST:
      003339 15                       4 	.byte 5+F_IFUNC   	
      00333A 42 54 45 53 54           5 	.ascii "BTEST"
      00333F 1F 16                    6 	.word bit_test  
      003341                       5167 	_dict_entry,4,BSET,bit_set 
      003341 33 39                    1 	.word LINK 
                           003343     2 	LINK=.
      003343                          3 BSET:
      003343 04                       4 	.byte 4   	
      003344 42 53 45 54              5 	.ascii "BSET"
      003348 1E AF                    6 	.word bit_set  
      00334A                       5168 	_dict_entry,4,BRES,bit_reset
      00334A 33 43                    1 	.word LINK 
                           00334C     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      00334C                          3 BRES:
      00334C 04                       4 	.byte 4   	
      00334D 42 52 45 53              5 	.ascii "BRES"
      003351 1E D1                    6 	.word bit_reset  
      003353                       5169 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003353 33 4C                    1 	.word LINK 
                           003355     2 	LINK=.
      003355                          3 BIT:
      003355 13                       4 	.byte 3+F_IFUNC   	
      003356 42 49 54                 5 	.ascii "BIT"
      003359 2B 89                    6 	.word bitmask  
      00335B                       5170 	_dict_entry,3,AWU,awu 
      00335B 33 55                    1 	.word LINK 
                           00335D     2 	LINK=.
      00335D                          3 AWU:
      00335D 03                       4 	.byte 3   	
      00335E 41 57 55                 5 	.ascii "AWU"
      003361 28 89                    6 	.word awu  
      003363                       5171 	_dict_entry,7,AUTORUN,cmd_auto_run
      003363 33 5D                    1 	.word LINK 
                           003365     2 	LINK=.
      003365                          3 AUTORUN:
      003365 07                       4 	.byte 7   	
      003366 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      00336D 2E AE                    6 	.word cmd_auto_run  
      00336F                       5172 	_dict_entry,3+F_IFUNC,ASC,ascii
      00336F 33 65                    1 	.word LINK 
                           003371     2 	LINK=.
      003371                          3 ASC:
      003371 13                       4 	.byte 3+F_IFUNC   	
      003372 41 53 43                 5 	.ascii "ASC"
      003375 27 BD                    6 	.word ascii  
      003377                       5173 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      003377 33 71                    1 	.word LINK 
                           003379     2 	LINK=.
      003379                          3 AND:
      003379 83                       4 	.byte 3+F_AND   	
      00337A 41 4E 44                 5 	.ascii "AND"
      00337D 00 88                    6 	.word TK_AND  
      00337F                       5174 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      00337F 33 79                    1 	.word LINK 
                           003381     2 	LINK=.
      003381                          3 ALLOC:
      003381 05                       4 	.byte 5   	
      003382 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      003387 2D E0                    6 	.word xalloc  
      003389                       5175 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      003389 33 81                    1 	.word LINK 
                           00338B     2 	LINK=.
      00338B                          3 ADCREAD:
      00338B 17                       4 	.byte 7+F_IFUNC   	
      00338C 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003393 23 CB                    6 	.word analog_read  
      003395                       5176 	_dict_entry,5,ADCON,power_adc 
      003395 33 8B                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



                           003397     2 	LINK=.
      003397                          3 ADCON:
      003397 05                       4 	.byte 5   	
      003398 41 44 43 4F 4E           5 	.ascii "ADCON"
      00339D 23 7B                    6 	.word power_adc  
      00339F                       5177 kword_dict::
      00339F                       5178 	_dict_entry,3+F_IFUNC,ABS,abs
      00339F 33 97                    1 	.word LINK 
                           0033A1     2 	LINK=.
      0033A1                          3 ABS:
      0033A1 13                       4 	.byte 3+F_IFUNC   	
      0033A2 41 42 53                 5 	.ascii "ABS"
      0033A5 28 E2                    6 	.word abs  
                                   5179 
                                   5180 
                                   5181 
                                   5182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000000    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                                     19 LOOP_CNT=10000
                                     20 VAL1=0x2ffff ; 196607
                                     21 VAL2=0x2a    ; 42  
                                     22 VAL3=3 
                                     23 VAL4=0X5FF   ; 1535 
                                     24 VAL5=-3 
                                     25 ; test code
                                     26     T=1    ; .word 
                                     27     CNTR=3 ; .word 
                                     28     A32=5  ; .blkw 2
                                     29     VSIZE= 8 
                                     30 test:
                                     31     _vars VSIZE 
                                     32     ldw x,#LOOP_CNT
                                     33     ldw (CNTR,sp),x  
                                     34     ldw x,ticks 
                                     35     ldw (T,sp),x
                                     36 1$: ; test add24 
                                     37     ld a,#(VAL1>>16)&0XFF
                                     38     ldw x,#VAL1&0XFFFF
                                     39     ld acc24,a 
                                     40     ldw acc24+1,x  
                                     41     ld a,#(VAL4>>16)&0XFF
                                     42     ldw x,#(VAL4&0XFFFF)
                                     43     call add24 
                                     44     ldw x,(CNTR,sp)
                                     45     subw x,#1
                                     46     ldw (CNTR,sp),x 
                                     47     jrne 1$
                                     48     call prt_acc24
                                     49     ld a,#SPACE 
                                     50     call putc 
                                     51     ldw x,ticks 
                                     52     subw x,(T,sp)
                                     53     call prt_i16  
                                     54     ld a,#CR 
                                     55     call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



                                     56 
                                     57 ; test mul24     
                                     58     ldw x,LOOP_CNT
                                     59     ldw (CNTR,sp),x 
                                     60     ldw x,ticks 
                                     61     ldw (T,sp),x 
                                     62 2$: 
                                     63     ld a,#(VAL1>>16)&0XFF
                                     64     ldw x,#VAL1&0XFFFF
                                     65     ld acc24,a 
                                     66     ldw acc24+1,x  
                                     67     ld a,#(VAL2>>16)&0XFF
                                     68     ldw x,#(VAL2&0XFFFF)
                                     69     call mul24 
                                     70     ldw x,(CNTR,sp)
                                     71     subw x,#1
                                     72     ldw (CNTR,sp),x 
                                     73     jrne 2$ 
                                     74    call prt_acc24 
                                     75    ld a,#SPACE 
                                     76    call putc 
                                     77     ldw x,ticks 
                                     78     subw x,(T,sp)
                                     79     call prt_i16 
                                     80     ld a,#CR 
                                     81     call putc 
                                     82 ; test mul24 with overflow     
                                     83     ldw x,LOOP_CNT
                                     84     ldw (CNTR,sp),x 
                                     85     ldw x,ticks 
                                     86     ldw (T,sp),x 
                                     87 3$: 
                                     88     ld a,#(VAL1>>16)&0XFF
                                     89     ldw x,#VAL1&0XFFFF
                                     90     ld acc24,a 
                                     91     ldw acc24+1,x  
                                     92     ld a,#(VAL4>>16)&0XFF
                                     93     ldw x,#(VAL4&0XFFFF)
                                     94     call mul24 
                                     95     ldw x,(CNTR,sp)
                                     96     subw x,#1
                                     97     ldw (CNTR,sp),x 
                                     98     jrne 3$ 
                                     99     call prt_acc24    
                                    100     ld a,#SPACE 
                                    101     call putc 
                                    102     ldw x,ticks 
                                    103     subw x,(T,sp)
                                    104     call prt_i16 
                                    105     ld a,#CR 
                                    106     call putc 
                                    107 ; test mul24  with negative result   
                                    108     ldw x,LOOP_CNT
                                    109     ldw (CNTR,sp),x 
                                    110     ldw x,ticks 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



                                    111     ldw (T,sp),x 
                                    112 4$:
                                    113     ld a,#(VAL1>>16)&0XFF
                                    114     ldw x,#VAL1&0XFFFF
                                    115     ld acc24,a 
                                    116     ldw acc24+1,x  
                                    117     ld a,#(VAL5>>16)&0XFF
                                    118     ldw x,#(VAL5&0XFFFF)
                                    119     call mul24 
                                    120     ldw x,(CNTR,sp)
                                    121     subw x,#1
                                    122     ldw (CNTR,sp),x 
                                    123     jrne 4$ 
                                    124     call prt_acc24 
                                    125     ld a,#SPACE 
                                    126     call putc 
                                    127     ldw x,ticks 
                                    128     subw x,(T,sp)
                                    129     call prt_i16 
                                    130     ld a,#CR 
                                    131     call putc 
                                    132 ; test abs24 
                                    133     ldw x,LOOP_CNT
                                    134     ldw (CNTR,sp),x 
                                    135     ldw x,ticks 
                                    136     ldw (T,sp),x 
                                    137 5$: 
                                    138     ld a,#0xff
                                    139     ldw x,#0xffff
                                    140     call abs24 
                                    141     ld acc24,a 
                                    142     ldw acc24+1,x
                                    143     ldw x,(CNTR,sp)
                                    144     subw x,#1
                                    145     ldw (CNTR,sp),x 
                                    146     jrne 5$ 
                                    147     call prt_acc24 
                                    148     ld a,#SPACE 
                                    149     call putc 
                                    150     ldw x,ticks 
                                    151     subw x,(T,sp)
                                    152     call prt_i16 
                                    153 6$:
                                    154     ld a,#CR 
                                    155     call putc 
                                    156     call read_integer 
                                    157     mov farptr,acc24 
                                    158     mov farptr+1,acc16 
                                    159     mov farptr+2,acc8 
                                    160     call read_integer 
                                    161     ld a,acc24 
                                    162     ldw x,acc16 
                                    163     mov acc24,farptr 
                                    164     mov acc16,farptr+1
                                    165     mov acc8,farptr+2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



                                    166     call div24 
                                    167     push a 
                                    168     pushw x 
                                    169     call prt_acc24 
                                    170     ld a,#SPACE 
                                    171     call putc 
                                    172     popw x
                                    173     ldw acc16,x  
                                    174     pop acc24 
                                    175     call prt_acc24
                                    176     jra 6$
                                    177     _drop VSIZE 
                                    178     ret 
                                    179 
                                    180 
                                    181 read_integer:
                                    182     ld a,#'? 
                                    183     call putc  
                                    184 	clr count  
                                    185 	call readln 
                                    186 	ldw x,#tib 
                                    187 	push count
                                    188 	push #0 
                                    189 	addw x,(1,sp)
                                    190 	incw x 
                                    191 	_drop 2 
                                    192 	clr in 
                                    193 	call get_token
                                    194 	cp a,#TK_INTGR
                                    195 	jreq 3$ 
                                    196 	cp a,#TK_MINUS
                                    197 	call get_token 
                                    198 	cp a,#TK_INTGR 
                                    199 	jreq 2$
                                    200 	jp syntax_error
                                    201 2$:
                                    202 	call neg_acc24  	
                                    203 3$: 
                                    204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003400                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003400                         30 app_space::
      003400 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003402 00 00                   32 app_size: .word 0 
      003404                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   4 ABS        0033A1 R   |     ACK     =  000006 
  4 ADCON      003397 R   |   4 ADCREAD    00338B R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   4 ALLOC      003381 R   |   4 AND        003379 R
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 AR_SIGN    002F05 R   |   4 ASC        003371 R   |     ATMP    =  000001 
    ATTRIB  =  000002     |   4 AUTORUN    003365 R   |   4 AUTO_RUN   00015C R
  4 AWU        00335D R   |   4 AWUHandl   000004 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |     BCNT    =  000001 
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
  4 BIT        003355 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCKS  =  000005     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       00334C R
    BS      =  000008     |   4 BSET       003343 R   |     BSIZE   =  000006 
  4 BTEST      003339 R   |   4 BTOGL      00332F R   |     BTW     =  000001 
  4 BYE        003327 R   |     C       =  000001     |     CAN     =  000018 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAIN      00331D R
    CHAIN_AD=  000005     |     CHAIN_BP=  000007     |     CHAIN_CN=  000008 
    CHAIN_CO=  00000A     |     CHAIN_IN=  000009     |     CHAIN_LN=  000003 
    CHAIN_TX=  00000B     |     CHAIN_TX=  00000D     |   4 CHAR       003314 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000004 
    CNT_LO  =  000004     |     CODE_ADD=  000001     |     COLON   =  00003A 
    COMMA   =  00002C     |   4 CONST      00330A R   |     COUNT   =  000003 
    CPOS    =  000003     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   4 CR1        003302 R   |   4 CR2        0032FA R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       0032F1 R
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        0032E9 R   |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   4 DEC        0032E1 R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        0032D9 R   |   4 DIR        0032D1 R   |     DISCARD =  000004 
    DIVISOR =  000001     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   4 DO         0032CA R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |   4 DREAD      0032C0 R
  4 DROP       0032B7 R   |   4 DWRITE     0032AC R   |   4 EDIT       0032A3 R
  4 EEFREE     003298 R   |   4 EEPROM     00328D R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     EM      =  000019 
  4 END        003285 R   |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      00327B R   |   4 ERASED     0026C9 R
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_NO_P=  000012 
    ERR_OVER=  000010     |     ERR_RD_O=  000011     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   4 FCPU       003272 R
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |   4 FLASH_ME   001BD5 R   |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLN_REJE=  000006     |     FLOOP   =  000002     |     FLSI    =  01F400 
  4 FOR        00326A R   |   4 FREE       003261 R   |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        003259 R   |   4 GOSUB      00324F R   |   4 GOTO       003246 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        00323E R
    HOME    =  000082     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   4 IDR        003236 R
  4 IF         00322F R   |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      003225 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT24   =  000005     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  00000B 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  4 IWDGEN     00321A R   |   4 IWDGREF    00320E R   |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        003206 R   |     KEY_END =  000083     |     KW_TYPE_=  0000F0 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        0031FE R   |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |   4 LINES_RE   001CA3 R   |   4 LINK    =  0033A1 R
  4 LIST       0031F5 R   |     LL      =  000001     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   4 LOG2       0031EC R
  4 LSHIFT     0031E1 R   |     MAJOR   =  000002     |     MASK    =  000002 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000001 
    N1      =  000005     |     NAFR    =  004804     |     NAK     =  000015 
    NAMEPTR =  000001     |     NAME_MAX=  00000F     |     NCLKOPT =  004808 
    NEG     =  000001     |   4 NEW        0031D9 R   |   4 NEXT       0031D0 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
    NLEN_MAS=  00000F     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        0031C8 R   |     NOT_OP  =  000001     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R
  4 ODR        0031C0 R   |   4 ON         0031B9 R   |     ONOFF   =  000003 
    OP      =  000002     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   4 OR         0031B2 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        0031AA R   |     PAD_SIZE=  000080 
  4 PAUSE      0031A0 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   4 PEEK       003197 R
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PG_SIZE =  000001 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |   4 PICK       00318E R
    PINNO   =  000001     |   4 PINP       003185 R   |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      00317B R   |     PNAME   =  000003     |   4 POKE       003172 R
  4 POP        00316A R   |   4 PORTA      00314D R   |   4 PORTB      003143 R
  4 PORTC      003139 R   |   4 PORTD      00312F R   |   4 PORTE      003125 R
  4 PORTF      00311B R   |   4 PORTG      003111 R   |   4 PORTI      003107 R
  4 POUT       003161 R   |     PREV    =  000001     |     PRG_SIZE=  000003 
  4 PRINT      003157 R   |     PROD    =  000001     |     PROD_SIG=  000004 
  4 PROG_ADD   001BAB R   |   4 PROG_SIZ   001BBD R   |     PSTR    =  000003 
  4 PUSH       0030FE R   |   4 PUT        0030F6 R   |   4 QKEY       0030ED R
    QSIGN   =  000005     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
  4 RAM_MEM    001BE6 R   |     RAM_SIZE=  001800     |   4 READ       0030E4 R
  4 REBOOT     0030D9 R   |     RECLEN  =  000005     |     REC_LEN =  000003 
    REC_XTRA=  000005     |     RELOP   =  000001     |   4 REM        0030D1 R
  4 RESTORE    0030C5 R   |     RETL1   =  000001     |   4 RETURN     0030BA R
    RET_ADDR=  000001     |     RET_BPTR=  000003     |     RET_INW =  000005 
  4 RND        0030B2 R   |     RONLY   =  000005     |     ROP     =  004800 
    RS      =  00001E     |   4 RSHIFT     0030A7 R   |     RSIGN   =  000006 
    RST_SR  =  0050B3     |   4 RUN        00309F R   |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |   4 SAVE       003096 R   |     SEMIC   =  00003B 
    SEMICOL =  000001     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   0026C7 R   |   4 SIZE       00308D R
    SKIP    =  000005     |   4 SLEEP      003083 R   |     SLEN    =  000002 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      003079 R   |   4 SPIRD      00306F R   |   4 SPISEL     003064 R
  4 SPIWR      00305A R   |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  00008C 
  4 STEP       003051 R   |   4 STOP       003048 R   |     STR     =  000002 
  4 STR_BYTE   001BCE R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
  4 SysCall    000012 R   |     TAB     =  000009     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      00303E R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  4 TIMEOUT    003032 R   |   4 TIMER      003028 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000088     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  000009     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_NOT  =  000087     |     TK_OR   =  000089     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000007     |     TK_SEMIC=  00000A 
    TK_VAR  =  000085     |     TK_XOR  =  00008A     |   4 TO         003021 R
  4 TONE       003018 R   |     TOWRITE =  000005     |   4 Timer4Up   000013 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   4 UBOUND     00300D R   |   4 UBTN_Han   00005A R
  4 UFLASH     003002 R   |   4 UNTIL      002FF8 R   |     US      =  00001F 
  4 USER_ABO   000062 R   |   4 USR        002FF0 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   4 Uart1RxH   0005A2 R
  4 UserButt   000036 R   |     VAR_NAME=  000001     |     VSIZE   =  00000C 
    VT      =  00000B     |   4 WAIT       002FE7 R   |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WLEN    =  000001     |     WLKPTR  =  000001     |   4 WORDS      002FDD R
  4 WRITE      002FD3 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        002FCB R   |     XSAVE   =  000002 
    XSTACK_E=  001773     |     XSTACK_S=  000014     |     XTEMP   =  000001 
    YSAVE   =  000007     |     YTEMP   =  000005     |   4 abs        0028E2 R
  4 abs24      0001F3 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   0008ED R
  4 add24      00017E R   |   4 add_char   00105D R   |   4 add_spac   000E63 R
  4 analog_r   0023CB R   |   4 and_cond   0018F3 R   |   4 and_fact   0018C3 R
  4 app        003404 R   |   4 app_sign   003400 R   |   4 app_size   003402 R
  4 app_spac   003400 GR  |   4 arduino_   0029CF R   |   4 arg_list   0016EA R
  5 array_si   000020 R   |   4 ascii      0027BD R   |   4 at_tst     000CD5 R
  4 atoi24     0015F6 GR  |   4 atoi_exi   001665 R   |   4 awu        002889 R
  4 awu02      00289C R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       002342 R   |   4 beep_1kh   002315 GR  |   4 bin_exit   000B3C R
  4 bit_rese   001ED1 R   |   4 bit_set    001EAF R   |   4 bit_test   001F16 R
  4 bit_togg   001EF4 R   |   4 bitmask    002B89 R   |   4 bkslsh_t   000C82 R
  4 bksp       00068C R   |   2 block_bu   0016B8 GR  |   4 block_er   00048B R
  4 break_po   0024B6 R   |   4 bye        002855 R   |   5 chain_le   000033 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

  4 clear_au   0005D9 R   |   4 clear_ba   0011C1 R   |   4 clear_bl   0025C7 R
  4 clear_va   001121 R   |   4 clock_in   00007D R   |   4 cmd_auto   002EAE R
  4 cmd_chai   002F41 R   |   4 cmd_cons   001AC8 R   |   4 cmd_dim    001AD5 R
  4 cmd_dim1   001AD8 R   |   4 cmd_dim2   001ADE R   |   4 cmd_dir    0026EE R
  4 cmd_edit   001CCC R   |   4 cmd_end    0022BC R   |   4 cmd_eras   002534 R
  4 cmd_get    0022E8 R   |   4 cmd_line   001437 R   |   4 cmd_line   0016C2 R
  4 cmd_list   001BF5 R   |   4 cmd_name   00107D R   |   4 cmd_on     00214B R
  4 cmd_prin   001D31 R   |   4 cmd_run    00222C R   |   4 cmd_save   002629 R
  4 cmd_size   0019CC R   |   4 cold_sta   0000B5 R   |   4 colon_ts   000CA9 R
  4 comma_ts   000CB4 R   |   4 comp_msg   001394 R   |   4 compile    000DCF GR
  4 conditio   001945 R   |   4 const_cr   002C2C R   |   4 const_cr   002C31 R
  4 const_dd   002C27 R   |   4 const_ee   002C40 R   |   4 const_id   002C22 R
  4 const_in   002C3B R   |   4 const_od   002C1D R   |   4 const_ou   002C36 R
  4 const_po   002BF5 R   |   4 const_po   002BFA R   |   4 const_po   002BFF R
  4 const_po   002C04 R   |   4 const_po   002C09 R   |   4 const_po   002C0E R
  4 const_po   002C13 R   |   4 const_po   002C18 R   |   4 convert_   000AA8 R
  4 convert_   000650 R   |   4 copy_com   000D0A R   |   5 count      000002 GR
  4 cp24       0001B8 R   |   4 cp24_ax    0001EA R   |   4 cp_loop    001685 R
  4 cpl24      0001FA R   |   4 cpy_cmd_   000E4B R   |   4 cpy_quot   000E94 R
  4 cs_high    002DC8 R   |   4 dash_tst   000CCA R   |   4 data       002C45 R
  4 data_err   002CC1 R   |   5 data_len   000009 R   |   5 data_ofs   000008 R
  5 data_ptr   000006 R   |   4 dec_base   0019BE R   |   4 decomp_l   000F21 R
  4 decompil   000EE4 GR  |   4 del_line   000996 R   |   4 delete_l   000779 R
  4 delete_n   00069C R   |   4 delete_u   00073E R   |   4 digital_   002407 R
  4 digital_   00243E R   |   4 div24      000307 R   |   4 divu24_8   0002E9 R
  4 do_loop    002BAF R   |   4 do_progr   00047E R   |   4 dup24      00016F R
  5 dvar_bgn   00002F GR  |   5 dvar_end   000031 GR  |   4 enable_i   002B19 R
  4 end_at_l   001C4E R   |   4 eql_tst    000D55 R   |   4 equal      001070 R
  4 erase_ex   0004AF R   |   4 erase_fl   0004A5 R   |   4 erase_he   00260F R
  4 erase_pr   0024DF R   |   4 err_bad_   0012BD R   |   4 err_buf_   001333 R
  4 err_cmd_   001281 R   |   4 err_div0   001246 R   |   4 err_dupl   00129B R
  4 err_math   00122D R   |   4 err_mem_   001208 R   |   4 err_msg    0011E2 R
  4 err_no_a   0012C9 R   |   4 err_no_d   0012FC R   |   4 err_no_f   001320 R
  4 err_no_l   001255 R   |   4 err_no_p   00130C R   |   4 err_not_   0012AC R
  4 err_not_   001366 R   |   4 err_over   001340 R   |   4 err_read   00134A R
  4 err_run_   00126B R   |   4 err_synt   00121F R   |   4 escaped    000ABD GR
  4 expect     0016D8 R   |   4 expressi   00182C R   |   4 factor     001734 R
  5 farptr     000018 R   |   4 fcpu       002951 R   |   4 fill_wri   0025B7 R
  4 final_te   0008E6 R   |   5 flags      000022 GR  |   4 for        001FAC R
  4 free       0019C3 R   |   5 free_eep   000023 R   |   7 free_ram   000090 R
  4 func_arg   0016E5 R   |   4 func_cha   0027A6 R   |   4 func_eef   001A58 R
  4 ge         001072 R   |   4 get_addr   001537 R   |   4 get_arra   001706 R
  4 get_char   001551 R   |   4 get_esca   00065C R   |   4 get_int2   001541 R
  4 get_targ   0020D9 R   |   4 get_targ   0020E7 R   |   4 get_tick   0028DB R
  4 get_toke   000C1B GR  |   4 get_valu   001A47 R   |   4 getc       000635 GR
  4 gosub      0021E9 R   |   4 gosub_1    0021EC R   |   4 gosub_2    0021F2 R
  4 goto       0021D6 R   |   4 goto_1     0021D9 R   |   4 gt         00106E R
  4 gt_tst     000D60 R   |   4 hex_base   0019B9 R   |   4 if         001F8F R
  5 in         000001 GR  |   5 in.saved   000003 GR  |   5 in.w       000000 GR
  4 incr_far   000586 R   |   4 input_ex   001E67 R   |   4 input_lo   001DD1 R
  4 input_va   001DCD R   |   4 insert_c   0006FB R   |   4 insert_l   000A02 R
  4 interp_l   00147B R   |   4 interpre   001453 R   |   4 is_alnum   000B6F GR
  4 is_alpha   000B55 GR  |   4 is_data_   002C4B R   |   4 is_digit   000B66 GR
  4 is_erase   0026CB R   |   4 is_minus   001C14 R   |   4 is_progr   00221B R
  4 is_symbo   000B78 R   |   4 itoa       00158C GR  |   4 itoa_loo   0015AE R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

  4 jp_to_ta   0021DC R   |   4 key        0027FC R   |   4 kword_di   00339F GR
  4 kword_en   002FC9 R   |   4 le         001077 R   |   4 let        001A04 GR
  4 let_arra   001A12 R   |   4 let_dvar   0014B4 R   |   4 let_eval   001A1A R
  4 let_var    001A17 R   |   4 lines_sk   001C28 R   |   4 list_exi   001C87 R
  4 list_loo   001C65 R   |   4 log2       002B5C R   |   4 look_tar   00210A R
  4 loop_bac   0020BC R   |   5 loop_dep   00001F R   |   4 loop_don   0020D1 R
  4 lshift     0028F9 R   |   4 lt         001075 R   |   4 lt_tst     000D89 R
  4 mod24      0003A1 R   |   4 move       0010DD GR  |   4 move_dow   0010FC R
  4 move_era   00040D R   |   4 move_exi   00111D R   |   4 move_lef   0006D3 R
  4 move_loo   001101 R   |   4 move_prg   00044D R   |   4 move_rig   0006E1 R
  4 move_up    0010EE R   |   4 mul24      000279 R   |   4 mul_char   00105F R
  4 mulu24_8   00023A R   |   4 nbr_tst    000C4E R   |   4 ne         00107A R
  4 neg24      000203 R   |   4 neg_acc2   00021D R   |   4 neg_ax     000215 R
  4 new        0024D4 R   |   4 next       002064 R   |   4 next_lin   00145B R
  4 next_tok   00150F GR  |   4 no_match   001697 R   |   4 open_gap   0009CB R
  4 other      000DB2 R   |   4 overwrit   000912 R   |   2 pad        0016B8 GR
  4 pad_ref    002DCD R   |   4 parse_bi   000B1A R   |   4 parse_in   000AC5 R
  4 parse_ke   000B9B R   |   4 parse_qu   000A70 R   |   4 parse_sy   000B83 R
  4 pause      002869 R   |   4 pause02    00287C R   |   4 peek       001F6E R
  4 pin_mode   002960 R   |   4 plus_tst   000D29 R   |   4 poke       001F4D R
  4 power_ad   00237B R   |   4 prcnt_ts   000D4A R   |   4 print_he   000949 GR
  4 print_to   001579 R   |   4 prog_siz   001B64 R   |   4 program_   001B6C R
  4 program_   000427 R   |   4 program_   00044D R   |   4 prt_acc2   00156E R
  4 prt_basi   001D0D R   |   4 prt_i16    001557 R   |   4 prt_loop   001D35 R
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       000625 GR
  4 puts       000682 GR  |   4 qgetc      00062E GR  |   4 qkey       002800 GR
  4 qmark_ts   000CE0 R   |   4 qsign      0025AC R   |   4 random     0029EF R
  4 read       002CC6 R   |   4 read01     002CCE R   |   4 readln     000787 GR
  4 readln_l   000796 R   |   4 readln_q   00092F R   |   4 refresh_   002B57 R
  4 relation   001864 R   |   4 relop_st   001062 R   |   4 remark     001E6C GR
  4 reset_se   001D33 R   |   4 rest_con   001DBD R   |   4 restore    002C59 R
  4 return     002205 R   |   4 right_al   000E79 GR  |   4 row_alig   00056B R
  4 row_eras   0003E0 R   |   4 row_eras   00040D R   |   4 rparnt_t   000C9E R
  4 rshift     002925 R   |   7 rsign      00008C R   |   7 rsize      00008E R
  4 rt_msg     001382 R   |   4 run_app    00012A R   |   4 run_it     002289 R
  4 run_it_0   00228B R   |   4 runtime_   0016CD R   |   5 rx1_head   00002D R
  5 rx1_queu   000025 R   |   5 rx1_tail   00002E R   |   4 save_con   001DAD R
  4 scan_blo   000594 R   |   4 search_d   001677 GR  |   4 search_e   0016BF R
  4 search_f   0025DB R   |   4 search_l   00096B GR  |   4 search_l   00097A R
  4 search_n   001A81 R   |   4 search_n   00167B R   |   4 search_p   002F07 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   0029BF R
  4 semic_ts   000CBF R   |   4 send_esc   0006AA R   |   4 send_par   0006B5 R
  4 set_data   002C92 R   |   4 set_time   002AF7 R   |   4 single_c   001057 R
  4 skip       000C08 R   |   4 skip_str   001528 R   |   4 skip_to_   0026D6 R
  4 slash_ts   000D3F R   |   4 sleep      00285E R   |   4 software   001130 R
  4 spaces     0006EF GR  |   4 spi_clea   002D62 R   |   4 spi_disa   002D4A R
  4 spi_enab   002D17 R   |   4 spi_rcv_   002D84 R   |   4 spi_read   002DAF R
  4 spi_sele   002DB6 R   |   4 spi_send   002D6E R   |   4 spi_writ   002D8F R
  2 stack_fu   001774 GR  |   2 stack_un   001800 R   |   4 star_tst   000D34 R
  4 start_fr   001C23 R   |   4 step       002022 R   |   4 stop       002489 R
  4 store_lo   002051 R   |   4 str_matc   0016A4 R   |   4 str_tst    000C3E R
  4 strcmp     0010BC R   |   4 strcpy     0010CD GR  |   4 strlen     0010B1 GR
  4 sub24      00019B R   |   4 symb_loo   000B84 R   |   4 syntax_e   0013B5 GR
  4 system_i   001176 R   |   4 tb_error   0013B7 GR  |   4 term       0017E9 R
  4 term01     0017F1 R   |   4 term_exi   001829 R   |   2 tib        001668 GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

  4 tick_tst   000CF8 R   |   5 ticks      00000F R   |   4 timeout    002B0E R
  5 timer      000012 GR  |   4 timer2_i   000093 R   |   4 timer4_i   0000A0 R
  4 tk_id      0013A5 R   |   4 to         001FDC R   |   4 to_eepro   000476 R
  4 to_flash   00047B R   |   4 to_hex_c   000960 GR  |   4 to_upper   0015EA GR
  4 token_ch   000DC8 R   |   4 token_ex   000DCC R   |   4 tone       002320 R
  4 try_next   002C9F R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   000635 GR  |   4 uart1_in   0005E0 R   |   4 uart1_pu   000625 GR
  4 uart1_qg   00062E GR  |   4 uart1_se   0005F0 R   |   4 ubound     0019F9 R
  4 uflash     00280D R   |   4 unlock_e   0003AA R   |   4 unlock_f   0003C5 R
  4 until      002BC2 R   |   4 user_int   000049 R   |   4 usr        00282F R
  4 var_name   000EDA GR  |   5 vars       000034 GR  |   4 wait       001E72 R
  4 warm_ini   0011A3 R   |   4 warm_sta   001434 R   |   4 words      002A8A R
  4 words_co   002AE1 R   |   4 write      00273D R   |   4 write_bl   000530 GR
  4 write_bu   000467 R   |   4 write_by   0004B1 R   |   4 write_ee   0004ED R
  4 write_ex   000526 R   |   4 write_fl   0004D7 R   |   4 write_nb   000555 R
  4 xalloc     002DE0 R   |   4 xdrop      002E16 R   |   4 xpick      002E94 R
  4 xpop       002DD6 R   |   4 xpush      002DD2 R   |   4 xput       002E61 R
  4 xstack_b   002E43 R   |   2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3404   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

